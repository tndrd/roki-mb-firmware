
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001de84  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001ae84  0801e124  0801e124  0002e124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08038fa8  08038fa8  00048fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08038fb0  08038fb0  00048fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08038fb8  08038fb8  00048fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  08038fc0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003600  24000168  08039124  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003768  08039124  00053768  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050164  2**0
                  CONTENTS, READONLY
 10 .debug_info   00051e91  00000000  00000000  00050192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007629  00000000  00000000  000a2023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003680  00000000  00000000  000a9650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003400  00000000  00000000  000accd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000454ee  00000000  00000000  000b00d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ad1a  00000000  00000000  000f55be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018e962  00000000  00000000  001302d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002bec3a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f904  00000000  00000000  002bec8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000168 	.word	0x24000168
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801e10c 	.word	0x0801e10c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400016c 	.word	0x2400016c
 80002dc:	0801e10c 	.word	0x0801e10c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
	assert(spiHandle);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d105      	bne.n	80006a8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x24>
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x30>)
 800069e:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x34>)
 80006a0:	210c      	movs	r1, #12
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x38>)
 80006a4:	f01c fcde 	bl	801d064 <__assert_func>
}
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	0801e124 	.word	0x0801e124
 80006b8:	0801e130 	.word	0x0801e130
 80006bc:	0801e15c 	.word	0x0801e15c

080006c0 <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b08b      	sub	sp, #44	; 0x2c
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80006cc:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80006d2:	230c      	movs	r3, #12
 80006d4:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 faab 	bl	8000c3c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2300      	movs	r3, #0
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4b99      	ldr	r3, [pc, #612]	; (8000958 <_ZN10BHYWrapper4InitEfm+0x298>)
 80006f4:	4a99      	ldr	r2, [pc, #612]	; (800095c <_ZN10BHYWrapper4InitEfm+0x29c>)
 80006f6:	499a      	ldr	r1, [pc, #616]	; (8000960 <_ZN10BHYWrapper4InitEfm+0x2a0>)
 80006f8:	2001      	movs	r0, #1
 80006fa:	f008 fc16 	bl	8008f2a <bhy2_init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf14      	ite	ne
 8000704:	2301      	movne	r3, #1
 8000706:	2300      	moveq	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e11d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4618      	mov	r0, r3
 8000716:	f008 fbf0 	bl	8008efa <bhy2_soft_reset>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf14      	ite	ne
 8000720:	2301      	movne	r3, #1
 8000722:	2300      	moveq	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 800072a:	2302      	movs	r3, #2
 800072c:	e10f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	f107 0316 	add.w	r3, r7, #22
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f008 facb 	bl	8008cd2 <bhy2_get_product_id>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 800074c:	2303      	movs	r3, #3
 800074e:	e0fe      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 8000750:	7dbb      	ldrb	r3, [r7, #22]
 8000752:	2b89      	cmp	r3, #137	; 0x89
 8000754:	d001      	beq.n	800075a <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8000756:	2304      	movs	r3, #4
 8000758:	e0f9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f008 fb5d 	bl	8008e20 <bhy2_set_host_interrupt_ctrl>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf14      	ite	ne
 800076c:	2301      	movne	r3, #1
 800076e:	2300      	moveq	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8000776:	2305      	movs	r3, #5
 8000778:	e0e9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	f107 0313 	add.w	r3, r7, #19
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f008 fb68 	bl	8008e58 <bhy2_get_host_interrupt_ctrl>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 8000798:	2306      	movs	r3, #6
 800079a:	e0d8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 fb8d 	bl	8008ec2 <bhy2_set_host_intf_ctrl>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	e0c8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	f107 0312 	add.w	r3, r7, #18
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f008 fab8 	bl	8008d3a <bhy2_get_boot_status>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf14      	ite	ne
 80007d0:	2301      	movne	r3, #1
 80007d2:	2300      	moveq	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80007da:	2308      	movs	r3, #8
 80007dc:	e0b7      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80007de:	7cbb      	ldrb	r3, [r7, #18]
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80007e8:	2309      	movs	r3, #9
 80007ea:	e0b0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	461a      	mov	r2, r3
 80007f0:	495c      	ldr	r1, [pc, #368]	; (8000964 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80007f2:	485d      	ldr	r0, [pc, #372]	; (8000968 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 80007f4:	f008 fadd 	bl	8008db2 <bhy2_upload_firmware_to_ram>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8000808:	2309      	movs	r3, #9
 800080a:	e0a0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	f107 0311 	add.w	r3, r7, #17
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f008 fc6f 	bl	80090f8 <bhy2_get_error_value>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 800082a:	230a      	movs	r3, #10
 800082c:	e08f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 800082e:	7c7b      	ldrb	r3, [r7, #17]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8000834:	230b      	movs	r3, #11
 8000836:	e08a      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4618      	mov	r0, r3
 800083c:	f008 fad8 	bl	8008df0 <bhy2_boot_from_ram>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 8000850:	230c      	movs	r3, #12
 8000852:	e07c      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	f107 0311 	add.w	r3, r7, #17
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f008 fc4b 	bl	80090f8 <bhy2_get_error_value>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 8000872:	230d      	movs	r3, #13
 8000874:	e06b      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8000876:	7c7b      	ldrb	r3, [r7, #17]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 800087c:	230e      	movs	r3, #14
 800087e:	e066      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f008 fa3c 	bl	8008d06 <bhy2_get_kernel_version>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 800089e:	230f      	movs	r3, #15
 80008a0:	e055      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80008a2:	8abb      	ldrh	r3, [r7, #20]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	e050      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f241 123c 	movw	r2, #4412	; 0x113c
 80008b2:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	492d      	ldr	r1, [pc, #180]	; (800096c <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80008b8:	2025      	movs	r0, #37	; 0x25
 80008ba:	f008 fb60 	bl	8008f7e <bhy2_register_fifo_parse_callback>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80008ce:	2311      	movs	r3, #17
 80008d0:	e03d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f98b 	bl	8000bf4 <_ZNSt5arrayIhLj2048EE4dataEv>
 80008de:	4604      	mov	r4, r0
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f991 	bl	8000c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80008ec:	4601      	mov	r1, r0
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4620      	mov	r0, r4
 80008f4:	f008 f89b 	bl	8008a2e <bhy2_get_and_process_fifo>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf14      	ite	ne
 80008fe:	2301      	movne	r3, #1
 8000900:	2300      	moveq	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8000908:	2312      	movs	r3, #18
 800090a:	e020      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4618      	mov	r0, r3
 8000910:	f008 fb64 	bl	8008fdc <bhy2_update_virtual_sensor_list>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8000924:	2310      	movs	r3, #16
 8000926:	e012      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	461a      	mov	r2, r3
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000932:	2025      	movs	r0, #37	; 0x25
 8000934:	f008 f9ac 	bl	8008c90 <bhy2_set_virt_sensor_cfg>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8000948:	2311      	movs	r3, #17
 800094a:	e000      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	371c      	adds	r7, #28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	bf00      	nop
 8000958:	08000e0d 	.word	0x08000e0d
 800095c:	08000d89 	.word	0x08000d89
 8000960:	08000d0d 	.word	0x08000d0d
 8000964:	0001a66c 	.word	0x0001a66c
 8000968:	0801e81c 	.word	0x0801e81c
 800096c:	08000a11 	.word	0x08000a11

08000970 <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	f107 030f 	add.w	r3, r7, #15
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f008 fa82 	bl	8008e8e <bhy2_get_interrupt_status>

	if (interruptStatus) {
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d01d      	beq.n	80009cc <_ZN10BHYWrapper4PollEv+0x5c>
		assert(
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f92c 	bl	8000bf4 <_ZNSt5arrayIhLj2048EE4dataEv>
 800099c:	4604      	mov	r4, r0
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f932 	bl	8000c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80009aa:	4601      	mov	r1, r0
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4620      	mov	r0, r4
 80009b2:	f008 f83c 	bl	8008a2e <bhy2_get_and_process_fifo>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d005      	beq.n	80009c8 <_ZN10BHYWrapper4PollEv+0x58>
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <_ZN10BHYWrapper4PollEv+0x68>)
 80009be:	4a07      	ldr	r2, [pc, #28]	; (80009dc <_ZN10BHYWrapper4PollEv+0x6c>)
 80009c0:	2166      	movs	r1, #102	; 0x66
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <_ZN10BHYWrapper4PollEv+0x70>)
 80009c4:	f01c fb4e 	bl	801d064 <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		return true;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <_ZN10BHYWrapper4PollEv+0x5e>
	}

	return false;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd90      	pop	{r4, r7, pc}
 80009d6:	bf00      	nop
 80009d8:	0801e178 	.word	0x0801e178
 80009dc:	0801e1cc 	.word	0x0801e1cc
 80009e0:	0801e15c 	.word	0x0801e15c

080009e4 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 80009e4:	b4b0      	push	{r4, r5, r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009f6:	4615      	mov	r5, r2
 80009f8:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 80009fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	602b      	str	r3, [r5, #0]
}
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bcb0      	pop	{r4, r5, r7}
 8000a0c:	4770      	bx	lr
	...

08000a10 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8000a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a14:	b08e      	sub	sp, #56	; 0x38
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d105      	bne.n	8000a32 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8000a26:	4b40      	ldr	r3, [pc, #256]	; (8000b28 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8000a28:	4a40      	ldr	r2, [pc, #256]	; (8000b2c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8000a2a:	2177      	movs	r1, #119	; 0x77
 8000a2c:	4840      	ldr	r0, [pc, #256]	; (8000b30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8000a2e:	f01c fb19 	bl	801d064 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8000a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a34:	3308      	adds	r3, #8
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8000a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	789b      	ldrb	r3, [r3, #2]
 8000a40:	2b0b      	cmp	r3, #11
 8000a42:	d167      	bne.n	8000b14 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f107 0214 	add.w	r2, r7, #20
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f009 fcd9 	bl	800a406 <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a64:	4602      	mov	r2, r0
 8000a66:	460b      	mov	r3, r1
 8000a68:	f04f 0a00 	mov.w	sl, #0
 8000a6c:	f04f 0b00 	mov.w	fp, #0
 8000a70:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8000a74:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000a78:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000a7c:	4652      	mov	r2, sl
 8000a7e:	465b      	mov	r3, fp
 8000a80:	ebb2 0800 	subs.w	r8, r2, r0
 8000a84:	eb63 0901 	sbc.w	r9, r3, r1
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000a94:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000a98:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000a9c:	ebb2 0408 	subs.w	r4, r2, r8
 8000aa0:	eb63 0509 	sbc.w	r5, r3, r9
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	00eb      	lsls	r3, r5, #3
 8000aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ab2:	00e2      	lsls	r2, r4, #3
 8000ab4:	4614      	mov	r4, r2
 8000ab6:	461d      	mov	r5, r3
 8000ab8:	1823      	adds	r3, r4, r0
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	eb45 0301 	adc.w	r3, r5, r1
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ac6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8000aca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ace:	a314      	add	r3, pc, #80	; (adr r3, 8000b20 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8000ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad4:	f7ff fc54 	bl	8000380 <__aeabi_uldivmod>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	460b      	mov	r3, r1
 8000adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ade:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8000ae0:	6a3a      	ldr	r2, [r7, #32]
 8000ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4913      	ldr	r1, [pc, #76]	; (8000b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8000ae8:	fb01 f303 	mul.w	r3, r1, r3
 8000aec:	1ad2      	subs	r2, r2, r3
 8000aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af0:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8000af2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8000afa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8000b02:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b08:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8000b0a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	80da      	strh	r2, [r3, #6]
 8000b12:	e000      	b.n	8000b16 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8000b14:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8000b16:	3738      	adds	r7, #56	; 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000b1e:	bf00      	nop
 8000b20:	3b9aca00 	.word	0x3b9aca00
 8000b24:	00000000 	.word	0x00000000
 8000b28:	0801e1e4 	.word	0x0801e1e4
 8000b2c:	0801e1ec 	.word	0x0801e1ec
 8000b30:	0801e15c 	.word	0x0801e15c
 8000b34:	3b9aca00 	.word	0x3b9aca00

08000b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	assert(dest);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d105      	bne.n	8000b56 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8000b4c:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8000b4e:	2190      	movs	r1, #144	; 0x90
 8000b50:	4826      	ldr	r0, [pc, #152]	; (8000bec <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8000b52:	f01c fa87 	bl	801d064 <__assert_func>
	assert(size);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d105      	bne.n	8000b68 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8000b60:	2191      	movs	r1, #145	; 0x91
 8000b62:	4822      	ldr	r0, [pc, #136]	; (8000bec <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8000b64:	f01c fa7e 	bl	801d064 <__assert_func>

	uint8_t *ptr = dest;
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3302      	adds	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3302      	adds	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	617b      	str	r3, [r7, #20]
	 /*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	7c1a      	ldrb	r2, [r3, #16]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2211      	movs	r2, #17
 8000bda:	701a      	strb	r2, [r3, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	0801e238 	.word	0x0801e238
 8000be8:	0801e240 	.word	0x0801e240
 8000bec:	0801e15c 	.word	0x0801e15c
 8000bf0:	0801e27c 	.word	0x0801e27c

08000bf4 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f811 	bl	8000c26 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	24000184 	.word	0x24000184

08000c5c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_Z11spiTransmitPht+0x54>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f013 fcf7 	bl	8014664 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <_Z11spiTransmitPht+0x54>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f014 fb80 	bl	8015380 <HAL_SPI_GetState>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	bf14      	ite	ne
 8000c86:	2301      	movne	r3, #1
 8000c88:	2300      	moveq	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d000      	beq.n	8000c92 <_Z11spiTransmitPht+0x36>
 8000c90:	e7f1      	b.n	8000c76 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <_Z11spiTransmitPht+0x54>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf0c      	ite	eq
 8000c9e:	2301      	moveq	r3, #1
 8000ca0:	2300      	movne	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	b25b      	sxtb	r3, r3
  }
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000184 	.word	0x24000184

08000cb4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_Z9spiReceivPht+0x54>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	887a      	ldrh	r2, [r7, #2]
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f013 fe15 	bl	80148f8 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <_Z9spiReceivPht+0x54>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f014 fb54 	bl	8015380 <HAL_SPI_GetState>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	bf14      	ite	ne
 8000cde:	2301      	movne	r3, #1
 8000ce0:	2300      	moveq	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d000      	beq.n	8000cea <_Z9spiReceivPht+0x36>
 8000ce8:	e7f1      	b.n	8000cce <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <_Z9spiReceivPht+0x54>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf0c      	ite	eq
 8000cf6:	2301      	moveq	r3, #1
 8000cf8:	2300      	movne	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	b25b      	sxtb	r3, r3
  }
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	24000184 	.word	0x24000184

08000d0c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	4603      	mov	r3, r0
 8000d1a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8000d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d22:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8000d24:	f107 030f 	add.w	r3, r7, #15
 8000d28:	2101      	movs	r1, #1
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff96 	bl	8000c5c <_Z11spiTransmitPht>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bf0c      	ite	eq
 8000d36:	2301      	moveq	r3, #1
 8000d38:	2300      	movne	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8000d40:	f06f 0301 	mvn.w	r3, #1
 8000d44:	e019      	b.n	8000d7a <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	68b8      	ldr	r0, [r7, #8]
 8000d4e:	f7ff ffb1 	bl	8000cb4 <_Z9spiReceivPht>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bf14      	ite	ne
 8000d58:	2301      	movne	r3, #1
 8000d5a:	2300      	moveq	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d005      	beq.n	8000d6e <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8000d64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d68:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e005      	b.n	8000d7a <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8000d70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d74:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8000d76:	f06f 0301 	mvn.w	r3, #1
  }
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	58021000 	.word	0x58021000

08000d88 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b40      	cmp	r3, #64	; 0x40
 8000d9c:	d902      	bls.n	8000da4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8000d9e:	f06f 0303 	mvn.w	r3, #3
 8000da2:	e028      	b.n	8000df6 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8000da4:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f01c f9c1 	bl	801d138 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000dbc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000dca:	f7ff ff47 	bl	8000c5c <_Z11spiTransmitPht>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000de0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de4:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e005      	b.n	8000df6 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000dec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000df0:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000188 	.word	0x24000188
 8000e04:	24000189 	.word	0x24000189
 8000e08:	58021000 	.word	0x58021000

08000e0c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e1c:	d308      	bcc.n	8000e30 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <_Z13bhy2_delay_usmPv+0x44>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	099b      	lsrs	r3, r3, #6
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00b f817 	bl	800be5c <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8000e2e:	e00b      	b.n	8000e48 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	1e5a      	subs	r2, r3, #1
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	bf14      	ite	ne
 8000e3a:	2301      	movne	r3, #1
 8000e3c:	2300      	moveq	r3, #0
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8000e44:	bf00      	nop
    while( us-- ) {
 8000e46:	e7f3      	b.n	8000e30 <_Z13bhy2_delay_usmPv+0x24>
  }
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	10624dd3 	.word	0x10624dd3

08000e54 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e90:	d205      	bcs.n	8000e9e <_ZSt16__deque_buf_sizej+0x1c>
 8000e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9c:	e000      	b.n	8000ea0 <_ZSt16__deque_buf_sizej+0x1e>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_ZN11QueueSender11MessageMode9SerializeEh>:
	struct MessageMode final {
		using Type = uint8_t;
		static constexpr Type Sync = 0;
		static constexpr Type Async = 1;

		static uint8_t Serialize(Type mode) { return mode; }
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static Type Deserialize(uint8_t val) { return val; }
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_ZN11QueueSender9ErrorCode9SerializeEh>:
		using Type = uint8_t;
		static constexpr Type Success = 0;
		static constexpr Type Timeout = 1;
		static constexpr Type Unknown = 2;

		static uint8_t Serialize(Type error) { return error; }
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 faee 	bl	80024e0 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 fb5a 	bl	80025d2 <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f001 fb83 	bl	800263c <_ZNSaIhED1Ev>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fb66 	bl	800261c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ffeb 	bl	8000f40 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_ZN7RequestC1Ev>:
struct Request {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ffeb 	bl	8000f5a <_ZNSt6vectorIhSaIhEEC1Ev>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_ZN7RequestD1Ev>:
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fb73 	bl	8002684 <_ZNSt6vectorIhSaIhEED1Ev>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>:

	size_t TimeoutS;

	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS) :
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff9c 	bl	8000ef4 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3328      	adds	r3, #40	; 0x28
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 faf2 	bl	80025aa <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3350      	adds	r3, #80	; 0x50
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ffd2 	bl	8000f74 <_ZN7RequestC1Ev>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3368      	adds	r3, #104	; 0x68
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ffb8 	bl	8000f5a <_ZNSt6vectorIhSaIhEEC1Ev>
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	675a      	str	r2, [r3, #116]	; 0x74
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	679a      	str	r2, [r3, #120]	; 0x78
		assert(uart != NULL);
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d105      	bne.n	8001008 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x60>
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x6c>)
 8000ffe:	4a06      	ldr	r2, [pc, #24]	; (8001018 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x70>)
 8001000:	2155      	movs	r1, #85	; 0x55
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x74>)
 8001004:	f01c f82e 	bl	801d064 <__assert_func>
	}
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	0801e284 	.word	0x0801e284
 8001018:	0801e294 	.word	0x0801e294
 800101c:	0801e2cc 	.word	0x0801e2cc

08001020 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8001024:	2301      	movs	r3, #1
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_ZN7RequestaSEOS_>:
struct Request {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f001 fb70 	bl	8002726 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	7c1a      	ldrb	r2, [r3, #16]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	741a      	strb	r2, [r3, #16]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	7c5a      	ldrb	r2, [r3, #17]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	745a      	strb	r2, [r3, #17]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <_ZN11QueueSender10AddRequestEO7Request>:

	void AddRequest(Request &&request) {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	7c1b      	ldrb	r3, [r3, #16]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff24 	bl	8000ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <_ZN11QueueSender10AddRequestEO7Request+0x32>
 8001082:	2b01      	cmp	r3, #1
 8001084:	d12b      	bne.n	80010de <_ZN11QueueSender10AddRequestEO7Request+0x76>
		case MessageMode::Async:
			Requests.emplace_back(std::move(request));
 8001086:	687c      	ldr	r4, [r7, #4]
 8001088:	6838      	ldr	r0, [r7, #0]
 800108a:	f001 fb16 	bl	80026ba <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 800108e:	4603      	mov	r3, r0
 8001090:	4619      	mov	r1, r3
 8001092:	4620      	mov	r0, r4
 8001094:	f001 fb1c 	bl	80026d0 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
			break;
 8001098:	e021      	b.n	80010de <_ZN11QueueSender10AddRequestEO7Request+0x76>
		case MessageMode::Sync:
			if (!HasPriorityRequest) {
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80010a0:	f083 0301 	eor.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d018      	beq.n	80010dc <_ZN11QueueSender10AddRequestEO7Request+0x74>
				PriorityRequest = std::move(request);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80010b0:	6838      	ldr	r0, [r7, #0]
 80010b2:	f001 fb02 	bl	80026ba <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4619      	mov	r1, r3
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff ffb8 	bl	8001030 <_ZN7RequestaSEOS_>
				HasPriorityRequest = true;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

				if (Requests.empty()) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fb40 	bl	8002750 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <_ZN11QueueSender10AddRequestEO7Request+0x74>
					ProcessPriorityRequest();
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f890 	bl	80011fc <_ZN11QueueSender22ProcessPriorityRequestEv>
				}
			}
			break;
 80010dc:	bf00      	nop
		}
	}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}

080010e6 <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
		return !Responces.empty();
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3328      	adds	r3, #40	; 0x28
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 fb3e 	bl	8002774 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f083 0301 	eor.w	r3, r3, #1
 80010fe:	b2db      	uxtb	r3, r3
	}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f001 fb50 	bl	80027be <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZNSt6vectorIhSaIhEEC1EOS1_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffe5 	bl	8001108 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_ZN8ResponceC1EOS_>:
struct Responce {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ffe5 	bl	8001128 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	7b1a      	ldrb	r2, [r3, #12]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	731a      	strb	r2, [r3, #12]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	7b5a      	ldrb	r2, [r3, #13]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	735a      	strb	r2, [r3, #13]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	7b9a      	ldrb	r2, [r3, #14]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	739a      	strb	r2, [r3, #14]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_ZN8ResponceD1Ev>:
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fa7a 	bl	8002684 <_ZNSt6vectorIhSaIhEED1Ev>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <_ZN11QueueSender11GetResponceEv>:


	Responce GetResponce() {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 80011a6:	6838      	ldr	r0, [r7, #0]
 80011a8:	f7ff ff9d 	bl	80010e6 <_ZNK11QueueSender11HasResponceEv>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d105      	bne.n	80011be <_ZN11QueueSender11GetResponceEv+0x22>
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <_ZN11QueueSender11GetResponceEv+0x54>)
 80011b4:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <_ZN11QueueSender11GetResponceEv+0x58>)
 80011b6:	2170      	movs	r1, #112	; 0x70
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <_ZN11QueueSender11GetResponceEv+0x5c>)
 80011ba:	f01b ff53 	bl	801d064 <__assert_func>
		auto responce = std::move(Responces.front());
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3328      	adds	r3, #40	; 0x28
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fae3 	bl	800278e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 faec 	bl	80027a8 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ffb7 	bl	8001148 <_ZN8ResponceC1EOS_>
		Responces.pop();
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	3328      	adds	r3, #40	; 0x28
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fb08 	bl	80027f4 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>
		return responce;
 80011e4:	bf00      	nop
	}
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	0801e2e8 	.word	0x0801e2e8
 80011f4:	0801e2f8 	.word	0x0801e2f8
 80011f8:	0801e2cc 	.word	0x0801e2cc

080011fc <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 80011fc:	b5b0      	push	{r4, r5, r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 8086 	beq.w	8001320 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800121a:	f083 0301 	eor.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d07d      	beq.n	8001320 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
			HasPriorityRequest = false;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			WaitResponce = true;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 8001234:	b662      	cpsie	i
}
 8001236:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3350      	adds	r3, #80	; 0x50
 800123c:	623b      	str	r3, [r7, #32]
			auto &data = request.Data;
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	61fb      	str	r3, [r7, #28]

			assert(MessageMode::Deserialize(request.MetaInfo) == MessageMode::Sync);
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	7c1b      	ldrb	r3, [r3, #16]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fe3c 	bl	8000ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <_ZN11QueueSender22ProcessPriorityRequestEv+0x62>
 8001252:	4b36      	ldr	r3, [pc, #216]	; (800132c <_ZN11QueueSender22ProcessPriorityRequestEv+0x130>)
 8001254:	4a36      	ldr	r2, [pc, #216]	; (8001330 <_ZN11QueueSender22ProcessPriorityRequestEv+0x134>)
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	4836      	ldr	r0, [pc, #216]	; (8001334 <_ZN11QueueSender22ProcessPriorityRequestEv+0x138>)
 800125a:	f01b ff03 	bl	801d064 <__assert_func>



			CurrentResponceBuffer.resize(request.ResponceSize);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f001 face 	bl	800280c <_ZNSt6vectorIhSaIhEE6resizeEj>
			HAL_UART_Transmit(UartHandle, data.data(), data.size(), TimeoutS);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8001274:	69f8      	ldr	r0, [r7, #28]
 8001276:	f001 fafd 	bl	8002874 <_ZNSt6vectorIhSaIhEE4dataEv>
 800127a:	4605      	mov	r5, r0
 800127c:	69f8      	ldr	r0, [r7, #28]
 800127e:	f001 fb08 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001282:	4603      	mov	r3, r0
 8001284:	b29a      	uxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800128a:	4629      	mov	r1, r5
 800128c:	4620      	mov	r0, r4
 800128e:	f014 ff53 	bl	8016138 <HAL_UART_Transmit>

			HAL_StatusTypeDef ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(),
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3368      	adds	r3, #104	; 0x68
 800129a:	4618      	mov	r0, r3
 800129c:	f001 faea 	bl	8002874 <_ZNSt6vectorIhSaIhEE4dataEv>
 80012a0:	4605      	mov	r5, r0
					CurrentResponceBuffer.size(), TimeoutS);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3368      	adds	r3, #104	; 0x68
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 faf3 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80012ac:	4603      	mov	r3, r0
			HAL_StatusTypeDef ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(),
 80012ae:	b29a      	uxth	r2, r3
					CurrentResponceBuffer.size(), TimeoutS);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
			HAL_StatusTypeDef ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(),
 80012b4:	4629      	mov	r1, r5
 80012b6:	4620      	mov	r0, r4
 80012b8:	f014 ffd4 	bl	8016264 <HAL_UART_Receive>
 80012bc:	4603      	mov	r3, r0
 80012be:	76fb      	strb	r3, [r7, #27]
			WaitResponce = false;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

			ErrorCode::Type error;

			if (ret == HAL_OK)
 80012c8:	7efb      	ldrb	r3, [r7, #27]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <_ZN11QueueSender22ProcessPriorityRequestEv+0xda>
				error = ErrorCode::Success;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012d4:	e009      	b.n	80012ea <_ZN11QueueSender22ProcessPriorityRequestEv+0xee>
			else if (ret == HAL_TIMEOUT)
 80012d6:	7efb      	ldrb	r3, [r7, #27]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d103      	bne.n	80012e4 <_ZN11QueueSender22ProcessPriorityRequestEv+0xe8>
				error = ErrorCode::Timeout;
 80012dc:	2301      	movs	r3, #1
 80012de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012e2:	e002      	b.n	80012ea <_ZN11QueueSender22ProcessPriorityRequestEv+0xee>
			else
				error = ErrorCode::Unknown;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			Responces.emplace(
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f103 0428 	add.w	r4, r3, #40	; 0x28
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync, error));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80012f6:	f107 0008 	add.w	r0, r7, #8
 80012fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f000 f89d 	bl	8001442 <_ZN11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
			Responces.emplace(
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4619      	mov	r1, r3
 800130e:	4620      	mov	r0, r4
 8001310:	f001 face 	bl	80028b0 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync, error));
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff31 	bl	8001180 <_ZN8ResponceD1Ev>
 800131e:	e001      	b.n	8001324 <_ZN11QueueSender22ProcessPriorityRequestEv+0x128>
  __ASM volatile ("cpsie i" : : : "memory");
 8001320:	b662      	cpsie	i
}
 8001322:	bf00      	nop
		}
		else {
			__enable_irq();
		}
	}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bdb0      	pop	{r4, r5, r7, pc}
 800132c:	0801e31c 	.word	0x0801e31c
 8001330:	0801e35c 	.word	0x0801e35c
 8001334:	0801e2cc 	.word	0x0801e2cc

08001338 <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 8001338:	b5b0      	push	{r4, r5, r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
		__disable_irq();
		if (!Requests.empty() && !WaitResponce) {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	f001 fa02 	bl	8002750 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 800134c:	4603      	mov	r3, r0
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d009      	beq.n	800136c <_ZN11QueueSender15ProcessRequestsEv+0x34>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800135e:	f083 0301 	eor.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <_ZN11QueueSender15ProcessRequestsEv+0x34>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <_ZN11QueueSender15ProcessRequestsEv+0x36>
 800136c:	2300      	movs	r3, #0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d04d      	beq.n	800140e <_ZN11QueueSender15ProcessRequestsEv+0xd6>
			WaitResponce = true;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 800137a:	b662      	cpsie	i
}
 800137c:	bf00      	nop
			__enable_irq();

			auto &request = Requests.front();
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	f001 faa7 	bl	80028d4 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 8001386:	60f8      	str	r0, [r7, #12]
			auto &data = request.Data;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	60bb      	str	r3, [r7, #8]

			assert(MessageMode::Deserialize(request.MetaInfo) == MessageMode::Async);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	7c1b      	ldrb	r3, [r3, #16]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fd97 	bl	8000ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8001396:	4603      	mov	r3, r0
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <_ZN11QueueSender15ProcessRequestsEv+0x70>
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <_ZN11QueueSender15ProcessRequestsEv+0xe4>)
 800139e:	4a20      	ldr	r2, [pc, #128]	; (8001420 <_ZN11QueueSender15ProcessRequestsEv+0xe8>)
 80013a0:	21a5      	movs	r1, #165	; 0xa5
 80013a2:	4820      	ldr	r0, [pc, #128]	; (8001424 <_ZN11QueueSender15ProcessRequestsEv+0xec>)
 80013a4:	f01b fe5e 	bl	801d064 <__assert_func>


			CurrentResponceBuffer.resize(request.ResponceSize);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	4619      	mov	r1, r3
 80013b4:	4610      	mov	r0, r2
 80013b6:	f001 fa29 	bl	800280c <_ZNSt6vectorIhSaIhEE6resizeEj>

			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3368      	adds	r3, #104	; 0x68
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fa56 	bl	8002874 <_ZNSt6vectorIhSaIhEE4dataEv>
 80013c8:	4605      	mov	r5, r0
											CurrentResponceBuffer.size());
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3368      	adds	r3, #104	; 0x68
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fa5f 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80013d4:	4603      	mov	r3, r0
			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	4629      	mov	r1, r5
 80013dc:	4620      	mov	r0, r4
 80013de:	f015 f8bd 	bl	801655c <HAL_UART_Receive_IT>
			HAL_UART_Transmit(UartHandle, data.data(), data.size(), TimeoutS);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f001 fa44 	bl	8002874 <_ZNSt6vectorIhSaIhEE4dataEv>
 80013ec:	4605      	mov	r5, r0
 80013ee:	68b8      	ldr	r0, [r7, #8]
 80013f0:	f001 fa4f 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80013fc:	4629      	mov	r1, r5
 80013fe:	4620      	mov	r0, r4
 8001400:	f014 fe9a 	bl	8016138 <HAL_UART_Transmit>


			Requests.pop_front();
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fa78 	bl	80028fc <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
		}
		else {
			__enable_irq();
		}
	}
 800140c:	e001      	b.n	8001412 <_ZN11QueueSender15ProcessRequestsEv+0xda>
  __ASM volatile ("cpsie i" : : : "memory");
 800140e:	b662      	cpsie	i
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bdb0      	pop	{r4, r5, r7, pc}
 800141a:	bf00      	nop
 800141c:	0801e388 	.word	0x0801e388
 8001420:	0801e3cc 	.word	0x0801e3cc
 8001424:	0801e2cc 	.word	0x0801e2cc

08001428 <_ZN8ResponceC1Ev>:
struct Responce {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fd91 	bl	8000f5a <_ZNSt6vectorIhSaIhEEC1Ev>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_ZN11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>:

	Responce CreateResponce(const std::vector<uint8_t> &data,
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	70fb      	strb	r3, [r7, #3]
			MessageMode::Type messageMode, ErrorCode::Type error) {
		Responce responce;
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f7ff ffe9 	bl	8001428 <_ZN8ResponceC1Ev>
		responce.Data = data;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fa7a 	bl	8002954 <_ZNSt6vectorIhSaIhEEaSERKS1_>
		responce.PeripheryID = Periphery::Body;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	731a      	strb	r2, [r3, #12]
		responce.Error = ErrorCode::Serialize(error);
 8001466:	7e3b      	ldrb	r3, [r7, #24]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fd37 	bl	8000edc <_ZN11QueueSender9ErrorCode9SerializeEh>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	739a      	strb	r2, [r3, #14]
		responce.MetaInfo = MessageMode::Serialize(messageMode);
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fd17 	bl	8000eac <_ZN11QueueSender11MessageMode9SerializeEh>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	735a      	strb	r2, [r3, #13]
		return responce;
 8001486:	bf00      	nop
	}
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
		WaitResponce = false;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>:
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 f845 	bl	8002546 <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;

	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fb2b 	bl	8002b32 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3334      	adds	r3, #52	; 0x34
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fd47 	bl	8000f74 <_ZN7RequestC1Ev>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3348      	adds	r3, #72	; 0x48
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fd35 	bl	8000f5a <_ZNSt6vectorIhSaIhEEC1Ev>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	655a      	str	r2, [r3, #84]	; 0x54
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	659a      	str	r2, [r3, #88]	; 0x58
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		assert(uart != NULL);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d105      	bne.n	8001516 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x4e>
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x58>)
 800150c:	4a05      	ldr	r2, [pc, #20]	; (8001524 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x5c>)
 800150e:	21e2      	movs	r1, #226	; 0xe2
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x60>)
 8001512:	f01b fda7 	bl	801d064 <__assert_func>
	}
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	0801e284 	.word	0x0801e284
 8001524:	0801e3f0 	.word	0x0801e3f0
 8001528:	0801e2cc 	.word	0x0801e2cc

0800152c <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
		HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3328      	adds	r3, #40	; 0x28
 8001542:	2201      	movs	r2, #1
 8001544:	4619      	mov	r1, r3
 8001546:	f015 f809 	bl	801655c <HAL_UART_Receive_IT>
	}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
		return !Requests.empty();
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fafc 	bl	8002b5a <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>
 8001562:	4603      	mov	r3, r0
 8001564:	f083 0301 	eor.w	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
	}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 8001572:	b590      	push	{r4, r7, lr}
 8001574:	b097      	sub	sp, #92	; 0x5c
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001582:	2b00      	cmp	r3, #0
 8001584:	d100      	bne.n	8001588 <_ZN13HeadInterface4SendERK8Responce+0x16>
 8001586:	e7f9      	b.n	800157c <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		size_t size = responce.Data.size() + 3 + 3;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f001 f981 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001590:	4603      	mov	r3, r0
 8001592:	3306      	adds	r3, #6
 8001594:	657b      	str	r3, [r7, #84]	; 0x54
		CurrentResponceBuffer.resize(size);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3348      	adds	r3, #72	; 0x48
 800159a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800159c:	4618      	mov	r0, r3
 800159e:	f001 f935 	bl	800280c <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = CurrentResponceBuffer.data();
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3348      	adds	r3, #72	; 0x48
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 f964 	bl	8002874 <_ZNSt6vectorIhSaIhEE4dataEv>
 80015ac:	6538      	str	r0, [r7, #80]	; 0x50

		*(ptr++) = SOM1Val;
 80015ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	653a      	str	r2, [r7, #80]	; 0x50
 80015b4:	22ff      	movs	r2, #255	; 0xff
 80015b6:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 80015b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	653a      	str	r2, [r7, #80]	; 0x50
 80015be:	22aa      	movs	r2, #170	; 0xaa
 80015c0:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 80015c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	653a      	str	r2, [r7, #80]	; 0x50
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	7b12      	ldrb	r2, [r2, #12]
 80015cc:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 80015ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	653a      	str	r2, [r7, #80]	; 0x50
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	7b52      	ldrb	r2, [r2, #13]
 80015d8:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 80015da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	653a      	str	r2, [r7, #80]	; 0x50
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	7b92      	ldrb	r2, [r2, #14]
 80015e4:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.Data.size());
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f001 fac3 	bl	8002b74 <_ZNKSt6vectorIhSaIhEE4dataEv>
 80015ee:	4604      	mov	r4, r0
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 f94d 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4621      	mov	r1, r4
 80015fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001600:	f01b fd9a 	bl	801d138 <memcpy>

		ptr += responce.Data.size();
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f001 f943 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800160c:	4602      	mov	r2, r0
 800160e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001610:	4413      	add	r3, r2
 8001612:	653b      	str	r3, [r7, #80]	; 0x50

		*ptr = SOM3Val;
 8001614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001616:	22af      	movs	r2, #175	; 0xaf
 8001618:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		size_t sz = CurrentResponceBuffer.size();
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3348      	adds	r3, #72	; 0x48
 8001626:	4618      	mov	r0, r3
 8001628:	f001 f933 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800162c:	64f8      	str	r0, [r7, #76]	; 0x4c

		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3348      	adds	r3, #72	; 0x48
 8001632:	4618      	mov	r0, r3
 8001634:	f001 f91e 	bl	8002874 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001638:	4601      	mov	r1, r0
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001640:	4618      	mov	r0, r3
 8001642:	f01b fd79 	bl	801d138 <memcpy>

		auto ret = HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(), sz);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3348      	adds	r3, #72	; 0x48
 800164e:	4618      	mov	r0, r3
 8001650:	f001 f910 	bl	8002874 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001654:	4601      	mov	r1, r0
 8001656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001658:	b29b      	uxth	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	4620      	mov	r0, r4
 800165e:	f014 fed5 	bl	801640c <HAL_UART_Transmit_IT>
 8001662:	4603      	mov	r3, r0
 8001664:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		auto t = ret;
 8001668:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800166c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	}
 8001670:	bf00      	nop
 8001672:	375c      	adds	r7, #92	; 0x5c
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}

08001678 <_ZN7RequestC1EOS_>:
struct Request {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fd4d 	bl	8001128 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	7c1a      	ldrb	r2, [r3, #16]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	741a      	strb	r2, [r3, #16]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	7c5a      	ldrb	r2, [r3, #17]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	745a      	strb	r2, [r3, #17]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 80016ba:	6838      	ldr	r0, [r7, #0]
 80016bc:	f7ff ff49 	bl	8001552 <_ZNK13HeadInterface10HasRequestEv>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d106      	bne.n	80016d4 <_ZN13HeadInterface10GetRequestEv+0x24>
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <_ZN13HeadInterface10GetRequestEv+0x50>)
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <_ZN13HeadInterface10GetRequestEv+0x54>)
 80016ca:	f44f 7189 	mov.w	r1, #274	; 0x112
 80016ce:	480e      	ldr	r0, [pc, #56]	; (8001708 <_ZN13HeadInterface10GetRequestEv+0x58>)
 80016d0:	f01b fcc8 	bl	801d064 <__assert_func>
		auto request = std::move(Requests.front());
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 fa5b 	bl	8002b92 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>
 80016dc:	4603      	mov	r3, r0
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 ffeb 	bl	80026ba <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ffc5 	bl	8001678 <_ZN7RequestC1EOS_>
		Requests.pop();
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 fa5b 	bl	8002bac <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>
		return request;
 80016f6:	bf00      	nop
	}
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	0801e42c 	.word	0x0801e42c
 8001704:	0801e43c 	.word	0x0801e43c
 8001708:	0801e2cc 	.word	0x0801e2cc

0800170c <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
		switch (CurrentState) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	2b07      	cmp	r3, #7
 8001736:	f200 80d6 	bhi.w	80018e6 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1be>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <_ZN13HeadInterface19ProcessRecievedDataEv+0x18>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001761 	.word	0x08001761
 8001744:	0800178b 	.word	0x0800178b
 8001748:	080017b5 	.word	0x080017b5
 800174c:	080017d9 	.word	0x080017d9
 8001750:	0800180f 	.word	0x0800180f
 8001754:	08001833 	.word	0x08001833
 8001758:	08001865 	.word	0x08001865
 800175c:	0800187d 	.word	0x0800187d
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001766:	2bff      	cmp	r3, #255	; 0xff
 8001768:	d10b      	bne.n	8001782 <_ZN13HeadInterface19ProcessRecievedDataEv+0x5a>
				CurrentState = ReadState::SOM2;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3328      	adds	r3, #40	; 0x28
 8001778:	2201      	movs	r2, #1
 800177a:	4619      	mov	r1, r3
 800177c:	f014 feee 	bl	801655c <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8001780:	e0b5      	b.n	80018ee <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fed2 	bl	800152c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8001788:	e0b1      	b.n	80018ee <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001790:	2baa      	cmp	r3, #170	; 0xaa
 8001792:	d10b      	bne.n	80017ac <_ZN13HeadInterface19ProcessRecievedDataEv+0x84>
				CurrentState = ReadState::PERIPHERY_ID;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3328      	adds	r3, #40	; 0x28
 80017a2:	2201      	movs	r2, #1
 80017a4:	4619      	mov	r1, r3
 80017a6:	f014 fed9 	bl	801655c <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 80017aa:	e0a0      	b.n	80018ee <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff febd 	bl	800152c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 80017b2:	e09c      	b.n	80018ee <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			CurrentState = ReadState::REQUEST_SIZE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2203      	movs	r2, #3
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3328      	adds	r3, #40	; 0x28
 80017ce:	2201      	movs	r2, #1
 80017d0:	4619      	mov	r1, r3
 80017d2:	f014 fec3 	bl	801655c <HAL_UART_Receive_IT>
			break;
 80017d6:	e08a      	b.n	80018ee <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::REQUEST_SIZE: {
			RequestSize = CurrentValue;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017de:	461a      	mov	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
			CurrentRequest.Data.resize(RequestSize);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	4619      	mov	r1, r3
 80017f0:	4610      	mov	r0, r2
 80017f2:	f001 f80b 	bl	800280c <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentState = ReadState::RESPONCE_SIZE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2204      	movs	r2, #4
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3328      	adds	r3, #40	; 0x28
 8001804:	2201      	movs	r2, #1
 8001806:	4619      	mov	r1, r3
 8001808:	f014 fea8 	bl	801655c <HAL_UART_Receive_IT>
			break;
 800180c:	e06f      	b.n	80018ee <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001814:	461a      	mov	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
			CurrentState = ReadState::META;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2205      	movs	r2, #5
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3328      	adds	r3, #40	; 0x28
 8001828:	2201      	movs	r2, #1
 800182a:	4619      	mov	r1, r3
 800182c:	f014 fe96 	bl	801655c <HAL_UART_Receive_IT>
			break;
 8001830:	e05d      	b.n	80018ee <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			CurrentState = ReadState::DATA;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2206      	movs	r2, #6
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3334      	adds	r3, #52	; 0x34
 800184c:	4618      	mov	r0, r3
 800184e:	f001 f811 	bl	8002874 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001852:	4601      	mov	r1, r0
					RequestSize);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	4620      	mov	r0, r4
 800185e:	f014 fe7d 	bl	801655c <HAL_UART_Receive_IT>
			break;
 8001862:	e044      	b.n	80018ee <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2207      	movs	r2, #7
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3328      	adds	r3, #40	; 0x28
 8001872:	2201      	movs	r2, #1
 8001874:	4619      	mov	r1, r3
 8001876:	f014 fe71 	bl	801655c <HAL_UART_Receive_IT>
			break;
 800187a:	e038      	b.n	80018ee <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001882:	2baf      	cmp	r3, #175	; 0xaf
 8001884:	d12b      	bne.n	80018de <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b6>
				Requests.push(std::move(CurrentRequest));
 8001886:	687c      	ldr	r4, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3334      	adds	r3, #52	; 0x34
 800188c:	4618      	mov	r0, r3
 800188e:	f000 ff14 	bl	80026ba <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8001892:	4603      	mov	r3, r0
 8001894:	4619      	mov	r1, r3
 8001896:	4620      	mov	r0, r4
 8001898:	f001 f994 	bl	8002bc4 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>
				CurrentRequest = { };
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb49 	bl	8000f5a <_ZNSt6vectorIhSaIhEEC1Ev>
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	4619      	mov	r1, r3
 80018ce:	4620      	mov	r0, r4
 80018d0:	f7ff fbae 	bl	8001030 <_ZN7RequestaSEOS_>
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fb58 	bl	8000f8e <_ZN7RequestD1Ev>
			}
			ResetReadState();
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fe24 	bl	800152c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 80018e4:	e003      	b.n	80018ee <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		default:
			ResetReadState();
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fe20 	bl	800152c <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	bf00      	nop

080018f8 <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameEj>:
};

struct IMUFrame: public BHYWrapper::BHYFrame {
	size_t Seq;

	IMUFrame(const BHYWrapper::BHYFrame &frame, size_t seq) :
 80018f8:	b4b0      	push	{r4, r5, r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
			BHYFrame { frame }, Seq { seq } {
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	4614      	mov	r4, r2
 800190a:	461d      	mov	r5, r3
 800190c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800190e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001910:	682b      	ldr	r3, [r5, #0]
 8001912:	6023      	str	r3, [r4, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	615a      	str	r2, [r3, #20]
	}
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bcb0      	pop	{r4, r5, r7}
 8001924:	4770      	bx	lr

08001926 <_ZN17IMUFrameContainer5ResetEv>:

		static constexpr size_t Size = 2 * sizeof(uint16_t);
	};

public:
	void Reset() {
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001940:	f001 f952 	bl	8002be8 <_ZNSt5dequeI8IMUFrameSaIS0_EEaSESt16initializer_listIS0_E>
		FirstSeq = 0;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	629a      	str	r2, [r3, #40]	; 0x28
	}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 8001952:	b590      	push	{r4, r7, lr}
 8001954:	b089      	sub	sp, #36	; 0x24
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front( { frame, TestSeq++ });
 800195c:	687c      	ldr	r4, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	1c59      	adds	r1, r3, #1
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001968:	f107 0008 	add.w	r0, r7, #8
 800196c:	461a      	mov	r2, r3
 800196e:	6839      	ldr	r1, [r7, #0]
 8001970:	f7ff ffc2 	bl	80018f8 <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameEj>
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	4619      	mov	r1, r3
 800197a:	4620      	mov	r0, r4
 800197c:	f001 f94f 	bl	8002c1e <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontEOS0_>
	}
 8001980:	bf00      	nop
 8001982:	3724      	adds	r7, #36	; 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd90      	pop	{r4, r7, pc}

08001988 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:
	void Remove() {
		FrameQueue.pop_back();
		FirstSeq++;
	}

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4618      	mov	r0, r3
 8001998:	f001 f952 	bl	8002c40 <_ZNKSt5dequeI8IMUFrameSaIS0_EE5emptyEv>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e03a      	b.n	8001a1c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x94>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d30b      	bcc.n	80019c8 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 f956 	bl	8002c64 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	4413      	add	r3, r2
 80019c0:	3b01      	subs	r3, #1
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d901      	bls.n	80019cc <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 80019cc:	2300      	movs	r3, #0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e022      	b.n	8001a1c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x94>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 80019d6:	68fc      	ldr	r4, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4618      	mov	r0, r3
 80019dc:	f001 f942 	bl	8002c64 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80019e0:	4601      	mov	r1, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	440b      	add	r3, r1
 80019ec:	3b01      	subs	r3, #1
 80019ee:	4619      	mov	r1, r3
 80019f0:	4620      	mov	r0, r4
 80019f2:	f001 f949 	bl	8002c88 <_ZNKSt5dequeI8IMUFrameSaIS0_EEixEj>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f107 0410 	add.w	r4, r7, #16
 80019fc:	461d      	mov	r5, r3
 80019fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a06:	e884 0003 	stmia.w	r4, {r0, r1}
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	f107 0410 	add.w	r4, r7, #16
 8001a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	602b      	str	r3, [r5, #0]
		return true;
 8001a1a:	2301      	movs	r3, #1
	}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bdb0      	pop	{r4, r5, r7, pc}

08001a24 <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
		return {FirstSeq, FrameQueue.size()};
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	81bb      	strh	r3, [r7, #12]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 f914 	bl	8002c64 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	81fb      	strh	r3, [r7, #14]
 8001a42:	2300      	movs	r3, #0
 8001a44:	89ba      	ldrh	r2, [r7, #12]
 8001a46:	f362 030f 	bfi	r3, r2, #0, #16
 8001a4a:	89fa      	ldrh	r2, [r7, #14]
 8001a4c:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type FrameBySeq = 0;
		static constexpr Type Info = 1;
		static constexpr Type LatestFrame = 2;
		static constexpr Type Reset = 3;

		static uint8_t Serialize(Type mode) {
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
			return mode;
 8001a62:	79fb      	ldrb	r3, [r7, #7]
		}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
			return meta;
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
		}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type UnknownMode = 2;
		static constexpr Type BadRequest = 3;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7c1b      	ldrb	r3, [r3, #16]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ffe8 	bl	8001a70 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d006      	beq.n	8001ab4 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2c>
 8001aa6:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd0>)
 8001aa8:	4a2c      	ldr	r2, [pc, #176]	; (8001b5c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd4>)
 8001aaa:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8001aae:	482c      	ldr	r0, [pc, #176]	; (8001b60 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd8>)
 8001ab0:	f01b fad8 	bl	801d064 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fcb7 	bl	8001428 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2201      	movs	r2, #1
 8001abe:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff ffc9 	bl	8001a58 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2111      	movs	r1, #17
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fe9a 	bl	800280c <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 2) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fed9 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	bf14      	ite	ne
 8001ae6:	2301      	movne	r3, #1
 8001ae8:	2300      	moveq	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2203      	movs	r2, #3
 8001af4:	739a      	strb	r2, [r3, #14]
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f001 f83b 	bl	8002b74 <_ZNKSt6vectorIhSaIhEE4dataEv>
 8001afe:	4603      	mov	r3, r0
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 8001b04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b06:	f107 0218 	add.w	r2, r7, #24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6838      	ldr	r0, [r7, #0]
 8001b0e:	f7ff ff3b 	bl	8001988 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 8001b18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xa6>
			responce.Error = ErrorCodes::FrameUnavailable;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	739a      	strb	r2, [r3, #14]
			return responce;
 8001b2c:	e00f      	b.n	8001b4e <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc6>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fe9f 	bl	8002874 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001b36:	4601      	mov	r1, r0
 8001b38:	f107 0217 	add.w	r2, r7, #23
 8001b3c:	f107 0318 	add.w	r3, r7, #24
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fff9 	bl	8000b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	739a      	strb	r2, [r3, #14]

		return responce;
 8001b4c:	bf00      	nop
	}
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	3730      	adds	r7, #48	; 0x30
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	0801e460 	.word	0x0801e460
 8001b5c:	0801e4a8 	.word	0x0801e4a8
 8001b60:	0801e2cc 	.word	0x0801e2cc

08001b64 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7c1b      	ldrb	r3, [r3, #16]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff7a 	bl	8001a70 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d006      	beq.n	8001b90 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2c>
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xac>)
 8001b84:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xb0>)
 8001b86:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001b8a:	4823      	ldr	r0, [pc, #140]	; (8001c18 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xb4>)
 8001b8c:	f01b fa6a 	bl	801d064 <__assert_func>

		Responce responce;
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7ff fc49 	bl	8001428 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff ff5b 	bl	8001a58 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(IMUFrameContainer::Info::Size);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2104      	movs	r1, #4
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fe2c 	bl	800280c <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 fe6b 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	bf14      	ite	ne
 8001bc2:	2301      	movne	r3, #1
 8001bc4:	2300      	moveq	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2203      	movs	r2, #3
 8001bd0:	739a      	strb	r2, [r3, #14]
		}

		uint8_t *ptr = responce.Data.data();
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fe4d 	bl	8002874 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001bda:	6178      	str	r0, [r7, #20]
		auto info = container.GetInfo();
 8001bdc:	6838      	ldr	r0, [r7, #0]
 8001bde:	f7ff ff21 	bl	8001a24 <_ZNK17IMUFrameContainer7GetInfoEv>
 8001be2:	4603      	mov	r3, r0
 8001be4:	613b      	str	r3, [r7, #16]

		*reinterpret_cast<uint16_t*>(ptr) = info.First;
 8001be6:	8a3a      	ldrh	r2, [r7, #16]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	801a      	strh	r2, [r3, #0]
		ptr += sizeof(uint16_t);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3302      	adds	r3, #2
 8001bf0:	617b      	str	r3, [r7, #20]

		*reinterpret_cast<uint16_t*>(ptr) = info.NumAv;
 8001bf2:	8a7a      	ldrh	r2, [r7, #18]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	801a      	strh	r2, [r3, #0]
		ptr += sizeof(uint16_t);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	617b      	str	r3, [r7, #20]

		responce.Error = ErrorCodes::Success;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	739a      	strb	r2, [r3, #14]

		return responce;
 8001c04:	bf00      	nop
	}
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	0801e4fc 	.word	0x0801e4fc
 8001c14:	0801e53c 	.word	0x0801e53c
 8001c18:	0801e2cc 	.word	0x0801e2cc

08001c1c <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
		assert(
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7c1b      	ldrb	r3, [r3, #16]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff1e 	bl	8001a70 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d006      	beq.n	8001c48 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2c>
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa4>)
 8001c3c:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa8>)
 8001c3e:	f240 11ef 	movw	r1, #495	; 0x1ef
 8001c42:	4821      	ldr	r0, [pc, #132]	; (8001cc8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xac>)
 8001c44:	f01b fa0e 	bl	801d064 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7ff fbed 	bl	8001428 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7ff feff 	bl	8001a58 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2111      	movs	r1, #17
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fdd0 	bl	800280c <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fe0f 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	bf14      	ite	ne
 8001c7a:	2301      	movne	r3, #1
 8001c7c:	2300      	moveq	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2203      	movs	r2, #3
 8001c88:	739a      	strb	r2, [r3, #14]
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	6839      	ldr	r1, [r7, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fea7 	bl	80009e4 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fdeb 	bl	8002874 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	f107 0213 	add.w	r2, r7, #19
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe ff45 	bl	8000b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	739a      	strb	r2, [r3, #14]

		return responce;
 8001cb4:	bf00      	nop
	}
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	0801e58c 	.word	0x0801e58c
 8001cc4:	0801e5d4 	.word	0x0801e5d4
 8001cc8:	0801e2cc 	.word	0x0801e2cc

08001ccc <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>:

	Responce DoReset(const Request &request, IMUFrameContainer &container) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
		assert(
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7c1b      	ldrb	r3, [r3, #16]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fec6 	bl	8001a70 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d006      	beq.n	8001cf8 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x2c>
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x84>)
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x88>)
 8001cee:	f240 2106 	movw	r1, #518	; 0x206
 8001cf2:	4819      	ldr	r0, [pc, #100]	; (8001d58 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x8c>)
 8001cf4:	f01b f9b6 	bl	801d064 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::Reset);

		Responce responce;
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f7ff fb95 	bl	8001428 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2201      	movs	r2, #1
 8001d02:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f7ff fea7 	bl	8001a58 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2101      	movs	r1, #1
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fd78 	bl	800280c <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fdb7 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	bf14      	ite	ne
 8001d2a:	2301      	movne	r3, #1
 8001d2c:	2300      	moveq	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2203      	movs	r2, #3
 8001d38:	739a      	strb	r2, [r3, #14]
		}

		container.Reset();
 8001d3a:	6838      	ldr	r0, [r7, #0]
 8001d3c:	f7ff fdf3 	bl	8001926 <_ZN17IMUFrameContainer5ResetEv>
		responce.Error = ErrorCodes::Success;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	739a      	strb	r2, [r3, #14]

		return responce;
 8001d46:	bf00      	nop
	}
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	0801e624 	.word	0x0801e624
 8001d54:	0801e668 	.word	0x0801e668
 8001d58:	0801e2cc 	.word	0x0801e2cc

08001d5c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper>:

public:
	Responce Handle(const Request &request, IMUFrameContainer &container,
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU) {
		assert(request.PeripheryID == Periphery::Imu);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7c5b      	ldrb	r3, [r3, #17]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d006      	beq.n	8001d80 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x24>
 8001d72:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x9c>)
 8001d74:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa0>)
 8001d76:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8001d7a:	4821      	ldr	r0, [pc, #132]	; (8001e00 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa4>)
 8001d7c:	f01b f972 	bl	801d064 <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7c1b      	ldrb	r3, [r3, #16]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fe73 	bl	8001a70 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d827      	bhi.n	8001de0 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x84>
 8001d90:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x3c>)
 8001d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d96:	bf00      	nop
 8001d98:	08001da9 	.word	0x08001da9
 8001d9c:	08001db7 	.word	0x08001db7
 8001da0:	08001dc5 	.word	0x08001dc5
 8001da4:	08001dd3 	.word	0x08001dd3
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	f7ff fe6a 	bl	8001a88 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 8001db4:	e01b      	b.n	8001dee <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::Info:
			return GetInfo(request, container);
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	f7ff fed1 	bl	8001b64 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 8001dc2:	e014      	b.n	8001dee <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	f7ff ff26 	bl	8001c1c <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 8001dd0:	e00d      	b.n	8001dee <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::Reset:
			return DoReset(request, container);
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	f7ff ff77 	bl	8001ccc <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>
 8001dde:	e006      	b.n	8001dee <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		default:
			assert(0 && "Unknown Mode");
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa8>)
 8001de2:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa0>)
 8001de4:	f44f 710a 	mov.w	r1, #552	; 0x228
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa4>)
 8001dea:	f01b f93b 	bl	801d064 <__assert_func>
		}
	}
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	0801e6b0 	.word	0x0801e6b0
 8001dfc:	0801e6d8 	.word	0x0801e6d8
 8001e00:	0801e2cc 	.word	0x0801e2cc
 8001e04:	0801e734 	.word	0x0801e734

08001e08 <_ZN13HeadInterfaceD1Ev>:
struct HeadInterface {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3348      	adds	r3, #72	; 0x48
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fc35 	bl	8002684 <_ZNSt6vectorIhSaIhEED1Ev>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3334      	adds	r3, #52	; 0x34
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f8b5 	bl	8000f8e <_ZN7RequestD1Ev>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fb40 	bl	80014ac <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_ZN11QueueSenderD1Ev>:
struct QueueSender {
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3368      	adds	r3, #104	; 0x68
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fc1e 	bl	8002684 <_ZNSt6vectorIhSaIhEED1Ev>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3350      	adds	r3, #80	; 0x50
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f89e 	bl	8000f8e <_ZN7RequestD1Ev>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3328      	adds	r3, #40	; 0x28
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f859 	bl	8000f0e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fb71 	bl	8002546 <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_ZNSt5dequeI8IMUFrameSaIS0_EEC1Ev>:
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 ff22 	bl	8002cc2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EEC1Ev>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ffeb 	bl	8001e6e <_ZNSt5dequeI8IMUFrameSaIS0_EEC1Ev>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_ZN17IMUFrameContainerD1Ev>:
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 ff35 	bl	8002d28 <_ZNSt5dequeI8IMUFrameSaIS0_EED1Ev>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_ZN18MotherboardContextC1E17MotherboardConfig>:
	BHYWrapper IMU;
	IMURequestHandler IMUHandler;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 8001ec8:	b084      	sub	sp, #16
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	f107 0014 	add.w	r0, r7, #20
 8001ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		HeadService{conf.HeadServiceUart, conf.HeadTimeout},
		HeadStream{conf.HeadStreamUart, conf.HeadTimeout},
		Body{conf.BodyUart, conf.BodyTimeout},
		FrameContainer{},
		IMU{conf.IMUSpi},
		IMUHandler{} {}
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6979      	ldr	r1, [r7, #20]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff faf1 	bl	80014c8 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3360      	adds	r3, #96	; 0x60
 8001eea:	69b9      	ldr	r1, [r7, #24]
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff faea 	bl	80014c8 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	33c0      	adds	r3, #192	; 0xc0
 8001ef8:	6a39      	ldr	r1, [r7, #32]
 8001efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f853 	bl	8000fa8 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001f08:	2230      	movs	r2, #48	; 0x30
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f01b f93b 	bl	801d188 <memset>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ffb5 	bl	8001e88 <_ZN17IMUFrameContainerC1Ev>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8001f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fbab 	bl	8000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f46:	b004      	add	sp, #16
 8001f48:	4770      	bx	lr

08001f4a <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fdec 	bl	8002b32 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3334      	adds	r3, #52	; 0x34
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f808 	bl	8000f74 <_ZN7RequestC1Ev>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3348      	adds	r3, #72	; 0x48
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fff6 	bl	8000f5a <_ZNSt6vectorIhSaIhEEC1Ev>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe ffb2 	bl	8000ef4 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3328      	adds	r3, #40	; 0x28
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fb08 	bl	80025aa <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3350      	adds	r3, #80	; 0x50
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe ffe8 	bl	8000f74 <_ZN7RequestC1Ev>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3368      	adds	r3, #104	; 0x68
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe ffce 	bl	8000f5a <_ZNSt6vectorIhSaIhEEC1Ev>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ffb9 	bl	8001f4a <_ZN13HeadInterfaceC1Ev>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3360      	adds	r3, #96	; 0x60
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ffb4 	bl	8001f4a <_ZN13HeadInterfaceC1Ev>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	33c0      	adds	r3, #192	; 0xc0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ffca 	bl	8001f80 <_ZN11QueueSenderC1Ev>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff48 	bl	8001e88 <_ZN17IMUFrameContainerC1Ev>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff46 	bl	8001eae <_ZN17IMUFrameContainerD1Ev>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	33c0      	adds	r3, #192	; 0xc0
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff05 	bl	8001e36 <_ZN11QueueSenderD1Ev>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3360      	adds	r3, #96	; 0x60
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fee9 	bl	8001e08 <_ZN13HeadInterfaceD1Ev>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fee5 	bl	8001e08 <_ZN13HeadInterfaceD1Ev>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fe8a 	bl	8002d72 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_ZN13HeadInterfaceaSEOS_>:
struct HeadInterface {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ffe5 	bl	8002048 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	631a      	str	r2, [r3, #48]	; 0x30
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	3334      	adds	r3, #52	; 0x34
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f7fe ffc2 	bl	8001030 <_ZN7RequestaSEOS_>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	3348      	adds	r3, #72	; 0x48
 80020b6:	4619      	mov	r1, r3
 80020b8:	4610      	mov	r0, r2
 80020ba:	f000 fb34 	bl	8002726 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	655a      	str	r2, [r3, #84]	; 0x54
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	659a      	str	r2, [r3, #88]	; 0x58
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fe4f 	bl	8002d98 <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <_ZN11QueueSenderaSEOS_>:
struct QueueSender {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fe2c 	bl	8002d72 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	3328      	adds	r3, #40	; 0x28
 8002124:	4619      	mov	r1, r3
 8002126:	4610      	mov	r0, r2
 8002128:	f7ff ffdc 	bl	80020e4 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3350      	adds	r3, #80	; 0x50
 8002136:	4619      	mov	r1, r3
 8002138:	4610      	mov	r0, r2
 800213a:	f7fe ff79 	bl	8001030 <_ZN7RequestaSEOS_>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	3368      	adds	r3, #104	; 0x68
 8002160:	4619      	mov	r1, r3
 8002162:	4610      	mov	r0, r2
 8002164:	f000 fadf 	bl	8002726 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	675a      	str	r2, [r3, #116]	; 0x74
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	679a      	str	r2, [r3, #120]	; 0x78
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fe13 	bl	8002dbe <_ZNSt5dequeI8IMUFrameSaIS0_EEaSEOS2_>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_ZN18MotherboardContextaSEOS_>:
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff50 	bl	8002068 <_ZN13HeadInterfaceaSEOS_>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	3360      	adds	r3, #96	; 0x60
 80021d2:	4619      	mov	r1, r3
 80021d4:	4610      	mov	r0, r2
 80021d6:	f7ff ff47 	bl	8002068 <_ZN13HeadInterfaceaSEOS_>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	33c0      	adds	r3, #192	; 0xc0
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7ff ff8c 	bl	8002104 <_ZN11QueueSenderaSEOS_>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f7ff ffc1 	bl	8002182 <_ZN17IMUFrameContaineraSEOS_>
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f502 70b8 	add.w	r0, r2, #368	; 0x170
 8002208:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800220c:	f241 1250 	movw	r2, #4432	; 0x1150
 8002210:	4619      	mov	r1, r3
 8002212:	f01a ff91 	bl	801d138 <memcpy>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221c:	f893 22c1 	ldrb.w	r2, [r3, #705]	; 0x2c1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002226:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 8002234:	b084      	sub	sp, #16
 8002236:	b5b0      	push	{r4, r5, r7, lr}
 8002238:	f5ad 5d96 	sub.w	sp, sp, #4800	; 0x12c0
 800223c:	b086      	sub	sp, #24
 800223e:	af04      	add	r7, sp, #16
 8002240:	f241 24d8 	movw	r4, #4824	; 0x12d8
 8002244:	443c      	add	r4, r7
 8002246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 800224a:	4c1e      	ldr	r4, [pc, #120]	; (80022c4 <MotherboardInit+0x90>)
 800224c:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8002250:	4423      	add	r3, r4
 8002252:	19dc      	adds	r4, r3, r7
 8002254:	466d      	mov	r5, sp
 8002256:	f241 23e4 	movw	r3, #4836	; 0x12e4
 800225a:	443b      	add	r3, r7
 800225c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002260:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002264:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8002268:	443b      	add	r3, r7
 800226a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226c:	4620      	mov	r0, r4
 800226e:	f7ff fe2b 	bl	8001ec8 <_ZN18MotherboardContextC1E17MotherboardConfig>
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <MotherboardInit+0x90>)
 8002274:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8002278:	f103 0308 	add.w	r3, r3, #8
 800227c:	443b      	add	r3, r7
 800227e:	4619      	mov	r1, r3
 8002280:	4811      	ldr	r0, [pc, #68]	; (80022c8 <MotherboardInit+0x94>)
 8002282:	f7ff ff96 	bl	80021b2 <_ZN18MotherboardContextaSEOS_>
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <MotherboardInit+0x90>)
 8002288:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800228c:	f103 0308 	add.w	r3, r3, #8
 8002290:	443b      	add	r3, r7
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff febb 	bl	800200e <_ZN18MotherboardContextD1Ev>

	mbctx.HeadService.ResetReadState();
 8002298:	480b      	ldr	r0, [pc, #44]	; (80022c8 <MotherboardInit+0x94>)
 800229a:	f7ff f947 	bl	800152c <_ZN13HeadInterface14ResetReadStateEv>
	mbctx.HeadStream.ResetReadState();
 800229e:	480b      	ldr	r0, [pc, #44]	; (80022cc <MotherboardInit+0x98>)
 80022a0:	f7ff f944 	bl	800152c <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 80022a4:	2100      	movs	r1, #0
 80022a6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80022d0 <MotherboardInit+0x9c>
 80022aa:	480a      	ldr	r0, [pc, #40]	; (80022d4 <MotherboardInit+0xa0>)
 80022ac:	f7fe fa08 	bl	80006c0 <_ZN10BHYWrapper4InitEfm>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	f507 5796 	add.w	r7, r7, #4800	; 0x12c0
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80022c0:	b004      	add	sp, #16
 80022c2:	4770      	bx	lr
 80022c4:	ffffed38 	.word	0xffffed38
 80022c8:	240001d0 	.word	0x240001d0
 80022cc:	24000230 	.word	0x24000230
 80022d0:	44480000 	.word	0x44480000
 80022d4:	24000340 	.word	0x24000340

080022d8 <MotherboardTick>:

int MotherboardTick() {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b094      	sub	sp, #80	; 0x50
 80022dc:	af02      	add	r7, sp, #8
	if (mbctx.UpdateIMU)
 80022de:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <MotherboardTick+0x110>)
 80022e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e4:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00b      	beq.n	8002304 <MotherboardTick+0x2c>
		mbctx.UpdateIMU = !mbctx.IMU.Poll();
 80022ec:	483f      	ldr	r0, [pc, #252]	; (80023ec <MotherboardTick+0x114>)
 80022ee:	f7fe fb3f 	bl	8000970 <_ZN10BHYWrapper4PollEv>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f083 0301 	eor.w	r3, r3, #1
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <MotherboardTick+0x110>)
 80022fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002300:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1

	if (mbctx.HeadService.HasRequest()) {
 8002304:	4838      	ldr	r0, [pc, #224]	; (80023e8 <MotherboardTick+0x110>)
 8002306:	f7ff f924 	bl	8001552 <_ZNK13HeadInterface10HasRequestEv>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d032      	beq.n	8002376 <MotherboardTick+0x9e>
		auto request = mbctx.HeadService.GetRequest();
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4934      	ldr	r1, [pc, #208]	; (80023e8 <MotherboardTick+0x110>)
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f9ca 	bl	80016b0 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 800231c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <MotherboardTick+0x52>
 8002324:	2b01      	cmp	r3, #1
 8002326:	d00b      	beq.n	8002340 <MotherboardTick+0x68>
 8002328:	e020      	b.n	800236c <MotherboardTick+0x94>
		case Periphery::Body:
			mbctx.Body.AddRequest(std::move(request));
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f9c3 	bl	80026ba <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8002334:	4603      	mov	r3, r0
 8002336:	4619      	mov	r1, r3
 8002338:	482d      	ldr	r0, [pc, #180]	; (80023f0 <MotherboardTick+0x118>)
 800233a:	f7fe fe95 	bl	8001068 <_ZN11QueueSender10AddRequestEO7Request>
			break;
 800233e:	e015      	b.n	800236c <MotherboardTick+0x94>
		case Periphery::Imu:
			mbctx.HeadService.Send(
					mbctx.IMUHandler.Handle(request,
 8002340:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002344:	f107 0214 	add.w	r2, r7, #20
 8002348:	4b28      	ldr	r3, [pc, #160]	; (80023ec <MotherboardTick+0x114>)
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <MotherboardTick+0x11c>)
 800234e:	492a      	ldr	r1, [pc, #168]	; (80023f8 <MotherboardTick+0x120>)
 8002350:	f7ff fd04 	bl	8001d5c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper>
			mbctx.HeadService.Send(
 8002354:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002358:	4619      	mov	r1, r3
 800235a:	4823      	ldr	r0, [pc, #140]	; (80023e8 <MotherboardTick+0x110>)
 800235c:	f7ff f909 	bl	8001572 <_ZN13HeadInterface4SendERK8Responce>
					mbctx.IMUHandler.Handle(request,
 8002360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe ff0b 	bl	8001180 <_ZN8ResponceD1Ev>
							mbctx.FrameContainer, mbctx.IMU));
			break;
 800236a:	bf00      	nop
		auto request = mbctx.HeadService.GetRequest();
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fe0c 	bl	8000f8e <_ZN7RequestD1Ev>
		}
	}

	if (mbctx.HeadStream.HasRequest()) {
 8002376:	4821      	ldr	r0, [pc, #132]	; (80023fc <MotherboardTick+0x124>)
 8002378:	f7ff f8eb 	bl	8001552 <_ZNK13HeadInterface10HasRequestEv>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d015      	beq.n	80023ae <MotherboardTick+0xd6>
			auto request = mbctx.HeadService.GetRequest();
 8002382:	463b      	mov	r3, r7
 8002384:	4918      	ldr	r1, [pc, #96]	; (80023e8 <MotherboardTick+0x110>)
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff f992 	bl	80016b0 <_ZN13HeadInterface10GetRequestEv>

			switch (request.PeripheryID) {
 800238c:	7c7b      	ldrb	r3, [r7, #17]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <MotherboardTick+0xce>
			case Periphery::Body:
				mbctx.Body.AddRequest(std::move(request));
 8002392:	463b      	mov	r3, r7
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f990 	bl	80026ba <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 800239a:	4603      	mov	r3, r0
 800239c:	4619      	mov	r1, r3
 800239e:	4814      	ldr	r0, [pc, #80]	; (80023f0 <MotherboardTick+0x118>)
 80023a0:	f7fe fe62 	bl	8001068 <_ZN11QueueSender10AddRequestEO7Request>
				break;
 80023a4:	bf00      	nop
			auto request = mbctx.HeadService.GetRequest();
 80023a6:	463b      	mov	r3, r7
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fdf0 	bl	8000f8e <_ZN7RequestD1Ev>
			}
		}

	if (mbctx.Body.HasResponce()) {
 80023ae:	4810      	ldr	r0, [pc, #64]	; (80023f0 <MotherboardTick+0x118>)
 80023b0:	f7fe fe99 	bl	80010e6 <_ZNK11QueueSender11HasResponceEv>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d010      	beq.n	80023dc <MotherboardTick+0x104>
		mbctx.HeadService.Send(mbctx.Body.GetResponce());
 80023ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023be:	490c      	ldr	r1, [pc, #48]	; (80023f0 <MotherboardTick+0x118>)
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe feeb 	bl	800119c <_ZN11QueueSender11GetResponceEv>
 80023c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023ca:	4619      	mov	r1, r3
 80023cc:	4806      	ldr	r0, [pc, #24]	; (80023e8 <MotherboardTick+0x110>)
 80023ce:	f7ff f8d0 	bl	8001572 <_ZN13HeadInterface4SendERK8Responce>
 80023d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fed2 	bl	8001180 <_ZN8ResponceD1Ev>
	}

	return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3748      	adds	r7, #72	; 0x48
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	240001d0 	.word	0x240001d0
 80023ec:	24000340 	.word	0x24000340
 80023f0:	24000290 	.word	0x24000290
 80023f4:	2400030c 	.word	0x2400030c
 80023f8:	24001490 	.word	0x24001490
 80023fc:	24000230 	.word	0x24000230

08002400 <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
	mbctx.FrameContainer.Add(mbctx.IMU.GetFrame());
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	4906      	ldr	r1, [pc, #24]	; (8002424 <MotherboardOnStrobe+0x24>)
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe faea 	bl	80009e4 <_ZNK10BHYWrapper8GetFrameEv>
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	4619      	mov	r1, r3
 8002414:	4804      	ldr	r0, [pc, #16]	; (8002428 <MotherboardOnStrobe+0x28>)
 8002416:	f7ff fa9c 	bl	8001952 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	24000340 	.word	0x24000340
 8002428:	2400030c 	.word	0x2400030c

0800242c <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessResponces();
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <MotherboardOnBodyRecieveComplete+0x10>)
 8002432:	f7ff f82d 	bl	8001490 <_ZN11QueueSender16ProcessResponcesEv>
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	24000290 	.word	0x24000290

08002440 <MotherboardOnHeadServiceRecieveComplete>:

void MotherboardOnHeadServiceRecieveComplete() {
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
	mbctx.HeadService.ProcessRecievedData();
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <MotherboardOnHeadServiceRecieveComplete+0x10>)
 8002446:	f7ff f96f 	bl	8001728 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	240001d0 	.word	0x240001d0

08002454 <MotherboardOnHeadStreamRecieveComplete>:

void MotherboardOnHeadStreamRecieveComplete() {
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	mbctx.HeadStream.ProcessRecievedData();
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <MotherboardOnHeadStreamRecieveComplete+0x10>)
 800245a:	f7ff f965 	bl	8001728 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	24000230 	.word	0x24000230

08002468 <MotherboardOnHeadServiceTransmitComplete>:

void MotherboardOnHeadServiceTransmitComplete() {
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	mbctx.HeadService.FinishTransmit();
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <MotherboardOnHeadServiceTransmitComplete+0x10>)
 800246e:	f7ff f94d 	bl	800170c <_ZN13HeadInterface14FinishTransmitEv>
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	240001d0 	.word	0x240001d0

0800247c <MotherboardOnHeadStreamTransmitComplete>:

void MotherboardOnHeadStreamTransmitComplete() {
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	mbctx.HeadStream.FinishTransmit();
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <MotherboardOnHeadStreamTransmitComplete+0x10>)
 8002482:	f7ff f943 	bl	800170c <_ZN13HeadInterface14FinishTransmitEv>
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	24000230 	.word	0x24000230

08002490 <MotherboardOnBodyTimerTick>:

void MotherboardOnBodyTimerTick() {
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessPriorityRequest();
 8002494:	4803      	ldr	r0, [pc, #12]	; (80024a4 <MotherboardOnBodyTimerTick+0x14>)
 8002496:	f7fe feb1 	bl	80011fc <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbctx.Body.ProcessRequests();
 800249a:	4802      	ldr	r0, [pc, #8]	; (80024a4 <MotherboardOnBodyTimerTick+0x14>)
 800249c:	f7fe ff4c 	bl	8001338 <_ZN11QueueSender15ProcessRequestsEv>
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	24000290 	.word	0x24000290

080024a8 <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <MotherboardOnImuTimerTick+0x1c>)
 80024ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	240001d0 	.word	0x240001d0

080024c8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fc97 	bl	8002e04 <_ZNSaI7RequestED1Ev>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>:
      _Deque_base()
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fc7a 	bl	8002de4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80024f0:	2100      	movs	r1, #0
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fc92 	bl	8002e1c <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d010      	beq.n	8002534 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800251a:	3304      	adds	r3, #4
 800251c:	461a      	mov	r2, r3
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fce2 	bl	8002ee8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6819      	ldr	r1, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	461a      	mov	r2, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fcf4 	bl	8002f1c <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ffc6 	bl	80024c8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <_ZNSt5dequeI7RequestSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8002546:	b580      	push	{r7, lr}
 8002548:	b08a      	sub	sp, #40	; 0x28
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800254e:	f107 0308 	add.w	r3, r7, #8
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fcfd 	bl	8002f54 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 800255a:	f107 0318 	add.w	r3, r7, #24
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fd06 	bl	8002f72 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fd11 	bl	8002f90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800256e:	4603      	mov	r3, r0
 8002570:	f107 0218 	add.w	r2, r7, #24
 8002574:	f107 0108 	add.w	r1, r7, #8
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fd30 	bl	8002fde <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ffbe 	bl	8002502 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4618      	mov	r0, r3
 800258a:	3728      	adds	r7, #40	; 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>:
      deque() = default;
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fd4a 	bl	8003034 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
	: c() { }
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4618      	mov	r0, r3
 80025b6:	2328      	movs	r3, #40	; 0x28
 80025b8:	461a      	mov	r2, r3
 80025ba:	2100      	movs	r1, #0
 80025bc:	f01a fde4 	bl	801d188 <memset>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff ffe4 	bl	8002590 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>:
      ~deque()
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b08a      	sub	sp, #40	; 0x28
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80025da:	f107 0308 	add.w	r3, r7, #8
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fd5a 	bl	800309a <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 80025e6:	f107 0318 	add.w	r3, r7, #24
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fd63 	bl	80030b8 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fd6e 	bl	80030d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f107 0218 	add.w	r2, r7, #24
 8002600:	f107 0108 	add.w	r1, r7, #8
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fd8d 	bl	8003124 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fd22 	bl	8003056 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4618      	mov	r0, r3
 8002616:	3728      	adds	r7, #40	; 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fd9c 	bl	8003162 <_ZNSaIhEC1Ev>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fda4 	bl	800317a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fdac 	bl	80031a2 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800266a:	461a      	mov	r2, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fda3 	bl	80031b8 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fc57 	bl	8000f28 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002684:	b5b0      	push	{r4, r5, r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681c      	ldr	r4, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fda1 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800269c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800269e:	461a      	mov	r2, r3
 80026a0:	4629      	mov	r1, r5
 80026a2:	4620      	mov	r0, r4
 80026a4:	f000 fda6 	bl	80031f4 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ffd2 	bl	8002654 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bdb0      	pop	{r4, r5, r7, pc}

080026ba <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 80026d0:	b5b0      	push	{r4, r5, r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	3b14      	subs	r3, #20
	if (this->_M_impl._M_finish._M_cur
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d012      	beq.n	800270e <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 80026e8:	687c      	ldr	r4, [r7, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699d      	ldr	r5, [r3, #24]
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	f000 fd8e 	bl	8003210 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80026f4:	4603      	mov	r3, r0
 80026f6:	461a      	mov	r2, r3
 80026f8:	4629      	mov	r1, r5
 80026fa:	4620      	mov	r0, r4
 80026fc:	f000 fd93 	bl	8003226 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f103 0214 	add.w	r2, r3, #20
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800270c:	e007      	b.n	800271e <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 800270e:	6838      	ldr	r0, [r7, #0]
 8002710:	f000 fd7e 	bl	8003210 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002714:	4603      	mov	r3, r0
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fd97 	bl	800324c <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bdb0      	pop	{r4, r5, r7, pc}

08002726 <_ZNSt6vectorIhSaIhEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8002726:	b590      	push	{r4, r7, lr}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8002734:	6838      	ldr	r0, [r7, #0]
 8002736:	f000 fdcd 	bl	80032d4 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 800273a:	4603      	mov	r3, r0
 800273c:	4622      	mov	r2, r4
 800273e:	4619      	mov	r1, r3
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fdd2 	bl	80032ea <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8002746:	687b      	ldr	r3, [r7, #4]
      }
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bd90      	pop	{r4, r7, pc}

08002750 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f103 0218 	add.w	r2, r3, #24
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3308      	adds	r3, #8
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f000 fdfe 	bl	8003366 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 800276a:	4603      	mov	r3, r0
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fe05 	bl	800338e <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>
 8002784:	4603      	mov	r3, r0
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fe0a 	bl	80033b2 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>
 800279e:	4603      	mov	r3, r0
      }
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 80027be:	b590      	push	{r4, r7, lr}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 80027c8:	6838      	ldr	r0, [r7, #0]
 80027ca:	f000 fe06 	bl	80033da <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4619      	mov	r1, r3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fe0c 	bl	80033f0 <_ZNSaIhEC1ERKS_>
 80027d8:	687c      	ldr	r4, [r7, #4]
 80027da:	6838      	ldr	r0, [r7, #0]
 80027dc:	f000 fdfd 	bl	80033da <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 80027e0:	4603      	mov	r3, r0
 80027e2:	4619      	mov	r1, r3
 80027e4:	4620      	mov	r0, r4
 80027e6:	f000 fe11 	bl	800340c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd90      	pop	{r4, r7, pc}

080027f4 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fe27 	bl	8003452 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>
      }
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_ZNSt6vectorIhSaIhEE6resizeEj>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
      {
	if (__new_size > size())
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f83b 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800281c:	4602      	mov	r2, r0
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	4293      	cmp	r3, r2
 8002822:	bf8c      	ite	hi
 8002824:	2301      	movhi	r3, #1
 8002826:	2300      	movls	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f82f 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002834:	4602      	mov	r2, r0
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	4619      	mov	r1, r3
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fe43 	bl	80034c8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 8002842:	e013      	b.n	800286c <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f824 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800284a:	4602      	mov	r2, r0
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4293      	cmp	r3, r2
 8002850:	bf34      	ite	cc
 8002852:	2301      	movcc	r3, #1
 8002854:	2300      	movcs	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4413      	add	r3, r2
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fee6 	bl	8003638 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fef8 	bl	8003678 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8002888:	4603      	mov	r3, r0
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 80028ba:	687c      	ldr	r4, [r7, #4]
 80028bc:	6838      	ldr	r0, [r7, #0]
 80028be:	f000 fee7 	bl	8003690 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4619      	mov	r1, r3
 80028c6:	4620      	mov	r0, r4
 80028c8:	f000 feed 	bl	80036a6 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd90      	pop	{r4, r7, pc}

080028d4 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 80028dc:	f107 0308 	add.w	r3, r7, #8
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fb36 	bl	8002f54 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80028e8:	f107 0308 	add.w	r3, r7, #8
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 ff05 	bl	80036fc <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>
 80028f2:	4603      	mov	r3, r0
      }
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	3b14      	subs	r3, #20
	if (this->_M_impl._M_start._M_cur
 800290e:	429a      	cmp	r2, r3
 8002910:	d011      	beq.n	8002936 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fb3b 	bl	8002f90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 fef6 	bl	8003714 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f103 0214 	add.w	r2, r3, #20
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8002934:	e002      	b.n	800293c <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fef9 	bl	800372e <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>
      }
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8002948:	2300      	movs	r3, #0
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_ZNSt6vectorIhSaIhEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	429a      	cmp	r2, r3
 8002964:	f000 80e0 	beq.w	8002b28 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1d4>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8002968:	f7ff ffec 	bl	8002944 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d042      	beq.n	80029f8 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa4>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 8002972:	f7fe fb55 	bl	8001020 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>
 8002976:	4603      	mov	r3, r0
 8002978:	f083 0301 	eor.w	r3, r3, #1
 800297c:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800297e:	2b00      	cmp	r3, #0
 8002980:	d012      	beq.n	80029a8 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fc2a 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800298a:	4604      	mov	r4, r0
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fef5 	bl	800377e <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002994:	4603      	mov	r3, r0
 8002996:	4619      	mov	r1, r3
 8002998:	4620      	mov	r0, r4
 800299a:	f000 fefb 	bl	8003794 <_ZStneRKSaIhES1_>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <_ZNSt6vectorIhSaIhEEaSERKS1_+0x56>
 80029a8:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <_ZNSt6vectorIhSaIhEEaSERKS1_+0x88>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fefc 	bl	80037ac <_ZNSt6vectorIhSaIhEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	1ad3      	subs	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 80029c4:	461a      	mov	r2, r3
 80029c6:	f000 fbf7 	bl	80031b8 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  this->_M_impl._M_start = nullptr;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fbfd 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80029e4:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fec8 	bl	800377e <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80029ee:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 80029f0:	4619      	mov	r1, r3
 80029f2:	4620      	mov	r0, r4
 80029f4:	f000 fee8 	bl	80037c8 <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 80029f8:	6838      	ldr	r0, [r7, #0]
 80029fa:	f7ff ff4a 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80029fe:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 feef 	bl	80037e4 <_ZNKSt6vectorIhSaIhEE8capacityEv>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	bf8c      	ite	hi
 8002a0e:	2301      	movhi	r3, #1
 8002a10:	2300      	movls	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d030      	beq.n	8002a7a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x126>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8002a18:	6838      	ldr	r0, [r7, #0]
 8002a1a:	f000 fef2 	bl	8003802 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8002a1e:	4604      	mov	r4, r0
 8002a20:	6838      	ldr	r0, [r7, #0]
 8002a22:	f000 fefe 	bl	8003822 <_ZNKSt6vectorIhSaIhEE3endEv>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4622      	mov	r2, r4
 8002a2a:	68f9      	ldr	r1, [r7, #12]
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 ff09 	bl	8003844 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 8002a32:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681c      	ldr	r4, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fbcd 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002a44:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002a46:	461a      	mov	r2, r3
 8002a48:	4629      	mov	r1, r5
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f000 fbd2 	bl	80031f4 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8002a60:	461a      	mov	r2, r3
 8002a62:	f000 fba9 	bl	80031b8 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	441a      	add	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	e050      	b.n	8002b1c <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else if (size() >= __xlen)
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ff09 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4293      	cmp	r3, r2
 8002a86:	bf94      	ite	ls
 8002a88:	2301      	movls	r3, #1
 8002a8a:	2300      	movhi	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d020      	beq.n	8002ad4 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x180>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8002a92:	6838      	ldr	r0, [r7, #0]
 8002a94:	f000 feb5 	bl	8003802 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	6838      	ldr	r0, [r7, #0]
 8002a9c:	f000 fec1 	bl	8003822 <_ZNKSt6vectorIhSaIhEE3endEv>
 8002aa0:	4605      	mov	r5, r0
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 feea 	bl	800387c <_ZNSt6vectorIhSaIhEE5beginEv>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4629      	mov	r1, r5
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f000 fef4 	bl	800389c <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 ff08 	bl	80038cc <_ZNSt6vectorIhSaIhEE3endEv>
 8002abc:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fb8c 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002ac6:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4629      	mov	r1, r5
 8002acc:	4620      	mov	r0, r4
 8002ace:	f000 ff0e 	bl	80038ee <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 8002ad2:	e023      	b.n	8002b1c <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681d      	ldr	r5, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681c      	ldr	r4, [r3, #0]
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fed8 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	18e1      	adds	r1, r4, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4628      	mov	r0, r5
 8002aee:	f000 ff0c 	bl	800390a <_ZSt4copyIPhS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681c      	ldr	r4, [r3, #0]
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff fecb 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002afc:	4603      	mov	r3, r0
 8002afe:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fb67 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002b10:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002b12:	4632      	mov	r2, r6
 8002b14:	4629      	mov	r1, r5
 8002b16:	4620      	mov	r0, r4
 8002b18:	f000 ff0f 	bl	800393a <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	441a      	add	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	605a      	str	r2, [r3, #4]
	}
      return *this;
 8002b28:	687b      	ldr	r3, [r7, #4]
    }
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b32 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
	queue()
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
	: c() { }
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	2328      	movs	r3, #40	; 0x28
 8002b40:	461a      	mov	r2, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	f01a fb20 	bl	801d188 <memset>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe f9d2 	bl	8000ef4 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fdf3 	bl	8002750 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_ZNKSt6vectorIhSaIhEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fd78 	bl	8003678 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
	return c.front();
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fe99 	bl	80028d4 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 8002ba2:	4603      	mov	r3, r0
      }
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>:
      pop()
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	c.pop_front();
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fea0 	bl	80028fc <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
      }
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>:
      push(value_type&& __x)
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8002bce:	687c      	ldr	r4, [r7, #4]
 8002bd0:	6838      	ldr	r0, [r7, #0]
 8002bd2:	f7ff fd72 	bl	80026ba <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f000 febe 	bl	800395c <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}

08002be8 <_ZNSt5dequeI8IMUFrameSaIS0_EEaSESt16initializer_listIS0_E>:
      operator=(initializer_list<value_type> __l)
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_assign_aux(__l.begin(), __l.end(),
 8002bf6:	1d3b      	adds	r3, r7, #4
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fec0 	bl	800397e <_ZNKSt16initializer_listI8IMUFrameE5beginEv>
 8002bfe:	4604      	mov	r4, r0
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fec7 	bl	8003996 <_ZNKSt16initializer_listI8IMUFrameE3endEv>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	462b      	mov	r3, r5
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fed6 	bl	80039c0 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>
	return *this;
 8002c14:	68fb      	ldr	r3, [r7, #12]
      }
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bdb0      	pop	{r4, r5, r7, pc}

08002c1e <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontEOS0_>:
      push_front(value_type&& __x)
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
      { emplace_front(std::move(__x)); }
 8002c28:	6838      	ldr	r0, [r7, #0]
 8002c2a:	f000 ff2e 	bl	8003a8a <_ZSt4moveIR8IMUFrameEONSt16remove_referenceIT_E4typeEOS3_>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4619      	mov	r1, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 ff34 	bl	8003aa0 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_ZNKSt5dequeI8IMUFrameSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f103 0218 	add.w	r2, r3, #24
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3308      	adds	r3, #8
 8002c52:	4619      	mov	r1, r3
 8002c54:	4610      	mov	r0, r2
 8002c56:	f000 ff5a 	bl	8003b0e <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f103 0218 	add.w	r2, r3, #24
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3308      	adds	r3, #8
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f000 ff5d 	bl	8003b38 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <_ZNKSt5dequeI8IMUFrameSaIS0_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3308      	adds	r3, #8
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 ff78 	bl	8003b90 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EixEi>
 8002ca0:	4603      	mov	r3, r0
      }
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 ff92 	bl	8003bdc <_ZNSaI8IMUFrameED1Ev>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EEC1Ev>:
      _Deque_base()
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 ff75 	bl	8003bbc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 ff8d 	bl	8003bf4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_initialize_mapEj>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d010      	beq.n	8002d16 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 ffdd 	bl	8003cc0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6819      	ldr	r1, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 ffef 	bl	8003cf4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ffc6 	bl	8002caa <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implD1Ev>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <_ZNSt5dequeI8IMUFrameSaIS0_EED1Ev>:
      ~deque()
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8002d30:	f107 0308 	add.w	r3, r7, #8
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fff8 	bl	8003d2c <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8002d3c:	f107 0318 	add.w	r3, r7, #24
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 f801 	bl	8003d4a <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fed4 	bl	8003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f107 0218 	add.w	r2, r7, #24
 8002d56:	f107 0108 	add.w	r1, r7, #8
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f001 f820 	bl	8003da0 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ffbe 	bl	8002ce4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3728      	adds	r7, #40	; 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002d72:	b590      	push	{r4, r7, lr}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002d7c:	6838      	ldr	r0, [r7, #0]
 8002d7e:	f001 f81c 	bl	8003dba <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4622      	mov	r2, r4
 8002d86:	4619      	mov	r1, r3
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f001 f821 	bl	8003dd0 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002d8e:	687b      	ldr	r3, [r7, #4]
      }
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd90      	pop	{r4, r7, pc}

08002d98 <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002da2:	6838      	ldr	r0, [r7, #0]
 8002da4:	f001 f835 	bl	8003e12 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4622      	mov	r2, r4
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f001 f83a 	bl	8003e28 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002db4:	687b      	ldr	r3, [r7, #4]
      }
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd90      	pop	{r4, r7, pc}

08002dbe <_ZNSt5dequeI8IMUFrameSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002dbe:	b590      	push	{r4, r7, lr}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002dc8:	6838      	ldr	r0, [r7, #0]
 8002dca:	f001 f84e 	bl	8003e6a <_ZSt4moveIRSt5dequeI8IMUFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4622      	mov	r2, r4
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f001 f853 	bl	8003e80 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002dda:	687b      	ldr	r3, [r7, #4]
      }
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}

08002de4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f001 f868 	bl	8003ec2 <_ZNSaI7RequestEC1Ev>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 f870 	bl	8003eda <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <_ZNSaI7RequestED1Ev>:
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f001 f87d 	bl	8003f0c <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b089      	sub	sp, #36	; 0x24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8002e26:	2014      	movs	r0, #20
 8002e28:	f7fe f82b 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e34:	3301      	adds	r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002e38:	2308      	movs	r3, #8
 8002e3a:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	3302      	adds	r3, #2
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	f107 0210 	add.w	r2, r7, #16
 8002e46:	f107 030c 	add.w	r3, r7, #12
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f001 f868 	bl	8003f22 <_ZSt3maxIjERKT_S2_S2_>
 8002e52:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f001 f872 	bl	8003f4a <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8002e66:	4602      	mov	r2, r0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	1acb      	subs	r3, r1, r3
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002e7c:	4413      	add	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4413      	add	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	69b9      	ldr	r1, [r7, #24]
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f001 f878 	bl	8003f84 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3308      	adds	r3, #8
 8002e98:	69b9      	ldr	r1, [r7, #24]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f001 f88c 	bl	8003fb8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f103 0218 	add.w	r2, r3, #24
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	3b04      	subs	r3, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f001 f883 	bl	8003fb8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8002ebe:	2014      	movs	r0, #20
 8002ec0:	f7fd ffdf 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ecc:	fb01 f202 	mul.w	r2, r1, r2
 8002ed0:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	619a      	str	r2, [r3, #24]
    }
 8002ee0:	bf00      	nop
 8002ee2:	3724      	adds	r7, #36	; 0x24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd90      	pop	{r4, r7, pc}

08002ee8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d209      	bcs.n	8002f14 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4619      	mov	r1, r3
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f001 f872 	bl	8003ff0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e7f1      	b.n	8002ef8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8002f14:	bf00      	nop
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	68f9      	ldr	r1, [r7, #12]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 f871 	bl	8004016 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 f887 	bl	8004050 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002f42:	f107 0314 	add.w	r3, r7, #20
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f876 	bl	8004038 <_ZNSaIP7RequestED1Ev>
      }
 8002f4c:	bf00      	nop
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	3308      	adds	r3, #8
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f81e 	bl	8002fa6 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	3318      	adds	r3, #24
 8002f80:	4619      	mov	r1, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f80f 	bl	8002fa6 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	60da      	str	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b08c      	sub	sp, #48	; 0x30
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 8002fec:	f107 0310 	add.w	r3, r7, #16
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ffd7 	bl	8002fa6 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002ff8:	f107 0320 	add.w	r3, r7, #32
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ffd1 	bl	8002fa6 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8003004:	f107 0220 	add.w	r2, r7, #32
 8003008:	f107 0310 	add.w	r3, r7, #16
 800300c:	4619      	mov	r1, r3
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f001 f82d 	bl	800406e <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8003014:	bf00      	nop
 8003016:	3730      	adds	r7, #48	; 0x30
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f001 f890 	bl	800414a <_ZNSaI8ResponceED1Ev>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>:
      _Deque_base()
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4618      	mov	r0, r3
 8003040:	f001 f873 	bl	800412a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8003044:	2100      	movs	r1, #0
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f001 f88b 	bl	8004162 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d010      	beq.n	8003088 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800306e:	3304      	adds	r3, #4
 8003070:	461a      	mov	r2, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f001 f8d8 	bl	8004228 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	461a      	mov	r2, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f001 f8ea 	bl	800425c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ffc6 	bl	800301c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	3308      	adds	r3, #8
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f81e 	bl	80030ec <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	3318      	adds	r3, #24
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f80f 	bl	80030ec <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8003124:	b580      	push	{r7, lr}
 8003126:	b08c      	sub	sp, #48	; 0x30
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 8003132:	f107 0310 	add.w	r3, r7, #16
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ffd7 	bl	80030ec <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 800313e:	f107 0320 	add.w	r3, r7, #32
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ffd1 	bl	80030ec <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 800314a:	f107 0220 	add.w	r2, r7, #32
 800314e:	f107 0310 	add.w	r3, r7, #16
 8003152:	4619      	mov	r1, r3
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f001 f89d 	bl	8004294 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 800315a:	bf00      	nop
 800315c:	3730      	adds	r7, #48	; 0x30
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f001 f8ed 	bl	800434a <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
	{ }
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
	if (__p)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f001 f8c5 	bl	8004360 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f001 f8bb 	bl	800437e <_ZSt8_DestroyIPhEvT_S1_>
    }
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ffec 	bl	8003210 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8003238:	4603      	mov	r3, r0
 800323a:	461a      	mov	r2, r3
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f001 f8aa 	bl	8004398 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 800324c:	b5b0      	push	{r4, r5, r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f001 f8b6 	bl	80043c8 <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 800325c:	4604      	mov	r4, r0
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f001 f8c4 	bl	80043ec <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8003264:	4603      	mov	r3, r0
 8003266:	429c      	cmp	r4, r3
 8003268:	bf0c      	ite	eq
 800326a:	2301      	moveq	r3, #1
 800326c:	2300      	movne	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8003274:	4816      	ldr	r0, [pc, #88]	; (80032d0 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 8003276:	f019 fedf 	bl	801d038 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 800327a:	2101      	movs	r1, #1
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f001 f8c6 	bl	800440e <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	1d1c      	adds	r4, r3, #4
 800328a:	4610      	mov	r0, r2
 800328c:	f001 f8da 	bl	8004444 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8003290:	4603      	mov	r3, r0
 8003292:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8003294:	687c      	ldr	r4, [r7, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699d      	ldr	r5, [r3, #24]
 800329a:	6838      	ldr	r0, [r7, #0]
 800329c:	f7ff ffb8 	bl	8003210 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80032a0:	4603      	mov	r3, r0
 80032a2:	461a      	mov	r2, r3
 80032a4:	4629      	mov	r1, r5
 80032a6:	4620      	mov	r0, r4
 80032a8:	f7ff ffbd 	bl	8003226 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f103 0218 	add.w	r2, r3, #24
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	3304      	adds	r3, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f000 fe7c 	bl	8003fb8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bdb0      	pop	{r4, r5, r7, pc}
 80032d0:	0801e748 	.word	0x0801e748

080032d4 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 80032ea:	b590      	push	{r4, r7, lr}
 80032ec:	b089      	sub	sp, #36	; 0x24
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 f8b2 	bl	8004468 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 8003304:	f107 021c 	add.w	r2, r7, #28
 8003308:	f107 0310 	add.w	r3, r7, #16
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f001 f8bb 	bl	800448a <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 8003314:	f107 031c 	add.w	r3, r7, #28
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff f98f 	bl	800263c <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f001 f8bf 	bl	80044a8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	f107 0310 	add.w	r3, r7, #16
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f001 f8b8 	bl	80044a8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff4f 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003340:	4604      	mov	r4, r0
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff4a 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800334a:	4603      	mov	r3, r0
 800334c:	4619      	mov	r1, r3
 800334e:	4620      	mov	r0, r4
 8003350:	f001 f8c8 	bl	80044e4 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 8003354:	f107 0310 	add.w	r3, r7, #16
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f993 	bl	8002684 <_ZNSt6vectorIhSaIhEED1Ev>
      }
 800335e:	bf00      	nop
 8003360:	3724      	adds	r7, #36	; 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}

08003366 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f103 0218 	add.w	r2, r3, #24
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3308      	adds	r3, #8
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f001 f8ac 	bl	8004500 <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
	return *begin();
 80033ba:	f107 0308 	add.w	r3, r7, #8
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fe6a 	bl	800309a <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 80033c6:	f107 0308 	add.w	r3, r7, #8
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 f8ac 	bl	8004528 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>
 80033d0:	4603      	mov	r3, r0
      }
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80033fa:	6839      	ldr	r1, [r7, #0]
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f001 f89f 	bl	8004540 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	3b10      	subs	r3, #16
	if (this->_M_impl._M_start._M_cur
 8003464:	429a      	cmp	r2, r3
 8003466:	d011      	beq.n	800348c <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fe33 	bl	80030d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003470:	4602      	mov	r2, r0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f001 f86d 	bl	8004558 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
	    ++this->_M_impl._M_start._M_cur;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f103 0210 	add.w	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	609a      	str	r2, [r3, #8]
      }
 800348a:	e002      	b.n	8003492 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f001 f870 	bl	8004572 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>
      }
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f805 	bl	80034b0 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80034a6:	4603      	mov	r3, r0
      }
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80034b8:	2301      	movs	r3, #1
      }
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 80034c8:	b5b0      	push	{r4, r5, r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80a8 	beq.w	800362a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
	{
	  const size_type __size = size();
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff f9d9 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80034e0:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 80034ec:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f001 f867 	bl	80045c2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80034f4:	4602      	mov	r2, r0
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d808      	bhi.n	800350e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x46>
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f001 f860 	bl	80045c2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8003502:	4602      	mov	r2, r0
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	429a      	cmp	r2, r3
 800350c:	d901      	bls.n	8003512 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4a>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
 8003512:	2300      	movs	r3, #0
 8003514:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d30f      	bcc.n	800353e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x76>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fe5a 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800352a:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800352c:	461a      	mov	r2, r3
 800352e:	6839      	ldr	r1, [r7, #0]
 8003530:	4620      	mov	r0, r4
 8003532:	f001 f857 	bl	80045e4 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 8003536:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 800353c:	e075      	b.n	800362a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
		_M_check_len(__n, "vector::_M_default_append");
 800353e:	4a3d      	ldr	r2, [pc, #244]	; (8003634 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x16c>)
 8003540:	6839      	ldr	r1, [r7, #0]
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f001 f85d 	bl	8004602 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8003548:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6979      	ldr	r1, [r7, #20]
 800354e:	4618      	mov	r0, r3
 8003550:	f001 f89e 	bl	8004690 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8003554:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8003556:	f7ff ffa0 	bl	800349a <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01b      	beq.n	8003598 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd0>
		      std::__uninitialized_default_n_a(__new_start + __size,
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fe38 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800356e:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 8003570:	461a      	mov	r2, r3
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	4620      	mov	r0, r4
 8003576:	f001 f835 	bl	80045e4 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681c      	ldr	r4, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fe2a 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800358a:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4629      	mov	r1, r5
 8003590:	4620      	mov	r0, r4
 8003592:	f001 f891 	bl	80046b8 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8003596:	e02e      	b.n	80035f6 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x12e>
		  pointer __destroy_from = pointer();
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fe1a 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80035aa:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 80035ac:	461a      	mov	r2, r3
 80035ae:	6839      	ldr	r1, [r7, #0]
 80035b0:	4620      	mov	r0, r4
 80035b2:	f001 f817 	bl	80045e4 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		      __destroy_from = __new_start + __size;
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681c      	ldr	r4, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fe08 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80035ce:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4629      	mov	r1, r5
 80035d4:	4620      	mov	r0, r4
 80035d6:	f001 f883 	bl	80046e0 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681c      	ldr	r4, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fdfa 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80035ea:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80035ec:	461a      	mov	r2, r3
 80035ee:	4629      	mov	r1, r5
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7ff fdff 	bl	80031f4 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8003606:	461a      	mov	r2, r3
 8003608:	f7ff fdd6 	bl	80031b8 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4413      	add	r3, r2
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	441a      	add	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	441a      	add	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	609a      	str	r2, [r3, #8]
    }
 800362a:	bf00      	nop
 800362c:	3720      	adds	r7, #32
 800362e:	46bd      	mov	sp, r7
 8003630:	bdb0      	pop	{r4, r5, r7, pc}
 8003632:	bf00      	nop
 8003634:	0801e778 	.word	0x0801e778

08003638 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00e      	beq.n	8003670 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fdc0 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800365e:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8003660:	461a      	mov	r2, r3
 8003662:	4621      	mov	r1, r4
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f7ff fdc5 	bl	80031f4 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	605a      	str	r2, [r3, #4]
      }
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	bd90      	pop	{r4, r7, pc}

08003678 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80036a6:	b5b0      	push	{r4, r5, r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	3b10      	subs	r3, #16
	if (this->_M_impl._M_finish._M_cur
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d012      	beq.n	80036e4 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 80036be:	687c      	ldr	r4, [r7, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699d      	ldr	r5, [r3, #24]
 80036c4:	6838      	ldr	r0, [r7, #0]
 80036c6:	f7ff ffe3 	bl	8003690 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80036ca:	4603      	mov	r3, r0
 80036cc:	461a      	mov	r2, r3
 80036ce:	4629      	mov	r1, r5
 80036d0:	4620      	mov	r0, r4
 80036d2:	f001 f81e 	bl	8004712 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f103 0210 	add.w	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	619a      	str	r2, [r3, #24]
      }
 80036e2:	e007      	b.n	80036f4 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 80036e4:	6838      	ldr	r0, [r7, #0]
 80036e6:	f7ff ffd3 	bl	8003690 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f001 f822 	bl	8004738 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bdb0      	pop	{r4, r5, r7, pc}

080036fc <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800371e:	6839      	ldr	r1, [r7, #0]
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f001 f84d 	bl	80047c0 <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>
	}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fc29 	bl	8002f90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800373e:	4602      	mov	r2, r0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f7ff ffe4 	bl	8003714 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4619      	mov	r1, r3
 8003754:	4610      	mov	r0, r2
 8003756:	f000 fc4b 	bl	8003ff0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f103 0208 	add.w	r2, r3, #8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	3304      	adds	r3, #4
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f000 fc25 	bl	8003fb8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	609a      	str	r2, [r3, #8]
    }
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <_ZStneRKSaIhES1_>:
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

#if __cpp_impl_three_way_comparison < 201907L
      friend _GLIBCXX20_CONSTEXPR bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
      { return false; }
 800379e:	2300      	movs	r3, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <_ZNSt6vectorIhSaIhEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4619      	mov	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ff3c 	bl	8003638 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 80037d2:	461a      	mov	r2, r3
 80037d4:	6839      	ldr	r1, [r7, #0]
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fffe 	bl	80047d8 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f000 ffec 	bl	80047f0 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	1d1a      	adds	r2, r3, #4
 800382e:	f107 030c 	add.w	r3, r7, #12
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f000 ffdb 	bl	80047f0 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 ff1a 	bl	8004690 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800385c:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fcbc 	bl	80031de <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003866:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	6839      	ldr	r1, [r7, #0]
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 ffcf 	bl	8004810 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8003872:	697b      	ldr	r3, [r7, #20]
	}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	f107 030c 	add.w	r3, r7, #12
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f000 ffd0 	bl	8004832 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 800389c:	b590      	push	{r4, r7, lr}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 ffd2 	bl	8004852 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 80038ae:	4604      	mov	r4, r0
 80038b0:	68b8      	ldr	r0, [r7, #8]
 80038b2:	f000 ffce 	bl	8004852 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 80038b6:	4603      	mov	r3, r0
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4620      	mov	r0, r4
 80038be:	f000 ffd3 	bl	8004868 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 80038c2:	4603      	mov	r3, r0
    }
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd90      	pop	{r4, r7, pc}

080038cc <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	1d1a      	adds	r2, r3, #4
 80038d8:	f107 030c 	add.w	r3, r7, #12
 80038dc:	4611      	mov	r1, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 ffa7 	bl	8004832 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 ffd4 	bl	80048aa <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800390a:	b590      	push	{r4, r7, lr}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 ffd4 	bl	80048c4 <_ZSt12__miter_baseIPhET_S1_>
 800391c:	4604      	mov	r4, r0
 800391e:	68b8      	ldr	r0, [r7, #8]
 8003920:	f000 ffd0 	bl	80048c4 <_ZSt12__miter_baseIPhET_S1_>
 8003924:	4603      	mov	r3, r0
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4619      	mov	r1, r3
 800392a:	4620      	mov	r0, r4
 800392c:	f000 ffd5 	bl	80048da <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8003930:	4603      	mov	r3, r0
    }
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	bd90      	pop	{r4, r7, pc}

0800393a <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 ffe7 	bl	8004920 <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 8003952:	4603      	mov	r3, r0
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8003966:	6838      	ldr	r0, [r7, #0]
 8003968:	f7fe fea7 	bl	80026ba <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 800396c:	4603      	mov	r3, r0
 800396e:	4619      	mov	r1, r3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fe fead 	bl	80026d0 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <_ZNKSt16initializer_listI8IMUFrameE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <_ZNKSt16initializer_listI8IMUFrameE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8003996:	b590      	push	{r4, r7, lr}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ffed 	bl	800397e <_ZNKSt16initializer_listI8IMUFrameE5beginEv>
 80039a4:	4604      	mov	r4, r0
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 ffcc 	bl	8004944 <_ZNKSt16initializer_listI8IMUFrameE4sizeEv>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4423      	add	r3, r4
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd90      	pop	{r4, r7, pc}

080039c0 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 80039c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039c2:	b09f      	sub	sp, #124	; 0x7c
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	703b      	strb	r3, [r7, #0]
	  const size_type __len = std::distance(__first, __last);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 ffc2 	bl	800495c <_ZSt8distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 80039d8:	4603      	mov	r3, r0
 80039da:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff f941 	bl	8002c64 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e6:	4293      	cmp	r3, r2
 80039e8:	bf8c      	ite	hi
 80039ea:	2301      	movhi	r3, #1
 80039ec:	2300      	movls	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d031      	beq.n	8003a58 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0x98>
	      _ForwardIterator __mid = __first;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff f933 	bl	8002c64 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80039fe:	4602      	mov	r2, r0
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 ffbc 	bl	8004984 <_ZSt7advanceIPK8IMUFramejEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8003a0c:	68bc      	ldr	r4, [r7, #8]
 8003a0e:	697d      	ldr	r5, [r7, #20]
 8003a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a14:	68f9      	ldr	r1, [r7, #12]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f988 	bl	8003d2c <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8003a1c:	f107 0018 	add.w	r0, r7, #24
 8003a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a24:	462a      	mov	r2, r5
 8003a26:	4621      	mov	r1, r4
 8003a28:	f000 ffbf 	bl	80049aa <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
	      _M_range_insert_aux(end(), __mid, __last,
 8003a2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a30:	68f9      	ldr	r1, [r7, #12]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f989 	bl	8003d4a <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 8003a38:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8003a3a:	f107 0308 	add.w	r3, r7, #8
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 ffd3 	bl	80049ea <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
	      _M_range_insert_aux(end(), __mid, __last,
 8003a44:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003a48:	f88d 6000 	strb.w	r6, [sp]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4622      	mov	r2, r4
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 ffd5 	bl	8004a00 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag>
	}
 8003a56:	e014      	b.n	8003a82 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8003a58:	68bc      	ldr	r4, [r7, #8]
 8003a5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a5e:	68f9      	ldr	r1, [r7, #12]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 f963 	bl	8003d2c <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8003a66:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003a6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4621      	mov	r1, r4
 8003a72:	f000 ff9a 	bl	80049aa <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
 8003a76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f001 f83c 	bl	8004afa <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
	}
 8003a82:	bf00      	nop
 8003a84:	3774      	adds	r7, #116	; 0x74
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a8a <_ZSt4moveIR8IMUFrameEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d014      	beq.n	8003ae0 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x40>
	    _Alloc_traits::construct(this->_M_impl,
 8003ab6:	687c      	ldr	r4, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8003abc:	f1a3 0518 	sub.w	r5, r3, #24
 8003ac0:	6838      	ldr	r0, [r7, #0]
 8003ac2:	f001 f84d 	bl	8004b60 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4629      	mov	r1, r5
 8003acc:	4620      	mov	r0, r4
 8003ace:	f001 f852 	bl	8004b76 <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f1a3 0218 	sub.w	r2, r3, #24
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	609a      	str	r2, [r3, #8]
      }
 8003ade:	e007      	b.n	8003af0 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x50>
	  _M_push_front_aux(std::forward<_Args>(__args)...);
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	f001 f83d 	bl	8004b60 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f001 f856 	bl	8004b9c <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>
      }
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bdb0      	pop	{r4, r5, r7, pc}

08003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8003b42:	f001 f8a0 	bl	8004c86 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8003b46:	4603      	mov	r3, r0
 8003b48:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	109b      	asrs	r3, r3, #2
 8003b56:	3b01      	subs	r3, #1
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6811      	ldr	r1, [r2, #0]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6852      	ldr	r2, [r2, #4]
 8003b64:	1a8a      	subs	r2, r1, r2
 8003b66:	10d2      	asrs	r2, r2, #3
 8003b68:	4908      	ldr	r1, [pc, #32]	; (8003b8c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_+0x54>)
 8003b6a:	fb01 f202 	mul.w	r2, r1, r2
 8003b6e:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	6891      	ldr	r1, [r2, #8]
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	1a8a      	subs	r2, r1, r2
 8003b7a:	10d2      	asrs	r2, r2, #3
 8003b7c:	4903      	ldr	r1, [pc, #12]	; (8003b8c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_+0x54>)
 8003b7e:	fb01 f202 	mul.w	r2, r1, r2
 8003b82:	4413      	add	r3, r2
      }
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	aaaaaaab 	.word	0xaaaaaaab

08003b90 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 8003b9a:	f107 0308 	add.w	r3, r7, #8
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 f877 	bl	8004c96 <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8003ba8:	f107 0308 	add.w	r3, r7, #8
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 f885 	bl	8004cbc <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f001 f885 	bl	8004cd4 <_ZNSaI8IMUFrameEC1Ev>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 f88d 	bl	8004cec <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <_ZNSaI8IMUFrameED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f001 f89a 	bl	8004d1e <_ZN9__gnu_cxx13new_allocatorI8IMUFrameED1Ev>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b089      	sub	sp, #36	; 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003bfe:	2018      	movs	r0, #24
 8003c00:	f7fd f93f 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8003c04:	4602      	mov	r2, r0
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003c10:	2308      	movs	r3, #8
 8003c12:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	3302      	adds	r3, #2
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	f107 0210 	add.w	r2, r7, #16
 8003c1e:	f107 030c 	add.w	r3, r7, #12
 8003c22:	4611      	mov	r1, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f97c 	bl	8003f22 <_ZSt3maxIjERKT_S2_S2_>
 8003c2a:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f001 f87b 	bl	8004d34 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6859      	ldr	r1, [r3, #4]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	1acb      	subs	r3, r1, r3
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003c54:	4413      	add	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4413      	add	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	69b9      	ldr	r1, [r7, #24]
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f001 f881 	bl	8004d6e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	69b9      	ldr	r1, [r7, #24]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 ffeb 	bl	8004c4e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f103 0218 	add.w	r2, r3, #24
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3b04      	subs	r3, #4
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f000 ffe2 	bl	8004c4e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8003c96:	2018      	movs	r0, #24
 8003c98:	f7fd f8f3 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ca4:	fb01 f202 	mul.w	r2, r1, r2
 8003ca8:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8003caa:	4613      	mov	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	4413      	add	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	619a      	str	r2, [r3, #24]
    }
 8003cb8:	bf00      	nop
 8003cba:	3724      	adds	r7, #36	; 0x24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd90      	pop	{r4, r7, pc}

08003cc0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d209      	bcs.n	8003cec <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 ffa2 	bl	8004c28 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	e7f1      	b.n	8003cd0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8003cec:	bf00      	nop
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003d00:	f107 0314 	add.w	r3, r7, #20
 8003d04:	68f9      	ldr	r1, [r7, #12]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 f84b 	bl	8004da2 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 f861 	bl	8004ddc <_ZNSt16allocator_traitsISaIP8IMUFrameEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003d1a:	f107 0314 	add.w	r3, r7, #20
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 f850 	bl	8004dc4 <_ZNSaIP8IMUFrameED1Ev>
      }
 8003d24:	bf00      	nop
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	3308      	adds	r3, #8
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f813 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	3318      	adds	r3, #24
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f804 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8003da0:	b480      	push	{r7}
 8003da2:	b08d      	sub	sp, #52	; 0x34
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
      }
 8003dae:	bf00      	nop
 8003db0:	3734      	adds	r7, #52	; 0x34
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8003dd0:	b590      	push	{r4, r7, lr}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 f809 	bl	8004dfa <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8003de8:	68b8      	ldr	r0, [r7, #8]
 8003dea:	f001 f813 	bl	8004e14 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff f8cd 	bl	8002f90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003df6:	4604      	mov	r4, r0
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff f8c8 	bl	8002f90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003e00:	4603      	mov	r3, r0
 8003e02:	4619      	mov	r1, r3
 8003e04:	4620      	mov	r0, r4
 8003e06:	f001 f819 	bl	8004e3c <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>
      }
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd90      	pop	{r4, r7, pc}

08003e12 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 f80c 	bl	8004e58 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8003e40:	68b8      	ldr	r0, [r7, #8]
 8003e42:	f001 f816 	bl	8004e72 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff f944 	bl	80030d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003e4e:	4604      	mov	r4, r0
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff f93f 	bl	80030d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f001 f81c 	bl	8004e9a <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>
      }
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd90      	pop	{r4, r7, pc}

08003e6a <_ZSt4moveIRSt5dequeI8IMUFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	4611      	mov	r1, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f001 f80f 	bl	8004eb6 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8003e98:	68b8      	ldr	r0, [r7, #8]
 8003e9a:	f001 f819 	bl	8004ed0 <_ZNSt5dequeI8IMUFrameSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fe29 	bl	8003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fe24 	bl	8003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f001 f81f 	bl	8004ef8 <_ZSt15__alloc_on_moveISaI8IMUFrameEEvRT_S3_>
      }
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd90      	pop	{r4, r7, pc}

08003ec2 <_ZNSaI7RequestEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f001 f822 	bl	8004f14 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 f819 	bl	8004f2a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3318      	adds	r3, #24
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 f814 	bl	8004f2a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
	{ }
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>:
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d201      	bcs.n	8003f3c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	e000      	b.n	8003f3e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003f3c:	687b      	ldr	r3, [r7, #4]
    }
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8003f4a:	b590      	push	{r4, r7, lr}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003f54:	f107 030c 	add.w	r3, r7, #12
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f85b 	bl	8004016 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003f60:	f107 030c 	add.w	r3, r7, #12
 8003f64:	6839      	ldr	r1, [r7, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fff6 	bl	8004f58 <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003f70:	f107 030c 	add.w	r3, r7, #12
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 f85f 	bl	8004038 <_ZNSaIP7RequestED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003f7a:	4623      	mov	r3, r4
      }
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd90      	pop	{r4, r7, pc}

08003f84 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d209      	bcs.n	8003fb0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fa51 	bl	8004444 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	3304      	adds	r3, #4
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e7f1      	b.n	8003f94 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8003fb0:	bf00      	nop
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685c      	ldr	r4, [r3, #4]
 8003fd4:	f000 ffcf 	bl	8004f76 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	18e2      	adds	r2, r4, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
      }
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd90      	pop	{r4, r7, pc}

08003ff0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8003ffa:	687c      	ldr	r4, [r7, #4]
 8003ffc:	2014      	movs	r0, #20
 8003ffe:	f7fc ff40 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004002:	4603      	mov	r3, r0
 8004004:	461a      	mov	r2, r3
 8004006:	6839      	ldr	r1, [r7, #0]
 8004008:	4620      	mov	r0, r4
 800400a:	f000 ffbc 	bl	8004f86 <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>
      }
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	bd90      	pop	{r4, r7, pc}

08004016 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8004020:	6838      	ldr	r0, [r7, #0]
 8004022:	f000 ffbf 	bl	8004fa4 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004026:	4603      	mov	r3, r0
 8004028:	4619      	mov	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 ffc5 	bl	8004fba <_ZNSaIP7RequestEC1IS_EERKSaIT_E>
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <_ZNSaIP7RequestED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 ffc7 	bl	8004fd4 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 ffc2 	bl	8004fea <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 800406e:	b5b0      	push	{r4, r5, r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	3304      	adds	r3, #4
 8004080:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	429a      	cmp	r2, r3
 800408a:	d219      	bcs.n	80040c0 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	681d      	ldr	r5, [r3, #0]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	681c      	ldr	r4, [r3, #0]
 8004094:	f000 ffb9 	bl	800500a <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>
 8004098:	4602      	mov	r2, r0
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe ff72 	bl	8002f90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80040ac:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80040ae:	461a      	mov	r2, r3
 80040b0:	4621      	mov	r1, r4
 80040b2:	4628      	mov	r0, r5
 80040b4:	f000 ffb1 	bl	800501a <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	3304      	adds	r3, #4
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e7e0      	b.n	8004082 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>

       if (__first._M_node != __last._M_node)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d01c      	beq.n	8004106 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	681c      	ldr	r4, [r3, #0]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe ff5a 	bl	8002f90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80040dc:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 80040de:	461a      	mov	r2, r3
 80040e0:	4629      	mov	r1, r5
 80040e2:	4620      	mov	r0, r4
 80040e4:	f000 ff99 	bl	800501a <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685c      	ldr	r4, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe ff4c 	bl	8002f90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80040f8:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 80040fa:	461a      	mov	r2, r3
 80040fc:	4629      	mov	r1, r5
 80040fe:	4620      	mov	r0, r4
 8004100:	f000 ff8b 	bl	800501a <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8004104:	e00d      	b.n	8004122 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	681c      	ldr	r4, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe ff3d 	bl	8002f90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004116:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8004118:	461a      	mov	r2, r3
 800411a:	4629      	mov	r1, r5
 800411c:	4620      	mov	r0, r4
 800411e:	f000 ff7c 	bl	800501a <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
     }
 8004122:	bf00      	nop
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bdb0      	pop	{r4, r5, r7, pc}

0800412a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 ff7f 	bl	8005036 <_ZNSaI8ResponceEC1Ev>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 ff87 	bl	800504e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <_ZNSaI8ResponceED1Ev>:
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 ff94 	bl	8005080 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8004162:	b590      	push	{r4, r7, lr}
 8004164:	b089      	sub	sp, #36	; 0x24
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800416c:	2010      	movs	r0, #16
 800416e:	f7fc fe88 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004172:	4602      	mov	r2, r0
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	fbb3 f3f2 	udiv	r3, r3, r2
 800417a:	3301      	adds	r3, #1
 800417c:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800417e:	2308      	movs	r3, #8
 8004180:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3302      	adds	r3, #2
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	f107 0210 	add.w	r2, r7, #16
 800418c:	f107 030c 	add.w	r3, r7, #12
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fec5 	bl	8003f22 <_ZSt3maxIjERKT_S2_S2_>
 8004198:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 ff75 	bl	8005096 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 80041ac:	4602      	mov	r2, r0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6859      	ldr	r1, [r3, #4]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	1acb      	subs	r3, r1, r3
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80041c2:	4413      	add	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4413      	add	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	69b9      	ldr	r1, [r7, #24]
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 ff7b 	bl	80050d0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3308      	adds	r3, #8
 80041de:	69b9      	ldr	r1, [r7, #24]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 ff8f 	bl	8005104 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f103 0218 	add.w	r2, r3, #24
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3b04      	subs	r3, #4
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f000 ff86 	bl	8005104 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004204:	2010      	movs	r0, #16
 8004206:	f7fc fe3c 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 800420a:	4602      	mov	r2, r0
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004212:	fb01 f202 	mul.w	r2, r1, r2
 8004216:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	619a      	str	r2, [r3, #24]
    }
 8004220:	bf00      	nop
 8004222:	3724      	adds	r7, #36	; 0x24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd90      	pop	{r4, r7, pc}

08004228 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d209      	bcs.n	8004254 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4619      	mov	r1, r3
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 ff75 	bl	8005136 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	3304      	adds	r3, #4
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	e7f1      	b.n	8004238 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8004254:	bf00      	nop
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004268:	f107 0314 	add.w	r3, r7, #20
 800426c:	68f9      	ldr	r1, [r7, #12]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 ff74 	bl	800515c <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 ff8a 	bl	8005196 <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004282:	f107 0314 	add.w	r3, r7, #20
 8004286:	4618      	mov	r0, r3
 8004288:	f000 ff79 	bl	800517e <_ZNSaIP8ResponceED1Ev>
      }
 800428c:	bf00      	nop
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
     deque<_Tp, _Alloc>::
 8004294:	b5b0      	push	{r4, r5, r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	3304      	adds	r3, #4
 80042a6:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d216      	bcs.n	80042e0 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	681d      	ldr	r5, [r3, #0]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	681c      	ldr	r4, [r3, #0]
 80042ba:	f000 ff7b 	bl	80051b4 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>
 80042be:	4603      	mov	r3, r0
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe ff05 	bl	80030d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80042cc:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80042ce:	461a      	mov	r2, r3
 80042d0:	4621      	mov	r1, r4
 80042d2:	4628      	mov	r0, r5
 80042d4:	f000 ff76 	bl	80051c4 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3304      	adds	r3, #4
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e7e3      	b.n	80042a8 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>
       if (__first._M_node != __last._M_node)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d01c      	beq.n	8004326 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	681c      	ldr	r4, [r3, #0]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe feed 	bl	80030d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80042fc:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 80042fe:	461a      	mov	r2, r3
 8004300:	4629      	mov	r1, r5
 8004302:	4620      	mov	r0, r4
 8004304:	f000 ff5e 	bl	80051c4 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685c      	ldr	r4, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fedf 	bl	80030d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004318:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 800431a:	461a      	mov	r2, r3
 800431c:	4629      	mov	r1, r5
 800431e:	4620      	mov	r0, r4
 8004320:	f000 ff50 	bl	80051c4 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8004324:	e00d      	b.n	8004342 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	681c      	ldr	r4, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe fed0 	bl	80030d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004336:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8004338:	461a      	mov	r2, r3
 800433a:	4629      	mov	r1, r5
 800433c:	4620      	mov	r0, r4
 800433e:	f000 ff41 	bl	80051c4 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8004342:	bf00      	nop
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bdb0      	pop	{r4, r5, r7, pc}

0800434a <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 ff35 	bl	80051e0 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 ff36 	bl	80051fc <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7fe ff33 	bl	8003210 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80043aa:	4604      	mov	r4, r0
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4619      	mov	r1, r3
 80043b0:	2014      	movs	r0, #20
 80043b2:	f7fc fd5a 	bl	8000e6a <_ZnwjPv>
 80043b6:	4603      	mov	r3, r0
 80043b8:	4621      	mov	r1, r4
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fd f95c 	bl	8001678 <_ZN7RequestC1EOS_>
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd90      	pop	{r4, r7, pc}

080043c8 <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f103 0218 	add.w	r2, r3, #24
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3308      	adds	r3, #8
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f000 ff19 	bl	8005214 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 80043e2:	4603      	mov	r3, r0
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fdd4 	bl	8004fa4 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80043fc:	4603      	mov	r3, r0
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 ff34 	bl	800526c <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>
 8004404:	4603      	mov	r3, r0
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	6809      	ldr	r1, [r1, #0]
 8004428:	1a41      	subs	r1, r0, r1
 800442a:	1089      	asrs	r1, r1, #2
 800442c:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800442e:	429a      	cmp	r2, r3
 8004430:	d904      	bls.n	800443c <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8004432:	2200      	movs	r2, #0
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 ff32 	bl	80052a0 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8004444:	b590      	push	{r4, r7, lr}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800444c:	687c      	ldr	r4, [r7, #4]
 800444e:	2014      	movs	r0, #20
 8004450:	f7fc fd17 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004454:	4603      	mov	r3, r0
 8004456:	4619      	mov	r1, r3
 8004458:	4620      	mov	r0, r4
 800445a:	f000 ffbb 	bl	80053d4 <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>
 800445e:	4603      	mov	r3, r0
      }
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bd90      	pop	{r4, r7, pc}

08004468 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8004472:	6838      	ldr	r0, [r7, #0]
 8004474:	f7ff f983 	bl	800377e <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004478:	4603      	mov	r3, r0
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fe ffb7 	bl	80033f0 <_ZNSaIhEC1ERKS_>
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6839      	ldr	r1, [r7, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 ffaa 	bl	80053f2 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 80044b2:	f107 030c 	add.w	r3, r7, #12
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fe5f 	bl	800317a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 80044bc:	f107 030c 	add.w	r3, r7, #12
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 ffa4 	bl	8005410 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 80044c8:	6839      	ldr	r1, [r7, #0]
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 ffa0 	bl	8005410 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 80044d0:	f107 030c 	add.w	r3, r7, #12
 80044d4:	4619      	mov	r1, r3
 80044d6:	6838      	ldr	r0, [r7, #0]
 80044d8:	f000 ff9a 	bl	8005410 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 80044dc:	bf00      	nop
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80044ee:	461a      	mov	r2, r3
 80044f0:	6839      	ldr	r1, [r7, #0]
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 ffa3 	bl	800543e <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8004562:	6839      	ldr	r1, [r7, #0]
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 ff77 	bl	8005458 <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>
	}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe fdaa 	bl	80030d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004582:	4602      	mov	r2, r0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4619      	mov	r1, r3
 800458a:	4610      	mov	r0, r2
 800458c:	f7ff ffe4 	bl	8004558 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	4619      	mov	r1, r3
 8004598:	4610      	mov	r0, r2
 800459a:	f000 fdcc 	bl	8005136 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f103 0208 	add.w	r2, r3, #8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f000 fda9 	bl	8005104 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	609a      	str	r2, [r3, #8]
    }
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff f8d6 	bl	800377e <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80045d2:	4603      	mov	r3, r0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 ff4b 	bl	8005470 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 80045da:	4603      	mov	r3, r0
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 ff56 	bl	80054a4 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 80045f8:	4603      	mov	r3, r0
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8004602:	b590      	push	{r4, r7, lr}
 8004604:	b087      	sub	sp, #28
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7ff ffd7 	bl	80045c2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8004614:	4604      	mov	r4, r0
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7fe f93b 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800461c:	4603      	mov	r3, r0
 800461e:	1ae2      	subs	r2, r4, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	bf34      	ite	cc
 8004626:	2301      	movcc	r3, #1
 8004628:	2300      	movcs	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f018 fd01 	bl	801d038 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7fe f92b 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800463c:	4604      	mov	r4, r0
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7fe f927 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004644:	4603      	mov	r3, r0
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	f107 0208 	add.w	r2, r7, #8
 800464c:	f107 0310 	add.w	r3, r7, #16
 8004650:	4611      	mov	r1, r2
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff fc65 	bl	8003f22 <_ZSt3maxIjERKT_S2_S2_>
 8004658:	4603      	mov	r3, r0
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4423      	add	r3, r4
 800465e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7fe f916 	bl	8002892 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004666:	4602      	mov	r2, r0
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	4293      	cmp	r3, r2
 800466c:	d306      	bcc.n	800467c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff ffa7 	bl	80045c2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8004674:	4602      	mov	r2, r0
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	4293      	cmp	r3, r2
 800467a:	d904      	bls.n	8004686 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7ff ffa0 	bl	80045c2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8004682:	4603      	mov	r3, r0
 8004684:	e000      	b.n	8004688 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8004686:	697b      	ldr	r3, [r7, #20]
      }
 8004688:	4618      	mov	r0, r3
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	bd90      	pop	{r4, r7, pc}

08004690 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d006      	beq.n	80046ae <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6839      	ldr	r1, [r7, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 ff0d 	bl	80054c4 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 80046aa:	4603      	mov	r3, r0
 80046ac:	e000      	b.n	80046b0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 80046ae:	2300      	movs	r3, #0
      }
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80046c6:	f88d 4000 	strb.w	r4, [sp]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 ff06 	bl	80054e2 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 80046d6:	4603      	mov	r3, r0
      }
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd90      	pop	{r4, r7, pc}

080046e0 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 ff09 	bl	8005506 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 80046f4:	4604      	mov	r4, r0
 80046f6:	68b8      	ldr	r0, [r7, #8]
 80046f8:	f000 ff05 	bl	8005506 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 80046fc:	4601      	mov	r1, r0
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4620      	mov	r0, r4
 8004704:	f000 ff0e 	bl	8005524 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8004708:	4603      	mov	r3, r0
    }
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}

08004712 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fe ffb6 	bl	8003690 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 ff0b 	bl	8005546 <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 ff17 	bl	8005576 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 8004748:	4604      	mov	r4, r0
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 ff25 	bl	800559a <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>
 8004750:	4603      	mov	r3, r0
 8004752:	429c      	cmp	r4, r3
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8004760:	4816      	ldr	r0, [pc, #88]	; (80047bc <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 8004762:	f018 fc69 	bl	801d038 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8004766:	2101      	movs	r1, #1
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 ff27 	bl	80055bc <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	1d1c      	adds	r4, r3, #4
 8004776:	4610      	mov	r0, r2
 8004778:	f000 ff3b 	bl	80055f2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 800477c:	4603      	mov	r3, r0
 800477e:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8004780:	687c      	ldr	r4, [r7, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699d      	ldr	r5, [r3, #24]
 8004786:	6838      	ldr	r0, [r7, #0]
 8004788:	f7fe ff82 	bl	8003690 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 800478c:	4603      	mov	r3, r0
 800478e:	461a      	mov	r2, r3
 8004790:	4629      	mov	r1, r5
 8004792:	4620      	mov	r0, r4
 8004794:	f7ff ffbd 	bl	8004712 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f103 0218 	add.w	r2, r3, #24
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f000 fcac 	bl	8005104 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	619a      	str	r2, [r3, #24]
      }
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bdb0      	pop	{r4, r5, r7, pc}
 80047bc:	0801e748 	.word	0x0801e748

080047c0 <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80047ca:	6838      	ldr	r0, [r7, #0]
 80047cc:	f7fc fbdf 	bl	8000f8e <_ZN7RequestD1Ev>
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	713a      	strb	r2, [r7, #4]
    { }
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fef7 	bl	8005616 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8004828:	4603      	mov	r3, r0
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4618      	mov	r0, r3
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
    { return __it; }
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004868:	b5b0      	push	{r4, r5, r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fee0 	bl	800563a <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800487a:	4604      	mov	r4, r0
 800487c:	68b8      	ldr	r0, [r7, #8]
 800487e:	f000 fedc 	bl	800563a <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004882:	4605      	mov	r5, r0
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fee6 	bl	8005656 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800488a:	4603      	mov	r3, r0
 800488c:	461a      	mov	r2, r3
 800488e:	4629      	mov	r1, r5
 8004890:	4620      	mov	r0, r4
 8004892:	f000 feee 	bl	8005672 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8004896:	4603      	mov	r3, r0
 8004898:	4619      	mov	r1, r3
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fef9 	bl	8005692 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>
 80048a0:	4603      	mov	r3, r0
    }
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bdb0      	pop	{r4, r5, r7, pc}

080048aa <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80048b4:	6839      	ldr	r1, [r7, #0]
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 ff00 	bl	80056bc <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
    { return __it; }
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80048da:	b5b0      	push	{r4, r5, r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fef3 	bl	80056d2 <_ZSt12__niter_baseIPhET_S1_>
 80048ec:	4604      	mov	r4, r0
 80048ee:	68b8      	ldr	r0, [r7, #8]
 80048f0:	f000 feef 	bl	80056d2 <_ZSt12__niter_baseIPhET_S1_>
 80048f4:	4605      	mov	r5, r0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 feea 	bl	80056d2 <_ZSt12__niter_baseIPhET_S1_>
 80048fe:	4603      	mov	r3, r0
 8004900:	461a      	mov	r2, r3
 8004902:	4629      	mov	r1, r5
 8004904:	4620      	mov	r0, r4
 8004906:	f000 feef 	bl	80056e8 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 800490a:	4602      	mov	r2, r0
 800490c:	1d3b      	adds	r3, r7, #4
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fef9 	bl	8005708 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8004916:	4603      	mov	r3, r0
    }
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bdb0      	pop	{r4, r5, r7, pc}

08004920 <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800492c:	2301      	movs	r3, #1
 800492e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fef3 	bl	8005720 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 800493a:	4603      	mov	r3, r0
    }
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <_ZNKSt16initializer_listI8IMUFrameE4sizeEv>:
      size() const noexcept { return _M_len; }
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <_ZSt8distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800495c:	b5b0      	push	{r4, r5, r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004966:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004968:	1d3b      	adds	r3, r7, #4
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f83d 	bl	80049ea <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 8004970:	462a      	mov	r2, r5
 8004972:	6839      	ldr	r1, [r7, #0]
 8004974:	4620      	mov	r0, r4
 8004976:	f000 fee3 	bl	8005740 <_ZSt10__distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 800497a:	4603      	mov	r3, r0
    }
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bdb0      	pop	{r4, r5, r7, pc}

08004984 <_ZSt7advanceIPK8IMUFramejEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8004984:	b590      	push	{r4, r7, lr}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f829 	bl	80049ea <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 8004998:	4622      	mov	r2, r4
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fee5 	bl	800576c <_ZSt9__advanceIPK8IMUFrameiEvRT_T0_St26random_access_iterator_tag>
    }
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd90      	pop	{r4, r7, pc}

080049aa <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 80049aa:	b5b0      	push	{r4, r5, r7, lr}
 80049ac:	b088      	sub	sp, #32
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80049b8:	68b8      	ldr	r0, [r7, #8]
 80049ba:	f000 feed 	bl	8005798 <_ZSt12__miter_baseIPK8IMUFrameET_S3_>
 80049be:	4604      	mov	r4, r0
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fee9 	bl	8005798 <_ZSt12__miter_baseIPK8IMUFrameET_S3_>
 80049c6:	4605      	mov	r5, r0
 80049c8:	f107 0310 	add.w	r3, r7, #16
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff f9ca 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f107 0310 	add.w	r3, r7, #16
 80049da:	462a      	mov	r2, r5
 80049dc:	4621      	mov	r1, r4
 80049de:	f000 fee6 	bl	80057ae <_ZSt13__copy_move_aILb0EPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET1_T0_S8_S7_>
    }
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bdb0      	pop	{r4, r5, r7, pc}

080049ea <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80049f2:	bf00      	nop
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag>:
      deque<_Tp, _Alloc>::
 8004a00:	b590      	push	{r4, r7, lr}
 8004a02:	b0a5      	sub	sp, #148	; 0x94
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
	const size_type __n = std::distance(__first, __last);
 8004a0e:	6839      	ldr	r1, [r7, #0]
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ffa3 	bl	800495c <_ZSt8distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d126      	bne.n	8004a76 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0x76>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8004a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004a30:	68f9      	ldr	r1, [r7, #12]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 feec 	bl	8005810 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj>
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8004a38:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004a3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a40:	4611      	mov	r1, r2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff f990 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					    _M_get_Tp_allocator());
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff f854 	bl	8003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8004a50:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8004a52:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004a56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a5a:	9200      	str	r2, [sp, #0]
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	f000 ff00 	bl	8005864 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f103 0408 	add.w	r4, r3, #8
 8004a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004a74:	e03d      	b.n	8004af2 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d127      	bne.n	8004ad2 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 8004a82:	f107 0314 	add.w	r3, r7, #20
 8004a86:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 ff01 	bl	8005894 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 8004a98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff f962 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					    _M_get_Tp_allocator());
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff f826 	bl	8003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8004aac:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 8004aae:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004ab2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004ab6:	9200      	str	r2, [sp, #0]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	f000 fed2 	bl	8005864 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f103 0418 	add.w	r4, r3, #24
 8004ac6:	f107 0314 	add.w	r3, r7, #20
 8004aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004ad0:	e00f      	b.n	8004af2 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 8004ad2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff f945 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8004ade:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8004ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fefb 	bl	80058e8 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j>
      }
 8004af2:	bf00      	nop
 8004af4:	378c      	adds	r7, #140	; 0x8c
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd90      	pop	{r4, r7, pc}

08004afa <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8004afa:	b590      	push	{r4, r7, lr}
 8004afc:	b08b      	sub	sp, #44	; 0x2c
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8004b04:	f107 0308 	add.w	r3, r7, #8
 8004b08:	6839      	ldr	r1, [r7, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff f92c 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8004b10:	f107 0318 	add.w	r3, r7, #24
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff f917 	bl	8003d4a <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe ffea 	bl	8003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f107 0218 	add.w	r2, r7, #24
 8004b2a:	f107 0108 	add.w	r1, r7, #8
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff f936 	bl	8003da0 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8004b40:	3304      	adds	r3, #4
 8004b42:	461a      	mov	r2, r3
 8004b44:	f7ff f8bc 	bl	8003cc0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	f103 0418 	add.w	r4, r3, #24
 8004b50:	4613      	mov	r3, r2
 8004b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004b58:	bf00      	nop
 8004b5a:	372c      	adds	r7, #44	; 0x2c
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd90      	pop	{r4, r7, pc}

08004b60 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff ffec 	bl	8004b60 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f001 f99d 	bl	8005ece <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8004b9c:	b5b0      	push	{r4, r5, r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fe f85c 	bl	8002c64 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8004bac:	4604      	mov	r4, r0
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f001 f9a8 	bl	8005f04 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	429c      	cmp	r4, r3
 8004bb8:	bf0c      	ite	eq
 8004bba:	2301      	moveq	r3, #1
 8004bbc:	2300      	movne	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8004bc4:	4817      	ldr	r0, [pc, #92]	; (8004c24 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x88>)
 8004bc6:	f018 fa37 	bl	801d038 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 8004bca:	2101      	movs	r1, #1
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f001 f9aa 	bl	8005f26 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	1f1c      	subs	r4, r3, #4
 8004bda:	4610      	mov	r0, r2
 8004bdc:	f001 f9bb 	bl	8005f56 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8004be0:	4603      	mov	r3, r0
 8004be2:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f103 0208 	add.w	r2, r3, #8
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	3b04      	subs	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f000 f82b 	bl	8004c4e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f1a3 0218 	sub.w	r2, r3, #24
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8004c04:	687c      	ldr	r4, [r7, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689d      	ldr	r5, [r3, #8]
 8004c0a:	6838      	ldr	r0, [r7, #0]
 8004c0c:	f7ff ffa8 	bl	8004b60 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	4629      	mov	r1, r5
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7ff ffad 	bl	8004b76 <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      }
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bdb0      	pop	{r4, r5, r7, pc}
 8004c24:	0801e748 	.word	0x0801e748

08004c28 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8004c32:	687c      	ldr	r4, [r7, #4]
 8004c34:	2018      	movs	r0, #24
 8004c36:	f7fc f924 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6839      	ldr	r1, [r7, #0]
 8004c40:	4620      	mov	r0, r4
 8004c42:	f001 f9ba 	bl	8005fba <_ZNSt16allocator_traitsISaI8IMUFrameEE10deallocateERS1_PS0_j>
      }
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd90      	pop	{r4, r7, pc}

08004c4e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004c4e:	b590      	push	{r4, r7, lr}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685c      	ldr	r4, [r3, #4]
 8004c6a:	f000 f80c 	bl	8004c86 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	4613      	mov	r3, r2
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4413      	add	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	18e2      	adds	r2, r4, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	609a      	str	r2, [r3, #8]
      }
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd90      	pop	{r4, r7, pc}

08004c86 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004c86:	b580      	push	{r7, lr}
 8004c88:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004c8a:	2018      	movs	r0, #24
 8004c8c:	f7fc f8f9 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4618      	mov	r0, r3
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f7ff f85f 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	__tmp += __n;
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f001 f993 	bl	8005fd8 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	return __tmp;
 8004cb2:	bf00      	nop
      }
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <_ZNSaI8IMUFrameEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 f9df 	bl	80060a0 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameEC1Ev>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	605a      	str	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3308      	adds	r3, #8
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 f9d6 	bl	80060b6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 f9d1 	bl	80060b6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>
	{ }
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <_ZN9__gnu_cxx13new_allocatorI8IMUFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8004d34:	b590      	push	{r4, r7, lr}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004d3e:	f107 030c 	add.w	r3, r7, #12
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f82c 	bl	8004da2 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004d4a:	f107 030c 	add.w	r3, r7, #12
 8004d4e:	6839      	ldr	r1, [r7, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f001 f9c7 	bl	80060e4 <_ZNSt16allocator_traitsISaIP8IMUFrameEE8allocateERS2_j>
 8004d56:	4604      	mov	r4, r0
 8004d58:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004d5a:	f107 030c 	add.w	r3, r7, #12
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 f830 	bl	8004dc4 <_ZNSaIP8IMUFrameED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004d64:	4623      	mov	r3, r4
      }
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd90      	pop	{r4, r7, pc}

08004d6e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b086      	sub	sp, #24
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d209      	bcs.n	8004d9a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f001 f8e5 	bl	8005f56 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	3304      	adds	r3, #4
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e7f1      	b.n	8004d7e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8004d9a:	bf00      	nop
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8004dac:	6838      	ldr	r0, [r7, #0]
 8004dae:	f001 f9a8 	bl	8006102 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8004db2:	4603      	mov	r3, r0
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f001 f9ae 	bl	8006118 <_ZNSaIP8IMUFrameEC1IS_EERKSaIT_E>
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <_ZNSaIP8IMUFrameED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f001 f9b0 	bl	8006132 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameED1Ev>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <_ZNSt16allocator_traitsISaIP8IMUFrameEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f001 f9ab 	bl	8006148 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE10deallocateEPS2_j>
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 f9b6 	bl	8006178 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8004e1c:	f107 0308 	add.w	r3, r7, #8
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe f896 	bl	8002f54 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8004e28:	f107 0308 	add.w	r3, r7, #8
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f001 f9d5 	bl	80061de <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8004e34:	bf00      	nop
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8004e46:	461a      	mov	r2, r3
 8004e48:	6839      	ldr	r1, [r7, #0]
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f001 f9fa 	bl	8006244 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8004e62:	6839      	ldr	r1, [r7, #0]
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f001 f9fa 	bl	800625e <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b086      	sub	sp, #24
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8004e7a:	f107 0308 	add.w	r3, r7, #8
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fe f90a 	bl	800309a <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8004e86:	f107 0308 	add.w	r3, r7, #8
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 fa19 	bl	80062c4 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8004e92:	bf00      	nop
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6839      	ldr	r1, [r7, #0]
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 fa3e 	bl	800632a <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f001 fa3e 	bl	8006344 <_ZSt4swapINSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <_ZNSt5dequeI8IMUFrameSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8004ed8:	f107 0308 	add.w	r3, r7, #8
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe ff24 	bl	8003d2c <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8004ee4:	f107 0308 	add.w	r3, r7, #8
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fe05 	bl	8004afa <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8004ef0:	bf00      	nop
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <_ZSt15__alloc_on_moveISaI8IMUFrameEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8004f02:	461a      	mov	r2, r3
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f001 fa4f 	bl	80063aa <_ZSt18__do_alloc_on_moveISaI8IMUFrameEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	609a      	str	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	60da      	str	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004f62:	2200      	movs	r2, #0
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f001 fa2c 	bl	80063c4 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004f76:	b580      	push	{r7, lr}
 8004f78:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004f7a:	2014      	movs	r0, #20
 8004f7c:	f7fb ff81 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4618      	mov	r0, r3
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f001 fa32 	bl	8006400 <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <_ZNSaIP7RequestEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 fa2e 	bl	8006426 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	68b8      	ldr	r0, [r7, #8]
 8004ffe:	f018 f805 	bl	801d00c <_ZdlPvj>
      }
 8005002:	bf00      	nop
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800500a:	b580      	push	{r7, lr}
 800500c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800500e:	2014      	movs	r0, #20
 8005010:	f7fb ff37 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8005014:	4603      	mov	r3, r0
 8005016:	4618      	mov	r0, r3
 8005018:	bd80      	pop	{r7, pc}

0800501a <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f001 fa07 	bl	800643c <_ZSt8_DestroyIP7RequestEvT_S2_>
    }
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <_ZNSaI8ResponceEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 fa09 	bl	8006456 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3308      	adds	r3, #8
 8005066:	4618      	mov	r0, r3
 8005068:	f001 fa00 	bl	800646c <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3318      	adds	r3, #24
 8005070:	4618      	mov	r0, r3
 8005072:	f001 f9fb 	bl	800646c <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
	{ }
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8005096:	b590      	push	{r4, r7, lr}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80050a0:	f107 030c 	add.w	r3, r7, #12
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f858 	bl	800515c <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80050ac:	f107 030c 	add.w	r3, r7, #12
 80050b0:	6839      	ldr	r1, [r7, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 f9f1 	bl	800649a <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>
 80050b8:	4604      	mov	r4, r0
 80050ba:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80050bc:	f107 030c 	add.w	r3, r7, #12
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 f85c 	bl	800517e <_ZNSaIP8ResponceED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80050c6:	4623      	mov	r3, r4
      }
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd90      	pop	{r4, r7, pc}

080050d0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d209      	bcs.n	80050fc <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fa82 	bl	80055f2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 80050ee:	4602      	mov	r2, r0
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	3304      	adds	r3, #4
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	e7f1      	b.n	80050e0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 80050fc:	bf00      	nop
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8005104:	b590      	push	{r4, r7, lr}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685c      	ldr	r4, [r3, #4]
 8005120:	f001 f9ca 	bl	80064b8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8005124:	4603      	mov	r3, r0
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	18e2      	adds	r2, r4, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	609a      	str	r2, [r3, #8]
      }
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	bd90      	pop	{r4, r7, pc}

08005136 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8005136:	b590      	push	{r4, r7, lr}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8005140:	687c      	ldr	r4, [r7, #4]
 8005142:	2010      	movs	r0, #16
 8005144:	f7fb fe9d 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	4620      	mov	r0, r4
 8005150:	f001 f9ba 	bl	80064c8 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>
      }
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	bd90      	pop	{r4, r7, pc}

0800515c <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8005166:	6838      	ldr	r0, [r7, #0]
 8005168:	f001 f9bd 	bl	80064e6 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800516c:	4603      	mov	r3, r0
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f001 f9c3 	bl	80064fc <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <_ZNSaIP8ResponceED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 f9c5 	bl	8006516 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f001 f9c0 	bl	800652c <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80051b8:	2010      	movs	r0, #16
 80051ba:	f7fb fe62 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 80051be:	4603      	mov	r3, r0
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f001 f9ba 	bl	800654c <_ZSt8_DestroyIP8ResponceEvT_S2_>
    }
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	68b8      	ldr	r0, [r7, #8]
 80051f0:	f017 ff0c 	bl	801d00c <_ZdlPvj>
      }
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 800521e:	f7ff feaa 	bl	8004f76 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8005222:	4603      	mov	r3, r0
 8005224:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	109b      	asrs	r3, r3, #2
 8005232:	3b01      	subs	r3, #1
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6811      	ldr	r1, [r2, #0]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6852      	ldr	r2, [r2, #4]
 8005240:	1a8a      	subs	r2, r1, r2
 8005242:	1092      	asrs	r2, r2, #2
 8005244:	4908      	ldr	r1, [pc, #32]	; (8005268 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8005246:	fb01 f202 	mul.w	r2, r1, r2
 800524a:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	6891      	ldr	r1, [r2, #8]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	1a8a      	subs	r2, r1, r2
 8005256:	1092      	asrs	r2, r2, #2
 8005258:	4903      	ldr	r1, [pc, #12]	; (8005268 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 800525a:	fb01 f202 	mul.w	r2, r1, r2
 800525e:	4413      	add	r3, r2
      }
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	cccccccd 	.word	0xcccccccd

0800526c <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8005274:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005278:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 f973 	bl	8006566 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>
 8005280:	4603      	mov	r3, r0
 8005282:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005284:	f107 0208 	add.w	r2, r7, #8
 8005288:	f107 030c 	add.w	r3, r7, #12
 800528c:	4611      	mov	r1, r2
 800528e:	4618      	mov	r0, r3
 8005290:	f001 f975 	bl	800657e <_ZSt3minIjERKT_S2_S2_>
 8005294:	4603      	mov	r3, r0
 8005296:	681b      	ldr	r3, [r3, #0]
      }
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80052a0:	b590      	push	{r4, r7, lr}
 80052a2:	b08b      	sub	sp, #44	; 0x2c
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	109b      	asrs	r3, r3, #2
 80052ba:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80052bc:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	4413      	add	r3, r2
 80052c4:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d92d      	bls.n	800532e <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	1acb      	subs	r3, r1, r3
 80052de:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80052e0:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	e000      	b.n	80052f0 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x50>
 80052ee:	2300      	movs	r3, #0
 80052f0:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80052f2:	4413      	add	r3, r2
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d209      	bcs.n	8005314 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8005308:	3304      	adds	r3, #4
 800530a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530c:	4619      	mov	r1, r3
 800530e:	f001 f94a 	bl	80065a6 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
 8005312:	e048      	b.n	80053a6 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800531c:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005324:	4413      	add	r3, r2
 8005326:	461a      	mov	r2, r3
 8005328:	f001 f955 	bl	80065d6 <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>
 800532c:	e03b      	b.n	80053a6 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3304      	adds	r3, #4
 8005336:	f107 0208 	add.w	r2, r7, #8
 800533a:	4611      	mov	r1, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f7fe fdf0 	bl	8003f22 <_ZSt3maxIjERKT_S2_S2_>
 8005342:	4603      	mov	r3, r0
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005348:	3302      	adds	r3, #2
 800534a:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	69b9      	ldr	r1, [r7, #24]
 8005350:	4618      	mov	r0, r3
 8005352:	f7fe fdfa 	bl	8003f4a <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8005356:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	e000      	b.n	8005370 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 800536e:	2300      	movs	r3, #0
 8005370:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4413      	add	r3, r2
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8005380:	3304      	adds	r3, #4
 8005382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005384:	4619      	mov	r1, r3
 8005386:	f001 f90e 	bl	80065a6 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6819      	ldr	r1, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	461a      	mov	r2, r3
 8005396:	f7fd fdc1 	bl	8002f1c <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3308      	adds	r3, #8
 80053aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe fe03 	bl	8003fb8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f103 0018 	add.w	r0, r3, #24
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c4:	4413      	add	r3, r2
 80053c6:	4619      	mov	r1, r3
 80053c8:	f7fe fdf6 	bl	8003fb8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
    }
 80053cc:	bf00      	nop
 80053ce:	372c      	adds	r7, #44	; 0x2c
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd90      	pop	{r4, r7, pc}

080053d4 <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80053de:	2200      	movs	r2, #0
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f001 f90f 	bl	8006606 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>
 80053e8:	4603      	mov	r3, r0
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6839      	ldr	r1, [r7, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f001 f921 	bl	8006648 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	609a      	str	r2, [r3, #8]
	}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800544a:	68b8      	ldr	r0, [r7, #8]
 800544c:	f001 f90e 	bl	800666c <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005462:	6838      	ldr	r0, [r7, #0]
 8005464:	f7fb fe8c 	bl	8001180 <_ZN8ResponceD1Ev>
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005478:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800547c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 f8ff 	bl	8006682 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8005484:	4603      	mov	r3, r0
 8005486:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005488:	f107 0208 	add.w	r2, r7, #8
 800548c:	f107 030c 	add.w	r3, r7, #12
 8005490:	4611      	mov	r1, r2
 8005492:	4618      	mov	r0, r3
 8005494:	f001 f873 	bl	800657e <_ZSt3minIjERKT_S2_S2_>
 8005498:	4603      	mov	r3, r0
 800549a:	681b      	ldr	r3, [r3, #0]
      }
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 80054ae:	2301      	movs	r3, #1
 80054b0:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 80054b2:	6839      	ldr	r1, [r7, #0]
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 f8f0 	bl	800669a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 80054ba:	4603      	mov	r3, r0
    }
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80054ce:	2200      	movs	r2, #0
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f001 f8f4 	bl	80066c0 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80054d8:	4603      	mov	r3, r0
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f001 f8fe 	bl	80066f8 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80054fc:	4603      	mov	r3, r0
      }
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800550e:	f107 030c 	add.w	r3, r7, #12
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	f001 f90c 	bl	8006732 <_ZNSt13move_iteratorIPhEC1ES0_>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f001 f90d 	bl	8006756 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 800553c:	4603      	mov	r3, r0
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005546:	b590      	push	{r4, r7, lr}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fe f89c 	bl	8003690 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8005558:	4604      	mov	r4, r0
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4619      	mov	r1, r3
 800555e:	2010      	movs	r0, #16
 8005560:	f7fb fc83 	bl	8000e6a <_ZnwjPv>
 8005564:	4603      	mov	r3, r0
 8005566:	4621      	mov	r1, r4
 8005568:	4618      	mov	r0, r3
 800556a:	f7fb fded 	bl	8001148 <_ZN8ResponceC1EOS_>
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bd90      	pop	{r4, r7, pc}

08005576 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f103 0218 	add.w	r2, r3, #24
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3308      	adds	r3, #8
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f001 f8f5 	bl	800677a <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8005590:	4603      	mov	r3, r0
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 ff9e 	bl	80064e6 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80055aa:	4603      	mov	r3, r0
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 f908 	bl	80067c2 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>
 80055b2:	4603      	mov	r3, r0
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	6809      	ldr	r1, [r1, #0]
 80055d6:	1a41      	subs	r1, r0, r1
 80055d8:	1089      	asrs	r1, r1, #2
 80055da:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80055dc:	429a      	cmp	r2, r3
 80055de:	d904      	bls.n	80055ea <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80055e0:	2200      	movs	r2, #0
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f001 f906 	bl	80067f6 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>
      }
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80055f2:	b590      	push	{r4, r7, lr}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80055fa:	687c      	ldr	r4, [r7, #4]
 80055fc:	2010      	movs	r0, #16
 80055fe:	f7fb fc40 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8005602:	4603      	mov	r3, r0
 8005604:	4619      	mov	r1, r3
 8005606:	4620      	mov	r0, r4
 8005608:	f001 f98f 	bl	800692a <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>
 800560c:	4603      	mov	r3, r0
      }
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	bd90      	pop	{r4, r7, pc}

08005616 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005616:	b580      	push	{r7, lr}
 8005618:	b086      	sub	sp, #24
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005622:	2301      	movs	r3, #1
 8005624:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f001 f98c 	bl	8006948 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 8005630:	4603      	mov	r3, r0
    }
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	4618      	mov	r0, r3
 8005646:	f001 f98f 	bl	8006968 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 800564a:	4603      	mov	r3, r0
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800565e:	1d3b      	adds	r3, r7, #4
 8005660:	4618      	mov	r0, r3
 8005662:	f001 f98c 	bl	800697e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005666:	4603      	mov	r3, r0
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f001 f986 	bl	8006994 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8005688:	4603      	mov	r3, r0
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ffda 	bl	8005656 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80056a2:	4602      	mov	r2, r0
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	1a9a      	subs	r2, r3, r2
 80056a8:	1d3b      	adds	r3, r7, #4
 80056aa:	4611      	mov	r1, r2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f001 f981 	bl	80069b4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 80056b2:	4603      	mov	r3, r0
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f001 f972 	bl	80069e2 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 80056fe:	4603      	mov	r3, r0
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
    { return __res; }
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7fe f8ea 	bl	800390a <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8005736:	4603      	mov	r3, r0
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <_ZSt10__distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	10db      	asrs	r3, r3, #3
 8005754:	4a04      	ldr	r2, [pc, #16]	; (8005768 <_ZSt10__distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x28>)
 8005756:	fb02 f303 	mul.w	r3, r2, r3
    }
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	aaaaaaab 	.word	0xaaaaaaab

0800576c <_ZSt9__advanceIPK8IMUFrameiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6819      	ldr	r1, [r3, #0]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	4413      	add	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	18ca      	adds	r2, r1, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]
    }
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <_ZSt12__miter_baseIPK8IMUFrameET_S3_>:
    __miter_base(_Iterator __it)
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
    { return __it; }
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <_ZSt13__copy_move_aILb0EPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80057ae:	b5b0      	push	{r4, r5, r7, lr}
 80057b0:	b090      	sub	sp, #64	; 0x40
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 80057bc:	68b8      	ldr	r0, [r7, #8]
 80057be:	f001 f920 	bl	8006a02 <_ZSt12__niter_baseIPK8IMUFrameET_S3_>
 80057c2:	4604      	mov	r4, r0
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 f91c 	bl	8006a02 <_ZSt12__niter_baseIPK8IMUFrameET_S3_>
 80057ca:	4605      	mov	r5, r0
 80057cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe fac8 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80057d8:	f107 0320 	add.w	r3, r7, #32
 80057dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80057e0:	4611      	mov	r1, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 f918 	bl	8006a18 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 80057e8:	f107 0010 	add.w	r0, r7, #16
 80057ec:	f107 0320 	add.w	r3, r7, #32
 80057f0:	462a      	mov	r2, r5
 80057f2:	4621      	mov	r1, r4
 80057f4:	f001 f932 	bl	8006a5c <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f107 0210 	add.w	r2, r7, #16
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f001 f97d 	bl	8006b00 <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>
    }
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	3740      	adds	r7, #64	; 0x40
 800580a:	46bd      	mov	sp, r7
 800580c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005810 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	10db      	asrs	r3, r3, #3
 8005828:	4a0d      	ldr	r2, [pc, #52]	; (8005860 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj+0x50>)
 800582a:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 800582e:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	429a      	cmp	r2, r3
 8005836:	d906      	bls.n	8005846 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	4619      	mov	r1, r3
 8005840:	68b8      	ldr	r0, [r7, #8]
 8005842:	f001 f96b 	bl	8006b1c <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f103 0108 	add.w	r1, r3, #8
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4618      	mov	r0, r3
 8005852:	f001 f9a9 	bl	8006ba8 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
      }
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	aaaaaaab 	.word	0xaaaaaaab

08005864 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005872:	f107 0310 	add.w	r3, r7, #16
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe fa75 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f107 0310 	add.w	r3, r7, #16
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	f001 f9a1 	bl	8006bce <_ZSt18uninitialized_copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	10db      	asrs	r3, r3, #3
 80058ac:	4a0d      	ldr	r2, [pc, #52]	; (80058e4 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj+0x50>)
 80058ae:	fb02 f303 	mul.w	r3, r2, r3
 80058b2:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 80058b4:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d906      	bls.n	80058cc <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	4619      	mov	r1, r3
 80058c6:	68b8      	ldr	r0, [r7, #8]
 80058c8:	f001 f99c 	bl	8006c04 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f103 0118 	add.w	r1, r3, #24
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff f9dd 	bl	8004c96 <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
      }
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	aaaaaaab 	.word	0xaaaaaaab

080058e8 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j>:
      deque<_Tp, _Alloc>::
 80058e8:	b5b0      	push	{r4, r5, r7, lr}
 80058ea:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 80058ee:	af04      	add	r7, sp, #16
 80058f0:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 80058f4:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 80058f8:	6020      	str	r0, [r4, #0]
 80058fa:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 80058fe:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8005902:	6001      	str	r1, [r0, #0]
 8005904:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8005908:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 800590c:	600a      	str	r2, [r1, #0]
 800590e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005912:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005916:	6013      	str	r3, [r2, #0]
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 8005918:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800591c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f103 0208 	add.w	r2, r3, #8
 8005926:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800592a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800592e:	4611      	mov	r1, r2
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	f7fe f901 	bl	8003b38 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 8005936:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 800593a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800593e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	f7fd f98e 	bl	8002c64 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8005948:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 800594c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005950:	085a      	lsrs	r2, r3, #1
 8005952:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005956:	429a      	cmp	r2, r3
 8005958:	f240 8158 	bls.w	8005c0c <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x324>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 800595c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005960:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8005964:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005968:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800596c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005970:	6819      	ldr	r1, [r3, #0]
 8005972:	f7ff ff4d 	bl	8005810 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 8005976:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800597a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f103 0208 	add.w	r2, r3, #8
 8005984:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f7fe f9ec 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 8005990:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005994:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f103 0108 	add.w	r1, r3, #8
 800599e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059a2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80059a6:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff f973 	bl	8004c96 <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 80059b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059b4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059be:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80059c2:	4614      	mov	r4, r2
 80059c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (__elemsbefore >= difference_type(__n))
 80059ca:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80059ce:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80059d2:	429a      	cmp	r2, r3
 80059d4:	f2c0 8098 	blt.w	8005b08 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x220>
		    iterator __start_n = (this->_M_impl._M_start
 80059d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059dc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f103 0108 	add.w	r1, r3, #8
 80059e6:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80059ea:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059ee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff f94f 	bl	8004c96 <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 80059f8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059fc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f103 0208 	add.w	r2, r3, #8
 8005a06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fe f9ab 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005a12:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005a16:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe f9a3 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005a22:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005a26:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe f99b 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						_M_get_Tp_allocator());
 8005a32:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a36:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe f85b 	bl	8003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005a42:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8005a44:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a48:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 8005a4c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005a50:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005a54:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8005a58:	9400      	str	r4, [sp, #0]
 8005a5a:	f001 f917 	bl	8006c8c <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
		    this->_M_impl._M_start = __new_start;
 8005a5e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a62:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005a6c:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8005a70:	f103 0408 	add.w	r4, r3, #8
 8005a74:	4613      	mov	r3, r2
 8005a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 8005a7c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005a80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005a84:	4611      	mov	r1, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe f96e 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005a8c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a90:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005a94:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	f7fe f964 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005aa0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005aa4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fe f95c 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005ab0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ab4:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8005ab8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005abc:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8005ac0:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8005ac4:	f001 f91b 	bl	8006cfe <_ZSt4moveISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 8005ac8:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005acc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ad0:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8005ad4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ad8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005adc:	6819      	ldr	r1, [r3, #0]
 8005ade:	f001 f863 	bl	8006ba8 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8005ae2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ae6:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8005aea:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005aee:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005af2:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005af6:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8005afa:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	6809      	ldr	r1, [r1, #0]
 8005b02:	f7fe ff52 	bl	80049aa <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8005b06:	e1dd      	b.n	8005ec4 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
		    _ForwardIterator __mid = __first;
 8005b08:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b0c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005b10:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005b14:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8005b18:	6812      	ldr	r2, [r2, #0]
 8005b1a:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 8005b1c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005b20:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005b24:	1ad2      	subs	r2, r2, r3
 8005b26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 f91c 	bl	8006d6a <_ZSt7advanceIPK8IMUFrameiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8005b32:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b36:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f103 0208 	add.w	r2, r3, #8
 8005b40:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8005b44:	4611      	mov	r1, r2
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe f90e 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005b4c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b50:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005b54:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8005b58:	6819      	ldr	r1, [r3, #0]
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7fe f904 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005b60:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b64:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005b68:	681c      	ldr	r4, [r3, #0]
 8005b6a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005b6e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fe f8f7 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						   _M_get_Tp_allocator());
 8005b7a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b7e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fd ffb7 	bl	8003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005b8a:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8005b8c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b90:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8005b94:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b98:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8005b9c:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 8005ba0:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8005ba4:	9202      	str	r2, [sp, #8]
 8005ba6:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8005baa:	9201      	str	r2, [sp, #4]
 8005bac:	9400      	str	r4, [sp, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	f001 f8ed 	bl	8006d90 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorI8IMUFrameRS1_PS1_EPKS1_S4_SaIS1_EET1_T_S9_T0_SA_S8_RT2_>
		    this->_M_impl._M_start = __new_start;
 8005bb6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005bba:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005bc4:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8005bc8:	f103 0408 	add.w	r4, r3, #8
 8005bcc:	4613      	mov	r3, r2
 8005bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 8005bd4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005bd8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005bdc:	681c      	ldr	r4, [r3, #0]
 8005bde:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005be2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe f8bd 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005bee:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005bf2:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8005bf6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005bfa:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005bfe:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005c02:	6812      	ldr	r2, [r2, #0]
 8005c04:	4621      	mov	r1, r4
 8005c06:	f7fe fed0 	bl	80049aa <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8005c0a:	e15b      	b.n	8005ec4 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 8005c0c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c10:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 8005c14:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c18:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c1c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005c20:	6819      	ldr	r1, [r3, #0]
 8005c22:	f7ff fe37 	bl	8005894 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 8005c26:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c2a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f103 0218 	add.w	r2, r3, #24
 8005c34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c38:	4611      	mov	r1, r2
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fe f894 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	    difference_type(__length) - __elemsbefore;
 8005c40:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 8005c44:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 8005c4e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c52:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f103 0118 	add.w	r1, r3, #24
 8005c5c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c64:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 ff9d 	bl	8006ba8 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8005c6e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c72:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c80:	4614      	mov	r4, r2
 8005c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 8005c88:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8005c8c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8005c90:	429a      	cmp	r2, r3
 8005c92:	f340 8096 	ble.w	8005dc2 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 8005c96:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c9a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f103 0118 	add.w	r1, r3, #24
 8005ca4:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005ca8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cac:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 ff79 	bl	8006ba8 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
		  std::__uninitialized_move_a(__finish_n,
 8005cb6:	f107 0218 	add.w	r2, r7, #24
 8005cba:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fe f851 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					      this->_M_impl._M_finish,
 8005cc6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cca:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8005cd4:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe f844 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					      this->_M_impl._M_finish,
 8005ce0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ce4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8005cee:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fe f837 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					      _M_get_Tp_allocator());
 8005cfa:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cfe:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fd fef7 	bl	8003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005d0a:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 8005d0c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d10:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8005d14:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8005d18:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8005d1c:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8005d20:	9400      	str	r4, [sp, #0]
 8005d22:	f000 ffb3 	bl	8006c8c <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 8005d26:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d2a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005d34:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8005d38:	f103 0418 	add.w	r4, r3, #24
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 8005d44:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d48:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005d4c:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8005d50:	6819      	ldr	r1, [r3, #0]
 8005d52:	4610      	mov	r0, r2
 8005d54:	f7fe f808 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005d58:	f107 0218 	add.w	r2, r7, #24
 8005d5c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8005d60:	4611      	mov	r1, r2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fe f800 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005d68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d6c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8005d70:	4611      	mov	r1, r2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fd fff8 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005d78:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8005d7c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8005d80:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8005d84:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8005d88:	f001 f842 	bl	8006e10 <_ZSt13move_backwardISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>
		  std::copy(__first, __last, __pos);
 8005d8c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d90:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005d94:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8005d98:	6819      	ldr	r1, [r3, #0]
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f7fd ffe4 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005da0:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8005da4:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8005da8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005dac:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005db0:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8005db4:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	6809      	ldr	r1, [r1, #0]
 8005dbc:	f7fe fdf5 	bl	80049aa <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8005dc0:	e080      	b.n	8005ec4 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
		  _ForwardIterator __mid = __first;
 8005dc2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005dc6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005dca:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005dce:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 8005dd6:	f107 0314 	add.w	r3, r7, #20
 8005dda:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 ffc3 	bl	8006d6a <_ZSt7advanceIPK8IMUFrameiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8005de4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005de8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005dec:	681c      	ldr	r4, [r3, #0]
 8005dee:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005df2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005df6:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8005dfa:	6819      	ldr	r1, [r3, #0]
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	f7fd ffb3 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						 this->_M_impl._M_finish,
 8005e02:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e06:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8005e10:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fd ffa6 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						 this->_M_impl._M_finish,
 8005e1c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e20:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8005e2a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8005e2e:	4611      	mov	r1, r2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fd ff99 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						 _M_get_Tp_allocator());
 8005e36:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e3a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fd fe59 	bl	8003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005e46:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8005e48:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8005e4c:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8005e50:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005e54:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005e58:	9302      	str	r3, [sp, #8]
 8005e5a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	460b      	mov	r3, r1
 8005e68:	6812      	ldr	r2, [r2, #0]
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	f001 f806 	bl	8006e7c <_ZSt25__uninitialized_copy_moveIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES6_SaIS0_EET1_T_S9_T0_SA_S8_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8005e70:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e74:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005e7e:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8005e82:	f103 0418 	add.w	r4, r3, #24
 8005e86:	4613      	mov	r3, r2
 8005e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 8005e8e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e92:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005e96:	681c      	ldr	r4, [r3, #0]
 8005e98:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005e9c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005ea0:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8005ea4:	6819      	ldr	r1, [r3, #0]
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f7fd ff5e 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005eac:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 8005eb0:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8005eb4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005eb8:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 8005ebc:	4622      	mov	r2, r4
 8005ebe:	6809      	ldr	r1, [r1, #0]
 8005ec0:	f7fe fd73 	bl	80049aa <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8005ec4:	bf00      	nop
 8005ec6:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bdb0      	pop	{r4, r5, r7, pc}

08005ece <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005ece:	b5b0      	push	{r4, r5, r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fe fe40 	bl	8004b60 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	2018      	movs	r0, #24
 8005ee8:	f7fa ffbf 	bl	8000e6a <_ZnwjPv>
 8005eec:	4603      	mov	r3, r0
 8005eee:	461c      	mov	r4, r3
 8005ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ef4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005ef8:	e884 0003 	stmia.w	r4, {r0, r1}
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bdb0      	pop	{r4, r5, r7, pc}

08005f04 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f8f7 	bl	8006102 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005f14:	4603      	mov	r3, r0
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fff0 	bl	8006efc <_ZNSt5dequeI8IMUFrameSaIS0_EE11_S_max_sizeERKS1_>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b082      	sub	sp, #8
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d904      	bls.n	8005f4e <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 8005f44:	2201      	movs	r2, #1
 8005f46:	6839      	ldr	r1, [r7, #0]
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fff1 	bl	8006f30 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>
      }
 8005f4e:	bf00      	nop
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8005f56:	b590      	push	{r4, r7, lr}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8005f5e:	687c      	ldr	r4, [r7, #4]
 8005f60:	2018      	movs	r0, #24
 8005f62:	f7fa ff8e 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8005f66:	4603      	mov	r3, r0
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f001 f87a 	bl	8007064 <_ZNSt16allocator_traitsISaI8IMUFrameEE8allocateERS1_j>
 8005f70:	4603      	mov	r3, r0
      }
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd90      	pop	{r4, r7, pc}

08005f7a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
	++_M_cur;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f103 0218 	add.w	r2, r3, #24
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d10a      	bne.n	8005fb0 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv+0x36>
	    _M_set_node(_M_node + 1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fe fe53 	bl	8004c4e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_first;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	601a      	str	r2, [r3, #0]
	return *this;
 8005fb0:	687b      	ldr	r3, [r7, #4]
      }
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <_ZNSt16allocator_traitsISaI8IMUFrameEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f001 f859 	bl	8007082 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE10deallocateEPS1_j>
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	10db      	asrs	r3, r3, #3
 8005fee:	4a2b      	ldr	r2, [pc, #172]	; (800609c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0xc4>)
 8005ff0:	fb02 f303 	mul.w	r3, r2, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	db08      	blt.n	8006014 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3c>
 8006002:	f7fe fe40 	bl	8004c86 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8006006:	4603      	mov	r3, r0
 8006008:	461a      	mov	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4293      	cmp	r3, r2
 800600e:	da01      	bge.n	8006014 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3c>
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3e>
 8006014:	2300      	movs	r3, #0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x58>
	  _M_cur += __n;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6819      	ldr	r1, [r3, #0]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	4613      	mov	r3, r2
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	4413      	add	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	18ca      	adds	r2, r1, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e02f      	b.n	8006090 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	dd07      	ble.n	8006046 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x6e>
 8006036:	f7fe fe26 	bl	8004c86 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 800603a:	4603      	mov	r3, r0
 800603c:	461a      	mov	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	fb93 f3f2 	sdiv	r3, r3, r2
 8006044:	e007      	b.n	8006056 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 800604a:	f7fe fe1c 	bl	8004c86 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 800604e:	4603      	mov	r3, r0
 8006050:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8006054:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8006056:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fe fdf2 	bl	8004c4e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_first + (__offset - __node_offset
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 800606e:	f7fe fe0a 	bl	8004c86 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8006072:	4603      	mov	r3, r0
 8006074:	461a      	mov	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	461a      	mov	r2, r3
 8006082:	4613      	mov	r3, r2
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	4413      	add	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	18e2      	adds	r2, r4, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	601a      	str	r2, [r3, #0]
	return *this;
 8006090:	687b      	ldr	r3, [r7, #4]
      }
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	bd90      	pop	{r4, r7, pc}
 800609a:	bf00      	nop
 800609c:	aaaaaaab 	.word	0xaaaaaaab

080060a0 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	609a      	str	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	60da      	str	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4618      	mov	r0, r3
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <_ZNSt16allocator_traitsISaIP8IMUFrameEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80060ee:	2200      	movs	r2, #0
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 ffd8 	bl	80070a8 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv>
 80060f8:	4603      	mov	r3, r0
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <_ZNSaIP8IMUFrameEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 ffde 	bl	80070e4 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameEC1Ev>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4619      	mov	r1, r3
 800615a:	68b8      	ldr	r0, [r7, #8]
 800615c:	f016 ff56 	bl	801d00c <_ZdlPvj>
      }
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800616c:	2018      	movs	r0, #24
 800616e:	f7fa fe88 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8006172:	4603      	mov	r3, r0
 8006174:	4618      	mov	r0, r3
 8006176:	bd80      	pop	{r7, pc}

08006178 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8006178:	b5b0      	push	{r4, r5, r7, lr}
 800617a:	b08c      	sub	sp, #48	; 0x30
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 ffb9 	bl	80070fa <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006188:	4602      	mov	r2, r0
 800618a:	f107 0308 	add.w	r3, r7, #8
 800618e:	4611      	mov	r1, r2
 8006190:	4618      	mov	r0, r3
 8006192:	f000 ffe1 	bl	8007158 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8006196:	6838      	ldr	r0, [r7, #0]
 8006198:	f000 ffaf 	bl	80070fa <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800619c:	4602      	mov	r2, r0
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	461c      	mov	r4, r3
 80061a2:	4615      	mov	r5, r2
 80061a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80061b0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80061b4:	f107 0308 	add.w	r3, r7, #8
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 ff9e 	bl	80070fa <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80061be:	4602      	mov	r2, r0
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	461c      	mov	r4, r3
 80061c4:	4615      	mov	r5, r2
 80061c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80061d2:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80061d6:	bf00      	nop
 80061d8:	3730      	adds	r7, #48	; 0x30
 80061da:	46bd      	mov	sp, r7
 80061dc:	bdb0      	pop	{r4, r5, r7, pc}

080061de <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 80061de:	b590      	push	{r4, r7, lr}
 80061e0:	b08b      	sub	sp, #44	; 0x2c
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 80061e8:	f107 0308 	add.w	r3, r7, #8
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fc fed9 	bl	8002fa6 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80061f4:	f107 0318 	add.w	r3, r7, #24
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fc feb9 	bl	8002f72 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4618      	mov	r0, r3
 8006204:	f7fc fec4 	bl	8002f90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8006208:	4603      	mov	r3, r0
 800620a:	f107 0218 	add.w	r2, r7, #24
 800620e:	f107 0108 	add.w	r1, r7, #8
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fc fee3 	bl	8002fde <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8006224:	3304      	adds	r3, #4
 8006226:	461a      	mov	r2, r3
 8006228:	f7fc fe5e 	bl	8002ee8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	f103 0418 	add.w	r4, r3, #24
 8006234:	4613      	mov	r3, r2
 8006236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 800623c:	bf00      	nop
 800623e:	372c      	adds	r7, #44	; 0x2c
 8006240:	46bd      	mov	sp, r7
 8006242:	bd90      	pop	{r4, r7, pc}

08006244 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8006250:	68b8      	ldr	r0, [r7, #8]
 8006252:	f000 ffa0 	bl	8007196 <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 800625e:	b5b0      	push	{r4, r5, r7, lr}
 8006260:	b08c      	sub	sp, #48	; 0x30
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 ff9f 	bl	80071ac <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800626e:	4602      	mov	r2, r0
 8006270:	f107 0308 	add.w	r3, r7, #8
 8006274:	4611      	mov	r1, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f000 ffc7 	bl	800720a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 800627c:	6838      	ldr	r0, [r7, #0]
 800627e:	f000 ff95 	bl	80071ac <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006282:	4602      	mov	r2, r0
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	461c      	mov	r4, r3
 8006288:	4615      	mov	r5, r2
 800628a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800628c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800628e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006292:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006296:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800629a:	f107 0308 	add.w	r3, r7, #8
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 ff84 	bl	80071ac <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80062a4:	4602      	mov	r2, r0
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	461c      	mov	r4, r3
 80062aa:	4615      	mov	r5, r2
 80062ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80062b8:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80062bc:	bf00      	nop
 80062be:	3730      	adds	r7, #48	; 0x30
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bdb0      	pop	{r4, r5, r7, pc}

080062c4 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 80062c4:	b590      	push	{r4, r7, lr}
 80062c6:	b08b      	sub	sp, #44	; 0x2c
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 80062ce:	f107 0308 	add.w	r3, r7, #8
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fc ff09 	bl	80030ec <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80062da:	f107 0318 	add.w	r3, r7, #24
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fc fee9 	bl	80030b8 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fc fef4 	bl	80030d6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80062ee:	4603      	mov	r3, r0
 80062f0:	f107 0218 	add.w	r2, r7, #24
 80062f4:	f107 0108 	add.w	r1, r7, #8
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7fc ff13 	bl	8003124 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 800630a:	3304      	adds	r3, #4
 800630c:	461a      	mov	r2, r3
 800630e:	f7fd ff8b 	bl	8004228 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	f103 0418 	add.w	r4, r3, #24
 800631a:	4613      	mov	r3, r2
 800631c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800631e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8006322:	bf00      	nop
 8006324:	372c      	adds	r7, #44	; 0x2c
 8006326:	46bd      	mov	sp, r7
 8006328:	bd90      	pop	{r4, r7, pc}

0800632a <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8006336:	68b8      	ldr	r0, [r7, #8]
 8006338:	f000 ff86 	bl	8007248 <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <_ZSt4swapINSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8006344:	b5b0      	push	{r4, r5, r7, lr}
 8006346:	b08c      	sub	sp, #48	; 0x30
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 ff85 	bl	800725e <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006354:	4602      	mov	r2, r0
 8006356:	f107 0308 	add.w	r3, r7, #8
 800635a:	4611      	mov	r1, r2
 800635c:	4618      	mov	r0, r3
 800635e:	f000 ffad 	bl	80072bc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8006362:	6838      	ldr	r0, [r7, #0]
 8006364:	f000 ff7b 	bl	800725e <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006368:	4602      	mov	r2, r0
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	461c      	mov	r4, r3
 800636e:	4615      	mov	r5, r2
 8006370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006378:	e895 0003 	ldmia.w	r5, {r0, r1}
 800637c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006380:	f107 0308 	add.w	r3, r7, #8
 8006384:	4618      	mov	r0, r3
 8006386:	f000 ff6a 	bl	800725e <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800638a:	4602      	mov	r2, r0
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	461c      	mov	r4, r3
 8006390:	4615      	mov	r5, r2
 8006392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800639a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800639e:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80063a2:	bf00      	nop
 80063a4:	3730      	adds	r7, #48	; 0x30
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bdb0      	pop	{r4, r5, r7, pc}

080063aa <_ZSt18__do_alloc_on_moveISaI8IMUFrameEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80063b6:	68b8      	ldr	r0, [r7, #8]
 80063b8:	f000 ff9f 	bl	80072fa <_ZSt4moveIRSaI8IMUFrameEEONSt16remove_referenceIT_E4typeEOS4_>
 80063bc:	bf00      	nop
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 ff9d 	bl	8007310 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>
 80063d6:	4602      	mov	r2, r0
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4293      	cmp	r3, r2
 80063dc:	bf8c      	ite	hi
 80063de:	2301      	movhi	r3, #1
 80063e0:	2300      	movls	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80063e8:	f016 fe23 	bl	801d032 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4618      	mov	r0, r3
 80063f2:	f016 fe0d 	bl	801d010 <_Znwj>
 80063f6:	4603      	mov	r3, r0
      }
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4619      	mov	r1, r3
 8006418:	68b8      	ldr	r0, [r7, #8]
 800641a:	f016 fdf7 	bl	801d00c <_ZdlPvj>
      }
 800641e:	bf00      	nop
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <_ZSt8_DestroyIP7RequestEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 ff6d 	bl	8007328 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>
    }
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>:
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	605a      	str	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	609a      	str	r2, [r3, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	60da      	str	r2, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4618      	mov	r0, r3
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80064a4:	2200      	movs	r2, #0
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 ff55 	bl	8007358 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>
 80064ae:	4603      	mov	r3, r0
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80064bc:	2010      	movs	r0, #16
 80064be:	f7fa fce0 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 80064c2:	4603      	mov	r3, r0
 80064c4:	4618      	mov	r0, r3
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 ff5b 	bl	8007394 <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>
 80064de:	bf00      	nop
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>:
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 ff54 	bl	80073b4 <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4619      	mov	r1, r3
 800653e:	68b8      	ldr	r0, [r7, #8]
 8006540:	f016 fd64 	bl	801d00c <_ZdlPvj>
      }
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <_ZSt8_DestroyIP8ResponceEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 ff36 	bl	80073ca <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>
    }
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006566:	b580      	push	{r7, lr}
 8006568:	b082      	sub	sp, #8
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 ff43 	bl	80073fa <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>
 8006574:	4603      	mov	r3, r0
      }
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d201      	bcs.n	8006598 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	e000      	b.n	800659a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006598:	687b      	ldr	r3, [r7, #4]
    }
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80065a6:	b590      	push	{r4, r7, lr}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 ff2d 	bl	8007412 <_ZSt12__miter_baseIPP7RequestET_S3_>
 80065b8:	4604      	mov	r4, r0
 80065ba:	68b8      	ldr	r0, [r7, #8]
 80065bc:	f000 ff29 	bl	8007412 <_ZSt12__miter_baseIPP7RequestET_S3_>
 80065c0:	4603      	mov	r3, r0
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	4619      	mov	r1, r3
 80065c6:	4620      	mov	r0, r4
 80065c8:	f000 ff2e 	bl	8007428 <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80065cc:	4603      	mov	r3, r0
    }
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd90      	pop	{r4, r7, pc}

080065d6 <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80065d6:	b590      	push	{r4, r7, lr}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 ff15 	bl	8007412 <_ZSt12__miter_baseIPP7RequestET_S3_>
 80065e8:	4604      	mov	r4, r0
 80065ea:	68b8      	ldr	r0, [r7, #8]
 80065ec:	f000 ff11 	bl	8007412 <_ZSt12__miter_baseIPP7RequestET_S3_>
 80065f0:	4603      	mov	r3, r0
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	4619      	mov	r1, r3
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 ff39 	bl	800746e <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80065fc:	4603      	mov	r3, r0
    }
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	bd90      	pop	{r4, r7, pc}

08006606 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 ff4e 	bl	80074b4 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 8006618:	4602      	mov	r2, r0
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4293      	cmp	r3, r2
 800661e:	bf8c      	ite	hi
 8006620:	2301      	movhi	r3, #1
 8006622:	2300      	movls	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800662a:	f016 fd02 	bl	801d032 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4618      	mov	r0, r3
 800663a:	f016 fce9 	bl	801d010 <_Znwj>
 800663e:	4603      	mov	r3, r0
      }
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fc fecb 	bl	80033f0 <_ZNSaIhEC1ERKS_>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4618      	mov	r0, r3
 800665e:	f7fc fd8c 	bl	800317a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4618      	mov	r0, r3
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006682:	b580      	push	{r7, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 ff20 	bl	80074d0 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8006690:	4603      	mov	r3, r0
      }
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 80066a4:	2300      	movs	r3, #0
 80066a6:	73fb      	strb	r3, [r7, #15]
 80066a8:	f107 030f 	add.w	r3, r7, #15
 80066ac:	461a      	mov	r2, r3
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 ff19 	bl	80074e8 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 80066b6:	4603      	mov	r3, r0
	}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 ff26 	bl	800751e <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 80066d2:	4602      	mov	r2, r0
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4293      	cmp	r3, r2
 80066d8:	bf8c      	ite	hi
 80066da:	2301      	movhi	r3, #1
 80066dc:	2300      	movls	r3, #0
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80066e4:	f016 fca5 	bl	801d032 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80066e8:	68b8      	ldr	r0, [r7, #8]
 80066ea:	f016 fc91 	bl	801d010 <_Znwj>
 80066ee:	4603      	mov	r3, r0
      }
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80066f8:	b5b0      	push	{r4, r5, r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7fe ffe3 	bl	80056d2 <_ZSt12__niter_baseIPhET_S1_>
 800670c:	4604      	mov	r4, r0
 800670e:	68b8      	ldr	r0, [r7, #8]
 8006710:	f7fe ffdf 	bl	80056d2 <_ZSt12__niter_baseIPhET_S1_>
 8006714:	4605      	mov	r5, r0
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7fe ffdb 	bl	80056d2 <_ZSt12__niter_baseIPhET_S1_>
 800671c:	4602      	mov	r2, r0
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	4629      	mov	r1, r5
 8006722:	4620      	mov	r0, r4
 8006724:	f000 ff07 	bl	8007536 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8006728:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bdb0      	pop	{r4, r5, r7, pc}

08006732 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800673c:	463b      	mov	r3, r7
 800673e:	4618      	mov	r0, r3
 8006740:	f000 ff14 	bl	800756c <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8006744:	4603      	mov	r3, r0
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006756:	b580      	push	{r7, lr}
 8006758:	b086      	sub	sp, #24
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006762:	2301      	movs	r3, #1
 8006764:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 ff09 	bl	8007582 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 8006770:	4603      	mov	r3, r0
    }
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8006784:	f7ff fe98 	bl	80064b8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8006788:	4603      	mov	r3, r0
 800678a:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	109b      	asrs	r3, r3, #2
 8006798:	3b01      	subs	r3, #1
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6811      	ldr	r1, [r2, #0]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6852      	ldr	r2, [r2, #4]
 80067a6:	1a8a      	subs	r2, r1, r2
 80067a8:	1112      	asrs	r2, r2, #4
 80067aa:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	6891      	ldr	r1, [r2, #8]
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	6812      	ldr	r2, [r2, #0]
 80067b4:	1a8a      	subs	r2, r1, r2
 80067b6:	1112      	asrs	r2, r2, #4
 80067b8:	4413      	add	r3, r2
      }
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80067ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80067ce:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fee6 	bl	80075a2 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>
 80067d6:	4603      	mov	r3, r0
 80067d8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80067da:	f107 0208 	add.w	r2, r7, #8
 80067de:	f107 030c 	add.w	r3, r7, #12
 80067e2:	4611      	mov	r1, r2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff feca 	bl	800657e <_ZSt3minIjERKT_S2_S2_>
 80067ea:	4603      	mov	r3, r0
 80067ec:	681b      	ldr	r3, [r3, #0]
      }
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 80067f6:	b590      	push	{r4, r7, lr}
 80067f8:	b08b      	sub	sp, #44	; 0x2c
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	60f8      	str	r0, [r7, #12]
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	4613      	mov	r3, r2
 8006802:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	109b      	asrs	r3, r3, #2
 8006810:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8006812:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	6a3a      	ldr	r2, [r7, #32]
 8006818:	4413      	add	r3, r2
 800681a:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	429a      	cmp	r2, r3
 8006826:	d92d      	bls.n	8006884 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	1acb      	subs	r3, r1, r3
 8006834:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006836:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	e000      	b.n	8006846 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8006844:	2300      	movs	r3, #0
 8006846:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006848:	4413      	add	r3, r2
 800684a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006852:	429a      	cmp	r2, r3
 8006854:	d209      	bcs.n	800686a <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800685e:	3304      	adds	r3, #4
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	4619      	mov	r1, r3
 8006864:	f000 fea9 	bl	80075ba <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
 8006868:	e048      	b.n	80068fc <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006872:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687a:	4413      	add	r3, r2
 800687c:	461a      	mov	r2, r3
 800687e:	f000 feb4 	bl	80075ea <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>
 8006882:	e03b      	b.n	80068fc <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3304      	adds	r3, #4
 800688c:	f107 0208 	add.w	r2, r7, #8
 8006890:	4611      	mov	r1, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f7fd fb45 	bl	8003f22 <_ZSt3maxIjERKT_S2_S2_>
 8006898:	4603      	mov	r3, r0
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800689e:	3302      	adds	r3, #2
 80068a0:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	69b9      	ldr	r1, [r7, #24]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe fbf5 	bl	8005096 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 80068ac:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	085b      	lsrs	r3, r3, #1
 80068b6:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xce>
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	e000      	b.n	80068c6 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 80068c4:	2300      	movs	r3, #0
 80068c6:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4413      	add	r3, r2
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80068d6:	3304      	adds	r3, #4
 80068d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068da:	4619      	mov	r1, r3
 80068dc:	f000 fe6d 	bl	80075ba <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6819      	ldr	r1, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f7fd fcb6 	bl	800425c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3308      	adds	r3, #8
 8006900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe fbfe 	bl	8005104 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f103 0018 	add.w	r0, r3, #24
 800690e:	6a3a      	ldr	r2, [r7, #32]
 8006910:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691a:	4413      	add	r3, r2
 800691c:	4619      	mov	r1, r3
 800691e:	f7fe fbf1 	bl	8005104 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8006922:	bf00      	nop
 8006924:	372c      	adds	r7, #44	; 0x2c
 8006926:	46bd      	mov	sp, r7
 8006928:	bd90      	pop	{r4, r7, pc}

0800692a <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006934:	2200      	movs	r2, #0
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fe6e 	bl	800761a <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>
 800693e:	4603      	mov	r3, r0
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fe7c 	bl	8007656 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 800695e:	4603      	mov	r3, r0
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fe6e 	bl	8007686 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80069aa:	4603      	mov	r3, r0
    }
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	4413      	add	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	f107 020c 	add.w	r2, r7, #12
 80069cc:	f107 0308 	add.w	r3, r7, #8
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fd ff2d 	bl	8004832 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 fe47 	bl	8007686 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80069f8:	4603      	mov	r3, r0
    }
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <_ZSt12__niter_baseIPK8IMUFrameET_S3_>:
    __niter_base(_Iterator __it)
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>:
    __niter_base(_Iterator __it)
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
    { return __it; }
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7fd f99f 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	da01      	bge.n	8006a4c <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	e000      	b.n	8006a4e <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8006a4c:	687b      	ldr	r3, [r7, #4]
    }
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	10db      	asrs	r3, r3, #3
 8006a72:	4a22      	ldr	r2, [pc, #136]	; (8006afc <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8006a74:	fb02 f303 	mul.w	r3, r2, r3
 8006a78:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dd34      	ble.n	8006aea <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	10db      	asrs	r3, r3, #3
 8006a8c:	4a1b      	ldr	r2, [pc, #108]	; (8006afc <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	f107 0218 	add.w	r2, r7, #24
 8006a98:	f107 0314 	add.w	r3, r7, #20
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff ffc7 	bl	8006a32 <_ZSt3minIiERKT_S2_S2_>
 8006aa4:	4603      	mov	r3, r0
	  const difference_type __clen
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	4613      	mov	r3, r2
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	4413      	add	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	1899      	adds	r1, r3, r2
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68b8      	ldr	r0, [r7, #8]
 8006ac2:	f000 fdfa 	bl	80076ba <_ZSt14__copy_move_a1ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>
				       __result._M_cur);

	  __first += __clen;
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	4413      	add	r3, r2
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8006ad8:	69f9      	ldr	r1, [r7, #28]
 8006ada:	6838      	ldr	r0, [r7, #0]
 8006adc:	f7ff fa7c 	bl	8005fd8 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	  __len -= __clen;
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8006ae8:	e7c7      	b.n	8006a7a <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7fd f93b 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
    }
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	3720      	adds	r7, #32
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	aaaaaaab 	.word	0xaaaaaaab

08006b00 <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
    { return __res; }
 8006b0c:	6879      	ldr	r1, [r7, #4]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7fd f92a 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8006b1c:	b590      	push	{r4, r7, lr}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff f9ec 	bl	8005f04 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7fc f898 	bl	8002c64 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8006b34:	4603      	mov	r3, r0
 8006b36:	1ae3      	subs	r3, r4, r3
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	bf8c      	ite	hi
 8006b3e:	2301      	movhi	r3, #1
 8006b40:	2300      	movls	r3, #0
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 8006b48:	4816      	ldr	r0, [pc, #88]	; (8006ba4 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x88>)
 8006b4a:	f016 fa75 	bl	801d038 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006b4e:	f7ff fb0b 	bl	8006168 <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 8006b52:	4602      	mov	r2, r0
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	4413      	add	r3, r2
 8006b58:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8006b5a:	f7ff fb05 	bl	8006168 <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 8006b5e:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006b60:	fbb4 f3f3 	udiv	r3, r4, r3
 8006b64:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff f9dc 	bl	8005f26 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006b6e:	2301      	movs	r3, #1
 8006b70:	60fb      	str	r3, [r7, #12]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d80f      	bhi.n	8006b9a <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	695a      	ldr	r2, [r3, #20]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	425b      	negs	r3, r3
 8006b86:	18d4      	adds	r4, r2, r3
 8006b88:	4608      	mov	r0, r1
 8006b8a:	f7ff f9e4 	bl	8005f56 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3301      	adds	r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	e7eb      	b.n	8006b72 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x56>
    }
 8006b9a:	bf00      	nop
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd90      	pop	{r4, r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	0801e794 	.word	0x0801e794

08006ba8 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7fd f8d6 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	__tmp -= __n;
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fd8b 	bl	80076da <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EmIEi>
	return __tmp;
 8006bc4:	bf00      	nop
      }
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <_ZSt18uninitialized_copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b08a      	sub	sp, #40	; 0x28
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8006be2:	f107 0314 	add.w	r3, r7, #20
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fd f8bd 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f107 0314 	add.w	r3, r7, #20
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	f000 fd7f 	bl	80076fa <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_>
    }
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	3728      	adds	r7, #40	; 0x28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8006c04:	b590      	push	{r4, r7, lr}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff f978 	bl	8005f04 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 8006c14:	4604      	mov	r4, r0
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fc f824 	bl	8002c64 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	1ae3      	subs	r3, r4, r3
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	bf8c      	ite	hi
 8006c26:	2301      	movhi	r3, #1
 8006c28:	2300      	movls	r3, #0
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8006c30:	4815      	ldr	r0, [pc, #84]	; (8006c88 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x84>)
 8006c32:	f016 fa01 	bl	801d038 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006c36:	f7ff fa97 	bl	8006168 <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	4413      	add	r3, r2
 8006c40:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8006c42:	f7ff fa91 	bl	8006168 <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 8006c46:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006c48:	fbb4 f3f3 	udiv	r3, r4, r3
 8006c4c:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fd79 	bl	8007748 <_ZNSt5dequeI8IMUFrameSaIS0_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006c56:	2301      	movs	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d80e      	bhi.n	8006c80 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	18d4      	adds	r4, r2, r3
 8006c6e:	4608      	mov	r0, r1
 8006c70:	f7ff f971 	bl	8005f56 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8006c74:	4603      	mov	r3, r0
 8006c76:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	e7ec      	b.n	8006c5a <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x56>
    }
 8006c80:	bf00      	nop
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd90      	pop	{r4, r7, pc}
 8006c88:	0801e7b4 	.word	0x0801e7b4

08006c8c <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8006c8c:	b590      	push	{r4, r7, lr}
 8006c8e:	b09b      	sub	sp, #108	; 0x6c
 8006c90:	af02      	add	r7, sp, #8
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 8006c9a:	f107 0320 	add.w	r3, r7, #32
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fd f861 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006ca6:	f107 0310 	add.w	r3, r7, #16
 8006caa:	f107 0220 	add.w	r2, r7, #32
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fd64 	bl	800777e <_ZSt18make_move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EESt13move_iteratorIT_ES6_>
 8006cb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fd f853 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006cc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cc6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fd56 	bl	800777e <_ZSt18make_move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EESt13move_iteratorIT_ES6_>
 8006cd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fd f845 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006ce4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ce8:	f107 0110 	add.w	r1, r7, #16
 8006cec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	4623      	mov	r3, r4
 8006cf2:	f000 fd6d 	bl	80077d0 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_S2_ET0_T_S8_S7_RSaIT1_E>
    }
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	3764      	adds	r7, #100	; 0x64
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd90      	pop	{r4, r7, pc}

08006cfe <_ZSt4moveISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>:
    move(_II __first, _II __last, _OI __result)
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b098      	sub	sp, #96	; 0x60
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	607a      	str	r2, [r7, #4]
 8006d0a:	603b      	str	r3, [r7, #0]
				      std::__miter_base(__last), __result);
 8006d0c:	f107 0320 	add.w	r3, r7, #32
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fd f828 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006d18:	f107 0310 	add.w	r3, r7, #16
 8006d1c:	f107 0220 	add.w	r2, r7, #32
 8006d20:	4611      	mov	r1, r2
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fd7a 	bl	800781c <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8006d28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fd f81a 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006d34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d38:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fd6c 	bl	800781c <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8006d44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fd f80c 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d5a:	f107 0110 	add.w	r1, r7, #16
 8006d5e:	f000 fd6a 	bl	8007836 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>
    }
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	3760      	adds	r7, #96	; 0x60
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <_ZSt7advanceIPK8IMUFrameiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8006d6a:	b590      	push	{r4, r7, lr}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7fd fe36 	bl	80049ea <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 8006d7e:	4622      	mov	r2, r4
 8006d80:	68f9      	ldr	r1, [r7, #12]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7fe fcf2 	bl	800576c <_ZSt9__advanceIPK8IMUFrameiEvRT_T0_St26random_access_iterator_tag>
    }
 8006d88:	bf00      	nop
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd90      	pop	{r4, r7, pc}

08006d90 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorI8IMUFrameRS1_PS1_EPKS1_S4_SaIS1_EET1_T_S9_T0_SA_S8_RT2_>:
    __uninitialized_move_copy(_InputIterator1 __first1,
 8006d90:	b590      	push	{r4, r7, lr}
 8006d92:	b0a3      	sub	sp, #140	; 0x8c
 8006d94:	af02      	add	r7, sp, #8
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 8006d9e:	f107 0320 	add.w	r3, r7, #32
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fc ffdf 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006daa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fc ffd9 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006db6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006dba:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fc ffd2 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006dc4:	f107 0010 	add.w	r0, r7, #16
 8006dc8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8006dcc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006dd0:	f107 0120 	add.w	r1, r7, #32
 8006dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	4623      	mov	r3, r4
 8006ddc:	f7ff ff56 	bl	8006c8c <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 8006de0:	f107 0210 	add.w	r2, r7, #16
 8006de4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006de8:	4611      	mov	r1, r2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fc ffbc 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006df6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	f7fe fd2e 	bl	8005864 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
    }
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	3784      	adds	r7, #132	; 0x84
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd90      	pop	{r4, r7, pc}

08006e10 <_ZSt13move_backwardISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b098      	sub	sp, #96	; 0x60
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
					       __result);
 8006e1e:	f107 0320 	add.w	r3, r7, #32
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fc ff9f 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006e2a:	f107 0310 	add.w	r3, r7, #16
 8006e2e:	f107 0220 	add.w	r2, r7, #32
 8006e32:	4611      	mov	r1, r2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 fcf1 	bl	800781c <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8006e3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fc ff91 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006e46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e4a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006e4e:	4611      	mov	r1, r2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fce3 	bl	800781c <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8006e56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fc ff83 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006e6c:	f107 0110 	add.w	r1, r7, #16
 8006e70:	f000 fd27 	bl	80078c2 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>
    }
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	3760      	adds	r7, #96	; 0x60
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <_ZSt25__uninitialized_copy_moveIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES6_SaIS0_EET1_T_S9_T0_SA_S8_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 8006e7c:	b590      	push	{r4, r7, lr}
 8006e7e:	b0a3      	sub	sp, #140	; 0x8c
 8006e80:	af02      	add	r7, sp, #8
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 8006e8a:	f107 0320 	add.w	r3, r7, #32
 8006e8e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fc ff68 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006e98:	f107 0010 	add.w	r0, r7, #16
 8006e9c:	f107 0220 	add.w	r2, r7, #32
 8006ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	68b9      	ldr	r1, [r7, #8]
 8006eac:	f7fe fcda 	bl	8005864 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 8006eb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fc ff56 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ec0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fc ff4f 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006eca:	f107 0210 	add.w	r2, r7, #16
 8006ece:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fc ff47 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006ee0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006ee4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	4623      	mov	r3, r4
 8006ef0:	f7ff fecc 	bl	8006c8c <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
    }
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	3784      	adds	r7, #132	; 0x84
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd90      	pop	{r4, r7, pc}

08006efc <_ZNSt5dequeI8IMUFrameSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8006f04:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006f08:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fd1f 	bl	800794e <_ZNSt16allocator_traitsISaI8IMUFrameEE8max_sizeERKS1_>
 8006f10:	4603      	mov	r3, r0
 8006f12:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006f14:	f107 0208 	add.w	r2, r7, #8
 8006f18:	f107 030c 	add.w	r3, r7, #12
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff fb2d 	bl	800657e <_ZSt3minIjERKT_S2_S2_>
 8006f24:	4603      	mov	r3, r0
 8006f26:	681b      	ldr	r3, [r3, #0]
      }
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8006f30:	b590      	push	{r4, r7, lr}
 8006f32:	b08b      	sub	sp, #44	; 0x2c
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	109b      	asrs	r3, r3, #2
 8006f4a:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8006f4c:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6a3a      	ldr	r2, [r7, #32]
 8006f52:	4413      	add	r3, r2
 8006f54:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d92d      	bls.n	8006fbe <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	1acb      	subs	r3, r1, r3
 8006f6e:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006f70:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	e000      	b.n	8006f80 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006f82:	4413      	add	r3, r2
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d209      	bcs.n	8006fa4 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8006f98:	3304      	adds	r3, #4
 8006f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	f000 fce2 	bl	8007966 <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>
 8006fa2:	e048      	b.n	8007036 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006fac:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb4:	4413      	add	r3, r2
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f000 fced 	bl	8007996 <_ZSt13copy_backwardIPP8IMUFrameS2_ET0_T_S4_S3_>
 8006fbc:	e03b      	b.n	8007036 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	f107 0208 	add.w	r2, r7, #8
 8006fca:	4611      	mov	r1, r2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fc ffa8 	bl	8003f22 <_ZSt3maxIjERKT_S2_S2_>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006fd8:	3302      	adds	r3, #2
 8006fda:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	69b9      	ldr	r1, [r7, #24]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fd fea7 	bl	8004d34 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>
 8006fe6:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	085b      	lsrs	r3, r3, #1
 8006ff0:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	e000      	b.n	8007000 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8006ffe:	2300      	movs	r3, #0
 8007000:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4413      	add	r3, r2
 8007006:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8007010:	3304      	adds	r3, #4
 8007012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007014:	4619      	mov	r1, r3
 8007016:	f000 fca6 	bl	8007966 <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6819      	ldr	r1, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	461a      	mov	r2, r3
 8007026:	f7fc fe65 	bl	8003cf4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3308      	adds	r3, #8
 800703a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800703c:	4618      	mov	r0, r3
 800703e:	f7fd fe06 	bl	8004c4e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f103 0018 	add.w	r0, r3, #24
 8007048:	6a3a      	ldr	r2, [r7, #32]
 800704a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007054:	4413      	add	r3, r2
 8007056:	4619      	mov	r1, r3
 8007058:	f7fd fdf9 	bl	8004c4e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
    }
 800705c:	bf00      	nop
 800705e:	372c      	adds	r7, #44	; 0x2c
 8007060:	46bd      	mov	sp, r7
 8007062:	bd90      	pop	{r4, r7, pc}

08007064 <_ZNSt16allocator_traitsISaI8IMUFrameEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800706e:	2200      	movs	r2, #0
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fca7 	bl	80079c6 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv>
 8007078:	4603      	mov	r3, r0
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	4613      	mov	r3, r2
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	4413      	add	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	4619      	mov	r1, r3
 800709a:	68b8      	ldr	r0, [r7, #8]
 800709c:	f015 ffb6 	bl	801d00c <_ZdlPvj>
      }
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 fca7 	bl	8007a08 <_ZNK9__gnu_cxx13new_allocatorIP8IMUFrameE11_M_max_sizeEv>
 80070ba:	4602      	mov	r2, r0
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4293      	cmp	r3, r2
 80070c0:	bf8c      	ite	hi
 80070c2:	2301      	movhi	r3, #1
 80070c4:	2300      	movls	r3, #0
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80070cc:	f015 ffb1 	bl	801d032 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4618      	mov	r0, r3
 80070d6:	f015 ff9b 	bl	801d010 <_Znwj>
 80070da:	4603      	mov	r3, r0
      }
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	605a      	str	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f103 0208 	add.w	r2, r3, #8
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	3308      	adds	r3, #8
 8007134:	4619      	mov	r1, r3
 8007136:	4610      	mov	r0, r2
 8007138:	f7fb ff35 	bl	8002fa6 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f103 0218 	add.w	r2, r3, #24
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	3318      	adds	r3, #24
 8007146:	4619      	mov	r1, r3
 8007148:	4610      	mov	r0, r2
 800714a:	f7fb ff2c 	bl	8002fa6 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8007158:	b5b0      	push	{r4, r5, r7, lr}
 800715a:	b08c      	sub	sp, #48	; 0x30
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff ffd3 	bl	8007110 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 800716a:	f107 0308 	add.w	r3, r7, #8
 800716e:	4618      	mov	r0, r3
 8007170:	f7fc feb3 	bl	8003eda <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	461d      	mov	r5, r3
 8007178:	f107 0408 	add.w	r4, r7, #8
 800717c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800717e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007184:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007188:	e885 0003 	stmia.w	r5, {r0, r1}
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4618      	mov	r0, r3
 8007190:	3730      	adds	r7, #48	; 0x30
 8007192:	46bd      	mov	sp, r7
 8007194:	bdb0      	pop	{r4, r5, r7, pc}

08007196 <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4618      	mov	r0, r3
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	6039      	str	r1, [r7, #0]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	605a      	str	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f103 0208 	add.w	r2, r3, #8
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	3308      	adds	r3, #8
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7fb ff7f 	bl	80030ec <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f103 0218 	add.w	r2, r3, #24
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	3318      	adds	r3, #24
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f7fb ff76 	bl	80030ec <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 800720a:	b5b0      	push	{r4, r5, r7, lr}
 800720c:	b08c      	sub	sp, #48	; 0x30
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff ffd3 	bl	80071c2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 800721c:	f107 0308 	add.w	r3, r7, #8
 8007220:	4618      	mov	r0, r3
 8007222:	f7fd ff14 	bl	800504e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	461d      	mov	r5, r3
 800722a:	f107 0408 	add.w	r4, r7, #8
 800722e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007236:	e894 0003 	ldmia.w	r4, {r0, r1}
 800723a:	e885 0003 	stmia.w	r5, {r0, r1}
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4618      	mov	r0, r3
 8007242:	3730      	adds	r7, #48	; 0x30
 8007244:	46bd      	mov	sp, r7
 8007246:	bdb0      	pop	{r4, r5, r7, pc}

08007248 <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	605a      	str	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f103 0208 	add.w	r2, r3, #8
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	4619      	mov	r1, r3
 800729a:	4610      	mov	r0, r2
 800729c:	f7fc fd64 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f103 0218 	add.w	r2, r3, #24
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	3318      	adds	r3, #24
 80072aa:	4619      	mov	r1, r3
 80072ac:	4610      	mov	r0, r2
 80072ae:	f7fc fd5b 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 80072bc:	b5b0      	push	{r4, r5, r7, lr}
 80072be:	b08c      	sub	sp, #48	; 0x30
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff ffd3 	bl	8007274 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 80072ce:	f107 0308 	add.w	r3, r7, #8
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fd fd0a 	bl	8004cec <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	461d      	mov	r5, r3
 80072dc:	f107 0408 	add.w	r4, r7, #8
 80072e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4618      	mov	r0, r3
 80072f4:	3730      	adds	r7, #48	; 0x30
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bdb0      	pop	{r4, r5, r7, pc}

080072fa <_ZSt4moveIRSaI8IMUFrameEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007318:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d00a      	beq.n	8007350 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fb70 	bl	8007a20 <_ZSt11__addressofI7RequestEPT_RS1_>
 8007340:	4603      	mov	r3, r0
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fb77 	bl	8007a36 <_ZSt8_DestroyI7RequestEvPT_>
	  for (; __first != __last; ++__first)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3314      	adds	r3, #20
 800734c:	607b      	str	r3, [r7, #4]
 800734e:	e7f0      	b.n	8007332 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0xa>
	}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 fb71 	bl	8007a4c <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>
 800736a:	4602      	mov	r2, r0
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4293      	cmp	r3, r2
 8007370:	bf8c      	ite	hi
 8007372:	2301      	movhi	r3, #1
 8007374:	2300      	movls	r3, #0
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800737c:	f015 fe59 	bl	801d032 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4618      	mov	r0, r3
 8007386:	f015 fe43 	bl	801d010 <_Znwj>
 800738a:	4603      	mov	r3, r0
      }
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	4619      	mov	r1, r3
 80073a6:	68b8      	ldr	r0, [r7, #8]
 80073a8:	f015 fe30 	bl	801d00c <_ZdlPvj>
      }
 80073ac:	bf00      	nop
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d00a      	beq.n	80073f2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fb41 	bl	8007a64 <_ZSt11__addressofI8ResponceEPT_RS1_>
 80073e2:	4603      	mov	r3, r0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fb48 	bl	8007a7a <_ZSt8_DestroyI8ResponceEvPT_>
	  for (; __first != __last; ++__first)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3310      	adds	r3, #16
 80073ee:	607b      	str	r3, [r7, #4]
 80073f0:	e7f0      	b.n	80073d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0xa>
	}
 80073f2:	bf00      	nop
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f856 	bl	80074b4 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 8007408:	4603      	mov	r3, r0
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <_ZSt12__miter_baseIPP7RequestET_S3_>:
    __miter_base(_Iterator __it)
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
    { return __it; }
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007428:	b5b0      	push	{r4, r5, r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 fb2b 	bl	8007a90 <_ZSt12__niter_baseIPP7RequestET_S3_>
 800743a:	4604      	mov	r4, r0
 800743c:	68b8      	ldr	r0, [r7, #8]
 800743e:	f000 fb27 	bl	8007a90 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8007442:	4605      	mov	r5, r0
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fb22 	bl	8007a90 <_ZSt12__niter_baseIPP7RequestET_S3_>
 800744c:	4603      	mov	r3, r0
 800744e:	461a      	mov	r2, r3
 8007450:	4629      	mov	r1, r5
 8007452:	4620      	mov	r0, r4
 8007454:	f000 fb27 	bl	8007aa6 <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007458:	4602      	mov	r2, r0
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	4611      	mov	r1, r2
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fb31 	bl	8007ac6 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 8007464:	4603      	mov	r3, r0
    }
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bdb0      	pop	{r4, r5, r7, pc}

0800746e <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800746e:	b5b0      	push	{r4, r5, r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fb08 	bl	8007a90 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8007480:	4604      	mov	r4, r0
 8007482:	68b8      	ldr	r0, [r7, #8]
 8007484:	f000 fb04 	bl	8007a90 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8007488:	4605      	mov	r5, r0
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4618      	mov	r0, r3
 800748e:	f000 faff 	bl	8007a90 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8007492:	4603      	mov	r3, r0
 8007494:	461a      	mov	r2, r3
 8007496:	4629      	mov	r1, r5
 8007498:	4620      	mov	r0, r4
 800749a:	f000 fb20 	bl	8007ade <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 800749e:	4602      	mov	r2, r0
 80074a0:	1d3b      	adds	r3, r7, #4
 80074a2:	4611      	mov	r1, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fb0e 	bl	8007ac6 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 80074aa:	4603      	mov	r3, r0
    }
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bdb0      	pop	{r4, r5, r7, pc}

080074b4 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80074bc:	4b03      	ldr	r3, [pc, #12]	; (80074cc <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv+0x18>)
      }
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	06666666 	.word	0x06666666

080074d0 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f820 	bl	800751e <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 80074de:	4603      	mov	r3, r0
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80074e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80074f4:	68fc      	ldr	r4, [r7, #12]
 80074f6:	68b8      	ldr	r0, [r7, #8]
 80074f8:	f7f9 fcac 	bl	8000e54 <_ZSt17__size_to_integerj>
 80074fc:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 80074fe:	f107 030c 	add.w	r3, r7, #12
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fafb 	bl	8007afe <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8007508:	4633      	mov	r3, r6
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	4629      	mov	r1, r5
 800750e:	4620      	mov	r0, r4
 8007510:	f000 fb00 	bl	8007b14 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 8007514:	4603      	mov	r3, r0
    }
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800751e <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007526:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007536:	b580      	push	{r7, lr}
 8007538:	b086      	sub	sp, #24
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	607a      	str	r2, [r7, #4]
 8007542:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2b00      	cmp	r3, #0
 8007550:	dd05      	ble.n	800755e <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	461a      	mov	r2, r3
 8007556:	68f9      	ldr	r1, [r7, #12]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f015 fdfb 	bl	801d154 <memmove>
      return __result + __count;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	4413      	add	r3, r2
    }
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fad9 	bl	8007b4a <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8007598:	4603      	mov	r3, r0
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fae5 	bl	8007b7a <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>
 80075b0:	4603      	mov	r3, r0
      }
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80075ba:	b590      	push	{r4, r7, lr}
 80075bc:	b085      	sub	sp, #20
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 fae3 	bl	8007b92 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80075cc:	4604      	mov	r4, r0
 80075ce:	68b8      	ldr	r0, [r7, #8]
 80075d0:	f000 fadf 	bl	8007b92 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80075d4:	4603      	mov	r3, r0
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	4619      	mov	r1, r3
 80075da:	4620      	mov	r0, r4
 80075dc:	f000 fae4 	bl	8007ba8 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80075e0:	4603      	mov	r3, r0
    }
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd90      	pop	{r4, r7, pc}

080075ea <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80075ea:	b590      	push	{r4, r7, lr}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 facb 	bl	8007b92 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80075fc:	4604      	mov	r4, r0
 80075fe:	68b8      	ldr	r0, [r7, #8]
 8007600:	f000 fac7 	bl	8007b92 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8007604:	4603      	mov	r3, r0
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	4619      	mov	r1, r3
 800760a:	4620      	mov	r0, r4
 800760c:	f000 faef 	bl	8007bee <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007610:	4603      	mov	r3, r0
    }
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	bd90      	pop	{r4, r7, pc}

0800761a <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 fb04 	bl	8007c34 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 800762c:	4602      	mov	r2, r0
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	4293      	cmp	r3, r2
 8007632:	bf8c      	ite	hi
 8007634:	2301      	movhi	r3, #1
 8007636:	2300      	movls	r3, #0
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800763e:	f015 fcf8 	bl	801d032 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	4618      	mov	r0, r3
 8007648:	f015 fce2 	bl	801d010 <_Znwj>
 800764c:	4603      	mov	r3, r0
      }
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8007656:	b590      	push	{r4, r7, lr}
 8007658:	b085      	sub	sp, #20
 800765a:	af00      	add	r7, sp, #0
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f7fd f8f5 	bl	8004852 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8007668:	4604      	mov	r4, r0
 800766a:	68b8      	ldr	r0, [r7, #8]
 800766c:	f7fd f8f1 	bl	8004852 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8007670:	4603      	mov	r3, r0
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	4619      	mov	r1, r3
 8007676:	4620      	mov	r0, r4
 8007678:	f000 fae8 	bl	8007c4c <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 800767c:	4603      	mov	r3, r0
    }
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	bd90      	pop	{r4, r7, pc}

08007686 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007686:	b580      	push	{r7, lr}
 8007688:	b086      	sub	sp, #24
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d005      	beq.n	80076ac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	461a      	mov	r2, r3
 80076a4:	68f9      	ldr	r1, [r7, #12]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f015 fd54 	bl	801d154 <memmove>
	  return __result + _Num;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	4413      	add	r3, r2
	}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <_ZSt14__copy_move_a1ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fae1 	bl	8007c92 <_ZSt14__copy_move_a2ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>
 80076d0:	4603      	mov	r3, r0
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	425b      	negs	r3, r3
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fe fc74 	bl	8005fd8 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
 80076f0:	4603      	mov	r3, r0
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b08c      	sub	sp, #48	; 0x30
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	607a      	str	r2, [r7, #4]
 8007706:	603b      	str	r3, [r7, #0]
	  _ForwardIterator __cur = __result;
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f7fc fb2c 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d012      	beq.n	800773e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_+0x44>
		std::_Construct(std::__addressof(*__cur), *__first);
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f7fd facf 	bl	8004cbc <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 800771e:	4603      	mov	r3, r0
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fac6 	bl	8007cb2 <_ZSt11__addressofI8IMUFrameEPT_RS1_>
 8007726:	4603      	mov	r3, r0
 8007728:	68b9      	ldr	r1, [r7, #8]
 800772a:	4618      	mov	r0, r3
 800772c:	f000 facc 	bl	8007cc8 <_ZSt10_ConstructI8IMUFrameJRKS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	3318      	adds	r3, #24
 8007734:	60bb      	str	r3, [r7, #8]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7fe fc1f 	bl	8005f7a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>
 800773c:	e7e8      	b.n	8007710 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_+0x16>
	      return __cur;
 800773e:	bf00      	nop
	}
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	3730      	adds	r7, #48	; 0x30
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <_ZNSt5dequeI8IMUFrameSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800775a:	6879      	ldr	r1, [r7, #4]
 800775c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	6809      	ldr	r1, [r1, #0]
 8007762:	1a41      	subs	r1, r0, r1
 8007764:	1089      	asrs	r1, r1, #2
 8007766:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8007768:	429a      	cmp	r2, r3
 800776a:	d904      	bls.n	8007776 <_ZNSt5dequeI8IMUFrameSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800776c:	2200      	movs	r2, #0
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff fbdd 	bl	8006f30 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>
      }
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <_ZSt18make_move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EESt13move_iteratorIT_ES6_>:
    make_move_iterator(_Iterator __i)
 800777e:	b580      	push	{r7, lr}
 8007780:	b086      	sub	sp, #24
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8007788:	6838      	ldr	r0, [r7, #0]
 800778a:	f000 fab7 	bl	8007cfc <_ZSt4moveIRSt15_Deque_iteratorI8IMUFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>
 800778e:	4602      	mov	r2, r0
 8007790:	f107 0308 	add.w	r3, r7, #8
 8007794:	4611      	mov	r1, r2
 8007796:	4618      	mov	r0, r3
 8007798:	f7fc fae6 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800779c:	f107 0308 	add.w	r3, r7, #8
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fab5 	bl	8007d12 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ES4_>
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>:
    class move_iterator
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fc fad1 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_S2_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b090      	sub	sp, #64	; 0x40
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80077de:	f107 0310 	add.w	r3, r7, #16
 80077e2:	68b9      	ldr	r1, [r7, #8]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7ff ffe3 	bl	80077b0 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 80077ea:	f107 0320 	add.w	r3, r7, #32
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff ffdd 	bl	80077b0 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 80077f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fc fab3 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007808:	f107 0220 	add.w	r2, r7, #32
 800780c:	f107 0110 	add.w	r1, r7, #16
 8007810:	f000 fa92 	bl	8007d38 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_ET0_T_S8_S7_>
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	3740      	adds	r7, #64	; 0x40
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>:
    __miter_base(_Iterator __it)
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
    { return __it; }
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7fc fa9d 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007836:	b580      	push	{r7, lr}
 8007838:	b0a0      	sub	sp, #128	; 0x80
 800783a:	af00      	add	r7, sp, #0
 800783c:	60f8      	str	r0, [r7, #12]
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	607a      	str	r2, [r7, #4]
 8007842:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8007844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007848:	68b9      	ldr	r1, [r7, #8]
 800784a:	4618      	mov	r0, r3
 800784c:	f7fc fa8c 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007850:	f107 0320 	add.w	r3, r7, #32
 8007854:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007858:	4611      	mov	r1, r2
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff f8dc 	bl	8006a18 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8007860:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	4618      	mov	r0, r3
 8007868:	f7fc fa7e 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800786c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007870:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007874:	4611      	mov	r1, r2
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff f8ce 	bl	8006a18 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 800787c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	4618      	mov	r0, r3
 8007884:	f7fc fa70 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007888:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800788c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007890:	4611      	mov	r1, r2
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff f8c0 	bl	8006a18 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8007898:	f107 0010 	add.w	r0, r7, #16
 800789c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80078a0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80078a4:	f107 0120 	add.w	r1, r7, #32
 80078a8:	f000 fa6f 	bl	8007d8a <_ZSt14__copy_move_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f107 0210 	add.w	r2, r7, #16
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff f923 	bl	8006b00 <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>
    }
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	3780      	adds	r7, #128	; 0x80
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b0a0      	sub	sp, #128	; 0x80
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 80078d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fc fa46 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80078dc:	f107 0320 	add.w	r3, r7, #32
 80078e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80078e4:	4611      	mov	r1, r2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff f896 	bl	8006a18 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 80078ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fc fa38 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80078f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80078fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007900:	4611      	mov	r1, r2
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff f888 	bl	8006a18 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8007908:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f7fc fa2a 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007914:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007918:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800791c:	4611      	mov	r1, r2
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff f87a 	bl	8006a18 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8007924:	f107 0010 	add.w	r0, r7, #16
 8007928:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800792c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007930:	f107 0120 	add.w	r1, r7, #32
 8007934:	f000 fa4f 	bl	8007dd6 <_ZSt23__copy_move_backward_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f107 0210 	add.w	r2, r7, #16
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff f8dd 	bl	8006b00 <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>
    }
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	3780      	adds	r7, #128	; 0x80
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <_ZNSt16allocator_traitsISaI8IMUFrameEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fa63 	bl	8007e22 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE8max_sizeEv>
 800795c:	4603      	mov	r3, r0
      }
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8007966:	b590      	push	{r4, r7, lr}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 fa61 	bl	8007e3a <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 8007978:	4604      	mov	r4, r0
 800797a:	68b8      	ldr	r0, [r7, #8]
 800797c:	f000 fa5d 	bl	8007e3a <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 8007980:	4603      	mov	r3, r0
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	4619      	mov	r1, r3
 8007986:	4620      	mov	r0, r4
 8007988:	f000 fa62 	bl	8007e50 <_ZSt13__copy_move_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 800798c:	4603      	mov	r3, r0
    }
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	bd90      	pop	{r4, r7, pc}

08007996 <_ZSt13copy_backwardIPP8IMUFrameS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8007996:	b590      	push	{r4, r7, lr}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fa49 	bl	8007e3a <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 80079a8:	4604      	mov	r4, r0
 80079aa:	68b8      	ldr	r0, [r7, #8]
 80079ac:	f000 fa45 	bl	8007e3a <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 80079b0:	4603      	mov	r3, r0
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	4619      	mov	r1, r3
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 fa6d 	bl	8007e96 <_ZSt22__copy_move_backward_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 80079bc:	4603      	mov	r3, r0
    }
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd90      	pop	{r4, r7, pc}

080079c6 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 fa82 	bl	8007edc <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>
 80079d8:	4602      	mov	r2, r0
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	4293      	cmp	r3, r2
 80079de:	bf8c      	ite	hi
 80079e0:	2301      	movhi	r3, #1
 80079e2:	2300      	movls	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80079ea:	f015 fb22 	bl	801d032 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	4613      	mov	r3, r2
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	4413      	add	r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	4618      	mov	r0, r3
 80079fa:	f015 fb09 	bl	801d010 <_Znwj>
 80079fe:	4603      	mov	r3, r0
      }
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <_ZNK9__gnu_cxx13new_allocatorIP8IMUFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007a10:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007a14:	4618      	mov	r0, r3
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <_ZSt11__addressofI7RequestEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <_ZSt8_DestroyI7RequestEvPT_>:
    _Destroy(_Tp* __pointer)
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7f9 faa5 	bl	8000f8e <_ZN7RequestD1Ev>
    }
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007a54:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <_ZSt11__addressofI8ResponceEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <_ZSt8_DestroyI8ResponceEvPT_>:
    _Destroy(_Tp* __pointer)
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7f9 fb7c 	bl	8001180 <_ZN8ResponceD1Ev>
    }
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <_ZSt12__niter_baseIPP7RequestET_S3_>:
    __niter_base(_Iterator __it)
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fa1e 	bl	8007ef8 <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007abc:	4603      	mov	r3, r0
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fa12 	bl	8007f18 <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007af4:	4603      	mov	r3, r0
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8007b06:	bf00      	nop
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	e00a      	b.n	8007b42 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	4413      	add	r3, r2
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	4619      	mov	r1, r3
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 f9fe 	bl	8007f38 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4413      	add	r3, r2
    }
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8007b4a:	b590      	push	{r4, r7, lr}
 8007b4c:	b085      	sub	sp, #20
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 f9fd 	bl	8007f56 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	68b8      	ldr	r0, [r7, #8]
 8007b60:	f000 f9f9 	bl	8007f56 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007b64:	4603      	mov	r3, r0
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 fa04 	bl	8007f78 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8007b70:	4603      	mov	r3, r0
    }
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd90      	pop	{r4, r7, pc}

08007b7a <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f856 	bl	8007c34 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <_ZSt12__miter_baseIPP8ResponceET_S3_>:
    __miter_base(_Iterator __it)
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007ba8:	b5b0      	push	{r4, r5, r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 fa02 	bl	8007fbe <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007bba:	4604      	mov	r4, r0
 8007bbc:	68b8      	ldr	r0, [r7, #8]
 8007bbe:	f000 f9fe 	bl	8007fbe <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 f9f9 	bl	8007fbe <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 f9fe 	bl	8007fd4 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	1d3b      	adds	r3, r7, #4
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fa08 	bl	8007ff4 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8007be4:	4603      	mov	r3, r0
    }
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bdb0      	pop	{r4, r5, r7, pc}

08007bee <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007bee:	b5b0      	push	{r4, r5, r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f9df 	bl	8007fbe <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007c00:	4604      	mov	r4, r0
 8007c02:	68b8      	ldr	r0, [r7, #8]
 8007c04:	f000 f9db 	bl	8007fbe <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007c08:	4605      	mov	r5, r0
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 f9d6 	bl	8007fbe <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007c12:	4603      	mov	r3, r0
 8007c14:	461a      	mov	r2, r3
 8007c16:	4629      	mov	r1, r5
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f000 f9f7 	bl	800800c <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	1d3b      	adds	r3, r7, #4
 8007c22:	4611      	mov	r1, r2
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 f9e5 	bl	8007ff4 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8007c2a:	4603      	mov	r3, r0
    }
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bdb0      	pop	{r4, r5, r7, pc}

08007c34 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007c3c:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8007c40:	4618      	mov	r0, r3
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007c4c:	b5b0      	push	{r4, r5, r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f7fd fcee 	bl	800563a <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007c5e:	4604      	mov	r4, r0
 8007c60:	68b8      	ldr	r0, [r7, #8]
 8007c62:	f7fd fcea 	bl	800563a <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007c66:	4605      	mov	r5, r0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fd fd31 	bl	80056d2 <_ZSt12__niter_baseIPhET_S1_>
 8007c70:	4603      	mov	r3, r0
 8007c72:	461a      	mov	r2, r3
 8007c74:	4629      	mov	r1, r5
 8007c76:	4620      	mov	r0, r4
 8007c78:	f7fd fcfb 	bl	8005672 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	1d3b      	adds	r3, r7, #4
 8007c80:	4611      	mov	r1, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fd fd40 	bl	8005708 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8007c88:	4603      	mov	r3, r0
    }
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bdb0      	pop	{r4, r5, r7, pc}

08007c92 <_ZSt14__copy_move_a2ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	68b9      	ldr	r1, [r7, #8]
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f9c2 	bl	800802c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>
 8007ca8:	4603      	mov	r3, r0
    }
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <_ZSt11__addressofI8IMUFrameEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <_ZSt10_ConstructI8IMUFrameJRKS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8007cc8:	b5b0      	push	{r4, r5, r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8007cd2:	6838      	ldr	r0, [r7, #0]
 8007cd4:	f000 f9d4 	bl	8008080 <_ZSt7forwardIRK8IMUFrameEOT_RNSt16remove_referenceIS3_E4typeE>
 8007cd8:	4605      	mov	r5, r0
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	2018      	movs	r0, #24
 8007ce0:	f7f9 f8c3 	bl	8000e6a <_ZnwjPv>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	461c      	mov	r4, r3
 8007ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007cf0:	e884 0003 	stmia.w	r4, {r0, r1}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bdb0      	pop	{r4, r5, r7, pc}

08007cfc <_ZSt4moveIRSt15_Deque_iteratorI8IMUFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ES4_>:
      move_iterator(iterator_type __i)
 8007d12:	b590      	push	{r4, r7, lr}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8007d1c:	687c      	ldr	r4, [r7, #4]
 8007d1e:	6838      	ldr	r0, [r7, #0]
 8007d20:	f7ff ffec 	bl	8007cfc <_ZSt4moveIRSt15_Deque_iteratorI8IMUFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>
 8007d24:	4603      	mov	r3, r0
 8007d26:	4619      	mov	r1, r3
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f7fc f81d 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd90      	pop	{r4, r7, pc}

08007d38 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b092      	sub	sp, #72	; 0x48
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 8007d4c:	f107 0314 	add.w	r3, r7, #20
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff fd2c 	bl	80077b0 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 8007d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff fd26 	bl	80077b0 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 8007d64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fb fffc 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d76:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007d7a:	f107 0114 	add.w	r1, r7, #20
 8007d7e:	f000 f98a 	bl	8008096 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_>
    }
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	3748      	adds	r7, #72	; 0x48
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <_ZSt14__copy_move_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b090      	sub	sp, #64	; 0x40
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8007d98:	f107 0310 	add.w	r3, r7, #16
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fb ffe2 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007da4:	f107 0320 	add.w	r3, r7, #32
 8007da8:	6879      	ldr	r1, [r7, #4]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fb ffdc 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007db0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fb ffd6 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007dc2:	f107 0220 	add.w	r2, r7, #32
 8007dc6:	f107 0110 	add.w	r1, r7, #16
 8007dca:	f000 f992 	bl	80080f2 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	3740      	adds	r7, #64	; 0x40
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <_ZSt23__copy_move_backward_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b090      	sub	sp, #64	; 0x40
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	607a      	str	r2, [r7, #4]
 8007de2:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 8007de4:	f107 0310 	add.w	r3, r7, #16
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fb ffbc 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007df0:	f107 0320 	add.w	r3, r7, #32
 8007df4:	6879      	ldr	r1, [r7, #4]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fb ffb6 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007dfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fb ffb0 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e0e:	f107 0220 	add.w	r2, r7, #32
 8007e12:	f107 0110 	add.w	r1, r7, #16
 8007e16:	f000 f9e7 	bl	80081e8 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	3740      	adds	r7, #64	; 0x40
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f856 	bl	8007edc <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>
 8007e30:	4603      	mov	r3, r0
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <_ZSt12__miter_baseIPP8IMUFrameET_S3_>:
    __miter_base(_Iterator __it)
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <_ZSt13__copy_move_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007e50:	b5b0      	push	{r4, r5, r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fa3e 	bl	80082de <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007e62:	4604      	mov	r4, r0
 8007e64:	68b8      	ldr	r0, [r7, #8]
 8007e66:	f000 fa3a 	bl	80082de <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fa35 	bl	80082de <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007e74:	4603      	mov	r3, r0
 8007e76:	461a      	mov	r2, r3
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 fa3a 	bl	80082f4 <_ZSt14__copy_move_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8007e80:	4602      	mov	r2, r0
 8007e82:	1d3b      	adds	r3, r7, #4
 8007e84:	4611      	mov	r1, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fa44 	bl	8008314 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>
 8007e8c:	4603      	mov	r3, r0
    }
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bdb0      	pop	{r4, r5, r7, pc}

08007e96 <_ZSt22__copy_move_backward_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007e96:	b5b0      	push	{r4, r5, r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fa1b 	bl	80082de <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	68b8      	ldr	r0, [r7, #8]
 8007eac:	f000 fa17 	bl	80082de <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fa12 	bl	80082de <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f000 fa33 	bl	800832c <_ZSt23__copy_move_backward_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	1d3b      	adds	r3, r7, #4
 8007eca:	4611      	mov	r1, r2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fa21 	bl	8008314 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>
 8007ed2:	4603      	mov	r3, r0
    }
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bdb0      	pop	{r4, r5, r7, pc}

08007edc <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007ee4:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv+0x18>)
      }
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	05555555 	.word	0x05555555

08007ef8 <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 fa1f 	bl	800834c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>
 8007f0e:	4603      	mov	r3, r0
    }
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	68b9      	ldr	r1, [r7, #8]
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fa2c 	bl	8008386 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>
 8007f2e:	4603      	mov	r3, r0
    }
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 fa3e 	bl	80083ca <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8007f4e:	bf00      	nop
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8007f5e:	1d3b      	adds	r3, r7, #4
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fa4c 	bl	80083fe <_ZNKSt13move_iteratorIPhE4baseEv>
 8007f66:	4603      	mov	r3, r0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fc fcab 	bl	80048c4 <_ZSt12__miter_baseIPhET_S1_>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007f78:	b5b0      	push	{r4, r5, r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7fd fba4 	bl	80056d2 <_ZSt12__niter_baseIPhET_S1_>
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	68b8      	ldr	r0, [r7, #8]
 8007f8e:	f7fd fba0 	bl	80056d2 <_ZSt12__niter_baseIPhET_S1_>
 8007f92:	4605      	mov	r5, r0
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fd fb9b 	bl	80056d2 <_ZSt12__niter_baseIPhET_S1_>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 fa37 	bl	8008416 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	1d3b      	adds	r3, r7, #4
 8007fac:	4611      	mov	r1, r2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fd fbaa 	bl	8005708 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8007fb4:	4603      	mov	r3, r0
    }
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bdb0      	pop	{r4, r5, r7, pc}

08007fbe <_ZSt12__niter_baseIPP8ResponceET_S3_>:
    __niter_base(_Iterator __it)
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 fa26 	bl	8008436 <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007fea:	4603      	mov	r3, r0
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	68b9      	ldr	r1, [r7, #8]
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 fa1a 	bl	8008456 <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8008022:	4603      	mov	r3, r0
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	10db      	asrs	r3, r3, #3
 8008040:	4a0e      	ldr	r2, [pc, #56]	; (800807c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x50>)
 8008042:	fb02 f303 	mul.w	r3, r2, r3
 8008046:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d009      	beq.n	8008062 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	4613      	mov	r3, r2
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	4413      	add	r3, r2
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	461a      	mov	r2, r3
 800805a:	68f9      	ldr	r1, [r7, #12]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f015 f879 	bl	801d154 <memmove>
	  return __result + _Num;
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	4613      	mov	r3, r2
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	4413      	add	r3, r2
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	461a      	mov	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4413      	add	r3, r2
	}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	aaaaaaab 	.word	0xaaaaaaab

08008080 <_ZSt7forwardIRK8IMUFrameEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4618      	mov	r0, r3
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008096:	b590      	push	{r4, r7, lr}
 8008098:	b08d      	sub	sp, #52	; 0x34
 800809a:	af00      	add	r7, sp, #0
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	607a      	str	r2, [r7, #4]
 80080a2:	603b      	str	r3, [r7, #0]
	  _ForwardIterator __cur = __result;
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7fb fe5e 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80080ac:	6879      	ldr	r1, [r7, #4]
 80080ae:	68b8      	ldr	r0, [r7, #8]
 80080b0:	f000 f9e1 	bl	8008476 <_ZStneISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d016      	beq.n	80080e8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_+0x52>
		std::_Construct(std::__addressof(*__cur), *__first);
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7fc fdfe 	bl	8004cbc <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 80080c0:	4603      	mov	r3, r0
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7ff fdf5 	bl	8007cb2 <_ZSt11__addressofI8IMUFrameEPT_RS1_>
 80080c8:	4604      	mov	r4, r0
 80080ca:	68b8      	ldr	r0, [r7, #8]
 80080cc:	f000 f9f1 	bl	80084b2 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEdeEv>
 80080d0:	4603      	mov	r3, r0
 80080d2:	4619      	mov	r1, r3
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 f9f9 	bl	80084cc <_ZSt10_ConstructI8IMUFrameJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80080da:	68b8      	ldr	r0, [r7, #8]
 80080dc:	f000 f9dc 	bl	8008498 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEppEv>
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f7fd ff4a 	bl	8005f7a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>
 80080e6:	e7e1      	b.n	80080ac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_+0x16>
	      return __cur;
 80080e8:	bf00      	nop
	}
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	3734      	adds	r7, #52	; 0x34
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd90      	pop	{r4, r7, pc}

080080f2 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 80080f2:	b5b0      	push	{r4, r5, r7, lr}
 80080f4:	b09e      	sub	sp, #120	; 0x78
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	429a      	cmp	r2, r3
 800810a:	d058      	beq.n	80081be <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xcc>
	  __result
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	681c      	ldr	r4, [r3, #0]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	689d      	ldr	r5, [r3, #8]
 8008114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	4618      	mov	r0, r3
 800811c:	f7fb fe24 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8008120:	f107 0014 	add.w	r0, r7, #20
 8008124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008128:	462a      	mov	r2, r5
 800812a:	4621      	mov	r1, r4
 800812c:	f000 f9e8 	bl	8008500 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	461c      	mov	r4, r3
 8008134:	f107 0314 	add.w	r3, r7, #20
 8008138:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800813a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	3304      	adds	r3, #4
 8008144:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800814c:	429a      	cmp	r2, r3
 800814e:	d024      	beq.n	800819a <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xa8>
	    __result
 8008150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008152:	681d      	ldr	r5, [r3, #0]
 8008154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008156:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 8008158:	f7fc fd95 	bl	8004c86 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 800815c:	4602      	mov	r2, r0
 800815e:	4613      	mov	r3, r2
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	4413      	add	r3, r2
 8008164:	00db      	lsls	r3, r3, #3
	    __result
 8008166:	441c      	add	r4, r3
 8008168:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	4618      	mov	r0, r3
 8008170:	f7fb fdfa 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8008174:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8008178:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800817c:	4622      	mov	r2, r4
 800817e:	4629      	mov	r1, r5
 8008180:	f000 f9be 	bl	8008500 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	461c      	mov	r4, r3
 8008188:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800818c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800818e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8008192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008194:	3304      	adds	r3, #4
 8008196:	677b      	str	r3, [r7, #116]	; 0x74
 8008198:	e7d5      	b.n	8008146 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0x54>
					      __result);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685c      	ldr	r4, [r3, #4]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681d      	ldr	r5, [r3, #0]
 80081a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fb fddd 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80081b4:	462a      	mov	r2, r5
 80081b6:	4621      	mov	r1, r4
 80081b8:	f000 f9a2 	bl	8008500 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 80081bc:	e010      	b.n	80081e0 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xee>
					  __result);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	681c      	ldr	r4, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681d      	ldr	r5, [r3, #0]
 80081c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fb fdcb 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80081d8:	462a      	mov	r2, r5
 80081da:	4621      	mov	r1, r4
 80081dc:	f000 f990 	bl	8008500 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	3778      	adds	r7, #120	; 0x78
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bdb0      	pop	{r4, r5, r7, pc}

080081e8 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>:
    __copy_move_backward_dit(
 80081e8:	b5b0      	push	{r4, r5, r7, lr}
 80081ea:	b09e      	sub	sp, #120	; 0x78
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d058      	beq.n	80082b4 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685c      	ldr	r4, [r3, #4]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681d      	ldr	r5, [r3, #0]
 800820a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	4618      	mov	r0, r3
 8008212:	f7fb fda9 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8008216:	f107 0014 	add.w	r0, r7, #20
 800821a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800821e:	462a      	mov	r2, r5
 8008220:	4621      	mov	r1, r4
 8008222:	f000 f9bf 	bl	80085a4 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	461c      	mov	r4, r3
 800822a:	f107 0314 	add.w	r3, r7, #20
 800822e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	3b04      	subs	r3, #4
 800823a:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008242:	429a      	cmp	r2, r3
 8008244:	d024      	beq.n	8008290 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 8008246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008248:	681d      	ldr	r5, [r3, #0]
 800824a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800824c:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 800824e:	f7fc fd1a 	bl	8004c86 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8008252:	4602      	mov	r2, r0
 8008254:	4613      	mov	r3, r2
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	4413      	add	r3, r2
 800825a:	00db      	lsls	r3, r3, #3
	    __result = std::__copy_move_backward_a1<_IsMove>(
 800825c:	441c      	add	r4, r3
 800825e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	4618      	mov	r0, r3
 8008266:	f7fb fd7f 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800826a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800826e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008272:	4622      	mov	r2, r4
 8008274:	4629      	mov	r1, r5
 8008276:	f000 f995 	bl	80085a4 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	461c      	mov	r4, r3
 800827e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 8008288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800828a:	3b04      	subs	r3, #4
 800828c:	677b      	str	r3, [r7, #116]	; 0x74
 800828e:	e7d5      	b.n	800823c <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0x54>
			__first._M_cur, __first._M_last, __result);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	681c      	ldr	r4, [r3, #0]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	689d      	ldr	r5, [r3, #8]
 8008298:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fb fd62 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80082aa:	462a      	mov	r2, r5
 80082ac:	4621      	mov	r1, r4
 80082ae:	f000 f979 	bl	80085a4 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 80082b2:	e010      	b.n	80082d6 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xee>
		__first._M_cur, __last._M_cur, __result);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	681c      	ldr	r4, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681d      	ldr	r5, [r3, #0]
 80082bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fb fd50 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80082ce:	462a      	mov	r2, r5
 80082d0:	4621      	mov	r1, r4
 80082d2:	f000 f967 	bl	80085a4 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	3778      	adds	r7, #120	; 0x78
 80082da:	46bd      	mov	sp, r7
 80082dc:	bdb0      	pop	{r4, r5, r7, pc}

080082de <_ZSt12__niter_baseIPP8IMUFrameET_S3_>:
    __niter_base(_Iterator __it)
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <_ZSt14__copy_move_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	68b9      	ldr	r1, [r7, #8]
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 f9b3 	bl	8008670 <_ZSt14__copy_move_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 800830a:	4603      	mov	r3, r0
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <_ZSt23__copy_move_backward_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 f9a7 	bl	8008690 <_ZSt23__copy_move_backward_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8008342:	4603      	mov	r3, r0
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	109b      	asrs	r3, r3, #2
 8008360:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d006      	beq.n	8008376 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	461a      	mov	r2, r3
 800836e:	68f9      	ldr	r1, [r7, #12]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f014 feef 	bl	801d154 <memmove>
	  return __result + _Num;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	4413      	add	r3, r2
	}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008386:	b580      	push	{r7, lr}
 8008388:	b086      	sub	sp, #24
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	109b      	asrs	r3, r3, #2
 800839a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	425b      	negs	r3, r3
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	18d0      	adds	r0, r2, r3
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	461a      	mov	r2, r3
 80083b2:	68f9      	ldr	r1, [r7, #12]
 80083b4:	f014 fece 	bl	801d154 <memmove>
	  return __result - _Num;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	425b      	negs	r3, r3
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	4413      	add	r3, r2
	}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b086      	sub	sp, #24
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	613b      	str	r3, [r7, #16]
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d005      	beq.n	80083f6 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4619      	mov	r1, r3
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f014 fec9 	bl	801d188 <memset>
    }
 80083f6:	bf00      	nop
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	68b9      	ldr	r1, [r7, #8]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f942 	bl	80086b0 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 800842c:	4603      	mov	r3, r0
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	60f8      	str	r0, [r7, #12]
 800843e:	60b9      	str	r1, [r7, #8]
 8008440:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 f942 	bl	80086d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>
 800844c:	4603      	mov	r3, r0
    }
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	68b9      	ldr	r1, [r7, #8]
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 f94f 	bl	800870a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>
 800846c:	4603      	mov	r3, r0
    }
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <_ZStneISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f963 	bl	800874e <_ZSteqISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>
 8008488:	4603      	mov	r3, r0
 800848a:	f083 0301 	eor.w	r3, r3, #1
 800848e:	b2db      	uxtb	r3, r3
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEppEv>:
      operator++()
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	++_M_current;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fd fd69 	bl	8005f7a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>
	return *this;
 80084a8:	687b      	ldr	r3, [r7, #4]
      }
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEdeEv>:
      operator*() const
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fc fbfd 	bl	8004cbc <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 80084c2:	4603      	mov	r3, r0
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <_ZSt10_ConstructI8IMUFrameJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80084cc:	b5b0      	push	{r4, r5, r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 80084d6:	6838      	ldr	r0, [r7, #0]
 80084d8:	f7fc fb42 	bl	8004b60 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 80084dc:	4605      	mov	r5, r0
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4619      	mov	r1, r3
 80084e2:	2018      	movs	r0, #24
 80084e4:	f7f8 fcc1 	bl	8000e6a <_ZnwjPv>
 80084e8:	4603      	mov	r3, r0
 80084ea:	461c      	mov	r4, r3
 80084ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80084f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80084f8:	bf00      	nop
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bdb0      	pop	{r4, r5, r7, pc}

08008500 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>:
    __copy_move_a1(_II __first, _II __last,
 8008500:	b580      	push	{r7, lr}
 8008502:	b088      	sub	sp, #32
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	10db      	asrs	r3, r3, #3
 8008516:	4a22      	ldr	r2, [pc, #136]	; (80085a0 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xa0>)
 8008518:	fb02 f303 	mul.w	r3, r2, r3
 800851c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	dd34      	ble.n	800858e <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	10db      	asrs	r3, r3, #3
 8008530:	4a1b      	ldr	r2, [pc, #108]	; (80085a0 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xa0>)
 8008532:	fb02 f303 	mul.w	r3, r2, r3
 8008536:	61bb      	str	r3, [r7, #24]
 8008538:	f107 0218 	add.w	r2, r7, #24
 800853c:	f107 0314 	add.w	r3, r7, #20
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fa75 	bl	8006a32 <_ZSt3minIiERKT_S2_S2_>
 8008548:	4603      	mov	r3, r0
	  const difference_type __clen
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	4613      	mov	r3, r2
 8008552:	005b      	lsls	r3, r3, #1
 8008554:	4413      	add	r3, r2
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	461a      	mov	r2, r3
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	1899      	adds	r1, r3, r2
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	68b8      	ldr	r0, [r7, #8]
 8008566:	f000 f910 	bl	800878a <_ZSt14__copy_move_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>
	  __first += __clen;
 800856a:	69fa      	ldr	r2, [r7, #28]
 800856c:	4613      	mov	r3, r2
 800856e:	005b      	lsls	r3, r3, #1
 8008570:	4413      	add	r3, r2
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	461a      	mov	r2, r3
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	4413      	add	r3, r2
 800857a:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 800857c:	69f9      	ldr	r1, [r7, #28]
 800857e:	6838      	ldr	r0, [r7, #0]
 8008580:	f7fd fd2a 	bl	8005fd8 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	  __len -= __clen;
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 800858c:	e7c7      	b.n	800851e <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x1e>
      return __result;
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f7fb fbe9 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
    }
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	3720      	adds	r7, #32
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	aaaaaaab 	.word	0xaaaaaaab

080085a4 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	10db      	asrs	r3, r3, #3
 80085ba:	4a2c      	ldr	r2, [pc, #176]	; (800866c <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xc8>)
 80085bc:	fb02 f303 	mul.w	r3, r2, r3
 80085c0:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	dd49      	ble.n	800865c <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	10db      	asrs	r3, r3, #3
 80085d4:	4a25      	ldr	r2, [pc, #148]	; (800866c <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xc8>)
 80085d6:	fb02 f303 	mul.w	r3, r2, r3
 80085da:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10f      	bne.n	8008608 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 80085e8:	f7fc fb4d 	bl	8004c86 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 80085ec:	4603      	mov	r3, r0
 80085ee:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	3b04      	subs	r3, #4
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	4619      	mov	r1, r3
 80085fc:	460b      	mov	r3, r1
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	440b      	add	r3, r1
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	4413      	add	r3, r2
 8008606:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 8008608:	f107 0210 	add.w	r2, r7, #16
 800860c:	f107 0314 	add.w	r3, r7, #20
 8008610:	4611      	mov	r1, r2
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe fa0d 	bl	8006a32 <_ZSt3minIiERKT_S2_S2_>
 8008618:	4603      	mov	r3, r0
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	4613      	mov	r3, r2
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	4413      	add	r3, r2
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	425b      	negs	r3, r3
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	4413      	add	r3, r2
 800862e:	69fa      	ldr	r2, [r7, #28]
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	4618      	mov	r0, r3
 8008634:	f000 f8b9 	bl	80087aa <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>

	  __last -= __clen;
 8008638:	69ba      	ldr	r2, [r7, #24]
 800863a:	4613      	mov	r3, r2
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	4413      	add	r3, r2
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	425b      	negs	r3, r3
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	4413      	add	r3, r2
 8008648:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 800864a:	69b9      	ldr	r1, [r7, #24]
 800864c:	6838      	ldr	r0, [r7, #0]
 800864e:	f7ff f844 	bl	80076da <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EmIEi>
	  __len -= __clen;
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 800865a:	e7b2      	b.n	80085c2 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x1e>
	}

      return __result;
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7fb fb82 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
    }
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	3720      	adds	r7, #32
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	aaaaaaab 	.word	0xaaaaaaab

08008670 <_ZSt14__copy_move_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 f8a2 	bl	80087ca <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_>
 8008686:	4603      	mov	r3, r0
    }
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <_ZSt23__copy_move_backward_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 f8af 	bl	8008804 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_>
 80086a6:	4603      	mov	r3, r0
    }
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	68b9      	ldr	r1, [r7, #8]
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f8c1 	bl	8008848 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80086c6:	4603      	mov	r3, r0
    }
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	109b      	asrs	r3, r3, #2
 80086e4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d006      	beq.n	80086fa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	461a      	mov	r2, r3
 80086f2:	68f9      	ldr	r1, [r7, #12]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f014 fd2d 	bl	801d154 <memmove>
	  return __result + _Num;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	4413      	add	r3, r2
	}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800870a:	b580      	push	{r7, lr}
 800870c:	b086      	sub	sp, #24
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	109b      	asrs	r3, r3, #2
 800871e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	425b      	negs	r3, r3
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	18d0      	adds	r0, r2, r3
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	461a      	mov	r2, r3
 8008736:	68f9      	ldr	r1, [r7, #12]
 8008738:	f014 fd0c 	bl	801d154 <memmove>
	  return __result - _Num;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	425b      	negs	r3, r3
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	4413      	add	r3, r2
	}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <_ZSteqISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 800874e:	b580      	push	{r7, lr}
 8008750:	b08a      	sub	sp, #40	; 0x28
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8008758:	f107 0308 	add.w	r3, r7, #8
 800875c:	6879      	ldr	r1, [r7, #4]
 800875e:	4618      	mov	r0, r3
 8008760:	f000 f88c 	bl	800887c <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EE4baseEv>
 8008764:	f107 0318 	add.w	r3, r7, #24
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	4618      	mov	r0, r3
 800876c:	f000 f886 	bl	800887c <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EE4baseEv>
 8008770:	f107 0218 	add.w	r2, r7, #24
 8008774:	f107 0308 	add.w	r3, r7, #8
 8008778:	4611      	mov	r1, r2
 800877a:	4618      	mov	r0, r3
 800877c:	f7fb f9c7 	bl	8003b0e <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 8008780:	4603      	mov	r3, r0
 8008782:	4618      	mov	r0, r3
 8008784:	3728      	adds	r7, #40	; 0x28
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <_ZSt14__copy_move_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	60f8      	str	r0, [r7, #12]
 8008792:	60b9      	str	r1, [r7, #8]
 8008794:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 f87c 	bl	8008898 <_ZSt14__copy_move_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>
 80087a0:	4603      	mov	r3, r0
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 f87c 	bl	80088b8 <_ZSt23__copy_move_backward_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>
 80087c0:	4603      	mov	r3, r0
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b086      	sub	sp, #24
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	109b      	asrs	r3, r3, #2
 80087de:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d006      	beq.n	80087f4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	461a      	mov	r2, r3
 80087ec:	68f9      	ldr	r1, [r7, #12]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f014 fcb0 	bl	801d154 <memmove>
	  return __result + _Num;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	4413      	add	r3, r2
	}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	109b      	asrs	r3, r3, #2
 8008818:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00a      	beq.n	8008836 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	425b      	negs	r3, r3
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	18d0      	adds	r0, r2, r3
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	461a      	mov	r2, r3
 8008830:	68f9      	ldr	r1, [r7, #12]
 8008832:	f014 fc8f 	bl	801d154 <memmove>
	  return __result - _Num;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	425b      	negs	r3, r3
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	4413      	add	r3, r2
	}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	461a      	mov	r2, r3
 8008866:	68f9      	ldr	r1, [r7, #12]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f014 fc73 	bl	801d154 <memmove>
	  return __result + _Num;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	4413      	add	r3, r2
	}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EE4baseEv>:
      base() const
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7fb fa6c 	bl	8003d68 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <_ZSt14__copy_move_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f815 	bl	80088d8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>
 80088ae:	4603      	mov	r3, r0
    }
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <_ZSt23__copy_move_backward_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f82f 	bl	800892c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_>
 80088ce:	4603      	mov	r3, r0
    }
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	10db      	asrs	r3, r3, #3
 80088ec:	4a0e      	ldr	r2, [pc, #56]	; (8008928 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x50>)
 80088ee:	fb02 f303 	mul.w	r3, r2, r3
 80088f2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d009      	beq.n	800890e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	4613      	mov	r3, r2
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	4413      	add	r3, r2
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	461a      	mov	r2, r3
 8008906:	68f9      	ldr	r1, [r7, #12]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f014 fc23 	bl	801d154 <memmove>
	  return __result + _Num;
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	4613      	mov	r3, r2
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	4413      	add	r3, r2
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	461a      	mov	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4413      	add	r3, r2
	}
 800891e:	4618      	mov	r0, r3
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	aaaaaaab 	.word	0xaaaaaaab

0800892c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	10db      	asrs	r3, r3, #3
 8008940:	4a11      	ldr	r2, [pc, #68]	; (8008988 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_+0x5c>)
 8008942:	fb02 f303 	mul.w	r3, r2, r3
 8008946:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d010      	beq.n	8008970 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4613      	mov	r3, r2
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	4413      	add	r3, r2
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	425b      	negs	r3, r3
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	18d0      	adds	r0, r2, r3
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	4613      	mov	r3, r2
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	4413      	add	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	461a      	mov	r2, r3
 800896a:	68f9      	ldr	r1, [r7, #12]
 800896c:	f014 fbf2 	bl	801d154 <memmove>
	  return __result - _Num;
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4613      	mov	r3, r2
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	4413      	add	r3, r2
 8008978:	00db      	lsls	r3, r3, #3
 800897a:	425b      	negs	r3, r3
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	4413      	add	r3, r2
	}
 8008980:	4618      	mov	r0, r3
 8008982:	3718      	adds	r7, #24
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	aaaaaaab 	.word	0xaaaaaaab

0800898c <_Z41__static_initialization_and_destruction_0ii>:
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d107      	bne.n	80089ac <_Z41__static_initialization_and_destruction_0ii+0x20>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d102      	bne.n	80089ac <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 80089a6:	4809      	ldr	r0, [pc, #36]	; (80089cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80089a8:	f7f9 fb0e 	bl	8001fc8 <_ZN18MotherboardContextC1Ev>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d107      	bne.n	80089c2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d102      	bne.n	80089c2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80089bc:	4803      	ldr	r0, [pc, #12]	; (80089cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80089be:	f7f9 fb26 	bl	800200e <_ZN18MotherboardContextD1Ev>
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	240001d0 	.word	0x240001d0

080089d0 <_GLOBAL__sub_I_MotherboardInit>:
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80089d8:	2001      	movs	r0, #1
 80089da:	f7ff ffd7 	bl	800898c <_Z41__static_initialization_and_destruction_0ii>
 80089de:	bd80      	pop	{r7, pc}

080089e0 <_GLOBAL__sub_D_MotherboardInit>:
 80089e0:	b580      	push	{r7, lr}
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80089e8:	2000      	movs	r0, #0
 80089ea:	f7ff ffcf 	bl	800898c <_Z41__static_initialization_and_destruction_0ii>
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	607b      	str	r3, [r7, #4]
 80089fa:	4603      	mov	r3, r0
 80089fc:	73fb      	strb	r3, [r7, #15]
 80089fe:	4613      	mov	r3, r2
 8008a00:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d008      	beq.n	8008a1e <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 8008a0c:	89ba      	ldrh	r2, [r7, #12]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	7bf8      	ldrb	r0, [r7, #15]
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	f001 f925 	bl	8009c62 <bhy2_hif_get_regs>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	75fb      	strb	r3, [r7, #23]
 8008a1c:	e001      	b.n	8008a22 <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008a1e:	23ff      	movs	r3, #255	; 0xff
 8008a20:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008a22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 8008a2e:	b590      	push	{r4, r7, lr}
 8008a30:	b08f      	sub	sp, #60	; 0x3c
 8008a32:	af02      	add	r7, sp, #8
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <bhy2_get_and_process_fifo+0x1c>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d102      	bne.n	8008a50 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 8008a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a4e:	e11b      	b.n	8008c88 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 8008a56:	f06f 0305 	mvn.w	r3, #5
 8008a5a:	e115      	b.n	8008c88 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	2100      	movs	r1, #0
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f014 fb91 	bl	801d188 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 8008a66:	f107 0314 	add.w	r3, r7, #20
 8008a6a:	2214      	movs	r2, #20
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f014 fb8a 	bl	801d188 <memset>

    fifos.buffer = work_buffer;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8008a82:	4611      	mov	r1, r2
 8008a84:	4618      	mov	r0, r3
 8008a86:	f001 fa5f 	bl	8009f48 <bhy2_hif_get_interrupt_status>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 8008a90:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 8008a98:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008a9c:	e0f4      	b.n	8008c88 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008aa2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008aaa:	e042      	b.n	8008b32 <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8008aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ab0:	f003 0306 	and.w	r3, r3, #6
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d00e      	beq.n	8008ad6 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8008ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008abc:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	d008      	beq.n	8008ad6 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8008ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ac8:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8008acc:	2b06      	cmp	r3, #6
 8008ace:	d002      	beq.n	8008ad6 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d020      	beq.n	8008b18 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8008ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 8008ae0:	6a3a      	ldr	r2, [r7, #32]
 8008ae2:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8008ae4:	1ad1      	subs	r1, r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f107 0214 	add.w	r2, r7, #20
 8008aec:	f102 0408 	add.w	r4, r2, #8
 8008af0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	4623      	mov	r3, r4
 8008af8:	f001 fad7 	bl	800a0aa <bhy2_hif_get_wakeup_fifo>
 8008afc:	4603      	mov	r3, r0
 8008afe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 8008b02:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 8008b0a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008b0e:	e0bb      	b.n	8008c88 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b14:	4413      	add	r3, r2
 8008b16:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 8008b18:	f107 0314 	add.w	r3, r7, #20
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	2000      	movs	r0, #0
 8008b22:	f000 fbad 	bl	8009280 <parse_fifo>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <bhy2_get_and_process_fifo+0x112>
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <bhy2_get_and_process_fifo+0x11a>
 8008b40:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d0b1      	beq.n	8008aac <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008b4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008b54:	e042      	b.n	8008bdc <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8008b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b5a:	f003 0318 	and.w	r3, r3, #24
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d00e      	beq.n	8008b80 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8008b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b66:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8008b6a:	2b10      	cmp	r3, #16
 8008b6c:	d008      	beq.n	8008b80 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8008b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b72:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8008b76:	2b18      	cmp	r3, #24
 8008b78:	d002      	beq.n	8008b80 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d020      	beq.n	8008bc2 <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8008b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8008b8a:	6a3a      	ldr	r2, [r7, #32]
 8008b8c:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8008b8e:	1ad1      	subs	r1, r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f107 0214 	add.w	r2, r7, #20
 8008b96:	f102 0408 	add.w	r4, r2, #8
 8008b9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	4623      	mov	r3, r4
 8008ba2:	f001 fa98 	bl	800a0d6 <bhy2_hif_get_nonwakeup_fifo>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8008bac:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8008bb4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008bb8:	e066      	b.n	8008c88 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	4413      	add	r3, r2
 8008bc0:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 8008bc2:	f107 0314 	add.w	r3, r7, #20
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	2001      	movs	r0, #1
 8008bcc:	f000 fb58 	bl	8009280 <parse_fifo>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d102      	bne.n	8008bea <bhy2_get_and_process_fifo+0x1bc>
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <bhy2_get_and_process_fifo+0x1c4>
 8008bea:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0b1      	beq.n	8008b56 <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008bf6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008bfe:	e036      	b.n	8008c6e <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8008c00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d102      	bne.n	8008c12 <bhy2_get_and_process_fifo+0x1e4>
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d020      	beq.n	8008c54 <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8008c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8008c1c:	6a3a      	ldr	r2, [r7, #32]
 8008c1e:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8008c20:	1ad1      	subs	r1, r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f107 0214 	add.w	r2, r7, #20
 8008c28:	f102 0408 	add.w	r4, r2, #8
 8008c2c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	4623      	mov	r3, r4
 8008c34:	f001 fab0 	bl	800a198 <bhy2_hif_get_status_fifo_async>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8008c3e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8008c46:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008c4a:	e01d      	b.n	8008c88 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	4413      	add	r3, r2
 8008c52:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8008c54:	f107 0314 	add.w	r3, r7, #20
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	2002      	movs	r0, #2
 8008c5e:	f000 fb0f 	bl	8009280 <parse_fifo>
 8008c62:	4603      	mov	r3, r0
 8008c64:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d102      	bne.n	8008c7c <bhy2_get_and_process_fifo+0x24e>
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <bhy2_get_and_process_fifo+0x256>
 8008c7c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0bd      	beq.n	8008c00 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8008c84:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3734      	adds	r7, #52	; 0x34
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd90      	pop	{r4, r7, pc}

08008c90 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	ed87 0a02 	vstr	s0, [r7, #8]
 8008c9c:	6079      	str	r1, [r7, #4]
 8008c9e:	603a      	str	r2, [r7, #0]
 8008ca0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00a      	beq.n	8008cc2 <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	ed97 0a02 	vldr	s0, [r7, #8]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f001 fa84 	bl	800a1c4 <bhy2_hif_exec_sensor_conf_cmd>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	75fb      	strb	r3, [r7, #23]
 8008cc0:	e001      	b.n	8008cc6 <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008cc2:	23ff      	movs	r3, #255	; 0xff
 8008cc4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3718      	adds	r7, #24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d007      	beq.n	8008cf6 <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 f8e8 	bl	8009ec0 <bhy2_hif_get_product_id>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]
 8008cf4:	e001      	b.n	8008cfa <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008cf6:	23ff      	movs	r3, #255	; 0xff
 8008cf8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d007      	beq.n	8008d2a <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 f8de 	bl	8009ee0 <bhy2_hif_get_kernel_version>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]
 8008d28:	e001      	b.n	8008d2e <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008d2a:	23ff      	movs	r3, #255	; 0xff
 8008d2c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d007      	beq.n	8008d5e <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f001 f8e8 	bl	8009f28 <bhy2_hif_get_boot_status>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]
 8008d5c:	e001      	b.n	8008d62 <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008d5e:	23ff      	movs	r3, #255	; 0xff
 8008d60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b086      	sub	sp, #24
 8008d72:	af02      	add	r7, sp, #8
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00d      	beq.n	8008da2 <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	f107 0208 	add.w	r2, r7, #8
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	2220      	movs	r2, #32
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	f240 101f 	movw	r0, #287	; 0x11f
 8008d98:	f001 f80a 	bl	8009db0 <bhy2_hif_get_parameter>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]
 8008da0:	e001      	b.n	8008da6 <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008da2:	23ff      	movs	r3, #255	; 0xff
 8008da4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b086      	sub	sp, #24
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <bhy2_upload_firmware_to_ram+0x1c>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8008dce:	23ff      	movs	r3, #255	; 0xff
 8008dd0:	75fb      	strb	r3, [r7, #23]
 8008dd2:	e007      	b.n	8008de4 <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	68b9      	ldr	r1, [r7, #8]
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f001 f90d 	bl	8009ffa <bhy2_hif_upload_firmware_to_ram>
 8008de0:	4603      	mov	r3, r0
 8008de2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d102      	bne.n	8008e08 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8008e02:	23ff      	movs	r3, #255	; 0xff
 8008e04:	73fb      	strb	r3, [r7, #15]
 8008e06:	e005      	b.n	8008e14 <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f001 f932 	bl	800a074 <bhy2_hif_boot_program_ram>
 8008e10:	4603      	mov	r3, r0
 8008e12:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	6039      	str	r1, [r7, #0]
 8008e2a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d102      	bne.n	8008e3c <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8008e36:	23ff      	movs	r3, #255	; 0xff
 8008e38:	73fb      	strb	r3, [r7, #15]
 8008e3a:	e007      	b.n	8008e4c <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	1df9      	adds	r1, r7, #7
 8008e40:	2201      	movs	r2, #1
 8008e42:	2007      	movs	r0, #7
 8008e44:	f000 ff45 	bl	8009cd2 <bhy2_hif_set_regs>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d102      	bne.n	8008e72 <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8008e6c:	23ff      	movs	r3, #255	; 0xff
 8008e6e:	73fb      	strb	r3, [r7, #15]
 8008e70:	e007      	b.n	8008e82 <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2201      	movs	r2, #1
 8008e76:	6879      	ldr	r1, [r7, #4]
 8008e78:	2007      	movs	r0, #7
 8008e7a:	f000 fef2 	bl	8009c62 <bhy2_hif_get_regs>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d102      	bne.n	8008ea8 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8008ea2:	23ff      	movs	r3, #255	; 0xff
 8008ea4:	73fb      	strb	r3, [r7, #15]
 8008ea6:	e006      	b.n	8008eb6 <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 f84b 	bl	8009f48 <bhy2_hif_get_interrupt_status>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	4603      	mov	r3, r0
 8008eca:	6039      	str	r1, [r7, #0]
 8008ecc:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d102      	bne.n	8008ede <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8008ed8:	23ff      	movs	r3, #255	; 0xff
 8008eda:	73fb      	strb	r3, [r7, #15]
 8008edc:	e007      	b.n	8008eee <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	1df9      	adds	r1, r7, #7
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	2006      	movs	r0, #6
 8008ee6:	f000 fef4 	bl	8009cd2 <bhy2_hif_set_regs>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b084      	sub	sp, #16
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d102      	bne.n	8008f12 <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8008f0c:	23ff      	movs	r3, #255	; 0xff
 8008f0e:	73fb      	strb	r3, [r7, #15]
 8008f10:	e005      	b.n	8008f1e <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f001 f827 	bl	8009f68 <bhy2_hif_reset>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b08a      	sub	sp, #40	; 0x28
 8008f2e:	af04      	add	r7, sp, #16
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
 8008f34:	603b      	str	r3, [r7, #0]
 8008f36:	4603      	mov	r3, r0
 8008f38:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8008f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d014      	beq.n	8008f6e <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8008f44:	f640 1238 	movw	r2, #2360	; 0x938
 8008f48:	2100      	movs	r1, #0
 8008f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f4c:	f014 f91c 	bl	801d188 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8008f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f52:	7bf8      	ldrb	r0, [r7, #15]
 8008f54:	9302      	str	r3, [sp, #8]
 8008f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	f000 fe3e 	bl	8009be4 <bhy2_hif_init>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	75fb      	strb	r3, [r7, #23]
 8008f6c:	e001      	b.n	8008f72 <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008f6e:	23ff      	movs	r3, #255	; 0xff
 8008f70:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3718      	adds	r7, #24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b087      	sub	sp, #28
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <bhy2_register_fifo_parse_callback+0x20>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d102      	bne.n	8008fa4 <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8008f9e:	23ff      	movs	r3, #255	; 0xff
 8008fa0:	75fb      	strb	r3, [r7, #23]
 8008fa2:	e013      	b.n	8008fcc <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8008fa4:	7bfa      	ldrb	r2, [r7, #15]
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	00db      	lsls	r3, r3, #3
 8008fac:	4413      	add	r3, r2
 8008fae:	440b      	add	r3, r1
 8008fb0:	3318      	adds	r3, #24
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8008fb8:	7bfa      	ldrb	r2, [r7, #15]
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	4413      	add	r3, r2
 8008fc2:	440b      	add	r3, r1
 8008fc4:	3318      	adds	r3, #24
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8008fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	371c      	adds	r7, #28
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b092      	sub	sp, #72	; 0x48
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d103      	bne.n	8008ff2 <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8008fea:	23ff      	movs	r3, #255	; 0xff
 8008fec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008ff0:	e079      	b.n	80090e6 <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 8008ff2:	f107 0308 	add.w	r3, r7, #8
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff feb8 	bl	8008d6e <bhy2_get_virt_sensor_list>
 8008ffe:	4603      	mov	r3, r0
 8009000:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 8009004:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009008:	2b00      	cmp	r3, #0
 800900a:	d16c      	bne.n	80090e6 <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8009012:	2301      	movs	r3, #1
 8009014:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009018:	e041      	b.n	800909e <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 800901a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800901e:	08db      	lsrs	r3, r3, #3
 8009020:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8009024:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	2201      	movs	r2, #1
 800902e:	fa02 f303 	lsl.w	r3, r2, r3
 8009032:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 8009036:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800903a:	3348      	adds	r3, #72	; 0x48
 800903c:	443b      	add	r3, r7
 800903e:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8009042:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009046:	4013      	ands	r3, r2
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d022      	beq.n	8009094 <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009054:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009058:	4618      	mov	r0, r3
 800905a:	f001 f8e6 	bl	800a22a <bhy2_hif_get_sensor_info>
 800905e:	4603      	mov	r3, r0
 8009060:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8009064:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009068:	2b00      	cmp	r3, #0
 800906a:	d113      	bne.n	8009094 <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 800906c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009070:	2b00      	cmp	r3, #0
 8009072:	d103      	bne.n	800907c <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 8009074:	23f8      	movs	r3, #248	; 0xf8
 8009076:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 800907a:	e018      	b.n	80090ae <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 800907c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8009080:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8009084:	6879      	ldr	r1, [r7, #4]
 8009086:	4613      	mov	r3, r2
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	4413      	add	r3, r2
 800908c:	440b      	add	r3, r1
 800908e:	331c      	adds	r3, #28
 8009090:	4602      	mov	r2, r0
 8009092:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8009094:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009098:	3301      	adds	r3, #1
 800909a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800909e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80090a2:	2bf4      	cmp	r3, #244	; 0xf4
 80090a4:	d803      	bhi.n	80090ae <bhy2_update_virtual_sensor_list+0xd2>
 80090a6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0b5      	beq.n	800901a <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 80090ae:	23ff      	movs	r3, #255	; 0xff
 80090b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80090b4:	e013      	b.n	80090de <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 80090b6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80090ba:	3bf5      	subs	r3, #245	; 0xf5
 80090bc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80090c0:	490c      	ldr	r1, [pc, #48]	; (80090f4 <bhy2_update_virtual_sensor_list+0x118>)
 80090c2:	5cc8      	ldrb	r0, [r1, r3]
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	4613      	mov	r3, r2
 80090c8:	00db      	lsls	r3, r3, #3
 80090ca:	4413      	add	r3, r2
 80090cc:	440b      	add	r3, r1
 80090ce:	331c      	adds	r3, #28
 80090d0:	4602      	mov	r2, r0
 80090d2:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 80090d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80090d8:	3b01      	subs	r3, #1
 80090da:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80090de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80090e2:	2bf4      	cmp	r3, #244	; 0xf4
 80090e4:	d8e7      	bhi.n	80090b6 <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 80090e6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3748      	adds	r7, #72	; 0x48
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	08038e88 	.word	0x08038e88

080090f8 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <bhy2_get_error_value+0x1a>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d102      	bne.n	8009118 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 8009112:	23ff      	movs	r3, #255	; 0xff
 8009114:	73fb      	strb	r3, [r7, #15]
 8009116:	e007      	b.n	8009128 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2201      	movs	r2, #1
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	202e      	movs	r0, #46	; 0x2e
 8009120:	f7ff fc66 	bl	80089f0 <bhy2_get_regs>
 8009124:	4603      	mov	r3, r0
 8009126:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009128:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d04e      	beq.n	80091ea <get_callback_info+0xb6>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d04b      	beq.n	80091ea <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 8009152:	7bfa      	ldrb	r2, [r7, #15]
 8009154:	68b8      	ldr	r0, [r7, #8]
 8009156:	6879      	ldr	r1, [r7, #4]
 8009158:	4613      	mov	r3, r2
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	4413      	add	r3, r2
 800915e:	440b      	add	r3, r1
 8009160:	3318      	adds	r3, #24
 8009162:	4602      	mov	r2, r0
 8009164:	3304      	adds	r3, #4
 8009166:	6818      	ldr	r0, [r3, #0]
 8009168:	6859      	ldr	r1, [r3, #4]
 800916a:	6010      	str	r0, [r2, #0]
 800916c:	6051      	str	r1, [r2, #4]
 800916e:	7a1b      	ldrb	r3, [r3, #8]
 8009170:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	2bf4      	cmp	r3, #244	; 0xf4
 8009176:	d91b      	bls.n	80091b0 <get_callback_info+0x7c>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d117      	bne.n	80091b0 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	705a      	strb	r2, [r3, #1]
 8009186:	2200      	movs	r2, #0
 8009188:	709a      	strb	r2, [r3, #2]
 800918a:	2200      	movs	r2, #0
 800918c:	70da      	strb	r2, [r3, #3]
 800918e:	2200      	movs	r2, #0
 8009190:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	2200      	movs	r2, #0
 8009196:	715a      	strb	r2, [r3, #5]
 8009198:	2200      	movs	r2, #0
 800919a:	719a      	strb	r2, [r3, #6]
 800919c:	2200      	movs	r2, #0
 800919e:	71da      	strb	r2, [r3, #7]
 80091a0:	2200      	movs	r2, #0
 80091a2:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	3bf5      	subs	r3, #245	; 0xf5
 80091a8:	4a16      	ldr	r2, [pc, #88]	; (8009204 <get_callback_info+0xd0>)
 80091aa:	5cd2      	ldrb	r2, [r2, r3]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d11c      	bne.n	80091f0 <get_callback_info+0xbc>
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d118      	bne.n	80091f0 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2200      	movs	r2, #0
 80091c2:	705a      	strb	r2, [r3, #1]
 80091c4:	2200      	movs	r2, #0
 80091c6:	709a      	strb	r2, [r3, #2]
 80091c8:	2200      	movs	r2, #0
 80091ca:	70da      	strb	r2, [r3, #3]
 80091cc:	2200      	movs	r2, #0
 80091ce:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2200      	movs	r2, #0
 80091d4:	715a      	strb	r2, [r3, #5]
 80091d6:	2200      	movs	r2, #0
 80091d8:	719a      	strb	r2, [r3, #6]
 80091da:	2200      	movs	r2, #0
 80091dc:	71da      	strb	r2, [r3, #7]
 80091de:	2200      	movs	r2, #0
 80091e0:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2201      	movs	r2, #1
 80091e6:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 80091e8:	e002      	b.n	80091f0 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80091ea:	23ff      	movs	r3, #255	; 0xff
 80091ec:	75fb      	strb	r3, [r7, #23]
 80091ee:	e000      	b.n	80091f2 <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 80091f0:	bf00      	nop
    }

    return rslt;
 80091f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	371c      	adds	r7, #28
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	08038e88 	.word	0x08038e88

08009208 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	460b      	mov	r3, r1
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	7afb      	ldrb	r3, [r7, #11]
 800921c:	441a      	add	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	429a      	cmp	r2, r3
 8009224:	d803      	bhi.n	800922e <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	701a      	strb	r2, [r3, #0]
 800922c:	e002      	b.n	8009234 <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 8009242:	b480      	push	{r7}
 8009244:	b087      	sub	sp, #28
 8009246:	af00      	add	r7, sp, #0
 8009248:	4603      	mov	r3, r0
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	607a      	str	r2, [r7, #4]
 800924e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 8009254:	7bfb      	ldrb	r3, [r7, #15]
 8009256:	2b02      	cmp	r3, #2
 8009258:	d808      	bhi.n	800926c <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 800925a:	7bfb      	ldrb	r3, [r7, #15]
 800925c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	441a      	add	r2, r3
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	e001      	b.n	8009270 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 800926c:	23f9      	movs	r3, #249	; 0xf9
 800926e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009270:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009274:	4618      	mov	r0, r3
 8009276:	371c      	adds	r7, #28
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	b099      	sub	sp, #100	; 0x64
 8009286:	af00      	add	r7, sp, #0
 8009288:	4603      	mov	r3, r0
 800928a:	62b9      	str	r1, [r7, #40]	; 0x28
 800928c:	627a      	str	r2, [r7, #36]	; 0x24
 800928e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 800929e:	2300      	movs	r3, #0
 80092a0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 80092aa:	e16a      	b.n	8009582 <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	691a      	ldr	r2, [r3, #16]
 80092b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092b8:	4413      	add	r3, r2
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 80092c0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80092c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7ff ffb9 	bl	8009242 <get_time_stamp>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 80092d6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <parse_fifo+0x64>
        {
            return rslt;
 80092de:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80092e2:	e191      	b.n	8009608 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 80092e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d025      	beq.n	8009338 <parse_fifo+0xb8>
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f2c0 80f6 	blt.w	80094de <parse_fifo+0x25e>
 80092f2:	2bff      	cmp	r3, #255	; 0xff
 80092f4:	f300 80f3 	bgt.w	80094de <parse_fifo+0x25e>
 80092f8:	2bf5      	cmp	r3, #245	; 0xf5
 80092fa:	f2c0 80f0 	blt.w	80094de <parse_fifo+0x25e>
 80092fe:	3bf5      	subs	r3, #245	; 0xf5
 8009300:	2b0a      	cmp	r3, #10
 8009302:	f200 80ec 	bhi.w	80094de <parse_fifo+0x25e>
 8009306:	a201      	add	r2, pc, #4	; (adr r2, 800930c <parse_fifo+0x8c>)
 8009308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930c:	08009345 	.word	0x08009345
 8009310:	080093ad 	.word	0x080093ad
 8009314:	0800942b 	.word	0x0800942b
 8009318:	080094df 	.word	0x080094df
 800931c:	080094df 	.word	0x080094df
 8009320:	080094df 	.word	0x080094df
 8009324:	08009345 	.word	0x08009345
 8009328:	080093ad 	.word	0x080093ad
 800932c:	0800942b 	.word	0x0800942b
 8009330:	080094df 	.word	0x080094df
 8009334:	08009339 	.word	0x08009339
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	1c5a      	adds	r2, r3, #1
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	601a      	str	r2, [r3, #0]
                break;
 8009342:	e11e      	b.n	8009582 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 8009344:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009348:	461a      	mov	r2, r3
 800934a:	2102      	movs	r1, #2
 800934c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800934e:	f7ff ff5b 	bl	8009208 <get_buffer_status>
 8009352:	4603      	mov	r3, r0
 8009354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8009358:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <parse_fifo+0xe6>
                {
                    return rslt;
 8009360:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009364:	e150      	b.n	8009608 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8009366:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800936a:	2b00      	cmp	r3, #0
 800936c:	d000      	beq.n	8009370 <parse_fifo+0xf0>
                {
                    break;
 800936e:	e108      	b.n	8009582 <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 8009370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009372:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	691a      	ldr	r2, [r3, #16]
 800937a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800937c:	3301      	adds	r3, #1
 800937e:	4413      	add	r3, r2
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2200      	movs	r2, #0
 8009386:	469a      	mov	sl, r3
 8009388:	4693      	mov	fp, r2
 800938a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800938c:	eb10 020a 	adds.w	r2, r0, sl
 8009390:	61ba      	str	r2, [r7, #24]
 8009392:	eb41 020b 	adc.w	r2, r1, fp
 8009396:	61fa      	str	r2, [r7, #28]
 8009398:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800939c:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	1c9a      	adds	r2, r3, #2
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	601a      	str	r2, [r3, #0]
                break;
 80093aa:	e0ea      	b.n	8009582 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 80093ac:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80093b0:	461a      	mov	r2, r3
 80093b2:	2103      	movs	r1, #3
 80093b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093b6:	f7ff ff27 	bl	8009208 <get_buffer_status>
 80093ba:	4603      	mov	r3, r0
 80093bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80093c0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <parse_fifo+0x14e>
                {
                    return rslt;
 80093c8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80093cc:	e11c      	b.n	8009608 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80093ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d000      	beq.n	80093d8 <parse_fifo+0x158>
                {
                    break;
 80093d6:	e0d4      	b.n	8009582 <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 80093d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e0:	691a      	ldr	r2, [r3, #16]
 80093e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093e4:	3301      	adds	r3, #1
 80093e6:	4413      	add	r3, r2
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	b21c      	sxth	r4, r3
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	691a      	ldr	r2, [r3, #16]
 80093f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093f2:	3302      	adds	r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	021b      	lsls	r3, r3, #8
 80093fa:	b21b      	sxth	r3, r3
 80093fc:	4323      	orrs	r3, r4
 80093fe:	b21b      	sxth	r3, r3
 8009400:	b29b      	uxth	r3, r3
 8009402:	b29b      	uxth	r3, r3
 8009404:	2200      	movs	r2, #0
 8009406:	461d      	mov	r5, r3
 8009408:	4616      	mov	r6, r2
 800940a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800940c:	1942      	adds	r2, r0, r5
 800940e:	613a      	str	r2, [r7, #16]
 8009410:	eb41 0206 	adc.w	r2, r1, r6
 8009414:	617a      	str	r2, [r7, #20]
 8009416:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800941a:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	1cda      	adds	r2, r3, #3
 8009424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009426:	601a      	str	r2, [r3, #0]
                break;
 8009428:	e0ab      	b.n	8009582 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 800942a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800942e:	461a      	mov	r2, r3
 8009430:	2106      	movs	r1, #6
 8009432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009434:	f7ff fee8 	bl	8009208 <get_buffer_status>
 8009438:	4603      	mov	r3, r0
 800943a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 800943e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009442:	2b00      	cmp	r3, #0
 8009444:	d002      	beq.n	800944c <parse_fifo+0x1cc>
                {
                    return rslt;
 8009446:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800944a:	e0dd      	b.n	8009608 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 800944c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009450:	2b00      	cmp	r3, #0
 8009452:	d000      	beq.n	8009456 <parse_fifo+0x1d6>
                {
                    break;
 8009454:	e095      	b.n	8009582 <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 8009456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009458:	691a      	ldr	r2, [r3, #16]
 800945a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800945c:	3301      	adds	r3, #1
 800945e:	4413      	add	r3, r2
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	4619      	mov	r1, r3
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	691a      	ldr	r2, [r3, #16]
 8009468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800946a:	3302      	adds	r3, #2
 800946c:	4413      	add	r3, r2
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	021b      	lsls	r3, r3, #8
 8009472:	4319      	orrs	r1, r3
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	691a      	ldr	r2, [r3, #16]
 8009478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800947a:	3303      	adds	r3, #3
 800947c:	4413      	add	r3, r2
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	041b      	lsls	r3, r3, #16
 8009482:	4319      	orrs	r1, r3
 8009484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009486:	691a      	ldr	r2, [r3, #16]
 8009488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800948a:	3304      	adds	r3, #4
 800948c:	4413      	add	r3, r2
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	061b      	lsls	r3, r3, #24
 8009492:	430b      	orrs	r3, r1
 8009494:	2200      	movs	r2, #0
 8009496:	4698      	mov	r8, r3
 8009498:	4691      	mov	r9, r2
 800949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949c:	691a      	ldr	r2, [r3, #16]
 800949e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094a0:	3305      	adds	r3, #5
 80094a2:	4413      	add	r3, r2
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2200      	movs	r2, #0
 80094aa:	60bb      	str	r3, [r7, #8]
 80094ac:	60fa      	str	r2, [r7, #12]
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	f04f 0300 	mov.w	r3, #0
 80094b6:	68b9      	ldr	r1, [r7, #8]
 80094b8:	000b      	movs	r3, r1
 80094ba:	2200      	movs	r2, #0
 80094bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094be:	ea48 0002 	orr.w	r0, r8, r2
 80094c2:	6038      	str	r0, [r7, #0]
 80094c4:	ea49 0303 	orr.w	r3, r9, r3
 80094c8:	607b      	str	r3, [r7, #4]
 80094ca:	e9d7 3400 	ldrd	r3, r4, [r7]
 80094ce:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	1d9a      	adds	r2, r3, #6
 80094d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094da:	601a      	str	r2, [r3, #0]
                break;
 80094dc:	e051      	b.n	8009582 <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 80094de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80094e2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80094e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7ff fe23 	bl	8009134 <get_callback_info>
 80094ee:	4603      	mov	r3, r0
 80094f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 80094f4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d002      	beq.n	8009502 <parse_fifo+0x282>
                {
                    return rslt;
 80094fc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009500:	e082      	b.n	8009608 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 8009502:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 8009506:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800950a:	461a      	mov	r2, r3
 800950c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800950e:	f7ff fe7b 	bl	8009208 <get_buffer_status>
 8009512:	4603      	mov	r3, r0
 8009514:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8009518:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <parse_fifo+0x2a6>
                {
                    return rslt;
 8009520:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009524:	e070      	b.n	8009608 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8009526:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800952a:	2b00      	cmp	r3, #0
 800952c:	d000      	beq.n	8009530 <parse_fifo+0x2b0>
                {
                    break;
 800952e:	e028      	b.n	8009582 <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 8009530:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 8009534:	2b00      	cmp	r3, #0
 8009536:	d01c      	beq.n	8009572 <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	691a      	ldr	r2, [r3, #16]
 800953c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800953e:	3301      	adds	r3, #1
 8009540:	4413      	add	r3, r2
 8009542:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 8009544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009548:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 800954c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800954e:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 8009550:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009554:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 8009558:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800955c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 8009560:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 8009564:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 8009568:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800956c:	4611      	mov	r1, r2
 800956e:	4618      	mov	r0, r3
 8009570:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800957a:	441a      	add	r2, r3
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	601a      	str	r2, [r3, #0]
                break;
 8009580:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8009582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	429a      	cmp	r2, r3
 800958c:	d204      	bcs.n	8009598 <parse_fifo+0x318>
 800958e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009592:	2b00      	cmp	r3, #0
 8009594:	f43f ae8a 	beq.w	80092ac <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d031      	beq.n	8009604 <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	685a      	ldr	r2, [r3, #4]
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d202      	bcs.n	80095b2 <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 80095ac:	f06f 0301 	mvn.w	r3, #1
 80095b0:	e02a      	b.n	8009608 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	1ad2      	subs	r2, r2, r3
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d01d      	beq.n	8009604 <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 80095c8:	2300      	movs	r3, #0
 80095ca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80095ce:	e013      	b.n	80095f8 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	691a      	ldr	r2, [r3, #16]
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	6819      	ldr	r1, [r3, #0]
 80095d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80095dc:	440b      	add	r3, r1
 80095de:	441a      	add	r2, r3
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	6919      	ldr	r1, [r3, #16]
 80095e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80095e8:	440b      	add	r3, r1
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 80095ee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80095f2:	3301      	adds	r3, #1
 80095f4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80095f8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d3e5      	bcc.n	80095d0 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 8009604:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009608:	4618      	mov	r0, r3
 800960a:	3764      	adds	r7, #100	; 0x64
 800960c:	46bd      	mov	sp, r7
 800960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009612:	bf00      	nop

08009614 <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 8009614:	b590      	push	{r4, r7, lr}
 8009616:	b0cf      	sub	sp, #316	; 0x13c
 8009618:	af00      	add	r7, sp, #0
 800961a:	4604      	mov	r4, r0
 800961c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009620:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8009624:	6001      	str	r1, [r0, #0]
 8009626:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800962a:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 800962e:	600a      	str	r2, [r1, #0]
 8009630:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009634:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8009638:	6013      	str	r3, [r2, #0]
 800963a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800963e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009642:	4622      	mov	r2, r4
 8009644:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 800964c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 81af 	beq.w	80099b4 <bhy2_hif_exec_cmd_generic+0x3a0>
 8009656:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800965a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d007      	beq.n	8009674 <bhy2_hif_exec_cmd_generic+0x60>
 8009664:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 81a0 	beq.w	80099b4 <bhy2_hif_exec_cmd_generic+0x3a0>
 8009674:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009678:	2b00      	cmp	r3, #0
 800967a:	d007      	beq.n	800968c <bhy2_hif_exec_cmd_generic+0x78>
 800967c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009680:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 8194 	beq.w	80099b4 <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 800968c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 8188 	beq.w	80099a8 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 8009698:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800969c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80096a0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4413      	add	r3, r2
 80096a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 80096ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d007      	beq.n	80096c4 <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 80096b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80096b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096bc:	4413      	add	r3, r2
 80096be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80096c2:	e003      	b.n	80096cc <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 80096c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 80096cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80096d0:	f003 0303 	and.w	r3, r3, #3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d006      	beq.n	80096e6 <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 80096d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80096dc:	089b      	lsrs	r3, r3, #2
 80096de:	3301      	adds	r3, #1
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 80096e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096f6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80096fa:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 80096fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009700:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	0a1b      	lsrs	r3, r3, #8
 8009708:	b29b      	uxth	r3, r3
 800970a:	b2da      	uxtb	r2, r3
 800970c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009710:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009714:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 8009716:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800971a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	2b02      	cmp	r3, #2
 8009722:	d113      	bne.n	800974c <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 8009724:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009728:	089b      	lsrs	r3, r3, #2
 800972a:	b2da      	uxtb	r2, r3
 800972c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009730:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009734:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 8009736:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800973a:	089b      	lsrs	r3, r3, #2
 800973c:	0a1b      	lsrs	r3, r3, #8
 800973e:	b2da      	uxtb	r2, r3
 8009740:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009744:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009748:	70da      	strb	r2, [r3, #3]
 800974a:	e010      	b.n	800976e <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 800974c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009750:	b2da      	uxtb	r2, r3
 8009752:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009756:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800975a:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 800975c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009760:	0a1b      	lsrs	r3, r3, #8
 8009762:	b2da      	uxtb	r2, r3
 8009764:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009768:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800976c:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 800976e:	2304      	movs	r3, #4
 8009770:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 8009774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009778:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 800977c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009780:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009784:	4413      	add	r3, r2
 8009786:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 800978a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800978e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 8009792:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800979c:	429a      	cmp	r2, r3
 800979e:	f240 80f9 	bls.w	8009994 <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 80097a2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 80097ac:	e0f2      	b.n	8009994 <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 80097ae:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80097b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80097b6:	4413      	add	r3, r2
 80097b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80097bc:	429a      	cmp	r2, r3
 80097be:	d20b      	bcs.n	80097d8 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 80097c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 80097c8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80097cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80097d6:	e020      	b.n	800981a <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 80097d8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80097dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80097e0:	4413      	add	r3, r2
 80097e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 80097e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80097ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 80097ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097f2:	f003 0303 	and.w	r3, r3, #3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d006      	beq.n	8009808 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 80097fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097fe:	089b      	lsrs	r3, r3, #2
 8009800:	3301      	adds	r3, #1
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 8009808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800980c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009810:	d903      	bls.n	800981a <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 8009812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009816:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 800981a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800981e:	2b00      	cmp	r3, #0
 8009820:	d07e      	beq.n	8009920 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 8009822:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009826:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009830:	4413      	add	r3, r2
 8009832:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009836:	429a      	cmp	r2, r3
 8009838:	d315      	bcc.n	8009866 <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 800983a:	f107 0214 	add.w	r2, r7, #20
 800983e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009842:	18d0      	adds	r0, r2, r3
 8009844:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009848:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009852:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8009856:	6812      	ldr	r2, [r2, #0]
 8009858:	4413      	add	r3, r2
 800985a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800985e:	4619      	mov	r1, r3
 8009860:	f013 fc6a 	bl	801d138 <memcpy>
 8009864:	e05c      	b.n	8009920 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 8009866:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800986a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800986e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	429a      	cmp	r2, r3
 8009876:	d93b      	bls.n	80098f0 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 8009878:	f107 0214 	add.w	r2, r7, #20
 800987c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009880:	18d0      	adds	r0, r2, r3
 8009882:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009886:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009890:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8009894:	6812      	ldr	r2, [r2, #0]
 8009896:	18d1      	adds	r1, r2, r3
 8009898:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800989c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80098a0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	461a      	mov	r2, r3
 80098aa:	f013 fc45 	bl	801d138 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 80098ae:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80098b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80098b6:	441a      	add	r2, r3
 80098b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	f107 0214 	add.w	r2, r7, #20
 80098c8:	18d0      	adds	r0, r2, r3
 80098ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80098d8:	1ad2      	subs	r2, r2, r3
 80098da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098de:	441a      	add	r2, r3
 80098e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098e8:	6819      	ldr	r1, [r3, #0]
 80098ea:	f013 fc25 	bl	801d138 <memcpy>
 80098ee:	e017      	b.n	8009920 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 80098f0:	f107 0214 	add.w	r2, r7, #20
 80098f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80098f8:	18d0      	adds	r0, r2, r3
 80098fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800990e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009912:	6812      	ldr	r2, [r2, #0]
 8009914:	4413      	add	r3, r2
 8009916:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800991a:	4619      	mov	r1, r3
 800991c:	f013 fc0c 	bl	801d138 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8009920:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009924:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009928:	4413      	add	r3, r2
 800992a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800992e:	429a      	cmp	r2, r3
 8009930:	d012      	beq.n	8009958 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 8009932:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009936:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800993a:	4413      	add	r3, r2
 800993c:	f107 0214 	add.w	r2, r7, #20
 8009940:	18d0      	adds	r0, r2, r3
 8009942:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009946:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800994a:	4413      	add	r3, r2
 800994c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009950:	461a      	mov	r2, r3
 8009952:	2100      	movs	r1, #0
 8009954:	f013 fc18 	bl	801d188 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 8009958:	f107 0114 	add.w	r1, r7, #20
 800995c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009960:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009964:	2000      	movs	r0, #0
 8009966:	f000 f9b4 	bl	8009cd2 <bhy2_hif_set_regs>
 800996a:	4603      	mov	r3, r0
 800996c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 8009970:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8009974:	2b00      	cmp	r3, #0
 8009976:	d11b      	bne.n	80099b0 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 800997e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009982:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 800998c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009990:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8009994:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00f      	beq.n	80099bc <bhy2_hif_exec_cmd_generic+0x3a8>
 800999c:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f43f af04 	beq.w	80097ae <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 80099a6:	e009      	b.n	80099bc <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 80099a8:	23fe      	movs	r3, #254	; 0xfe
 80099aa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 80099ae:	e005      	b.n	80099bc <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 80099b0:	bf00      	nop
        if (hif->read_write_len != 0)
 80099b2:	e003      	b.n	80099bc <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80099b4:	23ff      	movs	r3, #255	; 0xff
 80099b6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80099ba:	e000      	b.n	80099be <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 80099bc:	bf00      	nop
    }

    return rslt;
 80099be:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd90      	pop	{r4, r7, pc}

080099cc <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 80099d4:	2300      	movs	r3, #0
 80099d6:	81fb      	strh	r3, [r7, #14]
 80099d8:	e027      	b.n	8009a2a <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 80099da:	f107 030c 	add.w	r3, r7, #12
 80099de:	6879      	ldr	r1, [r7, #4]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fab1 	bl	8009f48 <bhy2_hif_get_interrupt_status>
 80099e6:	4603      	mov	r3, r0
 80099e8:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 80099ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d115      	bne.n	8009a1e <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 80099f2:	7b3b      	ldrb	r3, [r7, #12]
 80099f4:	f003 0320 	and.w	r3, r3, #32
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	737b      	strb	r3, [r7, #13]
                break;
 8009a00:	e017      	b.n	8009a32 <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	f242 7010 	movw	r0, #10000	; 0x2710
 8009a08:	f000 f99b 	bl	8009d42 <bhy2_hif_delay_us>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8009a10:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d005      	beq.n	8009a24 <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 8009a18:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a1c:	e00b      	b.n	8009a36 <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 8009a1e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a22:	e008      	b.n	8009a36 <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8009a24:	89fb      	ldrh	r3, [r7, #14]
 8009a26:	3301      	adds	r3, #1
 8009a28:	81fb      	strh	r3, [r7, #14]
 8009a2a:	89fb      	ldrh	r3, [r7, #14]
 8009a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a30:	d3d3      	bcc.n	80099da <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8009a32:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8009a46:	2300      	movs	r3, #0
 8009a48:	81fb      	strh	r3, [r7, #14]
 8009a4a:	e02f      	b.n	8009aac <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 8009a4c:	6879      	ldr	r1, [r7, #4]
 8009a4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009a52:	f000 f976 	bl	8009d42 <bhy2_hif_delay_us>
 8009a56:	4603      	mov	r3, r0
 8009a58:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8009a5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	da02      	bge.n	8009a68 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 8009a62:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a66:	e02d      	b.n	8009ac4 <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 8009a68:	f107 010c 	add.w	r1, r7, #12
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	2025      	movs	r0, #37	; 0x25
 8009a72:	f000 f8f6 	bl	8009c62 <bhy2_hif_get_regs>
 8009a76:	4603      	mov	r3, r0
 8009a78:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8009a7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	da02      	bge.n	8009a88 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 8009a82:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a86:	e01d      	b.n	8009ac4 <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8009a88:	7b3b      	ldrb	r3, [r7, #12]
 8009a8a:	f003 0310 	and.w	r3, r3, #16
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d009      	beq.n	8009aa6 <bhy2_hif_check_boot_status_ram+0x68>
 8009a92:	7b3b      	ldrb	r3, [r7, #12]
 8009a94:	f003 0320 	and.w	r3, r3, #32
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d004      	beq.n	8009aa6 <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 8009a9c:	7b3b      	ldrb	r3, [r7, #12]
 8009a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d006      	beq.n	8009ab4 <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8009aa6:	89fb      	ldrh	r3, [r7, #14]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	81fb      	strh	r3, [r7, #14]
 8009aac:	89fb      	ldrh	r3, [r7, #14]
 8009aae:	2b63      	cmp	r3, #99	; 0x63
 8009ab0:	d9cc      	bls.n	8009a4c <bhy2_hif_check_boot_status_ram+0xe>
 8009ab2:	e000      	b.n	8009ab6 <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 8009ab4:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 8009ab6:	89fb      	ldrh	r3, [r7, #14]
 8009ab8:	2b64      	cmp	r3, #100	; 0x64
 8009aba:	d102      	bne.n	8009ac2 <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 8009abc:	f06f 0304 	mvn.w	r3, #4
 8009ac0:	e000      	b.n	8009ac4 <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08a      	sub	sp, #40	; 0x28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	607a      	str	r2, [r7, #4]
 8009ad6:	603b      	str	r3, [r7, #0]
 8009ad8:	4603      	mov	r3, r0
 8009ada:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 8009ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d072      	beq.n	8009bce <bhy2_hif_get_fifo+0x102>
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d06f      	beq.n	8009bce <bhy2_hif_get_fifo+0x102>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d06c      	beq.n	8009bce <bhy2_hif_get_fifo+0x102>
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d069      	beq.n	8009bce <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 8009afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8009b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d114      	bne.n	8009b32 <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 8009b08:	f107 0114 	add.w	r1, r7, #20
 8009b0c:	7bf8      	ldrb	r0, [r7, #15]
 8009b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b10:	2202      	movs	r2, #2
 8009b12:	f000 f8a6 	bl	8009c62 <bhy2_hif_get_regs>
 8009b16:	4603      	mov	r3, r0
 8009b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 8009b1c:	7d3b      	ldrb	r3, [r7, #20]
 8009b1e:	b21a      	sxth	r2, r3
 8009b20:	7d7b      	ldrb	r3, [r7, #21]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	b21b      	sxth	r3, r3
 8009b26:	4313      	orrs	r3, r2
 8009b28:	b21b      	sxth	r3, r3
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d04d      	beq.n	8009bd6 <bhy2_hif_get_fifo+0x10a>
 8009b3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d149      	bne.n	8009bd6 <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d203      	bcs.n	8009b54 <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	e003      	b.n	8009b5c <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 8009b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	623b      	str	r3, [r7, #32]
            offset = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8009b66:	e016      	b.n	8009b96 <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	18d1      	adds	r1, r2, r3
 8009b6e:	7bf8      	ldrb	r0, [r7, #15]
 8009b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b72:	69ba      	ldr	r2, [r7, #24]
 8009b74:	f000 f875 	bl	8009c62 <bhy2_hif_get_regs>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 8009b7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10c      	bne.n	8009ba0 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 8009b86:	6a3a      	ldr	r2, [r7, #32]
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	4413      	add	r3, r2
 8009b94:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8009b96:	6a3a      	ldr	r2, [r7, #32]
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d8e4      	bhi.n	8009b68 <bhy2_hif_get_fifo+0x9c>
 8009b9e:	e000      	b.n	8009ba2 <bhy2_hif_get_fifo+0xd6>
                    break;
 8009ba0:	bf00      	nop
            }

            if (read_len != 0)
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00a      	beq.n	8009bbe <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	18d1      	adds	r1, r2, r3
 8009bae:	7bf8      	ldrb	r0, [r7, #15]
 8009bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb2:	6a3a      	ldr	r2, [r7, #32]
 8009bb4:	f000 f855 	bl	8009c62 <bhy2_hif_get_regs>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	1ad2      	subs	r2, r2, r3
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bca:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009bcc:	e003      	b.n	8009bd6 <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009bce:	23ff      	movs	r3, #255	; 0xff
 8009bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009bd4:	e000      	b.n	8009bd8 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009bd6:	bf00      	nop
    }

    return rslt;
 8009bd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3728      	adds	r7, #40	; 0x28
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b087      	sub	sp, #28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60b9      	str	r1, [r7, #8]
 8009bec:	607a      	str	r2, [r7, #4]
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 8009bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d027      	beq.n	8009c4e <bhy2_hif_init+0x6a>
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d024      	beq.n	8009c4e <bhy2_hif_init+0x6a>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d021      	beq.n	8009c4e <bhy2_hif_init+0x6a>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01e      	beq.n	8009c4e <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8009c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8009c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8009c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c26:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	7bfa      	ldrb	r2, [r7, #15]
 8009c2c:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	f003 0303 	and.w	r3, r3, #3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d006      	beq.n	8009c46 <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	089b      	lsrs	r3, r3, #2
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	009a      	lsls	r2, r3, #2
 8009c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c42:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8009c44:	e005      	b.n	8009c52 <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	6a3a      	ldr	r2, [r7, #32]
 8009c4a:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8009c4c:	e001      	b.n	8009c52 <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009c4e:	23ff      	movs	r3, #255	; 0xff
 8009c50:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	371c      	adds	r7, #28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009c62:	b590      	push	{r4, r7, lr}
 8009c64:	b087      	sub	sp, #28
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
 8009c6c:	603b      	str	r3, [r7, #0]
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d022      	beq.n	8009cc2 <bhy2_hif_get_regs+0x60>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d01e      	beq.n	8009cc2 <bhy2_hif_get_regs+0x60>
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d01b      	beq.n	8009cc2 <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	7b1b      	ldrb	r3, [r3, #12]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d103      	bne.n	8009c9a <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c98:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	681c      	ldr	r4, [r3, #0]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	7bf8      	ldrb	r0, [r7, #15]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	68b9      	ldr	r1, [r7, #8]
 8009ca8:	47a0      	blx	r4
 8009caa:	4603      	mov	r3, r0
 8009cac:	461a      	mov	r2, r3
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d004      	beq.n	8009cc6 <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8009cbc:	23fd      	movs	r3, #253	; 0xfd
 8009cbe:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009cc0:	e001      	b.n	8009cc6 <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009cc2:	23ff      	movs	r3, #255	; 0xff
 8009cc4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd90      	pop	{r4, r7, pc}

08009cd2 <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009cd2:	b590      	push	{r4, r7, lr}
 8009cd4:	b087      	sub	sp, #28
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	603b      	str	r3, [r7, #0]
 8009cde:	4603      	mov	r3, r0
 8009ce0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d022      	beq.n	8009d32 <bhy2_hif_set_regs+0x60>
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d01e      	beq.n	8009d32 <bhy2_hif_set_regs+0x60>
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d01b      	beq.n	8009d32 <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	7b1b      	ldrb	r3, [r3, #12]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d103      	bne.n	8009d0a <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d08:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	685c      	ldr	r4, [r3, #4]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	7bf8      	ldrb	r0, [r7, #15]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	47a0      	blx	r4
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d004      	beq.n	8009d36 <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8009d2c:	23fd      	movs	r3, #253	; 0xfd
 8009d2e:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009d30:	e001      	b.n	8009d36 <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009d32:	23ff      	movs	r3, #255	; 0xff
 8009d34:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	371c      	adds	r7, #28
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd90      	pop	{r4, r7, pc}

08009d42 <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00b      	beq.n	8009d6e <bhy2_hif_delay_us+0x2c>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d007      	beq.n	8009d6e <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	6912      	ldr	r2, [r2, #16]
 8009d66:	4611      	mov	r1, r2
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	4798      	blx	r3
 8009d6c:	e001      	b.n	8009d72 <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009d6e:	23ff      	movs	r3, #255	; 0xff
 8009d70:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b088      	sub	sp, #32
 8009d82:	af04      	add	r7, sp, #16
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	603b      	str	r3, [r7, #0]
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8009d8e:	89f8      	ldrh	r0, [r7, #14]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	9302      	str	r3, [sp, #8]
 8009d94:	2300      	movs	r3, #0
 8009d96:	9301      	str	r3, [sp, #4]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	68b9      	ldr	r1, [r7, #8]
 8009da2:	f7ff fc37 	bl	8009614 <bhy2_hif_exec_cmd_generic>
 8009da6:	4603      	mov	r3, r0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af02      	add	r7, sp, #8
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	607a      	str	r2, [r7, #4]
 8009dba:	603b      	str	r3, [r7, #0]
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d06e      	beq.n	8009eac <bhy2_hif_get_parameter+0xfc>
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d06b      	beq.n	8009eac <bhy2_hif_get_parameter+0xfc>
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d068      	beq.n	8009eac <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009de0:	f107 0113 	add.w	r1, r7, #19
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	2201      	movs	r2, #1
 8009de8:	2006      	movs	r0, #6
 8009dea:	f7ff ff3a 	bl	8009c62 <bhy2_hif_get_regs>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8009df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d15b      	bne.n	8009eb2 <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8009dfa:	7cfb      	ldrb	r3, [r7, #19]
 8009dfc:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8009dfe:	7cfb      	ldrb	r3, [r7, #19]
 8009e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8009e08:	7cfb      	ldrb	r3, [r7, #19]
 8009e0a:	7dba      	ldrb	r2, [r7, #22]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d008      	beq.n	8009e22 <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009e10:	f107 0113 	add.w	r1, r7, #19
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	2201      	movs	r2, #1
 8009e18:	2006      	movs	r0, #6
 8009e1a:	f7ff ff5a 	bl	8009cd2 <bhy2_hif_set_regs>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8009e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d143      	bne.n	8009eb2 <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8009e2a:	89fb      	ldrh	r3, [r7, #14]
 8009e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e30:	b298      	uxth	r0, r3
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	2200      	movs	r2, #0
 8009e36:	2100      	movs	r1, #0
 8009e38:	f7ff ffa1 	bl	8009d7e <bhy2_hif_exec_cmd>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8009e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d134      	bne.n	8009eb2 <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8009e48:	6a38      	ldr	r0, [r7, #32]
 8009e4a:	f7ff fdbf 	bl	80099cc <bhy2_wait_status_ready>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8009e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d12b      	bne.n	8009eb2 <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8009e5a:	f107 0014 	add.w	r0, r7, #20
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	68b9      	ldr	r1, [r7, #8]
 8009e68:	f000 f94b 	bl	800a102 <bhy2_hif_get_status_fifo>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8009e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d11c      	bne.n	8009eb2 <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8009e78:	7cfb      	ldrb	r3, [r7, #19]
 8009e7a:	7dba      	ldrb	r2, [r7, #22]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d00a      	beq.n	8009e96 <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8009e80:	7dbb      	ldrb	r3, [r7, #22]
 8009e82:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009e84:	f107 0113 	add.w	r1, r7, #19
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	2006      	movs	r0, #6
 8009e8e:	f7ff ff20 	bl	8009cd2 <bhy2_hif_set_regs>
 8009e92:	4603      	mov	r3, r0
 8009e94:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8009e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d109      	bne.n	8009eb2 <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8009e9e:	8abb      	ldrh	r3, [r7, #20]
 8009ea0:	89fa      	ldrh	r2, [r7, #14]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d005      	beq.n	8009eb2 <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8009ea6:	23fb      	movs	r3, #251	; 0xfb
 8009ea8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8009eaa:	e002      	b.n	8009eb2 <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009eac:	23ff      	movs	r3, #255	; 0xff
 8009eae:	75fb      	strb	r3, [r7, #23]
 8009eb0:	e000      	b.n	8009eb4 <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8009eb2:	bf00      	nop
    }

    return rslt;
 8009eb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3718      	adds	r7, #24
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	201c      	movs	r0, #28
 8009ed2:	f7ff fec6 	bl	8009c62 <bhy2_hif_get_regs>
 8009ed6:	4603      	mov	r3, r0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d013      	beq.n	8009f18 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8009ef0:	f107 010c 	add.w	r1, r7, #12
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	2020      	movs	r0, #32
 8009efa:	f7ff feb2 	bl	8009c62 <bhy2_hif_get_regs>
 8009efe:	4603      	mov	r3, r0
 8009f00:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8009f02:	7b3b      	ldrb	r3, [r7, #12]
 8009f04:	b21a      	sxth	r2, r3
 8009f06:	7b7b      	ldrb	r3, [r7, #13]
 8009f08:	021b      	lsls	r3, r3, #8
 8009f0a:	b21b      	sxth	r3, r3
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	b21b      	sxth	r3, r3
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	801a      	strh	r2, [r3, #0]
 8009f16:	e001      	b.n	8009f1c <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009f18:	23ff      	movs	r3, #255	; 0xff
 8009f1a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	2201      	movs	r2, #1
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	2025      	movs	r0, #37	; 0x25
 8009f3a:	f7ff fe92 	bl	8009c62 <bhy2_hif_get_regs>
 8009f3e:	4603      	mov	r3, r0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	2201      	movs	r2, #1
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	202d      	movs	r0, #45	; 0x2d
 8009f5a:	f7ff fe82 	bl	8009c62 <bhy2_hif_get_regs>
 8009f5e:	4603      	mov	r3, r0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8009f70:	2301      	movs	r3, #1
 8009f72:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8009f78:	230f      	movs	r3, #15
 8009f7a:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8009f7c:	f107 010b 	add.w	r1, r7, #11
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	2014      	movs	r0, #20
 8009f86:	f7ff fea4 	bl	8009cd2 <bhy2_hif_set_regs>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8009f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d12b      	bne.n	8009fee <bhy2_hif_reset+0x86>
    {
        while (count--)
 8009f96:	e01c      	b.n	8009fd2 <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8009f9e:	f7ff fed0 	bl	8009d42 <bhy2_hif_delay_us>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8009fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d111      	bne.n	8009fd2 <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8009fae:	f107 010a 	add.w	r1, r7, #10
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	2025      	movs	r0, #37	; 0x25
 8009fb8:	f7ff fe53 	bl	8009c62 <bhy2_hif_get_regs>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8009fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d104      	bne.n	8009fd2 <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8009fc8:	7abb      	ldrb	r3, [r7, #10]
 8009fca:	f003 0310 	and.w	r3, r3, #16
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d105      	bne.n	8009fde <bhy2_hif_reset+0x76>
        while (count--)
 8009fd2:	89bb      	ldrh	r3, [r7, #12]
 8009fd4:	1e5a      	subs	r2, r3, #1
 8009fd6:	81ba      	strh	r2, [r7, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1dd      	bne.n	8009f98 <bhy2_hif_reset+0x30>
 8009fdc:	e000      	b.n	8009fe0 <bhy2_hif_reset+0x78>
                    {
                        break;
 8009fde:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 8009fe0:	7abb      	ldrb	r3, [r7, #10]
 8009fe2:	f003 0310 	and.w	r3, r3, #16
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 8009fea:	23fb      	movs	r3, #251	; 0xfb
 8009fec:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8009fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b086      	sub	sp, #24
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	60f8      	str	r0, [r7, #12]
 800a002:	60b9      	str	r1, [r7, #8]
 800a004:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d027      	beq.n	800a060 <bhy2_hif_upload_firmware_to_ram+0x66>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d024      	beq.n	800a060 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	b21a      	sxth	r2, r3
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	021b      	lsls	r3, r3, #8
 800a024:	b21b      	sxth	r3, r3
 800a026:	4313      	orrs	r3, r2
 800a028:	b21b      	sxth	r3, r3
 800a02a:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 800a02c:	8abb      	ldrh	r3, [r7, #20]
 800a02e:	f246 622b 	movw	r2, #26155	; 0x662b
 800a032:	4293      	cmp	r3, r2
 800a034:	d002      	beq.n	800a03c <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 800a036:	23fc      	movs	r3, #252	; 0xfc
 800a038:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 800a03a:	e014      	b.n	800a066 <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	68f9      	ldr	r1, [r7, #12]
 800a042:	2002      	movs	r0, #2
 800a044:	f7ff fe9b 	bl	8009d7e <bhy2_hif_exec_cmd>
 800a048:	4603      	mov	r3, r0
 800a04a:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 800a04c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d108      	bne.n	800a066 <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7ff fcf2 	bl	8009a3e <bhy2_hif_check_boot_status_ram>
 800a05a:	4603      	mov	r3, r0
 800a05c:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 800a05e:	e002      	b.n	800a066 <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800a060:	23ff      	movs	r3, #255	; 0xff
 800a062:	75fb      	strb	r3, [r7, #23]
 800a064:	e000      	b.n	800a068 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 800a066:	bf00      	nop
    }

    return rslt;
 800a068:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	2100      	movs	r1, #0
 800a082:	2003      	movs	r0, #3
 800a084:	f7ff fe7b 	bl	8009d7e <bhy2_hif_exec_cmd>
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 800a08c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d104      	bne.n	800a09e <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7ff fcd2 	bl	8009a3e <bhy2_hif_check_boot_status_ram>
 800a09a:	4603      	mov	r3, r0
 800a09c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b086      	sub	sp, #24
 800a0ae:	af02      	add	r7, sp, #8
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	607a      	str	r2, [r7, #4]
 800a0b6:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	68f9      	ldr	r1, [r7, #12]
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	f7ff fd00 	bl	8009acc <bhy2_hif_get_fifo>
 800a0cc:	4603      	mov	r3, r0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b086      	sub	sp, #24
 800a0da:	af02      	add	r7, sp, #8
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	607a      	str	r2, [r7, #4]
 800a0e2:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	9301      	str	r3, [sp, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	68f9      	ldr	r1, [r7, #12]
 800a0f2:	2002      	movs	r0, #2
 800a0f4:	f7ff fcea 	bl	8009acc <bhy2_hif_get_fifo>
 800a0f8:	4603      	mov	r3, r0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b086      	sub	sp, #24
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	607a      	str	r2, [r7, #4]
 800a10e:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 800a110:	f107 0110 	add.w	r1, r7, #16
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	2204      	movs	r2, #4
 800a118:	2003      	movs	r0, #3
 800a11a:	f7ff fda2 	bl	8009c62 <bhy2_hif_get_regs>
 800a11e:	4603      	mov	r3, r0
 800a120:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 800a122:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d130      	bne.n	800a18c <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 800a12a:	7c3b      	ldrb	r3, [r7, #16]
 800a12c:	b21a      	sxth	r2, r3
 800a12e:	f107 0310 	add.w	r3, r7, #16
 800a132:	3301      	adds	r3, #1
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	021b      	lsls	r3, r3, #8
 800a138:	b21b      	sxth	r3, r3
 800a13a:	4313      	orrs	r3, r2
 800a13c:	b21b      	sxth	r3, r3
 800a13e:	b29a      	uxth	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 800a144:	7cbb      	ldrb	r3, [r7, #18]
 800a146:	b21a      	sxth	r2, r3
 800a148:	f107 0310 	add.w	r3, r7, #16
 800a14c:	3302      	adds	r3, #2
 800a14e:	3301      	adds	r3, #1
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	021b      	lsls	r3, r3, #8
 800a154:	b21b      	sxth	r3, r3
 800a156:	4313      	orrs	r3, r2
 800a158:	b21b      	sxth	r3, r3
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	461a      	mov	r2, r3
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d010      	beq.n	800a18c <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	429a      	cmp	r2, r3
 800a172:	d202      	bcs.n	800a17a <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 800a174:	23fa      	movs	r3, #250	; 0xfa
 800a176:	75fb      	strb	r3, [r7, #23]
 800a178:	e008      	b.n	800a18c <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	68b9      	ldr	r1, [r7, #8]
 800a182:	2003      	movs	r0, #3
 800a184:	f7ff fd6d 	bl	8009c62 <bhy2_hif_get_regs>
 800a188:	4603      	mov	r3, r0
 800a18a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800a18c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3718      	adds	r7, #24
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af02      	add	r7, sp, #8
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	9301      	str	r3, [sp, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	68f9      	ldr	r1, [r7, #12]
 800a1b4:	2003      	movs	r0, #3
 800a1b6:	f7ff fc89 	bl	8009acc <bhy2_hif_get_fifo>
 800a1ba:	4603      	mov	r3, r0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	ed87 0a02 	vstr	s0, [r7, #8]
 800a1d0:	6079      	str	r1, [r7, #4]
 800a1d2:	603a      	str	r2, [r7, #0]
 800a1d4:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 800a1da:	7bfb      	ldrb	r3, [r7, #15]
 800a1dc:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	0a1b      	lsrs	r3, r3, #8
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	0c1b      	lsrs	r3, r3, #16
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	0e1b      	lsrs	r3, r3, #24
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	0a1b      	lsrs	r3, r3, #8
 800a206:	b2db      	uxtb	r3, r3
 800a208:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	0c1b      	lsrs	r3, r3, #16
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 800a212:	f107 0118 	add.w	r1, r7, #24
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2208      	movs	r2, #8
 800a21a:	200d      	movs	r0, #13
 800a21c:	f7ff fdaf 	bl	8009d7e <bhy2_hif_exec_cmd>
 800a220:	4603      	mov	r3, r0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3720      	adds	r7, #32
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b090      	sub	sp, #64	; 0x40
 800a22e:	af02      	add	r7, sp, #8
 800a230:	4603      	mov	r3, r0
 800a232:	60b9      	str	r1, [r7, #8]
 800a234:	607a      	str	r2, [r7, #4]
 800a236:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f000 80da 	beq.w	800a3f4 <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	2bf5      	cmp	r3, #245	; 0xf5
 800a244:	d903      	bls.n	800a24e <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 800a246:	23fe      	movs	r3, #254	; 0xfe
 800a248:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a24c:	e0d5      	b.n	800a3fa <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	b29b      	uxth	r3, r3
 800a252:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a256:	b298      	uxth	r0, r3
 800a258:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a25c:	f107 0114 	add.w	r1, r7, #20
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	4613      	mov	r3, r2
 800a266:	221c      	movs	r2, #28
 800a268:	f7ff fda2 	bl	8009db0 <bhy2_hif_get_parameter>
 800a26c:	4603      	mov	r3, r0
 800a26e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 800a272:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a276:	2b00      	cmp	r3, #0
 800a278:	f040 80bf 	bne.w	800a3fa <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 800a27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27e:	2b1c      	cmp	r3, #28
 800a280:	d003      	beq.n	800a28a <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 800a282:	23fe      	movs	r3, #254	; 0xfe
 800a284:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a288:	e0b7      	b.n	800a3fa <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 800a28a:	7d3a      	ldrb	r2, [r7, #20]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 800a290:	7d7a      	ldrb	r2, [r7, #21]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 800a296:	7dba      	ldrb	r2, [r7, #22]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 800a29c:	7dfa      	ldrb	r2, [r7, #23]
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 800a2a2:	7e3a      	ldrb	r2, [r7, #24]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 800a2a8:	7e7a      	ldrb	r2, [r7, #25]
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 800a2ae:	7eba      	ldrb	r2, [r7, #26]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 800a2b4:	7efa      	ldrb	r2, [r7, #27]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 800a2ba:	7f3a      	ldrb	r2, [r7, #28]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 800a2c0:	7f7a      	ldrb	r2, [r7, #29]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 800a2c6:	7fba      	ldrb	r2, [r7, #30]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 800a2cc:	7ffa      	ldrb	r2, [r7, #31]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 800a2d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 800a2da:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 800a2e2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 800a2ea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 800a2f2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 800a2fa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 800a302:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 800a30a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 800a312:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 800a31a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 800a322:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 800a32a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 800a332:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	791b      	ldrb	r3, [r3, #4]
 800a33e:	b21a      	sxth	r2, r3
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	795b      	ldrb	r3, [r3, #5]
 800a344:	021b      	lsls	r3, r3, #8
 800a346:	b21b      	sxth	r3, r3
 800a348:	4313      	orrs	r3, r2
 800a34a:	b21b      	sxth	r3, r3
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	799b      	ldrb	r3, [r3, #6]
 800a356:	b21a      	sxth	r2, r3
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	79db      	ldrb	r3, [r3, #7]
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	b21b      	sxth	r3, r3
 800a360:	4313      	orrs	r3, r2
 800a362:	b21b      	sxth	r3, r3
 800a364:	b29a      	uxth	r2, r3
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	7a1b      	ldrb	r3, [r3, #8]
 800a36e:	461a      	mov	r2, r3
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	7a5b      	ldrb	r3, [r3, #9]
 800a374:	021b      	lsls	r3, r3, #8
 800a376:	431a      	orrs	r2, r3
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	7a9b      	ldrb	r3, [r3, #10]
 800a37c:	041b      	lsls	r3, r3, #16
 800a37e:	431a      	orrs	r2, r3
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	7adb      	ldrb	r3, [r3, #11]
 800a384:	061b      	lsls	r3, r3, #24
 800a386:	431a      	orrs	r2, r3
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	7b1b      	ldrb	r3, [r3, #12]
 800a390:	461a      	mov	r2, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	7b5b      	ldrb	r3, [r3, #13]
 800a396:	021b      	lsls	r3, r3, #8
 800a398:	431a      	orrs	r2, r3
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	7b9b      	ldrb	r3, [r3, #14]
 800a39e:	041b      	lsls	r3, r3, #16
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	7bdb      	ldrb	r3, [r3, #15]
 800a3a6:	061b      	lsls	r3, r3, #24
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	7c1b      	ldrb	r3, [r3, #16]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	7c5b      	ldrb	r3, [r3, #17]
 800a3b8:	021b      	lsls	r3, r3, #8
 800a3ba:	431a      	orrs	r2, r3
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	7c9b      	ldrb	r3, [r3, #18]
 800a3c0:	041b      	lsls	r3, r3, #16
 800a3c2:	431a      	orrs	r2, r3
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	7cdb      	ldrb	r3, [r3, #19]
 800a3c8:	061b      	lsls	r3, r3, #24
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	7e1b      	ldrb	r3, [r3, #24]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	7e5b      	ldrb	r3, [r3, #25]
 800a3da:	021b      	lsls	r3, r3, #8
 800a3dc:	431a      	orrs	r2, r3
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	7e9b      	ldrb	r3, [r3, #26]
 800a3e2:	041b      	lsls	r3, r3, #16
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	7edb      	ldrb	r3, [r3, #27]
 800a3ea:	061b      	lsls	r3, r3, #24
 800a3ec:	431a      	orrs	r2, r3
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	619a      	str	r2, [r3, #24]
 800a3f2:	e002      	b.n	800a3fa <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800a3f4:	23ff      	movs	r3, #255	; 0xff
 800a3f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 800a3fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3738      	adds	r7, #56	; 0x38
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 800a406:	b480      	push	{r7}
 800a408:	b083      	sub	sp, #12
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	b21a      	sxth	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	3301      	adds	r3, #1
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	021b      	lsls	r3, r3, #8
 800a41e:	b21b      	sxth	r3, r3
 800a420:	4313      	orrs	r3, r2
 800a422:	b21a      	sxth	r2, r3
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3302      	adds	r3, #2
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	b21a      	sxth	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3303      	adds	r3, #3
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	021b      	lsls	r3, r3, #8
 800a438:	b21b      	sxth	r3, r3
 800a43a:	4313      	orrs	r3, r2
 800a43c:	b21a      	sxth	r2, r3
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3304      	adds	r3, #4
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	b21a      	sxth	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3305      	adds	r3, #5
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	021b      	lsls	r3, r3, #8
 800a452:	b21b      	sxth	r3, r3
 800a454:	4313      	orrs	r3, r2
 800a456:	b21a      	sxth	r2, r3
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3306      	adds	r3, #6
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	b21a      	sxth	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	3307      	adds	r3, #7
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	021b      	lsls	r3, r3, #8
 800a46c:	b21b      	sxth	r3, r3
 800a46e:	4313      	orrs	r3, r2
 800a470:	b21a      	sxth	r2, r3
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	3308      	adds	r3, #8
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	b21a      	sxth	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3309      	adds	r3, #9
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	021b      	lsls	r3, r3, #8
 800a486:	b21b      	sxth	r3, r3
 800a488:	4313      	orrs	r3, r2
 800a48a:	b21b      	sxth	r3, r3
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	811a      	strh	r2, [r3, #8]
}
 800a492:	bf00      	nop
 800a494:	370c      	adds	r7, #12
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
	...

0800a4a0 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800a4a4:	4b12      	ldr	r3, [pc, #72]	; (800a4f0 <MX_COMP2_Init+0x50>)
 800a4a6:	4a13      	ldr	r2, [pc, #76]	; (800a4f4 <MX_COMP2_Init+0x54>)
 800a4a8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 800a4aa:	4b11      	ldr	r3, [pc, #68]	; (800a4f0 <MX_COMP2_Init+0x50>)
 800a4ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a4b0:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 800a4b2:	4b0f      	ldr	r3, [pc, #60]	; (800a4f0 <MX_COMP2_Init+0x50>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800a4b8:	4b0d      	ldr	r3, [pc, #52]	; (800a4f0 <MX_COMP2_Init+0x50>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800a4be:	4b0c      	ldr	r3, [pc, #48]	; (800a4f0 <MX_COMP2_Init+0x50>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800a4c4:	4b0a      	ldr	r3, [pc, #40]	; (800a4f0 <MX_COMP2_Init+0x50>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800a4ca:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <MX_COMP2_Init+0x50>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800a4d0:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <MX_COMP2_Init+0x50>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800a4d6:	4b06      	ldr	r3, [pc, #24]	; (800a4f0 <MX_COMP2_Init+0x50>)
 800a4d8:	2211      	movs	r2, #17
 800a4da:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800a4dc:	4804      	ldr	r0, [pc, #16]	; (800a4f0 <MX_COMP2_Init+0x50>)
 800a4de:	f001 fced 	bl	800bebc <HAL_COMP_Init>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 800a4e8:	f000 fc0c 	bl	800ad04 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800a4ec:	bf00      	nop
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	24001498 	.word	0x24001498
 800a4f4:	58003810 	.word	0x58003810

0800a4f8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b08a      	sub	sp, #40	; 0x28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a500:	f107 0314 	add.w	r3, r7, #20
 800a504:	2200      	movs	r2, #0
 800a506:	601a      	str	r2, [r3, #0]
 800a508:	605a      	str	r2, [r3, #4]
 800a50a:	609a      	str	r2, [r3, #8]
 800a50c:	60da      	str	r2, [r3, #12]
 800a50e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a1c      	ldr	r2, [pc, #112]	; (800a588 <HAL_COMP_MspInit+0x90>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d132      	bne.n	800a580 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 800a51a:	4b1c      	ldr	r3, [pc, #112]	; (800a58c <HAL_COMP_MspInit+0x94>)
 800a51c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a520:	4a1a      	ldr	r2, [pc, #104]	; (800a58c <HAL_COMP_MspInit+0x94>)
 800a522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a526:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a52a:	4b18      	ldr	r3, [pc, #96]	; (800a58c <HAL_COMP_MspInit+0x94>)
 800a52c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a534:	613b      	str	r3, [r7, #16]
 800a536:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a538:	4b14      	ldr	r3, [pc, #80]	; (800a58c <HAL_COMP_MspInit+0x94>)
 800a53a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a53e:	4a13      	ldr	r2, [pc, #76]	; (800a58c <HAL_COMP_MspInit+0x94>)
 800a540:	f043 0310 	orr.w	r3, r3, #16
 800a544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a548:	4b10      	ldr	r3, [pc, #64]	; (800a58c <HAL_COMP_MspInit+0x94>)
 800a54a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a54e:	f003 0310 	and.w	r3, r3, #16
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a55a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a55c:	2303      	movs	r3, #3
 800a55e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a560:	2300      	movs	r3, #0
 800a562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a564:	f107 0314 	add.w	r3, r7, #20
 800a568:	4619      	mov	r1, r3
 800a56a:	4809      	ldr	r0, [pc, #36]	; (800a590 <HAL_COMP_MspInit+0x98>)
 800a56c:	f004 ffbc 	bl	800f4e8 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 800a570:	2200      	movs	r2, #0
 800a572:	2100      	movs	r1, #0
 800a574:	2089      	movs	r0, #137	; 0x89
 800a576:	f001 ff64 	bl	800c442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800a57a:	2089      	movs	r0, #137	; 0x89
 800a57c:	f001 ff7b 	bl	800c476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 800a580:	bf00      	nop
 800a582:	3728      	adds	r7, #40	; 0x28
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	58003810 	.word	0x58003810
 800a58c:	58024400 	.word	0x58024400
 800a590:	58021000 	.word	0x58021000

0800a594 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08a      	sub	sp, #40	; 0x28
 800a598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a59a:	1d3b      	adds	r3, r7, #4
 800a59c:	2224      	movs	r2, #36	; 0x24
 800a59e:	2100      	movs	r1, #0
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f012 fdf1 	bl	801d188 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a5a6:	4b12      	ldr	r3, [pc, #72]	; (800a5f0 <MX_DAC1_Init+0x5c>)
 800a5a8:	4a12      	ldr	r2, [pc, #72]	; (800a5f4 <MX_DAC1_Init+0x60>)
 800a5aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a5ac:	4810      	ldr	r0, [pc, #64]	; (800a5f0 <MX_DAC1_Init+0x5c>)
 800a5ae:	f001 ff7c 	bl	800c4aa <HAL_DAC_Init>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a5b8:	f000 fba4 	bl	800ad04 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a5d0:	1d3b      	adds	r3, r7, #4
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4806      	ldr	r0, [pc, #24]	; (800a5f0 <MX_DAC1_Init+0x5c>)
 800a5d8:	f002 f800 	bl	800c5dc <HAL_DAC_ConfigChannel>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800a5e2:	f000 fb8f 	bl	800ad04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800a5e6:	bf00      	nop
 800a5e8:	3728      	adds	r7, #40	; 0x28
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	240014c4 	.word	0x240014c4
 800a5f4:	40007400 	.word	0x40007400

0800a5f8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a0b      	ldr	r2, [pc, #44]	; (800a634 <HAL_DAC_MspInit+0x3c>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d10e      	bne.n	800a628 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800a60a:	4b0b      	ldr	r3, [pc, #44]	; (800a638 <HAL_DAC_MspInit+0x40>)
 800a60c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a610:	4a09      	ldr	r2, [pc, #36]	; (800a638 <HAL_DAC_MspInit+0x40>)
 800a612:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a616:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a61a:	4b07      	ldr	r3, [pc, #28]	; (800a638 <HAL_DAC_MspInit+0x40>)
 800a61c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800a628:	bf00      	nop
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	40007400 	.word	0x40007400
 800a638:	58024400 	.word	0x58024400

0800a63c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a642:	4b19      	ldr	r3, [pc, #100]	; (800a6a8 <MX_DMA_Init+0x6c>)
 800a644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a648:	4a17      	ldr	r2, [pc, #92]	; (800a6a8 <MX_DMA_Init+0x6c>)
 800a64a:	f043 0301 	orr.w	r3, r3, #1
 800a64e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a652:	4b15      	ldr	r3, [pc, #84]	; (800a6a8 <MX_DMA_Init+0x6c>)
 800a654:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	607b      	str	r3, [r7, #4]
 800a65e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800a660:	2200      	movs	r2, #0
 800a662:	2100      	movs	r1, #0
 800a664:	200b      	movs	r0, #11
 800a666:	f001 feec 	bl	800c442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800a66a:	200b      	movs	r0, #11
 800a66c:	f001 ff03 	bl	800c476 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a670:	2200      	movs	r2, #0
 800a672:	2100      	movs	r1, #0
 800a674:	200c      	movs	r0, #12
 800a676:	f001 fee4 	bl	800c442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a67a:	200c      	movs	r0, #12
 800a67c:	f001 fefb 	bl	800c476 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800a680:	2200      	movs	r2, #0
 800a682:	2100      	movs	r1, #0
 800a684:	200f      	movs	r0, #15
 800a686:	f001 fedc 	bl	800c442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a68a:	200f      	movs	r0, #15
 800a68c:	f001 fef3 	bl	800c476 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800a690:	2200      	movs	r2, #0
 800a692:	2100      	movs	r1, #0
 800a694:	2010      	movs	r0, #16
 800a696:	f001 fed4 	bl	800c442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a69a:	2010      	movs	r0, #16
 800a69c:	f001 feeb 	bl	800c476 <HAL_NVIC_EnableIRQ>

}
 800a6a0:	bf00      	nop
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	58024400 	.word	0x58024400

0800a6ac <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b08a      	sub	sp, #40	; 0x28
 800a6b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6b2:	f107 0314 	add.w	r3, r7, #20
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	605a      	str	r2, [r3, #4]
 800a6bc:	609a      	str	r2, [r3, #8]
 800a6be:	60da      	str	r2, [r3, #12]
 800a6c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a6c2:	4b3b      	ldr	r3, [pc, #236]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a6c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6c8:	4a39      	ldr	r2, [pc, #228]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a6ca:	f043 0304 	orr.w	r3, r3, #4
 800a6ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a6d2:	4b37      	ldr	r3, [pc, #220]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a6d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6d8:	f003 0304 	and.w	r3, r3, #4
 800a6dc:	613b      	str	r3, [r7, #16]
 800a6de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6e0:	4b33      	ldr	r3, [pc, #204]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a6e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6e6:	4a32      	ldr	r2, [pc, #200]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a6e8:	f043 0301 	orr.w	r3, r3, #1
 800a6ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a6f0:	4b2f      	ldr	r3, [pc, #188]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a6f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a6fe:	4b2c      	ldr	r3, [pc, #176]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a704:	4a2a      	ldr	r2, [pc, #168]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a706:	f043 0310 	orr.w	r3, r3, #16
 800a70a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a70e:	4b28      	ldr	r3, [pc, #160]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a714:	f003 0310 	and.w	r3, r3, #16
 800a718:	60bb      	str	r3, [r7, #8]
 800a71a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a71c:	4b24      	ldr	r3, [pc, #144]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a71e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a722:	4a23      	ldr	r2, [pc, #140]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a724:	f043 0302 	orr.w	r3, r3, #2
 800a728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a72c:	4b20      	ldr	r3, [pc, #128]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a72e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a732:	f003 0302 	and.w	r3, r3, #2
 800a736:	607b      	str	r3, [r7, #4]
 800a738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a73a:	4b1d      	ldr	r3, [pc, #116]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a73c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a740:	4a1b      	ldr	r2, [pc, #108]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a742:	f043 0308 	orr.w	r3, r3, #8
 800a746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a74a:	4b19      	ldr	r3, [pc, #100]	; (800a7b0 <MX_GPIO_Init+0x104>)
 800a74c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a750:	f003 0308 	and.w	r3, r3, #8
 800a754:	603b      	str	r3, [r7, #0]
 800a756:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 800a758:	2200      	movs	r2, #0
 800a75a:	2101      	movs	r1, #1
 800a75c:	4815      	ldr	r0, [pc, #84]	; (800a7b4 <MX_GPIO_Init+0x108>)
 800a75e:	f005 f873 	bl	800f848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800a762:	2200      	movs	r2, #0
 800a764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a768:	4813      	ldr	r0, [pc, #76]	; (800a7b8 <MX_GPIO_Init+0x10c>)
 800a76a:	f005 f86d 	bl	800f848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 800a76e:	2301      	movs	r3, #1
 800a770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a772:	2301      	movs	r3, #1
 800a774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a776:	2302      	movs	r3, #2
 800a778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a77a:	2303      	movs	r3, #3
 800a77c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 800a77e:	f107 0314 	add.w	r3, r7, #20
 800a782:	4619      	mov	r1, r3
 800a784:	480b      	ldr	r0, [pc, #44]	; (800a7b4 <MX_GPIO_Init+0x108>)
 800a786:	f004 feaf 	bl	800f4e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800a78a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a78e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a790:	2301      	movs	r3, #1
 800a792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a794:	2302      	movs	r3, #2
 800a796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a798:	2303      	movs	r3, #3
 800a79a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800a79c:	f107 0314 	add.w	r3, r7, #20
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4805      	ldr	r0, [pc, #20]	; (800a7b8 <MX_GPIO_Init+0x10c>)
 800a7a4:	f004 fea0 	bl	800f4e8 <HAL_GPIO_Init>

}
 800a7a8:	bf00      	nop
 800a7aa:	3728      	adds	r7, #40	; 0x28
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	58024400 	.word	0x58024400
 800a7b4:	58020800 	.word	0x58020800
 800a7b8:	58021000 	.word	0x58021000

0800a7bc <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a7c0:	4b1b      	ldr	r3, [pc, #108]	; (800a830 <MX_I2C2_Init+0x74>)
 800a7c2:	4a1c      	ldr	r2, [pc, #112]	; (800a834 <MX_I2C2_Init+0x78>)
 800a7c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800a7c6:	4b1a      	ldr	r3, [pc, #104]	; (800a830 <MX_I2C2_Init+0x74>)
 800a7c8:	4a1b      	ldr	r2, [pc, #108]	; (800a838 <MX_I2C2_Init+0x7c>)
 800a7ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a7cc:	4b18      	ldr	r3, [pc, #96]	; (800a830 <MX_I2C2_Init+0x74>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a7d2:	4b17      	ldr	r3, [pc, #92]	; (800a830 <MX_I2C2_Init+0x74>)
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a7d8:	4b15      	ldr	r3, [pc, #84]	; (800a830 <MX_I2C2_Init+0x74>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a7de:	4b14      	ldr	r3, [pc, #80]	; (800a830 <MX_I2C2_Init+0x74>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a7e4:	4b12      	ldr	r3, [pc, #72]	; (800a830 <MX_I2C2_Init+0x74>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a7ea:	4b11      	ldr	r3, [pc, #68]	; (800a830 <MX_I2C2_Init+0x74>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a7f0:	4b0f      	ldr	r3, [pc, #60]	; (800a830 <MX_I2C2_Init+0x74>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a7f6:	480e      	ldr	r0, [pc, #56]	; (800a830 <MX_I2C2_Init+0x74>)
 800a7f8:	f005 f840 	bl	800f87c <HAL_I2C_Init>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a802:	f000 fa7f 	bl	800ad04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a806:	2100      	movs	r1, #0
 800a808:	4809      	ldr	r0, [pc, #36]	; (800a830 <MX_I2C2_Init+0x74>)
 800a80a:	f005 ff4c 	bl	80106a6 <HAL_I2CEx_ConfigAnalogFilter>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a814:	f000 fa76 	bl	800ad04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a818:	2100      	movs	r1, #0
 800a81a:	4805      	ldr	r0, [pc, #20]	; (800a830 <MX_I2C2_Init+0x74>)
 800a81c:	f005 ff8e 	bl	801073c <HAL_I2CEx_ConfigDigitalFilter>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a826:	f000 fa6d 	bl	800ad04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a82a:	bf00      	nop
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	240014d8 	.word	0x240014d8
 800a834:	40005800 	.word	0x40005800
 800a838:	00b03fdb 	.word	0x00b03fdb

0800a83c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b0b8      	sub	sp, #224	; 0xe0
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a844:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a848:	2200      	movs	r2, #0
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	605a      	str	r2, [r3, #4]
 800a84e:	609a      	str	r2, [r3, #8]
 800a850:	60da      	str	r2, [r3, #12]
 800a852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a854:	f107 0310 	add.w	r3, r7, #16
 800a858:	22bc      	movs	r2, #188	; 0xbc
 800a85a:	2100      	movs	r1, #0
 800a85c:	4618      	mov	r0, r3
 800a85e:	f012 fc93 	bl	801d188 <memset>
  if(i2cHandle->Instance==I2C2)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a5a      	ldr	r2, [pc, #360]	; (800a9d0 <HAL_I2C_MspInit+0x194>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	f040 80ad 	bne.w	800a9c8 <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a86e:	2308      	movs	r3, #8
 800a870:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800a872:	2300      	movs	r3, #0
 800a874:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a878:	f107 0310 	add.w	r3, r7, #16
 800a87c:	4618      	mov	r0, r3
 800a87e:	f008 fa83 	bl	8012d88 <HAL_RCCEx_PeriphCLKConfig>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800a888:	f000 fa3c 	bl	800ad04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a88c:	4b51      	ldr	r3, [pc, #324]	; (800a9d4 <HAL_I2C_MspInit+0x198>)
 800a88e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a892:	4a50      	ldr	r2, [pc, #320]	; (800a9d4 <HAL_I2C_MspInit+0x198>)
 800a894:	f043 0302 	orr.w	r3, r3, #2
 800a898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a89c:	4b4d      	ldr	r3, [pc, #308]	; (800a9d4 <HAL_I2C_MspInit+0x198>)
 800a89e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8a2:	f003 0302 	and.w	r3, r3, #2
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a8aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a8ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a8b2:	2312      	movs	r3, #18
 800a8b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a8c4:	2304      	movs	r3, #4
 800a8c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	4841      	ldr	r0, [pc, #260]	; (800a9d8 <HAL_I2C_MspInit+0x19c>)
 800a8d2:	f004 fe09 	bl	800f4e8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a8d6:	4b3f      	ldr	r3, [pc, #252]	; (800a9d4 <HAL_I2C_MspInit+0x198>)
 800a8d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a8dc:	4a3d      	ldr	r2, [pc, #244]	; (800a9d4 <HAL_I2C_MspInit+0x198>)
 800a8de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a8e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a8e6:	4b3b      	ldr	r3, [pc, #236]	; (800a9d4 <HAL_I2C_MspInit+0x198>)
 800a8e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a8ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8f0:	60bb      	str	r3, [r7, #8]
 800a8f2:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 800a8f4:	4b39      	ldr	r3, [pc, #228]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a8f6:	4a3a      	ldr	r2, [pc, #232]	; (800a9e0 <HAL_I2C_MspInit+0x1a4>)
 800a8f8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 800a8fa:	4b38      	ldr	r3, [pc, #224]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a8fc:	2223      	movs	r2, #35	; 0x23
 800a8fe:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a900:	4b36      	ldr	r3, [pc, #216]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a902:	2200      	movs	r2, #0
 800a904:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a906:	4b35      	ldr	r3, [pc, #212]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a908:	2200      	movs	r2, #0
 800a90a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a90c:	4b33      	ldr	r3, [pc, #204]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a90e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a912:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a914:	4b31      	ldr	r3, [pc, #196]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a916:	2200      	movs	r2, #0
 800a918:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a91a:	4b30      	ldr	r3, [pc, #192]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a91c:	2200      	movs	r2, #0
 800a91e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800a920:	4b2e      	ldr	r3, [pc, #184]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a922:	2200      	movs	r2, #0
 800a924:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a926:	4b2d      	ldr	r3, [pc, #180]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a928:	2200      	movs	r2, #0
 800a92a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a92c:	4b2b      	ldr	r3, [pc, #172]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a92e:	2200      	movs	r2, #0
 800a930:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800a932:	482a      	ldr	r0, [pc, #168]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a934:	f001 ff82 	bl	800c83c <HAL_DMA_Init>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 800a93e:	f000 f9e1 	bl	800ad04 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a25      	ldr	r2, [pc, #148]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a946:	63da      	str	r2, [r3, #60]	; 0x3c
 800a948:	4a24      	ldr	r2, [pc, #144]	; (800a9dc <HAL_I2C_MspInit+0x1a0>)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 800a94e:	4b25      	ldr	r3, [pc, #148]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a950:	4a25      	ldr	r2, [pc, #148]	; (800a9e8 <HAL_I2C_MspInit+0x1ac>)
 800a952:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800a954:	4b23      	ldr	r3, [pc, #140]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a956:	2224      	movs	r2, #36	; 0x24
 800a958:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a95a:	4b22      	ldr	r3, [pc, #136]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a95c:	2240      	movs	r2, #64	; 0x40
 800a95e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a960:	4b20      	ldr	r3, [pc, #128]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a962:	2200      	movs	r2, #0
 800a964:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a966:	4b1f      	ldr	r3, [pc, #124]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a96c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a96e:	4b1d      	ldr	r3, [pc, #116]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a970:	2200      	movs	r2, #0
 800a972:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a974:	4b1b      	ldr	r3, [pc, #108]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a976:	2200      	movs	r2, #0
 800a978:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800a97a:	4b1a      	ldr	r3, [pc, #104]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a980:	4b18      	ldr	r3, [pc, #96]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a982:	2200      	movs	r2, #0
 800a984:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a986:	4b17      	ldr	r3, [pc, #92]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a988:	2200      	movs	r2, #0
 800a98a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800a98c:	4815      	ldr	r0, [pc, #84]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a98e:	f001 ff55 	bl	800c83c <HAL_DMA_Init>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d001      	beq.n	800a99c <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 800a998:	f000 f9b4 	bl	800ad04 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a11      	ldr	r2, [pc, #68]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a9a0:	639a      	str	r2, [r3, #56]	; 0x38
 800a9a2:	4a10      	ldr	r2, [pc, #64]	; (800a9e4 <HAL_I2C_MspInit+0x1a8>)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	2021      	movs	r0, #33	; 0x21
 800a9ae:	f001 fd48 	bl	800c442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800a9b2:	2021      	movs	r0, #33	; 0x21
 800a9b4:	f001 fd5f 	bl	800c476 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	2022      	movs	r0, #34	; 0x22
 800a9be:	f001 fd40 	bl	800c442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800a9c2:	2022      	movs	r0, #34	; 0x22
 800a9c4:	f001 fd57 	bl	800c476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a9c8:	bf00      	nop
 800a9ca:	37e0      	adds	r7, #224	; 0xe0
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	40005800 	.word	0x40005800
 800a9d4:	58024400 	.word	0x58024400
 800a9d8:	58020400 	.word	0x58020400
 800a9dc:	24001524 	.word	0x24001524
 800a9e0:	40020010 	.word	0x40020010
 800a9e4:	2400159c 	.word	0x2400159c
 800a9e8:	40020028 	.word	0x40020028

0800a9ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b088      	sub	sp, #32
 800a9f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a9f2:	f001 f9a1 	bl	800bd38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a9f6:	f000 f865 	bl	800aac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a9fa:	f7ff fe57 	bl	800a6ac <MX_GPIO_Init>
  MX_DMA_Init();
 800a9fe:	f7ff fe1d 	bl	800a63c <MX_DMA_Init>
  MX_I2C2_Init();
 800aa02:	f7ff fedb 	bl	800a7bc <MX_I2C2_Init>
  MX_SPI1_Init();
 800aa06:	f000 f983 	bl	800ad10 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800aa0a:	f011 fddf 	bl	801c5cc <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 800aa0e:	f000 ff25 	bl	800b85c <MX_USART2_UART_Init>
  MX_UART4_Init();
 800aa12:	f000 fe2f 	bl	800b674 <MX_UART4_Init>
  MX_UART7_Init();
 800aa16:	f000 fe7d 	bl	800b714 <MX_UART7_Init>
  MX_UART8_Init();
 800aa1a:	f000 fec9 	bl	800b7b0 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800aa1e:	f000 ff69 	bl	800b8f4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800aa22:	f000 fd27 	bl	800b474 <MX_TIM3_Init>
  MX_TIM2_Init();
 800aa26:	f000 fcd7 	bl	800b3d8 <MX_TIM2_Init>
  MX_TIM4_Init();
 800aa2a:	f000 fd71 	bl	800b510 <MX_TIM4_Init>
  MX_COMP2_Init();
 800aa2e:	f7ff fd37 	bl	800a4a0 <MX_COMP2_Init>
  MX_DAC1_Init();
 800aa32:	f7ff fdaf 	bl	800a594 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 800aa36:	2100      	movs	r1, #0
 800aa38:	481a      	ldr	r0, [pc, #104]	; (800aaa4 <main+0xb8>)
 800aa3a:	f001 fd58 	bl	800c4ee <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 800aa3e:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 800aa42:	2200      	movs	r2, #0
 800aa44:	2100      	movs	r1, #0
 800aa46:	4817      	ldr	r0, [pc, #92]	; (800aaa4 <main+0xb8>)
 800aa48:	f001 fda3 	bl	800c592 <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 800aa4c:	4816      	ldr	r0, [pc, #88]	; (800aaa8 <main+0xbc>)
 800aa4e:	f00a fe87 	bl	8015760 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800aa52:	4816      	ldr	r0, [pc, #88]	; (800aaac <main+0xc0>)
 800aa54:	f00a fe84 	bl	8015760 <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 800aa58:	4815      	ldr	r0, [pc, #84]	; (800aab0 <main+0xc4>)
 800aa5a:	f001 fb59 	bl	800c110 <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 800aa5e:	4b15      	ldr	r3, [pc, #84]	; (800aab4 <main+0xc8>)
 800aa60:	603b      	str	r3, [r7, #0]
	config.HeadStreamUart = &huart4;
 800aa62:	4b15      	ldr	r3, [pc, #84]	; (800aab8 <main+0xcc>)
 800aa64:	607b      	str	r3, [r7, #4]

	config.HeadTimeout = 10;
 800aa66:	230a      	movs	r3, #10
 800aa68:	60bb      	str	r3, [r7, #8]

	config.BodyUart = &huart8;
 800aa6a:	4b14      	ldr	r3, [pc, #80]	; (800aabc <main+0xd0>)
 800aa6c:	60fb      	str	r3, [r7, #12]
	config.BodyTimeout = 10;
 800aa6e:	230a      	movs	r3, #10
 800aa70:	613b      	str	r3, [r7, #16]

	config.IMUSpi = &hspi1;
 800aa72:	4b13      	ldr	r3, [pc, #76]	; (800aac0 <main+0xd4>)
 800aa74:	617b      	str	r3, [r7, #20]

	if (MotherboardInit(config))
 800aa76:	466a      	mov	r2, sp
 800aa78:	f107 0310 	add.w	r3, r7, #16
 800aa7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa80:	e882 0003 	stmia.w	r2, {r0, r1}
 800aa84:	463b      	mov	r3, r7
 800aa86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aa88:	f7f7 fbd4 	bl	8002234 <MotherboardInit>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <main+0xaa>
		return 1;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e002      	b.n	800aa9c <main+0xb0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 800aa96:	f7f7 fc1f 	bl	80022d8 <MotherboardTick>
 800aa9a:	e7fc      	b.n	800aa96 <main+0xaa>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	240014c4 	.word	0x240014c4
 800aaa8:	240017dc 	.word	0x240017dc
 800aaac:	24001790 	.word	0x24001790
 800aab0:	24001498 	.word	0x24001498
 800aab4:	24001ab4 	.word	0x24001ab4
 800aab8:	24001874 	.word	0x24001874
 800aabc:	24001994 	.word	0x24001994
 800aac0:	24001614 	.word	0x24001614

0800aac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b09e      	sub	sp, #120	; 0x78
 800aac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800aaca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aace:	224c      	movs	r2, #76	; 0x4c
 800aad0:	2100      	movs	r1, #0
 800aad2:	4618      	mov	r0, r3
 800aad4:	f012 fb58 	bl	801d188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800aad8:	f107 030c 	add.w	r3, r7, #12
 800aadc:	2220      	movs	r2, #32
 800aade:	2100      	movs	r1, #0
 800aae0:	4618      	mov	r0, r3
 800aae2:	f012 fb51 	bl	801d188 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800aae6:	2002      	movs	r0, #2
 800aae8:	f007 f94a 	bl	8011d80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800aaec:	2300      	movs	r3, #0
 800aaee:	60bb      	str	r3, [r7, #8]
 800aaf0:	4b4d      	ldr	r3, [pc, #308]	; (800ac28 <SystemClock_Config+0x164>)
 800aaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf4:	4a4c      	ldr	r2, [pc, #304]	; (800ac28 <SystemClock_Config+0x164>)
 800aaf6:	f023 0301 	bic.w	r3, r3, #1
 800aafa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aafc:	4b4a      	ldr	r3, [pc, #296]	; (800ac28 <SystemClock_Config+0x164>)
 800aafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	60bb      	str	r3, [r7, #8]
 800ab06:	4b49      	ldr	r3, [pc, #292]	; (800ac2c <SystemClock_Config+0x168>)
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	4a48      	ldr	r2, [pc, #288]	; (800ac2c <SystemClock_Config+0x168>)
 800ab0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab10:	6193      	str	r3, [r2, #24]
 800ab12:	4b46      	ldr	r3, [pc, #280]	; (800ac2c <SystemClock_Config+0x168>)
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ab1a:	60bb      	str	r3, [r7, #8]
 800ab1c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800ab1e:	bf00      	nop
 800ab20:	4b42      	ldr	r3, [pc, #264]	; (800ac2c <SystemClock_Config+0x168>)
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab2c:	d1f8      	bne.n	800ab20 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ab2e:	4b40      	ldr	r3, [pc, #256]	; (800ac30 <SystemClock_Config+0x16c>)
 800ab30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab34:	4a3e      	ldr	r2, [pc, #248]	; (800ac30 <SystemClock_Config+0x16c>)
 800ab36:	f043 0302 	orr.w	r3, r3, #2
 800ab3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ab3e:	4b3c      	ldr	r3, [pc, #240]	; (800ac30 <SystemClock_Config+0x16c>)
 800ab40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	607b      	str	r3, [r7, #4]
 800ab4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	603b      	str	r3, [r7, #0]
 800ab50:	4b36      	ldr	r3, [pc, #216]	; (800ac2c <SystemClock_Config+0x168>)
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	4a35      	ldr	r2, [pc, #212]	; (800ac2c <SystemClock_Config+0x168>)
 800ab56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab5a:	6193      	str	r3, [r2, #24]
 800ab5c:	4b33      	ldr	r3, [pc, #204]	; (800ac2c <SystemClock_Config+0x168>)
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ab64:	603b      	str	r3, [r7, #0]
 800ab66:	4b30      	ldr	r3, [pc, #192]	; (800ac28 <SystemClock_Config+0x164>)
 800ab68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6a:	4a2f      	ldr	r2, [pc, #188]	; (800ac28 <SystemClock_Config+0x164>)
 800ab6c:	f043 0301 	orr.w	r3, r3, #1
 800ab70:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab72:	4b2d      	ldr	r3, [pc, #180]	; (800ac28 <SystemClock_Config+0x164>)
 800ab74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab76:	f003 0301 	and.w	r3, r3, #1
 800ab7a:	603b      	str	r3, [r7, #0]
 800ab7c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800ab7e:	bf00      	nop
 800ab80:	4b2a      	ldr	r3, [pc, #168]	; (800ac2c <SystemClock_Config+0x168>)
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab8c:	d1f8      	bne.n	800ab80 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800ab8e:	4b28      	ldr	r3, [pc, #160]	; (800ac30 <SystemClock_Config+0x16c>)
 800ab90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab92:	4a27      	ldr	r2, [pc, #156]	; (800ac30 <SystemClock_Config+0x16c>)
 800ab94:	f023 0303 	bic.w	r3, r3, #3
 800ab98:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800ab9a:	2322      	movs	r3, #34	; 0x22
 800ab9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800aba2:	2340      	movs	r3, #64	; 0x40
 800aba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800aba6:	2301      	movs	r3, #1
 800aba8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800abaa:	2302      	movs	r3, #2
 800abac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800abae:	2300      	movs	r3, #0
 800abb0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800abb2:	2304      	movs	r3, #4
 800abb4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800abb6:	233c      	movs	r3, #60	; 0x3c
 800abb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800abba:	2302      	movs	r3, #2
 800abbc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800abbe:	2305      	movs	r3, #5
 800abc0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800abc2:	2302      	movs	r3, #2
 800abc4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800abc6:	230c      	movs	r3, #12
 800abc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800abca:	2300      	movs	r3, #0
 800abcc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800abd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abd6:	4618      	mov	r0, r3
 800abd8:	f007 f91c 	bl	8011e14 <HAL_RCC_OscConfig>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <SystemClock_Config+0x122>
  {
    Error_Handler();
 800abe2:	f000 f88f 	bl	800ad04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800abe6:	233f      	movs	r3, #63	; 0x3f
 800abe8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800abea:	2303      	movs	r3, #3
 800abec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800abee:	2300      	movs	r3, #0
 800abf0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800abf2:	2308      	movs	r3, #8
 800abf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800abf6:	2340      	movs	r3, #64	; 0x40
 800abf8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800abfa:	2340      	movs	r3, #64	; 0x40
 800abfc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800abfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800ac04:	2340      	movs	r3, #64	; 0x40
 800ac06:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800ac08:	f107 030c 	add.w	r3, r7, #12
 800ac0c:	2104      	movs	r1, #4
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f007 fd2e 	bl	8012670 <HAL_RCC_ClockConfig>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <SystemClock_Config+0x15a>
  {
    Error_Handler();
 800ac1a:	f000 f873 	bl	800ad04 <Error_Handler>
  }
}
 800ac1e:	bf00      	nop
 800ac20:	3778      	adds	r7, #120	; 0x78
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	58000400 	.word	0x58000400
 800ac2c:	58024800 	.word	0x58024800
 800ac30:	58024400 	.word	0x58024400

0800ac34 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a04      	ldr	r2, [pc, #16]	; (800ac54 <HAL_COMP_TriggerCallback+0x20>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d101      	bne.n	800ac4a <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 800ac46:	f7f7 fbdb 	bl	8002400 <MotherboardOnStrobe>
	}
}
 800ac4a:	bf00      	nop
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	58003810 	.word	0x58003810

0800ac58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a0b      	ldr	r2, [pc, #44]	; (800ac94 <HAL_UART_RxCpltCallback+0x3c>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d101      	bne.n	800ac6e <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadServiceRecieveComplete();
 800ac6a:	f7f7 fbe9 	bl	8002440 <MotherboardOnHeadServiceRecieveComplete>
	}
	if (huart->Instance == UART4) {
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a09      	ldr	r2, [pc, #36]	; (800ac98 <HAL_UART_RxCpltCallback+0x40>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d101      	bne.n	800ac7c <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnHeadStreamRecieveComplete();
 800ac78:	f7f7 fbec 	bl	8002454 <MotherboardOnHeadStreamRecieveComplete>
	}
	if (huart->Instance == UART8) {
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a06      	ldr	r2, [pc, #24]	; (800ac9c <HAL_UART_RxCpltCallback+0x44>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d101      	bne.n	800ac8a <HAL_UART_RxCpltCallback+0x32>
		MotherboardOnBodyRecieveComplete();
 800ac86:	f7f7 fbd1 	bl	800242c <MotherboardOnBodyRecieveComplete>
	}
}
 800ac8a:	bf00      	nop
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	40004800 	.word	0x40004800
 800ac98:	40004c00 	.word	0x40004c00
 800ac9c:	40007c00 	.word	0x40007c00

0800aca0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a07      	ldr	r2, [pc, #28]	; (800accc <HAL_UART_TxCpltCallback+0x2c>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d101      	bne.n	800acb6 <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadServiceTransmitComplete();
 800acb2:	f7f7 fbd9 	bl	8002468 <MotherboardOnHeadServiceTransmitComplete>
	}
	if (huart->Instance == UART4) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a05      	ldr	r2, [pc, #20]	; (800acd0 <HAL_UART_TxCpltCallback+0x30>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d101      	bne.n	800acc4 <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnHeadStreamTransmitComplete();
 800acc0:	f7f7 fbdc 	bl	800247c <MotherboardOnHeadStreamTransmitComplete>
	}
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	40004800 	.word	0x40004800
 800acd0:	40004c00 	.word	0x40004c00

0800acd4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a07      	ldr	r2, [pc, #28]	; (800ad00 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d101      	bne.n	800acea <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 800ace6:	f7f7 fbd3 	bl	8002490 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf2:	d101      	bne.n	800acf8 <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 800acf4:	f7f7 fbd8 	bl	80024a8 <MotherboardOnImuTimerTick>
}
 800acf8:	bf00      	nop
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	40000400 	.word	0x40000400

0800ad04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ad04:	b480      	push	{r7}
 800ad06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800ad08:	b672      	cpsid	i
}
 800ad0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800ad0c:	e7fe      	b.n	800ad0c <Error_Handler+0x8>
	...

0800ad10 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800ad14:	4b28      	ldr	r3, [pc, #160]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad16:	4a29      	ldr	r2, [pc, #164]	; (800adbc <MX_SPI1_Init+0xac>)
 800ad18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ad1a:	4b27      	ldr	r3, [pc, #156]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad1c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800ad20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ad22:	4b25      	ldr	r3, [pc, #148]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ad28:	4b23      	ldr	r3, [pc, #140]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad2a:	2207      	movs	r2, #7
 800ad2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800ad2e:	4b22      	ldr	r3, [pc, #136]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ad34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800ad36:	4b20      	ldr	r3, [pc, #128]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ad3e:	4b1e      	ldr	r3, [pc, #120]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ad44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800ad46:	4b1c      	ldr	r3, [pc, #112]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ad4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ad4e:	4b1a      	ldr	r3, [pc, #104]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ad54:	4b18      	ldr	r3, [pc, #96]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad56:	2200      	movs	r2, #0
 800ad58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad5a:	4b17      	ldr	r3, [pc, #92]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800ad60:	4b15      	ldr	r3, [pc, #84]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800ad66:	4b14      	ldr	r3, [pc, #80]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ad6c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800ad6e:	4b12      	ldr	r3, [pc, #72]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800ad74:	4b10      	ldr	r3, [pc, #64]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800ad7a:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800ad80:	4b0d      	ldr	r3, [pc, #52]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800ad86:	4b0c      	ldr	r3, [pc, #48]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800ad8c:	4b0a      	ldr	r3, [pc, #40]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad8e:	2200      	movs	r2, #0
 800ad90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800ad92:	4b09      	ldr	r3, [pc, #36]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800ad98:	4b07      	ldr	r3, [pc, #28]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800ad9e:	4b06      	ldr	r3, [pc, #24]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ada4:	4804      	ldr	r0, [pc, #16]	; (800adb8 <MX_SPI1_Init+0xa8>)
 800ada6:	f009 fb57 	bl	8014458 <HAL_SPI_Init>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d001      	beq.n	800adb4 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800adb0:	f7ff ffa8 	bl	800ad04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800adb4:	bf00      	nop
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	24001614 	.word	0x24001614
 800adbc:	40013000 	.word	0x40013000

0800adc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b0b8      	sub	sp, #224	; 0xe0
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800adcc:	2200      	movs	r2, #0
 800adce:	601a      	str	r2, [r3, #0]
 800add0:	605a      	str	r2, [r3, #4]
 800add2:	609a      	str	r2, [r3, #8]
 800add4:	60da      	str	r2, [r3, #12]
 800add6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800add8:	f107 0310 	add.w	r3, r7, #16
 800addc:	22bc      	movs	r2, #188	; 0xbc
 800adde:	2100      	movs	r1, #0
 800ade0:	4618      	mov	r0, r3
 800ade2:	f012 f9d1 	bl	801d188 <memset>
  if(spiHandle->Instance==SPI1)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a60      	ldr	r2, [pc, #384]	; (800af6c <HAL_SPI_MspInit+0x1ac>)
 800adec:	4293      	cmp	r3, r2
 800adee:	f040 80b8 	bne.w	800af62 <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800adf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adf6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800adf8:	2320      	movs	r3, #32
 800adfa:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 800adfc:	2381      	movs	r3, #129	; 0x81
 800adfe:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800ae00:	2302      	movs	r3, #2
 800ae02:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800ae04:	2302      	movs	r3, #2
 800ae06:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800ae08:	2302      	movs	r3, #2
 800ae0a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800ae0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae10:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800ae12:	2300      	movs	r3, #0
 800ae14:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800ae1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ae20:	f107 0310 	add.w	r3, r7, #16
 800ae24:	4618      	mov	r0, r3
 800ae26:	f007 ffaf 	bl	8012d88 <HAL_RCCEx_PeriphCLKConfig>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d001      	beq.n	800ae34 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 800ae30:	f7ff ff68 	bl	800ad04 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ae34:	4b4e      	ldr	r3, [pc, #312]	; (800af70 <HAL_SPI_MspInit+0x1b0>)
 800ae36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae3a:	4a4d      	ldr	r2, [pc, #308]	; (800af70 <HAL_SPI_MspInit+0x1b0>)
 800ae3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ae44:	4b4a      	ldr	r3, [pc, #296]	; (800af70 <HAL_SPI_MspInit+0x1b0>)
 800ae46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae4e:	60fb      	str	r3, [r7, #12]
 800ae50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae52:	4b47      	ldr	r3, [pc, #284]	; (800af70 <HAL_SPI_MspInit+0x1b0>)
 800ae54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae58:	4a45      	ldr	r2, [pc, #276]	; (800af70 <HAL_SPI_MspInit+0x1b0>)
 800ae5a:	f043 0301 	orr.w	r3, r3, #1
 800ae5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae62:	4b43      	ldr	r3, [pc, #268]	; (800af70 <HAL_SPI_MspInit+0x1b0>)
 800ae64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	60bb      	str	r3, [r7, #8]
 800ae6e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800ae70:	23e0      	movs	r3, #224	; 0xe0
 800ae72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae76:	2302      	movs	r3, #2
 800ae78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae82:	2300      	movs	r3, #0
 800ae84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ae88:	2305      	movs	r3, #5
 800ae8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae8e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ae92:	4619      	mov	r1, r3
 800ae94:	4837      	ldr	r0, [pc, #220]	; (800af74 <HAL_SPI_MspInit+0x1b4>)
 800ae96:	f004 fb27 	bl	800f4e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 800ae9a:	4b37      	ldr	r3, [pc, #220]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800ae9c:	4a37      	ldr	r2, [pc, #220]	; (800af7c <HAL_SPI_MspInit+0x1bc>)
 800ae9e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800aea0:	4b35      	ldr	r3, [pc, #212]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800aea2:	2226      	movs	r2, #38	; 0x26
 800aea4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aea6:	4b34      	ldr	r3, [pc, #208]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800aea8:	2240      	movs	r2, #64	; 0x40
 800aeaa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aeac:	4b32      	ldr	r3, [pc, #200]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aeb2:	4b31      	ldr	r3, [pc, #196]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800aeb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aeb8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aeba:	4b2f      	ldr	r3, [pc, #188]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aec0:	4b2d      	ldr	r3, [pc, #180]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800aec6:	4b2c      	ldr	r3, [pc, #176]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800aecc:	4b2a      	ldr	r3, [pc, #168]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800aece:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aed2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aed4:	4b28      	ldr	r3, [pc, #160]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800aed6:	2200      	movs	r2, #0
 800aed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800aeda:	4827      	ldr	r0, [pc, #156]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800aedc:	f001 fcae 	bl	800c83c <HAL_DMA_Init>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 800aee6:	f7ff ff0d 	bl	800ad04 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a22      	ldr	r2, [pc, #136]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800aeee:	679a      	str	r2, [r3, #120]	; 0x78
 800aef0:	4a21      	ldr	r2, [pc, #132]	; (800af78 <HAL_SPI_MspInit+0x1b8>)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 800aef6:	4b22      	ldr	r3, [pc, #136]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800aef8:	4a22      	ldr	r2, [pc, #136]	; (800af84 <HAL_SPI_MspInit+0x1c4>)
 800aefa:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800aefc:	4b20      	ldr	r3, [pc, #128]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800aefe:	2225      	movs	r2, #37	; 0x25
 800af00:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800af02:	4b1f      	ldr	r3, [pc, #124]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800af04:	2200      	movs	r2, #0
 800af06:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800af08:	4b1d      	ldr	r3, [pc, #116]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800af0e:	4b1c      	ldr	r3, [pc, #112]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800af10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af14:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800af16:	4b1a      	ldr	r3, [pc, #104]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800af18:	2200      	movs	r2, #0
 800af1a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800af1c:	4b18      	ldr	r3, [pc, #96]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800af1e:	2200      	movs	r2, #0
 800af20:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800af22:	4b17      	ldr	r3, [pc, #92]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800af24:	2200      	movs	r2, #0
 800af26:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800af28:	4b15      	ldr	r3, [pc, #84]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800af2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800af2e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800af30:	4b13      	ldr	r3, [pc, #76]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800af32:	2200      	movs	r2, #0
 800af34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800af36:	4812      	ldr	r0, [pc, #72]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800af38:	f001 fc80 	bl	800c83c <HAL_DMA_Init>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 800af42:	f7ff fedf 	bl	800ad04 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a0d      	ldr	r2, [pc, #52]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800af4a:	67da      	str	r2, [r3, #124]	; 0x7c
 800af4c:	4a0c      	ldr	r2, [pc, #48]	; (800af80 <HAL_SPI_MspInit+0x1c0>)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800af52:	2200      	movs	r2, #0
 800af54:	2100      	movs	r1, #0
 800af56:	2023      	movs	r0, #35	; 0x23
 800af58:	f001 fa73 	bl	800c442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800af5c:	2023      	movs	r0, #35	; 0x23
 800af5e:	f001 fa8a 	bl	800c476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800af62:	bf00      	nop
 800af64:	37e0      	adds	r7, #224	; 0xe0
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	40013000 	.word	0x40013000
 800af70:	58024400 	.word	0x58024400
 800af74:	58020000 	.word	0x58020000
 800af78:	2400169c 	.word	0x2400169c
 800af7c:	40020070 	.word	0x40020070
 800af80:	24001714 	.word	0x24001714
 800af84:	40020088 	.word	0x40020088

0800af88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af8e:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <HAL_MspInit+0x30>)
 800af90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800af94:	4a08      	ldr	r2, [pc, #32]	; (800afb8 <HAL_MspInit+0x30>)
 800af96:	f043 0302 	orr.w	r3, r3, #2
 800af9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800af9e:	4b06      	ldr	r3, [pc, #24]	; (800afb8 <HAL_MspInit+0x30>)
 800afa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800afa4:	f003 0302 	and.w	r3, r3, #2
 800afa8:	607b      	str	r3, [r7, #4]
 800afaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800afac:	bf00      	nop
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	58024400 	.word	0x58024400

0800afbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800afbc:	b480      	push	{r7}
 800afbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800afc0:	e7fe      	b.n	800afc0 <NMI_Handler+0x4>

0800afc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800afc2:	b480      	push	{r7}
 800afc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800afc6:	e7fe      	b.n	800afc6 <HardFault_Handler+0x4>

0800afc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800afc8:	b480      	push	{r7}
 800afca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800afcc:	e7fe      	b.n	800afcc <MemManage_Handler+0x4>

0800afce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800afce:	b480      	push	{r7}
 800afd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800afd2:	e7fe      	b.n	800afd2 <BusFault_Handler+0x4>

0800afd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800afd4:	b480      	push	{r7}
 800afd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800afd8:	e7fe      	b.n	800afd8 <UsageFault_Handler+0x4>

0800afda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800afda:	b480      	push	{r7}
 800afdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800afde:	bf00      	nop
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800afe8:	b480      	push	{r7}
 800afea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800afec:	bf00      	nop
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr

0800aff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800aff6:	b480      	push	{r7}
 800aff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800affa:	bf00      	nop
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b008:	f000 ff08 	bl	800be1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b00c:	bf00      	nop
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800b014:	4802      	ldr	r0, [pc, #8]	; (800b020 <DMA1_Stream0_IRQHandler+0x10>)
 800b016:	f002 ff3b 	bl	800de90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800b01a:	bf00      	nop
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	24001524 	.word	0x24001524

0800b024 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800b028:	4802      	ldr	r0, [pc, #8]	; (800b034 <DMA1_Stream1_IRQHandler+0x10>)
 800b02a:	f002 ff31 	bl	800de90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b02e:	bf00      	nop
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	2400159c 	.word	0x2400159c

0800b038 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800b03c:	4802      	ldr	r0, [pc, #8]	; (800b048 <DMA1_Stream4_IRQHandler+0x10>)
 800b03e:	f002 ff27 	bl	800de90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b042:	bf00      	nop
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	2400169c 	.word	0x2400169c

0800b04c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800b050:	4802      	ldr	r0, [pc, #8]	; (800b05c <DMA1_Stream5_IRQHandler+0x10>)
 800b052:	f002 ff1d 	bl	800de90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800b056:	bf00      	nop
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	24001714 	.word	0x24001714

0800b060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b064:	4802      	ldr	r0, [pc, #8]	; (800b070 <TIM2_IRQHandler+0x10>)
 800b066:	f00a fbf3 	bl	8015850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b06a:	bf00      	nop
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	24001790 	.word	0x24001790

0800b074 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b078:	4802      	ldr	r0, [pc, #8]	; (800b084 <TIM3_IRQHandler+0x10>)
 800b07a:	f00a fbe9 	bl	8015850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b07e:	bf00      	nop
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	240017dc 	.word	0x240017dc

0800b088 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800b08c:	4802      	ldr	r0, [pc, #8]	; (800b098 <TIM4_IRQHandler+0x10>)
 800b08e:	f00a fbdf 	bl	8015850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800b092:	bf00      	nop
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	24001828 	.word	0x24001828

0800b09c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800b0a0:	4802      	ldr	r0, [pc, #8]	; (800b0ac <I2C2_EV_IRQHandler+0x10>)
 800b0a2:	f004 fc7b 	bl	800f99c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800b0a6:	bf00      	nop
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	240014d8 	.word	0x240014d8

0800b0b0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800b0b4:	4802      	ldr	r0, [pc, #8]	; (800b0c0 <I2C2_ER_IRQHandler+0x10>)
 800b0b6:	f004 fc8b 	bl	800f9d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800b0ba:	bf00      	nop
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	240014d8 	.word	0x240014d8

0800b0c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800b0c8:	4802      	ldr	r0, [pc, #8]	; (800b0d4 <SPI1_IRQHandler+0x10>)
 800b0ca:	f009 ff47 	bl	8014f5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800b0ce:	bf00      	nop
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	24001614 	.word	0x24001614

0800b0d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b0dc:	4802      	ldr	r0, [pc, #8]	; (800b0e8 <USART3_IRQHandler+0x10>)
 800b0de:	f00b fa93 	bl	8016608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b0e2:	bf00      	nop
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	24001ab4 	.word	0x24001ab4

0800b0ec <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800b0f0:	4802      	ldr	r0, [pc, #8]	; (800b0fc <UART8_IRQHandler+0x10>)
 800b0f2:	f00b fa89 	bl	8016608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800b0f6:	bf00      	nop
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	24001994 	.word	0x24001994

0800b100 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b104:	4802      	ldr	r0, [pc, #8]	; (800b110 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 800b106:	f005 fcbc 	bl	8010a82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800b10a:	bf00      	nop
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	24003028 	.word	0x24003028

0800b114 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b118:	4802      	ldr	r0, [pc, #8]	; (800b124 <OTG_FS_IRQHandler+0x10>)
 800b11a:	f005 fcb2 	bl	8010a82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b11e:	bf00      	nop
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	24003028 	.word	0x24003028

0800b128 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 800b12c:	4802      	ldr	r0, [pc, #8]	; (800b138 <COMP1_IRQHandler+0x10>)
 800b12e:	f001 f839 	bl	800c1a4 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 800b132:	bf00      	nop
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	24001498 	.word	0x24001498

0800b13c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b13c:	b480      	push	{r7}
 800b13e:	af00      	add	r7, sp, #0
	return 1;
 800b140:	2301      	movs	r3, #1
}
 800b142:	4618      	mov	r0, r3
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <_kill>:

int _kill(int pid, int sig)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b156:	f011 ffa3 	bl	801d0a0 <__errno>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2216      	movs	r2, #22
 800b15e:	601a      	str	r2, [r3, #0]
	return -1;
 800b160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <_exit>:

void _exit (int status)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b174:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f7ff ffe7 	bl	800b14c <_kill>
	while (1) {}		/* Make sure we hang here */
 800b17e:	e7fe      	b.n	800b17e <_exit+0x12>

0800b180 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b18c:	2300      	movs	r3, #0
 800b18e:	617b      	str	r3, [r7, #20]
 800b190:	e00a      	b.n	800b1a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b192:	f3af 8000 	nop.w
 800b196:	4601      	mov	r1, r0
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	1c5a      	adds	r2, r3, #1
 800b19c:	60ba      	str	r2, [r7, #8]
 800b19e:	b2ca      	uxtb	r2, r1
 800b1a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	dbf0      	blt.n	800b192 <_read+0x12>
	}

return len;
 800b1b0:	687b      	ldr	r3, [r7, #4]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b086      	sub	sp, #24
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	617b      	str	r3, [r7, #20]
 800b1ca:	e009      	b.n	800b1e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	60ba      	str	r2, [r7, #8]
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	617b      	str	r3, [r7, #20]
 800b1e0:	697a      	ldr	r2, [r7, #20]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	dbf1      	blt.n	800b1cc <_write+0x12>
	}
	return len;
 800b1e8:	687b      	ldr	r3, [r7, #4]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <_close>:

int _close(int file)
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b083      	sub	sp, #12
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
	return -1;
 800b1fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	370c      	adds	r7, #12
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr

0800b20a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b20a:	b480      	push	{r7}
 800b20c:	b083      	sub	sp, #12
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b21a:	605a      	str	r2, [r3, #4]
	return 0;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <_isatty>:

int _isatty(int file)
{
 800b22a:	b480      	push	{r7}
 800b22c:	b083      	sub	sp, #12
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
	return 1;
 800b232:	2301      	movs	r3, #1
}
 800b234:	4618      	mov	r0, r3
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
	return 0;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3714      	adds	r7, #20
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
	...

0800b25c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b264:	4a14      	ldr	r2, [pc, #80]	; (800b2b8 <_sbrk+0x5c>)
 800b266:	4b15      	ldr	r3, [pc, #84]	; (800b2bc <_sbrk+0x60>)
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b270:	4b13      	ldr	r3, [pc, #76]	; (800b2c0 <_sbrk+0x64>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d102      	bne.n	800b27e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b278:	4b11      	ldr	r3, [pc, #68]	; (800b2c0 <_sbrk+0x64>)
 800b27a:	4a12      	ldr	r2, [pc, #72]	; (800b2c4 <_sbrk+0x68>)
 800b27c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b27e:	4b10      	ldr	r3, [pc, #64]	; (800b2c0 <_sbrk+0x64>)
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4413      	add	r3, r2
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d207      	bcs.n	800b29c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b28c:	f011 ff08 	bl	801d0a0 <__errno>
 800b290:	4603      	mov	r3, r0
 800b292:	220c      	movs	r2, #12
 800b294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b29a:	e009      	b.n	800b2b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b29c:	4b08      	ldr	r3, [pc, #32]	; (800b2c0 <_sbrk+0x64>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b2a2:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <_sbrk+0x64>)
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	4a05      	ldr	r2, [pc, #20]	; (800b2c0 <_sbrk+0x64>)
 800b2ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3718      	adds	r7, #24
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	24080000 	.word	0x24080000
 800b2bc:	00000400 	.word	0x00000400
 800b2c0:	2400178c 	.word	0x2400178c
 800b2c4:	24003768 	.word	0x24003768

0800b2c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b2cc:	4b37      	ldr	r3, [pc, #220]	; (800b3ac <SystemInit+0xe4>)
 800b2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2d2:	4a36      	ldr	r2, [pc, #216]	; (800b3ac <SystemInit+0xe4>)
 800b2d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b2dc:	4b34      	ldr	r3, [pc, #208]	; (800b3b0 <SystemInit+0xe8>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 030f 	and.w	r3, r3, #15
 800b2e4:	2b06      	cmp	r3, #6
 800b2e6:	d807      	bhi.n	800b2f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b2e8:	4b31      	ldr	r3, [pc, #196]	; (800b3b0 <SystemInit+0xe8>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f023 030f 	bic.w	r3, r3, #15
 800b2f0:	4a2f      	ldr	r2, [pc, #188]	; (800b3b0 <SystemInit+0xe8>)
 800b2f2:	f043 0307 	orr.w	r3, r3, #7
 800b2f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b2f8:	4b2e      	ldr	r3, [pc, #184]	; (800b3b4 <SystemInit+0xec>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a2d      	ldr	r2, [pc, #180]	; (800b3b4 <SystemInit+0xec>)
 800b2fe:	f043 0301 	orr.w	r3, r3, #1
 800b302:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b304:	4b2b      	ldr	r3, [pc, #172]	; (800b3b4 <SystemInit+0xec>)
 800b306:	2200      	movs	r2, #0
 800b308:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b30a:	4b2a      	ldr	r3, [pc, #168]	; (800b3b4 <SystemInit+0xec>)
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	4929      	ldr	r1, [pc, #164]	; (800b3b4 <SystemInit+0xec>)
 800b310:	4b29      	ldr	r3, [pc, #164]	; (800b3b8 <SystemInit+0xf0>)
 800b312:	4013      	ands	r3, r2
 800b314:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b316:	4b26      	ldr	r3, [pc, #152]	; (800b3b0 <SystemInit+0xe8>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f003 0308 	and.w	r3, r3, #8
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d007      	beq.n	800b332 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b322:	4b23      	ldr	r3, [pc, #140]	; (800b3b0 <SystemInit+0xe8>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f023 030f 	bic.w	r3, r3, #15
 800b32a:	4a21      	ldr	r2, [pc, #132]	; (800b3b0 <SystemInit+0xe8>)
 800b32c:	f043 0307 	orr.w	r3, r3, #7
 800b330:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b332:	4b20      	ldr	r3, [pc, #128]	; (800b3b4 <SystemInit+0xec>)
 800b334:	2200      	movs	r2, #0
 800b336:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b338:	4b1e      	ldr	r3, [pc, #120]	; (800b3b4 <SystemInit+0xec>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b33e:	4b1d      	ldr	r3, [pc, #116]	; (800b3b4 <SystemInit+0xec>)
 800b340:	2200      	movs	r2, #0
 800b342:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b344:	4b1b      	ldr	r3, [pc, #108]	; (800b3b4 <SystemInit+0xec>)
 800b346:	4a1d      	ldr	r2, [pc, #116]	; (800b3bc <SystemInit+0xf4>)
 800b348:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b34a:	4b1a      	ldr	r3, [pc, #104]	; (800b3b4 <SystemInit+0xec>)
 800b34c:	4a1c      	ldr	r2, [pc, #112]	; (800b3c0 <SystemInit+0xf8>)
 800b34e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b350:	4b18      	ldr	r3, [pc, #96]	; (800b3b4 <SystemInit+0xec>)
 800b352:	4a1c      	ldr	r2, [pc, #112]	; (800b3c4 <SystemInit+0xfc>)
 800b354:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b356:	4b17      	ldr	r3, [pc, #92]	; (800b3b4 <SystemInit+0xec>)
 800b358:	2200      	movs	r2, #0
 800b35a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b35c:	4b15      	ldr	r3, [pc, #84]	; (800b3b4 <SystemInit+0xec>)
 800b35e:	4a19      	ldr	r2, [pc, #100]	; (800b3c4 <SystemInit+0xfc>)
 800b360:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b362:	4b14      	ldr	r3, [pc, #80]	; (800b3b4 <SystemInit+0xec>)
 800b364:	2200      	movs	r2, #0
 800b366:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b368:	4b12      	ldr	r3, [pc, #72]	; (800b3b4 <SystemInit+0xec>)
 800b36a:	4a16      	ldr	r2, [pc, #88]	; (800b3c4 <SystemInit+0xfc>)
 800b36c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b36e:	4b11      	ldr	r3, [pc, #68]	; (800b3b4 <SystemInit+0xec>)
 800b370:	2200      	movs	r2, #0
 800b372:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b374:	4b0f      	ldr	r3, [pc, #60]	; (800b3b4 <SystemInit+0xec>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a0e      	ldr	r2, [pc, #56]	; (800b3b4 <SystemInit+0xec>)
 800b37a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b37e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b380:	4b0c      	ldr	r3, [pc, #48]	; (800b3b4 <SystemInit+0xec>)
 800b382:	2200      	movs	r2, #0
 800b384:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b386:	4b10      	ldr	r3, [pc, #64]	; (800b3c8 <SystemInit+0x100>)
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	4b10      	ldr	r3, [pc, #64]	; (800b3cc <SystemInit+0x104>)
 800b38c:	4013      	ands	r3, r2
 800b38e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b392:	d202      	bcs.n	800b39a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b394:	4b0e      	ldr	r3, [pc, #56]	; (800b3d0 <SystemInit+0x108>)
 800b396:	2201      	movs	r2, #1
 800b398:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b39a:	4b0e      	ldr	r3, [pc, #56]	; (800b3d4 <SystemInit+0x10c>)
 800b39c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800b3a0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b3a2:	bf00      	nop
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	e000ed00 	.word	0xe000ed00
 800b3b0:	52002000 	.word	0x52002000
 800b3b4:	58024400 	.word	0x58024400
 800b3b8:	eaf6ed7f 	.word	0xeaf6ed7f
 800b3bc:	02020200 	.word	0x02020200
 800b3c0:	01ff0000 	.word	0x01ff0000
 800b3c4:	01010280 	.word	0x01010280
 800b3c8:	5c001000 	.word	0x5c001000
 800b3cc:	ffff0000 	.word	0xffff0000
 800b3d0:	51008108 	.word	0x51008108
 800b3d4:	52004000 	.word	0x52004000

0800b3d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b088      	sub	sp, #32
 800b3dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b3de:	f107 0310 	add.w	r3, r7, #16
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	601a      	str	r2, [r3, #0]
 800b3e6:	605a      	str	r2, [r3, #4]
 800b3e8:	609a      	str	r2, [r3, #8]
 800b3ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b3ec:	1d3b      	adds	r3, r7, #4
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	605a      	str	r2, [r3, #4]
 800b3f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b3f6:	4b1e      	ldr	r3, [pc, #120]	; (800b470 <MX_TIM2_Init+0x98>)
 800b3f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b3fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 800b3fe:	4b1c      	ldr	r3, [pc, #112]	; (800b470 <MX_TIM2_Init+0x98>)
 800b400:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b404:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b406:	4b1a      	ldr	r3, [pc, #104]	; (800b470 <MX_TIM2_Init+0x98>)
 800b408:	2200      	movs	r2, #0
 800b40a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800b40c:	4b18      	ldr	r3, [pc, #96]	; (800b470 <MX_TIM2_Init+0x98>)
 800b40e:	2264      	movs	r2, #100	; 0x64
 800b410:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b412:	4b17      	ldr	r3, [pc, #92]	; (800b470 <MX_TIM2_Init+0x98>)
 800b414:	2200      	movs	r2, #0
 800b416:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b418:	4b15      	ldr	r3, [pc, #84]	; (800b470 <MX_TIM2_Init+0x98>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b41e:	4814      	ldr	r0, [pc, #80]	; (800b470 <MX_TIM2_Init+0x98>)
 800b420:	f00a f947 	bl	80156b2 <HAL_TIM_Base_Init>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b42a:	f7ff fc6b 	bl	800ad04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b42e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b432:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b434:	f107 0310 	add.w	r3, r7, #16
 800b438:	4619      	mov	r1, r3
 800b43a:	480d      	ldr	r0, [pc, #52]	; (800b470 <MX_TIM2_Init+0x98>)
 800b43c:	f00a fb28 	bl	8015a90 <HAL_TIM_ConfigClockSource>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b446:	f7ff fc5d 	bl	800ad04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b44a:	2300      	movs	r3, #0
 800b44c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b44e:	2300      	movs	r3, #0
 800b450:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b452:	1d3b      	adds	r3, r7, #4
 800b454:	4619      	mov	r1, r3
 800b456:	4806      	ldr	r0, [pc, #24]	; (800b470 <MX_TIM2_Init+0x98>)
 800b458:	f00a fd72 	bl	8015f40 <HAL_TIMEx_MasterConfigSynchronization>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b462:	f7ff fc4f 	bl	800ad04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b466:	bf00      	nop
 800b468:	3720      	adds	r7, #32
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	24001790 	.word	0x24001790

0800b474 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b47a:	f107 0310 	add.w	r3, r7, #16
 800b47e:	2200      	movs	r2, #0
 800b480:	601a      	str	r2, [r3, #0]
 800b482:	605a      	str	r2, [r3, #4]
 800b484:	609a      	str	r2, [r3, #8]
 800b486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b488:	1d3b      	adds	r3, r7, #4
 800b48a:	2200      	movs	r2, #0
 800b48c:	601a      	str	r2, [r3, #0]
 800b48e:	605a      	str	r2, [r3, #4]
 800b490:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b492:	4b1d      	ldr	r3, [pc, #116]	; (800b508 <MX_TIM3_Init+0x94>)
 800b494:	4a1d      	ldr	r2, [pc, #116]	; (800b50c <MX_TIM3_Init+0x98>)
 800b496:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 800b498:	4b1b      	ldr	r3, [pc, #108]	; (800b508 <MX_TIM3_Init+0x94>)
 800b49a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b49e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4a0:	4b19      	ldr	r3, [pc, #100]	; (800b508 <MX_TIM3_Init+0x94>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800b4a6:	4b18      	ldr	r3, [pc, #96]	; (800b508 <MX_TIM3_Init+0x94>)
 800b4a8:	2264      	movs	r2, #100	; 0x64
 800b4aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b4ac:	4b16      	ldr	r3, [pc, #88]	; (800b508 <MX_TIM3_Init+0x94>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b4b2:	4b15      	ldr	r3, [pc, #84]	; (800b508 <MX_TIM3_Init+0x94>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b4b8:	4813      	ldr	r0, [pc, #76]	; (800b508 <MX_TIM3_Init+0x94>)
 800b4ba:	f00a f8fa 	bl	80156b2 <HAL_TIM_Base_Init>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800b4c4:	f7ff fc1e 	bl	800ad04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b4c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b4ce:	f107 0310 	add.w	r3, r7, #16
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	480c      	ldr	r0, [pc, #48]	; (800b508 <MX_TIM3_Init+0x94>)
 800b4d6:	f00a fadb 	bl	8015a90 <HAL_TIM_ConfigClockSource>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d001      	beq.n	800b4e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800b4e0:	f7ff fc10 	bl	800ad04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b4ec:	1d3b      	adds	r3, r7, #4
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	4805      	ldr	r0, [pc, #20]	; (800b508 <MX_TIM3_Init+0x94>)
 800b4f2:	f00a fd25 	bl	8015f40 <HAL_TIMEx_MasterConfigSynchronization>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d001      	beq.n	800b500 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800b4fc:	f7ff fc02 	bl	800ad04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b500:	bf00      	nop
 800b502:	3720      	adds	r7, #32
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	240017dc 	.word	0x240017dc
 800b50c:	40000400 	.word	0x40000400

0800b510 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b088      	sub	sp, #32
 800b514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b516:	f107 0310 	add.w	r3, r7, #16
 800b51a:	2200      	movs	r2, #0
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	605a      	str	r2, [r3, #4]
 800b520:	609a      	str	r2, [r3, #8]
 800b522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b524:	1d3b      	adds	r3, r7, #4
 800b526:	2200      	movs	r2, #0
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	605a      	str	r2, [r3, #4]
 800b52c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b52e:	4b1d      	ldr	r3, [pc, #116]	; (800b5a4 <MX_TIM4_Init+0x94>)
 800b530:	4a1d      	ldr	r2, [pc, #116]	; (800b5a8 <MX_TIM4_Init+0x98>)
 800b532:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 800b534:	4b1b      	ldr	r3, [pc, #108]	; (800b5a4 <MX_TIM4_Init+0x94>)
 800b536:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b53a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b53c:	4b19      	ldr	r3, [pc, #100]	; (800b5a4 <MX_TIM4_Init+0x94>)
 800b53e:	2200      	movs	r2, #0
 800b540:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800b542:	4b18      	ldr	r3, [pc, #96]	; (800b5a4 <MX_TIM4_Init+0x94>)
 800b544:	2264      	movs	r2, #100	; 0x64
 800b546:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b548:	4b16      	ldr	r3, [pc, #88]	; (800b5a4 <MX_TIM4_Init+0x94>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b54e:	4b15      	ldr	r3, [pc, #84]	; (800b5a4 <MX_TIM4_Init+0x94>)
 800b550:	2200      	movs	r2, #0
 800b552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b554:	4813      	ldr	r0, [pc, #76]	; (800b5a4 <MX_TIM4_Init+0x94>)
 800b556:	f00a f8ac 	bl	80156b2 <HAL_TIM_Base_Init>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d001      	beq.n	800b564 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800b560:	f7ff fbd0 	bl	800ad04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b568:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b56a:	f107 0310 	add.w	r3, r7, #16
 800b56e:	4619      	mov	r1, r3
 800b570:	480c      	ldr	r0, [pc, #48]	; (800b5a4 <MX_TIM4_Init+0x94>)
 800b572:	f00a fa8d 	bl	8015a90 <HAL_TIM_ConfigClockSource>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800b57c:	f7ff fbc2 	bl	800ad04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b580:	2300      	movs	r3, #0
 800b582:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b584:	2300      	movs	r3, #0
 800b586:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b588:	1d3b      	adds	r3, r7, #4
 800b58a:	4619      	mov	r1, r3
 800b58c:	4805      	ldr	r0, [pc, #20]	; (800b5a4 <MX_TIM4_Init+0x94>)
 800b58e:	f00a fcd7 	bl	8015f40 <HAL_TIMEx_MasterConfigSynchronization>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800b598:	f7ff fbb4 	bl	800ad04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800b59c:	bf00      	nop
 800b59e:	3720      	adds	r7, #32
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	24001828 	.word	0x24001828
 800b5a8:	40000800 	.word	0x40000800

0800b5ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5bc:	d117      	bne.n	800b5ee <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b5be:	4b2a      	ldr	r3, [pc, #168]	; (800b668 <HAL_TIM_Base_MspInit+0xbc>)
 800b5c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b5c4:	4a28      	ldr	r2, [pc, #160]	; (800b668 <HAL_TIM_Base_MspInit+0xbc>)
 800b5c6:	f043 0301 	orr.w	r3, r3, #1
 800b5ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b5ce:	4b26      	ldr	r3, [pc, #152]	; (800b668 <HAL_TIM_Base_MspInit+0xbc>)
 800b5d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	617b      	str	r3, [r7, #20]
 800b5da:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b5dc:	2200      	movs	r2, #0
 800b5de:	2100      	movs	r1, #0
 800b5e0:	201c      	movs	r0, #28
 800b5e2:	f000 ff2e 	bl	800c442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b5e6:	201c      	movs	r0, #28
 800b5e8:	f000 ff45 	bl	800c476 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800b5ec:	e038      	b.n	800b660 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a1e      	ldr	r2, [pc, #120]	; (800b66c <HAL_TIM_Base_MspInit+0xc0>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d117      	bne.n	800b628 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b5f8:	4b1b      	ldr	r3, [pc, #108]	; (800b668 <HAL_TIM_Base_MspInit+0xbc>)
 800b5fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b5fe:	4a1a      	ldr	r2, [pc, #104]	; (800b668 <HAL_TIM_Base_MspInit+0xbc>)
 800b600:	f043 0302 	orr.w	r3, r3, #2
 800b604:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b608:	4b17      	ldr	r3, [pc, #92]	; (800b668 <HAL_TIM_Base_MspInit+0xbc>)
 800b60a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b60e:	f003 0302 	and.w	r3, r3, #2
 800b612:	613b      	str	r3, [r7, #16]
 800b614:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b616:	2200      	movs	r2, #0
 800b618:	2100      	movs	r1, #0
 800b61a:	201d      	movs	r0, #29
 800b61c:	f000 ff11 	bl	800c442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b620:	201d      	movs	r0, #29
 800b622:	f000 ff28 	bl	800c476 <HAL_NVIC_EnableIRQ>
}
 800b626:	e01b      	b.n	800b660 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a10      	ldr	r2, [pc, #64]	; (800b670 <HAL_TIM_Base_MspInit+0xc4>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d116      	bne.n	800b660 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b632:	4b0d      	ldr	r3, [pc, #52]	; (800b668 <HAL_TIM_Base_MspInit+0xbc>)
 800b634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b638:	4a0b      	ldr	r2, [pc, #44]	; (800b668 <HAL_TIM_Base_MspInit+0xbc>)
 800b63a:	f043 0304 	orr.w	r3, r3, #4
 800b63e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b642:	4b09      	ldr	r3, [pc, #36]	; (800b668 <HAL_TIM_Base_MspInit+0xbc>)
 800b644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b648:	f003 0304 	and.w	r3, r3, #4
 800b64c:	60fb      	str	r3, [r7, #12]
 800b64e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800b650:	2200      	movs	r2, #0
 800b652:	2100      	movs	r1, #0
 800b654:	201e      	movs	r0, #30
 800b656:	f000 fef4 	bl	800c442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b65a:	201e      	movs	r0, #30
 800b65c:	f000 ff0b 	bl	800c476 <HAL_NVIC_EnableIRQ>
}
 800b660:	bf00      	nop
 800b662:	3718      	adds	r7, #24
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	58024400 	.word	0x58024400
 800b66c:	40000400 	.word	0x40000400
 800b670:	40000800 	.word	0x40000800

0800b674 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800b678:	4b24      	ldr	r3, [pc, #144]	; (800b70c <MX_UART4_Init+0x98>)
 800b67a:	4a25      	ldr	r2, [pc, #148]	; (800b710 <MX_UART4_Init+0x9c>)
 800b67c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b67e:	4b23      	ldr	r3, [pc, #140]	; (800b70c <MX_UART4_Init+0x98>)
 800b680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b684:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800b686:	4b21      	ldr	r3, [pc, #132]	; (800b70c <MX_UART4_Init+0x98>)
 800b688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b68c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b68e:	4b1f      	ldr	r3, [pc, #124]	; (800b70c <MX_UART4_Init+0x98>)
 800b690:	2200      	movs	r2, #0
 800b692:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800b694:	4b1d      	ldr	r3, [pc, #116]	; (800b70c <MX_UART4_Init+0x98>)
 800b696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b69a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b69c:	4b1b      	ldr	r3, [pc, #108]	; (800b70c <MX_UART4_Init+0x98>)
 800b69e:	220c      	movs	r2, #12
 800b6a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b6a2:	4b1a      	ldr	r3, [pc, #104]	; (800b70c <MX_UART4_Init+0x98>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b6a8:	4b18      	ldr	r3, [pc, #96]	; (800b70c <MX_UART4_Init+0x98>)
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b6ae:	4b17      	ldr	r3, [pc, #92]	; (800b70c <MX_UART4_Init+0x98>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b6b4:	4b15      	ldr	r3, [pc, #84]	; (800b70c <MX_UART4_Init+0x98>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b6ba:	4b14      	ldr	r3, [pc, #80]	; (800b70c <MX_UART4_Init+0x98>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b6c0:	4812      	ldr	r0, [pc, #72]	; (800b70c <MX_UART4_Init+0x98>)
 800b6c2:	f00a fce9 	bl	8016098 <HAL_UART_Init>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 800b6cc:	f7ff fb1a 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b6d0:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800b6d4:	480d      	ldr	r0, [pc, #52]	; (800b70c <MX_UART4_Init+0x98>)
 800b6d6:	f00d facb 	bl	8018c70 <HAL_UARTEx_SetTxFifoThreshold>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <MX_UART4_Init+0x70>
  {
    Error_Handler();
 800b6e0:	f7ff fb10 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b6e4:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800b6e8:	4808      	ldr	r0, [pc, #32]	; (800b70c <MX_UART4_Init+0x98>)
 800b6ea:	f00d faff 	bl	8018cec <HAL_UARTEx_SetRxFifoThreshold>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <MX_UART4_Init+0x84>
  {
    Error_Handler();
 800b6f4:	f7ff fb06 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 800b6f8:	4804      	ldr	r0, [pc, #16]	; (800b70c <MX_UART4_Init+0x98>)
 800b6fa:	f00d fa45 	bl	8018b88 <HAL_UARTEx_EnableFifoMode>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <MX_UART4_Init+0x94>
  {
    Error_Handler();
 800b704:	f7ff fafe 	bl	800ad04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800b708:	bf00      	nop
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	24001874 	.word	0x24001874
 800b710:	40004c00 	.word	0x40004c00

0800b714 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800b718:	4b22      	ldr	r3, [pc, #136]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b71a:	4a23      	ldr	r2, [pc, #140]	; (800b7a8 <MX_UART7_Init+0x94>)
 800b71c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 800b71e:	4b21      	ldr	r3, [pc, #132]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b720:	4a22      	ldr	r2, [pc, #136]	; (800b7ac <MX_UART7_Init+0x98>)
 800b722:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800b724:	4b1f      	ldr	r3, [pc, #124]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b726:	2200      	movs	r2, #0
 800b728:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800b72a:	4b1e      	ldr	r3, [pc, #120]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800b730:	4b1c      	ldr	r3, [pc, #112]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b732:	2200      	movs	r2, #0
 800b734:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800b736:	4b1b      	ldr	r3, [pc, #108]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b738:	220c      	movs	r2, #12
 800b73a:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b73c:	4b19      	ldr	r3, [pc, #100]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b73e:	2200      	movs	r2, #0
 800b740:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800b742:	4b18      	ldr	r3, [pc, #96]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b744:	2200      	movs	r2, #0
 800b746:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b748:	4b16      	ldr	r3, [pc, #88]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b74e:	4b15      	ldr	r3, [pc, #84]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b750:	2200      	movs	r2, #0
 800b752:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b754:	4b13      	ldr	r3, [pc, #76]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b756:	2200      	movs	r2, #0
 800b758:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800b75a:	4812      	ldr	r0, [pc, #72]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b75c:	f00a fc9c 	bl	8016098 <HAL_UART_Init>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d001      	beq.n	800b76a <MX_UART7_Init+0x56>
  {
    Error_Handler();
 800b766:	f7ff facd 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b76a:	2100      	movs	r1, #0
 800b76c:	480d      	ldr	r0, [pc, #52]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b76e:	f00d fa7f 	bl	8018c70 <HAL_UARTEx_SetTxFifoThreshold>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d001      	beq.n	800b77c <MX_UART7_Init+0x68>
  {
    Error_Handler();
 800b778:	f7ff fac4 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b77c:	2100      	movs	r1, #0
 800b77e:	4809      	ldr	r0, [pc, #36]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b780:	f00d fab4 	bl	8018cec <HAL_UARTEx_SetRxFifoThreshold>
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d001      	beq.n	800b78e <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 800b78a:	f7ff fabb 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800b78e:	4805      	ldr	r0, [pc, #20]	; (800b7a4 <MX_UART7_Init+0x90>)
 800b790:	f00d fa35 	bl	8018bfe <HAL_UARTEx_DisableFifoMode>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 800b79a:	f7ff fab3 	bl	800ad04 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800b79e:	bf00      	nop
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	24001904 	.word	0x24001904
 800b7a8:	40007800 	.word	0x40007800
 800b7ac:	001312d0 	.word	0x001312d0

0800b7b0 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800b7b4:	4b26      	ldr	r3, [pc, #152]	; (800b850 <MX_UART8_Init+0xa0>)
 800b7b6:	4a27      	ldr	r2, [pc, #156]	; (800b854 <MX_UART8_Init+0xa4>)
 800b7b8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 800b7ba:	4b25      	ldr	r3, [pc, #148]	; (800b850 <MX_UART8_Init+0xa0>)
 800b7bc:	4a26      	ldr	r2, [pc, #152]	; (800b858 <MX_UART8_Init+0xa8>)
 800b7be:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 800b7c0:	4b23      	ldr	r3, [pc, #140]	; (800b850 <MX_UART8_Init+0xa0>)
 800b7c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b7c6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800b7c8:	4b21      	ldr	r3, [pc, #132]	; (800b850 <MX_UART8_Init+0xa0>)
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 800b7ce:	4b20      	ldr	r3, [pc, #128]	; (800b850 <MX_UART8_Init+0xa0>)
 800b7d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b7d4:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800b7d6:	4b1e      	ldr	r3, [pc, #120]	; (800b850 <MX_UART8_Init+0xa0>)
 800b7d8:	220c      	movs	r2, #12
 800b7da:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b7dc:	4b1c      	ldr	r3, [pc, #112]	; (800b850 <MX_UART8_Init+0xa0>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800b7e2:	4b1b      	ldr	r3, [pc, #108]	; (800b850 <MX_UART8_Init+0xa0>)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b7e8:	4b19      	ldr	r3, [pc, #100]	; (800b850 <MX_UART8_Init+0xa0>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b7ee:	4b18      	ldr	r3, [pc, #96]	; (800b850 <MX_UART8_Init+0xa0>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800b7f4:	4b16      	ldr	r3, [pc, #88]	; (800b850 <MX_UART8_Init+0xa0>)
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800b7fa:	4b15      	ldr	r3, [pc, #84]	; (800b850 <MX_UART8_Init+0xa0>)
 800b7fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b800:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800b802:	4813      	ldr	r0, [pc, #76]	; (800b850 <MX_UART8_Init+0xa0>)
 800b804:	f00a fc48 	bl	8016098 <HAL_UART_Init>
 800b808:	4603      	mov	r3, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <MX_UART8_Init+0x62>
  {
    Error_Handler();
 800b80e:	f7ff fa79 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b812:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800b816:	480e      	ldr	r0, [pc, #56]	; (800b850 <MX_UART8_Init+0xa0>)
 800b818:	f00d fa2a 	bl	8018c70 <HAL_UARTEx_SetTxFifoThreshold>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <MX_UART8_Init+0x76>
  {
    Error_Handler();
 800b822:	f7ff fa6f 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b826:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800b82a:	4809      	ldr	r0, [pc, #36]	; (800b850 <MX_UART8_Init+0xa0>)
 800b82c:	f00d fa5e 	bl	8018cec <HAL_UARTEx_SetRxFifoThreshold>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 800b836:	f7ff fa65 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 800b83a:	4805      	ldr	r0, [pc, #20]	; (800b850 <MX_UART8_Init+0xa0>)
 800b83c:	f00d f9a4 	bl	8018b88 <HAL_UARTEx_EnableFifoMode>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d001      	beq.n	800b84a <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 800b846:	f7ff fa5d 	bl	800ad04 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800b84a:	bf00      	nop
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	24001994 	.word	0x24001994
 800b854:	40007c00 	.word	0x40007c00
 800b858:	001312d0 	.word	0x001312d0

0800b85c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b860:	4b22      	ldr	r3, [pc, #136]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b862:	4a23      	ldr	r2, [pc, #140]	; (800b8f0 <MX_USART2_UART_Init+0x94>)
 800b864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b866:	4b21      	ldr	r3, [pc, #132]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b86c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b86e:	4b1f      	ldr	r3, [pc, #124]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b870:	2200      	movs	r2, #0
 800b872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b874:	4b1d      	ldr	r3, [pc, #116]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b876:	2200      	movs	r2, #0
 800b878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b87a:	4b1c      	ldr	r3, [pc, #112]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b880:	4b1a      	ldr	r3, [pc, #104]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b882:	220c      	movs	r2, #12
 800b884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b886:	4b19      	ldr	r3, [pc, #100]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b888:	2200      	movs	r2, #0
 800b88a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b88c:	4b17      	ldr	r3, [pc, #92]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b88e:	2200      	movs	r2, #0
 800b890:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b892:	4b16      	ldr	r3, [pc, #88]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b894:	2200      	movs	r2, #0
 800b896:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b898:	4b14      	ldr	r3, [pc, #80]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b89e:	4b13      	ldr	r3, [pc, #76]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b8a4:	4811      	ldr	r0, [pc, #68]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b8a6:	f00a fbf7 	bl	8016098 <HAL_UART_Init>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800b8b0:	f7ff fa28 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	480d      	ldr	r0, [pc, #52]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b8b8:	f00d f9da 	bl	8018c70 <HAL_UARTEx_SetTxFifoThreshold>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800b8c2:	f7ff fa1f 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	4808      	ldr	r0, [pc, #32]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b8ca:	f00d fa0f 	bl	8018cec <HAL_UARTEx_SetRxFifoThreshold>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800b8d4:	f7ff fa16 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800b8d8:	4804      	ldr	r0, [pc, #16]	; (800b8ec <MX_USART2_UART_Init+0x90>)
 800b8da:	f00d f990 	bl	8018bfe <HAL_UARTEx_DisableFifoMode>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800b8e4:	f7ff fa0e 	bl	800ad04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b8e8:	bf00      	nop
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	24001a24 	.word	0x24001a24
 800b8f0:	40004400 	.word	0x40004400

0800b8f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800b8f8:	4b26      	ldr	r3, [pc, #152]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b8fa:	4a27      	ldr	r2, [pc, #156]	; (800b998 <MX_USART3_UART_Init+0xa4>)
 800b8fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800b8fe:	4b25      	ldr	r3, [pc, #148]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 800b906:	4b23      	ldr	r3, [pc, #140]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b908:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b90c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b90e:	4b21      	ldr	r3, [pc, #132]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b910:	2200      	movs	r2, #0
 800b912:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800b914:	4b1f      	ldr	r3, [pc, #124]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b916:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b91a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b91c:	4b1d      	ldr	r3, [pc, #116]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b91e:	220c      	movs	r2, #12
 800b920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b922:	4b1c      	ldr	r3, [pc, #112]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b924:	2200      	movs	r2, #0
 800b926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b928:	4b1a      	ldr	r3, [pc, #104]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b92a:	2200      	movs	r2, #0
 800b92c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b92e:	4b19      	ldr	r3, [pc, #100]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b930:	2200      	movs	r2, #0
 800b932:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b934:	4b17      	ldr	r3, [pc, #92]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b936:	2200      	movs	r2, #0
 800b938:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800b93a:	4b16      	ldr	r3, [pc, #88]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b93c:	2220      	movs	r2, #32
 800b93e:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800b940:	4b14      	ldr	r3, [pc, #80]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b946:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b948:	4812      	ldr	r0, [pc, #72]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b94a:	f00a fba5 	bl	8016098 <HAL_UART_Init>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <MX_USART3_UART_Init+0x64>
  {
    Error_Handler();
 800b954:	f7ff f9d6 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b958:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800b95c:	480d      	ldr	r0, [pc, #52]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b95e:	f00d f987 	bl	8018c70 <HAL_UARTEx_SetTxFifoThreshold>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <MX_USART3_UART_Init+0x78>
  {
    Error_Handler();
 800b968:	f7ff f9cc 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b96c:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800b970:	4808      	ldr	r0, [pc, #32]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b972:	f00d f9bb 	bl	8018cec <HAL_UARTEx_SetRxFifoThreshold>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d001      	beq.n	800b980 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800b97c:	f7ff f9c2 	bl	800ad04 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 800b980:	4804      	ldr	r0, [pc, #16]	; (800b994 <MX_USART3_UART_Init+0xa0>)
 800b982:	f00d f901 	bl	8018b88 <HAL_UARTEx_EnableFifoMode>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d001      	beq.n	800b990 <MX_USART3_UART_Init+0x9c>
  {
    Error_Handler();
 800b98c:	f7ff f9ba 	bl	800ad04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800b990:	bf00      	nop
 800b992:	bd80      	pop	{r7, pc}
 800b994:	24001ab4 	.word	0x24001ab4
 800b998:	40004800 	.word	0x40004800

0800b99c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b0c0      	sub	sp, #256	; 0x100
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	605a      	str	r2, [r3, #4]
 800b9ae:	609a      	str	r2, [r3, #8]
 800b9b0:	60da      	str	r2, [r3, #12]
 800b9b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b9b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9b8:	22bc      	movs	r2, #188	; 0xbc
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f011 fbe3 	bl	801d188 <memset>
  if(uartHandle->Instance==UART4)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4abe      	ldr	r2, [pc, #760]	; (800bcc0 <HAL_UART_MspInit+0x324>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d142      	bne.n	800ba52 <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b9d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f007 f9d4 	bl	8012d88 <HAL_RCCEx_PeriphCLKConfig>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800b9e6:	f7ff f98d 	bl	800ad04 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b9ea:	4bb6      	ldr	r3, [pc, #728]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800b9ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b9f0:	4ab4      	ldr	r2, [pc, #720]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800b9f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b9fa:	4bb2      	ldr	r3, [pc, #712]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800b9fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ba00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba06:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba08:	4bae      	ldr	r3, [pc, #696]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800ba0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba0e:	4aad      	ldr	r2, [pc, #692]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800ba10:	f043 0301 	orr.w	r3, r3, #1
 800ba14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ba18:	4baa      	ldr	r3, [pc, #680]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800ba1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ba26:	2303      	movs	r3, #3
 800ba28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba32:	2300      	movs	r3, #0
 800ba34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800ba3e:	2308      	movs	r3, #8
 800ba40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800ba48:	4619      	mov	r1, r3
 800ba4a:	489f      	ldr	r0, [pc, #636]	; (800bcc8 <HAL_UART_MspInit+0x32c>)
 800ba4c:	f003 fd4c 	bl	800f4e8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800ba50:	e130      	b.n	800bcb4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART7)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a9d      	ldr	r2, [pc, #628]	; (800bccc <HAL_UART_MspInit+0x330>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d143      	bne.n	800bae4 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800ba60:	2300      	movs	r3, #0
 800ba62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ba66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f007 f98c 	bl	8012d88 <HAL_RCCEx_PeriphCLKConfig>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <HAL_UART_MspInit+0xde>
      Error_Handler();
 800ba76:	f7ff f945 	bl	800ad04 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800ba7a:	4b92      	ldr	r3, [pc, #584]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800ba7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ba80:	4a90      	ldr	r2, [pc, #576]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800ba82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ba8a:	4b8e      	ldr	r3, [pc, #568]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800ba8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ba90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba94:	627b      	str	r3, [r7, #36]	; 0x24
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ba98:	4b8a      	ldr	r3, [pc, #552]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800ba9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba9e:	4a89      	ldr	r2, [pc, #548]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800baa0:	f043 0310 	orr.w	r3, r3, #16
 800baa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800baa8:	4b86      	ldr	r3, [pc, #536]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800baaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800baae:	f003 0310 	and.w	r3, r3, #16
 800bab2:	623b      	str	r3, [r7, #32]
 800bab4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800bab6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800baba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800babe:	2302      	movs	r3, #2
 800bac0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bac4:	2300      	movs	r3, #0
 800bac6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800baca:	2300      	movs	r3, #0
 800bacc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800bad0:	2307      	movs	r3, #7
 800bad2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bad6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bada:	4619      	mov	r1, r3
 800badc:	487c      	ldr	r0, [pc, #496]	; (800bcd0 <HAL_UART_MspInit+0x334>)
 800bade:	f003 fd03 	bl	800f4e8 <HAL_GPIO_Init>
}
 800bae2:	e0e7      	b.n	800bcb4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART8)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a7a      	ldr	r2, [pc, #488]	; (800bcd4 <HAL_UART_MspInit+0x338>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d14a      	bne.n	800bb84 <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800baee:	2302      	movs	r3, #2
 800baf0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800baf2:	2300      	movs	r3, #0
 800baf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800baf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bafc:	4618      	mov	r0, r3
 800bafe:	f007 f943 	bl	8012d88 <HAL_RCCEx_PeriphCLKConfig>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <HAL_UART_MspInit+0x170>
      Error_Handler();
 800bb08:	f7ff f8fc 	bl	800ad04 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800bb0c:	4b6d      	ldr	r3, [pc, #436]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bb0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bb12:	4a6c      	ldr	r2, [pc, #432]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bb14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bb1c:	4b69      	ldr	r3, [pc, #420]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bb1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bb22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb26:	61fb      	str	r3, [r7, #28]
 800bb28:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bb2a:	4b66      	ldr	r3, [pc, #408]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bb2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb30:	4a64      	ldr	r2, [pc, #400]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bb32:	f043 0310 	orr.w	r3, r3, #16
 800bb36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bb3a:	4b62      	ldr	r3, [pc, #392]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bb3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb40:	f003 0310 	and.w	r3, r3, #16
 800bb44:	61bb      	str	r3, [r7, #24]
 800bb46:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb4e:	2302      	movs	r3, #2
 800bb50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb54:	2300      	movs	r3, #0
 800bb56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800bb60:	2308      	movs	r3, #8
 800bb62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bb66:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	4858      	ldr	r0, [pc, #352]	; (800bcd0 <HAL_UART_MspInit+0x334>)
 800bb6e:	f003 fcbb 	bl	800f4e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800bb72:	2200      	movs	r2, #0
 800bb74:	2100      	movs	r1, #0
 800bb76:	2053      	movs	r0, #83	; 0x53
 800bb78:	f000 fc63 	bl	800c442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800bb7c:	2053      	movs	r0, #83	; 0x53
 800bb7e:	f000 fc7a 	bl	800c476 <HAL_NVIC_EnableIRQ>
}
 800bb82:	e097      	b.n	800bcb4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART2)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a53      	ldr	r2, [pc, #332]	; (800bcd8 <HAL_UART_MspInit+0x33c>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d142      	bne.n	800bc14 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800bb8e:	2302      	movs	r3, #2
 800bb90:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800bb92:	2300      	movs	r3, #0
 800bb94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f007 f8f3 	bl	8012d88 <HAL_RCCEx_PeriphCLKConfig>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <HAL_UART_MspInit+0x210>
      Error_Handler();
 800bba8:	f7ff f8ac 	bl	800ad04 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800bbac:	4b45      	ldr	r3, [pc, #276]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bbae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bbb2:	4a44      	ldr	r2, [pc, #272]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bbb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bbbc:	4b41      	ldr	r3, [pc, #260]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bbbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bbc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbca:	4b3e      	ldr	r3, [pc, #248]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bbcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bbd0:	4a3c      	ldr	r2, [pc, #240]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bbd2:	f043 0301 	orr.w	r3, r3, #1
 800bbd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bbda:	4b3a      	ldr	r3, [pc, #232]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bbdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bbe0:	f003 0301 	and.w	r3, r3, #1
 800bbe4:	613b      	str	r3, [r7, #16]
 800bbe6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bbe8:	230c      	movs	r3, #12
 800bbea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbee:	2302      	movs	r3, #2
 800bbf0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800bc00:	2307      	movs	r3, #7
 800bc02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc06:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	482e      	ldr	r0, [pc, #184]	; (800bcc8 <HAL_UART_MspInit+0x32c>)
 800bc0e:	f003 fc6b 	bl	800f4e8 <HAL_GPIO_Init>
}
 800bc12:	e04f      	b.n	800bcb4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART3)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a30      	ldr	r2, [pc, #192]	; (800bcdc <HAL_UART_MspInit+0x340>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d14a      	bne.n	800bcb4 <HAL_UART_MspInit+0x318>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800bc1e:	2302      	movs	r3, #2
 800bc20:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800bc22:	2300      	movs	r3, #0
 800bc24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bc28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f007 f8ab 	bl	8012d88 <HAL_RCCEx_PeriphCLKConfig>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 800bc38:	f7ff f864 	bl	800ad04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800bc3c:	4b21      	ldr	r3, [pc, #132]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bc3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc42:	4a20      	ldr	r2, [pc, #128]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bc44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bc4c:	4b1d      	ldr	r3, [pc, #116]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bc4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800bc5a:	4b1a      	ldr	r3, [pc, #104]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bc5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc60:	4a18      	ldr	r2, [pc, #96]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bc62:	f043 0308 	orr.w	r3, r3, #8
 800bc66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bc6a:	4b16      	ldr	r3, [pc, #88]	; (800bcc4 <HAL_UART_MspInit+0x328>)
 800bc6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc70:	f003 0308 	and.w	r3, r3, #8
 800bc74:	60bb      	str	r3, [r7, #8]
 800bc76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800bc78:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bc7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc80:	2302      	movs	r3, #2
 800bc82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc86:	2300      	movs	r3, #0
 800bc88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800bc92:	2307      	movs	r3, #7
 800bc94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bc98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	4810      	ldr	r0, [pc, #64]	; (800bce0 <HAL_UART_MspInit+0x344>)
 800bca0:	f003 fc22 	bl	800f4e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800bca4:	2200      	movs	r2, #0
 800bca6:	2100      	movs	r1, #0
 800bca8:	2027      	movs	r0, #39	; 0x27
 800bcaa:	f000 fbca 	bl	800c442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800bcae:	2027      	movs	r0, #39	; 0x27
 800bcb0:	f000 fbe1 	bl	800c476 <HAL_NVIC_EnableIRQ>
}
 800bcb4:	bf00      	nop
 800bcb6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	40004c00 	.word	0x40004c00
 800bcc4:	58024400 	.word	0x58024400
 800bcc8:	58020000 	.word	0x58020000
 800bccc:	40007800 	.word	0x40007800
 800bcd0:	58021000 	.word	0x58021000
 800bcd4:	40007c00 	.word	0x40007c00
 800bcd8:	40004400 	.word	0x40004400
 800bcdc:	40004800 	.word	0x40004800
 800bce0:	58020c00 	.word	0x58020c00

0800bce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800bce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bd1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800bce8:	f7ff faee 	bl	800b2c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bcec:	480c      	ldr	r0, [pc, #48]	; (800bd20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800bcee:	490d      	ldr	r1, [pc, #52]	; (800bd24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800bcf0:	4a0d      	ldr	r2, [pc, #52]	; (800bd28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800bcf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bcf4:	e002      	b.n	800bcfc <LoopCopyDataInit>

0800bcf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bcf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bcf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bcfa:	3304      	adds	r3, #4

0800bcfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bcfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bcfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bd00:	d3f9      	bcc.n	800bcf6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bd02:	4a0a      	ldr	r2, [pc, #40]	; (800bd2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800bd04:	4c0a      	ldr	r4, [pc, #40]	; (800bd30 <LoopFillZerobss+0x22>)
  movs r3, #0
 800bd06:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bd08:	e001      	b.n	800bd0e <LoopFillZerobss>

0800bd0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bd0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bd0c:	3204      	adds	r2, #4

0800bd0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bd0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bd10:	d3fb      	bcc.n	800bd0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bd12:	f011 f9dd 	bl	801d0d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bd16:	f7fe fe69 	bl	800a9ec <main>
  bx  lr
 800bd1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bd1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800bd20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800bd24:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 800bd28:	08038fc0 	.word	0x08038fc0
  ldr r2, =_sbss
 800bd2c:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 800bd30:	24003768 	.word	0x24003768

0800bd34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bd34:	e7fe      	b.n	800bd34 <ADC3_IRQHandler>
	...

0800bd38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bd3e:	2003      	movs	r0, #3
 800bd40:	f000 fb74 	bl	800c42c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bd44:	f006 fe4a 	bl	80129dc <HAL_RCC_GetSysClockFreq>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	4b15      	ldr	r3, [pc, #84]	; (800bda0 <HAL_Init+0x68>)
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	0a1b      	lsrs	r3, r3, #8
 800bd50:	f003 030f 	and.w	r3, r3, #15
 800bd54:	4913      	ldr	r1, [pc, #76]	; (800bda4 <HAL_Init+0x6c>)
 800bd56:	5ccb      	ldrb	r3, [r1, r3]
 800bd58:	f003 031f 	and.w	r3, r3, #31
 800bd5c:	fa22 f303 	lsr.w	r3, r2, r3
 800bd60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bd62:	4b0f      	ldr	r3, [pc, #60]	; (800bda0 <HAL_Init+0x68>)
 800bd64:	699b      	ldr	r3, [r3, #24]
 800bd66:	f003 030f 	and.w	r3, r3, #15
 800bd6a:	4a0e      	ldr	r2, [pc, #56]	; (800bda4 <HAL_Init+0x6c>)
 800bd6c:	5cd3      	ldrb	r3, [r2, r3]
 800bd6e:	f003 031f 	and.w	r3, r3, #31
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	fa22 f303 	lsr.w	r3, r2, r3
 800bd78:	4a0b      	ldr	r2, [pc, #44]	; (800bda8 <HAL_Init+0x70>)
 800bd7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bd7c:	4a0b      	ldr	r2, [pc, #44]	; (800bdac <HAL_Init+0x74>)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bd82:	200f      	movs	r0, #15
 800bd84:	f000 f814 	bl	800bdb0 <HAL_InitTick>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e002      	b.n	800bd98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800bd92:	f7ff f8f9 	bl	800af88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	58024400 	.word	0x58024400
 800bda4:	08038e94 	.word	0x08038e94
 800bda8:	24000004 	.word	0x24000004
 800bdac:	24000000 	.word	0x24000000

0800bdb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800bdb8:	4b15      	ldr	r3, [pc, #84]	; (800be10 <HAL_InitTick+0x60>)
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e021      	b.n	800be08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800bdc4:	4b13      	ldr	r3, [pc, #76]	; (800be14 <HAL_InitTick+0x64>)
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	4b11      	ldr	r3, [pc, #68]	; (800be10 <HAL_InitTick+0x60>)
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bdd2:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 fb59 	bl	800c492 <HAL_SYSTICK_Config>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e00e      	b.n	800be08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2b0f      	cmp	r3, #15
 800bdee:	d80a      	bhi.n	800be06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	6879      	ldr	r1, [r7, #4]
 800bdf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdf8:	f000 fb23 	bl	800c442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bdfc:	4a06      	ldr	r2, [pc, #24]	; (800be18 <HAL_InitTick+0x68>)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	e000      	b.n	800be08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	2400000c 	.word	0x2400000c
 800be14:	24000000 	.word	0x24000000
 800be18:	24000008 	.word	0x24000008

0800be1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800be1c:	b480      	push	{r7}
 800be1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800be20:	4b06      	ldr	r3, [pc, #24]	; (800be3c <HAL_IncTick+0x20>)
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	461a      	mov	r2, r3
 800be26:	4b06      	ldr	r3, [pc, #24]	; (800be40 <HAL_IncTick+0x24>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4413      	add	r3, r2
 800be2c:	4a04      	ldr	r2, [pc, #16]	; (800be40 <HAL_IncTick+0x24>)
 800be2e:	6013      	str	r3, [r2, #0]
}
 800be30:	bf00      	nop
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	2400000c 	.word	0x2400000c
 800be40:	24001b44 	.word	0x24001b44

0800be44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800be44:	b480      	push	{r7}
 800be46:	af00      	add	r7, sp, #0
  return uwTick;
 800be48:	4b03      	ldr	r3, [pc, #12]	; (800be58 <HAL_GetTick+0x14>)
 800be4a:	681b      	ldr	r3, [r3, #0]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	24001b44 	.word	0x24001b44

0800be5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800be64:	f7ff ffee 	bl	800be44 <HAL_GetTick>
 800be68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be74:	d005      	beq.n	800be82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800be76:	4b0a      	ldr	r3, [pc, #40]	; (800bea0 <HAL_Delay+0x44>)
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	4413      	add	r3, r2
 800be80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800be82:	bf00      	nop
 800be84:	f7ff ffde 	bl	800be44 <HAL_GetTick>
 800be88:	4602      	mov	r2, r0
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	429a      	cmp	r2, r3
 800be92:	d8f7      	bhi.n	800be84 <HAL_Delay+0x28>
  {
  }
}
 800be94:	bf00      	nop
 800be96:	bf00      	nop
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	2400000c 	.word	0x2400000c

0800bea4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800bea4:	b480      	push	{r7}
 800bea6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800bea8:	4b03      	ldr	r3, [pc, #12]	; (800beb8 <HAL_GetREVID+0x14>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	0c1b      	lsrs	r3, r3, #16
}
 800beae:	4618      	mov	r0, r3
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr
 800beb8:	5c001000 	.word	0x5c001000

0800bebc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800bec4:	2300      	movs	r3, #0
 800bec6:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 800bec8:	2300      	movs	r3, #0
 800beca:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d102      	bne.n	800bed8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	77fb      	strb	r3, [r7, #31]
 800bed6:	e10e      	b.n	800c0f6 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bee6:	d102      	bne.n	800beee <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	77fb      	strb	r3, [r7, #31]
 800beec:	e103      	b.n	800c0f6 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d109      	bne.n	800bf0e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f7fe faf5 	bl	800a4f8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f003 0304 	and.w	r3, r3, #4
 800bf18:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800bf22:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 800bf28:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800bf2e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 800bf34:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	4b6e      	ldr	r3, [pc, #440]	; (800c100 <HAL_COMP_Init+0x244>)
 800bf46:	4013      	ands	r3, r2
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	6812      	ldr	r2, [r2, #0]
 800bf4c:	6979      	ldr	r1, [r7, #20]
 800bf4e:	430b      	orrs	r3, r1
 800bf50:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	2b10      	cmp	r3, #16
 800bf58:	d108      	bne.n	800bf6c <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f042 0210 	orr.w	r2, r2, #16
 800bf68:	601a      	str	r2, [r3, #0]
 800bf6a:	e007      	b.n	800bf7c <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f022 0210 	bic.w	r2, r2, #16
 800bf7a:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 0304 	and.w	r3, r3, #4
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d016      	beq.n	800bfb8 <HAL_COMP_Init+0xfc>
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d013      	beq.n	800bfb8 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bf90:	4b5c      	ldr	r3, [pc, #368]	; (800c104 <HAL_COMP_Init+0x248>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	099b      	lsrs	r3, r3, #6
 800bf96:	4a5c      	ldr	r2, [pc, #368]	; (800c108 <HAL_COMP_Init+0x24c>)
 800bf98:	fba2 2303 	umull	r2, r3, r2, r3
 800bf9c:	099b      	lsrs	r3, r3, #6
 800bf9e:	1c5a      	adds	r2, r3, #1
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4413      	add	r3, r2
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800bfaa:	e002      	b.n	800bfb2 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1f9      	bne.n	800bfac <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a53      	ldr	r2, [pc, #332]	; (800c10c <HAL_COMP_Init+0x250>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d102      	bne.n	800bfc8 <HAL_COMP_Init+0x10c>
 800bfc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bfc6:	e001      	b.n	800bfcc <HAL_COMP_Init+0x110>
 800bfc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bfcc:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	f003 0303 	and.w	r3, r3, #3
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d06d      	beq.n	800c0b6 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a1b      	ldr	r3, [r3, #32]
 800bfde:	f003 0310 	and.w	r3, r3, #16
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d008      	beq.n	800bff8 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800bfe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	600b      	str	r3, [r1, #0]
 800bff6:	e008      	b.n	800c00a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 800bff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	43db      	mvns	r3, r3
 800c002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c006:	4013      	ands	r3, r2
 800c008:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	f003 0320 	and.w	r3, r3, #32
 800c012:	2b00      	cmp	r3, #0
 800c014:	d008      	beq.n	800c028 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800c016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c01a:	685a      	ldr	r2, [r3, #4]
 800c01c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	4313      	orrs	r3, r2
 800c024:	604b      	str	r3, [r1, #4]
 800c026:	e008      	b.n	800c03a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 800c028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	43db      	mvns	r3, r3
 800c032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c036:	4013      	ands	r3, r2
 800c038:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800c03a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a1b      	ldr	r3, [r3, #32]
 800c048:	f003 0302 	and.w	r3, r3, #2
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00a      	beq.n	800c066 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 800c050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c054:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c058:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	4313      	orrs	r3, r2
 800c060:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800c064:	e00a      	b.n	800c07c <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 800c066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c06a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	43db      	mvns	r3, r3
 800c072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c076:	4013      	ands	r3, r2
 800c078:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6a1b      	ldr	r3, [r3, #32]
 800c080:	f003 0301 	and.w	r3, r3, #1
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00a      	beq.n	800c09e <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 800c088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c08c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c090:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	4313      	orrs	r3, r2
 800c098:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800c09c:	e021      	b.n	800c0e2 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 800c09e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	43db      	mvns	r3, r3
 800c0aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800c0b4:	e015      	b.n	800c0e2 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800c0b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	43db      	mvns	r3, r3
 800c0c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0c6:	4013      	ands	r3, r2
 800c0c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 800c0cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0d0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	43db      	mvns	r3, r3
 800c0d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0dc:	4013      	ands	r3, r2
 800c0de:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d103      	bne.n	800c0f6 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 800c0f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3720      	adds	r7, #32
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	f0e8cce1 	.word	0xf0e8cce1
 800c104:	24000000 	.word	0x24000000
 800c108:	053e2d63 	.word	0x053e2d63
 800c10c:	5800380c 	.word	0x5800380c

0800c110 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800c118:	2300      	movs	r3, #0
 800c11a:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 800c11c:	2300      	movs	r3, #0
 800c11e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d102      	bne.n	800c12c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	73fb      	strb	r3, [r7, #15]
 800c12a:	e030      	b.n	800c18e <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c13a:	d102      	bne.n	800c142 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800c13c:	2301      	movs	r3, #1
 800c13e:	73fb      	strb	r3, [r7, #15]
 800c140:	e025      	b.n	800c18e <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d11d      	bne.n	800c18a <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f042 0201 	orr.w	r2, r2, #1
 800c15c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2202      	movs	r2, #2
 800c162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c166:	4b0d      	ldr	r3, [pc, #52]	; (800c19c <HAL_COMP_Start+0x8c>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	099b      	lsrs	r3, r3, #6
 800c16c:	4a0c      	ldr	r2, [pc, #48]	; (800c1a0 <HAL_COMP_Start+0x90>)
 800c16e:	fba2 2303 	umull	r2, r3, r2, r3
 800c172:	099b      	lsrs	r3, r3, #6
 800c174:	3301      	adds	r3, #1
 800c176:	00db      	lsls	r3, r3, #3
 800c178:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800c17a:	e002      	b.n	800c182 <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	3b01      	subs	r3, #1
 800c180:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1f9      	bne.n	800c17c <HAL_COMP_Start+0x6c>
 800c188:	e001      	b.n	800c18e <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3714      	adds	r7, #20
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr
 800c19c:	24000000 	.word	0x24000000
 800c1a0:	053e2d63 	.word	0x053e2d63

0800c1a4 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a33      	ldr	r2, [pc, #204]	; (800c280 <HAL_COMP_IRQHandler+0xdc>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d102      	bne.n	800c1bc <HAL_COMP_IRQHandler+0x18>
 800c1b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c1ba:	e001      	b.n	800c1c0 <HAL_COMP_IRQHandler+0x1c>
 800c1bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c1c0:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 800c1c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d014      	beq.n	800c1fc <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 800c1d2:	4b2c      	ldr	r3, [pc, #176]	; (800c284 <HAL_COMP_IRQHandler+0xe0>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f003 0310 	and.w	r3, r3, #16
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d006      	beq.n	800c1ec <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 800c1de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1e2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800c1e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800c1ea:	e004      	b.n	800c1f6 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 800c1ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f7fe fd1c 	bl	800ac34 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c206:	2b40      	cmp	r3, #64	; 0x40
 800c208:	d136      	bne.n	800c278 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 800c20a:	4b1f      	ldr	r3, [pc, #124]	; (800c288 <HAL_COMP_IRQHandler+0xe4>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c216:	d101      	bne.n	800c21c <HAL_COMP_IRQHandler+0x78>
 800c218:	2301      	movs	r3, #1
 800c21a:	e000      	b.n	800c21e <HAL_COMP_IRQHandler+0x7a>
 800c21c:	2300      	movs	r3, #0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00b      	beq.n	800c23a <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 800c222:	4b19      	ldr	r3, [pc, #100]	; (800c288 <HAL_COMP_IRQHandler+0xe4>)
 800c224:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c228:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c238:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 800c23a:	4b13      	ldr	r3, [pc, #76]	; (800c288 <HAL_COMP_IRQHandler+0xe4>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c246:	d101      	bne.n	800c24c <HAL_COMP_IRQHandler+0xa8>
 800c248:	2301      	movs	r3, #1
 800c24a:	e000      	b.n	800c24e <HAL_COMP_IRQHandler+0xaa>
 800c24c:	2300      	movs	r3, #0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00b      	beq.n	800c26a <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 800c252:	4b0d      	ldr	r3, [pc, #52]	; (800c288 <HAL_COMP_IRQHandler+0xe4>)
 800c254:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c258:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c268:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7fe fcde 	bl	800ac34 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 800c278:	bf00      	nop
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	5800380c 	.word	0x5800380c
 800c284:	58003810 	.word	0x58003810
 800c288:	58003800 	.word	0x58003800

0800c28c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f003 0307 	and.w	r3, r3, #7
 800c29a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c29c:	4b0b      	ldr	r3, [pc, #44]	; (800c2cc <__NVIC_SetPriorityGrouping+0x40>)
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c2a8:	4013      	ands	r3, r2
 800c2aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c2b4:	4b06      	ldr	r3, [pc, #24]	; (800c2d0 <__NVIC_SetPriorityGrouping+0x44>)
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c2ba:	4a04      	ldr	r2, [pc, #16]	; (800c2cc <__NVIC_SetPriorityGrouping+0x40>)
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	60d3      	str	r3, [r2, #12]
}
 800c2c0:	bf00      	nop
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	e000ed00 	.word	0xe000ed00
 800c2d0:	05fa0000 	.word	0x05fa0000

0800c2d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c2d8:	4b04      	ldr	r3, [pc, #16]	; (800c2ec <__NVIC_GetPriorityGrouping+0x18>)
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	0a1b      	lsrs	r3, r3, #8
 800c2de:	f003 0307 	and.w	r3, r3, #7
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr
 800c2ec:	e000ed00 	.word	0xe000ed00

0800c2f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c2fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	db0b      	blt.n	800c31a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c302:	88fb      	ldrh	r3, [r7, #6]
 800c304:	f003 021f 	and.w	r2, r3, #31
 800c308:	4907      	ldr	r1, [pc, #28]	; (800c328 <__NVIC_EnableIRQ+0x38>)
 800c30a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c30e:	095b      	lsrs	r3, r3, #5
 800c310:	2001      	movs	r0, #1
 800c312:	fa00 f202 	lsl.w	r2, r0, r2
 800c316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c31a:	bf00      	nop
 800c31c:	370c      	adds	r7, #12
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	e000e100 	.word	0xe000e100

0800c32c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	4603      	mov	r3, r0
 800c334:	6039      	str	r1, [r7, #0]
 800c336:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	db0a      	blt.n	800c356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	b2da      	uxtb	r2, r3
 800c344:	490c      	ldr	r1, [pc, #48]	; (800c378 <__NVIC_SetPriority+0x4c>)
 800c346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c34a:	0112      	lsls	r2, r2, #4
 800c34c:	b2d2      	uxtb	r2, r2
 800c34e:	440b      	add	r3, r1
 800c350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c354:	e00a      	b.n	800c36c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	4908      	ldr	r1, [pc, #32]	; (800c37c <__NVIC_SetPriority+0x50>)
 800c35c:	88fb      	ldrh	r3, [r7, #6]
 800c35e:	f003 030f 	and.w	r3, r3, #15
 800c362:	3b04      	subs	r3, #4
 800c364:	0112      	lsls	r2, r2, #4
 800c366:	b2d2      	uxtb	r2, r2
 800c368:	440b      	add	r3, r1
 800c36a:	761a      	strb	r2, [r3, #24]
}
 800c36c:	bf00      	nop
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr
 800c378:	e000e100 	.word	0xe000e100
 800c37c:	e000ed00 	.word	0xe000ed00

0800c380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c380:	b480      	push	{r7}
 800c382:	b089      	sub	sp, #36	; 0x24
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f003 0307 	and.w	r3, r3, #7
 800c392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	f1c3 0307 	rsb	r3, r3, #7
 800c39a:	2b04      	cmp	r3, #4
 800c39c:	bf28      	it	cs
 800c39e:	2304      	movcs	r3, #4
 800c3a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	2b06      	cmp	r3, #6
 800c3a8:	d902      	bls.n	800c3b0 <NVIC_EncodePriority+0x30>
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	3b03      	subs	r3, #3
 800c3ae:	e000      	b.n	800c3b2 <NVIC_EncodePriority+0x32>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c3b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c3be:	43da      	mvns	r2, r3
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	401a      	ands	r2, r3
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c3c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c3d2:	43d9      	mvns	r1, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c3d8:	4313      	orrs	r3, r2
         );
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3724      	adds	r7, #36	; 0x24
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr
	...

0800c3e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c3f8:	d301      	bcc.n	800c3fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e00f      	b.n	800c41e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c3fe:	4a0a      	ldr	r2, [pc, #40]	; (800c428 <SysTick_Config+0x40>)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	3b01      	subs	r3, #1
 800c404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c406:	210f      	movs	r1, #15
 800c408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c40c:	f7ff ff8e 	bl	800c32c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c410:	4b05      	ldr	r3, [pc, #20]	; (800c428 <SysTick_Config+0x40>)
 800c412:	2200      	movs	r2, #0
 800c414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c416:	4b04      	ldr	r3, [pc, #16]	; (800c428 <SysTick_Config+0x40>)
 800c418:	2207      	movs	r2, #7
 800c41a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	e000e010 	.word	0xe000e010

0800c42c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f7ff ff29 	bl	800c28c <__NVIC_SetPriorityGrouping>
}
 800c43a:	bf00      	nop
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b086      	sub	sp, #24
 800c446:	af00      	add	r7, sp, #0
 800c448:	4603      	mov	r3, r0
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	607a      	str	r2, [r7, #4]
 800c44e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c450:	f7ff ff40 	bl	800c2d4 <__NVIC_GetPriorityGrouping>
 800c454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	68b9      	ldr	r1, [r7, #8]
 800c45a:	6978      	ldr	r0, [r7, #20]
 800c45c:	f7ff ff90 	bl	800c380 <NVIC_EncodePriority>
 800c460:	4602      	mov	r2, r0
 800c462:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c466:	4611      	mov	r1, r2
 800c468:	4618      	mov	r0, r3
 800c46a:	f7ff ff5f 	bl	800c32c <__NVIC_SetPriority>
}
 800c46e:	bf00      	nop
 800c470:	3718      	adds	r7, #24
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b082      	sub	sp, #8
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	4603      	mov	r3, r0
 800c47e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c484:	4618      	mov	r0, r3
 800c486:	f7ff ff33 	bl	800c2f0 <__NVIC_EnableIRQ>
}
 800c48a:	bf00      	nop
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b082      	sub	sp, #8
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f7ff ffa4 	bl	800c3e8 <SysTick_Config>
 800c4a0:	4603      	mov	r3, r0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b082      	sub	sp, #8
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e014      	b.n	800c4e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	791b      	ldrb	r3, [r3, #4]
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d105      	bne.n	800c4d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7fe f893 	bl	800a5f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2202      	movs	r2, #2
 800c4d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b083      	sub	sp, #12
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	795b      	ldrb	r3, [r3, #5]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d101      	bne.n	800c504 <HAL_DAC_Start+0x16>
 800c500:	2302      	movs	r3, #2
 800c502:	e040      	b.n	800c586 <HAL_DAC_Start+0x98>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2201      	movs	r2, #1
 800c508:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2202      	movs	r2, #2
 800c50e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6819      	ldr	r1, [r3, #0]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	f003 0310 	and.w	r3, r3, #16
 800c51c:	2201      	movs	r2, #1
 800c51e:	409a      	lsls	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	430a      	orrs	r2, r1
 800c526:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10f      	bne.n	800c54e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d11d      	bne.n	800c578 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	685a      	ldr	r2, [r3, #4]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f042 0201 	orr.w	r2, r2, #1
 800c54a:	605a      	str	r2, [r3, #4]
 800c54c:	e014      	b.n	800c578 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	f003 0310 	and.w	r3, r3, #16
 800c55e:	2102      	movs	r1, #2
 800c560:	fa01 f303 	lsl.w	r3, r1, r3
 800c564:	429a      	cmp	r2, r3
 800c566:	d107      	bne.n	800c578 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	685a      	ldr	r2, [r3, #4]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f042 0202 	orr.w	r2, r2, #2
 800c576:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2201      	movs	r2, #1
 800c57c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800c592:	b480      	push	{r7}
 800c594:	b087      	sub	sp, #28
 800c596:	af00      	add	r7, sp, #0
 800c598:	60f8      	str	r0, [r7, #12]
 800c59a:	60b9      	str	r1, [r7, #8]
 800c59c:	607a      	str	r2, [r7, #4]
 800c59e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d105      	bne.n	800c5bc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800c5b0:	697a      	ldr	r2, [r7, #20]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	3308      	adds	r3, #8
 800c5b8:	617b      	str	r3, [r7, #20]
 800c5ba:	e004      	b.n	800c5c6 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	3314      	adds	r3, #20
 800c5c4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	371c      	adds	r7, #28
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b088      	sub	sp, #32
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	795b      	ldrb	r3, [r3, #5]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d101      	bne.n	800c5f4 <HAL_DAC_ConfigChannel+0x18>
 800c5f0:	2302      	movs	r3, #2
 800c5f2:	e11d      	b.n	800c830 <HAL_DAC_ConfigChannel+0x254>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2202      	movs	r2, #2
 800c5fe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b04      	cmp	r3, #4
 800c606:	d174      	bne.n	800c6f2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800c608:	f7ff fc1c 	bl	800be44 <HAL_GetTick>
 800c60c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d134      	bne.n	800c67e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800c614:	e011      	b.n	800c63a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800c616:	f7ff fc15 	bl	800be44 <HAL_GetTick>
 800c61a:	4602      	mov	r2, r0
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	1ad3      	subs	r3, r2, r3
 800c620:	2b01      	cmp	r3, #1
 800c622:	d90a      	bls.n	800c63a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	f043 0208 	orr.w	r2, r3, #8
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2203      	movs	r2, #3
 800c634:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800c636:	2303      	movs	r3, #3
 800c638:	e0fa      	b.n	800c830 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c640:	4b7d      	ldr	r3, [pc, #500]	; (800c838 <HAL_DAC_ConfigChannel+0x25c>)
 800c642:	4013      	ands	r3, r2
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1e6      	bne.n	800c616 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800c648:	2001      	movs	r0, #1
 800c64a:	f7ff fc07 	bl	800be5c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	6992      	ldr	r2, [r2, #24]
 800c656:	641a      	str	r2, [r3, #64]	; 0x40
 800c658:	e01e      	b.n	800c698 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800c65a:	f7ff fbf3 	bl	800be44 <HAL_GetTick>
 800c65e:	4602      	mov	r2, r0
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	2b01      	cmp	r3, #1
 800c666:	d90a      	bls.n	800c67e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	f043 0208 	orr.w	r2, r3, #8
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2203      	movs	r2, #3
 800c678:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800c67a:	2303      	movs	r3, #3
 800c67c:	e0d8      	b.n	800c830 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c684:	2b00      	cmp	r3, #0
 800c686:	dbe8      	blt.n	800c65a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800c688:	2001      	movs	r0, #1
 800c68a:	f7ff fbe7 	bl	800be5c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	6992      	ldr	r2, [r2, #24]
 800c696:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f003 0310 	and.w	r3, r3, #16
 800c6a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c6a8:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ac:	43db      	mvns	r3, r3
 800c6ae:	ea02 0103 	and.w	r1, r2, r3
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	69da      	ldr	r2, [r3, #28]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f003 0310 	and.w	r3, r3, #16
 800c6bc:	409a      	lsls	r2, r3
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f003 0310 	and.w	r3, r3, #16
 800c6d2:	21ff      	movs	r1, #255	; 0xff
 800c6d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c6d8:	43db      	mvns	r3, r3
 800c6da:	ea02 0103 	and.w	r1, r2, r3
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	6a1a      	ldr	r2, [r3, #32]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f003 0310 	and.w	r3, r3, #16
 800c6e8:	409a      	lsls	r2, r3
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	430a      	orrs	r2, r1
 800c6f0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d11d      	bne.n	800c736 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c700:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f003 0310 	and.w	r3, r3, #16
 800c708:	221f      	movs	r2, #31
 800c70a:	fa02 f303 	lsl.w	r3, r2, r3
 800c70e:	43db      	mvns	r3, r3
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	4013      	ands	r3, r2
 800c714:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	695b      	ldr	r3, [r3, #20]
 800c71a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f003 0310 	and.w	r3, r3, #16
 800c722:	693a      	ldr	r2, [r7, #16]
 800c724:	fa02 f303 	lsl.w	r3, r2, r3
 800c728:	697a      	ldr	r2, [r7, #20]
 800c72a:	4313      	orrs	r3, r2
 800c72c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	697a      	ldr	r2, [r7, #20]
 800c734:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c73c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f003 0310 	and.w	r3, r3, #16
 800c744:	2207      	movs	r2, #7
 800c746:	fa02 f303 	lsl.w	r3, r2, r3
 800c74a:	43db      	mvns	r3, r3
 800c74c:	697a      	ldr	r2, [r7, #20]
 800c74e:	4013      	ands	r3, r2
 800c750:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d102      	bne.n	800c760 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800c75a:	2300      	movs	r3, #0
 800c75c:	61fb      	str	r3, [r7, #28]
 800c75e:	e00f      	b.n	800c780 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	2b02      	cmp	r3, #2
 800c766:	d102      	bne.n	800c76e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800c768:	2301      	movs	r3, #1
 800c76a:	61fb      	str	r3, [r7, #28]
 800c76c:	e008      	b.n	800c780 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d102      	bne.n	800c77c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800c776:	2301      	movs	r3, #1
 800c778:	61fb      	str	r3, [r7, #28]
 800c77a:	e001      	b.n	800c780 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800c77c:	2300      	movs	r3, #0
 800c77e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	4313      	orrs	r3, r2
 800c78a:	69fa      	ldr	r2, [r7, #28]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f003 0310 	and.w	r3, r3, #16
 800c796:	693a      	ldr	r2, [r7, #16]
 800c798:	fa02 f303 	lsl.w	r3, r2, r3
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	6819      	ldr	r1, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f003 0310 	and.w	r3, r3, #16
 800c7b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c7be:	43da      	mvns	r2, r3
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	400a      	ands	r2, r1
 800c7c6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f003 0310 	and.w	r3, r3, #16
 800c7d6:	f640 72fe 	movw	r2, #4094	; 0xffe
 800c7da:	fa02 f303 	lsl.w	r3, r2, r3
 800c7de:	43db      	mvns	r3, r3
 800c7e0:	697a      	ldr	r2, [r7, #20]
 800c7e2:	4013      	ands	r3, r2
 800c7e4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f003 0310 	and.w	r3, r3, #16
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f8:	697a      	ldr	r2, [r7, #20]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	697a      	ldr	r2, [r7, #20]
 800c804:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	6819      	ldr	r1, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f003 0310 	and.w	r3, r3, #16
 800c812:	22c0      	movs	r2, #192	; 0xc0
 800c814:	fa02 f303 	lsl.w	r3, r2, r3
 800c818:	43da      	mvns	r2, r3
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	400a      	ands	r2, r1
 800c820:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2201      	movs	r2, #1
 800c826:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	3720      	adds	r7, #32
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	20008000 	.word	0x20008000

0800c83c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800c844:	f7ff fafe 	bl	800be44 <HAL_GetTick>
 800c848:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d101      	bne.n	800c854 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800c850:	2301      	movs	r3, #1
 800c852:	e316      	b.n	800ce82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a66      	ldr	r2, [pc, #408]	; (800c9f4 <HAL_DMA_Init+0x1b8>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d04a      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a65      	ldr	r2, [pc, #404]	; (800c9f8 <HAL_DMA_Init+0x1bc>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d045      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a63      	ldr	r2, [pc, #396]	; (800c9fc <HAL_DMA_Init+0x1c0>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d040      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a62      	ldr	r2, [pc, #392]	; (800ca00 <HAL_DMA_Init+0x1c4>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d03b      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a60      	ldr	r2, [pc, #384]	; (800ca04 <HAL_DMA_Init+0x1c8>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d036      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a5f      	ldr	r2, [pc, #380]	; (800ca08 <HAL_DMA_Init+0x1cc>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d031      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a5d      	ldr	r2, [pc, #372]	; (800ca0c <HAL_DMA_Init+0x1d0>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d02c      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a5c      	ldr	r2, [pc, #368]	; (800ca10 <HAL_DMA_Init+0x1d4>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d027      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a5a      	ldr	r2, [pc, #360]	; (800ca14 <HAL_DMA_Init+0x1d8>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d022      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a59      	ldr	r2, [pc, #356]	; (800ca18 <HAL_DMA_Init+0x1dc>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d01d      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a57      	ldr	r2, [pc, #348]	; (800ca1c <HAL_DMA_Init+0x1e0>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d018      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a56      	ldr	r2, [pc, #344]	; (800ca20 <HAL_DMA_Init+0x1e4>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d013      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a54      	ldr	r2, [pc, #336]	; (800ca24 <HAL_DMA_Init+0x1e8>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d00e      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a53      	ldr	r2, [pc, #332]	; (800ca28 <HAL_DMA_Init+0x1ec>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d009      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a51      	ldr	r2, [pc, #324]	; (800ca2c <HAL_DMA_Init+0x1f0>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d004      	beq.n	800c8f4 <HAL_DMA_Init+0xb8>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a50      	ldr	r2, [pc, #320]	; (800ca30 <HAL_DMA_Init+0x1f4>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d101      	bne.n	800c8f8 <HAL_DMA_Init+0xbc>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e000      	b.n	800c8fa <HAL_DMA_Init+0xbe>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f000 813b 	beq.w	800cb76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2202      	movs	r2, #2
 800c904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a37      	ldr	r2, [pc, #220]	; (800c9f4 <HAL_DMA_Init+0x1b8>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d04a      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a36      	ldr	r2, [pc, #216]	; (800c9f8 <HAL_DMA_Init+0x1bc>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d045      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a34      	ldr	r2, [pc, #208]	; (800c9fc <HAL_DMA_Init+0x1c0>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d040      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a33      	ldr	r2, [pc, #204]	; (800ca00 <HAL_DMA_Init+0x1c4>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d03b      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a31      	ldr	r2, [pc, #196]	; (800ca04 <HAL_DMA_Init+0x1c8>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d036      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a30      	ldr	r2, [pc, #192]	; (800ca08 <HAL_DMA_Init+0x1cc>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d031      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a2e      	ldr	r2, [pc, #184]	; (800ca0c <HAL_DMA_Init+0x1d0>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d02c      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a2d      	ldr	r2, [pc, #180]	; (800ca10 <HAL_DMA_Init+0x1d4>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d027      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a2b      	ldr	r2, [pc, #172]	; (800ca14 <HAL_DMA_Init+0x1d8>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d022      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a2a      	ldr	r2, [pc, #168]	; (800ca18 <HAL_DMA_Init+0x1dc>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d01d      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a28      	ldr	r2, [pc, #160]	; (800ca1c <HAL_DMA_Init+0x1e0>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d018      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a27      	ldr	r2, [pc, #156]	; (800ca20 <HAL_DMA_Init+0x1e4>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d013      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a25      	ldr	r2, [pc, #148]	; (800ca24 <HAL_DMA_Init+0x1e8>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d00e      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a24      	ldr	r2, [pc, #144]	; (800ca28 <HAL_DMA_Init+0x1ec>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d009      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a22      	ldr	r2, [pc, #136]	; (800ca2c <HAL_DMA_Init+0x1f0>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d004      	beq.n	800c9b0 <HAL_DMA_Init+0x174>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a21      	ldr	r2, [pc, #132]	; (800ca30 <HAL_DMA_Init+0x1f4>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d108      	bne.n	800c9c2 <HAL_DMA_Init+0x186>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f022 0201 	bic.w	r2, r2, #1
 800c9be:	601a      	str	r2, [r3, #0]
 800c9c0:	e007      	b.n	800c9d2 <HAL_DMA_Init+0x196>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f022 0201 	bic.w	r2, r2, #1
 800c9d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c9d2:	e02f      	b.n	800ca34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c9d4:	f7ff fa36 	bl	800be44 <HAL_GetTick>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	2b05      	cmp	r3, #5
 800c9e0:	d928      	bls.n	800ca34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2220      	movs	r2, #32
 800c9e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2203      	movs	r2, #3
 800c9ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e246      	b.n	800ce82 <HAL_DMA_Init+0x646>
 800c9f4:	40020010 	.word	0x40020010
 800c9f8:	40020028 	.word	0x40020028
 800c9fc:	40020040 	.word	0x40020040
 800ca00:	40020058 	.word	0x40020058
 800ca04:	40020070 	.word	0x40020070
 800ca08:	40020088 	.word	0x40020088
 800ca0c:	400200a0 	.word	0x400200a0
 800ca10:	400200b8 	.word	0x400200b8
 800ca14:	40020410 	.word	0x40020410
 800ca18:	40020428 	.word	0x40020428
 800ca1c:	40020440 	.word	0x40020440
 800ca20:	40020458 	.word	0x40020458
 800ca24:	40020470 	.word	0x40020470
 800ca28:	40020488 	.word	0x40020488
 800ca2c:	400204a0 	.word	0x400204a0
 800ca30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1c8      	bne.n	800c9d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	4b83      	ldr	r3, [pc, #524]	; (800cc5c <HAL_DMA_Init+0x420>)
 800ca4e:	4013      	ands	r3, r2
 800ca50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800ca5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6a1b      	ldr	r3, [r3, #32]
 800ca78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca84:	2b04      	cmp	r3, #4
 800ca86:	d107      	bne.n	800ca98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca90:	4313      	orrs	r3, r2
 800ca92:	697a      	ldr	r2, [r7, #20]
 800ca94:	4313      	orrs	r3, r2
 800ca96:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800ca98:	4b71      	ldr	r3, [pc, #452]	; (800cc60 <HAL_DMA_Init+0x424>)
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	4b71      	ldr	r3, [pc, #452]	; (800cc64 <HAL_DMA_Init+0x428>)
 800ca9e:	4013      	ands	r3, r2
 800caa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caa4:	d328      	bcc.n	800caf8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	2b28      	cmp	r3, #40	; 0x28
 800caac:	d903      	bls.n	800cab6 <HAL_DMA_Init+0x27a>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	2b2e      	cmp	r3, #46	; 0x2e
 800cab4:	d917      	bls.n	800cae6 <HAL_DMA_Init+0x2aa>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	2b3e      	cmp	r3, #62	; 0x3e
 800cabc:	d903      	bls.n	800cac6 <HAL_DMA_Init+0x28a>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	2b42      	cmp	r3, #66	; 0x42
 800cac4:	d90f      	bls.n	800cae6 <HAL_DMA_Init+0x2aa>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	2b46      	cmp	r3, #70	; 0x46
 800cacc:	d903      	bls.n	800cad6 <HAL_DMA_Init+0x29a>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	2b48      	cmp	r3, #72	; 0x48
 800cad4:	d907      	bls.n	800cae6 <HAL_DMA_Init+0x2aa>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	2b4e      	cmp	r3, #78	; 0x4e
 800cadc:	d905      	bls.n	800caea <HAL_DMA_Init+0x2ae>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	2b52      	cmp	r3, #82	; 0x52
 800cae4:	d801      	bhi.n	800caea <HAL_DMA_Init+0x2ae>
 800cae6:	2301      	movs	r3, #1
 800cae8:	e000      	b.n	800caec <HAL_DMA_Init+0x2b0>
 800caea:	2300      	movs	r3, #0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d003      	beq.n	800caf8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caf6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	697a      	ldr	r2, [r7, #20]
 800cafe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	695b      	ldr	r3, [r3, #20]
 800cb06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f023 0307 	bic.w	r3, r3, #7
 800cb0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb14:	697a      	ldr	r2, [r7, #20]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1e:	2b04      	cmp	r3, #4
 800cb20:	d117      	bne.n	800cb52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00e      	beq.n	800cb52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f002 fb4d 	bl	800f1d4 <DMA_CheckFifoParam>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d008      	beq.n	800cb52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2240      	movs	r2, #64	; 0x40
 800cb44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e197      	b.n	800ce82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f002 fa88 	bl	800f070 <DMA_CalcBaseAndBitshift>
 800cb60:	4603      	mov	r3, r0
 800cb62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb68:	f003 031f 	and.w	r3, r3, #31
 800cb6c:	223f      	movs	r2, #63	; 0x3f
 800cb6e:	409a      	lsls	r2, r3
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	609a      	str	r2, [r3, #8]
 800cb74:	e0cd      	b.n	800cd12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a3b      	ldr	r2, [pc, #236]	; (800cc68 <HAL_DMA_Init+0x42c>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d022      	beq.n	800cbc6 <HAL_DMA_Init+0x38a>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a39      	ldr	r2, [pc, #228]	; (800cc6c <HAL_DMA_Init+0x430>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d01d      	beq.n	800cbc6 <HAL_DMA_Init+0x38a>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4a38      	ldr	r2, [pc, #224]	; (800cc70 <HAL_DMA_Init+0x434>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d018      	beq.n	800cbc6 <HAL_DMA_Init+0x38a>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a36      	ldr	r2, [pc, #216]	; (800cc74 <HAL_DMA_Init+0x438>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d013      	beq.n	800cbc6 <HAL_DMA_Init+0x38a>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a35      	ldr	r2, [pc, #212]	; (800cc78 <HAL_DMA_Init+0x43c>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d00e      	beq.n	800cbc6 <HAL_DMA_Init+0x38a>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a33      	ldr	r2, [pc, #204]	; (800cc7c <HAL_DMA_Init+0x440>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d009      	beq.n	800cbc6 <HAL_DMA_Init+0x38a>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a32      	ldr	r2, [pc, #200]	; (800cc80 <HAL_DMA_Init+0x444>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d004      	beq.n	800cbc6 <HAL_DMA_Init+0x38a>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a30      	ldr	r2, [pc, #192]	; (800cc84 <HAL_DMA_Init+0x448>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d101      	bne.n	800cbca <HAL_DMA_Init+0x38e>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e000      	b.n	800cbcc <HAL_DMA_Init+0x390>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f000 8097 	beq.w	800cd00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a24      	ldr	r2, [pc, #144]	; (800cc68 <HAL_DMA_Init+0x42c>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d021      	beq.n	800cc20 <HAL_DMA_Init+0x3e4>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4a22      	ldr	r2, [pc, #136]	; (800cc6c <HAL_DMA_Init+0x430>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d01c      	beq.n	800cc20 <HAL_DMA_Init+0x3e4>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a21      	ldr	r2, [pc, #132]	; (800cc70 <HAL_DMA_Init+0x434>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d017      	beq.n	800cc20 <HAL_DMA_Init+0x3e4>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a1f      	ldr	r2, [pc, #124]	; (800cc74 <HAL_DMA_Init+0x438>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d012      	beq.n	800cc20 <HAL_DMA_Init+0x3e4>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a1e      	ldr	r2, [pc, #120]	; (800cc78 <HAL_DMA_Init+0x43c>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d00d      	beq.n	800cc20 <HAL_DMA_Init+0x3e4>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a1c      	ldr	r2, [pc, #112]	; (800cc7c <HAL_DMA_Init+0x440>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d008      	beq.n	800cc20 <HAL_DMA_Init+0x3e4>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4a1b      	ldr	r2, [pc, #108]	; (800cc80 <HAL_DMA_Init+0x444>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d003      	beq.n	800cc20 <HAL_DMA_Init+0x3e4>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a19      	ldr	r2, [pc, #100]	; (800cc84 <HAL_DMA_Init+0x448>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2202      	movs	r2, #2
 800cc26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800cc3a:	697a      	ldr	r2, [r7, #20]
 800cc3c:	4b12      	ldr	r3, [pc, #72]	; (800cc88 <HAL_DMA_Init+0x44c>)
 800cc3e:	4013      	ands	r3, r2
 800cc40:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	2b40      	cmp	r3, #64	; 0x40
 800cc48:	d020      	beq.n	800cc8c <HAL_DMA_Init+0x450>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	2b80      	cmp	r3, #128	; 0x80
 800cc50:	d102      	bne.n	800cc58 <HAL_DMA_Init+0x41c>
 800cc52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cc56:	e01a      	b.n	800cc8e <HAL_DMA_Init+0x452>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	e018      	b.n	800cc8e <HAL_DMA_Init+0x452>
 800cc5c:	fe10803f 	.word	0xfe10803f
 800cc60:	5c001000 	.word	0x5c001000
 800cc64:	ffff0000 	.word	0xffff0000
 800cc68:	58025408 	.word	0x58025408
 800cc6c:	5802541c 	.word	0x5802541c
 800cc70:	58025430 	.word	0x58025430
 800cc74:	58025444 	.word	0x58025444
 800cc78:	58025458 	.word	0x58025458
 800cc7c:	5802546c 	.word	0x5802546c
 800cc80:	58025480 	.word	0x58025480
 800cc84:	58025494 	.word	0x58025494
 800cc88:	fffe000f 	.word	0xfffe000f
 800cc8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	68d2      	ldr	r2, [r2, #12]
 800cc92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800cc94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800cc9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	695b      	ldr	r3, [r3, #20]
 800cca2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800cca4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ccac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	69db      	ldr	r3, [r3, #28]
 800ccb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ccb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6a1b      	ldr	r3, [r3, #32]
 800ccba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ccbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	697a      	ldr	r2, [r7, #20]
 800ccca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	4b6e      	ldr	r3, [pc, #440]	; (800ce8c <HAL_DMA_Init+0x650>)
 800ccd4:	4413      	add	r3, r2
 800ccd6:	4a6e      	ldr	r2, [pc, #440]	; (800ce90 <HAL_DMA_Init+0x654>)
 800ccd8:	fba2 2303 	umull	r2, r3, r2, r3
 800ccdc:	091b      	lsrs	r3, r3, #4
 800ccde:	009a      	lsls	r2, r3, #2
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f002 f9c3 	bl	800f070 <DMA_CalcBaseAndBitshift>
 800ccea:	4603      	mov	r3, r0
 800ccec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccf2:	f003 031f 	and.w	r3, r3, #31
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	409a      	lsls	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	605a      	str	r2, [r3, #4]
 800ccfe:	e008      	b.n	800cd12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2240      	movs	r2, #64	; 0x40
 800cd04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2203      	movs	r2, #3
 800cd0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e0b7      	b.n	800ce82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a5f      	ldr	r2, [pc, #380]	; (800ce94 <HAL_DMA_Init+0x658>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d072      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a5d      	ldr	r2, [pc, #372]	; (800ce98 <HAL_DMA_Init+0x65c>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d06d      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a5c      	ldr	r2, [pc, #368]	; (800ce9c <HAL_DMA_Init+0x660>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d068      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a5a      	ldr	r2, [pc, #360]	; (800cea0 <HAL_DMA_Init+0x664>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d063      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a59      	ldr	r2, [pc, #356]	; (800cea4 <HAL_DMA_Init+0x668>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d05e      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a57      	ldr	r2, [pc, #348]	; (800cea8 <HAL_DMA_Init+0x66c>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d059      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4a56      	ldr	r2, [pc, #344]	; (800ceac <HAL_DMA_Init+0x670>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d054      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a54      	ldr	r2, [pc, #336]	; (800ceb0 <HAL_DMA_Init+0x674>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d04f      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a53      	ldr	r2, [pc, #332]	; (800ceb4 <HAL_DMA_Init+0x678>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d04a      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4a51      	ldr	r2, [pc, #324]	; (800ceb8 <HAL_DMA_Init+0x67c>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d045      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a50      	ldr	r2, [pc, #320]	; (800cebc <HAL_DMA_Init+0x680>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d040      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a4e      	ldr	r2, [pc, #312]	; (800cec0 <HAL_DMA_Init+0x684>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d03b      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a4d      	ldr	r2, [pc, #308]	; (800cec4 <HAL_DMA_Init+0x688>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d036      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a4b      	ldr	r2, [pc, #300]	; (800cec8 <HAL_DMA_Init+0x68c>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d031      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a4a      	ldr	r2, [pc, #296]	; (800cecc <HAL_DMA_Init+0x690>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d02c      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a48      	ldr	r2, [pc, #288]	; (800ced0 <HAL_DMA_Init+0x694>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d027      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a47      	ldr	r2, [pc, #284]	; (800ced4 <HAL_DMA_Init+0x698>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d022      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a45      	ldr	r2, [pc, #276]	; (800ced8 <HAL_DMA_Init+0x69c>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d01d      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a44      	ldr	r2, [pc, #272]	; (800cedc <HAL_DMA_Init+0x6a0>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d018      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a42      	ldr	r2, [pc, #264]	; (800cee0 <HAL_DMA_Init+0x6a4>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d013      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a41      	ldr	r2, [pc, #260]	; (800cee4 <HAL_DMA_Init+0x6a8>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d00e      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a3f      	ldr	r2, [pc, #252]	; (800cee8 <HAL_DMA_Init+0x6ac>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d009      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a3e      	ldr	r2, [pc, #248]	; (800ceec <HAL_DMA_Init+0x6b0>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d004      	beq.n	800ce02 <HAL_DMA_Init+0x5c6>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a3c      	ldr	r2, [pc, #240]	; (800cef0 <HAL_DMA_Init+0x6b4>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d101      	bne.n	800ce06 <HAL_DMA_Init+0x5ca>
 800ce02:	2301      	movs	r3, #1
 800ce04:	e000      	b.n	800ce08 <HAL_DMA_Init+0x5cc>
 800ce06:	2300      	movs	r3, #0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d032      	beq.n	800ce72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f002 fa5d 	bl	800f2cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	2b80      	cmp	r3, #128	; 0x80
 800ce18:	d102      	bne.n	800ce20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	685a      	ldr	r2, [r3, #4]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce28:	b2d2      	uxtb	r2, r2
 800ce2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ce34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d010      	beq.n	800ce60 <HAL_DMA_Init+0x624>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	2b08      	cmp	r3, #8
 800ce44:	d80c      	bhi.n	800ce60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f002 fada 	bl	800f400 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce50:	2200      	movs	r2, #0
 800ce52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ce5c:	605a      	str	r2, [r3, #4]
 800ce5e:	e008      	b.n	800ce72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3718      	adds	r7, #24
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	a7fdabf8 	.word	0xa7fdabf8
 800ce90:	cccccccd 	.word	0xcccccccd
 800ce94:	40020010 	.word	0x40020010
 800ce98:	40020028 	.word	0x40020028
 800ce9c:	40020040 	.word	0x40020040
 800cea0:	40020058 	.word	0x40020058
 800cea4:	40020070 	.word	0x40020070
 800cea8:	40020088 	.word	0x40020088
 800ceac:	400200a0 	.word	0x400200a0
 800ceb0:	400200b8 	.word	0x400200b8
 800ceb4:	40020410 	.word	0x40020410
 800ceb8:	40020428 	.word	0x40020428
 800cebc:	40020440 	.word	0x40020440
 800cec0:	40020458 	.word	0x40020458
 800cec4:	40020470 	.word	0x40020470
 800cec8:	40020488 	.word	0x40020488
 800cecc:	400204a0 	.word	0x400204a0
 800ced0:	400204b8 	.word	0x400204b8
 800ced4:	58025408 	.word	0x58025408
 800ced8:	5802541c 	.word	0x5802541c
 800cedc:	58025430 	.word	0x58025430
 800cee0:	58025444 	.word	0x58025444
 800cee4:	58025458 	.word	0x58025458
 800cee8:	5802546c 	.word	0x5802546c
 800ceec:	58025480 	.word	0x58025480
 800cef0:	58025494 	.word	0x58025494

0800cef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b086      	sub	sp, #24
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
 800cf00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cf02:	2300      	movs	r3, #0
 800cf04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d101      	bne.n	800cf10 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e226      	b.n	800d35e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d101      	bne.n	800cf1e <HAL_DMA_Start_IT+0x2a>
 800cf1a:	2302      	movs	r3, #2
 800cf1c:	e21f      	b.n	800d35e <HAL_DMA_Start_IT+0x46a>
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2201      	movs	r2, #1
 800cf22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	f040 820a 	bne.w	800d348 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2202      	movs	r2, #2
 800cf38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a68      	ldr	r2, [pc, #416]	; (800d0e8 <HAL_DMA_Start_IT+0x1f4>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d04a      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a66      	ldr	r2, [pc, #408]	; (800d0ec <HAL_DMA_Start_IT+0x1f8>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d045      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a65      	ldr	r2, [pc, #404]	; (800d0f0 <HAL_DMA_Start_IT+0x1fc>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d040      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a63      	ldr	r2, [pc, #396]	; (800d0f4 <HAL_DMA_Start_IT+0x200>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d03b      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a62      	ldr	r2, [pc, #392]	; (800d0f8 <HAL_DMA_Start_IT+0x204>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d036      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a60      	ldr	r2, [pc, #384]	; (800d0fc <HAL_DMA_Start_IT+0x208>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d031      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a5f      	ldr	r2, [pc, #380]	; (800d100 <HAL_DMA_Start_IT+0x20c>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d02c      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a5d      	ldr	r2, [pc, #372]	; (800d104 <HAL_DMA_Start_IT+0x210>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d027      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a5c      	ldr	r2, [pc, #368]	; (800d108 <HAL_DMA_Start_IT+0x214>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d022      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a5a      	ldr	r2, [pc, #360]	; (800d10c <HAL_DMA_Start_IT+0x218>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d01d      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a59      	ldr	r2, [pc, #356]	; (800d110 <HAL_DMA_Start_IT+0x21c>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d018      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a57      	ldr	r2, [pc, #348]	; (800d114 <HAL_DMA_Start_IT+0x220>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d013      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a56      	ldr	r2, [pc, #344]	; (800d118 <HAL_DMA_Start_IT+0x224>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d00e      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a54      	ldr	r2, [pc, #336]	; (800d11c <HAL_DMA_Start_IT+0x228>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d009      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a53      	ldr	r2, [pc, #332]	; (800d120 <HAL_DMA_Start_IT+0x22c>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d004      	beq.n	800cfe2 <HAL_DMA_Start_IT+0xee>
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a51      	ldr	r2, [pc, #324]	; (800d124 <HAL_DMA_Start_IT+0x230>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d108      	bne.n	800cff4 <HAL_DMA_Start_IT+0x100>
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f022 0201 	bic.w	r2, r2, #1
 800cff0:	601a      	str	r2, [r3, #0]
 800cff2:	e007      	b.n	800d004 <HAL_DMA_Start_IT+0x110>
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f022 0201 	bic.w	r2, r2, #1
 800d002:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	68b9      	ldr	r1, [r7, #8]
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f001 fe84 	bl	800ed18 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a34      	ldr	r2, [pc, #208]	; (800d0e8 <HAL_DMA_Start_IT+0x1f4>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d04a      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a33      	ldr	r2, [pc, #204]	; (800d0ec <HAL_DMA_Start_IT+0x1f8>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d045      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a31      	ldr	r2, [pc, #196]	; (800d0f0 <HAL_DMA_Start_IT+0x1fc>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d040      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a30      	ldr	r2, [pc, #192]	; (800d0f4 <HAL_DMA_Start_IT+0x200>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d03b      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a2e      	ldr	r2, [pc, #184]	; (800d0f8 <HAL_DMA_Start_IT+0x204>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d036      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a2d      	ldr	r2, [pc, #180]	; (800d0fc <HAL_DMA_Start_IT+0x208>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d031      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a2b      	ldr	r2, [pc, #172]	; (800d100 <HAL_DMA_Start_IT+0x20c>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d02c      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a2a      	ldr	r2, [pc, #168]	; (800d104 <HAL_DMA_Start_IT+0x210>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d027      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a28      	ldr	r2, [pc, #160]	; (800d108 <HAL_DMA_Start_IT+0x214>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d022      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a27      	ldr	r2, [pc, #156]	; (800d10c <HAL_DMA_Start_IT+0x218>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d01d      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a25      	ldr	r2, [pc, #148]	; (800d110 <HAL_DMA_Start_IT+0x21c>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d018      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a24      	ldr	r2, [pc, #144]	; (800d114 <HAL_DMA_Start_IT+0x220>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d013      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a22      	ldr	r2, [pc, #136]	; (800d118 <HAL_DMA_Start_IT+0x224>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d00e      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a21      	ldr	r2, [pc, #132]	; (800d11c <HAL_DMA_Start_IT+0x228>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d009      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a1f      	ldr	r2, [pc, #124]	; (800d120 <HAL_DMA_Start_IT+0x22c>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d004      	beq.n	800d0b0 <HAL_DMA_Start_IT+0x1bc>
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a1e      	ldr	r2, [pc, #120]	; (800d124 <HAL_DMA_Start_IT+0x230>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d101      	bne.n	800d0b4 <HAL_DMA_Start_IT+0x1c0>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e000      	b.n	800d0b6 <HAL_DMA_Start_IT+0x1c2>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d036      	beq.n	800d128 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f023 021e 	bic.w	r2, r3, #30
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f042 0216 	orr.w	r2, r2, #22
 800d0cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d03e      	beq.n	800d154 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f042 0208 	orr.w	r2, r2, #8
 800d0e4:	601a      	str	r2, [r3, #0]
 800d0e6:	e035      	b.n	800d154 <HAL_DMA_Start_IT+0x260>
 800d0e8:	40020010 	.word	0x40020010
 800d0ec:	40020028 	.word	0x40020028
 800d0f0:	40020040 	.word	0x40020040
 800d0f4:	40020058 	.word	0x40020058
 800d0f8:	40020070 	.word	0x40020070
 800d0fc:	40020088 	.word	0x40020088
 800d100:	400200a0 	.word	0x400200a0
 800d104:	400200b8 	.word	0x400200b8
 800d108:	40020410 	.word	0x40020410
 800d10c:	40020428 	.word	0x40020428
 800d110:	40020440 	.word	0x40020440
 800d114:	40020458 	.word	0x40020458
 800d118:	40020470 	.word	0x40020470
 800d11c:	40020488 	.word	0x40020488
 800d120:	400204a0 	.word	0x400204a0
 800d124:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f023 020e 	bic.w	r2, r3, #14
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f042 020a 	orr.w	r2, r2, #10
 800d13a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d140:	2b00      	cmp	r3, #0
 800d142:	d007      	beq.n	800d154 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f042 0204 	orr.w	r2, r2, #4
 800d152:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a83      	ldr	r2, [pc, #524]	; (800d368 <HAL_DMA_Start_IT+0x474>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d072      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a82      	ldr	r2, [pc, #520]	; (800d36c <HAL_DMA_Start_IT+0x478>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d06d      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a80      	ldr	r2, [pc, #512]	; (800d370 <HAL_DMA_Start_IT+0x47c>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d068      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a7f      	ldr	r2, [pc, #508]	; (800d374 <HAL_DMA_Start_IT+0x480>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d063      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a7d      	ldr	r2, [pc, #500]	; (800d378 <HAL_DMA_Start_IT+0x484>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d05e      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a7c      	ldr	r2, [pc, #496]	; (800d37c <HAL_DMA_Start_IT+0x488>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d059      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a7a      	ldr	r2, [pc, #488]	; (800d380 <HAL_DMA_Start_IT+0x48c>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d054      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a79      	ldr	r2, [pc, #484]	; (800d384 <HAL_DMA_Start_IT+0x490>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d04f      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a77      	ldr	r2, [pc, #476]	; (800d388 <HAL_DMA_Start_IT+0x494>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d04a      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a76      	ldr	r2, [pc, #472]	; (800d38c <HAL_DMA_Start_IT+0x498>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d045      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a74      	ldr	r2, [pc, #464]	; (800d390 <HAL_DMA_Start_IT+0x49c>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d040      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a73      	ldr	r2, [pc, #460]	; (800d394 <HAL_DMA_Start_IT+0x4a0>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d03b      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a71      	ldr	r2, [pc, #452]	; (800d398 <HAL_DMA_Start_IT+0x4a4>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d036      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a70      	ldr	r2, [pc, #448]	; (800d39c <HAL_DMA_Start_IT+0x4a8>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d031      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a6e      	ldr	r2, [pc, #440]	; (800d3a0 <HAL_DMA_Start_IT+0x4ac>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d02c      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a6d      	ldr	r2, [pc, #436]	; (800d3a4 <HAL_DMA_Start_IT+0x4b0>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d027      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a6b      	ldr	r2, [pc, #428]	; (800d3a8 <HAL_DMA_Start_IT+0x4b4>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d022      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a6a      	ldr	r2, [pc, #424]	; (800d3ac <HAL_DMA_Start_IT+0x4b8>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d01d      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a68      	ldr	r2, [pc, #416]	; (800d3b0 <HAL_DMA_Start_IT+0x4bc>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d018      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a67      	ldr	r2, [pc, #412]	; (800d3b4 <HAL_DMA_Start_IT+0x4c0>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d013      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a65      	ldr	r2, [pc, #404]	; (800d3b8 <HAL_DMA_Start_IT+0x4c4>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d00e      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a64      	ldr	r2, [pc, #400]	; (800d3bc <HAL_DMA_Start_IT+0x4c8>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d009      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a62      	ldr	r2, [pc, #392]	; (800d3c0 <HAL_DMA_Start_IT+0x4cc>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d004      	beq.n	800d244 <HAL_DMA_Start_IT+0x350>
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4a61      	ldr	r2, [pc, #388]	; (800d3c4 <HAL_DMA_Start_IT+0x4d0>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d101      	bne.n	800d248 <HAL_DMA_Start_IT+0x354>
 800d244:	2301      	movs	r3, #1
 800d246:	e000      	b.n	800d24a <HAL_DMA_Start_IT+0x356>
 800d248:	2300      	movs	r3, #0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d01a      	beq.n	800d284 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d007      	beq.n	800d26c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d26a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d270:	2b00      	cmp	r3, #0
 800d272:	d007      	beq.n	800d284 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d27e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d282:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a37      	ldr	r2, [pc, #220]	; (800d368 <HAL_DMA_Start_IT+0x474>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d04a      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a36      	ldr	r2, [pc, #216]	; (800d36c <HAL_DMA_Start_IT+0x478>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d045      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a34      	ldr	r2, [pc, #208]	; (800d370 <HAL_DMA_Start_IT+0x47c>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d040      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a33      	ldr	r2, [pc, #204]	; (800d374 <HAL_DMA_Start_IT+0x480>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d03b      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a31      	ldr	r2, [pc, #196]	; (800d378 <HAL_DMA_Start_IT+0x484>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d036      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a30      	ldr	r2, [pc, #192]	; (800d37c <HAL_DMA_Start_IT+0x488>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d031      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a2e      	ldr	r2, [pc, #184]	; (800d380 <HAL_DMA_Start_IT+0x48c>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d02c      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a2d      	ldr	r2, [pc, #180]	; (800d384 <HAL_DMA_Start_IT+0x490>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d027      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a2b      	ldr	r2, [pc, #172]	; (800d388 <HAL_DMA_Start_IT+0x494>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d022      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4a2a      	ldr	r2, [pc, #168]	; (800d38c <HAL_DMA_Start_IT+0x498>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d01d      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a28      	ldr	r2, [pc, #160]	; (800d390 <HAL_DMA_Start_IT+0x49c>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d018      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a27      	ldr	r2, [pc, #156]	; (800d394 <HAL_DMA_Start_IT+0x4a0>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d013      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a25      	ldr	r2, [pc, #148]	; (800d398 <HAL_DMA_Start_IT+0x4a4>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d00e      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a24      	ldr	r2, [pc, #144]	; (800d39c <HAL_DMA_Start_IT+0x4a8>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d009      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a22      	ldr	r2, [pc, #136]	; (800d3a0 <HAL_DMA_Start_IT+0x4ac>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d004      	beq.n	800d324 <HAL_DMA_Start_IT+0x430>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a21      	ldr	r2, [pc, #132]	; (800d3a4 <HAL_DMA_Start_IT+0x4b0>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d108      	bne.n	800d336 <HAL_DMA_Start_IT+0x442>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f042 0201 	orr.w	r2, r2, #1
 800d332:	601a      	str	r2, [r3, #0]
 800d334:	e012      	b.n	800d35c <HAL_DMA_Start_IT+0x468>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f042 0201 	orr.w	r2, r2, #1
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	e009      	b.n	800d35c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d34e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2200      	movs	r2, #0
 800d354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800d358:	2301      	movs	r3, #1
 800d35a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3718      	adds	r7, #24
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	40020010 	.word	0x40020010
 800d36c:	40020028 	.word	0x40020028
 800d370:	40020040 	.word	0x40020040
 800d374:	40020058 	.word	0x40020058
 800d378:	40020070 	.word	0x40020070
 800d37c:	40020088 	.word	0x40020088
 800d380:	400200a0 	.word	0x400200a0
 800d384:	400200b8 	.word	0x400200b8
 800d388:	40020410 	.word	0x40020410
 800d38c:	40020428 	.word	0x40020428
 800d390:	40020440 	.word	0x40020440
 800d394:	40020458 	.word	0x40020458
 800d398:	40020470 	.word	0x40020470
 800d39c:	40020488 	.word	0x40020488
 800d3a0:	400204a0 	.word	0x400204a0
 800d3a4:	400204b8 	.word	0x400204b8
 800d3a8:	58025408 	.word	0x58025408
 800d3ac:	5802541c 	.word	0x5802541c
 800d3b0:	58025430 	.word	0x58025430
 800d3b4:	58025444 	.word	0x58025444
 800d3b8:	58025458 	.word	0x58025458
 800d3bc:	5802546c 	.word	0x5802546c
 800d3c0:	58025480 	.word	0x58025480
 800d3c4:	58025494 	.word	0x58025494

0800d3c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800d3d0:	f7fe fd38 	bl	800be44 <HAL_GetTick>
 800d3d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d101      	bne.n	800d3e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e2dc      	b.n	800d99a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b02      	cmp	r3, #2
 800d3ea:	d008      	beq.n	800d3fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2280      	movs	r2, #128	; 0x80
 800d3f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e2cd      	b.n	800d99a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a76      	ldr	r2, [pc, #472]	; (800d5dc <HAL_DMA_Abort+0x214>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d04a      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a74      	ldr	r2, [pc, #464]	; (800d5e0 <HAL_DMA_Abort+0x218>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d045      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a73      	ldr	r2, [pc, #460]	; (800d5e4 <HAL_DMA_Abort+0x21c>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d040      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a71      	ldr	r2, [pc, #452]	; (800d5e8 <HAL_DMA_Abort+0x220>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d03b      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a70      	ldr	r2, [pc, #448]	; (800d5ec <HAL_DMA_Abort+0x224>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d036      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a6e      	ldr	r2, [pc, #440]	; (800d5f0 <HAL_DMA_Abort+0x228>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d031      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4a6d      	ldr	r2, [pc, #436]	; (800d5f4 <HAL_DMA_Abort+0x22c>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d02c      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a6b      	ldr	r2, [pc, #428]	; (800d5f8 <HAL_DMA_Abort+0x230>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d027      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a6a      	ldr	r2, [pc, #424]	; (800d5fc <HAL_DMA_Abort+0x234>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d022      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a68      	ldr	r2, [pc, #416]	; (800d600 <HAL_DMA_Abort+0x238>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d01d      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a67      	ldr	r2, [pc, #412]	; (800d604 <HAL_DMA_Abort+0x23c>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d018      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a65      	ldr	r2, [pc, #404]	; (800d608 <HAL_DMA_Abort+0x240>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d013      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a64      	ldr	r2, [pc, #400]	; (800d60c <HAL_DMA_Abort+0x244>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d00e      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a62      	ldr	r2, [pc, #392]	; (800d610 <HAL_DMA_Abort+0x248>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d009      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a61      	ldr	r2, [pc, #388]	; (800d614 <HAL_DMA_Abort+0x24c>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d004      	beq.n	800d49e <HAL_DMA_Abort+0xd6>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a5f      	ldr	r2, [pc, #380]	; (800d618 <HAL_DMA_Abort+0x250>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d101      	bne.n	800d4a2 <HAL_DMA_Abort+0xda>
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e000      	b.n	800d4a4 <HAL_DMA_Abort+0xdc>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d013      	beq.n	800d4d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f022 021e 	bic.w	r2, r2, #30
 800d4b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	695a      	ldr	r2, [r3, #20]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d4c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	617b      	str	r3, [r7, #20]
 800d4ce:	e00a      	b.n	800d4e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f022 020e 	bic.w	r2, r2, #14
 800d4de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a3c      	ldr	r2, [pc, #240]	; (800d5dc <HAL_DMA_Abort+0x214>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d072      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a3a      	ldr	r2, [pc, #232]	; (800d5e0 <HAL_DMA_Abort+0x218>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d06d      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4a39      	ldr	r2, [pc, #228]	; (800d5e4 <HAL_DMA_Abort+0x21c>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d068      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a37      	ldr	r2, [pc, #220]	; (800d5e8 <HAL_DMA_Abort+0x220>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d063      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a36      	ldr	r2, [pc, #216]	; (800d5ec <HAL_DMA_Abort+0x224>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d05e      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a34      	ldr	r2, [pc, #208]	; (800d5f0 <HAL_DMA_Abort+0x228>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d059      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a33      	ldr	r2, [pc, #204]	; (800d5f4 <HAL_DMA_Abort+0x22c>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d054      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a31      	ldr	r2, [pc, #196]	; (800d5f8 <HAL_DMA_Abort+0x230>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d04f      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a30      	ldr	r2, [pc, #192]	; (800d5fc <HAL_DMA_Abort+0x234>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d04a      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a2e      	ldr	r2, [pc, #184]	; (800d600 <HAL_DMA_Abort+0x238>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d045      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a2d      	ldr	r2, [pc, #180]	; (800d604 <HAL_DMA_Abort+0x23c>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d040      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a2b      	ldr	r2, [pc, #172]	; (800d608 <HAL_DMA_Abort+0x240>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d03b      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a2a      	ldr	r2, [pc, #168]	; (800d60c <HAL_DMA_Abort+0x244>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d036      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a28      	ldr	r2, [pc, #160]	; (800d610 <HAL_DMA_Abort+0x248>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d031      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a27      	ldr	r2, [pc, #156]	; (800d614 <HAL_DMA_Abort+0x24c>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d02c      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a25      	ldr	r2, [pc, #148]	; (800d618 <HAL_DMA_Abort+0x250>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d027      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a24      	ldr	r2, [pc, #144]	; (800d61c <HAL_DMA_Abort+0x254>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d022      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a22      	ldr	r2, [pc, #136]	; (800d620 <HAL_DMA_Abort+0x258>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d01d      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a21      	ldr	r2, [pc, #132]	; (800d624 <HAL_DMA_Abort+0x25c>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d018      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a1f      	ldr	r2, [pc, #124]	; (800d628 <HAL_DMA_Abort+0x260>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d013      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a1e      	ldr	r2, [pc, #120]	; (800d62c <HAL_DMA_Abort+0x264>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d00e      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4a1c      	ldr	r2, [pc, #112]	; (800d630 <HAL_DMA_Abort+0x268>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d009      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a1b      	ldr	r2, [pc, #108]	; (800d634 <HAL_DMA_Abort+0x26c>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d004      	beq.n	800d5d6 <HAL_DMA_Abort+0x20e>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a19      	ldr	r2, [pc, #100]	; (800d638 <HAL_DMA_Abort+0x270>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d132      	bne.n	800d63c <HAL_DMA_Abort+0x274>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e031      	b.n	800d63e <HAL_DMA_Abort+0x276>
 800d5da:	bf00      	nop
 800d5dc:	40020010 	.word	0x40020010
 800d5e0:	40020028 	.word	0x40020028
 800d5e4:	40020040 	.word	0x40020040
 800d5e8:	40020058 	.word	0x40020058
 800d5ec:	40020070 	.word	0x40020070
 800d5f0:	40020088 	.word	0x40020088
 800d5f4:	400200a0 	.word	0x400200a0
 800d5f8:	400200b8 	.word	0x400200b8
 800d5fc:	40020410 	.word	0x40020410
 800d600:	40020428 	.word	0x40020428
 800d604:	40020440 	.word	0x40020440
 800d608:	40020458 	.word	0x40020458
 800d60c:	40020470 	.word	0x40020470
 800d610:	40020488 	.word	0x40020488
 800d614:	400204a0 	.word	0x400204a0
 800d618:	400204b8 	.word	0x400204b8
 800d61c:	58025408 	.word	0x58025408
 800d620:	5802541c 	.word	0x5802541c
 800d624:	58025430 	.word	0x58025430
 800d628:	58025444 	.word	0x58025444
 800d62c:	58025458 	.word	0x58025458
 800d630:	5802546c 	.word	0x5802546c
 800d634:	58025480 	.word	0x58025480
 800d638:	58025494 	.word	0x58025494
 800d63c:	2300      	movs	r3, #0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d007      	beq.n	800d652 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d64c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d650:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a6d      	ldr	r2, [pc, #436]	; (800d80c <HAL_DMA_Abort+0x444>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d04a      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a6b      	ldr	r2, [pc, #428]	; (800d810 <HAL_DMA_Abort+0x448>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d045      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a6a      	ldr	r2, [pc, #424]	; (800d814 <HAL_DMA_Abort+0x44c>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d040      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a68      	ldr	r2, [pc, #416]	; (800d818 <HAL_DMA_Abort+0x450>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d03b      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a67      	ldr	r2, [pc, #412]	; (800d81c <HAL_DMA_Abort+0x454>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d036      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a65      	ldr	r2, [pc, #404]	; (800d820 <HAL_DMA_Abort+0x458>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d031      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a64      	ldr	r2, [pc, #400]	; (800d824 <HAL_DMA_Abort+0x45c>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d02c      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4a62      	ldr	r2, [pc, #392]	; (800d828 <HAL_DMA_Abort+0x460>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d027      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4a61      	ldr	r2, [pc, #388]	; (800d82c <HAL_DMA_Abort+0x464>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d022      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a5f      	ldr	r2, [pc, #380]	; (800d830 <HAL_DMA_Abort+0x468>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d01d      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a5e      	ldr	r2, [pc, #376]	; (800d834 <HAL_DMA_Abort+0x46c>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d018      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a5c      	ldr	r2, [pc, #368]	; (800d838 <HAL_DMA_Abort+0x470>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d013      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a5b      	ldr	r2, [pc, #364]	; (800d83c <HAL_DMA_Abort+0x474>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d00e      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a59      	ldr	r2, [pc, #356]	; (800d840 <HAL_DMA_Abort+0x478>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d009      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a58      	ldr	r2, [pc, #352]	; (800d844 <HAL_DMA_Abort+0x47c>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d004      	beq.n	800d6f2 <HAL_DMA_Abort+0x32a>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a56      	ldr	r2, [pc, #344]	; (800d848 <HAL_DMA_Abort+0x480>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d108      	bne.n	800d704 <HAL_DMA_Abort+0x33c>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f022 0201 	bic.w	r2, r2, #1
 800d700:	601a      	str	r2, [r3, #0]
 800d702:	e007      	b.n	800d714 <HAL_DMA_Abort+0x34c>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f022 0201 	bic.w	r2, r2, #1
 800d712:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d714:	e013      	b.n	800d73e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d716:	f7fe fb95 	bl	800be44 <HAL_GetTick>
 800d71a:	4602      	mov	r2, r0
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	2b05      	cmp	r3, #5
 800d722:	d90c      	bls.n	800d73e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2220      	movs	r2, #32
 800d728:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2203      	movs	r2, #3
 800d72e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800d73a:	2301      	movs	r3, #1
 800d73c:	e12d      	b.n	800d99a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f003 0301 	and.w	r3, r3, #1
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1e5      	bne.n	800d716 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a2f      	ldr	r2, [pc, #188]	; (800d80c <HAL_DMA_Abort+0x444>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d04a      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a2d      	ldr	r2, [pc, #180]	; (800d810 <HAL_DMA_Abort+0x448>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d045      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a2c      	ldr	r2, [pc, #176]	; (800d814 <HAL_DMA_Abort+0x44c>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d040      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a2a      	ldr	r2, [pc, #168]	; (800d818 <HAL_DMA_Abort+0x450>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d03b      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a29      	ldr	r2, [pc, #164]	; (800d81c <HAL_DMA_Abort+0x454>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d036      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a27      	ldr	r2, [pc, #156]	; (800d820 <HAL_DMA_Abort+0x458>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d031      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a26      	ldr	r2, [pc, #152]	; (800d824 <HAL_DMA_Abort+0x45c>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d02c      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a24      	ldr	r2, [pc, #144]	; (800d828 <HAL_DMA_Abort+0x460>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d027      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a23      	ldr	r2, [pc, #140]	; (800d82c <HAL_DMA_Abort+0x464>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d022      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a21      	ldr	r2, [pc, #132]	; (800d830 <HAL_DMA_Abort+0x468>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d01d      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a20      	ldr	r2, [pc, #128]	; (800d834 <HAL_DMA_Abort+0x46c>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d018      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a1e      	ldr	r2, [pc, #120]	; (800d838 <HAL_DMA_Abort+0x470>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d013      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a1d      	ldr	r2, [pc, #116]	; (800d83c <HAL_DMA_Abort+0x474>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d00e      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a1b      	ldr	r2, [pc, #108]	; (800d840 <HAL_DMA_Abort+0x478>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d009      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a1a      	ldr	r2, [pc, #104]	; (800d844 <HAL_DMA_Abort+0x47c>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d004      	beq.n	800d7ea <HAL_DMA_Abort+0x422>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a18      	ldr	r2, [pc, #96]	; (800d848 <HAL_DMA_Abort+0x480>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d101      	bne.n	800d7ee <HAL_DMA_Abort+0x426>
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e000      	b.n	800d7f0 <HAL_DMA_Abort+0x428>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d02b      	beq.n	800d84c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7f8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7fe:	f003 031f 	and.w	r3, r3, #31
 800d802:	223f      	movs	r2, #63	; 0x3f
 800d804:	409a      	lsls	r2, r3
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	609a      	str	r2, [r3, #8]
 800d80a:	e02a      	b.n	800d862 <HAL_DMA_Abort+0x49a>
 800d80c:	40020010 	.word	0x40020010
 800d810:	40020028 	.word	0x40020028
 800d814:	40020040 	.word	0x40020040
 800d818:	40020058 	.word	0x40020058
 800d81c:	40020070 	.word	0x40020070
 800d820:	40020088 	.word	0x40020088
 800d824:	400200a0 	.word	0x400200a0
 800d828:	400200b8 	.word	0x400200b8
 800d82c:	40020410 	.word	0x40020410
 800d830:	40020428 	.word	0x40020428
 800d834:	40020440 	.word	0x40020440
 800d838:	40020458 	.word	0x40020458
 800d83c:	40020470 	.word	0x40020470
 800d840:	40020488 	.word	0x40020488
 800d844:	400204a0 	.word	0x400204a0
 800d848:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d850:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d856:	f003 031f 	and.w	r3, r3, #31
 800d85a:	2201      	movs	r2, #1
 800d85c:	409a      	lsls	r2, r3
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	4a4f      	ldr	r2, [pc, #316]	; (800d9a4 <HAL_DMA_Abort+0x5dc>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d072      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4a4d      	ldr	r2, [pc, #308]	; (800d9a8 <HAL_DMA_Abort+0x5e0>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d06d      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a4c      	ldr	r2, [pc, #304]	; (800d9ac <HAL_DMA_Abort+0x5e4>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d068      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a4a      	ldr	r2, [pc, #296]	; (800d9b0 <HAL_DMA_Abort+0x5e8>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d063      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4a49      	ldr	r2, [pc, #292]	; (800d9b4 <HAL_DMA_Abort+0x5ec>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d05e      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a47      	ldr	r2, [pc, #284]	; (800d9b8 <HAL_DMA_Abort+0x5f0>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d059      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a46      	ldr	r2, [pc, #280]	; (800d9bc <HAL_DMA_Abort+0x5f4>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d054      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a44      	ldr	r2, [pc, #272]	; (800d9c0 <HAL_DMA_Abort+0x5f8>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d04f      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a43      	ldr	r2, [pc, #268]	; (800d9c4 <HAL_DMA_Abort+0x5fc>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d04a      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a41      	ldr	r2, [pc, #260]	; (800d9c8 <HAL_DMA_Abort+0x600>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d045      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a40      	ldr	r2, [pc, #256]	; (800d9cc <HAL_DMA_Abort+0x604>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d040      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a3e      	ldr	r2, [pc, #248]	; (800d9d0 <HAL_DMA_Abort+0x608>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d03b      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a3d      	ldr	r2, [pc, #244]	; (800d9d4 <HAL_DMA_Abort+0x60c>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d036      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a3b      	ldr	r2, [pc, #236]	; (800d9d8 <HAL_DMA_Abort+0x610>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d031      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4a3a      	ldr	r2, [pc, #232]	; (800d9dc <HAL_DMA_Abort+0x614>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d02c      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a38      	ldr	r2, [pc, #224]	; (800d9e0 <HAL_DMA_Abort+0x618>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d027      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4a37      	ldr	r2, [pc, #220]	; (800d9e4 <HAL_DMA_Abort+0x61c>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d022      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a35      	ldr	r2, [pc, #212]	; (800d9e8 <HAL_DMA_Abort+0x620>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d01d      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a34      	ldr	r2, [pc, #208]	; (800d9ec <HAL_DMA_Abort+0x624>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d018      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a32      	ldr	r2, [pc, #200]	; (800d9f0 <HAL_DMA_Abort+0x628>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d013      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4a31      	ldr	r2, [pc, #196]	; (800d9f4 <HAL_DMA_Abort+0x62c>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d00e      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a2f      	ldr	r2, [pc, #188]	; (800d9f8 <HAL_DMA_Abort+0x630>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d009      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4a2e      	ldr	r2, [pc, #184]	; (800d9fc <HAL_DMA_Abort+0x634>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d004      	beq.n	800d952 <HAL_DMA_Abort+0x58a>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a2c      	ldr	r2, [pc, #176]	; (800da00 <HAL_DMA_Abort+0x638>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d101      	bne.n	800d956 <HAL_DMA_Abort+0x58e>
 800d952:	2301      	movs	r3, #1
 800d954:	e000      	b.n	800d958 <HAL_DMA_Abort+0x590>
 800d956:	2300      	movs	r3, #0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d015      	beq.n	800d988 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d964:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00c      	beq.n	800d988 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d97c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d986:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2201      	movs	r2, #1
 800d98c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800d998:	2300      	movs	r3, #0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3718      	adds	r7, #24
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	40020010 	.word	0x40020010
 800d9a8:	40020028 	.word	0x40020028
 800d9ac:	40020040 	.word	0x40020040
 800d9b0:	40020058 	.word	0x40020058
 800d9b4:	40020070 	.word	0x40020070
 800d9b8:	40020088 	.word	0x40020088
 800d9bc:	400200a0 	.word	0x400200a0
 800d9c0:	400200b8 	.word	0x400200b8
 800d9c4:	40020410 	.word	0x40020410
 800d9c8:	40020428 	.word	0x40020428
 800d9cc:	40020440 	.word	0x40020440
 800d9d0:	40020458 	.word	0x40020458
 800d9d4:	40020470 	.word	0x40020470
 800d9d8:	40020488 	.word	0x40020488
 800d9dc:	400204a0 	.word	0x400204a0
 800d9e0:	400204b8 	.word	0x400204b8
 800d9e4:	58025408 	.word	0x58025408
 800d9e8:	5802541c 	.word	0x5802541c
 800d9ec:	58025430 	.word	0x58025430
 800d9f0:	58025444 	.word	0x58025444
 800d9f4:	58025458 	.word	0x58025458
 800d9f8:	5802546c 	.word	0x5802546c
 800d9fc:	58025480 	.word	0x58025480
 800da00:	58025494 	.word	0x58025494

0800da04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d101      	bne.n	800da16 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800da12:	2301      	movs	r3, #1
 800da14:	e237      	b.n	800de86 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	2b02      	cmp	r3, #2
 800da20:	d004      	beq.n	800da2c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2280      	movs	r2, #128	; 0x80
 800da26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	e22c      	b.n	800de86 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a5c      	ldr	r2, [pc, #368]	; (800dba4 <HAL_DMA_Abort_IT+0x1a0>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d04a      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a5b      	ldr	r2, [pc, #364]	; (800dba8 <HAL_DMA_Abort_IT+0x1a4>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d045      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a59      	ldr	r2, [pc, #356]	; (800dbac <HAL_DMA_Abort_IT+0x1a8>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d040      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a58      	ldr	r2, [pc, #352]	; (800dbb0 <HAL_DMA_Abort_IT+0x1ac>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d03b      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a56      	ldr	r2, [pc, #344]	; (800dbb4 <HAL_DMA_Abort_IT+0x1b0>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d036      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4a55      	ldr	r2, [pc, #340]	; (800dbb8 <HAL_DMA_Abort_IT+0x1b4>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d031      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a53      	ldr	r2, [pc, #332]	; (800dbbc <HAL_DMA_Abort_IT+0x1b8>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d02c      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a52      	ldr	r2, [pc, #328]	; (800dbc0 <HAL_DMA_Abort_IT+0x1bc>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d027      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a50      	ldr	r2, [pc, #320]	; (800dbc4 <HAL_DMA_Abort_IT+0x1c0>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d022      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a4f      	ldr	r2, [pc, #316]	; (800dbc8 <HAL_DMA_Abort_IT+0x1c4>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d01d      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a4d      	ldr	r2, [pc, #308]	; (800dbcc <HAL_DMA_Abort_IT+0x1c8>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d018      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a4c      	ldr	r2, [pc, #304]	; (800dbd0 <HAL_DMA_Abort_IT+0x1cc>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d013      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a4a      	ldr	r2, [pc, #296]	; (800dbd4 <HAL_DMA_Abort_IT+0x1d0>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d00e      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a49      	ldr	r2, [pc, #292]	; (800dbd8 <HAL_DMA_Abort_IT+0x1d4>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d009      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a47      	ldr	r2, [pc, #284]	; (800dbdc <HAL_DMA_Abort_IT+0x1d8>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d004      	beq.n	800dacc <HAL_DMA_Abort_IT+0xc8>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a46      	ldr	r2, [pc, #280]	; (800dbe0 <HAL_DMA_Abort_IT+0x1dc>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d101      	bne.n	800dad0 <HAL_DMA_Abort_IT+0xcc>
 800dacc:	2301      	movs	r3, #1
 800dace:	e000      	b.n	800dad2 <HAL_DMA_Abort_IT+0xce>
 800dad0:	2300      	movs	r3, #0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	f000 8086 	beq.w	800dbe4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2204      	movs	r2, #4
 800dadc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a2f      	ldr	r2, [pc, #188]	; (800dba4 <HAL_DMA_Abort_IT+0x1a0>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d04a      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a2e      	ldr	r2, [pc, #184]	; (800dba8 <HAL_DMA_Abort_IT+0x1a4>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d045      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a2c      	ldr	r2, [pc, #176]	; (800dbac <HAL_DMA_Abort_IT+0x1a8>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d040      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4a2b      	ldr	r2, [pc, #172]	; (800dbb0 <HAL_DMA_Abort_IT+0x1ac>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d03b      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a29      	ldr	r2, [pc, #164]	; (800dbb4 <HAL_DMA_Abort_IT+0x1b0>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d036      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a28      	ldr	r2, [pc, #160]	; (800dbb8 <HAL_DMA_Abort_IT+0x1b4>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d031      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a26      	ldr	r2, [pc, #152]	; (800dbbc <HAL_DMA_Abort_IT+0x1b8>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d02c      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a25      	ldr	r2, [pc, #148]	; (800dbc0 <HAL_DMA_Abort_IT+0x1bc>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d027      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a23      	ldr	r2, [pc, #140]	; (800dbc4 <HAL_DMA_Abort_IT+0x1c0>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d022      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a22      	ldr	r2, [pc, #136]	; (800dbc8 <HAL_DMA_Abort_IT+0x1c4>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d01d      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a20      	ldr	r2, [pc, #128]	; (800dbcc <HAL_DMA_Abort_IT+0x1c8>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d018      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4a1f      	ldr	r2, [pc, #124]	; (800dbd0 <HAL_DMA_Abort_IT+0x1cc>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d013      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a1d      	ldr	r2, [pc, #116]	; (800dbd4 <HAL_DMA_Abort_IT+0x1d0>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d00e      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a1c      	ldr	r2, [pc, #112]	; (800dbd8 <HAL_DMA_Abort_IT+0x1d4>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d009      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a1a      	ldr	r2, [pc, #104]	; (800dbdc <HAL_DMA_Abort_IT+0x1d8>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d004      	beq.n	800db80 <HAL_DMA_Abort_IT+0x17c>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a19      	ldr	r2, [pc, #100]	; (800dbe0 <HAL_DMA_Abort_IT+0x1dc>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d108      	bne.n	800db92 <HAL_DMA_Abort_IT+0x18e>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f022 0201 	bic.w	r2, r2, #1
 800db8e:	601a      	str	r2, [r3, #0]
 800db90:	e178      	b.n	800de84 <HAL_DMA_Abort_IT+0x480>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f022 0201 	bic.w	r2, r2, #1
 800dba0:	601a      	str	r2, [r3, #0]
 800dba2:	e16f      	b.n	800de84 <HAL_DMA_Abort_IT+0x480>
 800dba4:	40020010 	.word	0x40020010
 800dba8:	40020028 	.word	0x40020028
 800dbac:	40020040 	.word	0x40020040
 800dbb0:	40020058 	.word	0x40020058
 800dbb4:	40020070 	.word	0x40020070
 800dbb8:	40020088 	.word	0x40020088
 800dbbc:	400200a0 	.word	0x400200a0
 800dbc0:	400200b8 	.word	0x400200b8
 800dbc4:	40020410 	.word	0x40020410
 800dbc8:	40020428 	.word	0x40020428
 800dbcc:	40020440 	.word	0x40020440
 800dbd0:	40020458 	.word	0x40020458
 800dbd4:	40020470 	.word	0x40020470
 800dbd8:	40020488 	.word	0x40020488
 800dbdc:	400204a0 	.word	0x400204a0
 800dbe0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f022 020e 	bic.w	r2, r2, #14
 800dbf2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a6c      	ldr	r2, [pc, #432]	; (800ddac <HAL_DMA_Abort_IT+0x3a8>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d04a      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4a6b      	ldr	r2, [pc, #428]	; (800ddb0 <HAL_DMA_Abort_IT+0x3ac>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d045      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a69      	ldr	r2, [pc, #420]	; (800ddb4 <HAL_DMA_Abort_IT+0x3b0>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d040      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	4a68      	ldr	r2, [pc, #416]	; (800ddb8 <HAL_DMA_Abort_IT+0x3b4>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d03b      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a66      	ldr	r2, [pc, #408]	; (800ddbc <HAL_DMA_Abort_IT+0x3b8>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d036      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a65      	ldr	r2, [pc, #404]	; (800ddc0 <HAL_DMA_Abort_IT+0x3bc>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d031      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a63      	ldr	r2, [pc, #396]	; (800ddc4 <HAL_DMA_Abort_IT+0x3c0>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d02c      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4a62      	ldr	r2, [pc, #392]	; (800ddc8 <HAL_DMA_Abort_IT+0x3c4>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d027      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a60      	ldr	r2, [pc, #384]	; (800ddcc <HAL_DMA_Abort_IT+0x3c8>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d022      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4a5f      	ldr	r2, [pc, #380]	; (800ddd0 <HAL_DMA_Abort_IT+0x3cc>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d01d      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a5d      	ldr	r2, [pc, #372]	; (800ddd4 <HAL_DMA_Abort_IT+0x3d0>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d018      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a5c      	ldr	r2, [pc, #368]	; (800ddd8 <HAL_DMA_Abort_IT+0x3d4>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d013      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a5a      	ldr	r2, [pc, #360]	; (800dddc <HAL_DMA_Abort_IT+0x3d8>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d00e      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a59      	ldr	r2, [pc, #356]	; (800dde0 <HAL_DMA_Abort_IT+0x3dc>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d009      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a57      	ldr	r2, [pc, #348]	; (800dde4 <HAL_DMA_Abort_IT+0x3e0>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d004      	beq.n	800dc94 <HAL_DMA_Abort_IT+0x290>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a56      	ldr	r2, [pc, #344]	; (800dde8 <HAL_DMA_Abort_IT+0x3e4>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d108      	bne.n	800dca6 <HAL_DMA_Abort_IT+0x2a2>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f022 0201 	bic.w	r2, r2, #1
 800dca2:	601a      	str	r2, [r3, #0]
 800dca4:	e007      	b.n	800dcb6 <HAL_DMA_Abort_IT+0x2b2>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f022 0201 	bic.w	r2, r2, #1
 800dcb4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a3c      	ldr	r2, [pc, #240]	; (800ddac <HAL_DMA_Abort_IT+0x3a8>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d072      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a3a      	ldr	r2, [pc, #232]	; (800ddb0 <HAL_DMA_Abort_IT+0x3ac>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d06d      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a39      	ldr	r2, [pc, #228]	; (800ddb4 <HAL_DMA_Abort_IT+0x3b0>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d068      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a37      	ldr	r2, [pc, #220]	; (800ddb8 <HAL_DMA_Abort_IT+0x3b4>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d063      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4a36      	ldr	r2, [pc, #216]	; (800ddbc <HAL_DMA_Abort_IT+0x3b8>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d05e      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a34      	ldr	r2, [pc, #208]	; (800ddc0 <HAL_DMA_Abort_IT+0x3bc>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d059      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4a33      	ldr	r2, [pc, #204]	; (800ddc4 <HAL_DMA_Abort_IT+0x3c0>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d054      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a31      	ldr	r2, [pc, #196]	; (800ddc8 <HAL_DMA_Abort_IT+0x3c4>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d04f      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a30      	ldr	r2, [pc, #192]	; (800ddcc <HAL_DMA_Abort_IT+0x3c8>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d04a      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a2e      	ldr	r2, [pc, #184]	; (800ddd0 <HAL_DMA_Abort_IT+0x3cc>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d045      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a2d      	ldr	r2, [pc, #180]	; (800ddd4 <HAL_DMA_Abort_IT+0x3d0>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d040      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a2b      	ldr	r2, [pc, #172]	; (800ddd8 <HAL_DMA_Abort_IT+0x3d4>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d03b      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4a2a      	ldr	r2, [pc, #168]	; (800dddc <HAL_DMA_Abort_IT+0x3d8>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d036      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a28      	ldr	r2, [pc, #160]	; (800dde0 <HAL_DMA_Abort_IT+0x3dc>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d031      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a27      	ldr	r2, [pc, #156]	; (800dde4 <HAL_DMA_Abort_IT+0x3e0>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d02c      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a25      	ldr	r2, [pc, #148]	; (800dde8 <HAL_DMA_Abort_IT+0x3e4>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d027      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a24      	ldr	r2, [pc, #144]	; (800ddec <HAL_DMA_Abort_IT+0x3e8>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d022      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a22      	ldr	r2, [pc, #136]	; (800ddf0 <HAL_DMA_Abort_IT+0x3ec>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d01d      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a21      	ldr	r2, [pc, #132]	; (800ddf4 <HAL_DMA_Abort_IT+0x3f0>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d018      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a1f      	ldr	r2, [pc, #124]	; (800ddf8 <HAL_DMA_Abort_IT+0x3f4>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d013      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a1e      	ldr	r2, [pc, #120]	; (800ddfc <HAL_DMA_Abort_IT+0x3f8>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d00e      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a1c      	ldr	r2, [pc, #112]	; (800de00 <HAL_DMA_Abort_IT+0x3fc>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d009      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4a1b      	ldr	r2, [pc, #108]	; (800de04 <HAL_DMA_Abort_IT+0x400>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d004      	beq.n	800dda6 <HAL_DMA_Abort_IT+0x3a2>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a19      	ldr	r2, [pc, #100]	; (800de08 <HAL_DMA_Abort_IT+0x404>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d132      	bne.n	800de0c <HAL_DMA_Abort_IT+0x408>
 800dda6:	2301      	movs	r3, #1
 800dda8:	e031      	b.n	800de0e <HAL_DMA_Abort_IT+0x40a>
 800ddaa:	bf00      	nop
 800ddac:	40020010 	.word	0x40020010
 800ddb0:	40020028 	.word	0x40020028
 800ddb4:	40020040 	.word	0x40020040
 800ddb8:	40020058 	.word	0x40020058
 800ddbc:	40020070 	.word	0x40020070
 800ddc0:	40020088 	.word	0x40020088
 800ddc4:	400200a0 	.word	0x400200a0
 800ddc8:	400200b8 	.word	0x400200b8
 800ddcc:	40020410 	.word	0x40020410
 800ddd0:	40020428 	.word	0x40020428
 800ddd4:	40020440 	.word	0x40020440
 800ddd8:	40020458 	.word	0x40020458
 800dddc:	40020470 	.word	0x40020470
 800dde0:	40020488 	.word	0x40020488
 800dde4:	400204a0 	.word	0x400204a0
 800dde8:	400204b8 	.word	0x400204b8
 800ddec:	58025408 	.word	0x58025408
 800ddf0:	5802541c 	.word	0x5802541c
 800ddf4:	58025430 	.word	0x58025430
 800ddf8:	58025444 	.word	0x58025444
 800ddfc:	58025458 	.word	0x58025458
 800de00:	5802546c 	.word	0x5802546c
 800de04:	58025480 	.word	0x58025480
 800de08:	58025494 	.word	0x58025494
 800de0c:	2300      	movs	r3, #0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d028      	beq.n	800de64 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800de20:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de26:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de2c:	f003 031f 	and.w	r3, r3, #31
 800de30:	2201      	movs	r2, #1
 800de32:	409a      	lsls	r2, r3
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800de40:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00c      	beq.n	800de64 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800de58:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800de62:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2201      	movs	r2, #1
 800de68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d003      	beq.n	800de84 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	3710      	adds	r7, #16
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop

0800de90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b08a      	sub	sp, #40	; 0x28
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800de98:	2300      	movs	r3, #0
 800de9a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800de9c:	4b67      	ldr	r3, [pc, #412]	; (800e03c <HAL_DMA_IRQHandler+0x1ac>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a67      	ldr	r2, [pc, #412]	; (800e040 <HAL_DMA_IRQHandler+0x1b0>)
 800dea2:	fba2 2303 	umull	r2, r3, r2, r3
 800dea6:	0a9b      	lsrs	r3, r3, #10
 800dea8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deb4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4a5f      	ldr	r2, [pc, #380]	; (800e044 <HAL_DMA_IRQHandler+0x1b4>)
 800dec8:	4293      	cmp	r3, r2
 800deca:	d04a      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a5d      	ldr	r2, [pc, #372]	; (800e048 <HAL_DMA_IRQHandler+0x1b8>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d045      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4a5c      	ldr	r2, [pc, #368]	; (800e04c <HAL_DMA_IRQHandler+0x1bc>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d040      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a5a      	ldr	r2, [pc, #360]	; (800e050 <HAL_DMA_IRQHandler+0x1c0>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d03b      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4a59      	ldr	r2, [pc, #356]	; (800e054 <HAL_DMA_IRQHandler+0x1c4>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d036      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a57      	ldr	r2, [pc, #348]	; (800e058 <HAL_DMA_IRQHandler+0x1c8>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d031      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4a56      	ldr	r2, [pc, #344]	; (800e05c <HAL_DMA_IRQHandler+0x1cc>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d02c      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a54      	ldr	r2, [pc, #336]	; (800e060 <HAL_DMA_IRQHandler+0x1d0>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d027      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4a53      	ldr	r2, [pc, #332]	; (800e064 <HAL_DMA_IRQHandler+0x1d4>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d022      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a51      	ldr	r2, [pc, #324]	; (800e068 <HAL_DMA_IRQHandler+0x1d8>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d01d      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4a50      	ldr	r2, [pc, #320]	; (800e06c <HAL_DMA_IRQHandler+0x1dc>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d018      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a4e      	ldr	r2, [pc, #312]	; (800e070 <HAL_DMA_IRQHandler+0x1e0>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d013      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a4d      	ldr	r2, [pc, #308]	; (800e074 <HAL_DMA_IRQHandler+0x1e4>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d00e      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a4b      	ldr	r2, [pc, #300]	; (800e078 <HAL_DMA_IRQHandler+0x1e8>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d009      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a4a      	ldr	r2, [pc, #296]	; (800e07c <HAL_DMA_IRQHandler+0x1ec>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d004      	beq.n	800df62 <HAL_DMA_IRQHandler+0xd2>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a48      	ldr	r2, [pc, #288]	; (800e080 <HAL_DMA_IRQHandler+0x1f0>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d101      	bne.n	800df66 <HAL_DMA_IRQHandler+0xd6>
 800df62:	2301      	movs	r3, #1
 800df64:	e000      	b.n	800df68 <HAL_DMA_IRQHandler+0xd8>
 800df66:	2300      	movs	r3, #0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f000 842b 	beq.w	800e7c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df72:	f003 031f 	and.w	r3, r3, #31
 800df76:	2208      	movs	r2, #8
 800df78:	409a      	lsls	r2, r3
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	4013      	ands	r3, r2
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f000 80a2 	beq.w	800e0c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a2e      	ldr	r2, [pc, #184]	; (800e044 <HAL_DMA_IRQHandler+0x1b4>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d04a      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a2d      	ldr	r2, [pc, #180]	; (800e048 <HAL_DMA_IRQHandler+0x1b8>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d045      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a2b      	ldr	r2, [pc, #172]	; (800e04c <HAL_DMA_IRQHandler+0x1bc>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d040      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4a2a      	ldr	r2, [pc, #168]	; (800e050 <HAL_DMA_IRQHandler+0x1c0>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d03b      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a28      	ldr	r2, [pc, #160]	; (800e054 <HAL_DMA_IRQHandler+0x1c4>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d036      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4a27      	ldr	r2, [pc, #156]	; (800e058 <HAL_DMA_IRQHandler+0x1c8>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d031      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4a25      	ldr	r2, [pc, #148]	; (800e05c <HAL_DMA_IRQHandler+0x1cc>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d02c      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4a24      	ldr	r2, [pc, #144]	; (800e060 <HAL_DMA_IRQHandler+0x1d0>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d027      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4a22      	ldr	r2, [pc, #136]	; (800e064 <HAL_DMA_IRQHandler+0x1d4>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d022      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4a21      	ldr	r2, [pc, #132]	; (800e068 <HAL_DMA_IRQHandler+0x1d8>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d01d      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4a1f      	ldr	r2, [pc, #124]	; (800e06c <HAL_DMA_IRQHandler+0x1dc>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d018      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a1e      	ldr	r2, [pc, #120]	; (800e070 <HAL_DMA_IRQHandler+0x1e0>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d013      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a1c      	ldr	r2, [pc, #112]	; (800e074 <HAL_DMA_IRQHandler+0x1e4>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d00e      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a1b      	ldr	r2, [pc, #108]	; (800e078 <HAL_DMA_IRQHandler+0x1e8>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d009      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a19      	ldr	r2, [pc, #100]	; (800e07c <HAL_DMA_IRQHandler+0x1ec>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d004      	beq.n	800e024 <HAL_DMA_IRQHandler+0x194>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a18      	ldr	r2, [pc, #96]	; (800e080 <HAL_DMA_IRQHandler+0x1f0>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d12f      	bne.n	800e084 <HAL_DMA_IRQHandler+0x1f4>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f003 0304 	and.w	r3, r3, #4
 800e02e:	2b00      	cmp	r3, #0
 800e030:	bf14      	ite	ne
 800e032:	2301      	movne	r3, #1
 800e034:	2300      	moveq	r3, #0
 800e036:	b2db      	uxtb	r3, r3
 800e038:	e02e      	b.n	800e098 <HAL_DMA_IRQHandler+0x208>
 800e03a:	bf00      	nop
 800e03c:	24000000 	.word	0x24000000
 800e040:	1b4e81b5 	.word	0x1b4e81b5
 800e044:	40020010 	.word	0x40020010
 800e048:	40020028 	.word	0x40020028
 800e04c:	40020040 	.word	0x40020040
 800e050:	40020058 	.word	0x40020058
 800e054:	40020070 	.word	0x40020070
 800e058:	40020088 	.word	0x40020088
 800e05c:	400200a0 	.word	0x400200a0
 800e060:	400200b8 	.word	0x400200b8
 800e064:	40020410 	.word	0x40020410
 800e068:	40020428 	.word	0x40020428
 800e06c:	40020440 	.word	0x40020440
 800e070:	40020458 	.word	0x40020458
 800e074:	40020470 	.word	0x40020470
 800e078:	40020488 	.word	0x40020488
 800e07c:	400204a0 	.word	0x400204a0
 800e080:	400204b8 	.word	0x400204b8
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f003 0308 	and.w	r3, r3, #8
 800e08e:	2b00      	cmp	r3, #0
 800e090:	bf14      	ite	ne
 800e092:	2301      	movne	r3, #1
 800e094:	2300      	moveq	r3, #0
 800e096:	b2db      	uxtb	r3, r3
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d015      	beq.n	800e0c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f022 0204 	bic.w	r2, r2, #4
 800e0aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0b0:	f003 031f 	and.w	r3, r3, #31
 800e0b4:	2208      	movs	r2, #8
 800e0b6:	409a      	lsls	r2, r3
 800e0b8:	6a3b      	ldr	r3, [r7, #32]
 800e0ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0c0:	f043 0201 	orr.w	r2, r3, #1
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0cc:	f003 031f 	and.w	r3, r3, #31
 800e0d0:	69ba      	ldr	r2, [r7, #24]
 800e0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800e0d6:	f003 0301 	and.w	r3, r3, #1
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d06e      	beq.n	800e1bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4a69      	ldr	r2, [pc, #420]	; (800e288 <HAL_DMA_IRQHandler+0x3f8>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d04a      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a67      	ldr	r2, [pc, #412]	; (800e28c <HAL_DMA_IRQHandler+0x3fc>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d045      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a66      	ldr	r2, [pc, #408]	; (800e290 <HAL_DMA_IRQHandler+0x400>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d040      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a64      	ldr	r2, [pc, #400]	; (800e294 <HAL_DMA_IRQHandler+0x404>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d03b      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4a63      	ldr	r2, [pc, #396]	; (800e298 <HAL_DMA_IRQHandler+0x408>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d036      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a61      	ldr	r2, [pc, #388]	; (800e29c <HAL_DMA_IRQHandler+0x40c>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d031      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a60      	ldr	r2, [pc, #384]	; (800e2a0 <HAL_DMA_IRQHandler+0x410>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d02c      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a5e      	ldr	r2, [pc, #376]	; (800e2a4 <HAL_DMA_IRQHandler+0x414>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d027      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4a5d      	ldr	r2, [pc, #372]	; (800e2a8 <HAL_DMA_IRQHandler+0x418>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d022      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a5b      	ldr	r2, [pc, #364]	; (800e2ac <HAL_DMA_IRQHandler+0x41c>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d01d      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a5a      	ldr	r2, [pc, #360]	; (800e2b0 <HAL_DMA_IRQHandler+0x420>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d018      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a58      	ldr	r2, [pc, #352]	; (800e2b4 <HAL_DMA_IRQHandler+0x424>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d013      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a57      	ldr	r2, [pc, #348]	; (800e2b8 <HAL_DMA_IRQHandler+0x428>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d00e      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a55      	ldr	r2, [pc, #340]	; (800e2bc <HAL_DMA_IRQHandler+0x42c>)
 800e166:	4293      	cmp	r3, r2
 800e168:	d009      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4a54      	ldr	r2, [pc, #336]	; (800e2c0 <HAL_DMA_IRQHandler+0x430>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d004      	beq.n	800e17e <HAL_DMA_IRQHandler+0x2ee>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4a52      	ldr	r2, [pc, #328]	; (800e2c4 <HAL_DMA_IRQHandler+0x434>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d10a      	bne.n	800e194 <HAL_DMA_IRQHandler+0x304>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	695b      	ldr	r3, [r3, #20]
 800e184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e188:	2b00      	cmp	r3, #0
 800e18a:	bf14      	ite	ne
 800e18c:	2301      	movne	r3, #1
 800e18e:	2300      	moveq	r3, #0
 800e190:	b2db      	uxtb	r3, r3
 800e192:	e003      	b.n	800e19c <HAL_DMA_IRQHandler+0x30c>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2300      	movs	r3, #0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d00d      	beq.n	800e1bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1a4:	f003 031f 	and.w	r3, r3, #31
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	409a      	lsls	r2, r3
 800e1ac:	6a3b      	ldr	r3, [r7, #32]
 800e1ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b4:	f043 0202 	orr.w	r2, r3, #2
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1c0:	f003 031f 	and.w	r3, r3, #31
 800e1c4:	2204      	movs	r2, #4
 800e1c6:	409a      	lsls	r2, r3
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	4013      	ands	r3, r2
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	f000 808f 	beq.w	800e2f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4a2c      	ldr	r2, [pc, #176]	; (800e288 <HAL_DMA_IRQHandler+0x3f8>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d04a      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a2a      	ldr	r2, [pc, #168]	; (800e28c <HAL_DMA_IRQHandler+0x3fc>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d045      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a29      	ldr	r2, [pc, #164]	; (800e290 <HAL_DMA_IRQHandler+0x400>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d040      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a27      	ldr	r2, [pc, #156]	; (800e294 <HAL_DMA_IRQHandler+0x404>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d03b      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a26      	ldr	r2, [pc, #152]	; (800e298 <HAL_DMA_IRQHandler+0x408>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d036      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a24      	ldr	r2, [pc, #144]	; (800e29c <HAL_DMA_IRQHandler+0x40c>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d031      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a23      	ldr	r2, [pc, #140]	; (800e2a0 <HAL_DMA_IRQHandler+0x410>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d02c      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a21      	ldr	r2, [pc, #132]	; (800e2a4 <HAL_DMA_IRQHandler+0x414>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d027      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a20      	ldr	r2, [pc, #128]	; (800e2a8 <HAL_DMA_IRQHandler+0x418>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d022      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a1e      	ldr	r2, [pc, #120]	; (800e2ac <HAL_DMA_IRQHandler+0x41c>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d01d      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a1d      	ldr	r2, [pc, #116]	; (800e2b0 <HAL_DMA_IRQHandler+0x420>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d018      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a1b      	ldr	r2, [pc, #108]	; (800e2b4 <HAL_DMA_IRQHandler+0x424>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d013      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4a1a      	ldr	r2, [pc, #104]	; (800e2b8 <HAL_DMA_IRQHandler+0x428>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d00e      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4a18      	ldr	r2, [pc, #96]	; (800e2bc <HAL_DMA_IRQHandler+0x42c>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d009      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	4a17      	ldr	r2, [pc, #92]	; (800e2c0 <HAL_DMA_IRQHandler+0x430>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d004      	beq.n	800e272 <HAL_DMA_IRQHandler+0x3e2>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a15      	ldr	r2, [pc, #84]	; (800e2c4 <HAL_DMA_IRQHandler+0x434>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d12a      	bne.n	800e2c8 <HAL_DMA_IRQHandler+0x438>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f003 0302 	and.w	r3, r3, #2
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	bf14      	ite	ne
 800e280:	2301      	movne	r3, #1
 800e282:	2300      	moveq	r3, #0
 800e284:	b2db      	uxtb	r3, r3
 800e286:	e023      	b.n	800e2d0 <HAL_DMA_IRQHandler+0x440>
 800e288:	40020010 	.word	0x40020010
 800e28c:	40020028 	.word	0x40020028
 800e290:	40020040 	.word	0x40020040
 800e294:	40020058 	.word	0x40020058
 800e298:	40020070 	.word	0x40020070
 800e29c:	40020088 	.word	0x40020088
 800e2a0:	400200a0 	.word	0x400200a0
 800e2a4:	400200b8 	.word	0x400200b8
 800e2a8:	40020410 	.word	0x40020410
 800e2ac:	40020428 	.word	0x40020428
 800e2b0:	40020440 	.word	0x40020440
 800e2b4:	40020458 	.word	0x40020458
 800e2b8:	40020470 	.word	0x40020470
 800e2bc:	40020488 	.word	0x40020488
 800e2c0:	400204a0 	.word	0x400204a0
 800e2c4:	400204b8 	.word	0x400204b8
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00d      	beq.n	800e2f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2d8:	f003 031f 	and.w	r3, r3, #31
 800e2dc:	2204      	movs	r2, #4
 800e2de:	409a      	lsls	r2, r3
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2e8:	f043 0204 	orr.w	r2, r3, #4
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2f4:	f003 031f 	and.w	r3, r3, #31
 800e2f8:	2210      	movs	r2, #16
 800e2fa:	409a      	lsls	r2, r3
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	4013      	ands	r3, r2
 800e300:	2b00      	cmp	r3, #0
 800e302:	f000 80a6 	beq.w	800e452 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a85      	ldr	r2, [pc, #532]	; (800e520 <HAL_DMA_IRQHandler+0x690>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d04a      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a83      	ldr	r2, [pc, #524]	; (800e524 <HAL_DMA_IRQHandler+0x694>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d045      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a82      	ldr	r2, [pc, #520]	; (800e528 <HAL_DMA_IRQHandler+0x698>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d040      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a80      	ldr	r2, [pc, #512]	; (800e52c <HAL_DMA_IRQHandler+0x69c>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d03b      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4a7f      	ldr	r2, [pc, #508]	; (800e530 <HAL_DMA_IRQHandler+0x6a0>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d036      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a7d      	ldr	r2, [pc, #500]	; (800e534 <HAL_DMA_IRQHandler+0x6a4>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d031      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4a7c      	ldr	r2, [pc, #496]	; (800e538 <HAL_DMA_IRQHandler+0x6a8>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d02c      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a7a      	ldr	r2, [pc, #488]	; (800e53c <HAL_DMA_IRQHandler+0x6ac>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d027      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a79      	ldr	r2, [pc, #484]	; (800e540 <HAL_DMA_IRQHandler+0x6b0>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d022      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a77      	ldr	r2, [pc, #476]	; (800e544 <HAL_DMA_IRQHandler+0x6b4>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d01d      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a76      	ldr	r2, [pc, #472]	; (800e548 <HAL_DMA_IRQHandler+0x6b8>)
 800e370:	4293      	cmp	r3, r2
 800e372:	d018      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a74      	ldr	r2, [pc, #464]	; (800e54c <HAL_DMA_IRQHandler+0x6bc>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d013      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a73      	ldr	r2, [pc, #460]	; (800e550 <HAL_DMA_IRQHandler+0x6c0>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d00e      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a71      	ldr	r2, [pc, #452]	; (800e554 <HAL_DMA_IRQHandler+0x6c4>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d009      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4a70      	ldr	r2, [pc, #448]	; (800e558 <HAL_DMA_IRQHandler+0x6c8>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d004      	beq.n	800e3a6 <HAL_DMA_IRQHandler+0x516>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a6e      	ldr	r2, [pc, #440]	; (800e55c <HAL_DMA_IRQHandler+0x6cc>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d10a      	bne.n	800e3bc <HAL_DMA_IRQHandler+0x52c>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f003 0308 	and.w	r3, r3, #8
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	bf14      	ite	ne
 800e3b4:	2301      	movne	r3, #1
 800e3b6:	2300      	moveq	r3, #0
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	e009      	b.n	800e3d0 <HAL_DMA_IRQHandler+0x540>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f003 0304 	and.w	r3, r3, #4
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	bf14      	ite	ne
 800e3ca:	2301      	movne	r3, #1
 800e3cc:	2300      	moveq	r3, #0
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d03e      	beq.n	800e452 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3d8:	f003 031f 	and.w	r3, r3, #31
 800e3dc:	2210      	movs	r2, #16
 800e3de:	409a      	lsls	r2, r3
 800e3e0:	6a3b      	ldr	r3, [r7, #32]
 800e3e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d018      	beq.n	800e424 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d108      	bne.n	800e412 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e404:	2b00      	cmp	r3, #0
 800e406:	d024      	beq.n	800e452 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	4798      	blx	r3
 800e410:	e01f      	b.n	800e452 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e416:	2b00      	cmp	r3, #0
 800e418:	d01b      	beq.n	800e452 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	4798      	blx	r3
 800e422:	e016      	b.n	800e452 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d107      	bne.n	800e442 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f022 0208 	bic.w	r2, r2, #8
 800e440:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e446:	2b00      	cmp	r3, #0
 800e448:	d003      	beq.n	800e452 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e456:	f003 031f 	and.w	r3, r3, #31
 800e45a:	2220      	movs	r2, #32
 800e45c:	409a      	lsls	r2, r3
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	4013      	ands	r3, r2
 800e462:	2b00      	cmp	r3, #0
 800e464:	f000 8110 	beq.w	800e688 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4a2c      	ldr	r2, [pc, #176]	; (800e520 <HAL_DMA_IRQHandler+0x690>)
 800e46e:	4293      	cmp	r3, r2
 800e470:	d04a      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4a2b      	ldr	r2, [pc, #172]	; (800e524 <HAL_DMA_IRQHandler+0x694>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d045      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4a29      	ldr	r2, [pc, #164]	; (800e528 <HAL_DMA_IRQHandler+0x698>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d040      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4a28      	ldr	r2, [pc, #160]	; (800e52c <HAL_DMA_IRQHandler+0x69c>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d03b      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	4a26      	ldr	r2, [pc, #152]	; (800e530 <HAL_DMA_IRQHandler+0x6a0>)
 800e496:	4293      	cmp	r3, r2
 800e498:	d036      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	4a25      	ldr	r2, [pc, #148]	; (800e534 <HAL_DMA_IRQHandler+0x6a4>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d031      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	4a23      	ldr	r2, [pc, #140]	; (800e538 <HAL_DMA_IRQHandler+0x6a8>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d02c      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	4a22      	ldr	r2, [pc, #136]	; (800e53c <HAL_DMA_IRQHandler+0x6ac>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d027      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a20      	ldr	r2, [pc, #128]	; (800e540 <HAL_DMA_IRQHandler+0x6b0>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d022      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	4a1f      	ldr	r2, [pc, #124]	; (800e544 <HAL_DMA_IRQHandler+0x6b4>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d01d      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4a1d      	ldr	r2, [pc, #116]	; (800e548 <HAL_DMA_IRQHandler+0x6b8>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d018      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a1c      	ldr	r2, [pc, #112]	; (800e54c <HAL_DMA_IRQHandler+0x6bc>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d013      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a1a      	ldr	r2, [pc, #104]	; (800e550 <HAL_DMA_IRQHandler+0x6c0>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d00e      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4a19      	ldr	r2, [pc, #100]	; (800e554 <HAL_DMA_IRQHandler+0x6c4>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d009      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a17      	ldr	r2, [pc, #92]	; (800e558 <HAL_DMA_IRQHandler+0x6c8>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d004      	beq.n	800e508 <HAL_DMA_IRQHandler+0x678>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a16      	ldr	r2, [pc, #88]	; (800e55c <HAL_DMA_IRQHandler+0x6cc>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d12b      	bne.n	800e560 <HAL_DMA_IRQHandler+0x6d0>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f003 0310 	and.w	r3, r3, #16
 800e512:	2b00      	cmp	r3, #0
 800e514:	bf14      	ite	ne
 800e516:	2301      	movne	r3, #1
 800e518:	2300      	moveq	r3, #0
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	e02a      	b.n	800e574 <HAL_DMA_IRQHandler+0x6e4>
 800e51e:	bf00      	nop
 800e520:	40020010 	.word	0x40020010
 800e524:	40020028 	.word	0x40020028
 800e528:	40020040 	.word	0x40020040
 800e52c:	40020058 	.word	0x40020058
 800e530:	40020070 	.word	0x40020070
 800e534:	40020088 	.word	0x40020088
 800e538:	400200a0 	.word	0x400200a0
 800e53c:	400200b8 	.word	0x400200b8
 800e540:	40020410 	.word	0x40020410
 800e544:	40020428 	.word	0x40020428
 800e548:	40020440 	.word	0x40020440
 800e54c:	40020458 	.word	0x40020458
 800e550:	40020470 	.word	0x40020470
 800e554:	40020488 	.word	0x40020488
 800e558:	400204a0 	.word	0x400204a0
 800e55c:	400204b8 	.word	0x400204b8
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f003 0302 	and.w	r3, r3, #2
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	bf14      	ite	ne
 800e56e:	2301      	movne	r3, #1
 800e570:	2300      	moveq	r3, #0
 800e572:	b2db      	uxtb	r3, r3
 800e574:	2b00      	cmp	r3, #0
 800e576:	f000 8087 	beq.w	800e688 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e57e:	f003 031f 	and.w	r3, r3, #31
 800e582:	2220      	movs	r2, #32
 800e584:	409a      	lsls	r2, r3
 800e586:	6a3b      	ldr	r3, [r7, #32]
 800e588:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e590:	b2db      	uxtb	r3, r3
 800e592:	2b04      	cmp	r3, #4
 800e594:	d139      	bne.n	800e60a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f022 0216 	bic.w	r2, r2, #22
 800e5a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	695a      	ldr	r2, [r3, #20]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e5b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d103      	bne.n	800e5c6 <HAL_DMA_IRQHandler+0x736>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d007      	beq.n	800e5d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f022 0208 	bic.w	r2, r2, #8
 800e5d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5da:	f003 031f 	and.w	r3, r3, #31
 800e5de:	223f      	movs	r2, #63	; 0x3f
 800e5e0:	409a      	lsls	r2, r3
 800e5e2:	6a3b      	ldr	r3, [r7, #32]
 800e5e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	f000 834a 	beq.w	800ec94 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	4798      	blx	r3
          }
          return;
 800e608:	e344      	b.n	800ec94 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e614:	2b00      	cmp	r3, #0
 800e616:	d018      	beq.n	800e64a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e622:	2b00      	cmp	r3, #0
 800e624:	d108      	bne.n	800e638 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d02c      	beq.n	800e688 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	4798      	blx	r3
 800e636:	e027      	b.n	800e688 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d023      	beq.n	800e688 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	4798      	blx	r3
 800e648:	e01e      	b.n	800e688 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e654:	2b00      	cmp	r3, #0
 800e656:	d10f      	bne.n	800e678 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f022 0210 	bic.w	r2, r2, #16
 800e666:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2201      	movs	r2, #1
 800e66c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2200      	movs	r2, #0
 800e674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d003      	beq.n	800e688 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f000 8306 	beq.w	800ec9e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e696:	f003 0301 	and.w	r3, r3, #1
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f000 8088 	beq.w	800e7b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2204      	movs	r2, #4
 800e6a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4a7a      	ldr	r2, [pc, #488]	; (800e898 <HAL_DMA_IRQHandler+0xa08>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d04a      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4a79      	ldr	r2, [pc, #484]	; (800e89c <HAL_DMA_IRQHandler+0xa0c>)
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d045      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4a77      	ldr	r2, [pc, #476]	; (800e8a0 <HAL_DMA_IRQHandler+0xa10>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d040      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4a76      	ldr	r2, [pc, #472]	; (800e8a4 <HAL_DMA_IRQHandler+0xa14>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d03b      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a74      	ldr	r2, [pc, #464]	; (800e8a8 <HAL_DMA_IRQHandler+0xa18>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d036      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	4a73      	ldr	r2, [pc, #460]	; (800e8ac <HAL_DMA_IRQHandler+0xa1c>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d031      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a71      	ldr	r2, [pc, #452]	; (800e8b0 <HAL_DMA_IRQHandler+0xa20>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d02c      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a70      	ldr	r2, [pc, #448]	; (800e8b4 <HAL_DMA_IRQHandler+0xa24>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d027      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a6e      	ldr	r2, [pc, #440]	; (800e8b8 <HAL_DMA_IRQHandler+0xa28>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d022      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a6d      	ldr	r2, [pc, #436]	; (800e8bc <HAL_DMA_IRQHandler+0xa2c>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d01d      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a6b      	ldr	r2, [pc, #428]	; (800e8c0 <HAL_DMA_IRQHandler+0xa30>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d018      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a6a      	ldr	r2, [pc, #424]	; (800e8c4 <HAL_DMA_IRQHandler+0xa34>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d013      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a68      	ldr	r2, [pc, #416]	; (800e8c8 <HAL_DMA_IRQHandler+0xa38>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d00e      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4a67      	ldr	r2, [pc, #412]	; (800e8cc <HAL_DMA_IRQHandler+0xa3c>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d009      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a65      	ldr	r2, [pc, #404]	; (800e8d0 <HAL_DMA_IRQHandler+0xa40>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d004      	beq.n	800e748 <HAL_DMA_IRQHandler+0x8b8>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4a64      	ldr	r2, [pc, #400]	; (800e8d4 <HAL_DMA_IRQHandler+0xa44>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d108      	bne.n	800e75a <HAL_DMA_IRQHandler+0x8ca>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f022 0201 	bic.w	r2, r2, #1
 800e756:	601a      	str	r2, [r3, #0]
 800e758:	e007      	b.n	800e76a <HAL_DMA_IRQHandler+0x8da>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f022 0201 	bic.w	r2, r2, #1
 800e768:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	3301      	adds	r3, #1
 800e76e:	60fb      	str	r3, [r7, #12]
 800e770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e772:	429a      	cmp	r2, r3
 800e774:	d307      	bcc.n	800e786 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f003 0301 	and.w	r3, r3, #1
 800e780:	2b00      	cmp	r3, #0
 800e782:	d1f2      	bne.n	800e76a <HAL_DMA_IRQHandler+0x8da>
 800e784:	e000      	b.n	800e788 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800e786:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f003 0301 	and.w	r3, r3, #1
 800e792:	2b00      	cmp	r3, #0
 800e794:	d004      	beq.n	800e7a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2203      	movs	r2, #3
 800e79a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800e79e:	e003      	b.n	800e7a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f000 8272 	beq.w	800ec9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	4798      	blx	r3
 800e7c2:	e26c      	b.n	800ec9e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4a43      	ldr	r2, [pc, #268]	; (800e8d8 <HAL_DMA_IRQHandler+0xa48>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d022      	beq.n	800e814 <HAL_DMA_IRQHandler+0x984>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	4a42      	ldr	r2, [pc, #264]	; (800e8dc <HAL_DMA_IRQHandler+0xa4c>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d01d      	beq.n	800e814 <HAL_DMA_IRQHandler+0x984>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a40      	ldr	r2, [pc, #256]	; (800e8e0 <HAL_DMA_IRQHandler+0xa50>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d018      	beq.n	800e814 <HAL_DMA_IRQHandler+0x984>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4a3f      	ldr	r2, [pc, #252]	; (800e8e4 <HAL_DMA_IRQHandler+0xa54>)
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d013      	beq.n	800e814 <HAL_DMA_IRQHandler+0x984>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a3d      	ldr	r2, [pc, #244]	; (800e8e8 <HAL_DMA_IRQHandler+0xa58>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d00e      	beq.n	800e814 <HAL_DMA_IRQHandler+0x984>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a3c      	ldr	r2, [pc, #240]	; (800e8ec <HAL_DMA_IRQHandler+0xa5c>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d009      	beq.n	800e814 <HAL_DMA_IRQHandler+0x984>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	4a3a      	ldr	r2, [pc, #232]	; (800e8f0 <HAL_DMA_IRQHandler+0xa60>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d004      	beq.n	800e814 <HAL_DMA_IRQHandler+0x984>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a39      	ldr	r2, [pc, #228]	; (800e8f4 <HAL_DMA_IRQHandler+0xa64>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d101      	bne.n	800e818 <HAL_DMA_IRQHandler+0x988>
 800e814:	2301      	movs	r3, #1
 800e816:	e000      	b.n	800e81a <HAL_DMA_IRQHandler+0x98a>
 800e818:	2300      	movs	r3, #0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	f000 823f 	beq.w	800ec9e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e82c:	f003 031f 	and.w	r3, r3, #31
 800e830:	2204      	movs	r2, #4
 800e832:	409a      	lsls	r2, r3
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	4013      	ands	r3, r2
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f000 80cd 	beq.w	800e9d8 <HAL_DMA_IRQHandler+0xb48>
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	f003 0304 	and.w	r3, r3, #4
 800e844:	2b00      	cmp	r3, #0
 800e846:	f000 80c7 	beq.w	800e9d8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e84e:	f003 031f 	and.w	r3, r3, #31
 800e852:	2204      	movs	r2, #4
 800e854:	409a      	lsls	r2, r3
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e860:	2b00      	cmp	r3, #0
 800e862:	d049      	beq.n	800e8f8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d109      	bne.n	800e882 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e872:	2b00      	cmp	r3, #0
 800e874:	f000 8210 	beq.w	800ec98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e880:	e20a      	b.n	800ec98 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e886:	2b00      	cmp	r3, #0
 800e888:	f000 8206 	beq.w	800ec98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e894:	e200      	b.n	800ec98 <HAL_DMA_IRQHandler+0xe08>
 800e896:	bf00      	nop
 800e898:	40020010 	.word	0x40020010
 800e89c:	40020028 	.word	0x40020028
 800e8a0:	40020040 	.word	0x40020040
 800e8a4:	40020058 	.word	0x40020058
 800e8a8:	40020070 	.word	0x40020070
 800e8ac:	40020088 	.word	0x40020088
 800e8b0:	400200a0 	.word	0x400200a0
 800e8b4:	400200b8 	.word	0x400200b8
 800e8b8:	40020410 	.word	0x40020410
 800e8bc:	40020428 	.word	0x40020428
 800e8c0:	40020440 	.word	0x40020440
 800e8c4:	40020458 	.word	0x40020458
 800e8c8:	40020470 	.word	0x40020470
 800e8cc:	40020488 	.word	0x40020488
 800e8d0:	400204a0 	.word	0x400204a0
 800e8d4:	400204b8 	.word	0x400204b8
 800e8d8:	58025408 	.word	0x58025408
 800e8dc:	5802541c 	.word	0x5802541c
 800e8e0:	58025430 	.word	0x58025430
 800e8e4:	58025444 	.word	0x58025444
 800e8e8:	58025458 	.word	0x58025458
 800e8ec:	5802546c 	.word	0x5802546c
 800e8f0:	58025480 	.word	0x58025480
 800e8f4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	f003 0320 	and.w	r3, r3, #32
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d160      	bne.n	800e9c4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4a7f      	ldr	r2, [pc, #508]	; (800eb04 <HAL_DMA_IRQHandler+0xc74>)
 800e908:	4293      	cmp	r3, r2
 800e90a:	d04a      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a7d      	ldr	r2, [pc, #500]	; (800eb08 <HAL_DMA_IRQHandler+0xc78>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d045      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a7c      	ldr	r2, [pc, #496]	; (800eb0c <HAL_DMA_IRQHandler+0xc7c>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d040      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a7a      	ldr	r2, [pc, #488]	; (800eb10 <HAL_DMA_IRQHandler+0xc80>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d03b      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4a79      	ldr	r2, [pc, #484]	; (800eb14 <HAL_DMA_IRQHandler+0xc84>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d036      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a77      	ldr	r2, [pc, #476]	; (800eb18 <HAL_DMA_IRQHandler+0xc88>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d031      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4a76      	ldr	r2, [pc, #472]	; (800eb1c <HAL_DMA_IRQHandler+0xc8c>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d02c      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4a74      	ldr	r2, [pc, #464]	; (800eb20 <HAL_DMA_IRQHandler+0xc90>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d027      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a73      	ldr	r2, [pc, #460]	; (800eb24 <HAL_DMA_IRQHandler+0xc94>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d022      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a71      	ldr	r2, [pc, #452]	; (800eb28 <HAL_DMA_IRQHandler+0xc98>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d01d      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a70      	ldr	r2, [pc, #448]	; (800eb2c <HAL_DMA_IRQHandler+0xc9c>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d018      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a6e      	ldr	r2, [pc, #440]	; (800eb30 <HAL_DMA_IRQHandler+0xca0>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d013      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4a6d      	ldr	r2, [pc, #436]	; (800eb34 <HAL_DMA_IRQHandler+0xca4>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d00e      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4a6b      	ldr	r2, [pc, #428]	; (800eb38 <HAL_DMA_IRQHandler+0xca8>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d009      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a6a      	ldr	r2, [pc, #424]	; (800eb3c <HAL_DMA_IRQHandler+0xcac>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d004      	beq.n	800e9a2 <HAL_DMA_IRQHandler+0xb12>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a68      	ldr	r2, [pc, #416]	; (800eb40 <HAL_DMA_IRQHandler+0xcb0>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d108      	bne.n	800e9b4 <HAL_DMA_IRQHandler+0xb24>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f022 0208 	bic.w	r2, r2, #8
 800e9b0:	601a      	str	r2, [r3, #0]
 800e9b2:	e007      	b.n	800e9c4 <HAL_DMA_IRQHandler+0xb34>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f022 0204 	bic.w	r2, r2, #4
 800e9c2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f000 8165 	beq.w	800ec98 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e9d6:	e15f      	b.n	800ec98 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9dc:	f003 031f 	and.w	r3, r3, #31
 800e9e0:	2202      	movs	r2, #2
 800e9e2:	409a      	lsls	r2, r3
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	4013      	ands	r3, r2
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f000 80c5 	beq.w	800eb78 <HAL_DMA_IRQHandler+0xce8>
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	f003 0302 	and.w	r3, r3, #2
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	f000 80bf 	beq.w	800eb78 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9fe:	f003 031f 	and.w	r3, r3, #31
 800ea02:	2202      	movs	r2, #2
 800ea04:	409a      	lsls	r2, r3
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d018      	beq.n	800ea46 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d109      	bne.n	800ea32 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f000 813a 	beq.w	800ec9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ea30:	e134      	b.n	800ec9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	f000 8130 	beq.w	800ec9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ea44:	e12a      	b.n	800ec9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	f003 0320 	and.w	r3, r3, #32
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f040 8089 	bne.w	800eb64 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	4a2b      	ldr	r2, [pc, #172]	; (800eb04 <HAL_DMA_IRQHandler+0xc74>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d04a      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a29      	ldr	r2, [pc, #164]	; (800eb08 <HAL_DMA_IRQHandler+0xc78>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d045      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4a28      	ldr	r2, [pc, #160]	; (800eb0c <HAL_DMA_IRQHandler+0xc7c>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d040      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4a26      	ldr	r2, [pc, #152]	; (800eb10 <HAL_DMA_IRQHandler+0xc80>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d03b      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	4a25      	ldr	r2, [pc, #148]	; (800eb14 <HAL_DMA_IRQHandler+0xc84>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d036      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4a23      	ldr	r2, [pc, #140]	; (800eb18 <HAL_DMA_IRQHandler+0xc88>)
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d031      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	4a22      	ldr	r2, [pc, #136]	; (800eb1c <HAL_DMA_IRQHandler+0xc8c>)
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d02c      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4a20      	ldr	r2, [pc, #128]	; (800eb20 <HAL_DMA_IRQHandler+0xc90>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d027      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4a1f      	ldr	r2, [pc, #124]	; (800eb24 <HAL_DMA_IRQHandler+0xc94>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d022      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4a1d      	ldr	r2, [pc, #116]	; (800eb28 <HAL_DMA_IRQHandler+0xc98>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d01d      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	4a1c      	ldr	r2, [pc, #112]	; (800eb2c <HAL_DMA_IRQHandler+0xc9c>)
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d018      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4a1a      	ldr	r2, [pc, #104]	; (800eb30 <HAL_DMA_IRQHandler+0xca0>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d013      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4a19      	ldr	r2, [pc, #100]	; (800eb34 <HAL_DMA_IRQHandler+0xca4>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d00e      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a17      	ldr	r2, [pc, #92]	; (800eb38 <HAL_DMA_IRQHandler+0xca8>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d009      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4a16      	ldr	r2, [pc, #88]	; (800eb3c <HAL_DMA_IRQHandler+0xcac>)
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d004      	beq.n	800eaf2 <HAL_DMA_IRQHandler+0xc62>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a14      	ldr	r2, [pc, #80]	; (800eb40 <HAL_DMA_IRQHandler+0xcb0>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d128      	bne.n	800eb44 <HAL_DMA_IRQHandler+0xcb4>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f022 0214 	bic.w	r2, r2, #20
 800eb00:	601a      	str	r2, [r3, #0]
 800eb02:	e027      	b.n	800eb54 <HAL_DMA_IRQHandler+0xcc4>
 800eb04:	40020010 	.word	0x40020010
 800eb08:	40020028 	.word	0x40020028
 800eb0c:	40020040 	.word	0x40020040
 800eb10:	40020058 	.word	0x40020058
 800eb14:	40020070 	.word	0x40020070
 800eb18:	40020088 	.word	0x40020088
 800eb1c:	400200a0 	.word	0x400200a0
 800eb20:	400200b8 	.word	0x400200b8
 800eb24:	40020410 	.word	0x40020410
 800eb28:	40020428 	.word	0x40020428
 800eb2c:	40020440 	.word	0x40020440
 800eb30:	40020458 	.word	0x40020458
 800eb34:	40020470 	.word	0x40020470
 800eb38:	40020488 	.word	0x40020488
 800eb3c:	400204a0 	.word	0x400204a0
 800eb40:	400204b8 	.word	0x400204b8
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f022 020a 	bic.w	r2, r2, #10
 800eb52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2201      	movs	r2, #1
 800eb58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f000 8097 	beq.w	800ec9c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800eb76:	e091      	b.n	800ec9c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb7c:	f003 031f 	and.w	r3, r3, #31
 800eb80:	2208      	movs	r2, #8
 800eb82:	409a      	lsls	r2, r3
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	4013      	ands	r3, r2
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f000 8088 	beq.w	800ec9e <HAL_DMA_IRQHandler+0xe0e>
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	f003 0308 	and.w	r3, r3, #8
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f000 8082 	beq.w	800ec9e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4a41      	ldr	r2, [pc, #260]	; (800eca4 <HAL_DMA_IRQHandler+0xe14>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d04a      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4a3f      	ldr	r2, [pc, #252]	; (800eca8 <HAL_DMA_IRQHandler+0xe18>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d045      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4a3e      	ldr	r2, [pc, #248]	; (800ecac <HAL_DMA_IRQHandler+0xe1c>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d040      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	4a3c      	ldr	r2, [pc, #240]	; (800ecb0 <HAL_DMA_IRQHandler+0xe20>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d03b      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4a3b      	ldr	r2, [pc, #236]	; (800ecb4 <HAL_DMA_IRQHandler+0xe24>)
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d036      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4a39      	ldr	r2, [pc, #228]	; (800ecb8 <HAL_DMA_IRQHandler+0xe28>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d031      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	4a38      	ldr	r2, [pc, #224]	; (800ecbc <HAL_DMA_IRQHandler+0xe2c>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d02c      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4a36      	ldr	r2, [pc, #216]	; (800ecc0 <HAL_DMA_IRQHandler+0xe30>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d027      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4a35      	ldr	r2, [pc, #212]	; (800ecc4 <HAL_DMA_IRQHandler+0xe34>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d022      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4a33      	ldr	r2, [pc, #204]	; (800ecc8 <HAL_DMA_IRQHandler+0xe38>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d01d      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4a32      	ldr	r2, [pc, #200]	; (800eccc <HAL_DMA_IRQHandler+0xe3c>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d018      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a30      	ldr	r2, [pc, #192]	; (800ecd0 <HAL_DMA_IRQHandler+0xe40>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d013      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4a2f      	ldr	r2, [pc, #188]	; (800ecd4 <HAL_DMA_IRQHandler+0xe44>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d00e      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4a2d      	ldr	r2, [pc, #180]	; (800ecd8 <HAL_DMA_IRQHandler+0xe48>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d009      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a2c      	ldr	r2, [pc, #176]	; (800ecdc <HAL_DMA_IRQHandler+0xe4c>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d004      	beq.n	800ec3a <HAL_DMA_IRQHandler+0xdaa>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a2a      	ldr	r2, [pc, #168]	; (800ece0 <HAL_DMA_IRQHandler+0xe50>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d108      	bne.n	800ec4c <HAL_DMA_IRQHandler+0xdbc>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f022 021c 	bic.w	r2, r2, #28
 800ec48:	601a      	str	r2, [r3, #0]
 800ec4a:	e007      	b.n	800ec5c <HAL_DMA_IRQHandler+0xdcc>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f022 020e 	bic.w	r2, r2, #14
 800ec5a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec60:	f003 031f 	and.w	r3, r3, #31
 800ec64:	2201      	movs	r2, #1
 800ec66:	409a      	lsls	r2, r3
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2201      	movs	r2, #1
 800ec70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2201      	movs	r2, #1
 800ec76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d009      	beq.n	800ec9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	4798      	blx	r3
 800ec92:	e004      	b.n	800ec9e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800ec94:	bf00      	nop
 800ec96:	e002      	b.n	800ec9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ec98:	bf00      	nop
 800ec9a:	e000      	b.n	800ec9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ec9c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ec9e:	3728      	adds	r7, #40	; 0x28
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	40020010 	.word	0x40020010
 800eca8:	40020028 	.word	0x40020028
 800ecac:	40020040 	.word	0x40020040
 800ecb0:	40020058 	.word	0x40020058
 800ecb4:	40020070 	.word	0x40020070
 800ecb8:	40020088 	.word	0x40020088
 800ecbc:	400200a0 	.word	0x400200a0
 800ecc0:	400200b8 	.word	0x400200b8
 800ecc4:	40020410 	.word	0x40020410
 800ecc8:	40020428 	.word	0x40020428
 800eccc:	40020440 	.word	0x40020440
 800ecd0:	40020458 	.word	0x40020458
 800ecd4:	40020470 	.word	0x40020470
 800ecd8:	40020488 	.word	0x40020488
 800ecdc:	400204a0 	.word	0x400204a0
 800ece0:	400204b8 	.word	0x400204b8

0800ece4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ecf2:	b2db      	uxtb	r3, r3
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	370c      	adds	r7, #12
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr

0800ed00 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b087      	sub	sp, #28
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]
 800ed24:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed2a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed30:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4a7f      	ldr	r2, [pc, #508]	; (800ef34 <DMA_SetConfig+0x21c>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d072      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a7d      	ldr	r2, [pc, #500]	; (800ef38 <DMA_SetConfig+0x220>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d06d      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a7c      	ldr	r2, [pc, #496]	; (800ef3c <DMA_SetConfig+0x224>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d068      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a7a      	ldr	r2, [pc, #488]	; (800ef40 <DMA_SetConfig+0x228>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d063      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4a79      	ldr	r2, [pc, #484]	; (800ef44 <DMA_SetConfig+0x22c>)
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d05e      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a77      	ldr	r2, [pc, #476]	; (800ef48 <DMA_SetConfig+0x230>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d059      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	4a76      	ldr	r2, [pc, #472]	; (800ef4c <DMA_SetConfig+0x234>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d054      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a74      	ldr	r2, [pc, #464]	; (800ef50 <DMA_SetConfig+0x238>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d04f      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a73      	ldr	r2, [pc, #460]	; (800ef54 <DMA_SetConfig+0x23c>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d04a      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4a71      	ldr	r2, [pc, #452]	; (800ef58 <DMA_SetConfig+0x240>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d045      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4a70      	ldr	r2, [pc, #448]	; (800ef5c <DMA_SetConfig+0x244>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d040      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4a6e      	ldr	r2, [pc, #440]	; (800ef60 <DMA_SetConfig+0x248>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d03b      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4a6d      	ldr	r2, [pc, #436]	; (800ef64 <DMA_SetConfig+0x24c>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d036      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a6b      	ldr	r2, [pc, #428]	; (800ef68 <DMA_SetConfig+0x250>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d031      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4a6a      	ldr	r2, [pc, #424]	; (800ef6c <DMA_SetConfig+0x254>)
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d02c      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4a68      	ldr	r2, [pc, #416]	; (800ef70 <DMA_SetConfig+0x258>)
 800edce:	4293      	cmp	r3, r2
 800edd0:	d027      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	4a67      	ldr	r2, [pc, #412]	; (800ef74 <DMA_SetConfig+0x25c>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d022      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a65      	ldr	r2, [pc, #404]	; (800ef78 <DMA_SetConfig+0x260>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d01d      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4a64      	ldr	r2, [pc, #400]	; (800ef7c <DMA_SetConfig+0x264>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d018      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a62      	ldr	r2, [pc, #392]	; (800ef80 <DMA_SetConfig+0x268>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d013      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4a61      	ldr	r2, [pc, #388]	; (800ef84 <DMA_SetConfig+0x26c>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d00e      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a5f      	ldr	r2, [pc, #380]	; (800ef88 <DMA_SetConfig+0x270>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d009      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4a5e      	ldr	r2, [pc, #376]	; (800ef8c <DMA_SetConfig+0x274>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d004      	beq.n	800ee22 <DMA_SetConfig+0x10a>
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a5c      	ldr	r2, [pc, #368]	; (800ef90 <DMA_SetConfig+0x278>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d101      	bne.n	800ee26 <DMA_SetConfig+0x10e>
 800ee22:	2301      	movs	r3, #1
 800ee24:	e000      	b.n	800ee28 <DMA_SetConfig+0x110>
 800ee26:	2300      	movs	r3, #0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d00d      	beq.n	800ee48 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ee34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d004      	beq.n	800ee48 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee42:	68fa      	ldr	r2, [r7, #12]
 800ee44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ee46:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a39      	ldr	r2, [pc, #228]	; (800ef34 <DMA_SetConfig+0x21c>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d04a      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a38      	ldr	r2, [pc, #224]	; (800ef38 <DMA_SetConfig+0x220>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d045      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4a36      	ldr	r2, [pc, #216]	; (800ef3c <DMA_SetConfig+0x224>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d040      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a35      	ldr	r2, [pc, #212]	; (800ef40 <DMA_SetConfig+0x228>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d03b      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4a33      	ldr	r2, [pc, #204]	; (800ef44 <DMA_SetConfig+0x22c>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d036      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4a32      	ldr	r2, [pc, #200]	; (800ef48 <DMA_SetConfig+0x230>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d031      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4a30      	ldr	r2, [pc, #192]	; (800ef4c <DMA_SetConfig+0x234>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d02c      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	4a2f      	ldr	r2, [pc, #188]	; (800ef50 <DMA_SetConfig+0x238>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d027      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a2d      	ldr	r2, [pc, #180]	; (800ef54 <DMA_SetConfig+0x23c>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d022      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	4a2c      	ldr	r2, [pc, #176]	; (800ef58 <DMA_SetConfig+0x240>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d01d      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a2a      	ldr	r2, [pc, #168]	; (800ef5c <DMA_SetConfig+0x244>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d018      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4a29      	ldr	r2, [pc, #164]	; (800ef60 <DMA_SetConfig+0x248>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d013      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a27      	ldr	r2, [pc, #156]	; (800ef64 <DMA_SetConfig+0x24c>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d00e      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4a26      	ldr	r2, [pc, #152]	; (800ef68 <DMA_SetConfig+0x250>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d009      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4a24      	ldr	r2, [pc, #144]	; (800ef6c <DMA_SetConfig+0x254>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d004      	beq.n	800eee8 <DMA_SetConfig+0x1d0>
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a23      	ldr	r2, [pc, #140]	; (800ef70 <DMA_SetConfig+0x258>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d101      	bne.n	800eeec <DMA_SetConfig+0x1d4>
 800eee8:	2301      	movs	r3, #1
 800eeea:	e000      	b.n	800eeee <DMA_SetConfig+0x1d6>
 800eeec:	2300      	movs	r3, #0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d059      	beq.n	800efa6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eef6:	f003 031f 	and.w	r3, r3, #31
 800eefa:	223f      	movs	r2, #63	; 0x3f
 800eefc:	409a      	lsls	r2, r3
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	681a      	ldr	r2, [r3, #0]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ef10:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	683a      	ldr	r2, [r7, #0]
 800ef18:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	689b      	ldr	r3, [r3, #8]
 800ef1e:	2b40      	cmp	r3, #64	; 0x40
 800ef20:	d138      	bne.n	800ef94 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	687a      	ldr	r2, [r7, #4]
 800ef28:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	68ba      	ldr	r2, [r7, #8]
 800ef30:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ef32:	e086      	b.n	800f042 <DMA_SetConfig+0x32a>
 800ef34:	40020010 	.word	0x40020010
 800ef38:	40020028 	.word	0x40020028
 800ef3c:	40020040 	.word	0x40020040
 800ef40:	40020058 	.word	0x40020058
 800ef44:	40020070 	.word	0x40020070
 800ef48:	40020088 	.word	0x40020088
 800ef4c:	400200a0 	.word	0x400200a0
 800ef50:	400200b8 	.word	0x400200b8
 800ef54:	40020410 	.word	0x40020410
 800ef58:	40020428 	.word	0x40020428
 800ef5c:	40020440 	.word	0x40020440
 800ef60:	40020458 	.word	0x40020458
 800ef64:	40020470 	.word	0x40020470
 800ef68:	40020488 	.word	0x40020488
 800ef6c:	400204a0 	.word	0x400204a0
 800ef70:	400204b8 	.word	0x400204b8
 800ef74:	58025408 	.word	0x58025408
 800ef78:	5802541c 	.word	0x5802541c
 800ef7c:	58025430 	.word	0x58025430
 800ef80:	58025444 	.word	0x58025444
 800ef84:	58025458 	.word	0x58025458
 800ef88:	5802546c 	.word	0x5802546c
 800ef8c:	58025480 	.word	0x58025480
 800ef90:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	68ba      	ldr	r2, [r7, #8]
 800ef9a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	60da      	str	r2, [r3, #12]
}
 800efa4:	e04d      	b.n	800f042 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4a29      	ldr	r2, [pc, #164]	; (800f050 <DMA_SetConfig+0x338>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d022      	beq.n	800eff6 <DMA_SetConfig+0x2de>
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a27      	ldr	r2, [pc, #156]	; (800f054 <DMA_SetConfig+0x33c>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d01d      	beq.n	800eff6 <DMA_SetConfig+0x2de>
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	4a26      	ldr	r2, [pc, #152]	; (800f058 <DMA_SetConfig+0x340>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d018      	beq.n	800eff6 <DMA_SetConfig+0x2de>
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4a24      	ldr	r2, [pc, #144]	; (800f05c <DMA_SetConfig+0x344>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d013      	beq.n	800eff6 <DMA_SetConfig+0x2de>
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	4a23      	ldr	r2, [pc, #140]	; (800f060 <DMA_SetConfig+0x348>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d00e      	beq.n	800eff6 <DMA_SetConfig+0x2de>
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a21      	ldr	r2, [pc, #132]	; (800f064 <DMA_SetConfig+0x34c>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d009      	beq.n	800eff6 <DMA_SetConfig+0x2de>
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	4a20      	ldr	r2, [pc, #128]	; (800f068 <DMA_SetConfig+0x350>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d004      	beq.n	800eff6 <DMA_SetConfig+0x2de>
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a1e      	ldr	r2, [pc, #120]	; (800f06c <DMA_SetConfig+0x354>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d101      	bne.n	800effa <DMA_SetConfig+0x2e2>
 800eff6:	2301      	movs	r3, #1
 800eff8:	e000      	b.n	800effc <DMA_SetConfig+0x2e4>
 800effa:	2300      	movs	r3, #0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d020      	beq.n	800f042 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f004:	f003 031f 	and.w	r3, r3, #31
 800f008:	2201      	movs	r2, #1
 800f00a:	409a      	lsls	r2, r3
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	683a      	ldr	r2, [r7, #0]
 800f016:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	2b40      	cmp	r3, #64	; 0x40
 800f01e:	d108      	bne.n	800f032 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	687a      	ldr	r2, [r7, #4]
 800f026:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	68ba      	ldr	r2, [r7, #8]
 800f02e:	60da      	str	r2, [r3, #12]
}
 800f030:	e007      	b.n	800f042 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	60da      	str	r2, [r3, #12]
}
 800f042:	bf00      	nop
 800f044:	371c      	adds	r7, #28
 800f046:	46bd      	mov	sp, r7
 800f048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04c:	4770      	bx	lr
 800f04e:	bf00      	nop
 800f050:	58025408 	.word	0x58025408
 800f054:	5802541c 	.word	0x5802541c
 800f058:	58025430 	.word	0x58025430
 800f05c:	58025444 	.word	0x58025444
 800f060:	58025458 	.word	0x58025458
 800f064:	5802546c 	.word	0x5802546c
 800f068:	58025480 	.word	0x58025480
 800f06c:	58025494 	.word	0x58025494

0800f070 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f070:	b480      	push	{r7}
 800f072:	b085      	sub	sp, #20
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a42      	ldr	r2, [pc, #264]	; (800f188 <DMA_CalcBaseAndBitshift+0x118>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d04a      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4a41      	ldr	r2, [pc, #260]	; (800f18c <DMA_CalcBaseAndBitshift+0x11c>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d045      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a3f      	ldr	r2, [pc, #252]	; (800f190 <DMA_CalcBaseAndBitshift+0x120>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d040      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a3e      	ldr	r2, [pc, #248]	; (800f194 <DMA_CalcBaseAndBitshift+0x124>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d03b      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4a3c      	ldr	r2, [pc, #240]	; (800f198 <DMA_CalcBaseAndBitshift+0x128>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d036      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	4a3b      	ldr	r2, [pc, #236]	; (800f19c <DMA_CalcBaseAndBitshift+0x12c>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d031      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4a39      	ldr	r2, [pc, #228]	; (800f1a0 <DMA_CalcBaseAndBitshift+0x130>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d02c      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	4a38      	ldr	r2, [pc, #224]	; (800f1a4 <DMA_CalcBaseAndBitshift+0x134>)
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d027      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a36      	ldr	r2, [pc, #216]	; (800f1a8 <DMA_CalcBaseAndBitshift+0x138>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d022      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4a35      	ldr	r2, [pc, #212]	; (800f1ac <DMA_CalcBaseAndBitshift+0x13c>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d01d      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a33      	ldr	r2, [pc, #204]	; (800f1b0 <DMA_CalcBaseAndBitshift+0x140>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d018      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4a32      	ldr	r2, [pc, #200]	; (800f1b4 <DMA_CalcBaseAndBitshift+0x144>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d013      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a30      	ldr	r2, [pc, #192]	; (800f1b8 <DMA_CalcBaseAndBitshift+0x148>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d00e      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4a2f      	ldr	r2, [pc, #188]	; (800f1bc <DMA_CalcBaseAndBitshift+0x14c>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d009      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4a2d      	ldr	r2, [pc, #180]	; (800f1c0 <DMA_CalcBaseAndBitshift+0x150>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d004      	beq.n	800f118 <DMA_CalcBaseAndBitshift+0xa8>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4a2c      	ldr	r2, [pc, #176]	; (800f1c4 <DMA_CalcBaseAndBitshift+0x154>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d101      	bne.n	800f11c <DMA_CalcBaseAndBitshift+0xac>
 800f118:	2301      	movs	r3, #1
 800f11a:	e000      	b.n	800f11e <DMA_CalcBaseAndBitshift+0xae>
 800f11c:	2300      	movs	r3, #0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d024      	beq.n	800f16c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	b2db      	uxtb	r3, r3
 800f128:	3b10      	subs	r3, #16
 800f12a:	4a27      	ldr	r2, [pc, #156]	; (800f1c8 <DMA_CalcBaseAndBitshift+0x158>)
 800f12c:	fba2 2303 	umull	r2, r3, r2, r3
 800f130:	091b      	lsrs	r3, r3, #4
 800f132:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f003 0307 	and.w	r3, r3, #7
 800f13a:	4a24      	ldr	r2, [pc, #144]	; (800f1cc <DMA_CalcBaseAndBitshift+0x15c>)
 800f13c:	5cd3      	ldrb	r3, [r2, r3]
 800f13e:	461a      	mov	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2b03      	cmp	r3, #3
 800f148:	d908      	bls.n	800f15c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	461a      	mov	r2, r3
 800f150:	4b1f      	ldr	r3, [pc, #124]	; (800f1d0 <DMA_CalcBaseAndBitshift+0x160>)
 800f152:	4013      	ands	r3, r2
 800f154:	1d1a      	adds	r2, r3, #4
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	659a      	str	r2, [r3, #88]	; 0x58
 800f15a:	e00d      	b.n	800f178 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	461a      	mov	r2, r3
 800f162:	4b1b      	ldr	r3, [pc, #108]	; (800f1d0 <DMA_CalcBaseAndBitshift+0x160>)
 800f164:	4013      	ands	r3, r2
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	6593      	str	r3, [r2, #88]	; 0x58
 800f16a:	e005      	b.n	800f178 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3714      	adds	r7, #20
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr
 800f188:	40020010 	.word	0x40020010
 800f18c:	40020028 	.word	0x40020028
 800f190:	40020040 	.word	0x40020040
 800f194:	40020058 	.word	0x40020058
 800f198:	40020070 	.word	0x40020070
 800f19c:	40020088 	.word	0x40020088
 800f1a0:	400200a0 	.word	0x400200a0
 800f1a4:	400200b8 	.word	0x400200b8
 800f1a8:	40020410 	.word	0x40020410
 800f1ac:	40020428 	.word	0x40020428
 800f1b0:	40020440 	.word	0x40020440
 800f1b4:	40020458 	.word	0x40020458
 800f1b8:	40020470 	.word	0x40020470
 800f1bc:	40020488 	.word	0x40020488
 800f1c0:	400204a0 	.word	0x400204a0
 800f1c4:	400204b8 	.word	0x400204b8
 800f1c8:	aaaaaaab 	.word	0xaaaaaaab
 800f1cc:	08038ea4 	.word	0x08038ea4
 800f1d0:	fffffc00 	.word	0xfffffc00

0800f1d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b085      	sub	sp, #20
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	699b      	ldr	r3, [r3, #24]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d120      	bne.n	800f22a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ec:	2b03      	cmp	r3, #3
 800f1ee:	d858      	bhi.n	800f2a2 <DMA_CheckFifoParam+0xce>
 800f1f0:	a201      	add	r2, pc, #4	; (adr r2, 800f1f8 <DMA_CheckFifoParam+0x24>)
 800f1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1f6:	bf00      	nop
 800f1f8:	0800f209 	.word	0x0800f209
 800f1fc:	0800f21b 	.word	0x0800f21b
 800f200:	0800f209 	.word	0x0800f209
 800f204:	0800f2a3 	.word	0x0800f2a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f20c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f210:	2b00      	cmp	r3, #0
 800f212:	d048      	beq.n	800f2a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800f214:	2301      	movs	r3, #1
 800f216:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f218:	e045      	b.n	800f2a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f21e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f222:	d142      	bne.n	800f2aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800f224:	2301      	movs	r3, #1
 800f226:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f228:	e03f      	b.n	800f2aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	699b      	ldr	r3, [r3, #24]
 800f22e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f232:	d123      	bne.n	800f27c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f238:	2b03      	cmp	r3, #3
 800f23a:	d838      	bhi.n	800f2ae <DMA_CheckFifoParam+0xda>
 800f23c:	a201      	add	r2, pc, #4	; (adr r2, 800f244 <DMA_CheckFifoParam+0x70>)
 800f23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f242:	bf00      	nop
 800f244:	0800f255 	.word	0x0800f255
 800f248:	0800f25b 	.word	0x0800f25b
 800f24c:	0800f255 	.word	0x0800f255
 800f250:	0800f26d 	.word	0x0800f26d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800f254:	2301      	movs	r3, #1
 800f256:	73fb      	strb	r3, [r7, #15]
        break;
 800f258:	e030      	b.n	800f2bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f262:	2b00      	cmp	r3, #0
 800f264:	d025      	beq.n	800f2b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800f266:	2301      	movs	r3, #1
 800f268:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f26a:	e022      	b.n	800f2b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f270:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f274:	d11f      	bne.n	800f2b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800f276:	2301      	movs	r3, #1
 800f278:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f27a:	e01c      	b.n	800f2b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f280:	2b02      	cmp	r3, #2
 800f282:	d902      	bls.n	800f28a <DMA_CheckFifoParam+0xb6>
 800f284:	2b03      	cmp	r3, #3
 800f286:	d003      	beq.n	800f290 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800f288:	e018      	b.n	800f2bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800f28a:	2301      	movs	r3, #1
 800f28c:	73fb      	strb	r3, [r7, #15]
        break;
 800f28e:	e015      	b.n	800f2bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d00e      	beq.n	800f2ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	73fb      	strb	r3, [r7, #15]
    break;
 800f2a0:	e00b      	b.n	800f2ba <DMA_CheckFifoParam+0xe6>
        break;
 800f2a2:	bf00      	nop
 800f2a4:	e00a      	b.n	800f2bc <DMA_CheckFifoParam+0xe8>
        break;
 800f2a6:	bf00      	nop
 800f2a8:	e008      	b.n	800f2bc <DMA_CheckFifoParam+0xe8>
        break;
 800f2aa:	bf00      	nop
 800f2ac:	e006      	b.n	800f2bc <DMA_CheckFifoParam+0xe8>
        break;
 800f2ae:	bf00      	nop
 800f2b0:	e004      	b.n	800f2bc <DMA_CheckFifoParam+0xe8>
        break;
 800f2b2:	bf00      	nop
 800f2b4:	e002      	b.n	800f2bc <DMA_CheckFifoParam+0xe8>
        break;
 800f2b6:	bf00      	nop
 800f2b8:	e000      	b.n	800f2bc <DMA_CheckFifoParam+0xe8>
    break;
 800f2ba:	bf00      	nop
    }
  }

  return status;
 800f2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3714      	adds	r7, #20
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop

0800f2cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	4a38      	ldr	r2, [pc, #224]	; (800f3c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d022      	beq.n	800f32a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4a36      	ldr	r2, [pc, #216]	; (800f3c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d01d      	beq.n	800f32a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	4a35      	ldr	r2, [pc, #212]	; (800f3c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	d018      	beq.n	800f32a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4a33      	ldr	r2, [pc, #204]	; (800f3cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d013      	beq.n	800f32a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4a32      	ldr	r2, [pc, #200]	; (800f3d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d00e      	beq.n	800f32a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4a30      	ldr	r2, [pc, #192]	; (800f3d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d009      	beq.n	800f32a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4a2f      	ldr	r2, [pc, #188]	; (800f3d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d004      	beq.n	800f32a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4a2d      	ldr	r2, [pc, #180]	; (800f3dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d101      	bne.n	800f32e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800f32a:	2301      	movs	r3, #1
 800f32c:	e000      	b.n	800f330 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800f32e:	2300      	movs	r3, #0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d01a      	beq.n	800f36a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	3b08      	subs	r3, #8
 800f33c:	4a28      	ldr	r2, [pc, #160]	; (800f3e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800f33e:	fba2 2303 	umull	r2, r3, r2, r3
 800f342:	091b      	lsrs	r3, r3, #4
 800f344:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800f346:	68fa      	ldr	r2, [r7, #12]
 800f348:	4b26      	ldr	r3, [pc, #152]	; (800f3e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800f34a:	4413      	add	r3, r2
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	461a      	mov	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4a24      	ldr	r2, [pc, #144]	; (800f3e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800f358:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f003 031f 	and.w	r3, r3, #31
 800f360:	2201      	movs	r2, #1
 800f362:	409a      	lsls	r2, r3
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800f368:	e024      	b.n	800f3b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	3b10      	subs	r3, #16
 800f372:	4a1e      	ldr	r2, [pc, #120]	; (800f3ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800f374:	fba2 2303 	umull	r2, r3, r2, r3
 800f378:	091b      	lsrs	r3, r3, #4
 800f37a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	4a1c      	ldr	r2, [pc, #112]	; (800f3f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d806      	bhi.n	800f392 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	4a1b      	ldr	r2, [pc, #108]	; (800f3f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d902      	bls.n	800f392 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	3308      	adds	r3, #8
 800f390:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	4b18      	ldr	r3, [pc, #96]	; (800f3f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800f396:	4413      	add	r3, r2
 800f398:	009b      	lsls	r3, r3, #2
 800f39a:	461a      	mov	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4a16      	ldr	r2, [pc, #88]	; (800f3fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800f3a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f003 031f 	and.w	r3, r3, #31
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	409a      	lsls	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800f3b4:	bf00      	nop
 800f3b6:	3714      	adds	r7, #20
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr
 800f3c0:	58025408 	.word	0x58025408
 800f3c4:	5802541c 	.word	0x5802541c
 800f3c8:	58025430 	.word	0x58025430
 800f3cc:	58025444 	.word	0x58025444
 800f3d0:	58025458 	.word	0x58025458
 800f3d4:	5802546c 	.word	0x5802546c
 800f3d8:	58025480 	.word	0x58025480
 800f3dc:	58025494 	.word	0x58025494
 800f3e0:	cccccccd 	.word	0xcccccccd
 800f3e4:	16009600 	.word	0x16009600
 800f3e8:	58025880 	.word	0x58025880
 800f3ec:	aaaaaaab 	.word	0xaaaaaaab
 800f3f0:	400204b8 	.word	0x400204b8
 800f3f4:	4002040f 	.word	0x4002040f
 800f3f8:	10008200 	.word	0x10008200
 800f3fc:	40020880 	.word	0x40020880

0800f400 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f400:	b480      	push	{r7}
 800f402:	b085      	sub	sp, #20
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d04a      	beq.n	800f4ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2b08      	cmp	r3, #8
 800f41a:	d847      	bhi.n	800f4ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4a25      	ldr	r2, [pc, #148]	; (800f4b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d022      	beq.n	800f46c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4a24      	ldr	r2, [pc, #144]	; (800f4bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d01d      	beq.n	800f46c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4a22      	ldr	r2, [pc, #136]	; (800f4c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800f436:	4293      	cmp	r3, r2
 800f438:	d018      	beq.n	800f46c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	4a21      	ldr	r2, [pc, #132]	; (800f4c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d013      	beq.n	800f46c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a1f      	ldr	r2, [pc, #124]	; (800f4c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d00e      	beq.n	800f46c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	4a1e      	ldr	r2, [pc, #120]	; (800f4cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d009      	beq.n	800f46c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	4a1c      	ldr	r2, [pc, #112]	; (800f4d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800f45e:	4293      	cmp	r3, r2
 800f460:	d004      	beq.n	800f46c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	4a1b      	ldr	r2, [pc, #108]	; (800f4d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d101      	bne.n	800f470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800f46c:	2301      	movs	r3, #1
 800f46e:	e000      	b.n	800f472 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800f470:	2300      	movs	r3, #0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00a      	beq.n	800f48c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800f476:	68fa      	ldr	r2, [r7, #12]
 800f478:	4b17      	ldr	r3, [pc, #92]	; (800f4d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800f47a:	4413      	add	r3, r2
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	461a      	mov	r2, r3
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4a15      	ldr	r2, [pc, #84]	; (800f4dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800f488:	671a      	str	r2, [r3, #112]	; 0x70
 800f48a:	e009      	b.n	800f4a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	4b14      	ldr	r3, [pc, #80]	; (800f4e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800f490:	4413      	add	r3, r2
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	461a      	mov	r2, r3
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4a11      	ldr	r2, [pc, #68]	; (800f4e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800f49e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	409a      	lsls	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800f4ac:	bf00      	nop
 800f4ae:	3714      	adds	r7, #20
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	58025408 	.word	0x58025408
 800f4bc:	5802541c 	.word	0x5802541c
 800f4c0:	58025430 	.word	0x58025430
 800f4c4:	58025444 	.word	0x58025444
 800f4c8:	58025458 	.word	0x58025458
 800f4cc:	5802546c 	.word	0x5802546c
 800f4d0:	58025480 	.word	0x58025480
 800f4d4:	58025494 	.word	0x58025494
 800f4d8:	1600963f 	.word	0x1600963f
 800f4dc:	58025940 	.word	0x58025940
 800f4e0:	1000823f 	.word	0x1000823f
 800f4e4:	40020940 	.word	0x40020940

0800f4e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b089      	sub	sp, #36	; 0x24
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800f4f6:	4b89      	ldr	r3, [pc, #548]	; (800f71c <HAL_GPIO_Init+0x234>)
 800f4f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800f4fa:	e194      	b.n	800f826 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	2101      	movs	r1, #1
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	fa01 f303 	lsl.w	r3, r1, r3
 800f508:	4013      	ands	r3, r2
 800f50a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	f000 8186 	beq.w	800f820 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	f003 0303 	and.w	r3, r3, #3
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d005      	beq.n	800f52c <HAL_GPIO_Init+0x44>
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	f003 0303 	and.w	r3, r3, #3
 800f528:	2b02      	cmp	r3, #2
 800f52a:	d130      	bne.n	800f58e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	005b      	lsls	r3, r3, #1
 800f536:	2203      	movs	r2, #3
 800f538:	fa02 f303 	lsl.w	r3, r2, r3
 800f53c:	43db      	mvns	r3, r3
 800f53e:	69ba      	ldr	r2, [r7, #24]
 800f540:	4013      	ands	r3, r2
 800f542:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	68da      	ldr	r2, [r3, #12]
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	005b      	lsls	r3, r3, #1
 800f54c:	fa02 f303 	lsl.w	r3, r2, r3
 800f550:	69ba      	ldr	r2, [r7, #24]
 800f552:	4313      	orrs	r3, r2
 800f554:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	69ba      	ldr	r2, [r7, #24]
 800f55a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f562:	2201      	movs	r2, #1
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	fa02 f303 	lsl.w	r3, r2, r3
 800f56a:	43db      	mvns	r3, r3
 800f56c:	69ba      	ldr	r2, [r7, #24]
 800f56e:	4013      	ands	r3, r2
 800f570:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	091b      	lsrs	r3, r3, #4
 800f578:	f003 0201 	and.w	r2, r3, #1
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	fa02 f303 	lsl.w	r3, r2, r3
 800f582:	69ba      	ldr	r2, [r7, #24]
 800f584:	4313      	orrs	r3, r2
 800f586:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	69ba      	ldr	r2, [r7, #24]
 800f58c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	f003 0303 	and.w	r3, r3, #3
 800f596:	2b03      	cmp	r3, #3
 800f598:	d017      	beq.n	800f5ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	005b      	lsls	r3, r3, #1
 800f5a4:	2203      	movs	r2, #3
 800f5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800f5aa:	43db      	mvns	r3, r3
 800f5ac:	69ba      	ldr	r2, [r7, #24]
 800f5ae:	4013      	ands	r3, r2
 800f5b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	689a      	ldr	r2, [r3, #8]
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	005b      	lsls	r3, r3, #1
 800f5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800f5be:	69ba      	ldr	r2, [r7, #24]
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	69ba      	ldr	r2, [r7, #24]
 800f5c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	f003 0303 	and.w	r3, r3, #3
 800f5d2:	2b02      	cmp	r3, #2
 800f5d4:	d123      	bne.n	800f61e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	08da      	lsrs	r2, r3, #3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	3208      	adds	r2, #8
 800f5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	f003 0307 	and.w	r3, r3, #7
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	220f      	movs	r2, #15
 800f5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800f5f2:	43db      	mvns	r3, r3
 800f5f4:	69ba      	ldr	r2, [r7, #24]
 800f5f6:	4013      	ands	r3, r2
 800f5f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	691a      	ldr	r2, [r3, #16]
 800f5fe:	69fb      	ldr	r3, [r7, #28]
 800f600:	f003 0307 	and.w	r3, r3, #7
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	fa02 f303 	lsl.w	r3, r2, r3
 800f60a:	69ba      	ldr	r2, [r7, #24]
 800f60c:	4313      	orrs	r3, r2
 800f60e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	08da      	lsrs	r2, r3, #3
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	3208      	adds	r2, #8
 800f618:	69b9      	ldr	r1, [r7, #24]
 800f61a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	005b      	lsls	r3, r3, #1
 800f628:	2203      	movs	r2, #3
 800f62a:	fa02 f303 	lsl.w	r3, r2, r3
 800f62e:	43db      	mvns	r3, r3
 800f630:	69ba      	ldr	r2, [r7, #24]
 800f632:	4013      	ands	r3, r2
 800f634:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	f003 0203 	and.w	r2, r3, #3
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	fa02 f303 	lsl.w	r3, r2, r3
 800f646:	69ba      	ldr	r2, [r7, #24]
 800f648:	4313      	orrs	r3, r2
 800f64a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	69ba      	ldr	r2, [r7, #24]
 800f650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f000 80e0 	beq.w	800f820 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f660:	4b2f      	ldr	r3, [pc, #188]	; (800f720 <HAL_GPIO_Init+0x238>)
 800f662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f666:	4a2e      	ldr	r2, [pc, #184]	; (800f720 <HAL_GPIO_Init+0x238>)
 800f668:	f043 0302 	orr.w	r3, r3, #2
 800f66c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800f670:	4b2b      	ldr	r3, [pc, #172]	; (800f720 <HAL_GPIO_Init+0x238>)
 800f672:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f676:	f003 0302 	and.w	r3, r3, #2
 800f67a:	60fb      	str	r3, [r7, #12]
 800f67c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f67e:	4a29      	ldr	r2, [pc, #164]	; (800f724 <HAL_GPIO_Init+0x23c>)
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	089b      	lsrs	r3, r3, #2
 800f684:	3302      	adds	r3, #2
 800f686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f68a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	f003 0303 	and.w	r3, r3, #3
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	220f      	movs	r2, #15
 800f696:	fa02 f303 	lsl.w	r3, r2, r3
 800f69a:	43db      	mvns	r3, r3
 800f69c:	69ba      	ldr	r2, [r7, #24]
 800f69e:	4013      	ands	r3, r2
 800f6a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	4a20      	ldr	r2, [pc, #128]	; (800f728 <HAL_GPIO_Init+0x240>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d052      	beq.n	800f750 <HAL_GPIO_Init+0x268>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	4a1f      	ldr	r2, [pc, #124]	; (800f72c <HAL_GPIO_Init+0x244>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d031      	beq.n	800f716 <HAL_GPIO_Init+0x22e>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	4a1e      	ldr	r2, [pc, #120]	; (800f730 <HAL_GPIO_Init+0x248>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d02b      	beq.n	800f712 <HAL_GPIO_Init+0x22a>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	4a1d      	ldr	r2, [pc, #116]	; (800f734 <HAL_GPIO_Init+0x24c>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d025      	beq.n	800f70e <HAL_GPIO_Init+0x226>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	4a1c      	ldr	r2, [pc, #112]	; (800f738 <HAL_GPIO_Init+0x250>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d01f      	beq.n	800f70a <HAL_GPIO_Init+0x222>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	4a1b      	ldr	r2, [pc, #108]	; (800f73c <HAL_GPIO_Init+0x254>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d019      	beq.n	800f706 <HAL_GPIO_Init+0x21e>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	4a1a      	ldr	r2, [pc, #104]	; (800f740 <HAL_GPIO_Init+0x258>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d013      	beq.n	800f702 <HAL_GPIO_Init+0x21a>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4a19      	ldr	r2, [pc, #100]	; (800f744 <HAL_GPIO_Init+0x25c>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d00d      	beq.n	800f6fe <HAL_GPIO_Init+0x216>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	4a18      	ldr	r2, [pc, #96]	; (800f748 <HAL_GPIO_Init+0x260>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d007      	beq.n	800f6fa <HAL_GPIO_Init+0x212>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	4a17      	ldr	r2, [pc, #92]	; (800f74c <HAL_GPIO_Init+0x264>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d101      	bne.n	800f6f6 <HAL_GPIO_Init+0x20e>
 800f6f2:	2309      	movs	r3, #9
 800f6f4:	e02d      	b.n	800f752 <HAL_GPIO_Init+0x26a>
 800f6f6:	230a      	movs	r3, #10
 800f6f8:	e02b      	b.n	800f752 <HAL_GPIO_Init+0x26a>
 800f6fa:	2308      	movs	r3, #8
 800f6fc:	e029      	b.n	800f752 <HAL_GPIO_Init+0x26a>
 800f6fe:	2307      	movs	r3, #7
 800f700:	e027      	b.n	800f752 <HAL_GPIO_Init+0x26a>
 800f702:	2306      	movs	r3, #6
 800f704:	e025      	b.n	800f752 <HAL_GPIO_Init+0x26a>
 800f706:	2305      	movs	r3, #5
 800f708:	e023      	b.n	800f752 <HAL_GPIO_Init+0x26a>
 800f70a:	2304      	movs	r3, #4
 800f70c:	e021      	b.n	800f752 <HAL_GPIO_Init+0x26a>
 800f70e:	2303      	movs	r3, #3
 800f710:	e01f      	b.n	800f752 <HAL_GPIO_Init+0x26a>
 800f712:	2302      	movs	r3, #2
 800f714:	e01d      	b.n	800f752 <HAL_GPIO_Init+0x26a>
 800f716:	2301      	movs	r3, #1
 800f718:	e01b      	b.n	800f752 <HAL_GPIO_Init+0x26a>
 800f71a:	bf00      	nop
 800f71c:	58000080 	.word	0x58000080
 800f720:	58024400 	.word	0x58024400
 800f724:	58000400 	.word	0x58000400
 800f728:	58020000 	.word	0x58020000
 800f72c:	58020400 	.word	0x58020400
 800f730:	58020800 	.word	0x58020800
 800f734:	58020c00 	.word	0x58020c00
 800f738:	58021000 	.word	0x58021000
 800f73c:	58021400 	.word	0x58021400
 800f740:	58021800 	.word	0x58021800
 800f744:	58021c00 	.word	0x58021c00
 800f748:	58022000 	.word	0x58022000
 800f74c:	58022400 	.word	0x58022400
 800f750:	2300      	movs	r3, #0
 800f752:	69fa      	ldr	r2, [r7, #28]
 800f754:	f002 0203 	and.w	r2, r2, #3
 800f758:	0092      	lsls	r2, r2, #2
 800f75a:	4093      	lsls	r3, r2
 800f75c:	69ba      	ldr	r2, [r7, #24]
 800f75e:	4313      	orrs	r3, r2
 800f760:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f762:	4938      	ldr	r1, [pc, #224]	; (800f844 <HAL_GPIO_Init+0x35c>)
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	089b      	lsrs	r3, r3, #2
 800f768:	3302      	adds	r3, #2
 800f76a:	69ba      	ldr	r2, [r7, #24]
 800f76c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	43db      	mvns	r3, r3
 800f77c:	69ba      	ldr	r2, [r7, #24]
 800f77e:	4013      	ands	r3, r2
 800f780:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d003      	beq.n	800f796 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800f78e:	69ba      	ldr	r2, [r7, #24]
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	4313      	orrs	r3, r2
 800f794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800f796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800f79e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	43db      	mvns	r3, r3
 800f7aa:	69ba      	ldr	r2, [r7, #24]
 800f7ac:	4013      	ands	r3, r2
 800f7ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d003      	beq.n	800f7c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800f7bc:	69ba      	ldr	r2, [r7, #24]
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800f7c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	685b      	ldr	r3, [r3, #4]
 800f7d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	43db      	mvns	r3, r3
 800f7d6:	69ba      	ldr	r2, [r7, #24]
 800f7d8:	4013      	ands	r3, r2
 800f7da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d003      	beq.n	800f7f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800f7e8:	69ba      	ldr	r2, [r7, #24]
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	4313      	orrs	r3, r2
 800f7ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	69ba      	ldr	r2, [r7, #24]
 800f7f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	43db      	mvns	r3, r3
 800f800:	69ba      	ldr	r2, [r7, #24]
 800f802:	4013      	ands	r3, r2
 800f804:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d003      	beq.n	800f81a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800f812:	69ba      	ldr	r2, [r7, #24]
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	4313      	orrs	r3, r2
 800f818:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	69ba      	ldr	r2, [r7, #24]
 800f81e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	3301      	adds	r3, #1
 800f824:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	fa22 f303 	lsr.w	r3, r2, r3
 800f830:	2b00      	cmp	r3, #0
 800f832:	f47f ae63 	bne.w	800f4fc <HAL_GPIO_Init+0x14>
  }
}
 800f836:	bf00      	nop
 800f838:	bf00      	nop
 800f83a:	3724      	adds	r7, #36	; 0x24
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr
 800f844:	58000400 	.word	0x58000400

0800f848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	460b      	mov	r3, r1
 800f852:	807b      	strh	r3, [r7, #2]
 800f854:	4613      	mov	r3, r2
 800f856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f858:	787b      	ldrb	r3, [r7, #1]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d003      	beq.n	800f866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f85e:	887a      	ldrh	r2, [r7, #2]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800f864:	e003      	b.n	800f86e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800f866:	887b      	ldrh	r3, [r7, #2]
 800f868:	041a      	lsls	r2, r3, #16
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	619a      	str	r2, [r3, #24]
}
 800f86e:	bf00      	nop
 800f870:	370c      	adds	r7, #12
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
	...

0800f87c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d101      	bne.n	800f88e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f88a:	2301      	movs	r3, #1
 800f88c:	e07f      	b.n	800f98e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f894:	b2db      	uxtb	r3, r3
 800f896:	2b00      	cmp	r3, #0
 800f898:	d106      	bne.n	800f8a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2200      	movs	r2, #0
 800f89e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f7fa ffca 	bl	800a83c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2224      	movs	r2, #36	; 0x24
 800f8ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f022 0201 	bic.w	r2, r2, #1
 800f8be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	685a      	ldr	r2, [r3, #4]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f8cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	689a      	ldr	r2, [r3, #8]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f8dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	d107      	bne.n	800f8f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	689a      	ldr	r2, [r3, #8]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f8f2:	609a      	str	r2, [r3, #8]
 800f8f4:	e006      	b.n	800f904 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	689a      	ldr	r2, [r3, #8]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800f902:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	68db      	ldr	r3, [r3, #12]
 800f908:	2b02      	cmp	r3, #2
 800f90a:	d104      	bne.n	800f916 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f914:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	6859      	ldr	r1, [r3, #4]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	4b1d      	ldr	r3, [pc, #116]	; (800f998 <HAL_I2C_Init+0x11c>)
 800f922:	430b      	orrs	r3, r1
 800f924:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	68da      	ldr	r2, [r3, #12]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f934:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	691a      	ldr	r2, [r3, #16]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	695b      	ldr	r3, [r3, #20]
 800f93e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	699b      	ldr	r3, [r3, #24]
 800f946:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	430a      	orrs	r2, r1
 800f94e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	69d9      	ldr	r1, [r3, #28]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6a1a      	ldr	r2, [r3, #32]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	430a      	orrs	r2, r1
 800f95e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f042 0201 	orr.w	r2, r2, #1
 800f96e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2200      	movs	r2, #0
 800f974:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2220      	movs	r2, #32
 800f97a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2200      	movs	r2, #0
 800f982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2200      	movs	r2, #0
 800f988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3708      	adds	r7, #8
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
 800f996:	bf00      	nop
 800f998:	02008000 	.word	0x02008000

0800f99c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	699b      	ldr	r3, [r3, #24]
 800f9aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d005      	beq.n	800f9c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9c0:	68ba      	ldr	r2, [r7, #8]
 800f9c2:	68f9      	ldr	r1, [r7, #12]
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	4798      	blx	r3
  }
}
 800f9c8:	bf00      	nop
 800f9ca:	3710      	adds	r7, #16
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b086      	sub	sp, #24
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	699b      	ldr	r3, [r3, #24]
 800f9de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	0a1b      	lsrs	r3, r3, #8
 800f9ec:	f003 0301 	and.w	r3, r3, #1
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d010      	beq.n	800fa16 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	09db      	lsrs	r3, r3, #7
 800f9f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d00a      	beq.n	800fa16 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa04:	f043 0201 	orr.w	r2, r3, #1
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa14:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	0a9b      	lsrs	r3, r3, #10
 800fa1a:	f003 0301 	and.w	r3, r3, #1
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d010      	beq.n	800fa44 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	09db      	lsrs	r3, r3, #7
 800fa26:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d00a      	beq.n	800fa44 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa32:	f043 0208 	orr.w	r2, r3, #8
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fa42:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	0a5b      	lsrs	r3, r3, #9
 800fa48:	f003 0301 	and.w	r3, r3, #1
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d010      	beq.n	800fa72 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	09db      	lsrs	r3, r3, #7
 800fa54:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00a      	beq.n	800fa72 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa60:	f043 0202 	orr.w	r2, r3, #2
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa70:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa76:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f003 030b 	and.w	r3, r3, #11
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d003      	beq.n	800fa8a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800fa82:	68f9      	ldr	r1, [r7, #12]
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f000 fc77 	bl	8010378 <I2C_ITError>
  }
}
 800fa8a:	bf00      	nop
 800fa8c:	3718      	adds	r7, #24
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}

0800fa92 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa92:	b480      	push	{r7}
 800fa94:	b083      	sub	sp, #12
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800fa9a:	bf00      	nop
 800fa9c:	370c      	adds	r7, #12
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr

0800faa6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800faa6:	b480      	push	{r7}
 800faa8:	b083      	sub	sp, #12
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800faae:	bf00      	nop
 800fab0:	370c      	adds	r7, #12
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr

0800faba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800faba:	b480      	push	{r7}
 800fabc:	b083      	sub	sp, #12
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
 800fac2:	460b      	mov	r3, r1
 800fac4:	70fb      	strb	r3, [r7, #3]
 800fac6:	4613      	mov	r3, r2
 800fac8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800faca:	bf00      	nop
 800facc:	370c      	adds	r7, #12
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr

0800fad6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fad6:	b480      	push	{r7}
 800fad8:	b083      	sub	sp, #12
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800fade:	bf00      	nop
 800fae0:	370c      	adds	r7, #12
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr

0800faea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800faea:	b480      	push	{r7}
 800faec:	b083      	sub	sp, #12
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800faf2:	bf00      	nop
 800faf4:	370c      	adds	r7, #12
 800faf6:	46bd      	mov	sp, r7
 800faf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafc:	4770      	bx	lr

0800fafe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fafe:	b480      	push	{r7}
 800fb00:	b083      	sub	sp, #12
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800fb06:	bf00      	nop
 800fb08:	370c      	adds	r7, #12
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b086      	sub	sp, #24
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	60f8      	str	r0, [r7, #12]
 800fb1a:	60b9      	str	r1, [r7, #8]
 800fb1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb22:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb2e:	2b01      	cmp	r3, #1
 800fb30:	d101      	bne.n	800fb36 <I2C_Slave_ISR_IT+0x24>
 800fb32:	2302      	movs	r3, #2
 800fb34:	e0ec      	b.n	800fd10 <I2C_Slave_ISR_IT+0x1fe>
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2201      	movs	r2, #1
 800fb3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	095b      	lsrs	r3, r3, #5
 800fb42:	f003 0301 	and.w	r3, r3, #1
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d009      	beq.n	800fb5e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	095b      	lsrs	r3, r3, #5
 800fb4e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d003      	beq.n	800fb5e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800fb56:	6939      	ldr	r1, [r7, #16]
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f000 f9bf 	bl	800fedc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	091b      	lsrs	r3, r3, #4
 800fb62:	f003 0301 	and.w	r3, r3, #1
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d04d      	beq.n	800fc06 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	091b      	lsrs	r3, r3, #4
 800fb6e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d047      	beq.n	800fc06 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d128      	bne.n	800fbd2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	2b28      	cmp	r3, #40	; 0x28
 800fb8a:	d108      	bne.n	800fb9e <I2C_Slave_ISR_IT+0x8c>
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fb92:	d104      	bne.n	800fb9e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800fb94:	6939      	ldr	r1, [r7, #16]
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f000 fb98 	bl	80102cc <I2C_ITListenCplt>
 800fb9c:	e032      	b.n	800fc04 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	2b29      	cmp	r3, #41	; 0x29
 800fba8:	d10e      	bne.n	800fbc8 <I2C_Slave_ISR_IT+0xb6>
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fbb0:	d00a      	beq.n	800fbc8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2210      	movs	r2, #16
 800fbb8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f000 fcd3 	bl	8010566 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	f000 f92d 	bl	800fe20 <I2C_ITSlaveSeqCplt>
 800fbc6:	e01d      	b.n	800fc04 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2210      	movs	r2, #16
 800fbce:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800fbd0:	e096      	b.n	800fd00 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2210      	movs	r2, #16
 800fbd8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbde:	f043 0204 	orr.w	r2, r3, #4
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d004      	beq.n	800fbf6 <I2C_Slave_ISR_IT+0xe4>
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fbf2:	f040 8085 	bne.w	800fd00 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f000 fbbb 	bl	8010378 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800fc02:	e07d      	b.n	800fd00 <I2C_Slave_ISR_IT+0x1ee>
 800fc04:	e07c      	b.n	800fd00 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	089b      	lsrs	r3, r3, #2
 800fc0a:	f003 0301 	and.w	r3, r3, #1
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d030      	beq.n	800fc74 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	089b      	lsrs	r3, r3, #2
 800fc16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d02a      	beq.n	800fc74 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d018      	beq.n	800fc5a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc32:	b2d2      	uxtb	r2, r2
 800fc34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc3a:	1c5a      	adds	r2, r3, #1
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc44:	3b01      	subs	r3, #1
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	3b01      	subs	r3, #1
 800fc54:	b29a      	uxth	r2, r3
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d14f      	bne.n	800fd04 <I2C_Slave_ISR_IT+0x1f2>
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fc6a:	d04b      	beq.n	800fd04 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f000 f8d7 	bl	800fe20 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800fc72:	e047      	b.n	800fd04 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fc74:	693b      	ldr	r3, [r7, #16]
 800fc76:	08db      	lsrs	r3, r3, #3
 800fc78:	f003 0301 	and.w	r3, r3, #1
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d00a      	beq.n	800fc96 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	08db      	lsrs	r3, r3, #3
 800fc84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d004      	beq.n	800fc96 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800fc8c:	6939      	ldr	r1, [r7, #16]
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	f000 f842 	bl	800fd18 <I2C_ITAddrCplt>
 800fc94:	e037      	b.n	800fd06 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	085b      	lsrs	r3, r3, #1
 800fc9a:	f003 0301 	and.w	r3, r3, #1
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d031      	beq.n	800fd06 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	085b      	lsrs	r3, r3, #1
 800fca6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d02b      	beq.n	800fd06 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d018      	beq.n	800fcea <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcbc:	781a      	ldrb	r2, [r3, #0]
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc8:	1c5a      	adds	r2, r3, #1
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	3b01      	subs	r3, #1
 800fcd6:	b29a      	uxth	r2, r3
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fce0:	3b01      	subs	r3, #1
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	851a      	strh	r2, [r3, #40]	; 0x28
 800fce8:	e00d      	b.n	800fd06 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fcf0:	d002      	beq.n	800fcf8 <I2C_Slave_ISR_IT+0x1e6>
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d106      	bne.n	800fd06 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fcf8:	68f8      	ldr	r0, [r7, #12]
 800fcfa:	f000 f891 	bl	800fe20 <I2C_ITSlaveSeqCplt>
 800fcfe:	e002      	b.n	800fd06 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800fd00:	bf00      	nop
 800fd02:	e000      	b.n	800fd06 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800fd04:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fd0e:	2300      	movs	r3, #0
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3718      	adds	r7, #24
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fd2e:	2b28      	cmp	r3, #40	; 0x28
 800fd30:	d16a      	bne.n	800fe08 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	699b      	ldr	r3, [r3, #24]
 800fd38:	0c1b      	lsrs	r3, r3, #16
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	f003 0301 	and.w	r3, r3, #1
 800fd40:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	699b      	ldr	r3, [r3, #24]
 800fd48:	0c1b      	lsrs	r3, r3, #16
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fd50:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	689b      	ldr	r3, [r3, #8]
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd5e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fd6c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	2b02      	cmp	r3, #2
 800fd74:	d138      	bne.n	800fde8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fd76:	897b      	ldrh	r3, [r7, #10]
 800fd78:	09db      	lsrs	r3, r3, #7
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	89bb      	ldrh	r3, [r7, #12]
 800fd7e:	4053      	eors	r3, r2
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	f003 0306 	and.w	r3, r3, #6
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d11c      	bne.n	800fdc4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fd8a:	897b      	ldrh	r3, [r7, #10]
 800fd8c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd92:	1c5a      	adds	r2, r3, #1
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd9c:	2b02      	cmp	r3, #2
 800fd9e:	d13b      	bne.n	800fe18 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2208      	movs	r2, #8
 800fdac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fdb6:	89ba      	ldrh	r2, [r7, #12]
 800fdb8:	7bfb      	ldrb	r3, [r7, #15]
 800fdba:	4619      	mov	r1, r3
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f7ff fe7c 	bl	800faba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fdc2:	e029      	b.n	800fe18 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800fdc4:	893b      	ldrh	r3, [r7, #8]
 800fdc6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fdc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f000 fc0c 	bl	80105ea <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fdda:	89ba      	ldrh	r2, [r7, #12]
 800fddc:	7bfb      	ldrb	r3, [r7, #15]
 800fdde:	4619      	mov	r1, r3
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f7ff fe6a 	bl	800faba <HAL_I2C_AddrCallback>
}
 800fde6:	e017      	b.n	800fe18 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fde8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 fbfc 	bl	80105ea <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fdfa:	89ba      	ldrh	r2, [r7, #12]
 800fdfc:	7bfb      	ldrb	r3, [r7, #15]
 800fdfe:	4619      	mov	r1, r3
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f7ff fe5a 	bl	800faba <HAL_I2C_AddrCallback>
}
 800fe06:	e007      	b.n	800fe18 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2208      	movs	r2, #8
 800fe0e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2200      	movs	r2, #0
 800fe14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800fe18:	bf00      	nop
 800fe1a:	3710      	adds	r7, #16
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b084      	sub	sp, #16
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2200      	movs	r2, #0
 800fe34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	0b9b      	lsrs	r3, r3, #14
 800fe3c:	f003 0301 	and.w	r3, r3, #1
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d008      	beq.n	800fe56 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fe52:	601a      	str	r2, [r3, #0]
 800fe54:	e00d      	b.n	800fe72 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	0bdb      	lsrs	r3, r3, #15
 800fe5a:	f003 0301 	and.w	r3, r3, #1
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d007      	beq.n	800fe72 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fe70:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe78:	b2db      	uxtb	r3, r3
 800fe7a:	2b29      	cmp	r3, #41	; 0x29
 800fe7c:	d112      	bne.n	800fea4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2228      	movs	r2, #40	; 0x28
 800fe82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2221      	movs	r2, #33	; 0x21
 800fe8a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fe8c:	2101      	movs	r1, #1
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 fbab 	bl	80105ea <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f7ff fdf8 	bl	800fa92 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fea2:	e017      	b.n	800fed4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	2b2a      	cmp	r3, #42	; 0x2a
 800feae:	d111      	bne.n	800fed4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2228      	movs	r2, #40	; 0x28
 800feb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2222      	movs	r2, #34	; 0x22
 800febc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800febe:	2102      	movs	r1, #2
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f000 fb92 	bl	80105ea <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2200      	movs	r2, #0
 800feca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f7ff fde9 	bl	800faa6 <HAL_I2C_SlaveRxCpltCallback>
}
 800fed4:	bf00      	nop
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b086      	sub	sp, #24
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fef8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	2220      	movs	r2, #32
 800ff00:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ff02:	7bfb      	ldrb	r3, [r7, #15]
 800ff04:	2b21      	cmp	r3, #33	; 0x21
 800ff06:	d002      	beq.n	800ff0e <I2C_ITSlaveCplt+0x32>
 800ff08:	7bfb      	ldrb	r3, [r7, #15]
 800ff0a:	2b29      	cmp	r3, #41	; 0x29
 800ff0c:	d108      	bne.n	800ff20 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ff0e:	f248 0101 	movw	r1, #32769	; 0x8001
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f000 fb69 	bl	80105ea <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2221      	movs	r2, #33	; 0x21
 800ff1c:	631a      	str	r2, [r3, #48]	; 0x30
 800ff1e:	e00d      	b.n	800ff3c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ff20:	7bfb      	ldrb	r3, [r7, #15]
 800ff22:	2b22      	cmp	r3, #34	; 0x22
 800ff24:	d002      	beq.n	800ff2c <I2C_ITSlaveCplt+0x50>
 800ff26:	7bfb      	ldrb	r3, [r7, #15]
 800ff28:	2b2a      	cmp	r3, #42	; 0x2a
 800ff2a:	d107      	bne.n	800ff3c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ff2c:	f248 0102 	movw	r1, #32770	; 0x8002
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 fb5a 	bl	80105ea <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2222      	movs	r2, #34	; 0x22
 800ff3a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	685a      	ldr	r2, [r3, #4]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ff4a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	6859      	ldr	r1, [r3, #4]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	4b80      	ldr	r3, [pc, #512]	; (8010158 <I2C_ITSlaveCplt+0x27c>)
 800ff58:	400b      	ands	r3, r1
 800ff5a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f000 fb02 	bl	8010566 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	0b9b      	lsrs	r3, r3, #14
 800ff66:	f003 0301 	and.w	r3, r3, #1
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d07a      	beq.n	8010064 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ff7c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	f000 8111 	beq.w	80101aa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	4a73      	ldr	r2, [pc, #460]	; (801015c <I2C_ITSlaveCplt+0x280>)
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d059      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	4a71      	ldr	r2, [pc, #452]	; (8010160 <I2C_ITSlaveCplt+0x284>)
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	d053      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4a6f      	ldr	r2, [pc, #444]	; (8010164 <I2C_ITSlaveCplt+0x288>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d04d      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a6d      	ldr	r2, [pc, #436]	; (8010168 <I2C_ITSlaveCplt+0x28c>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d047      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	4a6b      	ldr	r2, [pc, #428]	; (801016c <I2C_ITSlaveCplt+0x290>)
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	d041      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4a69      	ldr	r2, [pc, #420]	; (8010170 <I2C_ITSlaveCplt+0x294>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d03b      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4a67      	ldr	r2, [pc, #412]	; (8010174 <I2C_ITSlaveCplt+0x298>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d035      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	4a65      	ldr	r2, [pc, #404]	; (8010178 <I2C_ITSlaveCplt+0x29c>)
 800ffe4:	4293      	cmp	r3, r2
 800ffe6:	d02f      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	4a63      	ldr	r2, [pc, #396]	; (801017c <I2C_ITSlaveCplt+0x2a0>)
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d029      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4a61      	ldr	r2, [pc, #388]	; (8010180 <I2C_ITSlaveCplt+0x2a4>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d023      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	4a5f      	ldr	r2, [pc, #380]	; (8010184 <I2C_ITSlaveCplt+0x2a8>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d01d      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4a5d      	ldr	r2, [pc, #372]	; (8010188 <I2C_ITSlaveCplt+0x2ac>)
 8010014:	4293      	cmp	r3, r2
 8010016:	d017      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4a5b      	ldr	r2, [pc, #364]	; (801018c <I2C_ITSlaveCplt+0x2b0>)
 8010020:	4293      	cmp	r3, r2
 8010022:	d011      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4a59      	ldr	r2, [pc, #356]	; (8010190 <I2C_ITSlaveCplt+0x2b4>)
 801002c:	4293      	cmp	r3, r2
 801002e:	d00b      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4a57      	ldr	r2, [pc, #348]	; (8010194 <I2C_ITSlaveCplt+0x2b8>)
 8010038:	4293      	cmp	r3, r2
 801003a:	d005      	beq.n	8010048 <I2C_ITSlaveCplt+0x16c>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	4a55      	ldr	r2, [pc, #340]	; (8010198 <I2C_ITSlaveCplt+0x2bc>)
 8010044:	4293      	cmp	r3, r2
 8010046:	d105      	bne.n	8010054 <I2C_ITSlaveCplt+0x178>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	b29b      	uxth	r3, r3
 8010052:	e004      	b.n	801005e <I2C_ITSlaveCplt+0x182>
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	b29b      	uxth	r3, r3
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	8553      	strh	r3, [r2, #42]	; 0x2a
 8010062:	e0a2      	b.n	80101aa <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	0bdb      	lsrs	r3, r3, #15
 8010068:	f003 0301 	and.w	r3, r3, #1
 801006c:	2b00      	cmp	r3, #0
 801006e:	f000 809c 	beq.w	80101aa <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010080:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010086:	2b00      	cmp	r3, #0
 8010088:	f000 808f 	beq.w	80101aa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	4a32      	ldr	r2, [pc, #200]	; (801015c <I2C_ITSlaveCplt+0x280>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d059      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4a30      	ldr	r2, [pc, #192]	; (8010160 <I2C_ITSlaveCplt+0x284>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d053      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4a2e      	ldr	r2, [pc, #184]	; (8010164 <I2C_ITSlaveCplt+0x288>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d04d      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	4a2c      	ldr	r2, [pc, #176]	; (8010168 <I2C_ITSlaveCplt+0x28c>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d047      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4a2a      	ldr	r2, [pc, #168]	; (801016c <I2C_ITSlaveCplt+0x290>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d041      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	4a28      	ldr	r2, [pc, #160]	; (8010170 <I2C_ITSlaveCplt+0x294>)
 80100d0:	4293      	cmp	r3, r2
 80100d2:	d03b      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4a26      	ldr	r2, [pc, #152]	; (8010174 <I2C_ITSlaveCplt+0x298>)
 80100dc:	4293      	cmp	r3, r2
 80100de:	d035      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	4a24      	ldr	r2, [pc, #144]	; (8010178 <I2C_ITSlaveCplt+0x29c>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d02f      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	4a22      	ldr	r2, [pc, #136]	; (801017c <I2C_ITSlaveCplt+0x2a0>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d029      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a20      	ldr	r2, [pc, #128]	; (8010180 <I2C_ITSlaveCplt+0x2a4>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d023      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4a1e      	ldr	r2, [pc, #120]	; (8010184 <I2C_ITSlaveCplt+0x2a8>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d01d      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	4a1c      	ldr	r2, [pc, #112]	; (8010188 <I2C_ITSlaveCplt+0x2ac>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d017      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a1a      	ldr	r2, [pc, #104]	; (801018c <I2C_ITSlaveCplt+0x2b0>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d011      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4a18      	ldr	r2, [pc, #96]	; (8010190 <I2C_ITSlaveCplt+0x2b4>)
 8010130:	4293      	cmp	r3, r2
 8010132:	d00b      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4a16      	ldr	r2, [pc, #88]	; (8010194 <I2C_ITSlaveCplt+0x2b8>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d005      	beq.n	801014c <I2C_ITSlaveCplt+0x270>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4a14      	ldr	r2, [pc, #80]	; (8010198 <I2C_ITSlaveCplt+0x2bc>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d127      	bne.n	801019c <I2C_ITSlaveCplt+0x2c0>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	b29b      	uxth	r3, r3
 8010156:	e026      	b.n	80101a6 <I2C_ITSlaveCplt+0x2ca>
 8010158:	fe00e800 	.word	0xfe00e800
 801015c:	40020010 	.word	0x40020010
 8010160:	40020028 	.word	0x40020028
 8010164:	40020040 	.word	0x40020040
 8010168:	40020058 	.word	0x40020058
 801016c:	40020070 	.word	0x40020070
 8010170:	40020088 	.word	0x40020088
 8010174:	400200a0 	.word	0x400200a0
 8010178:	400200b8 	.word	0x400200b8
 801017c:	40020410 	.word	0x40020410
 8010180:	40020428 	.word	0x40020428
 8010184:	40020440 	.word	0x40020440
 8010188:	40020458 	.word	0x40020458
 801018c:	40020470 	.word	0x40020470
 8010190:	40020488 	.word	0x40020488
 8010194:	400204a0 	.word	0x400204a0
 8010198:	400204b8 	.word	0x400204b8
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	089b      	lsrs	r3, r3, #2
 80101ae:	f003 0301 	and.w	r3, r3, #1
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d020      	beq.n	80101f8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	f023 0304 	bic.w	r3, r3, #4
 80101bc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c8:	b2d2      	uxtb	r2, r2
 80101ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d0:	1c5a      	adds	r2, r3, #1
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00c      	beq.n	80101f8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80101e2:	3b01      	subs	r3, #1
 80101e4:	b29a      	uxth	r2, r3
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	3b01      	subs	r3, #1
 80101f2:	b29a      	uxth	r2, r3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80101fc:	b29b      	uxth	r3, r3
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d005      	beq.n	801020e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010206:	f043 0204 	orr.w	r2, r3, #4
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2200      	movs	r2, #0
 8010212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2200      	movs	r2, #0
 801021a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010220:	2b00      	cmp	r3, #0
 8010222:	d010      	beq.n	8010246 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010228:	4619      	mov	r1, r3
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 f8a4 	bl	8010378 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010236:	b2db      	uxtb	r3, r3
 8010238:	2b28      	cmp	r3, #40	; 0x28
 801023a:	d141      	bne.n	80102c0 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801023c:	6979      	ldr	r1, [r7, #20]
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f000 f844 	bl	80102cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010244:	e03c      	b.n	80102c0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801024a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801024e:	d014      	beq.n	801027a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7ff fde5 	bl	800fe20 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4a1b      	ldr	r2, [pc, #108]	; (80102c8 <I2C_ITSlaveCplt+0x3ec>)
 801025a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2220      	movs	r2, #32
 8010260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2200      	movs	r2, #0
 8010268:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2200      	movs	r2, #0
 801026e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f7ff fc2f 	bl	800fad6 <HAL_I2C_ListenCpltCallback>
}
 8010278:	e022      	b.n	80102c0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010280:	b2db      	uxtb	r3, r3
 8010282:	2b22      	cmp	r3, #34	; 0x22
 8010284:	d10e      	bne.n	80102a4 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2220      	movs	r2, #32
 801028a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2200      	movs	r2, #0
 8010292:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f7ff fc02 	bl	800faa6 <HAL_I2C_SlaveRxCpltCallback>
}
 80102a2:	e00d      	b.n	80102c0 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2220      	movs	r2, #32
 80102a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2200      	movs	r2, #0
 80102b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f7ff fbe9 	bl	800fa92 <HAL_I2C_SlaveTxCpltCallback>
}
 80102c0:	bf00      	nop
 80102c2:	3718      	adds	r7, #24
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	ffff0000 	.word	0xffff0000

080102cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4a26      	ldr	r2, [pc, #152]	; (8010374 <I2C_ITListenCplt+0xa8>)
 80102da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2200      	movs	r2, #0
 80102e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2220      	movs	r2, #32
 80102e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2200      	movs	r2, #0
 80102ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2200      	movs	r2, #0
 80102f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	089b      	lsrs	r3, r3, #2
 80102fc:	f003 0301 	and.w	r3, r3, #1
 8010300:	2b00      	cmp	r3, #0
 8010302:	d022      	beq.n	801034a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801030e:	b2d2      	uxtb	r2, r2
 8010310:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010316:	1c5a      	adds	r2, r3, #1
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010320:	2b00      	cmp	r3, #0
 8010322:	d012      	beq.n	801034a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010328:	3b01      	subs	r3, #1
 801032a:	b29a      	uxth	r2, r3
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010334:	b29b      	uxth	r3, r3
 8010336:	3b01      	subs	r3, #1
 8010338:	b29a      	uxth	r2, r3
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010342:	f043 0204 	orr.w	r2, r3, #4
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801034a:	f248 0103 	movw	r1, #32771	; 0x8003
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f000 f94b 	bl	80105ea <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2210      	movs	r2, #16
 801035a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2200      	movs	r2, #0
 8010360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f7ff fbb6 	bl	800fad6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801036a:	bf00      	nop
 801036c:	3708      	adds	r7, #8
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	ffff0000 	.word	0xffff0000

08010378 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2200      	movs	r2, #0
 801038e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	4a5d      	ldr	r2, [pc, #372]	; (801050c <I2C_ITError+0x194>)
 8010396:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2200      	movs	r2, #0
 801039c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	431a      	orrs	r2, r3
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80103aa:	7bfb      	ldrb	r3, [r7, #15]
 80103ac:	2b28      	cmp	r3, #40	; 0x28
 80103ae:	d005      	beq.n	80103bc <I2C_ITError+0x44>
 80103b0:	7bfb      	ldrb	r3, [r7, #15]
 80103b2:	2b29      	cmp	r3, #41	; 0x29
 80103b4:	d002      	beq.n	80103bc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80103b6:	7bfb      	ldrb	r3, [r7, #15]
 80103b8:	2b2a      	cmp	r3, #42	; 0x2a
 80103ba:	d10b      	bne.n	80103d4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80103bc:	2103      	movs	r1, #3
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f000 f913 	bl	80105ea <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2228      	movs	r2, #40	; 0x28
 80103c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4a50      	ldr	r2, [pc, #320]	; (8010510 <I2C_ITError+0x198>)
 80103d0:	635a      	str	r2, [r3, #52]	; 0x34
 80103d2:	e011      	b.n	80103f8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80103d4:	f248 0103 	movw	r1, #32771	; 0x8003
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f000 f906 	bl	80105ea <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	2b60      	cmp	r3, #96	; 0x60
 80103e8:	d003      	beq.n	80103f2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2220      	movs	r2, #32
 80103ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2200      	movs	r2, #0
 80103f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103fc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010402:	2b00      	cmp	r3, #0
 8010404:	d039      	beq.n	801047a <I2C_ITError+0x102>
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	2b11      	cmp	r3, #17
 801040a:	d002      	beq.n	8010412 <I2C_ITError+0x9a>
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	2b21      	cmp	r3, #33	; 0x21
 8010410:	d133      	bne.n	801047a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801041c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010420:	d107      	bne.n	8010432 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	681a      	ldr	r2, [r3, #0]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010430:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010436:	4618      	mov	r0, r3
 8010438:	f7fe fc54 	bl	800ece4 <HAL_DMA_GetState>
 801043c:	4603      	mov	r3, r0
 801043e:	2b01      	cmp	r3, #1
 8010440:	d017      	beq.n	8010472 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010446:	4a33      	ldr	r2, [pc, #204]	; (8010514 <I2C_ITError+0x19c>)
 8010448:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2200      	movs	r2, #0
 801044e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010456:	4618      	mov	r0, r3
 8010458:	f7fd fad4 	bl	800da04 <HAL_DMA_Abort_IT>
 801045c:	4603      	mov	r3, r0
 801045e:	2b00      	cmp	r3, #0
 8010460:	d04d      	beq.n	80104fe <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010468:	687a      	ldr	r2, [r7, #4]
 801046a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801046c:	4610      	mov	r0, r2
 801046e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010470:	e045      	b.n	80104fe <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f000 f850 	bl	8010518 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010478:	e041      	b.n	80104fe <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801047e:	2b00      	cmp	r3, #0
 8010480:	d039      	beq.n	80104f6 <I2C_ITError+0x17e>
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	2b12      	cmp	r3, #18
 8010486:	d002      	beq.n	801048e <I2C_ITError+0x116>
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	2b22      	cmp	r3, #34	; 0x22
 801048c:	d133      	bne.n	80104f6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801049c:	d107      	bne.n	80104ae <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80104ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fe fc16 	bl	800ece4 <HAL_DMA_GetState>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d017      	beq.n	80104ee <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104c2:	4a14      	ldr	r2, [pc, #80]	; (8010514 <I2C_ITError+0x19c>)
 80104c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fd fa96 	bl	800da04 <HAL_DMA_Abort_IT>
 80104d8:	4603      	mov	r3, r0
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d011      	beq.n	8010502 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104e4:	687a      	ldr	r2, [r7, #4]
 80104e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80104e8:	4610      	mov	r0, r2
 80104ea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80104ec:	e009      	b.n	8010502 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 f812 	bl	8010518 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80104f4:	e005      	b.n	8010502 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f000 f80e 	bl	8010518 <I2C_TreatErrorCallback>
  }
}
 80104fc:	e002      	b.n	8010504 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80104fe:	bf00      	nop
 8010500:	e000      	b.n	8010504 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010502:	bf00      	nop
}
 8010504:	bf00      	nop
 8010506:	3710      	adds	r7, #16
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	ffff0000 	.word	0xffff0000
 8010510:	0800fb13 	.word	0x0800fb13
 8010514:	080105af 	.word	0x080105af

08010518 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010526:	b2db      	uxtb	r3, r3
 8010528:	2b60      	cmp	r3, #96	; 0x60
 801052a:	d10e      	bne.n	801054a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2220      	movs	r2, #32
 8010530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2200      	movs	r2, #0
 8010538:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2200      	movs	r2, #0
 801053e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f7ff fadb 	bl	800fafe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010548:	e009      	b.n	801055e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2200      	movs	r2, #0
 8010554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f7ff fac6 	bl	800faea <HAL_I2C_ErrorCallback>
}
 801055e:	bf00      	nop
 8010560:	3708      	adds	r7, #8
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010566:	b480      	push	{r7}
 8010568:	b083      	sub	sp, #12
 801056a:	af00      	add	r7, sp, #0
 801056c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	699b      	ldr	r3, [r3, #24]
 8010574:	f003 0302 	and.w	r3, r3, #2
 8010578:	2b02      	cmp	r3, #2
 801057a:	d103      	bne.n	8010584 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	2200      	movs	r2, #0
 8010582:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	699b      	ldr	r3, [r3, #24]
 801058a:	f003 0301 	and.w	r3, r3, #1
 801058e:	2b01      	cmp	r3, #1
 8010590:	d007      	beq.n	80105a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	699a      	ldr	r2, [r3, #24]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f042 0201 	orr.w	r2, r2, #1
 80105a0:	619a      	str	r2, [r3, #24]
  }
}
 80105a2:	bf00      	nop
 80105a4:	370c      	adds	r7, #12
 80105a6:	46bd      	mov	sp, r7
 80105a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ac:	4770      	bx	lr

080105ae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80105ae:	b580      	push	{r7, lr}
 80105b0:	b084      	sub	sp, #16
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d003      	beq.n	80105cc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105c8:	2200      	movs	r2, #0
 80105ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d003      	beq.n	80105dc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105d8:	2200      	movs	r2, #0
 80105da:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80105dc:	68f8      	ldr	r0, [r7, #12]
 80105de:	f7ff ff9b 	bl	8010518 <I2C_TreatErrorCallback>
}
 80105e2:	bf00      	nop
 80105e4:	3710      	adds	r7, #16
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}

080105ea <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80105ea:	b480      	push	{r7}
 80105ec:	b085      	sub	sp, #20
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	6078      	str	r0, [r7, #4]
 80105f2:	460b      	mov	r3, r1
 80105f4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80105f6:	2300      	movs	r3, #0
 80105f8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80105fa:	887b      	ldrh	r3, [r7, #2]
 80105fc:	f003 0301 	and.w	r3, r3, #1
 8010600:	2b00      	cmp	r3, #0
 8010602:	d00f      	beq.n	8010624 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 801060a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010612:	b2db      	uxtb	r3, r3
 8010614:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010618:	2b28      	cmp	r3, #40	; 0x28
 801061a:	d003      	beq.n	8010624 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8010622:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010624:	887b      	ldrh	r3, [r7, #2]
 8010626:	f003 0302 	and.w	r3, r3, #2
 801062a:	2b00      	cmp	r3, #0
 801062c:	d00f      	beq.n	801064e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8010634:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801063c:	b2db      	uxtb	r3, r3
 801063e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010642:	2b28      	cmp	r3, #40	; 0x28
 8010644:	d003      	beq.n	801064e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801064c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801064e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010652:	2b00      	cmp	r3, #0
 8010654:	da03      	bge.n	801065e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801065c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801065e:	887b      	ldrh	r3, [r7, #2]
 8010660:	2b10      	cmp	r3, #16
 8010662:	d103      	bne.n	801066c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801066a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801066c:	887b      	ldrh	r3, [r7, #2]
 801066e:	2b20      	cmp	r3, #32
 8010670:	d103      	bne.n	801067a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	f043 0320 	orr.w	r3, r3, #32
 8010678:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801067a:	887b      	ldrh	r3, [r7, #2]
 801067c:	2b40      	cmp	r3, #64	; 0x40
 801067e:	d103      	bne.n	8010688 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010686:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	6819      	ldr	r1, [r3, #0]
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	43da      	mvns	r2, r3
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	400a      	ands	r2, r1
 8010698:	601a      	str	r2, [r3, #0]
}
 801069a:	bf00      	nop
 801069c:	3714      	adds	r7, #20
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr

080106a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80106a6:	b480      	push	{r7}
 80106a8:	b083      	sub	sp, #12
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
 80106ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	2b20      	cmp	r3, #32
 80106ba:	d138      	bne.n	801072e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d101      	bne.n	80106ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80106c6:	2302      	movs	r3, #2
 80106c8:	e032      	b.n	8010730 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2201      	movs	r2, #1
 80106ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2224      	movs	r2, #36	; 0x24
 80106d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	681a      	ldr	r2, [r3, #0]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	f022 0201 	bic.w	r2, r2, #1
 80106e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	681a      	ldr	r2, [r3, #0]
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80106f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	6819      	ldr	r1, [r3, #0]
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	683a      	ldr	r2, [r7, #0]
 8010706:	430a      	orrs	r2, r1
 8010708:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f042 0201 	orr.w	r2, r2, #1
 8010718:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2220      	movs	r2, #32
 801071e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801072a:	2300      	movs	r3, #0
 801072c:	e000      	b.n	8010730 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801072e:	2302      	movs	r3, #2
  }
}
 8010730:	4618      	mov	r0, r3
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801073c:	b480      	push	{r7}
 801073e:	b085      	sub	sp, #20
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801074c:	b2db      	uxtb	r3, r3
 801074e:	2b20      	cmp	r3, #32
 8010750:	d139      	bne.n	80107c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010758:	2b01      	cmp	r3, #1
 801075a:	d101      	bne.n	8010760 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801075c:	2302      	movs	r3, #2
 801075e:	e033      	b.n	80107c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2201      	movs	r2, #1
 8010764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2224      	movs	r2, #36	; 0x24
 801076c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	681a      	ldr	r2, [r3, #0]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f022 0201 	bic.w	r2, r2, #1
 801077e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801078e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	021b      	lsls	r3, r3, #8
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	4313      	orrs	r3, r2
 8010798:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	68fa      	ldr	r2, [r7, #12]
 80107a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	681a      	ldr	r2, [r3, #0]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	f042 0201 	orr.w	r2, r2, #1
 80107b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2220      	movs	r2, #32
 80107b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2200      	movs	r2, #0
 80107be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80107c2:	2300      	movs	r3, #0
 80107c4:	e000      	b.n	80107c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80107c6:	2302      	movs	r3, #2
  }
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3714      	adds	r7, #20
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr

080107d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80107d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107d6:	b08f      	sub	sp, #60	; 0x3c
 80107d8:	af0a      	add	r7, sp, #40	; 0x28
 80107da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d101      	bne.n	80107e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80107e2:	2301      	movs	r3, #1
 80107e4:	e116      	b.n	8010a14 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d106      	bne.n	8010806 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2200      	movs	r2, #0
 80107fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f00c f8c5 	bl	801c990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2203      	movs	r2, #3
 801080a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010816:	2b00      	cmp	r3, #0
 8010818:	d102      	bne.n	8010820 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2200      	movs	r2, #0
 801081e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4618      	mov	r0, r3
 8010826:	f008 fc0e 	bl	8019046 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	603b      	str	r3, [r7, #0]
 8010830:	687e      	ldr	r6, [r7, #4]
 8010832:	466d      	mov	r5, sp
 8010834:	f106 0410 	add.w	r4, r6, #16
 8010838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801083a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801083c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801083e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010840:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010844:	e885 0003 	stmia.w	r5, {r0, r1}
 8010848:	1d33      	adds	r3, r6, #4
 801084a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801084c:	6838      	ldr	r0, [r7, #0]
 801084e:	f008 fad9 	bl	8018e04 <USB_CoreInit>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d005      	beq.n	8010864 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2202      	movs	r2, #2
 801085c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8010860:	2301      	movs	r3, #1
 8010862:	e0d7      	b.n	8010a14 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2100      	movs	r1, #0
 801086a:	4618      	mov	r0, r3
 801086c:	f008 fbfc 	bl	8019068 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010870:	2300      	movs	r3, #0
 8010872:	73fb      	strb	r3, [r7, #15]
 8010874:	e04a      	b.n	801090c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8010876:	7bfa      	ldrb	r2, [r7, #15]
 8010878:	6879      	ldr	r1, [r7, #4]
 801087a:	4613      	mov	r3, r2
 801087c:	00db      	lsls	r3, r3, #3
 801087e:	4413      	add	r3, r2
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	440b      	add	r3, r1
 8010884:	333d      	adds	r3, #61	; 0x3d
 8010886:	2201      	movs	r2, #1
 8010888:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801088a:	7bfa      	ldrb	r2, [r7, #15]
 801088c:	6879      	ldr	r1, [r7, #4]
 801088e:	4613      	mov	r3, r2
 8010890:	00db      	lsls	r3, r3, #3
 8010892:	4413      	add	r3, r2
 8010894:	009b      	lsls	r3, r3, #2
 8010896:	440b      	add	r3, r1
 8010898:	333c      	adds	r3, #60	; 0x3c
 801089a:	7bfa      	ldrb	r2, [r7, #15]
 801089c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 801089e:	7bfa      	ldrb	r2, [r7, #15]
 80108a0:	7bfb      	ldrb	r3, [r7, #15]
 80108a2:	b298      	uxth	r0, r3
 80108a4:	6879      	ldr	r1, [r7, #4]
 80108a6:	4613      	mov	r3, r2
 80108a8:	00db      	lsls	r3, r3, #3
 80108aa:	4413      	add	r3, r2
 80108ac:	009b      	lsls	r3, r3, #2
 80108ae:	440b      	add	r3, r1
 80108b0:	3344      	adds	r3, #68	; 0x44
 80108b2:	4602      	mov	r2, r0
 80108b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80108b6:	7bfa      	ldrb	r2, [r7, #15]
 80108b8:	6879      	ldr	r1, [r7, #4]
 80108ba:	4613      	mov	r3, r2
 80108bc:	00db      	lsls	r3, r3, #3
 80108be:	4413      	add	r3, r2
 80108c0:	009b      	lsls	r3, r3, #2
 80108c2:	440b      	add	r3, r1
 80108c4:	3340      	adds	r3, #64	; 0x40
 80108c6:	2200      	movs	r2, #0
 80108c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80108ca:	7bfa      	ldrb	r2, [r7, #15]
 80108cc:	6879      	ldr	r1, [r7, #4]
 80108ce:	4613      	mov	r3, r2
 80108d0:	00db      	lsls	r3, r3, #3
 80108d2:	4413      	add	r3, r2
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	440b      	add	r3, r1
 80108d8:	3348      	adds	r3, #72	; 0x48
 80108da:	2200      	movs	r2, #0
 80108dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80108de:	7bfa      	ldrb	r2, [r7, #15]
 80108e0:	6879      	ldr	r1, [r7, #4]
 80108e2:	4613      	mov	r3, r2
 80108e4:	00db      	lsls	r3, r3, #3
 80108e6:	4413      	add	r3, r2
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	440b      	add	r3, r1
 80108ec:	334c      	adds	r3, #76	; 0x4c
 80108ee:	2200      	movs	r2, #0
 80108f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80108f2:	7bfa      	ldrb	r2, [r7, #15]
 80108f4:	6879      	ldr	r1, [r7, #4]
 80108f6:	4613      	mov	r3, r2
 80108f8:	00db      	lsls	r3, r3, #3
 80108fa:	4413      	add	r3, r2
 80108fc:	009b      	lsls	r3, r3, #2
 80108fe:	440b      	add	r3, r1
 8010900:	3354      	adds	r3, #84	; 0x54
 8010902:	2200      	movs	r2, #0
 8010904:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010906:	7bfb      	ldrb	r3, [r7, #15]
 8010908:	3301      	adds	r3, #1
 801090a:	73fb      	strb	r3, [r7, #15]
 801090c:	7bfa      	ldrb	r2, [r7, #15]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	429a      	cmp	r2, r3
 8010914:	d3af      	bcc.n	8010876 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010916:	2300      	movs	r3, #0
 8010918:	73fb      	strb	r3, [r7, #15]
 801091a:	e044      	b.n	80109a6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801091c:	7bfa      	ldrb	r2, [r7, #15]
 801091e:	6879      	ldr	r1, [r7, #4]
 8010920:	4613      	mov	r3, r2
 8010922:	00db      	lsls	r3, r3, #3
 8010924:	4413      	add	r3, r2
 8010926:	009b      	lsls	r3, r3, #2
 8010928:	440b      	add	r3, r1
 801092a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 801092e:	2200      	movs	r2, #0
 8010930:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8010932:	7bfa      	ldrb	r2, [r7, #15]
 8010934:	6879      	ldr	r1, [r7, #4]
 8010936:	4613      	mov	r3, r2
 8010938:	00db      	lsls	r3, r3, #3
 801093a:	4413      	add	r3, r2
 801093c:	009b      	lsls	r3, r3, #2
 801093e:	440b      	add	r3, r1
 8010940:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8010944:	7bfa      	ldrb	r2, [r7, #15]
 8010946:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8010948:	7bfa      	ldrb	r2, [r7, #15]
 801094a:	6879      	ldr	r1, [r7, #4]
 801094c:	4613      	mov	r3, r2
 801094e:	00db      	lsls	r3, r3, #3
 8010950:	4413      	add	r3, r2
 8010952:	009b      	lsls	r3, r3, #2
 8010954:	440b      	add	r3, r1
 8010956:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801095a:	2200      	movs	r2, #0
 801095c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801095e:	7bfa      	ldrb	r2, [r7, #15]
 8010960:	6879      	ldr	r1, [r7, #4]
 8010962:	4613      	mov	r3, r2
 8010964:	00db      	lsls	r3, r3, #3
 8010966:	4413      	add	r3, r2
 8010968:	009b      	lsls	r3, r3, #2
 801096a:	440b      	add	r3, r1
 801096c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8010970:	2200      	movs	r2, #0
 8010972:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8010974:	7bfa      	ldrb	r2, [r7, #15]
 8010976:	6879      	ldr	r1, [r7, #4]
 8010978:	4613      	mov	r3, r2
 801097a:	00db      	lsls	r3, r3, #3
 801097c:	4413      	add	r3, r2
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	440b      	add	r3, r1
 8010982:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010986:	2200      	movs	r2, #0
 8010988:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801098a:	7bfa      	ldrb	r2, [r7, #15]
 801098c:	6879      	ldr	r1, [r7, #4]
 801098e:	4613      	mov	r3, r2
 8010990:	00db      	lsls	r3, r3, #3
 8010992:	4413      	add	r3, r2
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	440b      	add	r3, r1
 8010998:	f503 7325 	add.w	r3, r3, #660	; 0x294
 801099c:	2200      	movs	r2, #0
 801099e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80109a0:	7bfb      	ldrb	r3, [r7, #15]
 80109a2:	3301      	adds	r3, #1
 80109a4:	73fb      	strb	r3, [r7, #15]
 80109a6:	7bfa      	ldrb	r2, [r7, #15]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d3b5      	bcc.n	801091c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	603b      	str	r3, [r7, #0]
 80109b6:	687e      	ldr	r6, [r7, #4]
 80109b8:	466d      	mov	r5, sp
 80109ba:	f106 0410 	add.w	r4, r6, #16
 80109be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80109c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80109c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80109ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80109ce:	1d33      	adds	r3, r6, #4
 80109d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109d2:	6838      	ldr	r0, [r7, #0]
 80109d4:	f008 fb94 	bl	8019100 <USB_DevInit>
 80109d8:	4603      	mov	r3, r0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d005      	beq.n	80109ea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2202      	movs	r2, #2
 80109e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80109e6:	2301      	movs	r3, #1
 80109e8:	e014      	b.n	8010a14 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2200      	movs	r2, #0
 80109ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2201      	movs	r2, #1
 80109f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109fe:	2b01      	cmp	r3, #1
 8010a00:	d102      	bne.n	8010a08 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f001 f98c 	bl	8011d20 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f009 fce2 	bl	801a3d6 <USB_DevDisconnect>

  return HAL_OK;
 8010a12:	2300      	movs	r3, #0
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3714      	adds	r7, #20
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8010a30:	2b01      	cmp	r3, #1
 8010a32:	d101      	bne.n	8010a38 <HAL_PCD_Start+0x1c>
 8010a34:	2302      	movs	r3, #2
 8010a36:	e020      	b.n	8010a7a <HAL_PCD_Start+0x5e>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d109      	bne.n	8010a5c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d005      	beq.n	8010a5c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4618      	mov	r0, r3
 8010a62:	f008 fadf 	bl	8019024 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f009 fc92 	bl	801a394 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2200      	movs	r2, #0
 8010a74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}

08010a82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8010a82:	b590      	push	{r4, r7, lr}
 8010a84:	b08d      	sub	sp, #52	; 0x34
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a90:	6a3b      	ldr	r3, [r7, #32]
 8010a92:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f009 fd50 	bl	801a53e <USB_GetMode>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	f040 84b7 	bne.w	8011414 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f009 fcb4 	bl	801a418 <USB_ReadInterrupts>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	f000 84ad 	beq.w	8011412 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8010ab8:	69fb      	ldr	r3, [r7, #28]
 8010aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010abe:	689b      	ldr	r3, [r3, #8]
 8010ac0:	0a1b      	lsrs	r3, r3, #8
 8010ac2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f009 fca1 	bl	801a418 <USB_ReadInterrupts>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	f003 0302 	and.w	r3, r3, #2
 8010adc:	2b02      	cmp	r3, #2
 8010ade:	d107      	bne.n	8010af0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	695a      	ldr	r2, [r3, #20]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f002 0202 	and.w	r2, r2, #2
 8010aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4618      	mov	r0, r3
 8010af6:	f009 fc8f 	bl	801a418 <USB_ReadInterrupts>
 8010afa:	4603      	mov	r3, r0
 8010afc:	f003 0310 	and.w	r3, r3, #16
 8010b00:	2b10      	cmp	r3, #16
 8010b02:	d161      	bne.n	8010bc8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	699a      	ldr	r2, [r3, #24]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	f022 0210 	bic.w	r2, r2, #16
 8010b12:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8010b14:	6a3b      	ldr	r3, [r7, #32]
 8010b16:	6a1b      	ldr	r3, [r3, #32]
 8010b18:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8010b1a:	69bb      	ldr	r3, [r7, #24]
 8010b1c:	f003 020f 	and.w	r2, r3, #15
 8010b20:	4613      	mov	r3, r2
 8010b22:	00db      	lsls	r3, r3, #3
 8010b24:	4413      	add	r3, r2
 8010b26:	009b      	lsls	r3, r3, #2
 8010b28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	4413      	add	r3, r2
 8010b30:	3304      	adds	r3, #4
 8010b32:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8010b34:	69bb      	ldr	r3, [r7, #24]
 8010b36:	0c5b      	lsrs	r3, r3, #17
 8010b38:	f003 030f 	and.w	r3, r3, #15
 8010b3c:	2b02      	cmp	r3, #2
 8010b3e:	d124      	bne.n	8010b8a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8010b40:	69ba      	ldr	r2, [r7, #24]
 8010b42:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8010b46:	4013      	ands	r3, r2
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d035      	beq.n	8010bb8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8010b50:	69bb      	ldr	r3, [r7, #24]
 8010b52:	091b      	lsrs	r3, r3, #4
 8010b54:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8010b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	6a38      	ldr	r0, [r7, #32]
 8010b60:	f009 fac6 	bl	801a0f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	691a      	ldr	r2, [r3, #16]
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	091b      	lsrs	r3, r3, #4
 8010b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010b70:	441a      	add	r2, r3
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	6a1a      	ldr	r2, [r3, #32]
 8010b7a:	69bb      	ldr	r3, [r7, #24]
 8010b7c:	091b      	lsrs	r3, r3, #4
 8010b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010b82:	441a      	add	r2, r3
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	621a      	str	r2, [r3, #32]
 8010b88:	e016      	b.n	8010bb8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8010b8a:	69bb      	ldr	r3, [r7, #24]
 8010b8c:	0c5b      	lsrs	r3, r3, #17
 8010b8e:	f003 030f 	and.w	r3, r3, #15
 8010b92:	2b06      	cmp	r3, #6
 8010b94:	d110      	bne.n	8010bb8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010b9c:	2208      	movs	r2, #8
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	6a38      	ldr	r0, [r7, #32]
 8010ba2:	f009 faa5 	bl	801a0f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	6a1a      	ldr	r2, [r3, #32]
 8010baa:	69bb      	ldr	r3, [r7, #24]
 8010bac:	091b      	lsrs	r3, r3, #4
 8010bae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010bb2:	441a      	add	r2, r3
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	699a      	ldr	r2, [r3, #24]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f042 0210 	orr.w	r2, r2, #16
 8010bc6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f009 fc23 	bl	801a418 <USB_ReadInterrupts>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010bd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010bdc:	f040 80a7 	bne.w	8010d2e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8010be0:	2300      	movs	r3, #0
 8010be2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	4618      	mov	r0, r3
 8010bea:	f009 fc28 	bl	801a43e <USB_ReadDevAllOutEpInterrupt>
 8010bee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8010bf0:	e099      	b.n	8010d26 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8010bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf4:	f003 0301 	and.w	r3, r3, #1
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	f000 808e 	beq.w	8010d1a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c04:	b2d2      	uxtb	r2, r2
 8010c06:	4611      	mov	r1, r2
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f009 fc4c 	bl	801a4a6 <USB_ReadDevOutEPInterrupt>
 8010c0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	f003 0301 	and.w	r3, r3, #1
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00c      	beq.n	8010c34 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8010c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1c:	015a      	lsls	r2, r3, #5
 8010c1e:	69fb      	ldr	r3, [r7, #28]
 8010c20:	4413      	add	r3, r2
 8010c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c26:	461a      	mov	r2, r3
 8010c28:	2301      	movs	r3, #1
 8010c2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8010c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f000 fef0 	bl	8011a14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	f003 0308 	and.w	r3, r3, #8
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d00c      	beq.n	8010c58 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8010c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c40:	015a      	lsls	r2, r3, #5
 8010c42:	69fb      	ldr	r3, [r7, #28]
 8010c44:	4413      	add	r3, r2
 8010c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	2308      	movs	r3, #8
 8010c4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8010c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f000 ffc6 	bl	8011be4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	f003 0310 	and.w	r3, r3, #16
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d008      	beq.n	8010c74 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8010c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c64:	015a      	lsls	r2, r3, #5
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	4413      	add	r3, r2
 8010c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c6e:	461a      	mov	r2, r3
 8010c70:	2310      	movs	r3, #16
 8010c72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	f003 0302 	and.w	r3, r3, #2
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d030      	beq.n	8010ce0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8010c7e:	6a3b      	ldr	r3, [r7, #32]
 8010c80:	695b      	ldr	r3, [r3, #20]
 8010c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c86:	2b80      	cmp	r3, #128	; 0x80
 8010c88:	d109      	bne.n	8010c9e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	69fa      	ldr	r2, [r7, #28]
 8010c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010c9c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8010c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	00db      	lsls	r3, r3, #3
 8010ca4:	4413      	add	r3, r2
 8010ca6:	009b      	lsls	r3, r3, #2
 8010ca8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010cac:	687a      	ldr	r2, [r7, #4]
 8010cae:	4413      	add	r3, r2
 8010cb0:	3304      	adds	r3, #4
 8010cb2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	78db      	ldrb	r3, [r3, #3]
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d108      	bne.n	8010cce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8010cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f00b ff8d 	bl	801cbe8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8010cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd0:	015a      	lsls	r2, r3, #5
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	4413      	add	r3, r2
 8010cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cda:	461a      	mov	r2, r3
 8010cdc:	2302      	movs	r3, #2
 8010cde:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	f003 0320 	and.w	r3, r3, #32
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d008      	beq.n	8010cfc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cec:	015a      	lsls	r2, r3, #5
 8010cee:	69fb      	ldr	r3, [r7, #28]
 8010cf0:	4413      	add	r3, r2
 8010cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	2320      	movs	r3, #32
 8010cfa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d009      	beq.n	8010d1a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8010d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d08:	015a      	lsls	r2, r3, #5
 8010d0a:	69fb      	ldr	r3, [r7, #28]
 8010d0c:	4413      	add	r3, r2
 8010d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d12:	461a      	mov	r2, r3
 8010d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d18:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8010d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8010d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d22:	085b      	lsrs	r3, r3, #1
 8010d24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8010d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f47f af62 	bne.w	8010bf2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f009 fb70 	bl	801a418 <USB_ReadInterrupts>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010d3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010d42:	f040 80db 	bne.w	8010efc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f009 fb91 	bl	801a472 <USB_ReadDevAllInEpInterrupt>
 8010d50:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8010d52:	2300      	movs	r3, #0
 8010d54:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8010d56:	e0cd      	b.n	8010ef4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8010d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5a:	f003 0301 	and.w	r3, r3, #1
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	f000 80c2 	beq.w	8010ee8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d6a:	b2d2      	uxtb	r2, r2
 8010d6c:	4611      	mov	r1, r2
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f009 fbb7 	bl	801a4e2 <USB_ReadDevInEPInterrupt>
 8010d74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	f003 0301 	and.w	r3, r3, #1
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d057      	beq.n	8010e30 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8010d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d82:	f003 030f 	and.w	r3, r3, #15
 8010d86:	2201      	movs	r2, #1
 8010d88:	fa02 f303 	lsl.w	r3, r2, r3
 8010d8c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	43db      	mvns	r3, r3
 8010d9a:	69f9      	ldr	r1, [r7, #28]
 8010d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010da0:	4013      	ands	r3, r2
 8010da2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8010da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da6:	015a      	lsls	r2, r3, #5
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	4413      	add	r3, r2
 8010dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010db0:	461a      	mov	r2, r3
 8010db2:	2301      	movs	r3, #1
 8010db4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	691b      	ldr	r3, [r3, #16]
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d132      	bne.n	8010e24 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8010dbe:	6879      	ldr	r1, [r7, #4]
 8010dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dc2:	4613      	mov	r3, r2
 8010dc4:	00db      	lsls	r3, r3, #3
 8010dc6:	4413      	add	r3, r2
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	440b      	add	r3, r1
 8010dcc:	334c      	adds	r3, #76	; 0x4c
 8010dce:	6819      	ldr	r1, [r3, #0]
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dd4:	4613      	mov	r3, r2
 8010dd6:	00db      	lsls	r3, r3, #3
 8010dd8:	4413      	add	r3, r2
 8010dda:	009b      	lsls	r3, r3, #2
 8010ddc:	4403      	add	r3, r0
 8010dde:	3348      	adds	r3, #72	; 0x48
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	4419      	add	r1, r3
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010de8:	4613      	mov	r3, r2
 8010dea:	00db      	lsls	r3, r3, #3
 8010dec:	4413      	add	r3, r2
 8010dee:	009b      	lsls	r3, r3, #2
 8010df0:	4403      	add	r3, r0
 8010df2:	334c      	adds	r3, #76	; 0x4c
 8010df4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8010df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d113      	bne.n	8010e24 <HAL_PCD_IRQHandler+0x3a2>
 8010dfc:	6879      	ldr	r1, [r7, #4]
 8010dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e00:	4613      	mov	r3, r2
 8010e02:	00db      	lsls	r3, r3, #3
 8010e04:	4413      	add	r3, r2
 8010e06:	009b      	lsls	r3, r3, #2
 8010e08:	440b      	add	r3, r1
 8010e0a:	3354      	adds	r3, #84	; 0x54
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d108      	bne.n	8010e24 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6818      	ldr	r0, [r3, #0]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	2101      	movs	r1, #1
 8010e20:	f009 fbc0 	bl	801a5a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8010e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e26:	b2db      	uxtb	r3, r3
 8010e28:	4619      	mov	r1, r3
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f00b fe57 	bl	801cade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	f003 0308 	and.w	r3, r3, #8
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d008      	beq.n	8010e4c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8010e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3c:	015a      	lsls	r2, r3, #5
 8010e3e:	69fb      	ldr	r3, [r7, #28]
 8010e40:	4413      	add	r3, r2
 8010e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e46:	461a      	mov	r2, r3
 8010e48:	2308      	movs	r3, #8
 8010e4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8010e4c:	693b      	ldr	r3, [r7, #16]
 8010e4e:	f003 0310 	and.w	r3, r3, #16
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d008      	beq.n	8010e68 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8010e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e58:	015a      	lsls	r2, r3, #5
 8010e5a:	69fb      	ldr	r3, [r7, #28]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e62:	461a      	mov	r2, r3
 8010e64:	2310      	movs	r3, #16
 8010e66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d008      	beq.n	8010e84 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8010e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e74:	015a      	lsls	r2, r3, #5
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	4413      	add	r3, r2
 8010e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e7e:	461a      	mov	r2, r3
 8010e80:	2340      	movs	r3, #64	; 0x40
 8010e82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	f003 0302 	and.w	r3, r3, #2
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d023      	beq.n	8010ed6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8010e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e90:	6a38      	ldr	r0, [r7, #32]
 8010e92:	f008 fa93 	bl	80193bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8010e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e98:	4613      	mov	r3, r2
 8010e9a:	00db      	lsls	r3, r3, #3
 8010e9c:	4413      	add	r3, r2
 8010e9e:	009b      	lsls	r3, r3, #2
 8010ea0:	3338      	adds	r3, #56	; 0x38
 8010ea2:	687a      	ldr	r2, [r7, #4]
 8010ea4:	4413      	add	r3, r2
 8010ea6:	3304      	adds	r3, #4
 8010ea8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	78db      	ldrb	r3, [r3, #3]
 8010eae:	2b01      	cmp	r3, #1
 8010eb0:	d108      	bne.n	8010ec4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8010eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f00b fea4 	bl	801cc0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8010ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec6:	015a      	lsls	r2, r3, #5
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	4413      	add	r3, r2
 8010ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	2302      	movs	r3, #2
 8010ed4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d003      	beq.n	8010ee8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8010ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 fd08 	bl	80118f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8010ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eea:	3301      	adds	r3, #1
 8010eec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8010eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef0:	085b      	lsrs	r3, r3, #1
 8010ef2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8010ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	f47f af2e 	bne.w	8010d58 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4618      	mov	r0, r3
 8010f02:	f009 fa89 	bl	801a418 <USB_ReadInterrupts>
 8010f06:	4603      	mov	r3, r0
 8010f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f10:	d122      	bne.n	8010f58 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8010f12:	69fb      	ldr	r3, [r7, #28]
 8010f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	69fa      	ldr	r2, [r7, #28]
 8010f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f20:	f023 0301 	bic.w	r3, r3, #1
 8010f24:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	d108      	bne.n	8010f42 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2200      	movs	r2, #0
 8010f34:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8010f38:	2100      	movs	r1, #0
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f000 ff14 	bl	8011d68 <HAL_PCDEx_LPM_Callback>
 8010f40:	e002      	b.n	8010f48 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f00b fe42 	bl	801cbcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	695a      	ldr	r2, [r3, #20]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8010f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f009 fa5b 	bl	801a418 <USB_ReadInterrupts>
 8010f62:	4603      	mov	r3, r0
 8010f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010f6c:	d112      	bne.n	8010f94 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8010f6e:	69fb      	ldr	r3, [r7, #28]
 8010f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f74:	689b      	ldr	r3, [r3, #8]
 8010f76:	f003 0301 	and.w	r3, r3, #1
 8010f7a:	2b01      	cmp	r3, #1
 8010f7c:	d102      	bne.n	8010f84 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f00b fdfe 	bl	801cb80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	695a      	ldr	r2, [r3, #20]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8010f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f009 fa3d 	bl	801a418 <USB_ReadInterrupts>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010fa8:	d121      	bne.n	8010fee <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	695a      	ldr	r2, [r3, #20]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8010fb8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d111      	bne.n	8010fe8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fd2:	089b      	lsrs	r3, r3, #2
 8010fd4:	f003 020f 	and.w	r2, r3, #15
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8010fde:	2101      	movs	r1, #1
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f000 fec1 	bl	8011d68 <HAL_PCDEx_LPM_Callback>
 8010fe6:	e002      	b.n	8010fee <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f00b fdc9 	bl	801cb80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f009 fa10 	bl	801a418 <USB_ReadInterrupts>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011002:	f040 80b7 	bne.w	8011174 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8011006:	69fb      	ldr	r3, [r7, #28]
 8011008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	69fa      	ldr	r2, [r7, #28]
 8011010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011014:	f023 0301 	bic.w	r3, r3, #1
 8011018:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	2110      	movs	r1, #16
 8011020:	4618      	mov	r0, r3
 8011022:	f008 f9cb 	bl	80193bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011026:	2300      	movs	r3, #0
 8011028:	62fb      	str	r3, [r7, #44]	; 0x2c
 801102a:	e046      	b.n	80110ba <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102e:	015a      	lsls	r2, r3, #5
 8011030:	69fb      	ldr	r3, [r7, #28]
 8011032:	4413      	add	r3, r2
 8011034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011038:	461a      	mov	r2, r3
 801103a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801103e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011042:	015a      	lsls	r2, r3, #5
 8011044:	69fb      	ldr	r3, [r7, #28]
 8011046:	4413      	add	r3, r2
 8011048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011050:	0151      	lsls	r1, r2, #5
 8011052:	69fa      	ldr	r2, [r7, #28]
 8011054:	440a      	add	r2, r1
 8011056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801105a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801105e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8011060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011062:	015a      	lsls	r2, r3, #5
 8011064:	69fb      	ldr	r3, [r7, #28]
 8011066:	4413      	add	r3, r2
 8011068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801106c:	461a      	mov	r2, r3
 801106e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011072:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011076:	015a      	lsls	r2, r3, #5
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	4413      	add	r3, r2
 801107c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011084:	0151      	lsls	r1, r2, #5
 8011086:	69fa      	ldr	r2, [r7, #28]
 8011088:	440a      	add	r2, r1
 801108a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801108e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011092:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011096:	015a      	lsls	r2, r3, #5
 8011098:	69fb      	ldr	r3, [r7, #28]
 801109a:	4413      	add	r3, r2
 801109c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110a4:	0151      	lsls	r1, r2, #5
 80110a6:	69fa      	ldr	r2, [r7, #28]
 80110a8:	440a      	add	r2, r1
 80110aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80110b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80110b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b6:	3301      	adds	r3, #1
 80110b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	685b      	ldr	r3, [r3, #4]
 80110be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d3b3      	bcc.n	801102c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80110c4:	69fb      	ldr	r3, [r7, #28]
 80110c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110ca:	69db      	ldr	r3, [r3, #28]
 80110cc:	69fa      	ldr	r2, [r7, #28]
 80110ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80110d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80110d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d016      	beq.n	801110e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80110e0:	69fb      	ldr	r3, [r7, #28]
 80110e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110ea:	69fa      	ldr	r2, [r7, #28]
 80110ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80110f0:	f043 030b 	orr.w	r3, r3, #11
 80110f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80110f8:	69fb      	ldr	r3, [r7, #28]
 80110fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011100:	69fa      	ldr	r2, [r7, #28]
 8011102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011106:	f043 030b 	orr.w	r3, r3, #11
 801110a:	6453      	str	r3, [r2, #68]	; 0x44
 801110c:	e015      	b.n	801113a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801110e:	69fb      	ldr	r3, [r7, #28]
 8011110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011114:	695a      	ldr	r2, [r3, #20]
 8011116:	69fb      	ldr	r3, [r7, #28]
 8011118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801111c:	4619      	mov	r1, r3
 801111e:	f242 032b 	movw	r3, #8235	; 0x202b
 8011122:	4313      	orrs	r3, r2
 8011124:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8011126:	69fb      	ldr	r3, [r7, #28]
 8011128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801112c:	691b      	ldr	r3, [r3, #16]
 801112e:	69fa      	ldr	r2, [r7, #28]
 8011130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011134:	f043 030b 	orr.w	r3, r3, #11
 8011138:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801113a:	69fb      	ldr	r3, [r7, #28]
 801113c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	69fa      	ldr	r2, [r7, #28]
 8011144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011148:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801114c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6818      	ldr	r0, [r3, #0]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	691b      	ldr	r3, [r3, #16]
 8011156:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801115e:	461a      	mov	r2, r3
 8011160:	f009 fa20 	bl	801a5a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	695a      	ldr	r2, [r3, #20]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8011172:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	4618      	mov	r0, r3
 801117a:	f009 f94d 	bl	801a418 <USB_ReadInterrupts>
 801117e:	4603      	mov	r3, r0
 8011180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011188:	d124      	bne.n	80111d4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	4618      	mov	r0, r3
 8011190:	f009 f9e4 	bl	801a55c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	4618      	mov	r0, r3
 801119a:	f008 f98c 	bl	80194b6 <USB_GetDevSpeed>
 801119e:	4603      	mov	r3, r0
 80111a0:	461a      	mov	r2, r3
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681c      	ldr	r4, [r3, #0]
 80111aa:	f001 fd91 	bl	8012cd0 <HAL_RCC_GetHCLKFreq>
 80111ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	461a      	mov	r2, r3
 80111b8:	4620      	mov	r0, r4
 80111ba:	f007 fe91 	bl	8018ee0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f00b fcb5 	bl	801cb2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	695a      	ldr	r2, [r3, #20]
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80111d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	4618      	mov	r0, r3
 80111da:	f009 f91d 	bl	801a418 <USB_ReadInterrupts>
 80111de:	4603      	mov	r3, r0
 80111e0:	f003 0308 	and.w	r3, r3, #8
 80111e4:	2b08      	cmp	r3, #8
 80111e6:	d10a      	bne.n	80111fe <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f00b fc92 	bl	801cb12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	695a      	ldr	r2, [r3, #20]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f002 0208 	and.w	r2, r2, #8
 80111fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	4618      	mov	r0, r3
 8011204:	f009 f908 	bl	801a418 <USB_ReadInterrupts>
 8011208:	4603      	mov	r3, r0
 801120a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801120e:	2b80      	cmp	r3, #128	; 0x80
 8011210:	d122      	bne.n	8011258 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8011212:	6a3b      	ldr	r3, [r7, #32]
 8011214:	699b      	ldr	r3, [r3, #24]
 8011216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801121a:	6a3b      	ldr	r3, [r7, #32]
 801121c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801121e:	2301      	movs	r3, #1
 8011220:	627b      	str	r3, [r7, #36]	; 0x24
 8011222:	e014      	b.n	801124e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8011224:	6879      	ldr	r1, [r7, #4]
 8011226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011228:	4613      	mov	r3, r2
 801122a:	00db      	lsls	r3, r3, #3
 801122c:	4413      	add	r3, r2
 801122e:	009b      	lsls	r3, r3, #2
 8011230:	440b      	add	r3, r1
 8011232:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	2b01      	cmp	r3, #1
 801123a:	d105      	bne.n	8011248 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 801123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123e:	b2db      	uxtb	r3, r3
 8011240:	4619      	mov	r1, r3
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 fb27 	bl	8011896 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801124a:	3301      	adds	r3, #1
 801124c:	627b      	str	r3, [r7, #36]	; 0x24
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011254:	429a      	cmp	r2, r3
 8011256:	d3e5      	bcc.n	8011224 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4618      	mov	r0, r3
 801125e:	f009 f8db 	bl	801a418 <USB_ReadInterrupts>
 8011262:	4603      	mov	r3, r0
 8011264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801126c:	d13b      	bne.n	80112e6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801126e:	2301      	movs	r3, #1
 8011270:	627b      	str	r3, [r7, #36]	; 0x24
 8011272:	e02b      	b.n	80112cc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8011274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011276:	015a      	lsls	r2, r3, #5
 8011278:	69fb      	ldr	r3, [r7, #28]
 801127a:	4413      	add	r3, r2
 801127c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8011284:	6879      	ldr	r1, [r7, #4]
 8011286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011288:	4613      	mov	r3, r2
 801128a:	00db      	lsls	r3, r3, #3
 801128c:	4413      	add	r3, r2
 801128e:	009b      	lsls	r3, r3, #2
 8011290:	440b      	add	r3, r1
 8011292:	3340      	adds	r3, #64	; 0x40
 8011294:	781b      	ldrb	r3, [r3, #0]
 8011296:	2b01      	cmp	r3, #1
 8011298:	d115      	bne.n	80112c6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 801129a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801129c:	2b00      	cmp	r3, #0
 801129e:	da12      	bge.n	80112c6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80112a0:	6879      	ldr	r1, [r7, #4]
 80112a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112a4:	4613      	mov	r3, r2
 80112a6:	00db      	lsls	r3, r3, #3
 80112a8:	4413      	add	r3, r2
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	440b      	add	r3, r1
 80112ae:	333f      	adds	r3, #63	; 0x3f
 80112b0:	2201      	movs	r2, #1
 80112b2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80112b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80112bc:	b2db      	uxtb	r3, r3
 80112be:	4619      	mov	r1, r3
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f000 fae8 	bl	8011896 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	3301      	adds	r3, #1
 80112ca:	627b      	str	r3, [r7, #36]	; 0x24
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d3ce      	bcc.n	8011274 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	695a      	ldr	r2, [r3, #20]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80112e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4618      	mov	r0, r3
 80112ec:	f009 f894 	bl	801a418 <USB_ReadInterrupts>
 80112f0:	4603      	mov	r3, r0
 80112f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80112f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80112fa:	d155      	bne.n	80113a8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80112fc:	2301      	movs	r3, #1
 80112fe:	627b      	str	r3, [r7, #36]	; 0x24
 8011300:	e045      	b.n	801138e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8011302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011304:	015a      	lsls	r2, r3, #5
 8011306:	69fb      	ldr	r3, [r7, #28]
 8011308:	4413      	add	r3, r2
 801130a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8011312:	6879      	ldr	r1, [r7, #4]
 8011314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011316:	4613      	mov	r3, r2
 8011318:	00db      	lsls	r3, r3, #3
 801131a:	4413      	add	r3, r2
 801131c:	009b      	lsls	r3, r3, #2
 801131e:	440b      	add	r3, r1
 8011320:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011324:	781b      	ldrb	r3, [r3, #0]
 8011326:	2b01      	cmp	r3, #1
 8011328:	d12e      	bne.n	8011388 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801132a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801132c:	2b00      	cmp	r3, #0
 801132e:	da2b      	bge.n	8011388 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8011330:	69bb      	ldr	r3, [r7, #24]
 8011332:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 801133c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8011340:	429a      	cmp	r2, r3
 8011342:	d121      	bne.n	8011388 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8011344:	6879      	ldr	r1, [r7, #4]
 8011346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011348:	4613      	mov	r3, r2
 801134a:	00db      	lsls	r3, r3, #3
 801134c:	4413      	add	r3, r2
 801134e:	009b      	lsls	r3, r3, #2
 8011350:	440b      	add	r3, r1
 8011352:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8011356:	2201      	movs	r2, #1
 8011358:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 801135a:	6a3b      	ldr	r3, [r7, #32]
 801135c:	699b      	ldr	r3, [r3, #24]
 801135e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011362:	6a3b      	ldr	r3, [r7, #32]
 8011364:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8011366:	6a3b      	ldr	r3, [r7, #32]
 8011368:	695b      	ldr	r3, [r3, #20]
 801136a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801136e:	2b00      	cmp	r3, #0
 8011370:	d10a      	bne.n	8011388 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8011372:	69fb      	ldr	r3, [r7, #28]
 8011374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	69fa      	ldr	r2, [r7, #28]
 801137c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011384:	6053      	str	r3, [r2, #4]
            break;
 8011386:	e007      	b.n	8011398 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138a:	3301      	adds	r3, #1
 801138c:	627b      	str	r3, [r7, #36]	; 0x24
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011394:	429a      	cmp	r2, r3
 8011396:	d3b4      	bcc.n	8011302 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	695a      	ldr	r2, [r3, #20]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80113a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	4618      	mov	r0, r3
 80113ae:	f009 f833 	bl	801a418 <USB_ReadInterrupts>
 80113b2:	4603      	mov	r3, r0
 80113b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80113b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113bc:	d10a      	bne.n	80113d4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f00b fc36 	bl	801cc30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	695a      	ldr	r2, [r3, #20]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80113d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	4618      	mov	r0, r3
 80113da:	f009 f81d 	bl	801a418 <USB_ReadInterrupts>
 80113de:	4603      	mov	r3, r0
 80113e0:	f003 0304 	and.w	r3, r3, #4
 80113e4:	2b04      	cmp	r3, #4
 80113e6:	d115      	bne.n	8011414 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	685b      	ldr	r3, [r3, #4]
 80113ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	f003 0304 	and.w	r3, r3, #4
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d002      	beq.n	8011400 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f00b fc26 	bl	801cc4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	6859      	ldr	r1, [r3, #4]
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	69ba      	ldr	r2, [r7, #24]
 801140c:	430a      	orrs	r2, r1
 801140e:	605a      	str	r2, [r3, #4]
 8011410:	e000      	b.n	8011414 <HAL_PCD_IRQHandler+0x992>
      return;
 8011412:	bf00      	nop
    }
  }
}
 8011414:	3734      	adds	r7, #52	; 0x34
 8011416:	46bd      	mov	sp, r7
 8011418:	bd90      	pop	{r4, r7, pc}

0801141a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801141a:	b580      	push	{r7, lr}
 801141c:	b082      	sub	sp, #8
 801141e:	af00      	add	r7, sp, #0
 8011420:	6078      	str	r0, [r7, #4]
 8011422:	460b      	mov	r3, r1
 8011424:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801142c:	2b01      	cmp	r3, #1
 801142e:	d101      	bne.n	8011434 <HAL_PCD_SetAddress+0x1a>
 8011430:	2302      	movs	r3, #2
 8011432:	e013      	b.n	801145c <HAL_PCD_SetAddress+0x42>
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2201      	movs	r2, #1
 8011438:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	78fa      	ldrb	r2, [r7, #3]
 8011440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	78fa      	ldrb	r2, [r7, #3]
 801144a:	4611      	mov	r1, r2
 801144c:	4618      	mov	r0, r3
 801144e:	f008 ff7b 	bl	801a348 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2200      	movs	r2, #0
 8011456:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801145a:	2300      	movs	r3, #0
}
 801145c:	4618      	mov	r0, r3
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	4608      	mov	r0, r1
 801146e:	4611      	mov	r1, r2
 8011470:	461a      	mov	r2, r3
 8011472:	4603      	mov	r3, r0
 8011474:	70fb      	strb	r3, [r7, #3]
 8011476:	460b      	mov	r3, r1
 8011478:	803b      	strh	r3, [r7, #0]
 801147a:	4613      	mov	r3, r2
 801147c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801147e:	2300      	movs	r3, #0
 8011480:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011486:	2b00      	cmp	r3, #0
 8011488:	da0f      	bge.n	80114aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801148a:	78fb      	ldrb	r3, [r7, #3]
 801148c:	f003 020f 	and.w	r2, r3, #15
 8011490:	4613      	mov	r3, r2
 8011492:	00db      	lsls	r3, r3, #3
 8011494:	4413      	add	r3, r2
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	3338      	adds	r3, #56	; 0x38
 801149a:	687a      	ldr	r2, [r7, #4]
 801149c:	4413      	add	r3, r2
 801149e:	3304      	adds	r3, #4
 80114a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2201      	movs	r2, #1
 80114a6:	705a      	strb	r2, [r3, #1]
 80114a8:	e00f      	b.n	80114ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80114aa:	78fb      	ldrb	r3, [r7, #3]
 80114ac:	f003 020f 	and.w	r2, r3, #15
 80114b0:	4613      	mov	r3, r2
 80114b2:	00db      	lsls	r3, r3, #3
 80114b4:	4413      	add	r3, r2
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	4413      	add	r3, r2
 80114c0:	3304      	adds	r3, #4
 80114c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2200      	movs	r2, #0
 80114c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80114ca:	78fb      	ldrb	r3, [r7, #3]
 80114cc:	f003 030f 	and.w	r3, r3, #15
 80114d0:	b2da      	uxtb	r2, r3
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80114d6:	883a      	ldrh	r2, [r7, #0]
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	78ba      	ldrb	r2, [r7, #2]
 80114e0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	785b      	ldrb	r3, [r3, #1]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d004      	beq.n	80114f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	781b      	ldrb	r3, [r3, #0]
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80114f4:	78bb      	ldrb	r3, [r7, #2]
 80114f6:	2b02      	cmp	r3, #2
 80114f8:	d102      	bne.n	8011500 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2200      	movs	r2, #0
 80114fe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8011506:	2b01      	cmp	r3, #1
 8011508:	d101      	bne.n	801150e <HAL_PCD_EP_Open+0xaa>
 801150a:	2302      	movs	r3, #2
 801150c:	e00e      	b.n	801152c <HAL_PCD_EP_Open+0xc8>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2201      	movs	r2, #1
 8011512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	68f9      	ldr	r1, [r7, #12]
 801151c:	4618      	mov	r0, r3
 801151e:	f007 ffef 	bl	8019500 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2200      	movs	r2, #0
 8011526:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 801152a:	7afb      	ldrb	r3, [r7, #11]
}
 801152c:	4618      	mov	r0, r3
 801152e:	3710      	adds	r7, #16
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}

08011534 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	460b      	mov	r3, r1
 801153e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011544:	2b00      	cmp	r3, #0
 8011546:	da0f      	bge.n	8011568 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011548:	78fb      	ldrb	r3, [r7, #3]
 801154a:	f003 020f 	and.w	r2, r3, #15
 801154e:	4613      	mov	r3, r2
 8011550:	00db      	lsls	r3, r3, #3
 8011552:	4413      	add	r3, r2
 8011554:	009b      	lsls	r3, r3, #2
 8011556:	3338      	adds	r3, #56	; 0x38
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	4413      	add	r3, r2
 801155c:	3304      	adds	r3, #4
 801155e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2201      	movs	r2, #1
 8011564:	705a      	strb	r2, [r3, #1]
 8011566:	e00f      	b.n	8011588 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011568:	78fb      	ldrb	r3, [r7, #3]
 801156a:	f003 020f 	and.w	r2, r3, #15
 801156e:	4613      	mov	r3, r2
 8011570:	00db      	lsls	r3, r3, #3
 8011572:	4413      	add	r3, r2
 8011574:	009b      	lsls	r3, r3, #2
 8011576:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	4413      	add	r3, r2
 801157e:	3304      	adds	r3, #4
 8011580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2200      	movs	r2, #0
 8011586:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8011588:	78fb      	ldrb	r3, [r7, #3]
 801158a:	f003 030f 	and.w	r3, r3, #15
 801158e:	b2da      	uxtb	r2, r3
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801159a:	2b01      	cmp	r3, #1
 801159c:	d101      	bne.n	80115a2 <HAL_PCD_EP_Close+0x6e>
 801159e:	2302      	movs	r3, #2
 80115a0:	e00e      	b.n	80115c0 <HAL_PCD_EP_Close+0x8c>
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2201      	movs	r2, #1
 80115a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	68f9      	ldr	r1, [r7, #12]
 80115b0:	4618      	mov	r0, r3
 80115b2:	f008 f82d 	bl	8019610 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2200      	movs	r2, #0
 80115ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80115be:	2300      	movs	r3, #0
}
 80115c0:	4618      	mov	r0, r3
 80115c2:	3710      	adds	r7, #16
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}

080115c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b086      	sub	sp, #24
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	60f8      	str	r0, [r7, #12]
 80115d0:	607a      	str	r2, [r7, #4]
 80115d2:	603b      	str	r3, [r7, #0]
 80115d4:	460b      	mov	r3, r1
 80115d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80115d8:	7afb      	ldrb	r3, [r7, #11]
 80115da:	f003 020f 	and.w	r2, r3, #15
 80115de:	4613      	mov	r3, r2
 80115e0:	00db      	lsls	r3, r3, #3
 80115e2:	4413      	add	r3, r2
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	4413      	add	r3, r2
 80115ee:	3304      	adds	r3, #4
 80115f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	687a      	ldr	r2, [r7, #4]
 80115f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	683a      	ldr	r2, [r7, #0]
 80115fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	2200      	movs	r2, #0
 8011602:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8011604:	697b      	ldr	r3, [r7, #20]
 8011606:	2200      	movs	r2, #0
 8011608:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801160a:	7afb      	ldrb	r3, [r7, #11]
 801160c:	f003 030f 	and.w	r3, r3, #15
 8011610:	b2da      	uxtb	r2, r3
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	691b      	ldr	r3, [r3, #16]
 801161a:	2b01      	cmp	r3, #1
 801161c:	d102      	bne.n	8011624 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011624:	7afb      	ldrb	r3, [r7, #11]
 8011626:	f003 030f 	and.w	r3, r3, #15
 801162a:	2b00      	cmp	r3, #0
 801162c:	d109      	bne.n	8011642 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	6818      	ldr	r0, [r3, #0]
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	691b      	ldr	r3, [r3, #16]
 8011636:	b2db      	uxtb	r3, r3
 8011638:	461a      	mov	r2, r3
 801163a:	6979      	ldr	r1, [r7, #20]
 801163c:	f008 fb14 	bl	8019c68 <USB_EP0StartXfer>
 8011640:	e008      	b.n	8011654 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	6818      	ldr	r0, [r3, #0]
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	691b      	ldr	r3, [r3, #16]
 801164a:	b2db      	uxtb	r3, r3
 801164c:	461a      	mov	r2, r3
 801164e:	6979      	ldr	r1, [r7, #20]
 8011650:	f008 f8ba 	bl	80197c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8011654:	2300      	movs	r3, #0
}
 8011656:	4618      	mov	r0, r3
 8011658:	3718      	adds	r7, #24
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}

0801165e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801165e:	b480      	push	{r7}
 8011660:	b083      	sub	sp, #12
 8011662:	af00      	add	r7, sp, #0
 8011664:	6078      	str	r0, [r7, #4]
 8011666:	460b      	mov	r3, r1
 8011668:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801166a:	78fb      	ldrb	r3, [r7, #3]
 801166c:	f003 020f 	and.w	r2, r3, #15
 8011670:	6879      	ldr	r1, [r7, #4]
 8011672:	4613      	mov	r3, r2
 8011674:	00db      	lsls	r3, r3, #3
 8011676:	4413      	add	r3, r2
 8011678:	009b      	lsls	r3, r3, #2
 801167a:	440b      	add	r3, r1
 801167c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8011680:	681b      	ldr	r3, [r3, #0]
}
 8011682:	4618      	mov	r0, r3
 8011684:	370c      	adds	r7, #12
 8011686:	46bd      	mov	sp, r7
 8011688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168c:	4770      	bx	lr

0801168e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801168e:	b580      	push	{r7, lr}
 8011690:	b086      	sub	sp, #24
 8011692:	af00      	add	r7, sp, #0
 8011694:	60f8      	str	r0, [r7, #12]
 8011696:	607a      	str	r2, [r7, #4]
 8011698:	603b      	str	r3, [r7, #0]
 801169a:	460b      	mov	r3, r1
 801169c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801169e:	7afb      	ldrb	r3, [r7, #11]
 80116a0:	f003 020f 	and.w	r2, r3, #15
 80116a4:	4613      	mov	r3, r2
 80116a6:	00db      	lsls	r3, r3, #3
 80116a8:	4413      	add	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	3338      	adds	r3, #56	; 0x38
 80116ae:	68fa      	ldr	r2, [r7, #12]
 80116b0:	4413      	add	r3, r2
 80116b2:	3304      	adds	r3, #4
 80116b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	683a      	ldr	r2, [r7, #0]
 80116c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	2200      	movs	r2, #0
 80116c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	2201      	movs	r2, #1
 80116cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80116ce:	7afb      	ldrb	r3, [r7, #11]
 80116d0:	f003 030f 	and.w	r3, r3, #15
 80116d4:	b2da      	uxtb	r2, r3
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	691b      	ldr	r3, [r3, #16]
 80116de:	2b01      	cmp	r3, #1
 80116e0:	d102      	bne.n	80116e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80116e8:	7afb      	ldrb	r3, [r7, #11]
 80116ea:	f003 030f 	and.w	r3, r3, #15
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d109      	bne.n	8011706 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	6818      	ldr	r0, [r3, #0]
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	691b      	ldr	r3, [r3, #16]
 80116fa:	b2db      	uxtb	r3, r3
 80116fc:	461a      	mov	r2, r3
 80116fe:	6979      	ldr	r1, [r7, #20]
 8011700:	f008 fab2 	bl	8019c68 <USB_EP0StartXfer>
 8011704:	e008      	b.n	8011718 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	6818      	ldr	r0, [r3, #0]
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	691b      	ldr	r3, [r3, #16]
 801170e:	b2db      	uxtb	r3, r3
 8011710:	461a      	mov	r2, r3
 8011712:	6979      	ldr	r1, [r7, #20]
 8011714:	f008 f858 	bl	80197c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8011718:	2300      	movs	r3, #0
}
 801171a:	4618      	mov	r0, r3
 801171c:	3718      	adds	r7, #24
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}

08011722 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011722:	b580      	push	{r7, lr}
 8011724:	b084      	sub	sp, #16
 8011726:	af00      	add	r7, sp, #0
 8011728:	6078      	str	r0, [r7, #4]
 801172a:	460b      	mov	r3, r1
 801172c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801172e:	78fb      	ldrb	r3, [r7, #3]
 8011730:	f003 020f 	and.w	r2, r3, #15
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	685b      	ldr	r3, [r3, #4]
 8011738:	429a      	cmp	r2, r3
 801173a:	d901      	bls.n	8011740 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801173c:	2301      	movs	r3, #1
 801173e:	e050      	b.n	80117e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011744:	2b00      	cmp	r3, #0
 8011746:	da0f      	bge.n	8011768 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011748:	78fb      	ldrb	r3, [r7, #3]
 801174a:	f003 020f 	and.w	r2, r3, #15
 801174e:	4613      	mov	r3, r2
 8011750:	00db      	lsls	r3, r3, #3
 8011752:	4413      	add	r3, r2
 8011754:	009b      	lsls	r3, r3, #2
 8011756:	3338      	adds	r3, #56	; 0x38
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	4413      	add	r3, r2
 801175c:	3304      	adds	r3, #4
 801175e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2201      	movs	r2, #1
 8011764:	705a      	strb	r2, [r3, #1]
 8011766:	e00d      	b.n	8011784 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8011768:	78fa      	ldrb	r2, [r7, #3]
 801176a:	4613      	mov	r3, r2
 801176c:	00db      	lsls	r3, r3, #3
 801176e:	4413      	add	r3, r2
 8011770:	009b      	lsls	r3, r3, #2
 8011772:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	4413      	add	r3, r2
 801177a:	3304      	adds	r3, #4
 801177c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	2200      	movs	r2, #0
 8011782:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2201      	movs	r2, #1
 8011788:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801178a:	78fb      	ldrb	r3, [r7, #3]
 801178c:	f003 030f 	and.w	r3, r3, #15
 8011790:	b2da      	uxtb	r2, r3
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801179c:	2b01      	cmp	r3, #1
 801179e:	d101      	bne.n	80117a4 <HAL_PCD_EP_SetStall+0x82>
 80117a0:	2302      	movs	r3, #2
 80117a2:	e01e      	b.n	80117e2 <HAL_PCD_EP_SetStall+0xc0>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2201      	movs	r2, #1
 80117a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	68f9      	ldr	r1, [r7, #12]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f008 fcf4 	bl	801a1a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80117b8:	78fb      	ldrb	r3, [r7, #3]
 80117ba:	f003 030f 	and.w	r3, r3, #15
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d10a      	bne.n	80117d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6818      	ldr	r0, [r3, #0]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	691b      	ldr	r3, [r3, #16]
 80117ca:	b2d9      	uxtb	r1, r3
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80117d2:	461a      	mov	r2, r3
 80117d4:	f008 fee6 	bl	801a5a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80117e0:	2300      	movs	r3, #0
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3710      	adds	r7, #16
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}

080117ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80117ea:	b580      	push	{r7, lr}
 80117ec:	b084      	sub	sp, #16
 80117ee:	af00      	add	r7, sp, #0
 80117f0:	6078      	str	r0, [r7, #4]
 80117f2:	460b      	mov	r3, r1
 80117f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80117f6:	78fb      	ldrb	r3, [r7, #3]
 80117f8:	f003 020f 	and.w	r2, r3, #15
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	429a      	cmp	r2, r3
 8011802:	d901      	bls.n	8011808 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8011804:	2301      	movs	r3, #1
 8011806:	e042      	b.n	801188e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801180c:	2b00      	cmp	r3, #0
 801180e:	da0f      	bge.n	8011830 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011810:	78fb      	ldrb	r3, [r7, #3]
 8011812:	f003 020f 	and.w	r2, r3, #15
 8011816:	4613      	mov	r3, r2
 8011818:	00db      	lsls	r3, r3, #3
 801181a:	4413      	add	r3, r2
 801181c:	009b      	lsls	r3, r3, #2
 801181e:	3338      	adds	r3, #56	; 0x38
 8011820:	687a      	ldr	r2, [r7, #4]
 8011822:	4413      	add	r3, r2
 8011824:	3304      	adds	r3, #4
 8011826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	2201      	movs	r2, #1
 801182c:	705a      	strb	r2, [r3, #1]
 801182e:	e00f      	b.n	8011850 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011830:	78fb      	ldrb	r3, [r7, #3]
 8011832:	f003 020f 	and.w	r2, r3, #15
 8011836:	4613      	mov	r3, r2
 8011838:	00db      	lsls	r3, r3, #3
 801183a:	4413      	add	r3, r2
 801183c:	009b      	lsls	r3, r3, #2
 801183e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	4413      	add	r3, r2
 8011846:	3304      	adds	r3, #4
 8011848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2200      	movs	r2, #0
 801184e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2200      	movs	r2, #0
 8011854:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011856:	78fb      	ldrb	r3, [r7, #3]
 8011858:	f003 030f 	and.w	r3, r3, #15
 801185c:	b2da      	uxtb	r2, r3
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8011868:	2b01      	cmp	r3, #1
 801186a:	d101      	bne.n	8011870 <HAL_PCD_EP_ClrStall+0x86>
 801186c:	2302      	movs	r3, #2
 801186e:	e00e      	b.n	801188e <HAL_PCD_EP_ClrStall+0xa4>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2201      	movs	r2, #1
 8011874:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	68f9      	ldr	r1, [r7, #12]
 801187e:	4618      	mov	r0, r3
 8011880:	f008 fcfc 	bl	801a27c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2200      	movs	r2, #0
 8011888:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801188c:	2300      	movs	r3, #0
}
 801188e:	4618      	mov	r0, r3
 8011890:	3710      	adds	r7, #16
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}

08011896 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011896:	b580      	push	{r7, lr}
 8011898:	b084      	sub	sp, #16
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
 801189e:	460b      	mov	r3, r1
 80118a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80118a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	da0c      	bge.n	80118c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80118aa:	78fb      	ldrb	r3, [r7, #3]
 80118ac:	f003 020f 	and.w	r2, r3, #15
 80118b0:	4613      	mov	r3, r2
 80118b2:	00db      	lsls	r3, r3, #3
 80118b4:	4413      	add	r3, r2
 80118b6:	009b      	lsls	r3, r3, #2
 80118b8:	3338      	adds	r3, #56	; 0x38
 80118ba:	687a      	ldr	r2, [r7, #4]
 80118bc:	4413      	add	r3, r2
 80118be:	3304      	adds	r3, #4
 80118c0:	60fb      	str	r3, [r7, #12]
 80118c2:	e00c      	b.n	80118de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80118c4:	78fb      	ldrb	r3, [r7, #3]
 80118c6:	f003 020f 	and.w	r2, r3, #15
 80118ca:	4613      	mov	r3, r2
 80118cc:	00db      	lsls	r3, r3, #3
 80118ce:	4413      	add	r3, r2
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80118d6:	687a      	ldr	r2, [r7, #4]
 80118d8:	4413      	add	r3, r2
 80118da:	3304      	adds	r3, #4
 80118dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	68f9      	ldr	r1, [r7, #12]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f008 fb1b 	bl	8019f20 <USB_EPStopXfer>
 80118ea:	4603      	mov	r3, r0
 80118ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80118ee:	7afb      	ldrb	r3, [r7, #11]
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3710      	adds	r7, #16
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b08a      	sub	sp, #40	; 0x28
 80118fc:	af02      	add	r7, sp, #8
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801190c:	683a      	ldr	r2, [r7, #0]
 801190e:	4613      	mov	r3, r2
 8011910:	00db      	lsls	r3, r3, #3
 8011912:	4413      	add	r3, r2
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	3338      	adds	r3, #56	; 0x38
 8011918:	687a      	ldr	r2, [r7, #4]
 801191a:	4413      	add	r3, r2
 801191c:	3304      	adds	r3, #4
 801191e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	6a1a      	ldr	r2, [r3, #32]
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	699b      	ldr	r3, [r3, #24]
 8011928:	429a      	cmp	r2, r3
 801192a:	d901      	bls.n	8011930 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801192c:	2301      	movs	r3, #1
 801192e:	e06c      	b.n	8011a0a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	699a      	ldr	r2, [r3, #24]
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	6a1b      	ldr	r3, [r3, #32]
 8011938:	1ad3      	subs	r3, r2, r3
 801193a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	68db      	ldr	r3, [r3, #12]
 8011940:	69fa      	ldr	r2, [r7, #28]
 8011942:	429a      	cmp	r2, r3
 8011944:	d902      	bls.n	801194c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	68db      	ldr	r3, [r3, #12]
 801194a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801194c:	69fb      	ldr	r3, [r7, #28]
 801194e:	3303      	adds	r3, #3
 8011950:	089b      	lsrs	r3, r3, #2
 8011952:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8011954:	e02b      	b.n	80119ae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	699a      	ldr	r2, [r3, #24]
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	6a1b      	ldr	r3, [r3, #32]
 801195e:	1ad3      	subs	r3, r2, r3
 8011960:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	68db      	ldr	r3, [r3, #12]
 8011966:	69fa      	ldr	r2, [r7, #28]
 8011968:	429a      	cmp	r2, r3
 801196a:	d902      	bls.n	8011972 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	68db      	ldr	r3, [r3, #12]
 8011970:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8011972:	69fb      	ldr	r3, [r7, #28]
 8011974:	3303      	adds	r3, #3
 8011976:	089b      	lsrs	r3, r3, #2
 8011978:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	6919      	ldr	r1, [r3, #16]
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	b2da      	uxtb	r2, r3
 8011982:	69fb      	ldr	r3, [r7, #28]
 8011984:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801198a:	b2db      	uxtb	r3, r3
 801198c:	9300      	str	r3, [sp, #0]
 801198e:	4603      	mov	r3, r0
 8011990:	6978      	ldr	r0, [r7, #20]
 8011992:	f008 fb6f 	bl	801a074 <USB_WritePacket>

    ep->xfer_buff  += len;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	691a      	ldr	r2, [r3, #16]
 801199a:	69fb      	ldr	r3, [r7, #28]
 801199c:	441a      	add	r2, r3
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	6a1a      	ldr	r2, [r3, #32]
 80119a6:	69fb      	ldr	r3, [r7, #28]
 80119a8:	441a      	add	r2, r3
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	015a      	lsls	r2, r3, #5
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	4413      	add	r3, r2
 80119b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119ba:	699b      	ldr	r3, [r3, #24]
 80119bc:	b29b      	uxth	r3, r3
 80119be:	69ba      	ldr	r2, [r7, #24]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d809      	bhi.n	80119d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	6a1a      	ldr	r2, [r3, #32]
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d203      	bcs.n	80119d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	699b      	ldr	r3, [r3, #24]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d1be      	bne.n	8011956 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	699a      	ldr	r2, [r3, #24]
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	6a1b      	ldr	r3, [r3, #32]
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d811      	bhi.n	8011a08 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	f003 030f 	and.w	r3, r3, #15
 80119ea:	2201      	movs	r2, #1
 80119ec:	fa02 f303 	lsl.w	r3, r2, r3
 80119f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	43db      	mvns	r3, r3
 80119fe:	6939      	ldr	r1, [r7, #16]
 8011a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a04:	4013      	ands	r3, r2
 8011a06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8011a08:	2300      	movs	r3, #0
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3720      	adds	r7, #32
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
	...

08011a14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b088      	sub	sp, #32
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a24:	69fb      	ldr	r3, [r7, #28]
 8011a26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011a28:	69fb      	ldr	r3, [r7, #28]
 8011a2a:	333c      	adds	r3, #60	; 0x3c
 8011a2c:	3304      	adds	r3, #4
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	015a      	lsls	r2, r3, #5
 8011a36:	69bb      	ldr	r3, [r7, #24]
 8011a38:	4413      	add	r3, r2
 8011a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a3e:	689b      	ldr	r3, [r3, #8]
 8011a40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	691b      	ldr	r3, [r3, #16]
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d17b      	bne.n	8011b42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	f003 0308 	and.w	r3, r3, #8
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d015      	beq.n	8011a80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	4a61      	ldr	r2, [pc, #388]	; (8011bdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	f240 80b9 	bls.w	8011bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	f000 80b3 	beq.w	8011bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	015a      	lsls	r2, r3, #5
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	4413      	add	r3, r2
 8011a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a76:	461a      	mov	r2, r3
 8011a78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a7c:	6093      	str	r3, [r2, #8]
 8011a7e:	e0a7      	b.n	8011bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	f003 0320 	and.w	r3, r3, #32
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d009      	beq.n	8011a9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	015a      	lsls	r2, r3, #5
 8011a8e:	69bb      	ldr	r3, [r7, #24]
 8011a90:	4413      	add	r3, r2
 8011a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a96:	461a      	mov	r2, r3
 8011a98:	2320      	movs	r3, #32
 8011a9a:	6093      	str	r3, [r2, #8]
 8011a9c:	e098      	b.n	8011bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	f040 8093 	bne.w	8011bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	4a4b      	ldr	r2, [pc, #300]	; (8011bdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d90f      	bls.n	8011ad2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d00a      	beq.n	8011ad2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	015a      	lsls	r2, r3, #5
 8011ac0:	69bb      	ldr	r3, [r7, #24]
 8011ac2:	4413      	add	r3, r2
 8011ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ac8:	461a      	mov	r2, r3
 8011aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ace:	6093      	str	r3, [r2, #8]
 8011ad0:	e07e      	b.n	8011bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8011ad2:	683a      	ldr	r2, [r7, #0]
 8011ad4:	4613      	mov	r3, r2
 8011ad6:	00db      	lsls	r3, r3, #3
 8011ad8:	4413      	add	r3, r2
 8011ada:	009b      	lsls	r3, r3, #2
 8011adc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	4413      	add	r3, r2
 8011ae4:	3304      	adds	r3, #4
 8011ae6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	69da      	ldr	r2, [r3, #28]
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	0159      	lsls	r1, r3, #5
 8011af0:	69bb      	ldr	r3, [r7, #24]
 8011af2:	440b      	add	r3, r1
 8011af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011af8:	691b      	ldr	r3, [r3, #16]
 8011afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011afe:	1ad2      	subs	r2, r2, r3
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d114      	bne.n	8011b34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	699b      	ldr	r3, [r3, #24]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d109      	bne.n	8011b26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6818      	ldr	r0, [r3, #0]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	2101      	movs	r1, #1
 8011b20:	f008 fd40 	bl	801a5a4 <USB_EP0_OutStart>
 8011b24:	e006      	b.n	8011b34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	691a      	ldr	r2, [r3, #16]
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	6a1b      	ldr	r3, [r3, #32]
 8011b2e:	441a      	add	r2, r3
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	b2db      	uxtb	r3, r3
 8011b38:	4619      	mov	r1, r3
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f00a ffb4 	bl	801caa8 <HAL_PCD_DataOutStageCallback>
 8011b40:	e046      	b.n	8011bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8011b42:	697b      	ldr	r3, [r7, #20]
 8011b44:	4a26      	ldr	r2, [pc, #152]	; (8011be0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d124      	bne.n	8011b94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d00a      	beq.n	8011b6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	015a      	lsls	r2, r3, #5
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	4413      	add	r3, r2
 8011b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b60:	461a      	mov	r2, r3
 8011b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b66:	6093      	str	r3, [r2, #8]
 8011b68:	e032      	b.n	8011bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	f003 0320 	and.w	r3, r3, #32
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d008      	beq.n	8011b86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	015a      	lsls	r2, r3, #5
 8011b78:	69bb      	ldr	r3, [r7, #24]
 8011b7a:	4413      	add	r3, r2
 8011b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b80:	461a      	mov	r2, r3
 8011b82:	2320      	movs	r3, #32
 8011b84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	b2db      	uxtb	r3, r3
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f00a ff8b 	bl	801caa8 <HAL_PCD_DataOutStageCallback>
 8011b92:	e01d      	b.n	8011bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d114      	bne.n	8011bc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8011b9a:	6879      	ldr	r1, [r7, #4]
 8011b9c:	683a      	ldr	r2, [r7, #0]
 8011b9e:	4613      	mov	r3, r2
 8011ba0:	00db      	lsls	r3, r3, #3
 8011ba2:	4413      	add	r3, r2
 8011ba4:	009b      	lsls	r3, r3, #2
 8011ba6:	440b      	add	r3, r1
 8011ba8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d108      	bne.n	8011bc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6818      	ldr	r0, [r3, #0]
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	2100      	movs	r1, #0
 8011bc0:	f008 fcf0 	bl	801a5a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	b2db      	uxtb	r3, r3
 8011bc8:	4619      	mov	r1, r3
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f00a ff6c 	bl	801caa8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8011bd0:	2300      	movs	r3, #0
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3720      	adds	r7, #32
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	4f54300a 	.word	0x4f54300a
 8011be0:	4f54310a 	.word	0x4f54310a

08011be4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b086      	sub	sp, #24
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	333c      	adds	r3, #60	; 0x3c
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	015a      	lsls	r2, r3, #5
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	4413      	add	r3, r2
 8011c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c0e:	689b      	ldr	r3, [r3, #8]
 8011c10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	4a15      	ldr	r2, [pc, #84]	; (8011c6c <PCD_EP_OutSetupPacket_int+0x88>)
 8011c16:	4293      	cmp	r3, r2
 8011c18:	d90e      	bls.n	8011c38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d009      	beq.n	8011c38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	015a      	lsls	r2, r3, #5
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	4413      	add	r3, r2
 8011c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c30:	461a      	mov	r2, r3
 8011c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f00a ff23 	bl	801ca84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	4a0a      	ldr	r2, [pc, #40]	; (8011c6c <PCD_EP_OutSetupPacket_int+0x88>)
 8011c42:	4293      	cmp	r3, r2
 8011c44:	d90c      	bls.n	8011c60 <PCD_EP_OutSetupPacket_int+0x7c>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	691b      	ldr	r3, [r3, #16]
 8011c4a:	2b01      	cmp	r3, #1
 8011c4c:	d108      	bne.n	8011c60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6818      	ldr	r0, [r3, #0]
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011c58:	461a      	mov	r2, r3
 8011c5a:	2101      	movs	r1, #1
 8011c5c:	f008 fca2 	bl	801a5a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8011c60:	2300      	movs	r3, #0
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3718      	adds	r7, #24
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	4f54300a 	.word	0x4f54300a

08011c70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8011c70:	b480      	push	{r7}
 8011c72:	b085      	sub	sp, #20
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	460b      	mov	r3, r1
 8011c7a:	70fb      	strb	r3, [r7, #3]
 8011c7c:	4613      	mov	r3, r2
 8011c7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8011c88:	78fb      	ldrb	r3, [r7, #3]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d107      	bne.n	8011c9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8011c8e:	883b      	ldrh	r3, [r7, #0]
 8011c90:	0419      	lsls	r1, r3, #16
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	68ba      	ldr	r2, [r7, #8]
 8011c98:	430a      	orrs	r2, r1
 8011c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8011c9c:	e028      	b.n	8011cf0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ca4:	0c1b      	lsrs	r3, r3, #16
 8011ca6:	68ba      	ldr	r2, [r7, #8]
 8011ca8:	4413      	add	r3, r2
 8011caa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011cac:	2300      	movs	r3, #0
 8011cae:	73fb      	strb	r3, [r7, #15]
 8011cb0:	e00d      	b.n	8011cce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	7bfb      	ldrb	r3, [r7, #15]
 8011cb8:	3340      	adds	r3, #64	; 0x40
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	4413      	add	r3, r2
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	0c1b      	lsrs	r3, r3, #16
 8011cc2:	68ba      	ldr	r2, [r7, #8]
 8011cc4:	4413      	add	r3, r2
 8011cc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011cc8:	7bfb      	ldrb	r3, [r7, #15]
 8011cca:	3301      	adds	r3, #1
 8011ccc:	73fb      	strb	r3, [r7, #15]
 8011cce:	7bfa      	ldrb	r2, [r7, #15]
 8011cd0:	78fb      	ldrb	r3, [r7, #3]
 8011cd2:	3b01      	subs	r3, #1
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d3ec      	bcc.n	8011cb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8011cd8:	883b      	ldrh	r3, [r7, #0]
 8011cda:	0418      	lsls	r0, r3, #16
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6819      	ldr	r1, [r3, #0]
 8011ce0:	78fb      	ldrb	r3, [r7, #3]
 8011ce2:	3b01      	subs	r3, #1
 8011ce4:	68ba      	ldr	r2, [r7, #8]
 8011ce6:	4302      	orrs	r2, r0
 8011ce8:	3340      	adds	r3, #64	; 0x40
 8011cea:	009b      	lsls	r3, r3, #2
 8011cec:	440b      	add	r3, r1
 8011cee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8011cf0:	2300      	movs	r3, #0
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3714      	adds	r7, #20
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfc:	4770      	bx	lr

08011cfe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8011cfe:	b480      	push	{r7}
 8011d00:	b083      	sub	sp, #12
 8011d02:	af00      	add	r7, sp, #0
 8011d04:	6078      	str	r0, [r7, #4]
 8011d06:	460b      	mov	r3, r1
 8011d08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	887a      	ldrh	r2, [r7, #2]
 8011d10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8011d12:	2300      	movs	r3, #0
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	370c      	adds	r7, #12
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr

08011d20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8011d20:	b480      	push	{r7}
 8011d22:	b085      	sub	sp, #20
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2201      	movs	r2, #1
 8011d32:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2200      	movs	r2, #0
 8011d3a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	699b      	ldr	r3, [r3, #24]
 8011d42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d4e:	4b05      	ldr	r3, [pc, #20]	; (8011d64 <HAL_PCDEx_ActivateLPM+0x44>)
 8011d50:	4313      	orrs	r3, r2
 8011d52:	68fa      	ldr	r2, [r7, #12]
 8011d54:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8011d56:	2300      	movs	r3, #0
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	3714      	adds	r7, #20
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr
 8011d64:	10000003 	.word	0x10000003

08011d68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011d68:	b480      	push	{r7}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	460b      	mov	r3, r1
 8011d72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8011d74:	bf00      	nop
 8011d76:	370c      	adds	r7, #12
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7e:	4770      	bx	lr

08011d80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8011d88:	4b19      	ldr	r3, [pc, #100]	; (8011df0 <HAL_PWREx_ConfigSupply+0x70>)
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	f003 0304 	and.w	r3, r3, #4
 8011d90:	2b04      	cmp	r3, #4
 8011d92:	d00a      	beq.n	8011daa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8011d94:	4b16      	ldr	r3, [pc, #88]	; (8011df0 <HAL_PWREx_ConfigSupply+0x70>)
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	f003 0307 	and.w	r3, r3, #7
 8011d9c:	687a      	ldr	r2, [r7, #4]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d001      	beq.n	8011da6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8011da2:	2301      	movs	r3, #1
 8011da4:	e01f      	b.n	8011de6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8011da6:	2300      	movs	r3, #0
 8011da8:	e01d      	b.n	8011de6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8011daa:	4b11      	ldr	r3, [pc, #68]	; (8011df0 <HAL_PWREx_ConfigSupply+0x70>)
 8011dac:	68db      	ldr	r3, [r3, #12]
 8011dae:	f023 0207 	bic.w	r2, r3, #7
 8011db2:	490f      	ldr	r1, [pc, #60]	; (8011df0 <HAL_PWREx_ConfigSupply+0x70>)
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	4313      	orrs	r3, r2
 8011db8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8011dba:	f7fa f843 	bl	800be44 <HAL_GetTick>
 8011dbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011dc0:	e009      	b.n	8011dd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011dc2:	f7fa f83f 	bl	800be44 <HAL_GetTick>
 8011dc6:	4602      	mov	r2, r0
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	1ad3      	subs	r3, r2, r3
 8011dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011dd0:	d901      	bls.n	8011dd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	e007      	b.n	8011de6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011dd6:	4b06      	ldr	r3, [pc, #24]	; (8011df0 <HAL_PWREx_ConfigSupply+0x70>)
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011de2:	d1ee      	bne.n	8011dc2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8011de4:	2300      	movs	r3, #0
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3710      	adds	r7, #16
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	58024800 	.word	0x58024800

08011df4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8011df4:	b480      	push	{r7}
 8011df6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8011df8:	4b05      	ldr	r3, [pc, #20]	; (8011e10 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	4a04      	ldr	r2, [pc, #16]	; (8011e10 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8011dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011e02:	60d3      	str	r3, [r2, #12]
}
 8011e04:	bf00      	nop
 8011e06:	46bd      	mov	sp, r7
 8011e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0c:	4770      	bx	lr
 8011e0e:	bf00      	nop
 8011e10:	58024800 	.word	0x58024800

08011e14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b08c      	sub	sp, #48	; 0x30
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d102      	bne.n	8011e28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011e22:	2301      	movs	r3, #1
 8011e24:	f000 bc1d 	b.w	8012662 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	f003 0301 	and.w	r3, r3, #1
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	f000 8087 	beq.w	8011f44 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011e36:	4b99      	ldr	r3, [pc, #612]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011e38:	691b      	ldr	r3, [r3, #16]
 8011e3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011e40:	4b96      	ldr	r3, [pc, #600]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e44:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8011e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e48:	2b10      	cmp	r3, #16
 8011e4a:	d007      	beq.n	8011e5c <HAL_RCC_OscConfig+0x48>
 8011e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4e:	2b18      	cmp	r3, #24
 8011e50:	d110      	bne.n	8011e74 <HAL_RCC_OscConfig+0x60>
 8011e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e54:	f003 0303 	and.w	r3, r3, #3
 8011e58:	2b02      	cmp	r3, #2
 8011e5a:	d10b      	bne.n	8011e74 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011e5c:	4b8f      	ldr	r3, [pc, #572]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d06c      	beq.n	8011f42 <HAL_RCC_OscConfig+0x12e>
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d168      	bne.n	8011f42 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8011e70:	2301      	movs	r3, #1
 8011e72:	e3f6      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	685b      	ldr	r3, [r3, #4]
 8011e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e7c:	d106      	bne.n	8011e8c <HAL_RCC_OscConfig+0x78>
 8011e7e:	4b87      	ldr	r3, [pc, #540]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	4a86      	ldr	r2, [pc, #536]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011e88:	6013      	str	r3, [r2, #0]
 8011e8a:	e02e      	b.n	8011eea <HAL_RCC_OscConfig+0xd6>
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d10c      	bne.n	8011eae <HAL_RCC_OscConfig+0x9a>
 8011e94:	4b81      	ldr	r3, [pc, #516]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	4a80      	ldr	r2, [pc, #512]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011e9e:	6013      	str	r3, [r2, #0]
 8011ea0:	4b7e      	ldr	r3, [pc, #504]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	4a7d      	ldr	r2, [pc, #500]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011eaa:	6013      	str	r3, [r2, #0]
 8011eac:	e01d      	b.n	8011eea <HAL_RCC_OscConfig+0xd6>
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011eb6:	d10c      	bne.n	8011ed2 <HAL_RCC_OscConfig+0xbe>
 8011eb8:	4b78      	ldr	r3, [pc, #480]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	4a77      	ldr	r2, [pc, #476]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011ec2:	6013      	str	r3, [r2, #0]
 8011ec4:	4b75      	ldr	r3, [pc, #468]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	4a74      	ldr	r2, [pc, #464]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011ece:	6013      	str	r3, [r2, #0]
 8011ed0:	e00b      	b.n	8011eea <HAL_RCC_OscConfig+0xd6>
 8011ed2:	4b72      	ldr	r3, [pc, #456]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	4a71      	ldr	r2, [pc, #452]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011edc:	6013      	str	r3, [r2, #0]
 8011ede:	4b6f      	ldr	r3, [pc, #444]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	4a6e      	ldr	r2, [pc, #440]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011ee8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d013      	beq.n	8011f1a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011ef2:	f7f9 ffa7 	bl	800be44 <HAL_GetTick>
 8011ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011ef8:	e008      	b.n	8011f0c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011efa:	f7f9 ffa3 	bl	800be44 <HAL_GetTick>
 8011efe:	4602      	mov	r2, r0
 8011f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f02:	1ad3      	subs	r3, r2, r3
 8011f04:	2b64      	cmp	r3, #100	; 0x64
 8011f06:	d901      	bls.n	8011f0c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8011f08:	2303      	movs	r3, #3
 8011f0a:	e3aa      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011f0c:	4b63      	ldr	r3, [pc, #396]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d0f0      	beq.n	8011efa <HAL_RCC_OscConfig+0xe6>
 8011f18:	e014      	b.n	8011f44 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011f1a:	f7f9 ff93 	bl	800be44 <HAL_GetTick>
 8011f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011f20:	e008      	b.n	8011f34 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011f22:	f7f9 ff8f 	bl	800be44 <HAL_GetTick>
 8011f26:	4602      	mov	r2, r0
 8011f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2a:	1ad3      	subs	r3, r2, r3
 8011f2c:	2b64      	cmp	r3, #100	; 0x64
 8011f2e:	d901      	bls.n	8011f34 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8011f30:	2303      	movs	r3, #3
 8011f32:	e396      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011f34:	4b59      	ldr	r3, [pc, #356]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d1f0      	bne.n	8011f22 <HAL_RCC_OscConfig+0x10e>
 8011f40:	e000      	b.n	8011f44 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011f42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	f003 0302 	and.w	r3, r3, #2
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	f000 80cb 	beq.w	80120e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011f52:	4b52      	ldr	r3, [pc, #328]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011f54:	691b      	ldr	r3, [r3, #16]
 8011f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011f5a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011f5c:	4b4f      	ldr	r3, [pc, #316]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f60:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011f62:	6a3b      	ldr	r3, [r7, #32]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d007      	beq.n	8011f78 <HAL_RCC_OscConfig+0x164>
 8011f68:	6a3b      	ldr	r3, [r7, #32]
 8011f6a:	2b18      	cmp	r3, #24
 8011f6c:	d156      	bne.n	801201c <HAL_RCC_OscConfig+0x208>
 8011f6e:	69fb      	ldr	r3, [r7, #28]
 8011f70:	f003 0303 	and.w	r3, r3, #3
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d151      	bne.n	801201c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011f78:	4b48      	ldr	r3, [pc, #288]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f003 0304 	and.w	r3, r3, #4
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d005      	beq.n	8011f90 <HAL_RCC_OscConfig+0x17c>
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d101      	bne.n	8011f90 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	e368      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011f90:	4b42      	ldr	r3, [pc, #264]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	f023 0219 	bic.w	r2, r3, #25
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	68db      	ldr	r3, [r3, #12]
 8011f9c:	493f      	ldr	r1, [pc, #252]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011f9e:	4313      	orrs	r3, r2
 8011fa0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011fa2:	f7f9 ff4f 	bl	800be44 <HAL_GetTick>
 8011fa6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011fa8:	e008      	b.n	8011fbc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011faa:	f7f9 ff4b 	bl	800be44 <HAL_GetTick>
 8011fae:	4602      	mov	r2, r0
 8011fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb2:	1ad3      	subs	r3, r2, r3
 8011fb4:	2b02      	cmp	r3, #2
 8011fb6:	d901      	bls.n	8011fbc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8011fb8:	2303      	movs	r3, #3
 8011fba:	e352      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011fbc:	4b37      	ldr	r3, [pc, #220]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f003 0304 	and.w	r3, r3, #4
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d0f0      	beq.n	8011faa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011fc8:	f7f9 ff6c 	bl	800bea4 <HAL_GetREVID>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	f241 0203 	movw	r2, #4099	; 0x1003
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	d817      	bhi.n	8012006 <HAL_RCC_OscConfig+0x1f2>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	691b      	ldr	r3, [r3, #16]
 8011fda:	2b40      	cmp	r3, #64	; 0x40
 8011fdc:	d108      	bne.n	8011ff0 <HAL_RCC_OscConfig+0x1dc>
 8011fde:	4b2f      	ldr	r3, [pc, #188]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8011fe6:	4a2d      	ldr	r2, [pc, #180]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011fec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011fee:	e07b      	b.n	80120e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011ff0:	4b2a      	ldr	r3, [pc, #168]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	691b      	ldr	r3, [r3, #16]
 8011ffc:	031b      	lsls	r3, r3, #12
 8011ffe:	4927      	ldr	r1, [pc, #156]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8012000:	4313      	orrs	r3, r2
 8012002:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012004:	e070      	b.n	80120e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012006:	4b25      	ldr	r3, [pc, #148]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8012008:	685b      	ldr	r3, [r3, #4]
 801200a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	691b      	ldr	r3, [r3, #16]
 8012012:	061b      	lsls	r3, r3, #24
 8012014:	4921      	ldr	r1, [pc, #132]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8012016:	4313      	orrs	r3, r2
 8012018:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801201a:	e065      	b.n	80120e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d048      	beq.n	80120b6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8012024:	4b1d      	ldr	r3, [pc, #116]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f023 0219 	bic.w	r2, r3, #25
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	491a      	ldr	r1, [pc, #104]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8012032:	4313      	orrs	r3, r2
 8012034:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012036:	f7f9 ff05 	bl	800be44 <HAL_GetTick>
 801203a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801203c:	e008      	b.n	8012050 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801203e:	f7f9 ff01 	bl	800be44 <HAL_GetTick>
 8012042:	4602      	mov	r2, r0
 8012044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012046:	1ad3      	subs	r3, r2, r3
 8012048:	2b02      	cmp	r3, #2
 801204a:	d901      	bls.n	8012050 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 801204c:	2303      	movs	r3, #3
 801204e:	e308      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012050:	4b12      	ldr	r3, [pc, #72]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	f003 0304 	and.w	r3, r3, #4
 8012058:	2b00      	cmp	r3, #0
 801205a:	d0f0      	beq.n	801203e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801205c:	f7f9 ff22 	bl	800bea4 <HAL_GetREVID>
 8012060:	4603      	mov	r3, r0
 8012062:	f241 0203 	movw	r2, #4099	; 0x1003
 8012066:	4293      	cmp	r3, r2
 8012068:	d81a      	bhi.n	80120a0 <HAL_RCC_OscConfig+0x28c>
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	691b      	ldr	r3, [r3, #16]
 801206e:	2b40      	cmp	r3, #64	; 0x40
 8012070:	d108      	bne.n	8012084 <HAL_RCC_OscConfig+0x270>
 8012072:	4b0a      	ldr	r3, [pc, #40]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8012074:	685b      	ldr	r3, [r3, #4]
 8012076:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801207a:	4a08      	ldr	r2, [pc, #32]	; (801209c <HAL_RCC_OscConfig+0x288>)
 801207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012080:	6053      	str	r3, [r2, #4]
 8012082:	e031      	b.n	80120e8 <HAL_RCC_OscConfig+0x2d4>
 8012084:	4b05      	ldr	r3, [pc, #20]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8012086:	685b      	ldr	r3, [r3, #4]
 8012088:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	691b      	ldr	r3, [r3, #16]
 8012090:	031b      	lsls	r3, r3, #12
 8012092:	4902      	ldr	r1, [pc, #8]	; (801209c <HAL_RCC_OscConfig+0x288>)
 8012094:	4313      	orrs	r3, r2
 8012096:	604b      	str	r3, [r1, #4]
 8012098:	e026      	b.n	80120e8 <HAL_RCC_OscConfig+0x2d4>
 801209a:	bf00      	nop
 801209c:	58024400 	.word	0x58024400
 80120a0:	4b9a      	ldr	r3, [pc, #616]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	691b      	ldr	r3, [r3, #16]
 80120ac:	061b      	lsls	r3, r3, #24
 80120ae:	4997      	ldr	r1, [pc, #604]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80120b0:	4313      	orrs	r3, r2
 80120b2:	604b      	str	r3, [r1, #4]
 80120b4:	e018      	b.n	80120e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80120b6:	4b95      	ldr	r3, [pc, #596]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4a94      	ldr	r2, [pc, #592]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80120bc:	f023 0301 	bic.w	r3, r3, #1
 80120c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80120c2:	f7f9 febf 	bl	800be44 <HAL_GetTick>
 80120c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80120c8:	e008      	b.n	80120dc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80120ca:	f7f9 febb 	bl	800be44 <HAL_GetTick>
 80120ce:	4602      	mov	r2, r0
 80120d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d2:	1ad3      	subs	r3, r2, r3
 80120d4:	2b02      	cmp	r3, #2
 80120d6:	d901      	bls.n	80120dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80120d8:	2303      	movs	r3, #3
 80120da:	e2c2      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80120dc:	4b8b      	ldr	r3, [pc, #556]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	f003 0304 	and.w	r3, r3, #4
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d1f0      	bne.n	80120ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	f003 0310 	and.w	r3, r3, #16
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	f000 80a9 	beq.w	8012248 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80120f6:	4b85      	ldr	r3, [pc, #532]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80120f8:	691b      	ldr	r3, [r3, #16]
 80120fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80120fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012100:	4b82      	ldr	r3, [pc, #520]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012104:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8012106:	69bb      	ldr	r3, [r7, #24]
 8012108:	2b08      	cmp	r3, #8
 801210a:	d007      	beq.n	801211c <HAL_RCC_OscConfig+0x308>
 801210c:	69bb      	ldr	r3, [r7, #24]
 801210e:	2b18      	cmp	r3, #24
 8012110:	d13a      	bne.n	8012188 <HAL_RCC_OscConfig+0x374>
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	f003 0303 	and.w	r3, r3, #3
 8012118:	2b01      	cmp	r3, #1
 801211a:	d135      	bne.n	8012188 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801211c:	4b7b      	ldr	r3, [pc, #492]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012124:	2b00      	cmp	r3, #0
 8012126:	d005      	beq.n	8012134 <HAL_RCC_OscConfig+0x320>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	69db      	ldr	r3, [r3, #28]
 801212c:	2b80      	cmp	r3, #128	; 0x80
 801212e:	d001      	beq.n	8012134 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8012130:	2301      	movs	r3, #1
 8012132:	e296      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012134:	f7f9 feb6 	bl	800bea4 <HAL_GetREVID>
 8012138:	4603      	mov	r3, r0
 801213a:	f241 0203 	movw	r2, #4099	; 0x1003
 801213e:	4293      	cmp	r3, r2
 8012140:	d817      	bhi.n	8012172 <HAL_RCC_OscConfig+0x35e>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6a1b      	ldr	r3, [r3, #32]
 8012146:	2b20      	cmp	r3, #32
 8012148:	d108      	bne.n	801215c <HAL_RCC_OscConfig+0x348>
 801214a:	4b70      	ldr	r3, [pc, #448]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8012152:	4a6e      	ldr	r2, [pc, #440]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012154:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012158:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801215a:	e075      	b.n	8012248 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801215c:	4b6b      	ldr	r3, [pc, #428]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 801215e:	685b      	ldr	r3, [r3, #4]
 8012160:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6a1b      	ldr	r3, [r3, #32]
 8012168:	069b      	lsls	r3, r3, #26
 801216a:	4968      	ldr	r1, [pc, #416]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 801216c:	4313      	orrs	r3, r2
 801216e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8012170:	e06a      	b.n	8012248 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012172:	4b66      	ldr	r3, [pc, #408]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012174:	68db      	ldr	r3, [r3, #12]
 8012176:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	6a1b      	ldr	r3, [r3, #32]
 801217e:	061b      	lsls	r3, r3, #24
 8012180:	4962      	ldr	r1, [pc, #392]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012182:	4313      	orrs	r3, r2
 8012184:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8012186:	e05f      	b.n	8012248 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	69db      	ldr	r3, [r3, #28]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d042      	beq.n	8012216 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8012190:	4b5e      	ldr	r3, [pc, #376]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	4a5d      	ldr	r2, [pc, #372]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801219a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801219c:	f7f9 fe52 	bl	800be44 <HAL_GetTick>
 80121a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80121a2:	e008      	b.n	80121b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80121a4:	f7f9 fe4e 	bl	800be44 <HAL_GetTick>
 80121a8:	4602      	mov	r2, r0
 80121aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ac:	1ad3      	subs	r3, r2, r3
 80121ae:	2b02      	cmp	r3, #2
 80121b0:	d901      	bls.n	80121b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80121b2:	2303      	movs	r3, #3
 80121b4:	e255      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80121b6:	4b55      	ldr	r3, [pc, #340]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d0f0      	beq.n	80121a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80121c2:	f7f9 fe6f 	bl	800bea4 <HAL_GetREVID>
 80121c6:	4603      	mov	r3, r0
 80121c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80121cc:	4293      	cmp	r3, r2
 80121ce:	d817      	bhi.n	8012200 <HAL_RCC_OscConfig+0x3ec>
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6a1b      	ldr	r3, [r3, #32]
 80121d4:	2b20      	cmp	r3, #32
 80121d6:	d108      	bne.n	80121ea <HAL_RCC_OscConfig+0x3d6>
 80121d8:	4b4c      	ldr	r3, [pc, #304]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80121e0:	4a4a      	ldr	r2, [pc, #296]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80121e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80121e6:	6053      	str	r3, [r2, #4]
 80121e8:	e02e      	b.n	8012248 <HAL_RCC_OscConfig+0x434>
 80121ea:	4b48      	ldr	r3, [pc, #288]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6a1b      	ldr	r3, [r3, #32]
 80121f6:	069b      	lsls	r3, r3, #26
 80121f8:	4944      	ldr	r1, [pc, #272]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80121fa:	4313      	orrs	r3, r2
 80121fc:	604b      	str	r3, [r1, #4]
 80121fe:	e023      	b.n	8012248 <HAL_RCC_OscConfig+0x434>
 8012200:	4b42      	ldr	r3, [pc, #264]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6a1b      	ldr	r3, [r3, #32]
 801220c:	061b      	lsls	r3, r3, #24
 801220e:	493f      	ldr	r1, [pc, #252]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012210:	4313      	orrs	r3, r2
 8012212:	60cb      	str	r3, [r1, #12]
 8012214:	e018      	b.n	8012248 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8012216:	4b3d      	ldr	r3, [pc, #244]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	4a3c      	ldr	r2, [pc, #240]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 801221c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012222:	f7f9 fe0f 	bl	800be44 <HAL_GetTick>
 8012226:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8012228:	e008      	b.n	801223c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801222a:	f7f9 fe0b 	bl	800be44 <HAL_GetTick>
 801222e:	4602      	mov	r2, r0
 8012230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012232:	1ad3      	subs	r3, r2, r3
 8012234:	2b02      	cmp	r3, #2
 8012236:	d901      	bls.n	801223c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8012238:	2303      	movs	r3, #3
 801223a:	e212      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801223c:	4b33      	ldr	r3, [pc, #204]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012244:	2b00      	cmp	r3, #0
 8012246:	d1f0      	bne.n	801222a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f003 0308 	and.w	r3, r3, #8
 8012250:	2b00      	cmp	r3, #0
 8012252:	d036      	beq.n	80122c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	695b      	ldr	r3, [r3, #20]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d019      	beq.n	8012290 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801225c:	4b2b      	ldr	r3, [pc, #172]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 801225e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012260:	4a2a      	ldr	r2, [pc, #168]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012262:	f043 0301 	orr.w	r3, r3, #1
 8012266:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012268:	f7f9 fdec 	bl	800be44 <HAL_GetTick>
 801226c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801226e:	e008      	b.n	8012282 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012270:	f7f9 fde8 	bl	800be44 <HAL_GetTick>
 8012274:	4602      	mov	r2, r0
 8012276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012278:	1ad3      	subs	r3, r2, r3
 801227a:	2b02      	cmp	r3, #2
 801227c:	d901      	bls.n	8012282 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801227e:	2303      	movs	r3, #3
 8012280:	e1ef      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8012282:	4b22      	ldr	r3, [pc, #136]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012286:	f003 0302 	and.w	r3, r3, #2
 801228a:	2b00      	cmp	r3, #0
 801228c:	d0f0      	beq.n	8012270 <HAL_RCC_OscConfig+0x45c>
 801228e:	e018      	b.n	80122c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012290:	4b1e      	ldr	r3, [pc, #120]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012294:	4a1d      	ldr	r2, [pc, #116]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 8012296:	f023 0301 	bic.w	r3, r3, #1
 801229a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801229c:	f7f9 fdd2 	bl	800be44 <HAL_GetTick>
 80122a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80122a2:	e008      	b.n	80122b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80122a4:	f7f9 fdce 	bl	800be44 <HAL_GetTick>
 80122a8:	4602      	mov	r2, r0
 80122aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ac:	1ad3      	subs	r3, r2, r3
 80122ae:	2b02      	cmp	r3, #2
 80122b0:	d901      	bls.n	80122b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80122b2:	2303      	movs	r3, #3
 80122b4:	e1d5      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80122b6:	4b15      	ldr	r3, [pc, #84]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80122b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122ba:	f003 0302 	and.w	r3, r3, #2
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d1f0      	bne.n	80122a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f003 0320 	and.w	r3, r3, #32
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d039      	beq.n	8012342 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	699b      	ldr	r3, [r3, #24]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d01c      	beq.n	8012310 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80122d6:	4b0d      	ldr	r3, [pc, #52]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	4a0c      	ldr	r2, [pc, #48]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80122dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80122e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80122e2:	f7f9 fdaf 	bl	800be44 <HAL_GetTick>
 80122e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80122e8:	e008      	b.n	80122fc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80122ea:	f7f9 fdab 	bl	800be44 <HAL_GetTick>
 80122ee:	4602      	mov	r2, r0
 80122f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f2:	1ad3      	subs	r3, r2, r3
 80122f4:	2b02      	cmp	r3, #2
 80122f6:	d901      	bls.n	80122fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80122f8:	2303      	movs	r3, #3
 80122fa:	e1b2      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80122fc:	4b03      	ldr	r3, [pc, #12]	; (801230c <HAL_RCC_OscConfig+0x4f8>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012304:	2b00      	cmp	r3, #0
 8012306:	d0f0      	beq.n	80122ea <HAL_RCC_OscConfig+0x4d6>
 8012308:	e01b      	b.n	8012342 <HAL_RCC_OscConfig+0x52e>
 801230a:	bf00      	nop
 801230c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8012310:	4b9b      	ldr	r3, [pc, #620]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	4a9a      	ldr	r2, [pc, #616]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801231a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801231c:	f7f9 fd92 	bl	800be44 <HAL_GetTick>
 8012320:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012322:	e008      	b.n	8012336 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8012324:	f7f9 fd8e 	bl	800be44 <HAL_GetTick>
 8012328:	4602      	mov	r2, r0
 801232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	2b02      	cmp	r3, #2
 8012330:	d901      	bls.n	8012336 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8012332:	2303      	movs	r3, #3
 8012334:	e195      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012336:	4b92      	ldr	r3, [pc, #584]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801233e:	2b00      	cmp	r3, #0
 8012340:	d1f0      	bne.n	8012324 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	f003 0304 	and.w	r3, r3, #4
 801234a:	2b00      	cmp	r3, #0
 801234c:	f000 8081 	beq.w	8012452 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8012350:	4b8c      	ldr	r3, [pc, #560]	; (8012584 <HAL_RCC_OscConfig+0x770>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	4a8b      	ldr	r2, [pc, #556]	; (8012584 <HAL_RCC_OscConfig+0x770>)
 8012356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801235a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801235c:	f7f9 fd72 	bl	800be44 <HAL_GetTick>
 8012360:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012362:	e008      	b.n	8012376 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012364:	f7f9 fd6e 	bl	800be44 <HAL_GetTick>
 8012368:	4602      	mov	r2, r0
 801236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236c:	1ad3      	subs	r3, r2, r3
 801236e:	2b64      	cmp	r3, #100	; 0x64
 8012370:	d901      	bls.n	8012376 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8012372:	2303      	movs	r3, #3
 8012374:	e175      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012376:	4b83      	ldr	r3, [pc, #524]	; (8012584 <HAL_RCC_OscConfig+0x770>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801237e:	2b00      	cmp	r3, #0
 8012380:	d0f0      	beq.n	8012364 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	689b      	ldr	r3, [r3, #8]
 8012386:	2b01      	cmp	r3, #1
 8012388:	d106      	bne.n	8012398 <HAL_RCC_OscConfig+0x584>
 801238a:	4b7d      	ldr	r3, [pc, #500]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 801238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801238e:	4a7c      	ldr	r2, [pc, #496]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012390:	f043 0301 	orr.w	r3, r3, #1
 8012394:	6713      	str	r3, [r2, #112]	; 0x70
 8012396:	e02d      	b.n	80123f4 <HAL_RCC_OscConfig+0x5e0>
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	689b      	ldr	r3, [r3, #8]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d10c      	bne.n	80123ba <HAL_RCC_OscConfig+0x5a6>
 80123a0:	4b77      	ldr	r3, [pc, #476]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80123a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123a4:	4a76      	ldr	r2, [pc, #472]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80123a6:	f023 0301 	bic.w	r3, r3, #1
 80123aa:	6713      	str	r3, [r2, #112]	; 0x70
 80123ac:	4b74      	ldr	r3, [pc, #464]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80123ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123b0:	4a73      	ldr	r2, [pc, #460]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80123b2:	f023 0304 	bic.w	r3, r3, #4
 80123b6:	6713      	str	r3, [r2, #112]	; 0x70
 80123b8:	e01c      	b.n	80123f4 <HAL_RCC_OscConfig+0x5e0>
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	689b      	ldr	r3, [r3, #8]
 80123be:	2b05      	cmp	r3, #5
 80123c0:	d10c      	bne.n	80123dc <HAL_RCC_OscConfig+0x5c8>
 80123c2:	4b6f      	ldr	r3, [pc, #444]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80123c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123c6:	4a6e      	ldr	r2, [pc, #440]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80123c8:	f043 0304 	orr.w	r3, r3, #4
 80123cc:	6713      	str	r3, [r2, #112]	; 0x70
 80123ce:	4b6c      	ldr	r3, [pc, #432]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80123d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123d2:	4a6b      	ldr	r2, [pc, #428]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80123d4:	f043 0301 	orr.w	r3, r3, #1
 80123d8:	6713      	str	r3, [r2, #112]	; 0x70
 80123da:	e00b      	b.n	80123f4 <HAL_RCC_OscConfig+0x5e0>
 80123dc:	4b68      	ldr	r3, [pc, #416]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80123de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123e0:	4a67      	ldr	r2, [pc, #412]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80123e2:	f023 0301 	bic.w	r3, r3, #1
 80123e6:	6713      	str	r3, [r2, #112]	; 0x70
 80123e8:	4b65      	ldr	r3, [pc, #404]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80123ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ec:	4a64      	ldr	r2, [pc, #400]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80123ee:	f023 0304 	bic.w	r3, r3, #4
 80123f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	689b      	ldr	r3, [r3, #8]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d015      	beq.n	8012428 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80123fc:	f7f9 fd22 	bl	800be44 <HAL_GetTick>
 8012400:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012402:	e00a      	b.n	801241a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012404:	f7f9 fd1e 	bl	800be44 <HAL_GetTick>
 8012408:	4602      	mov	r2, r0
 801240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012412:	4293      	cmp	r3, r2
 8012414:	d901      	bls.n	801241a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8012416:	2303      	movs	r3, #3
 8012418:	e123      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801241a:	4b59      	ldr	r3, [pc, #356]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 801241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801241e:	f003 0302 	and.w	r3, r3, #2
 8012422:	2b00      	cmp	r3, #0
 8012424:	d0ee      	beq.n	8012404 <HAL_RCC_OscConfig+0x5f0>
 8012426:	e014      	b.n	8012452 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012428:	f7f9 fd0c 	bl	800be44 <HAL_GetTick>
 801242c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801242e:	e00a      	b.n	8012446 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012430:	f7f9 fd08 	bl	800be44 <HAL_GetTick>
 8012434:	4602      	mov	r2, r0
 8012436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012438:	1ad3      	subs	r3, r2, r3
 801243a:	f241 3288 	movw	r2, #5000	; 0x1388
 801243e:	4293      	cmp	r3, r2
 8012440:	d901      	bls.n	8012446 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8012442:	2303      	movs	r3, #3
 8012444:	e10d      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8012446:	4b4e      	ldr	r3, [pc, #312]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801244a:	f003 0302 	and.w	r3, r3, #2
 801244e:	2b00      	cmp	r3, #0
 8012450:	d1ee      	bne.n	8012430 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012456:	2b00      	cmp	r3, #0
 8012458:	f000 8102 	beq.w	8012660 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801245c:	4b48      	ldr	r3, [pc, #288]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 801245e:	691b      	ldr	r3, [r3, #16]
 8012460:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012464:	2b18      	cmp	r3, #24
 8012466:	f000 80bd 	beq.w	80125e4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801246e:	2b02      	cmp	r3, #2
 8012470:	f040 809e 	bne.w	80125b0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012474:	4b42      	ldr	r3, [pc, #264]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	4a41      	ldr	r2, [pc, #260]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 801247a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801247e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012480:	f7f9 fce0 	bl	800be44 <HAL_GetTick>
 8012484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012486:	e008      	b.n	801249a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012488:	f7f9 fcdc 	bl	800be44 <HAL_GetTick>
 801248c:	4602      	mov	r2, r0
 801248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012490:	1ad3      	subs	r3, r2, r3
 8012492:	2b02      	cmp	r3, #2
 8012494:	d901      	bls.n	801249a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8012496:	2303      	movs	r3, #3
 8012498:	e0e3      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801249a:	4b39      	ldr	r3, [pc, #228]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d1f0      	bne.n	8012488 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80124a6:	4b36      	ldr	r3, [pc, #216]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80124a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80124aa:	4b37      	ldr	r3, [pc, #220]	; (8012588 <HAL_RCC_OscConfig+0x774>)
 80124ac:	4013      	ands	r3, r2
 80124ae:	687a      	ldr	r2, [r7, #4]
 80124b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80124b2:	687a      	ldr	r2, [r7, #4]
 80124b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80124b6:	0112      	lsls	r2, r2, #4
 80124b8:	430a      	orrs	r2, r1
 80124ba:	4931      	ldr	r1, [pc, #196]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80124bc:	4313      	orrs	r3, r2
 80124be:	628b      	str	r3, [r1, #40]	; 0x28
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124c4:	3b01      	subs	r3, #1
 80124c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124ce:	3b01      	subs	r3, #1
 80124d0:	025b      	lsls	r3, r3, #9
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	431a      	orrs	r2, r3
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124da:	3b01      	subs	r3, #1
 80124dc:	041b      	lsls	r3, r3, #16
 80124de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80124e2:	431a      	orrs	r2, r3
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124e8:	3b01      	subs	r3, #1
 80124ea:	061b      	lsls	r3, r3, #24
 80124ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80124f0:	4923      	ldr	r1, [pc, #140]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80124f2:	4313      	orrs	r3, r2
 80124f4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80124f6:	4b22      	ldr	r3, [pc, #136]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80124f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124fa:	4a21      	ldr	r2, [pc, #132]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 80124fc:	f023 0301 	bic.w	r3, r3, #1
 8012500:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012502:	4b1f      	ldr	r3, [pc, #124]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012506:	4b21      	ldr	r3, [pc, #132]	; (801258c <HAL_RCC_OscConfig+0x778>)
 8012508:	4013      	ands	r3, r2
 801250a:	687a      	ldr	r2, [r7, #4]
 801250c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801250e:	00d2      	lsls	r2, r2, #3
 8012510:	491b      	ldr	r1, [pc, #108]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012512:	4313      	orrs	r3, r2
 8012514:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8012516:	4b1a      	ldr	r3, [pc, #104]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801251a:	f023 020c 	bic.w	r2, r3, #12
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012522:	4917      	ldr	r1, [pc, #92]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012524:	4313      	orrs	r3, r2
 8012526:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8012528:	4b15      	ldr	r3, [pc, #84]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 801252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801252c:	f023 0202 	bic.w	r2, r3, #2
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012534:	4912      	ldr	r1, [pc, #72]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012536:	4313      	orrs	r3, r2
 8012538:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801253a:	4b11      	ldr	r3, [pc, #68]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 801253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801253e:	4a10      	ldr	r2, [pc, #64]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012544:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012546:	4b0e      	ldr	r3, [pc, #56]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801254a:	4a0d      	ldr	r2, [pc, #52]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 801254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012550:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8012552:	4b0b      	ldr	r3, [pc, #44]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012556:	4a0a      	ldr	r2, [pc, #40]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801255c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 801255e:	4b08      	ldr	r3, [pc, #32]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012562:	4a07      	ldr	r2, [pc, #28]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012564:	f043 0301 	orr.w	r3, r3, #1
 8012568:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801256a:	4b05      	ldr	r3, [pc, #20]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	4a04      	ldr	r2, [pc, #16]	; (8012580 <HAL_RCC_OscConfig+0x76c>)
 8012570:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012576:	f7f9 fc65 	bl	800be44 <HAL_GetTick>
 801257a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801257c:	e011      	b.n	80125a2 <HAL_RCC_OscConfig+0x78e>
 801257e:	bf00      	nop
 8012580:	58024400 	.word	0x58024400
 8012584:	58024800 	.word	0x58024800
 8012588:	fffffc0c 	.word	0xfffffc0c
 801258c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012590:	f7f9 fc58 	bl	800be44 <HAL_GetTick>
 8012594:	4602      	mov	r2, r0
 8012596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012598:	1ad3      	subs	r3, r2, r3
 801259a:	2b02      	cmp	r3, #2
 801259c:	d901      	bls.n	80125a2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801259e:	2303      	movs	r3, #3
 80125a0:	e05f      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80125a2:	4b32      	ldr	r3, [pc, #200]	; (801266c <HAL_RCC_OscConfig+0x858>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d0f0      	beq.n	8012590 <HAL_RCC_OscConfig+0x77c>
 80125ae:	e057      	b.n	8012660 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80125b0:	4b2e      	ldr	r3, [pc, #184]	; (801266c <HAL_RCC_OscConfig+0x858>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	4a2d      	ldr	r2, [pc, #180]	; (801266c <HAL_RCC_OscConfig+0x858>)
 80125b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80125ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80125bc:	f7f9 fc42 	bl	800be44 <HAL_GetTick>
 80125c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80125c2:	e008      	b.n	80125d6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80125c4:	f7f9 fc3e 	bl	800be44 <HAL_GetTick>
 80125c8:	4602      	mov	r2, r0
 80125ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125cc:	1ad3      	subs	r3, r2, r3
 80125ce:	2b02      	cmp	r3, #2
 80125d0:	d901      	bls.n	80125d6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80125d2:	2303      	movs	r3, #3
 80125d4:	e045      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80125d6:	4b25      	ldr	r3, [pc, #148]	; (801266c <HAL_RCC_OscConfig+0x858>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1f0      	bne.n	80125c4 <HAL_RCC_OscConfig+0x7b0>
 80125e2:	e03d      	b.n	8012660 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80125e4:	4b21      	ldr	r3, [pc, #132]	; (801266c <HAL_RCC_OscConfig+0x858>)
 80125e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80125ea:	4b20      	ldr	r3, [pc, #128]	; (801266c <HAL_RCC_OscConfig+0x858>)
 80125ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125ee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	d031      	beq.n	801265c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80125f8:	693b      	ldr	r3, [r7, #16]
 80125fa:	f003 0203 	and.w	r2, r3, #3
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012602:	429a      	cmp	r2, r3
 8012604:	d12a      	bne.n	801265c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	091b      	lsrs	r3, r3, #4
 801260a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012612:	429a      	cmp	r2, r3
 8012614:	d122      	bne.n	801265c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012620:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012622:	429a      	cmp	r2, r3
 8012624:	d11a      	bne.n	801265c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	0a5b      	lsrs	r3, r3, #9
 801262a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012632:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012634:	429a      	cmp	r2, r3
 8012636:	d111      	bne.n	801265c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	0c1b      	lsrs	r3, r3, #16
 801263c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012644:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012646:	429a      	cmp	r2, r3
 8012648:	d108      	bne.n	801265c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	0e1b      	lsrs	r3, r3, #24
 801264e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012656:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012658:	429a      	cmp	r2, r3
 801265a:	d001      	beq.n	8012660 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801265c:	2301      	movs	r3, #1
 801265e:	e000      	b.n	8012662 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8012660:	2300      	movs	r3, #0
}
 8012662:	4618      	mov	r0, r3
 8012664:	3730      	adds	r7, #48	; 0x30
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}
 801266a:	bf00      	nop
 801266c:	58024400 	.word	0x58024400

08012670 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b086      	sub	sp, #24
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d101      	bne.n	8012684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012680:	2301      	movs	r3, #1
 8012682:	e19c      	b.n	80129be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012684:	4b8a      	ldr	r3, [pc, #552]	; (80128b0 <HAL_RCC_ClockConfig+0x240>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	f003 030f 	and.w	r3, r3, #15
 801268c:	683a      	ldr	r2, [r7, #0]
 801268e:	429a      	cmp	r2, r3
 8012690:	d910      	bls.n	80126b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012692:	4b87      	ldr	r3, [pc, #540]	; (80128b0 <HAL_RCC_ClockConfig+0x240>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	f023 020f 	bic.w	r2, r3, #15
 801269a:	4985      	ldr	r1, [pc, #532]	; (80128b0 <HAL_RCC_ClockConfig+0x240>)
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	4313      	orrs	r3, r2
 80126a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80126a2:	4b83      	ldr	r3, [pc, #524]	; (80128b0 <HAL_RCC_ClockConfig+0x240>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f003 030f 	and.w	r3, r3, #15
 80126aa:	683a      	ldr	r2, [r7, #0]
 80126ac:	429a      	cmp	r2, r3
 80126ae:	d001      	beq.n	80126b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80126b0:	2301      	movs	r3, #1
 80126b2:	e184      	b.n	80129be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	f003 0304 	and.w	r3, r3, #4
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d010      	beq.n	80126e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	691a      	ldr	r2, [r3, #16]
 80126c4:	4b7b      	ldr	r3, [pc, #492]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 80126c6:	699b      	ldr	r3, [r3, #24]
 80126c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d908      	bls.n	80126e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80126d0:	4b78      	ldr	r3, [pc, #480]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 80126d2:	699b      	ldr	r3, [r3, #24]
 80126d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	691b      	ldr	r3, [r3, #16]
 80126dc:	4975      	ldr	r1, [pc, #468]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 80126de:	4313      	orrs	r3, r2
 80126e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	f003 0308 	and.w	r3, r3, #8
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d010      	beq.n	8012710 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	695a      	ldr	r2, [r3, #20]
 80126f2:	4b70      	ldr	r3, [pc, #448]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 80126f4:	69db      	ldr	r3, [r3, #28]
 80126f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d908      	bls.n	8012710 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80126fe:	4b6d      	ldr	r3, [pc, #436]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 8012700:	69db      	ldr	r3, [r3, #28]
 8012702:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	695b      	ldr	r3, [r3, #20]
 801270a:	496a      	ldr	r1, [pc, #424]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 801270c:	4313      	orrs	r3, r2
 801270e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	f003 0310 	and.w	r3, r3, #16
 8012718:	2b00      	cmp	r3, #0
 801271a:	d010      	beq.n	801273e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	699a      	ldr	r2, [r3, #24]
 8012720:	4b64      	ldr	r3, [pc, #400]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 8012722:	69db      	ldr	r3, [r3, #28]
 8012724:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012728:	429a      	cmp	r2, r3
 801272a:	d908      	bls.n	801273e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801272c:	4b61      	ldr	r3, [pc, #388]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 801272e:	69db      	ldr	r3, [r3, #28]
 8012730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	699b      	ldr	r3, [r3, #24]
 8012738:	495e      	ldr	r1, [pc, #376]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 801273a:	4313      	orrs	r3, r2
 801273c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f003 0320 	and.w	r3, r3, #32
 8012746:	2b00      	cmp	r3, #0
 8012748:	d010      	beq.n	801276c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	69da      	ldr	r2, [r3, #28]
 801274e:	4b59      	ldr	r3, [pc, #356]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 8012750:	6a1b      	ldr	r3, [r3, #32]
 8012752:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012756:	429a      	cmp	r2, r3
 8012758:	d908      	bls.n	801276c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801275a:	4b56      	ldr	r3, [pc, #344]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 801275c:	6a1b      	ldr	r3, [r3, #32]
 801275e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	69db      	ldr	r3, [r3, #28]
 8012766:	4953      	ldr	r1, [pc, #332]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 8012768:	4313      	orrs	r3, r2
 801276a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	f003 0302 	and.w	r3, r3, #2
 8012774:	2b00      	cmp	r3, #0
 8012776:	d010      	beq.n	801279a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	68da      	ldr	r2, [r3, #12]
 801277c:	4b4d      	ldr	r3, [pc, #308]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 801277e:	699b      	ldr	r3, [r3, #24]
 8012780:	f003 030f 	and.w	r3, r3, #15
 8012784:	429a      	cmp	r2, r3
 8012786:	d908      	bls.n	801279a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012788:	4b4a      	ldr	r3, [pc, #296]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 801278a:	699b      	ldr	r3, [r3, #24]
 801278c:	f023 020f 	bic.w	r2, r3, #15
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	68db      	ldr	r3, [r3, #12]
 8012794:	4947      	ldr	r1, [pc, #284]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 8012796:	4313      	orrs	r3, r2
 8012798:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	f003 0301 	and.w	r3, r3, #1
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d055      	beq.n	8012852 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80127a6:	4b43      	ldr	r3, [pc, #268]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 80127a8:	699b      	ldr	r3, [r3, #24]
 80127aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	689b      	ldr	r3, [r3, #8]
 80127b2:	4940      	ldr	r1, [pc, #256]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 80127b4:	4313      	orrs	r3, r2
 80127b6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	2b02      	cmp	r3, #2
 80127be:	d107      	bne.n	80127d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80127c0:	4b3c      	ldr	r3, [pc, #240]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d121      	bne.n	8012810 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80127cc:	2301      	movs	r3, #1
 80127ce:	e0f6      	b.n	80129be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	685b      	ldr	r3, [r3, #4]
 80127d4:	2b03      	cmp	r3, #3
 80127d6:	d107      	bne.n	80127e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80127d8:	4b36      	ldr	r3, [pc, #216]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d115      	bne.n	8012810 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80127e4:	2301      	movs	r3, #1
 80127e6:	e0ea      	b.n	80129be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	2b01      	cmp	r3, #1
 80127ee:	d107      	bne.n	8012800 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80127f0:	4b30      	ldr	r3, [pc, #192]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d109      	bne.n	8012810 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80127fc:	2301      	movs	r3, #1
 80127fe:	e0de      	b.n	80129be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012800:	4b2c      	ldr	r3, [pc, #176]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	f003 0304 	and.w	r3, r3, #4
 8012808:	2b00      	cmp	r3, #0
 801280a:	d101      	bne.n	8012810 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801280c:	2301      	movs	r3, #1
 801280e:	e0d6      	b.n	80129be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012810:	4b28      	ldr	r3, [pc, #160]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	f023 0207 	bic.w	r2, r3, #7
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	685b      	ldr	r3, [r3, #4]
 801281c:	4925      	ldr	r1, [pc, #148]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 801281e:	4313      	orrs	r3, r2
 8012820:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012822:	f7f9 fb0f 	bl	800be44 <HAL_GetTick>
 8012826:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012828:	e00a      	b.n	8012840 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801282a:	f7f9 fb0b 	bl	800be44 <HAL_GetTick>
 801282e:	4602      	mov	r2, r0
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	1ad3      	subs	r3, r2, r3
 8012834:	f241 3288 	movw	r2, #5000	; 0x1388
 8012838:	4293      	cmp	r3, r2
 801283a:	d901      	bls.n	8012840 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 801283c:	2303      	movs	r3, #3
 801283e:	e0be      	b.n	80129be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012840:	4b1c      	ldr	r3, [pc, #112]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 8012842:	691b      	ldr	r3, [r3, #16]
 8012844:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	00db      	lsls	r3, r3, #3
 801284e:	429a      	cmp	r2, r3
 8012850:	d1eb      	bne.n	801282a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	f003 0302 	and.w	r3, r3, #2
 801285a:	2b00      	cmp	r3, #0
 801285c:	d010      	beq.n	8012880 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	68da      	ldr	r2, [r3, #12]
 8012862:	4b14      	ldr	r3, [pc, #80]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 8012864:	699b      	ldr	r3, [r3, #24]
 8012866:	f003 030f 	and.w	r3, r3, #15
 801286a:	429a      	cmp	r2, r3
 801286c:	d208      	bcs.n	8012880 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801286e:	4b11      	ldr	r3, [pc, #68]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 8012870:	699b      	ldr	r3, [r3, #24]
 8012872:	f023 020f 	bic.w	r2, r3, #15
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	68db      	ldr	r3, [r3, #12]
 801287a:	490e      	ldr	r1, [pc, #56]	; (80128b4 <HAL_RCC_ClockConfig+0x244>)
 801287c:	4313      	orrs	r3, r2
 801287e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012880:	4b0b      	ldr	r3, [pc, #44]	; (80128b0 <HAL_RCC_ClockConfig+0x240>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	f003 030f 	and.w	r3, r3, #15
 8012888:	683a      	ldr	r2, [r7, #0]
 801288a:	429a      	cmp	r2, r3
 801288c:	d214      	bcs.n	80128b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801288e:	4b08      	ldr	r3, [pc, #32]	; (80128b0 <HAL_RCC_ClockConfig+0x240>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	f023 020f 	bic.w	r2, r3, #15
 8012896:	4906      	ldr	r1, [pc, #24]	; (80128b0 <HAL_RCC_ClockConfig+0x240>)
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	4313      	orrs	r3, r2
 801289c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801289e:	4b04      	ldr	r3, [pc, #16]	; (80128b0 <HAL_RCC_ClockConfig+0x240>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	f003 030f 	and.w	r3, r3, #15
 80128a6:	683a      	ldr	r2, [r7, #0]
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d005      	beq.n	80128b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80128ac:	2301      	movs	r3, #1
 80128ae:	e086      	b.n	80129be <HAL_RCC_ClockConfig+0x34e>
 80128b0:	52002000 	.word	0x52002000
 80128b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	f003 0304 	and.w	r3, r3, #4
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d010      	beq.n	80128e6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	691a      	ldr	r2, [r3, #16]
 80128c8:	4b3f      	ldr	r3, [pc, #252]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 80128ca:	699b      	ldr	r3, [r3, #24]
 80128cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d208      	bcs.n	80128e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80128d4:	4b3c      	ldr	r3, [pc, #240]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 80128d6:	699b      	ldr	r3, [r3, #24]
 80128d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	691b      	ldr	r3, [r3, #16]
 80128e0:	4939      	ldr	r1, [pc, #228]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 80128e2:	4313      	orrs	r3, r2
 80128e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	f003 0308 	and.w	r3, r3, #8
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d010      	beq.n	8012914 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	695a      	ldr	r2, [r3, #20]
 80128f6:	4b34      	ldr	r3, [pc, #208]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 80128f8:	69db      	ldr	r3, [r3, #28]
 80128fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80128fe:	429a      	cmp	r2, r3
 8012900:	d208      	bcs.n	8012914 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8012902:	4b31      	ldr	r3, [pc, #196]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 8012904:	69db      	ldr	r3, [r3, #28]
 8012906:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	695b      	ldr	r3, [r3, #20]
 801290e:	492e      	ldr	r1, [pc, #184]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 8012910:	4313      	orrs	r3, r2
 8012912:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	f003 0310 	and.w	r3, r3, #16
 801291c:	2b00      	cmp	r3, #0
 801291e:	d010      	beq.n	8012942 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	699a      	ldr	r2, [r3, #24]
 8012924:	4b28      	ldr	r3, [pc, #160]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 8012926:	69db      	ldr	r3, [r3, #28]
 8012928:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801292c:	429a      	cmp	r2, r3
 801292e:	d208      	bcs.n	8012942 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8012930:	4b25      	ldr	r3, [pc, #148]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 8012932:	69db      	ldr	r3, [r3, #28]
 8012934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	699b      	ldr	r3, [r3, #24]
 801293c:	4922      	ldr	r1, [pc, #136]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 801293e:	4313      	orrs	r3, r2
 8012940:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	f003 0320 	and.w	r3, r3, #32
 801294a:	2b00      	cmp	r3, #0
 801294c:	d010      	beq.n	8012970 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	69da      	ldr	r2, [r3, #28]
 8012952:	4b1d      	ldr	r3, [pc, #116]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 8012954:	6a1b      	ldr	r3, [r3, #32]
 8012956:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801295a:	429a      	cmp	r2, r3
 801295c:	d208      	bcs.n	8012970 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801295e:	4b1a      	ldr	r3, [pc, #104]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 8012960:	6a1b      	ldr	r3, [r3, #32]
 8012962:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	69db      	ldr	r3, [r3, #28]
 801296a:	4917      	ldr	r1, [pc, #92]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 801296c:	4313      	orrs	r3, r2
 801296e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012970:	f000 f834 	bl	80129dc <HAL_RCC_GetSysClockFreq>
 8012974:	4602      	mov	r2, r0
 8012976:	4b14      	ldr	r3, [pc, #80]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 8012978:	699b      	ldr	r3, [r3, #24]
 801297a:	0a1b      	lsrs	r3, r3, #8
 801297c:	f003 030f 	and.w	r3, r3, #15
 8012980:	4912      	ldr	r1, [pc, #72]	; (80129cc <HAL_RCC_ClockConfig+0x35c>)
 8012982:	5ccb      	ldrb	r3, [r1, r3]
 8012984:	f003 031f 	and.w	r3, r3, #31
 8012988:	fa22 f303 	lsr.w	r3, r2, r3
 801298c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801298e:	4b0e      	ldr	r3, [pc, #56]	; (80129c8 <HAL_RCC_ClockConfig+0x358>)
 8012990:	699b      	ldr	r3, [r3, #24]
 8012992:	f003 030f 	and.w	r3, r3, #15
 8012996:	4a0d      	ldr	r2, [pc, #52]	; (80129cc <HAL_RCC_ClockConfig+0x35c>)
 8012998:	5cd3      	ldrb	r3, [r2, r3]
 801299a:	f003 031f 	and.w	r3, r3, #31
 801299e:	693a      	ldr	r2, [r7, #16]
 80129a0:	fa22 f303 	lsr.w	r3, r2, r3
 80129a4:	4a0a      	ldr	r2, [pc, #40]	; (80129d0 <HAL_RCC_ClockConfig+0x360>)
 80129a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80129a8:	4a0a      	ldr	r2, [pc, #40]	; (80129d4 <HAL_RCC_ClockConfig+0x364>)
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80129ae:	4b0a      	ldr	r3, [pc, #40]	; (80129d8 <HAL_RCC_ClockConfig+0x368>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7f9 f9fc 	bl	800bdb0 <HAL_InitTick>
 80129b8:	4603      	mov	r3, r0
 80129ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80129bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3718      	adds	r7, #24
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	58024400 	.word	0x58024400
 80129cc:	08038e94 	.word	0x08038e94
 80129d0:	24000004 	.word	0x24000004
 80129d4:	24000000 	.word	0x24000000
 80129d8:	24000008 	.word	0x24000008

080129dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80129dc:	b480      	push	{r7}
 80129de:	b089      	sub	sp, #36	; 0x24
 80129e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80129e2:	4bb3      	ldr	r3, [pc, #716]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80129e4:	691b      	ldr	r3, [r3, #16]
 80129e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80129ea:	2b18      	cmp	r3, #24
 80129ec:	f200 8155 	bhi.w	8012c9a <HAL_RCC_GetSysClockFreq+0x2be>
 80129f0:	a201      	add	r2, pc, #4	; (adr r2, 80129f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80129f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129f6:	bf00      	nop
 80129f8:	08012a5d 	.word	0x08012a5d
 80129fc:	08012c9b 	.word	0x08012c9b
 8012a00:	08012c9b 	.word	0x08012c9b
 8012a04:	08012c9b 	.word	0x08012c9b
 8012a08:	08012c9b 	.word	0x08012c9b
 8012a0c:	08012c9b 	.word	0x08012c9b
 8012a10:	08012c9b 	.word	0x08012c9b
 8012a14:	08012c9b 	.word	0x08012c9b
 8012a18:	08012a83 	.word	0x08012a83
 8012a1c:	08012c9b 	.word	0x08012c9b
 8012a20:	08012c9b 	.word	0x08012c9b
 8012a24:	08012c9b 	.word	0x08012c9b
 8012a28:	08012c9b 	.word	0x08012c9b
 8012a2c:	08012c9b 	.word	0x08012c9b
 8012a30:	08012c9b 	.word	0x08012c9b
 8012a34:	08012c9b 	.word	0x08012c9b
 8012a38:	08012a89 	.word	0x08012a89
 8012a3c:	08012c9b 	.word	0x08012c9b
 8012a40:	08012c9b 	.word	0x08012c9b
 8012a44:	08012c9b 	.word	0x08012c9b
 8012a48:	08012c9b 	.word	0x08012c9b
 8012a4c:	08012c9b 	.word	0x08012c9b
 8012a50:	08012c9b 	.word	0x08012c9b
 8012a54:	08012c9b 	.word	0x08012c9b
 8012a58:	08012a8f 	.word	0x08012a8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012a5c:	4b94      	ldr	r3, [pc, #592]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	f003 0320 	and.w	r3, r3, #32
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d009      	beq.n	8012a7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012a68:	4b91      	ldr	r3, [pc, #580]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	08db      	lsrs	r3, r3, #3
 8012a6e:	f003 0303 	and.w	r3, r3, #3
 8012a72:	4a90      	ldr	r2, [pc, #576]	; (8012cb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012a74:	fa22 f303 	lsr.w	r3, r2, r3
 8012a78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8012a7a:	e111      	b.n	8012ca0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8012a7c:	4b8d      	ldr	r3, [pc, #564]	; (8012cb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012a7e:	61bb      	str	r3, [r7, #24]
    break;
 8012a80:	e10e      	b.n	8012ca0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8012a82:	4b8d      	ldr	r3, [pc, #564]	; (8012cb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012a84:	61bb      	str	r3, [r7, #24]
    break;
 8012a86:	e10b      	b.n	8012ca0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8012a88:	4b8c      	ldr	r3, [pc, #560]	; (8012cbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8012a8a:	61bb      	str	r3, [r7, #24]
    break;
 8012a8c:	e108      	b.n	8012ca0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012a8e:	4b88      	ldr	r3, [pc, #544]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a92:	f003 0303 	and.w	r3, r3, #3
 8012a96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8012a98:	4b85      	ldr	r3, [pc, #532]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a9c:	091b      	lsrs	r3, r3, #4
 8012a9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012aa2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8012aa4:	4b82      	ldr	r3, [pc, #520]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aa8:	f003 0301 	and.w	r3, r3, #1
 8012aac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012aae:	4b80      	ldr	r3, [pc, #512]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ab2:	08db      	lsrs	r3, r3, #3
 8012ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012ab8:	68fa      	ldr	r2, [r7, #12]
 8012aba:	fb02 f303 	mul.w	r3, r2, r3
 8012abe:	ee07 3a90 	vmov	s15, r3
 8012ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ac6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	f000 80e1 	beq.w	8012c94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	2b02      	cmp	r3, #2
 8012ad6:	f000 8083 	beq.w	8012be0 <HAL_RCC_GetSysClockFreq+0x204>
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	2b02      	cmp	r3, #2
 8012ade:	f200 80a1 	bhi.w	8012c24 <HAL_RCC_GetSysClockFreq+0x248>
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d003      	beq.n	8012af0 <HAL_RCC_GetSysClockFreq+0x114>
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	2b01      	cmp	r3, #1
 8012aec:	d056      	beq.n	8012b9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8012aee:	e099      	b.n	8012c24 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012af0:	4b6f      	ldr	r3, [pc, #444]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	f003 0320 	and.w	r3, r3, #32
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d02d      	beq.n	8012b58 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012afc:	4b6c      	ldr	r3, [pc, #432]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	08db      	lsrs	r3, r3, #3
 8012b02:	f003 0303 	and.w	r3, r3, #3
 8012b06:	4a6b      	ldr	r2, [pc, #428]	; (8012cb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012b08:	fa22 f303 	lsr.w	r3, r2, r3
 8012b0c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	ee07 3a90 	vmov	s15, r3
 8012b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	ee07 3a90 	vmov	s15, r3
 8012b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012b26:	4b62      	ldr	r3, [pc, #392]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b2e:	ee07 3a90 	vmov	s15, r3
 8012b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8012b3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8012cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8012b56:	e087      	b.n	8012c68 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	ee07 3a90 	vmov	s15, r3
 8012b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b62:	eddf 6a58 	vldr	s13, [pc, #352]	; 8012cc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8012b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012b6a:	4b51      	ldr	r3, [pc, #324]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b72:	ee07 3a90 	vmov	s15, r3
 8012b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8012b7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8012cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012b9a:	e065      	b.n	8012c68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	ee07 3a90 	vmov	s15, r3
 8012ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ba6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8012cc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8012baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012bae:	4b40      	ldr	r3, [pc, #256]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bb6:	ee07 3a90 	vmov	s15, r3
 8012bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8012bc2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8012cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012bde:	e043      	b.n	8012c68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	ee07 3a90 	vmov	s15, r3
 8012be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012bea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8012ccc <HAL_RCC_GetSysClockFreq+0x2f0>
 8012bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012bf2:	4b2f      	ldr	r3, [pc, #188]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bfa:	ee07 3a90 	vmov	s15, r3
 8012bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8012c06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8012cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012c22:	e021      	b.n	8012c68 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	ee07 3a90 	vmov	s15, r3
 8012c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8012cc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8012c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c36:	4b1e      	ldr	r3, [pc, #120]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c3e:	ee07 3a90 	vmov	s15, r3
 8012c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8012c4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8012cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012c66:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8012c68:	4b11      	ldr	r3, [pc, #68]	; (8012cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c6c:	0a5b      	lsrs	r3, r3, #9
 8012c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c72:	3301      	adds	r3, #1
 8012c74:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	ee07 3a90 	vmov	s15, r3
 8012c7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8012c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012c8c:	ee17 3a90 	vmov	r3, s15
 8012c90:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8012c92:	e005      	b.n	8012ca0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8012c94:	2300      	movs	r3, #0
 8012c96:	61bb      	str	r3, [r7, #24]
    break;
 8012c98:	e002      	b.n	8012ca0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8012c9a:	4b07      	ldr	r3, [pc, #28]	; (8012cb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012c9c:	61bb      	str	r3, [r7, #24]
    break;
 8012c9e:	bf00      	nop
  }

  return sysclockfreq;
 8012ca0:	69bb      	ldr	r3, [r7, #24]
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3724      	adds	r7, #36	; 0x24
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cac:	4770      	bx	lr
 8012cae:	bf00      	nop
 8012cb0:	58024400 	.word	0x58024400
 8012cb4:	03d09000 	.word	0x03d09000
 8012cb8:	003d0900 	.word	0x003d0900
 8012cbc:	017d7840 	.word	0x017d7840
 8012cc0:	46000000 	.word	0x46000000
 8012cc4:	4c742400 	.word	0x4c742400
 8012cc8:	4a742400 	.word	0x4a742400
 8012ccc:	4bbebc20 	.word	0x4bbebc20

08012cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b082      	sub	sp, #8
 8012cd4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012cd6:	f7ff fe81 	bl	80129dc <HAL_RCC_GetSysClockFreq>
 8012cda:	4602      	mov	r2, r0
 8012cdc:	4b10      	ldr	r3, [pc, #64]	; (8012d20 <HAL_RCC_GetHCLKFreq+0x50>)
 8012cde:	699b      	ldr	r3, [r3, #24]
 8012ce0:	0a1b      	lsrs	r3, r3, #8
 8012ce2:	f003 030f 	and.w	r3, r3, #15
 8012ce6:	490f      	ldr	r1, [pc, #60]	; (8012d24 <HAL_RCC_GetHCLKFreq+0x54>)
 8012ce8:	5ccb      	ldrb	r3, [r1, r3]
 8012cea:	f003 031f 	and.w	r3, r3, #31
 8012cee:	fa22 f303 	lsr.w	r3, r2, r3
 8012cf2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012cf4:	4b0a      	ldr	r3, [pc, #40]	; (8012d20 <HAL_RCC_GetHCLKFreq+0x50>)
 8012cf6:	699b      	ldr	r3, [r3, #24]
 8012cf8:	f003 030f 	and.w	r3, r3, #15
 8012cfc:	4a09      	ldr	r2, [pc, #36]	; (8012d24 <HAL_RCC_GetHCLKFreq+0x54>)
 8012cfe:	5cd3      	ldrb	r3, [r2, r3]
 8012d00:	f003 031f 	and.w	r3, r3, #31
 8012d04:	687a      	ldr	r2, [r7, #4]
 8012d06:	fa22 f303 	lsr.w	r3, r2, r3
 8012d0a:	4a07      	ldr	r2, [pc, #28]	; (8012d28 <HAL_RCC_GetHCLKFreq+0x58>)
 8012d0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012d0e:	4a07      	ldr	r2, [pc, #28]	; (8012d2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012d14:	4b04      	ldr	r3, [pc, #16]	; (8012d28 <HAL_RCC_GetHCLKFreq+0x58>)
 8012d16:	681b      	ldr	r3, [r3, #0]
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3708      	adds	r7, #8
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}
 8012d20:	58024400 	.word	0x58024400
 8012d24:	08038e94 	.word	0x08038e94
 8012d28:	24000004 	.word	0x24000004
 8012d2c:	24000000 	.word	0x24000000

08012d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8012d34:	f7ff ffcc 	bl	8012cd0 <HAL_RCC_GetHCLKFreq>
 8012d38:	4602      	mov	r2, r0
 8012d3a:	4b06      	ldr	r3, [pc, #24]	; (8012d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012d3c:	69db      	ldr	r3, [r3, #28]
 8012d3e:	091b      	lsrs	r3, r3, #4
 8012d40:	f003 0307 	and.w	r3, r3, #7
 8012d44:	4904      	ldr	r1, [pc, #16]	; (8012d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012d46:	5ccb      	ldrb	r3, [r1, r3]
 8012d48:	f003 031f 	and.w	r3, r3, #31
 8012d4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8012d50:	4618      	mov	r0, r3
 8012d52:	bd80      	pop	{r7, pc}
 8012d54:	58024400 	.word	0x58024400
 8012d58:	08038e94 	.word	0x08038e94

08012d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8012d60:	f7ff ffb6 	bl	8012cd0 <HAL_RCC_GetHCLKFreq>
 8012d64:	4602      	mov	r2, r0
 8012d66:	4b06      	ldr	r3, [pc, #24]	; (8012d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012d68:	69db      	ldr	r3, [r3, #28]
 8012d6a:	0a1b      	lsrs	r3, r3, #8
 8012d6c:	f003 0307 	and.w	r3, r3, #7
 8012d70:	4904      	ldr	r1, [pc, #16]	; (8012d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012d72:	5ccb      	ldrb	r3, [r1, r3]
 8012d74:	f003 031f 	and.w	r3, r3, #31
 8012d78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	bd80      	pop	{r7, pc}
 8012d80:	58024400 	.word	0x58024400
 8012d84:	08038e94 	.word	0x08038e94

08012d88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b086      	sub	sp, #24
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012d90:	2300      	movs	r3, #0
 8012d92:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8012d94:	2300      	movs	r3, #0
 8012d96:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d03f      	beq.n	8012e24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012da8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012dac:	d02a      	beq.n	8012e04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8012dae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012db2:	d824      	bhi.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012db4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012db8:	d018      	beq.n	8012dec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012dba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012dbe:	d81e      	bhi.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d003      	beq.n	8012dcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8012dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012dc8:	d007      	beq.n	8012dda <HAL_RCCEx_PeriphCLKConfig+0x52>
 8012dca:	e018      	b.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012dcc:	4ba3      	ldr	r3, [pc, #652]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dd0:	4aa2      	ldr	r2, [pc, #648]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012dd8:	e015      	b.n	8012e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	3304      	adds	r3, #4
 8012dde:	2102      	movs	r1, #2
 8012de0:	4618      	mov	r0, r3
 8012de2:	f001 f9d5 	bl	8014190 <RCCEx_PLL2_Config>
 8012de6:	4603      	mov	r3, r0
 8012de8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012dea:	e00c      	b.n	8012e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	3324      	adds	r3, #36	; 0x24
 8012df0:	2102      	movs	r1, #2
 8012df2:	4618      	mov	r0, r3
 8012df4:	f001 fa7e 	bl	80142f4 <RCCEx_PLL3_Config>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012dfc:	e003      	b.n	8012e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012dfe:	2301      	movs	r3, #1
 8012e00:	75fb      	strb	r3, [r7, #23]
      break;
 8012e02:	e000      	b.n	8012e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8012e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012e06:	7dfb      	ldrb	r3, [r7, #23]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d109      	bne.n	8012e20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012e0c:	4b93      	ldr	r3, [pc, #588]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e18:	4990      	ldr	r1, [pc, #576]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e1a:	4313      	orrs	r3, r2
 8012e1c:	650b      	str	r3, [r1, #80]	; 0x50
 8012e1e:	e001      	b.n	8012e24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e20:	7dfb      	ldrb	r3, [r7, #23]
 8012e22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d03d      	beq.n	8012eac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e34:	2b04      	cmp	r3, #4
 8012e36:	d826      	bhi.n	8012e86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8012e38:	a201      	add	r2, pc, #4	; (adr r2, 8012e40 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8012e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e3e:	bf00      	nop
 8012e40:	08012e55 	.word	0x08012e55
 8012e44:	08012e63 	.word	0x08012e63
 8012e48:	08012e75 	.word	0x08012e75
 8012e4c:	08012e8d 	.word	0x08012e8d
 8012e50:	08012e8d 	.word	0x08012e8d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012e54:	4b81      	ldr	r3, [pc, #516]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e58:	4a80      	ldr	r2, [pc, #512]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012e60:	e015      	b.n	8012e8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	3304      	adds	r3, #4
 8012e66:	2100      	movs	r1, #0
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f001 f991 	bl	8014190 <RCCEx_PLL2_Config>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012e72:	e00c      	b.n	8012e8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	3324      	adds	r3, #36	; 0x24
 8012e78:	2100      	movs	r1, #0
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f001 fa3a 	bl	80142f4 <RCCEx_PLL3_Config>
 8012e80:	4603      	mov	r3, r0
 8012e82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012e84:	e003      	b.n	8012e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012e86:	2301      	movs	r3, #1
 8012e88:	75fb      	strb	r3, [r7, #23]
      break;
 8012e8a:	e000      	b.n	8012e8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8012e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012e8e:	7dfb      	ldrb	r3, [r7, #23]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d109      	bne.n	8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012e94:	4b71      	ldr	r3, [pc, #452]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e98:	f023 0207 	bic.w	r2, r3, #7
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ea0:	496e      	ldr	r1, [pc, #440]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012ea2:	4313      	orrs	r3, r2
 8012ea4:	650b      	str	r3, [r1, #80]	; 0x50
 8012ea6:	e001      	b.n	8012eac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ea8:	7dfb      	ldrb	r3, [r7, #23]
 8012eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d042      	beq.n	8012f3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ec0:	d02b      	beq.n	8012f1a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8012ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ec6:	d825      	bhi.n	8012f14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012ec8:	2bc0      	cmp	r3, #192	; 0xc0
 8012eca:	d028      	beq.n	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8012ecc:	2bc0      	cmp	r3, #192	; 0xc0
 8012ece:	d821      	bhi.n	8012f14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012ed0:	2b80      	cmp	r3, #128	; 0x80
 8012ed2:	d016      	beq.n	8012f02 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8012ed4:	2b80      	cmp	r3, #128	; 0x80
 8012ed6:	d81d      	bhi.n	8012f14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d002      	beq.n	8012ee2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8012edc:	2b40      	cmp	r3, #64	; 0x40
 8012ede:	d007      	beq.n	8012ef0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8012ee0:	e018      	b.n	8012f14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012ee2:	4b5e      	ldr	r3, [pc, #376]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ee6:	4a5d      	ldr	r2, [pc, #372]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012eec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012eee:	e017      	b.n	8012f20 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	3304      	adds	r3, #4
 8012ef4:	2100      	movs	r1, #0
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f001 f94a 	bl	8014190 <RCCEx_PLL2_Config>
 8012efc:	4603      	mov	r3, r0
 8012efe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012f00:	e00e      	b.n	8012f20 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	3324      	adds	r3, #36	; 0x24
 8012f06:	2100      	movs	r1, #0
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f001 f9f3 	bl	80142f4 <RCCEx_PLL3_Config>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012f12:	e005      	b.n	8012f20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012f14:	2301      	movs	r3, #1
 8012f16:	75fb      	strb	r3, [r7, #23]
      break;
 8012f18:	e002      	b.n	8012f20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8012f1a:	bf00      	nop
 8012f1c:	e000      	b.n	8012f20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8012f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012f20:	7dfb      	ldrb	r3, [r7, #23]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d109      	bne.n	8012f3a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8012f26:	4b4d      	ldr	r3, [pc, #308]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f2a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f32:	494a      	ldr	r1, [pc, #296]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012f34:	4313      	orrs	r3, r2
 8012f36:	650b      	str	r3, [r1, #80]	; 0x50
 8012f38:	e001      	b.n	8012f3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f3a:	7dfb      	ldrb	r3, [r7, #23]
 8012f3c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d049      	beq.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012f50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012f54:	d030      	beq.n	8012fb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8012f56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012f5a:	d82a      	bhi.n	8012fb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012f5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012f60:	d02c      	beq.n	8012fbc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8012f62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012f66:	d824      	bhi.n	8012fb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012f6c:	d018      	beq.n	8012fa0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8012f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012f72:	d81e      	bhi.n	8012fb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d003      	beq.n	8012f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8012f78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012f7c:	d007      	beq.n	8012f8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8012f7e:	e018      	b.n	8012fb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012f80:	4b36      	ldr	r3, [pc, #216]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f84:	4a35      	ldr	r2, [pc, #212]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012f8c:	e017      	b.n	8012fbe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	3304      	adds	r3, #4
 8012f92:	2100      	movs	r1, #0
 8012f94:	4618      	mov	r0, r3
 8012f96:	f001 f8fb 	bl	8014190 <RCCEx_PLL2_Config>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8012f9e:	e00e      	b.n	8012fbe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	3324      	adds	r3, #36	; 0x24
 8012fa4:	2100      	movs	r1, #0
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f001 f9a4 	bl	80142f4 <RCCEx_PLL3_Config>
 8012fac:	4603      	mov	r3, r0
 8012fae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012fb0:	e005      	b.n	8012fbe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8012fb6:	e002      	b.n	8012fbe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8012fb8:	bf00      	nop
 8012fba:	e000      	b.n	8012fbe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8012fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012fbe:	7dfb      	ldrb	r3, [r7, #23]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d10a      	bne.n	8012fda <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8012fc4:	4b25      	ldr	r3, [pc, #148]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fc8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012fd2:	4922      	ldr	r1, [pc, #136]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012fd4:	4313      	orrs	r3, r2
 8012fd6:	658b      	str	r3, [r1, #88]	; 0x58
 8012fd8:	e001      	b.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012fda:	7dfb      	ldrb	r3, [r7, #23]
 8012fdc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d04b      	beq.n	8013082 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012ff4:	d030      	beq.n	8013058 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8012ff6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012ffa:	d82a      	bhi.n	8013052 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8012ffc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8013000:	d02e      	beq.n	8013060 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8013002:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8013006:	d824      	bhi.n	8013052 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8013008:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801300c:	d018      	beq.n	8013040 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 801300e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013012:	d81e      	bhi.n	8013052 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8013014:	2b00      	cmp	r3, #0
 8013016:	d003      	beq.n	8013020 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8013018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801301c:	d007      	beq.n	801302e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801301e:	e018      	b.n	8013052 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013020:	4b0e      	ldr	r3, [pc, #56]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013024:	4a0d      	ldr	r2, [pc, #52]	; (801305c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8013026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801302a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801302c:	e019      	b.n	8013062 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	3304      	adds	r3, #4
 8013032:	2100      	movs	r1, #0
 8013034:	4618      	mov	r0, r3
 8013036:	f001 f8ab 	bl	8014190 <RCCEx_PLL2_Config>
 801303a:	4603      	mov	r3, r0
 801303c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801303e:	e010      	b.n	8013062 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	3324      	adds	r3, #36	; 0x24
 8013044:	2100      	movs	r1, #0
 8013046:	4618      	mov	r0, r3
 8013048:	f001 f954 	bl	80142f4 <RCCEx_PLL3_Config>
 801304c:	4603      	mov	r3, r0
 801304e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8013050:	e007      	b.n	8013062 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8013052:	2301      	movs	r3, #1
 8013054:	75fb      	strb	r3, [r7, #23]
      break;
 8013056:	e004      	b.n	8013062 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8013058:	bf00      	nop
 801305a:	e002      	b.n	8013062 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801305c:	58024400 	.word	0x58024400
      break;
 8013060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013062:	7dfb      	ldrb	r3, [r7, #23]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d10a      	bne.n	801307e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8013068:	4b99      	ldr	r3, [pc, #612]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801306c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013076:	4996      	ldr	r1, [pc, #600]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013078:	4313      	orrs	r3, r2
 801307a:	658b      	str	r3, [r1, #88]	; 0x58
 801307c:	e001      	b.n	8013082 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801307e:	7dfb      	ldrb	r3, [r7, #23]
 8013080:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801308a:	2b00      	cmp	r3, #0
 801308c:	d032      	beq.n	80130f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013092:	2b30      	cmp	r3, #48	; 0x30
 8013094:	d01c      	beq.n	80130d0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8013096:	2b30      	cmp	r3, #48	; 0x30
 8013098:	d817      	bhi.n	80130ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 801309a:	2b20      	cmp	r3, #32
 801309c:	d00c      	beq.n	80130b8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 801309e:	2b20      	cmp	r3, #32
 80130a0:	d813      	bhi.n	80130ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d016      	beq.n	80130d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80130a6:	2b10      	cmp	r3, #16
 80130a8:	d10f      	bne.n	80130ca <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80130aa:	4b89      	ldr	r3, [pc, #548]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80130ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130ae:	4a88      	ldr	r2, [pc, #544]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80130b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80130b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80130b6:	e00e      	b.n	80130d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	3304      	adds	r3, #4
 80130bc:	2102      	movs	r1, #2
 80130be:	4618      	mov	r0, r3
 80130c0:	f001 f866 	bl	8014190 <RCCEx_PLL2_Config>
 80130c4:	4603      	mov	r3, r0
 80130c6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80130c8:	e005      	b.n	80130d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80130ca:	2301      	movs	r3, #1
 80130cc:	75fb      	strb	r3, [r7, #23]
      break;
 80130ce:	e002      	b.n	80130d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80130d0:	bf00      	nop
 80130d2:	e000      	b.n	80130d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80130d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80130d6:	7dfb      	ldrb	r3, [r7, #23]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d109      	bne.n	80130f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80130dc:	4b7c      	ldr	r3, [pc, #496]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80130de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130e8:	4979      	ldr	r1, [pc, #484]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80130ea:	4313      	orrs	r3, r2
 80130ec:	64cb      	str	r3, [r1, #76]	; 0x4c
 80130ee:	e001      	b.n	80130f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130f0:	7dfb      	ldrb	r3, [r7, #23]
 80130f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d047      	beq.n	8013190 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013108:	d030      	beq.n	801316c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801310a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801310e:	d82a      	bhi.n	8013166 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8013110:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013114:	d02c      	beq.n	8013170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8013116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801311a:	d824      	bhi.n	8013166 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 801311c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013120:	d018      	beq.n	8013154 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8013122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013126:	d81e      	bhi.n	8013166 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8013128:	2b00      	cmp	r3, #0
 801312a:	d003      	beq.n	8013134 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 801312c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013130:	d007      	beq.n	8013142 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8013132:	e018      	b.n	8013166 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013134:	4b66      	ldr	r3, [pc, #408]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013138:	4a65      	ldr	r2, [pc, #404]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801313a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801313e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8013140:	e017      	b.n	8013172 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	3304      	adds	r3, #4
 8013146:	2100      	movs	r1, #0
 8013148:	4618      	mov	r0, r3
 801314a:	f001 f821 	bl	8014190 <RCCEx_PLL2_Config>
 801314e:	4603      	mov	r3, r0
 8013150:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8013152:	e00e      	b.n	8013172 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	3324      	adds	r3, #36	; 0x24
 8013158:	2100      	movs	r1, #0
 801315a:	4618      	mov	r0, r3
 801315c:	f001 f8ca 	bl	80142f4 <RCCEx_PLL3_Config>
 8013160:	4603      	mov	r3, r0
 8013162:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8013164:	e005      	b.n	8013172 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013166:	2301      	movs	r3, #1
 8013168:	75fb      	strb	r3, [r7, #23]
      break;
 801316a:	e002      	b.n	8013172 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 801316c:	bf00      	nop
 801316e:	e000      	b.n	8013172 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8013170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013172:	7dfb      	ldrb	r3, [r7, #23]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d109      	bne.n	801318c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8013178:	4b55      	ldr	r3, [pc, #340]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801317a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801317c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013184:	4952      	ldr	r1, [pc, #328]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013186:	4313      	orrs	r3, r2
 8013188:	650b      	str	r3, [r1, #80]	; 0x50
 801318a:	e001      	b.n	8013190 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801318c:	7dfb      	ldrb	r3, [r7, #23]
 801318e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013198:	2b00      	cmp	r3, #0
 801319a:	d049      	beq.n	8013230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80131a4:	d02e      	beq.n	8013204 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80131a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80131aa:	d828      	bhi.n	80131fe <HAL_RCCEx_PeriphCLKConfig+0x476>
 80131ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80131b0:	d02a      	beq.n	8013208 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80131b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80131b6:	d822      	bhi.n	80131fe <HAL_RCCEx_PeriphCLKConfig+0x476>
 80131b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80131bc:	d026      	beq.n	801320c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80131be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80131c2:	d81c      	bhi.n	80131fe <HAL_RCCEx_PeriphCLKConfig+0x476>
 80131c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80131c8:	d010      	beq.n	80131ec <HAL_RCCEx_PeriphCLKConfig+0x464>
 80131ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80131ce:	d816      	bhi.n	80131fe <HAL_RCCEx_PeriphCLKConfig+0x476>
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d01d      	beq.n	8013210 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80131d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80131d8:	d111      	bne.n	80131fe <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	3304      	adds	r3, #4
 80131de:	2101      	movs	r1, #1
 80131e0:	4618      	mov	r0, r3
 80131e2:	f000 ffd5 	bl	8014190 <RCCEx_PLL2_Config>
 80131e6:	4603      	mov	r3, r0
 80131e8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80131ea:	e012      	b.n	8013212 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	3324      	adds	r3, #36	; 0x24
 80131f0:	2101      	movs	r1, #1
 80131f2:	4618      	mov	r0, r3
 80131f4:	f001 f87e 	bl	80142f4 <RCCEx_PLL3_Config>
 80131f8:	4603      	mov	r3, r0
 80131fa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80131fc:	e009      	b.n	8013212 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80131fe:	2301      	movs	r3, #1
 8013200:	75fb      	strb	r3, [r7, #23]
      break;
 8013202:	e006      	b.n	8013212 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8013204:	bf00      	nop
 8013206:	e004      	b.n	8013212 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8013208:	bf00      	nop
 801320a:	e002      	b.n	8013212 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 801320c:	bf00      	nop
 801320e:	e000      	b.n	8013212 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8013210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013212:	7dfb      	ldrb	r3, [r7, #23]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d109      	bne.n	801322c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8013218:	4b2d      	ldr	r3, [pc, #180]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801321a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801321c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013224:	492a      	ldr	r1, [pc, #168]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013226:	4313      	orrs	r3, r2
 8013228:	650b      	str	r3, [r1, #80]	; 0x50
 801322a:	e001      	b.n	8013230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801322c:	7dfb      	ldrb	r3, [r7, #23]
 801322e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013238:	2b00      	cmp	r3, #0
 801323a:	d04d      	beq.n	80132d8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013242:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013246:	d02e      	beq.n	80132a6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8013248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801324c:	d828      	bhi.n	80132a0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 801324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013252:	d02a      	beq.n	80132aa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8013254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013258:	d822      	bhi.n	80132a0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 801325a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801325e:	d026      	beq.n	80132ae <HAL_RCCEx_PeriphCLKConfig+0x526>
 8013260:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013264:	d81c      	bhi.n	80132a0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8013266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801326a:	d010      	beq.n	801328e <HAL_RCCEx_PeriphCLKConfig+0x506>
 801326c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013270:	d816      	bhi.n	80132a0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8013272:	2b00      	cmp	r3, #0
 8013274:	d01d      	beq.n	80132b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8013276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801327a:	d111      	bne.n	80132a0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	3304      	adds	r3, #4
 8013280:	2101      	movs	r1, #1
 8013282:	4618      	mov	r0, r3
 8013284:	f000 ff84 	bl	8014190 <RCCEx_PLL2_Config>
 8013288:	4603      	mov	r3, r0
 801328a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801328c:	e012      	b.n	80132b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	3324      	adds	r3, #36	; 0x24
 8013292:	2101      	movs	r1, #1
 8013294:	4618      	mov	r0, r3
 8013296:	f001 f82d 	bl	80142f4 <RCCEx_PLL3_Config>
 801329a:	4603      	mov	r3, r0
 801329c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801329e:	e009      	b.n	80132b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80132a0:	2301      	movs	r3, #1
 80132a2:	75fb      	strb	r3, [r7, #23]
      break;
 80132a4:	e006      	b.n	80132b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80132a6:	bf00      	nop
 80132a8:	e004      	b.n	80132b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80132aa:	bf00      	nop
 80132ac:	e002      	b.n	80132b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80132ae:	bf00      	nop
 80132b0:	e000      	b.n	80132b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80132b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80132b4:	7dfb      	ldrb	r3, [r7, #23]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d10c      	bne.n	80132d4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80132ba:	4b05      	ldr	r3, [pc, #20]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80132bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80132be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80132c8:	4901      	ldr	r1, [pc, #4]	; (80132d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80132ca:	4313      	orrs	r3, r2
 80132cc:	658b      	str	r3, [r1, #88]	; 0x58
 80132ce:	e003      	b.n	80132d8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80132d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132d4:	7dfb      	ldrb	r3, [r7, #23]
 80132d6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d02f      	beq.n	8013344 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80132ec:	d00e      	beq.n	801330c <HAL_RCCEx_PeriphCLKConfig+0x584>
 80132ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80132f2:	d814      	bhi.n	801331e <HAL_RCCEx_PeriphCLKConfig+0x596>
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d015      	beq.n	8013324 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80132f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80132fc:	d10f      	bne.n	801331e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80132fe:	4baf      	ldr	r3, [pc, #700]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013302:	4aae      	ldr	r2, [pc, #696]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013308:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801330a:	e00c      	b.n	8013326 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	3304      	adds	r3, #4
 8013310:	2101      	movs	r1, #1
 8013312:	4618      	mov	r0, r3
 8013314:	f000 ff3c 	bl	8014190 <RCCEx_PLL2_Config>
 8013318:	4603      	mov	r3, r0
 801331a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801331c:	e003      	b.n	8013326 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801331e:	2301      	movs	r3, #1
 8013320:	75fb      	strb	r3, [r7, #23]
      break;
 8013322:	e000      	b.n	8013326 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8013324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013326:	7dfb      	ldrb	r3, [r7, #23]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d109      	bne.n	8013340 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801332c:	4ba3      	ldr	r3, [pc, #652]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801332e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013330:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013338:	49a0      	ldr	r1, [pc, #640]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801333a:	4313      	orrs	r3, r2
 801333c:	650b      	str	r3, [r1, #80]	; 0x50
 801333e:	e001      	b.n	8013344 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013340:	7dfb      	ldrb	r3, [r7, #23]
 8013342:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801334c:	2b00      	cmp	r3, #0
 801334e:	d032      	beq.n	80133b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013354:	2b03      	cmp	r3, #3
 8013356:	d81b      	bhi.n	8013390 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8013358:	a201      	add	r2, pc, #4	; (adr r2, 8013360 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 801335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801335e:	bf00      	nop
 8013360:	08013397 	.word	0x08013397
 8013364:	08013371 	.word	0x08013371
 8013368:	0801337f 	.word	0x0801337f
 801336c:	08013397 	.word	0x08013397
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013370:	4b92      	ldr	r3, [pc, #584]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013374:	4a91      	ldr	r2, [pc, #580]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801337a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 801337c:	e00c      	b.n	8013398 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	3304      	adds	r3, #4
 8013382:	2102      	movs	r1, #2
 8013384:	4618      	mov	r0, r3
 8013386:	f000 ff03 	bl	8014190 <RCCEx_PLL2_Config>
 801338a:	4603      	mov	r3, r0
 801338c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 801338e:	e003      	b.n	8013398 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8013390:	2301      	movs	r3, #1
 8013392:	75fb      	strb	r3, [r7, #23]
      break;
 8013394:	e000      	b.n	8013398 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8013396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013398:	7dfb      	ldrb	r3, [r7, #23]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d109      	bne.n	80133b2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801339e:	4b87      	ldr	r3, [pc, #540]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80133a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133a2:	f023 0203 	bic.w	r2, r3, #3
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133aa:	4984      	ldr	r1, [pc, #528]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80133ac:	4313      	orrs	r3, r2
 80133ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80133b0:	e001      	b.n	80133b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80133b2:	7dfb      	ldrb	r3, [r7, #23]
 80133b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80133be:	2b00      	cmp	r3, #0
 80133c0:	f000 8086 	beq.w	80134d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80133c4:	4b7e      	ldr	r3, [pc, #504]	; (80135c0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	4a7d      	ldr	r2, [pc, #500]	; (80135c0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80133ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80133ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80133d0:	f7f8 fd38 	bl	800be44 <HAL_GetTick>
 80133d4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80133d6:	e009      	b.n	80133ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80133d8:	f7f8 fd34 	bl	800be44 <HAL_GetTick>
 80133dc:	4602      	mov	r2, r0
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	1ad3      	subs	r3, r2, r3
 80133e2:	2b64      	cmp	r3, #100	; 0x64
 80133e4:	d902      	bls.n	80133ec <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80133e6:	2303      	movs	r3, #3
 80133e8:	75fb      	strb	r3, [r7, #23]
        break;
 80133ea:	e005      	b.n	80133f8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80133ec:	4b74      	ldr	r3, [pc, #464]	; (80135c0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d0ef      	beq.n	80133d8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80133f8:	7dfb      	ldrb	r3, [r7, #23]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d166      	bne.n	80134cc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80133fe:	4b6f      	ldr	r3, [pc, #444]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013400:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013408:	4053      	eors	r3, r2
 801340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801340e:	2b00      	cmp	r3, #0
 8013410:	d013      	beq.n	801343a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013412:	4b6a      	ldr	r3, [pc, #424]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801341a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801341c:	4b67      	ldr	r3, [pc, #412]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013420:	4a66      	ldr	r2, [pc, #408]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013426:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013428:	4b64      	ldr	r3, [pc, #400]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801342c:	4a63      	ldr	r2, [pc, #396]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801342e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013432:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8013434:	4a61      	ldr	r2, [pc, #388]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013444:	d115      	bne.n	8013472 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013446:	f7f8 fcfd 	bl	800be44 <HAL_GetTick>
 801344a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801344c:	e00b      	b.n	8013466 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801344e:	f7f8 fcf9 	bl	800be44 <HAL_GetTick>
 8013452:	4602      	mov	r2, r0
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	1ad3      	subs	r3, r2, r3
 8013458:	f241 3288 	movw	r2, #5000	; 0x1388
 801345c:	4293      	cmp	r3, r2
 801345e:	d902      	bls.n	8013466 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8013460:	2303      	movs	r3, #3
 8013462:	75fb      	strb	r3, [r7, #23]
            break;
 8013464:	e005      	b.n	8013472 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013466:	4b55      	ldr	r3, [pc, #340]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801346a:	f003 0302 	and.w	r3, r3, #2
 801346e:	2b00      	cmp	r3, #0
 8013470:	d0ed      	beq.n	801344e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8013472:	7dfb      	ldrb	r3, [r7, #23]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d126      	bne.n	80134c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013486:	d10d      	bne.n	80134a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8013488:	4b4c      	ldr	r3, [pc, #304]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801348a:	691b      	ldr	r3, [r3, #16]
 801348c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013496:	0919      	lsrs	r1, r3, #4
 8013498:	4b4a      	ldr	r3, [pc, #296]	; (80135c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 801349a:	400b      	ands	r3, r1
 801349c:	4947      	ldr	r1, [pc, #284]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801349e:	4313      	orrs	r3, r2
 80134a0:	610b      	str	r3, [r1, #16]
 80134a2:	e005      	b.n	80134b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80134a4:	4b45      	ldr	r3, [pc, #276]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80134a6:	691b      	ldr	r3, [r3, #16]
 80134a8:	4a44      	ldr	r2, [pc, #272]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80134aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80134ae:	6113      	str	r3, [r2, #16]
 80134b0:	4b42      	ldr	r3, [pc, #264]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80134b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80134ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80134be:	493f      	ldr	r1, [pc, #252]	; (80135bc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80134c0:	4313      	orrs	r3, r2
 80134c2:	670b      	str	r3, [r1, #112]	; 0x70
 80134c4:	e004      	b.n	80134d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80134c6:	7dfb      	ldrb	r3, [r7, #23]
 80134c8:	75bb      	strb	r3, [r7, #22]
 80134ca:	e001      	b.n	80134d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80134cc:	7dfb      	ldrb	r3, [r7, #23]
 80134ce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f003 0301 	and.w	r3, r3, #1
 80134d8:	2b00      	cmp	r3, #0
 80134da:	f000 8085 	beq.w	80135e8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80134e2:	2b28      	cmp	r3, #40	; 0x28
 80134e4:	d866      	bhi.n	80135b4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80134e6:	a201      	add	r2, pc, #4	; (adr r2, 80134ec <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80134e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134ec:	080135c9 	.word	0x080135c9
 80134f0:	080135b5 	.word	0x080135b5
 80134f4:	080135b5 	.word	0x080135b5
 80134f8:	080135b5 	.word	0x080135b5
 80134fc:	080135b5 	.word	0x080135b5
 8013500:	080135b5 	.word	0x080135b5
 8013504:	080135b5 	.word	0x080135b5
 8013508:	080135b5 	.word	0x080135b5
 801350c:	08013591 	.word	0x08013591
 8013510:	080135b5 	.word	0x080135b5
 8013514:	080135b5 	.word	0x080135b5
 8013518:	080135b5 	.word	0x080135b5
 801351c:	080135b5 	.word	0x080135b5
 8013520:	080135b5 	.word	0x080135b5
 8013524:	080135b5 	.word	0x080135b5
 8013528:	080135b5 	.word	0x080135b5
 801352c:	080135a3 	.word	0x080135a3
 8013530:	080135b5 	.word	0x080135b5
 8013534:	080135b5 	.word	0x080135b5
 8013538:	080135b5 	.word	0x080135b5
 801353c:	080135b5 	.word	0x080135b5
 8013540:	080135b5 	.word	0x080135b5
 8013544:	080135b5 	.word	0x080135b5
 8013548:	080135b5 	.word	0x080135b5
 801354c:	080135c9 	.word	0x080135c9
 8013550:	080135b5 	.word	0x080135b5
 8013554:	080135b5 	.word	0x080135b5
 8013558:	080135b5 	.word	0x080135b5
 801355c:	080135b5 	.word	0x080135b5
 8013560:	080135b5 	.word	0x080135b5
 8013564:	080135b5 	.word	0x080135b5
 8013568:	080135b5 	.word	0x080135b5
 801356c:	080135c9 	.word	0x080135c9
 8013570:	080135b5 	.word	0x080135b5
 8013574:	080135b5 	.word	0x080135b5
 8013578:	080135b5 	.word	0x080135b5
 801357c:	080135b5 	.word	0x080135b5
 8013580:	080135b5 	.word	0x080135b5
 8013584:	080135b5 	.word	0x080135b5
 8013588:	080135b5 	.word	0x080135b5
 801358c:	080135c9 	.word	0x080135c9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	3304      	adds	r3, #4
 8013594:	2101      	movs	r1, #1
 8013596:	4618      	mov	r0, r3
 8013598:	f000 fdfa 	bl	8014190 <RCCEx_PLL2_Config>
 801359c:	4603      	mov	r3, r0
 801359e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80135a0:	e013      	b.n	80135ca <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	3324      	adds	r3, #36	; 0x24
 80135a6:	2101      	movs	r1, #1
 80135a8:	4618      	mov	r0, r3
 80135aa:	f000 fea3 	bl	80142f4 <RCCEx_PLL3_Config>
 80135ae:	4603      	mov	r3, r0
 80135b0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80135b2:	e00a      	b.n	80135ca <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80135b4:	2301      	movs	r3, #1
 80135b6:	75fb      	strb	r3, [r7, #23]
      break;
 80135b8:	e007      	b.n	80135ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 80135ba:	bf00      	nop
 80135bc:	58024400 	.word	0x58024400
 80135c0:	58024800 	.word	0x58024800
 80135c4:	00ffffcf 	.word	0x00ffffcf
      break;
 80135c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80135ca:	7dfb      	ldrb	r3, [r7, #23]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d109      	bne.n	80135e4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80135d0:	4b96      	ldr	r3, [pc, #600]	; (801382c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80135d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135d4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80135dc:	4993      	ldr	r1, [pc, #588]	; (801382c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80135de:	4313      	orrs	r3, r2
 80135e0:	654b      	str	r3, [r1, #84]	; 0x54
 80135e2:	e001      	b.n	80135e8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80135e4:	7dfb      	ldrb	r3, [r7, #23]
 80135e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	f003 0302 	and.w	r3, r3, #2
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d038      	beq.n	8013666 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80135f8:	2b05      	cmp	r3, #5
 80135fa:	d821      	bhi.n	8013640 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80135fc:	a201      	add	r2, pc, #4	; (adr r2, 8013604 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80135fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013602:	bf00      	nop
 8013604:	08013647 	.word	0x08013647
 8013608:	0801361d 	.word	0x0801361d
 801360c:	0801362f 	.word	0x0801362f
 8013610:	08013647 	.word	0x08013647
 8013614:	08013647 	.word	0x08013647
 8013618:	08013647 	.word	0x08013647
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	3304      	adds	r3, #4
 8013620:	2101      	movs	r1, #1
 8013622:	4618      	mov	r0, r3
 8013624:	f000 fdb4 	bl	8014190 <RCCEx_PLL2_Config>
 8013628:	4603      	mov	r3, r0
 801362a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801362c:	e00c      	b.n	8013648 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	3324      	adds	r3, #36	; 0x24
 8013632:	2101      	movs	r1, #1
 8013634:	4618      	mov	r0, r3
 8013636:	f000 fe5d 	bl	80142f4 <RCCEx_PLL3_Config>
 801363a:	4603      	mov	r3, r0
 801363c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801363e:	e003      	b.n	8013648 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013640:	2301      	movs	r3, #1
 8013642:	75fb      	strb	r3, [r7, #23]
      break;
 8013644:	e000      	b.n	8013648 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8013646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013648:	7dfb      	ldrb	r3, [r7, #23]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d109      	bne.n	8013662 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801364e:	4b77      	ldr	r3, [pc, #476]	; (801382c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013652:	f023 0207 	bic.w	r2, r3, #7
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801365a:	4974      	ldr	r1, [pc, #464]	; (801382c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801365c:	4313      	orrs	r3, r2
 801365e:	654b      	str	r3, [r1, #84]	; 0x54
 8013660:	e001      	b.n	8013666 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013662:	7dfb      	ldrb	r3, [r7, #23]
 8013664:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	f003 0304 	and.w	r3, r3, #4
 801366e:	2b00      	cmp	r3, #0
 8013670:	d03a      	beq.n	80136e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013678:	2b05      	cmp	r3, #5
 801367a:	d821      	bhi.n	80136c0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 801367c:	a201      	add	r2, pc, #4	; (adr r2, 8013684 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 801367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013682:	bf00      	nop
 8013684:	080136c7 	.word	0x080136c7
 8013688:	0801369d 	.word	0x0801369d
 801368c:	080136af 	.word	0x080136af
 8013690:	080136c7 	.word	0x080136c7
 8013694:	080136c7 	.word	0x080136c7
 8013698:	080136c7 	.word	0x080136c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	3304      	adds	r3, #4
 80136a0:	2101      	movs	r1, #1
 80136a2:	4618      	mov	r0, r3
 80136a4:	f000 fd74 	bl	8014190 <RCCEx_PLL2_Config>
 80136a8:	4603      	mov	r3, r0
 80136aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80136ac:	e00c      	b.n	80136c8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	3324      	adds	r3, #36	; 0x24
 80136b2:	2101      	movs	r1, #1
 80136b4:	4618      	mov	r0, r3
 80136b6:	f000 fe1d 	bl	80142f4 <RCCEx_PLL3_Config>
 80136ba:	4603      	mov	r3, r0
 80136bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80136be:	e003      	b.n	80136c8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80136c0:	2301      	movs	r3, #1
 80136c2:	75fb      	strb	r3, [r7, #23]
      break;
 80136c4:	e000      	b.n	80136c8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80136c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80136c8:	7dfb      	ldrb	r3, [r7, #23]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d10a      	bne.n	80136e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80136ce:	4b57      	ldr	r3, [pc, #348]	; (801382c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80136d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136d2:	f023 0207 	bic.w	r2, r3, #7
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80136dc:	4953      	ldr	r1, [pc, #332]	; (801382c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80136de:	4313      	orrs	r3, r2
 80136e0:	658b      	str	r3, [r1, #88]	; 0x58
 80136e2:	e001      	b.n	80136e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80136e4:	7dfb      	ldrb	r3, [r7, #23]
 80136e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	f003 0320 	and.w	r3, r3, #32
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d04b      	beq.n	801378c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80136fe:	d02e      	beq.n	801375e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8013700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013704:	d828      	bhi.n	8013758 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8013706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801370a:	d02a      	beq.n	8013762 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 801370c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013710:	d822      	bhi.n	8013758 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8013712:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013716:	d026      	beq.n	8013766 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8013718:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801371c:	d81c      	bhi.n	8013758 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801371e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013722:	d010      	beq.n	8013746 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8013724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013728:	d816      	bhi.n	8013758 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801372a:	2b00      	cmp	r3, #0
 801372c:	d01d      	beq.n	801376a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 801372e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013732:	d111      	bne.n	8013758 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	3304      	adds	r3, #4
 8013738:	2100      	movs	r1, #0
 801373a:	4618      	mov	r0, r3
 801373c:	f000 fd28 	bl	8014190 <RCCEx_PLL2_Config>
 8013740:	4603      	mov	r3, r0
 8013742:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8013744:	e012      	b.n	801376c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	3324      	adds	r3, #36	; 0x24
 801374a:	2102      	movs	r1, #2
 801374c:	4618      	mov	r0, r3
 801374e:	f000 fdd1 	bl	80142f4 <RCCEx_PLL3_Config>
 8013752:	4603      	mov	r3, r0
 8013754:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8013756:	e009      	b.n	801376c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013758:	2301      	movs	r3, #1
 801375a:	75fb      	strb	r3, [r7, #23]
      break;
 801375c:	e006      	b.n	801376c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 801375e:	bf00      	nop
 8013760:	e004      	b.n	801376c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8013762:	bf00      	nop
 8013764:	e002      	b.n	801376c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8013766:	bf00      	nop
 8013768:	e000      	b.n	801376c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 801376a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801376c:	7dfb      	ldrb	r3, [r7, #23]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d10a      	bne.n	8013788 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013772:	4b2e      	ldr	r3, [pc, #184]	; (801382c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013776:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013780:	492a      	ldr	r1, [pc, #168]	; (801382c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013782:	4313      	orrs	r3, r2
 8013784:	654b      	str	r3, [r1, #84]	; 0x54
 8013786:	e001      	b.n	801378c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013788:	7dfb      	ldrb	r3, [r7, #23]
 801378a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013794:	2b00      	cmp	r3, #0
 8013796:	d04d      	beq.n	8013834 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801379e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80137a2:	d02e      	beq.n	8013802 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80137a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80137a8:	d828      	bhi.n	80137fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80137aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80137ae:	d02a      	beq.n	8013806 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80137b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80137b4:	d822      	bhi.n	80137fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80137b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80137ba:	d026      	beq.n	801380a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80137bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80137c0:	d81c      	bhi.n	80137fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80137c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80137c6:	d010      	beq.n	80137ea <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80137c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80137cc:	d816      	bhi.n	80137fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d01d      	beq.n	801380e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80137d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80137d6:	d111      	bne.n	80137fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	3304      	adds	r3, #4
 80137dc:	2100      	movs	r1, #0
 80137de:	4618      	mov	r0, r3
 80137e0:	f000 fcd6 	bl	8014190 <RCCEx_PLL2_Config>
 80137e4:	4603      	mov	r3, r0
 80137e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80137e8:	e012      	b.n	8013810 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	3324      	adds	r3, #36	; 0x24
 80137ee:	2102      	movs	r1, #2
 80137f0:	4618      	mov	r0, r3
 80137f2:	f000 fd7f 	bl	80142f4 <RCCEx_PLL3_Config>
 80137f6:	4603      	mov	r3, r0
 80137f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80137fa:	e009      	b.n	8013810 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80137fc:	2301      	movs	r3, #1
 80137fe:	75fb      	strb	r3, [r7, #23]
      break;
 8013800:	e006      	b.n	8013810 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8013802:	bf00      	nop
 8013804:	e004      	b.n	8013810 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8013806:	bf00      	nop
 8013808:	e002      	b.n	8013810 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801380a:	bf00      	nop
 801380c:	e000      	b.n	8013810 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801380e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013810:	7dfb      	ldrb	r3, [r7, #23]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d10c      	bne.n	8013830 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8013816:	4b05      	ldr	r3, [pc, #20]	; (801382c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801381a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013824:	4901      	ldr	r1, [pc, #4]	; (801382c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013826:	4313      	orrs	r3, r2
 8013828:	658b      	str	r3, [r1, #88]	; 0x58
 801382a:	e003      	b.n	8013834 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 801382c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013830:	7dfb      	ldrb	r3, [r7, #23]
 8013832:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801383c:	2b00      	cmp	r3, #0
 801383e:	d04b      	beq.n	80138d8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013846:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801384a:	d02e      	beq.n	80138aa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 801384c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8013850:	d828      	bhi.n	80138a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8013852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013856:	d02a      	beq.n	80138ae <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8013858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801385c:	d822      	bhi.n	80138a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 801385e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8013862:	d026      	beq.n	80138b2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8013864:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8013868:	d81c      	bhi.n	80138a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 801386a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801386e:	d010      	beq.n	8013892 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8013870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013874:	d816      	bhi.n	80138a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8013876:	2b00      	cmp	r3, #0
 8013878:	d01d      	beq.n	80138b6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 801387a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801387e:	d111      	bne.n	80138a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	3304      	adds	r3, #4
 8013884:	2100      	movs	r1, #0
 8013886:	4618      	mov	r0, r3
 8013888:	f000 fc82 	bl	8014190 <RCCEx_PLL2_Config>
 801388c:	4603      	mov	r3, r0
 801388e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8013890:	e012      	b.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	3324      	adds	r3, #36	; 0x24
 8013896:	2102      	movs	r1, #2
 8013898:	4618      	mov	r0, r3
 801389a:	f000 fd2b 	bl	80142f4 <RCCEx_PLL3_Config>
 801389e:	4603      	mov	r3, r0
 80138a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80138a2:	e009      	b.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80138a4:	2301      	movs	r3, #1
 80138a6:	75fb      	strb	r3, [r7, #23]
      break;
 80138a8:	e006      	b.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80138aa:	bf00      	nop
 80138ac:	e004      	b.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80138ae:	bf00      	nop
 80138b0:	e002      	b.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80138b2:	bf00      	nop
 80138b4:	e000      	b.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80138b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80138b8:	7dfb      	ldrb	r3, [r7, #23]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d10a      	bne.n	80138d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80138be:	4b9d      	ldr	r3, [pc, #628]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80138c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80138c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80138cc:	4999      	ldr	r1, [pc, #612]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80138ce:	4313      	orrs	r3, r2
 80138d0:	658b      	str	r3, [r1, #88]	; 0x58
 80138d2:	e001      	b.n	80138d8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80138d4:	7dfb      	ldrb	r3, [r7, #23]
 80138d6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	f003 0308 	and.w	r3, r3, #8
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d01a      	beq.n	801391a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80138ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80138ee:	d10a      	bne.n	8013906 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	3324      	adds	r3, #36	; 0x24
 80138f4:	2102      	movs	r1, #2
 80138f6:	4618      	mov	r0, r3
 80138f8:	f000 fcfc 	bl	80142f4 <RCCEx_PLL3_Config>
 80138fc:	4603      	mov	r3, r0
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d001      	beq.n	8013906 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8013902:	2301      	movs	r3, #1
 8013904:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8013906:	4b8b      	ldr	r3, [pc, #556]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801390a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013914:	4987      	ldr	r1, [pc, #540]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013916:	4313      	orrs	r3, r2
 8013918:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	f003 0310 	and.w	r3, r3, #16
 8013922:	2b00      	cmp	r3, #0
 8013924:	d01a      	beq.n	801395c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801392c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013930:	d10a      	bne.n	8013948 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	3324      	adds	r3, #36	; 0x24
 8013936:	2102      	movs	r1, #2
 8013938:	4618      	mov	r0, r3
 801393a:	f000 fcdb 	bl	80142f4 <RCCEx_PLL3_Config>
 801393e:	4603      	mov	r3, r0
 8013940:	2b00      	cmp	r3, #0
 8013942:	d001      	beq.n	8013948 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8013944:	2301      	movs	r3, #1
 8013946:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8013948:	4b7a      	ldr	r3, [pc, #488]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801394c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013956:	4977      	ldr	r1, [pc, #476]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013958:	4313      	orrs	r3, r2
 801395a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013964:	2b00      	cmp	r3, #0
 8013966:	d034      	beq.n	80139d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801396e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013972:	d01d      	beq.n	80139b0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8013974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013978:	d817      	bhi.n	80139aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 801397a:	2b00      	cmp	r3, #0
 801397c:	d003      	beq.n	8013986 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 801397e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013982:	d009      	beq.n	8013998 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8013984:	e011      	b.n	80139aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	3304      	adds	r3, #4
 801398a:	2100      	movs	r1, #0
 801398c:	4618      	mov	r0, r3
 801398e:	f000 fbff 	bl	8014190 <RCCEx_PLL2_Config>
 8013992:	4603      	mov	r3, r0
 8013994:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8013996:	e00c      	b.n	80139b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	3324      	adds	r3, #36	; 0x24
 801399c:	2102      	movs	r1, #2
 801399e:	4618      	mov	r0, r3
 80139a0:	f000 fca8 	bl	80142f4 <RCCEx_PLL3_Config>
 80139a4:	4603      	mov	r3, r0
 80139a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80139a8:	e003      	b.n	80139b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80139aa:	2301      	movs	r3, #1
 80139ac:	75fb      	strb	r3, [r7, #23]
      break;
 80139ae:	e000      	b.n	80139b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80139b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80139b2:	7dfb      	ldrb	r3, [r7, #23]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d10a      	bne.n	80139ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80139b8:	4b5e      	ldr	r3, [pc, #376]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80139ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80139c6:	495b      	ldr	r1, [pc, #364]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80139c8:	4313      	orrs	r3, r2
 80139ca:	658b      	str	r3, [r1, #88]	; 0x58
 80139cc:	e001      	b.n	80139d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80139ce:	7dfb      	ldrb	r3, [r7, #23]
 80139d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d033      	beq.n	8013a46 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80139e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80139e8:	d01c      	beq.n	8013a24 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80139ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80139ee:	d816      	bhi.n	8013a1e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80139f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80139f4:	d003      	beq.n	80139fe <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80139f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80139fa:	d007      	beq.n	8013a0c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80139fc:	e00f      	b.n	8013a1e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80139fe:	4b4d      	ldr	r3, [pc, #308]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a02:	4a4c      	ldr	r2, [pc, #304]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013a08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8013a0a:	e00c      	b.n	8013a26 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	3324      	adds	r3, #36	; 0x24
 8013a10:	2101      	movs	r1, #1
 8013a12:	4618      	mov	r0, r3
 8013a14:	f000 fc6e 	bl	80142f4 <RCCEx_PLL3_Config>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8013a1c:	e003      	b.n	8013a26 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013a1e:	2301      	movs	r3, #1
 8013a20:	75fb      	strb	r3, [r7, #23]
      break;
 8013a22:	e000      	b.n	8013a26 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8013a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013a26:	7dfb      	ldrb	r3, [r7, #23]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d10a      	bne.n	8013a42 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8013a2c:	4b41      	ldr	r3, [pc, #260]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a3a:	493e      	ldr	r1, [pc, #248]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a3c:	4313      	orrs	r3, r2
 8013a3e:	654b      	str	r3, [r1, #84]	; 0x54
 8013a40:	e001      	b.n	8013a46 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013a42:	7dfb      	ldrb	r3, [r7, #23]
 8013a44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d029      	beq.n	8013aa6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d003      	beq.n	8013a62 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8013a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a5e:	d007      	beq.n	8013a70 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8013a60:	e00f      	b.n	8013a82 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013a62:	4b34      	ldr	r3, [pc, #208]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a66:	4a33      	ldr	r2, [pc, #204]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8013a6e:	e00b      	b.n	8013a88 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	3304      	adds	r3, #4
 8013a74:	2102      	movs	r1, #2
 8013a76:	4618      	mov	r0, r3
 8013a78:	f000 fb8a 	bl	8014190 <RCCEx_PLL2_Config>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8013a80:	e002      	b.n	8013a88 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8013a82:	2301      	movs	r3, #1
 8013a84:	75fb      	strb	r3, [r7, #23]
      break;
 8013a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013a88:	7dfb      	ldrb	r3, [r7, #23]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d109      	bne.n	8013aa2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8013a8e:	4b29      	ldr	r3, [pc, #164]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a9a:	4926      	ldr	r1, [pc, #152]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013a9c:	4313      	orrs	r3, r2
 8013a9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8013aa0:	e001      	b.n	8013aa6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013aa2:	7dfb      	ldrb	r3, [r7, #23]
 8013aa4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d00a      	beq.n	8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	3324      	adds	r3, #36	; 0x24
 8013ab6:	2102      	movs	r1, #2
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f000 fc1b 	bl	80142f4 <RCCEx_PLL3_Config>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d001      	beq.n	8013ac8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d033      	beq.n	8013b3c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013adc:	d017      	beq.n	8013b0e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8013ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013ae2:	d811      	bhi.n	8013b08 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8013ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ae8:	d013      	beq.n	8013b12 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8013aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013aee:	d80b      	bhi.n	8013b08 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d010      	beq.n	8013b16 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8013af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013af8:	d106      	bne.n	8013b08 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013afa:	4b0e      	ldr	r3, [pc, #56]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013afe:	4a0d      	ldr	r2, [pc, #52]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013b04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8013b06:	e007      	b.n	8013b18 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013b08:	2301      	movs	r3, #1
 8013b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8013b0c:	e004      	b.n	8013b18 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8013b0e:	bf00      	nop
 8013b10:	e002      	b.n	8013b18 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8013b12:	bf00      	nop
 8013b14:	e000      	b.n	8013b18 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8013b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013b18:	7dfb      	ldrb	r3, [r7, #23]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d10c      	bne.n	8013b38 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013b1e:	4b05      	ldr	r3, [pc, #20]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b2a:	4902      	ldr	r1, [pc, #8]	; (8013b34 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013b2c:	4313      	orrs	r3, r2
 8013b2e:	654b      	str	r3, [r1, #84]	; 0x54
 8013b30:	e004      	b.n	8013b3c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8013b32:	bf00      	nop
 8013b34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013b38:	7dfb      	ldrb	r3, [r7, #23]
 8013b3a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d008      	beq.n	8013b5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013b48:	4b31      	ldr	r3, [pc, #196]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b54:	492e      	ldr	r1, [pc, #184]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013b56:	4313      	orrs	r3, r2
 8013b58:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d009      	beq.n	8013b7a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8013b66:	4b2a      	ldr	r3, [pc, #168]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013b68:	691b      	ldr	r3, [r3, #16]
 8013b6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013b74:	4926      	ldr	r1, [pc, #152]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013b76:	4313      	orrs	r3, r2
 8013b78:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d008      	beq.n	8013b98 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013b86:	4b22      	ldr	r3, [pc, #136]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013b92:	491f      	ldr	r1, [pc, #124]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013b94:	4313      	orrs	r3, r2
 8013b96:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d00d      	beq.n	8013bc0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013ba4:	4b1a      	ldr	r3, [pc, #104]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013ba6:	691b      	ldr	r3, [r3, #16]
 8013ba8:	4a19      	ldr	r2, [pc, #100]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013baa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013bae:	6113      	str	r3, [r2, #16]
 8013bb0:	4b17      	ldr	r3, [pc, #92]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013bb2:	691a      	ldr	r2, [r3, #16]
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013bba:	4915      	ldr	r1, [pc, #84]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013bbc:	4313      	orrs	r3, r2
 8013bbe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	da08      	bge.n	8013bda <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8013bc8:	4b11      	ldr	r3, [pc, #68]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bcc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bd4:	490e      	ldr	r1, [pc, #56]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013bd6:	4313      	orrs	r3, r2
 8013bd8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d009      	beq.n	8013bfa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013be6:	4b0a      	ldr	r3, [pc, #40]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013bf4:	4906      	ldr	r1, [pc, #24]	; (8013c10 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013bf6:	4313      	orrs	r3, r2
 8013bf8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8013bfa:	7dbb      	ldrb	r3, [r7, #22]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d101      	bne.n	8013c04 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8013c00:	2300      	movs	r3, #0
 8013c02:	e000      	b.n	8013c06 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8013c04:	2301      	movs	r3, #1
}
 8013c06:	4618      	mov	r0, r3
 8013c08:	3718      	adds	r7, #24
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	58024400 	.word	0x58024400

08013c14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013c18:	f7ff f85a 	bl	8012cd0 <HAL_RCC_GetHCLKFreq>
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	4b06      	ldr	r3, [pc, #24]	; (8013c38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013c20:	6a1b      	ldr	r3, [r3, #32]
 8013c22:	091b      	lsrs	r3, r3, #4
 8013c24:	f003 0307 	and.w	r3, r3, #7
 8013c28:	4904      	ldr	r1, [pc, #16]	; (8013c3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013c2a:	5ccb      	ldrb	r3, [r1, r3]
 8013c2c:	f003 031f 	and.w	r3, r3, #31
 8013c30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	bd80      	pop	{r7, pc}
 8013c38:	58024400 	.word	0x58024400
 8013c3c:	08038e94 	.word	0x08038e94

08013c40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8013c40:	b480      	push	{r7}
 8013c42:	b089      	sub	sp, #36	; 0x24
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013c48:	4ba1      	ldr	r3, [pc, #644]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c4c:	f003 0303 	and.w	r3, r3, #3
 8013c50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8013c52:	4b9f      	ldr	r3, [pc, #636]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c56:	0b1b      	lsrs	r3, r3, #12
 8013c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013c5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013c5e:	4b9c      	ldr	r3, [pc, #624]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c62:	091b      	lsrs	r3, r3, #4
 8013c64:	f003 0301 	and.w	r3, r3, #1
 8013c68:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8013c6a:	4b99      	ldr	r3, [pc, #612]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c6e:	08db      	lsrs	r3, r3, #3
 8013c70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013c74:	693a      	ldr	r2, [r7, #16]
 8013c76:	fb02 f303 	mul.w	r3, r2, r3
 8013c7a:	ee07 3a90 	vmov	s15, r3
 8013c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	f000 8111 	beq.w	8013eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013c8e:	69bb      	ldr	r3, [r7, #24]
 8013c90:	2b02      	cmp	r3, #2
 8013c92:	f000 8083 	beq.w	8013d9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013c96:	69bb      	ldr	r3, [r7, #24]
 8013c98:	2b02      	cmp	r3, #2
 8013c9a:	f200 80a1 	bhi.w	8013de0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013c9e:	69bb      	ldr	r3, [r7, #24]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d003      	beq.n	8013cac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013ca4:	69bb      	ldr	r3, [r7, #24]
 8013ca6:	2b01      	cmp	r3, #1
 8013ca8:	d056      	beq.n	8013d58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013caa:	e099      	b.n	8013de0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013cac:	4b88      	ldr	r3, [pc, #544]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	f003 0320 	and.w	r3, r3, #32
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d02d      	beq.n	8013d14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013cb8:	4b85      	ldr	r3, [pc, #532]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	08db      	lsrs	r3, r3, #3
 8013cbe:	f003 0303 	and.w	r3, r3, #3
 8013cc2:	4a84      	ldr	r2, [pc, #528]	; (8013ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8013cc8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	ee07 3a90 	vmov	s15, r3
 8013cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	ee07 3a90 	vmov	s15, r3
 8013cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ce2:	4b7b      	ldr	r3, [pc, #492]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cea:	ee07 3a90 	vmov	s15, r3
 8013cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013cf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8013ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013d12:	e087      	b.n	8013e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	ee07 3a90 	vmov	s15, r3
 8013d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8013edc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d26:	4b6a      	ldr	r3, [pc, #424]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d2e:	ee07 3a90 	vmov	s15, r3
 8013d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8013ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013d56:	e065      	b.n	8013e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	ee07 3a90 	vmov	s15, r3
 8013d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8013ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d6a:	4b59      	ldr	r3, [pc, #356]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d72:	ee07 3a90 	vmov	s15, r3
 8013d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8013ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013d9a:	e043      	b.n	8013e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	ee07 3a90 	vmov	s15, r3
 8013da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013da6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8013ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013dae:	4b48      	ldr	r3, [pc, #288]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013db6:	ee07 3a90 	vmov	s15, r3
 8013dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8013dc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013dde:	e021      	b.n	8013e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	ee07 3a90 	vmov	s15, r3
 8013de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013df2:	4b37      	ldr	r3, [pc, #220]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dfa:	ee07 3a90 	vmov	s15, r3
 8013dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8013ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013e22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8013e24:	4b2a      	ldr	r3, [pc, #168]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e28:	0a5b      	lsrs	r3, r3, #9
 8013e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e2e:	ee07 3a90 	vmov	s15, r3
 8013e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013e4a:	ee17 2a90 	vmov	r2, s15
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8013e52:	4b1f      	ldr	r3, [pc, #124]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e56:	0c1b      	lsrs	r3, r3, #16
 8013e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e5c:	ee07 3a90 	vmov	s15, r3
 8013e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8013e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013e78:	ee17 2a90 	vmov	r2, s15
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8013e80:	4b13      	ldr	r3, [pc, #76]	; (8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e84:	0e1b      	lsrs	r3, r3, #24
 8013e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e8a:	ee07 3a90 	vmov	s15, r3
 8013e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8013e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ea6:	ee17 2a90 	vmov	r2, s15
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013eae:	e008      	b.n	8013ec2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2200      	movs	r2, #0
 8013eba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	609a      	str	r2, [r3, #8]
}
 8013ec2:	bf00      	nop
 8013ec4:	3724      	adds	r7, #36	; 0x24
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop
 8013ed0:	58024400 	.word	0x58024400
 8013ed4:	03d09000 	.word	0x03d09000
 8013ed8:	46000000 	.word	0x46000000
 8013edc:	4c742400 	.word	0x4c742400
 8013ee0:	4a742400 	.word	0x4a742400
 8013ee4:	4bbebc20 	.word	0x4bbebc20

08013ee8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8013ee8:	b480      	push	{r7}
 8013eea:	b089      	sub	sp, #36	; 0x24
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013ef0:	4ba1      	ldr	r3, [pc, #644]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ef4:	f003 0303 	and.w	r3, r3, #3
 8013ef8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8013efa:	4b9f      	ldr	r3, [pc, #636]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013efe:	0d1b      	lsrs	r3, r3, #20
 8013f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013f06:	4b9c      	ldr	r3, [pc, #624]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f0a:	0a1b      	lsrs	r3, r3, #8
 8013f0c:	f003 0301 	and.w	r3, r3, #1
 8013f10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8013f12:	4b99      	ldr	r3, [pc, #612]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f16:	08db      	lsrs	r3, r3, #3
 8013f18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f1c:	693a      	ldr	r2, [r7, #16]
 8013f1e:	fb02 f303 	mul.w	r3, r2, r3
 8013f22:	ee07 3a90 	vmov	s15, r3
 8013f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013f2e:	697b      	ldr	r3, [r7, #20]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	f000 8111 	beq.w	8014158 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8013f36:	69bb      	ldr	r3, [r7, #24]
 8013f38:	2b02      	cmp	r3, #2
 8013f3a:	f000 8083 	beq.w	8014044 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013f3e:	69bb      	ldr	r3, [r7, #24]
 8013f40:	2b02      	cmp	r3, #2
 8013f42:	f200 80a1 	bhi.w	8014088 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013f46:	69bb      	ldr	r3, [r7, #24]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d003      	beq.n	8013f54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013f4c:	69bb      	ldr	r3, [r7, #24]
 8013f4e:	2b01      	cmp	r3, #1
 8013f50:	d056      	beq.n	8014000 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013f52:	e099      	b.n	8014088 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013f54:	4b88      	ldr	r3, [pc, #544]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	f003 0320 	and.w	r3, r3, #32
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d02d      	beq.n	8013fbc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013f60:	4b85      	ldr	r3, [pc, #532]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	08db      	lsrs	r3, r3, #3
 8013f66:	f003 0303 	and.w	r3, r3, #3
 8013f6a:	4a84      	ldr	r2, [pc, #528]	; (801417c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8013f70:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	ee07 3a90 	vmov	s15, r3
 8013f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	ee07 3a90 	vmov	s15, r3
 8013f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f8a:	4b7b      	ldr	r3, [pc, #492]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f92:	ee07 3a90 	vmov	s15, r3
 8013f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8014180 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fb6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013fba:	e087      	b.n	80140cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013fbc:	697b      	ldr	r3, [r7, #20]
 8013fbe:	ee07 3a90 	vmov	s15, r3
 8013fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8014184 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013fce:	4b6a      	ldr	r3, [pc, #424]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fd6:	ee07 3a90 	vmov	s15, r3
 8013fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8013fe2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8014180 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ffa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013ffe:	e065      	b.n	80140cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	ee07 3a90 	vmov	s15, r3
 8014006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801400a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8014188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801400e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014012:	4b59      	ldr	r3, [pc, #356]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801401a:	ee07 3a90 	vmov	s15, r3
 801401e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014022:	ed97 6a03 	vldr	s12, [r7, #12]
 8014026:	eddf 5a56 	vldr	s11, [pc, #344]	; 8014180 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801402a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801402e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801403a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801403e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8014042:	e043      	b.n	80140cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8014044:	697b      	ldr	r3, [r7, #20]
 8014046:	ee07 3a90 	vmov	s15, r3
 801404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801404e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801418c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8014052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014056:	4b48      	ldr	r3, [pc, #288]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801405a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801405e:	ee07 3a90 	vmov	s15, r3
 8014062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014066:	ed97 6a03 	vldr	s12, [r7, #12]
 801406a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8014180 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801406e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801407a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014082:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8014086:	e021      	b.n	80140cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	ee07 3a90 	vmov	s15, r3
 801408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014092:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8014096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801409a:	4b37      	ldr	r3, [pc, #220]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801409e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140a2:	ee07 3a90 	vmov	s15, r3
 80140a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80140ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8014180 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80140b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80140be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80140ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80140cc:	4b2a      	ldr	r3, [pc, #168]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140d0:	0a5b      	lsrs	r3, r3, #9
 80140d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140d6:	ee07 3a90 	vmov	s15, r3
 80140da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80140e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80140e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80140ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80140ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80140f2:	ee17 2a90 	vmov	r2, s15
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80140fa:	4b1f      	ldr	r3, [pc, #124]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140fe:	0c1b      	lsrs	r3, r3, #16
 8014100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014104:	ee07 3a90 	vmov	s15, r3
 8014108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801410c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014110:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014114:	edd7 6a07 	vldr	s13, [r7, #28]
 8014118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801411c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014120:	ee17 2a90 	vmov	r2, s15
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8014128:	4b13      	ldr	r3, [pc, #76]	; (8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801412c:	0e1b      	lsrs	r3, r3, #24
 801412e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014132:	ee07 3a90 	vmov	s15, r3
 8014136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801413a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801413e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014142:	edd7 6a07 	vldr	s13, [r7, #28]
 8014146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801414a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801414e:	ee17 2a90 	vmov	r2, s15
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8014156:	e008      	b.n	801416a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2200      	movs	r2, #0
 801415c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	2200      	movs	r2, #0
 8014162:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2200      	movs	r2, #0
 8014168:	609a      	str	r2, [r3, #8]
}
 801416a:	bf00      	nop
 801416c:	3724      	adds	r7, #36	; 0x24
 801416e:	46bd      	mov	sp, r7
 8014170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014174:	4770      	bx	lr
 8014176:	bf00      	nop
 8014178:	58024400 	.word	0x58024400
 801417c:	03d09000 	.word	0x03d09000
 8014180:	46000000 	.word	0x46000000
 8014184:	4c742400 	.word	0x4c742400
 8014188:	4a742400 	.word	0x4a742400
 801418c:	4bbebc20 	.word	0x4bbebc20

08014190 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b084      	sub	sp, #16
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
 8014198:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801419a:	2300      	movs	r3, #0
 801419c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801419e:	4b53      	ldr	r3, [pc, #332]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 80141a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141a2:	f003 0303 	and.w	r3, r3, #3
 80141a6:	2b03      	cmp	r3, #3
 80141a8:	d101      	bne.n	80141ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80141aa:	2301      	movs	r3, #1
 80141ac:	e099      	b.n	80142e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80141ae:	4b4f      	ldr	r3, [pc, #316]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	4a4e      	ldr	r2, [pc, #312]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 80141b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80141b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80141ba:	f7f7 fe43 	bl	800be44 <HAL_GetTick>
 80141be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80141c0:	e008      	b.n	80141d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80141c2:	f7f7 fe3f 	bl	800be44 <HAL_GetTick>
 80141c6:	4602      	mov	r2, r0
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	1ad3      	subs	r3, r2, r3
 80141cc:	2b02      	cmp	r3, #2
 80141ce:	d901      	bls.n	80141d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80141d0:	2303      	movs	r3, #3
 80141d2:	e086      	b.n	80142e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80141d4:	4b45      	ldr	r3, [pc, #276]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d1f0      	bne.n	80141c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80141e0:	4b42      	ldr	r3, [pc, #264]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 80141e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	031b      	lsls	r3, r3, #12
 80141ee:	493f      	ldr	r1, [pc, #252]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 80141f0:	4313      	orrs	r3, r2
 80141f2:	628b      	str	r3, [r1, #40]	; 0x28
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	685b      	ldr	r3, [r3, #4]
 80141f8:	3b01      	subs	r3, #1
 80141fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	689b      	ldr	r3, [r3, #8]
 8014202:	3b01      	subs	r3, #1
 8014204:	025b      	lsls	r3, r3, #9
 8014206:	b29b      	uxth	r3, r3
 8014208:	431a      	orrs	r2, r3
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	68db      	ldr	r3, [r3, #12]
 801420e:	3b01      	subs	r3, #1
 8014210:	041b      	lsls	r3, r3, #16
 8014212:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014216:	431a      	orrs	r2, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	691b      	ldr	r3, [r3, #16]
 801421c:	3b01      	subs	r3, #1
 801421e:	061b      	lsls	r3, r3, #24
 8014220:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014224:	4931      	ldr	r1, [pc, #196]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 8014226:	4313      	orrs	r3, r2
 8014228:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801422a:	4b30      	ldr	r3, [pc, #192]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 801422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801422e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	695b      	ldr	r3, [r3, #20]
 8014236:	492d      	ldr	r1, [pc, #180]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 8014238:	4313      	orrs	r3, r2
 801423a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801423c:	4b2b      	ldr	r3, [pc, #172]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 801423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014240:	f023 0220 	bic.w	r2, r3, #32
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	699b      	ldr	r3, [r3, #24]
 8014248:	4928      	ldr	r1, [pc, #160]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 801424a:	4313      	orrs	r3, r2
 801424c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801424e:	4b27      	ldr	r3, [pc, #156]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 8014250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014252:	4a26      	ldr	r2, [pc, #152]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 8014254:	f023 0310 	bic.w	r3, r3, #16
 8014258:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801425a:	4b24      	ldr	r3, [pc, #144]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 801425c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801425e:	4b24      	ldr	r3, [pc, #144]	; (80142f0 <RCCEx_PLL2_Config+0x160>)
 8014260:	4013      	ands	r3, r2
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	69d2      	ldr	r2, [r2, #28]
 8014266:	00d2      	lsls	r2, r2, #3
 8014268:	4920      	ldr	r1, [pc, #128]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 801426a:	4313      	orrs	r3, r2
 801426c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801426e:	4b1f      	ldr	r3, [pc, #124]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 8014270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014272:	4a1e      	ldr	r2, [pc, #120]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 8014274:	f043 0310 	orr.w	r3, r3, #16
 8014278:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d106      	bne.n	801428e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8014280:	4b1a      	ldr	r3, [pc, #104]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 8014282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014284:	4a19      	ldr	r2, [pc, #100]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 8014286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801428a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801428c:	e00f      	b.n	80142ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801428e:	683b      	ldr	r3, [r7, #0]
 8014290:	2b01      	cmp	r3, #1
 8014292:	d106      	bne.n	80142a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8014294:	4b15      	ldr	r3, [pc, #84]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 8014296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014298:	4a14      	ldr	r2, [pc, #80]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 801429a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801429e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80142a0:	e005      	b.n	80142ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80142a2:	4b12      	ldr	r3, [pc, #72]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 80142a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142a6:	4a11      	ldr	r2, [pc, #68]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 80142a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80142ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80142ae:	4b0f      	ldr	r3, [pc, #60]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	4a0e      	ldr	r2, [pc, #56]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 80142b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80142b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80142ba:	f7f7 fdc3 	bl	800be44 <HAL_GetTick>
 80142be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80142c0:	e008      	b.n	80142d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80142c2:	f7f7 fdbf 	bl	800be44 <HAL_GetTick>
 80142c6:	4602      	mov	r2, r0
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	1ad3      	subs	r3, r2, r3
 80142cc:	2b02      	cmp	r3, #2
 80142ce:	d901      	bls.n	80142d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80142d0:	2303      	movs	r3, #3
 80142d2:	e006      	b.n	80142e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80142d4:	4b05      	ldr	r3, [pc, #20]	; (80142ec <RCCEx_PLL2_Config+0x15c>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d0f0      	beq.n	80142c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80142e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3710      	adds	r7, #16
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	58024400 	.word	0x58024400
 80142f0:	ffff0007 	.word	0xffff0007

080142f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b084      	sub	sp, #16
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80142fe:	2300      	movs	r3, #0
 8014300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014302:	4b53      	ldr	r3, [pc, #332]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 8014304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014306:	f003 0303 	and.w	r3, r3, #3
 801430a:	2b03      	cmp	r3, #3
 801430c:	d101      	bne.n	8014312 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801430e:	2301      	movs	r3, #1
 8014310:	e099      	b.n	8014446 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8014312:	4b4f      	ldr	r3, [pc, #316]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	4a4e      	ldr	r2, [pc, #312]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 8014318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801431c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801431e:	f7f7 fd91 	bl	800be44 <HAL_GetTick>
 8014322:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014324:	e008      	b.n	8014338 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8014326:	f7f7 fd8d 	bl	800be44 <HAL_GetTick>
 801432a:	4602      	mov	r2, r0
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	1ad3      	subs	r3, r2, r3
 8014330:	2b02      	cmp	r3, #2
 8014332:	d901      	bls.n	8014338 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014334:	2303      	movs	r3, #3
 8014336:	e086      	b.n	8014446 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014338:	4b45      	ldr	r3, [pc, #276]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014340:	2b00      	cmp	r3, #0
 8014342:	d1f0      	bne.n	8014326 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014344:	4b42      	ldr	r3, [pc, #264]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 8014346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014348:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	051b      	lsls	r3, r3, #20
 8014352:	493f      	ldr	r1, [pc, #252]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 8014354:	4313      	orrs	r3, r2
 8014356:	628b      	str	r3, [r1, #40]	; 0x28
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	685b      	ldr	r3, [r3, #4]
 801435c:	3b01      	subs	r3, #1
 801435e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	689b      	ldr	r3, [r3, #8]
 8014366:	3b01      	subs	r3, #1
 8014368:	025b      	lsls	r3, r3, #9
 801436a:	b29b      	uxth	r3, r3
 801436c:	431a      	orrs	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	68db      	ldr	r3, [r3, #12]
 8014372:	3b01      	subs	r3, #1
 8014374:	041b      	lsls	r3, r3, #16
 8014376:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801437a:	431a      	orrs	r2, r3
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	691b      	ldr	r3, [r3, #16]
 8014380:	3b01      	subs	r3, #1
 8014382:	061b      	lsls	r3, r3, #24
 8014384:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014388:	4931      	ldr	r1, [pc, #196]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 801438a:	4313      	orrs	r3, r2
 801438c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801438e:	4b30      	ldr	r3, [pc, #192]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 8014390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014392:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	695b      	ldr	r3, [r3, #20]
 801439a:	492d      	ldr	r1, [pc, #180]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 801439c:	4313      	orrs	r3, r2
 801439e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80143a0:	4b2b      	ldr	r3, [pc, #172]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 80143a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	699b      	ldr	r3, [r3, #24]
 80143ac:	4928      	ldr	r1, [pc, #160]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 80143ae:	4313      	orrs	r3, r2
 80143b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80143b2:	4b27      	ldr	r3, [pc, #156]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 80143b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143b6:	4a26      	ldr	r2, [pc, #152]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 80143b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80143bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80143be:	4b24      	ldr	r3, [pc, #144]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 80143c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143c2:	4b24      	ldr	r3, [pc, #144]	; (8014454 <RCCEx_PLL3_Config+0x160>)
 80143c4:	4013      	ands	r3, r2
 80143c6:	687a      	ldr	r2, [r7, #4]
 80143c8:	69d2      	ldr	r2, [r2, #28]
 80143ca:	00d2      	lsls	r2, r2, #3
 80143cc:	4920      	ldr	r1, [pc, #128]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 80143ce:	4313      	orrs	r3, r2
 80143d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80143d2:	4b1f      	ldr	r3, [pc, #124]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 80143d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143d6:	4a1e      	ldr	r2, [pc, #120]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 80143d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80143dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d106      	bne.n	80143f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80143e4:	4b1a      	ldr	r3, [pc, #104]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 80143e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143e8:	4a19      	ldr	r2, [pc, #100]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 80143ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80143ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80143f0:	e00f      	b.n	8014412 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80143f2:	683b      	ldr	r3, [r7, #0]
 80143f4:	2b01      	cmp	r3, #1
 80143f6:	d106      	bne.n	8014406 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80143f8:	4b15      	ldr	r3, [pc, #84]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 80143fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143fc:	4a14      	ldr	r2, [pc, #80]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 80143fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014402:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014404:	e005      	b.n	8014412 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014406:	4b12      	ldr	r3, [pc, #72]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 8014408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801440a:	4a11      	ldr	r2, [pc, #68]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 801440c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014410:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8014412:	4b0f      	ldr	r3, [pc, #60]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	4a0e      	ldr	r2, [pc, #56]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 8014418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801441c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801441e:	f7f7 fd11 	bl	800be44 <HAL_GetTick>
 8014422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014424:	e008      	b.n	8014438 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8014426:	f7f7 fd0d 	bl	800be44 <HAL_GetTick>
 801442a:	4602      	mov	r2, r0
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	1ad3      	subs	r3, r2, r3
 8014430:	2b02      	cmp	r3, #2
 8014432:	d901      	bls.n	8014438 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014434:	2303      	movs	r3, #3
 8014436:	e006      	b.n	8014446 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014438:	4b05      	ldr	r3, [pc, #20]	; (8014450 <RCCEx_PLL3_Config+0x15c>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014440:	2b00      	cmp	r3, #0
 8014442:	d0f0      	beq.n	8014426 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014444:	7bfb      	ldrb	r3, [r7, #15]
}
 8014446:	4618      	mov	r0, r3
 8014448:	3710      	adds	r7, #16
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}
 801444e:	bf00      	nop
 8014450:	58024400 	.word	0x58024400
 8014454:	ffff0007 	.word	0xffff0007

08014458 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d101      	bne.n	801446a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014466:	2301      	movs	r3, #1
 8014468:	e0f1      	b.n	801464e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	2200      	movs	r2, #0
 801446e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	4a78      	ldr	r2, [pc, #480]	; (8014658 <HAL_SPI_Init+0x200>)
 8014476:	4293      	cmp	r3, r2
 8014478:	d00f      	beq.n	801449a <HAL_SPI_Init+0x42>
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	4a77      	ldr	r2, [pc, #476]	; (801465c <HAL_SPI_Init+0x204>)
 8014480:	4293      	cmp	r3, r2
 8014482:	d00a      	beq.n	801449a <HAL_SPI_Init+0x42>
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	4a75      	ldr	r2, [pc, #468]	; (8014660 <HAL_SPI_Init+0x208>)
 801448a:	4293      	cmp	r3, r2
 801448c:	d005      	beq.n	801449a <HAL_SPI_Init+0x42>
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	68db      	ldr	r3, [r3, #12]
 8014492:	2b0f      	cmp	r3, #15
 8014494:	d901      	bls.n	801449a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8014496:	2301      	movs	r3, #1
 8014498:	e0d9      	b.n	801464e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f001 f8ee 	bl	801567c <SPI_GetPacketSize>
 80144a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	4a6c      	ldr	r2, [pc, #432]	; (8014658 <HAL_SPI_Init+0x200>)
 80144a8:	4293      	cmp	r3, r2
 80144aa:	d00c      	beq.n	80144c6 <HAL_SPI_Init+0x6e>
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	4a6a      	ldr	r2, [pc, #424]	; (801465c <HAL_SPI_Init+0x204>)
 80144b2:	4293      	cmp	r3, r2
 80144b4:	d007      	beq.n	80144c6 <HAL_SPI_Init+0x6e>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	4a69      	ldr	r2, [pc, #420]	; (8014660 <HAL_SPI_Init+0x208>)
 80144bc:	4293      	cmp	r3, r2
 80144be:	d002      	beq.n	80144c6 <HAL_SPI_Init+0x6e>
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	2b08      	cmp	r3, #8
 80144c4:	d811      	bhi.n	80144ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80144ca:	4a63      	ldr	r2, [pc, #396]	; (8014658 <HAL_SPI_Init+0x200>)
 80144cc:	4293      	cmp	r3, r2
 80144ce:	d009      	beq.n	80144e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	4a61      	ldr	r2, [pc, #388]	; (801465c <HAL_SPI_Init+0x204>)
 80144d6:	4293      	cmp	r3, r2
 80144d8:	d004      	beq.n	80144e4 <HAL_SPI_Init+0x8c>
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	4a60      	ldr	r2, [pc, #384]	; (8014660 <HAL_SPI_Init+0x208>)
 80144e0:	4293      	cmp	r3, r2
 80144e2:	d104      	bne.n	80144ee <HAL_SPI_Init+0x96>
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	2b10      	cmp	r3, #16
 80144e8:	d901      	bls.n	80144ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80144ea:	2301      	movs	r3, #1
 80144ec:	e0af      	b.n	801464e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80144f4:	b2db      	uxtb	r3, r3
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d106      	bne.n	8014508 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	2200      	movs	r2, #0
 80144fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f7f6 fc5c 	bl	800adc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2202      	movs	r2, #2
 801450c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	681a      	ldr	r2, [r3, #0]
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	f022 0201 	bic.w	r2, r2, #1
 801451e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	689b      	ldr	r3, [r3, #8]
 8014526:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801452a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	699b      	ldr	r3, [r3, #24]
 8014530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014534:	d119      	bne.n	801456a <HAL_SPI_Init+0x112>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	685b      	ldr	r3, [r3, #4]
 801453a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801453e:	d103      	bne.n	8014548 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014544:	2b00      	cmp	r3, #0
 8014546:	d008      	beq.n	801455a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801454c:	2b00      	cmp	r3, #0
 801454e:	d10c      	bne.n	801456a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014558:	d107      	bne.n	801456a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	681a      	ldr	r2, [r3, #0]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014568:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	69da      	ldr	r2, [r3, #28]
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014572:	431a      	orrs	r2, r3
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	431a      	orrs	r2, r3
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801457c:	ea42 0103 	orr.w	r1, r2, r3
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	68da      	ldr	r2, [r3, #12]
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	430a      	orrs	r2, r1
 801458a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014594:	431a      	orrs	r2, r3
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801459a:	431a      	orrs	r2, r3
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	699b      	ldr	r3, [r3, #24]
 80145a0:	431a      	orrs	r2, r3
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	691b      	ldr	r3, [r3, #16]
 80145a6:	431a      	orrs	r2, r3
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	695b      	ldr	r3, [r3, #20]
 80145ac:	431a      	orrs	r2, r3
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	6a1b      	ldr	r3, [r3, #32]
 80145b2:	431a      	orrs	r2, r3
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	685b      	ldr	r3, [r3, #4]
 80145b8:	431a      	orrs	r2, r3
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145be:	431a      	orrs	r2, r3
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	689b      	ldr	r3, [r3, #8]
 80145c4:	431a      	orrs	r2, r3
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80145ca:	ea42 0103 	orr.w	r1, r2, r3
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	430a      	orrs	r2, r1
 80145d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	685b      	ldr	r3, [r3, #4]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d113      	bne.n	801460a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	689b      	ldr	r3, [r3, #8]
 80145e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80145f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	689b      	ldr	r3, [r3, #8]
 80145fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014608:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	f022 0201 	bic.w	r2, r2, #1
 8014618:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014622:	2b00      	cmp	r3, #0
 8014624:	d00a      	beq.n	801463c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	68db      	ldr	r3, [r3, #12]
 801462c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	430a      	orrs	r2, r1
 801463a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2200      	movs	r2, #0
 8014640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2201      	movs	r2, #1
 8014648:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 801464c:	2300      	movs	r3, #0
}
 801464e:	4618      	mov	r0, r3
 8014650:	3710      	adds	r7, #16
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	40013000 	.word	0x40013000
 801465c:	40003800 	.word	0x40003800
 8014660:	40003c00 	.word	0x40003c00

08014664 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b086      	sub	sp, #24
 8014668:	af00      	add	r7, sp, #0
 801466a:	60f8      	str	r0, [r7, #12]
 801466c:	60b9      	str	r1, [r7, #8]
 801466e:	4613      	mov	r3, r2
 8014670:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014672:	2300      	movs	r3, #0
 8014674:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801467c:	2b01      	cmp	r3, #1
 801467e:	d101      	bne.n	8014684 <HAL_SPI_Transmit_DMA+0x20>
 8014680:	2302      	movs	r3, #2
 8014682:	e12c      	b.n	80148de <HAL_SPI_Transmit_DMA+0x27a>
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	2201      	movs	r2, #1
 8014688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014692:	b2db      	uxtb	r3, r3
 8014694:	2b01      	cmp	r3, #1
 8014696:	d007      	beq.n	80146a8 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8014698:	2302      	movs	r3, #2
 801469a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	2200      	movs	r2, #0
 80146a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80146a4:	7dfb      	ldrb	r3, [r7, #23]
 80146a6:	e11a      	b.n	80148de <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 80146a8:	68bb      	ldr	r3, [r7, #8]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d002      	beq.n	80146b4 <HAL_SPI_Transmit_DMA+0x50>
 80146ae:	88fb      	ldrh	r3, [r7, #6]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d107      	bne.n	80146c4 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80146b4:	2301      	movs	r3, #1
 80146b6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	2200      	movs	r2, #0
 80146bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80146c0:	7dfb      	ldrb	r3, [r7, #23]
 80146c2:	e10c      	b.n	80148de <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	2203      	movs	r2, #3
 80146c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	2200      	movs	r2, #0
 80146d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	68ba      	ldr	r2, [r7, #8]
 80146d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	88fa      	ldrh	r2, [r7, #6]
 80146de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	88fa      	ldrh	r2, [r7, #6]
 80146e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	2200      	movs	r2, #0
 80146ee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	2200      	movs	r2, #0
 80146f4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	2200      	movs	r2, #0
 80146fa:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	2200      	movs	r2, #0
 8014700:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	2200      	movs	r2, #0
 8014708:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	689b      	ldr	r3, [r3, #8]
 8014710:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8014714:	d107      	bne.n	8014726 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	681a      	ldr	r2, [r3, #0]
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014724:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	68db      	ldr	r3, [r3, #12]
 801472a:	2b0f      	cmp	r3, #15
 801472c:	d905      	bls.n	801473a <HAL_SPI_Transmit_DMA+0xd6>
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014732:	699b      	ldr	r3, [r3, #24]
 8014734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014738:	d10f      	bne.n	801475a <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801473e:	2b07      	cmp	r3, #7
 8014740:	d913      	bls.n	801476a <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014746:	699b      	ldr	r3, [r3, #24]
 8014748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801474c:	d00d      	beq.n	801476a <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014752:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014758:	d007      	beq.n	801476a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 801475a:	2301      	movs	r3, #1
 801475c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	2200      	movs	r2, #0
 8014762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014766:	7dfb      	ldrb	r3, [r7, #23]
 8014768:	e0b9      	b.n	80148de <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	68db      	ldr	r3, [r3, #12]
 801476e:	2b07      	cmp	r3, #7
 8014770:	d820      	bhi.n	80147b4 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014776:	699b      	ldr	r3, [r3, #24]
 8014778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801477c:	d109      	bne.n	8014792 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014784:	b29b      	uxth	r3, r3
 8014786:	3301      	adds	r3, #1
 8014788:	105b      	asrs	r3, r3, #1
 801478a:	b29a      	uxth	r2, r3
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014796:	699b      	ldr	r3, [r3, #24]
 8014798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801479c:	d11e      	bne.n	80147dc <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	3303      	adds	r3, #3
 80147a8:	109b      	asrs	r3, r3, #2
 80147aa:	b29a      	uxth	r2, r3
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80147b2:	e013      	b.n	80147dc <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	68db      	ldr	r3, [r3, #12]
 80147b8:	2b0f      	cmp	r3, #15
 80147ba:	d80f      	bhi.n	80147dc <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147c0:	699b      	ldr	r3, [r3, #24]
 80147c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80147c6:	d109      	bne.n	80147dc <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	3301      	adds	r3, #1
 80147d2:	105b      	asrs	r3, r3, #1
 80147d4:	b29a      	uxth	r2, r3
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147e0:	4a41      	ldr	r2, [pc, #260]	; (80148e8 <HAL_SPI_Transmit_DMA+0x284>)
 80147e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147e8:	4a40      	ldr	r2, [pc, #256]	; (80148ec <HAL_SPI_Transmit_DMA+0x288>)
 80147ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147f0:	4a3f      	ldr	r2, [pc, #252]	; (80148f0 <HAL_SPI_Transmit_DMA+0x28c>)
 80147f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147f8:	2200      	movs	r2, #0
 80147fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	689a      	ldr	r2, [r3, #8]
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801480a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014814:	4619      	mov	r1, r3
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	3320      	adds	r3, #32
 801481c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014824:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014826:	f7f8 fb65 	bl	800cef4 <HAL_DMA_Start_IT>
 801482a:	4603      	mov	r3, r0
 801482c:	2b00      	cmp	r3, #0
 801482e:	d013      	beq.n	8014858 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014836:	f043 0210 	orr.w	r2, r3, #16
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	2200      	movs	r2, #0
 8014844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	2201      	movs	r2, #1
 801484c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8014850:	2301      	movs	r3, #1
 8014852:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8014854:	7dfb      	ldrb	r3, [r7, #23]
 8014856:	e042      	b.n	80148de <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801485c:	69db      	ldr	r3, [r3, #28]
 801485e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014862:	d108      	bne.n	8014876 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	6859      	ldr	r1, [r3, #4]
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	681a      	ldr	r2, [r3, #0]
 801486e:	4b21      	ldr	r3, [pc, #132]	; (80148f4 <HAL_SPI_Transmit_DMA+0x290>)
 8014870:	400b      	ands	r3, r1
 8014872:	6053      	str	r3, [r2, #4]
 8014874:	e009      	b.n	801488a <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	685a      	ldr	r2, [r3, #4]
 801487c:	4b1d      	ldr	r3, [pc, #116]	; (80148f4 <HAL_SPI_Transmit_DMA+0x290>)
 801487e:	4013      	ands	r3, r2
 8014880:	88f9      	ldrh	r1, [r7, #6]
 8014882:	68fa      	ldr	r2, [r7, #12]
 8014884:	6812      	ldr	r2, [r2, #0]
 8014886:	430b      	orrs	r3, r1
 8014888:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	689a      	ldr	r2, [r3, #8]
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014898:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	691a      	ldr	r2, [r3, #16]
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80148a8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	681a      	ldr	r2, [r3, #0]
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	f042 0201 	orr.w	r2, r2, #1
 80148b8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80148c2:	d107      	bne.n	80148d4 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	681a      	ldr	r2, [r3, #0]
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80148d2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	2200      	movs	r2, #0
 80148d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80148dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80148de:	4618      	mov	r0, r3
 80148e0:	3718      	adds	r7, #24
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bd80      	pop	{r7, pc}
 80148e6:	bf00      	nop
 80148e8:	0801546f 	.word	0x0801546f
 80148ec:	0801539d 	.word	0x0801539d
 80148f0:	080154c3 	.word	0x080154c3
 80148f4:	ffff0000 	.word	0xffff0000

080148f8 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b086      	sub	sp, #24
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	60f8      	str	r0, [r7, #12]
 8014900:	60b9      	str	r1, [r7, #8]
 8014902:	4613      	mov	r3, r2
 8014904:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014906:	2300      	movs	r3, #0
 8014908:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	689b      	ldr	r3, [r3, #8]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d110      	bne.n	8014934 <HAL_SPI_Receive_DMA+0x3c>
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801491a:	d10b      	bne.n	8014934 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	2204      	movs	r2, #4
 8014920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8014924:	88fb      	ldrh	r3, [r7, #6]
 8014926:	68ba      	ldr	r2, [r7, #8]
 8014928:	68b9      	ldr	r1, [r7, #8]
 801492a:	68f8      	ldr	r0, [r7, #12]
 801492c:	f000 f940 	bl	8014bb0 <HAL_SPI_TransmitReceive_DMA>
 8014930:	4603      	mov	r3, r0
 8014932:	e130      	b.n	8014b96 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801493a:	2b01      	cmp	r3, #1
 801493c:	d101      	bne.n	8014942 <HAL_SPI_Receive_DMA+0x4a>
 801493e:	2302      	movs	r3, #2
 8014940:	e129      	b.n	8014b96 <HAL_SPI_Receive_DMA+0x29e>
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	2201      	movs	r2, #1
 8014946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014950:	b2db      	uxtb	r3, r3
 8014952:	2b01      	cmp	r3, #1
 8014954:	d007      	beq.n	8014966 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 8014956:	2302      	movs	r3, #2
 8014958:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	2200      	movs	r2, #0
 801495e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014962:	7dfb      	ldrb	r3, [r7, #23]
 8014964:	e117      	b.n	8014b96 <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d002      	beq.n	8014972 <HAL_SPI_Receive_DMA+0x7a>
 801496c:	88fb      	ldrh	r3, [r7, #6]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d107      	bne.n	8014982 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 8014972:	2301      	movs	r3, #1
 8014974:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	2200      	movs	r2, #0
 801497a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801497e:	7dfb      	ldrb	r3, [r7, #23]
 8014980:	e109      	b.n	8014b96 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	2204      	movs	r2, #4
 8014986:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	2200      	movs	r2, #0
 801498e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	68ba      	ldr	r2, [r7, #8]
 8014996:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	88fa      	ldrh	r2, [r7, #6]
 801499c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	88fa      	ldrh	r2, [r7, #6]
 80149a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	2200      	movs	r2, #0
 80149ac:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2200      	movs	r2, #0
 80149b2:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	2200      	movs	r2, #0
 80149b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	2200      	movs	r2, #0
 80149c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	689b      	ldr	r3, [r3, #8]
 80149c8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80149cc:	d107      	bne.n	80149de <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	681a      	ldr	r2, [r3, #0]
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80149dc:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	68db      	ldr	r3, [r3, #12]
 80149e2:	2b0f      	cmp	r3, #15
 80149e4:	d905      	bls.n	80149f2 <HAL_SPI_Receive_DMA+0xfa>
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80149ea:	699b      	ldr	r3, [r3, #24]
 80149ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80149f0:	d10f      	bne.n	8014a12 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80149f6:	2b07      	cmp	r3, #7
 80149f8:	d913      	bls.n	8014a22 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80149fe:	699b      	ldr	r3, [r3, #24]
 8014a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014a04:	d00d      	beq.n	8014a22 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a0a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014a10:	d007      	beq.n	8014a22 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8014a12:	2301      	movs	r3, #1
 8014a14:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	2200      	movs	r2, #0
 8014a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014a1e:	7dfb      	ldrb	r3, [r7, #23]
 8014a20:	e0b9      	b.n	8014b96 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	689a      	ldr	r2, [r3, #8]
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8014a30:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	68db      	ldr	r3, [r3, #12]
 8014a36:	2b07      	cmp	r3, #7
 8014a38:	d820      	bhi.n	8014a7c <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a3e:	699b      	ldr	r3, [r3, #24]
 8014a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014a44:	d109      	bne.n	8014a5a <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	3301      	adds	r3, #1
 8014a50:	105b      	asrs	r3, r3, #1
 8014a52:	b29a      	uxth	r2, r3
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a5e:	699b      	ldr	r3, [r3, #24]
 8014a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014a64:	d11e      	bne.n	8014aa4 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014a6c:	b29b      	uxth	r3, r3
 8014a6e:	3303      	adds	r3, #3
 8014a70:	109b      	asrs	r3, r3, #2
 8014a72:	b29a      	uxth	r2, r3
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014a7a:	e013      	b.n	8014aa4 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	2b0f      	cmp	r3, #15
 8014a82:	d80f      	bhi.n	8014aa4 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a88:	699b      	ldr	r3, [r3, #24]
 8014a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014a8e:	d109      	bne.n	8014aa4 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014a96:	b29b      	uxth	r3, r3
 8014a98:	3301      	adds	r3, #1
 8014a9a:	105b      	asrs	r3, r3, #1
 8014a9c:	b29a      	uxth	r2, r3
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014aa8:	4a3d      	ldr	r2, [pc, #244]	; (8014ba0 <HAL_SPI_Receive_DMA+0x2a8>)
 8014aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ab0:	4a3c      	ldr	r2, [pc, #240]	; (8014ba4 <HAL_SPI_Receive_DMA+0x2ac>)
 8014ab2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ab8:	4a3b      	ldr	r2, [pc, #236]	; (8014ba8 <HAL_SPI_Receive_DMA+0x2b0>)
 8014aba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	3330      	adds	r3, #48	; 0x30
 8014ace:	4619      	mov	r1, r3
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014ad4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014adc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014ade:	f7f8 fa09 	bl	800cef4 <HAL_DMA_Start_IT>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d013      	beq.n	8014b10 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014aee:	f043 0210 	orr.w	r2, r3, #16
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	2200      	movs	r2, #0
 8014afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2201      	movs	r2, #1
 8014b04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8014b08:	2301      	movs	r3, #1
 8014b0a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8014b0c:	7dfb      	ldrb	r3, [r7, #23]
 8014b0e:	e042      	b.n	8014b96 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b14:	69db      	ldr	r3, [r3, #28]
 8014b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b1a:	d108      	bne.n	8014b2e <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	6859      	ldr	r1, [r3, #4]
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	681a      	ldr	r2, [r3, #0]
 8014b26:	4b21      	ldr	r3, [pc, #132]	; (8014bac <HAL_SPI_Receive_DMA+0x2b4>)
 8014b28:	400b      	ands	r3, r1
 8014b2a:	6053      	str	r3, [r2, #4]
 8014b2c:	e009      	b.n	8014b42 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	685a      	ldr	r2, [r3, #4]
 8014b34:	4b1d      	ldr	r3, [pc, #116]	; (8014bac <HAL_SPI_Receive_DMA+0x2b4>)
 8014b36:	4013      	ands	r3, r2
 8014b38:	88f9      	ldrh	r1, [r7, #6]
 8014b3a:	68fa      	ldr	r2, [r7, #12]
 8014b3c:	6812      	ldr	r2, [r2, #0]
 8014b3e:	430b      	orrs	r3, r1
 8014b40:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	689a      	ldr	r2, [r3, #8]
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014b50:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	691a      	ldr	r2, [r3, #16]
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8014b60:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	681a      	ldr	r2, [r3, #0]
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	f042 0201 	orr.w	r2, r2, #1
 8014b70:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	685b      	ldr	r3, [r3, #4]
 8014b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014b7a:	d107      	bne.n	8014b8c <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	681a      	ldr	r2, [r3, #0]
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014b8a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	2200      	movs	r2, #0
 8014b90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8014b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3718      	adds	r7, #24
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	0801548b 	.word	0x0801548b
 8014ba4:	080153e3 	.word	0x080153e3
 8014ba8:	080154c3 	.word	0x080154c3
 8014bac:	ffff0000 	.word	0xffff0000

08014bb0 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b086      	sub	sp, #24
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	60f8      	str	r0, [r7, #12]
 8014bb8:	60b9      	str	r1, [r7, #8]
 8014bba:	607a      	str	r2, [r7, #4]
 8014bbc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014bc8:	2b01      	cmp	r3, #1
 8014bca:	d101      	bne.n	8014bd0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8014bcc:	2302      	movs	r3, #2
 8014bce:	e1b4      	b.n	8014f3a <HAL_SPI_TransmitReceive_DMA+0x38a>
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	2201      	movs	r2, #1
 8014bd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014bde:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8014be6:	7dbb      	ldrb	r3, [r7, #22]
 8014be8:	2b01      	cmp	r3, #1
 8014bea:	d012      	beq.n	8014c12 <HAL_SPI_TransmitReceive_DMA+0x62>
 8014bec:	693b      	ldr	r3, [r7, #16]
 8014bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014bf2:	d106      	bne.n	8014c02 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d102      	bne.n	8014c02 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8014bfc:	7dbb      	ldrb	r3, [r7, #22]
 8014bfe:	2b04      	cmp	r3, #4
 8014c00:	d007      	beq.n	8014c12 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8014c02:	2302      	movs	r3, #2
 8014c04:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014c0e:	7dfb      	ldrb	r3, [r7, #23]
 8014c10:	e193      	b.n	8014f3a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d005      	beq.n	8014c24 <HAL_SPI_TransmitReceive_DMA+0x74>
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d002      	beq.n	8014c24 <HAL_SPI_TransmitReceive_DMA+0x74>
 8014c1e:	887b      	ldrh	r3, [r7, #2]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d107      	bne.n	8014c34 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8014c24:	2301      	movs	r3, #1
 8014c26:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014c30:	7dfb      	ldrb	r3, [r7, #23]
 8014c32:	e182      	b.n	8014f3a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014c3a:	b2db      	uxtb	r3, r3
 8014c3c:	2b04      	cmp	r3, #4
 8014c3e:	d003      	beq.n	8014c48 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	2205      	movs	r2, #5
 8014c44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	68ba      	ldr	r2, [r7, #8]
 8014c54:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	887a      	ldrh	r2, [r7, #2]
 8014c5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	887a      	ldrh	r2, [r7, #2]
 8014c62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	687a      	ldr	r2, [r7, #4]
 8014c6a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	887a      	ldrh	r2, [r7, #2]
 8014c70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	887a      	ldrh	r2, [r7, #2]
 8014c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	2200      	movs	r2, #0
 8014c80:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	2200      	movs	r2, #0
 8014c86:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	689a      	ldr	r2, [r3, #8]
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8014c96:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	68db      	ldr	r3, [r3, #12]
 8014c9c:	2b0f      	cmp	r3, #15
 8014c9e:	d905      	bls.n	8014cac <HAL_SPI_TransmitReceive_DMA+0xfc>
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ca4:	699b      	ldr	r3, [r3, #24]
 8014ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014caa:	d10f      	bne.n	8014ccc <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014cb0:	2b07      	cmp	r3, #7
 8014cb2:	d913      	bls.n	8014cdc <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cb8:	699b      	ldr	r3, [r3, #24]
 8014cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014cbe:	d00d      	beq.n	8014cdc <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cc4:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014cca:	d007      	beq.n	8014cdc <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8014ccc:	2301      	movs	r3, #1
 8014cce:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014cd8:	7dfb      	ldrb	r3, [r7, #23]
 8014cda:	e12e      	b.n	8014f3a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	68db      	ldr	r3, [r3, #12]
 8014ce0:	2b07      	cmp	r3, #7
 8014ce2:	d840      	bhi.n	8014d66 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ce8:	699b      	ldr	r3, [r3, #24]
 8014cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014cee:	d109      	bne.n	8014d04 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	3301      	adds	r3, #1
 8014cfa:	105b      	asrs	r3, r3, #1
 8014cfc:	b29a      	uxth	r2, r3
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d08:	699b      	ldr	r3, [r3, #24]
 8014d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014d0e:	d109      	bne.n	8014d24 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014d16:	b29b      	uxth	r3, r3
 8014d18:	3303      	adds	r3, #3
 8014d1a:	109b      	asrs	r3, r3, #2
 8014d1c:	b29a      	uxth	r2, r3
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d28:	699b      	ldr	r3, [r3, #24]
 8014d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014d2e:	d109      	bne.n	8014d44 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014d36:	b29b      	uxth	r3, r3
 8014d38:	3301      	adds	r3, #1
 8014d3a:	105b      	asrs	r3, r3, #1
 8014d3c:	b29a      	uxth	r2, r3
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d48:	699b      	ldr	r3, [r3, #24]
 8014d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014d4e:	d12e      	bne.n	8014dae <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	3303      	adds	r3, #3
 8014d5a:	109b      	asrs	r3, r3, #2
 8014d5c:	b29a      	uxth	r2, r3
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014d64:	e023      	b.n	8014dae <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	68db      	ldr	r3, [r3, #12]
 8014d6a:	2b0f      	cmp	r3, #15
 8014d6c:	d81f      	bhi.n	8014dae <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d72:	699b      	ldr	r3, [r3, #24]
 8014d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014d78:	d109      	bne.n	8014d8e <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	3301      	adds	r3, #1
 8014d84:	105b      	asrs	r3, r3, #1
 8014d86:	b29a      	uxth	r2, r3
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d92:	699b      	ldr	r3, [r3, #24]
 8014d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014d98:	d109      	bne.n	8014dae <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014da0:	b29b      	uxth	r3, r3
 8014da2:	3301      	adds	r3, #1
 8014da4:	105b      	asrs	r3, r3, #1
 8014da6:	b29a      	uxth	r2, r3
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014db4:	b2db      	uxtb	r3, r3
 8014db6:	2b04      	cmp	r3, #4
 8014db8:	d108      	bne.n	8014dcc <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014dbe:	4a61      	ldr	r2, [pc, #388]	; (8014f44 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8014dc0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014dc6:	4a60      	ldr	r2, [pc, #384]	; (8014f48 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8014dc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8014dca:	e007      	b.n	8014ddc <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014dd0:	4a5e      	ldr	r2, [pc, #376]	; (8014f4c <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8014dd2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014dd8:	4a5d      	ldr	r2, [pc, #372]	; (8014f50 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8014dda:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014de0:	4a5c      	ldr	r2, [pc, #368]	; (8014f54 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8014de2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014de8:	2200      	movs	r2, #0
 8014dea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	3330      	adds	r3, #48	; 0x30
 8014df6:	4619      	mov	r1, r3
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014dfc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014e04:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014e06:	f7f8 f875 	bl	800cef4 <HAL_DMA_Start_IT>
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d013      	beq.n	8014e38 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014e16:	f043 0210 	orr.w	r2, r3, #16
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	2200      	movs	r2, #0
 8014e24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	2201      	movs	r2, #1
 8014e2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8014e30:	2301      	movs	r3, #1
 8014e32:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8014e34:	7dfb      	ldrb	r3, [r7, #23]
 8014e36:	e080      	b.n	8014f3a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	689a      	ldr	r2, [r3, #8]
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014e46:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e54:	2200      	movs	r2, #0
 8014e56:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e64:	2200      	movs	r2, #0
 8014e66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014e70:	4619      	mov	r1, r3
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	3320      	adds	r3, #32
 8014e78:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014e80:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014e82:	f7f8 f837 	bl	800cef4 <HAL_DMA_Start_IT>
 8014e86:	4603      	mov	r3, r0
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d013      	beq.n	8014eb4 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014e92:	f043 0210 	orr.w	r2, r3, #16
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	2201      	movs	r2, #1
 8014ea8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8014eac:	2301      	movs	r3, #1
 8014eae:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8014eb0:	7dfb      	ldrb	r3, [r7, #23]
 8014eb2:	e042      	b.n	8014f3a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014eb8:	69db      	ldr	r3, [r3, #28]
 8014eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ebe:	d108      	bne.n	8014ed2 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	6859      	ldr	r1, [r3, #4]
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	681a      	ldr	r2, [r3, #0]
 8014eca:	4b23      	ldr	r3, [pc, #140]	; (8014f58 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8014ecc:	400b      	ands	r3, r1
 8014ece:	6053      	str	r3, [r2, #4]
 8014ed0:	e009      	b.n	8014ee6 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	685a      	ldr	r2, [r3, #4]
 8014ed8:	4b1f      	ldr	r3, [pc, #124]	; (8014f58 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8014eda:	4013      	ands	r3, r2
 8014edc:	8879      	ldrh	r1, [r7, #2]
 8014ede:	68fa      	ldr	r2, [r7, #12]
 8014ee0:	6812      	ldr	r2, [r2, #0]
 8014ee2:	430b      	orrs	r3, r1
 8014ee4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	689a      	ldr	r2, [r3, #8]
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014ef4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	691a      	ldr	r2, [r3, #16]
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8014f04:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	681a      	ldr	r2, [r3, #0]
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	f042 0201 	orr.w	r2, r2, #1
 8014f14:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	685b      	ldr	r3, [r3, #4]
 8014f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014f1e:	d107      	bne.n	8014f30 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	681a      	ldr	r2, [r3, #0]
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014f2e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	2200      	movs	r2, #0
 8014f34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8014f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3718      	adds	r7, #24
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	0801548b 	.word	0x0801548b
 8014f48:	080153e3 	.word	0x080153e3
 8014f4c:	080154a7 	.word	0x080154a7
 8014f50:	08015429 	.word	0x08015429
 8014f54:	080154c3 	.word	0x080154c3
 8014f58:	ffff0000 	.word	0xffff0000

08014f5c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b08a      	sub	sp, #40	; 0x28
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	691b      	ldr	r3, [r3, #16]
 8014f6a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	695b      	ldr	r3, [r3, #20]
 8014f72:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8014f74:	6a3a      	ldr	r2, [r7, #32]
 8014f76:	69fb      	ldr	r3, [r7, #28]
 8014f78:	4013      	ands	r3, r2
 8014f7a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	689b      	ldr	r3, [r3, #8]
 8014f82:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8014f84:	2300      	movs	r3, #0
 8014f86:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014f8e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	3330      	adds	r3, #48	; 0x30
 8014f96:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8014f98:	69bb      	ldr	r3, [r7, #24]
 8014f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d113      	bne.n	8014fca <HAL_SPI_IRQHandler+0x6e>
 8014fa2:	69bb      	ldr	r3, [r7, #24]
 8014fa4:	f003 0320 	and.w	r3, r3, #32
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d10e      	bne.n	8014fca <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8014fac:	69bb      	ldr	r3, [r7, #24]
 8014fae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d009      	beq.n	8014fca <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	4798      	blx	r3
    hspi->RxISR(hspi);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fc2:	6878      	ldr	r0, [r7, #4]
 8014fc4:	4798      	blx	r3
    handled = 1UL;
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8014fca:	69bb      	ldr	r3, [r7, #24]
 8014fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d10f      	bne.n	8014ff4 <HAL_SPI_IRQHandler+0x98>
 8014fd4:	69bb      	ldr	r3, [r7, #24]
 8014fd6:	f003 0301 	and.w	r3, r3, #1
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d00a      	beq.n	8014ff4 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8014fde:	69bb      	ldr	r3, [r7, #24]
 8014fe0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d105      	bne.n	8014ff4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	4798      	blx	r3
    handled = 1UL;
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8014ff4:	69bb      	ldr	r3, [r7, #24]
 8014ff6:	f003 0320 	and.w	r3, r3, #32
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d10f      	bne.n	801501e <HAL_SPI_IRQHandler+0xc2>
 8014ffe:	69bb      	ldr	r3, [r7, #24]
 8015000:	f003 0302 	and.w	r3, r3, #2
 8015004:	2b00      	cmp	r3, #0
 8015006:	d00a      	beq.n	801501e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015008:	69bb      	ldr	r3, [r7, #24]
 801500a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801500e:	2b00      	cmp	r3, #0
 8015010:	d105      	bne.n	801501e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015016:	6878      	ldr	r0, [r7, #4]
 8015018:	4798      	blx	r3
    handled = 1UL;
 801501a:	2301      	movs	r3, #1
 801501c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015020:	2b00      	cmp	r3, #0
 8015022:	f040 815a 	bne.w	80152da <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015026:	69bb      	ldr	r3, [r7, #24]
 8015028:	f003 0308 	and.w	r3, r3, #8
 801502c:	2b00      	cmp	r3, #0
 801502e:	f000 808b 	beq.w	8015148 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	699a      	ldr	r2, [r3, #24]
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	f042 0208 	orr.w	r2, r2, #8
 8015040:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	699a      	ldr	r2, [r3, #24]
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	f042 0210 	orr.w	r2, r2, #16
 8015050:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	699a      	ldr	r2, [r3, #24]
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015060:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	691a      	ldr	r2, [r3, #16]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	f022 0208 	bic.w	r2, r2, #8
 8015070:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	689b      	ldr	r3, [r3, #8]
 8015078:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801507c:	2b00      	cmp	r3, #0
 801507e:	d13d      	bne.n	80150fc <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015080:	e036      	b.n	80150f0 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	68db      	ldr	r3, [r3, #12]
 8015086:	2b0f      	cmp	r3, #15
 8015088:	d90b      	bls.n	80150a2 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681a      	ldr	r2, [r3, #0]
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015092:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8015094:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801509a:	1d1a      	adds	r2, r3, #4
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	665a      	str	r2, [r3, #100]	; 0x64
 80150a0:	e01d      	b.n	80150de <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	68db      	ldr	r3, [r3, #12]
 80150a6:	2b07      	cmp	r3, #7
 80150a8:	d90b      	bls.n	80150c2 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80150ae:	68fa      	ldr	r2, [r7, #12]
 80150b0:	8812      	ldrh	r2, [r2, #0]
 80150b2:	b292      	uxth	r2, r2
 80150b4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80150ba:	1c9a      	adds	r2, r3, #2
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	665a      	str	r2, [r3, #100]	; 0x64
 80150c0:	e00d      	b.n	80150de <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80150ce:	7812      	ldrb	r2, [r2, #0]
 80150d0:	b2d2      	uxtb	r2, r2
 80150d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80150d8:	1c5a      	adds	r2, r3, #1
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	3b01      	subs	r3, #1
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d1c2      	bne.n	8015082 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f000 fa1d 	bl	801553c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	2201      	movs	r2, #1
 8015106:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015110:	2b00      	cmp	r3, #0
 8015112:	d003      	beq.n	801511c <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f000 f929 	bl	801536c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801511a:	e0e3      	b.n	80152e4 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801511c:	7cfb      	ldrb	r3, [r7, #19]
 801511e:	2b05      	cmp	r3, #5
 8015120:	d103      	bne.n	801512a <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f000 f8fa 	bl	801531c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015128:	e0d9      	b.n	80152de <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801512a:	7cfb      	ldrb	r3, [r7, #19]
 801512c:	2b04      	cmp	r3, #4
 801512e:	d103      	bne.n	8015138 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	f000 f8e9 	bl	8015308 <HAL_SPI_RxCpltCallback>
    return;
 8015136:	e0d2      	b.n	80152de <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015138:	7cfb      	ldrb	r3, [r7, #19]
 801513a:	2b03      	cmp	r3, #3
 801513c:	f040 80cf 	bne.w	80152de <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f000 f8d7 	bl	80152f4 <HAL_SPI_TxCpltCallback>
    return;
 8015146:	e0ca      	b.n	80152de <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015148:	69fb      	ldr	r3, [r7, #28]
 801514a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801514e:	2b00      	cmp	r3, #0
 8015150:	d00d      	beq.n	801516e <HAL_SPI_IRQHandler+0x212>
 8015152:	6a3b      	ldr	r3, [r7, #32]
 8015154:	f003 0308 	and.w	r3, r3, #8
 8015158:	2b00      	cmp	r3, #0
 801515a:	d008      	beq.n	801516e <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	699a      	ldr	r2, [r3, #24]
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801516a:	619a      	str	r2, [r3, #24]

    return;
 801516c:	e0ba      	b.n	80152e4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801516e:	69bb      	ldr	r3, [r7, #24]
 8015170:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8015174:	2b00      	cmp	r3, #0
 8015176:	f000 80b5 	beq.w	80152e4 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801517a:	69bb      	ldr	r3, [r7, #24]
 801517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015180:	2b00      	cmp	r3, #0
 8015182:	d00f      	beq.n	80151a4 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801518a:	f043 0204 	orr.w	r2, r3, #4
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	699a      	ldr	r2, [r3, #24]
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80151a2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80151a4:	69bb      	ldr	r3, [r7, #24]
 80151a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d00f      	beq.n	80151ce <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80151b4:	f043 0201 	orr.w	r2, r3, #1
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	699a      	ldr	r2, [r3, #24]
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80151cc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80151ce:	69bb      	ldr	r3, [r7, #24]
 80151d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d00f      	beq.n	80151f8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80151de:	f043 0208 	orr.w	r2, r3, #8
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	699a      	ldr	r2, [r3, #24]
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80151f6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80151f8:	69bb      	ldr	r3, [r7, #24]
 80151fa:	f003 0320 	and.w	r3, r3, #32
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d00f      	beq.n	8015222 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015208:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	699a      	ldr	r2, [r3, #24]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	f042 0220 	orr.w	r2, r2, #32
 8015220:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015228:	2b00      	cmp	r3, #0
 801522a:	d05a      	beq.n	80152e2 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	681a      	ldr	r2, [r3, #0]
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	f022 0201 	bic.w	r2, r2, #1
 801523a:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	6919      	ldr	r1, [r3, #16]
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	681a      	ldr	r2, [r3, #0]
 8015246:	4b29      	ldr	r3, [pc, #164]	; (80152ec <HAL_SPI_IRQHandler+0x390>)
 8015248:	400b      	ands	r3, r1
 801524a:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801524c:	697b      	ldr	r3, [r7, #20]
 801524e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8015252:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8015256:	d138      	bne.n	80152ca <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	689a      	ldr	r2, [r3, #8]
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8015266:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801526c:	2b00      	cmp	r3, #0
 801526e:	d013      	beq.n	8015298 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015274:	4a1e      	ldr	r2, [pc, #120]	; (80152f0 <HAL_SPI_IRQHandler+0x394>)
 8015276:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801527c:	4618      	mov	r0, r3
 801527e:	f7f8 fbc1 	bl	800da04 <HAL_DMA_Abort_IT>
 8015282:	4603      	mov	r3, r0
 8015284:	2b00      	cmp	r3, #0
 8015286:	d007      	beq.n	8015298 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801528e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801529c:	2b00      	cmp	r3, #0
 801529e:	d020      	beq.n	80152e2 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80152a4:	4a12      	ldr	r2, [pc, #72]	; (80152f0 <HAL_SPI_IRQHandler+0x394>)
 80152a6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7f8 fba9 	bl	800da04 <HAL_DMA_Abort_IT>
 80152b2:	4603      	mov	r3, r0
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d014      	beq.n	80152e2 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80152be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80152c8:	e00b      	b.n	80152e2 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	2201      	movs	r2, #1
 80152ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f000 f84a 	bl	801536c <HAL_SPI_ErrorCallback>
    return;
 80152d8:	e003      	b.n	80152e2 <HAL_SPI_IRQHandler+0x386>
    return;
 80152da:	bf00      	nop
 80152dc:	e002      	b.n	80152e4 <HAL_SPI_IRQHandler+0x388>
    return;
 80152de:	bf00      	nop
 80152e0:	e000      	b.n	80152e4 <HAL_SPI_IRQHandler+0x388>
    return;
 80152e2:	bf00      	nop
  }
}
 80152e4:	3728      	adds	r7, #40	; 0x28
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}
 80152ea:	bf00      	nop
 80152ec:	fffffc94 	.word	0xfffffc94
 80152f0:	08015509 	.word	0x08015509

080152f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80152f4:	b480      	push	{r7}
 80152f6:	b083      	sub	sp, #12
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80152fc:	bf00      	nop
 80152fe:	370c      	adds	r7, #12
 8015300:	46bd      	mov	sp, r7
 8015302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015306:	4770      	bx	lr

08015308 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015308:	b480      	push	{r7}
 801530a:	b083      	sub	sp, #12
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8015310:	bf00      	nop
 8015312:	370c      	adds	r7, #12
 8015314:	46bd      	mov	sp, r7
 8015316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531a:	4770      	bx	lr

0801531c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801531c:	b480      	push	{r7}
 801531e:	b083      	sub	sp, #12
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015324:	bf00      	nop
 8015326:	370c      	adds	r7, #12
 8015328:	46bd      	mov	sp, r7
 801532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532e:	4770      	bx	lr

08015330 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015330:	b480      	push	{r7}
 8015332:	b083      	sub	sp, #12
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015338:	bf00      	nop
 801533a:	370c      	adds	r7, #12
 801533c:	46bd      	mov	sp, r7
 801533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015342:	4770      	bx	lr

08015344 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015344:	b480      	push	{r7}
 8015346:	b083      	sub	sp, #12
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 801534c:	bf00      	nop
 801534e:	370c      	adds	r7, #12
 8015350:	46bd      	mov	sp, r7
 8015352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015356:	4770      	bx	lr

08015358 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015358:	b480      	push	{r7}
 801535a:	b083      	sub	sp, #12
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8015360:	bf00      	nop
 8015362:	370c      	adds	r7, #12
 8015364:	46bd      	mov	sp, r7
 8015366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536a:	4770      	bx	lr

0801536c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801536c:	b480      	push	{r7}
 801536e:	b083      	sub	sp, #12
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015374:	bf00      	nop
 8015376:	370c      	adds	r7, #12
 8015378:	46bd      	mov	sp, r7
 801537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537e:	4770      	bx	lr

08015380 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8015380:	b480      	push	{r7}
 8015382:	b083      	sub	sp, #12
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801538e:	b2db      	uxtb	r3, r3
}
 8015390:	4618      	mov	r0, r3
 8015392:	370c      	adds	r7, #12
 8015394:	46bd      	mov	sp, r7
 8015396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539a:	4770      	bx	lr

0801539c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b084      	sub	sp, #16
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153a8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80153b0:	b2db      	uxtb	r3, r3
 80153b2:	2b07      	cmp	r3, #7
 80153b4:	d011      	beq.n	80153da <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80153ba:	69db      	ldr	r3, [r3, #28]
 80153bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153c0:	d103      	bne.n	80153ca <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80153c2:	68f8      	ldr	r0, [r7, #12]
 80153c4:	f7ff ff96 	bl	80152f4 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80153c8:	e007      	b.n	80153da <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	691a      	ldr	r2, [r3, #16]
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	f042 0208 	orr.w	r2, r2, #8
 80153d8:	611a      	str	r2, [r3, #16]
}
 80153da:	bf00      	nop
 80153dc:	3710      	adds	r7, #16
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}

080153e2 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80153e2:	b580      	push	{r7, lr}
 80153e4:	b084      	sub	sp, #16
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153ee:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80153f6:	b2db      	uxtb	r3, r3
 80153f8:	2b07      	cmp	r3, #7
 80153fa:	d011      	beq.n	8015420 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015400:	69db      	ldr	r3, [r3, #28]
 8015402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015406:	d103      	bne.n	8015410 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8015408:	68f8      	ldr	r0, [r7, #12]
 801540a:	f7ff ff7d 	bl	8015308 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 801540e:	e007      	b.n	8015420 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	691a      	ldr	r2, [r3, #16]
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	f042 0208 	orr.w	r2, r2, #8
 801541e:	611a      	str	r2, [r3, #16]
}
 8015420:	bf00      	nop
 8015422:	3710      	adds	r7, #16
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}

08015428 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b084      	sub	sp, #16
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015434:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801543c:	b2db      	uxtb	r3, r3
 801543e:	2b07      	cmp	r3, #7
 8015440:	d011      	beq.n	8015466 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015446:	69db      	ldr	r3, [r3, #28]
 8015448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801544c:	d103      	bne.n	8015456 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 801544e:	68f8      	ldr	r0, [r7, #12]
 8015450:	f7ff ff64 	bl	801531c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8015454:	e007      	b.n	8015466 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	691a      	ldr	r2, [r3, #16]
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	f042 0208 	orr.w	r2, r2, #8
 8015464:	611a      	str	r2, [r3, #16]
}
 8015466:	bf00      	nop
 8015468:	3710      	adds	r7, #16
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}

0801546e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 801546e:	b580      	push	{r7, lr}
 8015470:	b084      	sub	sp, #16
 8015472:	af00      	add	r7, sp, #0
 8015474:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801547a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 801547c:	68f8      	ldr	r0, [r7, #12]
 801547e:	f7ff ff57 	bl	8015330 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015482:	bf00      	nop
 8015484:	3710      	adds	r7, #16
 8015486:	46bd      	mov	sp, r7
 8015488:	bd80      	pop	{r7, pc}

0801548a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801548a:	b580      	push	{r7, lr}
 801548c:	b084      	sub	sp, #16
 801548e:	af00      	add	r7, sp, #0
 8015490:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015496:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8015498:	68f8      	ldr	r0, [r7, #12]
 801549a:	f7ff ff53 	bl	8015344 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801549e:	bf00      	nop
 80154a0:	3710      	adds	r7, #16
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd80      	pop	{r7, pc}

080154a6 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80154a6:	b580      	push	{r7, lr}
 80154a8:	b084      	sub	sp, #16
 80154aa:	af00      	add	r7, sp, #0
 80154ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154b2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80154b4:	68f8      	ldr	r0, [r7, #12]
 80154b6:	f7ff ff4f 	bl	8015358 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80154ba:	bf00      	nop
 80154bc:	3710      	adds	r7, #16
 80154be:	46bd      	mov	sp, r7
 80154c0:	bd80      	pop	{r7, pc}

080154c2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80154c2:	b580      	push	{r7, lr}
 80154c4:	b084      	sub	sp, #16
 80154c6:	af00      	add	r7, sp, #0
 80154c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154ce:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	f7f9 fc15 	bl	800ed00 <HAL_DMA_GetError>
 80154d6:	4603      	mov	r3, r0
 80154d8:	2b02      	cmp	r3, #2
 80154da:	d011      	beq.n	8015500 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80154dc:	68f8      	ldr	r0, [r7, #12]
 80154de:	f000 f82d 	bl	801553c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80154e8:	f043 0210 	orr.w	r2, r3, #16
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	2201      	movs	r2, #1
 80154f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80154fa:	68f8      	ldr	r0, [r7, #12]
 80154fc:	f7ff ff36 	bl	801536c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8015500:	bf00      	nop
 8015502:	3710      	adds	r7, #16
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}

08015508 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b084      	sub	sp, #16
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015514:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	2200      	movs	r2, #0
 801551a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	2200      	movs	r2, #0
 8015522:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	2201      	movs	r2, #1
 801552a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801552e:	68f8      	ldr	r0, [r7, #12]
 8015530:	f7ff ff1c 	bl	801536c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015534:	bf00      	nop
 8015536:	3710      	adds	r7, #16
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}

0801553c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801553c:	b480      	push	{r7}
 801553e:	b085      	sub	sp, #20
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	695b      	ldr	r3, [r3, #20]
 801554a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	699a      	ldr	r2, [r3, #24]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	f042 0208 	orr.w	r2, r2, #8
 801555a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	699a      	ldr	r2, [r3, #24]
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	f042 0210 	orr.w	r2, r2, #16
 801556a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	681a      	ldr	r2, [r3, #0]
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	f022 0201 	bic.w	r2, r2, #1
 801557a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	6919      	ldr	r1, [r3, #16]
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681a      	ldr	r2, [r3, #0]
 8015586:	4b3c      	ldr	r3, [pc, #240]	; (8015678 <SPI_CloseTransfer+0x13c>)
 8015588:	400b      	ands	r3, r1
 801558a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	689a      	ldr	r2, [r3, #8]
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801559a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	2b04      	cmp	r3, #4
 80155a6:	d014      	beq.n	80155d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	f003 0320 	and.w	r3, r3, #32
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d00f      	beq.n	80155d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80155b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	699a      	ldr	r2, [r3, #24]
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	f042 0220 	orr.w	r2, r2, #32
 80155d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80155d8:	b2db      	uxtb	r3, r3
 80155da:	2b03      	cmp	r3, #3
 80155dc:	d014      	beq.n	8015608 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d00f      	beq.n	8015608 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80155ee:	f043 0204 	orr.w	r2, r3, #4
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	699a      	ldr	r2, [r3, #24]
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015606:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801560e:	2b00      	cmp	r3, #0
 8015610:	d00f      	beq.n	8015632 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015618:	f043 0201 	orr.w	r2, r3, #1
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	699a      	ldr	r2, [r3, #24]
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015630:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015638:	2b00      	cmp	r3, #0
 801563a:	d00f      	beq.n	801565c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015642:	f043 0208 	orr.w	r2, r3, #8
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	699a      	ldr	r2, [r3, #24]
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801565a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2200      	movs	r2, #0
 8015660:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2200      	movs	r2, #0
 8015668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 801566c:	bf00      	nop
 801566e:	3714      	adds	r7, #20
 8015670:	46bd      	mov	sp, r7
 8015672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015676:	4770      	bx	lr
 8015678:	fffffc90 	.word	0xfffffc90

0801567c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 801567c:	b480      	push	{r7}
 801567e:	b085      	sub	sp, #20
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015688:	095b      	lsrs	r3, r3, #5
 801568a:	3301      	adds	r3, #1
 801568c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	68db      	ldr	r3, [r3, #12]
 8015692:	3301      	adds	r3, #1
 8015694:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	3307      	adds	r3, #7
 801569a:	08db      	lsrs	r3, r3, #3
 801569c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	68fa      	ldr	r2, [r7, #12]
 80156a2:	fb02 f303 	mul.w	r3, r2, r3
}
 80156a6:	4618      	mov	r0, r3
 80156a8:	3714      	adds	r7, #20
 80156aa:	46bd      	mov	sp, r7
 80156ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b0:	4770      	bx	lr

080156b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80156b2:	b580      	push	{r7, lr}
 80156b4:	b082      	sub	sp, #8
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d101      	bne.n	80156c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80156c0:	2301      	movs	r3, #1
 80156c2:	e049      	b.n	8015758 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d106      	bne.n	80156de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	2200      	movs	r2, #0
 80156d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f7f5 ff67 	bl	800b5ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	2202      	movs	r2, #2
 80156e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681a      	ldr	r2, [r3, #0]
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	3304      	adds	r3, #4
 80156ee:	4619      	mov	r1, r3
 80156f0:	4610      	mov	r0, r2
 80156f2:	f000 faed 	bl	8015cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2201      	movs	r2, #1
 80156fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2201      	movs	r2, #1
 8015702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2201      	movs	r2, #1
 801570a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2201      	movs	r2, #1
 8015712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	2201      	movs	r2, #1
 801571a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2201      	movs	r2, #1
 8015722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	2201      	movs	r2, #1
 801572a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2201      	movs	r2, #1
 8015732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	2201      	movs	r2, #1
 801573a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2201      	movs	r2, #1
 8015742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	2201      	movs	r2, #1
 801574a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2201      	movs	r2, #1
 8015752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015756:	2300      	movs	r3, #0
}
 8015758:	4618      	mov	r0, r3
 801575a:	3708      	adds	r7, #8
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}

08015760 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015760:	b480      	push	{r7}
 8015762:	b085      	sub	sp, #20
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801576e:	b2db      	uxtb	r3, r3
 8015770:	2b01      	cmp	r3, #1
 8015772:	d001      	beq.n	8015778 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015774:	2301      	movs	r3, #1
 8015776:	e054      	b.n	8015822 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	2202      	movs	r2, #2
 801577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	68da      	ldr	r2, [r3, #12]
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	f042 0201 	orr.w	r2, r2, #1
 801578e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	4a26      	ldr	r2, [pc, #152]	; (8015830 <HAL_TIM_Base_Start_IT+0xd0>)
 8015796:	4293      	cmp	r3, r2
 8015798:	d022      	beq.n	80157e0 <HAL_TIM_Base_Start_IT+0x80>
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80157a2:	d01d      	beq.n	80157e0 <HAL_TIM_Base_Start_IT+0x80>
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	4a22      	ldr	r2, [pc, #136]	; (8015834 <HAL_TIM_Base_Start_IT+0xd4>)
 80157aa:	4293      	cmp	r3, r2
 80157ac:	d018      	beq.n	80157e0 <HAL_TIM_Base_Start_IT+0x80>
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	4a21      	ldr	r2, [pc, #132]	; (8015838 <HAL_TIM_Base_Start_IT+0xd8>)
 80157b4:	4293      	cmp	r3, r2
 80157b6:	d013      	beq.n	80157e0 <HAL_TIM_Base_Start_IT+0x80>
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	4a1f      	ldr	r2, [pc, #124]	; (801583c <HAL_TIM_Base_Start_IT+0xdc>)
 80157be:	4293      	cmp	r3, r2
 80157c0:	d00e      	beq.n	80157e0 <HAL_TIM_Base_Start_IT+0x80>
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	4a1e      	ldr	r2, [pc, #120]	; (8015840 <HAL_TIM_Base_Start_IT+0xe0>)
 80157c8:	4293      	cmp	r3, r2
 80157ca:	d009      	beq.n	80157e0 <HAL_TIM_Base_Start_IT+0x80>
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	4a1c      	ldr	r2, [pc, #112]	; (8015844 <HAL_TIM_Base_Start_IT+0xe4>)
 80157d2:	4293      	cmp	r3, r2
 80157d4:	d004      	beq.n	80157e0 <HAL_TIM_Base_Start_IT+0x80>
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	4a1b      	ldr	r2, [pc, #108]	; (8015848 <HAL_TIM_Base_Start_IT+0xe8>)
 80157dc:	4293      	cmp	r3, r2
 80157de:	d115      	bne.n	801580c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	689a      	ldr	r2, [r3, #8]
 80157e6:	4b19      	ldr	r3, [pc, #100]	; (801584c <HAL_TIM_Base_Start_IT+0xec>)
 80157e8:	4013      	ands	r3, r2
 80157ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2b06      	cmp	r3, #6
 80157f0:	d015      	beq.n	801581e <HAL_TIM_Base_Start_IT+0xbe>
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80157f8:	d011      	beq.n	801581e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	681a      	ldr	r2, [r3, #0]
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	f042 0201 	orr.w	r2, r2, #1
 8015808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801580a:	e008      	b.n	801581e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	681a      	ldr	r2, [r3, #0]
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	f042 0201 	orr.w	r2, r2, #1
 801581a:	601a      	str	r2, [r3, #0]
 801581c:	e000      	b.n	8015820 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801581e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015820:	2300      	movs	r3, #0
}
 8015822:	4618      	mov	r0, r3
 8015824:	3714      	adds	r7, #20
 8015826:	46bd      	mov	sp, r7
 8015828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582c:	4770      	bx	lr
 801582e:	bf00      	nop
 8015830:	40010000 	.word	0x40010000
 8015834:	40000400 	.word	0x40000400
 8015838:	40000800 	.word	0x40000800
 801583c:	40000c00 	.word	0x40000c00
 8015840:	40010400 	.word	0x40010400
 8015844:	40001800 	.word	0x40001800
 8015848:	40014000 	.word	0x40014000
 801584c:	00010007 	.word	0x00010007

08015850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b082      	sub	sp, #8
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	691b      	ldr	r3, [r3, #16]
 801585e:	f003 0302 	and.w	r3, r3, #2
 8015862:	2b02      	cmp	r3, #2
 8015864:	d122      	bne.n	80158ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	68db      	ldr	r3, [r3, #12]
 801586c:	f003 0302 	and.w	r3, r3, #2
 8015870:	2b02      	cmp	r3, #2
 8015872:	d11b      	bne.n	80158ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	f06f 0202 	mvn.w	r2, #2
 801587c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	2201      	movs	r2, #1
 8015882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	699b      	ldr	r3, [r3, #24]
 801588a:	f003 0303 	and.w	r3, r3, #3
 801588e:	2b00      	cmp	r3, #0
 8015890:	d003      	beq.n	801589a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f000 f9fe 	bl	8015c94 <HAL_TIM_IC_CaptureCallback>
 8015898:	e005      	b.n	80158a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f000 f9f0 	bl	8015c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f000 fa01 	bl	8015ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2200      	movs	r2, #0
 80158aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	691b      	ldr	r3, [r3, #16]
 80158b2:	f003 0304 	and.w	r3, r3, #4
 80158b6:	2b04      	cmp	r3, #4
 80158b8:	d122      	bne.n	8015900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	68db      	ldr	r3, [r3, #12]
 80158c0:	f003 0304 	and.w	r3, r3, #4
 80158c4:	2b04      	cmp	r3, #4
 80158c6:	d11b      	bne.n	8015900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	f06f 0204 	mvn.w	r2, #4
 80158d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	2202      	movs	r2, #2
 80158d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	699b      	ldr	r3, [r3, #24]
 80158de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d003      	beq.n	80158ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80158e6:	6878      	ldr	r0, [r7, #4]
 80158e8:	f000 f9d4 	bl	8015c94 <HAL_TIM_IC_CaptureCallback>
 80158ec:	e005      	b.n	80158fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f000 f9c6 	bl	8015c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f000 f9d7 	bl	8015ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2200      	movs	r2, #0
 80158fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	691b      	ldr	r3, [r3, #16]
 8015906:	f003 0308 	and.w	r3, r3, #8
 801590a:	2b08      	cmp	r3, #8
 801590c:	d122      	bne.n	8015954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	68db      	ldr	r3, [r3, #12]
 8015914:	f003 0308 	and.w	r3, r3, #8
 8015918:	2b08      	cmp	r3, #8
 801591a:	d11b      	bne.n	8015954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	f06f 0208 	mvn.w	r2, #8
 8015924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	2204      	movs	r2, #4
 801592a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	69db      	ldr	r3, [r3, #28]
 8015932:	f003 0303 	and.w	r3, r3, #3
 8015936:	2b00      	cmp	r3, #0
 8015938:	d003      	beq.n	8015942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801593a:	6878      	ldr	r0, [r7, #4]
 801593c:	f000 f9aa 	bl	8015c94 <HAL_TIM_IC_CaptureCallback>
 8015940:	e005      	b.n	801594e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f000 f99c 	bl	8015c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f000 f9ad 	bl	8015ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	2200      	movs	r2, #0
 8015952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	691b      	ldr	r3, [r3, #16]
 801595a:	f003 0310 	and.w	r3, r3, #16
 801595e:	2b10      	cmp	r3, #16
 8015960:	d122      	bne.n	80159a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	68db      	ldr	r3, [r3, #12]
 8015968:	f003 0310 	and.w	r3, r3, #16
 801596c:	2b10      	cmp	r3, #16
 801596e:	d11b      	bne.n	80159a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	f06f 0210 	mvn.w	r2, #16
 8015978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	2208      	movs	r2, #8
 801597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	69db      	ldr	r3, [r3, #28]
 8015986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801598a:	2b00      	cmp	r3, #0
 801598c:	d003      	beq.n	8015996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801598e:	6878      	ldr	r0, [r7, #4]
 8015990:	f000 f980 	bl	8015c94 <HAL_TIM_IC_CaptureCallback>
 8015994:	e005      	b.n	80159a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015996:	6878      	ldr	r0, [r7, #4]
 8015998:	f000 f972 	bl	8015c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801599c:	6878      	ldr	r0, [r7, #4]
 801599e:	f000 f983 	bl	8015ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	2200      	movs	r2, #0
 80159a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	691b      	ldr	r3, [r3, #16]
 80159ae:	f003 0301 	and.w	r3, r3, #1
 80159b2:	2b01      	cmp	r3, #1
 80159b4:	d10e      	bne.n	80159d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	68db      	ldr	r3, [r3, #12]
 80159bc:	f003 0301 	and.w	r3, r3, #1
 80159c0:	2b01      	cmp	r3, #1
 80159c2:	d107      	bne.n	80159d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	f06f 0201 	mvn.w	r2, #1
 80159cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f7f5 f980 	bl	800acd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	691b      	ldr	r3, [r3, #16]
 80159da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80159de:	2b80      	cmp	r3, #128	; 0x80
 80159e0:	d10e      	bne.n	8015a00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	68db      	ldr	r3, [r3, #12]
 80159e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80159ec:	2b80      	cmp	r3, #128	; 0x80
 80159ee:	d107      	bne.n	8015a00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80159f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80159fa:	6878      	ldr	r0, [r7, #4]
 80159fc:	f000 fb38 	bl	8016070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	691b      	ldr	r3, [r3, #16]
 8015a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a0e:	d10e      	bne.n	8015a2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	68db      	ldr	r3, [r3, #12]
 8015a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015a1a:	2b80      	cmp	r3, #128	; 0x80
 8015a1c:	d107      	bne.n	8015a2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8015a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015a28:	6878      	ldr	r0, [r7, #4]
 8015a2a:	f000 fb2b 	bl	8016084 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	691b      	ldr	r3, [r3, #16]
 8015a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a38:	2b40      	cmp	r3, #64	; 0x40
 8015a3a:	d10e      	bne.n	8015a5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	68db      	ldr	r3, [r3, #12]
 8015a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a46:	2b40      	cmp	r3, #64	; 0x40
 8015a48:	d107      	bne.n	8015a5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f000 f931 	bl	8015cbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	691b      	ldr	r3, [r3, #16]
 8015a60:	f003 0320 	and.w	r3, r3, #32
 8015a64:	2b20      	cmp	r3, #32
 8015a66:	d10e      	bne.n	8015a86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	68db      	ldr	r3, [r3, #12]
 8015a6e:	f003 0320 	and.w	r3, r3, #32
 8015a72:	2b20      	cmp	r3, #32
 8015a74:	d107      	bne.n	8015a86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	f06f 0220 	mvn.w	r2, #32
 8015a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f000 faeb 	bl	801605c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015a86:	bf00      	nop
 8015a88:	3708      	adds	r7, #8
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}
	...

08015a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b084      	sub	sp, #16
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015aa4:	2b01      	cmp	r3, #1
 8015aa6:	d101      	bne.n	8015aac <HAL_TIM_ConfigClockSource+0x1c>
 8015aa8:	2302      	movs	r3, #2
 8015aaa:	e0dc      	b.n	8015c66 <HAL_TIM_ConfigClockSource+0x1d6>
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	2201      	movs	r2, #1
 8015ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	2202      	movs	r2, #2
 8015ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	689b      	ldr	r3, [r3, #8]
 8015ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015ac4:	68ba      	ldr	r2, [r7, #8]
 8015ac6:	4b6a      	ldr	r3, [pc, #424]	; (8015c70 <HAL_TIM_ConfigClockSource+0x1e0>)
 8015ac8:	4013      	ands	r3, r2
 8015aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015ad2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	68ba      	ldr	r2, [r7, #8]
 8015ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	4a64      	ldr	r2, [pc, #400]	; (8015c74 <HAL_TIM_ConfigClockSource+0x1e4>)
 8015ae2:	4293      	cmp	r3, r2
 8015ae4:	f000 80a9 	beq.w	8015c3a <HAL_TIM_ConfigClockSource+0x1aa>
 8015ae8:	4a62      	ldr	r2, [pc, #392]	; (8015c74 <HAL_TIM_ConfigClockSource+0x1e4>)
 8015aea:	4293      	cmp	r3, r2
 8015aec:	f200 80ae 	bhi.w	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015af0:	4a61      	ldr	r2, [pc, #388]	; (8015c78 <HAL_TIM_ConfigClockSource+0x1e8>)
 8015af2:	4293      	cmp	r3, r2
 8015af4:	f000 80a1 	beq.w	8015c3a <HAL_TIM_ConfigClockSource+0x1aa>
 8015af8:	4a5f      	ldr	r2, [pc, #380]	; (8015c78 <HAL_TIM_ConfigClockSource+0x1e8>)
 8015afa:	4293      	cmp	r3, r2
 8015afc:	f200 80a6 	bhi.w	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b00:	4a5e      	ldr	r2, [pc, #376]	; (8015c7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8015b02:	4293      	cmp	r3, r2
 8015b04:	f000 8099 	beq.w	8015c3a <HAL_TIM_ConfigClockSource+0x1aa>
 8015b08:	4a5c      	ldr	r2, [pc, #368]	; (8015c7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8015b0a:	4293      	cmp	r3, r2
 8015b0c:	f200 809e 	bhi.w	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8015b14:	f000 8091 	beq.w	8015c3a <HAL_TIM_ConfigClockSource+0x1aa>
 8015b18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8015b1c:	f200 8096 	bhi.w	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015b24:	f000 8089 	beq.w	8015c3a <HAL_TIM_ConfigClockSource+0x1aa>
 8015b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015b2c:	f200 808e 	bhi.w	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015b34:	d03e      	beq.n	8015bb4 <HAL_TIM_ConfigClockSource+0x124>
 8015b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015b3a:	f200 8087 	bhi.w	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b42:	f000 8086 	beq.w	8015c52 <HAL_TIM_ConfigClockSource+0x1c2>
 8015b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b4a:	d87f      	bhi.n	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b4c:	2b70      	cmp	r3, #112	; 0x70
 8015b4e:	d01a      	beq.n	8015b86 <HAL_TIM_ConfigClockSource+0xf6>
 8015b50:	2b70      	cmp	r3, #112	; 0x70
 8015b52:	d87b      	bhi.n	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b54:	2b60      	cmp	r3, #96	; 0x60
 8015b56:	d050      	beq.n	8015bfa <HAL_TIM_ConfigClockSource+0x16a>
 8015b58:	2b60      	cmp	r3, #96	; 0x60
 8015b5a:	d877      	bhi.n	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b5c:	2b50      	cmp	r3, #80	; 0x50
 8015b5e:	d03c      	beq.n	8015bda <HAL_TIM_ConfigClockSource+0x14a>
 8015b60:	2b50      	cmp	r3, #80	; 0x50
 8015b62:	d873      	bhi.n	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b64:	2b40      	cmp	r3, #64	; 0x40
 8015b66:	d058      	beq.n	8015c1a <HAL_TIM_ConfigClockSource+0x18a>
 8015b68:	2b40      	cmp	r3, #64	; 0x40
 8015b6a:	d86f      	bhi.n	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b6c:	2b30      	cmp	r3, #48	; 0x30
 8015b6e:	d064      	beq.n	8015c3a <HAL_TIM_ConfigClockSource+0x1aa>
 8015b70:	2b30      	cmp	r3, #48	; 0x30
 8015b72:	d86b      	bhi.n	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b74:	2b20      	cmp	r3, #32
 8015b76:	d060      	beq.n	8015c3a <HAL_TIM_ConfigClockSource+0x1aa>
 8015b78:	2b20      	cmp	r3, #32
 8015b7a:	d867      	bhi.n	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d05c      	beq.n	8015c3a <HAL_TIM_ConfigClockSource+0x1aa>
 8015b80:	2b10      	cmp	r3, #16
 8015b82:	d05a      	beq.n	8015c3a <HAL_TIM_ConfigClockSource+0x1aa>
 8015b84:	e062      	b.n	8015c4c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	6818      	ldr	r0, [r3, #0]
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	6899      	ldr	r1, [r3, #8]
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	685a      	ldr	r2, [r3, #4]
 8015b92:	683b      	ldr	r3, [r7, #0]
 8015b94:	68db      	ldr	r3, [r3, #12]
 8015b96:	f000 f9b3 	bl	8015f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	689b      	ldr	r3, [r3, #8]
 8015ba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8015ba2:	68bb      	ldr	r3, [r7, #8]
 8015ba4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015ba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	68ba      	ldr	r2, [r7, #8]
 8015bb0:	609a      	str	r2, [r3, #8]
      break;
 8015bb2:	e04f      	b.n	8015c54 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	6818      	ldr	r0, [r3, #0]
 8015bb8:	683b      	ldr	r3, [r7, #0]
 8015bba:	6899      	ldr	r1, [r3, #8]
 8015bbc:	683b      	ldr	r3, [r7, #0]
 8015bbe:	685a      	ldr	r2, [r3, #4]
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	68db      	ldr	r3, [r3, #12]
 8015bc4:	f000 f99c 	bl	8015f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	689a      	ldr	r2, [r3, #8]
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015bd6:	609a      	str	r2, [r3, #8]
      break;
 8015bd8:	e03c      	b.n	8015c54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	6818      	ldr	r0, [r3, #0]
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	6859      	ldr	r1, [r3, #4]
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	68db      	ldr	r3, [r3, #12]
 8015be6:	461a      	mov	r2, r3
 8015be8:	f000 f90c 	bl	8015e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	2150      	movs	r1, #80	; 0x50
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f000 f966 	bl	8015ec4 <TIM_ITRx_SetConfig>
      break;
 8015bf8:	e02c      	b.n	8015c54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	6818      	ldr	r0, [r3, #0]
 8015bfe:	683b      	ldr	r3, [r7, #0]
 8015c00:	6859      	ldr	r1, [r3, #4]
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	68db      	ldr	r3, [r3, #12]
 8015c06:	461a      	mov	r2, r3
 8015c08:	f000 f92b 	bl	8015e62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	2160      	movs	r1, #96	; 0x60
 8015c12:	4618      	mov	r0, r3
 8015c14:	f000 f956 	bl	8015ec4 <TIM_ITRx_SetConfig>
      break;
 8015c18:	e01c      	b.n	8015c54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	6818      	ldr	r0, [r3, #0]
 8015c1e:	683b      	ldr	r3, [r7, #0]
 8015c20:	6859      	ldr	r1, [r3, #4]
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	68db      	ldr	r3, [r3, #12]
 8015c26:	461a      	mov	r2, r3
 8015c28:	f000 f8ec 	bl	8015e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	2140      	movs	r1, #64	; 0x40
 8015c32:	4618      	mov	r0, r3
 8015c34:	f000 f946 	bl	8015ec4 <TIM_ITRx_SetConfig>
      break;
 8015c38:	e00c      	b.n	8015c54 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	681a      	ldr	r2, [r3, #0]
 8015c3e:	683b      	ldr	r3, [r7, #0]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	4619      	mov	r1, r3
 8015c44:	4610      	mov	r0, r2
 8015c46:	f000 f93d 	bl	8015ec4 <TIM_ITRx_SetConfig>
      break;
 8015c4a:	e003      	b.n	8015c54 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8015c50:	e000      	b.n	8015c54 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8015c52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2201      	movs	r2, #1
 8015c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2200      	movs	r2, #0
 8015c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	3710      	adds	r7, #16
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	ffceff88 	.word	0xffceff88
 8015c74:	00100040 	.word	0x00100040
 8015c78:	00100030 	.word	0x00100030
 8015c7c:	00100020 	.word	0x00100020

08015c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015c80:	b480      	push	{r7}
 8015c82:	b083      	sub	sp, #12
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015c88:	bf00      	nop
 8015c8a:	370c      	adds	r7, #12
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c92:	4770      	bx	lr

08015c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015c94:	b480      	push	{r7}
 8015c96:	b083      	sub	sp, #12
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015c9c:	bf00      	nop
 8015c9e:	370c      	adds	r7, #12
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca6:	4770      	bx	lr

08015ca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015ca8:	b480      	push	{r7}
 8015caa:	b083      	sub	sp, #12
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015cb0:	bf00      	nop
 8015cb2:	370c      	adds	r7, #12
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cba:	4770      	bx	lr

08015cbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	b083      	sub	sp, #12
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015cc4:	bf00      	nop
 8015cc6:	370c      	adds	r7, #12
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cce:	4770      	bx	lr

08015cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015cd0:	b480      	push	{r7}
 8015cd2:	b085      	sub	sp, #20
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
 8015cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	4a40      	ldr	r2, [pc, #256]	; (8015de4 <TIM_Base_SetConfig+0x114>)
 8015ce4:	4293      	cmp	r3, r2
 8015ce6:	d013      	beq.n	8015d10 <TIM_Base_SetConfig+0x40>
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015cee:	d00f      	beq.n	8015d10 <TIM_Base_SetConfig+0x40>
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	4a3d      	ldr	r2, [pc, #244]	; (8015de8 <TIM_Base_SetConfig+0x118>)
 8015cf4:	4293      	cmp	r3, r2
 8015cf6:	d00b      	beq.n	8015d10 <TIM_Base_SetConfig+0x40>
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	4a3c      	ldr	r2, [pc, #240]	; (8015dec <TIM_Base_SetConfig+0x11c>)
 8015cfc:	4293      	cmp	r3, r2
 8015cfe:	d007      	beq.n	8015d10 <TIM_Base_SetConfig+0x40>
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	4a3b      	ldr	r2, [pc, #236]	; (8015df0 <TIM_Base_SetConfig+0x120>)
 8015d04:	4293      	cmp	r3, r2
 8015d06:	d003      	beq.n	8015d10 <TIM_Base_SetConfig+0x40>
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	4a3a      	ldr	r2, [pc, #232]	; (8015df4 <TIM_Base_SetConfig+0x124>)
 8015d0c:	4293      	cmp	r3, r2
 8015d0e:	d108      	bne.n	8015d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	685b      	ldr	r3, [r3, #4]
 8015d1c:	68fa      	ldr	r2, [r7, #12]
 8015d1e:	4313      	orrs	r3, r2
 8015d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	4a2f      	ldr	r2, [pc, #188]	; (8015de4 <TIM_Base_SetConfig+0x114>)
 8015d26:	4293      	cmp	r3, r2
 8015d28:	d01f      	beq.n	8015d6a <TIM_Base_SetConfig+0x9a>
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d30:	d01b      	beq.n	8015d6a <TIM_Base_SetConfig+0x9a>
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	4a2c      	ldr	r2, [pc, #176]	; (8015de8 <TIM_Base_SetConfig+0x118>)
 8015d36:	4293      	cmp	r3, r2
 8015d38:	d017      	beq.n	8015d6a <TIM_Base_SetConfig+0x9a>
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	4a2b      	ldr	r2, [pc, #172]	; (8015dec <TIM_Base_SetConfig+0x11c>)
 8015d3e:	4293      	cmp	r3, r2
 8015d40:	d013      	beq.n	8015d6a <TIM_Base_SetConfig+0x9a>
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	4a2a      	ldr	r2, [pc, #168]	; (8015df0 <TIM_Base_SetConfig+0x120>)
 8015d46:	4293      	cmp	r3, r2
 8015d48:	d00f      	beq.n	8015d6a <TIM_Base_SetConfig+0x9a>
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	4a29      	ldr	r2, [pc, #164]	; (8015df4 <TIM_Base_SetConfig+0x124>)
 8015d4e:	4293      	cmp	r3, r2
 8015d50:	d00b      	beq.n	8015d6a <TIM_Base_SetConfig+0x9a>
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	4a28      	ldr	r2, [pc, #160]	; (8015df8 <TIM_Base_SetConfig+0x128>)
 8015d56:	4293      	cmp	r3, r2
 8015d58:	d007      	beq.n	8015d6a <TIM_Base_SetConfig+0x9a>
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	4a27      	ldr	r2, [pc, #156]	; (8015dfc <TIM_Base_SetConfig+0x12c>)
 8015d5e:	4293      	cmp	r3, r2
 8015d60:	d003      	beq.n	8015d6a <TIM_Base_SetConfig+0x9a>
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	4a26      	ldr	r2, [pc, #152]	; (8015e00 <TIM_Base_SetConfig+0x130>)
 8015d66:	4293      	cmp	r3, r2
 8015d68:	d108      	bne.n	8015d7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015d72:	683b      	ldr	r3, [r7, #0]
 8015d74:	68db      	ldr	r3, [r3, #12]
 8015d76:	68fa      	ldr	r2, [r7, #12]
 8015d78:	4313      	orrs	r3, r2
 8015d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	695b      	ldr	r3, [r3, #20]
 8015d86:	4313      	orrs	r3, r2
 8015d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	68fa      	ldr	r2, [r7, #12]
 8015d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	689a      	ldr	r2, [r3, #8]
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015d98:	683b      	ldr	r3, [r7, #0]
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	4a10      	ldr	r2, [pc, #64]	; (8015de4 <TIM_Base_SetConfig+0x114>)
 8015da4:	4293      	cmp	r3, r2
 8015da6:	d00f      	beq.n	8015dc8 <TIM_Base_SetConfig+0xf8>
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	4a12      	ldr	r2, [pc, #72]	; (8015df4 <TIM_Base_SetConfig+0x124>)
 8015dac:	4293      	cmp	r3, r2
 8015dae:	d00b      	beq.n	8015dc8 <TIM_Base_SetConfig+0xf8>
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	4a11      	ldr	r2, [pc, #68]	; (8015df8 <TIM_Base_SetConfig+0x128>)
 8015db4:	4293      	cmp	r3, r2
 8015db6:	d007      	beq.n	8015dc8 <TIM_Base_SetConfig+0xf8>
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	4a10      	ldr	r2, [pc, #64]	; (8015dfc <TIM_Base_SetConfig+0x12c>)
 8015dbc:	4293      	cmp	r3, r2
 8015dbe:	d003      	beq.n	8015dc8 <TIM_Base_SetConfig+0xf8>
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	4a0f      	ldr	r2, [pc, #60]	; (8015e00 <TIM_Base_SetConfig+0x130>)
 8015dc4:	4293      	cmp	r3, r2
 8015dc6:	d103      	bne.n	8015dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	691a      	ldr	r2, [r3, #16]
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2201      	movs	r2, #1
 8015dd4:	615a      	str	r2, [r3, #20]
}
 8015dd6:	bf00      	nop
 8015dd8:	3714      	adds	r7, #20
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de0:	4770      	bx	lr
 8015de2:	bf00      	nop
 8015de4:	40010000 	.word	0x40010000
 8015de8:	40000400 	.word	0x40000400
 8015dec:	40000800 	.word	0x40000800
 8015df0:	40000c00 	.word	0x40000c00
 8015df4:	40010400 	.word	0x40010400
 8015df8:	40014000 	.word	0x40014000
 8015dfc:	40014400 	.word	0x40014400
 8015e00:	40014800 	.word	0x40014800

08015e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015e04:	b480      	push	{r7}
 8015e06:	b087      	sub	sp, #28
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	60f8      	str	r0, [r7, #12]
 8015e0c:	60b9      	str	r1, [r7, #8]
 8015e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	6a1b      	ldr	r3, [r3, #32]
 8015e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	6a1b      	ldr	r3, [r3, #32]
 8015e1a:	f023 0201 	bic.w	r2, r3, #1
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	699b      	ldr	r3, [r3, #24]
 8015e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	011b      	lsls	r3, r3, #4
 8015e34:	693a      	ldr	r2, [r7, #16]
 8015e36:	4313      	orrs	r3, r2
 8015e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015e3a:	697b      	ldr	r3, [r7, #20]
 8015e3c:	f023 030a 	bic.w	r3, r3, #10
 8015e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015e42:	697a      	ldr	r2, [r7, #20]
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	4313      	orrs	r3, r2
 8015e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	693a      	ldr	r2, [r7, #16]
 8015e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	697a      	ldr	r2, [r7, #20]
 8015e54:	621a      	str	r2, [r3, #32]
}
 8015e56:	bf00      	nop
 8015e58:	371c      	adds	r7, #28
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e60:	4770      	bx	lr

08015e62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015e62:	b480      	push	{r7}
 8015e64:	b087      	sub	sp, #28
 8015e66:	af00      	add	r7, sp, #0
 8015e68:	60f8      	str	r0, [r7, #12]
 8015e6a:	60b9      	str	r1, [r7, #8]
 8015e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	6a1b      	ldr	r3, [r3, #32]
 8015e72:	f023 0210 	bic.w	r2, r3, #16
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	699b      	ldr	r3, [r3, #24]
 8015e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	6a1b      	ldr	r3, [r3, #32]
 8015e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015e86:	697b      	ldr	r3, [r7, #20]
 8015e88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015e8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	031b      	lsls	r3, r3, #12
 8015e92:	697a      	ldr	r2, [r7, #20]
 8015e94:	4313      	orrs	r3, r2
 8015e96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015e9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015ea0:	68bb      	ldr	r3, [r7, #8]
 8015ea2:	011b      	lsls	r3, r3, #4
 8015ea4:	693a      	ldr	r2, [r7, #16]
 8015ea6:	4313      	orrs	r3, r2
 8015ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	697a      	ldr	r2, [r7, #20]
 8015eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	693a      	ldr	r2, [r7, #16]
 8015eb4:	621a      	str	r2, [r3, #32]
}
 8015eb6:	bf00      	nop
 8015eb8:	371c      	adds	r7, #28
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec0:	4770      	bx	lr
	...

08015ec4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015ec4:	b480      	push	{r7}
 8015ec6:	b085      	sub	sp, #20
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	689b      	ldr	r3, [r3, #8]
 8015ed2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015ed4:	68fa      	ldr	r2, [r7, #12]
 8015ed6:	4b09      	ldr	r3, [pc, #36]	; (8015efc <TIM_ITRx_SetConfig+0x38>)
 8015ed8:	4013      	ands	r3, r2
 8015eda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015edc:	683a      	ldr	r2, [r7, #0]
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	4313      	orrs	r3, r2
 8015ee2:	f043 0307 	orr.w	r3, r3, #7
 8015ee6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	68fa      	ldr	r2, [r7, #12]
 8015eec:	609a      	str	r2, [r3, #8]
}
 8015eee:	bf00      	nop
 8015ef0:	3714      	adds	r7, #20
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef8:	4770      	bx	lr
 8015efa:	bf00      	nop
 8015efc:	ffcfff8f 	.word	0xffcfff8f

08015f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015f00:	b480      	push	{r7}
 8015f02:	b087      	sub	sp, #28
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	60f8      	str	r0, [r7, #12]
 8015f08:	60b9      	str	r1, [r7, #8]
 8015f0a:	607a      	str	r2, [r7, #4]
 8015f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	689b      	ldr	r3, [r3, #8]
 8015f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015f14:	697b      	ldr	r3, [r7, #20]
 8015f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	021a      	lsls	r2, r3, #8
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	431a      	orrs	r2, r3
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	4313      	orrs	r3, r2
 8015f28:	697a      	ldr	r2, [r7, #20]
 8015f2a:	4313      	orrs	r3, r2
 8015f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	697a      	ldr	r2, [r7, #20]
 8015f32:	609a      	str	r2, [r3, #8]
}
 8015f34:	bf00      	nop
 8015f36:	371c      	adds	r7, #28
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3e:	4770      	bx	lr

08015f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015f40:	b480      	push	{r7}
 8015f42:	b085      	sub	sp, #20
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
 8015f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015f50:	2b01      	cmp	r3, #1
 8015f52:	d101      	bne.n	8015f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015f54:	2302      	movs	r3, #2
 8015f56:	e06d      	b.n	8016034 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2201      	movs	r2, #1
 8015f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2202      	movs	r2, #2
 8015f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	685b      	ldr	r3, [r3, #4]
 8015f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	689b      	ldr	r3, [r3, #8]
 8015f76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	4a30      	ldr	r2, [pc, #192]	; (8016040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015f7e:	4293      	cmp	r3, r2
 8015f80:	d004      	beq.n	8015f8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	4a2f      	ldr	r2, [pc, #188]	; (8016044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015f88:	4293      	cmp	r3, r2
 8015f8a:	d108      	bne.n	8015f9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015f92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	68fa      	ldr	r2, [r7, #12]
 8015f9a:	4313      	orrs	r3, r2
 8015f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015fa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	68fa      	ldr	r2, [r7, #12]
 8015fac:	4313      	orrs	r3, r2
 8015fae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	68fa      	ldr	r2, [r7, #12]
 8015fb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	4a20      	ldr	r2, [pc, #128]	; (8016040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015fbe:	4293      	cmp	r3, r2
 8015fc0:	d022      	beq.n	8016008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015fca:	d01d      	beq.n	8016008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	4a1d      	ldr	r2, [pc, #116]	; (8016048 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8015fd2:	4293      	cmp	r3, r2
 8015fd4:	d018      	beq.n	8016008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	4a1c      	ldr	r2, [pc, #112]	; (801604c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8015fdc:	4293      	cmp	r3, r2
 8015fde:	d013      	beq.n	8016008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	4a1a      	ldr	r2, [pc, #104]	; (8016050 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8015fe6:	4293      	cmp	r3, r2
 8015fe8:	d00e      	beq.n	8016008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	4a15      	ldr	r2, [pc, #84]	; (8016044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015ff0:	4293      	cmp	r3, r2
 8015ff2:	d009      	beq.n	8016008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	4a16      	ldr	r2, [pc, #88]	; (8016054 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8015ffa:	4293      	cmp	r3, r2
 8015ffc:	d004      	beq.n	8016008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	4a15      	ldr	r2, [pc, #84]	; (8016058 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8016004:	4293      	cmp	r3, r2
 8016006:	d10c      	bne.n	8016022 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801600e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016010:	683b      	ldr	r3, [r7, #0]
 8016012:	689b      	ldr	r3, [r3, #8]
 8016014:	68ba      	ldr	r2, [r7, #8]
 8016016:	4313      	orrs	r3, r2
 8016018:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	68ba      	ldr	r2, [r7, #8]
 8016020:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2201      	movs	r2, #1
 8016026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	2200      	movs	r2, #0
 801602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016032:	2300      	movs	r3, #0
}
 8016034:	4618      	mov	r0, r3
 8016036:	3714      	adds	r7, #20
 8016038:	46bd      	mov	sp, r7
 801603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603e:	4770      	bx	lr
 8016040:	40010000 	.word	0x40010000
 8016044:	40010400 	.word	0x40010400
 8016048:	40000400 	.word	0x40000400
 801604c:	40000800 	.word	0x40000800
 8016050:	40000c00 	.word	0x40000c00
 8016054:	40001800 	.word	0x40001800
 8016058:	40014000 	.word	0x40014000

0801605c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801605c:	b480      	push	{r7}
 801605e:	b083      	sub	sp, #12
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8016064:	bf00      	nop
 8016066:	370c      	adds	r7, #12
 8016068:	46bd      	mov	sp, r7
 801606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606e:	4770      	bx	lr

08016070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8016070:	b480      	push	{r7}
 8016072:	b083      	sub	sp, #12
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8016078:	bf00      	nop
 801607a:	370c      	adds	r7, #12
 801607c:	46bd      	mov	sp, r7
 801607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016082:	4770      	bx	lr

08016084 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8016084:	b480      	push	{r7}
 8016086:	b083      	sub	sp, #12
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801608c:	bf00      	nop
 801608e:	370c      	adds	r7, #12
 8016090:	46bd      	mov	sp, r7
 8016092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016096:	4770      	bx	lr

08016098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b082      	sub	sp, #8
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d101      	bne.n	80160aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80160a6:	2301      	movs	r3, #1
 80160a8:	e042      	b.n	8016130 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d106      	bne.n	80160c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2200      	movs	r2, #0
 80160b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f7f5 fc6d 	bl	800b99c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	2224      	movs	r2, #36	; 0x24
 80160c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	681a      	ldr	r2, [r3, #0]
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	f022 0201 	bic.w	r2, r2, #1
 80160d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f000 fe48 	bl	8016d70 <UART_SetConfig>
 80160e0:	4603      	mov	r3, r0
 80160e2:	2b01      	cmp	r3, #1
 80160e4:	d101      	bne.n	80160ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80160e6:	2301      	movs	r3, #1
 80160e8:	e022      	b.n	8016130 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d002      	beq.n	80160f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f001 fba4 	bl	8017840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	685a      	ldr	r2, [r3, #4]
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	689a      	ldr	r2, [r3, #8]
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016116:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	681a      	ldr	r2, [r3, #0]
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	f042 0201 	orr.w	r2, r2, #1
 8016126:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f001 fc2b 	bl	8017984 <UART_CheckIdleState>
 801612e:	4603      	mov	r3, r0
}
 8016130:	4618      	mov	r0, r3
 8016132:	3708      	adds	r7, #8
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}

08016138 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b08a      	sub	sp, #40	; 0x28
 801613c:	af02      	add	r7, sp, #8
 801613e:	60f8      	str	r0, [r7, #12]
 8016140:	60b9      	str	r1, [r7, #8]
 8016142:	603b      	str	r3, [r7, #0]
 8016144:	4613      	mov	r3, r2
 8016146:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801614e:	2b20      	cmp	r3, #32
 8016150:	f040 8083 	bne.w	801625a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d002      	beq.n	8016160 <HAL_UART_Transmit+0x28>
 801615a:	88fb      	ldrh	r3, [r7, #6]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d101      	bne.n	8016164 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8016160:	2301      	movs	r3, #1
 8016162:	e07b      	b.n	801625c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801616a:	2b01      	cmp	r3, #1
 801616c:	d101      	bne.n	8016172 <HAL_UART_Transmit+0x3a>
 801616e:	2302      	movs	r3, #2
 8016170:	e074      	b.n	801625c <HAL_UART_Transmit+0x124>
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	2201      	movs	r2, #1
 8016176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	2200      	movs	r2, #0
 801617e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	2221      	movs	r2, #33	; 0x21
 8016186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801618a:	f7f5 fe5b 	bl	800be44 <HAL_GetTick>
 801618e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	88fa      	ldrh	r2, [r7, #6]
 8016194:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	88fa      	ldrh	r2, [r7, #6]
 801619c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	689b      	ldr	r3, [r3, #8]
 80161a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80161a8:	d108      	bne.n	80161bc <HAL_UART_Transmit+0x84>
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	691b      	ldr	r3, [r3, #16]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d104      	bne.n	80161bc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80161b2:	2300      	movs	r3, #0
 80161b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	61bb      	str	r3, [r7, #24]
 80161ba:	e003      	b.n	80161c4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80161c0:	2300      	movs	r3, #0
 80161c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	2200      	movs	r2, #0
 80161c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80161cc:	e02c      	b.n	8016228 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80161ce:	683b      	ldr	r3, [r7, #0]
 80161d0:	9300      	str	r3, [sp, #0]
 80161d2:	697b      	ldr	r3, [r7, #20]
 80161d4:	2200      	movs	r2, #0
 80161d6:	2180      	movs	r1, #128	; 0x80
 80161d8:	68f8      	ldr	r0, [r7, #12]
 80161da:	f001 fc1e 	bl	8017a1a <UART_WaitOnFlagUntilTimeout>
 80161de:	4603      	mov	r3, r0
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d001      	beq.n	80161e8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80161e4:	2303      	movs	r3, #3
 80161e6:	e039      	b.n	801625c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80161e8:	69fb      	ldr	r3, [r7, #28]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d10b      	bne.n	8016206 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80161ee:	69bb      	ldr	r3, [r7, #24]
 80161f0:	881b      	ldrh	r3, [r3, #0]
 80161f2:	461a      	mov	r2, r3
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80161fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80161fe:	69bb      	ldr	r3, [r7, #24]
 8016200:	3302      	adds	r3, #2
 8016202:	61bb      	str	r3, [r7, #24]
 8016204:	e007      	b.n	8016216 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016206:	69fb      	ldr	r3, [r7, #28]
 8016208:	781a      	ldrb	r2, [r3, #0]
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8016210:	69fb      	ldr	r3, [r7, #28]
 8016212:	3301      	adds	r3, #1
 8016214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801621c:	b29b      	uxth	r3, r3
 801621e:	3b01      	subs	r3, #1
 8016220:	b29a      	uxth	r2, r3
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801622e:	b29b      	uxth	r3, r3
 8016230:	2b00      	cmp	r3, #0
 8016232:	d1cc      	bne.n	80161ce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8016234:	683b      	ldr	r3, [r7, #0]
 8016236:	9300      	str	r3, [sp, #0]
 8016238:	697b      	ldr	r3, [r7, #20]
 801623a:	2200      	movs	r2, #0
 801623c:	2140      	movs	r1, #64	; 0x40
 801623e:	68f8      	ldr	r0, [r7, #12]
 8016240:	f001 fbeb 	bl	8017a1a <UART_WaitOnFlagUntilTimeout>
 8016244:	4603      	mov	r3, r0
 8016246:	2b00      	cmp	r3, #0
 8016248:	d001      	beq.n	801624e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801624a:	2303      	movs	r3, #3
 801624c:	e006      	b.n	801625c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	2220      	movs	r2, #32
 8016252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8016256:	2300      	movs	r3, #0
 8016258:	e000      	b.n	801625c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801625a:	2302      	movs	r3, #2
  }
}
 801625c:	4618      	mov	r0, r3
 801625e:	3720      	adds	r7, #32
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}

08016264 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b08a      	sub	sp, #40	; 0x28
 8016268:	af02      	add	r7, sp, #8
 801626a:	60f8      	str	r0, [r7, #12]
 801626c:	60b9      	str	r1, [r7, #8]
 801626e:	603b      	str	r3, [r7, #0]
 8016270:	4613      	mov	r3, r2
 8016272:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801627a:	2b20      	cmp	r3, #32
 801627c:	f040 80c0 	bne.w	8016400 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d002      	beq.n	801628c <HAL_UART_Receive+0x28>
 8016286:	88fb      	ldrh	r3, [r7, #6]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d101      	bne.n	8016290 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801628c:	2301      	movs	r3, #1
 801628e:	e0b8      	b.n	8016402 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8016296:	2b01      	cmp	r3, #1
 8016298:	d101      	bne.n	801629e <HAL_UART_Receive+0x3a>
 801629a:	2302      	movs	r3, #2
 801629c:	e0b1      	b.n	8016402 <HAL_UART_Receive+0x19e>
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2201      	movs	r2, #1
 80162a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	2200      	movs	r2, #0
 80162aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	2222      	movs	r2, #34	; 0x22
 80162b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	2200      	movs	r2, #0
 80162ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80162bc:	f7f5 fdc2 	bl	800be44 <HAL_GetTick>
 80162c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	88fa      	ldrh	r2, [r7, #6]
 80162c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	88fa      	ldrh	r2, [r7, #6]
 80162ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	689b      	ldr	r3, [r3, #8]
 80162d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80162da:	d10e      	bne.n	80162fa <HAL_UART_Receive+0x96>
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	691b      	ldr	r3, [r3, #16]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d105      	bne.n	80162f0 <HAL_UART_Receive+0x8c>
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80162ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80162ee:	e02d      	b.n	801634c <HAL_UART_Receive+0xe8>
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	22ff      	movs	r2, #255	; 0xff
 80162f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80162f8:	e028      	b.n	801634c <HAL_UART_Receive+0xe8>
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	689b      	ldr	r3, [r3, #8]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d10d      	bne.n	801631e <HAL_UART_Receive+0xba>
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	691b      	ldr	r3, [r3, #16]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d104      	bne.n	8016314 <HAL_UART_Receive+0xb0>
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	22ff      	movs	r2, #255	; 0xff
 801630e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016312:	e01b      	b.n	801634c <HAL_UART_Receive+0xe8>
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	227f      	movs	r2, #127	; 0x7f
 8016318:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801631c:	e016      	b.n	801634c <HAL_UART_Receive+0xe8>
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	689b      	ldr	r3, [r3, #8]
 8016322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016326:	d10d      	bne.n	8016344 <HAL_UART_Receive+0xe0>
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	691b      	ldr	r3, [r3, #16]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d104      	bne.n	801633a <HAL_UART_Receive+0xd6>
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	227f      	movs	r2, #127	; 0x7f
 8016334:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016338:	e008      	b.n	801634c <HAL_UART_Receive+0xe8>
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	223f      	movs	r2, #63	; 0x3f
 801633e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016342:	e003      	b.n	801634c <HAL_UART_Receive+0xe8>
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	2200      	movs	r2, #0
 8016348:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016352:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	689b      	ldr	r3, [r3, #8]
 8016358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801635c:	d108      	bne.n	8016370 <HAL_UART_Receive+0x10c>
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	691b      	ldr	r3, [r3, #16]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d104      	bne.n	8016370 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8016366:	2300      	movs	r3, #0
 8016368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801636a:	68bb      	ldr	r3, [r7, #8]
 801636c:	61bb      	str	r3, [r7, #24]
 801636e:	e003      	b.n	8016378 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8016370:	68bb      	ldr	r3, [r7, #8]
 8016372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016374:	2300      	movs	r3, #0
 8016376:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	2200      	movs	r2, #0
 801637c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8016380:	e032      	b.n	80163e8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	9300      	str	r3, [sp, #0]
 8016386:	697b      	ldr	r3, [r7, #20]
 8016388:	2200      	movs	r2, #0
 801638a:	2120      	movs	r1, #32
 801638c:	68f8      	ldr	r0, [r7, #12]
 801638e:	f001 fb44 	bl	8017a1a <UART_WaitOnFlagUntilTimeout>
 8016392:	4603      	mov	r3, r0
 8016394:	2b00      	cmp	r3, #0
 8016396:	d001      	beq.n	801639c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8016398:	2303      	movs	r3, #3
 801639a:	e032      	b.n	8016402 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 801639c:	69fb      	ldr	r3, [r7, #28]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d10c      	bne.n	80163bc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163a8:	b29a      	uxth	r2, r3
 80163aa:	8a7b      	ldrh	r3, [r7, #18]
 80163ac:	4013      	ands	r3, r2
 80163ae:	b29a      	uxth	r2, r3
 80163b0:	69bb      	ldr	r3, [r7, #24]
 80163b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80163b4:	69bb      	ldr	r3, [r7, #24]
 80163b6:	3302      	adds	r3, #2
 80163b8:	61bb      	str	r3, [r7, #24]
 80163ba:	e00c      	b.n	80163d6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163c2:	b2da      	uxtb	r2, r3
 80163c4:	8a7b      	ldrh	r3, [r7, #18]
 80163c6:	b2db      	uxtb	r3, r3
 80163c8:	4013      	ands	r3, r2
 80163ca:	b2da      	uxtb	r2, r3
 80163cc:	69fb      	ldr	r3, [r7, #28]
 80163ce:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80163d0:	69fb      	ldr	r3, [r7, #28]
 80163d2:	3301      	adds	r3, #1
 80163d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80163dc:	b29b      	uxth	r3, r3
 80163de:	3b01      	subs	r3, #1
 80163e0:	b29a      	uxth	r2, r3
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d1c6      	bne.n	8016382 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	2220      	movs	r2, #32
 80163f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80163fc:	2300      	movs	r3, #0
 80163fe:	e000      	b.n	8016402 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8016400:	2302      	movs	r3, #2
  }
}
 8016402:	4618      	mov	r0, r3
 8016404:	3720      	adds	r7, #32
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}
	...

0801640c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801640c:	b480      	push	{r7}
 801640e:	b091      	sub	sp, #68	; 0x44
 8016410:	af00      	add	r7, sp, #0
 8016412:	60f8      	str	r0, [r7, #12]
 8016414:	60b9      	str	r1, [r7, #8]
 8016416:	4613      	mov	r3, r2
 8016418:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016420:	2b20      	cmp	r3, #32
 8016422:	f040 808c 	bne.w	801653e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8016426:	68bb      	ldr	r3, [r7, #8]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d002      	beq.n	8016432 <HAL_UART_Transmit_IT+0x26>
 801642c:	88fb      	ldrh	r3, [r7, #6]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d101      	bne.n	8016436 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8016432:	2301      	movs	r3, #1
 8016434:	e084      	b.n	8016540 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801643c:	2b01      	cmp	r3, #1
 801643e:	d101      	bne.n	8016444 <HAL_UART_Transmit_IT+0x38>
 8016440:	2302      	movs	r3, #2
 8016442:	e07d      	b.n	8016540 <HAL_UART_Transmit_IT+0x134>
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	2201      	movs	r2, #1
 8016448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	68ba      	ldr	r2, [r7, #8]
 8016450:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	88fa      	ldrh	r2, [r7, #6]
 8016456:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	88fa      	ldrh	r2, [r7, #6]
 801645e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	2200      	movs	r2, #0
 8016466:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	2200      	movs	r2, #0
 801646c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	2221      	movs	r2, #33	; 0x21
 8016474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801647c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016480:	d12e      	bne.n	80164e0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	689b      	ldr	r3, [r3, #8]
 8016486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801648a:	d107      	bne.n	801649c <HAL_UART_Transmit_IT+0x90>
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	691b      	ldr	r3, [r3, #16]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d103      	bne.n	801649c <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	4a2d      	ldr	r2, [pc, #180]	; (801654c <HAL_UART_Transmit_IT+0x140>)
 8016498:	675a      	str	r2, [r3, #116]	; 0x74
 801649a:	e002      	b.n	80164a2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	4a2c      	ldr	r2, [pc, #176]	; (8016550 <HAL_UART_Transmit_IT+0x144>)
 80164a0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	2200      	movs	r2, #0
 80164a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	3308      	adds	r3, #8
 80164b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164b4:	e853 3f00 	ldrex	r3, [r3]
 80164b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80164ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80164c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	3308      	adds	r3, #8
 80164c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80164ca:	637a      	str	r2, [r7, #52]	; 0x34
 80164cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80164d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80164d2:	e841 2300 	strex	r3, r2, [r1]
 80164d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80164d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d1e5      	bne.n	80164aa <HAL_UART_Transmit_IT+0x9e>
 80164de:	e02c      	b.n	801653a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	689b      	ldr	r3, [r3, #8]
 80164e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80164e8:	d107      	bne.n	80164fa <HAL_UART_Transmit_IT+0xee>
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	691b      	ldr	r3, [r3, #16]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d103      	bne.n	80164fa <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	4a17      	ldr	r2, [pc, #92]	; (8016554 <HAL_UART_Transmit_IT+0x148>)
 80164f6:	675a      	str	r2, [r3, #116]	; 0x74
 80164f8:	e002      	b.n	8016500 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	4a16      	ldr	r2, [pc, #88]	; (8016558 <HAL_UART_Transmit_IT+0x14c>)
 80164fe:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	2200      	movs	r2, #0
 8016504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801650e:	697b      	ldr	r3, [r7, #20]
 8016510:	e853 3f00 	ldrex	r3, [r3]
 8016514:	613b      	str	r3, [r7, #16]
   return(result);
 8016516:	693b      	ldr	r3, [r7, #16]
 8016518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801651c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	461a      	mov	r2, r3
 8016524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016526:	623b      	str	r3, [r7, #32]
 8016528:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801652a:	69f9      	ldr	r1, [r7, #28]
 801652c:	6a3a      	ldr	r2, [r7, #32]
 801652e:	e841 2300 	strex	r3, r2, [r1]
 8016532:	61bb      	str	r3, [r7, #24]
   return(result);
 8016534:	69bb      	ldr	r3, [r7, #24]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d1e6      	bne.n	8016508 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 801653a:	2300      	movs	r3, #0
 801653c:	e000      	b.n	8016540 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 801653e:	2302      	movs	r3, #2
  }
}
 8016540:	4618      	mov	r0, r3
 8016542:	3744      	adds	r7, #68	; 0x44
 8016544:	46bd      	mov	sp, r7
 8016546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654a:	4770      	bx	lr
 801654c:	08018153 	.word	0x08018153
 8016550:	08018073 	.word	0x08018073
 8016554:	08017fb1 	.word	0x08017fb1
 8016558:	08017ef9 	.word	0x08017ef9

0801655c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b08a      	sub	sp, #40	; 0x28
 8016560:	af00      	add	r7, sp, #0
 8016562:	60f8      	str	r0, [r7, #12]
 8016564:	60b9      	str	r1, [r7, #8]
 8016566:	4613      	mov	r3, r2
 8016568:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016570:	2b20      	cmp	r3, #32
 8016572:	d142      	bne.n	80165fa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8016574:	68bb      	ldr	r3, [r7, #8]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d002      	beq.n	8016580 <HAL_UART_Receive_IT+0x24>
 801657a:	88fb      	ldrh	r3, [r7, #6]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d101      	bne.n	8016584 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8016580:	2301      	movs	r3, #1
 8016582:	e03b      	b.n	80165fc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801658a:	2b01      	cmp	r3, #1
 801658c:	d101      	bne.n	8016592 <HAL_UART_Receive_IT+0x36>
 801658e:	2302      	movs	r3, #2
 8016590:	e034      	b.n	80165fc <HAL_UART_Receive_IT+0xa0>
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	2201      	movs	r2, #1
 8016596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	2200      	movs	r2, #0
 801659e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	4a17      	ldr	r2, [pc, #92]	; (8016604 <HAL_UART_Receive_IT+0xa8>)
 80165a6:	4293      	cmp	r3, r2
 80165a8:	d01f      	beq.n	80165ea <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	685b      	ldr	r3, [r3, #4]
 80165b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d018      	beq.n	80165ea <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165be:	697b      	ldr	r3, [r7, #20]
 80165c0:	e853 3f00 	ldrex	r3, [r3]
 80165c4:	613b      	str	r3, [r7, #16]
   return(result);
 80165c6:	693b      	ldr	r3, [r7, #16]
 80165c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80165cc:	627b      	str	r3, [r7, #36]	; 0x24
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	461a      	mov	r2, r3
 80165d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d6:	623b      	str	r3, [r7, #32]
 80165d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165da:	69f9      	ldr	r1, [r7, #28]
 80165dc:	6a3a      	ldr	r2, [r7, #32]
 80165de:	e841 2300 	strex	r3, r2, [r1]
 80165e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80165e4:	69bb      	ldr	r3, [r7, #24]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d1e6      	bne.n	80165b8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80165ea:	88fb      	ldrh	r3, [r7, #6]
 80165ec:	461a      	mov	r2, r3
 80165ee:	68b9      	ldr	r1, [r7, #8]
 80165f0:	68f8      	ldr	r0, [r7, #12]
 80165f2:	f001 fadb 	bl	8017bac <UART_Start_Receive_IT>
 80165f6:	4603      	mov	r3, r0
 80165f8:	e000      	b.n	80165fc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80165fa:	2302      	movs	r3, #2
  }
}
 80165fc:	4618      	mov	r0, r3
 80165fe:	3728      	adds	r7, #40	; 0x28
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}
 8016604:	58000c00 	.word	0x58000c00

08016608 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b0ba      	sub	sp, #232	; 0xe8
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	69db      	ldr	r3, [r3, #28]
 8016616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	689b      	ldr	r3, [r3, #8]
 801662a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801662e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8016632:	f640 030f 	movw	r3, #2063	; 0x80f
 8016636:	4013      	ands	r3, r2
 8016638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801663c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016640:	2b00      	cmp	r3, #0
 8016642:	d11b      	bne.n	801667c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8016644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016648:	f003 0320 	and.w	r3, r3, #32
 801664c:	2b00      	cmp	r3, #0
 801664e:	d015      	beq.n	801667c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8016650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016654:	f003 0320 	and.w	r3, r3, #32
 8016658:	2b00      	cmp	r3, #0
 801665a:	d105      	bne.n	8016668 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801665c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016664:	2b00      	cmp	r3, #0
 8016666:	d009      	beq.n	801667c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801666c:	2b00      	cmp	r3, #0
 801666e:	f000 835a 	beq.w	8016d26 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016676:	6878      	ldr	r0, [r7, #4]
 8016678:	4798      	blx	r3
      }
      return;
 801667a:	e354      	b.n	8016d26 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801667c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016680:	2b00      	cmp	r3, #0
 8016682:	f000 811f 	beq.w	80168c4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8016686:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801668a:	4b8b      	ldr	r3, [pc, #556]	; (80168b8 <HAL_UART_IRQHandler+0x2b0>)
 801668c:	4013      	ands	r3, r2
 801668e:	2b00      	cmp	r3, #0
 8016690:	d106      	bne.n	80166a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8016692:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8016696:	4b89      	ldr	r3, [pc, #548]	; (80168bc <HAL_UART_IRQHandler+0x2b4>)
 8016698:	4013      	ands	r3, r2
 801669a:	2b00      	cmp	r3, #0
 801669c:	f000 8112 	beq.w	80168c4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80166a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80166a4:	f003 0301 	and.w	r3, r3, #1
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d011      	beq.n	80166d0 <HAL_UART_IRQHandler+0xc8>
 80166ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80166b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d00b      	beq.n	80166d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	2201      	movs	r2, #1
 80166be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80166c6:	f043 0201 	orr.w	r2, r3, #1
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80166d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80166d4:	f003 0302 	and.w	r3, r3, #2
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d011      	beq.n	8016700 <HAL_UART_IRQHandler+0xf8>
 80166dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80166e0:	f003 0301 	and.w	r3, r3, #1
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d00b      	beq.n	8016700 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	2202      	movs	r2, #2
 80166ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80166f6:	f043 0204 	orr.w	r2, r3, #4
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016704:	f003 0304 	and.w	r3, r3, #4
 8016708:	2b00      	cmp	r3, #0
 801670a:	d011      	beq.n	8016730 <HAL_UART_IRQHandler+0x128>
 801670c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016710:	f003 0301 	and.w	r3, r3, #1
 8016714:	2b00      	cmp	r3, #0
 8016716:	d00b      	beq.n	8016730 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	2204      	movs	r2, #4
 801671e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016726:	f043 0202 	orr.w	r2, r3, #2
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016734:	f003 0308 	and.w	r3, r3, #8
 8016738:	2b00      	cmp	r3, #0
 801673a:	d017      	beq.n	801676c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801673c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016740:	f003 0320 	and.w	r3, r3, #32
 8016744:	2b00      	cmp	r3, #0
 8016746:	d105      	bne.n	8016754 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8016748:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801674c:	4b5a      	ldr	r3, [pc, #360]	; (80168b8 <HAL_UART_IRQHandler+0x2b0>)
 801674e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8016750:	2b00      	cmp	r3, #0
 8016752:	d00b      	beq.n	801676c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	2208      	movs	r2, #8
 801675a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016762:	f043 0208 	orr.w	r2, r3, #8
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801676c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016774:	2b00      	cmp	r3, #0
 8016776:	d012      	beq.n	801679e <HAL_UART_IRQHandler+0x196>
 8016778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801677c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016780:	2b00      	cmp	r3, #0
 8016782:	d00c      	beq.n	801679e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801678c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016794:	f043 0220 	orr.w	r2, r3, #32
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	f000 82c0 	beq.w	8016d2a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80167aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167ae:	f003 0320 	and.w	r3, r3, #32
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d013      	beq.n	80167de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80167b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80167ba:	f003 0320 	and.w	r3, r3, #32
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d105      	bne.n	80167ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80167c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80167c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d007      	beq.n	80167de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d003      	beq.n	80167de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167da:	6878      	ldr	r0, [r7, #4]
 80167dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80167e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	689b      	ldr	r3, [r3, #8]
 80167ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80167f2:	2b40      	cmp	r3, #64	; 0x40
 80167f4:	d005      	beq.n	8016802 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80167f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80167fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d04f      	beq.n	80168a2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016802:	6878      	ldr	r0, [r7, #4]
 8016804:	f001 fafc 	bl	8017e00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	689b      	ldr	r3, [r3, #8]
 801680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016812:	2b40      	cmp	r3, #64	; 0x40
 8016814:	d141      	bne.n	801689a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	3308      	adds	r3, #8
 801681c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016820:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016824:	e853 3f00 	ldrex	r3, [r3]
 8016828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801682c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	3308      	adds	r3, #8
 801683e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016842:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8016846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801684a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801684e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016852:	e841 2300 	strex	r3, r2, [r1]
 8016856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801685a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801685e:	2b00      	cmp	r3, #0
 8016860:	d1d9      	bne.n	8016816 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016866:	2b00      	cmp	r3, #0
 8016868:	d013      	beq.n	8016892 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801686e:	4a14      	ldr	r2, [pc, #80]	; (80168c0 <HAL_UART_IRQHandler+0x2b8>)
 8016870:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016876:	4618      	mov	r0, r3
 8016878:	f7f7 f8c4 	bl	800da04 <HAL_DMA_Abort_IT>
 801687c:	4603      	mov	r3, r0
 801687e:	2b00      	cmp	r3, #0
 8016880:	d017      	beq.n	80168b2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016888:	687a      	ldr	r2, [r7, #4]
 801688a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 801688c:	4610      	mov	r0, r2
 801688e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016890:	e00f      	b.n	80168b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016892:	6878      	ldr	r0, [r7, #4]
 8016894:	f000 fa56 	bl	8016d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016898:	e00b      	b.n	80168b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801689a:	6878      	ldr	r0, [r7, #4]
 801689c:	f000 fa52 	bl	8016d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80168a0:	e007      	b.n	80168b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80168a2:	6878      	ldr	r0, [r7, #4]
 80168a4:	f000 fa4e 	bl	8016d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2200      	movs	r2, #0
 80168ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80168b0:	e23b      	b.n	8016d2a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80168b2:	bf00      	nop
    return;
 80168b4:	e239      	b.n	8016d2a <HAL_UART_IRQHandler+0x722>
 80168b6:	bf00      	nop
 80168b8:	10000001 	.word	0x10000001
 80168bc:	04000120 	.word	0x04000120
 80168c0:	08017ecd 	.word	0x08017ecd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168c8:	2b01      	cmp	r3, #1
 80168ca:	f040 81ce 	bne.w	8016c6a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80168ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80168d2:	f003 0310 	and.w	r3, r3, #16
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	f000 81c7 	beq.w	8016c6a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80168dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80168e0:	f003 0310 	and.w	r3, r3, #16
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	f000 81c0 	beq.w	8016c6a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	2210      	movs	r2, #16
 80168f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	689b      	ldr	r3, [r3, #8]
 80168f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168fc:	2b40      	cmp	r3, #64	; 0x40
 80168fe:	f040 813b 	bne.w	8016b78 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	4a8b      	ldr	r2, [pc, #556]	; (8016b38 <HAL_UART_IRQHandler+0x530>)
 801690a:	4293      	cmp	r3, r2
 801690c:	d059      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	4a89      	ldr	r2, [pc, #548]	; (8016b3c <HAL_UART_IRQHandler+0x534>)
 8016916:	4293      	cmp	r3, r2
 8016918:	d053      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	4a87      	ldr	r2, [pc, #540]	; (8016b40 <HAL_UART_IRQHandler+0x538>)
 8016922:	4293      	cmp	r3, r2
 8016924:	d04d      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	4a85      	ldr	r2, [pc, #532]	; (8016b44 <HAL_UART_IRQHandler+0x53c>)
 801692e:	4293      	cmp	r3, r2
 8016930:	d047      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	4a83      	ldr	r2, [pc, #524]	; (8016b48 <HAL_UART_IRQHandler+0x540>)
 801693a:	4293      	cmp	r3, r2
 801693c:	d041      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	4a81      	ldr	r2, [pc, #516]	; (8016b4c <HAL_UART_IRQHandler+0x544>)
 8016946:	4293      	cmp	r3, r2
 8016948:	d03b      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	4a7f      	ldr	r2, [pc, #508]	; (8016b50 <HAL_UART_IRQHandler+0x548>)
 8016952:	4293      	cmp	r3, r2
 8016954:	d035      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	4a7d      	ldr	r2, [pc, #500]	; (8016b54 <HAL_UART_IRQHandler+0x54c>)
 801695e:	4293      	cmp	r3, r2
 8016960:	d02f      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	4a7b      	ldr	r2, [pc, #492]	; (8016b58 <HAL_UART_IRQHandler+0x550>)
 801696a:	4293      	cmp	r3, r2
 801696c:	d029      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	4a79      	ldr	r2, [pc, #484]	; (8016b5c <HAL_UART_IRQHandler+0x554>)
 8016976:	4293      	cmp	r3, r2
 8016978:	d023      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	4a77      	ldr	r2, [pc, #476]	; (8016b60 <HAL_UART_IRQHandler+0x558>)
 8016982:	4293      	cmp	r3, r2
 8016984:	d01d      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	4a75      	ldr	r2, [pc, #468]	; (8016b64 <HAL_UART_IRQHandler+0x55c>)
 801698e:	4293      	cmp	r3, r2
 8016990:	d017      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	4a73      	ldr	r2, [pc, #460]	; (8016b68 <HAL_UART_IRQHandler+0x560>)
 801699a:	4293      	cmp	r3, r2
 801699c:	d011      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	4a71      	ldr	r2, [pc, #452]	; (8016b6c <HAL_UART_IRQHandler+0x564>)
 80169a6:	4293      	cmp	r3, r2
 80169a8:	d00b      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	4a6f      	ldr	r2, [pc, #444]	; (8016b70 <HAL_UART_IRQHandler+0x568>)
 80169b2:	4293      	cmp	r3, r2
 80169b4:	d005      	beq.n	80169c2 <HAL_UART_IRQHandler+0x3ba>
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	4a6d      	ldr	r2, [pc, #436]	; (8016b74 <HAL_UART_IRQHandler+0x56c>)
 80169be:	4293      	cmp	r3, r2
 80169c0:	d105      	bne.n	80169ce <HAL_UART_IRQHandler+0x3c6>
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	685b      	ldr	r3, [r3, #4]
 80169ca:	b29b      	uxth	r3, r3
 80169cc:	e004      	b.n	80169d8 <HAL_UART_IRQHandler+0x3d0>
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	685b      	ldr	r3, [r3, #4]
 80169d6:	b29b      	uxth	r3, r3
 80169d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80169dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	f000 81a4 	beq.w	8016d2e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80169ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80169f0:	429a      	cmp	r2, r3
 80169f2:	f080 819c 	bcs.w	8016d2e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80169fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016a04:	69db      	ldr	r3, [r3, #28]
 8016a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016a0a:	f000 8086 	beq.w	8016b1a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016a1a:	e853 3f00 	ldrex	r3, [r3]
 8016a1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8016a22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	461a      	mov	r2, r3
 8016a34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016a38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016a3c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a40:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016a44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016a48:	e841 2300 	strex	r3, r2, [r1]
 8016a4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8016a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d1da      	bne.n	8016a0e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	3308      	adds	r3, #8
 8016a5e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a62:	e853 3f00 	ldrex	r3, [r3]
 8016a66:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016a6a:	f023 0301 	bic.w	r3, r3, #1
 8016a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	3308      	adds	r3, #8
 8016a78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016a7c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016a80:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a82:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016a84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016a88:	e841 2300 	strex	r3, r2, [r1]
 8016a8c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d1e1      	bne.n	8016a58 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	3308      	adds	r3, #8
 8016a9a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016a9e:	e853 3f00 	ldrex	r3, [r3]
 8016aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	3308      	adds	r3, #8
 8016ab4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016ab8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016aba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016abc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016abe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016ac0:	e841 2300 	strex	r3, r2, [r1]
 8016ac4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d1e3      	bne.n	8016a94 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2220      	movs	r2, #32
 8016ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ae2:	e853 3f00 	ldrex	r3, [r3]
 8016ae6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016aea:	f023 0310 	bic.w	r3, r3, #16
 8016aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	461a      	mov	r2, r3
 8016af8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016afc:	65bb      	str	r3, [r7, #88]	; 0x58
 8016afe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016b02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016b04:	e841 2300 	strex	r3, r2, [r1]
 8016b08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d1e4      	bne.n	8016ada <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7f6 fc57 	bl	800d3c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016b26:	b29b      	uxth	r3, r3
 8016b28:	1ad3      	subs	r3, r2, r3
 8016b2a:	b29b      	uxth	r3, r3
 8016b2c:	4619      	mov	r1, r3
 8016b2e:	6878      	ldr	r0, [r7, #4]
 8016b30:	f000 f912 	bl	8016d58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016b34:	e0fb      	b.n	8016d2e <HAL_UART_IRQHandler+0x726>
 8016b36:	bf00      	nop
 8016b38:	40020010 	.word	0x40020010
 8016b3c:	40020028 	.word	0x40020028
 8016b40:	40020040 	.word	0x40020040
 8016b44:	40020058 	.word	0x40020058
 8016b48:	40020070 	.word	0x40020070
 8016b4c:	40020088 	.word	0x40020088
 8016b50:	400200a0 	.word	0x400200a0
 8016b54:	400200b8 	.word	0x400200b8
 8016b58:	40020410 	.word	0x40020410
 8016b5c:	40020428 	.word	0x40020428
 8016b60:	40020440 	.word	0x40020440
 8016b64:	40020458 	.word	0x40020458
 8016b68:	40020470 	.word	0x40020470
 8016b6c:	40020488 	.word	0x40020488
 8016b70:	400204a0 	.word	0x400204a0
 8016b74:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016b84:	b29b      	uxth	r3, r3
 8016b86:	1ad3      	subs	r3, r2, r3
 8016b88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016b92:	b29b      	uxth	r3, r3
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	f000 80cc 	beq.w	8016d32 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8016b9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	f000 80c7 	beq.w	8016d32 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bac:	e853 3f00 	ldrex	r3, [r3]
 8016bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	461a      	mov	r2, r3
 8016bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8016bc8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016bce:	e841 2300 	strex	r3, r2, [r1]
 8016bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d1e4      	bne.n	8016ba4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	3308      	adds	r3, #8
 8016be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016be4:	e853 3f00 	ldrex	r3, [r3]
 8016be8:	623b      	str	r3, [r7, #32]
   return(result);
 8016bea:	6a3a      	ldr	r2, [r7, #32]
 8016bec:	4b54      	ldr	r3, [pc, #336]	; (8016d40 <HAL_UART_IRQHandler+0x738>)
 8016bee:	4013      	ands	r3, r2
 8016bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	3308      	adds	r3, #8
 8016bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8016c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c06:	e841 2300 	strex	r3, r2, [r1]
 8016c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d1e3      	bne.n	8016bda <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	2220      	movs	r2, #32
 8016c16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	2200      	movs	r2, #0
 8016c24:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c2c:	693b      	ldr	r3, [r7, #16]
 8016c2e:	e853 3f00 	ldrex	r3, [r3]
 8016c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	f023 0310 	bic.w	r3, r3, #16
 8016c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	461a      	mov	r2, r3
 8016c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016c48:	61fb      	str	r3, [r7, #28]
 8016c4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c4c:	69b9      	ldr	r1, [r7, #24]
 8016c4e:	69fa      	ldr	r2, [r7, #28]
 8016c50:	e841 2300 	strex	r3, r2, [r1]
 8016c54:	617b      	str	r3, [r7, #20]
   return(result);
 8016c56:	697b      	ldr	r3, [r7, #20]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d1e4      	bne.n	8016c26 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016c60:	4619      	mov	r1, r3
 8016c62:	6878      	ldr	r0, [r7, #4]
 8016c64:	f000 f878 	bl	8016d58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016c68:	e063      	b.n	8016d32 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d00e      	beq.n	8016c94 <HAL_UART_IRQHandler+0x68c>
 8016c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d008      	beq.n	8016c94 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8016c8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	f001 ff5d 	bl	8018b4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016c92:	e051      	b.n	8016d38 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8016c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d014      	beq.n	8016cca <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8016ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d105      	bne.n	8016cb8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8016cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d008      	beq.n	8016cca <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d03a      	beq.n	8016d36 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016cc4:	6878      	ldr	r0, [r7, #4]
 8016cc6:	4798      	blx	r3
    }
    return;
 8016cc8:	e035      	b.n	8016d36 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d009      	beq.n	8016cea <HAL_UART_IRQHandler+0x6e2>
 8016cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d003      	beq.n	8016cea <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8016ce2:	6878      	ldr	r0, [r7, #4]
 8016ce4:	f001 faaa 	bl	801823c <UART_EndTransmit_IT>
    return;
 8016ce8:	e026      	b.n	8016d38 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8016cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d009      	beq.n	8016d0a <HAL_UART_IRQHandler+0x702>
 8016cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016cfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d003      	beq.n	8016d0a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f001 ff36 	bl	8018b74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016d08:	e016      	b.n	8016d38 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8016d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d010      	beq.n	8016d38 <HAL_UART_IRQHandler+0x730>
 8016d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	da0c      	bge.n	8016d38 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8016d1e:	6878      	ldr	r0, [r7, #4]
 8016d20:	f001 ff1e 	bl	8018b60 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016d24:	e008      	b.n	8016d38 <HAL_UART_IRQHandler+0x730>
      return;
 8016d26:	bf00      	nop
 8016d28:	e006      	b.n	8016d38 <HAL_UART_IRQHandler+0x730>
    return;
 8016d2a:	bf00      	nop
 8016d2c:	e004      	b.n	8016d38 <HAL_UART_IRQHandler+0x730>
      return;
 8016d2e:	bf00      	nop
 8016d30:	e002      	b.n	8016d38 <HAL_UART_IRQHandler+0x730>
      return;
 8016d32:	bf00      	nop
 8016d34:	e000      	b.n	8016d38 <HAL_UART_IRQHandler+0x730>
    return;
 8016d36:	bf00      	nop
  }
}
 8016d38:	37e8      	adds	r7, #232	; 0xe8
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	bd80      	pop	{r7, pc}
 8016d3e:	bf00      	nop
 8016d40:	effffffe 	.word	0xeffffffe

08016d44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016d44:	b480      	push	{r7}
 8016d46:	b083      	sub	sp, #12
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8016d4c:	bf00      	nop
 8016d4e:	370c      	adds	r7, #12
 8016d50:	46bd      	mov	sp, r7
 8016d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d56:	4770      	bx	lr

08016d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016d58:	b480      	push	{r7}
 8016d5a:	b083      	sub	sp, #12
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
 8016d60:	460b      	mov	r3, r1
 8016d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016d64:	bf00      	nop
 8016d66:	370c      	adds	r7, #12
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6e:	4770      	bx	lr

08016d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016d74:	b092      	sub	sp, #72	; 0x48
 8016d76:	af00      	add	r7, sp, #0
 8016d78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016d80:	697b      	ldr	r3, [r7, #20]
 8016d82:	689a      	ldr	r2, [r3, #8]
 8016d84:	697b      	ldr	r3, [r7, #20]
 8016d86:	691b      	ldr	r3, [r3, #16]
 8016d88:	431a      	orrs	r2, r3
 8016d8a:	697b      	ldr	r3, [r7, #20]
 8016d8c:	695b      	ldr	r3, [r3, #20]
 8016d8e:	431a      	orrs	r2, r3
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	69db      	ldr	r3, [r3, #28]
 8016d94:	4313      	orrs	r3, r2
 8016d96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016d98:	697b      	ldr	r3, [r7, #20]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	681a      	ldr	r2, [r3, #0]
 8016d9e:	4bbe      	ldr	r3, [pc, #760]	; (8017098 <UART_SetConfig+0x328>)
 8016da0:	4013      	ands	r3, r2
 8016da2:	697a      	ldr	r2, [r7, #20]
 8016da4:	6812      	ldr	r2, [r2, #0]
 8016da6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016da8:	430b      	orrs	r3, r1
 8016daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016dac:	697b      	ldr	r3, [r7, #20]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	685b      	ldr	r3, [r3, #4]
 8016db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	68da      	ldr	r2, [r3, #12]
 8016dba:	697b      	ldr	r3, [r7, #20]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	430a      	orrs	r2, r1
 8016dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016dc2:	697b      	ldr	r3, [r7, #20]
 8016dc4:	699b      	ldr	r3, [r3, #24]
 8016dc6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	4ab3      	ldr	r2, [pc, #716]	; (801709c <UART_SetConfig+0x32c>)
 8016dce:	4293      	cmp	r3, r2
 8016dd0:	d004      	beq.n	8016ddc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016dd2:	697b      	ldr	r3, [r7, #20]
 8016dd4:	6a1b      	ldr	r3, [r3, #32]
 8016dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016dd8:	4313      	orrs	r3, r2
 8016dda:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016ddc:	697b      	ldr	r3, [r7, #20]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	689a      	ldr	r2, [r3, #8]
 8016de2:	4baf      	ldr	r3, [pc, #700]	; (80170a0 <UART_SetConfig+0x330>)
 8016de4:	4013      	ands	r3, r2
 8016de6:	697a      	ldr	r2, [r7, #20]
 8016de8:	6812      	ldr	r2, [r2, #0]
 8016dea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016dec:	430b      	orrs	r3, r1
 8016dee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016df6:	f023 010f 	bic.w	r1, r3, #15
 8016dfa:	697b      	ldr	r3, [r7, #20]
 8016dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016dfe:	697b      	ldr	r3, [r7, #20]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	430a      	orrs	r2, r1
 8016e04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016e06:	697b      	ldr	r3, [r7, #20]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	4aa6      	ldr	r2, [pc, #664]	; (80170a4 <UART_SetConfig+0x334>)
 8016e0c:	4293      	cmp	r3, r2
 8016e0e:	d177      	bne.n	8016f00 <UART_SetConfig+0x190>
 8016e10:	4ba5      	ldr	r3, [pc, #660]	; (80170a8 <UART_SetConfig+0x338>)
 8016e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016e14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016e18:	2b28      	cmp	r3, #40	; 0x28
 8016e1a:	d86d      	bhi.n	8016ef8 <UART_SetConfig+0x188>
 8016e1c:	a201      	add	r2, pc, #4	; (adr r2, 8016e24 <UART_SetConfig+0xb4>)
 8016e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e22:	bf00      	nop
 8016e24:	08016ec9 	.word	0x08016ec9
 8016e28:	08016ef9 	.word	0x08016ef9
 8016e2c:	08016ef9 	.word	0x08016ef9
 8016e30:	08016ef9 	.word	0x08016ef9
 8016e34:	08016ef9 	.word	0x08016ef9
 8016e38:	08016ef9 	.word	0x08016ef9
 8016e3c:	08016ef9 	.word	0x08016ef9
 8016e40:	08016ef9 	.word	0x08016ef9
 8016e44:	08016ed1 	.word	0x08016ed1
 8016e48:	08016ef9 	.word	0x08016ef9
 8016e4c:	08016ef9 	.word	0x08016ef9
 8016e50:	08016ef9 	.word	0x08016ef9
 8016e54:	08016ef9 	.word	0x08016ef9
 8016e58:	08016ef9 	.word	0x08016ef9
 8016e5c:	08016ef9 	.word	0x08016ef9
 8016e60:	08016ef9 	.word	0x08016ef9
 8016e64:	08016ed9 	.word	0x08016ed9
 8016e68:	08016ef9 	.word	0x08016ef9
 8016e6c:	08016ef9 	.word	0x08016ef9
 8016e70:	08016ef9 	.word	0x08016ef9
 8016e74:	08016ef9 	.word	0x08016ef9
 8016e78:	08016ef9 	.word	0x08016ef9
 8016e7c:	08016ef9 	.word	0x08016ef9
 8016e80:	08016ef9 	.word	0x08016ef9
 8016e84:	08016ee1 	.word	0x08016ee1
 8016e88:	08016ef9 	.word	0x08016ef9
 8016e8c:	08016ef9 	.word	0x08016ef9
 8016e90:	08016ef9 	.word	0x08016ef9
 8016e94:	08016ef9 	.word	0x08016ef9
 8016e98:	08016ef9 	.word	0x08016ef9
 8016e9c:	08016ef9 	.word	0x08016ef9
 8016ea0:	08016ef9 	.word	0x08016ef9
 8016ea4:	08016ee9 	.word	0x08016ee9
 8016ea8:	08016ef9 	.word	0x08016ef9
 8016eac:	08016ef9 	.word	0x08016ef9
 8016eb0:	08016ef9 	.word	0x08016ef9
 8016eb4:	08016ef9 	.word	0x08016ef9
 8016eb8:	08016ef9 	.word	0x08016ef9
 8016ebc:	08016ef9 	.word	0x08016ef9
 8016ec0:	08016ef9 	.word	0x08016ef9
 8016ec4:	08016ef1 	.word	0x08016ef1
 8016ec8:	2301      	movs	r3, #1
 8016eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ece:	e222      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016ed0:	2304      	movs	r3, #4
 8016ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ed6:	e21e      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016ed8:	2308      	movs	r3, #8
 8016eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ede:	e21a      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016ee0:	2310      	movs	r3, #16
 8016ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ee6:	e216      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016ee8:	2320      	movs	r3, #32
 8016eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016eee:	e212      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016ef0:	2340      	movs	r3, #64	; 0x40
 8016ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ef6:	e20e      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016ef8:	2380      	movs	r3, #128	; 0x80
 8016efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016efe:	e20a      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016f00:	697b      	ldr	r3, [r7, #20]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	4a69      	ldr	r2, [pc, #420]	; (80170ac <UART_SetConfig+0x33c>)
 8016f06:	4293      	cmp	r3, r2
 8016f08:	d130      	bne.n	8016f6c <UART_SetConfig+0x1fc>
 8016f0a:	4b67      	ldr	r3, [pc, #412]	; (80170a8 <UART_SetConfig+0x338>)
 8016f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f0e:	f003 0307 	and.w	r3, r3, #7
 8016f12:	2b05      	cmp	r3, #5
 8016f14:	d826      	bhi.n	8016f64 <UART_SetConfig+0x1f4>
 8016f16:	a201      	add	r2, pc, #4	; (adr r2, 8016f1c <UART_SetConfig+0x1ac>)
 8016f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f1c:	08016f35 	.word	0x08016f35
 8016f20:	08016f3d 	.word	0x08016f3d
 8016f24:	08016f45 	.word	0x08016f45
 8016f28:	08016f4d 	.word	0x08016f4d
 8016f2c:	08016f55 	.word	0x08016f55
 8016f30:	08016f5d 	.word	0x08016f5d
 8016f34:	2300      	movs	r3, #0
 8016f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f3a:	e1ec      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016f3c:	2304      	movs	r3, #4
 8016f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f42:	e1e8      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016f44:	2308      	movs	r3, #8
 8016f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f4a:	e1e4      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016f4c:	2310      	movs	r3, #16
 8016f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f52:	e1e0      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016f54:	2320      	movs	r3, #32
 8016f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f5a:	e1dc      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016f5c:	2340      	movs	r3, #64	; 0x40
 8016f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f62:	e1d8      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016f64:	2380      	movs	r3, #128	; 0x80
 8016f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f6a:	e1d4      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016f6c:	697b      	ldr	r3, [r7, #20]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	4a4f      	ldr	r2, [pc, #316]	; (80170b0 <UART_SetConfig+0x340>)
 8016f72:	4293      	cmp	r3, r2
 8016f74:	d130      	bne.n	8016fd8 <UART_SetConfig+0x268>
 8016f76:	4b4c      	ldr	r3, [pc, #304]	; (80170a8 <UART_SetConfig+0x338>)
 8016f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f7a:	f003 0307 	and.w	r3, r3, #7
 8016f7e:	2b05      	cmp	r3, #5
 8016f80:	d826      	bhi.n	8016fd0 <UART_SetConfig+0x260>
 8016f82:	a201      	add	r2, pc, #4	; (adr r2, 8016f88 <UART_SetConfig+0x218>)
 8016f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f88:	08016fa1 	.word	0x08016fa1
 8016f8c:	08016fa9 	.word	0x08016fa9
 8016f90:	08016fb1 	.word	0x08016fb1
 8016f94:	08016fb9 	.word	0x08016fb9
 8016f98:	08016fc1 	.word	0x08016fc1
 8016f9c:	08016fc9 	.word	0x08016fc9
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fa6:	e1b6      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016fa8:	2304      	movs	r3, #4
 8016faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fae:	e1b2      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016fb0:	2308      	movs	r3, #8
 8016fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fb6:	e1ae      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016fb8:	2310      	movs	r3, #16
 8016fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fbe:	e1aa      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016fc0:	2320      	movs	r3, #32
 8016fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fc6:	e1a6      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016fc8:	2340      	movs	r3, #64	; 0x40
 8016fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fce:	e1a2      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016fd0:	2380      	movs	r3, #128	; 0x80
 8016fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fd6:	e19e      	b.n	8017316 <UART_SetConfig+0x5a6>
 8016fd8:	697b      	ldr	r3, [r7, #20]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	4a35      	ldr	r2, [pc, #212]	; (80170b4 <UART_SetConfig+0x344>)
 8016fde:	4293      	cmp	r3, r2
 8016fe0:	d130      	bne.n	8017044 <UART_SetConfig+0x2d4>
 8016fe2:	4b31      	ldr	r3, [pc, #196]	; (80170a8 <UART_SetConfig+0x338>)
 8016fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016fe6:	f003 0307 	and.w	r3, r3, #7
 8016fea:	2b05      	cmp	r3, #5
 8016fec:	d826      	bhi.n	801703c <UART_SetConfig+0x2cc>
 8016fee:	a201      	add	r2, pc, #4	; (adr r2, 8016ff4 <UART_SetConfig+0x284>)
 8016ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ff4:	0801700d 	.word	0x0801700d
 8016ff8:	08017015 	.word	0x08017015
 8016ffc:	0801701d 	.word	0x0801701d
 8017000:	08017025 	.word	0x08017025
 8017004:	0801702d 	.word	0x0801702d
 8017008:	08017035 	.word	0x08017035
 801700c:	2300      	movs	r3, #0
 801700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017012:	e180      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017014:	2304      	movs	r3, #4
 8017016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801701a:	e17c      	b.n	8017316 <UART_SetConfig+0x5a6>
 801701c:	2308      	movs	r3, #8
 801701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017022:	e178      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017024:	2310      	movs	r3, #16
 8017026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801702a:	e174      	b.n	8017316 <UART_SetConfig+0x5a6>
 801702c:	2320      	movs	r3, #32
 801702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017032:	e170      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017034:	2340      	movs	r3, #64	; 0x40
 8017036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801703a:	e16c      	b.n	8017316 <UART_SetConfig+0x5a6>
 801703c:	2380      	movs	r3, #128	; 0x80
 801703e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017042:	e168      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017044:	697b      	ldr	r3, [r7, #20]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	4a1b      	ldr	r2, [pc, #108]	; (80170b8 <UART_SetConfig+0x348>)
 801704a:	4293      	cmp	r3, r2
 801704c:	d142      	bne.n	80170d4 <UART_SetConfig+0x364>
 801704e:	4b16      	ldr	r3, [pc, #88]	; (80170a8 <UART_SetConfig+0x338>)
 8017050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017052:	f003 0307 	and.w	r3, r3, #7
 8017056:	2b05      	cmp	r3, #5
 8017058:	d838      	bhi.n	80170cc <UART_SetConfig+0x35c>
 801705a:	a201      	add	r2, pc, #4	; (adr r2, 8017060 <UART_SetConfig+0x2f0>)
 801705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017060:	08017079 	.word	0x08017079
 8017064:	08017081 	.word	0x08017081
 8017068:	08017089 	.word	0x08017089
 801706c:	08017091 	.word	0x08017091
 8017070:	080170bd 	.word	0x080170bd
 8017074:	080170c5 	.word	0x080170c5
 8017078:	2300      	movs	r3, #0
 801707a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801707e:	e14a      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017080:	2304      	movs	r3, #4
 8017082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017086:	e146      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017088:	2308      	movs	r3, #8
 801708a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801708e:	e142      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017090:	2310      	movs	r3, #16
 8017092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017096:	e13e      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017098:	cfff69f3 	.word	0xcfff69f3
 801709c:	58000c00 	.word	0x58000c00
 80170a0:	11fff4ff 	.word	0x11fff4ff
 80170a4:	40011000 	.word	0x40011000
 80170a8:	58024400 	.word	0x58024400
 80170ac:	40004400 	.word	0x40004400
 80170b0:	40004800 	.word	0x40004800
 80170b4:	40004c00 	.word	0x40004c00
 80170b8:	40005000 	.word	0x40005000
 80170bc:	2320      	movs	r3, #32
 80170be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170c2:	e128      	b.n	8017316 <UART_SetConfig+0x5a6>
 80170c4:	2340      	movs	r3, #64	; 0x40
 80170c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170ca:	e124      	b.n	8017316 <UART_SetConfig+0x5a6>
 80170cc:	2380      	movs	r3, #128	; 0x80
 80170ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80170d2:	e120      	b.n	8017316 <UART_SetConfig+0x5a6>
 80170d4:	697b      	ldr	r3, [r7, #20]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	4acb      	ldr	r2, [pc, #812]	; (8017408 <UART_SetConfig+0x698>)
 80170da:	4293      	cmp	r3, r2
 80170dc:	d176      	bne.n	80171cc <UART_SetConfig+0x45c>
 80170de:	4bcb      	ldr	r3, [pc, #812]	; (801740c <UART_SetConfig+0x69c>)
 80170e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80170e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80170e6:	2b28      	cmp	r3, #40	; 0x28
 80170e8:	d86c      	bhi.n	80171c4 <UART_SetConfig+0x454>
 80170ea:	a201      	add	r2, pc, #4	; (adr r2, 80170f0 <UART_SetConfig+0x380>)
 80170ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170f0:	08017195 	.word	0x08017195
 80170f4:	080171c5 	.word	0x080171c5
 80170f8:	080171c5 	.word	0x080171c5
 80170fc:	080171c5 	.word	0x080171c5
 8017100:	080171c5 	.word	0x080171c5
 8017104:	080171c5 	.word	0x080171c5
 8017108:	080171c5 	.word	0x080171c5
 801710c:	080171c5 	.word	0x080171c5
 8017110:	0801719d 	.word	0x0801719d
 8017114:	080171c5 	.word	0x080171c5
 8017118:	080171c5 	.word	0x080171c5
 801711c:	080171c5 	.word	0x080171c5
 8017120:	080171c5 	.word	0x080171c5
 8017124:	080171c5 	.word	0x080171c5
 8017128:	080171c5 	.word	0x080171c5
 801712c:	080171c5 	.word	0x080171c5
 8017130:	080171a5 	.word	0x080171a5
 8017134:	080171c5 	.word	0x080171c5
 8017138:	080171c5 	.word	0x080171c5
 801713c:	080171c5 	.word	0x080171c5
 8017140:	080171c5 	.word	0x080171c5
 8017144:	080171c5 	.word	0x080171c5
 8017148:	080171c5 	.word	0x080171c5
 801714c:	080171c5 	.word	0x080171c5
 8017150:	080171ad 	.word	0x080171ad
 8017154:	080171c5 	.word	0x080171c5
 8017158:	080171c5 	.word	0x080171c5
 801715c:	080171c5 	.word	0x080171c5
 8017160:	080171c5 	.word	0x080171c5
 8017164:	080171c5 	.word	0x080171c5
 8017168:	080171c5 	.word	0x080171c5
 801716c:	080171c5 	.word	0x080171c5
 8017170:	080171b5 	.word	0x080171b5
 8017174:	080171c5 	.word	0x080171c5
 8017178:	080171c5 	.word	0x080171c5
 801717c:	080171c5 	.word	0x080171c5
 8017180:	080171c5 	.word	0x080171c5
 8017184:	080171c5 	.word	0x080171c5
 8017188:	080171c5 	.word	0x080171c5
 801718c:	080171c5 	.word	0x080171c5
 8017190:	080171bd 	.word	0x080171bd
 8017194:	2301      	movs	r3, #1
 8017196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801719a:	e0bc      	b.n	8017316 <UART_SetConfig+0x5a6>
 801719c:	2304      	movs	r3, #4
 801719e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171a2:	e0b8      	b.n	8017316 <UART_SetConfig+0x5a6>
 80171a4:	2308      	movs	r3, #8
 80171a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171aa:	e0b4      	b.n	8017316 <UART_SetConfig+0x5a6>
 80171ac:	2310      	movs	r3, #16
 80171ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171b2:	e0b0      	b.n	8017316 <UART_SetConfig+0x5a6>
 80171b4:	2320      	movs	r3, #32
 80171b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171ba:	e0ac      	b.n	8017316 <UART_SetConfig+0x5a6>
 80171bc:	2340      	movs	r3, #64	; 0x40
 80171be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171c2:	e0a8      	b.n	8017316 <UART_SetConfig+0x5a6>
 80171c4:	2380      	movs	r3, #128	; 0x80
 80171c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80171ca:	e0a4      	b.n	8017316 <UART_SetConfig+0x5a6>
 80171cc:	697b      	ldr	r3, [r7, #20]
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	4a8f      	ldr	r2, [pc, #572]	; (8017410 <UART_SetConfig+0x6a0>)
 80171d2:	4293      	cmp	r3, r2
 80171d4:	d130      	bne.n	8017238 <UART_SetConfig+0x4c8>
 80171d6:	4b8d      	ldr	r3, [pc, #564]	; (801740c <UART_SetConfig+0x69c>)
 80171d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80171da:	f003 0307 	and.w	r3, r3, #7
 80171de:	2b05      	cmp	r3, #5
 80171e0:	d826      	bhi.n	8017230 <UART_SetConfig+0x4c0>
 80171e2:	a201      	add	r2, pc, #4	; (adr r2, 80171e8 <UART_SetConfig+0x478>)
 80171e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171e8:	08017201 	.word	0x08017201
 80171ec:	08017209 	.word	0x08017209
 80171f0:	08017211 	.word	0x08017211
 80171f4:	08017219 	.word	0x08017219
 80171f8:	08017221 	.word	0x08017221
 80171fc:	08017229 	.word	0x08017229
 8017200:	2300      	movs	r3, #0
 8017202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017206:	e086      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017208:	2304      	movs	r3, #4
 801720a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801720e:	e082      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017210:	2308      	movs	r3, #8
 8017212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017216:	e07e      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017218:	2310      	movs	r3, #16
 801721a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801721e:	e07a      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017220:	2320      	movs	r3, #32
 8017222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017226:	e076      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017228:	2340      	movs	r3, #64	; 0x40
 801722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801722e:	e072      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017230:	2380      	movs	r3, #128	; 0x80
 8017232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017236:	e06e      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017238:	697b      	ldr	r3, [r7, #20]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	4a75      	ldr	r2, [pc, #468]	; (8017414 <UART_SetConfig+0x6a4>)
 801723e:	4293      	cmp	r3, r2
 8017240:	d130      	bne.n	80172a4 <UART_SetConfig+0x534>
 8017242:	4b72      	ldr	r3, [pc, #456]	; (801740c <UART_SetConfig+0x69c>)
 8017244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017246:	f003 0307 	and.w	r3, r3, #7
 801724a:	2b05      	cmp	r3, #5
 801724c:	d826      	bhi.n	801729c <UART_SetConfig+0x52c>
 801724e:	a201      	add	r2, pc, #4	; (adr r2, 8017254 <UART_SetConfig+0x4e4>)
 8017250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017254:	0801726d 	.word	0x0801726d
 8017258:	08017275 	.word	0x08017275
 801725c:	0801727d 	.word	0x0801727d
 8017260:	08017285 	.word	0x08017285
 8017264:	0801728d 	.word	0x0801728d
 8017268:	08017295 	.word	0x08017295
 801726c:	2300      	movs	r3, #0
 801726e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017272:	e050      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017274:	2304      	movs	r3, #4
 8017276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801727a:	e04c      	b.n	8017316 <UART_SetConfig+0x5a6>
 801727c:	2308      	movs	r3, #8
 801727e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017282:	e048      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017284:	2310      	movs	r3, #16
 8017286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801728a:	e044      	b.n	8017316 <UART_SetConfig+0x5a6>
 801728c:	2320      	movs	r3, #32
 801728e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017292:	e040      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017294:	2340      	movs	r3, #64	; 0x40
 8017296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801729a:	e03c      	b.n	8017316 <UART_SetConfig+0x5a6>
 801729c:	2380      	movs	r3, #128	; 0x80
 801729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172a2:	e038      	b.n	8017316 <UART_SetConfig+0x5a6>
 80172a4:	697b      	ldr	r3, [r7, #20]
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	4a5b      	ldr	r2, [pc, #364]	; (8017418 <UART_SetConfig+0x6a8>)
 80172aa:	4293      	cmp	r3, r2
 80172ac:	d130      	bne.n	8017310 <UART_SetConfig+0x5a0>
 80172ae:	4b57      	ldr	r3, [pc, #348]	; (801740c <UART_SetConfig+0x69c>)
 80172b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80172b2:	f003 0307 	and.w	r3, r3, #7
 80172b6:	2b05      	cmp	r3, #5
 80172b8:	d826      	bhi.n	8017308 <UART_SetConfig+0x598>
 80172ba:	a201      	add	r2, pc, #4	; (adr r2, 80172c0 <UART_SetConfig+0x550>)
 80172bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172c0:	080172d9 	.word	0x080172d9
 80172c4:	080172e1 	.word	0x080172e1
 80172c8:	080172e9 	.word	0x080172e9
 80172cc:	080172f1 	.word	0x080172f1
 80172d0:	080172f9 	.word	0x080172f9
 80172d4:	08017301 	.word	0x08017301
 80172d8:	2302      	movs	r3, #2
 80172da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172de:	e01a      	b.n	8017316 <UART_SetConfig+0x5a6>
 80172e0:	2304      	movs	r3, #4
 80172e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172e6:	e016      	b.n	8017316 <UART_SetConfig+0x5a6>
 80172e8:	2308      	movs	r3, #8
 80172ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172ee:	e012      	b.n	8017316 <UART_SetConfig+0x5a6>
 80172f0:	2310      	movs	r3, #16
 80172f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172f6:	e00e      	b.n	8017316 <UART_SetConfig+0x5a6>
 80172f8:	2320      	movs	r3, #32
 80172fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80172fe:	e00a      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017300:	2340      	movs	r3, #64	; 0x40
 8017302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017306:	e006      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017308:	2380      	movs	r3, #128	; 0x80
 801730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801730e:	e002      	b.n	8017316 <UART_SetConfig+0x5a6>
 8017310:	2380      	movs	r3, #128	; 0x80
 8017312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017316:	697b      	ldr	r3, [r7, #20]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	4a3f      	ldr	r2, [pc, #252]	; (8017418 <UART_SetConfig+0x6a8>)
 801731c:	4293      	cmp	r3, r2
 801731e:	f040 80f8 	bne.w	8017512 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017322:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017326:	2b20      	cmp	r3, #32
 8017328:	dc46      	bgt.n	80173b8 <UART_SetConfig+0x648>
 801732a:	2b02      	cmp	r3, #2
 801732c:	f2c0 8082 	blt.w	8017434 <UART_SetConfig+0x6c4>
 8017330:	3b02      	subs	r3, #2
 8017332:	2b1e      	cmp	r3, #30
 8017334:	d87e      	bhi.n	8017434 <UART_SetConfig+0x6c4>
 8017336:	a201      	add	r2, pc, #4	; (adr r2, 801733c <UART_SetConfig+0x5cc>)
 8017338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801733c:	080173bf 	.word	0x080173bf
 8017340:	08017435 	.word	0x08017435
 8017344:	080173c7 	.word	0x080173c7
 8017348:	08017435 	.word	0x08017435
 801734c:	08017435 	.word	0x08017435
 8017350:	08017435 	.word	0x08017435
 8017354:	080173d7 	.word	0x080173d7
 8017358:	08017435 	.word	0x08017435
 801735c:	08017435 	.word	0x08017435
 8017360:	08017435 	.word	0x08017435
 8017364:	08017435 	.word	0x08017435
 8017368:	08017435 	.word	0x08017435
 801736c:	08017435 	.word	0x08017435
 8017370:	08017435 	.word	0x08017435
 8017374:	080173e7 	.word	0x080173e7
 8017378:	08017435 	.word	0x08017435
 801737c:	08017435 	.word	0x08017435
 8017380:	08017435 	.word	0x08017435
 8017384:	08017435 	.word	0x08017435
 8017388:	08017435 	.word	0x08017435
 801738c:	08017435 	.word	0x08017435
 8017390:	08017435 	.word	0x08017435
 8017394:	08017435 	.word	0x08017435
 8017398:	08017435 	.word	0x08017435
 801739c:	08017435 	.word	0x08017435
 80173a0:	08017435 	.word	0x08017435
 80173a4:	08017435 	.word	0x08017435
 80173a8:	08017435 	.word	0x08017435
 80173ac:	08017435 	.word	0x08017435
 80173b0:	08017435 	.word	0x08017435
 80173b4:	08017427 	.word	0x08017427
 80173b8:	2b40      	cmp	r3, #64	; 0x40
 80173ba:	d037      	beq.n	801742c <UART_SetConfig+0x6bc>
 80173bc:	e03a      	b.n	8017434 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80173be:	f7fc fc29 	bl	8013c14 <HAL_RCCEx_GetD3PCLK1Freq>
 80173c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80173c4:	e03c      	b.n	8017440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80173c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80173ca:	4618      	mov	r0, r3
 80173cc:	f7fc fc38 	bl	8013c40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80173d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80173d4:	e034      	b.n	8017440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80173d6:	f107 0318 	add.w	r3, r7, #24
 80173da:	4618      	mov	r0, r3
 80173dc:	f7fc fd84 	bl	8013ee8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80173e0:	69fb      	ldr	r3, [r7, #28]
 80173e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80173e4:	e02c      	b.n	8017440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80173e6:	4b09      	ldr	r3, [pc, #36]	; (801740c <UART_SetConfig+0x69c>)
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	f003 0320 	and.w	r3, r3, #32
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d016      	beq.n	8017420 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80173f2:	4b06      	ldr	r3, [pc, #24]	; (801740c <UART_SetConfig+0x69c>)
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	08db      	lsrs	r3, r3, #3
 80173f8:	f003 0303 	and.w	r3, r3, #3
 80173fc:	4a07      	ldr	r2, [pc, #28]	; (801741c <UART_SetConfig+0x6ac>)
 80173fe:	fa22 f303 	lsr.w	r3, r2, r3
 8017402:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017404:	e01c      	b.n	8017440 <UART_SetConfig+0x6d0>
 8017406:	bf00      	nop
 8017408:	40011400 	.word	0x40011400
 801740c:	58024400 	.word	0x58024400
 8017410:	40007800 	.word	0x40007800
 8017414:	40007c00 	.word	0x40007c00
 8017418:	58000c00 	.word	0x58000c00
 801741c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8017420:	4b9d      	ldr	r3, [pc, #628]	; (8017698 <UART_SetConfig+0x928>)
 8017422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017424:	e00c      	b.n	8017440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8017426:	4b9d      	ldr	r3, [pc, #628]	; (801769c <UART_SetConfig+0x92c>)
 8017428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801742a:	e009      	b.n	8017440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801742c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017432:	e005      	b.n	8017440 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8017434:	2300      	movs	r3, #0
 8017436:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8017438:	2301      	movs	r3, #1
 801743a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801743e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017442:	2b00      	cmp	r3, #0
 8017444:	f000 81de 	beq.w	8017804 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8017448:	697b      	ldr	r3, [r7, #20]
 801744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801744c:	4a94      	ldr	r2, [pc, #592]	; (80176a0 <UART_SetConfig+0x930>)
 801744e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017452:	461a      	mov	r2, r3
 8017454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017456:	fbb3 f3f2 	udiv	r3, r3, r2
 801745a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801745c:	697b      	ldr	r3, [r7, #20]
 801745e:	685a      	ldr	r2, [r3, #4]
 8017460:	4613      	mov	r3, r2
 8017462:	005b      	lsls	r3, r3, #1
 8017464:	4413      	add	r3, r2
 8017466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017468:	429a      	cmp	r2, r3
 801746a:	d305      	bcc.n	8017478 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801746c:	697b      	ldr	r3, [r7, #20]
 801746e:	685b      	ldr	r3, [r3, #4]
 8017470:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8017472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017474:	429a      	cmp	r2, r3
 8017476:	d903      	bls.n	8017480 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8017478:	2301      	movs	r3, #1
 801747a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801747e:	e1c1      	b.n	8017804 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017482:	2200      	movs	r2, #0
 8017484:	60bb      	str	r3, [r7, #8]
 8017486:	60fa      	str	r2, [r7, #12]
 8017488:	697b      	ldr	r3, [r7, #20]
 801748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801748c:	4a84      	ldr	r2, [pc, #528]	; (80176a0 <UART_SetConfig+0x930>)
 801748e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017492:	b29b      	uxth	r3, r3
 8017494:	2200      	movs	r2, #0
 8017496:	603b      	str	r3, [r7, #0]
 8017498:	607a      	str	r2, [r7, #4]
 801749a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801749e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80174a2:	f7e8 ff6d 	bl	8000380 <__aeabi_uldivmod>
 80174a6:	4602      	mov	r2, r0
 80174a8:	460b      	mov	r3, r1
 80174aa:	4610      	mov	r0, r2
 80174ac:	4619      	mov	r1, r3
 80174ae:	f04f 0200 	mov.w	r2, #0
 80174b2:	f04f 0300 	mov.w	r3, #0
 80174b6:	020b      	lsls	r3, r1, #8
 80174b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80174bc:	0202      	lsls	r2, r0, #8
 80174be:	6979      	ldr	r1, [r7, #20]
 80174c0:	6849      	ldr	r1, [r1, #4]
 80174c2:	0849      	lsrs	r1, r1, #1
 80174c4:	2000      	movs	r0, #0
 80174c6:	460c      	mov	r4, r1
 80174c8:	4605      	mov	r5, r0
 80174ca:	eb12 0804 	adds.w	r8, r2, r4
 80174ce:	eb43 0905 	adc.w	r9, r3, r5
 80174d2:	697b      	ldr	r3, [r7, #20]
 80174d4:	685b      	ldr	r3, [r3, #4]
 80174d6:	2200      	movs	r2, #0
 80174d8:	469a      	mov	sl, r3
 80174da:	4693      	mov	fp, r2
 80174dc:	4652      	mov	r2, sl
 80174de:	465b      	mov	r3, fp
 80174e0:	4640      	mov	r0, r8
 80174e2:	4649      	mov	r1, r9
 80174e4:	f7e8 ff4c 	bl	8000380 <__aeabi_uldivmod>
 80174e8:	4602      	mov	r2, r0
 80174ea:	460b      	mov	r3, r1
 80174ec:	4613      	mov	r3, r2
 80174ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80174f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80174f6:	d308      	bcc.n	801750a <UART_SetConfig+0x79a>
 80174f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80174fe:	d204      	bcs.n	801750a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8017500:	697b      	ldr	r3, [r7, #20]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017506:	60da      	str	r2, [r3, #12]
 8017508:	e17c      	b.n	8017804 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801750a:	2301      	movs	r3, #1
 801750c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8017510:	e178      	b.n	8017804 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017512:	697b      	ldr	r3, [r7, #20]
 8017514:	69db      	ldr	r3, [r3, #28]
 8017516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801751a:	f040 80c5 	bne.w	80176a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801751e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017522:	2b20      	cmp	r3, #32
 8017524:	dc48      	bgt.n	80175b8 <UART_SetConfig+0x848>
 8017526:	2b00      	cmp	r3, #0
 8017528:	db7b      	blt.n	8017622 <UART_SetConfig+0x8b2>
 801752a:	2b20      	cmp	r3, #32
 801752c:	d879      	bhi.n	8017622 <UART_SetConfig+0x8b2>
 801752e:	a201      	add	r2, pc, #4	; (adr r2, 8017534 <UART_SetConfig+0x7c4>)
 8017530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017534:	080175bf 	.word	0x080175bf
 8017538:	080175c7 	.word	0x080175c7
 801753c:	08017623 	.word	0x08017623
 8017540:	08017623 	.word	0x08017623
 8017544:	080175cf 	.word	0x080175cf
 8017548:	08017623 	.word	0x08017623
 801754c:	08017623 	.word	0x08017623
 8017550:	08017623 	.word	0x08017623
 8017554:	080175df 	.word	0x080175df
 8017558:	08017623 	.word	0x08017623
 801755c:	08017623 	.word	0x08017623
 8017560:	08017623 	.word	0x08017623
 8017564:	08017623 	.word	0x08017623
 8017568:	08017623 	.word	0x08017623
 801756c:	08017623 	.word	0x08017623
 8017570:	08017623 	.word	0x08017623
 8017574:	080175ef 	.word	0x080175ef
 8017578:	08017623 	.word	0x08017623
 801757c:	08017623 	.word	0x08017623
 8017580:	08017623 	.word	0x08017623
 8017584:	08017623 	.word	0x08017623
 8017588:	08017623 	.word	0x08017623
 801758c:	08017623 	.word	0x08017623
 8017590:	08017623 	.word	0x08017623
 8017594:	08017623 	.word	0x08017623
 8017598:	08017623 	.word	0x08017623
 801759c:	08017623 	.word	0x08017623
 80175a0:	08017623 	.word	0x08017623
 80175a4:	08017623 	.word	0x08017623
 80175a8:	08017623 	.word	0x08017623
 80175ac:	08017623 	.word	0x08017623
 80175b0:	08017623 	.word	0x08017623
 80175b4:	08017615 	.word	0x08017615
 80175b8:	2b40      	cmp	r3, #64	; 0x40
 80175ba:	d02e      	beq.n	801761a <UART_SetConfig+0x8aa>
 80175bc:	e031      	b.n	8017622 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80175be:	f7fb fbb7 	bl	8012d30 <HAL_RCC_GetPCLK1Freq>
 80175c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80175c4:	e033      	b.n	801762e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80175c6:	f7fb fbc9 	bl	8012d5c <HAL_RCC_GetPCLK2Freq>
 80175ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80175cc:	e02f      	b.n	801762e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80175ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80175d2:	4618      	mov	r0, r3
 80175d4:	f7fc fb34 	bl	8013c40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80175d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80175dc:	e027      	b.n	801762e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80175de:	f107 0318 	add.w	r3, r7, #24
 80175e2:	4618      	mov	r0, r3
 80175e4:	f7fc fc80 	bl	8013ee8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80175e8:	69fb      	ldr	r3, [r7, #28]
 80175ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80175ec:	e01f      	b.n	801762e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80175ee:	4b2d      	ldr	r3, [pc, #180]	; (80176a4 <UART_SetConfig+0x934>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	f003 0320 	and.w	r3, r3, #32
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d009      	beq.n	801760e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80175fa:	4b2a      	ldr	r3, [pc, #168]	; (80176a4 <UART_SetConfig+0x934>)
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	08db      	lsrs	r3, r3, #3
 8017600:	f003 0303 	and.w	r3, r3, #3
 8017604:	4a24      	ldr	r2, [pc, #144]	; (8017698 <UART_SetConfig+0x928>)
 8017606:	fa22 f303 	lsr.w	r3, r2, r3
 801760a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801760c:	e00f      	b.n	801762e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801760e:	4b22      	ldr	r3, [pc, #136]	; (8017698 <UART_SetConfig+0x928>)
 8017610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017612:	e00c      	b.n	801762e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8017614:	4b21      	ldr	r3, [pc, #132]	; (801769c <UART_SetConfig+0x92c>)
 8017616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017618:	e009      	b.n	801762e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801761a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801761e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017620:	e005      	b.n	801762e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8017622:	2300      	movs	r3, #0
 8017624:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8017626:	2301      	movs	r3, #1
 8017628:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801762c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801762e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017630:	2b00      	cmp	r3, #0
 8017632:	f000 80e7 	beq.w	8017804 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017636:	697b      	ldr	r3, [r7, #20]
 8017638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801763a:	4a19      	ldr	r2, [pc, #100]	; (80176a0 <UART_SetConfig+0x930>)
 801763c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017640:	461a      	mov	r2, r3
 8017642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017644:	fbb3 f3f2 	udiv	r3, r3, r2
 8017648:	005a      	lsls	r2, r3, #1
 801764a:	697b      	ldr	r3, [r7, #20]
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	085b      	lsrs	r3, r3, #1
 8017650:	441a      	add	r2, r3
 8017652:	697b      	ldr	r3, [r7, #20]
 8017654:	685b      	ldr	r3, [r3, #4]
 8017656:	fbb2 f3f3 	udiv	r3, r2, r3
 801765a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801765e:	2b0f      	cmp	r3, #15
 8017660:	d916      	bls.n	8017690 <UART_SetConfig+0x920>
 8017662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017668:	d212      	bcs.n	8017690 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801766c:	b29b      	uxth	r3, r3
 801766e:	f023 030f 	bic.w	r3, r3, #15
 8017672:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8017674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017676:	085b      	lsrs	r3, r3, #1
 8017678:	b29b      	uxth	r3, r3
 801767a:	f003 0307 	and.w	r3, r3, #7
 801767e:	b29a      	uxth	r2, r3
 8017680:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017682:	4313      	orrs	r3, r2
 8017684:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801768c:	60da      	str	r2, [r3, #12]
 801768e:	e0b9      	b.n	8017804 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8017690:	2301      	movs	r3, #1
 8017692:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8017696:	e0b5      	b.n	8017804 <UART_SetConfig+0xa94>
 8017698:	03d09000 	.word	0x03d09000
 801769c:	003d0900 	.word	0x003d0900
 80176a0:	08038eac 	.word	0x08038eac
 80176a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80176a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80176ac:	2b20      	cmp	r3, #32
 80176ae:	dc49      	bgt.n	8017744 <UART_SetConfig+0x9d4>
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	db7c      	blt.n	80177ae <UART_SetConfig+0xa3e>
 80176b4:	2b20      	cmp	r3, #32
 80176b6:	d87a      	bhi.n	80177ae <UART_SetConfig+0xa3e>
 80176b8:	a201      	add	r2, pc, #4	; (adr r2, 80176c0 <UART_SetConfig+0x950>)
 80176ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176be:	bf00      	nop
 80176c0:	0801774b 	.word	0x0801774b
 80176c4:	08017753 	.word	0x08017753
 80176c8:	080177af 	.word	0x080177af
 80176cc:	080177af 	.word	0x080177af
 80176d0:	0801775b 	.word	0x0801775b
 80176d4:	080177af 	.word	0x080177af
 80176d8:	080177af 	.word	0x080177af
 80176dc:	080177af 	.word	0x080177af
 80176e0:	0801776b 	.word	0x0801776b
 80176e4:	080177af 	.word	0x080177af
 80176e8:	080177af 	.word	0x080177af
 80176ec:	080177af 	.word	0x080177af
 80176f0:	080177af 	.word	0x080177af
 80176f4:	080177af 	.word	0x080177af
 80176f8:	080177af 	.word	0x080177af
 80176fc:	080177af 	.word	0x080177af
 8017700:	0801777b 	.word	0x0801777b
 8017704:	080177af 	.word	0x080177af
 8017708:	080177af 	.word	0x080177af
 801770c:	080177af 	.word	0x080177af
 8017710:	080177af 	.word	0x080177af
 8017714:	080177af 	.word	0x080177af
 8017718:	080177af 	.word	0x080177af
 801771c:	080177af 	.word	0x080177af
 8017720:	080177af 	.word	0x080177af
 8017724:	080177af 	.word	0x080177af
 8017728:	080177af 	.word	0x080177af
 801772c:	080177af 	.word	0x080177af
 8017730:	080177af 	.word	0x080177af
 8017734:	080177af 	.word	0x080177af
 8017738:	080177af 	.word	0x080177af
 801773c:	080177af 	.word	0x080177af
 8017740:	080177a1 	.word	0x080177a1
 8017744:	2b40      	cmp	r3, #64	; 0x40
 8017746:	d02e      	beq.n	80177a6 <UART_SetConfig+0xa36>
 8017748:	e031      	b.n	80177ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801774a:	f7fb faf1 	bl	8012d30 <HAL_RCC_GetPCLK1Freq>
 801774e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8017750:	e033      	b.n	80177ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017752:	f7fb fb03 	bl	8012d5c <HAL_RCC_GetPCLK2Freq>
 8017756:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8017758:	e02f      	b.n	80177ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801775a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801775e:	4618      	mov	r0, r3
 8017760:	f7fc fa6e 	bl	8013c40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8017764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017768:	e027      	b.n	80177ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801776a:	f107 0318 	add.w	r3, r7, #24
 801776e:	4618      	mov	r0, r3
 8017770:	f7fc fbba 	bl	8013ee8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8017774:	69fb      	ldr	r3, [r7, #28]
 8017776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017778:	e01f      	b.n	80177ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801777a:	4b2d      	ldr	r3, [pc, #180]	; (8017830 <UART_SetConfig+0xac0>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	f003 0320 	and.w	r3, r3, #32
 8017782:	2b00      	cmp	r3, #0
 8017784:	d009      	beq.n	801779a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8017786:	4b2a      	ldr	r3, [pc, #168]	; (8017830 <UART_SetConfig+0xac0>)
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	08db      	lsrs	r3, r3, #3
 801778c:	f003 0303 	and.w	r3, r3, #3
 8017790:	4a28      	ldr	r2, [pc, #160]	; (8017834 <UART_SetConfig+0xac4>)
 8017792:	fa22 f303 	lsr.w	r3, r2, r3
 8017796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017798:	e00f      	b.n	80177ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801779a:	4b26      	ldr	r3, [pc, #152]	; (8017834 <UART_SetConfig+0xac4>)
 801779c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801779e:	e00c      	b.n	80177ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80177a0:	4b25      	ldr	r3, [pc, #148]	; (8017838 <UART_SetConfig+0xac8>)
 80177a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80177a4:	e009      	b.n	80177ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80177a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80177aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80177ac:	e005      	b.n	80177ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80177ae:	2300      	movs	r3, #0
 80177b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80177b2:	2301      	movs	r3, #1
 80177b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80177b8:	bf00      	nop
    }

    if (pclk != 0U)
 80177ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d021      	beq.n	8017804 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80177c0:	697b      	ldr	r3, [r7, #20]
 80177c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177c4:	4a1d      	ldr	r2, [pc, #116]	; (801783c <UART_SetConfig+0xacc>)
 80177c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80177ca:	461a      	mov	r2, r3
 80177cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80177d2:	697b      	ldr	r3, [r7, #20]
 80177d4:	685b      	ldr	r3, [r3, #4]
 80177d6:	085b      	lsrs	r3, r3, #1
 80177d8:	441a      	add	r2, r3
 80177da:	697b      	ldr	r3, [r7, #20]
 80177dc:	685b      	ldr	r3, [r3, #4]
 80177de:	fbb2 f3f3 	udiv	r3, r2, r3
 80177e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80177e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177e6:	2b0f      	cmp	r3, #15
 80177e8:	d909      	bls.n	80177fe <UART_SetConfig+0xa8e>
 80177ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80177f0:	d205      	bcs.n	80177fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80177f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177f4:	b29a      	uxth	r2, r3
 80177f6:	697b      	ldr	r3, [r7, #20]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	60da      	str	r2, [r3, #12]
 80177fc:	e002      	b.n	8017804 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80177fe:	2301      	movs	r3, #1
 8017800:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	2201      	movs	r2, #1
 8017808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801780c:	697b      	ldr	r3, [r7, #20]
 801780e:	2201      	movs	r2, #1
 8017810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8017814:	697b      	ldr	r3, [r7, #20]
 8017816:	2200      	movs	r2, #0
 8017818:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801781a:	697b      	ldr	r3, [r7, #20]
 801781c:	2200      	movs	r2, #0
 801781e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8017820:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8017824:	4618      	mov	r0, r3
 8017826:	3748      	adds	r7, #72	; 0x48
 8017828:	46bd      	mov	sp, r7
 801782a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801782e:	bf00      	nop
 8017830:	58024400 	.word	0x58024400
 8017834:	03d09000 	.word	0x03d09000
 8017838:	003d0900 	.word	0x003d0900
 801783c:	08038eac 	.word	0x08038eac

08017840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8017840:	b480      	push	{r7}
 8017842:	b083      	sub	sp, #12
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801784c:	f003 0301 	and.w	r3, r3, #1
 8017850:	2b00      	cmp	r3, #0
 8017852:	d00a      	beq.n	801786a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	685b      	ldr	r3, [r3, #4]
 801785a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	430a      	orrs	r2, r1
 8017868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801786e:	f003 0302 	and.w	r3, r3, #2
 8017872:	2b00      	cmp	r3, #0
 8017874:	d00a      	beq.n	801788c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	685b      	ldr	r3, [r3, #4]
 801787c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	430a      	orrs	r2, r1
 801788a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017890:	f003 0304 	and.w	r3, r3, #4
 8017894:	2b00      	cmp	r3, #0
 8017896:	d00a      	beq.n	80178ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	685b      	ldr	r3, [r3, #4]
 801789e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	430a      	orrs	r2, r1
 80178ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178b2:	f003 0308 	and.w	r3, r3, #8
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d00a      	beq.n	80178d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	685b      	ldr	r3, [r3, #4]
 80178c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	430a      	orrs	r2, r1
 80178ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178d4:	f003 0310 	and.w	r3, r3, #16
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d00a      	beq.n	80178f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	689b      	ldr	r3, [r3, #8]
 80178e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	430a      	orrs	r2, r1
 80178f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178f6:	f003 0320 	and.w	r3, r3, #32
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d00a      	beq.n	8017914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	689b      	ldr	r3, [r3, #8]
 8017904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	430a      	orrs	r2, r1
 8017912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801791c:	2b00      	cmp	r3, #0
 801791e:	d01a      	beq.n	8017956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	685b      	ldr	r3, [r3, #4]
 8017926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	430a      	orrs	r2, r1
 8017934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801793a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801793e:	d10a      	bne.n	8017956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	685b      	ldr	r3, [r3, #4]
 8017946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	430a      	orrs	r2, r1
 8017954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801795a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801795e:	2b00      	cmp	r3, #0
 8017960:	d00a      	beq.n	8017978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	685b      	ldr	r3, [r3, #4]
 8017968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	430a      	orrs	r2, r1
 8017976:	605a      	str	r2, [r3, #4]
  }
}
 8017978:	bf00      	nop
 801797a:	370c      	adds	r7, #12
 801797c:	46bd      	mov	sp, r7
 801797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017982:	4770      	bx	lr

08017984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017984:	b580      	push	{r7, lr}
 8017986:	b086      	sub	sp, #24
 8017988:	af02      	add	r7, sp, #8
 801798a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	2200      	movs	r2, #0
 8017990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8017994:	f7f4 fa56 	bl	800be44 <HAL_GetTick>
 8017998:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	f003 0308 	and.w	r3, r3, #8
 80179a4:	2b08      	cmp	r3, #8
 80179a6:	d10e      	bne.n	80179c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80179a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80179ac:	9300      	str	r3, [sp, #0]
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	2200      	movs	r2, #0
 80179b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f000 f82f 	bl	8017a1a <UART_WaitOnFlagUntilTimeout>
 80179bc:	4603      	mov	r3, r0
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d001      	beq.n	80179c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80179c2:	2303      	movs	r3, #3
 80179c4:	e025      	b.n	8017a12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	f003 0304 	and.w	r3, r3, #4
 80179d0:	2b04      	cmp	r3, #4
 80179d2:	d10e      	bne.n	80179f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80179d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80179d8:	9300      	str	r3, [sp, #0]
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	2200      	movs	r2, #0
 80179de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80179e2:	6878      	ldr	r0, [r7, #4]
 80179e4:	f000 f819 	bl	8017a1a <UART_WaitOnFlagUntilTimeout>
 80179e8:	4603      	mov	r3, r0
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d001      	beq.n	80179f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80179ee:	2303      	movs	r3, #3
 80179f0:	e00f      	b.n	8017a12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	2220      	movs	r2, #32
 80179f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	2220      	movs	r2, #32
 80179fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	2200      	movs	r2, #0
 8017a06:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8017a10:	2300      	movs	r3, #0
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3710      	adds	r7, #16
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}

08017a1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8017a1a:	b580      	push	{r7, lr}
 8017a1c:	b09c      	sub	sp, #112	; 0x70
 8017a1e:	af00      	add	r7, sp, #0
 8017a20:	60f8      	str	r0, [r7, #12]
 8017a22:	60b9      	str	r1, [r7, #8]
 8017a24:	603b      	str	r3, [r7, #0]
 8017a26:	4613      	mov	r3, r2
 8017a28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017a2a:	e0a9      	b.n	8017b80 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a32:	f000 80a5 	beq.w	8017b80 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017a36:	f7f4 fa05 	bl	800be44 <HAL_GetTick>
 8017a3a:	4602      	mov	r2, r0
 8017a3c:	683b      	ldr	r3, [r7, #0]
 8017a3e:	1ad3      	subs	r3, r2, r3
 8017a40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017a42:	429a      	cmp	r2, r3
 8017a44:	d302      	bcc.n	8017a4c <UART_WaitOnFlagUntilTimeout+0x32>
 8017a46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d140      	bne.n	8017ace <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a54:	e853 3f00 	ldrex	r3, [r3]
 8017a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017a60:	667b      	str	r3, [r7, #100]	; 0x64
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	461a      	mov	r2, r3
 8017a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017a6c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017a70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017a72:	e841 2300 	strex	r3, r2, [r1]
 8017a76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8017a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d1e6      	bne.n	8017a4c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	3308      	adds	r3, #8
 8017a84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a88:	e853 3f00 	ldrex	r3, [r3]
 8017a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a90:	f023 0301 	bic.w	r3, r3, #1
 8017a94:	663b      	str	r3, [r7, #96]	; 0x60
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	3308      	adds	r3, #8
 8017a9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017a9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8017aa0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017aa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017aa6:	e841 2300 	strex	r3, r2, [r1]
 8017aaa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8017aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d1e5      	bne.n	8017a7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	2220      	movs	r2, #32
 8017ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	2220      	movs	r2, #32
 8017abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8017aca:	2303      	movs	r3, #3
 8017acc:	e069      	b.n	8017ba2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	f003 0304 	and.w	r3, r3, #4
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d051      	beq.n	8017b80 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	69db      	ldr	r3, [r3, #28]
 8017ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017aea:	d149      	bne.n	8017b80 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017af4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017afe:	e853 3f00 	ldrex	r3, [r3]
 8017b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	461a      	mov	r2, r3
 8017b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b14:	637b      	str	r3, [r7, #52]	; 0x34
 8017b16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017b1c:	e841 2300 	strex	r3, r2, [r1]
 8017b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d1e6      	bne.n	8017af6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	3308      	adds	r3, #8
 8017b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b30:	697b      	ldr	r3, [r7, #20]
 8017b32:	e853 3f00 	ldrex	r3, [r3]
 8017b36:	613b      	str	r3, [r7, #16]
   return(result);
 8017b38:	693b      	ldr	r3, [r7, #16]
 8017b3a:	f023 0301 	bic.w	r3, r3, #1
 8017b3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	3308      	adds	r3, #8
 8017b46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017b48:	623a      	str	r2, [r7, #32]
 8017b4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b4c:	69f9      	ldr	r1, [r7, #28]
 8017b4e:	6a3a      	ldr	r2, [r7, #32]
 8017b50:	e841 2300 	strex	r3, r2, [r1]
 8017b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8017b56:	69bb      	ldr	r3, [r7, #24]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d1e5      	bne.n	8017b28 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	2220      	movs	r2, #32
 8017b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	2220      	movs	r2, #32
 8017b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	2220      	movs	r2, #32
 8017b70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	2200      	movs	r2, #0
 8017b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8017b7c:	2303      	movs	r3, #3
 8017b7e:	e010      	b.n	8017ba2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	69da      	ldr	r2, [r3, #28]
 8017b86:	68bb      	ldr	r3, [r7, #8]
 8017b88:	4013      	ands	r3, r2
 8017b8a:	68ba      	ldr	r2, [r7, #8]
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	bf0c      	ite	eq
 8017b90:	2301      	moveq	r3, #1
 8017b92:	2300      	movne	r3, #0
 8017b94:	b2db      	uxtb	r3, r3
 8017b96:	461a      	mov	r2, r3
 8017b98:	79fb      	ldrb	r3, [r7, #7]
 8017b9a:	429a      	cmp	r2, r3
 8017b9c:	f43f af46 	beq.w	8017a2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017ba0:	2300      	movs	r3, #0
}
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	3770      	adds	r7, #112	; 0x70
 8017ba6:	46bd      	mov	sp, r7
 8017ba8:	bd80      	pop	{r7, pc}
	...

08017bac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017bac:	b480      	push	{r7}
 8017bae:	b0a3      	sub	sp, #140	; 0x8c
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	60f8      	str	r0, [r7, #12]
 8017bb4:	60b9      	str	r1, [r7, #8]
 8017bb6:	4613      	mov	r3, r2
 8017bb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	68ba      	ldr	r2, [r7, #8]
 8017bbe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	88fa      	ldrh	r2, [r7, #6]
 8017bc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	88fa      	ldrh	r2, [r7, #6]
 8017bcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	689b      	ldr	r3, [r3, #8]
 8017bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017bde:	d10e      	bne.n	8017bfe <UART_Start_Receive_IT+0x52>
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	691b      	ldr	r3, [r3, #16]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d105      	bne.n	8017bf4 <UART_Start_Receive_IT+0x48>
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	f240 12ff 	movw	r2, #511	; 0x1ff
 8017bee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017bf2:	e02d      	b.n	8017c50 <UART_Start_Receive_IT+0xa4>
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	22ff      	movs	r2, #255	; 0xff
 8017bf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017bfc:	e028      	b.n	8017c50 <UART_Start_Receive_IT+0xa4>
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	689b      	ldr	r3, [r3, #8]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d10d      	bne.n	8017c22 <UART_Start_Receive_IT+0x76>
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	691b      	ldr	r3, [r3, #16]
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d104      	bne.n	8017c18 <UART_Start_Receive_IT+0x6c>
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	22ff      	movs	r2, #255	; 0xff
 8017c12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017c16:	e01b      	b.n	8017c50 <UART_Start_Receive_IT+0xa4>
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	227f      	movs	r2, #127	; 0x7f
 8017c1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017c20:	e016      	b.n	8017c50 <UART_Start_Receive_IT+0xa4>
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	689b      	ldr	r3, [r3, #8]
 8017c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017c2a:	d10d      	bne.n	8017c48 <UART_Start_Receive_IT+0x9c>
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	691b      	ldr	r3, [r3, #16]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d104      	bne.n	8017c3e <UART_Start_Receive_IT+0x92>
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	227f      	movs	r2, #127	; 0x7f
 8017c38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017c3c:	e008      	b.n	8017c50 <UART_Start_Receive_IT+0xa4>
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	223f      	movs	r2, #63	; 0x3f
 8017c42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017c46:	e003      	b.n	8017c50 <UART_Start_Receive_IT+0xa4>
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	2200      	movs	r2, #0
 8017c54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	2222      	movs	r2, #34	; 0x22
 8017c5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	3308      	adds	r3, #8
 8017c66:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c6a:	e853 3f00 	ldrex	r3, [r3]
 8017c6e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8017c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017c72:	f043 0301 	orr.w	r3, r3, #1
 8017c76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	3308      	adds	r3, #8
 8017c80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017c84:	673a      	str	r2, [r7, #112]	; 0x70
 8017c86:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c88:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8017c8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017c8c:	e841 2300 	strex	r3, r2, [r1]
 8017c90:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8017c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d1e3      	bne.n	8017c60 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017ca0:	d153      	bne.n	8017d4a <UART_Start_Receive_IT+0x19e>
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017ca8:	88fa      	ldrh	r2, [r7, #6]
 8017caa:	429a      	cmp	r2, r3
 8017cac:	d34d      	bcc.n	8017d4a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	689b      	ldr	r3, [r3, #8]
 8017cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017cb6:	d107      	bne.n	8017cc8 <UART_Start_Receive_IT+0x11c>
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	691b      	ldr	r3, [r3, #16]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d103      	bne.n	8017cc8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	4a4b      	ldr	r2, [pc, #300]	; (8017df0 <UART_Start_Receive_IT+0x244>)
 8017cc4:	671a      	str	r2, [r3, #112]	; 0x70
 8017cc6:	e002      	b.n	8017cce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	4a4a      	ldr	r2, [pc, #296]	; (8017df4 <UART_Start_Receive_IT+0x248>)
 8017ccc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	691b      	ldr	r3, [r3, #16]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d01a      	beq.n	8017d14 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ce6:	e853 3f00 	ldrex	r3, [r3]
 8017cea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	461a      	mov	r2, r3
 8017cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017d00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017d02:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017d06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017d08:	e841 2300 	strex	r3, r2, [r1]
 8017d0c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8017d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d1e4      	bne.n	8017cde <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	3308      	adds	r3, #8
 8017d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d1e:	e853 3f00 	ldrex	r3, [r3]
 8017d22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	3308      	adds	r3, #8
 8017d32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017d34:	64ba      	str	r2, [r7, #72]	; 0x48
 8017d36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017d3c:	e841 2300 	strex	r3, r2, [r1]
 8017d40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8017d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d1e5      	bne.n	8017d14 <UART_Start_Receive_IT+0x168>
 8017d48:	e04a      	b.n	8017de0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	689b      	ldr	r3, [r3, #8]
 8017d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017d52:	d107      	bne.n	8017d64 <UART_Start_Receive_IT+0x1b8>
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	691b      	ldr	r3, [r3, #16]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d103      	bne.n	8017d64 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	4a26      	ldr	r2, [pc, #152]	; (8017df8 <UART_Start_Receive_IT+0x24c>)
 8017d60:	671a      	str	r2, [r3, #112]	; 0x70
 8017d62:	e002      	b.n	8017d6a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	4a25      	ldr	r2, [pc, #148]	; (8017dfc <UART_Start_Receive_IT+0x250>)
 8017d68:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	2200      	movs	r2, #0
 8017d6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	691b      	ldr	r3, [r3, #16]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d019      	beq.n	8017dae <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d82:	e853 3f00 	ldrex	r3, [r3]
 8017d86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d8a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8017d8e:	677b      	str	r3, [r7, #116]	; 0x74
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	461a      	mov	r2, r3
 8017d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017d98:	637b      	str	r3, [r7, #52]	; 0x34
 8017d9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017da0:	e841 2300 	strex	r3, r2, [r1]
 8017da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d1e6      	bne.n	8017d7a <UART_Start_Receive_IT+0x1ce>
 8017dac:	e018      	b.n	8017de0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017db4:	697b      	ldr	r3, [r7, #20]
 8017db6:	e853 3f00 	ldrex	r3, [r3]
 8017dba:	613b      	str	r3, [r7, #16]
   return(result);
 8017dbc:	693b      	ldr	r3, [r7, #16]
 8017dbe:	f043 0320 	orr.w	r3, r3, #32
 8017dc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	461a      	mov	r2, r3
 8017dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017dcc:	623b      	str	r3, [r7, #32]
 8017dce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dd0:	69f9      	ldr	r1, [r7, #28]
 8017dd2:	6a3a      	ldr	r2, [r7, #32]
 8017dd4:	e841 2300 	strex	r3, r2, [r1]
 8017dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8017dda:	69bb      	ldr	r3, [r7, #24]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d1e6      	bne.n	8017dae <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8017de0:	2300      	movs	r3, #0
}
 8017de2:	4618      	mov	r0, r3
 8017de4:	378c      	adds	r7, #140	; 0x8c
 8017de6:	46bd      	mov	sp, r7
 8017de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dec:	4770      	bx	lr
 8017dee:	bf00      	nop
 8017df0:	0801884d 	.word	0x0801884d
 8017df4:	08018555 	.word	0x08018555
 8017df8:	080183f3 	.word	0x080183f3
 8017dfc:	08018293 	.word	0x08018293

08017e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017e00:	b480      	push	{r7}
 8017e02:	b095      	sub	sp, #84	; 0x54
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e10:	e853 3f00 	ldrex	r3, [r3]
 8017e14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	461a      	mov	r2, r3
 8017e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e26:	643b      	str	r3, [r7, #64]	; 0x40
 8017e28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017e2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017e2e:	e841 2300 	strex	r3, r2, [r1]
 8017e32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d1e6      	bne.n	8017e08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	3308      	adds	r3, #8
 8017e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e42:	6a3b      	ldr	r3, [r7, #32]
 8017e44:	e853 3f00 	ldrex	r3, [r3]
 8017e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8017e4a:	69fa      	ldr	r2, [r7, #28]
 8017e4c:	4b1e      	ldr	r3, [pc, #120]	; (8017ec8 <UART_EndRxTransfer+0xc8>)
 8017e4e:	4013      	ands	r3, r2
 8017e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	3308      	adds	r3, #8
 8017e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017e5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e62:	e841 2300 	strex	r3, r2, [r1]
 8017e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d1e5      	bne.n	8017e3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e72:	2b01      	cmp	r3, #1
 8017e74:	d118      	bne.n	8017ea8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	e853 3f00 	ldrex	r3, [r3]
 8017e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8017e84:	68bb      	ldr	r3, [r7, #8]
 8017e86:	f023 0310 	bic.w	r3, r3, #16
 8017e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	461a      	mov	r2, r3
 8017e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e94:	61bb      	str	r3, [r7, #24]
 8017e96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e98:	6979      	ldr	r1, [r7, #20]
 8017e9a:	69ba      	ldr	r2, [r7, #24]
 8017e9c:	e841 2300 	strex	r3, r2, [r1]
 8017ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8017ea2:	693b      	ldr	r3, [r7, #16]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d1e6      	bne.n	8017e76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	2220      	movs	r2, #32
 8017eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	2200      	movs	r2, #0
 8017eba:	671a      	str	r2, [r3, #112]	; 0x70
}
 8017ebc:	bf00      	nop
 8017ebe:	3754      	adds	r7, #84	; 0x54
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec6:	4770      	bx	lr
 8017ec8:	effffffe 	.word	0xeffffffe

08017ecc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b084      	sub	sp, #16
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	2200      	movs	r2, #0
 8017ede:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017eea:	68f8      	ldr	r0, [r7, #12]
 8017eec:	f7fe ff2a 	bl	8016d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017ef0:	bf00      	nop
 8017ef2:	3710      	adds	r7, #16
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}

08017ef8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017ef8:	b480      	push	{r7}
 8017efa:	b08f      	sub	sp, #60	; 0x3c
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017f06:	2b21      	cmp	r3, #33	; 0x21
 8017f08:	d14c      	bne.n	8017fa4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d132      	bne.n	8017f7c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f1c:	6a3b      	ldr	r3, [r7, #32]
 8017f1e:	e853 3f00 	ldrex	r3, [r3]
 8017f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8017f24:	69fb      	ldr	r3, [r7, #28]
 8017f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	461a      	mov	r2, r3
 8017f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017f36:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f3c:	e841 2300 	strex	r3, r2, [r1]
 8017f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d1e6      	bne.n	8017f16 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	e853 3f00 	ldrex	r3, [r3]
 8017f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8017f56:	68bb      	ldr	r3, [r7, #8]
 8017f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	461a      	mov	r2, r3
 8017f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f66:	61bb      	str	r3, [r7, #24]
 8017f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f6a:	6979      	ldr	r1, [r7, #20]
 8017f6c:	69ba      	ldr	r2, [r7, #24]
 8017f6e:	e841 2300 	strex	r3, r2, [r1]
 8017f72:	613b      	str	r3, [r7, #16]
   return(result);
 8017f74:	693b      	ldr	r3, [r7, #16]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d1e6      	bne.n	8017f48 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8017f7a:	e013      	b.n	8017fa4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f80:	781a      	ldrb	r2, [r3, #0]
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f8c:	1c5a      	adds	r2, r3, #1
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017f98:	b29b      	uxth	r3, r3
 8017f9a:	3b01      	subs	r3, #1
 8017f9c:	b29a      	uxth	r2, r3
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8017fa4:	bf00      	nop
 8017fa6:	373c      	adds	r7, #60	; 0x3c
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fae:	4770      	bx	lr

08017fb0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017fb0:	b480      	push	{r7}
 8017fb2:	b091      	sub	sp, #68	; 0x44
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017fbe:	2b21      	cmp	r3, #33	; 0x21
 8017fc0:	d151      	bne.n	8018066 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017fc8:	b29b      	uxth	r3, r3
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d132      	bne.n	8018034 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fd6:	e853 3f00 	ldrex	r3, [r3]
 8017fda:	623b      	str	r3, [r7, #32]
   return(result);
 8017fdc:	6a3b      	ldr	r3, [r7, #32]
 8017fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	461a      	mov	r2, r3
 8017fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fec:	633b      	str	r3, [r7, #48]	; 0x30
 8017fee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ff4:	e841 2300 	strex	r3, r2, [r1]
 8017ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d1e6      	bne.n	8017fce <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018006:	693b      	ldr	r3, [r7, #16]
 8018008:	e853 3f00 	ldrex	r3, [r3]
 801800c:	60fb      	str	r3, [r7, #12]
   return(result);
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018014:	637b      	str	r3, [r7, #52]	; 0x34
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	461a      	mov	r2, r3
 801801c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801801e:	61fb      	str	r3, [r7, #28]
 8018020:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018022:	69b9      	ldr	r1, [r7, #24]
 8018024:	69fa      	ldr	r2, [r7, #28]
 8018026:	e841 2300 	strex	r3, r2, [r1]
 801802a:	617b      	str	r3, [r7, #20]
   return(result);
 801802c:	697b      	ldr	r3, [r7, #20]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d1e6      	bne.n	8018000 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8018032:	e018      	b.n	8018066 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018038:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801803a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801803c:	881b      	ldrh	r3, [r3, #0]
 801803e:	461a      	mov	r2, r3
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018048:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801804e:	1c9a      	adds	r2, r3, #2
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801805a:	b29b      	uxth	r3, r3
 801805c:	3b01      	subs	r3, #1
 801805e:	b29a      	uxth	r2, r3
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8018066:	bf00      	nop
 8018068:	3744      	adds	r7, #68	; 0x44
 801806a:	46bd      	mov	sp, r7
 801806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018070:	4770      	bx	lr

08018072 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8018072:	b480      	push	{r7}
 8018074:	b091      	sub	sp, #68	; 0x44
 8018076:	af00      	add	r7, sp, #0
 8018078:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018080:	2b21      	cmp	r3, #33	; 0x21
 8018082:	d160      	bne.n	8018146 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801808a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801808c:	e057      	b.n	801813e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8018094:	b29b      	uxth	r3, r3
 8018096:	2b00      	cmp	r3, #0
 8018098:	d133      	bne.n	8018102 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	3308      	adds	r3, #8
 80180a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a4:	e853 3f00 	ldrex	r3, [r3]
 80180a8:	623b      	str	r3, [r7, #32]
   return(result);
 80180aa:	6a3b      	ldr	r3, [r7, #32]
 80180ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80180b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	3308      	adds	r3, #8
 80180b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80180ba:	633a      	str	r2, [r7, #48]	; 0x30
 80180bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80180c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180c2:	e841 2300 	strex	r3, r2, [r1]
 80180c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80180c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d1e5      	bne.n	801809a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180d4:	693b      	ldr	r3, [r7, #16]
 80180d6:	e853 3f00 	ldrex	r3, [r3]
 80180da:	60fb      	str	r3, [r7, #12]
   return(result);
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180e2:	637b      	str	r3, [r7, #52]	; 0x34
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	461a      	mov	r2, r3
 80180ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180ec:	61fb      	str	r3, [r7, #28]
 80180ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180f0:	69b9      	ldr	r1, [r7, #24]
 80180f2:	69fa      	ldr	r2, [r7, #28]
 80180f4:	e841 2300 	strex	r3, r2, [r1]
 80180f8:	617b      	str	r3, [r7, #20]
   return(result);
 80180fa:	697b      	ldr	r3, [r7, #20]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d1e6      	bne.n	80180ce <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8018100:	e021      	b.n	8018146 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	69db      	ldr	r3, [r3, #28]
 8018108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801810c:	2b00      	cmp	r3, #0
 801810e:	d013      	beq.n	8018138 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018114:	781a      	ldrb	r2, [r3, #0]
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018120:	1c5a      	adds	r2, r3, #1
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801812c:	b29b      	uxth	r3, r3
 801812e:	3b01      	subs	r3, #1
 8018130:	b29a      	uxth	r2, r3
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8018138:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801813a:	3b01      	subs	r3, #1
 801813c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801813e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018140:	2b00      	cmp	r3, #0
 8018142:	d1a4      	bne.n	801808e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8018144:	e7ff      	b.n	8018146 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8018146:	bf00      	nop
 8018148:	3744      	adds	r7, #68	; 0x44
 801814a:	46bd      	mov	sp, r7
 801814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018150:	4770      	bx	lr

08018152 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8018152:	b480      	push	{r7}
 8018154:	b091      	sub	sp, #68	; 0x44
 8018156:	af00      	add	r7, sp, #0
 8018158:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018160:	2b21      	cmp	r3, #33	; 0x21
 8018162:	d165      	bne.n	8018230 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801816a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801816c:	e05c      	b.n	8018228 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8018174:	b29b      	uxth	r3, r3
 8018176:	2b00      	cmp	r3, #0
 8018178:	d133      	bne.n	80181e2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	3308      	adds	r3, #8
 8018180:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018182:	6a3b      	ldr	r3, [r7, #32]
 8018184:	e853 3f00 	ldrex	r3, [r3]
 8018188:	61fb      	str	r3, [r7, #28]
   return(result);
 801818a:	69fb      	ldr	r3, [r7, #28]
 801818c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8018190:	637b      	str	r3, [r7, #52]	; 0x34
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	3308      	adds	r3, #8
 8018198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801819a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801819c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801819e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80181a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181a2:	e841 2300 	strex	r3, r2, [r1]
 80181a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80181a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d1e5      	bne.n	801817a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	e853 3f00 	ldrex	r3, [r3]
 80181ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80181bc:	68bb      	ldr	r3, [r7, #8]
 80181be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181c2:	633b      	str	r3, [r7, #48]	; 0x30
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	461a      	mov	r2, r3
 80181ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181cc:	61bb      	str	r3, [r7, #24]
 80181ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80181d0:	6979      	ldr	r1, [r7, #20]
 80181d2:	69ba      	ldr	r2, [r7, #24]
 80181d4:	e841 2300 	strex	r3, r2, [r1]
 80181d8:	613b      	str	r3, [r7, #16]
   return(result);
 80181da:	693b      	ldr	r3, [r7, #16]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d1e6      	bne.n	80181ae <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80181e0:	e026      	b.n	8018230 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	69db      	ldr	r3, [r3, #28]
 80181e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d018      	beq.n	8018222 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80181f4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80181f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181f8:	881b      	ldrh	r3, [r3, #0]
 80181fa:	461a      	mov	r2, r3
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018204:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801820a:	1c9a      	adds	r2, r3, #2
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8018216:	b29b      	uxth	r3, r3
 8018218:	3b01      	subs	r3, #1
 801821a:	b29a      	uxth	r2, r3
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8018222:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018224:	3b01      	subs	r3, #1
 8018226:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8018228:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801822a:	2b00      	cmp	r3, #0
 801822c:	d19f      	bne.n	801816e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801822e:	e7ff      	b.n	8018230 <UART_TxISR_16BIT_FIFOEN+0xde>
 8018230:	bf00      	nop
 8018232:	3744      	adds	r7, #68	; 0x44
 8018234:	46bd      	mov	sp, r7
 8018236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801823a:	4770      	bx	lr

0801823c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801823c:	b580      	push	{r7, lr}
 801823e:	b088      	sub	sp, #32
 8018240:	af00      	add	r7, sp, #0
 8018242:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	e853 3f00 	ldrex	r3, [r3]
 8018250:	60bb      	str	r3, [r7, #8]
   return(result);
 8018252:	68bb      	ldr	r3, [r7, #8]
 8018254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018258:	61fb      	str	r3, [r7, #28]
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	461a      	mov	r2, r3
 8018260:	69fb      	ldr	r3, [r7, #28]
 8018262:	61bb      	str	r3, [r7, #24]
 8018264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018266:	6979      	ldr	r1, [r7, #20]
 8018268:	69ba      	ldr	r2, [r7, #24]
 801826a:	e841 2300 	strex	r3, r2, [r1]
 801826e:	613b      	str	r3, [r7, #16]
   return(result);
 8018270:	693b      	ldr	r3, [r7, #16]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d1e6      	bne.n	8018244 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2220      	movs	r2, #32
 801827a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	2200      	movs	r2, #0
 8018282:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f7f2 fd0b 	bl	800aca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801828a:	bf00      	nop
 801828c:	3720      	adds	r7, #32
 801828e:	46bd      	mov	sp, r7
 8018290:	bd80      	pop	{r7, pc}

08018292 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018292:	b580      	push	{r7, lr}
 8018294:	b096      	sub	sp, #88	; 0x58
 8018296:	af00      	add	r7, sp, #0
 8018298:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80182a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80182aa:	2b22      	cmp	r3, #34	; 0x22
 80182ac:	f040 8095 	bne.w	80183da <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182b6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80182ba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80182be:	b2d9      	uxtb	r1, r3
 80182c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80182c4:	b2da      	uxtb	r2, r3
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80182ca:	400a      	ands	r2, r1
 80182cc:	b2d2      	uxtb	r2, r2
 80182ce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80182d4:	1c5a      	adds	r2, r3, #1
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80182e0:	b29b      	uxth	r3, r3
 80182e2:	3b01      	subs	r3, #1
 80182e4:	b29a      	uxth	r2, r3
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80182f2:	b29b      	uxth	r3, r3
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d178      	bne.n	80183ea <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80182fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018300:	e853 3f00 	ldrex	r3, [r3]
 8018304:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8018306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801830c:	653b      	str	r3, [r7, #80]	; 0x50
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	461a      	mov	r2, r3
 8018314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018316:	647b      	str	r3, [r7, #68]	; 0x44
 8018318:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801831a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801831c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801831e:	e841 2300 	strex	r3, r2, [r1]
 8018322:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018326:	2b00      	cmp	r3, #0
 8018328:	d1e6      	bne.n	80182f8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	3308      	adds	r3, #8
 8018330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018334:	e853 3f00 	ldrex	r3, [r3]
 8018338:	623b      	str	r3, [r7, #32]
   return(result);
 801833a:	6a3b      	ldr	r3, [r7, #32]
 801833c:	f023 0301 	bic.w	r3, r3, #1
 8018340:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	3308      	adds	r3, #8
 8018348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801834a:	633a      	str	r2, [r7, #48]	; 0x30
 801834c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801834e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018352:	e841 2300 	strex	r3, r2, [r1]
 8018356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801835a:	2b00      	cmp	r3, #0
 801835c:	d1e5      	bne.n	801832a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	2220      	movs	r2, #32
 8018362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	2200      	movs	r2, #0
 801836a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018370:	2b01      	cmp	r3, #1
 8018372:	d12e      	bne.n	80183d2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	2200      	movs	r2, #0
 8018378:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018380:	693b      	ldr	r3, [r7, #16]
 8018382:	e853 3f00 	ldrex	r3, [r3]
 8018386:	60fb      	str	r3, [r7, #12]
   return(result);
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	f023 0310 	bic.w	r3, r3, #16
 801838e:	64bb      	str	r3, [r7, #72]	; 0x48
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	461a      	mov	r2, r3
 8018396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018398:	61fb      	str	r3, [r7, #28]
 801839a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801839c:	69b9      	ldr	r1, [r7, #24]
 801839e:	69fa      	ldr	r2, [r7, #28]
 80183a0:	e841 2300 	strex	r3, r2, [r1]
 80183a4:	617b      	str	r3, [r7, #20]
   return(result);
 80183a6:	697b      	ldr	r3, [r7, #20]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d1e6      	bne.n	801837a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	69db      	ldr	r3, [r3, #28]
 80183b2:	f003 0310 	and.w	r3, r3, #16
 80183b6:	2b10      	cmp	r3, #16
 80183b8:	d103      	bne.n	80183c2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	2210      	movs	r2, #16
 80183c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80183c8:	4619      	mov	r1, r3
 80183ca:	6878      	ldr	r0, [r7, #4]
 80183cc:	f7fe fcc4 	bl	8016d58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80183d0:	e00b      	b.n	80183ea <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80183d2:	6878      	ldr	r0, [r7, #4]
 80183d4:	f7f2 fc40 	bl	800ac58 <HAL_UART_RxCpltCallback>
}
 80183d8:	e007      	b.n	80183ea <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	699a      	ldr	r2, [r3, #24]
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	f042 0208 	orr.w	r2, r2, #8
 80183e8:	619a      	str	r2, [r3, #24]
}
 80183ea:	bf00      	nop
 80183ec:	3758      	adds	r7, #88	; 0x58
 80183ee:	46bd      	mov	sp, r7
 80183f0:	bd80      	pop	{r7, pc}

080183f2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80183f2:	b580      	push	{r7, lr}
 80183f4:	b096      	sub	sp, #88	; 0x58
 80183f6:	af00      	add	r7, sp, #0
 80183f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018400:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801840a:	2b22      	cmp	r3, #34	; 0x22
 801840c:	f040 8095 	bne.w	801853a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018416:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801841e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8018420:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8018424:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8018428:	4013      	ands	r3, r2
 801842a:	b29a      	uxth	r2, r3
 801842c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801842e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018434:	1c9a      	adds	r2, r3, #2
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018440:	b29b      	uxth	r3, r3
 8018442:	3b01      	subs	r3, #1
 8018444:	b29a      	uxth	r2, r3
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018452:	b29b      	uxth	r3, r3
 8018454:	2b00      	cmp	r3, #0
 8018456:	d178      	bne.n	801854a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801845e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018460:	e853 3f00 	ldrex	r3, [r3]
 8018464:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801846c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	461a      	mov	r2, r3
 8018474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018476:	643b      	str	r3, [r7, #64]	; 0x40
 8018478:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801847a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801847c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801847e:	e841 2300 	strex	r3, r2, [r1]
 8018482:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018486:	2b00      	cmp	r3, #0
 8018488:	d1e6      	bne.n	8018458 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	3308      	adds	r3, #8
 8018490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018492:	6a3b      	ldr	r3, [r7, #32]
 8018494:	e853 3f00 	ldrex	r3, [r3]
 8018498:	61fb      	str	r3, [r7, #28]
   return(result);
 801849a:	69fb      	ldr	r3, [r7, #28]
 801849c:	f023 0301 	bic.w	r3, r3, #1
 80184a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	3308      	adds	r3, #8
 80184a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80184aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80184ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80184ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80184b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184b2:	e841 2300 	strex	r3, r2, [r1]
 80184b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80184b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d1e5      	bne.n	801848a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	2220      	movs	r2, #32
 80184c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	2200      	movs	r2, #0
 80184ca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184d0:	2b01      	cmp	r3, #1
 80184d2:	d12e      	bne.n	8018532 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	2200      	movs	r2, #0
 80184d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	e853 3f00 	ldrex	r3, [r3]
 80184e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80184e8:	68bb      	ldr	r3, [r7, #8]
 80184ea:	f023 0310 	bic.w	r3, r3, #16
 80184ee:	647b      	str	r3, [r7, #68]	; 0x44
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	461a      	mov	r2, r3
 80184f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80184f8:	61bb      	str	r3, [r7, #24]
 80184fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80184fc:	6979      	ldr	r1, [r7, #20]
 80184fe:	69ba      	ldr	r2, [r7, #24]
 8018500:	e841 2300 	strex	r3, r2, [r1]
 8018504:	613b      	str	r3, [r7, #16]
   return(result);
 8018506:	693b      	ldr	r3, [r7, #16]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d1e6      	bne.n	80184da <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	69db      	ldr	r3, [r3, #28]
 8018512:	f003 0310 	and.w	r3, r3, #16
 8018516:	2b10      	cmp	r3, #16
 8018518:	d103      	bne.n	8018522 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	2210      	movs	r2, #16
 8018520:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018528:	4619      	mov	r1, r3
 801852a:	6878      	ldr	r0, [r7, #4]
 801852c:	f7fe fc14 	bl	8016d58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018530:	e00b      	b.n	801854a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8018532:	6878      	ldr	r0, [r7, #4]
 8018534:	f7f2 fb90 	bl	800ac58 <HAL_UART_RxCpltCallback>
}
 8018538:	e007      	b.n	801854a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	699a      	ldr	r2, [r3, #24]
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	f042 0208 	orr.w	r2, r2, #8
 8018548:	619a      	str	r2, [r3, #24]
}
 801854a:	bf00      	nop
 801854c:	3758      	adds	r7, #88	; 0x58
 801854e:	46bd      	mov	sp, r7
 8018550:	bd80      	pop	{r7, pc}
	...

08018554 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8018554:	b580      	push	{r7, lr}
 8018556:	b0a6      	sub	sp, #152	; 0x98
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018562:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	69db      	ldr	r3, [r3, #28]
 801856c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	689b      	ldr	r3, [r3, #8]
 8018580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801858a:	2b22      	cmp	r3, #34	; 0x22
 801858c:	f040 814d 	bne.w	801882a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018596:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801859a:	e0f4      	b.n	8018786 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185a2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80185a6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80185aa:	b2d9      	uxtb	r1, r3
 80185ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80185b0:	b2da      	uxtb	r2, r3
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80185b6:	400a      	ands	r2, r1
 80185b8:	b2d2      	uxtb	r2, r2
 80185ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80185c0:	1c5a      	adds	r2, r3, #1
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80185cc:	b29b      	uxth	r3, r3
 80185ce:	3b01      	subs	r3, #1
 80185d0:	b29a      	uxth	r2, r3
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	69db      	ldr	r3, [r3, #28]
 80185de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80185e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80185e6:	f003 0307 	and.w	r3, r3, #7
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d053      	beq.n	8018696 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80185ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80185f2:	f003 0301 	and.w	r3, r3, #1
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d011      	beq.n	801861e <UART_RxISR_8BIT_FIFOEN+0xca>
 80185fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80185fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018602:	2b00      	cmp	r3, #0
 8018604:	d00b      	beq.n	801861e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	2201      	movs	r2, #1
 801860c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018614:	f043 0201 	orr.w	r2, r3, #1
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801861e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018622:	f003 0302 	and.w	r3, r3, #2
 8018626:	2b00      	cmp	r3, #0
 8018628:	d011      	beq.n	801864e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801862a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801862e:	f003 0301 	and.w	r3, r3, #1
 8018632:	2b00      	cmp	r3, #0
 8018634:	d00b      	beq.n	801864e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	2202      	movs	r2, #2
 801863c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018644:	f043 0204 	orr.w	r2, r3, #4
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801864e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018652:	f003 0304 	and.w	r3, r3, #4
 8018656:	2b00      	cmp	r3, #0
 8018658:	d011      	beq.n	801867e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801865a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801865e:	f003 0301 	and.w	r3, r3, #1
 8018662:	2b00      	cmp	r3, #0
 8018664:	d00b      	beq.n	801867e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	2204      	movs	r2, #4
 801866c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018674:	f043 0202 	orr.w	r2, r3, #2
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018684:	2b00      	cmp	r3, #0
 8018686:	d006      	beq.n	8018696 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018688:	6878      	ldr	r0, [r7, #4]
 801868a:	f7fe fb5b 	bl	8016d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	2200      	movs	r2, #0
 8018692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801869c:	b29b      	uxth	r3, r3
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d171      	bne.n	8018786 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80186aa:	e853 3f00 	ldrex	r3, [r3]
 80186ae:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80186b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80186b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80186b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	461a      	mov	r2, r3
 80186c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80186c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80186c6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186c8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80186ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80186cc:	e841 2300 	strex	r3, r2, [r1]
 80186d0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80186d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d1e4      	bne.n	80186a2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	3308      	adds	r3, #8
 80186de:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80186e2:	e853 3f00 	ldrex	r3, [r3]
 80186e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80186e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80186ea:	4b56      	ldr	r3, [pc, #344]	; (8018844 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80186ec:	4013      	ands	r3, r2
 80186ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	3308      	adds	r3, #8
 80186f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80186f8:	657a      	str	r2, [r7, #84]	; 0x54
 80186fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80186fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018700:	e841 2300 	strex	r3, r2, [r1]
 8018704:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8018706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018708:	2b00      	cmp	r3, #0
 801870a:	d1e5      	bne.n	80186d8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	2220      	movs	r2, #32
 8018710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	2200      	movs	r2, #0
 8018718:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801871e:	2b01      	cmp	r3, #1
 8018720:	d12e      	bne.n	8018780 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	2200      	movs	r2, #0
 8018726:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801872e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018730:	e853 3f00 	ldrex	r3, [r3]
 8018734:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018738:	f023 0310 	bic.w	r3, r3, #16
 801873c:	67bb      	str	r3, [r7, #120]	; 0x78
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	461a      	mov	r2, r3
 8018744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018746:	643b      	str	r3, [r7, #64]	; 0x40
 8018748:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801874a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801874c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801874e:	e841 2300 	strex	r3, r2, [r1]
 8018752:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018756:	2b00      	cmp	r3, #0
 8018758:	d1e6      	bne.n	8018728 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	69db      	ldr	r3, [r3, #28]
 8018760:	f003 0310 	and.w	r3, r3, #16
 8018764:	2b10      	cmp	r3, #16
 8018766:	d103      	bne.n	8018770 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	2210      	movs	r2, #16
 801876e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018776:	4619      	mov	r1, r3
 8018778:	6878      	ldr	r0, [r7, #4]
 801877a:	f7fe faed 	bl	8016d58 <HAL_UARTEx_RxEventCallback>
 801877e:	e002      	b.n	8018786 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8018780:	6878      	ldr	r0, [r7, #4]
 8018782:	f7f2 fa69 	bl	800ac58 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018786:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801878a:	2b00      	cmp	r3, #0
 801878c:	d006      	beq.n	801879c <UART_RxISR_8BIT_FIFOEN+0x248>
 801878e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018792:	f003 0320 	and.w	r3, r3, #32
 8018796:	2b00      	cmp	r3, #0
 8018798:	f47f af00 	bne.w	801859c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80187a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80187a6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d045      	beq.n	801883a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80187b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80187b8:	429a      	cmp	r2, r3
 80187ba:	d23e      	bcs.n	801883a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	3308      	adds	r3, #8
 80187c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187c4:	6a3b      	ldr	r3, [r7, #32]
 80187c6:	e853 3f00 	ldrex	r3, [r3]
 80187ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80187cc:	69fb      	ldr	r3, [r7, #28]
 80187ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80187d2:	673b      	str	r3, [r7, #112]	; 0x70
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	3308      	adds	r3, #8
 80187da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80187dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80187de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80187e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80187e4:	e841 2300 	strex	r3, r2, [r1]
 80187e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80187ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d1e5      	bne.n	80187bc <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	4a15      	ldr	r2, [pc, #84]	; (8018848 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80187f4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	e853 3f00 	ldrex	r3, [r3]
 8018802:	60bb      	str	r3, [r7, #8]
   return(result);
 8018804:	68bb      	ldr	r3, [r7, #8]
 8018806:	f043 0320 	orr.w	r3, r3, #32
 801880a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	461a      	mov	r2, r3
 8018812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018814:	61bb      	str	r3, [r7, #24]
 8018816:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018818:	6979      	ldr	r1, [r7, #20]
 801881a:	69ba      	ldr	r2, [r7, #24]
 801881c:	e841 2300 	strex	r3, r2, [r1]
 8018820:	613b      	str	r3, [r7, #16]
   return(result);
 8018822:	693b      	ldr	r3, [r7, #16]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d1e6      	bne.n	80187f6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018828:	e007      	b.n	801883a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	699a      	ldr	r2, [r3, #24]
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	f042 0208 	orr.w	r2, r2, #8
 8018838:	619a      	str	r2, [r3, #24]
}
 801883a:	bf00      	nop
 801883c:	3798      	adds	r7, #152	; 0x98
 801883e:	46bd      	mov	sp, r7
 8018840:	bd80      	pop	{r7, pc}
 8018842:	bf00      	nop
 8018844:	effffffe 	.word	0xeffffffe
 8018848:	08018293 	.word	0x08018293

0801884c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b0a8      	sub	sp, #160	; 0xa0
 8018850:	af00      	add	r7, sp, #0
 8018852:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801885a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	69db      	ldr	r3, [r3, #28]
 8018864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	689b      	ldr	r3, [r3, #8]
 8018878:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018882:	2b22      	cmp	r3, #34	; 0x22
 8018884:	f040 8151 	bne.w	8018b2a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801888e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018892:	e0f8      	b.n	8018a86 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801889a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80188a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80188a6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80188aa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80188ae:	4013      	ands	r3, r2
 80188b0:	b29a      	uxth	r2, r3
 80188b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80188b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80188bc:	1c9a      	adds	r2, r3, #2
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80188c8:	b29b      	uxth	r3, r3
 80188ca:	3b01      	subs	r3, #1
 80188cc:	b29a      	uxth	r2, r3
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	69db      	ldr	r3, [r3, #28]
 80188da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80188de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80188e2:	f003 0307 	and.w	r3, r3, #7
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d053      	beq.n	8018992 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80188ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80188ee:	f003 0301 	and.w	r3, r3, #1
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d011      	beq.n	801891a <UART_RxISR_16BIT_FIFOEN+0xce>
 80188f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80188fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d00b      	beq.n	801891a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	2201      	movs	r2, #1
 8018908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018910:	f043 0201 	orr.w	r2, r3, #1
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801891a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801891e:	f003 0302 	and.w	r3, r3, #2
 8018922:	2b00      	cmp	r3, #0
 8018924:	d011      	beq.n	801894a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8018926:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801892a:	f003 0301 	and.w	r3, r3, #1
 801892e:	2b00      	cmp	r3, #0
 8018930:	d00b      	beq.n	801894a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	2202      	movs	r2, #2
 8018938:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018940:	f043 0204 	orr.w	r2, r3, #4
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801894a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801894e:	f003 0304 	and.w	r3, r3, #4
 8018952:	2b00      	cmp	r3, #0
 8018954:	d011      	beq.n	801897a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8018956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801895a:	f003 0301 	and.w	r3, r3, #1
 801895e:	2b00      	cmp	r3, #0
 8018960:	d00b      	beq.n	801897a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	2204      	movs	r2, #4
 8018968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018970:	f043 0202 	orr.w	r2, r3, #2
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018980:	2b00      	cmp	r3, #0
 8018982:	d006      	beq.n	8018992 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018984:	6878      	ldr	r0, [r7, #4]
 8018986:	f7fe f9dd 	bl	8016d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	2200      	movs	r2, #0
 801898e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018998:	b29b      	uxth	r3, r3
 801899a:	2b00      	cmp	r3, #0
 801899c:	d173      	bne.n	8018a86 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80189a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80189a6:	e853 3f00 	ldrex	r3, [r3]
 80189aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80189ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80189ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80189b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	461a      	mov	r2, r3
 80189bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80189c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80189c2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80189c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80189c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80189c8:	e841 2300 	strex	r3, r2, [r1]
 80189cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80189ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d1e4      	bne.n	801899e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	3308      	adds	r3, #8
 80189da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80189dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80189de:	e853 3f00 	ldrex	r3, [r3]
 80189e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80189e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80189e6:	4b57      	ldr	r3, [pc, #348]	; (8018b44 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80189e8:	4013      	ands	r3, r2
 80189ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	3308      	adds	r3, #8
 80189f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80189f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80189fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80189fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80189fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018a00:	e841 2300 	strex	r3, r2, [r1]
 8018a04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8018a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d1e3      	bne.n	80189d4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	2220      	movs	r2, #32
 8018a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	2200      	movs	r2, #0
 8018a18:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a1e:	2b01      	cmp	r3, #1
 8018a20:	d12e      	bne.n	8018a80 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	2200      	movs	r2, #0
 8018a26:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a30:	e853 3f00 	ldrex	r3, [r3]
 8018a34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8018a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a38:	f023 0310 	bic.w	r3, r3, #16
 8018a3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	461a      	mov	r2, r3
 8018a44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018a46:	647b      	str	r3, [r7, #68]	; 0x44
 8018a48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018a4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018a4e:	e841 2300 	strex	r3, r2, [r1]
 8018a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d1e6      	bne.n	8018a28 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	69db      	ldr	r3, [r3, #28]
 8018a60:	f003 0310 	and.w	r3, r3, #16
 8018a64:	2b10      	cmp	r3, #16
 8018a66:	d103      	bne.n	8018a70 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	2210      	movs	r2, #16
 8018a6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018a76:	4619      	mov	r1, r3
 8018a78:	6878      	ldr	r0, [r7, #4]
 8018a7a:	f7fe f96d 	bl	8016d58 <HAL_UARTEx_RxEventCallback>
 8018a7e:	e002      	b.n	8018a86 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8018a80:	6878      	ldr	r0, [r7, #4]
 8018a82:	f7f2 f8e9 	bl	800ac58 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018a86:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d006      	beq.n	8018a9c <UART_RxISR_16BIT_FIFOEN+0x250>
 8018a8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018a92:	f003 0320 	and.w	r3, r3, #32
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	f47f aefc 	bne.w	8018894 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018aa2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8018aa6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d045      	beq.n	8018b3a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018ab4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8018ab8:	429a      	cmp	r2, r3
 8018aba:	d23e      	bcs.n	8018b3a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	3308      	adds	r3, #8
 8018ac2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ac6:	e853 3f00 	ldrex	r3, [r3]
 8018aca:	623b      	str	r3, [r7, #32]
   return(result);
 8018acc:	6a3b      	ldr	r3, [r7, #32]
 8018ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018ad2:	677b      	str	r3, [r7, #116]	; 0x74
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	3308      	adds	r3, #8
 8018ada:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018adc:	633a      	str	r2, [r7, #48]	; 0x30
 8018ade:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018ae0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ae4:	e841 2300 	strex	r3, r2, [r1]
 8018ae8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d1e5      	bne.n	8018abc <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	4a15      	ldr	r2, [pc, #84]	; (8018b48 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8018af4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018afc:	693b      	ldr	r3, [r7, #16]
 8018afe:	e853 3f00 	ldrex	r3, [r3]
 8018b02:	60fb      	str	r3, [r7, #12]
   return(result);
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	f043 0320 	orr.w	r3, r3, #32
 8018b0a:	673b      	str	r3, [r7, #112]	; 0x70
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	461a      	mov	r2, r3
 8018b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018b14:	61fb      	str	r3, [r7, #28]
 8018b16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b18:	69b9      	ldr	r1, [r7, #24]
 8018b1a:	69fa      	ldr	r2, [r7, #28]
 8018b1c:	e841 2300 	strex	r3, r2, [r1]
 8018b20:	617b      	str	r3, [r7, #20]
   return(result);
 8018b22:	697b      	ldr	r3, [r7, #20]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d1e6      	bne.n	8018af6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018b28:	e007      	b.n	8018b3a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	699a      	ldr	r2, [r3, #24]
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	f042 0208 	orr.w	r2, r2, #8
 8018b38:	619a      	str	r2, [r3, #24]
}
 8018b3a:	bf00      	nop
 8018b3c:	37a0      	adds	r7, #160	; 0xa0
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bd80      	pop	{r7, pc}
 8018b42:	bf00      	nop
 8018b44:	effffffe 	.word	0xeffffffe
 8018b48:	080183f3 	.word	0x080183f3

08018b4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018b4c:	b480      	push	{r7}
 8018b4e:	b083      	sub	sp, #12
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018b54:	bf00      	nop
 8018b56:	370c      	adds	r7, #12
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5e:	4770      	bx	lr

08018b60 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8018b60:	b480      	push	{r7}
 8018b62:	b083      	sub	sp, #12
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8018b68:	bf00      	nop
 8018b6a:	370c      	adds	r7, #12
 8018b6c:	46bd      	mov	sp, r7
 8018b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b72:	4770      	bx	lr

08018b74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8018b74:	b480      	push	{r7}
 8018b76:	b083      	sub	sp, #12
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8018b7c:	bf00      	nop
 8018b7e:	370c      	adds	r7, #12
 8018b80:	46bd      	mov	sp, r7
 8018b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b86:	4770      	bx	lr

08018b88 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b084      	sub	sp, #16
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8018b96:	2b01      	cmp	r3, #1
 8018b98:	d101      	bne.n	8018b9e <HAL_UARTEx_EnableFifoMode+0x16>
 8018b9a:	2302      	movs	r3, #2
 8018b9c:	e02b      	b.n	8018bf6 <HAL_UARTEx_EnableFifoMode+0x6e>
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	2201      	movs	r2, #1
 8018ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	2224      	movs	r2, #36	; 0x24
 8018baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	681a      	ldr	r2, [r3, #0]
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	f022 0201 	bic.w	r2, r2, #1
 8018bc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8018bcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8018bd4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	68fa      	ldr	r2, [r7, #12]
 8018bdc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018bde:	6878      	ldr	r0, [r7, #4]
 8018be0:	f000 f8c2 	bl	8018d68 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	2220      	movs	r2, #32
 8018be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	2200      	movs	r2, #0
 8018bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018bf4:	2300      	movs	r3, #0
}
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	3710      	adds	r7, #16
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	bd80      	pop	{r7, pc}

08018bfe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8018bfe:	b480      	push	{r7}
 8018c00:	b085      	sub	sp, #20
 8018c02:	af00      	add	r7, sp, #0
 8018c04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8018c0c:	2b01      	cmp	r3, #1
 8018c0e:	d101      	bne.n	8018c14 <HAL_UARTEx_DisableFifoMode+0x16>
 8018c10:	2302      	movs	r3, #2
 8018c12:	e027      	b.n	8018c64 <HAL_UARTEx_DisableFifoMode+0x66>
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	2201      	movs	r2, #1
 8018c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	2224      	movs	r2, #36	; 0x24
 8018c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	681a      	ldr	r2, [r3, #0]
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	f022 0201 	bic.w	r2, r2, #1
 8018c3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8018c42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	2200      	movs	r2, #0
 8018c48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	68fa      	ldr	r2, [r7, #12]
 8018c50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	2220      	movs	r2, #32
 8018c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	2200      	movs	r2, #0
 8018c5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018c62:	2300      	movs	r3, #0
}
 8018c64:	4618      	mov	r0, r3
 8018c66:	3714      	adds	r7, #20
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6e:	4770      	bx	lr

08018c70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b084      	sub	sp, #16
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
 8018c78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8018c80:	2b01      	cmp	r3, #1
 8018c82:	d101      	bne.n	8018c88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8018c84:	2302      	movs	r3, #2
 8018c86:	e02d      	b.n	8018ce4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	2201      	movs	r2, #1
 8018c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	2224      	movs	r2, #36	; 0x24
 8018c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	681a      	ldr	r2, [r3, #0]
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	f022 0201 	bic.w	r2, r2, #1
 8018cae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	689b      	ldr	r3, [r3, #8]
 8018cb6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	683a      	ldr	r2, [r7, #0]
 8018cc0:	430a      	orrs	r2, r1
 8018cc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018cc4:	6878      	ldr	r0, [r7, #4]
 8018cc6:	f000 f84f 	bl	8018d68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	68fa      	ldr	r2, [r7, #12]
 8018cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	2220      	movs	r2, #32
 8018cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	2200      	movs	r2, #0
 8018cde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018ce2:	2300      	movs	r3, #0
}
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	3710      	adds	r7, #16
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	bd80      	pop	{r7, pc}

08018cec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b084      	sub	sp, #16
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
 8018cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8018cfc:	2b01      	cmp	r3, #1
 8018cfe:	d101      	bne.n	8018d04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8018d00:	2302      	movs	r3, #2
 8018d02:	e02d      	b.n	8018d60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	2201      	movs	r2, #1
 8018d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	2224      	movs	r2, #36	; 0x24
 8018d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	681a      	ldr	r2, [r3, #0]
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	f022 0201 	bic.w	r2, r2, #1
 8018d2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	689b      	ldr	r3, [r3, #8]
 8018d32:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	683a      	ldr	r2, [r7, #0]
 8018d3c:	430a      	orrs	r2, r1
 8018d3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018d40:	6878      	ldr	r0, [r7, #4]
 8018d42:	f000 f811 	bl	8018d68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	68fa      	ldr	r2, [r7, #12]
 8018d4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	2220      	movs	r2, #32
 8018d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	2200      	movs	r2, #0
 8018d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018d5e:	2300      	movs	r3, #0
}
 8018d60:	4618      	mov	r0, r3
 8018d62:	3710      	adds	r7, #16
 8018d64:	46bd      	mov	sp, r7
 8018d66:	bd80      	pop	{r7, pc}

08018d68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8018d68:	b480      	push	{r7}
 8018d6a:	b085      	sub	sp, #20
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d108      	bne.n	8018d8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	2201      	movs	r2, #1
 8018d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	2201      	movs	r2, #1
 8018d84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8018d88:	e031      	b.n	8018dee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8018d8a:	2310      	movs	r3, #16
 8018d8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8018d8e:	2310      	movs	r3, #16
 8018d90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	689b      	ldr	r3, [r3, #8]
 8018d98:	0e5b      	lsrs	r3, r3, #25
 8018d9a:	b2db      	uxtb	r3, r3
 8018d9c:	f003 0307 	and.w	r3, r3, #7
 8018da0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	689b      	ldr	r3, [r3, #8]
 8018da8:	0f5b      	lsrs	r3, r3, #29
 8018daa:	b2db      	uxtb	r3, r3
 8018dac:	f003 0307 	and.w	r3, r3, #7
 8018db0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018db2:	7bbb      	ldrb	r3, [r7, #14]
 8018db4:	7b3a      	ldrb	r2, [r7, #12]
 8018db6:	4911      	ldr	r1, [pc, #68]	; (8018dfc <UARTEx_SetNbDataToProcess+0x94>)
 8018db8:	5c8a      	ldrb	r2, [r1, r2]
 8018dba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8018dbe:	7b3a      	ldrb	r2, [r7, #12]
 8018dc0:	490f      	ldr	r1, [pc, #60]	; (8018e00 <UARTEx_SetNbDataToProcess+0x98>)
 8018dc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018dc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8018dc8:	b29a      	uxth	r2, r3
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018dd0:	7bfb      	ldrb	r3, [r7, #15]
 8018dd2:	7b7a      	ldrb	r2, [r7, #13]
 8018dd4:	4909      	ldr	r1, [pc, #36]	; (8018dfc <UARTEx_SetNbDataToProcess+0x94>)
 8018dd6:	5c8a      	ldrb	r2, [r1, r2]
 8018dd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018ddc:	7b7a      	ldrb	r2, [r7, #13]
 8018dde:	4908      	ldr	r1, [pc, #32]	; (8018e00 <UARTEx_SetNbDataToProcess+0x98>)
 8018de0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018de2:	fb93 f3f2 	sdiv	r3, r3, r2
 8018de6:	b29a      	uxth	r2, r3
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8018dee:	bf00      	nop
 8018df0:	3714      	adds	r7, #20
 8018df2:	46bd      	mov	sp, r7
 8018df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df8:	4770      	bx	lr
 8018dfa:	bf00      	nop
 8018dfc:	08038ec4 	.word	0x08038ec4
 8018e00:	08038ecc 	.word	0x08038ecc

08018e04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8018e04:	b084      	sub	sp, #16
 8018e06:	b580      	push	{r7, lr}
 8018e08:	b084      	sub	sp, #16
 8018e0a:	af00      	add	r7, sp, #0
 8018e0c:	6078      	str	r0, [r7, #4]
 8018e0e:	f107 001c 	add.w	r0, r7, #28
 8018e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8018e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e18:	2b01      	cmp	r3, #1
 8018e1a:	d120      	bne.n	8018e5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	68da      	ldr	r2, [r3, #12]
 8018e2c:	4b2a      	ldr	r3, [pc, #168]	; (8018ed8 <USB_CoreInit+0xd4>)
 8018e2e:	4013      	ands	r3, r2
 8018e30:	687a      	ldr	r2, [r7, #4]
 8018e32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	68db      	ldr	r3, [r3, #12]
 8018e38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8018e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018e42:	2b01      	cmp	r3, #1
 8018e44:	d105      	bne.n	8018e52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	68db      	ldr	r3, [r3, #12]
 8018e4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8018e52:	6878      	ldr	r0, [r7, #4]
 8018e54:	f001 fc04 	bl	801a660 <USB_CoreReset>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	73fb      	strb	r3, [r7, #15]
 8018e5c:	e01a      	b.n	8018e94 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	68db      	ldr	r3, [r3, #12]
 8018e62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8018e6a:	6878      	ldr	r0, [r7, #4]
 8018e6c:	f001 fbf8 	bl	801a660 <USB_CoreReset>
 8018e70:	4603      	mov	r3, r0
 8018e72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8018e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d106      	bne.n	8018e88 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	639a      	str	r2, [r3, #56]	; 0x38
 8018e86:	e005      	b.n	8018e94 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8018e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e96:	2b01      	cmp	r3, #1
 8018e98:	d116      	bne.n	8018ec8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e9e:	b29a      	uxth	r2, r3
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018ea8:	4b0c      	ldr	r3, [pc, #48]	; (8018edc <USB_CoreInit+0xd8>)
 8018eaa:	4313      	orrs	r3, r2
 8018eac:	687a      	ldr	r2, [r7, #4]
 8018eae:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	689b      	ldr	r3, [r3, #8]
 8018eb4:	f043 0206 	orr.w	r2, r3, #6
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	689b      	ldr	r3, [r3, #8]
 8018ec0:	f043 0220 	orr.w	r2, r3, #32
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8018ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8018eca:	4618      	mov	r0, r3
 8018ecc:	3710      	adds	r7, #16
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018ed4:	b004      	add	sp, #16
 8018ed6:	4770      	bx	lr
 8018ed8:	ffbdffbf 	.word	0xffbdffbf
 8018edc:	03ee0000 	.word	0x03ee0000

08018ee0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8018ee0:	b480      	push	{r7}
 8018ee2:	b087      	sub	sp, #28
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	60f8      	str	r0, [r7, #12]
 8018ee8:	60b9      	str	r1, [r7, #8]
 8018eea:	4613      	mov	r3, r2
 8018eec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8018eee:	79fb      	ldrb	r3, [r7, #7]
 8018ef0:	2b02      	cmp	r3, #2
 8018ef2:	d165      	bne.n	8018fc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8018ef4:	68bb      	ldr	r3, [r7, #8]
 8018ef6:	4a41      	ldr	r2, [pc, #260]	; (8018ffc <USB_SetTurnaroundTime+0x11c>)
 8018ef8:	4293      	cmp	r3, r2
 8018efa:	d906      	bls.n	8018f0a <USB_SetTurnaroundTime+0x2a>
 8018efc:	68bb      	ldr	r3, [r7, #8]
 8018efe:	4a40      	ldr	r2, [pc, #256]	; (8019000 <USB_SetTurnaroundTime+0x120>)
 8018f00:	4293      	cmp	r3, r2
 8018f02:	d202      	bcs.n	8018f0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8018f04:	230f      	movs	r3, #15
 8018f06:	617b      	str	r3, [r7, #20]
 8018f08:	e062      	b.n	8018fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8018f0a:	68bb      	ldr	r3, [r7, #8]
 8018f0c:	4a3c      	ldr	r2, [pc, #240]	; (8019000 <USB_SetTurnaroundTime+0x120>)
 8018f0e:	4293      	cmp	r3, r2
 8018f10:	d306      	bcc.n	8018f20 <USB_SetTurnaroundTime+0x40>
 8018f12:	68bb      	ldr	r3, [r7, #8]
 8018f14:	4a3b      	ldr	r2, [pc, #236]	; (8019004 <USB_SetTurnaroundTime+0x124>)
 8018f16:	4293      	cmp	r3, r2
 8018f18:	d202      	bcs.n	8018f20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8018f1a:	230e      	movs	r3, #14
 8018f1c:	617b      	str	r3, [r7, #20]
 8018f1e:	e057      	b.n	8018fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8018f20:	68bb      	ldr	r3, [r7, #8]
 8018f22:	4a38      	ldr	r2, [pc, #224]	; (8019004 <USB_SetTurnaroundTime+0x124>)
 8018f24:	4293      	cmp	r3, r2
 8018f26:	d306      	bcc.n	8018f36 <USB_SetTurnaroundTime+0x56>
 8018f28:	68bb      	ldr	r3, [r7, #8]
 8018f2a:	4a37      	ldr	r2, [pc, #220]	; (8019008 <USB_SetTurnaroundTime+0x128>)
 8018f2c:	4293      	cmp	r3, r2
 8018f2e:	d202      	bcs.n	8018f36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8018f30:	230d      	movs	r3, #13
 8018f32:	617b      	str	r3, [r7, #20]
 8018f34:	e04c      	b.n	8018fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8018f36:	68bb      	ldr	r3, [r7, #8]
 8018f38:	4a33      	ldr	r2, [pc, #204]	; (8019008 <USB_SetTurnaroundTime+0x128>)
 8018f3a:	4293      	cmp	r3, r2
 8018f3c:	d306      	bcc.n	8018f4c <USB_SetTurnaroundTime+0x6c>
 8018f3e:	68bb      	ldr	r3, [r7, #8]
 8018f40:	4a32      	ldr	r2, [pc, #200]	; (801900c <USB_SetTurnaroundTime+0x12c>)
 8018f42:	4293      	cmp	r3, r2
 8018f44:	d802      	bhi.n	8018f4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8018f46:	230c      	movs	r3, #12
 8018f48:	617b      	str	r3, [r7, #20]
 8018f4a:	e041      	b.n	8018fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8018f4c:	68bb      	ldr	r3, [r7, #8]
 8018f4e:	4a2f      	ldr	r2, [pc, #188]	; (801900c <USB_SetTurnaroundTime+0x12c>)
 8018f50:	4293      	cmp	r3, r2
 8018f52:	d906      	bls.n	8018f62 <USB_SetTurnaroundTime+0x82>
 8018f54:	68bb      	ldr	r3, [r7, #8]
 8018f56:	4a2e      	ldr	r2, [pc, #184]	; (8019010 <USB_SetTurnaroundTime+0x130>)
 8018f58:	4293      	cmp	r3, r2
 8018f5a:	d802      	bhi.n	8018f62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8018f5c:	230b      	movs	r3, #11
 8018f5e:	617b      	str	r3, [r7, #20]
 8018f60:	e036      	b.n	8018fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8018f62:	68bb      	ldr	r3, [r7, #8]
 8018f64:	4a2a      	ldr	r2, [pc, #168]	; (8019010 <USB_SetTurnaroundTime+0x130>)
 8018f66:	4293      	cmp	r3, r2
 8018f68:	d906      	bls.n	8018f78 <USB_SetTurnaroundTime+0x98>
 8018f6a:	68bb      	ldr	r3, [r7, #8]
 8018f6c:	4a29      	ldr	r2, [pc, #164]	; (8019014 <USB_SetTurnaroundTime+0x134>)
 8018f6e:	4293      	cmp	r3, r2
 8018f70:	d802      	bhi.n	8018f78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8018f72:	230a      	movs	r3, #10
 8018f74:	617b      	str	r3, [r7, #20]
 8018f76:	e02b      	b.n	8018fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8018f78:	68bb      	ldr	r3, [r7, #8]
 8018f7a:	4a26      	ldr	r2, [pc, #152]	; (8019014 <USB_SetTurnaroundTime+0x134>)
 8018f7c:	4293      	cmp	r3, r2
 8018f7e:	d906      	bls.n	8018f8e <USB_SetTurnaroundTime+0xae>
 8018f80:	68bb      	ldr	r3, [r7, #8]
 8018f82:	4a25      	ldr	r2, [pc, #148]	; (8019018 <USB_SetTurnaroundTime+0x138>)
 8018f84:	4293      	cmp	r3, r2
 8018f86:	d202      	bcs.n	8018f8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8018f88:	2309      	movs	r3, #9
 8018f8a:	617b      	str	r3, [r7, #20]
 8018f8c:	e020      	b.n	8018fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8018f8e:	68bb      	ldr	r3, [r7, #8]
 8018f90:	4a21      	ldr	r2, [pc, #132]	; (8019018 <USB_SetTurnaroundTime+0x138>)
 8018f92:	4293      	cmp	r3, r2
 8018f94:	d306      	bcc.n	8018fa4 <USB_SetTurnaroundTime+0xc4>
 8018f96:	68bb      	ldr	r3, [r7, #8]
 8018f98:	4a20      	ldr	r2, [pc, #128]	; (801901c <USB_SetTurnaroundTime+0x13c>)
 8018f9a:	4293      	cmp	r3, r2
 8018f9c:	d802      	bhi.n	8018fa4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8018f9e:	2308      	movs	r3, #8
 8018fa0:	617b      	str	r3, [r7, #20]
 8018fa2:	e015      	b.n	8018fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8018fa4:	68bb      	ldr	r3, [r7, #8]
 8018fa6:	4a1d      	ldr	r2, [pc, #116]	; (801901c <USB_SetTurnaroundTime+0x13c>)
 8018fa8:	4293      	cmp	r3, r2
 8018faa:	d906      	bls.n	8018fba <USB_SetTurnaroundTime+0xda>
 8018fac:	68bb      	ldr	r3, [r7, #8]
 8018fae:	4a1c      	ldr	r2, [pc, #112]	; (8019020 <USB_SetTurnaroundTime+0x140>)
 8018fb0:	4293      	cmp	r3, r2
 8018fb2:	d202      	bcs.n	8018fba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8018fb4:	2307      	movs	r3, #7
 8018fb6:	617b      	str	r3, [r7, #20]
 8018fb8:	e00a      	b.n	8018fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8018fba:	2306      	movs	r3, #6
 8018fbc:	617b      	str	r3, [r7, #20]
 8018fbe:	e007      	b.n	8018fd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8018fc0:	79fb      	ldrb	r3, [r7, #7]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d102      	bne.n	8018fcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8018fc6:	2309      	movs	r3, #9
 8018fc8:	617b      	str	r3, [r7, #20]
 8018fca:	e001      	b.n	8018fd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8018fcc:	2309      	movs	r3, #9
 8018fce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	68db      	ldr	r3, [r3, #12]
 8018fd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	68da      	ldr	r2, [r3, #12]
 8018fe0:	697b      	ldr	r3, [r7, #20]
 8018fe2:	029b      	lsls	r3, r3, #10
 8018fe4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8018fe8:	431a      	orrs	r2, r3
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8018fee:	2300      	movs	r3, #0
}
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	371c      	adds	r7, #28
 8018ff4:	46bd      	mov	sp, r7
 8018ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ffa:	4770      	bx	lr
 8018ffc:	00d8acbf 	.word	0x00d8acbf
 8019000:	00e4e1c0 	.word	0x00e4e1c0
 8019004:	00f42400 	.word	0x00f42400
 8019008:	01067380 	.word	0x01067380
 801900c:	011a499f 	.word	0x011a499f
 8019010:	01312cff 	.word	0x01312cff
 8019014:	014ca43f 	.word	0x014ca43f
 8019018:	016e3600 	.word	0x016e3600
 801901c:	01a6ab1f 	.word	0x01a6ab1f
 8019020:	01e84800 	.word	0x01e84800

08019024 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8019024:	b480      	push	{r7}
 8019026:	b083      	sub	sp, #12
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	689b      	ldr	r3, [r3, #8]
 8019030:	f043 0201 	orr.w	r2, r3, #1
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8019038:	2300      	movs	r3, #0
}
 801903a:	4618      	mov	r0, r3
 801903c:	370c      	adds	r7, #12
 801903e:	46bd      	mov	sp, r7
 8019040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019044:	4770      	bx	lr

08019046 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8019046:	b480      	push	{r7}
 8019048:	b083      	sub	sp, #12
 801904a:	af00      	add	r7, sp, #0
 801904c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	689b      	ldr	r3, [r3, #8]
 8019052:	f023 0201 	bic.w	r2, r3, #1
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801905a:	2300      	movs	r3, #0
}
 801905c:	4618      	mov	r0, r3
 801905e:	370c      	adds	r7, #12
 8019060:	46bd      	mov	sp, r7
 8019062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019066:	4770      	bx	lr

08019068 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b084      	sub	sp, #16
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
 8019070:	460b      	mov	r3, r1
 8019072:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8019074:	2300      	movs	r3, #0
 8019076:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	68db      	ldr	r3, [r3, #12]
 801907c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8019084:	78fb      	ldrb	r3, [r7, #3]
 8019086:	2b01      	cmp	r3, #1
 8019088:	d115      	bne.n	80190b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	68db      	ldr	r3, [r3, #12]
 801908e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8019096:	2001      	movs	r0, #1
 8019098:	f7f2 fee0 	bl	800be5c <HAL_Delay>
      ms++;
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	3301      	adds	r3, #1
 80190a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80190a2:	6878      	ldr	r0, [r7, #4]
 80190a4:	f001 fa4b 	bl	801a53e <USB_GetMode>
 80190a8:	4603      	mov	r3, r0
 80190aa:	2b01      	cmp	r3, #1
 80190ac:	d01e      	beq.n	80190ec <USB_SetCurrentMode+0x84>
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	2b31      	cmp	r3, #49	; 0x31
 80190b2:	d9f0      	bls.n	8019096 <USB_SetCurrentMode+0x2e>
 80190b4:	e01a      	b.n	80190ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80190b6:	78fb      	ldrb	r3, [r7, #3]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d115      	bne.n	80190e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	68db      	ldr	r3, [r3, #12]
 80190c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80190c8:	2001      	movs	r0, #1
 80190ca:	f7f2 fec7 	bl	800be5c <HAL_Delay>
      ms++;
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	3301      	adds	r3, #1
 80190d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80190d4:	6878      	ldr	r0, [r7, #4]
 80190d6:	f001 fa32 	bl	801a53e <USB_GetMode>
 80190da:	4603      	mov	r3, r0
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d005      	beq.n	80190ec <USB_SetCurrentMode+0x84>
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	2b31      	cmp	r3, #49	; 0x31
 80190e4:	d9f0      	bls.n	80190c8 <USB_SetCurrentMode+0x60>
 80190e6:	e001      	b.n	80190ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80190e8:	2301      	movs	r3, #1
 80190ea:	e005      	b.n	80190f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	2b32      	cmp	r3, #50	; 0x32
 80190f0:	d101      	bne.n	80190f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80190f2:	2301      	movs	r3, #1
 80190f4:	e000      	b.n	80190f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80190f6:	2300      	movs	r3, #0
}
 80190f8:	4618      	mov	r0, r3
 80190fa:	3710      	adds	r7, #16
 80190fc:	46bd      	mov	sp, r7
 80190fe:	bd80      	pop	{r7, pc}

08019100 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8019100:	b084      	sub	sp, #16
 8019102:	b580      	push	{r7, lr}
 8019104:	b086      	sub	sp, #24
 8019106:	af00      	add	r7, sp, #0
 8019108:	6078      	str	r0, [r7, #4]
 801910a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801910e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8019112:	2300      	movs	r3, #0
 8019114:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801911a:	2300      	movs	r3, #0
 801911c:	613b      	str	r3, [r7, #16]
 801911e:	e009      	b.n	8019134 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8019120:	687a      	ldr	r2, [r7, #4]
 8019122:	693b      	ldr	r3, [r7, #16]
 8019124:	3340      	adds	r3, #64	; 0x40
 8019126:	009b      	lsls	r3, r3, #2
 8019128:	4413      	add	r3, r2
 801912a:	2200      	movs	r2, #0
 801912c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801912e:	693b      	ldr	r3, [r7, #16]
 8019130:	3301      	adds	r3, #1
 8019132:	613b      	str	r3, [r7, #16]
 8019134:	693b      	ldr	r3, [r7, #16]
 8019136:	2b0e      	cmp	r3, #14
 8019138:	d9f2      	bls.n	8019120 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801913a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801913c:	2b00      	cmp	r3, #0
 801913e:	d11c      	bne.n	801917a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019146:	685b      	ldr	r3, [r3, #4]
 8019148:	68fa      	ldr	r2, [r7, #12]
 801914a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801914e:	f043 0302 	orr.w	r3, r3, #2
 8019152:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019158:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	601a      	str	r2, [r3, #0]
 8019178:	e005      	b.n	8019186 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801917e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801918c:	461a      	mov	r2, r3
 801918e:	2300      	movs	r3, #0
 8019190:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019198:	4619      	mov	r1, r3
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80191a0:	461a      	mov	r2, r3
 80191a2:	680b      	ldr	r3, [r1, #0]
 80191a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80191a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191a8:	2b01      	cmp	r3, #1
 80191aa:	d10c      	bne.n	80191c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80191ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d104      	bne.n	80191bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80191b2:	2100      	movs	r1, #0
 80191b4:	6878      	ldr	r0, [r7, #4]
 80191b6:	f000 f965 	bl	8019484 <USB_SetDevSpeed>
 80191ba:	e008      	b.n	80191ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80191bc:	2101      	movs	r1, #1
 80191be:	6878      	ldr	r0, [r7, #4]
 80191c0:	f000 f960 	bl	8019484 <USB_SetDevSpeed>
 80191c4:	e003      	b.n	80191ce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80191c6:	2103      	movs	r1, #3
 80191c8:	6878      	ldr	r0, [r7, #4]
 80191ca:	f000 f95b 	bl	8019484 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80191ce:	2110      	movs	r1, #16
 80191d0:	6878      	ldr	r0, [r7, #4]
 80191d2:	f000 f8f3 	bl	80193bc <USB_FlushTxFifo>
 80191d6:	4603      	mov	r3, r0
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d001      	beq.n	80191e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80191dc:	2301      	movs	r3, #1
 80191de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80191e0:	6878      	ldr	r0, [r7, #4]
 80191e2:	f000 f91f 	bl	8019424 <USB_FlushRxFifo>
 80191e6:	4603      	mov	r3, r0
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d001      	beq.n	80191f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80191ec:	2301      	movs	r3, #1
 80191ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80191f6:	461a      	mov	r2, r3
 80191f8:	2300      	movs	r3, #0
 80191fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019202:	461a      	mov	r2, r3
 8019204:	2300      	movs	r3, #0
 8019206:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801920e:	461a      	mov	r2, r3
 8019210:	2300      	movs	r3, #0
 8019212:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8019214:	2300      	movs	r3, #0
 8019216:	613b      	str	r3, [r7, #16]
 8019218:	e043      	b.n	80192a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801921a:	693b      	ldr	r3, [r7, #16]
 801921c:	015a      	lsls	r2, r3, #5
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	4413      	add	r3, r2
 8019222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801922c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019230:	d118      	bne.n	8019264 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8019232:	693b      	ldr	r3, [r7, #16]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d10a      	bne.n	801924e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8019238:	693b      	ldr	r3, [r7, #16]
 801923a:	015a      	lsls	r2, r3, #5
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	4413      	add	r3, r2
 8019240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019244:	461a      	mov	r2, r3
 8019246:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801924a:	6013      	str	r3, [r2, #0]
 801924c:	e013      	b.n	8019276 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801924e:	693b      	ldr	r3, [r7, #16]
 8019250:	015a      	lsls	r2, r3, #5
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	4413      	add	r3, r2
 8019256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801925a:	461a      	mov	r2, r3
 801925c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8019260:	6013      	str	r3, [r2, #0]
 8019262:	e008      	b.n	8019276 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8019264:	693b      	ldr	r3, [r7, #16]
 8019266:	015a      	lsls	r2, r3, #5
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	4413      	add	r3, r2
 801926c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019270:	461a      	mov	r2, r3
 8019272:	2300      	movs	r3, #0
 8019274:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8019276:	693b      	ldr	r3, [r7, #16]
 8019278:	015a      	lsls	r2, r3, #5
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	4413      	add	r3, r2
 801927e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019282:	461a      	mov	r2, r3
 8019284:	2300      	movs	r3, #0
 8019286:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8019288:	693b      	ldr	r3, [r7, #16]
 801928a:	015a      	lsls	r2, r3, #5
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	4413      	add	r3, r2
 8019290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019294:	461a      	mov	r2, r3
 8019296:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801929a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801929c:	693b      	ldr	r3, [r7, #16]
 801929e:	3301      	adds	r3, #1
 80192a0:	613b      	str	r3, [r7, #16]
 80192a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192a4:	693a      	ldr	r2, [r7, #16]
 80192a6:	429a      	cmp	r2, r3
 80192a8:	d3b7      	bcc.n	801921a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80192aa:	2300      	movs	r3, #0
 80192ac:	613b      	str	r3, [r7, #16]
 80192ae:	e043      	b.n	8019338 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80192b0:	693b      	ldr	r3, [r7, #16]
 80192b2:	015a      	lsls	r2, r3, #5
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	4413      	add	r3, r2
 80192b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80192c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80192c6:	d118      	bne.n	80192fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80192c8:	693b      	ldr	r3, [r7, #16]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d10a      	bne.n	80192e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80192ce:	693b      	ldr	r3, [r7, #16]
 80192d0:	015a      	lsls	r2, r3, #5
 80192d2:	68fb      	ldr	r3, [r7, #12]
 80192d4:	4413      	add	r3, r2
 80192d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80192da:	461a      	mov	r2, r3
 80192dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80192e0:	6013      	str	r3, [r2, #0]
 80192e2:	e013      	b.n	801930c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80192e4:	693b      	ldr	r3, [r7, #16]
 80192e6:	015a      	lsls	r2, r3, #5
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	4413      	add	r3, r2
 80192ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80192f0:	461a      	mov	r2, r3
 80192f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80192f6:	6013      	str	r3, [r2, #0]
 80192f8:	e008      	b.n	801930c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80192fa:	693b      	ldr	r3, [r7, #16]
 80192fc:	015a      	lsls	r2, r3, #5
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	4413      	add	r3, r2
 8019302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019306:	461a      	mov	r2, r3
 8019308:	2300      	movs	r3, #0
 801930a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801930c:	693b      	ldr	r3, [r7, #16]
 801930e:	015a      	lsls	r2, r3, #5
 8019310:	68fb      	ldr	r3, [r7, #12]
 8019312:	4413      	add	r3, r2
 8019314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019318:	461a      	mov	r2, r3
 801931a:	2300      	movs	r3, #0
 801931c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801931e:	693b      	ldr	r3, [r7, #16]
 8019320:	015a      	lsls	r2, r3, #5
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	4413      	add	r3, r2
 8019326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801932a:	461a      	mov	r2, r3
 801932c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8019330:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8019332:	693b      	ldr	r3, [r7, #16]
 8019334:	3301      	adds	r3, #1
 8019336:	613b      	str	r3, [r7, #16]
 8019338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801933a:	693a      	ldr	r2, [r7, #16]
 801933c:	429a      	cmp	r2, r3
 801933e:	d3b7      	bcc.n	80192b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019346:	691b      	ldr	r3, [r3, #16]
 8019348:	68fa      	ldr	r2, [r7, #12]
 801934a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801934e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019352:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	2200      	movs	r2, #0
 8019358:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8019360:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8019362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019364:	2b00      	cmp	r3, #0
 8019366:	d105      	bne.n	8019374 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	699b      	ldr	r3, [r3, #24]
 801936c:	f043 0210 	orr.w	r2, r3, #16
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	699a      	ldr	r2, [r3, #24]
 8019378:	4b0e      	ldr	r3, [pc, #56]	; (80193b4 <USB_DevInit+0x2b4>)
 801937a:	4313      	orrs	r3, r2
 801937c:	687a      	ldr	r2, [r7, #4]
 801937e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8019380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019382:	2b00      	cmp	r3, #0
 8019384:	d005      	beq.n	8019392 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	699b      	ldr	r3, [r3, #24]
 801938a:	f043 0208 	orr.w	r2, r3, #8
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8019392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019394:	2b01      	cmp	r3, #1
 8019396:	d105      	bne.n	80193a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	699a      	ldr	r2, [r3, #24]
 801939c:	4b06      	ldr	r3, [pc, #24]	; (80193b8 <USB_DevInit+0x2b8>)
 801939e:	4313      	orrs	r3, r2
 80193a0:	687a      	ldr	r2, [r7, #4]
 80193a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80193a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80193a6:	4618      	mov	r0, r3
 80193a8:	3718      	adds	r7, #24
 80193aa:	46bd      	mov	sp, r7
 80193ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80193b0:	b004      	add	sp, #16
 80193b2:	4770      	bx	lr
 80193b4:	803c3800 	.word	0x803c3800
 80193b8:	40000004 	.word	0x40000004

080193bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80193bc:	b480      	push	{r7}
 80193be:	b085      	sub	sp, #20
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	6078      	str	r0, [r7, #4]
 80193c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80193c6:	2300      	movs	r3, #0
 80193c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	3301      	adds	r3, #1
 80193ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	4a13      	ldr	r2, [pc, #76]	; (8019420 <USB_FlushTxFifo+0x64>)
 80193d4:	4293      	cmp	r3, r2
 80193d6:	d901      	bls.n	80193dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80193d8:	2303      	movs	r3, #3
 80193da:	e01b      	b.n	8019414 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	691b      	ldr	r3, [r3, #16]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	daf2      	bge.n	80193ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80193e4:	2300      	movs	r3, #0
 80193e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80193e8:	683b      	ldr	r3, [r7, #0]
 80193ea:	019b      	lsls	r3, r3, #6
 80193ec:	f043 0220 	orr.w	r2, r3, #32
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	3301      	adds	r3, #1
 80193f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	4a08      	ldr	r2, [pc, #32]	; (8019420 <USB_FlushTxFifo+0x64>)
 80193fe:	4293      	cmp	r3, r2
 8019400:	d901      	bls.n	8019406 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8019402:	2303      	movs	r3, #3
 8019404:	e006      	b.n	8019414 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	691b      	ldr	r3, [r3, #16]
 801940a:	f003 0320 	and.w	r3, r3, #32
 801940e:	2b20      	cmp	r3, #32
 8019410:	d0f0      	beq.n	80193f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8019412:	2300      	movs	r3, #0
}
 8019414:	4618      	mov	r0, r3
 8019416:	3714      	adds	r7, #20
 8019418:	46bd      	mov	sp, r7
 801941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801941e:	4770      	bx	lr
 8019420:	00030d40 	.word	0x00030d40

08019424 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8019424:	b480      	push	{r7}
 8019426:	b085      	sub	sp, #20
 8019428:	af00      	add	r7, sp, #0
 801942a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801942c:	2300      	movs	r3, #0
 801942e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	3301      	adds	r3, #1
 8019434:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	4a11      	ldr	r2, [pc, #68]	; (8019480 <USB_FlushRxFifo+0x5c>)
 801943a:	4293      	cmp	r3, r2
 801943c:	d901      	bls.n	8019442 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801943e:	2303      	movs	r3, #3
 8019440:	e018      	b.n	8019474 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	691b      	ldr	r3, [r3, #16]
 8019446:	2b00      	cmp	r3, #0
 8019448:	daf2      	bge.n	8019430 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801944a:	2300      	movs	r3, #0
 801944c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	2210      	movs	r2, #16
 8019452:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	3301      	adds	r3, #1
 8019458:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	4a08      	ldr	r2, [pc, #32]	; (8019480 <USB_FlushRxFifo+0x5c>)
 801945e:	4293      	cmp	r3, r2
 8019460:	d901      	bls.n	8019466 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8019462:	2303      	movs	r3, #3
 8019464:	e006      	b.n	8019474 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	691b      	ldr	r3, [r3, #16]
 801946a:	f003 0310 	and.w	r3, r3, #16
 801946e:	2b10      	cmp	r3, #16
 8019470:	d0f0      	beq.n	8019454 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8019472:	2300      	movs	r3, #0
}
 8019474:	4618      	mov	r0, r3
 8019476:	3714      	adds	r7, #20
 8019478:	46bd      	mov	sp, r7
 801947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801947e:	4770      	bx	lr
 8019480:	00030d40 	.word	0x00030d40

08019484 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8019484:	b480      	push	{r7}
 8019486:	b085      	sub	sp, #20
 8019488:	af00      	add	r7, sp, #0
 801948a:	6078      	str	r0, [r7, #4]
 801948c:	460b      	mov	r3, r1
 801948e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801949a:	681a      	ldr	r2, [r3, #0]
 801949c:	78fb      	ldrb	r3, [r7, #3]
 801949e:	68f9      	ldr	r1, [r7, #12]
 80194a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80194a4:	4313      	orrs	r3, r2
 80194a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80194a8:	2300      	movs	r3, #0
}
 80194aa:	4618      	mov	r0, r3
 80194ac:	3714      	adds	r7, #20
 80194ae:	46bd      	mov	sp, r7
 80194b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b4:	4770      	bx	lr

080194b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80194b6:	b480      	push	{r7}
 80194b8:	b087      	sub	sp, #28
 80194ba:	af00      	add	r7, sp, #0
 80194bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80194c2:	693b      	ldr	r3, [r7, #16]
 80194c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80194c8:	689b      	ldr	r3, [r3, #8]
 80194ca:	f003 0306 	and.w	r3, r3, #6
 80194ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d102      	bne.n	80194dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80194d6:	2300      	movs	r3, #0
 80194d8:	75fb      	strb	r3, [r7, #23]
 80194da:	e00a      	b.n	80194f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	2b02      	cmp	r3, #2
 80194e0:	d002      	beq.n	80194e8 <USB_GetDevSpeed+0x32>
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	2b06      	cmp	r3, #6
 80194e6:	d102      	bne.n	80194ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80194e8:	2302      	movs	r3, #2
 80194ea:	75fb      	strb	r3, [r7, #23]
 80194ec:	e001      	b.n	80194f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80194ee:	230f      	movs	r3, #15
 80194f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80194f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80194f4:	4618      	mov	r0, r3
 80194f6:	371c      	adds	r7, #28
 80194f8:	46bd      	mov	sp, r7
 80194fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194fe:	4770      	bx	lr

08019500 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019500:	b480      	push	{r7}
 8019502:	b085      	sub	sp, #20
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
 8019508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801950e:	683b      	ldr	r3, [r7, #0]
 8019510:	781b      	ldrb	r3, [r3, #0]
 8019512:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8019514:	683b      	ldr	r3, [r7, #0]
 8019516:	785b      	ldrb	r3, [r3, #1]
 8019518:	2b01      	cmp	r3, #1
 801951a:	d139      	bne.n	8019590 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019522:	69da      	ldr	r2, [r3, #28]
 8019524:	683b      	ldr	r3, [r7, #0]
 8019526:	781b      	ldrb	r3, [r3, #0]
 8019528:	f003 030f 	and.w	r3, r3, #15
 801952c:	2101      	movs	r1, #1
 801952e:	fa01 f303 	lsl.w	r3, r1, r3
 8019532:	b29b      	uxth	r3, r3
 8019534:	68f9      	ldr	r1, [r7, #12]
 8019536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801953a:	4313      	orrs	r3, r2
 801953c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801953e:	68bb      	ldr	r3, [r7, #8]
 8019540:	015a      	lsls	r2, r3, #5
 8019542:	68fb      	ldr	r3, [r7, #12]
 8019544:	4413      	add	r3, r2
 8019546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019550:	2b00      	cmp	r3, #0
 8019552:	d153      	bne.n	80195fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019554:	68bb      	ldr	r3, [r7, #8]
 8019556:	015a      	lsls	r2, r3, #5
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	4413      	add	r3, r2
 801955c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019560:	681a      	ldr	r2, [r3, #0]
 8019562:	683b      	ldr	r3, [r7, #0]
 8019564:	68db      	ldr	r3, [r3, #12]
 8019566:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801956a:	683b      	ldr	r3, [r7, #0]
 801956c:	791b      	ldrb	r3, [r3, #4]
 801956e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019570:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8019572:	68bb      	ldr	r3, [r7, #8]
 8019574:	059b      	lsls	r3, r3, #22
 8019576:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019578:	431a      	orrs	r2, r3
 801957a:	68bb      	ldr	r3, [r7, #8]
 801957c:	0159      	lsls	r1, r3, #5
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	440b      	add	r3, r1
 8019582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019586:	4619      	mov	r1, r3
 8019588:	4b20      	ldr	r3, [pc, #128]	; (801960c <USB_ActivateEndpoint+0x10c>)
 801958a:	4313      	orrs	r3, r2
 801958c:	600b      	str	r3, [r1, #0]
 801958e:	e035      	b.n	80195fc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019596:	69da      	ldr	r2, [r3, #28]
 8019598:	683b      	ldr	r3, [r7, #0]
 801959a:	781b      	ldrb	r3, [r3, #0]
 801959c:	f003 030f 	and.w	r3, r3, #15
 80195a0:	2101      	movs	r1, #1
 80195a2:	fa01 f303 	lsl.w	r3, r1, r3
 80195a6:	041b      	lsls	r3, r3, #16
 80195a8:	68f9      	ldr	r1, [r7, #12]
 80195aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80195ae:	4313      	orrs	r3, r2
 80195b0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80195b2:	68bb      	ldr	r3, [r7, #8]
 80195b4:	015a      	lsls	r2, r3, #5
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	4413      	add	r3, r2
 80195ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d119      	bne.n	80195fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80195c8:	68bb      	ldr	r3, [r7, #8]
 80195ca:	015a      	lsls	r2, r3, #5
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	4413      	add	r3, r2
 80195d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80195d4:	681a      	ldr	r2, [r3, #0]
 80195d6:	683b      	ldr	r3, [r7, #0]
 80195d8:	68db      	ldr	r3, [r3, #12]
 80195da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80195de:	683b      	ldr	r3, [r7, #0]
 80195e0:	791b      	ldrb	r3, [r3, #4]
 80195e2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80195e4:	430b      	orrs	r3, r1
 80195e6:	431a      	orrs	r2, r3
 80195e8:	68bb      	ldr	r3, [r7, #8]
 80195ea:	0159      	lsls	r1, r3, #5
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	440b      	add	r3, r1
 80195f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80195f4:	4619      	mov	r1, r3
 80195f6:	4b05      	ldr	r3, [pc, #20]	; (801960c <USB_ActivateEndpoint+0x10c>)
 80195f8:	4313      	orrs	r3, r2
 80195fa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80195fc:	2300      	movs	r3, #0
}
 80195fe:	4618      	mov	r0, r3
 8019600:	3714      	adds	r7, #20
 8019602:	46bd      	mov	sp, r7
 8019604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019608:	4770      	bx	lr
 801960a:	bf00      	nop
 801960c:	10008000 	.word	0x10008000

08019610 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019610:	b480      	push	{r7}
 8019612:	b085      	sub	sp, #20
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
 8019618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	781b      	ldrb	r3, [r3, #0]
 8019622:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8019624:	683b      	ldr	r3, [r7, #0]
 8019626:	785b      	ldrb	r3, [r3, #1]
 8019628:	2b01      	cmp	r3, #1
 801962a:	d161      	bne.n	80196f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801962c:	68bb      	ldr	r3, [r7, #8]
 801962e:	015a      	lsls	r2, r3, #5
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	4413      	add	r3, r2
 8019634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801963e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019642:	d11f      	bne.n	8019684 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8019644:	68bb      	ldr	r3, [r7, #8]
 8019646:	015a      	lsls	r2, r3, #5
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	4413      	add	r3, r2
 801964c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	68ba      	ldr	r2, [r7, #8]
 8019654:	0151      	lsls	r1, r2, #5
 8019656:	68fa      	ldr	r2, [r7, #12]
 8019658:	440a      	add	r2, r1
 801965a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801965e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019662:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8019664:	68bb      	ldr	r3, [r7, #8]
 8019666:	015a      	lsls	r2, r3, #5
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	4413      	add	r3, r2
 801966c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	68ba      	ldr	r2, [r7, #8]
 8019674:	0151      	lsls	r1, r2, #5
 8019676:	68fa      	ldr	r2, [r7, #12]
 8019678:	440a      	add	r2, r1
 801967a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801967e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019682:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801968a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	781b      	ldrb	r3, [r3, #0]
 8019690:	f003 030f 	and.w	r3, r3, #15
 8019694:	2101      	movs	r1, #1
 8019696:	fa01 f303 	lsl.w	r3, r1, r3
 801969a:	b29b      	uxth	r3, r3
 801969c:	43db      	mvns	r3, r3
 801969e:	68f9      	ldr	r1, [r7, #12]
 80196a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80196a4:	4013      	ands	r3, r2
 80196a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80196ae:	69da      	ldr	r2, [r3, #28]
 80196b0:	683b      	ldr	r3, [r7, #0]
 80196b2:	781b      	ldrb	r3, [r3, #0]
 80196b4:	f003 030f 	and.w	r3, r3, #15
 80196b8:	2101      	movs	r1, #1
 80196ba:	fa01 f303 	lsl.w	r3, r1, r3
 80196be:	b29b      	uxth	r3, r3
 80196c0:	43db      	mvns	r3, r3
 80196c2:	68f9      	ldr	r1, [r7, #12]
 80196c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80196c8:	4013      	ands	r3, r2
 80196ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80196cc:	68bb      	ldr	r3, [r7, #8]
 80196ce:	015a      	lsls	r2, r3, #5
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	4413      	add	r3, r2
 80196d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80196d8:	681a      	ldr	r2, [r3, #0]
 80196da:	68bb      	ldr	r3, [r7, #8]
 80196dc:	0159      	lsls	r1, r3, #5
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	440b      	add	r3, r1
 80196e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80196e6:	4619      	mov	r1, r3
 80196e8:	4b35      	ldr	r3, [pc, #212]	; (80197c0 <USB_DeactivateEndpoint+0x1b0>)
 80196ea:	4013      	ands	r3, r2
 80196ec:	600b      	str	r3, [r1, #0]
 80196ee:	e060      	b.n	80197b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80196f0:	68bb      	ldr	r3, [r7, #8]
 80196f2:	015a      	lsls	r2, r3, #5
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	4413      	add	r3, r2
 80196f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019706:	d11f      	bne.n	8019748 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8019708:	68bb      	ldr	r3, [r7, #8]
 801970a:	015a      	lsls	r2, r3, #5
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	4413      	add	r3, r2
 8019710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	68ba      	ldr	r2, [r7, #8]
 8019718:	0151      	lsls	r1, r2, #5
 801971a:	68fa      	ldr	r2, [r7, #12]
 801971c:	440a      	add	r2, r1
 801971e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019722:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019726:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8019728:	68bb      	ldr	r3, [r7, #8]
 801972a:	015a      	lsls	r2, r3, #5
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	4413      	add	r3, r2
 8019730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	68ba      	ldr	r2, [r7, #8]
 8019738:	0151      	lsls	r1, r2, #5
 801973a:	68fa      	ldr	r2, [r7, #12]
 801973c:	440a      	add	r2, r1
 801973e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019746:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801974e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019750:	683b      	ldr	r3, [r7, #0]
 8019752:	781b      	ldrb	r3, [r3, #0]
 8019754:	f003 030f 	and.w	r3, r3, #15
 8019758:	2101      	movs	r1, #1
 801975a:	fa01 f303 	lsl.w	r3, r1, r3
 801975e:	041b      	lsls	r3, r3, #16
 8019760:	43db      	mvns	r3, r3
 8019762:	68f9      	ldr	r1, [r7, #12]
 8019764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019768:	4013      	ands	r3, r2
 801976a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019772:	69da      	ldr	r2, [r3, #28]
 8019774:	683b      	ldr	r3, [r7, #0]
 8019776:	781b      	ldrb	r3, [r3, #0]
 8019778:	f003 030f 	and.w	r3, r3, #15
 801977c:	2101      	movs	r1, #1
 801977e:	fa01 f303 	lsl.w	r3, r1, r3
 8019782:	041b      	lsls	r3, r3, #16
 8019784:	43db      	mvns	r3, r3
 8019786:	68f9      	ldr	r1, [r7, #12]
 8019788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801978c:	4013      	ands	r3, r2
 801978e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8019790:	68bb      	ldr	r3, [r7, #8]
 8019792:	015a      	lsls	r2, r3, #5
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	4413      	add	r3, r2
 8019798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801979c:	681a      	ldr	r2, [r3, #0]
 801979e:	68bb      	ldr	r3, [r7, #8]
 80197a0:	0159      	lsls	r1, r3, #5
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	440b      	add	r3, r1
 80197a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197aa:	4619      	mov	r1, r3
 80197ac:	4b05      	ldr	r3, [pc, #20]	; (80197c4 <USB_DeactivateEndpoint+0x1b4>)
 80197ae:	4013      	ands	r3, r2
 80197b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80197b2:	2300      	movs	r3, #0
}
 80197b4:	4618      	mov	r0, r3
 80197b6:	3714      	adds	r7, #20
 80197b8:	46bd      	mov	sp, r7
 80197ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197be:	4770      	bx	lr
 80197c0:	ec337800 	.word	0xec337800
 80197c4:	eff37800 	.word	0xeff37800

080197c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b08a      	sub	sp, #40	; 0x28
 80197cc:	af02      	add	r7, sp, #8
 80197ce:	60f8      	str	r0, [r7, #12]
 80197d0:	60b9      	str	r1, [r7, #8]
 80197d2:	4613      	mov	r3, r2
 80197d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80197da:	68bb      	ldr	r3, [r7, #8]
 80197dc:	781b      	ldrb	r3, [r3, #0]
 80197de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80197e0:	68bb      	ldr	r3, [r7, #8]
 80197e2:	785b      	ldrb	r3, [r3, #1]
 80197e4:	2b01      	cmp	r3, #1
 80197e6:	f040 8163 	bne.w	8019ab0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80197ea:	68bb      	ldr	r3, [r7, #8]
 80197ec:	699b      	ldr	r3, [r3, #24]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d132      	bne.n	8019858 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80197f2:	69bb      	ldr	r3, [r7, #24]
 80197f4:	015a      	lsls	r2, r3, #5
 80197f6:	69fb      	ldr	r3, [r7, #28]
 80197f8:	4413      	add	r3, r2
 80197fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80197fe:	691a      	ldr	r2, [r3, #16]
 8019800:	69bb      	ldr	r3, [r7, #24]
 8019802:	0159      	lsls	r1, r3, #5
 8019804:	69fb      	ldr	r3, [r7, #28]
 8019806:	440b      	add	r3, r1
 8019808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801980c:	4619      	mov	r1, r3
 801980e:	4ba5      	ldr	r3, [pc, #660]	; (8019aa4 <USB_EPStartXfer+0x2dc>)
 8019810:	4013      	ands	r3, r2
 8019812:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8019814:	69bb      	ldr	r3, [r7, #24]
 8019816:	015a      	lsls	r2, r3, #5
 8019818:	69fb      	ldr	r3, [r7, #28]
 801981a:	4413      	add	r3, r2
 801981c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019820:	691b      	ldr	r3, [r3, #16]
 8019822:	69ba      	ldr	r2, [r7, #24]
 8019824:	0151      	lsls	r1, r2, #5
 8019826:	69fa      	ldr	r2, [r7, #28]
 8019828:	440a      	add	r2, r1
 801982a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801982e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8019834:	69bb      	ldr	r3, [r7, #24]
 8019836:	015a      	lsls	r2, r3, #5
 8019838:	69fb      	ldr	r3, [r7, #28]
 801983a:	4413      	add	r3, r2
 801983c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019840:	691a      	ldr	r2, [r3, #16]
 8019842:	69bb      	ldr	r3, [r7, #24]
 8019844:	0159      	lsls	r1, r3, #5
 8019846:	69fb      	ldr	r3, [r7, #28]
 8019848:	440b      	add	r3, r1
 801984a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801984e:	4619      	mov	r1, r3
 8019850:	4b95      	ldr	r3, [pc, #596]	; (8019aa8 <USB_EPStartXfer+0x2e0>)
 8019852:	4013      	ands	r3, r2
 8019854:	610b      	str	r3, [r1, #16]
 8019856:	e074      	b.n	8019942 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8019858:	69bb      	ldr	r3, [r7, #24]
 801985a:	015a      	lsls	r2, r3, #5
 801985c:	69fb      	ldr	r3, [r7, #28]
 801985e:	4413      	add	r3, r2
 8019860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019864:	691a      	ldr	r2, [r3, #16]
 8019866:	69bb      	ldr	r3, [r7, #24]
 8019868:	0159      	lsls	r1, r3, #5
 801986a:	69fb      	ldr	r3, [r7, #28]
 801986c:	440b      	add	r3, r1
 801986e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019872:	4619      	mov	r1, r3
 8019874:	4b8c      	ldr	r3, [pc, #560]	; (8019aa8 <USB_EPStartXfer+0x2e0>)
 8019876:	4013      	ands	r3, r2
 8019878:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801987a:	69bb      	ldr	r3, [r7, #24]
 801987c:	015a      	lsls	r2, r3, #5
 801987e:	69fb      	ldr	r3, [r7, #28]
 8019880:	4413      	add	r3, r2
 8019882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019886:	691a      	ldr	r2, [r3, #16]
 8019888:	69bb      	ldr	r3, [r7, #24]
 801988a:	0159      	lsls	r1, r3, #5
 801988c:	69fb      	ldr	r3, [r7, #28]
 801988e:	440b      	add	r3, r1
 8019890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019894:	4619      	mov	r1, r3
 8019896:	4b83      	ldr	r3, [pc, #524]	; (8019aa4 <USB_EPStartXfer+0x2dc>)
 8019898:	4013      	ands	r3, r2
 801989a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801989c:	69bb      	ldr	r3, [r7, #24]
 801989e:	015a      	lsls	r2, r3, #5
 80198a0:	69fb      	ldr	r3, [r7, #28]
 80198a2:	4413      	add	r3, r2
 80198a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80198a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80198aa:	68bb      	ldr	r3, [r7, #8]
 80198ac:	6999      	ldr	r1, [r3, #24]
 80198ae:	68bb      	ldr	r3, [r7, #8]
 80198b0:	68db      	ldr	r3, [r3, #12]
 80198b2:	440b      	add	r3, r1
 80198b4:	1e59      	subs	r1, r3, #1
 80198b6:	68bb      	ldr	r3, [r7, #8]
 80198b8:	68db      	ldr	r3, [r3, #12]
 80198ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80198be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80198c0:	4b7a      	ldr	r3, [pc, #488]	; (8019aac <USB_EPStartXfer+0x2e4>)
 80198c2:	400b      	ands	r3, r1
 80198c4:	69b9      	ldr	r1, [r7, #24]
 80198c6:	0148      	lsls	r0, r1, #5
 80198c8:	69f9      	ldr	r1, [r7, #28]
 80198ca:	4401      	add	r1, r0
 80198cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80198d0:	4313      	orrs	r3, r2
 80198d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80198d4:	69bb      	ldr	r3, [r7, #24]
 80198d6:	015a      	lsls	r2, r3, #5
 80198d8:	69fb      	ldr	r3, [r7, #28]
 80198da:	4413      	add	r3, r2
 80198dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80198e0:	691a      	ldr	r2, [r3, #16]
 80198e2:	68bb      	ldr	r3, [r7, #8]
 80198e4:	699b      	ldr	r3, [r3, #24]
 80198e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80198ea:	69b9      	ldr	r1, [r7, #24]
 80198ec:	0148      	lsls	r0, r1, #5
 80198ee:	69f9      	ldr	r1, [r7, #28]
 80198f0:	4401      	add	r1, r0
 80198f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80198f6:	4313      	orrs	r3, r2
 80198f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80198fa:	68bb      	ldr	r3, [r7, #8]
 80198fc:	791b      	ldrb	r3, [r3, #4]
 80198fe:	2b01      	cmp	r3, #1
 8019900:	d11f      	bne.n	8019942 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8019902:	69bb      	ldr	r3, [r7, #24]
 8019904:	015a      	lsls	r2, r3, #5
 8019906:	69fb      	ldr	r3, [r7, #28]
 8019908:	4413      	add	r3, r2
 801990a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801990e:	691b      	ldr	r3, [r3, #16]
 8019910:	69ba      	ldr	r2, [r7, #24]
 8019912:	0151      	lsls	r1, r2, #5
 8019914:	69fa      	ldr	r2, [r7, #28]
 8019916:	440a      	add	r2, r1
 8019918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801991c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8019920:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8019922:	69bb      	ldr	r3, [r7, #24]
 8019924:	015a      	lsls	r2, r3, #5
 8019926:	69fb      	ldr	r3, [r7, #28]
 8019928:	4413      	add	r3, r2
 801992a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801992e:	691b      	ldr	r3, [r3, #16]
 8019930:	69ba      	ldr	r2, [r7, #24]
 8019932:	0151      	lsls	r1, r2, #5
 8019934:	69fa      	ldr	r2, [r7, #28]
 8019936:	440a      	add	r2, r1
 8019938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801993c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8019940:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8019942:	79fb      	ldrb	r3, [r7, #7]
 8019944:	2b01      	cmp	r3, #1
 8019946:	d14b      	bne.n	80199e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8019948:	68bb      	ldr	r3, [r7, #8]
 801994a:	695b      	ldr	r3, [r3, #20]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d009      	beq.n	8019964 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8019950:	69bb      	ldr	r3, [r7, #24]
 8019952:	015a      	lsls	r2, r3, #5
 8019954:	69fb      	ldr	r3, [r7, #28]
 8019956:	4413      	add	r3, r2
 8019958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801995c:	461a      	mov	r2, r3
 801995e:	68bb      	ldr	r3, [r7, #8]
 8019960:	695b      	ldr	r3, [r3, #20]
 8019962:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8019964:	68bb      	ldr	r3, [r7, #8]
 8019966:	791b      	ldrb	r3, [r3, #4]
 8019968:	2b01      	cmp	r3, #1
 801996a:	d128      	bne.n	80199be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801996c:	69fb      	ldr	r3, [r7, #28]
 801996e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019972:	689b      	ldr	r3, [r3, #8]
 8019974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019978:	2b00      	cmp	r3, #0
 801997a:	d110      	bne.n	801999e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801997c:	69bb      	ldr	r3, [r7, #24]
 801997e:	015a      	lsls	r2, r3, #5
 8019980:	69fb      	ldr	r3, [r7, #28]
 8019982:	4413      	add	r3, r2
 8019984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	69ba      	ldr	r2, [r7, #24]
 801998c:	0151      	lsls	r1, r2, #5
 801998e:	69fa      	ldr	r2, [r7, #28]
 8019990:	440a      	add	r2, r1
 8019992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019996:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801999a:	6013      	str	r3, [r2, #0]
 801999c:	e00f      	b.n	80199be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801999e:	69bb      	ldr	r3, [r7, #24]
 80199a0:	015a      	lsls	r2, r3, #5
 80199a2:	69fb      	ldr	r3, [r7, #28]
 80199a4:	4413      	add	r3, r2
 80199a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	69ba      	ldr	r2, [r7, #24]
 80199ae:	0151      	lsls	r1, r2, #5
 80199b0:	69fa      	ldr	r2, [r7, #28]
 80199b2:	440a      	add	r2, r1
 80199b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80199b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80199bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80199be:	69bb      	ldr	r3, [r7, #24]
 80199c0:	015a      	lsls	r2, r3, #5
 80199c2:	69fb      	ldr	r3, [r7, #28]
 80199c4:	4413      	add	r3, r2
 80199c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	69ba      	ldr	r2, [r7, #24]
 80199ce:	0151      	lsls	r1, r2, #5
 80199d0:	69fa      	ldr	r2, [r7, #28]
 80199d2:	440a      	add	r2, r1
 80199d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80199d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80199dc:	6013      	str	r3, [r2, #0]
 80199de:	e137      	b.n	8019c50 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80199e0:	69bb      	ldr	r3, [r7, #24]
 80199e2:	015a      	lsls	r2, r3, #5
 80199e4:	69fb      	ldr	r3, [r7, #28]
 80199e6:	4413      	add	r3, r2
 80199e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	69ba      	ldr	r2, [r7, #24]
 80199f0:	0151      	lsls	r1, r2, #5
 80199f2:	69fa      	ldr	r2, [r7, #28]
 80199f4:	440a      	add	r2, r1
 80199f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80199fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80199fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019a00:	68bb      	ldr	r3, [r7, #8]
 8019a02:	791b      	ldrb	r3, [r3, #4]
 8019a04:	2b01      	cmp	r3, #1
 8019a06:	d015      	beq.n	8019a34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8019a08:	68bb      	ldr	r3, [r7, #8]
 8019a0a:	699b      	ldr	r3, [r3, #24]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	f000 811f 	beq.w	8019c50 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8019a12:	69fb      	ldr	r3, [r7, #28]
 8019a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019a1a:	68bb      	ldr	r3, [r7, #8]
 8019a1c:	781b      	ldrb	r3, [r3, #0]
 8019a1e:	f003 030f 	and.w	r3, r3, #15
 8019a22:	2101      	movs	r1, #1
 8019a24:	fa01 f303 	lsl.w	r3, r1, r3
 8019a28:	69f9      	ldr	r1, [r7, #28]
 8019a2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019a2e:	4313      	orrs	r3, r2
 8019a30:	634b      	str	r3, [r1, #52]	; 0x34
 8019a32:	e10d      	b.n	8019c50 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8019a34:	69fb      	ldr	r3, [r7, #28]
 8019a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019a3a:	689b      	ldr	r3, [r3, #8]
 8019a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d110      	bne.n	8019a66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8019a44:	69bb      	ldr	r3, [r7, #24]
 8019a46:	015a      	lsls	r2, r3, #5
 8019a48:	69fb      	ldr	r3, [r7, #28]
 8019a4a:	4413      	add	r3, r2
 8019a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	69ba      	ldr	r2, [r7, #24]
 8019a54:	0151      	lsls	r1, r2, #5
 8019a56:	69fa      	ldr	r2, [r7, #28]
 8019a58:	440a      	add	r2, r1
 8019a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019a5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8019a62:	6013      	str	r3, [r2, #0]
 8019a64:	e00f      	b.n	8019a86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8019a66:	69bb      	ldr	r3, [r7, #24]
 8019a68:	015a      	lsls	r2, r3, #5
 8019a6a:	69fb      	ldr	r3, [r7, #28]
 8019a6c:	4413      	add	r3, r2
 8019a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	69ba      	ldr	r2, [r7, #24]
 8019a76:	0151      	lsls	r1, r2, #5
 8019a78:	69fa      	ldr	r2, [r7, #28]
 8019a7a:	440a      	add	r2, r1
 8019a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019a84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8019a86:	68bb      	ldr	r3, [r7, #8]
 8019a88:	6919      	ldr	r1, [r3, #16]
 8019a8a:	68bb      	ldr	r3, [r7, #8]
 8019a8c:	781a      	ldrb	r2, [r3, #0]
 8019a8e:	68bb      	ldr	r3, [r7, #8]
 8019a90:	699b      	ldr	r3, [r3, #24]
 8019a92:	b298      	uxth	r0, r3
 8019a94:	79fb      	ldrb	r3, [r7, #7]
 8019a96:	9300      	str	r3, [sp, #0]
 8019a98:	4603      	mov	r3, r0
 8019a9a:	68f8      	ldr	r0, [r7, #12]
 8019a9c:	f000 faea 	bl	801a074 <USB_WritePacket>
 8019aa0:	e0d6      	b.n	8019c50 <USB_EPStartXfer+0x488>
 8019aa2:	bf00      	nop
 8019aa4:	e007ffff 	.word	0xe007ffff
 8019aa8:	fff80000 	.word	0xfff80000
 8019aac:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8019ab0:	69bb      	ldr	r3, [r7, #24]
 8019ab2:	015a      	lsls	r2, r3, #5
 8019ab4:	69fb      	ldr	r3, [r7, #28]
 8019ab6:	4413      	add	r3, r2
 8019ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019abc:	691a      	ldr	r2, [r3, #16]
 8019abe:	69bb      	ldr	r3, [r7, #24]
 8019ac0:	0159      	lsls	r1, r3, #5
 8019ac2:	69fb      	ldr	r3, [r7, #28]
 8019ac4:	440b      	add	r3, r1
 8019ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019aca:	4619      	mov	r1, r3
 8019acc:	4b63      	ldr	r3, [pc, #396]	; (8019c5c <USB_EPStartXfer+0x494>)
 8019ace:	4013      	ands	r3, r2
 8019ad0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8019ad2:	69bb      	ldr	r3, [r7, #24]
 8019ad4:	015a      	lsls	r2, r3, #5
 8019ad6:	69fb      	ldr	r3, [r7, #28]
 8019ad8:	4413      	add	r3, r2
 8019ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ade:	691a      	ldr	r2, [r3, #16]
 8019ae0:	69bb      	ldr	r3, [r7, #24]
 8019ae2:	0159      	lsls	r1, r3, #5
 8019ae4:	69fb      	ldr	r3, [r7, #28]
 8019ae6:	440b      	add	r3, r1
 8019ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019aec:	4619      	mov	r1, r3
 8019aee:	4b5c      	ldr	r3, [pc, #368]	; (8019c60 <USB_EPStartXfer+0x498>)
 8019af0:	4013      	ands	r3, r2
 8019af2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8019af4:	68bb      	ldr	r3, [r7, #8]
 8019af6:	699b      	ldr	r3, [r3, #24]
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d123      	bne.n	8019b44 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8019afc:	69bb      	ldr	r3, [r7, #24]
 8019afe:	015a      	lsls	r2, r3, #5
 8019b00:	69fb      	ldr	r3, [r7, #28]
 8019b02:	4413      	add	r3, r2
 8019b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b08:	691a      	ldr	r2, [r3, #16]
 8019b0a:	68bb      	ldr	r3, [r7, #8]
 8019b0c:	68db      	ldr	r3, [r3, #12]
 8019b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019b12:	69b9      	ldr	r1, [r7, #24]
 8019b14:	0148      	lsls	r0, r1, #5
 8019b16:	69f9      	ldr	r1, [r7, #28]
 8019b18:	4401      	add	r1, r0
 8019b1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019b1e:	4313      	orrs	r3, r2
 8019b20:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8019b22:	69bb      	ldr	r3, [r7, #24]
 8019b24:	015a      	lsls	r2, r3, #5
 8019b26:	69fb      	ldr	r3, [r7, #28]
 8019b28:	4413      	add	r3, r2
 8019b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b2e:	691b      	ldr	r3, [r3, #16]
 8019b30:	69ba      	ldr	r2, [r7, #24]
 8019b32:	0151      	lsls	r1, r2, #5
 8019b34:	69fa      	ldr	r2, [r7, #28]
 8019b36:	440a      	add	r2, r1
 8019b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019b3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019b40:	6113      	str	r3, [r2, #16]
 8019b42:	e037      	b.n	8019bb4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8019b44:	68bb      	ldr	r3, [r7, #8]
 8019b46:	699a      	ldr	r2, [r3, #24]
 8019b48:	68bb      	ldr	r3, [r7, #8]
 8019b4a:	68db      	ldr	r3, [r3, #12]
 8019b4c:	4413      	add	r3, r2
 8019b4e:	1e5a      	subs	r2, r3, #1
 8019b50:	68bb      	ldr	r3, [r7, #8]
 8019b52:	68db      	ldr	r3, [r3, #12]
 8019b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b58:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8019b5a:	68bb      	ldr	r3, [r7, #8]
 8019b5c:	68db      	ldr	r3, [r3, #12]
 8019b5e:	8afa      	ldrh	r2, [r7, #22]
 8019b60:	fb03 f202 	mul.w	r2, r3, r2
 8019b64:	68bb      	ldr	r3, [r7, #8]
 8019b66:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8019b68:	69bb      	ldr	r3, [r7, #24]
 8019b6a:	015a      	lsls	r2, r3, #5
 8019b6c:	69fb      	ldr	r3, [r7, #28]
 8019b6e:	4413      	add	r3, r2
 8019b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b74:	691a      	ldr	r2, [r3, #16]
 8019b76:	8afb      	ldrh	r3, [r7, #22]
 8019b78:	04d9      	lsls	r1, r3, #19
 8019b7a:	4b3a      	ldr	r3, [pc, #232]	; (8019c64 <USB_EPStartXfer+0x49c>)
 8019b7c:	400b      	ands	r3, r1
 8019b7e:	69b9      	ldr	r1, [r7, #24]
 8019b80:	0148      	lsls	r0, r1, #5
 8019b82:	69f9      	ldr	r1, [r7, #28]
 8019b84:	4401      	add	r1, r0
 8019b86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019b8a:	4313      	orrs	r3, r2
 8019b8c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8019b8e:	69bb      	ldr	r3, [r7, #24]
 8019b90:	015a      	lsls	r2, r3, #5
 8019b92:	69fb      	ldr	r3, [r7, #28]
 8019b94:	4413      	add	r3, r2
 8019b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b9a:	691a      	ldr	r2, [r3, #16]
 8019b9c:	68bb      	ldr	r3, [r7, #8]
 8019b9e:	69db      	ldr	r3, [r3, #28]
 8019ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019ba4:	69b9      	ldr	r1, [r7, #24]
 8019ba6:	0148      	lsls	r0, r1, #5
 8019ba8:	69f9      	ldr	r1, [r7, #28]
 8019baa:	4401      	add	r1, r0
 8019bac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019bb0:	4313      	orrs	r3, r2
 8019bb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8019bb4:	79fb      	ldrb	r3, [r7, #7]
 8019bb6:	2b01      	cmp	r3, #1
 8019bb8:	d10d      	bne.n	8019bd6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8019bba:	68bb      	ldr	r3, [r7, #8]
 8019bbc:	691b      	ldr	r3, [r3, #16]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d009      	beq.n	8019bd6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8019bc2:	68bb      	ldr	r3, [r7, #8]
 8019bc4:	6919      	ldr	r1, [r3, #16]
 8019bc6:	69bb      	ldr	r3, [r7, #24]
 8019bc8:	015a      	lsls	r2, r3, #5
 8019bca:	69fb      	ldr	r3, [r7, #28]
 8019bcc:	4413      	add	r3, r2
 8019bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019bd2:	460a      	mov	r2, r1
 8019bd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8019bd6:	68bb      	ldr	r3, [r7, #8]
 8019bd8:	791b      	ldrb	r3, [r3, #4]
 8019bda:	2b01      	cmp	r3, #1
 8019bdc:	d128      	bne.n	8019c30 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8019bde:	69fb      	ldr	r3, [r7, #28]
 8019be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019be4:	689b      	ldr	r3, [r3, #8]
 8019be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d110      	bne.n	8019c10 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8019bee:	69bb      	ldr	r3, [r7, #24]
 8019bf0:	015a      	lsls	r2, r3, #5
 8019bf2:	69fb      	ldr	r3, [r7, #28]
 8019bf4:	4413      	add	r3, r2
 8019bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	69ba      	ldr	r2, [r7, #24]
 8019bfe:	0151      	lsls	r1, r2, #5
 8019c00:	69fa      	ldr	r2, [r7, #28]
 8019c02:	440a      	add	r2, r1
 8019c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019c08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8019c0c:	6013      	str	r3, [r2, #0]
 8019c0e:	e00f      	b.n	8019c30 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8019c10:	69bb      	ldr	r3, [r7, #24]
 8019c12:	015a      	lsls	r2, r3, #5
 8019c14:	69fb      	ldr	r3, [r7, #28]
 8019c16:	4413      	add	r3, r2
 8019c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	69ba      	ldr	r2, [r7, #24]
 8019c20:	0151      	lsls	r1, r2, #5
 8019c22:	69fa      	ldr	r2, [r7, #28]
 8019c24:	440a      	add	r2, r1
 8019c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019c2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8019c30:	69bb      	ldr	r3, [r7, #24]
 8019c32:	015a      	lsls	r2, r3, #5
 8019c34:	69fb      	ldr	r3, [r7, #28]
 8019c36:	4413      	add	r3, r2
 8019c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	69ba      	ldr	r2, [r7, #24]
 8019c40:	0151      	lsls	r1, r2, #5
 8019c42:	69fa      	ldr	r2, [r7, #28]
 8019c44:	440a      	add	r2, r1
 8019c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019c4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019c4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019c50:	2300      	movs	r3, #0
}
 8019c52:	4618      	mov	r0, r3
 8019c54:	3720      	adds	r7, #32
 8019c56:	46bd      	mov	sp, r7
 8019c58:	bd80      	pop	{r7, pc}
 8019c5a:	bf00      	nop
 8019c5c:	fff80000 	.word	0xfff80000
 8019c60:	e007ffff 	.word	0xe007ffff
 8019c64:	1ff80000 	.word	0x1ff80000

08019c68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8019c68:	b480      	push	{r7}
 8019c6a:	b087      	sub	sp, #28
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	60f8      	str	r0, [r7, #12]
 8019c70:	60b9      	str	r1, [r7, #8]
 8019c72:	4613      	mov	r3, r2
 8019c74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8019c7a:	68bb      	ldr	r3, [r7, #8]
 8019c7c:	781b      	ldrb	r3, [r3, #0]
 8019c7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019c80:	68bb      	ldr	r3, [r7, #8]
 8019c82:	785b      	ldrb	r3, [r3, #1]
 8019c84:	2b01      	cmp	r3, #1
 8019c86:	f040 80ce 	bne.w	8019e26 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	699b      	ldr	r3, [r3, #24]
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d132      	bne.n	8019cf8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8019c92:	693b      	ldr	r3, [r7, #16]
 8019c94:	015a      	lsls	r2, r3, #5
 8019c96:	697b      	ldr	r3, [r7, #20]
 8019c98:	4413      	add	r3, r2
 8019c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019c9e:	691a      	ldr	r2, [r3, #16]
 8019ca0:	693b      	ldr	r3, [r7, #16]
 8019ca2:	0159      	lsls	r1, r3, #5
 8019ca4:	697b      	ldr	r3, [r7, #20]
 8019ca6:	440b      	add	r3, r1
 8019ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019cac:	4619      	mov	r1, r3
 8019cae:	4b9a      	ldr	r3, [pc, #616]	; (8019f18 <USB_EP0StartXfer+0x2b0>)
 8019cb0:	4013      	ands	r3, r2
 8019cb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8019cb4:	693b      	ldr	r3, [r7, #16]
 8019cb6:	015a      	lsls	r2, r3, #5
 8019cb8:	697b      	ldr	r3, [r7, #20]
 8019cba:	4413      	add	r3, r2
 8019cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019cc0:	691b      	ldr	r3, [r3, #16]
 8019cc2:	693a      	ldr	r2, [r7, #16]
 8019cc4:	0151      	lsls	r1, r2, #5
 8019cc6:	697a      	ldr	r2, [r7, #20]
 8019cc8:	440a      	add	r2, r1
 8019cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019cce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019cd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8019cd4:	693b      	ldr	r3, [r7, #16]
 8019cd6:	015a      	lsls	r2, r3, #5
 8019cd8:	697b      	ldr	r3, [r7, #20]
 8019cda:	4413      	add	r3, r2
 8019cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019ce0:	691a      	ldr	r2, [r3, #16]
 8019ce2:	693b      	ldr	r3, [r7, #16]
 8019ce4:	0159      	lsls	r1, r3, #5
 8019ce6:	697b      	ldr	r3, [r7, #20]
 8019ce8:	440b      	add	r3, r1
 8019cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019cee:	4619      	mov	r1, r3
 8019cf0:	4b8a      	ldr	r3, [pc, #552]	; (8019f1c <USB_EP0StartXfer+0x2b4>)
 8019cf2:	4013      	ands	r3, r2
 8019cf4:	610b      	str	r3, [r1, #16]
 8019cf6:	e04e      	b.n	8019d96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8019cf8:	693b      	ldr	r3, [r7, #16]
 8019cfa:	015a      	lsls	r2, r3, #5
 8019cfc:	697b      	ldr	r3, [r7, #20]
 8019cfe:	4413      	add	r3, r2
 8019d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019d04:	691a      	ldr	r2, [r3, #16]
 8019d06:	693b      	ldr	r3, [r7, #16]
 8019d08:	0159      	lsls	r1, r3, #5
 8019d0a:	697b      	ldr	r3, [r7, #20]
 8019d0c:	440b      	add	r3, r1
 8019d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019d12:	4619      	mov	r1, r3
 8019d14:	4b81      	ldr	r3, [pc, #516]	; (8019f1c <USB_EP0StartXfer+0x2b4>)
 8019d16:	4013      	ands	r3, r2
 8019d18:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8019d1a:	693b      	ldr	r3, [r7, #16]
 8019d1c:	015a      	lsls	r2, r3, #5
 8019d1e:	697b      	ldr	r3, [r7, #20]
 8019d20:	4413      	add	r3, r2
 8019d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019d26:	691a      	ldr	r2, [r3, #16]
 8019d28:	693b      	ldr	r3, [r7, #16]
 8019d2a:	0159      	lsls	r1, r3, #5
 8019d2c:	697b      	ldr	r3, [r7, #20]
 8019d2e:	440b      	add	r3, r1
 8019d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019d34:	4619      	mov	r1, r3
 8019d36:	4b78      	ldr	r3, [pc, #480]	; (8019f18 <USB_EP0StartXfer+0x2b0>)
 8019d38:	4013      	ands	r3, r2
 8019d3a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8019d3c:	68bb      	ldr	r3, [r7, #8]
 8019d3e:	699a      	ldr	r2, [r3, #24]
 8019d40:	68bb      	ldr	r3, [r7, #8]
 8019d42:	68db      	ldr	r3, [r3, #12]
 8019d44:	429a      	cmp	r2, r3
 8019d46:	d903      	bls.n	8019d50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8019d48:	68bb      	ldr	r3, [r7, #8]
 8019d4a:	68da      	ldr	r2, [r3, #12]
 8019d4c:	68bb      	ldr	r3, [r7, #8]
 8019d4e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8019d50:	693b      	ldr	r3, [r7, #16]
 8019d52:	015a      	lsls	r2, r3, #5
 8019d54:	697b      	ldr	r3, [r7, #20]
 8019d56:	4413      	add	r3, r2
 8019d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019d5c:	691b      	ldr	r3, [r3, #16]
 8019d5e:	693a      	ldr	r2, [r7, #16]
 8019d60:	0151      	lsls	r1, r2, #5
 8019d62:	697a      	ldr	r2, [r7, #20]
 8019d64:	440a      	add	r2, r1
 8019d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019d6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8019d70:	693b      	ldr	r3, [r7, #16]
 8019d72:	015a      	lsls	r2, r3, #5
 8019d74:	697b      	ldr	r3, [r7, #20]
 8019d76:	4413      	add	r3, r2
 8019d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019d7c:	691a      	ldr	r2, [r3, #16]
 8019d7e:	68bb      	ldr	r3, [r7, #8]
 8019d80:	699b      	ldr	r3, [r3, #24]
 8019d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019d86:	6939      	ldr	r1, [r7, #16]
 8019d88:	0148      	lsls	r0, r1, #5
 8019d8a:	6979      	ldr	r1, [r7, #20]
 8019d8c:	4401      	add	r1, r0
 8019d8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8019d92:	4313      	orrs	r3, r2
 8019d94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8019d96:	79fb      	ldrb	r3, [r7, #7]
 8019d98:	2b01      	cmp	r3, #1
 8019d9a:	d11e      	bne.n	8019dda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8019d9c:	68bb      	ldr	r3, [r7, #8]
 8019d9e:	695b      	ldr	r3, [r3, #20]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d009      	beq.n	8019db8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8019da4:	693b      	ldr	r3, [r7, #16]
 8019da6:	015a      	lsls	r2, r3, #5
 8019da8:	697b      	ldr	r3, [r7, #20]
 8019daa:	4413      	add	r3, r2
 8019dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019db0:	461a      	mov	r2, r3
 8019db2:	68bb      	ldr	r3, [r7, #8]
 8019db4:	695b      	ldr	r3, [r3, #20]
 8019db6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019db8:	693b      	ldr	r3, [r7, #16]
 8019dba:	015a      	lsls	r2, r3, #5
 8019dbc:	697b      	ldr	r3, [r7, #20]
 8019dbe:	4413      	add	r3, r2
 8019dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	693a      	ldr	r2, [r7, #16]
 8019dc8:	0151      	lsls	r1, r2, #5
 8019dca:	697a      	ldr	r2, [r7, #20]
 8019dcc:	440a      	add	r2, r1
 8019dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019dd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019dd6:	6013      	str	r3, [r2, #0]
 8019dd8:	e097      	b.n	8019f0a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019dda:	693b      	ldr	r3, [r7, #16]
 8019ddc:	015a      	lsls	r2, r3, #5
 8019dde:	697b      	ldr	r3, [r7, #20]
 8019de0:	4413      	add	r3, r2
 8019de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	693a      	ldr	r2, [r7, #16]
 8019dea:	0151      	lsls	r1, r2, #5
 8019dec:	697a      	ldr	r2, [r7, #20]
 8019dee:	440a      	add	r2, r1
 8019df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019df4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019df8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8019dfa:	68bb      	ldr	r3, [r7, #8]
 8019dfc:	699b      	ldr	r3, [r3, #24]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	f000 8083 	beq.w	8019f0a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8019e04:	697b      	ldr	r3, [r7, #20]
 8019e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019e0c:	68bb      	ldr	r3, [r7, #8]
 8019e0e:	781b      	ldrb	r3, [r3, #0]
 8019e10:	f003 030f 	and.w	r3, r3, #15
 8019e14:	2101      	movs	r1, #1
 8019e16:	fa01 f303 	lsl.w	r3, r1, r3
 8019e1a:	6979      	ldr	r1, [r7, #20]
 8019e1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019e20:	4313      	orrs	r3, r2
 8019e22:	634b      	str	r3, [r1, #52]	; 0x34
 8019e24:	e071      	b.n	8019f0a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8019e26:	693b      	ldr	r3, [r7, #16]
 8019e28:	015a      	lsls	r2, r3, #5
 8019e2a:	697b      	ldr	r3, [r7, #20]
 8019e2c:	4413      	add	r3, r2
 8019e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019e32:	691a      	ldr	r2, [r3, #16]
 8019e34:	693b      	ldr	r3, [r7, #16]
 8019e36:	0159      	lsls	r1, r3, #5
 8019e38:	697b      	ldr	r3, [r7, #20]
 8019e3a:	440b      	add	r3, r1
 8019e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019e40:	4619      	mov	r1, r3
 8019e42:	4b36      	ldr	r3, [pc, #216]	; (8019f1c <USB_EP0StartXfer+0x2b4>)
 8019e44:	4013      	ands	r3, r2
 8019e46:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8019e48:	693b      	ldr	r3, [r7, #16]
 8019e4a:	015a      	lsls	r2, r3, #5
 8019e4c:	697b      	ldr	r3, [r7, #20]
 8019e4e:	4413      	add	r3, r2
 8019e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019e54:	691a      	ldr	r2, [r3, #16]
 8019e56:	693b      	ldr	r3, [r7, #16]
 8019e58:	0159      	lsls	r1, r3, #5
 8019e5a:	697b      	ldr	r3, [r7, #20]
 8019e5c:	440b      	add	r3, r1
 8019e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019e62:	4619      	mov	r1, r3
 8019e64:	4b2c      	ldr	r3, [pc, #176]	; (8019f18 <USB_EP0StartXfer+0x2b0>)
 8019e66:	4013      	ands	r3, r2
 8019e68:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	699b      	ldr	r3, [r3, #24]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d003      	beq.n	8019e7a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8019e72:	68bb      	ldr	r3, [r7, #8]
 8019e74:	68da      	ldr	r2, [r3, #12]
 8019e76:	68bb      	ldr	r3, [r7, #8]
 8019e78:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8019e7a:	68bb      	ldr	r3, [r7, #8]
 8019e7c:	68da      	ldr	r2, [r3, #12]
 8019e7e:	68bb      	ldr	r3, [r7, #8]
 8019e80:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8019e82:	693b      	ldr	r3, [r7, #16]
 8019e84:	015a      	lsls	r2, r3, #5
 8019e86:	697b      	ldr	r3, [r7, #20]
 8019e88:	4413      	add	r3, r2
 8019e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019e8e:	691b      	ldr	r3, [r3, #16]
 8019e90:	693a      	ldr	r2, [r7, #16]
 8019e92:	0151      	lsls	r1, r2, #5
 8019e94:	697a      	ldr	r2, [r7, #20]
 8019e96:	440a      	add	r2, r1
 8019e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019ea0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8019ea2:	693b      	ldr	r3, [r7, #16]
 8019ea4:	015a      	lsls	r2, r3, #5
 8019ea6:	697b      	ldr	r3, [r7, #20]
 8019ea8:	4413      	add	r3, r2
 8019eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019eae:	691a      	ldr	r2, [r3, #16]
 8019eb0:	68bb      	ldr	r3, [r7, #8]
 8019eb2:	69db      	ldr	r3, [r3, #28]
 8019eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019eb8:	6939      	ldr	r1, [r7, #16]
 8019eba:	0148      	lsls	r0, r1, #5
 8019ebc:	6979      	ldr	r1, [r7, #20]
 8019ebe:	4401      	add	r1, r0
 8019ec0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019ec4:	4313      	orrs	r3, r2
 8019ec6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8019ec8:	79fb      	ldrb	r3, [r7, #7]
 8019eca:	2b01      	cmp	r3, #1
 8019ecc:	d10d      	bne.n	8019eea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8019ece:	68bb      	ldr	r3, [r7, #8]
 8019ed0:	691b      	ldr	r3, [r3, #16]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d009      	beq.n	8019eea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8019ed6:	68bb      	ldr	r3, [r7, #8]
 8019ed8:	6919      	ldr	r1, [r3, #16]
 8019eda:	693b      	ldr	r3, [r7, #16]
 8019edc:	015a      	lsls	r2, r3, #5
 8019ede:	697b      	ldr	r3, [r7, #20]
 8019ee0:	4413      	add	r3, r2
 8019ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ee6:	460a      	mov	r2, r1
 8019ee8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8019eea:	693b      	ldr	r3, [r7, #16]
 8019eec:	015a      	lsls	r2, r3, #5
 8019eee:	697b      	ldr	r3, [r7, #20]
 8019ef0:	4413      	add	r3, r2
 8019ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	693a      	ldr	r2, [r7, #16]
 8019efa:	0151      	lsls	r1, r2, #5
 8019efc:	697a      	ldr	r2, [r7, #20]
 8019efe:	440a      	add	r2, r1
 8019f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019f04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019f08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019f0a:	2300      	movs	r3, #0
}
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	371c      	adds	r7, #28
 8019f10:	46bd      	mov	sp, r7
 8019f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f16:	4770      	bx	lr
 8019f18:	e007ffff 	.word	0xe007ffff
 8019f1c:	fff80000 	.word	0xfff80000

08019f20 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019f20:	b480      	push	{r7}
 8019f22:	b087      	sub	sp, #28
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	6078      	str	r0, [r7, #4]
 8019f28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8019f2e:	2300      	movs	r3, #0
 8019f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019f36:	683b      	ldr	r3, [r7, #0]
 8019f38:	785b      	ldrb	r3, [r3, #1]
 8019f3a:	2b01      	cmp	r3, #1
 8019f3c:	d14a      	bne.n	8019fd4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8019f3e:	683b      	ldr	r3, [r7, #0]
 8019f40:	781b      	ldrb	r3, [r3, #0]
 8019f42:	015a      	lsls	r2, r3, #5
 8019f44:	693b      	ldr	r3, [r7, #16]
 8019f46:	4413      	add	r3, r2
 8019f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019f56:	f040 8086 	bne.w	801a066 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8019f5a:	683b      	ldr	r3, [r7, #0]
 8019f5c:	781b      	ldrb	r3, [r3, #0]
 8019f5e:	015a      	lsls	r2, r3, #5
 8019f60:	693b      	ldr	r3, [r7, #16]
 8019f62:	4413      	add	r3, r2
 8019f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	683a      	ldr	r2, [r7, #0]
 8019f6c:	7812      	ldrb	r2, [r2, #0]
 8019f6e:	0151      	lsls	r1, r2, #5
 8019f70:	693a      	ldr	r2, [r7, #16]
 8019f72:	440a      	add	r2, r1
 8019f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019f78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019f7c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8019f7e:	683b      	ldr	r3, [r7, #0]
 8019f80:	781b      	ldrb	r3, [r3, #0]
 8019f82:	015a      	lsls	r2, r3, #5
 8019f84:	693b      	ldr	r3, [r7, #16]
 8019f86:	4413      	add	r3, r2
 8019f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	683a      	ldr	r2, [r7, #0]
 8019f90:	7812      	ldrb	r2, [r2, #0]
 8019f92:	0151      	lsls	r1, r2, #5
 8019f94:	693a      	ldr	r2, [r7, #16]
 8019f96:	440a      	add	r2, r1
 8019f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019fa0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	3301      	adds	r3, #1
 8019fa6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	f242 7210 	movw	r2, #10000	; 0x2710
 8019fae:	4293      	cmp	r3, r2
 8019fb0:	d902      	bls.n	8019fb8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8019fb2:	2301      	movs	r3, #1
 8019fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8019fb6:	e056      	b.n	801a066 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8019fb8:	683b      	ldr	r3, [r7, #0]
 8019fba:	781b      	ldrb	r3, [r3, #0]
 8019fbc:	015a      	lsls	r2, r3, #5
 8019fbe:	693b      	ldr	r3, [r7, #16]
 8019fc0:	4413      	add	r3, r2
 8019fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019fd0:	d0e7      	beq.n	8019fa2 <USB_EPStopXfer+0x82>
 8019fd2:	e048      	b.n	801a066 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	781b      	ldrb	r3, [r3, #0]
 8019fd8:	015a      	lsls	r2, r3, #5
 8019fda:	693b      	ldr	r3, [r7, #16]
 8019fdc:	4413      	add	r3, r2
 8019fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019fec:	d13b      	bne.n	801a066 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8019fee:	683b      	ldr	r3, [r7, #0]
 8019ff0:	781b      	ldrb	r3, [r3, #0]
 8019ff2:	015a      	lsls	r2, r3, #5
 8019ff4:	693b      	ldr	r3, [r7, #16]
 8019ff6:	4413      	add	r3, r2
 8019ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	683a      	ldr	r2, [r7, #0]
 801a000:	7812      	ldrb	r2, [r2, #0]
 801a002:	0151      	lsls	r1, r2, #5
 801a004:	693a      	ldr	r2, [r7, #16]
 801a006:	440a      	add	r2, r1
 801a008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a00c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a010:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801a012:	683b      	ldr	r3, [r7, #0]
 801a014:	781b      	ldrb	r3, [r3, #0]
 801a016:	015a      	lsls	r2, r3, #5
 801a018:	693b      	ldr	r3, [r7, #16]
 801a01a:	4413      	add	r3, r2
 801a01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	683a      	ldr	r2, [r7, #0]
 801a024:	7812      	ldrb	r2, [r2, #0]
 801a026:	0151      	lsls	r1, r2, #5
 801a028:	693a      	ldr	r2, [r7, #16]
 801a02a:	440a      	add	r2, r1
 801a02c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a030:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a034:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801a036:	68fb      	ldr	r3, [r7, #12]
 801a038:	3301      	adds	r3, #1
 801a03a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	f242 7210 	movw	r2, #10000	; 0x2710
 801a042:	4293      	cmp	r3, r2
 801a044:	d902      	bls.n	801a04c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801a046:	2301      	movs	r3, #1
 801a048:	75fb      	strb	r3, [r7, #23]
          break;
 801a04a:	e00c      	b.n	801a066 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	781b      	ldrb	r3, [r3, #0]
 801a050:	015a      	lsls	r2, r3, #5
 801a052:	693b      	ldr	r3, [r7, #16]
 801a054:	4413      	add	r3, r2
 801a056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a064:	d0e7      	beq.n	801a036 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801a066:	7dfb      	ldrb	r3, [r7, #23]
}
 801a068:	4618      	mov	r0, r3
 801a06a:	371c      	adds	r7, #28
 801a06c:	46bd      	mov	sp, r7
 801a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a072:	4770      	bx	lr

0801a074 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801a074:	b480      	push	{r7}
 801a076:	b089      	sub	sp, #36	; 0x24
 801a078:	af00      	add	r7, sp, #0
 801a07a:	60f8      	str	r0, [r7, #12]
 801a07c:	60b9      	str	r1, [r7, #8]
 801a07e:	4611      	mov	r1, r2
 801a080:	461a      	mov	r2, r3
 801a082:	460b      	mov	r3, r1
 801a084:	71fb      	strb	r3, [r7, #7]
 801a086:	4613      	mov	r3, r2
 801a088:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801a08e:	68bb      	ldr	r3, [r7, #8]
 801a090:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801a092:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a096:	2b00      	cmp	r3, #0
 801a098:	d123      	bne.n	801a0e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801a09a:	88bb      	ldrh	r3, [r7, #4]
 801a09c:	3303      	adds	r3, #3
 801a09e:	089b      	lsrs	r3, r3, #2
 801a0a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801a0a2:	2300      	movs	r3, #0
 801a0a4:	61bb      	str	r3, [r7, #24]
 801a0a6:	e018      	b.n	801a0da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801a0a8:	79fb      	ldrb	r3, [r7, #7]
 801a0aa:	031a      	lsls	r2, r3, #12
 801a0ac:	697b      	ldr	r3, [r7, #20]
 801a0ae:	4413      	add	r3, r2
 801a0b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a0b4:	461a      	mov	r2, r3
 801a0b6:	69fb      	ldr	r3, [r7, #28]
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 801a0bc:	69fb      	ldr	r3, [r7, #28]
 801a0be:	3301      	adds	r3, #1
 801a0c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801a0c2:	69fb      	ldr	r3, [r7, #28]
 801a0c4:	3301      	adds	r3, #1
 801a0c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801a0c8:	69fb      	ldr	r3, [r7, #28]
 801a0ca:	3301      	adds	r3, #1
 801a0cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801a0ce:	69fb      	ldr	r3, [r7, #28]
 801a0d0:	3301      	adds	r3, #1
 801a0d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801a0d4:	69bb      	ldr	r3, [r7, #24]
 801a0d6:	3301      	adds	r3, #1
 801a0d8:	61bb      	str	r3, [r7, #24]
 801a0da:	69ba      	ldr	r2, [r7, #24]
 801a0dc:	693b      	ldr	r3, [r7, #16]
 801a0de:	429a      	cmp	r2, r3
 801a0e0:	d3e2      	bcc.n	801a0a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801a0e2:	2300      	movs	r3, #0
}
 801a0e4:	4618      	mov	r0, r3
 801a0e6:	3724      	adds	r7, #36	; 0x24
 801a0e8:	46bd      	mov	sp, r7
 801a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ee:	4770      	bx	lr

0801a0f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801a0f0:	b480      	push	{r7}
 801a0f2:	b08b      	sub	sp, #44	; 0x2c
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	60f8      	str	r0, [r7, #12]
 801a0f8:	60b9      	str	r1, [r7, #8]
 801a0fa:	4613      	mov	r3, r2
 801a0fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801a102:	68bb      	ldr	r3, [r7, #8]
 801a104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801a106:	88fb      	ldrh	r3, [r7, #6]
 801a108:	089b      	lsrs	r3, r3, #2
 801a10a:	b29b      	uxth	r3, r3
 801a10c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801a10e:	88fb      	ldrh	r3, [r7, #6]
 801a110:	f003 0303 	and.w	r3, r3, #3
 801a114:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801a116:	2300      	movs	r3, #0
 801a118:	623b      	str	r3, [r7, #32]
 801a11a:	e014      	b.n	801a146 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801a11c:	69bb      	ldr	r3, [r7, #24]
 801a11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a122:	681a      	ldr	r2, [r3, #0]
 801a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a126:	601a      	str	r2, [r3, #0]
    pDest++;
 801a128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a12a:	3301      	adds	r3, #1
 801a12c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801a12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a130:	3301      	adds	r3, #1
 801a132:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a136:	3301      	adds	r3, #1
 801a138:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a13c:	3301      	adds	r3, #1
 801a13e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801a140:	6a3b      	ldr	r3, [r7, #32]
 801a142:	3301      	adds	r3, #1
 801a144:	623b      	str	r3, [r7, #32]
 801a146:	6a3a      	ldr	r2, [r7, #32]
 801a148:	697b      	ldr	r3, [r7, #20]
 801a14a:	429a      	cmp	r2, r3
 801a14c:	d3e6      	bcc.n	801a11c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801a14e:	8bfb      	ldrh	r3, [r7, #30]
 801a150:	2b00      	cmp	r3, #0
 801a152:	d01e      	beq.n	801a192 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801a154:	2300      	movs	r3, #0
 801a156:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801a158:	69bb      	ldr	r3, [r7, #24]
 801a15a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a15e:	461a      	mov	r2, r3
 801a160:	f107 0310 	add.w	r3, r7, #16
 801a164:	6812      	ldr	r2, [r2, #0]
 801a166:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801a168:	693a      	ldr	r2, [r7, #16]
 801a16a:	6a3b      	ldr	r3, [r7, #32]
 801a16c:	b2db      	uxtb	r3, r3
 801a16e:	00db      	lsls	r3, r3, #3
 801a170:	fa22 f303 	lsr.w	r3, r2, r3
 801a174:	b2da      	uxtb	r2, r3
 801a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a178:	701a      	strb	r2, [r3, #0]
      i++;
 801a17a:	6a3b      	ldr	r3, [r7, #32]
 801a17c:	3301      	adds	r3, #1
 801a17e:	623b      	str	r3, [r7, #32]
      pDest++;
 801a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a182:	3301      	adds	r3, #1
 801a184:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801a186:	8bfb      	ldrh	r3, [r7, #30]
 801a188:	3b01      	subs	r3, #1
 801a18a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801a18c:	8bfb      	ldrh	r3, [r7, #30]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d1ea      	bne.n	801a168 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a194:	4618      	mov	r0, r3
 801a196:	372c      	adds	r7, #44	; 0x2c
 801a198:	46bd      	mov	sp, r7
 801a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a19e:	4770      	bx	lr

0801a1a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801a1a0:	b480      	push	{r7}
 801a1a2:	b085      	sub	sp, #20
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
 801a1a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801a1ae:	683b      	ldr	r3, [r7, #0]
 801a1b0:	781b      	ldrb	r3, [r3, #0]
 801a1b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801a1b4:	683b      	ldr	r3, [r7, #0]
 801a1b6:	785b      	ldrb	r3, [r3, #1]
 801a1b8:	2b01      	cmp	r3, #1
 801a1ba:	d12c      	bne.n	801a216 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801a1bc:	68bb      	ldr	r3, [r7, #8]
 801a1be:	015a      	lsls	r2, r3, #5
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	4413      	add	r3, r2
 801a1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	db12      	blt.n	801a1f4 <USB_EPSetStall+0x54>
 801a1ce:	68bb      	ldr	r3, [r7, #8]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d00f      	beq.n	801a1f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801a1d4:	68bb      	ldr	r3, [r7, #8]
 801a1d6:	015a      	lsls	r2, r3, #5
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	4413      	add	r3, r2
 801a1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	68ba      	ldr	r2, [r7, #8]
 801a1e4:	0151      	lsls	r1, r2, #5
 801a1e6:	68fa      	ldr	r2, [r7, #12]
 801a1e8:	440a      	add	r2, r1
 801a1ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a1ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801a1f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801a1f4:	68bb      	ldr	r3, [r7, #8]
 801a1f6:	015a      	lsls	r2, r3, #5
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	4413      	add	r3, r2
 801a1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	68ba      	ldr	r2, [r7, #8]
 801a204:	0151      	lsls	r1, r2, #5
 801a206:	68fa      	ldr	r2, [r7, #12]
 801a208:	440a      	add	r2, r1
 801a20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a20e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801a212:	6013      	str	r3, [r2, #0]
 801a214:	e02b      	b.n	801a26e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801a216:	68bb      	ldr	r3, [r7, #8]
 801a218:	015a      	lsls	r2, r3, #5
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	4413      	add	r3, r2
 801a21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	2b00      	cmp	r3, #0
 801a226:	db12      	blt.n	801a24e <USB_EPSetStall+0xae>
 801a228:	68bb      	ldr	r3, [r7, #8]
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d00f      	beq.n	801a24e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801a22e:	68bb      	ldr	r3, [r7, #8]
 801a230:	015a      	lsls	r2, r3, #5
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	4413      	add	r3, r2
 801a236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	68ba      	ldr	r2, [r7, #8]
 801a23e:	0151      	lsls	r1, r2, #5
 801a240:	68fa      	ldr	r2, [r7, #12]
 801a242:	440a      	add	r2, r1
 801a244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a248:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801a24c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801a24e:	68bb      	ldr	r3, [r7, #8]
 801a250:	015a      	lsls	r2, r3, #5
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	4413      	add	r3, r2
 801a256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	68ba      	ldr	r2, [r7, #8]
 801a25e:	0151      	lsls	r1, r2, #5
 801a260:	68fa      	ldr	r2, [r7, #12]
 801a262:	440a      	add	r2, r1
 801a264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801a26c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801a26e:	2300      	movs	r3, #0
}
 801a270:	4618      	mov	r0, r3
 801a272:	3714      	adds	r7, #20
 801a274:	46bd      	mov	sp, r7
 801a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a27a:	4770      	bx	lr

0801a27c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801a27c:	b480      	push	{r7}
 801a27e:	b085      	sub	sp, #20
 801a280:	af00      	add	r7, sp, #0
 801a282:	6078      	str	r0, [r7, #4]
 801a284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801a28a:	683b      	ldr	r3, [r7, #0]
 801a28c:	781b      	ldrb	r3, [r3, #0]
 801a28e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801a290:	683b      	ldr	r3, [r7, #0]
 801a292:	785b      	ldrb	r3, [r3, #1]
 801a294:	2b01      	cmp	r3, #1
 801a296:	d128      	bne.n	801a2ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a298:	68bb      	ldr	r3, [r7, #8]
 801a29a:	015a      	lsls	r2, r3, #5
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	4413      	add	r3, r2
 801a2a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	68ba      	ldr	r2, [r7, #8]
 801a2a8:	0151      	lsls	r1, r2, #5
 801a2aa:	68fa      	ldr	r2, [r7, #12]
 801a2ac:	440a      	add	r2, r1
 801a2ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a2b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a2b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801a2b8:	683b      	ldr	r3, [r7, #0]
 801a2ba:	791b      	ldrb	r3, [r3, #4]
 801a2bc:	2b03      	cmp	r3, #3
 801a2be:	d003      	beq.n	801a2c8 <USB_EPClearStall+0x4c>
 801a2c0:	683b      	ldr	r3, [r7, #0]
 801a2c2:	791b      	ldrb	r3, [r3, #4]
 801a2c4:	2b02      	cmp	r3, #2
 801a2c6:	d138      	bne.n	801a33a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801a2c8:	68bb      	ldr	r3, [r7, #8]
 801a2ca:	015a      	lsls	r2, r3, #5
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	4413      	add	r3, r2
 801a2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	68ba      	ldr	r2, [r7, #8]
 801a2d8:	0151      	lsls	r1, r2, #5
 801a2da:	68fa      	ldr	r2, [r7, #12]
 801a2dc:	440a      	add	r2, r1
 801a2de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a2e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a2e6:	6013      	str	r3, [r2, #0]
 801a2e8:	e027      	b.n	801a33a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a2ea:	68bb      	ldr	r3, [r7, #8]
 801a2ec:	015a      	lsls	r2, r3, #5
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	4413      	add	r3, r2
 801a2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	68ba      	ldr	r2, [r7, #8]
 801a2fa:	0151      	lsls	r1, r2, #5
 801a2fc:	68fa      	ldr	r2, [r7, #12]
 801a2fe:	440a      	add	r2, r1
 801a300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a304:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a308:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801a30a:	683b      	ldr	r3, [r7, #0]
 801a30c:	791b      	ldrb	r3, [r3, #4]
 801a30e:	2b03      	cmp	r3, #3
 801a310:	d003      	beq.n	801a31a <USB_EPClearStall+0x9e>
 801a312:	683b      	ldr	r3, [r7, #0]
 801a314:	791b      	ldrb	r3, [r3, #4]
 801a316:	2b02      	cmp	r3, #2
 801a318:	d10f      	bne.n	801a33a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801a31a:	68bb      	ldr	r3, [r7, #8]
 801a31c:	015a      	lsls	r2, r3, #5
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	4413      	add	r3, r2
 801a322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	68ba      	ldr	r2, [r7, #8]
 801a32a:	0151      	lsls	r1, r2, #5
 801a32c:	68fa      	ldr	r2, [r7, #12]
 801a32e:	440a      	add	r2, r1
 801a330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a338:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801a33a:	2300      	movs	r3, #0
}
 801a33c:	4618      	mov	r0, r3
 801a33e:	3714      	adds	r7, #20
 801a340:	46bd      	mov	sp, r7
 801a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a346:	4770      	bx	lr

0801a348 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801a348:	b480      	push	{r7}
 801a34a:	b085      	sub	sp, #20
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	6078      	str	r0, [r7, #4]
 801a350:	460b      	mov	r3, r1
 801a352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801a358:	68fb      	ldr	r3, [r7, #12]
 801a35a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	68fa      	ldr	r2, [r7, #12]
 801a362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a366:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a36a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a372:	681a      	ldr	r2, [r3, #0]
 801a374:	78fb      	ldrb	r3, [r7, #3]
 801a376:	011b      	lsls	r3, r3, #4
 801a378:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801a37c:	68f9      	ldr	r1, [r7, #12]
 801a37e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a382:	4313      	orrs	r3, r2
 801a384:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801a386:	2300      	movs	r3, #0
}
 801a388:	4618      	mov	r0, r3
 801a38a:	3714      	adds	r7, #20
 801a38c:	46bd      	mov	sp, r7
 801a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a392:	4770      	bx	lr

0801a394 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801a394:	b480      	push	{r7}
 801a396:	b085      	sub	sp, #20
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801a3a0:	68fb      	ldr	r3, [r7, #12]
 801a3a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	68fa      	ldr	r2, [r7, #12]
 801a3aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a3ae:	f023 0303 	bic.w	r3, r3, #3
 801a3b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3ba:	685b      	ldr	r3, [r3, #4]
 801a3bc:	68fa      	ldr	r2, [r7, #12]
 801a3be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a3c2:	f023 0302 	bic.w	r3, r3, #2
 801a3c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a3c8:	2300      	movs	r3, #0
}
 801a3ca:	4618      	mov	r0, r3
 801a3cc:	3714      	adds	r7, #20
 801a3ce:	46bd      	mov	sp, r7
 801a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3d4:	4770      	bx	lr

0801a3d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801a3d6:	b480      	push	{r7}
 801a3d8:	b085      	sub	sp, #20
 801a3da:	af00      	add	r7, sp, #0
 801a3dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	68fa      	ldr	r2, [r7, #12]
 801a3ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a3f0:	f023 0303 	bic.w	r3, r3, #3
 801a3f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3fc:	685b      	ldr	r3, [r3, #4]
 801a3fe:	68fa      	ldr	r2, [r7, #12]
 801a400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a404:	f043 0302 	orr.w	r3, r3, #2
 801a408:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a40a:	2300      	movs	r3, #0
}
 801a40c:	4618      	mov	r0, r3
 801a40e:	3714      	adds	r7, #20
 801a410:	46bd      	mov	sp, r7
 801a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a416:	4770      	bx	lr

0801a418 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801a418:	b480      	push	{r7}
 801a41a:	b085      	sub	sp, #20
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	695b      	ldr	r3, [r3, #20]
 801a424:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	699b      	ldr	r3, [r3, #24]
 801a42a:	68fa      	ldr	r2, [r7, #12]
 801a42c:	4013      	ands	r3, r2
 801a42e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801a430:	68fb      	ldr	r3, [r7, #12]
}
 801a432:	4618      	mov	r0, r3
 801a434:	3714      	adds	r7, #20
 801a436:	46bd      	mov	sp, r7
 801a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a43c:	4770      	bx	lr

0801a43e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801a43e:	b480      	push	{r7}
 801a440:	b085      	sub	sp, #20
 801a442:	af00      	add	r7, sp, #0
 801a444:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a450:	699b      	ldr	r3, [r3, #24]
 801a452:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a45a:	69db      	ldr	r3, [r3, #28]
 801a45c:	68ba      	ldr	r2, [r7, #8]
 801a45e:	4013      	ands	r3, r2
 801a460:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801a462:	68bb      	ldr	r3, [r7, #8]
 801a464:	0c1b      	lsrs	r3, r3, #16
}
 801a466:	4618      	mov	r0, r3
 801a468:	3714      	adds	r7, #20
 801a46a:	46bd      	mov	sp, r7
 801a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a470:	4770      	bx	lr

0801a472 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801a472:	b480      	push	{r7}
 801a474:	b085      	sub	sp, #20
 801a476:	af00      	add	r7, sp, #0
 801a478:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a484:	699b      	ldr	r3, [r3, #24]
 801a486:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a48e:	69db      	ldr	r3, [r3, #28]
 801a490:	68ba      	ldr	r2, [r7, #8]
 801a492:	4013      	ands	r3, r2
 801a494:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801a496:	68bb      	ldr	r3, [r7, #8]
 801a498:	b29b      	uxth	r3, r3
}
 801a49a:	4618      	mov	r0, r3
 801a49c:	3714      	adds	r7, #20
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a4:	4770      	bx	lr

0801a4a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801a4a6:	b480      	push	{r7}
 801a4a8:	b085      	sub	sp, #20
 801a4aa:	af00      	add	r7, sp, #0
 801a4ac:	6078      	str	r0, [r7, #4]
 801a4ae:	460b      	mov	r3, r1
 801a4b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801a4b6:	78fb      	ldrb	r3, [r7, #3]
 801a4b8:	015a      	lsls	r2, r3, #5
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	4413      	add	r3, r2
 801a4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a4c2:	689b      	ldr	r3, [r3, #8]
 801a4c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4cc:	695b      	ldr	r3, [r3, #20]
 801a4ce:	68ba      	ldr	r2, [r7, #8]
 801a4d0:	4013      	ands	r3, r2
 801a4d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801a4d4:	68bb      	ldr	r3, [r7, #8]
}
 801a4d6:	4618      	mov	r0, r3
 801a4d8:	3714      	adds	r7, #20
 801a4da:	46bd      	mov	sp, r7
 801a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e0:	4770      	bx	lr

0801a4e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801a4e2:	b480      	push	{r7}
 801a4e4:	b087      	sub	sp, #28
 801a4e6:	af00      	add	r7, sp, #0
 801a4e8:	6078      	str	r0, [r7, #4]
 801a4ea:	460b      	mov	r3, r1
 801a4ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801a4f2:	697b      	ldr	r3, [r7, #20]
 801a4f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4f8:	691b      	ldr	r3, [r3, #16]
 801a4fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801a4fc:	697b      	ldr	r3, [r7, #20]
 801a4fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a504:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801a506:	78fb      	ldrb	r3, [r7, #3]
 801a508:	f003 030f 	and.w	r3, r3, #15
 801a50c:	68fa      	ldr	r2, [r7, #12]
 801a50e:	fa22 f303 	lsr.w	r3, r2, r3
 801a512:	01db      	lsls	r3, r3, #7
 801a514:	b2db      	uxtb	r3, r3
 801a516:	693a      	ldr	r2, [r7, #16]
 801a518:	4313      	orrs	r3, r2
 801a51a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801a51c:	78fb      	ldrb	r3, [r7, #3]
 801a51e:	015a      	lsls	r2, r3, #5
 801a520:	697b      	ldr	r3, [r7, #20]
 801a522:	4413      	add	r3, r2
 801a524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a528:	689b      	ldr	r3, [r3, #8]
 801a52a:	693a      	ldr	r2, [r7, #16]
 801a52c:	4013      	ands	r3, r2
 801a52e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801a530:	68bb      	ldr	r3, [r7, #8]
}
 801a532:	4618      	mov	r0, r3
 801a534:	371c      	adds	r7, #28
 801a536:	46bd      	mov	sp, r7
 801a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a53c:	4770      	bx	lr

0801a53e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801a53e:	b480      	push	{r7}
 801a540:	b083      	sub	sp, #12
 801a542:	af00      	add	r7, sp, #0
 801a544:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	695b      	ldr	r3, [r3, #20]
 801a54a:	f003 0301 	and.w	r3, r3, #1
}
 801a54e:	4618      	mov	r0, r3
 801a550:	370c      	adds	r7, #12
 801a552:	46bd      	mov	sp, r7
 801a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a558:	4770      	bx	lr
	...

0801a55c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801a55c:	b480      	push	{r7}
 801a55e:	b085      	sub	sp, #20
 801a560:	af00      	add	r7, sp, #0
 801a562:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a56e:	681a      	ldr	r2, [r3, #0]
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a576:	4619      	mov	r1, r3
 801a578:	4b09      	ldr	r3, [pc, #36]	; (801a5a0 <USB_ActivateSetup+0x44>)
 801a57a:	4013      	ands	r3, r2
 801a57c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a584:	685b      	ldr	r3, [r3, #4]
 801a586:	68fa      	ldr	r2, [r7, #12]
 801a588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a58c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a590:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a592:	2300      	movs	r3, #0
}
 801a594:	4618      	mov	r0, r3
 801a596:	3714      	adds	r7, #20
 801a598:	46bd      	mov	sp, r7
 801a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a59e:	4770      	bx	lr
 801a5a0:	fffff800 	.word	0xfffff800

0801a5a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801a5a4:	b480      	push	{r7}
 801a5a6:	b087      	sub	sp, #28
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	60f8      	str	r0, [r7, #12]
 801a5ac:	460b      	mov	r3, r1
 801a5ae:	607a      	str	r2, [r7, #4]
 801a5b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a5b2:	68fb      	ldr	r3, [r7, #12]
 801a5b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	333c      	adds	r3, #60	; 0x3c
 801a5ba:	3304      	adds	r3, #4
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801a5c0:	693b      	ldr	r3, [r7, #16]
 801a5c2:	4a26      	ldr	r2, [pc, #152]	; (801a65c <USB_EP0_OutStart+0xb8>)
 801a5c4:	4293      	cmp	r3, r2
 801a5c6:	d90a      	bls.n	801a5de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801a5c8:	697b      	ldr	r3, [r7, #20]
 801a5ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a5d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a5d8:	d101      	bne.n	801a5de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801a5da:	2300      	movs	r3, #0
 801a5dc:	e037      	b.n	801a64e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801a5de:	697b      	ldr	r3, [r7, #20]
 801a5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a5e4:	461a      	mov	r2, r3
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801a5ea:	697b      	ldr	r3, [r7, #20]
 801a5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a5f0:	691b      	ldr	r3, [r3, #16]
 801a5f2:	697a      	ldr	r2, [r7, #20]
 801a5f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a5f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a5fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801a5fe:	697b      	ldr	r3, [r7, #20]
 801a600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a604:	691b      	ldr	r3, [r3, #16]
 801a606:	697a      	ldr	r2, [r7, #20]
 801a608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a60c:	f043 0318 	orr.w	r3, r3, #24
 801a610:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801a612:	697b      	ldr	r3, [r7, #20]
 801a614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a618:	691b      	ldr	r3, [r3, #16]
 801a61a:	697a      	ldr	r2, [r7, #20]
 801a61c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a620:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801a624:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801a626:	7afb      	ldrb	r3, [r7, #11]
 801a628:	2b01      	cmp	r3, #1
 801a62a:	d10f      	bne.n	801a64c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801a62c:	697b      	ldr	r3, [r7, #20]
 801a62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a632:	461a      	mov	r2, r3
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801a638:	697b      	ldr	r3, [r7, #20]
 801a63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	697a      	ldr	r2, [r7, #20]
 801a642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a646:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801a64a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801a64c:	2300      	movs	r3, #0
}
 801a64e:	4618      	mov	r0, r3
 801a650:	371c      	adds	r7, #28
 801a652:	46bd      	mov	sp, r7
 801a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a658:	4770      	bx	lr
 801a65a:	bf00      	nop
 801a65c:	4f54300a 	.word	0x4f54300a

0801a660 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801a660:	b480      	push	{r7}
 801a662:	b085      	sub	sp, #20
 801a664:	af00      	add	r7, sp, #0
 801a666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a668:	2300      	movs	r3, #0
 801a66a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801a66c:	68fb      	ldr	r3, [r7, #12]
 801a66e:	3301      	adds	r3, #1
 801a670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	4a13      	ldr	r2, [pc, #76]	; (801a6c4 <USB_CoreReset+0x64>)
 801a676:	4293      	cmp	r3, r2
 801a678:	d901      	bls.n	801a67e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801a67a:	2303      	movs	r3, #3
 801a67c:	e01b      	b.n	801a6b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	691b      	ldr	r3, [r3, #16]
 801a682:	2b00      	cmp	r3, #0
 801a684:	daf2      	bge.n	801a66c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801a686:	2300      	movs	r3, #0
 801a688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	691b      	ldr	r3, [r3, #16]
 801a68e:	f043 0201 	orr.w	r2, r3, #1
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	3301      	adds	r3, #1
 801a69a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	4a09      	ldr	r2, [pc, #36]	; (801a6c4 <USB_CoreReset+0x64>)
 801a6a0:	4293      	cmp	r3, r2
 801a6a2:	d901      	bls.n	801a6a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801a6a4:	2303      	movs	r3, #3
 801a6a6:	e006      	b.n	801a6b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	691b      	ldr	r3, [r3, #16]
 801a6ac:	f003 0301 	and.w	r3, r3, #1
 801a6b0:	2b01      	cmp	r3, #1
 801a6b2:	d0f0      	beq.n	801a696 <USB_CoreReset+0x36>

  return HAL_OK;
 801a6b4:	2300      	movs	r3, #0
}
 801a6b6:	4618      	mov	r0, r3
 801a6b8:	3714      	adds	r7, #20
 801a6ba:	46bd      	mov	sp, r7
 801a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6c0:	4770      	bx	lr
 801a6c2:	bf00      	nop
 801a6c4:	00030d40 	.word	0x00030d40

0801a6c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a6c8:	b580      	push	{r7, lr}
 801a6ca:	b084      	sub	sp, #16
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	6078      	str	r0, [r7, #4]
 801a6d0:	460b      	mov	r3, r1
 801a6d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801a6d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801a6d8:	f002 fc54 	bl	801cf84 <USBD_static_malloc>
 801a6dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d109      	bne.n	801a6f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	32b0      	adds	r2, #176	; 0xb0
 801a6ee:	2100      	movs	r1, #0
 801a6f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801a6f4:	2302      	movs	r3, #2
 801a6f6:	e0d4      	b.n	801a8a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801a6f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801a6fc:	2100      	movs	r1, #0
 801a6fe:	68f8      	ldr	r0, [r7, #12]
 801a700:	f002 fd42 	bl	801d188 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	32b0      	adds	r2, #176	; 0xb0
 801a70e:	68f9      	ldr	r1, [r7, #12]
 801a710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	32b0      	adds	r2, #176	; 0xb0
 801a71e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	7c1b      	ldrb	r3, [r3, #16]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d138      	bne.n	801a7a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801a730:	4b5e      	ldr	r3, [pc, #376]	; (801a8ac <USBD_CDC_Init+0x1e4>)
 801a732:	7819      	ldrb	r1, [r3, #0]
 801a734:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a738:	2202      	movs	r2, #2
 801a73a:	6878      	ldr	r0, [r7, #4]
 801a73c:	f002 faff 	bl	801cd3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801a740:	4b5a      	ldr	r3, [pc, #360]	; (801a8ac <USBD_CDC_Init+0x1e4>)
 801a742:	781b      	ldrb	r3, [r3, #0]
 801a744:	f003 020f 	and.w	r2, r3, #15
 801a748:	6879      	ldr	r1, [r7, #4]
 801a74a:	4613      	mov	r3, r2
 801a74c:	009b      	lsls	r3, r3, #2
 801a74e:	4413      	add	r3, r2
 801a750:	009b      	lsls	r3, r3, #2
 801a752:	440b      	add	r3, r1
 801a754:	3324      	adds	r3, #36	; 0x24
 801a756:	2201      	movs	r2, #1
 801a758:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801a75a:	4b55      	ldr	r3, [pc, #340]	; (801a8b0 <USBD_CDC_Init+0x1e8>)
 801a75c:	7819      	ldrb	r1, [r3, #0]
 801a75e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a762:	2202      	movs	r2, #2
 801a764:	6878      	ldr	r0, [r7, #4]
 801a766:	f002 faea 	bl	801cd3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801a76a:	4b51      	ldr	r3, [pc, #324]	; (801a8b0 <USBD_CDC_Init+0x1e8>)
 801a76c:	781b      	ldrb	r3, [r3, #0]
 801a76e:	f003 020f 	and.w	r2, r3, #15
 801a772:	6879      	ldr	r1, [r7, #4]
 801a774:	4613      	mov	r3, r2
 801a776:	009b      	lsls	r3, r3, #2
 801a778:	4413      	add	r3, r2
 801a77a:	009b      	lsls	r3, r3, #2
 801a77c:	440b      	add	r3, r1
 801a77e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a782:	2201      	movs	r2, #1
 801a784:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801a786:	4b4b      	ldr	r3, [pc, #300]	; (801a8b4 <USBD_CDC_Init+0x1ec>)
 801a788:	781b      	ldrb	r3, [r3, #0]
 801a78a:	f003 020f 	and.w	r2, r3, #15
 801a78e:	6879      	ldr	r1, [r7, #4]
 801a790:	4613      	mov	r3, r2
 801a792:	009b      	lsls	r3, r3, #2
 801a794:	4413      	add	r3, r2
 801a796:	009b      	lsls	r3, r3, #2
 801a798:	440b      	add	r3, r1
 801a79a:	3326      	adds	r3, #38	; 0x26
 801a79c:	2210      	movs	r2, #16
 801a79e:	801a      	strh	r2, [r3, #0]
 801a7a0:	e035      	b.n	801a80e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801a7a2:	4b42      	ldr	r3, [pc, #264]	; (801a8ac <USBD_CDC_Init+0x1e4>)
 801a7a4:	7819      	ldrb	r1, [r3, #0]
 801a7a6:	2340      	movs	r3, #64	; 0x40
 801a7a8:	2202      	movs	r2, #2
 801a7aa:	6878      	ldr	r0, [r7, #4]
 801a7ac:	f002 fac7 	bl	801cd3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801a7b0:	4b3e      	ldr	r3, [pc, #248]	; (801a8ac <USBD_CDC_Init+0x1e4>)
 801a7b2:	781b      	ldrb	r3, [r3, #0]
 801a7b4:	f003 020f 	and.w	r2, r3, #15
 801a7b8:	6879      	ldr	r1, [r7, #4]
 801a7ba:	4613      	mov	r3, r2
 801a7bc:	009b      	lsls	r3, r3, #2
 801a7be:	4413      	add	r3, r2
 801a7c0:	009b      	lsls	r3, r3, #2
 801a7c2:	440b      	add	r3, r1
 801a7c4:	3324      	adds	r3, #36	; 0x24
 801a7c6:	2201      	movs	r2, #1
 801a7c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801a7ca:	4b39      	ldr	r3, [pc, #228]	; (801a8b0 <USBD_CDC_Init+0x1e8>)
 801a7cc:	7819      	ldrb	r1, [r3, #0]
 801a7ce:	2340      	movs	r3, #64	; 0x40
 801a7d0:	2202      	movs	r2, #2
 801a7d2:	6878      	ldr	r0, [r7, #4]
 801a7d4:	f002 fab3 	bl	801cd3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801a7d8:	4b35      	ldr	r3, [pc, #212]	; (801a8b0 <USBD_CDC_Init+0x1e8>)
 801a7da:	781b      	ldrb	r3, [r3, #0]
 801a7dc:	f003 020f 	and.w	r2, r3, #15
 801a7e0:	6879      	ldr	r1, [r7, #4]
 801a7e2:	4613      	mov	r3, r2
 801a7e4:	009b      	lsls	r3, r3, #2
 801a7e6:	4413      	add	r3, r2
 801a7e8:	009b      	lsls	r3, r3, #2
 801a7ea:	440b      	add	r3, r1
 801a7ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a7f0:	2201      	movs	r2, #1
 801a7f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801a7f4:	4b2f      	ldr	r3, [pc, #188]	; (801a8b4 <USBD_CDC_Init+0x1ec>)
 801a7f6:	781b      	ldrb	r3, [r3, #0]
 801a7f8:	f003 020f 	and.w	r2, r3, #15
 801a7fc:	6879      	ldr	r1, [r7, #4]
 801a7fe:	4613      	mov	r3, r2
 801a800:	009b      	lsls	r3, r3, #2
 801a802:	4413      	add	r3, r2
 801a804:	009b      	lsls	r3, r3, #2
 801a806:	440b      	add	r3, r1
 801a808:	3326      	adds	r3, #38	; 0x26
 801a80a:	2210      	movs	r2, #16
 801a80c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801a80e:	4b29      	ldr	r3, [pc, #164]	; (801a8b4 <USBD_CDC_Init+0x1ec>)
 801a810:	7819      	ldrb	r1, [r3, #0]
 801a812:	2308      	movs	r3, #8
 801a814:	2203      	movs	r2, #3
 801a816:	6878      	ldr	r0, [r7, #4]
 801a818:	f002 fa91 	bl	801cd3e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801a81c:	4b25      	ldr	r3, [pc, #148]	; (801a8b4 <USBD_CDC_Init+0x1ec>)
 801a81e:	781b      	ldrb	r3, [r3, #0]
 801a820:	f003 020f 	and.w	r2, r3, #15
 801a824:	6879      	ldr	r1, [r7, #4]
 801a826:	4613      	mov	r3, r2
 801a828:	009b      	lsls	r3, r3, #2
 801a82a:	4413      	add	r3, r2
 801a82c:	009b      	lsls	r3, r3, #2
 801a82e:	440b      	add	r3, r1
 801a830:	3324      	adds	r3, #36	; 0x24
 801a832:	2201      	movs	r2, #1
 801a834:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	2200      	movs	r2, #0
 801a83a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a844:	687a      	ldr	r2, [r7, #4]
 801a846:	33b0      	adds	r3, #176	; 0xb0
 801a848:	009b      	lsls	r3, r3, #2
 801a84a:	4413      	add	r3, r2
 801a84c:	685b      	ldr	r3, [r3, #4]
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	2200      	movs	r2, #0
 801a856:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	2200      	movs	r2, #0
 801a85e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d101      	bne.n	801a870 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801a86c:	2302      	movs	r3, #2
 801a86e:	e018      	b.n	801a8a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	7c1b      	ldrb	r3, [r3, #16]
 801a874:	2b00      	cmp	r3, #0
 801a876:	d10a      	bne.n	801a88e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801a878:	4b0d      	ldr	r3, [pc, #52]	; (801a8b0 <USBD_CDC_Init+0x1e8>)
 801a87a:	7819      	ldrb	r1, [r3, #0]
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a882:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a886:	6878      	ldr	r0, [r7, #4]
 801a888:	f002 fb48 	bl	801cf1c <USBD_LL_PrepareReceive>
 801a88c:	e008      	b.n	801a8a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801a88e:	4b08      	ldr	r3, [pc, #32]	; (801a8b0 <USBD_CDC_Init+0x1e8>)
 801a890:	7819      	ldrb	r1, [r3, #0]
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a898:	2340      	movs	r3, #64	; 0x40
 801a89a:	6878      	ldr	r0, [r7, #4]
 801a89c:	f002 fb3e 	bl	801cf1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801a8a0:	2300      	movs	r3, #0
}
 801a8a2:	4618      	mov	r0, r3
 801a8a4:	3710      	adds	r7, #16
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	bd80      	pop	{r7, pc}
 801a8aa:	bf00      	nop
 801a8ac:	24000097 	.word	0x24000097
 801a8b0:	24000098 	.word	0x24000098
 801a8b4:	24000099 	.word	0x24000099

0801a8b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b082      	sub	sp, #8
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	6078      	str	r0, [r7, #4]
 801a8c0:	460b      	mov	r3, r1
 801a8c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801a8c4:	4b3a      	ldr	r3, [pc, #232]	; (801a9b0 <USBD_CDC_DeInit+0xf8>)
 801a8c6:	781b      	ldrb	r3, [r3, #0]
 801a8c8:	4619      	mov	r1, r3
 801a8ca:	6878      	ldr	r0, [r7, #4]
 801a8cc:	f002 fa5d 	bl	801cd8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801a8d0:	4b37      	ldr	r3, [pc, #220]	; (801a9b0 <USBD_CDC_DeInit+0xf8>)
 801a8d2:	781b      	ldrb	r3, [r3, #0]
 801a8d4:	f003 020f 	and.w	r2, r3, #15
 801a8d8:	6879      	ldr	r1, [r7, #4]
 801a8da:	4613      	mov	r3, r2
 801a8dc:	009b      	lsls	r3, r3, #2
 801a8de:	4413      	add	r3, r2
 801a8e0:	009b      	lsls	r3, r3, #2
 801a8e2:	440b      	add	r3, r1
 801a8e4:	3324      	adds	r3, #36	; 0x24
 801a8e6:	2200      	movs	r2, #0
 801a8e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801a8ea:	4b32      	ldr	r3, [pc, #200]	; (801a9b4 <USBD_CDC_DeInit+0xfc>)
 801a8ec:	781b      	ldrb	r3, [r3, #0]
 801a8ee:	4619      	mov	r1, r3
 801a8f0:	6878      	ldr	r0, [r7, #4]
 801a8f2:	f002 fa4a 	bl	801cd8a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801a8f6:	4b2f      	ldr	r3, [pc, #188]	; (801a9b4 <USBD_CDC_DeInit+0xfc>)
 801a8f8:	781b      	ldrb	r3, [r3, #0]
 801a8fa:	f003 020f 	and.w	r2, r3, #15
 801a8fe:	6879      	ldr	r1, [r7, #4]
 801a900:	4613      	mov	r3, r2
 801a902:	009b      	lsls	r3, r3, #2
 801a904:	4413      	add	r3, r2
 801a906:	009b      	lsls	r3, r3, #2
 801a908:	440b      	add	r3, r1
 801a90a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a90e:	2200      	movs	r2, #0
 801a910:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801a912:	4b29      	ldr	r3, [pc, #164]	; (801a9b8 <USBD_CDC_DeInit+0x100>)
 801a914:	781b      	ldrb	r3, [r3, #0]
 801a916:	4619      	mov	r1, r3
 801a918:	6878      	ldr	r0, [r7, #4]
 801a91a:	f002 fa36 	bl	801cd8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801a91e:	4b26      	ldr	r3, [pc, #152]	; (801a9b8 <USBD_CDC_DeInit+0x100>)
 801a920:	781b      	ldrb	r3, [r3, #0]
 801a922:	f003 020f 	and.w	r2, r3, #15
 801a926:	6879      	ldr	r1, [r7, #4]
 801a928:	4613      	mov	r3, r2
 801a92a:	009b      	lsls	r3, r3, #2
 801a92c:	4413      	add	r3, r2
 801a92e:	009b      	lsls	r3, r3, #2
 801a930:	440b      	add	r3, r1
 801a932:	3324      	adds	r3, #36	; 0x24
 801a934:	2200      	movs	r2, #0
 801a936:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801a938:	4b1f      	ldr	r3, [pc, #124]	; (801a9b8 <USBD_CDC_DeInit+0x100>)
 801a93a:	781b      	ldrb	r3, [r3, #0]
 801a93c:	f003 020f 	and.w	r2, r3, #15
 801a940:	6879      	ldr	r1, [r7, #4]
 801a942:	4613      	mov	r3, r2
 801a944:	009b      	lsls	r3, r3, #2
 801a946:	4413      	add	r3, r2
 801a948:	009b      	lsls	r3, r3, #2
 801a94a:	440b      	add	r3, r1
 801a94c:	3326      	adds	r3, #38	; 0x26
 801a94e:	2200      	movs	r2, #0
 801a950:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	32b0      	adds	r2, #176	; 0xb0
 801a95c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d01f      	beq.n	801a9a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a96a:	687a      	ldr	r2, [r7, #4]
 801a96c:	33b0      	adds	r3, #176	; 0xb0
 801a96e:	009b      	lsls	r3, r3, #2
 801a970:	4413      	add	r3, r2
 801a972:	685b      	ldr	r3, [r3, #4]
 801a974:	685b      	ldr	r3, [r3, #4]
 801a976:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	32b0      	adds	r2, #176	; 0xb0
 801a982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a986:	4618      	mov	r0, r3
 801a988:	f002 fb0a 	bl	801cfa0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	32b0      	adds	r2, #176	; 0xb0
 801a996:	2100      	movs	r1, #0
 801a998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	2200      	movs	r2, #0
 801a9a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801a9a4:	2300      	movs	r3, #0
}
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	3708      	adds	r7, #8
 801a9aa:	46bd      	mov	sp, r7
 801a9ac:	bd80      	pop	{r7, pc}
 801a9ae:	bf00      	nop
 801a9b0:	24000097 	.word	0x24000097
 801a9b4:	24000098 	.word	0x24000098
 801a9b8:	24000099 	.word	0x24000099

0801a9bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801a9bc:	b580      	push	{r7, lr}
 801a9be:	b086      	sub	sp, #24
 801a9c0:	af00      	add	r7, sp, #0
 801a9c2:	6078      	str	r0, [r7, #4]
 801a9c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	32b0      	adds	r2, #176	; 0xb0
 801a9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a9d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801a9d6:	2300      	movs	r3, #0
 801a9d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801a9da:	2300      	movs	r3, #0
 801a9dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801a9de:	2300      	movs	r3, #0
 801a9e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801a9e2:	693b      	ldr	r3, [r7, #16]
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d101      	bne.n	801a9ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801a9e8:	2303      	movs	r3, #3
 801a9ea:	e0bf      	b.n	801ab6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a9ec:	683b      	ldr	r3, [r7, #0]
 801a9ee:	781b      	ldrb	r3, [r3, #0]
 801a9f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d050      	beq.n	801aa9a <USBD_CDC_Setup+0xde>
 801a9f8:	2b20      	cmp	r3, #32
 801a9fa:	f040 80af 	bne.w	801ab5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801a9fe:	683b      	ldr	r3, [r7, #0]
 801aa00:	88db      	ldrh	r3, [r3, #6]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d03a      	beq.n	801aa7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801aa06:	683b      	ldr	r3, [r7, #0]
 801aa08:	781b      	ldrb	r3, [r3, #0]
 801aa0a:	b25b      	sxtb	r3, r3
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	da1b      	bge.n	801aa48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801aa16:	687a      	ldr	r2, [r7, #4]
 801aa18:	33b0      	adds	r3, #176	; 0xb0
 801aa1a:	009b      	lsls	r3, r3, #2
 801aa1c:	4413      	add	r3, r2
 801aa1e:	685b      	ldr	r3, [r3, #4]
 801aa20:	689b      	ldr	r3, [r3, #8]
 801aa22:	683a      	ldr	r2, [r7, #0]
 801aa24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801aa26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801aa28:	683a      	ldr	r2, [r7, #0]
 801aa2a:	88d2      	ldrh	r2, [r2, #6]
 801aa2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801aa2e:	683b      	ldr	r3, [r7, #0]
 801aa30:	88db      	ldrh	r3, [r3, #6]
 801aa32:	2b07      	cmp	r3, #7
 801aa34:	bf28      	it	cs
 801aa36:	2307      	movcs	r3, #7
 801aa38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801aa3a:	693b      	ldr	r3, [r7, #16]
 801aa3c:	89fa      	ldrh	r2, [r7, #14]
 801aa3e:	4619      	mov	r1, r3
 801aa40:	6878      	ldr	r0, [r7, #4]
 801aa42:	f001 fd43 	bl	801c4cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801aa46:	e090      	b.n	801ab6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801aa48:	683b      	ldr	r3, [r7, #0]
 801aa4a:	785a      	ldrb	r2, [r3, #1]
 801aa4c:	693b      	ldr	r3, [r7, #16]
 801aa4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801aa52:	683b      	ldr	r3, [r7, #0]
 801aa54:	88db      	ldrh	r3, [r3, #6]
 801aa56:	2b3f      	cmp	r3, #63	; 0x3f
 801aa58:	d803      	bhi.n	801aa62 <USBD_CDC_Setup+0xa6>
 801aa5a:	683b      	ldr	r3, [r7, #0]
 801aa5c:	88db      	ldrh	r3, [r3, #6]
 801aa5e:	b2da      	uxtb	r2, r3
 801aa60:	e000      	b.n	801aa64 <USBD_CDC_Setup+0xa8>
 801aa62:	2240      	movs	r2, #64	; 0x40
 801aa64:	693b      	ldr	r3, [r7, #16]
 801aa66:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801aa6a:	6939      	ldr	r1, [r7, #16]
 801aa6c:	693b      	ldr	r3, [r7, #16]
 801aa6e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801aa72:	461a      	mov	r2, r3
 801aa74:	6878      	ldr	r0, [r7, #4]
 801aa76:	f001 fd55 	bl	801c524 <USBD_CtlPrepareRx>
      break;
 801aa7a:	e076      	b.n	801ab6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801aa82:	687a      	ldr	r2, [r7, #4]
 801aa84:	33b0      	adds	r3, #176	; 0xb0
 801aa86:	009b      	lsls	r3, r3, #2
 801aa88:	4413      	add	r3, r2
 801aa8a:	685b      	ldr	r3, [r3, #4]
 801aa8c:	689b      	ldr	r3, [r3, #8]
 801aa8e:	683a      	ldr	r2, [r7, #0]
 801aa90:	7850      	ldrb	r0, [r2, #1]
 801aa92:	2200      	movs	r2, #0
 801aa94:	6839      	ldr	r1, [r7, #0]
 801aa96:	4798      	blx	r3
      break;
 801aa98:	e067      	b.n	801ab6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801aa9a:	683b      	ldr	r3, [r7, #0]
 801aa9c:	785b      	ldrb	r3, [r3, #1]
 801aa9e:	2b0b      	cmp	r3, #11
 801aaa0:	d851      	bhi.n	801ab46 <USBD_CDC_Setup+0x18a>
 801aaa2:	a201      	add	r2, pc, #4	; (adr r2, 801aaa8 <USBD_CDC_Setup+0xec>)
 801aaa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aaa8:	0801aad9 	.word	0x0801aad9
 801aaac:	0801ab55 	.word	0x0801ab55
 801aab0:	0801ab47 	.word	0x0801ab47
 801aab4:	0801ab47 	.word	0x0801ab47
 801aab8:	0801ab47 	.word	0x0801ab47
 801aabc:	0801ab47 	.word	0x0801ab47
 801aac0:	0801ab47 	.word	0x0801ab47
 801aac4:	0801ab47 	.word	0x0801ab47
 801aac8:	0801ab47 	.word	0x0801ab47
 801aacc:	0801ab47 	.word	0x0801ab47
 801aad0:	0801ab03 	.word	0x0801ab03
 801aad4:	0801ab2d 	.word	0x0801ab2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801aade:	b2db      	uxtb	r3, r3
 801aae0:	2b03      	cmp	r3, #3
 801aae2:	d107      	bne.n	801aaf4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801aae4:	f107 030a 	add.w	r3, r7, #10
 801aae8:	2202      	movs	r2, #2
 801aaea:	4619      	mov	r1, r3
 801aaec:	6878      	ldr	r0, [r7, #4]
 801aaee:	f001 fced 	bl	801c4cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801aaf2:	e032      	b.n	801ab5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801aaf4:	6839      	ldr	r1, [r7, #0]
 801aaf6:	6878      	ldr	r0, [r7, #4]
 801aaf8:	f001 fc77 	bl	801c3ea <USBD_CtlError>
            ret = USBD_FAIL;
 801aafc:	2303      	movs	r3, #3
 801aafe:	75fb      	strb	r3, [r7, #23]
          break;
 801ab00:	e02b      	b.n	801ab5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ab08:	b2db      	uxtb	r3, r3
 801ab0a:	2b03      	cmp	r3, #3
 801ab0c:	d107      	bne.n	801ab1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801ab0e:	f107 030d 	add.w	r3, r7, #13
 801ab12:	2201      	movs	r2, #1
 801ab14:	4619      	mov	r1, r3
 801ab16:	6878      	ldr	r0, [r7, #4]
 801ab18:	f001 fcd8 	bl	801c4cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801ab1c:	e01d      	b.n	801ab5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801ab1e:	6839      	ldr	r1, [r7, #0]
 801ab20:	6878      	ldr	r0, [r7, #4]
 801ab22:	f001 fc62 	bl	801c3ea <USBD_CtlError>
            ret = USBD_FAIL;
 801ab26:	2303      	movs	r3, #3
 801ab28:	75fb      	strb	r3, [r7, #23]
          break;
 801ab2a:	e016      	b.n	801ab5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ab32:	b2db      	uxtb	r3, r3
 801ab34:	2b03      	cmp	r3, #3
 801ab36:	d00f      	beq.n	801ab58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801ab38:	6839      	ldr	r1, [r7, #0]
 801ab3a:	6878      	ldr	r0, [r7, #4]
 801ab3c:	f001 fc55 	bl	801c3ea <USBD_CtlError>
            ret = USBD_FAIL;
 801ab40:	2303      	movs	r3, #3
 801ab42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801ab44:	e008      	b.n	801ab58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801ab46:	6839      	ldr	r1, [r7, #0]
 801ab48:	6878      	ldr	r0, [r7, #4]
 801ab4a:	f001 fc4e 	bl	801c3ea <USBD_CtlError>
          ret = USBD_FAIL;
 801ab4e:	2303      	movs	r3, #3
 801ab50:	75fb      	strb	r3, [r7, #23]
          break;
 801ab52:	e002      	b.n	801ab5a <USBD_CDC_Setup+0x19e>
          break;
 801ab54:	bf00      	nop
 801ab56:	e008      	b.n	801ab6a <USBD_CDC_Setup+0x1ae>
          break;
 801ab58:	bf00      	nop
      }
      break;
 801ab5a:	e006      	b.n	801ab6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801ab5c:	6839      	ldr	r1, [r7, #0]
 801ab5e:	6878      	ldr	r0, [r7, #4]
 801ab60:	f001 fc43 	bl	801c3ea <USBD_CtlError>
      ret = USBD_FAIL;
 801ab64:	2303      	movs	r3, #3
 801ab66:	75fb      	strb	r3, [r7, #23]
      break;
 801ab68:	bf00      	nop
  }

  return (uint8_t)ret;
 801ab6a:	7dfb      	ldrb	r3, [r7, #23]
}
 801ab6c:	4618      	mov	r0, r3
 801ab6e:	3718      	adds	r7, #24
 801ab70:	46bd      	mov	sp, r7
 801ab72:	bd80      	pop	{r7, pc}

0801ab74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b084      	sub	sp, #16
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
 801ab7c:	460b      	mov	r3, r1
 801ab7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	32b0      	adds	r2, #176	; 0xb0
 801ab92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d101      	bne.n	801ab9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801ab9a:	2303      	movs	r3, #3
 801ab9c:	e065      	b.n	801ac6a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	32b0      	adds	r2, #176	; 0xb0
 801aba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801abac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801abae:	78fb      	ldrb	r3, [r7, #3]
 801abb0:	f003 020f 	and.w	r2, r3, #15
 801abb4:	6879      	ldr	r1, [r7, #4]
 801abb6:	4613      	mov	r3, r2
 801abb8:	009b      	lsls	r3, r3, #2
 801abba:	4413      	add	r3, r2
 801abbc:	009b      	lsls	r3, r3, #2
 801abbe:	440b      	add	r3, r1
 801abc0:	3318      	adds	r3, #24
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d02f      	beq.n	801ac28 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801abc8:	78fb      	ldrb	r3, [r7, #3]
 801abca:	f003 020f 	and.w	r2, r3, #15
 801abce:	6879      	ldr	r1, [r7, #4]
 801abd0:	4613      	mov	r3, r2
 801abd2:	009b      	lsls	r3, r3, #2
 801abd4:	4413      	add	r3, r2
 801abd6:	009b      	lsls	r3, r3, #2
 801abd8:	440b      	add	r3, r1
 801abda:	3318      	adds	r3, #24
 801abdc:	681a      	ldr	r2, [r3, #0]
 801abde:	78fb      	ldrb	r3, [r7, #3]
 801abe0:	f003 010f 	and.w	r1, r3, #15
 801abe4:	68f8      	ldr	r0, [r7, #12]
 801abe6:	460b      	mov	r3, r1
 801abe8:	00db      	lsls	r3, r3, #3
 801abea:	440b      	add	r3, r1
 801abec:	009b      	lsls	r3, r3, #2
 801abee:	4403      	add	r3, r0
 801abf0:	3348      	adds	r3, #72	; 0x48
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	fbb2 f1f3 	udiv	r1, r2, r3
 801abf8:	fb01 f303 	mul.w	r3, r1, r3
 801abfc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d112      	bne.n	801ac28 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801ac02:	78fb      	ldrb	r3, [r7, #3]
 801ac04:	f003 020f 	and.w	r2, r3, #15
 801ac08:	6879      	ldr	r1, [r7, #4]
 801ac0a:	4613      	mov	r3, r2
 801ac0c:	009b      	lsls	r3, r3, #2
 801ac0e:	4413      	add	r3, r2
 801ac10:	009b      	lsls	r3, r3, #2
 801ac12:	440b      	add	r3, r1
 801ac14:	3318      	adds	r3, #24
 801ac16:	2200      	movs	r2, #0
 801ac18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801ac1a:	78f9      	ldrb	r1, [r7, #3]
 801ac1c:	2300      	movs	r3, #0
 801ac1e:	2200      	movs	r2, #0
 801ac20:	6878      	ldr	r0, [r7, #4]
 801ac22:	f002 f95a 	bl	801ceda <USBD_LL_Transmit>
 801ac26:	e01f      	b.n	801ac68 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801ac28:	68bb      	ldr	r3, [r7, #8]
 801ac2a:	2200      	movs	r2, #0
 801ac2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801ac36:	687a      	ldr	r2, [r7, #4]
 801ac38:	33b0      	adds	r3, #176	; 0xb0
 801ac3a:	009b      	lsls	r3, r3, #2
 801ac3c:	4413      	add	r3, r2
 801ac3e:	685b      	ldr	r3, [r3, #4]
 801ac40:	691b      	ldr	r3, [r3, #16]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d010      	beq.n	801ac68 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801ac4c:	687a      	ldr	r2, [r7, #4]
 801ac4e:	33b0      	adds	r3, #176	; 0xb0
 801ac50:	009b      	lsls	r3, r3, #2
 801ac52:	4413      	add	r3, r2
 801ac54:	685b      	ldr	r3, [r3, #4]
 801ac56:	691b      	ldr	r3, [r3, #16]
 801ac58:	68ba      	ldr	r2, [r7, #8]
 801ac5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801ac5e:	68ba      	ldr	r2, [r7, #8]
 801ac60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801ac64:	78fa      	ldrb	r2, [r7, #3]
 801ac66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801ac68:	2300      	movs	r3, #0
}
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	3710      	adds	r7, #16
 801ac6e:	46bd      	mov	sp, r7
 801ac70:	bd80      	pop	{r7, pc}

0801ac72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ac72:	b580      	push	{r7, lr}
 801ac74:	b084      	sub	sp, #16
 801ac76:	af00      	add	r7, sp, #0
 801ac78:	6078      	str	r0, [r7, #4]
 801ac7a:	460b      	mov	r3, r1
 801ac7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	32b0      	adds	r2, #176	; 0xb0
 801ac88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	32b0      	adds	r2, #176	; 0xb0
 801ac98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d101      	bne.n	801aca4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801aca0:	2303      	movs	r3, #3
 801aca2:	e01a      	b.n	801acda <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801aca4:	78fb      	ldrb	r3, [r7, #3]
 801aca6:	4619      	mov	r1, r3
 801aca8:	6878      	ldr	r0, [r7, #4]
 801acaa:	f002 f958 	bl	801cf5e <USBD_LL_GetRxDataSize>
 801acae:	4602      	mov	r2, r0
 801acb0:	68fb      	ldr	r3, [r7, #12]
 801acb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801acbc:	687a      	ldr	r2, [r7, #4]
 801acbe:	33b0      	adds	r3, #176	; 0xb0
 801acc0:	009b      	lsls	r3, r3, #2
 801acc2:	4413      	add	r3, r2
 801acc4:	685b      	ldr	r3, [r3, #4]
 801acc6:	68db      	ldr	r3, [r3, #12]
 801acc8:	68fa      	ldr	r2, [r7, #12]
 801acca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801acce:	68fa      	ldr	r2, [r7, #12]
 801acd0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801acd4:	4611      	mov	r1, r2
 801acd6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801acd8:	2300      	movs	r3, #0
}
 801acda:	4618      	mov	r0, r3
 801acdc:	3710      	adds	r7, #16
 801acde:	46bd      	mov	sp, r7
 801ace0:	bd80      	pop	{r7, pc}

0801ace2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801ace2:	b580      	push	{r7, lr}
 801ace4:	b084      	sub	sp, #16
 801ace6:	af00      	add	r7, sp, #0
 801ace8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	32b0      	adds	r2, #176	; 0xb0
 801acf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801acf8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d101      	bne.n	801ad04 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801ad00:	2303      	movs	r3, #3
 801ad02:	e025      	b.n	801ad50 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801ad0a:	687a      	ldr	r2, [r7, #4]
 801ad0c:	33b0      	adds	r3, #176	; 0xb0
 801ad0e:	009b      	lsls	r3, r3, #2
 801ad10:	4413      	add	r3, r2
 801ad12:	685b      	ldr	r3, [r3, #4]
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d01a      	beq.n	801ad4e <USBD_CDC_EP0_RxReady+0x6c>
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801ad1e:	2bff      	cmp	r3, #255	; 0xff
 801ad20:	d015      	beq.n	801ad4e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801ad28:	687a      	ldr	r2, [r7, #4]
 801ad2a:	33b0      	adds	r3, #176	; 0xb0
 801ad2c:	009b      	lsls	r3, r3, #2
 801ad2e:	4413      	add	r3, r2
 801ad30:	685b      	ldr	r3, [r3, #4]
 801ad32:	689b      	ldr	r3, [r3, #8]
 801ad34:	68fa      	ldr	r2, [r7, #12]
 801ad36:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801ad3a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801ad3c:	68fa      	ldr	r2, [r7, #12]
 801ad3e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801ad42:	b292      	uxth	r2, r2
 801ad44:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	22ff      	movs	r2, #255	; 0xff
 801ad4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801ad4e:	2300      	movs	r3, #0
}
 801ad50:	4618      	mov	r0, r3
 801ad52:	3710      	adds	r7, #16
 801ad54:	46bd      	mov	sp, r7
 801ad56:	bd80      	pop	{r7, pc}

0801ad58 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	b086      	sub	sp, #24
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801ad60:	2182      	movs	r1, #130	; 0x82
 801ad62:	4818      	ldr	r0, [pc, #96]	; (801adc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801ad64:	f000 fd09 	bl	801b77a <USBD_GetEpDesc>
 801ad68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801ad6a:	2101      	movs	r1, #1
 801ad6c:	4815      	ldr	r0, [pc, #84]	; (801adc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801ad6e:	f000 fd04 	bl	801b77a <USBD_GetEpDesc>
 801ad72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801ad74:	2181      	movs	r1, #129	; 0x81
 801ad76:	4813      	ldr	r0, [pc, #76]	; (801adc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801ad78:	f000 fcff 	bl	801b77a <USBD_GetEpDesc>
 801ad7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801ad7e:	697b      	ldr	r3, [r7, #20]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d002      	beq.n	801ad8a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801ad84:	697b      	ldr	r3, [r7, #20]
 801ad86:	2210      	movs	r2, #16
 801ad88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801ad8a:	693b      	ldr	r3, [r7, #16]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d006      	beq.n	801ad9e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801ad90:	693b      	ldr	r3, [r7, #16]
 801ad92:	2200      	movs	r2, #0
 801ad94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ad98:	711a      	strb	r2, [r3, #4]
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d006      	beq.n	801adb2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	2200      	movs	r2, #0
 801ada8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801adac:	711a      	strb	r2, [r3, #4]
 801adae:	2200      	movs	r2, #0
 801adb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	2243      	movs	r2, #67	; 0x43
 801adb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801adb8:	4b02      	ldr	r3, [pc, #8]	; (801adc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801adba:	4618      	mov	r0, r3
 801adbc:	3718      	adds	r7, #24
 801adbe:	46bd      	mov	sp, r7
 801adc0:	bd80      	pop	{r7, pc}
 801adc2:	bf00      	nop
 801adc4:	24000054 	.word	0x24000054

0801adc8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801adc8:	b580      	push	{r7, lr}
 801adca:	b086      	sub	sp, #24
 801adcc:	af00      	add	r7, sp, #0
 801adce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801add0:	2182      	movs	r1, #130	; 0x82
 801add2:	4818      	ldr	r0, [pc, #96]	; (801ae34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801add4:	f000 fcd1 	bl	801b77a <USBD_GetEpDesc>
 801add8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801adda:	2101      	movs	r1, #1
 801addc:	4815      	ldr	r0, [pc, #84]	; (801ae34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801adde:	f000 fccc 	bl	801b77a <USBD_GetEpDesc>
 801ade2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801ade4:	2181      	movs	r1, #129	; 0x81
 801ade6:	4813      	ldr	r0, [pc, #76]	; (801ae34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801ade8:	f000 fcc7 	bl	801b77a <USBD_GetEpDesc>
 801adec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801adee:	697b      	ldr	r3, [r7, #20]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d002      	beq.n	801adfa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801adf4:	697b      	ldr	r3, [r7, #20]
 801adf6:	2210      	movs	r2, #16
 801adf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801adfa:	693b      	ldr	r3, [r7, #16]
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d006      	beq.n	801ae0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801ae00:	693b      	ldr	r3, [r7, #16]
 801ae02:	2200      	movs	r2, #0
 801ae04:	711a      	strb	r2, [r3, #4]
 801ae06:	2200      	movs	r2, #0
 801ae08:	f042 0202 	orr.w	r2, r2, #2
 801ae0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d006      	beq.n	801ae22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801ae14:	68fb      	ldr	r3, [r7, #12]
 801ae16:	2200      	movs	r2, #0
 801ae18:	711a      	strb	r2, [r3, #4]
 801ae1a:	2200      	movs	r2, #0
 801ae1c:	f042 0202 	orr.w	r2, r2, #2
 801ae20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	2243      	movs	r2, #67	; 0x43
 801ae26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801ae28:	4b02      	ldr	r3, [pc, #8]	; (801ae34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	3718      	adds	r7, #24
 801ae2e:	46bd      	mov	sp, r7
 801ae30:	bd80      	pop	{r7, pc}
 801ae32:	bf00      	nop
 801ae34:	24000054 	.word	0x24000054

0801ae38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801ae38:	b580      	push	{r7, lr}
 801ae3a:	b086      	sub	sp, #24
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801ae40:	2182      	movs	r1, #130	; 0x82
 801ae42:	4818      	ldr	r0, [pc, #96]	; (801aea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801ae44:	f000 fc99 	bl	801b77a <USBD_GetEpDesc>
 801ae48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801ae4a:	2101      	movs	r1, #1
 801ae4c:	4815      	ldr	r0, [pc, #84]	; (801aea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801ae4e:	f000 fc94 	bl	801b77a <USBD_GetEpDesc>
 801ae52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801ae54:	2181      	movs	r1, #129	; 0x81
 801ae56:	4813      	ldr	r0, [pc, #76]	; (801aea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801ae58:	f000 fc8f 	bl	801b77a <USBD_GetEpDesc>
 801ae5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801ae5e:	697b      	ldr	r3, [r7, #20]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d002      	beq.n	801ae6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801ae64:	697b      	ldr	r3, [r7, #20]
 801ae66:	2210      	movs	r2, #16
 801ae68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801ae6a:	693b      	ldr	r3, [r7, #16]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d006      	beq.n	801ae7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801ae70:	693b      	ldr	r3, [r7, #16]
 801ae72:	2200      	movs	r2, #0
 801ae74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ae78:	711a      	strb	r2, [r3, #4]
 801ae7a:	2200      	movs	r2, #0
 801ae7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d006      	beq.n	801ae92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801ae84:	68fb      	ldr	r3, [r7, #12]
 801ae86:	2200      	movs	r2, #0
 801ae88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ae8c:	711a      	strb	r2, [r3, #4]
 801ae8e:	2200      	movs	r2, #0
 801ae90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	2243      	movs	r2, #67	; 0x43
 801ae96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801ae98:	4b02      	ldr	r3, [pc, #8]	; (801aea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	3718      	adds	r7, #24
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd80      	pop	{r7, pc}
 801aea2:	bf00      	nop
 801aea4:	24000054 	.word	0x24000054

0801aea8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801aea8:	b480      	push	{r7}
 801aeaa:	b083      	sub	sp, #12
 801aeac:	af00      	add	r7, sp, #0
 801aeae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	220a      	movs	r2, #10
 801aeb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801aeb6:	4b03      	ldr	r3, [pc, #12]	; (801aec4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801aeb8:	4618      	mov	r0, r3
 801aeba:	370c      	adds	r7, #12
 801aebc:	46bd      	mov	sp, r7
 801aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aec2:	4770      	bx	lr
 801aec4:	24000010 	.word	0x24000010

0801aec8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801aec8:	b480      	push	{r7}
 801aeca:	b083      	sub	sp, #12
 801aecc:	af00      	add	r7, sp, #0
 801aece:	6078      	str	r0, [r7, #4]
 801aed0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801aed2:	683b      	ldr	r3, [r7, #0]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d101      	bne.n	801aedc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801aed8:	2303      	movs	r3, #3
 801aeda:	e009      	b.n	801aef0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801aee2:	687a      	ldr	r2, [r7, #4]
 801aee4:	33b0      	adds	r3, #176	; 0xb0
 801aee6:	009b      	lsls	r3, r3, #2
 801aee8:	4413      	add	r3, r2
 801aeea:	683a      	ldr	r2, [r7, #0]
 801aeec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801aeee:	2300      	movs	r3, #0
}
 801aef0:	4618      	mov	r0, r3
 801aef2:	370c      	adds	r7, #12
 801aef4:	46bd      	mov	sp, r7
 801aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aefa:	4770      	bx	lr

0801aefc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801aefc:	b480      	push	{r7}
 801aefe:	b087      	sub	sp, #28
 801af00:	af00      	add	r7, sp, #0
 801af02:	60f8      	str	r0, [r7, #12]
 801af04:	60b9      	str	r1, [r7, #8]
 801af06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	32b0      	adds	r2, #176	; 0xb0
 801af12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af16:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801af18:	697b      	ldr	r3, [r7, #20]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d101      	bne.n	801af22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801af1e:	2303      	movs	r3, #3
 801af20:	e008      	b.n	801af34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801af22:	697b      	ldr	r3, [r7, #20]
 801af24:	68ba      	ldr	r2, [r7, #8]
 801af26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801af2a:	697b      	ldr	r3, [r7, #20]
 801af2c:	687a      	ldr	r2, [r7, #4]
 801af2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801af32:	2300      	movs	r3, #0
}
 801af34:	4618      	mov	r0, r3
 801af36:	371c      	adds	r7, #28
 801af38:	46bd      	mov	sp, r7
 801af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af3e:	4770      	bx	lr

0801af40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801af40:	b480      	push	{r7}
 801af42:	b085      	sub	sp, #20
 801af44:	af00      	add	r7, sp, #0
 801af46:	6078      	str	r0, [r7, #4]
 801af48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	32b0      	adds	r2, #176	; 0xb0
 801af54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d101      	bne.n	801af64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801af60:	2303      	movs	r3, #3
 801af62:	e004      	b.n	801af6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	683a      	ldr	r2, [r7, #0]
 801af68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801af6c:	2300      	movs	r3, #0
}
 801af6e:	4618      	mov	r0, r3
 801af70:	3714      	adds	r7, #20
 801af72:	46bd      	mov	sp, r7
 801af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af78:	4770      	bx	lr
	...

0801af7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801af7c:	b580      	push	{r7, lr}
 801af7e:	b084      	sub	sp, #16
 801af80:	af00      	add	r7, sp, #0
 801af82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	32b0      	adds	r2, #176	; 0xb0
 801af8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	32b0      	adds	r2, #176	; 0xb0
 801af9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d101      	bne.n	801afaa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801afa6:	2303      	movs	r3, #3
 801afa8:	e018      	b.n	801afdc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	7c1b      	ldrb	r3, [r3, #16]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d10a      	bne.n	801afc8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801afb2:	4b0c      	ldr	r3, [pc, #48]	; (801afe4 <USBD_CDC_ReceivePacket+0x68>)
 801afb4:	7819      	ldrb	r1, [r3, #0]
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801afbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 801afc0:	6878      	ldr	r0, [r7, #4]
 801afc2:	f001 ffab 	bl	801cf1c <USBD_LL_PrepareReceive>
 801afc6:	e008      	b.n	801afda <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801afc8:	4b06      	ldr	r3, [pc, #24]	; (801afe4 <USBD_CDC_ReceivePacket+0x68>)
 801afca:	7819      	ldrb	r1, [r3, #0]
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801afd2:	2340      	movs	r3, #64	; 0x40
 801afd4:	6878      	ldr	r0, [r7, #4]
 801afd6:	f001 ffa1 	bl	801cf1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801afda:	2300      	movs	r3, #0
}
 801afdc:	4618      	mov	r0, r3
 801afde:	3710      	adds	r7, #16
 801afe0:	46bd      	mov	sp, r7
 801afe2:	bd80      	pop	{r7, pc}
 801afe4:	24000098 	.word	0x24000098

0801afe8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801afe8:	b580      	push	{r7, lr}
 801afea:	b086      	sub	sp, #24
 801afec:	af00      	add	r7, sp, #0
 801afee:	60f8      	str	r0, [r7, #12]
 801aff0:	60b9      	str	r1, [r7, #8]
 801aff2:	4613      	mov	r3, r2
 801aff4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d101      	bne.n	801b000 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801affc:	2303      	movs	r3, #3
 801affe:	e01f      	b.n	801b040 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	2200      	movs	r2, #0
 801b004:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	2200      	movs	r2, #0
 801b00c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	2200      	movs	r2, #0
 801b014:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801b018:	68bb      	ldr	r3, [r7, #8]
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d003      	beq.n	801b026 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801b01e:	68fb      	ldr	r3, [r7, #12]
 801b020:	68ba      	ldr	r2, [r7, #8]
 801b022:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	2201      	movs	r2, #1
 801b02a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801b02e:	68fb      	ldr	r3, [r7, #12]
 801b030:	79fa      	ldrb	r2, [r7, #7]
 801b032:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801b034:	68f8      	ldr	r0, [r7, #12]
 801b036:	f001 fe17 	bl	801cc68 <USBD_LL_Init>
 801b03a:	4603      	mov	r3, r0
 801b03c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801b03e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b040:	4618      	mov	r0, r3
 801b042:	3718      	adds	r7, #24
 801b044:	46bd      	mov	sp, r7
 801b046:	bd80      	pop	{r7, pc}

0801b048 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801b048:	b580      	push	{r7, lr}
 801b04a:	b084      	sub	sp, #16
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	6078      	str	r0, [r7, #4]
 801b050:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801b052:	2300      	movs	r3, #0
 801b054:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801b056:	683b      	ldr	r3, [r7, #0]
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d101      	bne.n	801b060 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801b05c:	2303      	movs	r3, #3
 801b05e:	e025      	b.n	801b0ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	683a      	ldr	r2, [r7, #0]
 801b064:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	32ae      	adds	r2, #174	; 0xae
 801b072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d00f      	beq.n	801b09c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	32ae      	adds	r2, #174	; 0xae
 801b086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b08c:	f107 020e 	add.w	r2, r7, #14
 801b090:	4610      	mov	r0, r2
 801b092:	4798      	blx	r3
 801b094:	4602      	mov	r2, r0
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801b0a2:	1c5a      	adds	r2, r3, #1
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801b0aa:	2300      	movs	r3, #0
}
 801b0ac:	4618      	mov	r0, r3
 801b0ae:	3710      	adds	r7, #16
 801b0b0:	46bd      	mov	sp, r7
 801b0b2:	bd80      	pop	{r7, pc}

0801b0b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b082      	sub	sp, #8
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801b0bc:	6878      	ldr	r0, [r7, #4]
 801b0be:	f001 fe23 	bl	801cd08 <USBD_LL_Start>
 801b0c2:	4603      	mov	r3, r0
}
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	3708      	adds	r7, #8
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	bd80      	pop	{r7, pc}

0801b0cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801b0cc:	b480      	push	{r7}
 801b0ce:	b083      	sub	sp, #12
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801b0d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801b0d6:	4618      	mov	r0, r3
 801b0d8:	370c      	adds	r7, #12
 801b0da:	46bd      	mov	sp, r7
 801b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0e0:	4770      	bx	lr

0801b0e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b0e2:	b580      	push	{r7, lr}
 801b0e4:	b084      	sub	sp, #16
 801b0e6:	af00      	add	r7, sp, #0
 801b0e8:	6078      	str	r0, [r7, #4]
 801b0ea:	460b      	mov	r3, r1
 801b0ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801b0ee:	2300      	movs	r3, #0
 801b0f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d009      	beq.n	801b110 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	78fa      	ldrb	r2, [r7, #3]
 801b106:	4611      	mov	r1, r2
 801b108:	6878      	ldr	r0, [r7, #4]
 801b10a:	4798      	blx	r3
 801b10c:	4603      	mov	r3, r0
 801b10e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801b110:	7bfb      	ldrb	r3, [r7, #15]
}
 801b112:	4618      	mov	r0, r3
 801b114:	3710      	adds	r7, #16
 801b116:	46bd      	mov	sp, r7
 801b118:	bd80      	pop	{r7, pc}

0801b11a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b11a:	b580      	push	{r7, lr}
 801b11c:	b084      	sub	sp, #16
 801b11e:	af00      	add	r7, sp, #0
 801b120:	6078      	str	r0, [r7, #4]
 801b122:	460b      	mov	r3, r1
 801b124:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801b126:	2300      	movs	r3, #0
 801b128:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b130:	685b      	ldr	r3, [r3, #4]
 801b132:	78fa      	ldrb	r2, [r7, #3]
 801b134:	4611      	mov	r1, r2
 801b136:	6878      	ldr	r0, [r7, #4]
 801b138:	4798      	blx	r3
 801b13a:	4603      	mov	r3, r0
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d001      	beq.n	801b144 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801b140:	2303      	movs	r3, #3
 801b142:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801b144:	7bfb      	ldrb	r3, [r7, #15]
}
 801b146:	4618      	mov	r0, r3
 801b148:	3710      	adds	r7, #16
 801b14a:	46bd      	mov	sp, r7
 801b14c:	bd80      	pop	{r7, pc}

0801b14e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801b14e:	b580      	push	{r7, lr}
 801b150:	b084      	sub	sp, #16
 801b152:	af00      	add	r7, sp, #0
 801b154:	6078      	str	r0, [r7, #4]
 801b156:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801b15e:	6839      	ldr	r1, [r7, #0]
 801b160:	4618      	mov	r0, r3
 801b162:	f001 f908 	bl	801c376 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	2201      	movs	r2, #1
 801b16a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801b174:	461a      	mov	r2, r3
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801b182:	f003 031f 	and.w	r3, r3, #31
 801b186:	2b02      	cmp	r3, #2
 801b188:	d01a      	beq.n	801b1c0 <USBD_LL_SetupStage+0x72>
 801b18a:	2b02      	cmp	r3, #2
 801b18c:	d822      	bhi.n	801b1d4 <USBD_LL_SetupStage+0x86>
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d002      	beq.n	801b198 <USBD_LL_SetupStage+0x4a>
 801b192:	2b01      	cmp	r3, #1
 801b194:	d00a      	beq.n	801b1ac <USBD_LL_SetupStage+0x5e>
 801b196:	e01d      	b.n	801b1d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801b19e:	4619      	mov	r1, r3
 801b1a0:	6878      	ldr	r0, [r7, #4]
 801b1a2:	f000 fb5f 	bl	801b864 <USBD_StdDevReq>
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	73fb      	strb	r3, [r7, #15]
      break;
 801b1aa:	e020      	b.n	801b1ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801b1b2:	4619      	mov	r1, r3
 801b1b4:	6878      	ldr	r0, [r7, #4]
 801b1b6:	f000 fbc7 	bl	801b948 <USBD_StdItfReq>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	73fb      	strb	r3, [r7, #15]
      break;
 801b1be:	e016      	b.n	801b1ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801b1c6:	4619      	mov	r1, r3
 801b1c8:	6878      	ldr	r0, [r7, #4]
 801b1ca:	f000 fc29 	bl	801ba20 <USBD_StdEPReq>
 801b1ce:	4603      	mov	r3, r0
 801b1d0:	73fb      	strb	r3, [r7, #15]
      break;
 801b1d2:	e00c      	b.n	801b1ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801b1da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801b1de:	b2db      	uxtb	r3, r3
 801b1e0:	4619      	mov	r1, r3
 801b1e2:	6878      	ldr	r0, [r7, #4]
 801b1e4:	f001 fdf0 	bl	801cdc8 <USBD_LL_StallEP>
 801b1e8:	4603      	mov	r3, r0
 801b1ea:	73fb      	strb	r3, [r7, #15]
      break;
 801b1ec:	bf00      	nop
  }

  return ret;
 801b1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	3710      	adds	r7, #16
 801b1f4:	46bd      	mov	sp, r7
 801b1f6:	bd80      	pop	{r7, pc}

0801b1f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b086      	sub	sp, #24
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	60f8      	str	r0, [r7, #12]
 801b200:	460b      	mov	r3, r1
 801b202:	607a      	str	r2, [r7, #4]
 801b204:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801b206:	2300      	movs	r3, #0
 801b208:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801b20a:	7afb      	ldrb	r3, [r7, #11]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d16e      	bne.n	801b2ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801b210:	68fb      	ldr	r3, [r7, #12]
 801b212:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801b216:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801b21e:	2b03      	cmp	r3, #3
 801b220:	f040 8098 	bne.w	801b354 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801b224:	693b      	ldr	r3, [r7, #16]
 801b226:	689a      	ldr	r2, [r3, #8]
 801b228:	693b      	ldr	r3, [r7, #16]
 801b22a:	68db      	ldr	r3, [r3, #12]
 801b22c:	429a      	cmp	r2, r3
 801b22e:	d913      	bls.n	801b258 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801b230:	693b      	ldr	r3, [r7, #16]
 801b232:	689a      	ldr	r2, [r3, #8]
 801b234:	693b      	ldr	r3, [r7, #16]
 801b236:	68db      	ldr	r3, [r3, #12]
 801b238:	1ad2      	subs	r2, r2, r3
 801b23a:	693b      	ldr	r3, [r7, #16]
 801b23c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801b23e:	693b      	ldr	r3, [r7, #16]
 801b240:	68da      	ldr	r2, [r3, #12]
 801b242:	693b      	ldr	r3, [r7, #16]
 801b244:	689b      	ldr	r3, [r3, #8]
 801b246:	4293      	cmp	r3, r2
 801b248:	bf28      	it	cs
 801b24a:	4613      	movcs	r3, r2
 801b24c:	461a      	mov	r2, r3
 801b24e:	6879      	ldr	r1, [r7, #4]
 801b250:	68f8      	ldr	r0, [r7, #12]
 801b252:	f001 f984 	bl	801c55e <USBD_CtlContinueRx>
 801b256:	e07d      	b.n	801b354 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801b258:	68fb      	ldr	r3, [r7, #12]
 801b25a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801b25e:	f003 031f 	and.w	r3, r3, #31
 801b262:	2b02      	cmp	r3, #2
 801b264:	d014      	beq.n	801b290 <USBD_LL_DataOutStage+0x98>
 801b266:	2b02      	cmp	r3, #2
 801b268:	d81d      	bhi.n	801b2a6 <USBD_LL_DataOutStage+0xae>
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	d002      	beq.n	801b274 <USBD_LL_DataOutStage+0x7c>
 801b26e:	2b01      	cmp	r3, #1
 801b270:	d003      	beq.n	801b27a <USBD_LL_DataOutStage+0x82>
 801b272:	e018      	b.n	801b2a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801b274:	2300      	movs	r3, #0
 801b276:	75bb      	strb	r3, [r7, #22]
            break;
 801b278:	e018      	b.n	801b2ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801b27a:	68fb      	ldr	r3, [r7, #12]
 801b27c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801b280:	b2db      	uxtb	r3, r3
 801b282:	4619      	mov	r1, r3
 801b284:	68f8      	ldr	r0, [r7, #12]
 801b286:	f000 fa5e 	bl	801b746 <USBD_CoreFindIF>
 801b28a:	4603      	mov	r3, r0
 801b28c:	75bb      	strb	r3, [r7, #22]
            break;
 801b28e:	e00d      	b.n	801b2ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801b290:	68fb      	ldr	r3, [r7, #12]
 801b292:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801b296:	b2db      	uxtb	r3, r3
 801b298:	4619      	mov	r1, r3
 801b29a:	68f8      	ldr	r0, [r7, #12]
 801b29c:	f000 fa60 	bl	801b760 <USBD_CoreFindEP>
 801b2a0:	4603      	mov	r3, r0
 801b2a2:	75bb      	strb	r3, [r7, #22]
            break;
 801b2a4:	e002      	b.n	801b2ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801b2a6:	2300      	movs	r3, #0
 801b2a8:	75bb      	strb	r3, [r7, #22]
            break;
 801b2aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801b2ac:	7dbb      	ldrb	r3, [r7, #22]
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d119      	bne.n	801b2e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b2b2:	68fb      	ldr	r3, [r7, #12]
 801b2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b2b8:	b2db      	uxtb	r3, r3
 801b2ba:	2b03      	cmp	r3, #3
 801b2bc:	d113      	bne.n	801b2e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801b2be:	7dba      	ldrb	r2, [r7, #22]
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	32ae      	adds	r2, #174	; 0xae
 801b2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b2c8:	691b      	ldr	r3, [r3, #16]
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d00b      	beq.n	801b2e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801b2ce:	7dba      	ldrb	r2, [r7, #22]
 801b2d0:	68fb      	ldr	r3, [r7, #12]
 801b2d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801b2d6:	7dba      	ldrb	r2, [r7, #22]
 801b2d8:	68fb      	ldr	r3, [r7, #12]
 801b2da:	32ae      	adds	r2, #174	; 0xae
 801b2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b2e0:	691b      	ldr	r3, [r3, #16]
 801b2e2:	68f8      	ldr	r0, [r7, #12]
 801b2e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801b2e6:	68f8      	ldr	r0, [r7, #12]
 801b2e8:	f001 f94a 	bl	801c580 <USBD_CtlSendStatus>
 801b2ec:	e032      	b.n	801b354 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801b2ee:	7afb      	ldrb	r3, [r7, #11]
 801b2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b2f4:	b2db      	uxtb	r3, r3
 801b2f6:	4619      	mov	r1, r3
 801b2f8:	68f8      	ldr	r0, [r7, #12]
 801b2fa:	f000 fa31 	bl	801b760 <USBD_CoreFindEP>
 801b2fe:	4603      	mov	r3, r0
 801b300:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b302:	7dbb      	ldrb	r3, [r7, #22]
 801b304:	2bff      	cmp	r3, #255	; 0xff
 801b306:	d025      	beq.n	801b354 <USBD_LL_DataOutStage+0x15c>
 801b308:	7dbb      	ldrb	r3, [r7, #22]
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d122      	bne.n	801b354 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b30e:	68fb      	ldr	r3, [r7, #12]
 801b310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b314:	b2db      	uxtb	r3, r3
 801b316:	2b03      	cmp	r3, #3
 801b318:	d117      	bne.n	801b34a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801b31a:	7dba      	ldrb	r2, [r7, #22]
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	32ae      	adds	r2, #174	; 0xae
 801b320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b324:	699b      	ldr	r3, [r3, #24]
 801b326:	2b00      	cmp	r3, #0
 801b328:	d00f      	beq.n	801b34a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801b32a:	7dba      	ldrb	r2, [r7, #22]
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801b332:	7dba      	ldrb	r2, [r7, #22]
 801b334:	68fb      	ldr	r3, [r7, #12]
 801b336:	32ae      	adds	r2, #174	; 0xae
 801b338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b33c:	699b      	ldr	r3, [r3, #24]
 801b33e:	7afa      	ldrb	r2, [r7, #11]
 801b340:	4611      	mov	r1, r2
 801b342:	68f8      	ldr	r0, [r7, #12]
 801b344:	4798      	blx	r3
 801b346:	4603      	mov	r3, r0
 801b348:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801b34a:	7dfb      	ldrb	r3, [r7, #23]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d001      	beq.n	801b354 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801b350:	7dfb      	ldrb	r3, [r7, #23]
 801b352:	e000      	b.n	801b356 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801b354:	2300      	movs	r3, #0
}
 801b356:	4618      	mov	r0, r3
 801b358:	3718      	adds	r7, #24
 801b35a:	46bd      	mov	sp, r7
 801b35c:	bd80      	pop	{r7, pc}

0801b35e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801b35e:	b580      	push	{r7, lr}
 801b360:	b086      	sub	sp, #24
 801b362:	af00      	add	r7, sp, #0
 801b364:	60f8      	str	r0, [r7, #12]
 801b366:	460b      	mov	r3, r1
 801b368:	607a      	str	r2, [r7, #4]
 801b36a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801b36c:	7afb      	ldrb	r3, [r7, #11]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d16f      	bne.n	801b452 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801b372:	68fb      	ldr	r3, [r7, #12]
 801b374:	3314      	adds	r3, #20
 801b376:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801b37e:	2b02      	cmp	r3, #2
 801b380:	d15a      	bne.n	801b438 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801b382:	693b      	ldr	r3, [r7, #16]
 801b384:	689a      	ldr	r2, [r3, #8]
 801b386:	693b      	ldr	r3, [r7, #16]
 801b388:	68db      	ldr	r3, [r3, #12]
 801b38a:	429a      	cmp	r2, r3
 801b38c:	d914      	bls.n	801b3b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801b38e:	693b      	ldr	r3, [r7, #16]
 801b390:	689a      	ldr	r2, [r3, #8]
 801b392:	693b      	ldr	r3, [r7, #16]
 801b394:	68db      	ldr	r3, [r3, #12]
 801b396:	1ad2      	subs	r2, r2, r3
 801b398:	693b      	ldr	r3, [r7, #16]
 801b39a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801b39c:	693b      	ldr	r3, [r7, #16]
 801b39e:	689b      	ldr	r3, [r3, #8]
 801b3a0:	461a      	mov	r2, r3
 801b3a2:	6879      	ldr	r1, [r7, #4]
 801b3a4:	68f8      	ldr	r0, [r7, #12]
 801b3a6:	f001 f8ac 	bl	801c502 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b3aa:	2300      	movs	r3, #0
 801b3ac:	2200      	movs	r2, #0
 801b3ae:	2100      	movs	r1, #0
 801b3b0:	68f8      	ldr	r0, [r7, #12]
 801b3b2:	f001 fdb3 	bl	801cf1c <USBD_LL_PrepareReceive>
 801b3b6:	e03f      	b.n	801b438 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801b3b8:	693b      	ldr	r3, [r7, #16]
 801b3ba:	68da      	ldr	r2, [r3, #12]
 801b3bc:	693b      	ldr	r3, [r7, #16]
 801b3be:	689b      	ldr	r3, [r3, #8]
 801b3c0:	429a      	cmp	r2, r3
 801b3c2:	d11c      	bne.n	801b3fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801b3c4:	693b      	ldr	r3, [r7, #16]
 801b3c6:	685a      	ldr	r2, [r3, #4]
 801b3c8:	693b      	ldr	r3, [r7, #16]
 801b3ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801b3cc:	429a      	cmp	r2, r3
 801b3ce:	d316      	bcc.n	801b3fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801b3d0:	693b      	ldr	r3, [r7, #16]
 801b3d2:	685a      	ldr	r2, [r3, #4]
 801b3d4:	68fb      	ldr	r3, [r7, #12]
 801b3d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801b3da:	429a      	cmp	r2, r3
 801b3dc:	d20f      	bcs.n	801b3fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801b3de:	2200      	movs	r2, #0
 801b3e0:	2100      	movs	r1, #0
 801b3e2:	68f8      	ldr	r0, [r7, #12]
 801b3e4:	f001 f88d 	bl	801c502 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	2200      	movs	r2, #0
 801b3ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b3f0:	2300      	movs	r3, #0
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	2100      	movs	r1, #0
 801b3f6:	68f8      	ldr	r0, [r7, #12]
 801b3f8:	f001 fd90 	bl	801cf1c <USBD_LL_PrepareReceive>
 801b3fc:	e01c      	b.n	801b438 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b404:	b2db      	uxtb	r3, r3
 801b406:	2b03      	cmp	r3, #3
 801b408:	d10f      	bne.n	801b42a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b410:	68db      	ldr	r3, [r3, #12]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d009      	beq.n	801b42a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801b416:	68fb      	ldr	r3, [r7, #12]
 801b418:	2200      	movs	r2, #0
 801b41a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801b41e:	68fb      	ldr	r3, [r7, #12]
 801b420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b424:	68db      	ldr	r3, [r3, #12]
 801b426:	68f8      	ldr	r0, [r7, #12]
 801b428:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801b42a:	2180      	movs	r1, #128	; 0x80
 801b42c:	68f8      	ldr	r0, [r7, #12]
 801b42e:	f001 fccb 	bl	801cdc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801b432:	68f8      	ldr	r0, [r7, #12]
 801b434:	f001 f8b7 	bl	801c5a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801b438:	68fb      	ldr	r3, [r7, #12]
 801b43a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d03a      	beq.n	801b4b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801b442:	68f8      	ldr	r0, [r7, #12]
 801b444:	f7ff fe42 	bl	801b0cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	2200      	movs	r2, #0
 801b44c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801b450:	e032      	b.n	801b4b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801b452:	7afb      	ldrb	r3, [r7, #11]
 801b454:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b458:	b2db      	uxtb	r3, r3
 801b45a:	4619      	mov	r1, r3
 801b45c:	68f8      	ldr	r0, [r7, #12]
 801b45e:	f000 f97f 	bl	801b760 <USBD_CoreFindEP>
 801b462:	4603      	mov	r3, r0
 801b464:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b466:	7dfb      	ldrb	r3, [r7, #23]
 801b468:	2bff      	cmp	r3, #255	; 0xff
 801b46a:	d025      	beq.n	801b4b8 <USBD_LL_DataInStage+0x15a>
 801b46c:	7dfb      	ldrb	r3, [r7, #23]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d122      	bne.n	801b4b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b472:	68fb      	ldr	r3, [r7, #12]
 801b474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b478:	b2db      	uxtb	r3, r3
 801b47a:	2b03      	cmp	r3, #3
 801b47c:	d11c      	bne.n	801b4b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801b47e:	7dfa      	ldrb	r2, [r7, #23]
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	32ae      	adds	r2, #174	; 0xae
 801b484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b488:	695b      	ldr	r3, [r3, #20]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d014      	beq.n	801b4b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801b48e:	7dfa      	ldrb	r2, [r7, #23]
 801b490:	68fb      	ldr	r3, [r7, #12]
 801b492:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801b496:	7dfa      	ldrb	r2, [r7, #23]
 801b498:	68fb      	ldr	r3, [r7, #12]
 801b49a:	32ae      	adds	r2, #174	; 0xae
 801b49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b4a0:	695b      	ldr	r3, [r3, #20]
 801b4a2:	7afa      	ldrb	r2, [r7, #11]
 801b4a4:	4611      	mov	r1, r2
 801b4a6:	68f8      	ldr	r0, [r7, #12]
 801b4a8:	4798      	blx	r3
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801b4ae:	7dbb      	ldrb	r3, [r7, #22]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d001      	beq.n	801b4b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801b4b4:	7dbb      	ldrb	r3, [r7, #22]
 801b4b6:	e000      	b.n	801b4ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801b4b8:	2300      	movs	r3, #0
}
 801b4ba:	4618      	mov	r0, r3
 801b4bc:	3718      	adds	r7, #24
 801b4be:	46bd      	mov	sp, r7
 801b4c0:	bd80      	pop	{r7, pc}

0801b4c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801b4c2:	b580      	push	{r7, lr}
 801b4c4:	b084      	sub	sp, #16
 801b4c6:	af00      	add	r7, sp, #0
 801b4c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	2201      	movs	r2, #1
 801b4d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	2200      	movs	r2, #0
 801b4da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	2200      	movs	r2, #0
 801b4e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	2200      	movs	r2, #0
 801b4e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	2200      	movs	r2, #0
 801b4f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d014      	beq.n	801b528 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b504:	685b      	ldr	r3, [r3, #4]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d00e      	beq.n	801b528 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b510:	685b      	ldr	r3, [r3, #4]
 801b512:	687a      	ldr	r2, [r7, #4]
 801b514:	6852      	ldr	r2, [r2, #4]
 801b516:	b2d2      	uxtb	r2, r2
 801b518:	4611      	mov	r1, r2
 801b51a:	6878      	ldr	r0, [r7, #4]
 801b51c:	4798      	blx	r3
 801b51e:	4603      	mov	r3, r0
 801b520:	2b00      	cmp	r3, #0
 801b522:	d001      	beq.n	801b528 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801b524:	2303      	movs	r3, #3
 801b526:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b528:	2340      	movs	r3, #64	; 0x40
 801b52a:	2200      	movs	r2, #0
 801b52c:	2100      	movs	r1, #0
 801b52e:	6878      	ldr	r0, [r7, #4]
 801b530:	f001 fc05 	bl	801cd3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	2201      	movs	r2, #1
 801b538:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	2240      	movs	r2, #64	; 0x40
 801b540:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b544:	2340      	movs	r3, #64	; 0x40
 801b546:	2200      	movs	r2, #0
 801b548:	2180      	movs	r1, #128	; 0x80
 801b54a:	6878      	ldr	r0, [r7, #4]
 801b54c:	f001 fbf7 	bl	801cd3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	2201      	movs	r2, #1
 801b554:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	2240      	movs	r2, #64	; 0x40
 801b55a:	621a      	str	r2, [r3, #32]

  return ret;
 801b55c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b55e:	4618      	mov	r0, r3
 801b560:	3710      	adds	r7, #16
 801b562:	46bd      	mov	sp, r7
 801b564:	bd80      	pop	{r7, pc}

0801b566 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801b566:	b480      	push	{r7}
 801b568:	b083      	sub	sp, #12
 801b56a:	af00      	add	r7, sp, #0
 801b56c:	6078      	str	r0, [r7, #4]
 801b56e:	460b      	mov	r3, r1
 801b570:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	78fa      	ldrb	r2, [r7, #3]
 801b576:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801b578:	2300      	movs	r3, #0
}
 801b57a:	4618      	mov	r0, r3
 801b57c:	370c      	adds	r7, #12
 801b57e:	46bd      	mov	sp, r7
 801b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b584:	4770      	bx	lr

0801b586 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801b586:	b480      	push	{r7}
 801b588:	b083      	sub	sp, #12
 801b58a:	af00      	add	r7, sp, #0
 801b58c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b594:	b2da      	uxtb	r2, r3
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	2204      	movs	r2, #4
 801b5a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801b5a4:	2300      	movs	r3, #0
}
 801b5a6:	4618      	mov	r0, r3
 801b5a8:	370c      	adds	r7, #12
 801b5aa:	46bd      	mov	sp, r7
 801b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5b0:	4770      	bx	lr

0801b5b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801b5b2:	b480      	push	{r7}
 801b5b4:	b083      	sub	sp, #12
 801b5b6:	af00      	add	r7, sp, #0
 801b5b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b5c0:	b2db      	uxtb	r3, r3
 801b5c2:	2b04      	cmp	r3, #4
 801b5c4:	d106      	bne.n	801b5d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801b5cc:	b2da      	uxtb	r2, r3
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801b5d4:	2300      	movs	r3, #0
}
 801b5d6:	4618      	mov	r0, r3
 801b5d8:	370c      	adds	r7, #12
 801b5da:	46bd      	mov	sp, r7
 801b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5e0:	4770      	bx	lr

0801b5e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801b5e2:	b580      	push	{r7, lr}
 801b5e4:	b082      	sub	sp, #8
 801b5e6:	af00      	add	r7, sp, #0
 801b5e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b5f0:	b2db      	uxtb	r3, r3
 801b5f2:	2b03      	cmp	r3, #3
 801b5f4:	d110      	bne.n	801b618 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d00b      	beq.n	801b618 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b606:	69db      	ldr	r3, [r3, #28]
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d005      	beq.n	801b618 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b612:	69db      	ldr	r3, [r3, #28]
 801b614:	6878      	ldr	r0, [r7, #4]
 801b616:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801b618:	2300      	movs	r3, #0
}
 801b61a:	4618      	mov	r0, r3
 801b61c:	3708      	adds	r7, #8
 801b61e:	46bd      	mov	sp, r7
 801b620:	bd80      	pop	{r7, pc}

0801b622 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801b622:	b580      	push	{r7, lr}
 801b624:	b082      	sub	sp, #8
 801b626:	af00      	add	r7, sp, #0
 801b628:	6078      	str	r0, [r7, #4]
 801b62a:	460b      	mov	r3, r1
 801b62c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	32ae      	adds	r2, #174	; 0xae
 801b638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d101      	bne.n	801b644 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801b640:	2303      	movs	r3, #3
 801b642:	e01c      	b.n	801b67e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b64a:	b2db      	uxtb	r3, r3
 801b64c:	2b03      	cmp	r3, #3
 801b64e:	d115      	bne.n	801b67c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	32ae      	adds	r2, #174	; 0xae
 801b65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b65e:	6a1b      	ldr	r3, [r3, #32]
 801b660:	2b00      	cmp	r3, #0
 801b662:	d00b      	beq.n	801b67c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	32ae      	adds	r2, #174	; 0xae
 801b66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b672:	6a1b      	ldr	r3, [r3, #32]
 801b674:	78fa      	ldrb	r2, [r7, #3]
 801b676:	4611      	mov	r1, r2
 801b678:	6878      	ldr	r0, [r7, #4]
 801b67a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b67c:	2300      	movs	r3, #0
}
 801b67e:	4618      	mov	r0, r3
 801b680:	3708      	adds	r7, #8
 801b682:	46bd      	mov	sp, r7
 801b684:	bd80      	pop	{r7, pc}

0801b686 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801b686:	b580      	push	{r7, lr}
 801b688:	b082      	sub	sp, #8
 801b68a:	af00      	add	r7, sp, #0
 801b68c:	6078      	str	r0, [r7, #4]
 801b68e:	460b      	mov	r3, r1
 801b690:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	32ae      	adds	r2, #174	; 0xae
 801b69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d101      	bne.n	801b6a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801b6a4:	2303      	movs	r3, #3
 801b6a6:	e01c      	b.n	801b6e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b6ae:	b2db      	uxtb	r3, r3
 801b6b0:	2b03      	cmp	r3, #3
 801b6b2:	d115      	bne.n	801b6e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	32ae      	adds	r2, #174	; 0xae
 801b6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d00b      	beq.n	801b6e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	32ae      	adds	r2, #174	; 0xae
 801b6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6d8:	78fa      	ldrb	r2, [r7, #3]
 801b6da:	4611      	mov	r1, r2
 801b6dc:	6878      	ldr	r0, [r7, #4]
 801b6de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b6e0:	2300      	movs	r3, #0
}
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	3708      	adds	r7, #8
 801b6e6:	46bd      	mov	sp, r7
 801b6e8:	bd80      	pop	{r7, pc}

0801b6ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801b6ea:	b480      	push	{r7}
 801b6ec:	b083      	sub	sp, #12
 801b6ee:	af00      	add	r7, sp, #0
 801b6f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801b6f2:	2300      	movs	r3, #0
}
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	370c      	adds	r7, #12
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6fe:	4770      	bx	lr

0801b700 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801b700:	b580      	push	{r7, lr}
 801b702:	b084      	sub	sp, #16
 801b704:	af00      	add	r7, sp, #0
 801b706:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801b708:	2300      	movs	r3, #0
 801b70a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	2201      	movs	r2, #1
 801b710:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d00e      	beq.n	801b73c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b724:	685b      	ldr	r3, [r3, #4]
 801b726:	687a      	ldr	r2, [r7, #4]
 801b728:	6852      	ldr	r2, [r2, #4]
 801b72a:	b2d2      	uxtb	r2, r2
 801b72c:	4611      	mov	r1, r2
 801b72e:	6878      	ldr	r0, [r7, #4]
 801b730:	4798      	blx	r3
 801b732:	4603      	mov	r3, r0
 801b734:	2b00      	cmp	r3, #0
 801b736:	d001      	beq.n	801b73c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801b738:	2303      	movs	r3, #3
 801b73a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801b73c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b73e:	4618      	mov	r0, r3
 801b740:	3710      	adds	r7, #16
 801b742:	46bd      	mov	sp, r7
 801b744:	bd80      	pop	{r7, pc}

0801b746 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801b746:	b480      	push	{r7}
 801b748:	b083      	sub	sp, #12
 801b74a:	af00      	add	r7, sp, #0
 801b74c:	6078      	str	r0, [r7, #4]
 801b74e:	460b      	mov	r3, r1
 801b750:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801b752:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801b754:	4618      	mov	r0, r3
 801b756:	370c      	adds	r7, #12
 801b758:	46bd      	mov	sp, r7
 801b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b75e:	4770      	bx	lr

0801b760 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801b760:	b480      	push	{r7}
 801b762:	b083      	sub	sp, #12
 801b764:	af00      	add	r7, sp, #0
 801b766:	6078      	str	r0, [r7, #4]
 801b768:	460b      	mov	r3, r1
 801b76a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801b76c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801b76e:	4618      	mov	r0, r3
 801b770:	370c      	adds	r7, #12
 801b772:	46bd      	mov	sp, r7
 801b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b778:	4770      	bx	lr

0801b77a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801b77a:	b580      	push	{r7, lr}
 801b77c:	b086      	sub	sp, #24
 801b77e:	af00      	add	r7, sp, #0
 801b780:	6078      	str	r0, [r7, #4]
 801b782:	460b      	mov	r3, r1
 801b784:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801b78e:	2300      	movs	r3, #0
 801b790:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	885b      	ldrh	r3, [r3, #2]
 801b796:	b29a      	uxth	r2, r3
 801b798:	68fb      	ldr	r3, [r7, #12]
 801b79a:	781b      	ldrb	r3, [r3, #0]
 801b79c:	b29b      	uxth	r3, r3
 801b79e:	429a      	cmp	r2, r3
 801b7a0:	d920      	bls.n	801b7e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	781b      	ldrb	r3, [r3, #0]
 801b7a6:	b29b      	uxth	r3, r3
 801b7a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801b7aa:	e013      	b.n	801b7d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801b7ac:	f107 030a 	add.w	r3, r7, #10
 801b7b0:	4619      	mov	r1, r3
 801b7b2:	6978      	ldr	r0, [r7, #20]
 801b7b4:	f000 f81b 	bl	801b7ee <USBD_GetNextDesc>
 801b7b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801b7ba:	697b      	ldr	r3, [r7, #20]
 801b7bc:	785b      	ldrb	r3, [r3, #1]
 801b7be:	2b05      	cmp	r3, #5
 801b7c0:	d108      	bne.n	801b7d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801b7c2:	697b      	ldr	r3, [r7, #20]
 801b7c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801b7c6:	693b      	ldr	r3, [r7, #16]
 801b7c8:	789b      	ldrb	r3, [r3, #2]
 801b7ca:	78fa      	ldrb	r2, [r7, #3]
 801b7cc:	429a      	cmp	r2, r3
 801b7ce:	d008      	beq.n	801b7e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801b7d0:	2300      	movs	r3, #0
 801b7d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801b7d4:	68fb      	ldr	r3, [r7, #12]
 801b7d6:	885b      	ldrh	r3, [r3, #2]
 801b7d8:	b29a      	uxth	r2, r3
 801b7da:	897b      	ldrh	r3, [r7, #10]
 801b7dc:	429a      	cmp	r2, r3
 801b7de:	d8e5      	bhi.n	801b7ac <USBD_GetEpDesc+0x32>
 801b7e0:	e000      	b.n	801b7e4 <USBD_GetEpDesc+0x6a>
          break;
 801b7e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801b7e4:	693b      	ldr	r3, [r7, #16]
}
 801b7e6:	4618      	mov	r0, r3
 801b7e8:	3718      	adds	r7, #24
 801b7ea:	46bd      	mov	sp, r7
 801b7ec:	bd80      	pop	{r7, pc}

0801b7ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801b7ee:	b480      	push	{r7}
 801b7f0:	b085      	sub	sp, #20
 801b7f2:	af00      	add	r7, sp, #0
 801b7f4:	6078      	str	r0, [r7, #4]
 801b7f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801b7fc:	683b      	ldr	r3, [r7, #0]
 801b7fe:	881a      	ldrh	r2, [r3, #0]
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	781b      	ldrb	r3, [r3, #0]
 801b804:	b29b      	uxth	r3, r3
 801b806:	4413      	add	r3, r2
 801b808:	b29a      	uxth	r2, r3
 801b80a:	683b      	ldr	r3, [r7, #0]
 801b80c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801b80e:	68fb      	ldr	r3, [r7, #12]
 801b810:	781b      	ldrb	r3, [r3, #0]
 801b812:	461a      	mov	r2, r3
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	4413      	add	r3, r2
 801b818:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801b81a:	68fb      	ldr	r3, [r7, #12]
}
 801b81c:	4618      	mov	r0, r3
 801b81e:	3714      	adds	r7, #20
 801b820:	46bd      	mov	sp, r7
 801b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b826:	4770      	bx	lr

0801b828 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801b828:	b480      	push	{r7}
 801b82a:	b087      	sub	sp, #28
 801b82c:	af00      	add	r7, sp, #0
 801b82e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801b834:	697b      	ldr	r3, [r7, #20]
 801b836:	781b      	ldrb	r3, [r3, #0]
 801b838:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801b83a:	697b      	ldr	r3, [r7, #20]
 801b83c:	3301      	adds	r3, #1
 801b83e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801b840:	697b      	ldr	r3, [r7, #20]
 801b842:	781b      	ldrb	r3, [r3, #0]
 801b844:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801b846:	8a3b      	ldrh	r3, [r7, #16]
 801b848:	021b      	lsls	r3, r3, #8
 801b84a:	b21a      	sxth	r2, r3
 801b84c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b850:	4313      	orrs	r3, r2
 801b852:	b21b      	sxth	r3, r3
 801b854:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801b856:	89fb      	ldrh	r3, [r7, #14]
}
 801b858:	4618      	mov	r0, r3
 801b85a:	371c      	adds	r7, #28
 801b85c:	46bd      	mov	sp, r7
 801b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b862:	4770      	bx	lr

0801b864 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b084      	sub	sp, #16
 801b868:	af00      	add	r7, sp, #0
 801b86a:	6078      	str	r0, [r7, #4]
 801b86c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b86e:	2300      	movs	r3, #0
 801b870:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b872:	683b      	ldr	r3, [r7, #0]
 801b874:	781b      	ldrb	r3, [r3, #0]
 801b876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b87a:	2b40      	cmp	r3, #64	; 0x40
 801b87c:	d005      	beq.n	801b88a <USBD_StdDevReq+0x26>
 801b87e:	2b40      	cmp	r3, #64	; 0x40
 801b880:	d857      	bhi.n	801b932 <USBD_StdDevReq+0xce>
 801b882:	2b00      	cmp	r3, #0
 801b884:	d00f      	beq.n	801b8a6 <USBD_StdDevReq+0x42>
 801b886:	2b20      	cmp	r3, #32
 801b888:	d153      	bne.n	801b932 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	32ae      	adds	r2, #174	; 0xae
 801b894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b898:	689b      	ldr	r3, [r3, #8]
 801b89a:	6839      	ldr	r1, [r7, #0]
 801b89c:	6878      	ldr	r0, [r7, #4]
 801b89e:	4798      	blx	r3
 801b8a0:	4603      	mov	r3, r0
 801b8a2:	73fb      	strb	r3, [r7, #15]
      break;
 801b8a4:	e04a      	b.n	801b93c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b8a6:	683b      	ldr	r3, [r7, #0]
 801b8a8:	785b      	ldrb	r3, [r3, #1]
 801b8aa:	2b09      	cmp	r3, #9
 801b8ac:	d83b      	bhi.n	801b926 <USBD_StdDevReq+0xc2>
 801b8ae:	a201      	add	r2, pc, #4	; (adr r2, 801b8b4 <USBD_StdDevReq+0x50>)
 801b8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8b4:	0801b909 	.word	0x0801b909
 801b8b8:	0801b91d 	.word	0x0801b91d
 801b8bc:	0801b927 	.word	0x0801b927
 801b8c0:	0801b913 	.word	0x0801b913
 801b8c4:	0801b927 	.word	0x0801b927
 801b8c8:	0801b8e7 	.word	0x0801b8e7
 801b8cc:	0801b8dd 	.word	0x0801b8dd
 801b8d0:	0801b927 	.word	0x0801b927
 801b8d4:	0801b8ff 	.word	0x0801b8ff
 801b8d8:	0801b8f1 	.word	0x0801b8f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801b8dc:	6839      	ldr	r1, [r7, #0]
 801b8de:	6878      	ldr	r0, [r7, #4]
 801b8e0:	f000 fa3c 	bl	801bd5c <USBD_GetDescriptor>
          break;
 801b8e4:	e024      	b.n	801b930 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801b8e6:	6839      	ldr	r1, [r7, #0]
 801b8e8:	6878      	ldr	r0, [r7, #4]
 801b8ea:	f000 fba1 	bl	801c030 <USBD_SetAddress>
          break;
 801b8ee:	e01f      	b.n	801b930 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801b8f0:	6839      	ldr	r1, [r7, #0]
 801b8f2:	6878      	ldr	r0, [r7, #4]
 801b8f4:	f000 fbe0 	bl	801c0b8 <USBD_SetConfig>
 801b8f8:	4603      	mov	r3, r0
 801b8fa:	73fb      	strb	r3, [r7, #15]
          break;
 801b8fc:	e018      	b.n	801b930 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801b8fe:	6839      	ldr	r1, [r7, #0]
 801b900:	6878      	ldr	r0, [r7, #4]
 801b902:	f000 fc83 	bl	801c20c <USBD_GetConfig>
          break;
 801b906:	e013      	b.n	801b930 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801b908:	6839      	ldr	r1, [r7, #0]
 801b90a:	6878      	ldr	r0, [r7, #4]
 801b90c:	f000 fcb4 	bl	801c278 <USBD_GetStatus>
          break;
 801b910:	e00e      	b.n	801b930 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801b912:	6839      	ldr	r1, [r7, #0]
 801b914:	6878      	ldr	r0, [r7, #4]
 801b916:	f000 fce3 	bl	801c2e0 <USBD_SetFeature>
          break;
 801b91a:	e009      	b.n	801b930 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801b91c:	6839      	ldr	r1, [r7, #0]
 801b91e:	6878      	ldr	r0, [r7, #4]
 801b920:	f000 fd07 	bl	801c332 <USBD_ClrFeature>
          break;
 801b924:	e004      	b.n	801b930 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801b926:	6839      	ldr	r1, [r7, #0]
 801b928:	6878      	ldr	r0, [r7, #4]
 801b92a:	f000 fd5e 	bl	801c3ea <USBD_CtlError>
          break;
 801b92e:	bf00      	nop
      }
      break;
 801b930:	e004      	b.n	801b93c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801b932:	6839      	ldr	r1, [r7, #0]
 801b934:	6878      	ldr	r0, [r7, #4]
 801b936:	f000 fd58 	bl	801c3ea <USBD_CtlError>
      break;
 801b93a:	bf00      	nop
  }

  return ret;
 801b93c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b93e:	4618      	mov	r0, r3
 801b940:	3710      	adds	r7, #16
 801b942:	46bd      	mov	sp, r7
 801b944:	bd80      	pop	{r7, pc}
 801b946:	bf00      	nop

0801b948 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b948:	b580      	push	{r7, lr}
 801b94a:	b084      	sub	sp, #16
 801b94c:	af00      	add	r7, sp, #0
 801b94e:	6078      	str	r0, [r7, #4]
 801b950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b952:	2300      	movs	r3, #0
 801b954:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b956:	683b      	ldr	r3, [r7, #0]
 801b958:	781b      	ldrb	r3, [r3, #0]
 801b95a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b95e:	2b40      	cmp	r3, #64	; 0x40
 801b960:	d005      	beq.n	801b96e <USBD_StdItfReq+0x26>
 801b962:	2b40      	cmp	r3, #64	; 0x40
 801b964:	d852      	bhi.n	801ba0c <USBD_StdItfReq+0xc4>
 801b966:	2b00      	cmp	r3, #0
 801b968:	d001      	beq.n	801b96e <USBD_StdItfReq+0x26>
 801b96a:	2b20      	cmp	r3, #32
 801b96c:	d14e      	bne.n	801ba0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b974:	b2db      	uxtb	r3, r3
 801b976:	3b01      	subs	r3, #1
 801b978:	2b02      	cmp	r3, #2
 801b97a:	d840      	bhi.n	801b9fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801b97c:	683b      	ldr	r3, [r7, #0]
 801b97e:	889b      	ldrh	r3, [r3, #4]
 801b980:	b2db      	uxtb	r3, r3
 801b982:	2b01      	cmp	r3, #1
 801b984:	d836      	bhi.n	801b9f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801b986:	683b      	ldr	r3, [r7, #0]
 801b988:	889b      	ldrh	r3, [r3, #4]
 801b98a:	b2db      	uxtb	r3, r3
 801b98c:	4619      	mov	r1, r3
 801b98e:	6878      	ldr	r0, [r7, #4]
 801b990:	f7ff fed9 	bl	801b746 <USBD_CoreFindIF>
 801b994:	4603      	mov	r3, r0
 801b996:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b998:	7bbb      	ldrb	r3, [r7, #14]
 801b99a:	2bff      	cmp	r3, #255	; 0xff
 801b99c:	d01d      	beq.n	801b9da <USBD_StdItfReq+0x92>
 801b99e:	7bbb      	ldrb	r3, [r7, #14]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d11a      	bne.n	801b9da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801b9a4:	7bba      	ldrb	r2, [r7, #14]
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	32ae      	adds	r2, #174	; 0xae
 801b9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b9ae:	689b      	ldr	r3, [r3, #8]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d00f      	beq.n	801b9d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801b9b4:	7bba      	ldrb	r2, [r7, #14]
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801b9bc:	7bba      	ldrb	r2, [r7, #14]
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	32ae      	adds	r2, #174	; 0xae
 801b9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b9c6:	689b      	ldr	r3, [r3, #8]
 801b9c8:	6839      	ldr	r1, [r7, #0]
 801b9ca:	6878      	ldr	r0, [r7, #4]
 801b9cc:	4798      	blx	r3
 801b9ce:	4603      	mov	r3, r0
 801b9d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801b9d2:	e004      	b.n	801b9de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801b9d4:	2303      	movs	r3, #3
 801b9d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801b9d8:	e001      	b.n	801b9de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801b9da:	2303      	movs	r3, #3
 801b9dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801b9de:	683b      	ldr	r3, [r7, #0]
 801b9e0:	88db      	ldrh	r3, [r3, #6]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d110      	bne.n	801ba08 <USBD_StdItfReq+0xc0>
 801b9e6:	7bfb      	ldrb	r3, [r7, #15]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d10d      	bne.n	801ba08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801b9ec:	6878      	ldr	r0, [r7, #4]
 801b9ee:	f000 fdc7 	bl	801c580 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801b9f2:	e009      	b.n	801ba08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801b9f4:	6839      	ldr	r1, [r7, #0]
 801b9f6:	6878      	ldr	r0, [r7, #4]
 801b9f8:	f000 fcf7 	bl	801c3ea <USBD_CtlError>
          break;
 801b9fc:	e004      	b.n	801ba08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801b9fe:	6839      	ldr	r1, [r7, #0]
 801ba00:	6878      	ldr	r0, [r7, #4]
 801ba02:	f000 fcf2 	bl	801c3ea <USBD_CtlError>
          break;
 801ba06:	e000      	b.n	801ba0a <USBD_StdItfReq+0xc2>
          break;
 801ba08:	bf00      	nop
      }
      break;
 801ba0a:	e004      	b.n	801ba16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801ba0c:	6839      	ldr	r1, [r7, #0]
 801ba0e:	6878      	ldr	r0, [r7, #4]
 801ba10:	f000 fceb 	bl	801c3ea <USBD_CtlError>
      break;
 801ba14:	bf00      	nop
  }

  return ret;
 801ba16:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba18:	4618      	mov	r0, r3
 801ba1a:	3710      	adds	r7, #16
 801ba1c:	46bd      	mov	sp, r7
 801ba1e:	bd80      	pop	{r7, pc}

0801ba20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ba20:	b580      	push	{r7, lr}
 801ba22:	b084      	sub	sp, #16
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	6078      	str	r0, [r7, #4]
 801ba28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801ba2a:	2300      	movs	r3, #0
 801ba2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801ba2e:	683b      	ldr	r3, [r7, #0]
 801ba30:	889b      	ldrh	r3, [r3, #4]
 801ba32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ba34:	683b      	ldr	r3, [r7, #0]
 801ba36:	781b      	ldrb	r3, [r3, #0]
 801ba38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ba3c:	2b40      	cmp	r3, #64	; 0x40
 801ba3e:	d007      	beq.n	801ba50 <USBD_StdEPReq+0x30>
 801ba40:	2b40      	cmp	r3, #64	; 0x40
 801ba42:	f200 817f 	bhi.w	801bd44 <USBD_StdEPReq+0x324>
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d02a      	beq.n	801baa0 <USBD_StdEPReq+0x80>
 801ba4a:	2b20      	cmp	r3, #32
 801ba4c:	f040 817a 	bne.w	801bd44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801ba50:	7bbb      	ldrb	r3, [r7, #14]
 801ba52:	4619      	mov	r1, r3
 801ba54:	6878      	ldr	r0, [r7, #4]
 801ba56:	f7ff fe83 	bl	801b760 <USBD_CoreFindEP>
 801ba5a:	4603      	mov	r3, r0
 801ba5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801ba5e:	7b7b      	ldrb	r3, [r7, #13]
 801ba60:	2bff      	cmp	r3, #255	; 0xff
 801ba62:	f000 8174 	beq.w	801bd4e <USBD_StdEPReq+0x32e>
 801ba66:	7b7b      	ldrb	r3, [r7, #13]
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	f040 8170 	bne.w	801bd4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801ba6e:	7b7a      	ldrb	r2, [r7, #13]
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801ba76:	7b7a      	ldrb	r2, [r7, #13]
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	32ae      	adds	r2, #174	; 0xae
 801ba7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ba80:	689b      	ldr	r3, [r3, #8]
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	f000 8163 	beq.w	801bd4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801ba88:	7b7a      	ldrb	r2, [r7, #13]
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	32ae      	adds	r2, #174	; 0xae
 801ba8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ba92:	689b      	ldr	r3, [r3, #8]
 801ba94:	6839      	ldr	r1, [r7, #0]
 801ba96:	6878      	ldr	r0, [r7, #4]
 801ba98:	4798      	blx	r3
 801ba9a:	4603      	mov	r3, r0
 801ba9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801ba9e:	e156      	b.n	801bd4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801baa0:	683b      	ldr	r3, [r7, #0]
 801baa2:	785b      	ldrb	r3, [r3, #1]
 801baa4:	2b03      	cmp	r3, #3
 801baa6:	d008      	beq.n	801baba <USBD_StdEPReq+0x9a>
 801baa8:	2b03      	cmp	r3, #3
 801baaa:	f300 8145 	bgt.w	801bd38 <USBD_StdEPReq+0x318>
 801baae:	2b00      	cmp	r3, #0
 801bab0:	f000 809b 	beq.w	801bbea <USBD_StdEPReq+0x1ca>
 801bab4:	2b01      	cmp	r3, #1
 801bab6:	d03c      	beq.n	801bb32 <USBD_StdEPReq+0x112>
 801bab8:	e13e      	b.n	801bd38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bac0:	b2db      	uxtb	r3, r3
 801bac2:	2b02      	cmp	r3, #2
 801bac4:	d002      	beq.n	801bacc <USBD_StdEPReq+0xac>
 801bac6:	2b03      	cmp	r3, #3
 801bac8:	d016      	beq.n	801baf8 <USBD_StdEPReq+0xd8>
 801baca:	e02c      	b.n	801bb26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801bacc:	7bbb      	ldrb	r3, [r7, #14]
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d00d      	beq.n	801baee <USBD_StdEPReq+0xce>
 801bad2:	7bbb      	ldrb	r3, [r7, #14]
 801bad4:	2b80      	cmp	r3, #128	; 0x80
 801bad6:	d00a      	beq.n	801baee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801bad8:	7bbb      	ldrb	r3, [r7, #14]
 801bada:	4619      	mov	r1, r3
 801badc:	6878      	ldr	r0, [r7, #4]
 801bade:	f001 f973 	bl	801cdc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801bae2:	2180      	movs	r1, #128	; 0x80
 801bae4:	6878      	ldr	r0, [r7, #4]
 801bae6:	f001 f96f 	bl	801cdc8 <USBD_LL_StallEP>
 801baea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801baec:	e020      	b.n	801bb30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801baee:	6839      	ldr	r1, [r7, #0]
 801baf0:	6878      	ldr	r0, [r7, #4]
 801baf2:	f000 fc7a 	bl	801c3ea <USBD_CtlError>
              break;
 801baf6:	e01b      	b.n	801bb30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801baf8:	683b      	ldr	r3, [r7, #0]
 801bafa:	885b      	ldrh	r3, [r3, #2]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d10e      	bne.n	801bb1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801bb00:	7bbb      	ldrb	r3, [r7, #14]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d00b      	beq.n	801bb1e <USBD_StdEPReq+0xfe>
 801bb06:	7bbb      	ldrb	r3, [r7, #14]
 801bb08:	2b80      	cmp	r3, #128	; 0x80
 801bb0a:	d008      	beq.n	801bb1e <USBD_StdEPReq+0xfe>
 801bb0c:	683b      	ldr	r3, [r7, #0]
 801bb0e:	88db      	ldrh	r3, [r3, #6]
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d104      	bne.n	801bb1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801bb14:	7bbb      	ldrb	r3, [r7, #14]
 801bb16:	4619      	mov	r1, r3
 801bb18:	6878      	ldr	r0, [r7, #4]
 801bb1a:	f001 f955 	bl	801cdc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801bb1e:	6878      	ldr	r0, [r7, #4]
 801bb20:	f000 fd2e 	bl	801c580 <USBD_CtlSendStatus>

              break;
 801bb24:	e004      	b.n	801bb30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801bb26:	6839      	ldr	r1, [r7, #0]
 801bb28:	6878      	ldr	r0, [r7, #4]
 801bb2a:	f000 fc5e 	bl	801c3ea <USBD_CtlError>
              break;
 801bb2e:	bf00      	nop
          }
          break;
 801bb30:	e107      	b.n	801bd42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bb38:	b2db      	uxtb	r3, r3
 801bb3a:	2b02      	cmp	r3, #2
 801bb3c:	d002      	beq.n	801bb44 <USBD_StdEPReq+0x124>
 801bb3e:	2b03      	cmp	r3, #3
 801bb40:	d016      	beq.n	801bb70 <USBD_StdEPReq+0x150>
 801bb42:	e04b      	b.n	801bbdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801bb44:	7bbb      	ldrb	r3, [r7, #14]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d00d      	beq.n	801bb66 <USBD_StdEPReq+0x146>
 801bb4a:	7bbb      	ldrb	r3, [r7, #14]
 801bb4c:	2b80      	cmp	r3, #128	; 0x80
 801bb4e:	d00a      	beq.n	801bb66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801bb50:	7bbb      	ldrb	r3, [r7, #14]
 801bb52:	4619      	mov	r1, r3
 801bb54:	6878      	ldr	r0, [r7, #4]
 801bb56:	f001 f937 	bl	801cdc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801bb5a:	2180      	movs	r1, #128	; 0x80
 801bb5c:	6878      	ldr	r0, [r7, #4]
 801bb5e:	f001 f933 	bl	801cdc8 <USBD_LL_StallEP>
 801bb62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801bb64:	e040      	b.n	801bbe8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801bb66:	6839      	ldr	r1, [r7, #0]
 801bb68:	6878      	ldr	r0, [r7, #4]
 801bb6a:	f000 fc3e 	bl	801c3ea <USBD_CtlError>
              break;
 801bb6e:	e03b      	b.n	801bbe8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801bb70:	683b      	ldr	r3, [r7, #0]
 801bb72:	885b      	ldrh	r3, [r3, #2]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d136      	bne.n	801bbe6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801bb78:	7bbb      	ldrb	r3, [r7, #14]
 801bb7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d004      	beq.n	801bb8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801bb82:	7bbb      	ldrb	r3, [r7, #14]
 801bb84:	4619      	mov	r1, r3
 801bb86:	6878      	ldr	r0, [r7, #4]
 801bb88:	f001 f93d 	bl	801ce06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801bb8c:	6878      	ldr	r0, [r7, #4]
 801bb8e:	f000 fcf7 	bl	801c580 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801bb92:	7bbb      	ldrb	r3, [r7, #14]
 801bb94:	4619      	mov	r1, r3
 801bb96:	6878      	ldr	r0, [r7, #4]
 801bb98:	f7ff fde2 	bl	801b760 <USBD_CoreFindEP>
 801bb9c:	4603      	mov	r3, r0
 801bb9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801bba0:	7b7b      	ldrb	r3, [r7, #13]
 801bba2:	2bff      	cmp	r3, #255	; 0xff
 801bba4:	d01f      	beq.n	801bbe6 <USBD_StdEPReq+0x1c6>
 801bba6:	7b7b      	ldrb	r3, [r7, #13]
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d11c      	bne.n	801bbe6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801bbac:	7b7a      	ldrb	r2, [r7, #13]
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801bbb4:	7b7a      	ldrb	r2, [r7, #13]
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	32ae      	adds	r2, #174	; 0xae
 801bbba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bbbe:	689b      	ldr	r3, [r3, #8]
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d010      	beq.n	801bbe6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801bbc4:	7b7a      	ldrb	r2, [r7, #13]
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	32ae      	adds	r2, #174	; 0xae
 801bbca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bbce:	689b      	ldr	r3, [r3, #8]
 801bbd0:	6839      	ldr	r1, [r7, #0]
 801bbd2:	6878      	ldr	r0, [r7, #4]
 801bbd4:	4798      	blx	r3
 801bbd6:	4603      	mov	r3, r0
 801bbd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801bbda:	e004      	b.n	801bbe6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801bbdc:	6839      	ldr	r1, [r7, #0]
 801bbde:	6878      	ldr	r0, [r7, #4]
 801bbe0:	f000 fc03 	bl	801c3ea <USBD_CtlError>
              break;
 801bbe4:	e000      	b.n	801bbe8 <USBD_StdEPReq+0x1c8>
              break;
 801bbe6:	bf00      	nop
          }
          break;
 801bbe8:	e0ab      	b.n	801bd42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bbf0:	b2db      	uxtb	r3, r3
 801bbf2:	2b02      	cmp	r3, #2
 801bbf4:	d002      	beq.n	801bbfc <USBD_StdEPReq+0x1dc>
 801bbf6:	2b03      	cmp	r3, #3
 801bbf8:	d032      	beq.n	801bc60 <USBD_StdEPReq+0x240>
 801bbfa:	e097      	b.n	801bd2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801bbfc:	7bbb      	ldrb	r3, [r7, #14]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d007      	beq.n	801bc12 <USBD_StdEPReq+0x1f2>
 801bc02:	7bbb      	ldrb	r3, [r7, #14]
 801bc04:	2b80      	cmp	r3, #128	; 0x80
 801bc06:	d004      	beq.n	801bc12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801bc08:	6839      	ldr	r1, [r7, #0]
 801bc0a:	6878      	ldr	r0, [r7, #4]
 801bc0c:	f000 fbed 	bl	801c3ea <USBD_CtlError>
                break;
 801bc10:	e091      	b.n	801bd36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801bc12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	da0b      	bge.n	801bc32 <USBD_StdEPReq+0x212>
 801bc1a:	7bbb      	ldrb	r3, [r7, #14]
 801bc1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bc20:	4613      	mov	r3, r2
 801bc22:	009b      	lsls	r3, r3, #2
 801bc24:	4413      	add	r3, r2
 801bc26:	009b      	lsls	r3, r3, #2
 801bc28:	3310      	adds	r3, #16
 801bc2a:	687a      	ldr	r2, [r7, #4]
 801bc2c:	4413      	add	r3, r2
 801bc2e:	3304      	adds	r3, #4
 801bc30:	e00b      	b.n	801bc4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801bc32:	7bbb      	ldrb	r3, [r7, #14]
 801bc34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801bc38:	4613      	mov	r3, r2
 801bc3a:	009b      	lsls	r3, r3, #2
 801bc3c:	4413      	add	r3, r2
 801bc3e:	009b      	lsls	r3, r3, #2
 801bc40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801bc44:	687a      	ldr	r2, [r7, #4]
 801bc46:	4413      	add	r3, r2
 801bc48:	3304      	adds	r3, #4
 801bc4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801bc4c:	68bb      	ldr	r3, [r7, #8]
 801bc4e:	2200      	movs	r2, #0
 801bc50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801bc52:	68bb      	ldr	r3, [r7, #8]
 801bc54:	2202      	movs	r2, #2
 801bc56:	4619      	mov	r1, r3
 801bc58:	6878      	ldr	r0, [r7, #4]
 801bc5a:	f000 fc37 	bl	801c4cc <USBD_CtlSendData>
              break;
 801bc5e:	e06a      	b.n	801bd36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801bc60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	da11      	bge.n	801bc8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801bc68:	7bbb      	ldrb	r3, [r7, #14]
 801bc6a:	f003 020f 	and.w	r2, r3, #15
 801bc6e:	6879      	ldr	r1, [r7, #4]
 801bc70:	4613      	mov	r3, r2
 801bc72:	009b      	lsls	r3, r3, #2
 801bc74:	4413      	add	r3, r2
 801bc76:	009b      	lsls	r3, r3, #2
 801bc78:	440b      	add	r3, r1
 801bc7a:	3324      	adds	r3, #36	; 0x24
 801bc7c:	881b      	ldrh	r3, [r3, #0]
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d117      	bne.n	801bcb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801bc82:	6839      	ldr	r1, [r7, #0]
 801bc84:	6878      	ldr	r0, [r7, #4]
 801bc86:	f000 fbb0 	bl	801c3ea <USBD_CtlError>
                  break;
 801bc8a:	e054      	b.n	801bd36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801bc8c:	7bbb      	ldrb	r3, [r7, #14]
 801bc8e:	f003 020f 	and.w	r2, r3, #15
 801bc92:	6879      	ldr	r1, [r7, #4]
 801bc94:	4613      	mov	r3, r2
 801bc96:	009b      	lsls	r3, r3, #2
 801bc98:	4413      	add	r3, r2
 801bc9a:	009b      	lsls	r3, r3, #2
 801bc9c:	440b      	add	r3, r1
 801bc9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801bca2:	881b      	ldrh	r3, [r3, #0]
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d104      	bne.n	801bcb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801bca8:	6839      	ldr	r1, [r7, #0]
 801bcaa:	6878      	ldr	r0, [r7, #4]
 801bcac:	f000 fb9d 	bl	801c3ea <USBD_CtlError>
                  break;
 801bcb0:	e041      	b.n	801bd36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801bcb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	da0b      	bge.n	801bcd2 <USBD_StdEPReq+0x2b2>
 801bcba:	7bbb      	ldrb	r3, [r7, #14]
 801bcbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bcc0:	4613      	mov	r3, r2
 801bcc2:	009b      	lsls	r3, r3, #2
 801bcc4:	4413      	add	r3, r2
 801bcc6:	009b      	lsls	r3, r3, #2
 801bcc8:	3310      	adds	r3, #16
 801bcca:	687a      	ldr	r2, [r7, #4]
 801bccc:	4413      	add	r3, r2
 801bcce:	3304      	adds	r3, #4
 801bcd0:	e00b      	b.n	801bcea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801bcd2:	7bbb      	ldrb	r3, [r7, #14]
 801bcd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801bcd8:	4613      	mov	r3, r2
 801bcda:	009b      	lsls	r3, r3, #2
 801bcdc:	4413      	add	r3, r2
 801bcde:	009b      	lsls	r3, r3, #2
 801bce0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801bce4:	687a      	ldr	r2, [r7, #4]
 801bce6:	4413      	add	r3, r2
 801bce8:	3304      	adds	r3, #4
 801bcea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801bcec:	7bbb      	ldrb	r3, [r7, #14]
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d002      	beq.n	801bcf8 <USBD_StdEPReq+0x2d8>
 801bcf2:	7bbb      	ldrb	r3, [r7, #14]
 801bcf4:	2b80      	cmp	r3, #128	; 0x80
 801bcf6:	d103      	bne.n	801bd00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801bcf8:	68bb      	ldr	r3, [r7, #8]
 801bcfa:	2200      	movs	r2, #0
 801bcfc:	601a      	str	r2, [r3, #0]
 801bcfe:	e00e      	b.n	801bd1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801bd00:	7bbb      	ldrb	r3, [r7, #14]
 801bd02:	4619      	mov	r1, r3
 801bd04:	6878      	ldr	r0, [r7, #4]
 801bd06:	f001 f89d 	bl	801ce44 <USBD_LL_IsStallEP>
 801bd0a:	4603      	mov	r3, r0
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d003      	beq.n	801bd18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801bd10:	68bb      	ldr	r3, [r7, #8]
 801bd12:	2201      	movs	r2, #1
 801bd14:	601a      	str	r2, [r3, #0]
 801bd16:	e002      	b.n	801bd1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801bd18:	68bb      	ldr	r3, [r7, #8]
 801bd1a:	2200      	movs	r2, #0
 801bd1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801bd1e:	68bb      	ldr	r3, [r7, #8]
 801bd20:	2202      	movs	r2, #2
 801bd22:	4619      	mov	r1, r3
 801bd24:	6878      	ldr	r0, [r7, #4]
 801bd26:	f000 fbd1 	bl	801c4cc <USBD_CtlSendData>
              break;
 801bd2a:	e004      	b.n	801bd36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801bd2c:	6839      	ldr	r1, [r7, #0]
 801bd2e:	6878      	ldr	r0, [r7, #4]
 801bd30:	f000 fb5b 	bl	801c3ea <USBD_CtlError>
              break;
 801bd34:	bf00      	nop
          }
          break;
 801bd36:	e004      	b.n	801bd42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801bd38:	6839      	ldr	r1, [r7, #0]
 801bd3a:	6878      	ldr	r0, [r7, #4]
 801bd3c:	f000 fb55 	bl	801c3ea <USBD_CtlError>
          break;
 801bd40:	bf00      	nop
      }
      break;
 801bd42:	e005      	b.n	801bd50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801bd44:	6839      	ldr	r1, [r7, #0]
 801bd46:	6878      	ldr	r0, [r7, #4]
 801bd48:	f000 fb4f 	bl	801c3ea <USBD_CtlError>
      break;
 801bd4c:	e000      	b.n	801bd50 <USBD_StdEPReq+0x330>
      break;
 801bd4e:	bf00      	nop
  }

  return ret;
 801bd50:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd52:	4618      	mov	r0, r3
 801bd54:	3710      	adds	r7, #16
 801bd56:	46bd      	mov	sp, r7
 801bd58:	bd80      	pop	{r7, pc}
	...

0801bd5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bd5c:	b580      	push	{r7, lr}
 801bd5e:	b084      	sub	sp, #16
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	6078      	str	r0, [r7, #4]
 801bd64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801bd66:	2300      	movs	r3, #0
 801bd68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801bd6a:	2300      	movs	r3, #0
 801bd6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801bd6e:	2300      	movs	r3, #0
 801bd70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801bd72:	683b      	ldr	r3, [r7, #0]
 801bd74:	885b      	ldrh	r3, [r3, #2]
 801bd76:	0a1b      	lsrs	r3, r3, #8
 801bd78:	b29b      	uxth	r3, r3
 801bd7a:	3b01      	subs	r3, #1
 801bd7c:	2b06      	cmp	r3, #6
 801bd7e:	f200 8128 	bhi.w	801bfd2 <USBD_GetDescriptor+0x276>
 801bd82:	a201      	add	r2, pc, #4	; (adr r2, 801bd88 <USBD_GetDescriptor+0x2c>)
 801bd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd88:	0801bda5 	.word	0x0801bda5
 801bd8c:	0801bdbd 	.word	0x0801bdbd
 801bd90:	0801bdfd 	.word	0x0801bdfd
 801bd94:	0801bfd3 	.word	0x0801bfd3
 801bd98:	0801bfd3 	.word	0x0801bfd3
 801bd9c:	0801bf73 	.word	0x0801bf73
 801bda0:	0801bf9f 	.word	0x0801bf9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	687a      	ldr	r2, [r7, #4]
 801bdae:	7c12      	ldrb	r2, [r2, #16]
 801bdb0:	f107 0108 	add.w	r1, r7, #8
 801bdb4:	4610      	mov	r0, r2
 801bdb6:	4798      	blx	r3
 801bdb8:	60f8      	str	r0, [r7, #12]
      break;
 801bdba:	e112      	b.n	801bfe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	7c1b      	ldrb	r3, [r3, #16]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d10d      	bne.n	801bde0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bdca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bdcc:	f107 0208 	add.w	r2, r7, #8
 801bdd0:	4610      	mov	r0, r2
 801bdd2:	4798      	blx	r3
 801bdd4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	3301      	adds	r3, #1
 801bdda:	2202      	movs	r2, #2
 801bddc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801bdde:	e100      	b.n	801bfe2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bde8:	f107 0208 	add.w	r2, r7, #8
 801bdec:	4610      	mov	r0, r2
 801bdee:	4798      	blx	r3
 801bdf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	3301      	adds	r3, #1
 801bdf6:	2202      	movs	r2, #2
 801bdf8:	701a      	strb	r2, [r3, #0]
      break;
 801bdfa:	e0f2      	b.n	801bfe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801bdfc:	683b      	ldr	r3, [r7, #0]
 801bdfe:	885b      	ldrh	r3, [r3, #2]
 801be00:	b2db      	uxtb	r3, r3
 801be02:	2b05      	cmp	r3, #5
 801be04:	f200 80ac 	bhi.w	801bf60 <USBD_GetDescriptor+0x204>
 801be08:	a201      	add	r2, pc, #4	; (adr r2, 801be10 <USBD_GetDescriptor+0xb4>)
 801be0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be0e:	bf00      	nop
 801be10:	0801be29 	.word	0x0801be29
 801be14:	0801be5d 	.word	0x0801be5d
 801be18:	0801be91 	.word	0x0801be91
 801be1c:	0801bec5 	.word	0x0801bec5
 801be20:	0801bef9 	.word	0x0801bef9
 801be24:	0801bf2d 	.word	0x0801bf2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801be2e:	685b      	ldr	r3, [r3, #4]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d00b      	beq.n	801be4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801be3a:	685b      	ldr	r3, [r3, #4]
 801be3c:	687a      	ldr	r2, [r7, #4]
 801be3e:	7c12      	ldrb	r2, [r2, #16]
 801be40:	f107 0108 	add.w	r1, r7, #8
 801be44:	4610      	mov	r0, r2
 801be46:	4798      	blx	r3
 801be48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801be4a:	e091      	b.n	801bf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801be4c:	6839      	ldr	r1, [r7, #0]
 801be4e:	6878      	ldr	r0, [r7, #4]
 801be50:	f000 facb 	bl	801c3ea <USBD_CtlError>
            err++;
 801be54:	7afb      	ldrb	r3, [r7, #11]
 801be56:	3301      	adds	r3, #1
 801be58:	72fb      	strb	r3, [r7, #11]
          break;
 801be5a:	e089      	b.n	801bf70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801be62:	689b      	ldr	r3, [r3, #8]
 801be64:	2b00      	cmp	r3, #0
 801be66:	d00b      	beq.n	801be80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801be6e:	689b      	ldr	r3, [r3, #8]
 801be70:	687a      	ldr	r2, [r7, #4]
 801be72:	7c12      	ldrb	r2, [r2, #16]
 801be74:	f107 0108 	add.w	r1, r7, #8
 801be78:	4610      	mov	r0, r2
 801be7a:	4798      	blx	r3
 801be7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801be7e:	e077      	b.n	801bf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801be80:	6839      	ldr	r1, [r7, #0]
 801be82:	6878      	ldr	r0, [r7, #4]
 801be84:	f000 fab1 	bl	801c3ea <USBD_CtlError>
            err++;
 801be88:	7afb      	ldrb	r3, [r7, #11]
 801be8a:	3301      	adds	r3, #1
 801be8c:	72fb      	strb	r3, [r7, #11]
          break;
 801be8e:	e06f      	b.n	801bf70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801be96:	68db      	ldr	r3, [r3, #12]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d00b      	beq.n	801beb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bea2:	68db      	ldr	r3, [r3, #12]
 801bea4:	687a      	ldr	r2, [r7, #4]
 801bea6:	7c12      	ldrb	r2, [r2, #16]
 801bea8:	f107 0108 	add.w	r1, r7, #8
 801beac:	4610      	mov	r0, r2
 801beae:	4798      	blx	r3
 801beb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801beb2:	e05d      	b.n	801bf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801beb4:	6839      	ldr	r1, [r7, #0]
 801beb6:	6878      	ldr	r0, [r7, #4]
 801beb8:	f000 fa97 	bl	801c3ea <USBD_CtlError>
            err++;
 801bebc:	7afb      	ldrb	r3, [r7, #11]
 801bebe:	3301      	adds	r3, #1
 801bec0:	72fb      	strb	r3, [r7, #11]
          break;
 801bec2:	e055      	b.n	801bf70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801beca:	691b      	ldr	r3, [r3, #16]
 801becc:	2b00      	cmp	r3, #0
 801bece:	d00b      	beq.n	801bee8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bed6:	691b      	ldr	r3, [r3, #16]
 801bed8:	687a      	ldr	r2, [r7, #4]
 801beda:	7c12      	ldrb	r2, [r2, #16]
 801bedc:	f107 0108 	add.w	r1, r7, #8
 801bee0:	4610      	mov	r0, r2
 801bee2:	4798      	blx	r3
 801bee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bee6:	e043      	b.n	801bf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bee8:	6839      	ldr	r1, [r7, #0]
 801beea:	6878      	ldr	r0, [r7, #4]
 801beec:	f000 fa7d 	bl	801c3ea <USBD_CtlError>
            err++;
 801bef0:	7afb      	ldrb	r3, [r7, #11]
 801bef2:	3301      	adds	r3, #1
 801bef4:	72fb      	strb	r3, [r7, #11]
          break;
 801bef6:	e03b      	b.n	801bf70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801befe:	695b      	ldr	r3, [r3, #20]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d00b      	beq.n	801bf1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bf0a:	695b      	ldr	r3, [r3, #20]
 801bf0c:	687a      	ldr	r2, [r7, #4]
 801bf0e:	7c12      	ldrb	r2, [r2, #16]
 801bf10:	f107 0108 	add.w	r1, r7, #8
 801bf14:	4610      	mov	r0, r2
 801bf16:	4798      	blx	r3
 801bf18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bf1a:	e029      	b.n	801bf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bf1c:	6839      	ldr	r1, [r7, #0]
 801bf1e:	6878      	ldr	r0, [r7, #4]
 801bf20:	f000 fa63 	bl	801c3ea <USBD_CtlError>
            err++;
 801bf24:	7afb      	ldrb	r3, [r7, #11]
 801bf26:	3301      	adds	r3, #1
 801bf28:	72fb      	strb	r3, [r7, #11]
          break;
 801bf2a:	e021      	b.n	801bf70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bf32:	699b      	ldr	r3, [r3, #24]
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d00b      	beq.n	801bf50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bf3e:	699b      	ldr	r3, [r3, #24]
 801bf40:	687a      	ldr	r2, [r7, #4]
 801bf42:	7c12      	ldrb	r2, [r2, #16]
 801bf44:	f107 0108 	add.w	r1, r7, #8
 801bf48:	4610      	mov	r0, r2
 801bf4a:	4798      	blx	r3
 801bf4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bf4e:	e00f      	b.n	801bf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bf50:	6839      	ldr	r1, [r7, #0]
 801bf52:	6878      	ldr	r0, [r7, #4]
 801bf54:	f000 fa49 	bl	801c3ea <USBD_CtlError>
            err++;
 801bf58:	7afb      	ldrb	r3, [r7, #11]
 801bf5a:	3301      	adds	r3, #1
 801bf5c:	72fb      	strb	r3, [r7, #11]
          break;
 801bf5e:	e007      	b.n	801bf70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801bf60:	6839      	ldr	r1, [r7, #0]
 801bf62:	6878      	ldr	r0, [r7, #4]
 801bf64:	f000 fa41 	bl	801c3ea <USBD_CtlError>
          err++;
 801bf68:	7afb      	ldrb	r3, [r7, #11]
 801bf6a:	3301      	adds	r3, #1
 801bf6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801bf6e:	bf00      	nop
      }
      break;
 801bf70:	e037      	b.n	801bfe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	7c1b      	ldrb	r3, [r3, #16]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d109      	bne.n	801bf8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bf80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bf82:	f107 0208 	add.w	r2, r7, #8
 801bf86:	4610      	mov	r0, r2
 801bf88:	4798      	blx	r3
 801bf8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bf8c:	e029      	b.n	801bfe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801bf8e:	6839      	ldr	r1, [r7, #0]
 801bf90:	6878      	ldr	r0, [r7, #4]
 801bf92:	f000 fa2a 	bl	801c3ea <USBD_CtlError>
        err++;
 801bf96:	7afb      	ldrb	r3, [r7, #11]
 801bf98:	3301      	adds	r3, #1
 801bf9a:	72fb      	strb	r3, [r7, #11]
      break;
 801bf9c:	e021      	b.n	801bfe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	7c1b      	ldrb	r3, [r3, #16]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d10d      	bne.n	801bfc2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfae:	f107 0208 	add.w	r2, r7, #8
 801bfb2:	4610      	mov	r0, r2
 801bfb4:	4798      	blx	r3
 801bfb6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801bfb8:	68fb      	ldr	r3, [r7, #12]
 801bfba:	3301      	adds	r3, #1
 801bfbc:	2207      	movs	r2, #7
 801bfbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bfc0:	e00f      	b.n	801bfe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801bfc2:	6839      	ldr	r1, [r7, #0]
 801bfc4:	6878      	ldr	r0, [r7, #4]
 801bfc6:	f000 fa10 	bl	801c3ea <USBD_CtlError>
        err++;
 801bfca:	7afb      	ldrb	r3, [r7, #11]
 801bfcc:	3301      	adds	r3, #1
 801bfce:	72fb      	strb	r3, [r7, #11]
      break;
 801bfd0:	e007      	b.n	801bfe2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801bfd2:	6839      	ldr	r1, [r7, #0]
 801bfd4:	6878      	ldr	r0, [r7, #4]
 801bfd6:	f000 fa08 	bl	801c3ea <USBD_CtlError>
      err++;
 801bfda:	7afb      	ldrb	r3, [r7, #11]
 801bfdc:	3301      	adds	r3, #1
 801bfde:	72fb      	strb	r3, [r7, #11]
      break;
 801bfe0:	bf00      	nop
  }

  if (err != 0U)
 801bfe2:	7afb      	ldrb	r3, [r7, #11]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d11e      	bne.n	801c026 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801bfe8:	683b      	ldr	r3, [r7, #0]
 801bfea:	88db      	ldrh	r3, [r3, #6]
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d016      	beq.n	801c01e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801bff0:	893b      	ldrh	r3, [r7, #8]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d00e      	beq.n	801c014 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801bff6:	683b      	ldr	r3, [r7, #0]
 801bff8:	88da      	ldrh	r2, [r3, #6]
 801bffa:	893b      	ldrh	r3, [r7, #8]
 801bffc:	4293      	cmp	r3, r2
 801bffe:	bf28      	it	cs
 801c000:	4613      	movcs	r3, r2
 801c002:	b29b      	uxth	r3, r3
 801c004:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801c006:	893b      	ldrh	r3, [r7, #8]
 801c008:	461a      	mov	r2, r3
 801c00a:	68f9      	ldr	r1, [r7, #12]
 801c00c:	6878      	ldr	r0, [r7, #4]
 801c00e:	f000 fa5d 	bl	801c4cc <USBD_CtlSendData>
 801c012:	e009      	b.n	801c028 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801c014:	6839      	ldr	r1, [r7, #0]
 801c016:	6878      	ldr	r0, [r7, #4]
 801c018:	f000 f9e7 	bl	801c3ea <USBD_CtlError>
 801c01c:	e004      	b.n	801c028 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801c01e:	6878      	ldr	r0, [r7, #4]
 801c020:	f000 faae 	bl	801c580 <USBD_CtlSendStatus>
 801c024:	e000      	b.n	801c028 <USBD_GetDescriptor+0x2cc>
    return;
 801c026:	bf00      	nop
  }
}
 801c028:	3710      	adds	r7, #16
 801c02a:	46bd      	mov	sp, r7
 801c02c:	bd80      	pop	{r7, pc}
 801c02e:	bf00      	nop

0801c030 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c030:	b580      	push	{r7, lr}
 801c032:	b084      	sub	sp, #16
 801c034:	af00      	add	r7, sp, #0
 801c036:	6078      	str	r0, [r7, #4]
 801c038:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801c03a:	683b      	ldr	r3, [r7, #0]
 801c03c:	889b      	ldrh	r3, [r3, #4]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d131      	bne.n	801c0a6 <USBD_SetAddress+0x76>
 801c042:	683b      	ldr	r3, [r7, #0]
 801c044:	88db      	ldrh	r3, [r3, #6]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d12d      	bne.n	801c0a6 <USBD_SetAddress+0x76>
 801c04a:	683b      	ldr	r3, [r7, #0]
 801c04c:	885b      	ldrh	r3, [r3, #2]
 801c04e:	2b7f      	cmp	r3, #127	; 0x7f
 801c050:	d829      	bhi.n	801c0a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801c052:	683b      	ldr	r3, [r7, #0]
 801c054:	885b      	ldrh	r3, [r3, #2]
 801c056:	b2db      	uxtb	r3, r3
 801c058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c05c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c064:	b2db      	uxtb	r3, r3
 801c066:	2b03      	cmp	r3, #3
 801c068:	d104      	bne.n	801c074 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801c06a:	6839      	ldr	r1, [r7, #0]
 801c06c:	6878      	ldr	r0, [r7, #4]
 801c06e:	f000 f9bc 	bl	801c3ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c072:	e01d      	b.n	801c0b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	7bfa      	ldrb	r2, [r7, #15]
 801c078:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801c07c:	7bfb      	ldrb	r3, [r7, #15]
 801c07e:	4619      	mov	r1, r3
 801c080:	6878      	ldr	r0, [r7, #4]
 801c082:	f000 ff0b 	bl	801ce9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801c086:	6878      	ldr	r0, [r7, #4]
 801c088:	f000 fa7a 	bl	801c580 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801c08c:	7bfb      	ldrb	r3, [r7, #15]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d004      	beq.n	801c09c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	2202      	movs	r2, #2
 801c096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c09a:	e009      	b.n	801c0b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	2201      	movs	r2, #1
 801c0a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c0a4:	e004      	b.n	801c0b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801c0a6:	6839      	ldr	r1, [r7, #0]
 801c0a8:	6878      	ldr	r0, [r7, #4]
 801c0aa:	f000 f99e 	bl	801c3ea <USBD_CtlError>
  }
}
 801c0ae:	bf00      	nop
 801c0b0:	bf00      	nop
 801c0b2:	3710      	adds	r7, #16
 801c0b4:	46bd      	mov	sp, r7
 801c0b6:	bd80      	pop	{r7, pc}

0801c0b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c0b8:	b580      	push	{r7, lr}
 801c0ba:	b084      	sub	sp, #16
 801c0bc:	af00      	add	r7, sp, #0
 801c0be:	6078      	str	r0, [r7, #4]
 801c0c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c0c2:	2300      	movs	r3, #0
 801c0c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801c0c6:	683b      	ldr	r3, [r7, #0]
 801c0c8:	885b      	ldrh	r3, [r3, #2]
 801c0ca:	b2da      	uxtb	r2, r3
 801c0cc:	4b4e      	ldr	r3, [pc, #312]	; (801c208 <USBD_SetConfig+0x150>)
 801c0ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801c0d0:	4b4d      	ldr	r3, [pc, #308]	; (801c208 <USBD_SetConfig+0x150>)
 801c0d2:	781b      	ldrb	r3, [r3, #0]
 801c0d4:	2b01      	cmp	r3, #1
 801c0d6:	d905      	bls.n	801c0e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801c0d8:	6839      	ldr	r1, [r7, #0]
 801c0da:	6878      	ldr	r0, [r7, #4]
 801c0dc:	f000 f985 	bl	801c3ea <USBD_CtlError>
    return USBD_FAIL;
 801c0e0:	2303      	movs	r3, #3
 801c0e2:	e08c      	b.n	801c1fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c0ea:	b2db      	uxtb	r3, r3
 801c0ec:	2b02      	cmp	r3, #2
 801c0ee:	d002      	beq.n	801c0f6 <USBD_SetConfig+0x3e>
 801c0f0:	2b03      	cmp	r3, #3
 801c0f2:	d029      	beq.n	801c148 <USBD_SetConfig+0x90>
 801c0f4:	e075      	b.n	801c1e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801c0f6:	4b44      	ldr	r3, [pc, #272]	; (801c208 <USBD_SetConfig+0x150>)
 801c0f8:	781b      	ldrb	r3, [r3, #0]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d020      	beq.n	801c140 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801c0fe:	4b42      	ldr	r3, [pc, #264]	; (801c208 <USBD_SetConfig+0x150>)
 801c100:	781b      	ldrb	r3, [r3, #0]
 801c102:	461a      	mov	r2, r3
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801c108:	4b3f      	ldr	r3, [pc, #252]	; (801c208 <USBD_SetConfig+0x150>)
 801c10a:	781b      	ldrb	r3, [r3, #0]
 801c10c:	4619      	mov	r1, r3
 801c10e:	6878      	ldr	r0, [r7, #4]
 801c110:	f7fe ffe7 	bl	801b0e2 <USBD_SetClassConfig>
 801c114:	4603      	mov	r3, r0
 801c116:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801c118:	7bfb      	ldrb	r3, [r7, #15]
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	d008      	beq.n	801c130 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801c11e:	6839      	ldr	r1, [r7, #0]
 801c120:	6878      	ldr	r0, [r7, #4]
 801c122:	f000 f962 	bl	801c3ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	2202      	movs	r2, #2
 801c12a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801c12e:	e065      	b.n	801c1fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801c130:	6878      	ldr	r0, [r7, #4]
 801c132:	f000 fa25 	bl	801c580 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	2203      	movs	r2, #3
 801c13a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801c13e:	e05d      	b.n	801c1fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801c140:	6878      	ldr	r0, [r7, #4]
 801c142:	f000 fa1d 	bl	801c580 <USBD_CtlSendStatus>
      break;
 801c146:	e059      	b.n	801c1fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801c148:	4b2f      	ldr	r3, [pc, #188]	; (801c208 <USBD_SetConfig+0x150>)
 801c14a:	781b      	ldrb	r3, [r3, #0]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d112      	bne.n	801c176 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	2202      	movs	r2, #2
 801c154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801c158:	4b2b      	ldr	r3, [pc, #172]	; (801c208 <USBD_SetConfig+0x150>)
 801c15a:	781b      	ldrb	r3, [r3, #0]
 801c15c:	461a      	mov	r2, r3
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801c162:	4b29      	ldr	r3, [pc, #164]	; (801c208 <USBD_SetConfig+0x150>)
 801c164:	781b      	ldrb	r3, [r3, #0]
 801c166:	4619      	mov	r1, r3
 801c168:	6878      	ldr	r0, [r7, #4]
 801c16a:	f7fe ffd6 	bl	801b11a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801c16e:	6878      	ldr	r0, [r7, #4]
 801c170:	f000 fa06 	bl	801c580 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801c174:	e042      	b.n	801c1fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801c176:	4b24      	ldr	r3, [pc, #144]	; (801c208 <USBD_SetConfig+0x150>)
 801c178:	781b      	ldrb	r3, [r3, #0]
 801c17a:	461a      	mov	r2, r3
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	685b      	ldr	r3, [r3, #4]
 801c180:	429a      	cmp	r2, r3
 801c182:	d02a      	beq.n	801c1da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	685b      	ldr	r3, [r3, #4]
 801c188:	b2db      	uxtb	r3, r3
 801c18a:	4619      	mov	r1, r3
 801c18c:	6878      	ldr	r0, [r7, #4]
 801c18e:	f7fe ffc4 	bl	801b11a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801c192:	4b1d      	ldr	r3, [pc, #116]	; (801c208 <USBD_SetConfig+0x150>)
 801c194:	781b      	ldrb	r3, [r3, #0]
 801c196:	461a      	mov	r2, r3
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801c19c:	4b1a      	ldr	r3, [pc, #104]	; (801c208 <USBD_SetConfig+0x150>)
 801c19e:	781b      	ldrb	r3, [r3, #0]
 801c1a0:	4619      	mov	r1, r3
 801c1a2:	6878      	ldr	r0, [r7, #4]
 801c1a4:	f7fe ff9d 	bl	801b0e2 <USBD_SetClassConfig>
 801c1a8:	4603      	mov	r3, r0
 801c1aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801c1ac:	7bfb      	ldrb	r3, [r7, #15]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d00f      	beq.n	801c1d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801c1b2:	6839      	ldr	r1, [r7, #0]
 801c1b4:	6878      	ldr	r0, [r7, #4]
 801c1b6:	f000 f918 	bl	801c3ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	685b      	ldr	r3, [r3, #4]
 801c1be:	b2db      	uxtb	r3, r3
 801c1c0:	4619      	mov	r1, r3
 801c1c2:	6878      	ldr	r0, [r7, #4]
 801c1c4:	f7fe ffa9 	bl	801b11a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	2202      	movs	r2, #2
 801c1cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801c1d0:	e014      	b.n	801c1fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801c1d2:	6878      	ldr	r0, [r7, #4]
 801c1d4:	f000 f9d4 	bl	801c580 <USBD_CtlSendStatus>
      break;
 801c1d8:	e010      	b.n	801c1fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801c1da:	6878      	ldr	r0, [r7, #4]
 801c1dc:	f000 f9d0 	bl	801c580 <USBD_CtlSendStatus>
      break;
 801c1e0:	e00c      	b.n	801c1fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801c1e2:	6839      	ldr	r1, [r7, #0]
 801c1e4:	6878      	ldr	r0, [r7, #4]
 801c1e6:	f000 f900 	bl	801c3ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801c1ea:	4b07      	ldr	r3, [pc, #28]	; (801c208 <USBD_SetConfig+0x150>)
 801c1ec:	781b      	ldrb	r3, [r3, #0]
 801c1ee:	4619      	mov	r1, r3
 801c1f0:	6878      	ldr	r0, [r7, #4]
 801c1f2:	f7fe ff92 	bl	801b11a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801c1f6:	2303      	movs	r3, #3
 801c1f8:	73fb      	strb	r3, [r7, #15]
      break;
 801c1fa:	bf00      	nop
  }

  return ret;
 801c1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c1fe:	4618      	mov	r0, r3
 801c200:	3710      	adds	r7, #16
 801c202:	46bd      	mov	sp, r7
 801c204:	bd80      	pop	{r7, pc}
 801c206:	bf00      	nop
 801c208:	24001b48 	.word	0x24001b48

0801c20c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b082      	sub	sp, #8
 801c210:	af00      	add	r7, sp, #0
 801c212:	6078      	str	r0, [r7, #4]
 801c214:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801c216:	683b      	ldr	r3, [r7, #0]
 801c218:	88db      	ldrh	r3, [r3, #6]
 801c21a:	2b01      	cmp	r3, #1
 801c21c:	d004      	beq.n	801c228 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801c21e:	6839      	ldr	r1, [r7, #0]
 801c220:	6878      	ldr	r0, [r7, #4]
 801c222:	f000 f8e2 	bl	801c3ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801c226:	e023      	b.n	801c270 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c22e:	b2db      	uxtb	r3, r3
 801c230:	2b02      	cmp	r3, #2
 801c232:	dc02      	bgt.n	801c23a <USBD_GetConfig+0x2e>
 801c234:	2b00      	cmp	r3, #0
 801c236:	dc03      	bgt.n	801c240 <USBD_GetConfig+0x34>
 801c238:	e015      	b.n	801c266 <USBD_GetConfig+0x5a>
 801c23a:	2b03      	cmp	r3, #3
 801c23c:	d00b      	beq.n	801c256 <USBD_GetConfig+0x4a>
 801c23e:	e012      	b.n	801c266 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	2200      	movs	r2, #0
 801c244:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	3308      	adds	r3, #8
 801c24a:	2201      	movs	r2, #1
 801c24c:	4619      	mov	r1, r3
 801c24e:	6878      	ldr	r0, [r7, #4]
 801c250:	f000 f93c 	bl	801c4cc <USBD_CtlSendData>
        break;
 801c254:	e00c      	b.n	801c270 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	3304      	adds	r3, #4
 801c25a:	2201      	movs	r2, #1
 801c25c:	4619      	mov	r1, r3
 801c25e:	6878      	ldr	r0, [r7, #4]
 801c260:	f000 f934 	bl	801c4cc <USBD_CtlSendData>
        break;
 801c264:	e004      	b.n	801c270 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801c266:	6839      	ldr	r1, [r7, #0]
 801c268:	6878      	ldr	r0, [r7, #4]
 801c26a:	f000 f8be 	bl	801c3ea <USBD_CtlError>
        break;
 801c26e:	bf00      	nop
}
 801c270:	bf00      	nop
 801c272:	3708      	adds	r7, #8
 801c274:	46bd      	mov	sp, r7
 801c276:	bd80      	pop	{r7, pc}

0801c278 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c278:	b580      	push	{r7, lr}
 801c27a:	b082      	sub	sp, #8
 801c27c:	af00      	add	r7, sp, #0
 801c27e:	6078      	str	r0, [r7, #4]
 801c280:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c288:	b2db      	uxtb	r3, r3
 801c28a:	3b01      	subs	r3, #1
 801c28c:	2b02      	cmp	r3, #2
 801c28e:	d81e      	bhi.n	801c2ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801c290:	683b      	ldr	r3, [r7, #0]
 801c292:	88db      	ldrh	r3, [r3, #6]
 801c294:	2b02      	cmp	r3, #2
 801c296:	d004      	beq.n	801c2a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801c298:	6839      	ldr	r1, [r7, #0]
 801c29a:	6878      	ldr	r0, [r7, #4]
 801c29c:	f000 f8a5 	bl	801c3ea <USBD_CtlError>
        break;
 801c2a0:	e01a      	b.n	801c2d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	2201      	movs	r2, #1
 801c2a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d005      	beq.n	801c2be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	68db      	ldr	r3, [r3, #12]
 801c2b6:	f043 0202 	orr.w	r2, r3, #2
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	330c      	adds	r3, #12
 801c2c2:	2202      	movs	r2, #2
 801c2c4:	4619      	mov	r1, r3
 801c2c6:	6878      	ldr	r0, [r7, #4]
 801c2c8:	f000 f900 	bl	801c4cc <USBD_CtlSendData>
      break;
 801c2cc:	e004      	b.n	801c2d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801c2ce:	6839      	ldr	r1, [r7, #0]
 801c2d0:	6878      	ldr	r0, [r7, #4]
 801c2d2:	f000 f88a 	bl	801c3ea <USBD_CtlError>
      break;
 801c2d6:	bf00      	nop
  }
}
 801c2d8:	bf00      	nop
 801c2da:	3708      	adds	r7, #8
 801c2dc:	46bd      	mov	sp, r7
 801c2de:	bd80      	pop	{r7, pc}

0801c2e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c2e0:	b580      	push	{r7, lr}
 801c2e2:	b082      	sub	sp, #8
 801c2e4:	af00      	add	r7, sp, #0
 801c2e6:	6078      	str	r0, [r7, #4]
 801c2e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c2ea:	683b      	ldr	r3, [r7, #0]
 801c2ec:	885b      	ldrh	r3, [r3, #2]
 801c2ee:	2b01      	cmp	r3, #1
 801c2f0:	d107      	bne.n	801c302 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	2201      	movs	r2, #1
 801c2f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801c2fa:	6878      	ldr	r0, [r7, #4]
 801c2fc:	f000 f940 	bl	801c580 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801c300:	e013      	b.n	801c32a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801c302:	683b      	ldr	r3, [r7, #0]
 801c304:	885b      	ldrh	r3, [r3, #2]
 801c306:	2b02      	cmp	r3, #2
 801c308:	d10b      	bne.n	801c322 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801c30a:	683b      	ldr	r3, [r7, #0]
 801c30c:	889b      	ldrh	r3, [r3, #4]
 801c30e:	0a1b      	lsrs	r3, r3, #8
 801c310:	b29b      	uxth	r3, r3
 801c312:	b2da      	uxtb	r2, r3
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801c31a:	6878      	ldr	r0, [r7, #4]
 801c31c:	f000 f930 	bl	801c580 <USBD_CtlSendStatus>
}
 801c320:	e003      	b.n	801c32a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801c322:	6839      	ldr	r1, [r7, #0]
 801c324:	6878      	ldr	r0, [r7, #4]
 801c326:	f000 f860 	bl	801c3ea <USBD_CtlError>
}
 801c32a:	bf00      	nop
 801c32c:	3708      	adds	r7, #8
 801c32e:	46bd      	mov	sp, r7
 801c330:	bd80      	pop	{r7, pc}

0801c332 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c332:	b580      	push	{r7, lr}
 801c334:	b082      	sub	sp, #8
 801c336:	af00      	add	r7, sp, #0
 801c338:	6078      	str	r0, [r7, #4]
 801c33a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c342:	b2db      	uxtb	r3, r3
 801c344:	3b01      	subs	r3, #1
 801c346:	2b02      	cmp	r3, #2
 801c348:	d80b      	bhi.n	801c362 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c34a:	683b      	ldr	r3, [r7, #0]
 801c34c:	885b      	ldrh	r3, [r3, #2]
 801c34e:	2b01      	cmp	r3, #1
 801c350:	d10c      	bne.n	801c36c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	2200      	movs	r2, #0
 801c356:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801c35a:	6878      	ldr	r0, [r7, #4]
 801c35c:	f000 f910 	bl	801c580 <USBD_CtlSendStatus>
      }
      break;
 801c360:	e004      	b.n	801c36c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801c362:	6839      	ldr	r1, [r7, #0]
 801c364:	6878      	ldr	r0, [r7, #4]
 801c366:	f000 f840 	bl	801c3ea <USBD_CtlError>
      break;
 801c36a:	e000      	b.n	801c36e <USBD_ClrFeature+0x3c>
      break;
 801c36c:	bf00      	nop
  }
}
 801c36e:	bf00      	nop
 801c370:	3708      	adds	r7, #8
 801c372:	46bd      	mov	sp, r7
 801c374:	bd80      	pop	{r7, pc}

0801c376 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801c376:	b580      	push	{r7, lr}
 801c378:	b084      	sub	sp, #16
 801c37a:	af00      	add	r7, sp, #0
 801c37c:	6078      	str	r0, [r7, #4]
 801c37e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801c380:	683b      	ldr	r3, [r7, #0]
 801c382:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801c384:	68fb      	ldr	r3, [r7, #12]
 801c386:	781a      	ldrb	r2, [r3, #0]
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	3301      	adds	r3, #1
 801c390:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	781a      	ldrb	r2, [r3, #0]
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	3301      	adds	r3, #1
 801c39e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801c3a0:	68f8      	ldr	r0, [r7, #12]
 801c3a2:	f7ff fa41 	bl	801b828 <SWAPBYTE>
 801c3a6:	4603      	mov	r3, r0
 801c3a8:	461a      	mov	r2, r3
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	3301      	adds	r3, #1
 801c3b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	3301      	adds	r3, #1
 801c3b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801c3ba:	68f8      	ldr	r0, [r7, #12]
 801c3bc:	f7ff fa34 	bl	801b828 <SWAPBYTE>
 801c3c0:	4603      	mov	r3, r0
 801c3c2:	461a      	mov	r2, r3
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	3301      	adds	r3, #1
 801c3cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	3301      	adds	r3, #1
 801c3d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801c3d4:	68f8      	ldr	r0, [r7, #12]
 801c3d6:	f7ff fa27 	bl	801b828 <SWAPBYTE>
 801c3da:	4603      	mov	r3, r0
 801c3dc:	461a      	mov	r2, r3
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	80da      	strh	r2, [r3, #6]
}
 801c3e2:	bf00      	nop
 801c3e4:	3710      	adds	r7, #16
 801c3e6:	46bd      	mov	sp, r7
 801c3e8:	bd80      	pop	{r7, pc}

0801c3ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c3ea:	b580      	push	{r7, lr}
 801c3ec:	b082      	sub	sp, #8
 801c3ee:	af00      	add	r7, sp, #0
 801c3f0:	6078      	str	r0, [r7, #4]
 801c3f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801c3f4:	2180      	movs	r1, #128	; 0x80
 801c3f6:	6878      	ldr	r0, [r7, #4]
 801c3f8:	f000 fce6 	bl	801cdc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801c3fc:	2100      	movs	r1, #0
 801c3fe:	6878      	ldr	r0, [r7, #4]
 801c400:	f000 fce2 	bl	801cdc8 <USBD_LL_StallEP>
}
 801c404:	bf00      	nop
 801c406:	3708      	adds	r7, #8
 801c408:	46bd      	mov	sp, r7
 801c40a:	bd80      	pop	{r7, pc}

0801c40c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801c40c:	b580      	push	{r7, lr}
 801c40e:	b086      	sub	sp, #24
 801c410:	af00      	add	r7, sp, #0
 801c412:	60f8      	str	r0, [r7, #12]
 801c414:	60b9      	str	r1, [r7, #8]
 801c416:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801c418:	2300      	movs	r3, #0
 801c41a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d036      	beq.n	801c490 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801c426:	6938      	ldr	r0, [r7, #16]
 801c428:	f000 f836 	bl	801c498 <USBD_GetLen>
 801c42c:	4603      	mov	r3, r0
 801c42e:	3301      	adds	r3, #1
 801c430:	b29b      	uxth	r3, r3
 801c432:	005b      	lsls	r3, r3, #1
 801c434:	b29a      	uxth	r2, r3
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801c43a:	7dfb      	ldrb	r3, [r7, #23]
 801c43c:	68ba      	ldr	r2, [r7, #8]
 801c43e:	4413      	add	r3, r2
 801c440:	687a      	ldr	r2, [r7, #4]
 801c442:	7812      	ldrb	r2, [r2, #0]
 801c444:	701a      	strb	r2, [r3, #0]
  idx++;
 801c446:	7dfb      	ldrb	r3, [r7, #23]
 801c448:	3301      	adds	r3, #1
 801c44a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801c44c:	7dfb      	ldrb	r3, [r7, #23]
 801c44e:	68ba      	ldr	r2, [r7, #8]
 801c450:	4413      	add	r3, r2
 801c452:	2203      	movs	r2, #3
 801c454:	701a      	strb	r2, [r3, #0]
  idx++;
 801c456:	7dfb      	ldrb	r3, [r7, #23]
 801c458:	3301      	adds	r3, #1
 801c45a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801c45c:	e013      	b.n	801c486 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801c45e:	7dfb      	ldrb	r3, [r7, #23]
 801c460:	68ba      	ldr	r2, [r7, #8]
 801c462:	4413      	add	r3, r2
 801c464:	693a      	ldr	r2, [r7, #16]
 801c466:	7812      	ldrb	r2, [r2, #0]
 801c468:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801c46a:	693b      	ldr	r3, [r7, #16]
 801c46c:	3301      	adds	r3, #1
 801c46e:	613b      	str	r3, [r7, #16]
    idx++;
 801c470:	7dfb      	ldrb	r3, [r7, #23]
 801c472:	3301      	adds	r3, #1
 801c474:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801c476:	7dfb      	ldrb	r3, [r7, #23]
 801c478:	68ba      	ldr	r2, [r7, #8]
 801c47a:	4413      	add	r3, r2
 801c47c:	2200      	movs	r2, #0
 801c47e:	701a      	strb	r2, [r3, #0]
    idx++;
 801c480:	7dfb      	ldrb	r3, [r7, #23]
 801c482:	3301      	adds	r3, #1
 801c484:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801c486:	693b      	ldr	r3, [r7, #16]
 801c488:	781b      	ldrb	r3, [r3, #0]
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d1e7      	bne.n	801c45e <USBD_GetString+0x52>
 801c48e:	e000      	b.n	801c492 <USBD_GetString+0x86>
    return;
 801c490:	bf00      	nop
  }
}
 801c492:	3718      	adds	r7, #24
 801c494:	46bd      	mov	sp, r7
 801c496:	bd80      	pop	{r7, pc}

0801c498 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801c498:	b480      	push	{r7}
 801c49a:	b085      	sub	sp, #20
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801c4a0:	2300      	movs	r3, #0
 801c4a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801c4a8:	e005      	b.n	801c4b6 <USBD_GetLen+0x1e>
  {
    len++;
 801c4aa:	7bfb      	ldrb	r3, [r7, #15]
 801c4ac:	3301      	adds	r3, #1
 801c4ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801c4b0:	68bb      	ldr	r3, [r7, #8]
 801c4b2:	3301      	adds	r3, #1
 801c4b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801c4b6:	68bb      	ldr	r3, [r7, #8]
 801c4b8:	781b      	ldrb	r3, [r3, #0]
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d1f5      	bne.n	801c4aa <USBD_GetLen+0x12>
  }

  return len;
 801c4be:	7bfb      	ldrb	r3, [r7, #15]
}
 801c4c0:	4618      	mov	r0, r3
 801c4c2:	3714      	adds	r7, #20
 801c4c4:	46bd      	mov	sp, r7
 801c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ca:	4770      	bx	lr

0801c4cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801c4cc:	b580      	push	{r7, lr}
 801c4ce:	b084      	sub	sp, #16
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	60f8      	str	r0, [r7, #12]
 801c4d4:	60b9      	str	r1, [r7, #8]
 801c4d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801c4d8:	68fb      	ldr	r3, [r7, #12]
 801c4da:	2202      	movs	r2, #2
 801c4dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	687a      	ldr	r2, [r7, #4]
 801c4e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801c4e6:	68fb      	ldr	r3, [r7, #12]
 801c4e8:	687a      	ldr	r2, [r7, #4]
 801c4ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	68ba      	ldr	r2, [r7, #8]
 801c4f0:	2100      	movs	r1, #0
 801c4f2:	68f8      	ldr	r0, [r7, #12]
 801c4f4:	f000 fcf1 	bl	801ceda <USBD_LL_Transmit>

  return USBD_OK;
 801c4f8:	2300      	movs	r3, #0
}
 801c4fa:	4618      	mov	r0, r3
 801c4fc:	3710      	adds	r7, #16
 801c4fe:	46bd      	mov	sp, r7
 801c500:	bd80      	pop	{r7, pc}

0801c502 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801c502:	b580      	push	{r7, lr}
 801c504:	b084      	sub	sp, #16
 801c506:	af00      	add	r7, sp, #0
 801c508:	60f8      	str	r0, [r7, #12]
 801c50a:	60b9      	str	r1, [r7, #8]
 801c50c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	68ba      	ldr	r2, [r7, #8]
 801c512:	2100      	movs	r1, #0
 801c514:	68f8      	ldr	r0, [r7, #12]
 801c516:	f000 fce0 	bl	801ceda <USBD_LL_Transmit>

  return USBD_OK;
 801c51a:	2300      	movs	r3, #0
}
 801c51c:	4618      	mov	r0, r3
 801c51e:	3710      	adds	r7, #16
 801c520:	46bd      	mov	sp, r7
 801c522:	bd80      	pop	{r7, pc}

0801c524 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801c524:	b580      	push	{r7, lr}
 801c526:	b084      	sub	sp, #16
 801c528:	af00      	add	r7, sp, #0
 801c52a:	60f8      	str	r0, [r7, #12]
 801c52c:	60b9      	str	r1, [r7, #8]
 801c52e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	2203      	movs	r2, #3
 801c534:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	687a      	ldr	r2, [r7, #4]
 801c53c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	687a      	ldr	r2, [r7, #4]
 801c544:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	68ba      	ldr	r2, [r7, #8]
 801c54c:	2100      	movs	r1, #0
 801c54e:	68f8      	ldr	r0, [r7, #12]
 801c550:	f000 fce4 	bl	801cf1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c554:	2300      	movs	r3, #0
}
 801c556:	4618      	mov	r0, r3
 801c558:	3710      	adds	r7, #16
 801c55a:	46bd      	mov	sp, r7
 801c55c:	bd80      	pop	{r7, pc}

0801c55e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801c55e:	b580      	push	{r7, lr}
 801c560:	b084      	sub	sp, #16
 801c562:	af00      	add	r7, sp, #0
 801c564:	60f8      	str	r0, [r7, #12]
 801c566:	60b9      	str	r1, [r7, #8]
 801c568:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	68ba      	ldr	r2, [r7, #8]
 801c56e:	2100      	movs	r1, #0
 801c570:	68f8      	ldr	r0, [r7, #12]
 801c572:	f000 fcd3 	bl	801cf1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c576:	2300      	movs	r3, #0
}
 801c578:	4618      	mov	r0, r3
 801c57a:	3710      	adds	r7, #16
 801c57c:	46bd      	mov	sp, r7
 801c57e:	bd80      	pop	{r7, pc}

0801c580 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801c580:	b580      	push	{r7, lr}
 801c582:	b082      	sub	sp, #8
 801c584:	af00      	add	r7, sp, #0
 801c586:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	2204      	movs	r2, #4
 801c58c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801c590:	2300      	movs	r3, #0
 801c592:	2200      	movs	r2, #0
 801c594:	2100      	movs	r1, #0
 801c596:	6878      	ldr	r0, [r7, #4]
 801c598:	f000 fc9f 	bl	801ceda <USBD_LL_Transmit>

  return USBD_OK;
 801c59c:	2300      	movs	r3, #0
}
 801c59e:	4618      	mov	r0, r3
 801c5a0:	3708      	adds	r7, #8
 801c5a2:	46bd      	mov	sp, r7
 801c5a4:	bd80      	pop	{r7, pc}

0801c5a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801c5a6:	b580      	push	{r7, lr}
 801c5a8:	b082      	sub	sp, #8
 801c5aa:	af00      	add	r7, sp, #0
 801c5ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	2205      	movs	r2, #5
 801c5b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	2200      	movs	r2, #0
 801c5ba:	2100      	movs	r1, #0
 801c5bc:	6878      	ldr	r0, [r7, #4]
 801c5be:	f000 fcad 	bl	801cf1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c5c2:	2300      	movs	r3, #0
}
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	3708      	adds	r7, #8
 801c5c8:	46bd      	mov	sp, r7
 801c5ca:	bd80      	pop	{r7, pc}

0801c5cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c5cc:	b580      	push	{r7, lr}
 801c5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c5d0:	2200      	movs	r2, #0
 801c5d2:	4913      	ldr	r1, [pc, #76]	; (801c620 <MX_USB_DEVICE_Init+0x54>)
 801c5d4:	4813      	ldr	r0, [pc, #76]	; (801c624 <MX_USB_DEVICE_Init+0x58>)
 801c5d6:	f7fe fd07 	bl	801afe8 <USBD_Init>
 801c5da:	4603      	mov	r3, r0
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d001      	beq.n	801c5e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c5e0:	f7ee fb90 	bl	800ad04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c5e4:	4910      	ldr	r1, [pc, #64]	; (801c628 <MX_USB_DEVICE_Init+0x5c>)
 801c5e6:	480f      	ldr	r0, [pc, #60]	; (801c624 <MX_USB_DEVICE_Init+0x58>)
 801c5e8:	f7fe fd2e 	bl	801b048 <USBD_RegisterClass>
 801c5ec:	4603      	mov	r3, r0
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d001      	beq.n	801c5f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801c5f2:	f7ee fb87 	bl	800ad04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c5f6:	490d      	ldr	r1, [pc, #52]	; (801c62c <MX_USB_DEVICE_Init+0x60>)
 801c5f8:	480a      	ldr	r0, [pc, #40]	; (801c624 <MX_USB_DEVICE_Init+0x58>)
 801c5fa:	f7fe fc65 	bl	801aec8 <USBD_CDC_RegisterInterface>
 801c5fe:	4603      	mov	r3, r0
 801c600:	2b00      	cmp	r3, #0
 801c602:	d001      	beq.n	801c608 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801c604:	f7ee fb7e 	bl	800ad04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c608:	4806      	ldr	r0, [pc, #24]	; (801c624 <MX_USB_DEVICE_Init+0x58>)
 801c60a:	f7fe fd53 	bl	801b0b4 <USBD_Start>
 801c60e:	4603      	mov	r3, r0
 801c610:	2b00      	cmp	r3, #0
 801c612:	d001      	beq.n	801c618 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801c614:	f7ee fb76 	bl	800ad04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801c618:	f7f5 fbec 	bl	8011df4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c61c:	bf00      	nop
 801c61e:	bd80      	pop	{r7, pc}
 801c620:	240000b0 	.word	0x240000b0
 801c624:	24001b4c 	.word	0x24001b4c
 801c628:	2400001c 	.word	0x2400001c
 801c62c:	2400009c 	.word	0x2400009c

0801c630 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c630:	b580      	push	{r7, lr}
 801c632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c634:	2200      	movs	r2, #0
 801c636:	4905      	ldr	r1, [pc, #20]	; (801c64c <CDC_Init_FS+0x1c>)
 801c638:	4805      	ldr	r0, [pc, #20]	; (801c650 <CDC_Init_FS+0x20>)
 801c63a:	f7fe fc5f 	bl	801aefc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c63e:	4905      	ldr	r1, [pc, #20]	; (801c654 <CDC_Init_FS+0x24>)
 801c640:	4803      	ldr	r0, [pc, #12]	; (801c650 <CDC_Init_FS+0x20>)
 801c642:	f7fe fc7d 	bl	801af40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c646:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c648:	4618      	mov	r0, r3
 801c64a:	bd80      	pop	{r7, pc}
 801c64c:	24002628 	.word	0x24002628
 801c650:	24001b4c 	.word	0x24001b4c
 801c654:	24001e28 	.word	0x24001e28

0801c658 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c658:	b480      	push	{r7}
 801c65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c65c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c65e:	4618      	mov	r0, r3
 801c660:	46bd      	mov	sp, r7
 801c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c666:	4770      	bx	lr

0801c668 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c668:	b480      	push	{r7}
 801c66a:	b083      	sub	sp, #12
 801c66c:	af00      	add	r7, sp, #0
 801c66e:	4603      	mov	r3, r0
 801c670:	6039      	str	r1, [r7, #0]
 801c672:	71fb      	strb	r3, [r7, #7]
 801c674:	4613      	mov	r3, r2
 801c676:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c678:	79fb      	ldrb	r3, [r7, #7]
 801c67a:	2b23      	cmp	r3, #35	; 0x23
 801c67c:	d84a      	bhi.n	801c714 <CDC_Control_FS+0xac>
 801c67e:	a201      	add	r2, pc, #4	; (adr r2, 801c684 <CDC_Control_FS+0x1c>)
 801c680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c684:	0801c715 	.word	0x0801c715
 801c688:	0801c715 	.word	0x0801c715
 801c68c:	0801c715 	.word	0x0801c715
 801c690:	0801c715 	.word	0x0801c715
 801c694:	0801c715 	.word	0x0801c715
 801c698:	0801c715 	.word	0x0801c715
 801c69c:	0801c715 	.word	0x0801c715
 801c6a0:	0801c715 	.word	0x0801c715
 801c6a4:	0801c715 	.word	0x0801c715
 801c6a8:	0801c715 	.word	0x0801c715
 801c6ac:	0801c715 	.word	0x0801c715
 801c6b0:	0801c715 	.word	0x0801c715
 801c6b4:	0801c715 	.word	0x0801c715
 801c6b8:	0801c715 	.word	0x0801c715
 801c6bc:	0801c715 	.word	0x0801c715
 801c6c0:	0801c715 	.word	0x0801c715
 801c6c4:	0801c715 	.word	0x0801c715
 801c6c8:	0801c715 	.word	0x0801c715
 801c6cc:	0801c715 	.word	0x0801c715
 801c6d0:	0801c715 	.word	0x0801c715
 801c6d4:	0801c715 	.word	0x0801c715
 801c6d8:	0801c715 	.word	0x0801c715
 801c6dc:	0801c715 	.word	0x0801c715
 801c6e0:	0801c715 	.word	0x0801c715
 801c6e4:	0801c715 	.word	0x0801c715
 801c6e8:	0801c715 	.word	0x0801c715
 801c6ec:	0801c715 	.word	0x0801c715
 801c6f0:	0801c715 	.word	0x0801c715
 801c6f4:	0801c715 	.word	0x0801c715
 801c6f8:	0801c715 	.word	0x0801c715
 801c6fc:	0801c715 	.word	0x0801c715
 801c700:	0801c715 	.word	0x0801c715
 801c704:	0801c715 	.word	0x0801c715
 801c708:	0801c715 	.word	0x0801c715
 801c70c:	0801c715 	.word	0x0801c715
 801c710:	0801c715 	.word	0x0801c715
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c714:	bf00      	nop
  }

  return (USBD_OK);
 801c716:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c718:	4618      	mov	r0, r3
 801c71a:	370c      	adds	r7, #12
 801c71c:	46bd      	mov	sp, r7
 801c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c722:	4770      	bx	lr

0801c724 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c724:	b580      	push	{r7, lr}
 801c726:	b082      	sub	sp, #8
 801c728:	af00      	add	r7, sp, #0
 801c72a:	6078      	str	r0, [r7, #4]
 801c72c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c72e:	6879      	ldr	r1, [r7, #4]
 801c730:	4805      	ldr	r0, [pc, #20]	; (801c748 <CDC_Receive_FS+0x24>)
 801c732:	f7fe fc05 	bl	801af40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c736:	4804      	ldr	r0, [pc, #16]	; (801c748 <CDC_Receive_FS+0x24>)
 801c738:	f7fe fc20 	bl	801af7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801c73c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c73e:	4618      	mov	r0, r3
 801c740:	3708      	adds	r7, #8
 801c742:	46bd      	mov	sp, r7
 801c744:	bd80      	pop	{r7, pc}
 801c746:	bf00      	nop
 801c748:	24001b4c 	.word	0x24001b4c

0801c74c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801c74c:	b480      	push	{r7}
 801c74e:	b087      	sub	sp, #28
 801c750:	af00      	add	r7, sp, #0
 801c752:	60f8      	str	r0, [r7, #12]
 801c754:	60b9      	str	r1, [r7, #8]
 801c756:	4613      	mov	r3, r2
 801c758:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801c75a:	2300      	movs	r3, #0
 801c75c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801c75e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c762:	4618      	mov	r0, r3
 801c764:	371c      	adds	r7, #28
 801c766:	46bd      	mov	sp, r7
 801c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c76c:	4770      	bx	lr
	...

0801c770 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c770:	b480      	push	{r7}
 801c772:	b083      	sub	sp, #12
 801c774:	af00      	add	r7, sp, #0
 801c776:	4603      	mov	r3, r0
 801c778:	6039      	str	r1, [r7, #0]
 801c77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c77c:	683b      	ldr	r3, [r7, #0]
 801c77e:	2212      	movs	r2, #18
 801c780:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c782:	4b03      	ldr	r3, [pc, #12]	; (801c790 <USBD_FS_DeviceDescriptor+0x20>)
}
 801c784:	4618      	mov	r0, r3
 801c786:	370c      	adds	r7, #12
 801c788:	46bd      	mov	sp, r7
 801c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c78e:	4770      	bx	lr
 801c790:	240000cc 	.word	0x240000cc

0801c794 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c794:	b480      	push	{r7}
 801c796:	b083      	sub	sp, #12
 801c798:	af00      	add	r7, sp, #0
 801c79a:	4603      	mov	r3, r0
 801c79c:	6039      	str	r1, [r7, #0]
 801c79e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c7a0:	683b      	ldr	r3, [r7, #0]
 801c7a2:	2204      	movs	r2, #4
 801c7a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c7a6:	4b03      	ldr	r3, [pc, #12]	; (801c7b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c7a8:	4618      	mov	r0, r3
 801c7aa:	370c      	adds	r7, #12
 801c7ac:	46bd      	mov	sp, r7
 801c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7b2:	4770      	bx	lr
 801c7b4:	240000e0 	.word	0x240000e0

0801c7b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c7b8:	b580      	push	{r7, lr}
 801c7ba:	b082      	sub	sp, #8
 801c7bc:	af00      	add	r7, sp, #0
 801c7be:	4603      	mov	r3, r0
 801c7c0:	6039      	str	r1, [r7, #0]
 801c7c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c7c4:	79fb      	ldrb	r3, [r7, #7]
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d105      	bne.n	801c7d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c7ca:	683a      	ldr	r2, [r7, #0]
 801c7cc:	4907      	ldr	r1, [pc, #28]	; (801c7ec <USBD_FS_ProductStrDescriptor+0x34>)
 801c7ce:	4808      	ldr	r0, [pc, #32]	; (801c7f0 <USBD_FS_ProductStrDescriptor+0x38>)
 801c7d0:	f7ff fe1c 	bl	801c40c <USBD_GetString>
 801c7d4:	e004      	b.n	801c7e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c7d6:	683a      	ldr	r2, [r7, #0]
 801c7d8:	4904      	ldr	r1, [pc, #16]	; (801c7ec <USBD_FS_ProductStrDescriptor+0x34>)
 801c7da:	4805      	ldr	r0, [pc, #20]	; (801c7f0 <USBD_FS_ProductStrDescriptor+0x38>)
 801c7dc:	f7ff fe16 	bl	801c40c <USBD_GetString>
  }
  return USBD_StrDesc;
 801c7e0:	4b02      	ldr	r3, [pc, #8]	; (801c7ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 801c7e2:	4618      	mov	r0, r3
 801c7e4:	3708      	adds	r7, #8
 801c7e6:	46bd      	mov	sp, r7
 801c7e8:	bd80      	pop	{r7, pc}
 801c7ea:	bf00      	nop
 801c7ec:	24002e28 	.word	0x24002e28
 801c7f0:	0801e7d4 	.word	0x0801e7d4

0801c7f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c7f4:	b580      	push	{r7, lr}
 801c7f6:	b082      	sub	sp, #8
 801c7f8:	af00      	add	r7, sp, #0
 801c7fa:	4603      	mov	r3, r0
 801c7fc:	6039      	str	r1, [r7, #0]
 801c7fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c800:	683a      	ldr	r2, [r7, #0]
 801c802:	4904      	ldr	r1, [pc, #16]	; (801c814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801c804:	4804      	ldr	r0, [pc, #16]	; (801c818 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c806:	f7ff fe01 	bl	801c40c <USBD_GetString>
  return USBD_StrDesc;
 801c80a:	4b02      	ldr	r3, [pc, #8]	; (801c814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801c80c:	4618      	mov	r0, r3
 801c80e:	3708      	adds	r7, #8
 801c810:	46bd      	mov	sp, r7
 801c812:	bd80      	pop	{r7, pc}
 801c814:	24002e28 	.word	0x24002e28
 801c818:	0801e7ec 	.word	0x0801e7ec

0801c81c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c81c:	b580      	push	{r7, lr}
 801c81e:	b082      	sub	sp, #8
 801c820:	af00      	add	r7, sp, #0
 801c822:	4603      	mov	r3, r0
 801c824:	6039      	str	r1, [r7, #0]
 801c826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c828:	683b      	ldr	r3, [r7, #0]
 801c82a:	221a      	movs	r2, #26
 801c82c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c82e:	f000 f843 	bl	801c8b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c832:	4b02      	ldr	r3, [pc, #8]	; (801c83c <USBD_FS_SerialStrDescriptor+0x20>)
}
 801c834:	4618      	mov	r0, r3
 801c836:	3708      	adds	r7, #8
 801c838:	46bd      	mov	sp, r7
 801c83a:	bd80      	pop	{r7, pc}
 801c83c:	240000e4 	.word	0x240000e4

0801c840 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c840:	b580      	push	{r7, lr}
 801c842:	b082      	sub	sp, #8
 801c844:	af00      	add	r7, sp, #0
 801c846:	4603      	mov	r3, r0
 801c848:	6039      	str	r1, [r7, #0]
 801c84a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801c84c:	79fb      	ldrb	r3, [r7, #7]
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d105      	bne.n	801c85e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c852:	683a      	ldr	r2, [r7, #0]
 801c854:	4907      	ldr	r1, [pc, #28]	; (801c874 <USBD_FS_ConfigStrDescriptor+0x34>)
 801c856:	4808      	ldr	r0, [pc, #32]	; (801c878 <USBD_FS_ConfigStrDescriptor+0x38>)
 801c858:	f7ff fdd8 	bl	801c40c <USBD_GetString>
 801c85c:	e004      	b.n	801c868 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c85e:	683a      	ldr	r2, [r7, #0]
 801c860:	4904      	ldr	r1, [pc, #16]	; (801c874 <USBD_FS_ConfigStrDescriptor+0x34>)
 801c862:	4805      	ldr	r0, [pc, #20]	; (801c878 <USBD_FS_ConfigStrDescriptor+0x38>)
 801c864:	f7ff fdd2 	bl	801c40c <USBD_GetString>
  }
  return USBD_StrDesc;
 801c868:	4b02      	ldr	r3, [pc, #8]	; (801c874 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801c86a:	4618      	mov	r0, r3
 801c86c:	3708      	adds	r7, #8
 801c86e:	46bd      	mov	sp, r7
 801c870:	bd80      	pop	{r7, pc}
 801c872:	bf00      	nop
 801c874:	24002e28 	.word	0x24002e28
 801c878:	0801e800 	.word	0x0801e800

0801c87c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c87c:	b580      	push	{r7, lr}
 801c87e:	b082      	sub	sp, #8
 801c880:	af00      	add	r7, sp, #0
 801c882:	4603      	mov	r3, r0
 801c884:	6039      	str	r1, [r7, #0]
 801c886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c888:	79fb      	ldrb	r3, [r7, #7]
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	d105      	bne.n	801c89a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c88e:	683a      	ldr	r2, [r7, #0]
 801c890:	4907      	ldr	r1, [pc, #28]	; (801c8b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c892:	4808      	ldr	r0, [pc, #32]	; (801c8b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c894:	f7ff fdba 	bl	801c40c <USBD_GetString>
 801c898:	e004      	b.n	801c8a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c89a:	683a      	ldr	r2, [r7, #0]
 801c89c:	4904      	ldr	r1, [pc, #16]	; (801c8b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c89e:	4805      	ldr	r0, [pc, #20]	; (801c8b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c8a0:	f7ff fdb4 	bl	801c40c <USBD_GetString>
  }
  return USBD_StrDesc;
 801c8a4:	4b02      	ldr	r3, [pc, #8]	; (801c8b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	3708      	adds	r7, #8
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	bd80      	pop	{r7, pc}
 801c8ae:	bf00      	nop
 801c8b0:	24002e28 	.word	0x24002e28
 801c8b4:	0801e80c 	.word	0x0801e80c

0801c8b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c8b8:	b580      	push	{r7, lr}
 801c8ba:	b084      	sub	sp, #16
 801c8bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c8be:	4b0f      	ldr	r3, [pc, #60]	; (801c8fc <Get_SerialNum+0x44>)
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c8c4:	4b0e      	ldr	r3, [pc, #56]	; (801c900 <Get_SerialNum+0x48>)
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c8ca:	4b0e      	ldr	r3, [pc, #56]	; (801c904 <Get_SerialNum+0x4c>)
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c8d0:	68fa      	ldr	r2, [r7, #12]
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	4413      	add	r3, r2
 801c8d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c8d8:	68fb      	ldr	r3, [r7, #12]
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	d009      	beq.n	801c8f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c8de:	2208      	movs	r2, #8
 801c8e0:	4909      	ldr	r1, [pc, #36]	; (801c908 <Get_SerialNum+0x50>)
 801c8e2:	68f8      	ldr	r0, [r7, #12]
 801c8e4:	f000 f814 	bl	801c910 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c8e8:	2204      	movs	r2, #4
 801c8ea:	4908      	ldr	r1, [pc, #32]	; (801c90c <Get_SerialNum+0x54>)
 801c8ec:	68b8      	ldr	r0, [r7, #8]
 801c8ee:	f000 f80f 	bl	801c910 <IntToUnicode>
  }
}
 801c8f2:	bf00      	nop
 801c8f4:	3710      	adds	r7, #16
 801c8f6:	46bd      	mov	sp, r7
 801c8f8:	bd80      	pop	{r7, pc}
 801c8fa:	bf00      	nop
 801c8fc:	1ff1e800 	.word	0x1ff1e800
 801c900:	1ff1e804 	.word	0x1ff1e804
 801c904:	1ff1e808 	.word	0x1ff1e808
 801c908:	240000e6 	.word	0x240000e6
 801c90c:	240000f6 	.word	0x240000f6

0801c910 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c910:	b480      	push	{r7}
 801c912:	b087      	sub	sp, #28
 801c914:	af00      	add	r7, sp, #0
 801c916:	60f8      	str	r0, [r7, #12]
 801c918:	60b9      	str	r1, [r7, #8]
 801c91a:	4613      	mov	r3, r2
 801c91c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801c91e:	2300      	movs	r3, #0
 801c920:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801c922:	2300      	movs	r3, #0
 801c924:	75fb      	strb	r3, [r7, #23]
 801c926:	e027      	b.n	801c978 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	0f1b      	lsrs	r3, r3, #28
 801c92c:	2b09      	cmp	r3, #9
 801c92e:	d80b      	bhi.n	801c948 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	0f1b      	lsrs	r3, r3, #28
 801c934:	b2da      	uxtb	r2, r3
 801c936:	7dfb      	ldrb	r3, [r7, #23]
 801c938:	005b      	lsls	r3, r3, #1
 801c93a:	4619      	mov	r1, r3
 801c93c:	68bb      	ldr	r3, [r7, #8]
 801c93e:	440b      	add	r3, r1
 801c940:	3230      	adds	r2, #48	; 0x30
 801c942:	b2d2      	uxtb	r2, r2
 801c944:	701a      	strb	r2, [r3, #0]
 801c946:	e00a      	b.n	801c95e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	0f1b      	lsrs	r3, r3, #28
 801c94c:	b2da      	uxtb	r2, r3
 801c94e:	7dfb      	ldrb	r3, [r7, #23]
 801c950:	005b      	lsls	r3, r3, #1
 801c952:	4619      	mov	r1, r3
 801c954:	68bb      	ldr	r3, [r7, #8]
 801c956:	440b      	add	r3, r1
 801c958:	3237      	adds	r2, #55	; 0x37
 801c95a:	b2d2      	uxtb	r2, r2
 801c95c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	011b      	lsls	r3, r3, #4
 801c962:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c964:	7dfb      	ldrb	r3, [r7, #23]
 801c966:	005b      	lsls	r3, r3, #1
 801c968:	3301      	adds	r3, #1
 801c96a:	68ba      	ldr	r2, [r7, #8]
 801c96c:	4413      	add	r3, r2
 801c96e:	2200      	movs	r2, #0
 801c970:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c972:	7dfb      	ldrb	r3, [r7, #23]
 801c974:	3301      	adds	r3, #1
 801c976:	75fb      	strb	r3, [r7, #23]
 801c978:	7dfa      	ldrb	r2, [r7, #23]
 801c97a:	79fb      	ldrb	r3, [r7, #7]
 801c97c:	429a      	cmp	r2, r3
 801c97e:	d3d3      	bcc.n	801c928 <IntToUnicode+0x18>
  }
}
 801c980:	bf00      	nop
 801c982:	bf00      	nop
 801c984:	371c      	adds	r7, #28
 801c986:	46bd      	mov	sp, r7
 801c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c98c:	4770      	bx	lr
	...

0801c990 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c990:	b580      	push	{r7, lr}
 801c992:	b0b8      	sub	sp, #224	; 0xe0
 801c994:	af00      	add	r7, sp, #0
 801c996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c998:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c99c:	2200      	movs	r2, #0
 801c99e:	601a      	str	r2, [r3, #0]
 801c9a0:	605a      	str	r2, [r3, #4]
 801c9a2:	609a      	str	r2, [r3, #8]
 801c9a4:	60da      	str	r2, [r3, #12]
 801c9a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801c9a8:	f107 0310 	add.w	r3, r7, #16
 801c9ac:	22bc      	movs	r2, #188	; 0xbc
 801c9ae:	2100      	movs	r1, #0
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	f000 fbe9 	bl	801d188 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	4a2f      	ldr	r2, [pc, #188]	; (801ca78 <HAL_PCD_MspInit+0xe8>)
 801c9bc:	4293      	cmp	r3, r2
 801c9be:	d156      	bne.n	801ca6e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801c9c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c9c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801c9c6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801c9ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801c9ce:	f107 0310 	add.w	r3, r7, #16
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	f7f6 f9d8 	bl	8012d88 <HAL_RCCEx_PeriphCLKConfig>
 801c9d8:	4603      	mov	r3, r0
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d001      	beq.n	801c9e2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 801c9de:	f7ee f991 	bl	800ad04 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801c9e2:	f7f5 fa07 	bl	8011df4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c9e6:	4b25      	ldr	r3, [pc, #148]	; (801ca7c <HAL_PCD_MspInit+0xec>)
 801c9e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801c9ec:	4a23      	ldr	r2, [pc, #140]	; (801ca7c <HAL_PCD_MspInit+0xec>)
 801c9ee:	f043 0301 	orr.w	r3, r3, #1
 801c9f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801c9f6:	4b21      	ldr	r3, [pc, #132]	; (801ca7c <HAL_PCD_MspInit+0xec>)
 801c9f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801c9fc:	f003 0301 	and.w	r3, r3, #1
 801ca00:	60fb      	str	r3, [r7, #12]
 801ca02:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801ca04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801ca08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ca0c:	2302      	movs	r3, #2
 801ca0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ca12:	2300      	movs	r3, #0
 801ca14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ca18:	2300      	movs	r3, #0
 801ca1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801ca1e:	230a      	movs	r3, #10
 801ca20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ca24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801ca28:	4619      	mov	r1, r3
 801ca2a:	4815      	ldr	r0, [pc, #84]	; (801ca80 <HAL_PCD_MspInit+0xf0>)
 801ca2c:	f7f2 fd5c 	bl	800f4e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801ca30:	4b12      	ldr	r3, [pc, #72]	; (801ca7c <HAL_PCD_MspInit+0xec>)
 801ca32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801ca36:	4a11      	ldr	r2, [pc, #68]	; (801ca7c <HAL_PCD_MspInit+0xec>)
 801ca38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801ca3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801ca40:	4b0e      	ldr	r3, [pc, #56]	; (801ca7c <HAL_PCD_MspInit+0xec>)
 801ca42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801ca46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801ca4a:	60bb      	str	r3, [r7, #8]
 801ca4c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 801ca4e:	2200      	movs	r2, #0
 801ca50:	2100      	movs	r1, #0
 801ca52:	2062      	movs	r0, #98	; 0x62
 801ca54:	f7ef fcf5 	bl	800c442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 801ca58:	2062      	movs	r0, #98	; 0x62
 801ca5a:	f7ef fd0c 	bl	800c476 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801ca5e:	2200      	movs	r2, #0
 801ca60:	2100      	movs	r1, #0
 801ca62:	2065      	movs	r0, #101	; 0x65
 801ca64:	f7ef fced 	bl	800c442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801ca68:	2065      	movs	r0, #101	; 0x65
 801ca6a:	f7ef fd04 	bl	800c476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801ca6e:	bf00      	nop
 801ca70:	37e0      	adds	r7, #224	; 0xe0
 801ca72:	46bd      	mov	sp, r7
 801ca74:	bd80      	pop	{r7, pc}
 801ca76:	bf00      	nop
 801ca78:	40080000 	.word	0x40080000
 801ca7c:	58024400 	.word	0x58024400
 801ca80:	58020000 	.word	0x58020000

0801ca84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ca84:	b580      	push	{r7, lr}
 801ca86:	b082      	sub	sp, #8
 801ca88:	af00      	add	r7, sp, #0
 801ca8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801ca98:	4619      	mov	r1, r3
 801ca9a:	4610      	mov	r0, r2
 801ca9c:	f7fe fb57 	bl	801b14e <USBD_LL_SetupStage>
}
 801caa0:	bf00      	nop
 801caa2:	3708      	adds	r7, #8
 801caa4:	46bd      	mov	sp, r7
 801caa6:	bd80      	pop	{r7, pc}

0801caa8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801caa8:	b580      	push	{r7, lr}
 801caaa:	b082      	sub	sp, #8
 801caac:	af00      	add	r7, sp, #0
 801caae:	6078      	str	r0, [r7, #4]
 801cab0:	460b      	mov	r3, r1
 801cab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801caba:	78fa      	ldrb	r2, [r7, #3]
 801cabc:	6879      	ldr	r1, [r7, #4]
 801cabe:	4613      	mov	r3, r2
 801cac0:	00db      	lsls	r3, r3, #3
 801cac2:	4413      	add	r3, r2
 801cac4:	009b      	lsls	r3, r3, #2
 801cac6:	440b      	add	r3, r1
 801cac8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801cacc:	681a      	ldr	r2, [r3, #0]
 801cace:	78fb      	ldrb	r3, [r7, #3]
 801cad0:	4619      	mov	r1, r3
 801cad2:	f7fe fb91 	bl	801b1f8 <USBD_LL_DataOutStage>
}
 801cad6:	bf00      	nop
 801cad8:	3708      	adds	r7, #8
 801cada:	46bd      	mov	sp, r7
 801cadc:	bd80      	pop	{r7, pc}

0801cade <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cade:	b580      	push	{r7, lr}
 801cae0:	b082      	sub	sp, #8
 801cae2:	af00      	add	r7, sp, #0
 801cae4:	6078      	str	r0, [r7, #4]
 801cae6:	460b      	mov	r3, r1
 801cae8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801caf0:	78fa      	ldrb	r2, [r7, #3]
 801caf2:	6879      	ldr	r1, [r7, #4]
 801caf4:	4613      	mov	r3, r2
 801caf6:	00db      	lsls	r3, r3, #3
 801caf8:	4413      	add	r3, r2
 801cafa:	009b      	lsls	r3, r3, #2
 801cafc:	440b      	add	r3, r1
 801cafe:	334c      	adds	r3, #76	; 0x4c
 801cb00:	681a      	ldr	r2, [r3, #0]
 801cb02:	78fb      	ldrb	r3, [r7, #3]
 801cb04:	4619      	mov	r1, r3
 801cb06:	f7fe fc2a 	bl	801b35e <USBD_LL_DataInStage>
}
 801cb0a:	bf00      	nop
 801cb0c:	3708      	adds	r7, #8
 801cb0e:	46bd      	mov	sp, r7
 801cb10:	bd80      	pop	{r7, pc}

0801cb12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cb12:	b580      	push	{r7, lr}
 801cb14:	b082      	sub	sp, #8
 801cb16:	af00      	add	r7, sp, #0
 801cb18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801cb20:	4618      	mov	r0, r3
 801cb22:	f7fe fd5e 	bl	801b5e2 <USBD_LL_SOF>
}
 801cb26:	bf00      	nop
 801cb28:	3708      	adds	r7, #8
 801cb2a:	46bd      	mov	sp, r7
 801cb2c:	bd80      	pop	{r7, pc}

0801cb2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cb2e:	b580      	push	{r7, lr}
 801cb30:	b084      	sub	sp, #16
 801cb32:	af00      	add	r7, sp, #0
 801cb34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801cb36:	2301      	movs	r3, #1
 801cb38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	68db      	ldr	r3, [r3, #12]
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d102      	bne.n	801cb48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801cb42:	2300      	movs	r3, #0
 801cb44:	73fb      	strb	r3, [r7, #15]
 801cb46:	e008      	b.n	801cb5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	68db      	ldr	r3, [r3, #12]
 801cb4c:	2b02      	cmp	r3, #2
 801cb4e:	d102      	bne.n	801cb56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801cb50:	2301      	movs	r3, #1
 801cb52:	73fb      	strb	r3, [r7, #15]
 801cb54:	e001      	b.n	801cb5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801cb56:	f7ee f8d5 	bl	800ad04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801cb60:	7bfa      	ldrb	r2, [r7, #15]
 801cb62:	4611      	mov	r1, r2
 801cb64:	4618      	mov	r0, r3
 801cb66:	f7fe fcfe 	bl	801b566 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801cb70:	4618      	mov	r0, r3
 801cb72:	f7fe fca6 	bl	801b4c2 <USBD_LL_Reset>
}
 801cb76:	bf00      	nop
 801cb78:	3710      	adds	r7, #16
 801cb7a:	46bd      	mov	sp, r7
 801cb7c:	bd80      	pop	{r7, pc}
	...

0801cb80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cb80:	b580      	push	{r7, lr}
 801cb82:	b082      	sub	sp, #8
 801cb84:	af00      	add	r7, sp, #0
 801cb86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801cb8e:	4618      	mov	r0, r3
 801cb90:	f7fe fcf9 	bl	801b586 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	687a      	ldr	r2, [r7, #4]
 801cba0:	6812      	ldr	r2, [r2, #0]
 801cba2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801cba6:	f043 0301 	orr.w	r3, r3, #1
 801cbaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	6a1b      	ldr	r3, [r3, #32]
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d005      	beq.n	801cbc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cbb4:	4b04      	ldr	r3, [pc, #16]	; (801cbc8 <HAL_PCD_SuspendCallback+0x48>)
 801cbb6:	691b      	ldr	r3, [r3, #16]
 801cbb8:	4a03      	ldr	r2, [pc, #12]	; (801cbc8 <HAL_PCD_SuspendCallback+0x48>)
 801cbba:	f043 0306 	orr.w	r3, r3, #6
 801cbbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801cbc0:	bf00      	nop
 801cbc2:	3708      	adds	r7, #8
 801cbc4:	46bd      	mov	sp, r7
 801cbc6:	bd80      	pop	{r7, pc}
 801cbc8:	e000ed00 	.word	0xe000ed00

0801cbcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	b082      	sub	sp, #8
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801cbda:	4618      	mov	r0, r3
 801cbdc:	f7fe fce9 	bl	801b5b2 <USBD_LL_Resume>
}
 801cbe0:	bf00      	nop
 801cbe2:	3708      	adds	r7, #8
 801cbe4:	46bd      	mov	sp, r7
 801cbe6:	bd80      	pop	{r7, pc}

0801cbe8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cbe8:	b580      	push	{r7, lr}
 801cbea:	b082      	sub	sp, #8
 801cbec:	af00      	add	r7, sp, #0
 801cbee:	6078      	str	r0, [r7, #4]
 801cbf0:	460b      	mov	r3, r1
 801cbf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801cbfa:	78fa      	ldrb	r2, [r7, #3]
 801cbfc:	4611      	mov	r1, r2
 801cbfe:	4618      	mov	r0, r3
 801cc00:	f7fe fd41 	bl	801b686 <USBD_LL_IsoOUTIncomplete>
}
 801cc04:	bf00      	nop
 801cc06:	3708      	adds	r7, #8
 801cc08:	46bd      	mov	sp, r7
 801cc0a:	bd80      	pop	{r7, pc}

0801cc0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cc0c:	b580      	push	{r7, lr}
 801cc0e:	b082      	sub	sp, #8
 801cc10:	af00      	add	r7, sp, #0
 801cc12:	6078      	str	r0, [r7, #4]
 801cc14:	460b      	mov	r3, r1
 801cc16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801cc1e:	78fa      	ldrb	r2, [r7, #3]
 801cc20:	4611      	mov	r1, r2
 801cc22:	4618      	mov	r0, r3
 801cc24:	f7fe fcfd 	bl	801b622 <USBD_LL_IsoINIncomplete>
}
 801cc28:	bf00      	nop
 801cc2a:	3708      	adds	r7, #8
 801cc2c:	46bd      	mov	sp, r7
 801cc2e:	bd80      	pop	{r7, pc}

0801cc30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cc30:	b580      	push	{r7, lr}
 801cc32:	b082      	sub	sp, #8
 801cc34:	af00      	add	r7, sp, #0
 801cc36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801cc3e:	4618      	mov	r0, r3
 801cc40:	f7fe fd53 	bl	801b6ea <USBD_LL_DevConnected>
}
 801cc44:	bf00      	nop
 801cc46:	3708      	adds	r7, #8
 801cc48:	46bd      	mov	sp, r7
 801cc4a:	bd80      	pop	{r7, pc}

0801cc4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cc4c:	b580      	push	{r7, lr}
 801cc4e:	b082      	sub	sp, #8
 801cc50:	af00      	add	r7, sp, #0
 801cc52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801cc5a:	4618      	mov	r0, r3
 801cc5c:	f7fe fd50 	bl	801b700 <USBD_LL_DevDisconnected>
}
 801cc60:	bf00      	nop
 801cc62:	3708      	adds	r7, #8
 801cc64:	46bd      	mov	sp, r7
 801cc66:	bd80      	pop	{r7, pc}

0801cc68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801cc68:	b580      	push	{r7, lr}
 801cc6a:	b082      	sub	sp, #8
 801cc6c:	af00      	add	r7, sp, #0
 801cc6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	781b      	ldrb	r3, [r3, #0]
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d13e      	bne.n	801ccf6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801cc78:	4a21      	ldr	r2, [pc, #132]	; (801cd00 <USBD_LL_Init+0x98>)
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	4a1f      	ldr	r2, [pc, #124]	; (801cd00 <USBD_LL_Init+0x98>)
 801cc84:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801cc88:	4b1d      	ldr	r3, [pc, #116]	; (801cd00 <USBD_LL_Init+0x98>)
 801cc8a:	4a1e      	ldr	r2, [pc, #120]	; (801cd04 <USBD_LL_Init+0x9c>)
 801cc8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801cc8e:	4b1c      	ldr	r3, [pc, #112]	; (801cd00 <USBD_LL_Init+0x98>)
 801cc90:	2209      	movs	r2, #9
 801cc92:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801cc94:	4b1a      	ldr	r3, [pc, #104]	; (801cd00 <USBD_LL_Init+0x98>)
 801cc96:	2202      	movs	r2, #2
 801cc98:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801cc9a:	4b19      	ldr	r3, [pc, #100]	; (801cd00 <USBD_LL_Init+0x98>)
 801cc9c:	2200      	movs	r2, #0
 801cc9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801cca0:	4b17      	ldr	r3, [pc, #92]	; (801cd00 <USBD_LL_Init+0x98>)
 801cca2:	2202      	movs	r2, #2
 801cca4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801cca6:	4b16      	ldr	r3, [pc, #88]	; (801cd00 <USBD_LL_Init+0x98>)
 801cca8:	2200      	movs	r2, #0
 801ccaa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801ccac:	4b14      	ldr	r3, [pc, #80]	; (801cd00 <USBD_LL_Init+0x98>)
 801ccae:	2200      	movs	r2, #0
 801ccb0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801ccb2:	4b13      	ldr	r3, [pc, #76]	; (801cd00 <USBD_LL_Init+0x98>)
 801ccb4:	2200      	movs	r2, #0
 801ccb6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801ccb8:	4b11      	ldr	r3, [pc, #68]	; (801cd00 <USBD_LL_Init+0x98>)
 801ccba:	2200      	movs	r2, #0
 801ccbc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801ccbe:	4b10      	ldr	r3, [pc, #64]	; (801cd00 <USBD_LL_Init+0x98>)
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801ccc4:	4b0e      	ldr	r3, [pc, #56]	; (801cd00 <USBD_LL_Init+0x98>)
 801ccc6:	2200      	movs	r2, #0
 801ccc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ccca:	480d      	ldr	r0, [pc, #52]	; (801cd00 <USBD_LL_Init+0x98>)
 801cccc:	f7f3 fd82 	bl	80107d4 <HAL_PCD_Init>
 801ccd0:	4603      	mov	r3, r0
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d001      	beq.n	801ccda <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801ccd6:	f7ee f815 	bl	800ad04 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801ccda:	2180      	movs	r1, #128	; 0x80
 801ccdc:	4808      	ldr	r0, [pc, #32]	; (801cd00 <USBD_LL_Init+0x98>)
 801ccde:	f7f5 f80e 	bl	8011cfe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801cce2:	2240      	movs	r2, #64	; 0x40
 801cce4:	2100      	movs	r1, #0
 801cce6:	4806      	ldr	r0, [pc, #24]	; (801cd00 <USBD_LL_Init+0x98>)
 801cce8:	f7f4 ffc2 	bl	8011c70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801ccec:	2280      	movs	r2, #128	; 0x80
 801ccee:	2101      	movs	r1, #1
 801ccf0:	4803      	ldr	r0, [pc, #12]	; (801cd00 <USBD_LL_Init+0x98>)
 801ccf2:	f7f4 ffbd 	bl	8011c70 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801ccf6:	2300      	movs	r3, #0
}
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	3708      	adds	r7, #8
 801ccfc:	46bd      	mov	sp, r7
 801ccfe:	bd80      	pop	{r7, pc}
 801cd00:	24003028 	.word	0x24003028
 801cd04:	40080000 	.word	0x40080000

0801cd08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801cd08:	b580      	push	{r7, lr}
 801cd0a:	b084      	sub	sp, #16
 801cd0c:	af00      	add	r7, sp, #0
 801cd0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cd10:	2300      	movs	r3, #0
 801cd12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cd14:	2300      	movs	r3, #0
 801cd16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cd1e:	4618      	mov	r0, r3
 801cd20:	f7f3 fe7c 	bl	8010a1c <HAL_PCD_Start>
 801cd24:	4603      	mov	r3, r0
 801cd26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cd28:	7bfb      	ldrb	r3, [r7, #15]
 801cd2a:	4618      	mov	r0, r3
 801cd2c:	f000 f942 	bl	801cfb4 <USBD_Get_USB_Status>
 801cd30:	4603      	mov	r3, r0
 801cd32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cd34:	7bbb      	ldrb	r3, [r7, #14]
}
 801cd36:	4618      	mov	r0, r3
 801cd38:	3710      	adds	r7, #16
 801cd3a:	46bd      	mov	sp, r7
 801cd3c:	bd80      	pop	{r7, pc}

0801cd3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801cd3e:	b580      	push	{r7, lr}
 801cd40:	b084      	sub	sp, #16
 801cd42:	af00      	add	r7, sp, #0
 801cd44:	6078      	str	r0, [r7, #4]
 801cd46:	4608      	mov	r0, r1
 801cd48:	4611      	mov	r1, r2
 801cd4a:	461a      	mov	r2, r3
 801cd4c:	4603      	mov	r3, r0
 801cd4e:	70fb      	strb	r3, [r7, #3]
 801cd50:	460b      	mov	r3, r1
 801cd52:	70bb      	strb	r3, [r7, #2]
 801cd54:	4613      	mov	r3, r2
 801cd56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cd58:	2300      	movs	r3, #0
 801cd5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cd5c:	2300      	movs	r3, #0
 801cd5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801cd66:	78bb      	ldrb	r3, [r7, #2]
 801cd68:	883a      	ldrh	r2, [r7, #0]
 801cd6a:	78f9      	ldrb	r1, [r7, #3]
 801cd6c:	f7f4 fb7a 	bl	8011464 <HAL_PCD_EP_Open>
 801cd70:	4603      	mov	r3, r0
 801cd72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cd74:	7bfb      	ldrb	r3, [r7, #15]
 801cd76:	4618      	mov	r0, r3
 801cd78:	f000 f91c 	bl	801cfb4 <USBD_Get_USB_Status>
 801cd7c:	4603      	mov	r3, r0
 801cd7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cd80:	7bbb      	ldrb	r3, [r7, #14]
}
 801cd82:	4618      	mov	r0, r3
 801cd84:	3710      	adds	r7, #16
 801cd86:	46bd      	mov	sp, r7
 801cd88:	bd80      	pop	{r7, pc}

0801cd8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cd8a:	b580      	push	{r7, lr}
 801cd8c:	b084      	sub	sp, #16
 801cd8e:	af00      	add	r7, sp, #0
 801cd90:	6078      	str	r0, [r7, #4]
 801cd92:	460b      	mov	r3, r1
 801cd94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cd96:	2300      	movs	r3, #0
 801cd98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cd9a:	2300      	movs	r3, #0
 801cd9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cda4:	78fa      	ldrb	r2, [r7, #3]
 801cda6:	4611      	mov	r1, r2
 801cda8:	4618      	mov	r0, r3
 801cdaa:	f7f4 fbc3 	bl	8011534 <HAL_PCD_EP_Close>
 801cdae:	4603      	mov	r3, r0
 801cdb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cdb2:	7bfb      	ldrb	r3, [r7, #15]
 801cdb4:	4618      	mov	r0, r3
 801cdb6:	f000 f8fd 	bl	801cfb4 <USBD_Get_USB_Status>
 801cdba:	4603      	mov	r3, r0
 801cdbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cdbe:	7bbb      	ldrb	r3, [r7, #14]
}
 801cdc0:	4618      	mov	r0, r3
 801cdc2:	3710      	adds	r7, #16
 801cdc4:	46bd      	mov	sp, r7
 801cdc6:	bd80      	pop	{r7, pc}

0801cdc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cdc8:	b580      	push	{r7, lr}
 801cdca:	b084      	sub	sp, #16
 801cdcc:	af00      	add	r7, sp, #0
 801cdce:	6078      	str	r0, [r7, #4]
 801cdd0:	460b      	mov	r3, r1
 801cdd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cdd8:	2300      	movs	r3, #0
 801cdda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cde2:	78fa      	ldrb	r2, [r7, #3]
 801cde4:	4611      	mov	r1, r2
 801cde6:	4618      	mov	r0, r3
 801cde8:	f7f4 fc9b 	bl	8011722 <HAL_PCD_EP_SetStall>
 801cdec:	4603      	mov	r3, r0
 801cdee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cdf0:	7bfb      	ldrb	r3, [r7, #15]
 801cdf2:	4618      	mov	r0, r3
 801cdf4:	f000 f8de 	bl	801cfb4 <USBD_Get_USB_Status>
 801cdf8:	4603      	mov	r3, r0
 801cdfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cdfc:	7bbb      	ldrb	r3, [r7, #14]
}
 801cdfe:	4618      	mov	r0, r3
 801ce00:	3710      	adds	r7, #16
 801ce02:	46bd      	mov	sp, r7
 801ce04:	bd80      	pop	{r7, pc}

0801ce06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ce06:	b580      	push	{r7, lr}
 801ce08:	b084      	sub	sp, #16
 801ce0a:	af00      	add	r7, sp, #0
 801ce0c:	6078      	str	r0, [r7, #4]
 801ce0e:	460b      	mov	r3, r1
 801ce10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ce12:	2300      	movs	r3, #0
 801ce14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ce16:	2300      	movs	r3, #0
 801ce18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ce20:	78fa      	ldrb	r2, [r7, #3]
 801ce22:	4611      	mov	r1, r2
 801ce24:	4618      	mov	r0, r3
 801ce26:	f7f4 fce0 	bl	80117ea <HAL_PCD_EP_ClrStall>
 801ce2a:	4603      	mov	r3, r0
 801ce2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ce2e:	7bfb      	ldrb	r3, [r7, #15]
 801ce30:	4618      	mov	r0, r3
 801ce32:	f000 f8bf 	bl	801cfb4 <USBD_Get_USB_Status>
 801ce36:	4603      	mov	r3, r0
 801ce38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ce3a:	7bbb      	ldrb	r3, [r7, #14]
}
 801ce3c:	4618      	mov	r0, r3
 801ce3e:	3710      	adds	r7, #16
 801ce40:	46bd      	mov	sp, r7
 801ce42:	bd80      	pop	{r7, pc}

0801ce44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ce44:	b480      	push	{r7}
 801ce46:	b085      	sub	sp, #20
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	6078      	str	r0, [r7, #4]
 801ce4c:	460b      	mov	r3, r1
 801ce4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ce56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ce58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	da0b      	bge.n	801ce78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ce60:	78fb      	ldrb	r3, [r7, #3]
 801ce62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ce66:	68f9      	ldr	r1, [r7, #12]
 801ce68:	4613      	mov	r3, r2
 801ce6a:	00db      	lsls	r3, r3, #3
 801ce6c:	4413      	add	r3, r2
 801ce6e:	009b      	lsls	r3, r3, #2
 801ce70:	440b      	add	r3, r1
 801ce72:	333e      	adds	r3, #62	; 0x3e
 801ce74:	781b      	ldrb	r3, [r3, #0]
 801ce76:	e00b      	b.n	801ce90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ce78:	78fb      	ldrb	r3, [r7, #3]
 801ce7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ce7e:	68f9      	ldr	r1, [r7, #12]
 801ce80:	4613      	mov	r3, r2
 801ce82:	00db      	lsls	r3, r3, #3
 801ce84:	4413      	add	r3, r2
 801ce86:	009b      	lsls	r3, r3, #2
 801ce88:	440b      	add	r3, r1
 801ce8a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801ce8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ce90:	4618      	mov	r0, r3
 801ce92:	3714      	adds	r7, #20
 801ce94:	46bd      	mov	sp, r7
 801ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce9a:	4770      	bx	lr

0801ce9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ce9c:	b580      	push	{r7, lr}
 801ce9e:	b084      	sub	sp, #16
 801cea0:	af00      	add	r7, sp, #0
 801cea2:	6078      	str	r0, [r7, #4]
 801cea4:	460b      	mov	r3, r1
 801cea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cea8:	2300      	movs	r3, #0
 801ceaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ceac:	2300      	movs	r3, #0
 801ceae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ceb6:	78fa      	ldrb	r2, [r7, #3]
 801ceb8:	4611      	mov	r1, r2
 801ceba:	4618      	mov	r0, r3
 801cebc:	f7f4 faad 	bl	801141a <HAL_PCD_SetAddress>
 801cec0:	4603      	mov	r3, r0
 801cec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cec4:	7bfb      	ldrb	r3, [r7, #15]
 801cec6:	4618      	mov	r0, r3
 801cec8:	f000 f874 	bl	801cfb4 <USBD_Get_USB_Status>
 801cecc:	4603      	mov	r3, r0
 801cece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ced0:	7bbb      	ldrb	r3, [r7, #14]
}
 801ced2:	4618      	mov	r0, r3
 801ced4:	3710      	adds	r7, #16
 801ced6:	46bd      	mov	sp, r7
 801ced8:	bd80      	pop	{r7, pc}

0801ceda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ceda:	b580      	push	{r7, lr}
 801cedc:	b086      	sub	sp, #24
 801cede:	af00      	add	r7, sp, #0
 801cee0:	60f8      	str	r0, [r7, #12]
 801cee2:	607a      	str	r2, [r7, #4]
 801cee4:	603b      	str	r3, [r7, #0]
 801cee6:	460b      	mov	r3, r1
 801cee8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ceea:	2300      	movs	r3, #0
 801ceec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ceee:	2300      	movs	r3, #0
 801cef0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801cef2:	68fb      	ldr	r3, [r7, #12]
 801cef4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801cef8:	7af9      	ldrb	r1, [r7, #11]
 801cefa:	683b      	ldr	r3, [r7, #0]
 801cefc:	687a      	ldr	r2, [r7, #4]
 801cefe:	f7f4 fbc6 	bl	801168e <HAL_PCD_EP_Transmit>
 801cf02:	4603      	mov	r3, r0
 801cf04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cf06:	7dfb      	ldrb	r3, [r7, #23]
 801cf08:	4618      	mov	r0, r3
 801cf0a:	f000 f853 	bl	801cfb4 <USBD_Get_USB_Status>
 801cf0e:	4603      	mov	r3, r0
 801cf10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801cf12:	7dbb      	ldrb	r3, [r7, #22]
}
 801cf14:	4618      	mov	r0, r3
 801cf16:	3718      	adds	r7, #24
 801cf18:	46bd      	mov	sp, r7
 801cf1a:	bd80      	pop	{r7, pc}

0801cf1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801cf1c:	b580      	push	{r7, lr}
 801cf1e:	b086      	sub	sp, #24
 801cf20:	af00      	add	r7, sp, #0
 801cf22:	60f8      	str	r0, [r7, #12]
 801cf24:	607a      	str	r2, [r7, #4]
 801cf26:	603b      	str	r3, [r7, #0]
 801cf28:	460b      	mov	r3, r1
 801cf2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cf30:	2300      	movs	r3, #0
 801cf32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801cf34:	68fb      	ldr	r3, [r7, #12]
 801cf36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801cf3a:	7af9      	ldrb	r1, [r7, #11]
 801cf3c:	683b      	ldr	r3, [r7, #0]
 801cf3e:	687a      	ldr	r2, [r7, #4]
 801cf40:	f7f4 fb42 	bl	80115c8 <HAL_PCD_EP_Receive>
 801cf44:	4603      	mov	r3, r0
 801cf46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cf48:	7dfb      	ldrb	r3, [r7, #23]
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	f000 f832 	bl	801cfb4 <USBD_Get_USB_Status>
 801cf50:	4603      	mov	r3, r0
 801cf52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801cf54:	7dbb      	ldrb	r3, [r7, #22]
}
 801cf56:	4618      	mov	r0, r3
 801cf58:	3718      	adds	r7, #24
 801cf5a:	46bd      	mov	sp, r7
 801cf5c:	bd80      	pop	{r7, pc}

0801cf5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cf5e:	b580      	push	{r7, lr}
 801cf60:	b082      	sub	sp, #8
 801cf62:	af00      	add	r7, sp, #0
 801cf64:	6078      	str	r0, [r7, #4]
 801cf66:	460b      	mov	r3, r1
 801cf68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cf70:	78fa      	ldrb	r2, [r7, #3]
 801cf72:	4611      	mov	r1, r2
 801cf74:	4618      	mov	r0, r3
 801cf76:	f7f4 fb72 	bl	801165e <HAL_PCD_EP_GetRxCount>
 801cf7a:	4603      	mov	r3, r0
}
 801cf7c:	4618      	mov	r0, r3
 801cf7e:	3708      	adds	r7, #8
 801cf80:	46bd      	mov	sp, r7
 801cf82:	bd80      	pop	{r7, pc}

0801cf84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801cf84:	b480      	push	{r7}
 801cf86:	b083      	sub	sp, #12
 801cf88:	af00      	add	r7, sp, #0
 801cf8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801cf8c:	4b03      	ldr	r3, [pc, #12]	; (801cf9c <USBD_static_malloc+0x18>)
}
 801cf8e:	4618      	mov	r0, r3
 801cf90:	370c      	adds	r7, #12
 801cf92:	46bd      	mov	sp, r7
 801cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf98:	4770      	bx	lr
 801cf9a:	bf00      	nop
 801cf9c:	24003534 	.word	0x24003534

0801cfa0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801cfa0:	b480      	push	{r7}
 801cfa2:	b083      	sub	sp, #12
 801cfa4:	af00      	add	r7, sp, #0
 801cfa6:	6078      	str	r0, [r7, #4]

}
 801cfa8:	bf00      	nop
 801cfaa:	370c      	adds	r7, #12
 801cfac:	46bd      	mov	sp, r7
 801cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfb2:	4770      	bx	lr

0801cfb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801cfb4:	b480      	push	{r7}
 801cfb6:	b085      	sub	sp, #20
 801cfb8:	af00      	add	r7, sp, #0
 801cfba:	4603      	mov	r3, r0
 801cfbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cfbe:	2300      	movs	r3, #0
 801cfc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801cfc2:	79fb      	ldrb	r3, [r7, #7]
 801cfc4:	2b03      	cmp	r3, #3
 801cfc6:	d817      	bhi.n	801cff8 <USBD_Get_USB_Status+0x44>
 801cfc8:	a201      	add	r2, pc, #4	; (adr r2, 801cfd0 <USBD_Get_USB_Status+0x1c>)
 801cfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cfce:	bf00      	nop
 801cfd0:	0801cfe1 	.word	0x0801cfe1
 801cfd4:	0801cfe7 	.word	0x0801cfe7
 801cfd8:	0801cfed 	.word	0x0801cfed
 801cfdc:	0801cff3 	.word	0x0801cff3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801cfe0:	2300      	movs	r3, #0
 801cfe2:	73fb      	strb	r3, [r7, #15]
    break;
 801cfe4:	e00b      	b.n	801cffe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801cfe6:	2303      	movs	r3, #3
 801cfe8:	73fb      	strb	r3, [r7, #15]
    break;
 801cfea:	e008      	b.n	801cffe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801cfec:	2301      	movs	r3, #1
 801cfee:	73fb      	strb	r3, [r7, #15]
    break;
 801cff0:	e005      	b.n	801cffe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801cff2:	2303      	movs	r3, #3
 801cff4:	73fb      	strb	r3, [r7, #15]
    break;
 801cff6:	e002      	b.n	801cffe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801cff8:	2303      	movs	r3, #3
 801cffa:	73fb      	strb	r3, [r7, #15]
    break;
 801cffc:	bf00      	nop
  }
  return usb_status;
 801cffe:	7bfb      	ldrb	r3, [r7, #15]
}
 801d000:	4618      	mov	r0, r3
 801d002:	3714      	adds	r7, #20
 801d004:	46bd      	mov	sp, r7
 801d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d00a:	4770      	bx	lr

0801d00c <_ZdlPvj>:
 801d00c:	f000 b817 	b.w	801d03e <_ZdlPv>

0801d010 <_Znwj>:
 801d010:	2801      	cmp	r0, #1
 801d012:	bf38      	it	cc
 801d014:	2001      	movcc	r0, #1
 801d016:	b510      	push	{r4, lr}
 801d018:	4604      	mov	r4, r0
 801d01a:	4620      	mov	r0, r4
 801d01c:	f000 f87c 	bl	801d118 <malloc>
 801d020:	b930      	cbnz	r0, 801d030 <_Znwj+0x20>
 801d022:	f000 f80f 	bl	801d044 <_ZSt15get_new_handlerv>
 801d026:	b908      	cbnz	r0, 801d02c <_Znwj+0x1c>
 801d028:	f000 f814 	bl	801d054 <abort>
 801d02c:	4780      	blx	r0
 801d02e:	e7f4      	b.n	801d01a <_Znwj+0xa>
 801d030:	bd10      	pop	{r4, pc}

0801d032 <_ZSt17__throw_bad_allocv>:
 801d032:	b508      	push	{r3, lr}
 801d034:	f000 f80e 	bl	801d054 <abort>

0801d038 <_ZSt20__throw_length_errorPKc>:
 801d038:	b508      	push	{r3, lr}
 801d03a:	f000 f80b 	bl	801d054 <abort>

0801d03e <_ZdlPv>:
 801d03e:	f000 b873 	b.w	801d128 <free>
	...

0801d044 <_ZSt15get_new_handlerv>:
 801d044:	4b02      	ldr	r3, [pc, #8]	; (801d050 <_ZSt15get_new_handlerv+0xc>)
 801d046:	6818      	ldr	r0, [r3, #0]
 801d048:	f3bf 8f5b 	dmb	ish
 801d04c:	4770      	bx	lr
 801d04e:	bf00      	nop
 801d050:	24003754 	.word	0x24003754

0801d054 <abort>:
 801d054:	b508      	push	{r3, lr}
 801d056:	2006      	movs	r0, #6
 801d058:	f000 fca4 	bl	801d9a4 <raise>
 801d05c:	2001      	movs	r0, #1
 801d05e:	f7ee f885 	bl	800b16c <_exit>
	...

0801d064 <__assert_func>:
 801d064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d066:	4614      	mov	r4, r2
 801d068:	461a      	mov	r2, r3
 801d06a:	4b09      	ldr	r3, [pc, #36]	; (801d090 <__assert_func+0x2c>)
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	4605      	mov	r5, r0
 801d070:	68d8      	ldr	r0, [r3, #12]
 801d072:	b14c      	cbz	r4, 801d088 <__assert_func+0x24>
 801d074:	4b07      	ldr	r3, [pc, #28]	; (801d094 <__assert_func+0x30>)
 801d076:	9100      	str	r1, [sp, #0]
 801d078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d07c:	4906      	ldr	r1, [pc, #24]	; (801d098 <__assert_func+0x34>)
 801d07e:	462b      	mov	r3, r5
 801d080:	f000 f814 	bl	801d0ac <fiprintf>
 801d084:	f7ff ffe6 	bl	801d054 <abort>
 801d088:	4b04      	ldr	r3, [pc, #16]	; (801d09c <__assert_func+0x38>)
 801d08a:	461c      	mov	r4, r3
 801d08c:	e7f3      	b.n	801d076 <__assert_func+0x12>
 801d08e:	bf00      	nop
 801d090:	24000100 	.word	0x24000100
 801d094:	08038ed4 	.word	0x08038ed4
 801d098:	08038ee1 	.word	0x08038ee1
 801d09c:	08038f0f 	.word	0x08038f0f

0801d0a0 <__errno>:
 801d0a0:	4b01      	ldr	r3, [pc, #4]	; (801d0a8 <__errno+0x8>)
 801d0a2:	6818      	ldr	r0, [r3, #0]
 801d0a4:	4770      	bx	lr
 801d0a6:	bf00      	nop
 801d0a8:	24000100 	.word	0x24000100

0801d0ac <fiprintf>:
 801d0ac:	b40e      	push	{r1, r2, r3}
 801d0ae:	b503      	push	{r0, r1, lr}
 801d0b0:	4601      	mov	r1, r0
 801d0b2:	ab03      	add	r3, sp, #12
 801d0b4:	4805      	ldr	r0, [pc, #20]	; (801d0cc <fiprintf+0x20>)
 801d0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d0ba:	6800      	ldr	r0, [r0, #0]
 801d0bc:	9301      	str	r3, [sp, #4]
 801d0be:	f000 f975 	bl	801d3ac <_vfiprintf_r>
 801d0c2:	b002      	add	sp, #8
 801d0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d0c8:	b003      	add	sp, #12
 801d0ca:	4770      	bx	lr
 801d0cc:	24000100 	.word	0x24000100

0801d0d0 <__libc_init_array>:
 801d0d0:	b570      	push	{r4, r5, r6, lr}
 801d0d2:	4d0d      	ldr	r5, [pc, #52]	; (801d108 <__libc_init_array+0x38>)
 801d0d4:	4c0d      	ldr	r4, [pc, #52]	; (801d10c <__libc_init_array+0x3c>)
 801d0d6:	1b64      	subs	r4, r4, r5
 801d0d8:	10a4      	asrs	r4, r4, #2
 801d0da:	2600      	movs	r6, #0
 801d0dc:	42a6      	cmp	r6, r4
 801d0de:	d109      	bne.n	801d0f4 <__libc_init_array+0x24>
 801d0e0:	4d0b      	ldr	r5, [pc, #44]	; (801d110 <__libc_init_array+0x40>)
 801d0e2:	4c0c      	ldr	r4, [pc, #48]	; (801d114 <__libc_init_array+0x44>)
 801d0e4:	f001 f812 	bl	801e10c <_init>
 801d0e8:	1b64      	subs	r4, r4, r5
 801d0ea:	10a4      	asrs	r4, r4, #2
 801d0ec:	2600      	movs	r6, #0
 801d0ee:	42a6      	cmp	r6, r4
 801d0f0:	d105      	bne.n	801d0fe <__libc_init_array+0x2e>
 801d0f2:	bd70      	pop	{r4, r5, r6, pc}
 801d0f4:	f855 3b04 	ldr.w	r3, [r5], #4
 801d0f8:	4798      	blx	r3
 801d0fa:	3601      	adds	r6, #1
 801d0fc:	e7ee      	b.n	801d0dc <__libc_init_array+0xc>
 801d0fe:	f855 3b04 	ldr.w	r3, [r5], #4
 801d102:	4798      	blx	r3
 801d104:	3601      	adds	r6, #1
 801d106:	e7f2      	b.n	801d0ee <__libc_init_array+0x1e>
 801d108:	08038fb0 	.word	0x08038fb0
 801d10c:	08038fb0 	.word	0x08038fb0
 801d110:	08038fb0 	.word	0x08038fb0
 801d114:	08038fb8 	.word	0x08038fb8

0801d118 <malloc>:
 801d118:	4b02      	ldr	r3, [pc, #8]	; (801d124 <malloc+0xc>)
 801d11a:	4601      	mov	r1, r0
 801d11c:	6818      	ldr	r0, [r3, #0]
 801d11e:	f000 b8a7 	b.w	801d270 <_malloc_r>
 801d122:	bf00      	nop
 801d124:	24000100 	.word	0x24000100

0801d128 <free>:
 801d128:	4b02      	ldr	r3, [pc, #8]	; (801d134 <free+0xc>)
 801d12a:	4601      	mov	r1, r0
 801d12c:	6818      	ldr	r0, [r3, #0]
 801d12e:	f000 b833 	b.w	801d198 <_free_r>
 801d132:	bf00      	nop
 801d134:	24000100 	.word	0x24000100

0801d138 <memcpy>:
 801d138:	440a      	add	r2, r1
 801d13a:	4291      	cmp	r1, r2
 801d13c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801d140:	d100      	bne.n	801d144 <memcpy+0xc>
 801d142:	4770      	bx	lr
 801d144:	b510      	push	{r4, lr}
 801d146:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d14a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d14e:	4291      	cmp	r1, r2
 801d150:	d1f9      	bne.n	801d146 <memcpy+0xe>
 801d152:	bd10      	pop	{r4, pc}

0801d154 <memmove>:
 801d154:	4288      	cmp	r0, r1
 801d156:	b510      	push	{r4, lr}
 801d158:	eb01 0402 	add.w	r4, r1, r2
 801d15c:	d902      	bls.n	801d164 <memmove+0x10>
 801d15e:	4284      	cmp	r4, r0
 801d160:	4623      	mov	r3, r4
 801d162:	d807      	bhi.n	801d174 <memmove+0x20>
 801d164:	1e43      	subs	r3, r0, #1
 801d166:	42a1      	cmp	r1, r4
 801d168:	d008      	beq.n	801d17c <memmove+0x28>
 801d16a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d16e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d172:	e7f8      	b.n	801d166 <memmove+0x12>
 801d174:	4402      	add	r2, r0
 801d176:	4601      	mov	r1, r0
 801d178:	428a      	cmp	r2, r1
 801d17a:	d100      	bne.n	801d17e <memmove+0x2a>
 801d17c:	bd10      	pop	{r4, pc}
 801d17e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d186:	e7f7      	b.n	801d178 <memmove+0x24>

0801d188 <memset>:
 801d188:	4402      	add	r2, r0
 801d18a:	4603      	mov	r3, r0
 801d18c:	4293      	cmp	r3, r2
 801d18e:	d100      	bne.n	801d192 <memset+0xa>
 801d190:	4770      	bx	lr
 801d192:	f803 1b01 	strb.w	r1, [r3], #1
 801d196:	e7f9      	b.n	801d18c <memset+0x4>

0801d198 <_free_r>:
 801d198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d19a:	2900      	cmp	r1, #0
 801d19c:	d044      	beq.n	801d228 <_free_r+0x90>
 801d19e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d1a2:	9001      	str	r0, [sp, #4]
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	f1a1 0404 	sub.w	r4, r1, #4
 801d1aa:	bfb8      	it	lt
 801d1ac:	18e4      	addlt	r4, r4, r3
 801d1ae:	f000 fef5 	bl	801df9c <__malloc_lock>
 801d1b2:	4a1e      	ldr	r2, [pc, #120]	; (801d22c <_free_r+0x94>)
 801d1b4:	9801      	ldr	r0, [sp, #4]
 801d1b6:	6813      	ldr	r3, [r2, #0]
 801d1b8:	b933      	cbnz	r3, 801d1c8 <_free_r+0x30>
 801d1ba:	6063      	str	r3, [r4, #4]
 801d1bc:	6014      	str	r4, [r2, #0]
 801d1be:	b003      	add	sp, #12
 801d1c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d1c4:	f000 bef0 	b.w	801dfa8 <__malloc_unlock>
 801d1c8:	42a3      	cmp	r3, r4
 801d1ca:	d908      	bls.n	801d1de <_free_r+0x46>
 801d1cc:	6825      	ldr	r5, [r4, #0]
 801d1ce:	1961      	adds	r1, r4, r5
 801d1d0:	428b      	cmp	r3, r1
 801d1d2:	bf01      	itttt	eq
 801d1d4:	6819      	ldreq	r1, [r3, #0]
 801d1d6:	685b      	ldreq	r3, [r3, #4]
 801d1d8:	1949      	addeq	r1, r1, r5
 801d1da:	6021      	streq	r1, [r4, #0]
 801d1dc:	e7ed      	b.n	801d1ba <_free_r+0x22>
 801d1de:	461a      	mov	r2, r3
 801d1e0:	685b      	ldr	r3, [r3, #4]
 801d1e2:	b10b      	cbz	r3, 801d1e8 <_free_r+0x50>
 801d1e4:	42a3      	cmp	r3, r4
 801d1e6:	d9fa      	bls.n	801d1de <_free_r+0x46>
 801d1e8:	6811      	ldr	r1, [r2, #0]
 801d1ea:	1855      	adds	r5, r2, r1
 801d1ec:	42a5      	cmp	r5, r4
 801d1ee:	d10b      	bne.n	801d208 <_free_r+0x70>
 801d1f0:	6824      	ldr	r4, [r4, #0]
 801d1f2:	4421      	add	r1, r4
 801d1f4:	1854      	adds	r4, r2, r1
 801d1f6:	42a3      	cmp	r3, r4
 801d1f8:	6011      	str	r1, [r2, #0]
 801d1fa:	d1e0      	bne.n	801d1be <_free_r+0x26>
 801d1fc:	681c      	ldr	r4, [r3, #0]
 801d1fe:	685b      	ldr	r3, [r3, #4]
 801d200:	6053      	str	r3, [r2, #4]
 801d202:	4421      	add	r1, r4
 801d204:	6011      	str	r1, [r2, #0]
 801d206:	e7da      	b.n	801d1be <_free_r+0x26>
 801d208:	d902      	bls.n	801d210 <_free_r+0x78>
 801d20a:	230c      	movs	r3, #12
 801d20c:	6003      	str	r3, [r0, #0]
 801d20e:	e7d6      	b.n	801d1be <_free_r+0x26>
 801d210:	6825      	ldr	r5, [r4, #0]
 801d212:	1961      	adds	r1, r4, r5
 801d214:	428b      	cmp	r3, r1
 801d216:	bf04      	itt	eq
 801d218:	6819      	ldreq	r1, [r3, #0]
 801d21a:	685b      	ldreq	r3, [r3, #4]
 801d21c:	6063      	str	r3, [r4, #4]
 801d21e:	bf04      	itt	eq
 801d220:	1949      	addeq	r1, r1, r5
 801d222:	6021      	streq	r1, [r4, #0]
 801d224:	6054      	str	r4, [r2, #4]
 801d226:	e7ca      	b.n	801d1be <_free_r+0x26>
 801d228:	b003      	add	sp, #12
 801d22a:	bd30      	pop	{r4, r5, pc}
 801d22c:	24003758 	.word	0x24003758

0801d230 <sbrk_aligned>:
 801d230:	b570      	push	{r4, r5, r6, lr}
 801d232:	4e0e      	ldr	r6, [pc, #56]	; (801d26c <sbrk_aligned+0x3c>)
 801d234:	460c      	mov	r4, r1
 801d236:	6831      	ldr	r1, [r6, #0]
 801d238:	4605      	mov	r5, r0
 801d23a:	b911      	cbnz	r1, 801d242 <sbrk_aligned+0x12>
 801d23c:	f000 fb7a 	bl	801d934 <_sbrk_r>
 801d240:	6030      	str	r0, [r6, #0]
 801d242:	4621      	mov	r1, r4
 801d244:	4628      	mov	r0, r5
 801d246:	f000 fb75 	bl	801d934 <_sbrk_r>
 801d24a:	1c43      	adds	r3, r0, #1
 801d24c:	d00a      	beq.n	801d264 <sbrk_aligned+0x34>
 801d24e:	1cc4      	adds	r4, r0, #3
 801d250:	f024 0403 	bic.w	r4, r4, #3
 801d254:	42a0      	cmp	r0, r4
 801d256:	d007      	beq.n	801d268 <sbrk_aligned+0x38>
 801d258:	1a21      	subs	r1, r4, r0
 801d25a:	4628      	mov	r0, r5
 801d25c:	f000 fb6a 	bl	801d934 <_sbrk_r>
 801d260:	3001      	adds	r0, #1
 801d262:	d101      	bne.n	801d268 <sbrk_aligned+0x38>
 801d264:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801d268:	4620      	mov	r0, r4
 801d26a:	bd70      	pop	{r4, r5, r6, pc}
 801d26c:	2400375c 	.word	0x2400375c

0801d270 <_malloc_r>:
 801d270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d274:	1ccd      	adds	r5, r1, #3
 801d276:	f025 0503 	bic.w	r5, r5, #3
 801d27a:	3508      	adds	r5, #8
 801d27c:	2d0c      	cmp	r5, #12
 801d27e:	bf38      	it	cc
 801d280:	250c      	movcc	r5, #12
 801d282:	2d00      	cmp	r5, #0
 801d284:	4607      	mov	r7, r0
 801d286:	db01      	blt.n	801d28c <_malloc_r+0x1c>
 801d288:	42a9      	cmp	r1, r5
 801d28a:	d905      	bls.n	801d298 <_malloc_r+0x28>
 801d28c:	230c      	movs	r3, #12
 801d28e:	603b      	str	r3, [r7, #0]
 801d290:	2600      	movs	r6, #0
 801d292:	4630      	mov	r0, r6
 801d294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d298:	4e2e      	ldr	r6, [pc, #184]	; (801d354 <_malloc_r+0xe4>)
 801d29a:	f000 fe7f 	bl	801df9c <__malloc_lock>
 801d29e:	6833      	ldr	r3, [r6, #0]
 801d2a0:	461c      	mov	r4, r3
 801d2a2:	bb34      	cbnz	r4, 801d2f2 <_malloc_r+0x82>
 801d2a4:	4629      	mov	r1, r5
 801d2a6:	4638      	mov	r0, r7
 801d2a8:	f7ff ffc2 	bl	801d230 <sbrk_aligned>
 801d2ac:	1c43      	adds	r3, r0, #1
 801d2ae:	4604      	mov	r4, r0
 801d2b0:	d14d      	bne.n	801d34e <_malloc_r+0xde>
 801d2b2:	6834      	ldr	r4, [r6, #0]
 801d2b4:	4626      	mov	r6, r4
 801d2b6:	2e00      	cmp	r6, #0
 801d2b8:	d140      	bne.n	801d33c <_malloc_r+0xcc>
 801d2ba:	6823      	ldr	r3, [r4, #0]
 801d2bc:	4631      	mov	r1, r6
 801d2be:	4638      	mov	r0, r7
 801d2c0:	eb04 0803 	add.w	r8, r4, r3
 801d2c4:	f000 fb36 	bl	801d934 <_sbrk_r>
 801d2c8:	4580      	cmp	r8, r0
 801d2ca:	d13a      	bne.n	801d342 <_malloc_r+0xd2>
 801d2cc:	6821      	ldr	r1, [r4, #0]
 801d2ce:	3503      	adds	r5, #3
 801d2d0:	1a6d      	subs	r5, r5, r1
 801d2d2:	f025 0503 	bic.w	r5, r5, #3
 801d2d6:	3508      	adds	r5, #8
 801d2d8:	2d0c      	cmp	r5, #12
 801d2da:	bf38      	it	cc
 801d2dc:	250c      	movcc	r5, #12
 801d2de:	4629      	mov	r1, r5
 801d2e0:	4638      	mov	r0, r7
 801d2e2:	f7ff ffa5 	bl	801d230 <sbrk_aligned>
 801d2e6:	3001      	adds	r0, #1
 801d2e8:	d02b      	beq.n	801d342 <_malloc_r+0xd2>
 801d2ea:	6823      	ldr	r3, [r4, #0]
 801d2ec:	442b      	add	r3, r5
 801d2ee:	6023      	str	r3, [r4, #0]
 801d2f0:	e00e      	b.n	801d310 <_malloc_r+0xa0>
 801d2f2:	6822      	ldr	r2, [r4, #0]
 801d2f4:	1b52      	subs	r2, r2, r5
 801d2f6:	d41e      	bmi.n	801d336 <_malloc_r+0xc6>
 801d2f8:	2a0b      	cmp	r2, #11
 801d2fa:	d916      	bls.n	801d32a <_malloc_r+0xba>
 801d2fc:	1961      	adds	r1, r4, r5
 801d2fe:	42a3      	cmp	r3, r4
 801d300:	6025      	str	r5, [r4, #0]
 801d302:	bf18      	it	ne
 801d304:	6059      	strne	r1, [r3, #4]
 801d306:	6863      	ldr	r3, [r4, #4]
 801d308:	bf08      	it	eq
 801d30a:	6031      	streq	r1, [r6, #0]
 801d30c:	5162      	str	r2, [r4, r5]
 801d30e:	604b      	str	r3, [r1, #4]
 801d310:	4638      	mov	r0, r7
 801d312:	f104 060b 	add.w	r6, r4, #11
 801d316:	f000 fe47 	bl	801dfa8 <__malloc_unlock>
 801d31a:	f026 0607 	bic.w	r6, r6, #7
 801d31e:	1d23      	adds	r3, r4, #4
 801d320:	1af2      	subs	r2, r6, r3
 801d322:	d0b6      	beq.n	801d292 <_malloc_r+0x22>
 801d324:	1b9b      	subs	r3, r3, r6
 801d326:	50a3      	str	r3, [r4, r2]
 801d328:	e7b3      	b.n	801d292 <_malloc_r+0x22>
 801d32a:	6862      	ldr	r2, [r4, #4]
 801d32c:	42a3      	cmp	r3, r4
 801d32e:	bf0c      	ite	eq
 801d330:	6032      	streq	r2, [r6, #0]
 801d332:	605a      	strne	r2, [r3, #4]
 801d334:	e7ec      	b.n	801d310 <_malloc_r+0xa0>
 801d336:	4623      	mov	r3, r4
 801d338:	6864      	ldr	r4, [r4, #4]
 801d33a:	e7b2      	b.n	801d2a2 <_malloc_r+0x32>
 801d33c:	4634      	mov	r4, r6
 801d33e:	6876      	ldr	r6, [r6, #4]
 801d340:	e7b9      	b.n	801d2b6 <_malloc_r+0x46>
 801d342:	230c      	movs	r3, #12
 801d344:	603b      	str	r3, [r7, #0]
 801d346:	4638      	mov	r0, r7
 801d348:	f000 fe2e 	bl	801dfa8 <__malloc_unlock>
 801d34c:	e7a1      	b.n	801d292 <_malloc_r+0x22>
 801d34e:	6025      	str	r5, [r4, #0]
 801d350:	e7de      	b.n	801d310 <_malloc_r+0xa0>
 801d352:	bf00      	nop
 801d354:	24003758 	.word	0x24003758

0801d358 <__sfputc_r>:
 801d358:	6893      	ldr	r3, [r2, #8]
 801d35a:	3b01      	subs	r3, #1
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	b410      	push	{r4}
 801d360:	6093      	str	r3, [r2, #8]
 801d362:	da08      	bge.n	801d376 <__sfputc_r+0x1e>
 801d364:	6994      	ldr	r4, [r2, #24]
 801d366:	42a3      	cmp	r3, r4
 801d368:	db01      	blt.n	801d36e <__sfputc_r+0x16>
 801d36a:	290a      	cmp	r1, #10
 801d36c:	d103      	bne.n	801d376 <__sfputc_r+0x1e>
 801d36e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d372:	f000 bb33 	b.w	801d9dc <__swbuf_r>
 801d376:	6813      	ldr	r3, [r2, #0]
 801d378:	1c58      	adds	r0, r3, #1
 801d37a:	6010      	str	r0, [r2, #0]
 801d37c:	7019      	strb	r1, [r3, #0]
 801d37e:	4608      	mov	r0, r1
 801d380:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d384:	4770      	bx	lr

0801d386 <__sfputs_r>:
 801d386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d388:	4606      	mov	r6, r0
 801d38a:	460f      	mov	r7, r1
 801d38c:	4614      	mov	r4, r2
 801d38e:	18d5      	adds	r5, r2, r3
 801d390:	42ac      	cmp	r4, r5
 801d392:	d101      	bne.n	801d398 <__sfputs_r+0x12>
 801d394:	2000      	movs	r0, #0
 801d396:	e007      	b.n	801d3a8 <__sfputs_r+0x22>
 801d398:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d39c:	463a      	mov	r2, r7
 801d39e:	4630      	mov	r0, r6
 801d3a0:	f7ff ffda 	bl	801d358 <__sfputc_r>
 801d3a4:	1c43      	adds	r3, r0, #1
 801d3a6:	d1f3      	bne.n	801d390 <__sfputs_r+0xa>
 801d3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d3ac <_vfiprintf_r>:
 801d3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3b0:	460d      	mov	r5, r1
 801d3b2:	b09d      	sub	sp, #116	; 0x74
 801d3b4:	4614      	mov	r4, r2
 801d3b6:	4698      	mov	r8, r3
 801d3b8:	4606      	mov	r6, r0
 801d3ba:	b118      	cbz	r0, 801d3c4 <_vfiprintf_r+0x18>
 801d3bc:	6983      	ldr	r3, [r0, #24]
 801d3be:	b90b      	cbnz	r3, 801d3c4 <_vfiprintf_r+0x18>
 801d3c0:	f000 fce6 	bl	801dd90 <__sinit>
 801d3c4:	4b89      	ldr	r3, [pc, #548]	; (801d5ec <_vfiprintf_r+0x240>)
 801d3c6:	429d      	cmp	r5, r3
 801d3c8:	d11b      	bne.n	801d402 <_vfiprintf_r+0x56>
 801d3ca:	6875      	ldr	r5, [r6, #4]
 801d3cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d3ce:	07d9      	lsls	r1, r3, #31
 801d3d0:	d405      	bmi.n	801d3de <_vfiprintf_r+0x32>
 801d3d2:	89ab      	ldrh	r3, [r5, #12]
 801d3d4:	059a      	lsls	r2, r3, #22
 801d3d6:	d402      	bmi.n	801d3de <_vfiprintf_r+0x32>
 801d3d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d3da:	f000 fd77 	bl	801decc <__retarget_lock_acquire_recursive>
 801d3de:	89ab      	ldrh	r3, [r5, #12]
 801d3e0:	071b      	lsls	r3, r3, #28
 801d3e2:	d501      	bpl.n	801d3e8 <_vfiprintf_r+0x3c>
 801d3e4:	692b      	ldr	r3, [r5, #16]
 801d3e6:	b9eb      	cbnz	r3, 801d424 <_vfiprintf_r+0x78>
 801d3e8:	4629      	mov	r1, r5
 801d3ea:	4630      	mov	r0, r6
 801d3ec:	f000 fb48 	bl	801da80 <__swsetup_r>
 801d3f0:	b1c0      	cbz	r0, 801d424 <_vfiprintf_r+0x78>
 801d3f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d3f4:	07dc      	lsls	r4, r3, #31
 801d3f6:	d50e      	bpl.n	801d416 <_vfiprintf_r+0x6a>
 801d3f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d3fc:	b01d      	add	sp, #116	; 0x74
 801d3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d402:	4b7b      	ldr	r3, [pc, #492]	; (801d5f0 <_vfiprintf_r+0x244>)
 801d404:	429d      	cmp	r5, r3
 801d406:	d101      	bne.n	801d40c <_vfiprintf_r+0x60>
 801d408:	68b5      	ldr	r5, [r6, #8]
 801d40a:	e7df      	b.n	801d3cc <_vfiprintf_r+0x20>
 801d40c:	4b79      	ldr	r3, [pc, #484]	; (801d5f4 <_vfiprintf_r+0x248>)
 801d40e:	429d      	cmp	r5, r3
 801d410:	bf08      	it	eq
 801d412:	68f5      	ldreq	r5, [r6, #12]
 801d414:	e7da      	b.n	801d3cc <_vfiprintf_r+0x20>
 801d416:	89ab      	ldrh	r3, [r5, #12]
 801d418:	0598      	lsls	r0, r3, #22
 801d41a:	d4ed      	bmi.n	801d3f8 <_vfiprintf_r+0x4c>
 801d41c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d41e:	f000 fd56 	bl	801dece <__retarget_lock_release_recursive>
 801d422:	e7e9      	b.n	801d3f8 <_vfiprintf_r+0x4c>
 801d424:	2300      	movs	r3, #0
 801d426:	9309      	str	r3, [sp, #36]	; 0x24
 801d428:	2320      	movs	r3, #32
 801d42a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d42e:	f8cd 800c 	str.w	r8, [sp, #12]
 801d432:	2330      	movs	r3, #48	; 0x30
 801d434:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d5f8 <_vfiprintf_r+0x24c>
 801d438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d43c:	f04f 0901 	mov.w	r9, #1
 801d440:	4623      	mov	r3, r4
 801d442:	469a      	mov	sl, r3
 801d444:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d448:	b10a      	cbz	r2, 801d44e <_vfiprintf_r+0xa2>
 801d44a:	2a25      	cmp	r2, #37	; 0x25
 801d44c:	d1f9      	bne.n	801d442 <_vfiprintf_r+0x96>
 801d44e:	ebba 0b04 	subs.w	fp, sl, r4
 801d452:	d00b      	beq.n	801d46c <_vfiprintf_r+0xc0>
 801d454:	465b      	mov	r3, fp
 801d456:	4622      	mov	r2, r4
 801d458:	4629      	mov	r1, r5
 801d45a:	4630      	mov	r0, r6
 801d45c:	f7ff ff93 	bl	801d386 <__sfputs_r>
 801d460:	3001      	adds	r0, #1
 801d462:	f000 80aa 	beq.w	801d5ba <_vfiprintf_r+0x20e>
 801d466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d468:	445a      	add	r2, fp
 801d46a:	9209      	str	r2, [sp, #36]	; 0x24
 801d46c:	f89a 3000 	ldrb.w	r3, [sl]
 801d470:	2b00      	cmp	r3, #0
 801d472:	f000 80a2 	beq.w	801d5ba <_vfiprintf_r+0x20e>
 801d476:	2300      	movs	r3, #0
 801d478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d47c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d480:	f10a 0a01 	add.w	sl, sl, #1
 801d484:	9304      	str	r3, [sp, #16]
 801d486:	9307      	str	r3, [sp, #28]
 801d488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d48c:	931a      	str	r3, [sp, #104]	; 0x68
 801d48e:	4654      	mov	r4, sl
 801d490:	2205      	movs	r2, #5
 801d492:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d496:	4858      	ldr	r0, [pc, #352]	; (801d5f8 <_vfiprintf_r+0x24c>)
 801d498:	f7e2 ff22 	bl	80002e0 <memchr>
 801d49c:	9a04      	ldr	r2, [sp, #16]
 801d49e:	b9d8      	cbnz	r0, 801d4d8 <_vfiprintf_r+0x12c>
 801d4a0:	06d1      	lsls	r1, r2, #27
 801d4a2:	bf44      	itt	mi
 801d4a4:	2320      	movmi	r3, #32
 801d4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d4aa:	0713      	lsls	r3, r2, #28
 801d4ac:	bf44      	itt	mi
 801d4ae:	232b      	movmi	r3, #43	; 0x2b
 801d4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d4b4:	f89a 3000 	ldrb.w	r3, [sl]
 801d4b8:	2b2a      	cmp	r3, #42	; 0x2a
 801d4ba:	d015      	beq.n	801d4e8 <_vfiprintf_r+0x13c>
 801d4bc:	9a07      	ldr	r2, [sp, #28]
 801d4be:	4654      	mov	r4, sl
 801d4c0:	2000      	movs	r0, #0
 801d4c2:	f04f 0c0a 	mov.w	ip, #10
 801d4c6:	4621      	mov	r1, r4
 801d4c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d4cc:	3b30      	subs	r3, #48	; 0x30
 801d4ce:	2b09      	cmp	r3, #9
 801d4d0:	d94e      	bls.n	801d570 <_vfiprintf_r+0x1c4>
 801d4d2:	b1b0      	cbz	r0, 801d502 <_vfiprintf_r+0x156>
 801d4d4:	9207      	str	r2, [sp, #28]
 801d4d6:	e014      	b.n	801d502 <_vfiprintf_r+0x156>
 801d4d8:	eba0 0308 	sub.w	r3, r0, r8
 801d4dc:	fa09 f303 	lsl.w	r3, r9, r3
 801d4e0:	4313      	orrs	r3, r2
 801d4e2:	9304      	str	r3, [sp, #16]
 801d4e4:	46a2      	mov	sl, r4
 801d4e6:	e7d2      	b.n	801d48e <_vfiprintf_r+0xe2>
 801d4e8:	9b03      	ldr	r3, [sp, #12]
 801d4ea:	1d19      	adds	r1, r3, #4
 801d4ec:	681b      	ldr	r3, [r3, #0]
 801d4ee:	9103      	str	r1, [sp, #12]
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	bfbb      	ittet	lt
 801d4f4:	425b      	neglt	r3, r3
 801d4f6:	f042 0202 	orrlt.w	r2, r2, #2
 801d4fa:	9307      	strge	r3, [sp, #28]
 801d4fc:	9307      	strlt	r3, [sp, #28]
 801d4fe:	bfb8      	it	lt
 801d500:	9204      	strlt	r2, [sp, #16]
 801d502:	7823      	ldrb	r3, [r4, #0]
 801d504:	2b2e      	cmp	r3, #46	; 0x2e
 801d506:	d10c      	bne.n	801d522 <_vfiprintf_r+0x176>
 801d508:	7863      	ldrb	r3, [r4, #1]
 801d50a:	2b2a      	cmp	r3, #42	; 0x2a
 801d50c:	d135      	bne.n	801d57a <_vfiprintf_r+0x1ce>
 801d50e:	9b03      	ldr	r3, [sp, #12]
 801d510:	1d1a      	adds	r2, r3, #4
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	9203      	str	r2, [sp, #12]
 801d516:	2b00      	cmp	r3, #0
 801d518:	bfb8      	it	lt
 801d51a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d51e:	3402      	adds	r4, #2
 801d520:	9305      	str	r3, [sp, #20]
 801d522:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d608 <_vfiprintf_r+0x25c>
 801d526:	7821      	ldrb	r1, [r4, #0]
 801d528:	2203      	movs	r2, #3
 801d52a:	4650      	mov	r0, sl
 801d52c:	f7e2 fed8 	bl	80002e0 <memchr>
 801d530:	b140      	cbz	r0, 801d544 <_vfiprintf_r+0x198>
 801d532:	2340      	movs	r3, #64	; 0x40
 801d534:	eba0 000a 	sub.w	r0, r0, sl
 801d538:	fa03 f000 	lsl.w	r0, r3, r0
 801d53c:	9b04      	ldr	r3, [sp, #16]
 801d53e:	4303      	orrs	r3, r0
 801d540:	3401      	adds	r4, #1
 801d542:	9304      	str	r3, [sp, #16]
 801d544:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d548:	482c      	ldr	r0, [pc, #176]	; (801d5fc <_vfiprintf_r+0x250>)
 801d54a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d54e:	2206      	movs	r2, #6
 801d550:	f7e2 fec6 	bl	80002e0 <memchr>
 801d554:	2800      	cmp	r0, #0
 801d556:	d03f      	beq.n	801d5d8 <_vfiprintf_r+0x22c>
 801d558:	4b29      	ldr	r3, [pc, #164]	; (801d600 <_vfiprintf_r+0x254>)
 801d55a:	bb1b      	cbnz	r3, 801d5a4 <_vfiprintf_r+0x1f8>
 801d55c:	9b03      	ldr	r3, [sp, #12]
 801d55e:	3307      	adds	r3, #7
 801d560:	f023 0307 	bic.w	r3, r3, #7
 801d564:	3308      	adds	r3, #8
 801d566:	9303      	str	r3, [sp, #12]
 801d568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d56a:	443b      	add	r3, r7
 801d56c:	9309      	str	r3, [sp, #36]	; 0x24
 801d56e:	e767      	b.n	801d440 <_vfiprintf_r+0x94>
 801d570:	fb0c 3202 	mla	r2, ip, r2, r3
 801d574:	460c      	mov	r4, r1
 801d576:	2001      	movs	r0, #1
 801d578:	e7a5      	b.n	801d4c6 <_vfiprintf_r+0x11a>
 801d57a:	2300      	movs	r3, #0
 801d57c:	3401      	adds	r4, #1
 801d57e:	9305      	str	r3, [sp, #20]
 801d580:	4619      	mov	r1, r3
 801d582:	f04f 0c0a 	mov.w	ip, #10
 801d586:	4620      	mov	r0, r4
 801d588:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d58c:	3a30      	subs	r2, #48	; 0x30
 801d58e:	2a09      	cmp	r2, #9
 801d590:	d903      	bls.n	801d59a <_vfiprintf_r+0x1ee>
 801d592:	2b00      	cmp	r3, #0
 801d594:	d0c5      	beq.n	801d522 <_vfiprintf_r+0x176>
 801d596:	9105      	str	r1, [sp, #20]
 801d598:	e7c3      	b.n	801d522 <_vfiprintf_r+0x176>
 801d59a:	fb0c 2101 	mla	r1, ip, r1, r2
 801d59e:	4604      	mov	r4, r0
 801d5a0:	2301      	movs	r3, #1
 801d5a2:	e7f0      	b.n	801d586 <_vfiprintf_r+0x1da>
 801d5a4:	ab03      	add	r3, sp, #12
 801d5a6:	9300      	str	r3, [sp, #0]
 801d5a8:	462a      	mov	r2, r5
 801d5aa:	4b16      	ldr	r3, [pc, #88]	; (801d604 <_vfiprintf_r+0x258>)
 801d5ac:	a904      	add	r1, sp, #16
 801d5ae:	4630      	mov	r0, r6
 801d5b0:	f3af 8000 	nop.w
 801d5b4:	4607      	mov	r7, r0
 801d5b6:	1c78      	adds	r0, r7, #1
 801d5b8:	d1d6      	bne.n	801d568 <_vfiprintf_r+0x1bc>
 801d5ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d5bc:	07d9      	lsls	r1, r3, #31
 801d5be:	d405      	bmi.n	801d5cc <_vfiprintf_r+0x220>
 801d5c0:	89ab      	ldrh	r3, [r5, #12]
 801d5c2:	059a      	lsls	r2, r3, #22
 801d5c4:	d402      	bmi.n	801d5cc <_vfiprintf_r+0x220>
 801d5c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d5c8:	f000 fc81 	bl	801dece <__retarget_lock_release_recursive>
 801d5cc:	89ab      	ldrh	r3, [r5, #12]
 801d5ce:	065b      	lsls	r3, r3, #25
 801d5d0:	f53f af12 	bmi.w	801d3f8 <_vfiprintf_r+0x4c>
 801d5d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d5d6:	e711      	b.n	801d3fc <_vfiprintf_r+0x50>
 801d5d8:	ab03      	add	r3, sp, #12
 801d5da:	9300      	str	r3, [sp, #0]
 801d5dc:	462a      	mov	r2, r5
 801d5de:	4b09      	ldr	r3, [pc, #36]	; (801d604 <_vfiprintf_r+0x258>)
 801d5e0:	a904      	add	r1, sp, #16
 801d5e2:	4630      	mov	r0, r6
 801d5e4:	f000 f880 	bl	801d6e8 <_printf_i>
 801d5e8:	e7e4      	b.n	801d5b4 <_vfiprintf_r+0x208>
 801d5ea:	bf00      	nop
 801d5ec:	08038f68 	.word	0x08038f68
 801d5f0:	08038f88 	.word	0x08038f88
 801d5f4:	08038f48 	.word	0x08038f48
 801d5f8:	08038f14 	.word	0x08038f14
 801d5fc:	08038f1e 	.word	0x08038f1e
 801d600:	00000000 	.word	0x00000000
 801d604:	0801d387 	.word	0x0801d387
 801d608:	08038f1a 	.word	0x08038f1a

0801d60c <_printf_common>:
 801d60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d610:	4616      	mov	r6, r2
 801d612:	4699      	mov	r9, r3
 801d614:	688a      	ldr	r2, [r1, #8]
 801d616:	690b      	ldr	r3, [r1, #16]
 801d618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d61c:	4293      	cmp	r3, r2
 801d61e:	bfb8      	it	lt
 801d620:	4613      	movlt	r3, r2
 801d622:	6033      	str	r3, [r6, #0]
 801d624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d628:	4607      	mov	r7, r0
 801d62a:	460c      	mov	r4, r1
 801d62c:	b10a      	cbz	r2, 801d632 <_printf_common+0x26>
 801d62e:	3301      	adds	r3, #1
 801d630:	6033      	str	r3, [r6, #0]
 801d632:	6823      	ldr	r3, [r4, #0]
 801d634:	0699      	lsls	r1, r3, #26
 801d636:	bf42      	ittt	mi
 801d638:	6833      	ldrmi	r3, [r6, #0]
 801d63a:	3302      	addmi	r3, #2
 801d63c:	6033      	strmi	r3, [r6, #0]
 801d63e:	6825      	ldr	r5, [r4, #0]
 801d640:	f015 0506 	ands.w	r5, r5, #6
 801d644:	d106      	bne.n	801d654 <_printf_common+0x48>
 801d646:	f104 0a19 	add.w	sl, r4, #25
 801d64a:	68e3      	ldr	r3, [r4, #12]
 801d64c:	6832      	ldr	r2, [r6, #0]
 801d64e:	1a9b      	subs	r3, r3, r2
 801d650:	42ab      	cmp	r3, r5
 801d652:	dc26      	bgt.n	801d6a2 <_printf_common+0x96>
 801d654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d658:	1e13      	subs	r3, r2, #0
 801d65a:	6822      	ldr	r2, [r4, #0]
 801d65c:	bf18      	it	ne
 801d65e:	2301      	movne	r3, #1
 801d660:	0692      	lsls	r2, r2, #26
 801d662:	d42b      	bmi.n	801d6bc <_printf_common+0xb0>
 801d664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d668:	4649      	mov	r1, r9
 801d66a:	4638      	mov	r0, r7
 801d66c:	47c0      	blx	r8
 801d66e:	3001      	adds	r0, #1
 801d670:	d01e      	beq.n	801d6b0 <_printf_common+0xa4>
 801d672:	6823      	ldr	r3, [r4, #0]
 801d674:	68e5      	ldr	r5, [r4, #12]
 801d676:	6832      	ldr	r2, [r6, #0]
 801d678:	f003 0306 	and.w	r3, r3, #6
 801d67c:	2b04      	cmp	r3, #4
 801d67e:	bf08      	it	eq
 801d680:	1aad      	subeq	r5, r5, r2
 801d682:	68a3      	ldr	r3, [r4, #8]
 801d684:	6922      	ldr	r2, [r4, #16]
 801d686:	bf0c      	ite	eq
 801d688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d68c:	2500      	movne	r5, #0
 801d68e:	4293      	cmp	r3, r2
 801d690:	bfc4      	itt	gt
 801d692:	1a9b      	subgt	r3, r3, r2
 801d694:	18ed      	addgt	r5, r5, r3
 801d696:	2600      	movs	r6, #0
 801d698:	341a      	adds	r4, #26
 801d69a:	42b5      	cmp	r5, r6
 801d69c:	d11a      	bne.n	801d6d4 <_printf_common+0xc8>
 801d69e:	2000      	movs	r0, #0
 801d6a0:	e008      	b.n	801d6b4 <_printf_common+0xa8>
 801d6a2:	2301      	movs	r3, #1
 801d6a4:	4652      	mov	r2, sl
 801d6a6:	4649      	mov	r1, r9
 801d6a8:	4638      	mov	r0, r7
 801d6aa:	47c0      	blx	r8
 801d6ac:	3001      	adds	r0, #1
 801d6ae:	d103      	bne.n	801d6b8 <_printf_common+0xac>
 801d6b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6b8:	3501      	adds	r5, #1
 801d6ba:	e7c6      	b.n	801d64a <_printf_common+0x3e>
 801d6bc:	18e1      	adds	r1, r4, r3
 801d6be:	1c5a      	adds	r2, r3, #1
 801d6c0:	2030      	movs	r0, #48	; 0x30
 801d6c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d6c6:	4422      	add	r2, r4
 801d6c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d6cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d6d0:	3302      	adds	r3, #2
 801d6d2:	e7c7      	b.n	801d664 <_printf_common+0x58>
 801d6d4:	2301      	movs	r3, #1
 801d6d6:	4622      	mov	r2, r4
 801d6d8:	4649      	mov	r1, r9
 801d6da:	4638      	mov	r0, r7
 801d6dc:	47c0      	blx	r8
 801d6de:	3001      	adds	r0, #1
 801d6e0:	d0e6      	beq.n	801d6b0 <_printf_common+0xa4>
 801d6e2:	3601      	adds	r6, #1
 801d6e4:	e7d9      	b.n	801d69a <_printf_common+0x8e>
	...

0801d6e8 <_printf_i>:
 801d6e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d6ec:	7e0f      	ldrb	r7, [r1, #24]
 801d6ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d6f0:	2f78      	cmp	r7, #120	; 0x78
 801d6f2:	4691      	mov	r9, r2
 801d6f4:	4680      	mov	r8, r0
 801d6f6:	460c      	mov	r4, r1
 801d6f8:	469a      	mov	sl, r3
 801d6fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d6fe:	d807      	bhi.n	801d710 <_printf_i+0x28>
 801d700:	2f62      	cmp	r7, #98	; 0x62
 801d702:	d80a      	bhi.n	801d71a <_printf_i+0x32>
 801d704:	2f00      	cmp	r7, #0
 801d706:	f000 80d8 	beq.w	801d8ba <_printf_i+0x1d2>
 801d70a:	2f58      	cmp	r7, #88	; 0x58
 801d70c:	f000 80a3 	beq.w	801d856 <_printf_i+0x16e>
 801d710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d718:	e03a      	b.n	801d790 <_printf_i+0xa8>
 801d71a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d71e:	2b15      	cmp	r3, #21
 801d720:	d8f6      	bhi.n	801d710 <_printf_i+0x28>
 801d722:	a101      	add	r1, pc, #4	; (adr r1, 801d728 <_printf_i+0x40>)
 801d724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d728:	0801d781 	.word	0x0801d781
 801d72c:	0801d795 	.word	0x0801d795
 801d730:	0801d711 	.word	0x0801d711
 801d734:	0801d711 	.word	0x0801d711
 801d738:	0801d711 	.word	0x0801d711
 801d73c:	0801d711 	.word	0x0801d711
 801d740:	0801d795 	.word	0x0801d795
 801d744:	0801d711 	.word	0x0801d711
 801d748:	0801d711 	.word	0x0801d711
 801d74c:	0801d711 	.word	0x0801d711
 801d750:	0801d711 	.word	0x0801d711
 801d754:	0801d8a1 	.word	0x0801d8a1
 801d758:	0801d7c5 	.word	0x0801d7c5
 801d75c:	0801d883 	.word	0x0801d883
 801d760:	0801d711 	.word	0x0801d711
 801d764:	0801d711 	.word	0x0801d711
 801d768:	0801d8c3 	.word	0x0801d8c3
 801d76c:	0801d711 	.word	0x0801d711
 801d770:	0801d7c5 	.word	0x0801d7c5
 801d774:	0801d711 	.word	0x0801d711
 801d778:	0801d711 	.word	0x0801d711
 801d77c:	0801d88b 	.word	0x0801d88b
 801d780:	682b      	ldr	r3, [r5, #0]
 801d782:	1d1a      	adds	r2, r3, #4
 801d784:	681b      	ldr	r3, [r3, #0]
 801d786:	602a      	str	r2, [r5, #0]
 801d788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d78c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d790:	2301      	movs	r3, #1
 801d792:	e0a3      	b.n	801d8dc <_printf_i+0x1f4>
 801d794:	6820      	ldr	r0, [r4, #0]
 801d796:	6829      	ldr	r1, [r5, #0]
 801d798:	0606      	lsls	r6, r0, #24
 801d79a:	f101 0304 	add.w	r3, r1, #4
 801d79e:	d50a      	bpl.n	801d7b6 <_printf_i+0xce>
 801d7a0:	680e      	ldr	r6, [r1, #0]
 801d7a2:	602b      	str	r3, [r5, #0]
 801d7a4:	2e00      	cmp	r6, #0
 801d7a6:	da03      	bge.n	801d7b0 <_printf_i+0xc8>
 801d7a8:	232d      	movs	r3, #45	; 0x2d
 801d7aa:	4276      	negs	r6, r6
 801d7ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d7b0:	485e      	ldr	r0, [pc, #376]	; (801d92c <_printf_i+0x244>)
 801d7b2:	230a      	movs	r3, #10
 801d7b4:	e019      	b.n	801d7ea <_printf_i+0x102>
 801d7b6:	680e      	ldr	r6, [r1, #0]
 801d7b8:	602b      	str	r3, [r5, #0]
 801d7ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d7be:	bf18      	it	ne
 801d7c0:	b236      	sxthne	r6, r6
 801d7c2:	e7ef      	b.n	801d7a4 <_printf_i+0xbc>
 801d7c4:	682b      	ldr	r3, [r5, #0]
 801d7c6:	6820      	ldr	r0, [r4, #0]
 801d7c8:	1d19      	adds	r1, r3, #4
 801d7ca:	6029      	str	r1, [r5, #0]
 801d7cc:	0601      	lsls	r1, r0, #24
 801d7ce:	d501      	bpl.n	801d7d4 <_printf_i+0xec>
 801d7d0:	681e      	ldr	r6, [r3, #0]
 801d7d2:	e002      	b.n	801d7da <_printf_i+0xf2>
 801d7d4:	0646      	lsls	r6, r0, #25
 801d7d6:	d5fb      	bpl.n	801d7d0 <_printf_i+0xe8>
 801d7d8:	881e      	ldrh	r6, [r3, #0]
 801d7da:	4854      	ldr	r0, [pc, #336]	; (801d92c <_printf_i+0x244>)
 801d7dc:	2f6f      	cmp	r7, #111	; 0x6f
 801d7de:	bf0c      	ite	eq
 801d7e0:	2308      	moveq	r3, #8
 801d7e2:	230a      	movne	r3, #10
 801d7e4:	2100      	movs	r1, #0
 801d7e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d7ea:	6865      	ldr	r5, [r4, #4]
 801d7ec:	60a5      	str	r5, [r4, #8]
 801d7ee:	2d00      	cmp	r5, #0
 801d7f0:	bfa2      	ittt	ge
 801d7f2:	6821      	ldrge	r1, [r4, #0]
 801d7f4:	f021 0104 	bicge.w	r1, r1, #4
 801d7f8:	6021      	strge	r1, [r4, #0]
 801d7fa:	b90e      	cbnz	r6, 801d800 <_printf_i+0x118>
 801d7fc:	2d00      	cmp	r5, #0
 801d7fe:	d04d      	beq.n	801d89c <_printf_i+0x1b4>
 801d800:	4615      	mov	r5, r2
 801d802:	fbb6 f1f3 	udiv	r1, r6, r3
 801d806:	fb03 6711 	mls	r7, r3, r1, r6
 801d80a:	5dc7      	ldrb	r7, [r0, r7]
 801d80c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d810:	4637      	mov	r7, r6
 801d812:	42bb      	cmp	r3, r7
 801d814:	460e      	mov	r6, r1
 801d816:	d9f4      	bls.n	801d802 <_printf_i+0x11a>
 801d818:	2b08      	cmp	r3, #8
 801d81a:	d10b      	bne.n	801d834 <_printf_i+0x14c>
 801d81c:	6823      	ldr	r3, [r4, #0]
 801d81e:	07de      	lsls	r6, r3, #31
 801d820:	d508      	bpl.n	801d834 <_printf_i+0x14c>
 801d822:	6923      	ldr	r3, [r4, #16]
 801d824:	6861      	ldr	r1, [r4, #4]
 801d826:	4299      	cmp	r1, r3
 801d828:	bfde      	ittt	le
 801d82a:	2330      	movle	r3, #48	; 0x30
 801d82c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d830:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801d834:	1b52      	subs	r2, r2, r5
 801d836:	6122      	str	r2, [r4, #16]
 801d838:	f8cd a000 	str.w	sl, [sp]
 801d83c:	464b      	mov	r3, r9
 801d83e:	aa03      	add	r2, sp, #12
 801d840:	4621      	mov	r1, r4
 801d842:	4640      	mov	r0, r8
 801d844:	f7ff fee2 	bl	801d60c <_printf_common>
 801d848:	3001      	adds	r0, #1
 801d84a:	d14c      	bne.n	801d8e6 <_printf_i+0x1fe>
 801d84c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d850:	b004      	add	sp, #16
 801d852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d856:	4835      	ldr	r0, [pc, #212]	; (801d92c <_printf_i+0x244>)
 801d858:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d85c:	6829      	ldr	r1, [r5, #0]
 801d85e:	6823      	ldr	r3, [r4, #0]
 801d860:	f851 6b04 	ldr.w	r6, [r1], #4
 801d864:	6029      	str	r1, [r5, #0]
 801d866:	061d      	lsls	r5, r3, #24
 801d868:	d514      	bpl.n	801d894 <_printf_i+0x1ac>
 801d86a:	07df      	lsls	r7, r3, #31
 801d86c:	bf44      	itt	mi
 801d86e:	f043 0320 	orrmi.w	r3, r3, #32
 801d872:	6023      	strmi	r3, [r4, #0]
 801d874:	b91e      	cbnz	r6, 801d87e <_printf_i+0x196>
 801d876:	6823      	ldr	r3, [r4, #0]
 801d878:	f023 0320 	bic.w	r3, r3, #32
 801d87c:	6023      	str	r3, [r4, #0]
 801d87e:	2310      	movs	r3, #16
 801d880:	e7b0      	b.n	801d7e4 <_printf_i+0xfc>
 801d882:	6823      	ldr	r3, [r4, #0]
 801d884:	f043 0320 	orr.w	r3, r3, #32
 801d888:	6023      	str	r3, [r4, #0]
 801d88a:	2378      	movs	r3, #120	; 0x78
 801d88c:	4828      	ldr	r0, [pc, #160]	; (801d930 <_printf_i+0x248>)
 801d88e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d892:	e7e3      	b.n	801d85c <_printf_i+0x174>
 801d894:	0659      	lsls	r1, r3, #25
 801d896:	bf48      	it	mi
 801d898:	b2b6      	uxthmi	r6, r6
 801d89a:	e7e6      	b.n	801d86a <_printf_i+0x182>
 801d89c:	4615      	mov	r5, r2
 801d89e:	e7bb      	b.n	801d818 <_printf_i+0x130>
 801d8a0:	682b      	ldr	r3, [r5, #0]
 801d8a2:	6826      	ldr	r6, [r4, #0]
 801d8a4:	6961      	ldr	r1, [r4, #20]
 801d8a6:	1d18      	adds	r0, r3, #4
 801d8a8:	6028      	str	r0, [r5, #0]
 801d8aa:	0635      	lsls	r5, r6, #24
 801d8ac:	681b      	ldr	r3, [r3, #0]
 801d8ae:	d501      	bpl.n	801d8b4 <_printf_i+0x1cc>
 801d8b0:	6019      	str	r1, [r3, #0]
 801d8b2:	e002      	b.n	801d8ba <_printf_i+0x1d2>
 801d8b4:	0670      	lsls	r0, r6, #25
 801d8b6:	d5fb      	bpl.n	801d8b0 <_printf_i+0x1c8>
 801d8b8:	8019      	strh	r1, [r3, #0]
 801d8ba:	2300      	movs	r3, #0
 801d8bc:	6123      	str	r3, [r4, #16]
 801d8be:	4615      	mov	r5, r2
 801d8c0:	e7ba      	b.n	801d838 <_printf_i+0x150>
 801d8c2:	682b      	ldr	r3, [r5, #0]
 801d8c4:	1d1a      	adds	r2, r3, #4
 801d8c6:	602a      	str	r2, [r5, #0]
 801d8c8:	681d      	ldr	r5, [r3, #0]
 801d8ca:	6862      	ldr	r2, [r4, #4]
 801d8cc:	2100      	movs	r1, #0
 801d8ce:	4628      	mov	r0, r5
 801d8d0:	f7e2 fd06 	bl	80002e0 <memchr>
 801d8d4:	b108      	cbz	r0, 801d8da <_printf_i+0x1f2>
 801d8d6:	1b40      	subs	r0, r0, r5
 801d8d8:	6060      	str	r0, [r4, #4]
 801d8da:	6863      	ldr	r3, [r4, #4]
 801d8dc:	6123      	str	r3, [r4, #16]
 801d8de:	2300      	movs	r3, #0
 801d8e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d8e4:	e7a8      	b.n	801d838 <_printf_i+0x150>
 801d8e6:	6923      	ldr	r3, [r4, #16]
 801d8e8:	462a      	mov	r2, r5
 801d8ea:	4649      	mov	r1, r9
 801d8ec:	4640      	mov	r0, r8
 801d8ee:	47d0      	blx	sl
 801d8f0:	3001      	adds	r0, #1
 801d8f2:	d0ab      	beq.n	801d84c <_printf_i+0x164>
 801d8f4:	6823      	ldr	r3, [r4, #0]
 801d8f6:	079b      	lsls	r3, r3, #30
 801d8f8:	d413      	bmi.n	801d922 <_printf_i+0x23a>
 801d8fa:	68e0      	ldr	r0, [r4, #12]
 801d8fc:	9b03      	ldr	r3, [sp, #12]
 801d8fe:	4298      	cmp	r0, r3
 801d900:	bfb8      	it	lt
 801d902:	4618      	movlt	r0, r3
 801d904:	e7a4      	b.n	801d850 <_printf_i+0x168>
 801d906:	2301      	movs	r3, #1
 801d908:	4632      	mov	r2, r6
 801d90a:	4649      	mov	r1, r9
 801d90c:	4640      	mov	r0, r8
 801d90e:	47d0      	blx	sl
 801d910:	3001      	adds	r0, #1
 801d912:	d09b      	beq.n	801d84c <_printf_i+0x164>
 801d914:	3501      	adds	r5, #1
 801d916:	68e3      	ldr	r3, [r4, #12]
 801d918:	9903      	ldr	r1, [sp, #12]
 801d91a:	1a5b      	subs	r3, r3, r1
 801d91c:	42ab      	cmp	r3, r5
 801d91e:	dcf2      	bgt.n	801d906 <_printf_i+0x21e>
 801d920:	e7eb      	b.n	801d8fa <_printf_i+0x212>
 801d922:	2500      	movs	r5, #0
 801d924:	f104 0619 	add.w	r6, r4, #25
 801d928:	e7f5      	b.n	801d916 <_printf_i+0x22e>
 801d92a:	bf00      	nop
 801d92c:	08038f25 	.word	0x08038f25
 801d930:	08038f36 	.word	0x08038f36

0801d934 <_sbrk_r>:
 801d934:	b538      	push	{r3, r4, r5, lr}
 801d936:	4d06      	ldr	r5, [pc, #24]	; (801d950 <_sbrk_r+0x1c>)
 801d938:	2300      	movs	r3, #0
 801d93a:	4604      	mov	r4, r0
 801d93c:	4608      	mov	r0, r1
 801d93e:	602b      	str	r3, [r5, #0]
 801d940:	f7ed fc8c 	bl	800b25c <_sbrk>
 801d944:	1c43      	adds	r3, r0, #1
 801d946:	d102      	bne.n	801d94e <_sbrk_r+0x1a>
 801d948:	682b      	ldr	r3, [r5, #0]
 801d94a:	b103      	cbz	r3, 801d94e <_sbrk_r+0x1a>
 801d94c:	6023      	str	r3, [r4, #0]
 801d94e:	bd38      	pop	{r3, r4, r5, pc}
 801d950:	24003764 	.word	0x24003764

0801d954 <_raise_r>:
 801d954:	291f      	cmp	r1, #31
 801d956:	b538      	push	{r3, r4, r5, lr}
 801d958:	4604      	mov	r4, r0
 801d95a:	460d      	mov	r5, r1
 801d95c:	d904      	bls.n	801d968 <_raise_r+0x14>
 801d95e:	2316      	movs	r3, #22
 801d960:	6003      	str	r3, [r0, #0]
 801d962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d966:	bd38      	pop	{r3, r4, r5, pc}
 801d968:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d96a:	b112      	cbz	r2, 801d972 <_raise_r+0x1e>
 801d96c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d970:	b94b      	cbnz	r3, 801d986 <_raise_r+0x32>
 801d972:	4620      	mov	r0, r4
 801d974:	f000 f830 	bl	801d9d8 <_getpid_r>
 801d978:	462a      	mov	r2, r5
 801d97a:	4601      	mov	r1, r0
 801d97c:	4620      	mov	r0, r4
 801d97e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d982:	f000 b817 	b.w	801d9b4 <_kill_r>
 801d986:	2b01      	cmp	r3, #1
 801d988:	d00a      	beq.n	801d9a0 <_raise_r+0x4c>
 801d98a:	1c59      	adds	r1, r3, #1
 801d98c:	d103      	bne.n	801d996 <_raise_r+0x42>
 801d98e:	2316      	movs	r3, #22
 801d990:	6003      	str	r3, [r0, #0]
 801d992:	2001      	movs	r0, #1
 801d994:	e7e7      	b.n	801d966 <_raise_r+0x12>
 801d996:	2400      	movs	r4, #0
 801d998:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d99c:	4628      	mov	r0, r5
 801d99e:	4798      	blx	r3
 801d9a0:	2000      	movs	r0, #0
 801d9a2:	e7e0      	b.n	801d966 <_raise_r+0x12>

0801d9a4 <raise>:
 801d9a4:	4b02      	ldr	r3, [pc, #8]	; (801d9b0 <raise+0xc>)
 801d9a6:	4601      	mov	r1, r0
 801d9a8:	6818      	ldr	r0, [r3, #0]
 801d9aa:	f7ff bfd3 	b.w	801d954 <_raise_r>
 801d9ae:	bf00      	nop
 801d9b0:	24000100 	.word	0x24000100

0801d9b4 <_kill_r>:
 801d9b4:	b538      	push	{r3, r4, r5, lr}
 801d9b6:	4d07      	ldr	r5, [pc, #28]	; (801d9d4 <_kill_r+0x20>)
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	4604      	mov	r4, r0
 801d9bc:	4608      	mov	r0, r1
 801d9be:	4611      	mov	r1, r2
 801d9c0:	602b      	str	r3, [r5, #0]
 801d9c2:	f7ed fbc3 	bl	800b14c <_kill>
 801d9c6:	1c43      	adds	r3, r0, #1
 801d9c8:	d102      	bne.n	801d9d0 <_kill_r+0x1c>
 801d9ca:	682b      	ldr	r3, [r5, #0]
 801d9cc:	b103      	cbz	r3, 801d9d0 <_kill_r+0x1c>
 801d9ce:	6023      	str	r3, [r4, #0]
 801d9d0:	bd38      	pop	{r3, r4, r5, pc}
 801d9d2:	bf00      	nop
 801d9d4:	24003764 	.word	0x24003764

0801d9d8 <_getpid_r>:
 801d9d8:	f7ed bbb0 	b.w	800b13c <_getpid>

0801d9dc <__swbuf_r>:
 801d9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9de:	460e      	mov	r6, r1
 801d9e0:	4614      	mov	r4, r2
 801d9e2:	4605      	mov	r5, r0
 801d9e4:	b118      	cbz	r0, 801d9ee <__swbuf_r+0x12>
 801d9e6:	6983      	ldr	r3, [r0, #24]
 801d9e8:	b90b      	cbnz	r3, 801d9ee <__swbuf_r+0x12>
 801d9ea:	f000 f9d1 	bl	801dd90 <__sinit>
 801d9ee:	4b21      	ldr	r3, [pc, #132]	; (801da74 <__swbuf_r+0x98>)
 801d9f0:	429c      	cmp	r4, r3
 801d9f2:	d12b      	bne.n	801da4c <__swbuf_r+0x70>
 801d9f4:	686c      	ldr	r4, [r5, #4]
 801d9f6:	69a3      	ldr	r3, [r4, #24]
 801d9f8:	60a3      	str	r3, [r4, #8]
 801d9fa:	89a3      	ldrh	r3, [r4, #12]
 801d9fc:	071a      	lsls	r2, r3, #28
 801d9fe:	d52f      	bpl.n	801da60 <__swbuf_r+0x84>
 801da00:	6923      	ldr	r3, [r4, #16]
 801da02:	b36b      	cbz	r3, 801da60 <__swbuf_r+0x84>
 801da04:	6923      	ldr	r3, [r4, #16]
 801da06:	6820      	ldr	r0, [r4, #0]
 801da08:	1ac0      	subs	r0, r0, r3
 801da0a:	6963      	ldr	r3, [r4, #20]
 801da0c:	b2f6      	uxtb	r6, r6
 801da0e:	4283      	cmp	r3, r0
 801da10:	4637      	mov	r7, r6
 801da12:	dc04      	bgt.n	801da1e <__swbuf_r+0x42>
 801da14:	4621      	mov	r1, r4
 801da16:	4628      	mov	r0, r5
 801da18:	f000 f926 	bl	801dc68 <_fflush_r>
 801da1c:	bb30      	cbnz	r0, 801da6c <__swbuf_r+0x90>
 801da1e:	68a3      	ldr	r3, [r4, #8]
 801da20:	3b01      	subs	r3, #1
 801da22:	60a3      	str	r3, [r4, #8]
 801da24:	6823      	ldr	r3, [r4, #0]
 801da26:	1c5a      	adds	r2, r3, #1
 801da28:	6022      	str	r2, [r4, #0]
 801da2a:	701e      	strb	r6, [r3, #0]
 801da2c:	6963      	ldr	r3, [r4, #20]
 801da2e:	3001      	adds	r0, #1
 801da30:	4283      	cmp	r3, r0
 801da32:	d004      	beq.n	801da3e <__swbuf_r+0x62>
 801da34:	89a3      	ldrh	r3, [r4, #12]
 801da36:	07db      	lsls	r3, r3, #31
 801da38:	d506      	bpl.n	801da48 <__swbuf_r+0x6c>
 801da3a:	2e0a      	cmp	r6, #10
 801da3c:	d104      	bne.n	801da48 <__swbuf_r+0x6c>
 801da3e:	4621      	mov	r1, r4
 801da40:	4628      	mov	r0, r5
 801da42:	f000 f911 	bl	801dc68 <_fflush_r>
 801da46:	b988      	cbnz	r0, 801da6c <__swbuf_r+0x90>
 801da48:	4638      	mov	r0, r7
 801da4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da4c:	4b0a      	ldr	r3, [pc, #40]	; (801da78 <__swbuf_r+0x9c>)
 801da4e:	429c      	cmp	r4, r3
 801da50:	d101      	bne.n	801da56 <__swbuf_r+0x7a>
 801da52:	68ac      	ldr	r4, [r5, #8]
 801da54:	e7cf      	b.n	801d9f6 <__swbuf_r+0x1a>
 801da56:	4b09      	ldr	r3, [pc, #36]	; (801da7c <__swbuf_r+0xa0>)
 801da58:	429c      	cmp	r4, r3
 801da5a:	bf08      	it	eq
 801da5c:	68ec      	ldreq	r4, [r5, #12]
 801da5e:	e7ca      	b.n	801d9f6 <__swbuf_r+0x1a>
 801da60:	4621      	mov	r1, r4
 801da62:	4628      	mov	r0, r5
 801da64:	f000 f80c 	bl	801da80 <__swsetup_r>
 801da68:	2800      	cmp	r0, #0
 801da6a:	d0cb      	beq.n	801da04 <__swbuf_r+0x28>
 801da6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801da70:	e7ea      	b.n	801da48 <__swbuf_r+0x6c>
 801da72:	bf00      	nop
 801da74:	08038f68 	.word	0x08038f68
 801da78:	08038f88 	.word	0x08038f88
 801da7c:	08038f48 	.word	0x08038f48

0801da80 <__swsetup_r>:
 801da80:	4b32      	ldr	r3, [pc, #200]	; (801db4c <__swsetup_r+0xcc>)
 801da82:	b570      	push	{r4, r5, r6, lr}
 801da84:	681d      	ldr	r5, [r3, #0]
 801da86:	4606      	mov	r6, r0
 801da88:	460c      	mov	r4, r1
 801da8a:	b125      	cbz	r5, 801da96 <__swsetup_r+0x16>
 801da8c:	69ab      	ldr	r3, [r5, #24]
 801da8e:	b913      	cbnz	r3, 801da96 <__swsetup_r+0x16>
 801da90:	4628      	mov	r0, r5
 801da92:	f000 f97d 	bl	801dd90 <__sinit>
 801da96:	4b2e      	ldr	r3, [pc, #184]	; (801db50 <__swsetup_r+0xd0>)
 801da98:	429c      	cmp	r4, r3
 801da9a:	d10f      	bne.n	801dabc <__swsetup_r+0x3c>
 801da9c:	686c      	ldr	r4, [r5, #4]
 801da9e:	89a3      	ldrh	r3, [r4, #12]
 801daa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801daa4:	0719      	lsls	r1, r3, #28
 801daa6:	d42c      	bmi.n	801db02 <__swsetup_r+0x82>
 801daa8:	06dd      	lsls	r5, r3, #27
 801daaa:	d411      	bmi.n	801dad0 <__swsetup_r+0x50>
 801daac:	2309      	movs	r3, #9
 801daae:	6033      	str	r3, [r6, #0]
 801dab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801dab4:	81a3      	strh	r3, [r4, #12]
 801dab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801daba:	e03e      	b.n	801db3a <__swsetup_r+0xba>
 801dabc:	4b25      	ldr	r3, [pc, #148]	; (801db54 <__swsetup_r+0xd4>)
 801dabe:	429c      	cmp	r4, r3
 801dac0:	d101      	bne.n	801dac6 <__swsetup_r+0x46>
 801dac2:	68ac      	ldr	r4, [r5, #8]
 801dac4:	e7eb      	b.n	801da9e <__swsetup_r+0x1e>
 801dac6:	4b24      	ldr	r3, [pc, #144]	; (801db58 <__swsetup_r+0xd8>)
 801dac8:	429c      	cmp	r4, r3
 801daca:	bf08      	it	eq
 801dacc:	68ec      	ldreq	r4, [r5, #12]
 801dace:	e7e6      	b.n	801da9e <__swsetup_r+0x1e>
 801dad0:	0758      	lsls	r0, r3, #29
 801dad2:	d512      	bpl.n	801dafa <__swsetup_r+0x7a>
 801dad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dad6:	b141      	cbz	r1, 801daea <__swsetup_r+0x6a>
 801dad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dadc:	4299      	cmp	r1, r3
 801dade:	d002      	beq.n	801dae6 <__swsetup_r+0x66>
 801dae0:	4630      	mov	r0, r6
 801dae2:	f7ff fb59 	bl	801d198 <_free_r>
 801dae6:	2300      	movs	r3, #0
 801dae8:	6363      	str	r3, [r4, #52]	; 0x34
 801daea:	89a3      	ldrh	r3, [r4, #12]
 801daec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801daf0:	81a3      	strh	r3, [r4, #12]
 801daf2:	2300      	movs	r3, #0
 801daf4:	6063      	str	r3, [r4, #4]
 801daf6:	6923      	ldr	r3, [r4, #16]
 801daf8:	6023      	str	r3, [r4, #0]
 801dafa:	89a3      	ldrh	r3, [r4, #12]
 801dafc:	f043 0308 	orr.w	r3, r3, #8
 801db00:	81a3      	strh	r3, [r4, #12]
 801db02:	6923      	ldr	r3, [r4, #16]
 801db04:	b94b      	cbnz	r3, 801db1a <__swsetup_r+0x9a>
 801db06:	89a3      	ldrh	r3, [r4, #12]
 801db08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801db0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801db10:	d003      	beq.n	801db1a <__swsetup_r+0x9a>
 801db12:	4621      	mov	r1, r4
 801db14:	4630      	mov	r0, r6
 801db16:	f000 fa01 	bl	801df1c <__smakebuf_r>
 801db1a:	89a0      	ldrh	r0, [r4, #12]
 801db1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801db20:	f010 0301 	ands.w	r3, r0, #1
 801db24:	d00a      	beq.n	801db3c <__swsetup_r+0xbc>
 801db26:	2300      	movs	r3, #0
 801db28:	60a3      	str	r3, [r4, #8]
 801db2a:	6963      	ldr	r3, [r4, #20]
 801db2c:	425b      	negs	r3, r3
 801db2e:	61a3      	str	r3, [r4, #24]
 801db30:	6923      	ldr	r3, [r4, #16]
 801db32:	b943      	cbnz	r3, 801db46 <__swsetup_r+0xc6>
 801db34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801db38:	d1ba      	bne.n	801dab0 <__swsetup_r+0x30>
 801db3a:	bd70      	pop	{r4, r5, r6, pc}
 801db3c:	0781      	lsls	r1, r0, #30
 801db3e:	bf58      	it	pl
 801db40:	6963      	ldrpl	r3, [r4, #20]
 801db42:	60a3      	str	r3, [r4, #8]
 801db44:	e7f4      	b.n	801db30 <__swsetup_r+0xb0>
 801db46:	2000      	movs	r0, #0
 801db48:	e7f7      	b.n	801db3a <__swsetup_r+0xba>
 801db4a:	bf00      	nop
 801db4c:	24000100 	.word	0x24000100
 801db50:	08038f68 	.word	0x08038f68
 801db54:	08038f88 	.word	0x08038f88
 801db58:	08038f48 	.word	0x08038f48

0801db5c <__sflush_r>:
 801db5c:	898a      	ldrh	r2, [r1, #12]
 801db5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db62:	4605      	mov	r5, r0
 801db64:	0710      	lsls	r0, r2, #28
 801db66:	460c      	mov	r4, r1
 801db68:	d458      	bmi.n	801dc1c <__sflush_r+0xc0>
 801db6a:	684b      	ldr	r3, [r1, #4]
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	dc05      	bgt.n	801db7c <__sflush_r+0x20>
 801db70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801db72:	2b00      	cmp	r3, #0
 801db74:	dc02      	bgt.n	801db7c <__sflush_r+0x20>
 801db76:	2000      	movs	r0, #0
 801db78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801db7e:	2e00      	cmp	r6, #0
 801db80:	d0f9      	beq.n	801db76 <__sflush_r+0x1a>
 801db82:	2300      	movs	r3, #0
 801db84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801db88:	682f      	ldr	r7, [r5, #0]
 801db8a:	602b      	str	r3, [r5, #0]
 801db8c:	d032      	beq.n	801dbf4 <__sflush_r+0x98>
 801db8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801db90:	89a3      	ldrh	r3, [r4, #12]
 801db92:	075a      	lsls	r2, r3, #29
 801db94:	d505      	bpl.n	801dba2 <__sflush_r+0x46>
 801db96:	6863      	ldr	r3, [r4, #4]
 801db98:	1ac0      	subs	r0, r0, r3
 801db9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801db9c:	b10b      	cbz	r3, 801dba2 <__sflush_r+0x46>
 801db9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dba0:	1ac0      	subs	r0, r0, r3
 801dba2:	2300      	movs	r3, #0
 801dba4:	4602      	mov	r2, r0
 801dba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dba8:	6a21      	ldr	r1, [r4, #32]
 801dbaa:	4628      	mov	r0, r5
 801dbac:	47b0      	blx	r6
 801dbae:	1c43      	adds	r3, r0, #1
 801dbb0:	89a3      	ldrh	r3, [r4, #12]
 801dbb2:	d106      	bne.n	801dbc2 <__sflush_r+0x66>
 801dbb4:	6829      	ldr	r1, [r5, #0]
 801dbb6:	291d      	cmp	r1, #29
 801dbb8:	d82c      	bhi.n	801dc14 <__sflush_r+0xb8>
 801dbba:	4a2a      	ldr	r2, [pc, #168]	; (801dc64 <__sflush_r+0x108>)
 801dbbc:	40ca      	lsrs	r2, r1
 801dbbe:	07d6      	lsls	r6, r2, #31
 801dbc0:	d528      	bpl.n	801dc14 <__sflush_r+0xb8>
 801dbc2:	2200      	movs	r2, #0
 801dbc4:	6062      	str	r2, [r4, #4]
 801dbc6:	04d9      	lsls	r1, r3, #19
 801dbc8:	6922      	ldr	r2, [r4, #16]
 801dbca:	6022      	str	r2, [r4, #0]
 801dbcc:	d504      	bpl.n	801dbd8 <__sflush_r+0x7c>
 801dbce:	1c42      	adds	r2, r0, #1
 801dbd0:	d101      	bne.n	801dbd6 <__sflush_r+0x7a>
 801dbd2:	682b      	ldr	r3, [r5, #0]
 801dbd4:	b903      	cbnz	r3, 801dbd8 <__sflush_r+0x7c>
 801dbd6:	6560      	str	r0, [r4, #84]	; 0x54
 801dbd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dbda:	602f      	str	r7, [r5, #0]
 801dbdc:	2900      	cmp	r1, #0
 801dbde:	d0ca      	beq.n	801db76 <__sflush_r+0x1a>
 801dbe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dbe4:	4299      	cmp	r1, r3
 801dbe6:	d002      	beq.n	801dbee <__sflush_r+0x92>
 801dbe8:	4628      	mov	r0, r5
 801dbea:	f7ff fad5 	bl	801d198 <_free_r>
 801dbee:	2000      	movs	r0, #0
 801dbf0:	6360      	str	r0, [r4, #52]	; 0x34
 801dbf2:	e7c1      	b.n	801db78 <__sflush_r+0x1c>
 801dbf4:	6a21      	ldr	r1, [r4, #32]
 801dbf6:	2301      	movs	r3, #1
 801dbf8:	4628      	mov	r0, r5
 801dbfa:	47b0      	blx	r6
 801dbfc:	1c41      	adds	r1, r0, #1
 801dbfe:	d1c7      	bne.n	801db90 <__sflush_r+0x34>
 801dc00:	682b      	ldr	r3, [r5, #0]
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d0c4      	beq.n	801db90 <__sflush_r+0x34>
 801dc06:	2b1d      	cmp	r3, #29
 801dc08:	d001      	beq.n	801dc0e <__sflush_r+0xb2>
 801dc0a:	2b16      	cmp	r3, #22
 801dc0c:	d101      	bne.n	801dc12 <__sflush_r+0xb6>
 801dc0e:	602f      	str	r7, [r5, #0]
 801dc10:	e7b1      	b.n	801db76 <__sflush_r+0x1a>
 801dc12:	89a3      	ldrh	r3, [r4, #12]
 801dc14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc18:	81a3      	strh	r3, [r4, #12]
 801dc1a:	e7ad      	b.n	801db78 <__sflush_r+0x1c>
 801dc1c:	690f      	ldr	r7, [r1, #16]
 801dc1e:	2f00      	cmp	r7, #0
 801dc20:	d0a9      	beq.n	801db76 <__sflush_r+0x1a>
 801dc22:	0793      	lsls	r3, r2, #30
 801dc24:	680e      	ldr	r6, [r1, #0]
 801dc26:	bf08      	it	eq
 801dc28:	694b      	ldreq	r3, [r1, #20]
 801dc2a:	600f      	str	r7, [r1, #0]
 801dc2c:	bf18      	it	ne
 801dc2e:	2300      	movne	r3, #0
 801dc30:	eba6 0807 	sub.w	r8, r6, r7
 801dc34:	608b      	str	r3, [r1, #8]
 801dc36:	f1b8 0f00 	cmp.w	r8, #0
 801dc3a:	dd9c      	ble.n	801db76 <__sflush_r+0x1a>
 801dc3c:	6a21      	ldr	r1, [r4, #32]
 801dc3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dc40:	4643      	mov	r3, r8
 801dc42:	463a      	mov	r2, r7
 801dc44:	4628      	mov	r0, r5
 801dc46:	47b0      	blx	r6
 801dc48:	2800      	cmp	r0, #0
 801dc4a:	dc06      	bgt.n	801dc5a <__sflush_r+0xfe>
 801dc4c:	89a3      	ldrh	r3, [r4, #12]
 801dc4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc52:	81a3      	strh	r3, [r4, #12]
 801dc54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dc58:	e78e      	b.n	801db78 <__sflush_r+0x1c>
 801dc5a:	4407      	add	r7, r0
 801dc5c:	eba8 0800 	sub.w	r8, r8, r0
 801dc60:	e7e9      	b.n	801dc36 <__sflush_r+0xda>
 801dc62:	bf00      	nop
 801dc64:	20400001 	.word	0x20400001

0801dc68 <_fflush_r>:
 801dc68:	b538      	push	{r3, r4, r5, lr}
 801dc6a:	690b      	ldr	r3, [r1, #16]
 801dc6c:	4605      	mov	r5, r0
 801dc6e:	460c      	mov	r4, r1
 801dc70:	b913      	cbnz	r3, 801dc78 <_fflush_r+0x10>
 801dc72:	2500      	movs	r5, #0
 801dc74:	4628      	mov	r0, r5
 801dc76:	bd38      	pop	{r3, r4, r5, pc}
 801dc78:	b118      	cbz	r0, 801dc82 <_fflush_r+0x1a>
 801dc7a:	6983      	ldr	r3, [r0, #24]
 801dc7c:	b90b      	cbnz	r3, 801dc82 <_fflush_r+0x1a>
 801dc7e:	f000 f887 	bl	801dd90 <__sinit>
 801dc82:	4b14      	ldr	r3, [pc, #80]	; (801dcd4 <_fflush_r+0x6c>)
 801dc84:	429c      	cmp	r4, r3
 801dc86:	d11b      	bne.n	801dcc0 <_fflush_r+0x58>
 801dc88:	686c      	ldr	r4, [r5, #4]
 801dc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	d0ef      	beq.n	801dc72 <_fflush_r+0xa>
 801dc92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dc94:	07d0      	lsls	r0, r2, #31
 801dc96:	d404      	bmi.n	801dca2 <_fflush_r+0x3a>
 801dc98:	0599      	lsls	r1, r3, #22
 801dc9a:	d402      	bmi.n	801dca2 <_fflush_r+0x3a>
 801dc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc9e:	f000 f915 	bl	801decc <__retarget_lock_acquire_recursive>
 801dca2:	4628      	mov	r0, r5
 801dca4:	4621      	mov	r1, r4
 801dca6:	f7ff ff59 	bl	801db5c <__sflush_r>
 801dcaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dcac:	07da      	lsls	r2, r3, #31
 801dcae:	4605      	mov	r5, r0
 801dcb0:	d4e0      	bmi.n	801dc74 <_fflush_r+0xc>
 801dcb2:	89a3      	ldrh	r3, [r4, #12]
 801dcb4:	059b      	lsls	r3, r3, #22
 801dcb6:	d4dd      	bmi.n	801dc74 <_fflush_r+0xc>
 801dcb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcba:	f000 f908 	bl	801dece <__retarget_lock_release_recursive>
 801dcbe:	e7d9      	b.n	801dc74 <_fflush_r+0xc>
 801dcc0:	4b05      	ldr	r3, [pc, #20]	; (801dcd8 <_fflush_r+0x70>)
 801dcc2:	429c      	cmp	r4, r3
 801dcc4:	d101      	bne.n	801dcca <_fflush_r+0x62>
 801dcc6:	68ac      	ldr	r4, [r5, #8]
 801dcc8:	e7df      	b.n	801dc8a <_fflush_r+0x22>
 801dcca:	4b04      	ldr	r3, [pc, #16]	; (801dcdc <_fflush_r+0x74>)
 801dccc:	429c      	cmp	r4, r3
 801dcce:	bf08      	it	eq
 801dcd0:	68ec      	ldreq	r4, [r5, #12]
 801dcd2:	e7da      	b.n	801dc8a <_fflush_r+0x22>
 801dcd4:	08038f68 	.word	0x08038f68
 801dcd8:	08038f88 	.word	0x08038f88
 801dcdc:	08038f48 	.word	0x08038f48

0801dce0 <std>:
 801dce0:	2300      	movs	r3, #0
 801dce2:	b510      	push	{r4, lr}
 801dce4:	4604      	mov	r4, r0
 801dce6:	e9c0 3300 	strd	r3, r3, [r0]
 801dcea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dcee:	6083      	str	r3, [r0, #8]
 801dcf0:	8181      	strh	r1, [r0, #12]
 801dcf2:	6643      	str	r3, [r0, #100]	; 0x64
 801dcf4:	81c2      	strh	r2, [r0, #14]
 801dcf6:	6183      	str	r3, [r0, #24]
 801dcf8:	4619      	mov	r1, r3
 801dcfa:	2208      	movs	r2, #8
 801dcfc:	305c      	adds	r0, #92	; 0x5c
 801dcfe:	f7ff fa43 	bl	801d188 <memset>
 801dd02:	4b05      	ldr	r3, [pc, #20]	; (801dd18 <std+0x38>)
 801dd04:	6263      	str	r3, [r4, #36]	; 0x24
 801dd06:	4b05      	ldr	r3, [pc, #20]	; (801dd1c <std+0x3c>)
 801dd08:	62a3      	str	r3, [r4, #40]	; 0x28
 801dd0a:	4b05      	ldr	r3, [pc, #20]	; (801dd20 <std+0x40>)
 801dd0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dd0e:	4b05      	ldr	r3, [pc, #20]	; (801dd24 <std+0x44>)
 801dd10:	6224      	str	r4, [r4, #32]
 801dd12:	6323      	str	r3, [r4, #48]	; 0x30
 801dd14:	bd10      	pop	{r4, pc}
 801dd16:	bf00      	nop
 801dd18:	0801dfb5 	.word	0x0801dfb5
 801dd1c:	0801dfd7 	.word	0x0801dfd7
 801dd20:	0801e00f 	.word	0x0801e00f
 801dd24:	0801e033 	.word	0x0801e033

0801dd28 <_cleanup_r>:
 801dd28:	4901      	ldr	r1, [pc, #4]	; (801dd30 <_cleanup_r+0x8>)
 801dd2a:	f000 b8af 	b.w	801de8c <_fwalk_reent>
 801dd2e:	bf00      	nop
 801dd30:	0801dc69 	.word	0x0801dc69

0801dd34 <__sfmoreglue>:
 801dd34:	b570      	push	{r4, r5, r6, lr}
 801dd36:	2268      	movs	r2, #104	; 0x68
 801dd38:	1e4d      	subs	r5, r1, #1
 801dd3a:	4355      	muls	r5, r2
 801dd3c:	460e      	mov	r6, r1
 801dd3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dd42:	f7ff fa95 	bl	801d270 <_malloc_r>
 801dd46:	4604      	mov	r4, r0
 801dd48:	b140      	cbz	r0, 801dd5c <__sfmoreglue+0x28>
 801dd4a:	2100      	movs	r1, #0
 801dd4c:	e9c0 1600 	strd	r1, r6, [r0]
 801dd50:	300c      	adds	r0, #12
 801dd52:	60a0      	str	r0, [r4, #8]
 801dd54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dd58:	f7ff fa16 	bl	801d188 <memset>
 801dd5c:	4620      	mov	r0, r4
 801dd5e:	bd70      	pop	{r4, r5, r6, pc}

0801dd60 <__sfp_lock_acquire>:
 801dd60:	4801      	ldr	r0, [pc, #4]	; (801dd68 <__sfp_lock_acquire+0x8>)
 801dd62:	f000 b8b3 	b.w	801decc <__retarget_lock_acquire_recursive>
 801dd66:	bf00      	nop
 801dd68:	24003761 	.word	0x24003761

0801dd6c <__sfp_lock_release>:
 801dd6c:	4801      	ldr	r0, [pc, #4]	; (801dd74 <__sfp_lock_release+0x8>)
 801dd6e:	f000 b8ae 	b.w	801dece <__retarget_lock_release_recursive>
 801dd72:	bf00      	nop
 801dd74:	24003761 	.word	0x24003761

0801dd78 <__sinit_lock_acquire>:
 801dd78:	4801      	ldr	r0, [pc, #4]	; (801dd80 <__sinit_lock_acquire+0x8>)
 801dd7a:	f000 b8a7 	b.w	801decc <__retarget_lock_acquire_recursive>
 801dd7e:	bf00      	nop
 801dd80:	24003762 	.word	0x24003762

0801dd84 <__sinit_lock_release>:
 801dd84:	4801      	ldr	r0, [pc, #4]	; (801dd8c <__sinit_lock_release+0x8>)
 801dd86:	f000 b8a2 	b.w	801dece <__retarget_lock_release_recursive>
 801dd8a:	bf00      	nop
 801dd8c:	24003762 	.word	0x24003762

0801dd90 <__sinit>:
 801dd90:	b510      	push	{r4, lr}
 801dd92:	4604      	mov	r4, r0
 801dd94:	f7ff fff0 	bl	801dd78 <__sinit_lock_acquire>
 801dd98:	69a3      	ldr	r3, [r4, #24]
 801dd9a:	b11b      	cbz	r3, 801dda4 <__sinit+0x14>
 801dd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dda0:	f7ff bff0 	b.w	801dd84 <__sinit_lock_release>
 801dda4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801dda8:	6523      	str	r3, [r4, #80]	; 0x50
 801ddaa:	4b13      	ldr	r3, [pc, #76]	; (801ddf8 <__sinit+0x68>)
 801ddac:	4a13      	ldr	r2, [pc, #76]	; (801ddfc <__sinit+0x6c>)
 801ddae:	681b      	ldr	r3, [r3, #0]
 801ddb0:	62a2      	str	r2, [r4, #40]	; 0x28
 801ddb2:	42a3      	cmp	r3, r4
 801ddb4:	bf04      	itt	eq
 801ddb6:	2301      	moveq	r3, #1
 801ddb8:	61a3      	streq	r3, [r4, #24]
 801ddba:	4620      	mov	r0, r4
 801ddbc:	f000 f820 	bl	801de00 <__sfp>
 801ddc0:	6060      	str	r0, [r4, #4]
 801ddc2:	4620      	mov	r0, r4
 801ddc4:	f000 f81c 	bl	801de00 <__sfp>
 801ddc8:	60a0      	str	r0, [r4, #8]
 801ddca:	4620      	mov	r0, r4
 801ddcc:	f000 f818 	bl	801de00 <__sfp>
 801ddd0:	2200      	movs	r2, #0
 801ddd2:	60e0      	str	r0, [r4, #12]
 801ddd4:	2104      	movs	r1, #4
 801ddd6:	6860      	ldr	r0, [r4, #4]
 801ddd8:	f7ff ff82 	bl	801dce0 <std>
 801dddc:	68a0      	ldr	r0, [r4, #8]
 801ddde:	2201      	movs	r2, #1
 801dde0:	2109      	movs	r1, #9
 801dde2:	f7ff ff7d 	bl	801dce0 <std>
 801dde6:	68e0      	ldr	r0, [r4, #12]
 801dde8:	2202      	movs	r2, #2
 801ddea:	2112      	movs	r1, #18
 801ddec:	f7ff ff78 	bl	801dce0 <std>
 801ddf0:	2301      	movs	r3, #1
 801ddf2:	61a3      	str	r3, [r4, #24]
 801ddf4:	e7d2      	b.n	801dd9c <__sinit+0xc>
 801ddf6:	bf00      	nop
 801ddf8:	08038f10 	.word	0x08038f10
 801ddfc:	0801dd29 	.word	0x0801dd29

0801de00 <__sfp>:
 801de00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de02:	4607      	mov	r7, r0
 801de04:	f7ff ffac 	bl	801dd60 <__sfp_lock_acquire>
 801de08:	4b1e      	ldr	r3, [pc, #120]	; (801de84 <__sfp+0x84>)
 801de0a:	681e      	ldr	r6, [r3, #0]
 801de0c:	69b3      	ldr	r3, [r6, #24]
 801de0e:	b913      	cbnz	r3, 801de16 <__sfp+0x16>
 801de10:	4630      	mov	r0, r6
 801de12:	f7ff ffbd 	bl	801dd90 <__sinit>
 801de16:	3648      	adds	r6, #72	; 0x48
 801de18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801de1c:	3b01      	subs	r3, #1
 801de1e:	d503      	bpl.n	801de28 <__sfp+0x28>
 801de20:	6833      	ldr	r3, [r6, #0]
 801de22:	b30b      	cbz	r3, 801de68 <__sfp+0x68>
 801de24:	6836      	ldr	r6, [r6, #0]
 801de26:	e7f7      	b.n	801de18 <__sfp+0x18>
 801de28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801de2c:	b9d5      	cbnz	r5, 801de64 <__sfp+0x64>
 801de2e:	4b16      	ldr	r3, [pc, #88]	; (801de88 <__sfp+0x88>)
 801de30:	60e3      	str	r3, [r4, #12]
 801de32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801de36:	6665      	str	r5, [r4, #100]	; 0x64
 801de38:	f000 f847 	bl	801deca <__retarget_lock_init_recursive>
 801de3c:	f7ff ff96 	bl	801dd6c <__sfp_lock_release>
 801de40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801de44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801de48:	6025      	str	r5, [r4, #0]
 801de4a:	61a5      	str	r5, [r4, #24]
 801de4c:	2208      	movs	r2, #8
 801de4e:	4629      	mov	r1, r5
 801de50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801de54:	f7ff f998 	bl	801d188 <memset>
 801de58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801de5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801de60:	4620      	mov	r0, r4
 801de62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de64:	3468      	adds	r4, #104	; 0x68
 801de66:	e7d9      	b.n	801de1c <__sfp+0x1c>
 801de68:	2104      	movs	r1, #4
 801de6a:	4638      	mov	r0, r7
 801de6c:	f7ff ff62 	bl	801dd34 <__sfmoreglue>
 801de70:	4604      	mov	r4, r0
 801de72:	6030      	str	r0, [r6, #0]
 801de74:	2800      	cmp	r0, #0
 801de76:	d1d5      	bne.n	801de24 <__sfp+0x24>
 801de78:	f7ff ff78 	bl	801dd6c <__sfp_lock_release>
 801de7c:	230c      	movs	r3, #12
 801de7e:	603b      	str	r3, [r7, #0]
 801de80:	e7ee      	b.n	801de60 <__sfp+0x60>
 801de82:	bf00      	nop
 801de84:	08038f10 	.word	0x08038f10
 801de88:	ffff0001 	.word	0xffff0001

0801de8c <_fwalk_reent>:
 801de8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de90:	4606      	mov	r6, r0
 801de92:	4688      	mov	r8, r1
 801de94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801de98:	2700      	movs	r7, #0
 801de9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801de9e:	f1b9 0901 	subs.w	r9, r9, #1
 801dea2:	d505      	bpl.n	801deb0 <_fwalk_reent+0x24>
 801dea4:	6824      	ldr	r4, [r4, #0]
 801dea6:	2c00      	cmp	r4, #0
 801dea8:	d1f7      	bne.n	801de9a <_fwalk_reent+0xe>
 801deaa:	4638      	mov	r0, r7
 801deac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801deb0:	89ab      	ldrh	r3, [r5, #12]
 801deb2:	2b01      	cmp	r3, #1
 801deb4:	d907      	bls.n	801dec6 <_fwalk_reent+0x3a>
 801deb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801deba:	3301      	adds	r3, #1
 801debc:	d003      	beq.n	801dec6 <_fwalk_reent+0x3a>
 801debe:	4629      	mov	r1, r5
 801dec0:	4630      	mov	r0, r6
 801dec2:	47c0      	blx	r8
 801dec4:	4307      	orrs	r7, r0
 801dec6:	3568      	adds	r5, #104	; 0x68
 801dec8:	e7e9      	b.n	801de9e <_fwalk_reent+0x12>

0801deca <__retarget_lock_init_recursive>:
 801deca:	4770      	bx	lr

0801decc <__retarget_lock_acquire_recursive>:
 801decc:	4770      	bx	lr

0801dece <__retarget_lock_release_recursive>:
 801dece:	4770      	bx	lr

0801ded0 <__swhatbuf_r>:
 801ded0:	b570      	push	{r4, r5, r6, lr}
 801ded2:	460e      	mov	r6, r1
 801ded4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ded8:	2900      	cmp	r1, #0
 801deda:	b096      	sub	sp, #88	; 0x58
 801dedc:	4614      	mov	r4, r2
 801dede:	461d      	mov	r5, r3
 801dee0:	da08      	bge.n	801def4 <__swhatbuf_r+0x24>
 801dee2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801dee6:	2200      	movs	r2, #0
 801dee8:	602a      	str	r2, [r5, #0]
 801deea:	061a      	lsls	r2, r3, #24
 801deec:	d410      	bmi.n	801df10 <__swhatbuf_r+0x40>
 801deee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801def2:	e00e      	b.n	801df12 <__swhatbuf_r+0x42>
 801def4:	466a      	mov	r2, sp
 801def6:	f000 f8c3 	bl	801e080 <_fstat_r>
 801defa:	2800      	cmp	r0, #0
 801defc:	dbf1      	blt.n	801dee2 <__swhatbuf_r+0x12>
 801defe:	9a01      	ldr	r2, [sp, #4]
 801df00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801df04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801df08:	425a      	negs	r2, r3
 801df0a:	415a      	adcs	r2, r3
 801df0c:	602a      	str	r2, [r5, #0]
 801df0e:	e7ee      	b.n	801deee <__swhatbuf_r+0x1e>
 801df10:	2340      	movs	r3, #64	; 0x40
 801df12:	2000      	movs	r0, #0
 801df14:	6023      	str	r3, [r4, #0]
 801df16:	b016      	add	sp, #88	; 0x58
 801df18:	bd70      	pop	{r4, r5, r6, pc}
	...

0801df1c <__smakebuf_r>:
 801df1c:	898b      	ldrh	r3, [r1, #12]
 801df1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801df20:	079d      	lsls	r5, r3, #30
 801df22:	4606      	mov	r6, r0
 801df24:	460c      	mov	r4, r1
 801df26:	d507      	bpl.n	801df38 <__smakebuf_r+0x1c>
 801df28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801df2c:	6023      	str	r3, [r4, #0]
 801df2e:	6123      	str	r3, [r4, #16]
 801df30:	2301      	movs	r3, #1
 801df32:	6163      	str	r3, [r4, #20]
 801df34:	b002      	add	sp, #8
 801df36:	bd70      	pop	{r4, r5, r6, pc}
 801df38:	ab01      	add	r3, sp, #4
 801df3a:	466a      	mov	r2, sp
 801df3c:	f7ff ffc8 	bl	801ded0 <__swhatbuf_r>
 801df40:	9900      	ldr	r1, [sp, #0]
 801df42:	4605      	mov	r5, r0
 801df44:	4630      	mov	r0, r6
 801df46:	f7ff f993 	bl	801d270 <_malloc_r>
 801df4a:	b948      	cbnz	r0, 801df60 <__smakebuf_r+0x44>
 801df4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df50:	059a      	lsls	r2, r3, #22
 801df52:	d4ef      	bmi.n	801df34 <__smakebuf_r+0x18>
 801df54:	f023 0303 	bic.w	r3, r3, #3
 801df58:	f043 0302 	orr.w	r3, r3, #2
 801df5c:	81a3      	strh	r3, [r4, #12]
 801df5e:	e7e3      	b.n	801df28 <__smakebuf_r+0xc>
 801df60:	4b0d      	ldr	r3, [pc, #52]	; (801df98 <__smakebuf_r+0x7c>)
 801df62:	62b3      	str	r3, [r6, #40]	; 0x28
 801df64:	89a3      	ldrh	r3, [r4, #12]
 801df66:	6020      	str	r0, [r4, #0]
 801df68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801df6c:	81a3      	strh	r3, [r4, #12]
 801df6e:	9b00      	ldr	r3, [sp, #0]
 801df70:	6163      	str	r3, [r4, #20]
 801df72:	9b01      	ldr	r3, [sp, #4]
 801df74:	6120      	str	r0, [r4, #16]
 801df76:	b15b      	cbz	r3, 801df90 <__smakebuf_r+0x74>
 801df78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df7c:	4630      	mov	r0, r6
 801df7e:	f000 f891 	bl	801e0a4 <_isatty_r>
 801df82:	b128      	cbz	r0, 801df90 <__smakebuf_r+0x74>
 801df84:	89a3      	ldrh	r3, [r4, #12]
 801df86:	f023 0303 	bic.w	r3, r3, #3
 801df8a:	f043 0301 	orr.w	r3, r3, #1
 801df8e:	81a3      	strh	r3, [r4, #12]
 801df90:	89a0      	ldrh	r0, [r4, #12]
 801df92:	4305      	orrs	r5, r0
 801df94:	81a5      	strh	r5, [r4, #12]
 801df96:	e7cd      	b.n	801df34 <__smakebuf_r+0x18>
 801df98:	0801dd29 	.word	0x0801dd29

0801df9c <__malloc_lock>:
 801df9c:	4801      	ldr	r0, [pc, #4]	; (801dfa4 <__malloc_lock+0x8>)
 801df9e:	f7ff bf95 	b.w	801decc <__retarget_lock_acquire_recursive>
 801dfa2:	bf00      	nop
 801dfa4:	24003760 	.word	0x24003760

0801dfa8 <__malloc_unlock>:
 801dfa8:	4801      	ldr	r0, [pc, #4]	; (801dfb0 <__malloc_unlock+0x8>)
 801dfaa:	f7ff bf90 	b.w	801dece <__retarget_lock_release_recursive>
 801dfae:	bf00      	nop
 801dfb0:	24003760 	.word	0x24003760

0801dfb4 <__sread>:
 801dfb4:	b510      	push	{r4, lr}
 801dfb6:	460c      	mov	r4, r1
 801dfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfbc:	f000 f894 	bl	801e0e8 <_read_r>
 801dfc0:	2800      	cmp	r0, #0
 801dfc2:	bfab      	itete	ge
 801dfc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dfc6:	89a3      	ldrhlt	r3, [r4, #12]
 801dfc8:	181b      	addge	r3, r3, r0
 801dfca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dfce:	bfac      	ite	ge
 801dfd0:	6563      	strge	r3, [r4, #84]	; 0x54
 801dfd2:	81a3      	strhlt	r3, [r4, #12]
 801dfd4:	bd10      	pop	{r4, pc}

0801dfd6 <__swrite>:
 801dfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfda:	461f      	mov	r7, r3
 801dfdc:	898b      	ldrh	r3, [r1, #12]
 801dfde:	05db      	lsls	r3, r3, #23
 801dfe0:	4605      	mov	r5, r0
 801dfe2:	460c      	mov	r4, r1
 801dfe4:	4616      	mov	r6, r2
 801dfe6:	d505      	bpl.n	801dff4 <__swrite+0x1e>
 801dfe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfec:	2302      	movs	r3, #2
 801dfee:	2200      	movs	r2, #0
 801dff0:	f000 f868 	bl	801e0c4 <_lseek_r>
 801dff4:	89a3      	ldrh	r3, [r4, #12]
 801dff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dffe:	81a3      	strh	r3, [r4, #12]
 801e000:	4632      	mov	r2, r6
 801e002:	463b      	mov	r3, r7
 801e004:	4628      	mov	r0, r5
 801e006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e00a:	f000 b817 	b.w	801e03c <_write_r>

0801e00e <__sseek>:
 801e00e:	b510      	push	{r4, lr}
 801e010:	460c      	mov	r4, r1
 801e012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e016:	f000 f855 	bl	801e0c4 <_lseek_r>
 801e01a:	1c43      	adds	r3, r0, #1
 801e01c:	89a3      	ldrh	r3, [r4, #12]
 801e01e:	bf15      	itete	ne
 801e020:	6560      	strne	r0, [r4, #84]	; 0x54
 801e022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e02a:	81a3      	strheq	r3, [r4, #12]
 801e02c:	bf18      	it	ne
 801e02e:	81a3      	strhne	r3, [r4, #12]
 801e030:	bd10      	pop	{r4, pc}

0801e032 <__sclose>:
 801e032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e036:	f000 b813 	b.w	801e060 <_close_r>
	...

0801e03c <_write_r>:
 801e03c:	b538      	push	{r3, r4, r5, lr}
 801e03e:	4d07      	ldr	r5, [pc, #28]	; (801e05c <_write_r+0x20>)
 801e040:	4604      	mov	r4, r0
 801e042:	4608      	mov	r0, r1
 801e044:	4611      	mov	r1, r2
 801e046:	2200      	movs	r2, #0
 801e048:	602a      	str	r2, [r5, #0]
 801e04a:	461a      	mov	r2, r3
 801e04c:	f7ed f8b5 	bl	800b1ba <_write>
 801e050:	1c43      	adds	r3, r0, #1
 801e052:	d102      	bne.n	801e05a <_write_r+0x1e>
 801e054:	682b      	ldr	r3, [r5, #0]
 801e056:	b103      	cbz	r3, 801e05a <_write_r+0x1e>
 801e058:	6023      	str	r3, [r4, #0]
 801e05a:	bd38      	pop	{r3, r4, r5, pc}
 801e05c:	24003764 	.word	0x24003764

0801e060 <_close_r>:
 801e060:	b538      	push	{r3, r4, r5, lr}
 801e062:	4d06      	ldr	r5, [pc, #24]	; (801e07c <_close_r+0x1c>)
 801e064:	2300      	movs	r3, #0
 801e066:	4604      	mov	r4, r0
 801e068:	4608      	mov	r0, r1
 801e06a:	602b      	str	r3, [r5, #0]
 801e06c:	f7ed f8c1 	bl	800b1f2 <_close>
 801e070:	1c43      	adds	r3, r0, #1
 801e072:	d102      	bne.n	801e07a <_close_r+0x1a>
 801e074:	682b      	ldr	r3, [r5, #0]
 801e076:	b103      	cbz	r3, 801e07a <_close_r+0x1a>
 801e078:	6023      	str	r3, [r4, #0]
 801e07a:	bd38      	pop	{r3, r4, r5, pc}
 801e07c:	24003764 	.word	0x24003764

0801e080 <_fstat_r>:
 801e080:	b538      	push	{r3, r4, r5, lr}
 801e082:	4d07      	ldr	r5, [pc, #28]	; (801e0a0 <_fstat_r+0x20>)
 801e084:	2300      	movs	r3, #0
 801e086:	4604      	mov	r4, r0
 801e088:	4608      	mov	r0, r1
 801e08a:	4611      	mov	r1, r2
 801e08c:	602b      	str	r3, [r5, #0]
 801e08e:	f7ed f8bc 	bl	800b20a <_fstat>
 801e092:	1c43      	adds	r3, r0, #1
 801e094:	d102      	bne.n	801e09c <_fstat_r+0x1c>
 801e096:	682b      	ldr	r3, [r5, #0]
 801e098:	b103      	cbz	r3, 801e09c <_fstat_r+0x1c>
 801e09a:	6023      	str	r3, [r4, #0]
 801e09c:	bd38      	pop	{r3, r4, r5, pc}
 801e09e:	bf00      	nop
 801e0a0:	24003764 	.word	0x24003764

0801e0a4 <_isatty_r>:
 801e0a4:	b538      	push	{r3, r4, r5, lr}
 801e0a6:	4d06      	ldr	r5, [pc, #24]	; (801e0c0 <_isatty_r+0x1c>)
 801e0a8:	2300      	movs	r3, #0
 801e0aa:	4604      	mov	r4, r0
 801e0ac:	4608      	mov	r0, r1
 801e0ae:	602b      	str	r3, [r5, #0]
 801e0b0:	f7ed f8bb 	bl	800b22a <_isatty>
 801e0b4:	1c43      	adds	r3, r0, #1
 801e0b6:	d102      	bne.n	801e0be <_isatty_r+0x1a>
 801e0b8:	682b      	ldr	r3, [r5, #0]
 801e0ba:	b103      	cbz	r3, 801e0be <_isatty_r+0x1a>
 801e0bc:	6023      	str	r3, [r4, #0]
 801e0be:	bd38      	pop	{r3, r4, r5, pc}
 801e0c0:	24003764 	.word	0x24003764

0801e0c4 <_lseek_r>:
 801e0c4:	b538      	push	{r3, r4, r5, lr}
 801e0c6:	4d07      	ldr	r5, [pc, #28]	; (801e0e4 <_lseek_r+0x20>)
 801e0c8:	4604      	mov	r4, r0
 801e0ca:	4608      	mov	r0, r1
 801e0cc:	4611      	mov	r1, r2
 801e0ce:	2200      	movs	r2, #0
 801e0d0:	602a      	str	r2, [r5, #0]
 801e0d2:	461a      	mov	r2, r3
 801e0d4:	f7ed f8b4 	bl	800b240 <_lseek>
 801e0d8:	1c43      	adds	r3, r0, #1
 801e0da:	d102      	bne.n	801e0e2 <_lseek_r+0x1e>
 801e0dc:	682b      	ldr	r3, [r5, #0]
 801e0de:	b103      	cbz	r3, 801e0e2 <_lseek_r+0x1e>
 801e0e0:	6023      	str	r3, [r4, #0]
 801e0e2:	bd38      	pop	{r3, r4, r5, pc}
 801e0e4:	24003764 	.word	0x24003764

0801e0e8 <_read_r>:
 801e0e8:	b538      	push	{r3, r4, r5, lr}
 801e0ea:	4d07      	ldr	r5, [pc, #28]	; (801e108 <_read_r+0x20>)
 801e0ec:	4604      	mov	r4, r0
 801e0ee:	4608      	mov	r0, r1
 801e0f0:	4611      	mov	r1, r2
 801e0f2:	2200      	movs	r2, #0
 801e0f4:	602a      	str	r2, [r5, #0]
 801e0f6:	461a      	mov	r2, r3
 801e0f8:	f7ed f842 	bl	800b180 <_read>
 801e0fc:	1c43      	adds	r3, r0, #1
 801e0fe:	d102      	bne.n	801e106 <_read_r+0x1e>
 801e100:	682b      	ldr	r3, [r5, #0]
 801e102:	b103      	cbz	r3, 801e106 <_read_r+0x1e>
 801e104:	6023      	str	r3, [r4, #0]
 801e106:	bd38      	pop	{r3, r4, r5, pc}
 801e108:	24003764 	.word	0x24003764

0801e10c <_init>:
 801e10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e10e:	bf00      	nop
 801e110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e112:	bc08      	pop	{r3}
 801e114:	469e      	mov	lr, r3
 801e116:	4770      	bx	lr

0801e118 <_fini>:
 801e118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e11a:	bf00      	nop
 801e11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e11e:	bc08      	pop	{r3}
 801e120:	469e      	mov	lr, r3
 801e122:	4770      	bx	lr
