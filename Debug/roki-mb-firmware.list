
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cbc0  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b814  0803ce60  0803ce60  0002ce60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08058674  08058674  00048674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0805867c  0805867c  0004867c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08058684  08058684  00048684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  24000000  0805868c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00026688  24000168  080587f4  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240267f0  080587f4  000567f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004c21c  00000000  00000000  00050196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000076d6  00000000  00000000  0009c3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030e8  00000000  00000000  000a3a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002e68  00000000  00000000  000a6b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045507  00000000  00000000  000a99d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039966  00000000  00000000  000eeedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00189cda  00000000  00000000  00128845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002b251f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000dec8  00000000  00000000  002b2570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000168 	.word	0x24000168
 80202bc:	00000000 	.word	0x00000000
 80202c0:	0803ce48 	.word	0x0803ce48

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	2400016c 	.word	0x2400016c
 80202dc:	0803ce48 	.word	0x0803ce48

080202e0 <memchr>:
 80202e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202e4:	2a10      	cmp	r2, #16
 80202e6:	db2b      	blt.n	8020340 <memchr+0x60>
 80202e8:	f010 0f07 	tst.w	r0, #7
 80202ec:	d008      	beq.n	8020300 <memchr+0x20>
 80202ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202f2:	3a01      	subs	r2, #1
 80202f4:	428b      	cmp	r3, r1
 80202f6:	d02d      	beq.n	8020354 <memchr+0x74>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	b342      	cbz	r2, 8020350 <memchr+0x70>
 80202fe:	d1f6      	bne.n	80202ee <memchr+0xe>
 8020300:	b4f0      	push	{r4, r5, r6, r7}
 8020302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802030a:	f022 0407 	bic.w	r4, r2, #7
 802030e:	f07f 0700 	mvns.w	r7, #0
 8020312:	2300      	movs	r3, #0
 8020314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020318:	3c08      	subs	r4, #8
 802031a:	ea85 0501 	eor.w	r5, r5, r1
 802031e:	ea86 0601 	eor.w	r6, r6, r1
 8020322:	fa85 f547 	uadd8	r5, r5, r7
 8020326:	faa3 f587 	sel	r5, r3, r7
 802032a:	fa86 f647 	uadd8	r6, r6, r7
 802032e:	faa5 f687 	sel	r6, r5, r7
 8020332:	b98e      	cbnz	r6, 8020358 <memchr+0x78>
 8020334:	d1ee      	bne.n	8020314 <memchr+0x34>
 8020336:	bcf0      	pop	{r4, r5, r6, r7}
 8020338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802033c:	f002 0207 	and.w	r2, r2, #7
 8020340:	b132      	cbz	r2, 8020350 <memchr+0x70>
 8020342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020346:	3a01      	subs	r2, #1
 8020348:	ea83 0301 	eor.w	r3, r3, r1
 802034c:	b113      	cbz	r3, 8020354 <memchr+0x74>
 802034e:	d1f8      	bne.n	8020342 <memchr+0x62>
 8020350:	2000      	movs	r0, #0
 8020352:	4770      	bx	lr
 8020354:	3801      	subs	r0, #1
 8020356:	4770      	bx	lr
 8020358:	2d00      	cmp	r5, #0
 802035a:	bf06      	itte	eq
 802035c:	4635      	moveq	r5, r6
 802035e:	3803      	subeq	r0, #3
 8020360:	3807      	subne	r0, #7
 8020362:	f015 0f01 	tst.w	r5, #1
 8020366:	d107      	bne.n	8020378 <memchr+0x98>
 8020368:	3001      	adds	r0, #1
 802036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802036e:	bf02      	ittt	eq
 8020370:	3001      	addeq	r0, #1
 8020372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020376:	3001      	addeq	r0, #1
 8020378:	bcf0      	pop	{r4, r5, r6, r7}
 802037a:	3801      	subs	r0, #1
 802037c:	4770      	bx	lr
 802037e:	bf00      	nop

08020380 <__aeabi_uldivmod>:
 8020380:	b953      	cbnz	r3, 8020398 <__aeabi_uldivmod+0x18>
 8020382:	b94a      	cbnz	r2, 8020398 <__aeabi_uldivmod+0x18>
 8020384:	2900      	cmp	r1, #0
 8020386:	bf08      	it	eq
 8020388:	2800      	cmpeq	r0, #0
 802038a:	bf1c      	itt	ne
 802038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020394:	f000 b974 	b.w	8020680 <__aeabi_idiv0>
 8020398:	f1ad 0c08 	sub.w	ip, sp, #8
 802039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203a0:	f000 f806 	bl	80203b0 <__udivmoddi4>
 80203a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ac:	b004      	add	sp, #16
 80203ae:	4770      	bx	lr

080203b0 <__udivmoddi4>:
 80203b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b4:	9d08      	ldr	r5, [sp, #32]
 80203b6:	4604      	mov	r4, r0
 80203b8:	468e      	mov	lr, r1
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d14d      	bne.n	802045a <__udivmoddi4+0xaa>
 80203be:	428a      	cmp	r2, r1
 80203c0:	4694      	mov	ip, r2
 80203c2:	d969      	bls.n	8020498 <__udivmoddi4+0xe8>
 80203c4:	fab2 f282 	clz	r2, r2
 80203c8:	b152      	cbz	r2, 80203e0 <__udivmoddi4+0x30>
 80203ca:	fa01 f302 	lsl.w	r3, r1, r2
 80203ce:	f1c2 0120 	rsb	r1, r2, #32
 80203d2:	fa20 f101 	lsr.w	r1, r0, r1
 80203d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203da:	ea41 0e03 	orr.w	lr, r1, r3
 80203de:	4094      	lsls	r4, r2
 80203e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203e4:	0c21      	lsrs	r1, r4, #16
 80203e6:	fbbe f6f8 	udiv	r6, lr, r8
 80203ea:	fa1f f78c 	uxth.w	r7, ip
 80203ee:	fb08 e316 	mls	r3, r8, r6, lr
 80203f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80203f6:	fb06 f107 	mul.w	r1, r6, r7
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d90a      	bls.n	8020414 <__udivmoddi4+0x64>
 80203fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020406:	f080 811f 	bcs.w	8020648 <__udivmoddi4+0x298>
 802040a:	4299      	cmp	r1, r3
 802040c:	f240 811c 	bls.w	8020648 <__udivmoddi4+0x298>
 8020410:	3e02      	subs	r6, #2
 8020412:	4463      	add	r3, ip
 8020414:	1a5b      	subs	r3, r3, r1
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb3 f0f8 	udiv	r0, r3, r8
 802041c:	fb08 3310 	mls	r3, r8, r0, r3
 8020420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020424:	fb00 f707 	mul.w	r7, r0, r7
 8020428:	42a7      	cmp	r7, r4
 802042a:	d90a      	bls.n	8020442 <__udivmoddi4+0x92>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020434:	f080 810a 	bcs.w	802064c <__udivmoddi4+0x29c>
 8020438:	42a7      	cmp	r7, r4
 802043a:	f240 8107 	bls.w	802064c <__udivmoddi4+0x29c>
 802043e:	4464      	add	r4, ip
 8020440:	3802      	subs	r0, #2
 8020442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020446:	1be4      	subs	r4, r4, r7
 8020448:	2600      	movs	r6, #0
 802044a:	b11d      	cbz	r5, 8020454 <__udivmoddi4+0xa4>
 802044c:	40d4      	lsrs	r4, r2
 802044e:	2300      	movs	r3, #0
 8020450:	e9c5 4300 	strd	r4, r3, [r5]
 8020454:	4631      	mov	r1, r6
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	428b      	cmp	r3, r1
 802045c:	d909      	bls.n	8020472 <__udivmoddi4+0xc2>
 802045e:	2d00      	cmp	r5, #0
 8020460:	f000 80ef 	beq.w	8020642 <__udivmoddi4+0x292>
 8020464:	2600      	movs	r6, #0
 8020466:	e9c5 0100 	strd	r0, r1, [r5]
 802046a:	4630      	mov	r0, r6
 802046c:	4631      	mov	r1, r6
 802046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020472:	fab3 f683 	clz	r6, r3
 8020476:	2e00      	cmp	r6, #0
 8020478:	d14a      	bne.n	8020510 <__udivmoddi4+0x160>
 802047a:	428b      	cmp	r3, r1
 802047c:	d302      	bcc.n	8020484 <__udivmoddi4+0xd4>
 802047e:	4282      	cmp	r2, r0
 8020480:	f200 80f9 	bhi.w	8020676 <__udivmoddi4+0x2c6>
 8020484:	1a84      	subs	r4, r0, r2
 8020486:	eb61 0303 	sbc.w	r3, r1, r3
 802048a:	2001      	movs	r0, #1
 802048c:	469e      	mov	lr, r3
 802048e:	2d00      	cmp	r5, #0
 8020490:	d0e0      	beq.n	8020454 <__udivmoddi4+0xa4>
 8020492:	e9c5 4e00 	strd	r4, lr, [r5]
 8020496:	e7dd      	b.n	8020454 <__udivmoddi4+0xa4>
 8020498:	b902      	cbnz	r2, 802049c <__udivmoddi4+0xec>
 802049a:	deff      	udf	#255	; 0xff
 802049c:	fab2 f282 	clz	r2, r2
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f040 8092 	bne.w	80205ca <__udivmoddi4+0x21a>
 80204a6:	eba1 010c 	sub.w	r1, r1, ip
 80204aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204ae:	fa1f fe8c 	uxth.w	lr, ip
 80204b2:	2601      	movs	r6, #1
 80204b4:	0c20      	lsrs	r0, r4, #16
 80204b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ba:	fb07 1113 	mls	r1, r7, r3, r1
 80204be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204c2:	fb0e f003 	mul.w	r0, lr, r3
 80204c6:	4288      	cmp	r0, r1
 80204c8:	d908      	bls.n	80204dc <__udivmoddi4+0x12c>
 80204ca:	eb1c 0101 	adds.w	r1, ip, r1
 80204ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80204d2:	d202      	bcs.n	80204da <__udivmoddi4+0x12a>
 80204d4:	4288      	cmp	r0, r1
 80204d6:	f200 80cb 	bhi.w	8020670 <__udivmoddi4+0x2c0>
 80204da:	4643      	mov	r3, r8
 80204dc:	1a09      	subs	r1, r1, r0
 80204de:	b2a4      	uxth	r4, r4
 80204e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204e4:	fb07 1110 	mls	r1, r7, r0, r1
 80204e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204ec:	fb0e fe00 	mul.w	lr, lr, r0
 80204f0:	45a6      	cmp	lr, r4
 80204f2:	d908      	bls.n	8020506 <__udivmoddi4+0x156>
 80204f4:	eb1c 0404 	adds.w	r4, ip, r4
 80204f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80204fc:	d202      	bcs.n	8020504 <__udivmoddi4+0x154>
 80204fe:	45a6      	cmp	lr, r4
 8020500:	f200 80bb 	bhi.w	802067a <__udivmoddi4+0x2ca>
 8020504:	4608      	mov	r0, r1
 8020506:	eba4 040e 	sub.w	r4, r4, lr
 802050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802050e:	e79c      	b.n	802044a <__udivmoddi4+0x9a>
 8020510:	f1c6 0720 	rsb	r7, r6, #32
 8020514:	40b3      	lsls	r3, r6
 8020516:	fa22 fc07 	lsr.w	ip, r2, r7
 802051a:	ea4c 0c03 	orr.w	ip, ip, r3
 802051e:	fa20 f407 	lsr.w	r4, r0, r7
 8020522:	fa01 f306 	lsl.w	r3, r1, r6
 8020526:	431c      	orrs	r4, r3
 8020528:	40f9      	lsrs	r1, r7
 802052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802052e:	fa00 f306 	lsl.w	r3, r0, r6
 8020532:	fbb1 f8f9 	udiv	r8, r1, r9
 8020536:	0c20      	lsrs	r0, r4, #16
 8020538:	fa1f fe8c 	uxth.w	lr, ip
 802053c:	fb09 1118 	mls	r1, r9, r8, r1
 8020540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020544:	fb08 f00e 	mul.w	r0, r8, lr
 8020548:	4288      	cmp	r0, r1
 802054a:	fa02 f206 	lsl.w	r2, r2, r6
 802054e:	d90b      	bls.n	8020568 <__udivmoddi4+0x1b8>
 8020550:	eb1c 0101 	adds.w	r1, ip, r1
 8020554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020558:	f080 8088 	bcs.w	802066c <__udivmoddi4+0x2bc>
 802055c:	4288      	cmp	r0, r1
 802055e:	f240 8085 	bls.w	802066c <__udivmoddi4+0x2bc>
 8020562:	f1a8 0802 	sub.w	r8, r8, #2
 8020566:	4461      	add	r1, ip
 8020568:	1a09      	subs	r1, r1, r0
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020570:	fb09 1110 	mls	r1, r9, r0, r1
 8020574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	458e      	cmp	lr, r1
 802057e:	d908      	bls.n	8020592 <__udivmoddi4+0x1e2>
 8020580:	eb1c 0101 	adds.w	r1, ip, r1
 8020584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020588:	d26c      	bcs.n	8020664 <__udivmoddi4+0x2b4>
 802058a:	458e      	cmp	lr, r1
 802058c:	d96a      	bls.n	8020664 <__udivmoddi4+0x2b4>
 802058e:	3802      	subs	r0, #2
 8020590:	4461      	add	r1, ip
 8020592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020596:	fba0 9402 	umull	r9, r4, r0, r2
 802059a:	eba1 010e 	sub.w	r1, r1, lr
 802059e:	42a1      	cmp	r1, r4
 80205a0:	46c8      	mov	r8, r9
 80205a2:	46a6      	mov	lr, r4
 80205a4:	d356      	bcc.n	8020654 <__udivmoddi4+0x2a4>
 80205a6:	d053      	beq.n	8020650 <__udivmoddi4+0x2a0>
 80205a8:	b15d      	cbz	r5, 80205c2 <__udivmoddi4+0x212>
 80205aa:	ebb3 0208 	subs.w	r2, r3, r8
 80205ae:	eb61 010e 	sbc.w	r1, r1, lr
 80205b2:	fa01 f707 	lsl.w	r7, r1, r7
 80205b6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ba:	40f1      	lsrs	r1, r6
 80205bc:	431f      	orrs	r7, r3
 80205be:	e9c5 7100 	strd	r7, r1, [r5]
 80205c2:	2600      	movs	r6, #0
 80205c4:	4631      	mov	r1, r6
 80205c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	40d8      	lsrs	r0, r3
 80205d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205d4:	fa21 f303 	lsr.w	r3, r1, r3
 80205d8:	4091      	lsls	r1, r2
 80205da:	4301      	orrs	r1, r0
 80205dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205e0:	fa1f fe8c 	uxth.w	lr, ip
 80205e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205e8:	fb07 3610 	mls	r6, r7, r0, r3
 80205ec:	0c0b      	lsrs	r3, r1, #16
 80205ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80205f2:	fb00 f60e 	mul.w	r6, r0, lr
 80205f6:	429e      	cmp	r6, r3
 80205f8:	fa04 f402 	lsl.w	r4, r4, r2
 80205fc:	d908      	bls.n	8020610 <__udivmoddi4+0x260>
 80205fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020606:	d22f      	bcs.n	8020668 <__udivmoddi4+0x2b8>
 8020608:	429e      	cmp	r6, r3
 802060a:	d92d      	bls.n	8020668 <__udivmoddi4+0x2b8>
 802060c:	3802      	subs	r0, #2
 802060e:	4463      	add	r3, ip
 8020610:	1b9b      	subs	r3, r3, r6
 8020612:	b289      	uxth	r1, r1
 8020614:	fbb3 f6f7 	udiv	r6, r3, r7
 8020618:	fb07 3316 	mls	r3, r7, r6, r3
 802061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020620:	fb06 f30e 	mul.w	r3, r6, lr
 8020624:	428b      	cmp	r3, r1
 8020626:	d908      	bls.n	802063a <__udivmoddi4+0x28a>
 8020628:	eb1c 0101 	adds.w	r1, ip, r1
 802062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020630:	d216      	bcs.n	8020660 <__udivmoddi4+0x2b0>
 8020632:	428b      	cmp	r3, r1
 8020634:	d914      	bls.n	8020660 <__udivmoddi4+0x2b0>
 8020636:	3e02      	subs	r6, #2
 8020638:	4461      	add	r1, ip
 802063a:	1ac9      	subs	r1, r1, r3
 802063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020640:	e738      	b.n	80204b4 <__udivmoddi4+0x104>
 8020642:	462e      	mov	r6, r5
 8020644:	4628      	mov	r0, r5
 8020646:	e705      	b.n	8020454 <__udivmoddi4+0xa4>
 8020648:	4606      	mov	r6, r0
 802064a:	e6e3      	b.n	8020414 <__udivmoddi4+0x64>
 802064c:	4618      	mov	r0, r3
 802064e:	e6f8      	b.n	8020442 <__udivmoddi4+0x92>
 8020650:	454b      	cmp	r3, r9
 8020652:	d2a9      	bcs.n	80205a8 <__udivmoddi4+0x1f8>
 8020654:	ebb9 0802 	subs.w	r8, r9, r2
 8020658:	eb64 0e0c 	sbc.w	lr, r4, ip
 802065c:	3801      	subs	r0, #1
 802065e:	e7a3      	b.n	80205a8 <__udivmoddi4+0x1f8>
 8020660:	4646      	mov	r6, r8
 8020662:	e7ea      	b.n	802063a <__udivmoddi4+0x28a>
 8020664:	4620      	mov	r0, r4
 8020666:	e794      	b.n	8020592 <__udivmoddi4+0x1e2>
 8020668:	4640      	mov	r0, r8
 802066a:	e7d1      	b.n	8020610 <__udivmoddi4+0x260>
 802066c:	46d0      	mov	r8, sl
 802066e:	e77b      	b.n	8020568 <__udivmoddi4+0x1b8>
 8020670:	3b02      	subs	r3, #2
 8020672:	4461      	add	r1, ip
 8020674:	e732      	b.n	80204dc <__udivmoddi4+0x12c>
 8020676:	4630      	mov	r0, r6
 8020678:	e709      	b.n	802048e <__udivmoddi4+0xde>
 802067a:	4464      	add	r4, ip
 802067c:	3802      	subs	r0, #2
 802067e:	e742      	b.n	8020506 <__udivmoddi4+0x156>

08020680 <__aeabi_idiv0>:
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop

08020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8020684:	b580      	push	{r7, lr}
 8020686:	b082      	sub	sp, #8
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
 802068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	683a      	ldr	r2, [r7, #0]
 8020692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802069c:	461a      	mov	r2, r3
 802069e:	2300      	movs	r3, #0
 80206a0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
	assert(spiHandle);
 80206a4:	683b      	ldr	r3, [r7, #0]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d105      	bne.n	80206b6 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x32>
 80206aa:	4b05      	ldr	r3, [pc, #20]	; (80206c0 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x3c>)
 80206ac:	4a05      	ldr	r2, [pc, #20]	; (80206c4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x40>)
 80206ae:	210c      	movs	r1, #12
 80206b0:	4805      	ldr	r0, [pc, #20]	; (80206c8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x44>)
 80206b2:	f01b fb75 	bl	803bda0 <__assert_func>
}
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	4618      	mov	r0, r3
 80206ba:	3708      	adds	r7, #8
 80206bc:	46bd      	mov	sp, r7
 80206be:	bd80      	pop	{r7, pc}
 80206c0:	0803ce60 	.word	0x0803ce60
 80206c4:	0803ce6c 	.word	0x0803ce6c
 80206c8:	0803ce98 	.word	0x0803ce98

080206cc <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80206cc:	b590      	push	{r4, r7, lr}
 80206ce:	b08b      	sub	sp, #44	; 0x2c
 80206d0:	af04      	add	r7, sp, #16
 80206d2:	60f8      	str	r0, [r7, #12]
 80206d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80206d8:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80206da:	2300      	movs	r3, #0
 80206dc:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80206de:	230c      	movs	r3, #12
 80206e0:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80206e2:	2300      	movs	r3, #0
 80206e4:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80206ec:	4618      	mov	r0, r3
 80206ee:	f000 fac5 	bl	8020c7c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	9302      	str	r3, [sp, #8]
 80206f6:	2300      	movs	r3, #0
 80206f8:	9301      	str	r3, [sp, #4]
 80206fa:	2340      	movs	r3, #64	; 0x40
 80206fc:	9300      	str	r3, [sp, #0]
 80206fe:	4b99      	ldr	r3, [pc, #612]	; (8020964 <_ZN10BHYWrapper4InitEfm+0x298>)
 8020700:	4a99      	ldr	r2, [pc, #612]	; (8020968 <_ZN10BHYWrapper4InitEfm+0x29c>)
 8020702:	499a      	ldr	r1, [pc, #616]	; (802096c <_ZN10BHYWrapper4InitEfm+0x2a0>)
 8020704:	2001      	movs	r0, #1
 8020706:	f007 fb12 	bl	8027d2e <bhy2_init>
 802070a:	4603      	mov	r3, r0
 802070c:	2b00      	cmp	r3, #0
 802070e:	bf14      	ite	ne
 8020710:	2301      	movne	r3, #1
 8020712:	2300      	moveq	r3, #0
 8020714:	b2db      	uxtb	r3, r3
 8020716:	2b00      	cmp	r3, #0
 8020718:	d001      	beq.n	802071e <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 802071a:	2301      	movs	r3, #1
 802071c:	e11d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 802071e:	68fb      	ldr	r3, [r7, #12]
 8020720:	4618      	mov	r0, r3
 8020722:	f007 faec 	bl	8027cfe <bhy2_soft_reset>
 8020726:	4603      	mov	r3, r0
 8020728:	2b00      	cmp	r3, #0
 802072a:	bf14      	ite	ne
 802072c:	2301      	movne	r3, #1
 802072e:	2300      	moveq	r3, #0
 8020730:	b2db      	uxtb	r3, r3
 8020732:	2b00      	cmp	r3, #0
 8020734:	d001      	beq.n	802073a <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 8020736:	2302      	movs	r3, #2
 8020738:	e10f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 802073a:	68fa      	ldr	r2, [r7, #12]
 802073c:	f107 0316 	add.w	r3, r7, #22
 8020740:	4611      	mov	r1, r2
 8020742:	4618      	mov	r0, r3
 8020744:	f007 f9c7 	bl	8027ad6 <bhy2_get_product_id>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	bf14      	ite	ne
 802074e:	2301      	movne	r3, #1
 8020750:	2300      	moveq	r3, #0
 8020752:	b2db      	uxtb	r3, r3
 8020754:	2b00      	cmp	r3, #0
 8020756:	d001      	beq.n	802075c <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 8020758:	2303      	movs	r3, #3
 802075a:	e0fe      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 802075c:	7dbb      	ldrb	r3, [r7, #22]
 802075e:	2b89      	cmp	r3, #137	; 0x89
 8020760:	d001      	beq.n	8020766 <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8020762:	2304      	movs	r3, #4
 8020764:	e0f9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 8020766:	7cfb      	ldrb	r3, [r7, #19]
 8020768:	68fa      	ldr	r2, [r7, #12]
 802076a:	4611      	mov	r1, r2
 802076c:	4618      	mov	r0, r3
 802076e:	f007 fa59 	bl	8027c24 <bhy2_set_host_interrupt_ctrl>
 8020772:	4603      	mov	r3, r0
 8020774:	2b00      	cmp	r3, #0
 8020776:	bf14      	ite	ne
 8020778:	2301      	movne	r3, #1
 802077a:	2300      	moveq	r3, #0
 802077c:	b2db      	uxtb	r3, r3
 802077e:	2b00      	cmp	r3, #0
 8020780:	d001      	beq.n	8020786 <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8020782:	2305      	movs	r3, #5
 8020784:	e0e9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 8020786:	68fa      	ldr	r2, [r7, #12]
 8020788:	f107 0313 	add.w	r3, r7, #19
 802078c:	4611      	mov	r1, r2
 802078e:	4618      	mov	r0, r3
 8020790:	f007 fa64 	bl	8027c5c <bhy2_get_host_interrupt_ctrl>
 8020794:	4603      	mov	r3, r0
 8020796:	2b00      	cmp	r3, #0
 8020798:	bf14      	ite	ne
 802079a:	2301      	movne	r3, #1
 802079c:	2300      	moveq	r3, #0
 802079e:	b2db      	uxtb	r3, r3
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d001      	beq.n	80207a8 <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 80207a4:	2306      	movs	r3, #6
 80207a6:	e0d8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 80207a8:	68fa      	ldr	r2, [r7, #12]
 80207aa:	7dfb      	ldrb	r3, [r7, #23]
 80207ac:	4611      	mov	r1, r2
 80207ae:	4618      	mov	r0, r3
 80207b0:	f007 fa89 	bl	8027cc6 <bhy2_set_host_intf_ctrl>
 80207b4:	4603      	mov	r3, r0
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	bf14      	ite	ne
 80207ba:	2301      	movne	r3, #1
 80207bc:	2300      	moveq	r3, #0
 80207be:	b2db      	uxtb	r3, r3
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	d001      	beq.n	80207c8 <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80207c4:	2307      	movs	r3, #7
 80207c6:	e0c8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80207c8:	68fa      	ldr	r2, [r7, #12]
 80207ca:	f107 0312 	add.w	r3, r7, #18
 80207ce:	4611      	mov	r1, r2
 80207d0:	4618      	mov	r0, r3
 80207d2:	f007 f9b4 	bl	8027b3e <bhy2_get_boot_status>
 80207d6:	4603      	mov	r3, r0
 80207d8:	2b00      	cmp	r3, #0
 80207da:	bf14      	ite	ne
 80207dc:	2301      	movne	r3, #1
 80207de:	2300      	moveq	r3, #0
 80207e0:	b2db      	uxtb	r3, r3
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d001      	beq.n	80207ea <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80207e6:	2308      	movs	r3, #8
 80207e8:	e0b7      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80207ea:	7cbb      	ldrb	r3, [r7, #18]
 80207ec:	f003 0310 	and.w	r3, r3, #16
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d101      	bne.n	80207f8 <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80207f4:	2309      	movs	r3, #9
 80207f6:	e0b0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80207f8:	68fb      	ldr	r3, [r7, #12]
 80207fa:	461a      	mov	r2, r3
 80207fc:	495c      	ldr	r1, [pc, #368]	; (8020970 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80207fe:	485d      	ldr	r0, [pc, #372]	; (8020974 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 8020800:	f007 f9d9 	bl	8027bb6 <bhy2_upload_firmware_to_ram>
 8020804:	4603      	mov	r3, r0
 8020806:	2b00      	cmp	r3, #0
 8020808:	bf14      	ite	ne
 802080a:	2301      	movne	r3, #1
 802080c:	2300      	moveq	r3, #0
 802080e:	b2db      	uxtb	r3, r3
 8020810:	2b00      	cmp	r3, #0
 8020812:	d001      	beq.n	8020818 <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8020814:	2309      	movs	r3, #9
 8020816:	e0a0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020818:	68fa      	ldr	r2, [r7, #12]
 802081a:	f107 0311 	add.w	r3, r7, #17
 802081e:	4611      	mov	r1, r2
 8020820:	4618      	mov	r0, r3
 8020822:	f007 fb6b 	bl	8027efc <bhy2_get_error_value>
 8020826:	4603      	mov	r3, r0
 8020828:	2b00      	cmp	r3, #0
 802082a:	bf14      	ite	ne
 802082c:	2301      	movne	r3, #1
 802082e:	2300      	moveq	r3, #0
 8020830:	b2db      	uxtb	r3, r3
 8020832:	2b00      	cmp	r3, #0
 8020834:	d001      	beq.n	802083a <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 8020836:	230a      	movs	r3, #10
 8020838:	e08f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 802083a:	7c7b      	ldrb	r3, [r7, #17]
 802083c:	2b00      	cmp	r3, #0
 802083e:	d001      	beq.n	8020844 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8020840:	230b      	movs	r3, #11
 8020842:	e08a      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	4618      	mov	r0, r3
 8020848:	f007 f9d4 	bl	8027bf4 <bhy2_boot_from_ram>
 802084c:	4603      	mov	r3, r0
 802084e:	2b00      	cmp	r3, #0
 8020850:	bf14      	ite	ne
 8020852:	2301      	movne	r3, #1
 8020854:	2300      	moveq	r3, #0
 8020856:	b2db      	uxtb	r3, r3
 8020858:	2b00      	cmp	r3, #0
 802085a:	d001      	beq.n	8020860 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 802085c:	230c      	movs	r3, #12
 802085e:	e07c      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020860:	68fa      	ldr	r2, [r7, #12]
 8020862:	f107 0311 	add.w	r3, r7, #17
 8020866:	4611      	mov	r1, r2
 8020868:	4618      	mov	r0, r3
 802086a:	f007 fb47 	bl	8027efc <bhy2_get_error_value>
 802086e:	4603      	mov	r3, r0
 8020870:	2b00      	cmp	r3, #0
 8020872:	bf14      	ite	ne
 8020874:	2301      	movne	r3, #1
 8020876:	2300      	moveq	r3, #0
 8020878:	b2db      	uxtb	r3, r3
 802087a:	2b00      	cmp	r3, #0
 802087c:	d001      	beq.n	8020882 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 802087e:	230d      	movs	r3, #13
 8020880:	e06b      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8020882:	7c7b      	ldrb	r3, [r7, #17]
 8020884:	2b00      	cmp	r3, #0
 8020886:	d001      	beq.n	802088c <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 8020888:	230e      	movs	r3, #14
 802088a:	e066      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 802088c:	68fa      	ldr	r2, [r7, #12]
 802088e:	f107 0314 	add.w	r3, r7, #20
 8020892:	4611      	mov	r1, r2
 8020894:	4618      	mov	r0, r3
 8020896:	f007 f938 	bl	8027b0a <bhy2_get_kernel_version>
 802089a:	4603      	mov	r3, r0
 802089c:	2b00      	cmp	r3, #0
 802089e:	bf14      	ite	ne
 80208a0:	2301      	movne	r3, #1
 80208a2:	2300      	moveq	r3, #0
 80208a4:	b2db      	uxtb	r3, r3
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d001      	beq.n	80208ae <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 80208aa:	230f      	movs	r3, #15
 80208ac:	e055      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80208ae:	8abb      	ldrh	r3, [r7, #20]
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d101      	bne.n	80208b8 <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80208b4:	2310      	movs	r3, #16
 80208b6:	e050      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80208b8:	68fb      	ldr	r3, [r7, #12]
 80208ba:	f241 123c 	movw	r2, #4412	; 0x113c
 80208be:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80208c0:	68fb      	ldr	r3, [r7, #12]
 80208c2:	492d      	ldr	r1, [pc, #180]	; (8020978 <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80208c4:	2025      	movs	r0, #37	; 0x25
 80208c6:	f007 fa5c 	bl	8027d82 <bhy2_register_fifo_parse_callback>
 80208ca:	4603      	mov	r3, r0
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	bf14      	ite	ne
 80208d0:	2301      	movne	r3, #1
 80208d2:	2300      	moveq	r3, #0
 80208d4:	b2db      	uxtb	r3, r3
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d001      	beq.n	80208de <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80208da:	2311      	movs	r3, #17
 80208dc:	e03d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80208de:	68fb      	ldr	r3, [r7, #12]
 80208e0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208e4:	4618      	mov	r0, r3
 80208e6:	f000 f9a4 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80208ea:	4604      	mov	r4, r0
 80208ec:	68fb      	ldr	r3, [r7, #12]
 80208ee:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208f2:	4618      	mov	r0, r3
 80208f4:	f000 f9aa 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80208f8:	4601      	mov	r1, r0
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	461a      	mov	r2, r3
 80208fe:	4620      	mov	r0, r4
 8020900:	f006 ff97 	bl	8027832 <bhy2_get_and_process_fifo>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	bf14      	ite	ne
 802090a:	2301      	movne	r3, #1
 802090c:	2300      	moveq	r3, #0
 802090e:	b2db      	uxtb	r3, r3
 8020910:	2b00      	cmp	r3, #0
 8020912:	d001      	beq.n	8020918 <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8020914:	2312      	movs	r3, #18
 8020916:	e020      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	4618      	mov	r0, r3
 802091c:	f007 fa60 	bl	8027de0 <bhy2_update_virtual_sensor_list>
 8020920:	4603      	mov	r3, r0
 8020922:	2b00      	cmp	r3, #0
 8020924:	bf14      	ite	ne
 8020926:	2301      	movne	r3, #1
 8020928:	2300      	moveq	r3, #0
 802092a:	b2db      	uxtb	r3, r3
 802092c:	2b00      	cmp	r3, #0
 802092e:	d001      	beq.n	8020934 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8020930:	2310      	movs	r3, #16
 8020932:	e012      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8020934:	68fb      	ldr	r3, [r7, #12]
 8020936:	461a      	mov	r2, r3
 8020938:	6879      	ldr	r1, [r7, #4]
 802093a:	ed97 0a02 	vldr	s0, [r7, #8]
 802093e:	2025      	movs	r0, #37	; 0x25
 8020940:	f007 f8a8 	bl	8027a94 <bhy2_set_virt_sensor_cfg>
 8020944:	4603      	mov	r3, r0
 8020946:	2b00      	cmp	r3, #0
 8020948:	bf14      	ite	ne
 802094a:	2301      	movne	r3, #1
 802094c:	2300      	moveq	r3, #0
 802094e:	b2db      	uxtb	r3, r3
 8020950:	2b00      	cmp	r3, #0
 8020952:	d001      	beq.n	8020958 <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8020954:	2311      	movs	r3, #17
 8020956:	e000      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 8020958:	2300      	movs	r3, #0
}
 802095a:	4618      	mov	r0, r3
 802095c:	371c      	adds	r7, #28
 802095e:	46bd      	mov	sp, r7
 8020960:	bd90      	pop	{r4, r7, pc}
 8020962:	bf00      	nop
 8020964:	08020e4d 	.word	0x08020e4d
 8020968:	08020dc9 	.word	0x08020dc9
 802096c:	08020d4d 	.word	0x08020d4d
 8020970:	0001a66c 	.word	0x0001a66c
 8020974:	0803dee8 	.word	0x0803dee8
 8020978:	08020a31 	.word	0x08020a31

0802097c <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 802097c:	b590      	push	{r4, r7, lr}
 802097e:	b085      	sub	sp, #20
 8020980:	af00      	add	r7, sp, #0
 8020982:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8020984:	2300      	movs	r3, #0
 8020986:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 8020988:	687a      	ldr	r2, [r7, #4]
 802098a:	f107 030f 	add.w	r3, r7, #15
 802098e:	4611      	mov	r1, r2
 8020990:	4618      	mov	r0, r3
 8020992:	f007 f97e 	bl	8027c92 <bhy2_get_interrupt_status>

	if (interruptStatus) {
 8020996:	7bfb      	ldrb	r3, [r7, #15]
 8020998:	2b00      	cmp	r3, #0
 802099a:	d028      	beq.n	80209ee <_ZN10BHYWrapper4PollEv+0x72>
		assert(
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209a2:	4618      	mov	r0, r3
 80209a4:	f000 f945 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80209a8:	4604      	mov	r4, r0
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209b0:	4618      	mov	r0, r3
 80209b2:	f000 f94b 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80209b6:	4601      	mov	r1, r0
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	461a      	mov	r2, r3
 80209bc:	4620      	mov	r0, r4
 80209be:	f006 ff38 	bl	8027832 <bhy2_get_and_process_fifo>
 80209c2:	4603      	mov	r3, r0
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	d005      	beq.n	80209d4 <_ZN10BHYWrapper4PollEv+0x58>
 80209c8:	4b0b      	ldr	r3, [pc, #44]	; (80209f8 <_ZN10BHYWrapper4PollEv+0x7c>)
 80209ca:	4a0c      	ldr	r2, [pc, #48]	; (80209fc <_ZN10BHYWrapper4PollEv+0x80>)
 80209cc:	2166      	movs	r1, #102	; 0x66
 80209ce:	480c      	ldr	r0, [pc, #48]	; (8020a00 <_ZN10BHYWrapper4PollEv+0x84>)
 80209d0:	f01b f9e6 	bl	803bda0 <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		frameSeq++;
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80209da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80209de:	3301      	adds	r3, #1
 80209e0:	687a      	ldr	r2, [r7, #4]
 80209e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80209e6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
		return true;
 80209ea:	2301      	movs	r3, #1
 80209ec:	e000      	b.n	80209f0 <_ZN10BHYWrapper4PollEv+0x74>
	}

	return false;
 80209ee:	2300      	movs	r3, #0
}
 80209f0:	4618      	mov	r0, r3
 80209f2:	3714      	adds	r7, #20
 80209f4:	46bd      	mov	sp, r7
 80209f6:	bd90      	pop	{r4, r7, pc}
 80209f8:	0803ceb4 	.word	0x0803ceb4
 80209fc:	0803cf08 	.word	0x0803cf08
 8020a00:	0803ce98 	.word	0x0803ce98

08020a04 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 8020a04:	b4b0      	push	{r4, r5, r7}
 8020a06:	b083      	sub	sp, #12
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	6078      	str	r0, [r7, #4]
 8020a0c:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 8020a0e:	687a      	ldr	r2, [r7, #4]
 8020a10:	683b      	ldr	r3, [r7, #0]
 8020a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020a16:	4615      	mov	r5, r2
 8020a18:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 8020a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020a20:	6823      	ldr	r3, [r4, #0]
 8020a22:	602b      	str	r3, [r5, #0]
}
 8020a24:	6878      	ldr	r0, [r7, #4]
 8020a26:	370c      	adds	r7, #12
 8020a28:	46bd      	mov	sp, r7
 8020a2a:	bcb0      	pop	{r4, r5, r7}
 8020a2c:	4770      	bx	lr
	...

08020a30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8020a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020a34:	b08e      	sub	sp, #56	; 0x38
 8020a36:	af00      	add	r7, sp, #0
 8020a38:	60f8      	str	r0, [r7, #12]
 8020a3a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8020a3c:	68bb      	ldr	r3, [r7, #8]
 8020a3e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8020a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d105      	bne.n	8020a52 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8020a46:	4b40      	ldr	r3, [pc, #256]	; (8020b48 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8020a48:	4a40      	ldr	r2, [pc, #256]	; (8020b4c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8020a4a:	2178      	movs	r1, #120	; 0x78
 8020a4c:	4840      	ldr	r0, [pc, #256]	; (8020b50 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8020a4e:	f01b f9a7 	bl	803bda0 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8020a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a54:	3308      	adds	r3, #8
 8020a56:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8020a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	789b      	ldrb	r3, [r3, #2]
 8020a60:	2b0b      	cmp	r3, #11
 8020a62:	d167      	bne.n	8020b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8020a64:	68fb      	ldr	r3, [r7, #12]
 8020a66:	685b      	ldr	r3, [r3, #4]
 8020a68:	f107 0214 	add.w	r2, r7, #20
 8020a6c:	4611      	mov	r1, r2
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f008 fbcb 	bl	802920a <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8020a74:	68fb      	ldr	r3, [r7, #12]
 8020a76:	781a      	ldrb	r2, [r3, #0]
 8020a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a7a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8020a7c:	68fb      	ldr	r3, [r7, #12]
 8020a7e:	689b      	ldr	r3, [r3, #8]
 8020a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020a84:	4602      	mov	r2, r0
 8020a86:	460b      	mov	r3, r1
 8020a88:	f04f 0a00 	mov.w	sl, #0
 8020a8c:	f04f 0b00 	mov.w	fp, #0
 8020a90:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8020a94:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8020a98:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8020a9c:	4652      	mov	r2, sl
 8020a9e:	465b      	mov	r3, fp
 8020aa0:	ebb2 0800 	subs.w	r8, r2, r0
 8020aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8020aa8:	f04f 0200 	mov.w	r2, #0
 8020aac:	f04f 0300 	mov.w	r3, #0
 8020ab0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8020ab4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8020ab8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8020abc:	ebb2 0408 	subs.w	r4, r2, r8
 8020ac0:	eb63 0509 	sbc.w	r5, r3, r9
 8020ac4:	f04f 0200 	mov.w	r2, #0
 8020ac8:	f04f 0300 	mov.w	r3, #0
 8020acc:	00eb      	lsls	r3, r5, #3
 8020ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020ad2:	00e2      	lsls	r2, r4, #3
 8020ad4:	4614      	mov	r4, r2
 8020ad6:	461d      	mov	r5, r3
 8020ad8:	1823      	adds	r3, r4, r0
 8020ada:	603b      	str	r3, [r7, #0]
 8020adc:	eb45 0301 	adc.w	r3, r5, r1
 8020ae0:	607b      	str	r3, [r7, #4]
 8020ae2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020ae6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8020aea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020aee:	a314      	add	r3, pc, #80	; (adr r3, 8020b40 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8020af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020af4:	f7ff fc44 	bl	8020380 <__aeabi_uldivmod>
 8020af8:	4602      	mov	r2, r0
 8020afa:	460b      	mov	r3, r1
 8020afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020afe:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8020b00:	6a3a      	ldr	r2, [r7, #32]
 8020b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	4913      	ldr	r1, [pc, #76]	; (8020b54 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8020b08:	fb01 f303 	mul.w	r3, r1, r3
 8020b0c:	1ad2      	subs	r2, r2, r3
 8020b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b10:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8020b12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b18:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8020b1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b20:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8020b22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8020b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b28:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8020b2a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8020b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b30:	80da      	strh	r2, [r3, #6]
 8020b32:	e000      	b.n	8020b36 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8020b34:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8020b36:	3738      	adds	r7, #56	; 0x38
 8020b38:	46bd      	mov	sp, r7
 8020b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020b3e:	bf00      	nop
 8020b40:	3b9aca00 	.word	0x3b9aca00
 8020b44:	00000000 	.word	0x00000000
 8020b48:	0803cf20 	.word	0x0803cf20
 8020b4c:	0803cf28 	.word	0x0803cf28
 8020b50:	0803ce98 	.word	0x0803ce98
 8020b54:	3b9aca00 	.word	0x3b9aca00

08020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8020b58:	b580      	push	{r7, lr}
 8020b5a:	b086      	sub	sp, #24
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	60f8      	str	r0, [r7, #12]
 8020b60:	60b9      	str	r1, [r7, #8]
 8020b62:	607a      	str	r2, [r7, #4]
	assert(dest);
 8020b64:	68bb      	ldr	r3, [r7, #8]
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d105      	bne.n	8020b76 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8020b6a:	4b26      	ldr	r3, [pc, #152]	; (8020c04 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8020b6c:	4a26      	ldr	r2, [pc, #152]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b6e:	2191      	movs	r1, #145	; 0x91
 8020b70:	4826      	ldr	r0, [pc, #152]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b72:	f01b f915 	bl	803bda0 <__assert_func>
	assert(size);
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	d105      	bne.n	8020b88 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8020b7c:	4b24      	ldr	r3, [pc, #144]	; (8020c10 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8020b7e:	4a22      	ldr	r2, [pc, #136]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b80:	2192      	movs	r1, #146	; 0x92
 8020b82:	4822      	ldr	r0, [pc, #136]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b84:	f01b f90c 	bl	803bda0 <__assert_func>

	uint8_t *ptr = dest;
 8020b88:	68bb      	ldr	r3, [r7, #8]
 8020b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b96:	697b      	ldr	r3, [r7, #20]
 8020b98:	3302      	adds	r3, #2
 8020b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020ba2:	697b      	ldr	r3, [r7, #20]
 8020ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	3302      	adds	r3, #2
 8020baa:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8020bac:	68fb      	ldr	r3, [r7, #12]
 8020bae:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020bb2:	697b      	ldr	r3, [r7, #20]
 8020bb4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bb6:	697b      	ldr	r3, [r7, #20]
 8020bb8:	3302      	adds	r3, #2
 8020bba:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8020bbc:	68fb      	ldr	r3, [r7, #12]
 8020bbe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bc6:	697b      	ldr	r3, [r7, #20]
 8020bc8:	3302      	adds	r3, #2
 8020bca:	617b      	str	r3, [r7, #20]
	/*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8020bcc:	68fb      	ldr	r3, [r7, #12]
 8020bce:	689a      	ldr	r2, [r3, #8]
 8020bd0:	697b      	ldr	r3, [r7, #20]
 8020bd2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020bd4:	697b      	ldr	r3, [r7, #20]
 8020bd6:	3304      	adds	r3, #4
 8020bd8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	68da      	ldr	r2, [r3, #12]
 8020bde:	697b      	ldr	r3, [r7, #20]
 8020be0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020be2:	697b      	ldr	r3, [r7, #20]
 8020be4:	3304      	adds	r3, #4
 8020be6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	7c1a      	ldrb	r2, [r3, #16]
 8020bec:	697b      	ldr	r3, [r7, #20]
 8020bee:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	3301      	adds	r3, #1
 8020bf4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	2211      	movs	r2, #17
 8020bfa:	701a      	strb	r2, [r3, #0]
}
 8020bfc:	bf00      	nop
 8020bfe:	3718      	adds	r7, #24
 8020c00:	46bd      	mov	sp, r7
 8020c02:	bd80      	pop	{r7, pc}
 8020c04:	0803cf74 	.word	0x0803cf74
 8020c08:	0803cf7c 	.word	0x0803cf7c
 8020c0c:	0803ce98 	.word	0x0803ce98
 8020c10:	0803cfb8 	.word	0x0803cfb8

08020c14 <_ZNK10BHYWrapper6GetSeqEv>:

size_t BHYWrapper::GetSeq() const {
 8020c14:	b480      	push	{r7}
 8020c16:	b083      	sub	sp, #12
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	6078      	str	r0, [r7, #4]
	return frameSeq;
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020c22:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
}
 8020c26:	4618      	mov	r0, r3
 8020c28:	370c      	adds	r7, #12
 8020c2a:	46bd      	mov	sp, r7
 8020c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c30:	4770      	bx	lr

08020c32 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8020c32:	b580      	push	{r7, lr}
 8020c34:	b082      	sub	sp, #8
 8020c36:	af00      	add	r7, sp, #0
 8020c38:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8020c3a:	687b      	ldr	r3, [r7, #4]
 8020c3c:	4618      	mov	r0, r3
 8020c3e:	f000 f811 	bl	8020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8020c42:	4603      	mov	r3, r0
 8020c44:	4618      	mov	r0, r3
 8020c46:	3708      	adds	r7, #8
 8020c48:	46bd      	mov	sp, r7
 8020c4a:	bd80      	pop	{r7, pc}

08020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8020c4c:	b480      	push	{r7}
 8020c4e:	b083      	sub	sp, #12
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	6078      	str	r0, [r7, #4]
 8020c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c58:	4618      	mov	r0, r3
 8020c5a:	370c      	adds	r7, #12
 8020c5c:	46bd      	mov	sp, r7
 8020c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c62:	4770      	bx	lr

08020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8020c64:	b480      	push	{r7}
 8020c66:	b083      	sub	sp, #12
 8020c68:	af00      	add	r7, sp, #0
 8020c6a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	4618      	mov	r0, r3
 8020c70:	370c      	adds	r7, #12
 8020c72:	46bd      	mov	sp, r7
 8020c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c78:	4770      	bx	lr
	...

08020c7c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8020c7c:	b480      	push	{r7}
 8020c7e:	b083      	sub	sp, #12
 8020c80:	af00      	add	r7, sp, #0
 8020c82:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8020c84:	4a04      	ldr	r2, [pc, #16]	; (8020c98 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	6013      	str	r3, [r2, #0]
}
 8020c8a:	bf00      	nop
 8020c8c:	370c      	adds	r7, #12
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c94:	4770      	bx	lr
 8020c96:	bf00      	nop
 8020c98:	24000184 	.word	0x24000184

08020c9c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8020c9c:	b580      	push	{r7, lr}
 8020c9e:	b082      	sub	sp, #8
 8020ca0:	af00      	add	r7, sp, #0
 8020ca2:	6078      	str	r0, [r7, #4]
 8020ca4:	460b      	mov	r3, r1
 8020ca6:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8020ca8:	4b11      	ldr	r3, [pc, #68]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020caa:	681b      	ldr	r3, [r3, #0]
 8020cac:	887a      	ldrh	r2, [r7, #2]
 8020cae:	6879      	ldr	r1, [r7, #4]
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	f012 fc0b 	bl	80334cc <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020cb6:	4b0e      	ldr	r3, [pc, #56]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cb8:	681b      	ldr	r3, [r3, #0]
 8020cba:	4618      	mov	r0, r3
 8020cbc:	f013 fa94 	bl	80341e8 <HAL_SPI_GetState>
 8020cc0:	4603      	mov	r3, r0
 8020cc2:	2b01      	cmp	r3, #1
 8020cc4:	bf14      	ite	ne
 8020cc6:	2301      	movne	r3, #1
 8020cc8:	2300      	moveq	r3, #0
 8020cca:	b2db      	uxtb	r3, r3
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d000      	beq.n	8020cd2 <_Z11spiTransmitPht+0x36>
 8020cd0:	e7f1      	b.n	8020cb6 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020cd2:	4b07      	ldr	r3, [pc, #28]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	bf0c      	ite	eq
 8020cde:	2301      	moveq	r3, #1
 8020ce0:	2300      	movne	r3, #0
 8020ce2:	b2db      	uxtb	r3, r3
 8020ce4:	b25b      	sxtb	r3, r3
  }
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	3708      	adds	r7, #8
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd80      	pop	{r7, pc}
 8020cee:	bf00      	nop
 8020cf0:	24000184 	.word	0x24000184

08020cf4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8020cf4:	b580      	push	{r7, lr}
 8020cf6:	b082      	sub	sp, #8
 8020cf8:	af00      	add	r7, sp, #0
 8020cfa:	6078      	str	r0, [r7, #4]
 8020cfc:	460b      	mov	r3, r1
 8020cfe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8020d00:	4b11      	ldr	r3, [pc, #68]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	887a      	ldrh	r2, [r7, #2]
 8020d06:	6879      	ldr	r1, [r7, #4]
 8020d08:	4618      	mov	r0, r3
 8020d0a:	f012 fd29 	bl	8033760 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020d0e:	4b0e      	ldr	r3, [pc, #56]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d10:	681b      	ldr	r3, [r3, #0]
 8020d12:	4618      	mov	r0, r3
 8020d14:	f013 fa68 	bl	80341e8 <HAL_SPI_GetState>
 8020d18:	4603      	mov	r3, r0
 8020d1a:	2b01      	cmp	r3, #1
 8020d1c:	bf14      	ite	ne
 8020d1e:	2301      	movne	r3, #1
 8020d20:	2300      	moveq	r3, #0
 8020d22:	b2db      	uxtb	r3, r3
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d000      	beq.n	8020d2a <_Z9spiReceivPht+0x36>
 8020d28:	e7f1      	b.n	8020d0e <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020d2a:	4b07      	ldr	r3, [pc, #28]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d2c:	681b      	ldr	r3, [r3, #0]
 8020d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	bf0c      	ite	eq
 8020d36:	2301      	moveq	r3, #1
 8020d38:	2300      	movne	r3, #0
 8020d3a:	b2db      	uxtb	r3, r3
 8020d3c:	b25b      	sxtb	r3, r3
  }
 8020d3e:	4618      	mov	r0, r3
 8020d40:	3708      	adds	r7, #8
 8020d42:	46bd      	mov	sp, r7
 8020d44:	bd80      	pop	{r7, pc}
 8020d46:	bf00      	nop
 8020d48:	24000184 	.word	0x24000184

08020d4c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020d4c:	b580      	push	{r7, lr}
 8020d4e:	b084      	sub	sp, #16
 8020d50:	af00      	add	r7, sp, #0
 8020d52:	60b9      	str	r1, [r7, #8]
 8020d54:	607a      	str	r2, [r7, #4]
 8020d56:	603b      	str	r3, [r7, #0]
 8020d58:	4603      	mov	r3, r0
 8020d5a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020d5c:	4b19      	ldr	r3, [pc, #100]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020d62:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8020d64:	f107 030f 	add.w	r3, r7, #15
 8020d68:	2101      	movs	r1, #1
 8020d6a:	4618      	mov	r0, r3
 8020d6c:	f7ff ff96 	bl	8020c9c <_Z11spiTransmitPht>
 8020d70:	4603      	mov	r3, r0
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	bf0c      	ite	eq
 8020d76:	2301      	moveq	r3, #1
 8020d78:	2300      	movne	r3, #0
 8020d7a:	b2db      	uxtb	r3, r3
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	d002      	beq.n	8020d86 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8020d80:	f06f 0301 	mvn.w	r3, #1
 8020d84:	e019      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	b29b      	uxth	r3, r3
 8020d8a:	4619      	mov	r1, r3
 8020d8c:	68b8      	ldr	r0, [r7, #8]
 8020d8e:	f7ff ffb1 	bl	8020cf4 <_Z9spiReceivPht>
 8020d92:	4603      	mov	r3, r0
 8020d94:	2b00      	cmp	r3, #0
 8020d96:	bf14      	ite	ne
 8020d98:	2301      	movne	r3, #1
 8020d9a:	2300      	moveq	r3, #0
 8020d9c:	b2db      	uxtb	r3, r3
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d005      	beq.n	8020dae <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020da2:	4b08      	ldr	r3, [pc, #32]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020da4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020da8:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8020daa:	2300      	movs	r3, #0
 8020dac:	e005      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020dae:	4b05      	ldr	r3, [pc, #20]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020db4:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8020db6:	f06f 0301 	mvn.w	r3, #1
  }
 8020dba:	4618      	mov	r0, r3
 8020dbc:	3710      	adds	r7, #16
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	bd80      	pop	{r7, pc}
 8020dc2:	bf00      	nop
 8020dc4:	58021000 	.word	0x58021000

08020dc8 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020dc8:	b580      	push	{r7, lr}
 8020dca:	b084      	sub	sp, #16
 8020dcc:	af00      	add	r7, sp, #0
 8020dce:	60b9      	str	r1, [r7, #8]
 8020dd0:	607a      	str	r2, [r7, #4]
 8020dd2:	603b      	str	r3, [r7, #0]
 8020dd4:	4603      	mov	r3, r0
 8020dd6:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	2b40      	cmp	r3, #64	; 0x40
 8020ddc:	d902      	bls.n	8020de4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8020dde:	f06f 0303 	mvn.w	r3, #3
 8020de2:	e028      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8020de4:	4a16      	ldr	r2, [pc, #88]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020de6:	7bfb      	ldrb	r3, [r7, #15]
 8020de8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8020dea:	4b16      	ldr	r3, [pc, #88]	; (8020e44 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8020dec:	687a      	ldr	r2, [r7, #4]
 8020dee:	68b9      	ldr	r1, [r7, #8]
 8020df0:	4618      	mov	r0, r3
 8020df2:	f01b f83f 	bl	803be74 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020df6:	4b14      	ldr	r3, [pc, #80]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020df8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020dfc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	b29b      	uxth	r3, r3
 8020e02:	3301      	adds	r3, #1
 8020e04:	b29b      	uxth	r3, r3
 8020e06:	4619      	mov	r1, r3
 8020e08:	480d      	ldr	r0, [pc, #52]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020e0a:	f7ff ff47 	bl	8020c9c <_Z11spiTransmitPht>
 8020e0e:	4603      	mov	r3, r0
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	bf14      	ite	ne
 8020e14:	2301      	movne	r3, #1
 8020e16:	2300      	moveq	r3, #0
 8020e18:	b2db      	uxtb	r3, r3
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d005      	beq.n	8020e2a <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e1e:	4b0a      	ldr	r3, [pc, #40]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e24:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8020e26:	2300      	movs	r3, #0
 8020e28:	e005      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e2a:	4b07      	ldr	r3, [pc, #28]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e30:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8020e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8020e36:	4618      	mov	r0, r3
 8020e38:	3710      	adds	r7, #16
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	bd80      	pop	{r7, pc}
 8020e3e:	bf00      	nop
 8020e40:	24000188 	.word	0x24000188
 8020e44:	24000189 	.word	0x24000189
 8020e48:	58021000 	.word	0x58021000

08020e4c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8020e4c:	b580      	push	{r7, lr}
 8020e4e:	b082      	sub	sp, #8
 8020e50:	af00      	add	r7, sp, #0
 8020e52:	6078      	str	r0, [r7, #4]
 8020e54:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8020e5c:	d308      	bcc.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	4a0b      	ldr	r2, [pc, #44]	; (8020e90 <_Z13bhy2_delay_usmPv+0x44>)
 8020e62:	fba2 2303 	umull	r2, r3, r2, r3
 8020e66:	099b      	lsrs	r3, r3, #6
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f009 ff2b 	bl	802acc4 <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8020e6e:	e00b      	b.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	1e5a      	subs	r2, r3, #1
 8020e74:	607a      	str	r2, [r7, #4]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	bf14      	ite	ne
 8020e7a:	2301      	movne	r3, #1
 8020e7c:	2300      	moveq	r3, #0
 8020e7e:	b2db      	uxtb	r3, r3
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d001      	beq.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8020e84:	bf00      	nop
    while( us-- ) {
 8020e86:	e7f3      	b.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
  }
 8020e88:	bf00      	nop
 8020e8a:	3708      	adds	r7, #8
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	bd80      	pop	{r7, pc}
 8020e90:	10624dd3 	.word	0x10624dd3

08020e94 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8020e94:	b480      	push	{r7}
 8020e96:	b083      	sub	sp, #12
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	6078      	str	r0, [r7, #4]
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	bfb8      	it	lt
 8020ea2:	425b      	neglt	r3, r3
 8020ea4:	4618      	mov	r0, r3
 8020ea6:	370c      	adds	r7, #12
 8020ea8:	46bd      	mov	sp, r7
 8020eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eae:	4770      	bx	lr

08020eb0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8020eb0:	b480      	push	{r7}
 8020eb2:	b083      	sub	sp, #12
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
 8020eb8:	6039      	str	r1, [r7, #0]
 8020eba:	683b      	ldr	r3, [r7, #0]
 8020ebc:	4618      	mov	r0, r3
 8020ebe:	370c      	adds	r7, #12
 8020ec0:	46bd      	mov	sp, r7
 8020ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec6:	4770      	bx	lr

08020ec8 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8020ec8:	b480      	push	{r7}
 8020eca:	b083      	sub	sp, #12
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8020ed0:	687b      	ldr	r3, [r7, #4]
 8020ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020ed6:	d205      	bcs.n	8020ee4 <_ZSt16__deque_buf_sizej+0x1c>
 8020ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8020ee2:	e000      	b.n	8020ee6 <_ZSt16__deque_buf_sizej+0x1e>
 8020ee4:	2301      	movs	r3, #1
 8020ee6:	4618      	mov	r0, r3
 8020ee8:	370c      	adds	r7, #12
 8020eea:	46bd      	mov	sp, r7
 8020eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ef0:	4770      	bx	lr

08020ef2 <_ZN11QueueSender11MessageMode9SerializeEh>:
		static constexpr Type Async = 1;
		static constexpr Type Info = 2;
		static constexpr Type SetPeriod = 3;
		static constexpr Type ResetQueue = 4;

		static uint8_t Serialize(Type mode) {
 8020ef2:	b480      	push	{r7}
 8020ef4:	b083      	sub	sp, #12
 8020ef6:	af00      	add	r7, sp, #0
 8020ef8:	4603      	mov	r3, r0
 8020efa:	71fb      	strb	r3, [r7, #7]
			return mode;
 8020efc:	79fb      	ldrb	r3, [r7, #7]
		}
 8020efe:	4618      	mov	r0, r3
 8020f00:	370c      	adds	r7, #12
 8020f02:	46bd      	mov	sp, r7
 8020f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f08:	4770      	bx	lr

08020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static Type Deserialize(uint8_t val) {
 8020f0a:	b480      	push	{r7}
 8020f0c:	b083      	sub	sp, #12
 8020f0e:	af00      	add	r7, sp, #0
 8020f10:	4603      	mov	r3, r0
 8020f12:	71fb      	strb	r3, [r7, #7]
			return val;
 8020f14:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f16:	4618      	mov	r0, r3
 8020f18:	370c      	adds	r7, #12
 8020f1a:	46bd      	mov	sp, r7
 8020f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f20:	4770      	bx	lr

08020f22 <_ZN11QueueSender9ErrorCode9SerializeEh>:
		static constexpr Type NACK = 2;
		static constexpr Type Unknown = 3;
		static constexpr Type BadPeriod = 4;
		static constexpr Type QueueFull = 5;

		static uint8_t Serialize(Type error) {
 8020f22:	b480      	push	{r7}
 8020f24:	b083      	sub	sp, #12
 8020f26:	af00      	add	r7, sp, #0
 8020f28:	4603      	mov	r3, r0
 8020f2a:	71fb      	strb	r3, [r7, #7]
			return error;
 8020f2c:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f2e:	4618      	mov	r0, r3
 8020f30:	370c      	adds	r7, #12
 8020f32:	46bd      	mov	sp, r7
 8020f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f38:	4770      	bx	lr
	...

08020f3c <_ZN11QueueSender4Info11SerializeToEPPh>:
		uint16_t NumRequests;
		uint16_t NumResponces;

		static constexpr size_t Size = 2 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8020f3c:	b580      	push	{r7, lr}
 8020f3e:	b082      	sub	sp, #8
 8020f40:	af00      	add	r7, sp, #0
 8020f42:	6078      	str	r0, [r7, #4]
 8020f44:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8020f46:	683b      	ldr	r3, [r7, #0]
 8020f48:	2b00      	cmp	r3, #0
 8020f4a:	d105      	bne.n	8020f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x1c>
 8020f4c:	4b13      	ldr	r3, [pc, #76]	; (8020f9c <_ZN11QueueSender4Info11SerializeToEPPh+0x60>)
 8020f4e:	4a14      	ldr	r2, [pc, #80]	; (8020fa0 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f50:	21b0      	movs	r1, #176	; 0xb0
 8020f52:	4814      	ldr	r0, [pc, #80]	; (8020fa4 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f54:	f01a ff24 	bl	803bda0 <__assert_func>
			assert(*ptr);
 8020f58:	683b      	ldr	r3, [r7, #0]
 8020f5a:	681b      	ldr	r3, [r3, #0]
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	d105      	bne.n	8020f6c <_ZN11QueueSender4Info11SerializeToEPPh+0x30>
 8020f60:	4b11      	ldr	r3, [pc, #68]	; (8020fa8 <_ZN11QueueSender4Info11SerializeToEPPh+0x6c>)
 8020f62:	4a0f      	ldr	r2, [pc, #60]	; (8020fa0 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f64:	21b1      	movs	r1, #177	; 0xb1
 8020f66:	480f      	ldr	r0, [pc, #60]	; (8020fa4 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f68:	f01a ff1a 	bl	803bda0 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = NumRequests;
 8020f6c:	683b      	ldr	r3, [r7, #0]
 8020f6e:	681b      	ldr	r3, [r3, #0]
 8020f70:	687a      	ldr	r2, [r7, #4]
 8020f72:	8812      	ldrh	r2, [r2, #0]
 8020f74:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f76:	683b      	ldr	r3, [r7, #0]
 8020f78:	681b      	ldr	r3, [r3, #0]
 8020f7a:	1c9a      	adds	r2, r3, #2
 8020f7c:	683b      	ldr	r3, [r7, #0]
 8020f7e:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumResponces;
 8020f80:	683b      	ldr	r3, [r7, #0]
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	687a      	ldr	r2, [r7, #4]
 8020f86:	8852      	ldrh	r2, [r2, #2]
 8020f88:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f8a:	683b      	ldr	r3, [r7, #0]
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	1c9a      	adds	r2, r3, #2
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	601a      	str	r2, [r3, #0]
		}
 8020f94:	bf00      	nop
 8020f96:	3708      	adds	r7, #8
 8020f98:	46bd      	mov	sp, r7
 8020f9a:	bd80      	pop	{r7, pc}
 8020f9c:	0803cfc0 	.word	0x0803cfc0
 8020fa0:	0803cfc4 	.word	0x0803cfc4
 8020fa4:	0803cff4 	.word	0x0803cff4
 8020fa8:	0803d010 	.word	0x0803d010

08020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>:
class FixedQueue {
 8020fac:	b480      	push	{r7}
 8020fae:	b083      	sub	sp, #12
 8020fb0:	af00      	add	r7, sp, #0
 8020fb2:	6078      	str	r0, [r7, #4]
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	2200      	movs	r2, #0
 8020fb8:	601a      	str	r2, [r3, #0]
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	605a      	str	r2, [r3, #4]
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	609a      	str	r2, [r3, #8]
 8020fc6:	687b      	ldr	r3, [r7, #4]
 8020fc8:	4618      	mov	r0, r3
 8020fca:	370c      	adds	r7, #12
 8020fcc:	46bd      	mov	sp, r7
 8020fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fd2:	4770      	bx	lr

08020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>:
 8020fd4:	b480      	push	{r7}
 8020fd6:	b083      	sub	sp, #12
 8020fd8:	af00      	add	r7, sp, #0
 8020fda:	6078      	str	r0, [r7, #4]
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	2200      	movs	r2, #0
 8020fe0:	601a      	str	r2, [r3, #0]
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	2200      	movs	r2, #0
 8020fe6:	605a      	str	r2, [r3, #4]
 8020fe8:	687b      	ldr	r3, [r7, #4]
 8020fea:	2200      	movs	r2, #0
 8020fec:	609a      	str	r2, [r3, #8]
 8020fee:	687b      	ldr	r3, [r7, #4]
 8020ff0:	4618      	mov	r0, r3
 8020ff2:	370c      	adds	r7, #12
 8020ff4:	46bd      	mov	sp, r7
 8020ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ffa:	4770      	bx	lr

08020ffc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>:
	};

public:
	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS, uint8_t sendPeriod) :
 8020ffc:	b580      	push	{r7, lr}
 8020ffe:	b084      	sub	sp, #16
 8021000:	af00      	add	r7, sp, #0
 8021002:	60f8      	str	r0, [r7, #12]
 8021004:	60b9      	str	r1, [r7, #8]
 8021006:	607a      	str	r2, [r7, #4]
 8021008:	70fb      	strb	r3, [r7, #3]
			UartHandle { uart }, TimeoutS { timeoutS }, SendPeriod { sendPeriod } {
 802100a:	68fb      	ldr	r3, [r7, #12]
 802100c:	4618      	mov	r0, r3
 802100e:	f7ff ffcd 	bl	8020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>
 8021012:	68fa      	ldr	r2, [r7, #12]
 8021014:	4b25      	ldr	r3, [pc, #148]	; (80210ac <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xb0>)
 8021016:	4413      	add	r3, r2
 8021018:	4618      	mov	r0, r3
 802101a:	f7ff ffdb 	bl	8020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>
 802101e:	68fb      	ldr	r3, [r7, #12]
 8021020:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021024:	2200      	movs	r2, #0
 8021026:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 802102a:	68fb      	ldr	r3, [r7, #12]
 802102c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021030:	2200      	movs	r2, #0
 8021032:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8021036:	68fb      	ldr	r3, [r7, #12]
 8021038:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802103c:	461a      	mov	r2, r3
 802103e:	68bb      	ldr	r3, [r7, #8]
 8021040:	f8c2 37e8 	str.w	r3, [r2, #2024]	; 0x7e8
 8021044:	68fb      	ldr	r3, [r7, #12]
 8021046:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802104a:	461a      	mov	r2, r3
 802104c:	687b      	ldr	r3, [r7, #4]
 802104e:	f8c2 37ec 	str.w	r3, [r2, #2028]	; 0x7ec
 8021052:	68fb      	ldr	r3, [r7, #12]
 8021054:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021058:	461a      	mov	r2, r3
 802105a:	78fb      	ldrb	r3, [r7, #3]
 802105c:	f882 37f0 	strb.w	r3, [r2, #2032]	; 0x7f0
 8021060:	68fb      	ldr	r3, [r7, #12]
 8021062:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021066:	2200      	movs	r2, #0
 8021068:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 802106c:	68fb      	ldr	r3, [r7, #12]
 802106e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021072:	2200      	movs	r2, #0
 8021074:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802107e:	2201      	movs	r2, #1
 8021080:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 8021084:	68fb      	ldr	r3, [r7, #12]
 8021086:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802108a:	2200      	movs	r2, #0
 802108c:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
		assert(uart != NULL);
 8021090:	68bb      	ldr	r3, [r7, #8]
 8021092:	2b00      	cmp	r3, #0
 8021094:	d105      	bne.n	80210a2 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xa6>
 8021096:	4b06      	ldr	r3, [pc, #24]	; (80210b0 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xb4>)
 8021098:	4a06      	ldr	r2, [pc, #24]	; (80210b4 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xb8>)
 802109a:	21c0      	movs	r1, #192	; 0xc0
 802109c:	4806      	ldr	r0, [pc, #24]	; (80210b8 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xbc>)
 802109e:	f01a fe7f 	bl	803bda0 <__assert_func>
	}
 80210a2:	68fb      	ldr	r3, [r7, #12]
 80210a4:	4618      	mov	r0, r3
 80210a6:	3710      	adds	r7, #16
 80210a8:	46bd      	mov	sp, r7
 80210aa:	bd80      	pop	{r7, pc}
 80210ac:	00020b7c 	.word	0x00020b7c
 80210b0:	0803d018 	.word	0x0803d018
 80210b4:	0803d028 	.word	0x0803d028
 80210b8:	0803cff4 	.word	0x0803cff4

080210bc <_ZN11QueueSender10AddRequestERK7Request>:

	void AddRequest(const Request &request) {
 80210bc:	b590      	push	{r4, r7, lr}
 80210be:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 80210c2:	af00      	add	r7, sp, #0
 80210c4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80210c8:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80210cc:	6018      	str	r0, [r3, #0]
 80210ce:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80210d2:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80210d6:	6019      	str	r1, [r3, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 80210d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80210dc:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80210e0:	681b      	ldr	r3, [r3, #0]
 80210e2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80210e6:	4618      	mov	r0, r3
 80210e8:	f7ff ff0f 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 80210ec:	4603      	mov	r3, r0
 80210ee:	2b04      	cmp	r3, #4
 80210f0:	f200 80aa 	bhi.w	8021248 <_ZN11QueueSender10AddRequestERK7Request+0x18c>
 80210f4:	a201      	add	r2, pc, #4	; (adr r2, 80210fc <_ZN11QueueSender10AddRequestERK7Request+0x40>)
 80210f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80210fa:	bf00      	nop
 80210fc:	0802114d 	.word	0x0802114d
 8021100:	08021111 	.word	0x08021111
 8021104:	080211a3 	.word	0x080211a3
 8021108:	080211d7 	.word	0x080211d7
 802110c:	08021213 	.word	0x08021213
		case MessageMode::Async:
			Responces.Push(CreateAsyncResponce(request));
 8021110:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021114:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8021118:	681b      	ldr	r3, [r3, #0]
 802111a:	4c4e      	ldr	r4, [pc, #312]	; (8021254 <_ZN11QueueSender10AddRequestERK7Request+0x198>)
 802111c:	441c      	add	r4, r3
 802111e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021122:	f5a3 6084 	sub.w	r0, r3, #1056	; 0x420
 8021126:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802112a:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 802112e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021132:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8021136:	6812      	ldr	r2, [r2, #0]
 8021138:	6819      	ldr	r1, [r3, #0]
 802113a:	f000 fd0d 	bl	8021b58 <_ZN11QueueSender19CreateAsyncResponceERK7Request>
 802113e:	f107 0308 	add.w	r3, r7, #8
 8021142:	4619      	mov	r1, r3
 8021144:	4620      	mov	r0, r4
 8021146:	f002 fa25 	bl	8023594 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 802114a:	e07d      	b.n	8021248 <_ZN11QueueSender10AddRequestERK7Request+0x18c>
		case MessageMode::Sync:
			if (HasPriorityRequest)
 802114c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021150:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8021154:	681b      	ldr	r3, [r3, #0]
 8021156:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802115a:	f893 36e4 	ldrb.w	r3, [r3, #1764]	; 0x6e4
 802115e:	2b00      	cmp	r3, #0
 8021160:	d171      	bne.n	8021246 <_ZN11QueueSender10AddRequestERK7Request+0x18a>
				break;

			PriorityRequest = request;
 8021162:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021166:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802116a:	681b      	ldr	r3, [r3, #0]
 802116c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021170:	4619      	mov	r1, r3
 8021172:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021176:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 802117a:	681a      	ldr	r2, [r3, #0]
 802117c:	f501 63bb 	add.w	r3, r1, #1496	; 0x5d8
 8021180:	4611      	mov	r1, r2
 8021182:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8021186:	4618      	mov	r0, r3
 8021188:	f01a fe74 	bl	803be74 <memcpy>
			HasPriorityRequest = true;
 802118c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021190:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8021194:	681b      	ldr	r3, [r3, #0]
 8021196:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802119a:	2201      	movs	r2, #1
 802119c:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
			break;
 80211a0:	e052      	b.n	8021248 <_ZN11QueueSender10AddRequestERK7Request+0x18c>

		case MessageMode::Info:
			Responces.Push(CreateInfoResponce());
 80211a2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211a6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	4c29      	ldr	r4, [pc, #164]	; (8021254 <_ZN11QueueSender10AddRequestERK7Request+0x198>)
 80211ae:	441c      	add	r4, r3
 80211b0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211b4:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 80211b8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211bc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80211c0:	6819      	ldr	r1, [r3, #0]
 80211c2:	4610      	mov	r0, r2
 80211c4:	f000 fbcb 	bl	802195e <_ZNK11QueueSender18CreateInfoResponceEv>
 80211c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80211cc:	4619      	mov	r1, r3
 80211ce:	4620      	mov	r0, r4
 80211d0:	f002 f9e0 	bl	8023594 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 80211d4:	e038      	b.n	8021248 <_ZN11QueueSender10AddRequestERK7Request+0x18c>
		case MessageMode::SetPeriod:
			Responces.Push(ProcessSetPeriodRequest(request));
 80211d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211da:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80211de:	681b      	ldr	r3, [r3, #0]
 80211e0:	4c1c      	ldr	r4, [pc, #112]	; (8021254 <_ZN11QueueSender10AddRequestERK7Request+0x198>)
 80211e2:	441c      	add	r4, r3
 80211e4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211e8:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 80211ec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211f0:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 80211f4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211f8:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80211fc:	6812      	ldr	r2, [r2, #0]
 80211fe:	6819      	ldr	r1, [r3, #0]
 8021200:	f000 fc3e 	bl	8021a80 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>
 8021204:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8021208:	4619      	mov	r1, r3
 802120a:	4620      	mov	r0, r4
 802120c:	f002 f9c2 	bl	8023594 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 8021210:	e01a      	b.n	8021248 <_ZN11QueueSender10AddRequestERK7Request+0x18c>
		case MessageMode::ResetQueue:
			Responces.Push(ResetQueue());
 8021212:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021216:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802121a:	681b      	ldr	r3, [r3, #0]
 802121c:	4c0d      	ldr	r4, [pc, #52]	; (8021254 <_ZN11QueueSender10AddRequestERK7Request+0x198>)
 802121e:	441c      	add	r4, r3
 8021220:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021224:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8021228:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802122c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8021230:	6819      	ldr	r1, [r3, #0]
 8021232:	4610      	mov	r0, r2
 8021234:	f000 fbd9 	bl	80219ea <_ZN11QueueSender10ResetQueueEv>
 8021238:	f507 7348 	add.w	r3, r7, #800	; 0x320
 802123c:	4619      	mov	r1, r3
 802123e:	4620      	mov	r0, r4
 8021240:	f002 f9a8 	bl	8023594 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 8021244:	e000      	b.n	8021248 <_ZN11QueueSender10AddRequestERK7Request+0x18c>
				break;
 8021246:	bf00      	nop
		}
	}
 8021248:	bf00      	nop
 802124a:	f207 472c 	addw	r7, r7, #1068	; 0x42c
 802124e:	46bd      	mov	sp, r7
 8021250:	bd90      	pop	{r4, r7, pc}
 8021252:	bf00      	nop
 8021254:	00020b7c 	.word	0x00020b7c

08021258 <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 8021258:	b580      	push	{r7, lr}
 802125a:	b082      	sub	sp, #8
 802125c:	af00      	add	r7, sp, #0
 802125e:	6078      	str	r0, [r7, #4]
		return !Responces.Empty();
 8021260:	687a      	ldr	r2, [r7, #4]
 8021262:	4b06      	ldr	r3, [pc, #24]	; (802127c <_ZNK11QueueSender11HasResponceEv+0x24>)
 8021264:	4413      	add	r3, r2
 8021266:	4618      	mov	r0, r3
 8021268:	f002 f9d6 	bl	8023618 <_ZNK10FixedQueueI8ResponceLj10EE5EmptyEv>
 802126c:	4603      	mov	r3, r0
 802126e:	f083 0301 	eor.w	r3, r3, #1
 8021272:	b2db      	uxtb	r3, r3
	}
 8021274:	4618      	mov	r0, r3
 8021276:	3708      	adds	r7, #8
 8021278:	46bd      	mov	sp, r7
 802127a:	bd80      	pop	{r7, pc}
 802127c:	00020b7c 	.word	0x00020b7c

08021280 <_ZN11QueueSender9TickTimerEv>:

	void TickTimer() {
 8021280:	b480      	push	{r7}
 8021282:	b083      	sub	sp, #12
 8021284:	af00      	add	r7, sp, #0
 8021286:	6078      	str	r0, [r7, #4]
		SendTick = (SendTick + 1) % SendPeriod;
 8021288:	687b      	ldr	r3, [r7, #4]
 802128a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802128e:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 8021292:	3301      	adds	r3, #1
 8021294:	687a      	ldr	r2, [r7, #4]
 8021296:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 802129a:	f892 27f0 	ldrb.w	r2, [r2, #2032]	; 0x7f0
 802129e:	fb93 f1f2 	sdiv	r1, r3, r2
 80212a2:	fb01 f202 	mul.w	r2, r1, r2
 80212a6:	1a9b      	subs	r3, r3, r2
 80212a8:	b2da      	uxtb	r2, r3
 80212aa:	687b      	ldr	r3, [r7, #4]
 80212ac:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212b0:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
		if (SendTick != 0)
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212ba:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 80212be:	2b00      	cmp	r3, #0
 80212c0:	d106      	bne.n	80212d0 <_ZN11QueueSender9TickTimerEv+0x50>
			return;

		TimerReady = true;
 80212c2:	687b      	ldr	r3, [r7, #4]
 80212c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212c8:	2201      	movs	r2, #1
 80212ca:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
 80212ce:	e000      	b.n	80212d2 <_ZN11QueueSender9TickTimerEv+0x52>
			return;
 80212d0:	bf00      	nop
	}
 80212d2:	370c      	adds	r7, #12
 80212d4:	46bd      	mov	sp, r7
 80212d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212da:	4770      	bx	lr

080212dc <_ZN11QueueSender13SetSendPeriodEh>:

	void SetSendPeriod(uint8_t periodMs) {
 80212dc:	b580      	push	{r7, lr}
 80212de:	b082      	sub	sp, #8
 80212e0:	af00      	add	r7, sp, #0
 80212e2:	6078      	str	r0, [r7, #4]
 80212e4:	460b      	mov	r3, r1
 80212e6:	70fb      	strb	r3, [r7, #3]
		assert(periodMs);
 80212e8:	78fb      	ldrb	r3, [r7, #3]
 80212ea:	2b00      	cmp	r3, #0
 80212ec:	d105      	bne.n	80212fa <_ZN11QueueSender13SetSendPeriodEh+0x1e>
 80212ee:	4b08      	ldr	r3, [pc, #32]	; (8021310 <_ZN11QueueSender13SetSendPeriodEh+0x34>)
 80212f0:	4a08      	ldr	r2, [pc, #32]	; (8021314 <_ZN11QueueSender13SetSendPeriodEh+0x38>)
 80212f2:	21e9      	movs	r1, #233	; 0xe9
 80212f4:	4808      	ldr	r0, [pc, #32]	; (8021318 <_ZN11QueueSender13SetSendPeriodEh+0x3c>)
 80212f6:	f01a fd53 	bl	803bda0 <__assert_func>
		SendPeriod = periodMs;
 80212fa:	687b      	ldr	r3, [r7, #4]
 80212fc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021300:	461a      	mov	r2, r3
 8021302:	78fb      	ldrb	r3, [r7, #3]
 8021304:	f882 37f0 	strb.w	r3, [r2, #2032]	; 0x7f0
	}
 8021308:	bf00      	nop
 802130a:	3708      	adds	r7, #8
 802130c:	46bd      	mov	sp, r7
 802130e:	bd80      	pop	{r7, pc}
 8021310:	0803d068 	.word	0x0803d068
 8021314:	0803d074 	.word	0x0803d074
 8021318:	0803cff4 	.word	0x0803cff4

0802131c <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 802131c:	b580      	push	{r7, lr}
 802131e:	b082      	sub	sp, #8
 8021320:	af00      	add	r7, sp, #0
 8021322:	6078      	str	r0, [r7, #4]
 8021324:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 8021326:	6838      	ldr	r0, [r7, #0]
 8021328:	f7ff ff96 	bl	8021258 <_ZNK11QueueSender11HasResponceEv>
 802132c:	4603      	mov	r3, r0
 802132e:	2b00      	cmp	r3, #0
 8021330:	d105      	bne.n	802133e <_ZN11QueueSender11GetResponceEv+0x22>
 8021332:	4b10      	ldr	r3, [pc, #64]	; (8021374 <_ZN11QueueSender11GetResponceEv+0x58>)
 8021334:	4a10      	ldr	r2, [pc, #64]	; (8021378 <_ZN11QueueSender11GetResponceEv+0x5c>)
 8021336:	21ee      	movs	r1, #238	; 0xee
 8021338:	4810      	ldr	r0, [pc, #64]	; (802137c <_ZN11QueueSender11GetResponceEv+0x60>)
 802133a:	f01a fd31 	bl	803bda0 <__assert_func>
		Responce responce = Responces.Front();
 802133e:	683a      	ldr	r2, [r7, #0]
 8021340:	4b0f      	ldr	r3, [pc, #60]	; (8021380 <_ZN11QueueSender11GetResponceEv+0x64>)
 8021342:	4413      	add	r3, r2
 8021344:	4618      	mov	r0, r3
 8021346:	f002 f979 	bl	802363c <_ZN10FixedQueueI8ResponceLj10EE5FrontEv>
 802134a:	4602      	mov	r2, r0
 802134c:	687b      	ldr	r3, [r7, #4]
 802134e:	4618      	mov	r0, r3
 8021350:	4611      	mov	r1, r2
 8021352:	f44f 7384 	mov.w	r3, #264	; 0x108
 8021356:	461a      	mov	r2, r3
 8021358:	f01a fd8c 	bl	803be74 <memcpy>
		Responces.Pop();
 802135c:	683a      	ldr	r2, [r7, #0]
 802135e:	4b08      	ldr	r3, [pc, #32]	; (8021380 <_ZN11QueueSender11GetResponceEv+0x64>)
 8021360:	4413      	add	r3, r2
 8021362:	4618      	mov	r0, r3
 8021364:	f002 f98c 	bl	8023680 <_ZN10FixedQueueI8ResponceLj10EE3PopEv>
		return responce;
 8021368:	bf00      	nop
	}
 802136a:	6878      	ldr	r0, [r7, #4]
 802136c:	3708      	adds	r7, #8
 802136e:	46bd      	mov	sp, r7
 8021370:	bd80      	pop	{r7, pc}
 8021372:	bf00      	nop
 8021374:	0803d0a0 	.word	0x0803d0a0
 8021378:	0803d0b0 	.word	0x0803d0b0
 802137c:	0803cff4 	.word	0x0803cff4
 8021380:	00020b7c 	.word	0x00020b7c

08021384 <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 8021384:	b5b0      	push	{r4, r5, r7, lr}
 8021386:	b0cc      	sub	sp, #304	; 0x130
 8021388:	af02      	add	r7, sp, #8
 802138a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802138e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021392:	6018      	str	r0, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021394:	b672      	cpsid	i
}
 8021396:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce && TransmitComplete) {
 8021398:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802139c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213a0:	681b      	ldr	r3, [r3, #0]
 80213a2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213a6:	f893 36e4 	ldrb.w	r3, [r3, #1764]	; 0x6e4
 80213aa:	2b00      	cmp	r3, #0
 80213ac:	f000 80f0 	beq.w	8021590 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20c>
 80213b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213b8:	681b      	ldr	r3, [r3, #0]
 80213ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213be:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 80213c2:	f083 0301 	eor.w	r3, r3, #1
 80213c6:	b2db      	uxtb	r3, r3
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	f000 80e1 	beq.w	8021590 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20c>
 80213ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213d2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213d6:	681b      	ldr	r3, [r3, #0]
 80213d8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213dc:	f893 37f3 	ldrb.w	r3, [r3, #2035]	; 0x7f3
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	f000 80d5 	beq.w	8021590 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20c>
			HasPriorityRequest = false;
 80213e6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213ea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213ee:	681b      	ldr	r3, [r3, #0]
 80213f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213f4:	2200      	movs	r2, #0
 80213f6:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
			WaitResponce = true;
 80213fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213fe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021402:	681b      	ldr	r3, [r3, #0]
 8021404:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021408:	2201      	movs	r2, #1
 802140a:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
  __ASM volatile ("cpsie i" : : : "memory");
 802140e:	b662      	cpsie	i
}
 8021410:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 8021412:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021416:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802141a:	681a      	ldr	r2, [r3, #0]
 802141c:	4b60      	ldr	r3, [pc, #384]	; (80215a0 <_ZN11QueueSender22ProcessPriorityRequestEv+0x21c>)
 802141e:	4413      	add	r3, r2
 8021420:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			auto &data = request.Data;
 8021424:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021428:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

			assert(
 802142c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021430:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021434:	4618      	mov	r0, r3
 8021436:	f7ff fd68 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 802143a:	4603      	mov	r3, r0
 802143c:	2b00      	cmp	r3, #0
 802143e:	d005      	beq.n	802144c <_ZN11QueueSender22ProcessPriorityRequestEv+0xc8>
 8021440:	4b58      	ldr	r3, [pc, #352]	; (80215a4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x220>)
 8021442:	4a59      	ldr	r2, [pc, #356]	; (80215a8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x224>)
 8021444:	21fe      	movs	r1, #254	; 0xfe
 8021446:	4859      	ldr	r0, [pc, #356]	; (80215ac <_ZN11QueueSender22ProcessPriorityRequestEv+0x228>)
 8021448:	f01a fcaa 	bl	803bda0 <__assert_func>
  __ASM volatile ("cpsid i" : : : "memory");
 802144c:	b672      	cpsid	i
}
 802144e:	bf00      	nop
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Sync);
			__disable_irq();
			TransmitComplete = false;
 8021450:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021454:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021458:	681b      	ldr	r3, [r3, #0]
 802145a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802145e:	2200      	movs	r2, #0
 8021460:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
  __ASM volatile ("cpsie i" : : : "memory");
 8021464:	b662      	cpsie	i
}
 8021466:	bf00      	nop
			__enable_irq();

			assert(
 8021468:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802146c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021470:	681b      	ldr	r3, [r3, #0]
 8021472:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021476:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 802147a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 802147e:	f002 f92d 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 8021482:	4601      	mov	r1, r0
 8021484:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021488:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802148c:	b29b      	uxth	r3, r3
 802148e:	461a      	mov	r2, r3
 8021490:	4620      	mov	r0, r4
 8021492:	f013 fe59 	bl	8035148 <HAL_UART_Transmit_IT>
 8021496:	4603      	mov	r3, r0
 8021498:	2b00      	cmp	r3, #0
 802149a:	d006      	beq.n	80214aa <_ZN11QueueSender22ProcessPriorityRequestEv+0x126>
 802149c:	4b44      	ldr	r3, [pc, #272]	; (80215b0 <_ZN11QueueSender22ProcessPriorityRequestEv+0x22c>)
 802149e:	4a42      	ldr	r2, [pc, #264]	; (80215a8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x224>)
 80214a0:	f240 1105 	movw	r1, #261	; 0x105
 80214a4:	4841      	ldr	r0, [pc, #260]	; (80215ac <_ZN11QueueSender22ProcessPriorityRequestEv+0x228>)
 80214a6:	f01a fc7b 	bl	803bda0 <__assert_func>
					HAL_UART_Transmit_IT(UartHandle, data.data(),
							request.RequestSize) == HAL_OK);

			while (!TransmitComplete)
 80214aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214ae:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214b2:	681b      	ldr	r3, [r3, #0]
 80214b4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80214b8:	f893 37f3 	ldrb.w	r3, [r3, #2035]	; 0x7f3
 80214bc:	2b00      	cmp	r3, #0
 80214be:	d100      	bne.n	80214c2 <_ZN11QueueSender22ProcessPriorityRequestEv+0x13e>
 80214c0:	e7f3      	b.n	80214aa <_ZN11QueueSender22ProcessPriorityRequestEv+0x126>
				;

			ErrorCode::Type error = Receive(request.ResponceSize);
 80214c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80214c6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80214ca:	b2da      	uxtb	r2, r3
 80214cc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214d4:	4611      	mov	r1, r2
 80214d6:	6818      	ldr	r0, [r3, #0]
 80214d8:	f000 f966 	bl	80217a8 <_ZN11QueueSender7ReceiveEh>
 80214dc:	4603      	mov	r3, r0
 80214de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

			if (error == ErrorCode::NACK) {
 80214e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80214e6:	2b02      	cmp	r3, #2
 80214e8:	d11e      	bne.n	8021528 <_ZN11QueueSender22ProcessPriorityRequestEv+0x1a4>
				uint32_t delayMS = 5;
 80214ea:	2305      	movs	r3, #5
 80214ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				HAL_Delay(delayMS);
 80214f0:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80214f4:	f009 fbe6 	bl	802acc4 <HAL_Delay>

				uint8_t dummy;
				while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 80214f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021500:	681b      	ldr	r3, [r3, #0]
 8021502:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021506:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 802150a:	f107 010f 	add.w	r1, r7, #15
 802150e:	2300      	movs	r3, #0
 8021510:	2201      	movs	r2, #1
 8021512:	f013 fd45 	bl	8034fa0 <HAL_UART_Receive>
 8021516:	4603      	mov	r3, r0
 8021518:	2b00      	cmp	r3, #0
 802151a:	bf0c      	ite	eq
 802151c:	2301      	moveq	r3, #1
 802151e:	2300      	movne	r3, #0
 8021520:	b2db      	uxtb	r3, r3
 8021522:	2b00      	cmp	r3, #0
 8021524:	d000      	beq.n	8021528 <_ZN11QueueSender22ProcessPriorityRequestEv+0x1a4>
 8021526:	e7e7      	b.n	80214f8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x174>
					;
			}

			Responces.Push(
 8021528:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802152c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021530:	681b      	ldr	r3, [r3, #0]
 8021532:	4c20      	ldr	r4, [pc, #128]	; (80215b4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x230>)
 8021534:	441c      	add	r4, r3
					CreateResponce(CurrentResponceBuffer, request.ResponceSize,
 8021536:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802153a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802153e:	681b      	ldr	r3, [r3, #0]
 8021540:	4a1d      	ldr	r2, [pc, #116]	; (80215b8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x234>)
 8021542:	441a      	add	r2, r3
							MessageMode::Sync, error));
 8021544:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021548:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
 802154c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021550:	f5a3 708c 	sub.w	r0, r3, #280	; 0x118
 8021554:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021558:	f5a3 7192 	sub.w	r1, r3, #292	; 0x124
 802155c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8021560:	9301      	str	r3, [sp, #4]
 8021562:	2300      	movs	r3, #0
 8021564:	9300      	str	r3, [sp, #0]
 8021566:	462b      	mov	r3, r5
 8021568:	6809      	ldr	r1, [r1, #0]
 802156a:	f000 f9c9 	bl	8021900 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
			Responces.Push(
 802156e:	f107 0310 	add.w	r3, r7, #16
 8021572:	4619      	mov	r1, r3
 8021574:	4620      	mov	r0, r4
 8021576:	f002 f80d 	bl	8023594 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>

			WaitResponce = false;
 802157a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802157e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021582:	681b      	ldr	r3, [r3, #0]
 8021584:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021588:	2200      	movs	r2, #0
 802158a:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 802158e:	e001      	b.n	8021594 <_ZN11QueueSender22ProcessPriorityRequestEv+0x210>
  __ASM volatile ("cpsie i" : : : "memory");
 8021590:	b662      	cpsie	i
}
 8021592:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 8021594:	bf00      	nop
 8021596:	f507 7794 	add.w	r7, r7, #296	; 0x128
 802159a:	46bd      	mov	sp, r7
 802159c:	bdb0      	pop	{r4, r5, r7, pc}
 802159e:	bf00      	nop
 80215a0:	000215d8 	.word	0x000215d8
 80215a4:	0803d0d4 	.word	0x0803d0d4
 80215a8:	0803d114 	.word	0x0803d114
 80215ac:	0803cff4 	.word	0x0803cff4
 80215b0:	0803d140 	.word	0x0803d140
 80215b4:	00020b7c 	.word	0x00020b7c
 80215b8:	000216e6 	.word	0x000216e6

080215bc <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 80215bc:	b580      	push	{r7, lr}
 80215be:	b08a      	sub	sp, #40	; 0x28
 80215c0:	af00      	add	r7, sp, #0
 80215c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80215c4:	b672      	cpsid	i
}
 80215c6:	bf00      	nop
		__disable_irq();
		if (TimerReady && !Requests.Empty() && !WaitResponce
 80215c8:	687b      	ldr	r3, [r7, #4]
 80215ca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215ce:	f893 37f4 	ldrb.w	r3, [r3, #2036]	; 0x7f4
				&& TransmitComplete) {
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	d01c      	beq.n	8021610 <_ZN11QueueSender15ProcessRequestsEv+0x54>
		if (TimerReady && !Requests.Empty() && !WaitResponce
 80215d6:	687b      	ldr	r3, [r7, #4]
 80215d8:	4618      	mov	r0, r3
 80215da:	f002 f88c 	bl	80236f6 <_ZNK10FixedQueueI7RequestLj500EE5EmptyEv>
 80215de:	4603      	mov	r3, r0
 80215e0:	f083 0301 	eor.w	r3, r3, #1
 80215e4:	b2db      	uxtb	r3, r3
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	d012      	beq.n	8021610 <_ZN11QueueSender15ProcessRequestsEv+0x54>
 80215ea:	687b      	ldr	r3, [r7, #4]
 80215ec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215f0:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 80215f4:	f083 0301 	eor.w	r3, r3, #1
 80215f8:	b2db      	uxtb	r3, r3
 80215fa:	2b00      	cmp	r3, #0
 80215fc:	d008      	beq.n	8021610 <_ZN11QueueSender15ProcessRequestsEv+0x54>
				&& TransmitComplete) {
 80215fe:	687b      	ldr	r3, [r7, #4]
 8021600:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021604:	f893 37f3 	ldrb.w	r3, [r3, #2035]	; 0x7f3
 8021608:	2b00      	cmp	r3, #0
 802160a:	d001      	beq.n	8021610 <_ZN11QueueSender15ProcessRequestsEv+0x54>
 802160c:	2301      	movs	r3, #1
 802160e:	e000      	b.n	8021612 <_ZN11QueueSender15ProcessRequestsEv+0x56>
 8021610:	2300      	movs	r3, #0
		if (TimerReady && !Requests.Empty() && !WaitResponce
 8021612:	2b00      	cmp	r3, #0
 8021614:	f000 80bb 	beq.w	802178e <_ZN11QueueSender15ProcessRequestsEv+0x1d2>

			auto &request = Requests.Front();
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	4618      	mov	r0, r3
 802161c:	f002 f87c 	bl	8023718 <_ZN10FixedQueueI7RequestLj500EE5FrontEv>
 8021620:	6238      	str	r0, [r7, #32]
			auto data = request.Data.data() + 1;
 8021622:	6a3b      	ldr	r3, [r7, #32]
 8021624:	4618      	mov	r0, r3
 8021626:	f002 f859 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 802162a:	4603      	mov	r3, r0
 802162c:	3301      	adds	r3, #1
 802162e:	61fb      	str	r3, [r7, #28]

			auto &nPause = request.Data[0];
 8021630:	6a3b      	ldr	r3, [r7, #32]
 8021632:	2100      	movs	r1, #0
 8021634:	4618      	mov	r0, r3
 8021636:	f002 f891 	bl	802375c <_ZNSt5arrayIhLj256EEixEj>
 802163a:	61b8      	str	r0, [r7, #24]

			if (NPause != 0) {
 802163c:	687b      	ldr	r3, [r7, #4]
 802163e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021642:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 8021646:	2b00      	cmp	r3, #0
 8021648:	d014      	beq.n	8021674 <_ZN11QueueSender15ProcessRequestsEv+0xb8>
				NPause--;
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021650:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 8021654:	3b01      	subs	r3, #1
 8021656:	b2da      	uxtb	r2, r3
 8021658:	687b      	ldr	r3, [r7, #4]
 802165a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802165e:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
				TimerReady = false;
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021668:	2200      	movs	r2, #0
 802166a:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
  __ASM volatile ("cpsie i" : : : "memory");
 802166e:	b662      	cpsie	i
}
 8021670:	bf00      	nop
				__enable_irq();
				return;
 8021672:	e08e      	b.n	8021792 <_ZN11QueueSender15ProcessRequestsEv+0x1d6>
			}

			NPause = nPause;
 8021674:	69bb      	ldr	r3, [r7, #24]
 8021676:	781a      	ldrb	r2, [r3, #0]
 8021678:	687b      	ldr	r3, [r7, #4]
 802167a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802167e:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2

			WaitResponce = true;
 8021682:	687b      	ldr	r3, [r7, #4]
 8021684:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021688:	2201      	movs	r2, #1
 802168a:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
  __ASM volatile ("cpsie i" : : : "memory");
 802168e:	b662      	cpsie	i
}
 8021690:	bf00      	nop
			__enable_irq();

			assert(
 8021692:	6a3b      	ldr	r3, [r7, #32]
 8021694:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021698:	4618      	mov	r0, r3
 802169a:	f7ff fc36 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 802169e:	4603      	mov	r3, r0
 80216a0:	2b01      	cmp	r3, #1
 80216a2:	d006      	beq.n	80216b2 <_ZN11QueueSender15ProcessRequestsEv+0xf6>
 80216a4:	4b3c      	ldr	r3, [pc, #240]	; (8021798 <_ZN11QueueSender15ProcessRequestsEv+0x1dc>)
 80216a6:	4a3d      	ldr	r2, [pc, #244]	; (802179c <_ZN11QueueSender15ProcessRequestsEv+0x1e0>)
 80216a8:	f240 1137 	movw	r1, #311	; 0x137
 80216ac:	483c      	ldr	r0, [pc, #240]	; (80217a0 <_ZN11QueueSender15ProcessRequestsEv+0x1e4>)
 80216ae:	f01a fb77 	bl	803bda0 <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Async);

			const size_t nAttempts = 5;
 80216b2:	2305      	movs	r3, #5
 80216b4:	617b      	str	r3, [r7, #20]
			const uint32_t delayMS = 5;
 80216b6:	2305      	movs	r3, #5
 80216b8:	613b      	str	r3, [r7, #16]
			size_t i = 0;
 80216ba:	2300      	movs	r3, #0
 80216bc:	627b      	str	r3, [r7, #36]	; 0x24

			while (i++ < nAttempts) {
 80216be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216c0:	1c5a      	adds	r2, r3, #1
 80216c2:	627a      	str	r2, [r7, #36]	; 0x24
 80216c4:	2b04      	cmp	r3, #4
 80216c6:	bf94      	ite	ls
 80216c8:	2301      	movls	r3, #1
 80216ca:	2300      	movhi	r3, #0
 80216cc:	b2db      	uxtb	r3, r3
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d04c      	beq.n	802176c <_ZN11QueueSender15ProcessRequestsEv+0x1b0>

				TransmitComplete = false;
 80216d2:	687b      	ldr	r3, [r7, #4]
 80216d4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216d8:	2200      	movs	r2, #0
 80216da:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3

				assert(
 80216de:	687b      	ldr	r3, [r7, #4]
 80216e0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216e4:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 80216e8:	6a3b      	ldr	r3, [r7, #32]
 80216ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80216ee:	b29b      	uxth	r3, r3
 80216f0:	461a      	mov	r2, r3
 80216f2:	69f9      	ldr	r1, [r7, #28]
 80216f4:	f013 fd28 	bl	8035148 <HAL_UART_Transmit_IT>
 80216f8:	4603      	mov	r3, r0
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	d006      	beq.n	802170c <_ZN11QueueSender15ProcessRequestsEv+0x150>
 80216fe:	4b29      	ldr	r3, [pc, #164]	; (80217a4 <_ZN11QueueSender15ProcessRequestsEv+0x1e8>)
 8021700:	4a26      	ldr	r2, [pc, #152]	; (802179c <_ZN11QueueSender15ProcessRequestsEv+0x1e0>)
 8021702:	f240 1143 	movw	r1, #323	; 0x143
 8021706:	4826      	ldr	r0, [pc, #152]	; (80217a0 <_ZN11QueueSender15ProcessRequestsEv+0x1e4>)
 8021708:	f01a fb4a 	bl	803bda0 <__assert_func>
						HAL_UART_Transmit_IT(UartHandle, data,
								request.RequestSize) == HAL_OK);

				while (!TransmitComplete)
 802170c:	687b      	ldr	r3, [r7, #4]
 802170e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021712:	f893 37f3 	ldrb.w	r3, [r3, #2035]	; 0x7f3
 8021716:	2b00      	cmp	r3, #0
 8021718:	d100      	bne.n	802171c <_ZN11QueueSender15ProcessRequestsEv+0x160>
 802171a:	e7f7      	b.n	802170c <_ZN11QueueSender15ProcessRequestsEv+0x150>
					;

				ErrorCode::Type error = Receive(request.ResponceSize);
 802171c:	6a3b      	ldr	r3, [r7, #32]
 802171e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8021722:	b2db      	uxtb	r3, r3
 8021724:	4619      	mov	r1, r3
 8021726:	6878      	ldr	r0, [r7, #4]
 8021728:	f000 f83e 	bl	80217a8 <_ZN11QueueSender7ReceiveEh>
 802172c:	4603      	mov	r3, r0
 802172e:	73fb      	strb	r3, [r7, #15]
				if (error == ErrorCode::Success)
 8021730:	7bfb      	ldrb	r3, [r7, #15]
 8021732:	2b00      	cmp	r3, #0
 8021734:	d019      	beq.n	802176a <_ZN11QueueSender15ProcessRequestsEv+0x1ae>
					break;
				HAL_Delay(delayMS);
 8021736:	2005      	movs	r0, #5
 8021738:	f009 fac4 	bl	802acc4 <HAL_Delay>
				if (error == ErrorCode::NACK) {
 802173c:	7bfb      	ldrb	r3, [r7, #15]
 802173e:	2b02      	cmp	r3, #2
 8021740:	d1bd      	bne.n	80216be <_ZN11QueueSender15ProcessRequestsEv+0x102>
					uint8_t dummy;
					while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 8021742:	687b      	ldr	r3, [r7, #4]
 8021744:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021748:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 802174c:	f107 010e 	add.w	r1, r7, #14
 8021750:	2300      	movs	r3, #0
 8021752:	2201      	movs	r2, #1
 8021754:	f013 fc24 	bl	8034fa0 <HAL_UART_Receive>
 8021758:	4603      	mov	r3, r0
 802175a:	2b00      	cmp	r3, #0
 802175c:	bf0c      	ite	eq
 802175e:	2301      	moveq	r3, #1
 8021760:	2300      	movne	r3, #0
 8021762:	b2db      	uxtb	r3, r3
 8021764:	2b00      	cmp	r3, #0
 8021766:	d0aa      	beq.n	80216be <_ZN11QueueSender15ProcessRequestsEv+0x102>
 8021768:	e7eb      	b.n	8021742 <_ZN11QueueSender15ProcessRequestsEv+0x186>
					break;
 802176a:	bf00      	nop
						;
				}
			}

			Requests.Pop();
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	4618      	mov	r0, r3
 8021770:	f002 f804 	bl	802377c <_ZN10FixedQueueI7RequestLj500EE3PopEv>
			WaitResponce = false;
 8021774:	687b      	ldr	r3, [r7, #4]
 8021776:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802177a:	2200      	movs	r2, #0
 802177c:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
			TimerReady = false;
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021786:	2200      	movs	r2, #0
 8021788:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
 802178c:	e001      	b.n	8021792 <_ZN11QueueSender15ProcessRequestsEv+0x1d6>
  __ASM volatile ("cpsie i" : : : "memory");
 802178e:	b662      	cpsie	i
}
 8021790:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 8021792:	3728      	adds	r7, #40	; 0x28
 8021794:	46bd      	mov	sp, r7
 8021796:	bd80      	pop	{r7, pc}
 8021798:	0803d190 	.word	0x0803d190
 802179c:	0803d1d4 	.word	0x0803d1d4
 80217a0:	0803cff4 	.word	0x0803cff4
 80217a4:	0803d1f8 	.word	0x0803d1f8

080217a8 <_ZN11QueueSender7ReceiveEh>:

	ErrorCode::Type Receive(uint8_t size) {
 80217a8:	b590      	push	{r4, r7, lr}
 80217aa:	b085      	sub	sp, #20
 80217ac:	af00      	add	r7, sp, #0
 80217ae:	6078      	str	r0, [r7, #4]
 80217b0:	460b      	mov	r3, r1
 80217b2:	70fb      	strb	r3, [r7, #3]
		assert(size >= 4);
 80217b4:	78fb      	ldrb	r3, [r7, #3]
 80217b6:	2b03      	cmp	r3, #3
 80217b8:	d806      	bhi.n	80217c8 <_ZN11QueueSender7ReceiveEh+0x20>
 80217ba:	4b33      	ldr	r3, [pc, #204]	; (8021888 <_ZN11QueueSender7ReceiveEh+0xe0>)
 80217bc:	4a33      	ldr	r2, [pc, #204]	; (802188c <_ZN11QueueSender7ReceiveEh+0xe4>)
 80217be:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80217c2:	4833      	ldr	r0, [pc, #204]	; (8021890 <_ZN11QueueSender7ReceiveEh+0xe8>)
 80217c4:	f01a faec 	bl	803bda0 <__assert_func>

		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 80217c8:	687b      	ldr	r3, [r7, #4]
 80217ca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80217ce:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 80217d2:	687a      	ldr	r2, [r7, #4]
 80217d4:	4b2f      	ldr	r3, [pc, #188]	; (8021894 <_ZN11QueueSender7ReceiveEh+0xec>)
 80217d6:	4413      	add	r3, r2
 80217d8:	4618      	mov	r0, r3
 80217da:	f001 ff7f 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 80217de:	4601      	mov	r1, r0
				TimeoutS);
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80217e6:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 80217ea:	2204      	movs	r2, #4
 80217ec:	4620      	mov	r0, r4
 80217ee:	f013 fbd7 	bl	8034fa0 <HAL_UART_Receive>
 80217f2:	4603      	mov	r3, r0
 80217f4:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 80217f6:	7bfb      	ldrb	r3, [r7, #15]
 80217f8:	2b03      	cmp	r3, #3
 80217fa:	d101      	bne.n	8021800 <_ZN11QueueSender7ReceiveEh+0x58>
			return ErrorCode::Timeout;
 80217fc:	2301      	movs	r3, #1
 80217fe:	e03f      	b.n	8021880 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (IsNack(CurrentResponceBuffer.data()))
 8021800:	687a      	ldr	r2, [r7, #4]
 8021802:	4b24      	ldr	r3, [pc, #144]	; (8021894 <_ZN11QueueSender7ReceiveEh+0xec>)
 8021804:	4413      	add	r3, r2
 8021806:	4618      	mov	r0, r3
 8021808:	f001 ff68 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 802180c:	4603      	mov	r3, r0
 802180e:	4619      	mov	r1, r3
 8021810:	6878      	ldr	r0, [r7, #4]
 8021812:	f000 f841 	bl	8021898 <_ZN11QueueSender6IsNackEPKh>
 8021816:	4603      	mov	r3, r0
 8021818:	2b00      	cmp	r3, #0
 802181a:	d001      	beq.n	8021820 <_ZN11QueueSender7ReceiveEh+0x78>
			return ErrorCode::NACK;
 802181c:	2302      	movs	r3, #2
 802181e:	e02f      	b.n	8021880 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (ret != HAL_OK)
 8021820:	7bfb      	ldrb	r3, [r7, #15]
 8021822:	2b00      	cmp	r3, #0
 8021824:	d001      	beq.n	802182a <_ZN11QueueSender7ReceiveEh+0x82>
			return ErrorCode::Unknown;
 8021826:	2303      	movs	r3, #3
 8021828:	e02a      	b.n	8021880 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (size == 4)
 802182a:	78fb      	ldrb	r3, [r7, #3]
 802182c:	2b04      	cmp	r3, #4
 802182e:	d101      	bne.n	8021834 <_ZN11QueueSender7ReceiveEh+0x8c>
			return ErrorCode::Success;
 8021830:	2300      	movs	r3, #0
 8021832:	e025      	b.n	8021880 <_ZN11QueueSender7ReceiveEh+0xd8>

		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 8021834:	687b      	ldr	r3, [r7, #4]
 8021836:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802183a:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 802183e:	687a      	ldr	r2, [r7, #4]
 8021840:	4b14      	ldr	r3, [pc, #80]	; (8021894 <_ZN11QueueSender7ReceiveEh+0xec>)
 8021842:	4413      	add	r3, r2
 8021844:	4618      	mov	r0, r3
 8021846:	f001 ff49 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 802184a:	4603      	mov	r3, r0
 802184c:	1d19      	adds	r1, r3, #4
 802184e:	78fb      	ldrb	r3, [r7, #3]
 8021850:	b29b      	uxth	r3, r3
 8021852:	3b04      	subs	r3, #4
 8021854:	b29a      	uxth	r2, r3
				size - 4, TimeoutS);
 8021856:	687b      	ldr	r3, [r7, #4]
 8021858:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802185c:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 8021860:	4620      	mov	r0, r4
 8021862:	f013 fb9d 	bl	8034fa0 <HAL_UART_Receive>
 8021866:	4603      	mov	r3, r0
 8021868:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 802186a:	7bfb      	ldrb	r3, [r7, #15]
 802186c:	2b03      	cmp	r3, #3
 802186e:	d101      	bne.n	8021874 <_ZN11QueueSender7ReceiveEh+0xcc>
			return ErrorCode::Timeout;
 8021870:	2301      	movs	r3, #1
 8021872:	e005      	b.n	8021880 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (ret != HAL_OK)
 8021874:	7bfb      	ldrb	r3, [r7, #15]
 8021876:	2b00      	cmp	r3, #0
 8021878:	d001      	beq.n	802187e <_ZN11QueueSender7ReceiveEh+0xd6>
			return ErrorCode::Unknown;
 802187a:	2303      	movs	r3, #3
 802187c:	e000      	b.n	8021880 <_ZN11QueueSender7ReceiveEh+0xd8>

		return ErrorCode::Success;
 802187e:	2300      	movs	r3, #0
	}
 8021880:	4618      	mov	r0, r3
 8021882:	3714      	adds	r7, #20
 8021884:	46bd      	mov	sp, r7
 8021886:	bd90      	pop	{r4, r7, pc}
 8021888:	0803d240 	.word	0x0803d240
 802188c:	0803d24c 	.word	0x0803d24c
 8021890:	0803cff4 	.word	0x0803cff4
 8021894:	000216e6 	.word	0x000216e6

08021898 <_ZN11QueueSender6IsNackEPKh>:

	bool IsNack(const uint8_t *data) {
 8021898:	b580      	push	{r7, lr}
 802189a:	b084      	sub	sp, #16
 802189c:	af00      	add	r7, sp, #0
 802189e:	6078      	str	r0, [r7, #4]
 80218a0:	6039      	str	r1, [r7, #0]
		assert(data);
 80218a2:	683b      	ldr	r3, [r7, #0]
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d106      	bne.n	80218b6 <_ZN11QueueSender6IsNackEPKh+0x1e>
 80218a8:	4b11      	ldr	r3, [pc, #68]	; (80218f0 <_ZN11QueueSender6IsNackEPKh+0x58>)
 80218aa:	4a12      	ldr	r2, [pc, #72]	; (80218f4 <_ZN11QueueSender6IsNackEPKh+0x5c>)
 80218ac:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80218b0:	4811      	ldr	r0, [pc, #68]	; (80218f8 <_ZN11QueueSender6IsNackEPKh+0x60>)
 80218b2:	f01a fa75 	bl	803bda0 <__assert_func>
		uint8_t kondoNACK[4] = { 0x4, 0xFE, 0x15, 0x17 };
 80218b6:	4b11      	ldr	r3, [pc, #68]	; (80218fc <_ZN11QueueSender6IsNackEPKh+0x64>)
 80218b8:	60bb      	str	r3, [r7, #8]

		for (int i = 0; i < 4; ++i)
 80218ba:	2300      	movs	r3, #0
 80218bc:	60fb      	str	r3, [r7, #12]
 80218be:	68fb      	ldr	r3, [r7, #12]
 80218c0:	2b03      	cmp	r3, #3
 80218c2:	dc10      	bgt.n	80218e6 <_ZN11QueueSender6IsNackEPKh+0x4e>
			if (data[i] != kondoNACK[i])
 80218c4:	68fb      	ldr	r3, [r7, #12]
 80218c6:	683a      	ldr	r2, [r7, #0]
 80218c8:	4413      	add	r3, r2
 80218ca:	781a      	ldrb	r2, [r3, #0]
 80218cc:	f107 0108 	add.w	r1, r7, #8
 80218d0:	68fb      	ldr	r3, [r7, #12]
 80218d2:	440b      	add	r3, r1
 80218d4:	781b      	ldrb	r3, [r3, #0]
 80218d6:	429a      	cmp	r2, r3
 80218d8:	d001      	beq.n	80218de <_ZN11QueueSender6IsNackEPKh+0x46>
				return false;
 80218da:	2300      	movs	r3, #0
 80218dc:	e004      	b.n	80218e8 <_ZN11QueueSender6IsNackEPKh+0x50>
		for (int i = 0; i < 4; ++i)
 80218de:	68fb      	ldr	r3, [r7, #12]
 80218e0:	3301      	adds	r3, #1
 80218e2:	60fb      	str	r3, [r7, #12]
 80218e4:	e7eb      	b.n	80218be <_ZN11QueueSender6IsNackEPKh+0x26>

		return true;
 80218e6:	2301      	movs	r3, #1
	}
 80218e8:	4618      	mov	r0, r3
 80218ea:	3710      	adds	r7, #16
 80218ec:	46bd      	mov	sp, r7
 80218ee:	bd80      	pop	{r7, pc}
 80218f0:	0803d288 	.word	0x0803d288
 80218f4:	0803d290 	.word	0x0803d290
 80218f8:	0803cff4 	.word	0x0803cff4
 80218fc:	1715fe04 	.word	0x1715fe04

08021900 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>:

	Responce CreateResponce(const Responce::BufferT &data, size_t ResponceSize,
 8021900:	b580      	push	{r7, lr}
 8021902:	b084      	sub	sp, #16
 8021904:	af00      	add	r7, sp, #0
 8021906:	60f8      	str	r0, [r7, #12]
 8021908:	60b9      	str	r1, [r7, #8]
 802190a:	607a      	str	r2, [r7, #4]
 802190c:	603b      	str	r3, [r7, #0]
			MessageMode::Type messageMode, ErrorCode::Type error) const {
		Responce responce;
		responce.Data = data;
 802190e:	68fa      	ldr	r2, [r7, #12]
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	4610      	mov	r0, r2
 8021914:	4619      	mov	r1, r3
 8021916:	f44f 7380 	mov.w	r3, #256	; 0x100
 802191a:	461a      	mov	r2, r3
 802191c:	f01a faaa 	bl	803be74 <memcpy>
		responce.ResponceSize = ResponceSize;
 8021920:	68fb      	ldr	r3, [r7, #12]
 8021922:	683a      	ldr	r2, [r7, #0]
 8021924:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.PeripheryID = Periphery::Body;
 8021928:	68fb      	ldr	r3, [r7, #12]
 802192a:	2200      	movs	r2, #0
 802192c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.Error = ErrorCode::Serialize(error);
 8021930:	7f3b      	ldrb	r3, [r7, #28]
 8021932:	4618      	mov	r0, r3
 8021934:	f7ff faf5 	bl	8020f22 <_ZN11QueueSender9ErrorCode9SerializeEh>
 8021938:	4603      	mov	r3, r0
 802193a:	461a      	mov	r2, r3
 802193c:	68fb      	ldr	r3, [r7, #12]
 802193e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		responce.MetaInfo = MessageMode::Serialize(messageMode);
 8021942:	7e3b      	ldrb	r3, [r7, #24]
 8021944:	4618      	mov	r0, r3
 8021946:	f7ff fad4 	bl	8020ef2 <_ZN11QueueSender11MessageMode9SerializeEh>
 802194a:	4603      	mov	r3, r0
 802194c:	461a      	mov	r2, r3
 802194e:	68fb      	ldr	r3, [r7, #12]
 8021950:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		return responce;
 8021954:	bf00      	nop
	}
 8021956:	68f8      	ldr	r0, [r7, #12]
 8021958:	3710      	adds	r7, #16
 802195a:	46bd      	mov	sp, r7
 802195c:	bd80      	pop	{r7, pc}

0802195e <_ZNK11QueueSender18CreateInfoResponceEv>:

	Responce CreateInfoResponce() const {
 802195e:	b580      	push	{r7, lr}
 8021960:	b0c6      	sub	sp, #280	; 0x118
 8021962:	af02      	add	r7, sp, #8
 8021964:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021968:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802196c:	6018      	str	r0, [r3, #0]
 802196e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021972:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021976:	6019      	str	r1, [r3, #0]
		Responce::BufferT data;
		uint8_t *ptr = data.data();
 8021978:	f107 030c 	add.w	r3, r7, #12
 802197c:	4618      	mov	r0, r3
 802197e:	f001 fead 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 8021982:	4602      	mov	r2, r0
 8021984:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802198c:	601a      	str	r2, [r3, #0]
		GetInfo().SerializeTo(&ptr);
 802198e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021992:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021996:	6818      	ldr	r0, [r3, #0]
 8021998:	f000 f96c 	bl	8021c74 <_ZNK11QueueSender7GetInfoEv>
 802199c:	4603      	mov	r3, r0
 802199e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80219a2:	f107 0208 	add.w	r2, r7, #8
 80219a6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80219aa:	4611      	mov	r1, r2
 80219ac:	4618      	mov	r0, r3
 80219ae:	f7ff fac5 	bl	8020f3c <_ZN11QueueSender4Info11SerializeToEPPh>

		return CreateResponce(data, Info::Size, MessageMode::Info,
				ErrorCode::Success);
 80219b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80219b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80219ba:	6818      	ldr	r0, [r3, #0]
 80219bc:	f107 020c 	add.w	r2, r7, #12
 80219c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80219c4:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80219c8:	2300      	movs	r3, #0
 80219ca:	9301      	str	r3, [sp, #4]
 80219cc:	2302      	movs	r3, #2
 80219ce:	9300      	str	r3, [sp, #0]
 80219d0:	2304      	movs	r3, #4
 80219d2:	6809      	ldr	r1, [r1, #0]
 80219d4:	f7ff ff94 	bl	8021900 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 80219d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80219dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80219e0:	6818      	ldr	r0, [r3, #0]
 80219e2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80219e6:	46bd      	mov	sp, r7
 80219e8:	bd80      	pop	{r7, pc}

080219ea <_ZN11QueueSender10ResetQueueEv>:

	Responce ResetQueue() {
 80219ea:	b580      	push	{r7, lr}
 80219ec:	b0c4      	sub	sp, #272	; 0x110
 80219ee:	af02      	add	r7, sp, #8
 80219f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80219f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80219f8:	6018      	str	r0, [r3, #0]
 80219fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80219fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021a02:	6019      	str	r1, [r3, #0]
		Responce::BufferT data;
		Requests.Clear();
 8021a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021a0c:	681b      	ldr	r3, [r3, #0]
 8021a0e:	4618      	mov	r0, r3
 8021a10:	f001 fee2 	bl	80237d8 <_ZN10FixedQueueI7RequestLj500EE5ClearEv>
		NPause = 0;
 8021a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021a1c:	681b      	ldr	r3, [r3, #0]
 8021a1e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021a22:	2200      	movs	r2, #0
 8021a24:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2

		return CreateResponce(data, 1, MessageMode::ResetQueue,
				ErrorCode::Success);
 8021a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021a2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8021a30:	6818      	ldr	r0, [r3, #0]
 8021a32:	f107 0208 	add.w	r2, r7, #8
 8021a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021a3a:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8021a3e:	2300      	movs	r3, #0
 8021a40:	9301      	str	r3, [sp, #4]
 8021a42:	2304      	movs	r3, #4
 8021a44:	9300      	str	r3, [sp, #0]
 8021a46:	2301      	movs	r3, #1
 8021a48:	6809      	ldr	r1, [r1, #0]
 8021a4a:	f7ff ff59 	bl	8021900 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021a52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8021a56:	6818      	ldr	r0, [r3, #0]
 8021a58:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8021a5c:	46bd      	mov	sp, r7
 8021a5e:	bd80      	pop	{r7, pc}

08021a60 <_ZNKSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) const noexcept
 8021a60:	b580      	push	{r7, lr}
 8021a62:	b082      	sub	sp, #8
 8021a64:	af00      	add	r7, sp, #0
 8021a66:	6078      	str	r0, [r7, #4]
 8021a68:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	6839      	ldr	r1, [r7, #0]
 8021a6e:	4618      	mov	r0, r3
 8021a70:	f001 fecc 	bl	802380c <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8021a74:	4603      	mov	r3, r0
 8021a76:	4618      	mov	r0, r3
 8021a78:	3708      	adds	r7, #8
 8021a7a:	46bd      	mov	sp, r7
 8021a7c:	bd80      	pop	{r7, pc}
	...

08021a80 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>:

	Responce ProcessSetPeriodRequest(const Request &request) {
 8021a80:	b580      	push	{r7, lr}
 8021a82:	b0c8      	sub	sp, #288	; 0x120
 8021a84:	af02      	add	r7, sp, #8
 8021a86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021a8e:	6018      	str	r0, [r3, #0]
 8021a90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021a98:	6019      	str	r1, [r3, #0]
 8021a9a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021aa2:	601a      	str	r2, [r3, #0]
		assert(
 8021aa4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021aa8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021aac:	681b      	ldr	r3, [r3, #0]
 8021aae:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021ab2:	4618      	mov	r0, r3
 8021ab4:	f7ff fa29 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021ab8:	4603      	mov	r3, r0
 8021aba:	2b03      	cmp	r3, #3
 8021abc:	d006      	beq.n	8021acc <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x4c>
 8021abe:	4b23      	ldr	r3, [pc, #140]	; (8021b4c <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xcc>)
 8021ac0:	4a23      	ldr	r2, [pc, #140]	; (8021b50 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xd0>)
 8021ac2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8021ac6:	4823      	ldr	r0, [pc, #140]	; (8021b54 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xd4>)
 8021ac8:	f01a f96a 	bl	803bda0 <__assert_func>
				MessageMode::Deserialize(request.MetaInfo)
						== MessageMode::SetPeriod);
		Responce::BufferT data;

		uint8_t newPeriod = request.Data[0];
 8021acc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021ad0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021ad4:	681b      	ldr	r3, [r3, #0]
 8021ad6:	2100      	movs	r1, #0
 8021ad8:	4618      	mov	r0, r3
 8021ada:	f7ff ffc1 	bl	8021a60 <_ZNKSt5arrayIhLj256EEixEj>
 8021ade:	4603      	mov	r3, r0
 8021ae0:	781b      	ldrb	r3, [r3, #0]
 8021ae2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

		ErrorCode::Type error = ErrorCode::Success;
 8021ae6:	2300      	movs	r3, #0
 8021ae8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (newPeriod == 0)
 8021aec:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	d103      	bne.n	8021afc <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x7c>
			error = ErrorCode::BadPeriod;
 8021af4:	2304      	movs	r3, #4
 8021af6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8021afa:	e009      	b.n	8021b10 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x90>
		else
			SetSendPeriod(newPeriod);
 8021afc:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8021b00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021b08:	4611      	mov	r1, r2
 8021b0a:	6818      	ldr	r0, [r3, #0]
 8021b0c:	f7ff fbe6 	bl	80212dc <_ZN11QueueSender13SetSendPeriodEh>

		return CreateResponce(data, 1, MessageMode::SetPeriod, error);
 8021b10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021b18:	6818      	ldr	r0, [r3, #0]
 8021b1a:	f107 0214 	add.w	r2, r7, #20
 8021b1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b22:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021b26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8021b2a:	9301      	str	r3, [sp, #4]
 8021b2c:	2303      	movs	r3, #3
 8021b2e:	9300      	str	r3, [sp, #0]
 8021b30:	2301      	movs	r3, #1
 8021b32:	6809      	ldr	r1, [r1, #0]
 8021b34:	f7ff fee4 	bl	8021900 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021b38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021b40:	6818      	ldr	r0, [r3, #0]
 8021b42:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8021b46:	46bd      	mov	sp, r7
 8021b48:	bd80      	pop	{r7, pc}
 8021b4a:	bf00      	nop
 8021b4c:	0803d2bc 	.word	0x0803d2bc
 8021b50:	0803d304 	.word	0x0803d304
 8021b54:	0803cff4 	.word	0x0803cff4

08021b58 <_ZN11QueueSender19CreateAsyncResponceERK7Request>:

	Responce CreateAsyncResponce(const Request &request) {
 8021b58:	b580      	push	{r7, lr}
 8021b5a:	b0c8      	sub	sp, #288	; 0x120
 8021b5c:	af02      	add	r7, sp, #8
 8021b5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021b66:	6018      	str	r0, [r3, #0]
 8021b68:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021b70:	6019      	str	r1, [r3, #0]
 8021b72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021b7a:	601a      	str	r2, [r3, #0]
		assert(
 8021b7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021b84:	681b      	ldr	r3, [r3, #0]
 8021b86:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021b8a:	4618      	mov	r0, r3
 8021b8c:	f7ff f9bd 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021b90:	4603      	mov	r3, r0
 8021b92:	2b01      	cmp	r3, #1
 8021b94:	d006      	beq.n	8021ba4 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x4c>
 8021b96:	4b27      	ldr	r3, [pc, #156]	; (8021c34 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xdc>)
 8021b98:	4a27      	ldr	r2, [pc, #156]	; (8021c38 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xe0>)
 8021b9a:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8021b9e:	4827      	ldr	r0, [pc, #156]	; (8021c3c <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xe4>)
 8021ba0:	f01a f8fe 	bl	803bda0 <__assert_func>
				MessageMode::Deserialize(request.MetaInfo)
						== MessageMode::Async);
		ErrorCode::Type error = ErrorCode::Success;
 8021ba4:	2300      	movs	r3, #0
 8021ba6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (Requests.Full())
 8021baa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021bae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021bb2:	681b      	ldr	r3, [r3, #0]
 8021bb4:	4618      	mov	r0, r3
 8021bb6:	f001 fe37 	bl	8023828 <_ZNK10FixedQueueI7RequestLj500EE4FullEv>
 8021bba:	4603      	mov	r3, r0
 8021bbc:	2b00      	cmp	r3, #0
 8021bbe:	d003      	beq.n	8021bc8 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x70>
			error = ErrorCode::QueueFull;
 8021bc0:	2305      	movs	r3, #5
 8021bc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8021bc6:	e00c      	b.n	8021be2 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x8a>
		else
			Requests.Push(request);
 8021bc8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021bcc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021bd0:	681a      	ldr	r2, [r3, #0]
 8021bd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021bd6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021bda:	6819      	ldr	r1, [r3, #0]
 8021bdc:	4610      	mov	r0, r2
 8021bde:	f001 fe35 	bl	802384c <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_>

		return CreateResponce( { 0 }, 1, MessageMode::Async, error);
 8021be2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8021bea:	4618      	mov	r0, r3
 8021bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021bf0:	461a      	mov	r2, r3
 8021bf2:	2100      	movs	r1, #0
 8021bf4:	f01a f966 	bl	803bec4 <memset>
 8021bf8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021bfc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021c00:	6818      	ldr	r0, [r3, #0]
 8021c02:	f107 0214 	add.w	r2, r7, #20
 8021c06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021c0a:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021c0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8021c12:	9301      	str	r3, [sp, #4]
 8021c14:	2301      	movs	r3, #1
 8021c16:	9300      	str	r3, [sp, #0]
 8021c18:	2301      	movs	r3, #1
 8021c1a:	6809      	ldr	r1, [r1, #0]
 8021c1c:	f7ff fe70 	bl	8021900 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021c20:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021c24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021c28:	6818      	ldr	r0, [r3, #0]
 8021c2a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8021c2e:	46bd      	mov	sp, r7
 8021c30:	bd80      	pop	{r7, pc}
 8021c32:	bf00      	nop
 8021c34:	0803d190 	.word	0x0803d190
 8021c38:	0803d344 	.word	0x0803d344
 8021c3c:	0803cff4 	.word	0x0803cff4

08021c40 <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 8021c40:	b480      	push	{r7}
 8021c42:	b083      	sub	sp, #12
 8021c44:	af00      	add	r7, sp, #0
 8021c46:	6078      	str	r0, [r7, #4]
		//WaitResponce = false;
	}
 8021c48:	bf00      	nop
 8021c4a:	370c      	adds	r7, #12
 8021c4c:	46bd      	mov	sp, r7
 8021c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c52:	4770      	bx	lr

08021c54 <_ZN11QueueSender14FinishTransmitEv>:

	void FinishTransmit() {
 8021c54:	b480      	push	{r7}
 8021c56:	b083      	sub	sp, #12
 8021c58:	af00      	add	r7, sp, #0
 8021c5a:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021c5c:	687b      	ldr	r3, [r7, #4]
 8021c5e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021c62:	2201      	movs	r2, #1
 8021c64:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
	}
 8021c68:	bf00      	nop
 8021c6a:	370c      	adds	r7, #12
 8021c6c:	46bd      	mov	sp, r7
 8021c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c72:	4770      	bx	lr

08021c74 <_ZNK11QueueSender7GetInfoEv>:

	Info GetInfo() const {
 8021c74:	b580      	push	{r7, lr}
 8021c76:	b084      	sub	sp, #16
 8021c78:	af00      	add	r7, sp, #0
 8021c7a:	6078      	str	r0, [r7, #4]
		return {Requests.GetSize(), Responces.GetSize()};
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	4618      	mov	r0, r3
 8021c80:	f001 fe26 	bl	80238d0 <_ZNK10FixedQueueI7RequestLj500EE7GetSizeEv>
 8021c84:	4603      	mov	r3, r0
 8021c86:	b29b      	uxth	r3, r3
 8021c88:	81bb      	strh	r3, [r7, #12]
 8021c8a:	687a      	ldr	r2, [r7, #4]
 8021c8c:	4b09      	ldr	r3, [pc, #36]	; (8021cb4 <_ZNK11QueueSender7GetInfoEv+0x40>)
 8021c8e:	4413      	add	r3, r2
 8021c90:	4618      	mov	r0, r3
 8021c92:	f001 fe29 	bl	80238e8 <_ZNK10FixedQueueI8ResponceLj10EE7GetSizeEv>
 8021c96:	4603      	mov	r3, r0
 8021c98:	b29b      	uxth	r3, r3
 8021c9a:	81fb      	strh	r3, [r7, #14]
 8021c9c:	2300      	movs	r3, #0
 8021c9e:	89ba      	ldrh	r2, [r7, #12]
 8021ca0:	f362 030f 	bfi	r3, r2, #0, #16
 8021ca4:	89fa      	ldrh	r2, [r7, #14]
 8021ca6:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8021caa:	4618      	mov	r0, r3
 8021cac:	3710      	adds	r7, #16
 8021cae:	46bd      	mov	sp, r7
 8021cb0:	bd80      	pop	{r7, pc}
 8021cb2:	bf00      	nop
 8021cb4:	00020b7c 	.word	0x00020b7c

08021cb8 <_ZN10FixedQueueI7RequestLj10EEC1Ev>:
class FixedQueue {
 8021cb8:	b480      	push	{r7}
 8021cba:	b083      	sub	sp, #12
 8021cbc:	af00      	add	r7, sp, #0
 8021cbe:	6078      	str	r0, [r7, #4]
 8021cc0:	687b      	ldr	r3, [r7, #4]
 8021cc2:	2200      	movs	r2, #0
 8021cc4:	601a      	str	r2, [r3, #0]
 8021cc6:	687b      	ldr	r3, [r7, #4]
 8021cc8:	2200      	movs	r2, #0
 8021cca:	605a      	str	r2, [r3, #4]
 8021ccc:	687b      	ldr	r3, [r7, #4]
 8021cce:	2200      	movs	r2, #0
 8021cd0:	609a      	str	r2, [r3, #8]
 8021cd2:	687b      	ldr	r3, [r7, #4]
 8021cd4:	4618      	mov	r0, r3
 8021cd6:	370c      	adds	r7, #12
 8021cd8:	46bd      	mov	sp, r7
 8021cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cde:	4770      	bx	lr

08021ce0 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;
public:
	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 8021ce0:	b580      	push	{r7, lr}
 8021ce2:	b084      	sub	sp, #16
 8021ce4:	af00      	add	r7, sp, #0
 8021ce6:	60f8      	str	r0, [r7, #12]
 8021ce8:	60b9      	str	r1, [r7, #8]
 8021cea:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8021cec:	68fb      	ldr	r3, [r7, #12]
 8021cee:	4618      	mov	r0, r3
 8021cf0:	f7ff ffe2 	bl	8021cb8 <_ZN10FixedQueueI7RequestLj10EEC1Ev>
 8021cf4:	68fb      	ldr	r3, [r7, #12]
 8021cf6:	68ba      	ldr	r2, [r7, #8]
 8021cf8:	f8c3 2a84 	str.w	r2, [r3, #2692]	; 0xa84
 8021cfc:	68fb      	ldr	r3, [r7, #12]
 8021cfe:	687a      	ldr	r2, [r7, #4]
 8021d00:	f8c3 2a88 	str.w	r2, [r3, #2696]	; 0xa88
 8021d04:	68fb      	ldr	r3, [r7, #12]
 8021d06:	2201      	movs	r2, #1
 8021d08:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
		assert(uart != NULL);
 8021d0c:	68bb      	ldr	r3, [r7, #8]
 8021d0e:	2b00      	cmp	r3, #0
 8021d10:	d106      	bne.n	8021d20 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x40>
 8021d12:	4b06      	ldr	r3, [pc, #24]	; (8021d2c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x4c>)
 8021d14:	4a06      	ldr	r2, [pc, #24]	; (8021d30 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>)
 8021d16:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8021d1a:	4806      	ldr	r0, [pc, #24]	; (8021d34 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x54>)
 8021d1c:	f01a f840 	bl	803bda0 <__assert_func>
	}
 8021d20:	68fb      	ldr	r3, [r7, #12]
 8021d22:	4618      	mov	r0, r3
 8021d24:	3710      	adds	r7, #16
 8021d26:	46bd      	mov	sp, r7
 8021d28:	bd80      	pop	{r7, pc}
 8021d2a:	bf00      	nop
 8021d2c:	0803d018 	.word	0x0803d018
 8021d30:	0803d380 	.word	0x0803d380
 8021d34:	0803cff4 	.word	0x0803cff4

08021d38 <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 8021d38:	b580      	push	{r7, lr}
 8021d3a:	b082      	sub	sp, #8
 8021d3c:	af00      	add	r7, sp, #0
 8021d3e:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	2200      	movs	r2, #0
 8021d44:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
		assert(HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1) == HAL_OK);
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021d4e:	687b      	ldr	r3, [r7, #4]
 8021d50:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021d54:	2201      	movs	r2, #1
 8021d56:	4619      	mov	r1, r3
 8021d58:	f013 fa9e 	bl	8035298 <HAL_UART_Receive_IT>
 8021d5c:	4603      	mov	r3, r0
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	d006      	beq.n	8021d70 <_ZN13HeadInterface14ResetReadStateEv+0x38>
 8021d62:	4b05      	ldr	r3, [pc, #20]	; (8021d78 <_ZN13HeadInterface14ResetReadStateEv+0x40>)
 8021d64:	4a05      	ldr	r2, [pc, #20]	; (8021d7c <_ZN13HeadInterface14ResetReadStateEv+0x44>)
 8021d66:	f240 11ef 	movw	r1, #495	; 0x1ef
 8021d6a:	4805      	ldr	r0, [pc, #20]	; (8021d80 <_ZN13HeadInterface14ResetReadStateEv+0x48>)
 8021d6c:	f01a f818 	bl	803bda0 <__assert_func>
	}
 8021d70:	bf00      	nop
 8021d72:	3708      	adds	r7, #8
 8021d74:	46bd      	mov	sp, r7
 8021d76:	bd80      	pop	{r7, pc}
 8021d78:	0803d3bc 	.word	0x0803d3bc
 8021d7c:	0803d3f8 	.word	0x0803d3f8
 8021d80:	0803cff4 	.word	0x0803cff4

08021d84 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 8021d84:	b580      	push	{r7, lr}
 8021d86:	b082      	sub	sp, #8
 8021d88:	af00      	add	r7, sp, #0
 8021d8a:	6078      	str	r0, [r7, #4]
		return !Requests.Empty();
 8021d8c:	687b      	ldr	r3, [r7, #4]
 8021d8e:	4618      	mov	r0, r3
 8021d90:	f001 fdb6 	bl	8023900 <_ZNK10FixedQueueI7RequestLj10EE5EmptyEv>
 8021d94:	4603      	mov	r3, r0
 8021d96:	f083 0301 	eor.w	r3, r3, #1
 8021d9a:	b2db      	uxtb	r3, r3
	}
 8021d9c:	4618      	mov	r0, r3
 8021d9e:	3708      	adds	r7, #8
 8021da0:	46bd      	mov	sp, r7
 8021da2:	bd80      	pop	{r7, pc}

08021da4 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 8021da4:	b590      	push	{r4, r7, lr}
 8021da6:	b095      	sub	sp, #84	; 0x54
 8021da8:	af00      	add	r7, sp, #0
 8021daa:	6078      	str	r0, [r7, #4]
 8021dac:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 8021dae:	687b      	ldr	r3, [r7, #4]
 8021db0:	f893 3ca0 	ldrb.w	r3, [r3, #3232]	; 0xca0
 8021db4:	2b00      	cmp	r3, #0
 8021db6:	d100      	bne.n	8021dba <_ZN13HeadInterface4SendERK8Responce+0x16>
 8021db8:	e7f9      	b.n	8021dae <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		uint8_t *ptr = CurrentResponceBuffer.data();
 8021dba:	687b      	ldr	r3, [r7, #4]
 8021dbc:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021dc0:	4618      	mov	r0, r3
 8021dc2:	f001 fc8b 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 8021dc6:	64f8      	str	r0, [r7, #76]	; 0x4c

		*(ptr++) = SOM1Val;
 8021dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021dca:	1c5a      	adds	r2, r3, #1
 8021dcc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021dce:	22ff      	movs	r2, #255	; 0xff
 8021dd0:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8021dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021dd4:	1c5a      	adds	r2, r3, #1
 8021dd6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021dd8:	22aa      	movs	r2, #170	; 0xaa
 8021dda:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 8021ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021dde:	1c5a      	adds	r2, r3, #1
 8021de0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021de2:	683a      	ldr	r2, [r7, #0]
 8021de4:	f892 2104 	ldrb.w	r2, [r2, #260]	; 0x104
 8021de8:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 8021dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021dec:	1c5a      	adds	r2, r3, #1
 8021dee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021df0:	683a      	ldr	r2, [r7, #0]
 8021df2:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8021df6:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 8021df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021dfa:	1c5a      	adds	r2, r3, #1
 8021dfc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021dfe:	683a      	ldr	r2, [r7, #0]
 8021e00:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8021e04:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.ResponceSize);
 8021e06:	683b      	ldr	r3, [r7, #0]
 8021e08:	4618      	mov	r0, r3
 8021e0a:	f001 fd8a 	bl	8023922 <_ZNKSt5arrayIhLj256EE4dataEv>
 8021e0e:	4601      	mov	r1, r0
 8021e10:	683b      	ldr	r3, [r7, #0]
 8021e12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021e16:	461a      	mov	r2, r3
 8021e18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8021e1a:	f01a f82b 	bl	803be74 <memcpy>

		ptr += responce.ResponceSize;
 8021e1e:	683b      	ldr	r3, [r7, #0]
 8021e20:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021e26:	4413      	add	r3, r2
 8021e28:	64fb      	str	r3, [r7, #76]	; 0x4c
		*ptr = SOM3Val;
 8021e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021e2c:	22af      	movs	r2, #175	; 0xaf
 8021e2e:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 8021e30:	687b      	ldr	r3, [r7, #4]
 8021e32:	2200      	movs	r2, #0
 8021e34:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0

		size_t sz = responce.ResponceSize + 3 + 3;
 8021e38:	683b      	ldr	r3, [r7, #0]
 8021e3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021e3e:	3306      	adds	r3, #6
 8021e40:	64bb      	str	r3, [r7, #72]	; 0x48
		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 8021e42:	687b      	ldr	r3, [r7, #4]
 8021e44:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021e48:	4618      	mov	r0, r3
 8021e4a:	f001 fc47 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 8021e4e:	4601      	mov	r1, r0
 8021e50:	f107 0308 	add.w	r3, r7, #8
 8021e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021e56:	4618      	mov	r0, r3
 8021e58:	f01a f80c 	bl	803be74 <memcpy>

		assert(
 8021e5c:	687b      	ldr	r3, [r7, #4]
 8021e5e:	f8d3 4a84 	ldr.w	r4, [r3, #2692]	; 0xa84
 8021e62:	687b      	ldr	r3, [r7, #4]
 8021e64:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021e68:	4618      	mov	r0, r3
 8021e6a:	f001 fc37 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 8021e6e:	4601      	mov	r1, r0
 8021e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021e72:	b29b      	uxth	r3, r3
 8021e74:	461a      	mov	r2, r3
 8021e76:	4620      	mov	r0, r4
 8021e78:	f013 f966 	bl	8035148 <HAL_UART_Transmit_IT>
 8021e7c:	4603      	mov	r3, r0
 8021e7e:	2b00      	cmp	r3, #0
 8021e80:	d006      	beq.n	8021e90 <_ZN13HeadInterface4SendERK8Responce+0xec>
 8021e82:	4b05      	ldr	r3, [pc, #20]	; (8021e98 <_ZN13HeadInterface4SendERK8Responce+0xf4>)
 8021e84:	4a05      	ldr	r2, [pc, #20]	; (8021e9c <_ZN13HeadInterface4SendERK8Responce+0xf8>)
 8021e86:	f44f 7104 	mov.w	r1, #528	; 0x210
 8021e8a:	4805      	ldr	r0, [pc, #20]	; (8021ea0 <_ZN13HeadInterface4SendERK8Responce+0xfc>)
 8021e8c:	f019 ff88 	bl	803bda0 <__assert_func>
				HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(),
						sz) == HAL_OK);
	}
 8021e90:	bf00      	nop
 8021e92:	3754      	adds	r7, #84	; 0x54
 8021e94:	46bd      	mov	sp, r7
 8021e96:	bd90      	pop	{r4, r7, pc}
 8021e98:	0803d420 	.word	0x0803d420
 8021e9c:	0803d470 	.word	0x0803d470
 8021ea0:	0803cff4 	.word	0x0803cff4

08021ea4 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 8021ea4:	b580      	push	{r7, lr}
 8021ea6:	b082      	sub	sp, #8
 8021ea8:	af00      	add	r7, sp, #0
 8021eaa:	6078      	str	r0, [r7, #4]
 8021eac:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 8021eae:	6838      	ldr	r0, [r7, #0]
 8021eb0:	f7ff ff68 	bl	8021d84 <_ZNK13HeadInterface10HasRequestEv>
 8021eb4:	4603      	mov	r3, r0
 8021eb6:	2b00      	cmp	r3, #0
 8021eb8:	d106      	bne.n	8021ec8 <_ZN13HeadInterface10GetRequestEv+0x24>
 8021eba:	4b0e      	ldr	r3, [pc, #56]	; (8021ef4 <_ZN13HeadInterface10GetRequestEv+0x50>)
 8021ebc:	4a0e      	ldr	r2, [pc, #56]	; (8021ef8 <_ZN13HeadInterface10GetRequestEv+0x54>)
 8021ebe:	f240 2116 	movw	r1, #534	; 0x216
 8021ec2:	480e      	ldr	r0, [pc, #56]	; (8021efc <_ZN13HeadInterface10GetRequestEv+0x58>)
 8021ec4:	f019 ff6c 	bl	803bda0 <__assert_func>
		Request request = Requests.Front();
 8021ec8:	683b      	ldr	r3, [r7, #0]
 8021eca:	4618      	mov	r0, r3
 8021ecc:	f001 fd36 	bl	802393c <_ZN10FixedQueueI7RequestLj10EE5FrontEv>
 8021ed0:	4602      	mov	r2, r0
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	4618      	mov	r0, r3
 8021ed6:	4611      	mov	r1, r2
 8021ed8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8021edc:	461a      	mov	r2, r3
 8021ede:	f019 ffc9 	bl	803be74 <memcpy>
		Requests.Pop();
 8021ee2:	683b      	ldr	r3, [r7, #0]
 8021ee4:	4618      	mov	r0, r3
 8021ee6:	f001 fd4b 	bl	8023980 <_ZN10FixedQueueI7RequestLj10EE3PopEv>
		return request;
 8021eea:	bf00      	nop
	}
 8021eec:	6878      	ldr	r0, [r7, #4]
 8021eee:	3708      	adds	r7, #8
 8021ef0:	46bd      	mov	sp, r7
 8021ef2:	bd80      	pop	{r7, pc}
 8021ef4:	0803d49c 	.word	0x0803d49c
 8021ef8:	0803d4ac 	.word	0x0803d4ac
 8021efc:	0803cff4 	.word	0x0803cff4

08021f00 <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8021f00:	b480      	push	{r7}
 8021f02:	b083      	sub	sp, #12
 8021f04:	af00      	add	r7, sp, #0
 8021f06:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021f08:	687b      	ldr	r3, [r7, #4]
 8021f0a:	2201      	movs	r2, #1
 8021f0c:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
	}
 8021f10:	bf00      	nop
 8021f12:	370c      	adds	r7, #12
 8021f14:	46bd      	mov	sp, r7
 8021f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f1a:	4770      	bx	lr

08021f1c <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8021f1c:	b590      	push	{r4, r7, lr}
 8021f1e:	b085      	sub	sp, #20
 8021f20:	af00      	add	r7, sp, #0
 8021f22:	6078      	str	r0, [r7, #4]
		static size_t nRequests = 0;

		switch (CurrentState) {
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	f8d3 3a90 	ldr.w	r3, [r3, #2704]	; 0xa90
 8021f2a:	2b07      	cmp	r3, #7
 8021f2c:	f200 80cc 	bhi.w	80220c8 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1ac>
 8021f30:	a201      	add	r2, pc, #4	; (adr r2, 8021f38 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c>)
 8021f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021f36:	bf00      	nop
 8021f38:	08021f59 	.word	0x08021f59
 8021f3c:	08021f89 	.word	0x08021f89
 8021f40:	08021fb9 	.word	0x08021fb9
 8021f44:	08021fe3 	.word	0x08021fe3
 8021f48:	0802200f 	.word	0x0802200f
 8021f4c:	0802203b 	.word	0x0802203b
 8021f50:	08022075 	.word	0x08022075
 8021f54:	08022093 	.word	0x08022093
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 8021f58:	687b      	ldr	r3, [r7, #4]
 8021f5a:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021f5e:	2bff      	cmp	r3, #255	; 0xff
 8021f60:	d10e      	bne.n	8021f80 <_ZN13HeadInterface19ProcessRecievedDataEv+0x64>
				CurrentState = ReadState::SOM2;
 8021f62:	687b      	ldr	r3, [r7, #4]
 8021f64:	2201      	movs	r2, #1
 8021f66:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021f6a:	687b      	ldr	r3, [r7, #4]
 8021f6c:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021f70:	687b      	ldr	r3, [r7, #4]
 8021f72:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021f76:	2201      	movs	r2, #1
 8021f78:	4619      	mov	r1, r3
 8021f7a:	f013 f98d 	bl	8035298 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021f7e:	e0a7      	b.n	80220d0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
				ResetReadState();
 8021f80:	6878      	ldr	r0, [r7, #4]
 8021f82:	f7ff fed9 	bl	8021d38 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021f86:	e0a3      	b.n	80220d0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 8021f88:	687b      	ldr	r3, [r7, #4]
 8021f8a:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021f8e:	2baa      	cmp	r3, #170	; 0xaa
 8021f90:	d10e      	bne.n	8021fb0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x94>
				CurrentState = ReadState::PERIPHERY_ID;
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	2202      	movs	r2, #2
 8021f96:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021fa0:	687b      	ldr	r3, [r7, #4]
 8021fa2:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021fa6:	2201      	movs	r2, #1
 8021fa8:	4619      	mov	r1, r3
 8021faa:	f013 f975 	bl	8035298 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021fae:	e08f      	b.n	80220d0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
				ResetReadState();
 8021fb0:	6878      	ldr	r0, [r7, #4]
 8021fb2:	f7ff fec1 	bl	8021d38 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021fb6:	e08b      	b.n	80220d0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8021fb8:	687b      	ldr	r3, [r7, #4]
 8021fba:	f893 2a8c 	ldrb.w	r2, [r3, #2700]	; 0xa8c
 8021fbe:	687b      	ldr	r3, [r7, #4]
 8021fc0:	f883 2b9d 	strb.w	r2, [r3, #2973]	; 0xb9d
			CurrentState = ReadState::REQUEST_SIZE;
 8021fc4:	687b      	ldr	r3, [r7, #4]
 8021fc6:	2203      	movs	r2, #3
 8021fc8:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021fcc:	687b      	ldr	r3, [r7, #4]
 8021fce:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021fd2:	687b      	ldr	r3, [r7, #4]
 8021fd4:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021fd8:	2201      	movs	r2, #1
 8021fda:	4619      	mov	r1, r3
 8021fdc:	f013 f95c 	bl	8035298 <HAL_UART_Receive_IT>
			break;
 8021fe0:	e076      	b.n	80220d0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::REQUEST_SIZE: {
			CurrentRequest.RequestSize = CurrentValue;
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021fe8:	461a      	mov	r2, r3
 8021fea:	687b      	ldr	r3, [r7, #4]
 8021fec:	f8c3 2b94 	str.w	r2, [r3, #2964]	; 0xb94
			CurrentState = ReadState::RESPONCE_SIZE;
 8021ff0:	687b      	ldr	r3, [r7, #4]
 8021ff2:	2204      	movs	r2, #4
 8021ff4:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021ff8:	687b      	ldr	r3, [r7, #4]
 8021ffa:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021ffe:	687b      	ldr	r3, [r7, #4]
 8022000:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8022004:	2201      	movs	r2, #1
 8022006:	4619      	mov	r1, r3
 8022008:	f013 f946 	bl	8035298 <HAL_UART_Receive_IT>
			break;
 802200c:	e060      	b.n	80220d0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 802200e:	687b      	ldr	r3, [r7, #4]
 8022010:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8022014:	461a      	mov	r2, r3
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	f8c3 2b98 	str.w	r2, [r3, #2968]	; 0xb98
			CurrentState = ReadState::META;
 802201c:	687b      	ldr	r3, [r7, #4]
 802201e:	2205      	movs	r2, #5
 8022020:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 802202a:	687b      	ldr	r3, [r7, #4]
 802202c:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8022030:	2201      	movs	r2, #1
 8022032:	4619      	mov	r1, r3
 8022034:	f013 f930 	bl	8035298 <HAL_UART_Receive_IT>
			break;
 8022038:	e04a      	b.n	80220d0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	f893 2a8c 	ldrb.w	r2, [r3, #2700]	; 0xa8c
 8022040:	687b      	ldr	r3, [r7, #4]
 8022042:	f883 2b9c 	strb.w	r2, [r3, #2972]	; 0xb9c
			CurrentState = ReadState::DATA;
 8022046:	687b      	ldr	r3, [r7, #4]
 8022048:	2206      	movs	r2, #6
 802204a:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 802204e:	687b      	ldr	r3, [r7, #4]
 8022050:	f8d3 4a84 	ldr.w	r4, [r3, #2692]	; 0xa84
 8022054:	687b      	ldr	r3, [r7, #4]
 8022056:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 802205a:	4618      	mov	r0, r3
 802205c:	f001 fb3e 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 8022060:	4601      	mov	r1, r0
					CurrentRequest.RequestSize);
 8022062:	687b      	ldr	r3, [r7, #4]
 8022064:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8022068:	b29b      	uxth	r3, r3
 802206a:	461a      	mov	r2, r3
 802206c:	4620      	mov	r0, r4
 802206e:	f013 f913 	bl	8035298 <HAL_UART_Receive_IT>
			break;
 8022072:	e02d      	b.n	80220d0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 8022074:	687b      	ldr	r3, [r7, #4]
 8022076:	2207      	movs	r2, #7
 8022078:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8022082:	687b      	ldr	r3, [r7, #4]
 8022084:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8022088:	2201      	movs	r2, #1
 802208a:	4619      	mov	r1, r3
 802208c:	f013 f904 	bl	8035298 <HAL_UART_Receive_IT>
			break;
 8022090:	e01e      	b.n	80220d0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 8022092:	687b      	ldr	r3, [r7, #4]
 8022094:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8022098:	2baf      	cmp	r3, #175	; 0xaf
 802209a:	d111      	bne.n	80220c0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1a4>
				size_t sz = Requests.GetSize();
 802209c:	687b      	ldr	r3, [r7, #4]
 802209e:	4618      	mov	r0, r3
 80220a0:	f001 fc9c 	bl	80239dc <_ZNK10FixedQueueI7RequestLj10EE7GetSizeEv>
 80220a4:	60f8      	str	r0, [r7, #12]
				Requests.Push(CurrentRequest);
 80220a6:	687a      	ldr	r2, [r7, #4]
 80220a8:	687b      	ldr	r3, [r7, #4]
 80220aa:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 80220ae:	4619      	mov	r1, r3
 80220b0:	4610      	mov	r0, r2
 80220b2:	f001 fc9f 	bl	80239f4 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_>
				nRequests++;
 80220b6:	4b08      	ldr	r3, [pc, #32]	; (80220d8 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1bc>)
 80220b8:	681b      	ldr	r3, [r3, #0]
 80220ba:	3301      	adds	r3, #1
 80220bc:	4a06      	ldr	r2, [pc, #24]	; (80220d8 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1bc>)
 80220be:	6013      	str	r3, [r2, #0]
				//CurrentRequest = { };
			}
			ResetReadState();
 80220c0:	6878      	ldr	r0, [r7, #4]
 80220c2:	f7ff fe39 	bl	8021d38 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 80220c6:	e003      	b.n	80220d0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		default:
			ResetReadState();
 80220c8:	6878      	ldr	r0, [r7, #4]
 80220ca:	f7ff fe35 	bl	8021d38 <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 80220ce:	bf00      	nop
 80220d0:	bf00      	nop
 80220d2:	3714      	adds	r7, #20
 80220d4:	46bd      	mov	sp, r7
 80220d6:	bd90      	pop	{r4, r7, pc}
 80220d8:	240001cc 	.word	0x240001cc

080220dc <_ZN17IMUFrameContainer4Info11SerializeToEPPh>:
		uint16_t NumAv;
		uint16_t MaxFrames;

		static constexpr size_t Size = 3 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 80220dc:	b580      	push	{r7, lr}
 80220de:	b082      	sub	sp, #8
 80220e0:	af00      	add	r7, sp, #0
 80220e2:	6078      	str	r0, [r7, #4]
 80220e4:	6039      	str	r1, [r7, #0]
			assert(ptr);
 80220e6:	683b      	ldr	r3, [r7, #0]
 80220e8:	2b00      	cmp	r3, #0
 80220ea:	d106      	bne.n	80220fa <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x1e>
 80220ec:	4b19      	ldr	r3, [pc, #100]	; (8022154 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x78>)
 80220ee:	4a1a      	ldr	r2, [pc, #104]	; (8022158 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 80220f0:	f240 2172 	movw	r1, #626	; 0x272
 80220f4:	4819      	ldr	r0, [pc, #100]	; (802215c <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 80220f6:	f019 fe53 	bl	803bda0 <__assert_func>
			assert(*ptr);
 80220fa:	683b      	ldr	r3, [r7, #0]
 80220fc:	681b      	ldr	r3, [r3, #0]
 80220fe:	2b00      	cmp	r3, #0
 8022100:	d106      	bne.n	8022110 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x34>
 8022102:	4b17      	ldr	r3, [pc, #92]	; (8022160 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x84>)
 8022104:	4a14      	ldr	r2, [pc, #80]	; (8022158 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8022106:	f240 2173 	movw	r1, #627	; 0x273
 802210a:	4814      	ldr	r0, [pc, #80]	; (802215c <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 802210c:	f019 fe48 	bl	803bda0 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = First;
 8022110:	683b      	ldr	r3, [r7, #0]
 8022112:	681b      	ldr	r3, [r3, #0]
 8022114:	687a      	ldr	r2, [r7, #4]
 8022116:	8812      	ldrh	r2, [r2, #0]
 8022118:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 802211a:	683b      	ldr	r3, [r7, #0]
 802211c:	681b      	ldr	r3, [r3, #0]
 802211e:	1c9a      	adds	r2, r3, #2
 8022120:	683b      	ldr	r3, [r7, #0]
 8022122:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 8022124:	683b      	ldr	r3, [r7, #0]
 8022126:	681b      	ldr	r3, [r3, #0]
 8022128:	687a      	ldr	r2, [r7, #4]
 802212a:	8852      	ldrh	r2, [r2, #2]
 802212c:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 802212e:	683b      	ldr	r3, [r7, #0]
 8022130:	681b      	ldr	r3, [r3, #0]
 8022132:	1c9a      	adds	r2, r3, #2
 8022134:	683b      	ldr	r3, [r7, #0]
 8022136:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 8022138:	683b      	ldr	r3, [r7, #0]
 802213a:	681b      	ldr	r3, [r3, #0]
 802213c:	687a      	ldr	r2, [r7, #4]
 802213e:	8892      	ldrh	r2, [r2, #4]
 8022140:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8022142:	683b      	ldr	r3, [r7, #0]
 8022144:	681b      	ldr	r3, [r3, #0]
 8022146:	1c9a      	adds	r2, r3, #2
 8022148:	683b      	ldr	r3, [r7, #0]
 802214a:	601a      	str	r2, [r3, #0]
		}
 802214c:	bf00      	nop
 802214e:	3708      	adds	r7, #8
 8022150:	46bd      	mov	sp, r7
 8022152:	bd80      	pop	{r7, pc}
 8022154:	0803cfc0 	.word	0x0803cfc0
 8022158:	0803d4d0 	.word	0x0803d4d0
 802215c:	0803cff4 	.word	0x0803cff4
 8022160:	0803d010 	.word	0x0803d010

08022164 <_ZN17IMUFrameContainer5ResetEv>:
	};

public:
	void Reset() {
 8022164:	b580      	push	{r7, lr}
 8022166:	b084      	sub	sp, #16
 8022168:	af00      	add	r7, sp, #0
 802216a:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 802216c:	6878      	ldr	r0, [r7, #4]
 802216e:	2300      	movs	r3, #0
 8022170:	60bb      	str	r3, [r7, #8]
 8022172:	2300      	movs	r3, #0
 8022174:	60fb      	str	r3, [r7, #12]
 8022176:	f107 0308 	add.w	r3, r7, #8
 802217a:	e893 0006 	ldmia.w	r3, {r1, r2}
 802217e:	f001 fc7b 	bl	8023a78 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>
		FirstSeq = 0;
 8022182:	687b      	ldr	r3, [r7, #4]
 8022184:	2200      	movs	r2, #0
 8022186:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8022188:	bf00      	nop
 802218a:	3710      	adds	r7, #16
 802218c:	46bd      	mov	sp, r7
 802218e:	bd80      	pop	{r7, pc}

08022190 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 8022190:	b580      	push	{r7, lr}
 8022192:	b082      	sub	sp, #8
 8022194:	af00      	add	r7, sp, #0
 8022196:	6078      	str	r0, [r7, #4]
 8022198:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	6839      	ldr	r1, [r7, #0]
 802219e:	4618      	mov	r0, r3
 80221a0:	f001 fc85 	bl	8023aae <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>
		if (FrameQueue.size() > MaxFrames)
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	4618      	mov	r0, r3
 80221a8:	f001 fca3 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80221ac:	4602      	mov	r2, r0
 80221ae:	687b      	ldr	r3, [r7, #4]
 80221b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80221b2:	429a      	cmp	r2, r3
 80221b4:	bf8c      	ite	hi
 80221b6:	2301      	movhi	r3, #1
 80221b8:	2300      	movls	r3, #0
 80221ba:	b2db      	uxtb	r3, r3
 80221bc:	2b00      	cmp	r3, #0
 80221be:	d002      	beq.n	80221c6 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE+0x36>
			Remove();
 80221c0:	6878      	ldr	r0, [r7, #4]
 80221c2:	f000 f804 	bl	80221ce <_ZN17IMUFrameContainer6RemoveEv>
	}
 80221c6:	bf00      	nop
 80221c8:	3708      	adds	r7, #8
 80221ca:	46bd      	mov	sp, r7
 80221cc:	bd80      	pop	{r7, pc}

080221ce <_ZN17IMUFrameContainer6RemoveEv>:

	void Remove() {
 80221ce:	b580      	push	{r7, lr}
 80221d0:	b082      	sub	sp, #8
 80221d2:	af00      	add	r7, sp, #0
 80221d4:	6078      	str	r0, [r7, #4]
		FrameQueue.pop_back();
 80221d6:	687b      	ldr	r3, [r7, #4]
 80221d8:	4618      	mov	r0, r3
 80221da:	f001 fc9c 	bl	8023b16 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
		FirstSeq++;
 80221de:	687b      	ldr	r3, [r7, #4]
 80221e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221e2:	1c5a      	adds	r2, r3, #1
 80221e4:	687b      	ldr	r3, [r7, #4]
 80221e6:	629a      	str	r2, [r3, #40]	; 0x28
	}
 80221e8:	bf00      	nop
 80221ea:	3708      	adds	r7, #8
 80221ec:	46bd      	mov	sp, r7
 80221ee:	bd80      	pop	{r7, pc}

080221f0 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 80221f0:	b5b0      	push	{r4, r5, r7, lr}
 80221f2:	b08a      	sub	sp, #40	; 0x28
 80221f4:	af00      	add	r7, sp, #0
 80221f6:	60f8      	str	r0, [r7, #12]
 80221f8:	60b9      	str	r1, [r7, #8]
 80221fa:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 80221fc:	68fb      	ldr	r3, [r7, #12]
 80221fe:	4618      	mov	r0, r3
 8022200:	f001 fcac 	bl	8023b5c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8022204:	4603      	mov	r3, r0
 8022206:	2b00      	cmp	r3, #0
 8022208:	d001      	beq.n	802220e <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 802220a:	2300      	movs	r3, #0
 802220c:	e038      	b.n	8022280 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 802220e:	68fb      	ldr	r3, [r7, #12]
 8022210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022212:	68ba      	ldr	r2, [r7, #8]
 8022214:	429a      	cmp	r2, r3
 8022216:	d30b      	bcc.n	8022230 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 8022218:	68fb      	ldr	r3, [r7, #12]
 802221a:	4618      	mov	r0, r3
 802221c:	f001 fc69 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022220:	4602      	mov	r2, r0
 8022222:	68fb      	ldr	r3, [r7, #12]
 8022224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022226:	4413      	add	r3, r2
 8022228:	3b01      	subs	r3, #1
 802222a:	68ba      	ldr	r2, [r7, #8]
 802222c:	429a      	cmp	r2, r3
 802222e:	d901      	bls.n	8022234 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 8022230:	2301      	movs	r3, #1
 8022232:	e000      	b.n	8022236 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 8022234:	2300      	movs	r3, #0
 8022236:	2b00      	cmp	r3, #0
 8022238:	d001      	beq.n	802223e <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 802223a:	2300      	movs	r3, #0
 802223c:	e020      	b.n	8022280 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 802223e:	68fc      	ldr	r4, [r7, #12]
 8022240:	68fb      	ldr	r3, [r7, #12]
 8022242:	4618      	mov	r0, r3
 8022244:	f001 fc55 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022248:	4601      	mov	r1, r0
 802224a:	68fb      	ldr	r3, [r7, #12]
 802224c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802224e:	68bb      	ldr	r3, [r7, #8]
 8022250:	1ad3      	subs	r3, r2, r3
 8022252:	440b      	add	r3, r1
 8022254:	3b01      	subs	r3, #1
 8022256:	4619      	mov	r1, r3
 8022258:	4620      	mov	r0, r4
 802225a:	f001 fc91 	bl	8023b80 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 802225e:	4603      	mov	r3, r0
 8022260:	f107 0414 	add.w	r4, r7, #20
 8022264:	461d      	mov	r5, r3
 8022266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802226a:	682b      	ldr	r3, [r5, #0]
 802226c:	6023      	str	r3, [r4, #0]
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	461d      	mov	r5, r3
 8022272:	f107 0414 	add.w	r4, r7, #20
 8022276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8022278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802227a:	6823      	ldr	r3, [r4, #0]
 802227c:	602b      	str	r3, [r5, #0]
		return true;
 802227e:	2301      	movs	r3, #1
	}
 8022280:	4618      	mov	r0, r3
 8022282:	3728      	adds	r7, #40	; 0x28
 8022284:	46bd      	mov	sp, r7
 8022286:	bdb0      	pop	{r4, r5, r7, pc}

08022288 <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 8022288:	b580      	push	{r7, lr}
 802228a:	b082      	sub	sp, #8
 802228c:	af00      	add	r7, sp, #0
 802228e:	6078      	str	r0, [r7, #4]
 8022290:	6039      	str	r1, [r7, #0]
		return {FirstSeq, FrameQueue.size(), MaxFrames};
 8022292:	683b      	ldr	r3, [r7, #0]
 8022294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022296:	b29a      	uxth	r2, r3
 8022298:	687b      	ldr	r3, [r7, #4]
 802229a:	801a      	strh	r2, [r3, #0]
 802229c:	683b      	ldr	r3, [r7, #0]
 802229e:	4618      	mov	r0, r3
 80222a0:	f001 fc27 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80222a4:	4603      	mov	r3, r0
 80222a6:	b29a      	uxth	r2, r3
 80222a8:	687b      	ldr	r3, [r7, #4]
 80222aa:	805a      	strh	r2, [r3, #2]
 80222ac:	683b      	ldr	r3, [r7, #0]
 80222ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80222b0:	b29a      	uxth	r2, r3
 80222b2:	687b      	ldr	r3, [r7, #4]
 80222b4:	809a      	strh	r2, [r3, #4]
	}
 80222b6:	6878      	ldr	r0, [r7, #4]
 80222b8:	3708      	adds	r7, #8
 80222ba:	46bd      	mov	sp, r7
 80222bc:	bd80      	pop	{r7, pc}

080222be <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>:

	std::queue<size_t> StrobeQueue;
	size_t CurrentSeq = 0;

public:
	void ProcessStrobe(const BHYWrapper &IMU) {
 80222be:	b580      	push	{r7, lr}
 80222c0:	b086      	sub	sp, #24
 80222c2:	af00      	add	r7, sp, #0
 80222c4:	6078      	str	r0, [r7, #4]
 80222c6:	6039      	str	r1, [r7, #0]
		uint32_t currentTime = HAL_GetTick();
 80222c8:	f008 fcf0 	bl	802acac <HAL_GetTick>
 80222cc:	6178      	str	r0, [r7, #20]

		switch (State) {
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	689b      	ldr	r3, [r3, #8]
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	d04e      	beq.n	8022374 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xb6>
 80222d6:	2b01      	cmp	r3, #1
 80222d8:	d154      	bne.n	8022384 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		case PulseState::Down: {
			State = PulseState::Up;
 80222da:	687b      	ldr	r3, [r7, #4]
 80222dc:	2200      	movs	r2, #0
 80222de:	609a      	str	r2, [r3, #8]

			uint32_t startTime = RiseTime;
 80222e0:	687b      	ldr	r3, [r7, #4]
 80222e2:	685b      	ldr	r3, [r3, #4]
 80222e4:	613b      	str	r3, [r7, #16]
			RiseTime = currentTime;
 80222e6:	687b      	ldr	r3, [r7, #4]
 80222e8:	697a      	ldr	r2, [r7, #20]
 80222ea:	605a      	str	r2, [r3, #4]

			if (!FallTime || !RiseTime)
 80222ec:	687b      	ldr	r3, [r7, #4]
 80222ee:	681b      	ldr	r3, [r3, #0]
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	d046      	beq.n	8022382 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	685b      	ldr	r3, [r3, #4]
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	d042      	beq.n	8022382 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
				return;

			uint32_t duration = currentTime - startTime;
 80222fc:	697a      	ldr	r2, [r7, #20]
 80222fe:	693b      	ldr	r3, [r7, #16]
 8022300:	1ad3      	subs	r3, r2, r3
 8022302:	60fb      	str	r3, [r7, #12]

			StrobeDuration += duration;
 8022304:	687b      	ldr	r3, [r7, #4]
 8022306:	ed93 7a05 	vldr	s14, [r3, #20]
 802230a:	68fb      	ldr	r3, [r7, #12]
 802230c:	ee07 3a90 	vmov	s15, r3
 8022310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022318:	687b      	ldr	r3, [r7, #4]
 802231a:	edc3 7a05 	vstr	s15, [r3, #20]
			StrobeDuration /= 2;
 802231e:	687b      	ldr	r3, [r7, #4]
 8022320:	ed93 7a05 	vldr	s14, [r3, #20]
 8022324:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8022328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802232c:	687b      	ldr	r3, [r7, #4]
 802232e:	edc3 7a05 	vstr	s15, [r3, #20]

			if (std::abs(long(duration - TargetDuration))
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	691b      	ldr	r3, [r3, #16]
 8022336:	68fa      	ldr	r2, [r7, #12]
 8022338:	1ad3      	subs	r3, r2, r3
 802233a:	4618      	mov	r0, r3
 802233c:	f7fe fdaa 	bl	8020e94 <_ZSt3absl>
 8022340:	4602      	mov	r2, r0
					< long(DurationThreshold))
 8022342:	687b      	ldr	r3, [r7, #4]
 8022344:	68db      	ldr	r3, [r3, #12]
 8022346:	429a      	cmp	r2, r3
 8022348:	bfb4      	ite	lt
 802234a:	2301      	movlt	r3, #1
 802234c:	2300      	movge	r3, #0
 802234e:	b2db      	uxtb	r3, r3
			if (std::abs(long(duration - TargetDuration))
 8022350:	2b00      	cmp	r3, #0
 8022352:	d008      	beq.n	8022366 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xa8>
				StrobeQueue.push(CurrentSeq);
 8022354:	687b      	ldr	r3, [r7, #4]
 8022356:	f103 0218 	add.w	r2, r3, #24
 802235a:	687b      	ldr	r3, [r7, #4]
 802235c:	3340      	adds	r3, #64	; 0x40
 802235e:	4619      	mov	r1, r3
 8022360:	4610      	mov	r0, r2
 8022362:	f001 fc1e 	bl	8023ba2 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>

			CurrentSeq = IMU.GetSeq();
 8022366:	6838      	ldr	r0, [r7, #0]
 8022368:	f7fe fc54 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 802236c:	4602      	mov	r2, r0
 802236e:	687b      	ldr	r3, [r7, #4]
 8022370:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8022372:	e007      	b.n	8022384 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		}
		case PulseState::Up:
			State = PulseState::Down;
 8022374:	687b      	ldr	r3, [r7, #4]
 8022376:	2201      	movs	r2, #1
 8022378:	609a      	str	r2, [r3, #8]
			FallTime = currentTime;
 802237a:	687b      	ldr	r3, [r7, #4]
 802237c:	697a      	ldr	r2, [r7, #20]
 802237e:	601a      	str	r2, [r3, #0]
			break;
 8022380:	e000      	b.n	8022384 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
				return;
 8022382:	bf00      	nop
		}
	}
 8022384:	3718      	adds	r7, #24
 8022386:	46bd      	mov	sp, r7
 8022388:	bd80      	pop	{r7, pc}

0802238a <_ZN20StrobeDurationFilter9ConfigureEhh>:

	void Configure(uint8_t targetDuration, uint8_t durationThreshold) {
 802238a:	b480      	push	{r7}
 802238c:	b083      	sub	sp, #12
 802238e:	af00      	add	r7, sp, #0
 8022390:	6078      	str	r0, [r7, #4]
 8022392:	460b      	mov	r3, r1
 8022394:	70fb      	strb	r3, [r7, #3]
 8022396:	4613      	mov	r3, r2
 8022398:	70bb      	strb	r3, [r7, #2]
		TargetDuration = targetDuration;
 802239a:	78fa      	ldrb	r2, [r7, #3]
 802239c:	687b      	ldr	r3, [r7, #4]
 802239e:	611a      	str	r2, [r3, #16]
		DurationThreshold = durationThreshold;
 80223a0:	78ba      	ldrb	r2, [r7, #2]
 80223a2:	687b      	ldr	r3, [r7, #4]
 80223a4:	60da      	str	r2, [r3, #12]
	}
 80223a6:	bf00      	nop
 80223a8:	370c      	adds	r7, #12
 80223aa:	46bd      	mov	sp, r7
 80223ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223b0:	4770      	bx	lr

080223b2 <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>:

	float GetStrobeDuration() const {
 80223b2:	b480      	push	{r7}
 80223b4:	b083      	sub	sp, #12
 80223b6:	af00      	add	r7, sp, #0
 80223b8:	6078      	str	r0, [r7, #4]
		return StrobeDuration;
 80223ba:	687b      	ldr	r3, [r7, #4]
 80223bc:	695b      	ldr	r3, [r3, #20]
 80223be:	ee07 3a90 	vmov	s15, r3
	}
 80223c2:	eeb0 0a67 	vmov.f32	s0, s15
 80223c6:	370c      	adds	r7, #12
 80223c8:	46bd      	mov	sp, r7
 80223ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223ce:	4770      	bx	lr

080223d0 <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>:

	void ResetStrobeDuration() {
 80223d0:	b480      	push	{r7}
 80223d2:	b083      	sub	sp, #12
 80223d4:	af00      	add	r7, sp, #0
 80223d6:	6078      	str	r0, [r7, #4]
		StrobeDuration = 1;
 80223d8:	687b      	ldr	r3, [r7, #4]
 80223da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80223de:	615a      	str	r2, [r3, #20]
	}
 80223e0:	bf00      	nop
 80223e2:	370c      	adds	r7, #12
 80223e4:	46bd      	mov	sp, r7
 80223e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223ea:	4770      	bx	lr

080223ec <_ZNK20StrobeDurationFilter9GetStrobeEv>:

	size_t GetStrobe() const {
 80223ec:	b580      	push	{r7, lr}
 80223ee:	b082      	sub	sp, #8
 80223f0:	af00      	add	r7, sp, #0
 80223f2:	6078      	str	r0, [r7, #4]
		assert(HasStrobe());
 80223f4:	6878      	ldr	r0, [r7, #4]
 80223f6:	f000 f81b 	bl	8022430 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 80223fa:	4603      	mov	r3, r0
 80223fc:	2b00      	cmp	r3, #0
 80223fe:	d106      	bne.n	802240e <_ZNK20StrobeDurationFilter9GetStrobeEv+0x22>
 8022400:	4b08      	ldr	r3, [pc, #32]	; (8022424 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x38>)
 8022402:	4a09      	ldr	r2, [pc, #36]	; (8022428 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x3c>)
 8022404:	f240 21eb 	movw	r1, #747	; 0x2eb
 8022408:	4808      	ldr	r0, [pc, #32]	; (802242c <_ZNK20StrobeDurationFilter9GetStrobeEv+0x40>)
 802240a:	f019 fcc9 	bl	803bda0 <__assert_func>
		return StrobeQueue.front();
 802240e:	687b      	ldr	r3, [r7, #4]
 8022410:	3318      	adds	r3, #24
 8022412:	4618      	mov	r0, r3
 8022414:	f001 fbd3 	bl	8023bbe <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>
 8022418:	4603      	mov	r3, r0
 802241a:	681b      	ldr	r3, [r3, #0]
	}
 802241c:	4618      	mov	r0, r3
 802241e:	3708      	adds	r7, #8
 8022420:	46bd      	mov	sp, r7
 8022422:	bd80      	pop	{r7, pc}
 8022424:	0803d508 	.word	0x0803d508
 8022428:	0803d514 	.word	0x0803d514
 802242c:	0803cff4 	.word	0x0803cff4

08022430 <_ZNK20StrobeDurationFilter9HasStrobeEv>:

	bool HasStrobe() const {
 8022430:	b580      	push	{r7, lr}
 8022432:	b082      	sub	sp, #8
 8022434:	af00      	add	r7, sp, #0
 8022436:	6078      	str	r0, [r7, #4]
		return !StrobeQueue.empty();
 8022438:	687b      	ldr	r3, [r7, #4]
 802243a:	3318      	adds	r3, #24
 802243c:	4618      	mov	r0, r3
 802243e:	f001 fbcb 	bl	8023bd8 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>
 8022442:	4603      	mov	r3, r0
 8022444:	f083 0301 	eor.w	r3, r3, #1
 8022448:	b2db      	uxtb	r3, r3
	}
 802244a:	4618      	mov	r0, r3
 802244c:	3708      	adds	r7, #8
 802244e:	46bd      	mov	sp, r7
 8022450:	bd80      	pop	{r7, pc}

08022452 <_ZN20StrobeDurationFilter9PopStrobeEv>:

	void PopStrobe() {
 8022452:	b580      	push	{r7, lr}
 8022454:	b082      	sub	sp, #8
 8022456:	af00      	add	r7, sp, #0
 8022458:	6078      	str	r0, [r7, #4]
		StrobeQueue.pop();
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	3318      	adds	r3, #24
 802245e:	4618      	mov	r0, r3
 8022460:	f001 fbc7 	bl	8023bf2 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>
	}
 8022464:	bf00      	nop
 8022466:	3708      	adds	r7, #8
 8022468:	46bd      	mov	sp, r7
 802246a:	bd80      	pop	{r7, pc}

0802246c <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type Reset = 3;
		static constexpr Type SetOffset = 4;
		static constexpr Type StrobeWidth = 5;
		static constexpr Type ConfigureFilter = 6;

		static uint8_t Serialize(Type mode) {
 802246c:	b480      	push	{r7}
 802246e:	b083      	sub	sp, #12
 8022470:	af00      	add	r7, sp, #0
 8022472:	4603      	mov	r3, r0
 8022474:	71fb      	strb	r3, [r7, #7]
			return mode;
 8022476:	79fb      	ldrb	r3, [r7, #7]
		}
 8022478:	4618      	mov	r0, r3
 802247a:	370c      	adds	r7, #12
 802247c:	46bd      	mov	sp, r7
 802247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022482:	4770      	bx	lr

08022484 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 8022484:	b480      	push	{r7}
 8022486:	b083      	sub	sp, #12
 8022488:	af00      	add	r7, sp, #0
 802248a:	4603      	mov	r3, r0
 802248c:	71fb      	strb	r3, [r7, #7]
			return meta;
 802248e:	79fb      	ldrb	r3, [r7, #7]
		}
 8022490:	4618      	mov	r0, r3
 8022492:	370c      	adds	r7, #12
 8022494:	46bd      	mov	sp, r7
 8022496:	f85d 7b04 	ldr.w	r7, [sp], #4
 802249a:	4770      	bx	lr

0802249c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type BadRequest = 3;
		static constexpr Type BadOffset = 4;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 802249c:	b580      	push	{r7, lr}
 802249e:	b08c      	sub	sp, #48	; 0x30
 80224a0:	af00      	add	r7, sp, #0
 80224a2:	60f8      	str	r0, [r7, #12]
 80224a4:	60b9      	str	r1, [r7, #8]
 80224a6:	607a      	str	r2, [r7, #4]
 80224a8:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 80224aa:	687b      	ldr	r3, [r7, #4]
 80224ac:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80224b0:	4618      	mov	r0, r3
 80224b2:	f7ff ffe7 	bl	8022484 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80224b6:	4603      	mov	r3, r0
 80224b8:	2b00      	cmp	r3, #0
 80224ba:	d006      	beq.n	80224ca <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2e>
 80224bc:	4b28      	ldr	r3, [pc, #160]	; (8022560 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc4>)
 80224be:	4a29      	ldr	r2, [pc, #164]	; (8022564 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc8>)
 80224c0:	f44f 7146 	mov.w	r1, #792	; 0x318
 80224c4:	4828      	ldr	r0, [pc, #160]	; (8022568 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xcc>)
 80224c6:	f019 fc6b 	bl	803bda0 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80224ca:	68fb      	ldr	r3, [r7, #12]
 80224cc:	2201      	movs	r2, #1
 80224ce:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 80224d2:	2000      	movs	r0, #0
 80224d4:	f7ff ffca 	bl	802246c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80224d8:	4603      	mov	r3, r0
 80224da:	461a      	mov	r2, r3
 80224dc:	68fb      	ldr	r3, [r7, #12]
 80224de:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = BHYWrapper::BHYFrame::Size;
 80224e2:	68fb      	ldr	r3, [r7, #12]
 80224e4:	2211      	movs	r2, #17
 80224e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 2) {
 80224ea:	687b      	ldr	r3, [r7, #4]
 80224ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80224f0:	2b02      	cmp	r3, #2
 80224f2:	d004      	beq.n	80224fe <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80224f4:	68fb      	ldr	r3, [r7, #12]
 80224f6:	2203      	movs	r2, #3
 80224f8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80224fc:	e02c      	b.n	8022558 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xbc>
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 80224fe:	687b      	ldr	r3, [r7, #4]
 8022500:	4618      	mov	r0, r3
 8022502:	f001 fa0e 	bl	8023922 <_ZNKSt5arrayIhLj256EE4dataEv>
 8022506:	4603      	mov	r3, r0
 8022508:	881b      	ldrh	r3, [r3, #0]
 802250a:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 802250c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802250e:	f107 0218 	add.w	r2, r7, #24
 8022512:	4619      	mov	r1, r3
 8022514:	6838      	ldr	r0, [r7, #0]
 8022516:	f7ff fe6b 	bl	80221f0 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 802251a:	4603      	mov	r3, r0
 802251c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 8022520:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8022524:	f083 0301 	eor.w	r3, r3, #1
 8022528:	b2db      	uxtb	r3, r3
 802252a:	2b00      	cmp	r3, #0
 802252c:	d004      	beq.n	8022538 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x9c>
			responce.Error = ErrorCodes::FrameUnavailable;
 802252e:	68fb      	ldr	r3, [r7, #12]
 8022530:	2201      	movs	r2, #1
 8022532:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022536:	e00f      	b.n	8022558 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xbc>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8022538:	68f8      	ldr	r0, [r7, #12]
 802253a:	f001 f8cf 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 802253e:	4601      	mov	r1, r0
 8022540:	f107 0217 	add.w	r2, r7, #23
 8022544:	f107 0318 	add.w	r3, r7, #24
 8022548:	4618      	mov	r0, r3
 802254a:	f7fe fb05 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 802254e:	68fb      	ldr	r3, [r7, #12]
 8022550:	2200      	movs	r2, #0
 8022552:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022556:	bf00      	nop
	}
 8022558:	68f8      	ldr	r0, [r7, #12]
 802255a:	3730      	adds	r7, #48	; 0x30
 802255c:	46bd      	mov	sp, r7
 802255e:	bd80      	pop	{r7, pc}
 8022560:	0803d544 	.word	0x0803d544
 8022564:	0803d58c 	.word	0x0803d58c
 8022568:	0803cff4 	.word	0x0803cff4

0802256c <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 802256c:	b580      	push	{r7, lr}
 802256e:	b088      	sub	sp, #32
 8022570:	af00      	add	r7, sp, #0
 8022572:	60f8      	str	r0, [r7, #12]
 8022574:	60b9      	str	r1, [r7, #8]
 8022576:	607a      	str	r2, [r7, #4]
 8022578:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022580:	4618      	mov	r0, r3
 8022582:	f7ff ff7f 	bl	8022484 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022586:	4603      	mov	r3, r0
 8022588:	2b01      	cmp	r3, #1
 802258a:	d006      	beq.n	802259a <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2e>
 802258c:	4b1e      	ldr	r3, [pc, #120]	; (8022608 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x9c>)
 802258e:	4a1f      	ldr	r2, [pc, #124]	; (802260c <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa0>)
 8022590:	f240 313a 	movw	r1, #826	; 0x33a
 8022594:	481e      	ldr	r0, [pc, #120]	; (8022610 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa4>)
 8022596:	f019 fc03 	bl	803bda0 <__assert_func>

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 802259a:	68fb      	ldr	r3, [r7, #12]
 802259c:	2201      	movs	r2, #1
 802259e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 80225a2:	2001      	movs	r0, #1
 80225a4:	f7ff ff62 	bl	802246c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80225a8:	4603      	mov	r3, r0
 80225aa:	461a      	mov	r2, r3
 80225ac:	68fb      	ldr	r3, [r7, #12]
 80225ae:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = IMUFrameContainer::Info::Size;
 80225b2:	68fb      	ldr	r3, [r7, #12]
 80225b4:	2206      	movs	r2, #6
 80225b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 80225ba:	687b      	ldr	r3, [r7, #4]
 80225bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80225c0:	2b01      	cmp	r3, #1
 80225c2:	d004      	beq.n	80225ce <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80225c4:	68fb      	ldr	r3, [r7, #12]
 80225c6:	2203      	movs	r2, #3
 80225c8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80225cc:	e017      	b.n	80225fe <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x92>
		}

		uint8_t *ptr = responce.Data.data();
 80225ce:	68f8      	ldr	r0, [r7, #12]
 80225d0:	f001 f884 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 80225d4:	4603      	mov	r3, r0
 80225d6:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 80225d8:	f107 0314 	add.w	r3, r7, #20
 80225dc:	6839      	ldr	r1, [r7, #0]
 80225de:	4618      	mov	r0, r3
 80225e0:	f7ff fe52 	bl	8022288 <_ZNK17IMUFrameContainer7GetInfoEv>

		info.SerializeTo(&ptr);
 80225e4:	f107 021c 	add.w	r2, r7, #28
 80225e8:	f107 0314 	add.w	r3, r7, #20
 80225ec:	4611      	mov	r1, r2
 80225ee:	4618      	mov	r0, r3
 80225f0:	f7ff fd74 	bl	80220dc <_ZN17IMUFrameContainer4Info11SerializeToEPPh>

		responce.Error = ErrorCodes::Success;
 80225f4:	68fb      	ldr	r3, [r7, #12]
 80225f6:	2200      	movs	r2, #0
 80225f8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80225fc:	bf00      	nop
	}
 80225fe:	68f8      	ldr	r0, [r7, #12]
 8022600:	3720      	adds	r7, #32
 8022602:	46bd      	mov	sp, r7
 8022604:	bd80      	pop	{r7, pc}
 8022606:	bf00      	nop
 8022608:	0803d5e0 	.word	0x0803d5e0
 802260c:	0803d620 	.word	0x0803d620
 8022610:	0803cff4 	.word	0x0803cff4

08022614 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 8022614:	b580      	push	{r7, lr}
 8022616:	b08a      	sub	sp, #40	; 0x28
 8022618:	af00      	add	r7, sp, #0
 802261a:	60f8      	str	r0, [r7, #12]
 802261c:	60b9      	str	r1, [r7, #8]
 802261e:	607a      	str	r2, [r7, #4]
 8022620:	603b      	str	r3, [r7, #0]
		assert(
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022628:	4618      	mov	r0, r3
 802262a:	f7ff ff2b 	bl	8022484 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802262e:	4603      	mov	r3, r0
 8022630:	2b02      	cmp	r3, #2
 8022632:	d006      	beq.n	8022642 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2e>
 8022634:	4b1d      	ldr	r3, [pc, #116]	; (80226ac <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x98>)
 8022636:	4a1e      	ldr	r2, [pc, #120]	; (80226b0 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x9c>)
 8022638:	f240 3151 	movw	r1, #849	; 0x351
 802263c:	481d      	ldr	r0, [pc, #116]	; (80226b4 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa0>)
 802263e:	f019 fbaf 	bl	803bda0 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022642:	68fb      	ldr	r3, [r7, #12]
 8022644:	2201      	movs	r2, #1
 8022646:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 802264a:	2002      	movs	r0, #2
 802264c:	f7ff ff0e 	bl	802246c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022650:	4603      	mov	r3, r0
 8022652:	461a      	mov	r2, r3
 8022654:	68fb      	ldr	r3, [r7, #12]
 8022656:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = BHYWrapper::BHYFrame::Size;
 802265a:	68fb      	ldr	r3, [r7, #12]
 802265c:	2211      	movs	r2, #17
 802265e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022662:	687b      	ldr	r3, [r7, #4]
 8022664:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022668:	2b01      	cmp	r3, #1
 802266a:	d004      	beq.n	8022676 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x62>
			responce.Error = ErrorCodes::BadRequest;
 802266c:	68fb      	ldr	r3, [r7, #12]
 802266e:	2203      	movs	r2, #3
 8022670:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022674:	e015      	b.n	80226a2 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x8e>
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 8022676:	f107 0314 	add.w	r3, r7, #20
 802267a:	6839      	ldr	r1, [r7, #0]
 802267c:	4618      	mov	r0, r3
 802267e:	f7fe f9c1 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8022682:	68f8      	ldr	r0, [r7, #12]
 8022684:	f001 f82a 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 8022688:	4601      	mov	r1, r0
 802268a:	f107 0213 	add.w	r2, r7, #19
 802268e:	f107 0314 	add.w	r3, r7, #20
 8022692:	4618      	mov	r0, r3
 8022694:	f7fe fa60 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>

		responce.Error = ErrorCodes::Success;
 8022698:	68fb      	ldr	r3, [r7, #12]
 802269a:	2200      	movs	r2, #0
 802269c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80226a0:	bf00      	nop
	}
 80226a2:	68f8      	ldr	r0, [r7, #12]
 80226a4:	3728      	adds	r7, #40	; 0x28
 80226a6:	46bd      	mov	sp, r7
 80226a8:	bd80      	pop	{r7, pc}
 80226aa:	bf00      	nop
 80226ac:	0803d670 	.word	0x0803d670
 80226b0:	0803d6b8 	.word	0x0803d6b8
 80226b4:	0803cff4 	.word	0x0803cff4

080226b8 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>:

	Responce DoReset(const Request &request, IMUFrameContainer &container,
 80226b8:	b580      	push	{r7, lr}
 80226ba:	b084      	sub	sp, #16
 80226bc:	af00      	add	r7, sp, #0
 80226be:	60f8      	str	r0, [r7, #12]
 80226c0:	60b9      	str	r1, [r7, #8]
 80226c2:	607a      	str	r2, [r7, #4]
 80226c4:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 80226c6:	687b      	ldr	r3, [r7, #4]
 80226c8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80226cc:	4618      	mov	r0, r3
 80226ce:	f7ff fed9 	bl	8022484 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80226d2:	4603      	mov	r3, r0
 80226d4:	2b03      	cmp	r3, #3
 80226d6:	d006      	beq.n	80226e6 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x2e>
 80226d8:	4b17      	ldr	r3, [pc, #92]	; (8022738 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x80>)
 80226da:	4a18      	ldr	r2, [pc, #96]	; (802273c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x84>)
 80226dc:	f240 316b 	movw	r1, #875	; 0x36b
 80226e0:	4817      	ldr	r0, [pc, #92]	; (8022740 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x88>)
 80226e2:	f019 fb5d 	bl	803bda0 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::Reset);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80226e6:	68fb      	ldr	r3, [r7, #12]
 80226e8:	2201      	movs	r2, #1
 80226ea:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 80226ee:	2003      	movs	r0, #3
 80226f0:	f7ff febc 	bl	802246c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80226f4:	4603      	mov	r3, r0
 80226f6:	461a      	mov	r2, r3
 80226f8:	68fb      	ldr	r3, [r7, #12]
 80226fa:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 80226fe:	68fb      	ldr	r3, [r7, #12]
 8022700:	2201      	movs	r2, #1
 8022702:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022706:	687b      	ldr	r3, [r7, #4]
 8022708:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802270c:	2b01      	cmp	r3, #1
 802270e:	d004      	beq.n	802271a <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022710:	68fb      	ldr	r3, [r7, #12]
 8022712:	2203      	movs	r2, #3
 8022714:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022718:	e00a      	b.n	8022730 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x78>
		}

		container.Reset();
 802271a:	6838      	ldr	r0, [r7, #0]
 802271c:	f7ff fd22 	bl	8022164 <_ZN17IMUFrameContainer5ResetEv>
		sFilter.ResetStrobeDuration();
 8022720:	69b8      	ldr	r0, [r7, #24]
 8022722:	f7ff fe55 	bl	80223d0 <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>

		responce.Error = ErrorCodes::Success;
 8022726:	68fb      	ldr	r3, [r7, #12]
 8022728:	2200      	movs	r2, #0
 802272a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 802272e:	bf00      	nop
	}
 8022730:	68f8      	ldr	r0, [r7, #12]
 8022732:	3710      	adds	r7, #16
 8022734:	46bd      	mov	sp, r7
 8022736:	bd80      	pop	{r7, pc}
 8022738:	0803d708 	.word	0x0803d708
 802273c:	0803d74c 	.word	0x0803d74c
 8022740:	0803cff4 	.word	0x0803cff4

08022744 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>:

	Responce SetOffset(const Request &request, size_t &strobeOffset) {
 8022744:	b580      	push	{r7, lr}
 8022746:	b086      	sub	sp, #24
 8022748:	af00      	add	r7, sp, #0
 802274a:	60f8      	str	r0, [r7, #12]
 802274c:	60b9      	str	r1, [r7, #8]
 802274e:	607a      	str	r2, [r7, #4]
 8022750:	603b      	str	r3, [r7, #0]
		assert(
 8022752:	687b      	ldr	r3, [r7, #4]
 8022754:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022758:	4618      	mov	r0, r3
 802275a:	f7ff fe93 	bl	8022484 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802275e:	4603      	mov	r3, r0
 8022760:	2b04      	cmp	r3, #4
 8022762:	d006      	beq.n	8022772 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x2e>
 8022764:	4b1a      	ldr	r3, [pc, #104]	; (80227d0 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x8c>)
 8022766:	4a1b      	ldr	r2, [pc, #108]	; (80227d4 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x90>)
 8022768:	f240 3182 	movw	r1, #898	; 0x382
 802276c:	481a      	ldr	r0, [pc, #104]	; (80227d8 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x94>)
 802276e:	f019 fb17 	bl	803bda0 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::SetOffset);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022772:	68fb      	ldr	r3, [r7, #12]
 8022774:	2201      	movs	r2, #1
 8022776:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::SetOffset);
 802277a:	2004      	movs	r0, #4
 802277c:	f7ff fe76 	bl	802246c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022780:	4603      	mov	r3, r0
 8022782:	461a      	mov	r2, r3
 8022784:	68fb      	ldr	r3, [r7, #12]
 8022786:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 802278a:	68fb      	ldr	r3, [r7, #12]
 802278c:	2201      	movs	r2, #1
 802278e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022792:	687b      	ldr	r3, [r7, #4]
 8022794:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022798:	2b01      	cmp	r3, #1
 802279a:	d004      	beq.n	80227a6 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x62>
			responce.Error = ErrorCodes::BadRequest;
 802279c:	68fb      	ldr	r3, [r7, #12]
 802279e:	2203      	movs	r2, #3
 80227a0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80227a4:	e00f      	b.n	80227c6 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x82>
		}

		uint8_t newOffset = request.Data[0];
 80227a6:	687b      	ldr	r3, [r7, #4]
 80227a8:	2100      	movs	r1, #0
 80227aa:	4618      	mov	r0, r3
 80227ac:	f7ff f958 	bl	8021a60 <_ZNKSt5arrayIhLj256EEixEj>
 80227b0:	4603      	mov	r3, r0
 80227b2:	781b      	ldrb	r3, [r3, #0]
 80227b4:	75fb      	strb	r3, [r7, #23]

		strobeOffset = newOffset;
 80227b6:	7dfa      	ldrb	r2, [r7, #23]
 80227b8:	683b      	ldr	r3, [r7, #0]
 80227ba:	601a      	str	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 80227bc:	68fb      	ldr	r3, [r7, #12]
 80227be:	2200      	movs	r2, #0
 80227c0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80227c4:	bf00      	nop
	}
 80227c6:	68f8      	ldr	r0, [r7, #12]
 80227c8:	3718      	adds	r7, #24
 80227ca:	46bd      	mov	sp, r7
 80227cc:	bd80      	pop	{r7, pc}
 80227ce:	bf00      	nop
 80227d0:	0803d7ac 	.word	0x0803d7ac
 80227d4:	0803d7f4 	.word	0x0803d7f4
 80227d8:	0803cff4 	.word	0x0803cff4

080227dc <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>:

	Responce ConfigureFilter(const Request &request,
 80227dc:	b580      	push	{r7, lr}
 80227de:	b086      	sub	sp, #24
 80227e0:	af00      	add	r7, sp, #0
 80227e2:	60f8      	str	r0, [r7, #12]
 80227e4:	60b9      	str	r1, [r7, #8]
 80227e6:	607a      	str	r2, [r7, #4]
 80227e8:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 80227ea:	687b      	ldr	r3, [r7, #4]
 80227ec:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80227f0:	4618      	mov	r0, r3
 80227f2:	f7ff fe47 	bl	8022484 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80227f6:	4603      	mov	r3, r0
 80227f8:	2b06      	cmp	r3, #6
 80227fa:	d006      	beq.n	802280a <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x2e>
 80227fc:	4b1f      	ldr	r3, [pc, #124]	; (802287c <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa0>)
 80227fe:	4a20      	ldr	r2, [pc, #128]	; (8022880 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa4>)
 8022800:	f240 319a 	movw	r1, #922	; 0x39a
 8022804:	481f      	ldr	r0, [pc, #124]	; (8022884 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa8>)
 8022806:	f019 facb 	bl	803bda0 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::ConfigureFilter);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 802280a:	68fb      	ldr	r3, [r7, #12]
 802280c:	2201      	movs	r2, #1
 802280e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(
 8022812:	2006      	movs	r0, #6
 8022814:	f7ff fe2a 	bl	802246c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022818:	4603      	mov	r3, r0
 802281a:	461a      	mov	r2, r3
 802281c:	68fb      	ldr	r3, [r7, #12]
 802281e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
				RequestMode::ConfigureFilter);
		responce.ResponceSize = 1;
 8022822:	68fb      	ldr	r3, [r7, #12]
 8022824:	2201      	movs	r2, #1
 8022826:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 2) {
 802282a:	687b      	ldr	r3, [r7, #4]
 802282c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022830:	2b02      	cmp	r3, #2
 8022832:	d004      	beq.n	802283e <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022834:	68fb      	ldr	r3, [r7, #12]
 8022836:	2203      	movs	r2, #3
 8022838:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 802283c:	e01a      	b.n	8022874 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x98>
		}

		uint8_t targetDuration = request.Data[0];
 802283e:	687b      	ldr	r3, [r7, #4]
 8022840:	2100      	movs	r1, #0
 8022842:	4618      	mov	r0, r3
 8022844:	f7ff f90c 	bl	8021a60 <_ZNKSt5arrayIhLj256EEixEj>
 8022848:	4603      	mov	r3, r0
 802284a:	781b      	ldrb	r3, [r3, #0]
 802284c:	75fb      	strb	r3, [r7, #23]
		uint8_t durationThreshold = request.Data[1];
 802284e:	687b      	ldr	r3, [r7, #4]
 8022850:	2101      	movs	r1, #1
 8022852:	4618      	mov	r0, r3
 8022854:	f7ff f904 	bl	8021a60 <_ZNKSt5arrayIhLj256EEixEj>
 8022858:	4603      	mov	r3, r0
 802285a:	781b      	ldrb	r3, [r3, #0]
 802285c:	75bb      	strb	r3, [r7, #22]

		sFilter.Configure(targetDuration, durationThreshold);
 802285e:	7dba      	ldrb	r2, [r7, #22]
 8022860:	7dfb      	ldrb	r3, [r7, #23]
 8022862:	4619      	mov	r1, r3
 8022864:	6838      	ldr	r0, [r7, #0]
 8022866:	f7ff fd90 	bl	802238a <_ZN20StrobeDurationFilter9ConfigureEhh>
		responce.Error = ErrorCodes::Success;
 802286a:	68fb      	ldr	r3, [r7, #12]
 802286c:	2200      	movs	r2, #0
 802286e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022872:	bf00      	nop
	}
 8022874:	68f8      	ldr	r0, [r7, #12]
 8022876:	3718      	adds	r7, #24
 8022878:	46bd      	mov	sp, r7
 802287a:	bd80      	pop	{r7, pc}
 802287c:	0803d834 	.word	0x0803d834
 8022880:	0803d880 	.word	0x0803d880
 8022884:	0803cff4 	.word	0x0803cff4

08022888 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>:

	Responce StrobeWidth(const Request &request,
 8022888:	b580      	push	{r7, lr}
 802288a:	b088      	sub	sp, #32
 802288c:	af00      	add	r7, sp, #0
 802288e:	6178      	str	r0, [r7, #20]
 8022890:	6139      	str	r1, [r7, #16]
 8022892:	60fa      	str	r2, [r7, #12]
 8022894:	60bb      	str	r3, [r7, #8]
			const StrobeDurationFilter &sFilter) {
		assert(
 8022896:	68fb      	ldr	r3, [r7, #12]
 8022898:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 802289c:	4618      	mov	r0, r3
 802289e:	f7ff fdf1 	bl	8022484 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80228a2:	4603      	mov	r3, r0
 80228a4:	2b05      	cmp	r3, #5
 80228a6:	d006      	beq.n	80228b6 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x2e>
 80228a8:	4b28      	ldr	r3, [pc, #160]	; (802294c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xc4>)
 80228aa:	4a29      	ldr	r2, [pc, #164]	; (8022950 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xc8>)
 80228ac:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 80228b0:	4828      	ldr	r0, [pc, #160]	; (8022954 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xcc>)
 80228b2:	f019 fa75 	bl	803bda0 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::StrobeWidth);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80228b6:	697b      	ldr	r3, [r7, #20]
 80228b8:	2201      	movs	r2, #1
 80228ba:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::StrobeWidth);
 80228be:	2005      	movs	r0, #5
 80228c0:	f7ff fdd4 	bl	802246c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80228c4:	4603      	mov	r3, r0
 80228c6:	461a      	mov	r2, r3
 80228c8:	697b      	ldr	r3, [r7, #20]
 80228ca:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 80228ce:	697b      	ldr	r3, [r7, #20]
 80228d0:	2201      	movs	r2, #1
 80228d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 80228d6:	68fb      	ldr	r3, [r7, #12]
 80228d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80228dc:	2b01      	cmp	r3, #1
 80228de:	d004      	beq.n	80228ea <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80228e0:	697b      	ldr	r3, [r7, #20]
 80228e2:	2203      	movs	r2, #3
 80228e4:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80228e8:	e02c      	b.n	8022944 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xbc>
		}

		float strobeWidth = sFilter.GetStrobeDuration();
 80228ea:	68b8      	ldr	r0, [r7, #8]
 80228ec:	f7ff fd61 	bl	80223b2 <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>
 80228f0:	ed87 0a07 	vstr	s0, [r7, #28]

		if (strobeWidth < 0)
 80228f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80228f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80228fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022900:	d502      	bpl.n	8022908 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x80>
			strobeWidth = 0;
 8022902:	f04f 0300 	mov.w	r3, #0
 8022906:	61fb      	str	r3, [r7, #28]
		if (strobeWidth > 255)
 8022908:	edd7 7a07 	vldr	s15, [r7, #28]
 802290c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8022958 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd0>
 8022910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022918:	dd01      	ble.n	802291e <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x96>
			strobeWidth = 255;
 802291a:	4b10      	ldr	r3, [pc, #64]	; (802295c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd4>)
 802291c:	61fb      	str	r3, [r7, #28]

		responce.Data[0] = static_cast<uint8_t>(strobeWidth);
 802291e:	2100      	movs	r1, #0
 8022920:	6978      	ldr	r0, [r7, #20]
 8022922:	f000 ff1b 	bl	802375c <_ZNSt5arrayIhLj256EEixEj>
 8022926:	4603      	mov	r3, r0
 8022928:	edd7 7a07 	vldr	s15, [r7, #28]
 802292c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022930:	edc7 7a01 	vstr	s15, [r7, #4]
 8022934:	793a      	ldrb	r2, [r7, #4]
 8022936:	b2d2      	uxtb	r2, r2
 8022938:	701a      	strb	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 802293a:	697b      	ldr	r3, [r7, #20]
 802293c:	2200      	movs	r2, #0
 802293e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022942:	bf00      	nop
	}
 8022944:	6978      	ldr	r0, [r7, #20]
 8022946:	3720      	adds	r7, #32
 8022948:	46bd      	mov	sp, r7
 802294a:	bd80      	pop	{r7, pc}
 802294c:	0803d8d4 	.word	0x0803d8d4
 8022950:	0803d91c 	.word	0x0803d91c
 8022954:	0803cff4 	.word	0x0803cff4
 8022958:	437f0000 	.word	0x437f0000
 802295c:	437f0000 	.word	0x437f0000

08022960 <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>:

	Responce UnknownModeResponce(const Request &request) {
 8022960:	b580      	push	{r7, lr}
 8022962:	b084      	sub	sp, #16
 8022964:	af00      	add	r7, sp, #0
 8022966:	60f8      	str	r0, [r7, #12]
 8022968:	60b9      	str	r1, [r7, #8]
 802296a:	607a      	str	r2, [r7, #4]
		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 802296c:	68fb      	ldr	r3, [r7, #12]
 802296e:	2201      	movs	r2, #1
 8022970:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(
				RequestMode::Deserialize(request.MetaInfo));
 8022974:	687b      	ldr	r3, [r7, #4]
 8022976:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
		responce.MetaInfo = RequestMode::Serialize(
 802297a:	4618      	mov	r0, r3
 802297c:	f7ff fd82 	bl	8022484 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022980:	4603      	mov	r3, r0
 8022982:	4618      	mov	r0, r3
 8022984:	f7ff fd72 	bl	802246c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022988:	4603      	mov	r3, r0
 802298a:	461a      	mov	r2, r3
 802298c:	68fb      	ldr	r3, [r7, #12]
 802298e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = request.ResponceSize;
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8022998:	68fb      	ldr	r3, [r7, #12]
 802299a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.Error = ErrorCodes::UnknownMode;
 802299e:	68fb      	ldr	r3, [r7, #12]
 80229a0:	2202      	movs	r2, #2
 80229a2:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		return responce;
 80229a6:	bf00      	nop
	}
 80229a8:	68f8      	ldr	r0, [r7, #12]
 80229aa:	3710      	adds	r7, #16
 80229ac:	46bd      	mov	sp, r7
 80229ae:	bd80      	pop	{r7, pc}

080229b0 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>:

public:
	Responce Handle(const Request &request, IMUFrameContainer &container,
 80229b0:	b580      	push	{r7, lr}
 80229b2:	b086      	sub	sp, #24
 80229b4:	af02      	add	r7, sp, #8
 80229b6:	60f8      	str	r0, [r7, #12]
 80229b8:	60b9      	str	r1, [r7, #8]
 80229ba:	607a      	str	r2, [r7, #4]
 80229bc:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU, size_t &strobeOffset,
			StrobeDurationFilter &sFilter) {
		assert(request.PeripheryID == Periphery::Imu);
 80229be:	687b      	ldr	r3, [r7, #4]
 80229c0:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80229c4:	2b01      	cmp	r3, #1
 80229c6:	d006      	beq.n	80229d6 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x26>
 80229c8:	4b2f      	ldr	r3, [pc, #188]	; (8022a88 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xd8>)
 80229ca:	4a30      	ldr	r2, [pc, #192]	; (8022a8c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xdc>)
 80229cc:	f240 31dd 	movw	r1, #989	; 0x3dd
 80229d0:	482f      	ldr	r0, [pc, #188]	; (8022a90 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xe0>)
 80229d2:	f019 f9e5 	bl	803bda0 <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80229dc:	4618      	mov	r0, r3
 80229de:	f7ff fd51 	bl	8022484 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80229e2:	4603      	mov	r3, r0
 80229e4:	2b06      	cmp	r3, #6
 80229e6:	d844      	bhi.n	8022a72 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xc2>
 80229e8:	a201      	add	r2, pc, #4	; (adr r2, 80229f0 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x40>)
 80229ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80229ee:	bf00      	nop
 80229f0:	08022a0d 	.word	0x08022a0d
 80229f4:	08022a1b 	.word	0x08022a1b
 80229f8:	08022a29 	.word	0x08022a29
 80229fc:	08022a37 	.word	0x08022a37
 8022a00:	08022a49 	.word	0x08022a49
 8022a04:	08022a57 	.word	0x08022a57
 8022a08:	08022a65 	.word	0x08022a65
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 8022a0c:	68f8      	ldr	r0, [r7, #12]
 8022a0e:	683b      	ldr	r3, [r7, #0]
 8022a10:	687a      	ldr	r2, [r7, #4]
 8022a12:	68b9      	ldr	r1, [r7, #8]
 8022a14:	f7ff fd42 	bl	802249c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 8022a18:	e031      	b.n	8022a7e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::Info:
			return GetInfo(request, container);
 8022a1a:	68f8      	ldr	r0, [r7, #12]
 8022a1c:	683b      	ldr	r3, [r7, #0]
 8022a1e:	687a      	ldr	r2, [r7, #4]
 8022a20:	68b9      	ldr	r1, [r7, #8]
 8022a22:	f7ff fda3 	bl	802256c <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 8022a26:	e02a      	b.n	8022a7e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 8022a28:	68f8      	ldr	r0, [r7, #12]
 8022a2a:	69bb      	ldr	r3, [r7, #24]
 8022a2c:	687a      	ldr	r2, [r7, #4]
 8022a2e:	68b9      	ldr	r1, [r7, #8]
 8022a30:	f7ff fdf0 	bl	8022614 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 8022a34:	e023      	b.n	8022a7e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::Reset:
			return DoReset(request, container, sFilter);
 8022a36:	68f8      	ldr	r0, [r7, #12]
 8022a38:	6a3b      	ldr	r3, [r7, #32]
 8022a3a:	9300      	str	r3, [sp, #0]
 8022a3c:	683b      	ldr	r3, [r7, #0]
 8022a3e:	687a      	ldr	r2, [r7, #4]
 8022a40:	68b9      	ldr	r1, [r7, #8]
 8022a42:	f7ff fe39 	bl	80226b8 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>
 8022a46:	e01a      	b.n	8022a7e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::SetOffset:
			return SetOffset(request, strobeOffset);
 8022a48:	68f8      	ldr	r0, [r7, #12]
 8022a4a:	69fb      	ldr	r3, [r7, #28]
 8022a4c:	687a      	ldr	r2, [r7, #4]
 8022a4e:	68b9      	ldr	r1, [r7, #8]
 8022a50:	f7ff fe78 	bl	8022744 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>
 8022a54:	e013      	b.n	8022a7e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::StrobeWidth:
			return StrobeWidth(request, sFilter);
 8022a56:	68f8      	ldr	r0, [r7, #12]
 8022a58:	6a3b      	ldr	r3, [r7, #32]
 8022a5a:	687a      	ldr	r2, [r7, #4]
 8022a5c:	68b9      	ldr	r1, [r7, #8]
 8022a5e:	f7ff ff13 	bl	8022888 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>
 8022a62:	e00c      	b.n	8022a7e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::ConfigureFilter:
			return ConfigureFilter(request, sFilter);
 8022a64:	68f8      	ldr	r0, [r7, #12]
 8022a66:	6a3b      	ldr	r3, [r7, #32]
 8022a68:	687a      	ldr	r2, [r7, #4]
 8022a6a:	68b9      	ldr	r1, [r7, #8]
 8022a6c:	f7ff feb6 	bl	80227dc <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>
 8022a70:	e005      	b.n	8022a7e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		default:
			return UnknownModeResponce(request);
 8022a72:	68fb      	ldr	r3, [r7, #12]
 8022a74:	687a      	ldr	r2, [r7, #4]
 8022a76:	68b9      	ldr	r1, [r7, #8]
 8022a78:	4618      	mov	r0, r3
 8022a7a:	f7ff ff71 	bl	8022960 <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>
		}
	}
 8022a7e:	68f8      	ldr	r0, [r7, #12]
 8022a80:	3710      	adds	r7, #16
 8022a82:	46bd      	mov	sp, r7
 8022a84:	bd80      	pop	{r7, pc}
 8022a86:	bf00      	nop
 8022a88:	0803d974 	.word	0x0803d974
 8022a8c:	0803d99c 	.word	0x0803d99c
 8022a90:	0803cff4 	.word	0x0803cff4

08022a94 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>:
	std::deque<BHYWrapper::BHYFrame> Queue;
	size_t MaxSize = 800 / 5;
	size_t FirstSeq = 0;

public:
	void Add(const BHYWrapper::BHYFrame &frame, size_t seq) {
 8022a94:	b580      	push	{r7, lr}
 8022a96:	b084      	sub	sp, #16
 8022a98:	af00      	add	r7, sp, #0
 8022a9a:	60f8      	str	r0, [r7, #12]
 8022a9c:	60b9      	str	r1, [r7, #8]
 8022a9e:	607a      	str	r2, [r7, #4]
		if (Queue.empty()) {
 8022aa0:	68fb      	ldr	r3, [r7, #12]
 8022aa2:	4618      	mov	r0, r3
 8022aa4:	f001 f85a 	bl	8023b5c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8022aa8:	4603      	mov	r3, r0
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	d002      	beq.n	8022ab4 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x20>
			FirstSeq = seq;
 8022aae:	68fb      	ldr	r3, [r7, #12]
 8022ab0:	687a      	ldr	r2, [r7, #4]
 8022ab2:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		Queue.push_front(frame);
 8022ab4:	68fb      	ldr	r3, [r7, #12]
 8022ab6:	68b9      	ldr	r1, [r7, #8]
 8022ab8:	4618      	mov	r0, r3
 8022aba:	f000 fff8 	bl	8023aae <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>

		if (Queue.size() > MaxSize) {
 8022abe:	68fb      	ldr	r3, [r7, #12]
 8022ac0:	4618      	mov	r0, r3
 8022ac2:	f001 f816 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022ac6:	4602      	mov	r2, r0
 8022ac8:	68fb      	ldr	r3, [r7, #12]
 8022aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022acc:	429a      	cmp	r2, r3
 8022ace:	bf8c      	ite	hi
 8022ad0:	2301      	movhi	r3, #1
 8022ad2:	2300      	movls	r3, #0
 8022ad4:	b2db      	uxtb	r3, r3
 8022ad6:	2b00      	cmp	r3, #0
 8022ad8:	d008      	beq.n	8022aec <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x58>
			Queue.pop_back();
 8022ada:	68fb      	ldr	r3, [r7, #12]
 8022adc:	4618      	mov	r0, r3
 8022ade:	f001 f81a 	bl	8023b16 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
			FirstSeq++;
 8022ae2:	68fb      	ldr	r3, [r7, #12]
 8022ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ae6:	1c5a      	adds	r2, r3, #1
 8022ae8:	68fb      	ldr	r3, [r7, #12]
 8022aea:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
 8022aec:	bf00      	nop
 8022aee:	3710      	adds	r7, #16
 8022af0:	46bd      	mov	sp, r7
 8022af2:	bd80      	pop	{r7, pc}

08022af4 <_ZNK12IMUFrameMemo3HasEj>:

	bool Has(size_t seq) const {
 8022af4:	b590      	push	{r4, r7, lr}
 8022af6:	b083      	sub	sp, #12
 8022af8:	af00      	add	r7, sp, #0
 8022afa:	6078      	str	r0, [r7, #4]
 8022afc:	6039      	str	r1, [r7, #0]
		if (Queue.empty())
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	4618      	mov	r0, r3
 8022b02:	f001 f82b 	bl	8023b5c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8022b06:	4603      	mov	r3, r0
 8022b08:	2b00      	cmp	r3, #0
 8022b0a:	d001      	beq.n	8022b10 <_ZNK12IMUFrameMemo3HasEj+0x1c>
			return false;
 8022b0c:	2300      	movs	r3, #0
 8022b0e:	e012      	b.n	8022b36 <_ZNK12IMUFrameMemo3HasEj+0x42>

		if (seq < FirstSeq + Queue.size())
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8022b14:	687b      	ldr	r3, [r7, #4]
 8022b16:	4618      	mov	r0, r3
 8022b18:	f000 ffeb 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022b1c:	4603      	mov	r3, r0
 8022b1e:	4423      	add	r3, r4
 8022b20:	683a      	ldr	r2, [r7, #0]
 8022b22:	429a      	cmp	r2, r3
 8022b24:	bf34      	ite	cc
 8022b26:	2301      	movcc	r3, #1
 8022b28:	2300      	movcs	r3, #0
 8022b2a:	b2db      	uxtb	r3, r3
 8022b2c:	2b00      	cmp	r3, #0
 8022b2e:	d001      	beq.n	8022b34 <_ZNK12IMUFrameMemo3HasEj+0x40>
			return true;
 8022b30:	2301      	movs	r3, #1
 8022b32:	e000      	b.n	8022b36 <_ZNK12IMUFrameMemo3HasEj+0x42>

		return false;
 8022b34:	2300      	movs	r3, #0
	}
 8022b36:	4618      	mov	r0, r3
 8022b38:	370c      	adds	r7, #12
 8022b3a:	46bd      	mov	sp, r7
 8022b3c:	bd90      	pop	{r4, r7, pc}
	...

08022b40 <_ZNK12IMUFrameMemo3GetEj>:

	BHYWrapper::BHYFrame Get(size_t seq) const {
 8022b40:	b5b0      	push	{r4, r5, r7, lr}
 8022b42:	b084      	sub	sp, #16
 8022b44:	af00      	add	r7, sp, #0
 8022b46:	60f8      	str	r0, [r7, #12]
 8022b48:	60b9      	str	r1, [r7, #8]
 8022b4a:	607a      	str	r2, [r7, #4]
		assert(Has(seq));
 8022b4c:	6879      	ldr	r1, [r7, #4]
 8022b4e:	68b8      	ldr	r0, [r7, #8]
 8022b50:	f7ff ffd0 	bl	8022af4 <_ZNK12IMUFrameMemo3HasEj>
 8022b54:	4603      	mov	r3, r0
 8022b56:	2b00      	cmp	r3, #0
 8022b58:	d106      	bne.n	8022b68 <_ZNK12IMUFrameMemo3GetEj+0x28>
 8022b5a:	4b1a      	ldr	r3, [pc, #104]	; (8022bc4 <_ZNK12IMUFrameMemo3GetEj+0x84>)
 8022b5c:	4a1a      	ldr	r2, [pc, #104]	; (8022bc8 <_ZNK12IMUFrameMemo3GetEj+0x88>)
 8022b5e:	f240 4112 	movw	r1, #1042	; 0x412
 8022b62:	481a      	ldr	r0, [pc, #104]	; (8022bcc <_ZNK12IMUFrameMemo3GetEj+0x8c>)
 8022b64:	f019 f91c 	bl	803bda0 <__assert_func>

		if (seq < FirstSeq) {
 8022b68:	68bb      	ldr	r3, [r7, #8]
 8022b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b6c:	687a      	ldr	r2, [r7, #4]
 8022b6e:	429a      	cmp	r2, r3
 8022b70:	d20c      	bcs.n	8022b8c <_ZNK12IMUFrameMemo3GetEj+0x4c>
			return Queue.front();
 8022b72:	68bb      	ldr	r3, [r7, #8]
 8022b74:	4618      	mov	r0, r3
 8022b76:	f001 f848 	bl	8023c0a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>
 8022b7a:	4602      	mov	r2, r0
 8022b7c:	68fb      	ldr	r3, [r7, #12]
 8022b7e:	461c      	mov	r4, r3
 8022b80:	4615      	mov	r5, r2
 8022b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022b86:	682b      	ldr	r3, [r5, #0]
 8022b88:	6023      	str	r3, [r4, #0]
 8022b8a:	e017      	b.n	8022bbc <_ZNK12IMUFrameMemo3GetEj+0x7c>
		}

		return Queue[(Queue.size() - 1) - (seq - FirstSeq)];
 8022b8c:	68bc      	ldr	r4, [r7, #8]
 8022b8e:	68bb      	ldr	r3, [r7, #8]
 8022b90:	4618      	mov	r0, r3
 8022b92:	f000 ffae 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022b96:	4601      	mov	r1, r0
 8022b98:	68bb      	ldr	r3, [r7, #8]
 8022b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022b9c:	687b      	ldr	r3, [r7, #4]
 8022b9e:	1ad3      	subs	r3, r2, r3
 8022ba0:	440b      	add	r3, r1
 8022ba2:	3b01      	subs	r3, #1
 8022ba4:	4619      	mov	r1, r3
 8022ba6:	4620      	mov	r0, r4
 8022ba8:	f000 ffea 	bl	8023b80 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8022bac:	4602      	mov	r2, r0
 8022bae:	68fb      	ldr	r3, [r7, #12]
 8022bb0:	461c      	mov	r4, r3
 8022bb2:	4615      	mov	r5, r2
 8022bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022bb8:	682b      	ldr	r3, [r5, #0]
 8022bba:	6023      	str	r3, [r4, #0]
	}
 8022bbc:	68f8      	ldr	r0, [r7, #12]
 8022bbe:	3710      	adds	r7, #16
 8022bc0:	46bd      	mov	sp, r7
 8022bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8022bc4:	0803da18 	.word	0x0803da18
 8022bc8:	0803da24 	.word	0x0803da24
 8022bcc:	0803cff4 	.word	0x0803cff4

08022bd0 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>:
private:
	struct Version {
		uint8_t Major;
		uint8_t Minor;

		void SerializeTo(uint8_t **ptr) {
 8022bd0:	b580      	push	{r7, lr}
 8022bd2:	b082      	sub	sp, #8
 8022bd4:	af00      	add	r7, sp, #0
 8022bd6:	6078      	str	r0, [r7, #4]
 8022bd8:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8022bda:	683b      	ldr	r3, [r7, #0]
 8022bdc:	2b00      	cmp	r3, #0
 8022bde:	d106      	bne.n	8022bee <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x1e>
 8022be0:	4b14      	ldr	r3, [pc, #80]	; (8022c34 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x64>)
 8022be2:	4a15      	ldr	r2, [pc, #84]	; (8022c38 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 8022be4:	f240 4123 	movw	r1, #1059	; 0x423
 8022be8:	4814      	ldr	r0, [pc, #80]	; (8022c3c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8022bea:	f019 f8d9 	bl	803bda0 <__assert_func>
			assert(*ptr);
 8022bee:	683b      	ldr	r3, [r7, #0]
 8022bf0:	681b      	ldr	r3, [r3, #0]
 8022bf2:	2b00      	cmp	r3, #0
 8022bf4:	d106      	bne.n	8022c04 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x34>
 8022bf6:	4b12      	ldr	r3, [pc, #72]	; (8022c40 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x70>)
 8022bf8:	4a0f      	ldr	r2, [pc, #60]	; (8022c38 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 8022bfa:	f240 4124 	movw	r1, #1060	; 0x424
 8022bfe:	480f      	ldr	r0, [pc, #60]	; (8022c3c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8022c00:	f019 f8ce 	bl	803bda0 <__assert_func>

			**ptr = Major;
 8022c04:	683b      	ldr	r3, [r7, #0]
 8022c06:	681b      	ldr	r3, [r3, #0]
 8022c08:	687a      	ldr	r2, [r7, #4]
 8022c0a:	7812      	ldrb	r2, [r2, #0]
 8022c0c:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022c0e:	683b      	ldr	r3, [r7, #0]
 8022c10:	681b      	ldr	r3, [r3, #0]
 8022c12:	1c5a      	adds	r2, r3, #1
 8022c14:	683b      	ldr	r3, [r7, #0]
 8022c16:	601a      	str	r2, [r3, #0]

			**ptr = Minor;
 8022c18:	683b      	ldr	r3, [r7, #0]
 8022c1a:	681b      	ldr	r3, [r3, #0]
 8022c1c:	687a      	ldr	r2, [r7, #4]
 8022c1e:	7852      	ldrb	r2, [r2, #1]
 8022c20:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022c22:	683b      	ldr	r3, [r7, #0]
 8022c24:	681b      	ldr	r3, [r3, #0]
 8022c26:	1c5a      	adds	r2, r3, #1
 8022c28:	683b      	ldr	r3, [r7, #0]
 8022c2a:	601a      	str	r2, [r3, #0]
		}
 8022c2c:	bf00      	nop
 8022c2e:	3708      	adds	r7, #8
 8022c30:	46bd      	mov	sp, r7
 8022c32:	bd80      	pop	{r7, pc}
 8022c34:	0803cfc0 	.word	0x0803cfc0
 8022c38:	0803da5c 	.word	0x0803da5c
 8022c3c:	0803cff4 	.word	0x0803cff4
 8022c40:	0803d010 	.word	0x0803d010

08022c44 <_ZN18AcknowledgeHandlerC1Ehh>:
	};

	Version CurrentVersion;

public:
	AcknowledgeHandler(uint8_t versionMaj, uint8_t versionMin) {
 8022c44:	b480      	push	{r7}
 8022c46:	b083      	sub	sp, #12
 8022c48:	af00      	add	r7, sp, #0
 8022c4a:	6078      	str	r0, [r7, #4]
 8022c4c:	460b      	mov	r3, r1
 8022c4e:	70fb      	strb	r3, [r7, #3]
 8022c50:	4613      	mov	r3, r2
 8022c52:	70bb      	strb	r3, [r7, #2]
		CurrentVersion.Major = versionMaj;
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	78fa      	ldrb	r2, [r7, #3]
 8022c58:	701a      	strb	r2, [r3, #0]
		CurrentVersion.Minor = versionMin;
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	78ba      	ldrb	r2, [r7, #2]
 8022c5e:	705a      	strb	r2, [r3, #1]
	}
 8022c60:	687b      	ldr	r3, [r7, #4]
 8022c62:	4618      	mov	r0, r3
 8022c64:	370c      	adds	r7, #12
 8022c66:	46bd      	mov	sp, r7
 8022c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c6c:	4770      	bx	lr
	...

08022c70 <_ZN18AcknowledgeHandler6HandleERK7Request>:

	Responce Handle(const Request &request) {
 8022c70:	b580      	push	{r7, lr}
 8022c72:	b086      	sub	sp, #24
 8022c74:	af00      	add	r7, sp, #0
 8022c76:	60f8      	str	r0, [r7, #12]
 8022c78:	60b9      	str	r1, [r7, #8]
 8022c7a:	607a      	str	r2, [r7, #4]
		assert(request.PeripheryID == Periphery::Ack);
 8022c7c:	687b      	ldr	r3, [r7, #4]
 8022c7e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8022c82:	2b02      	cmp	r3, #2
 8022c84:	d006      	beq.n	8022c94 <_ZN18AcknowledgeHandler6HandleERK7Request+0x24>
 8022c86:	4b14      	ldr	r3, [pc, #80]	; (8022cd8 <_ZN18AcknowledgeHandler6HandleERK7Request+0x68>)
 8022c88:	4a14      	ldr	r2, [pc, #80]	; (8022cdc <_ZN18AcknowledgeHandler6HandleERK7Request+0x6c>)
 8022c8a:	f240 4137 	movw	r1, #1079	; 0x437
 8022c8e:	4814      	ldr	r0, [pc, #80]	; (8022ce0 <_ZN18AcknowledgeHandler6HandleERK7Request+0x70>)
 8022c90:	f019 f886 	bl	803bda0 <__assert_func>

		Responce responce;
		responce.PeripheryID = Periphery::Ack;
 8022c94:	68fb      	ldr	r3, [r7, #12]
 8022c96:	2202      	movs	r2, #2
 8022c98:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = 0;
 8022c9c:	68fb      	ldr	r3, [r7, #12]
 8022c9e:	2200      	movs	r2, #0
 8022ca0:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.Error = 0;
 8022ca4:	68fb      	ldr	r3, [r7, #12]
 8022ca6:	2200      	movs	r2, #0
 8022ca8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		responce.ResponceSize = 2;
 8022cac:	68fb      	ldr	r3, [r7, #12]
 8022cae:	2202      	movs	r2, #2
 8022cb0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		uint8_t *ptr = responce.Data.data();
 8022cb4:	68f8      	ldr	r0, [r7, #12]
 8022cb6:	f000 fd11 	bl	80236dc <_ZNSt5arrayIhLj256EE4dataEv>
 8022cba:	4603      	mov	r3, r0
 8022cbc:	617b      	str	r3, [r7, #20]
		CurrentVersion.SerializeTo(&ptr);
 8022cbe:	68bb      	ldr	r3, [r7, #8]
 8022cc0:	f107 0214 	add.w	r2, r7, #20
 8022cc4:	4611      	mov	r1, r2
 8022cc6:	4618      	mov	r0, r3
 8022cc8:	f7ff ff82 	bl	8022bd0 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>

		return responce;
 8022ccc:	bf00      	nop
	}
 8022cce:	68f8      	ldr	r0, [r7, #12]
 8022cd0:	3718      	adds	r7, #24
 8022cd2:	46bd      	mov	sp, r7
 8022cd4:	bd80      	pop	{r7, pc}
 8022cd6:	bf00      	nop
 8022cd8:	0803da98 	.word	0x0803da98
 8022cdc:	0803dac0 	.word	0x0803dac0
 8022ce0:	0803cff4 	.word	0x0803cff4

08022ce4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8022ce4:	b580      	push	{r7, lr}
 8022ce6:	b082      	sub	sp, #8
 8022ce8:	af00      	add	r7, sp, #0
 8022cea:	6078      	str	r0, [r7, #4]
 8022cec:	687b      	ldr	r3, [r7, #4]
 8022cee:	4618      	mov	r0, r3
 8022cf0:	f000 ffab 	bl	8023c4a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	4618      	mov	r0, r3
 8022cf8:	3708      	adds	r7, #8
 8022cfa:	46bd      	mov	sp, r7
 8022cfc:	bd80      	pop	{r7, pc}

08022cfe <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8022cfe:	b580      	push	{r7, lr}
 8022d00:	b082      	sub	sp, #8
 8022d02:	af00      	add	r7, sp, #0
 8022d04:	6078      	str	r0, [r7, #4]
 8022d06:	687b      	ldr	r3, [r7, #4]
 8022d08:	4618      	mov	r0, r3
 8022d0a:	f7ff ffeb 	bl	8022ce4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022d0e:	687b      	ldr	r3, [r7, #4]
 8022d10:	2200      	movs	r2, #0
 8022d12:	629a      	str	r2, [r3, #40]	; 0x28
 8022d14:	687b      	ldr	r3, [r7, #4]
 8022d16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8022d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8022d1c:	687b      	ldr	r3, [r7, #4]
 8022d1e:	4618      	mov	r0, r3
 8022d20:	3708      	adds	r7, #8
 8022d22:	46bd      	mov	sp, r7
 8022d24:	bd80      	pop	{r7, pc}

08022d26 <_ZN17IMUFrameContainerD1Ev>:
 8022d26:	b580      	push	{r7, lr}
 8022d28:	b082      	sub	sp, #8
 8022d2a:	af00      	add	r7, sp, #0
 8022d2c:	6078      	str	r0, [r7, #4]
 8022d2e:	687b      	ldr	r3, [r7, #4]
 8022d30:	4618      	mov	r0, r3
 8022d32:	f000 ffbd 	bl	8023cb0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022d36:	687b      	ldr	r3, [r7, #4]
 8022d38:	4618      	mov	r0, r3
 8022d3a:	3708      	adds	r7, #8
 8022d3c:	46bd      	mov	sp, r7
 8022d3e:	bd80      	pop	{r7, pc}

08022d40 <_ZN12IMUFrameMemoC1Ev>:
class IMUFrameMemo {
 8022d40:	b580      	push	{r7, lr}
 8022d42:	b082      	sub	sp, #8
 8022d44:	af00      	add	r7, sp, #0
 8022d46:	6078      	str	r0, [r7, #4]
 8022d48:	687b      	ldr	r3, [r7, #4]
 8022d4a:	4618      	mov	r0, r3
 8022d4c:	f7ff ffca 	bl	8022ce4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022d50:	687b      	ldr	r3, [r7, #4]
 8022d52:	22a0      	movs	r2, #160	; 0xa0
 8022d54:	629a      	str	r2, [r3, #40]	; 0x28
 8022d56:	687b      	ldr	r3, [r7, #4]
 8022d58:	2200      	movs	r2, #0
 8022d5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8022d5c:	687b      	ldr	r3, [r7, #4]
 8022d5e:	4618      	mov	r0, r3
 8022d60:	3708      	adds	r7, #8
 8022d62:	46bd      	mov	sp, r7
 8022d64:	bd80      	pop	{r7, pc}

08022d66 <_ZN12IMUFrameMemoD1Ev>:
 8022d66:	b580      	push	{r7, lr}
 8022d68:	b082      	sub	sp, #8
 8022d6a:	af00      	add	r7, sp, #0
 8022d6c:	6078      	str	r0, [r7, #4]
 8022d6e:	687b      	ldr	r3, [r7, #4]
 8022d70:	4618      	mov	r0, r3
 8022d72:	f000 ff9d 	bl	8023cb0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022d76:	687b      	ldr	r3, [r7, #4]
 8022d78:	4618      	mov	r0, r3
 8022d7a:	3708      	adds	r7, #8
 8022d7c:	46bd      	mov	sp, r7
 8022d7e:	bd80      	pop	{r7, pc}

08022d80 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8022d80:	b580      	push	{r7, lr}
 8022d82:	b082      	sub	sp, #8
 8022d84:	af00      	add	r7, sp, #0
 8022d86:	6078      	str	r0, [r7, #4]
 8022d88:	687b      	ldr	r3, [r7, #4]
 8022d8a:	4618      	mov	r0, r3
 8022d8c:	f000 ffd6 	bl	8023d3c <_ZNSt5dequeIjSaIjEED1Ev>
 8022d90:	687b      	ldr	r3, [r7, #4]
 8022d92:	4618      	mov	r0, r3
 8022d94:	3708      	adds	r7, #8
 8022d96:	46bd      	mov	sp, r7
 8022d98:	bd80      	pop	{r7, pc}

08022d9a <_ZN20StrobeDurationFilterC1Ev>:
class StrobeDurationFilter {
 8022d9a:	b580      	push	{r7, lr}
 8022d9c:	b082      	sub	sp, #8
 8022d9e:	af00      	add	r7, sp, #0
 8022da0:	6078      	str	r0, [r7, #4]
 8022da2:	687b      	ldr	r3, [r7, #4]
 8022da4:	2200      	movs	r2, #0
 8022da6:	601a      	str	r2, [r3, #0]
 8022da8:	687b      	ldr	r3, [r7, #4]
 8022daa:	2200      	movs	r2, #0
 8022dac:	605a      	str	r2, [r3, #4]
 8022dae:	687b      	ldr	r3, [r7, #4]
 8022db0:	2201      	movs	r2, #1
 8022db2:	609a      	str	r2, [r3, #8]
 8022db4:	687b      	ldr	r3, [r7, #4]
 8022db6:	2200      	movs	r2, #0
 8022db8:	60da      	str	r2, [r3, #12]
 8022dba:	687b      	ldr	r3, [r7, #4]
 8022dbc:	2200      	movs	r2, #0
 8022dbe:	611a      	str	r2, [r3, #16]
 8022dc0:	687b      	ldr	r3, [r7, #4]
 8022dc2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8022dc6:	615a      	str	r2, [r3, #20]
 8022dc8:	687b      	ldr	r3, [r7, #4]
 8022dca:	3318      	adds	r3, #24
 8022dcc:	4618      	mov	r0, r3
 8022dce:	f000 ffa1 	bl	8023d14 <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 8022dd2:	687b      	ldr	r3, [r7, #4]
 8022dd4:	2200      	movs	r2, #0
 8022dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8022dd8:	687b      	ldr	r3, [r7, #4]
 8022dda:	4618      	mov	r0, r3
 8022ddc:	3708      	adds	r7, #8
 8022dde:	46bd      	mov	sp, r7
 8022de0:	bd80      	pop	{r7, pc}

08022de2 <_ZN20StrobeDurationFilterD1Ev>:
 8022de2:	b580      	push	{r7, lr}
 8022de4:	b082      	sub	sp, #8
 8022de6:	af00      	add	r7, sp, #0
 8022de8:	6078      	str	r0, [r7, #4]
 8022dea:	687b      	ldr	r3, [r7, #4]
 8022dec:	3318      	adds	r3, #24
 8022dee:	4618      	mov	r0, r3
 8022df0:	f7ff ffc6 	bl	8022d80 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	4618      	mov	r0, r3
 8022df8:	3708      	adds	r7, #8
 8022dfa:	46bd      	mov	sp, r7
 8022dfc:	bd80      	pop	{r7, pc}
	...

08022e00 <_ZN18MotherboardContextC1E17MotherboardConfig>:
	StrobeDurationFilter StrobeFilter;
	size_t StrobeOffset;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 8022e00:	b084      	sub	sp, #16
 8022e02:	b580      	push	{r7, lr}
 8022e04:	b082      	sub	sp, #8
 8022e06:	af00      	add	r7, sp, #0
 8022e08:	6078      	str	r0, [r7, #4]
 8022e0a:	f107 0014 	add.w	r0, r7, #20
 8022e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			HeadService { conf.HeadServiceUart, conf.HeadTimeout }, HeadStream {
					conf.HeadStreamUart, conf.HeadTimeout }, Body {
					conf.BodyUart, conf.BodyTimeout, conf.BodyPeriod }, FrameContainer { }, IMU {
					conf.IMUSpi }, IMUHandler { }, AckHandler {
					conf.VersionMajor, conf.VersionMinor }, StrobeOffset {
					conf.StrobeOffset } {
 8022e12:	687b      	ldr	r3, [r7, #4]
 8022e14:	6979      	ldr	r1, [r7, #20]
 8022e16:	69fa      	ldr	r2, [r7, #28]
 8022e18:	4618      	mov	r0, r3
 8022e1a:	f7fe ff61 	bl	8021ce0 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022e1e:	687b      	ldr	r3, [r7, #4]
 8022e20:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022e24:	69b9      	ldr	r1, [r7, #24]
 8022e26:	69fa      	ldr	r2, [r7, #28]
 8022e28:	4618      	mov	r0, r3
 8022e2a:	f7fe ff59 	bl	8021ce0 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022e2e:	687a      	ldr	r2, [r7, #4]
 8022e30:	f641 1348 	movw	r3, #6472	; 0x1948
 8022e34:	4413      	add	r3, r2
 8022e36:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8022e3a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8022e3e:	4618      	mov	r0, r3
 8022e40:	f7ff ff00 	bl	8022c44 <_ZN18AcknowledgeHandlerC1Ehh>
 8022e44:	687b      	ldr	r3, [r7, #4]
 8022e46:	f641 104c 	movw	r0, #6476	; 0x194c
 8022e4a:	4418      	add	r0, r3
 8022e4c:	6a39      	ldr	r1, [r7, #32]
 8022e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022e50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022e54:	f7fe f8d2 	bl	8020ffc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8022e5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022e62:	2230      	movs	r2, #48	; 0x30
 8022e64:	2100      	movs	r1, #0
 8022e66:	4618      	mov	r0, r3
 8022e68:	f019 f82c 	bl	803bec4 <memset>
 8022e6c:	687a      	ldr	r2, [r7, #4]
 8022e6e:	4b16      	ldr	r3, [pc, #88]	; (8022ec8 <_ZN18MotherboardContextC1E17MotherboardConfig+0xc8>)
 8022e70:	4413      	add	r3, r2
 8022e72:	4618      	mov	r0, r3
 8022e74:	f7ff ff43 	bl	8022cfe <_ZN17IMUFrameContainerC1Ev>
 8022e78:	687a      	ldr	r2, [r7, #4]
 8022e7a:	4b14      	ldr	r3, [pc, #80]	; (8022ecc <_ZN18MotherboardContextC1E17MotherboardConfig+0xcc>)
 8022e7c:	4413      	add	r3, r2
 8022e7e:	4618      	mov	r0, r3
 8022e80:	f7ff ff5e 	bl	8022d40 <_ZN12IMUFrameMemoC1Ev>
 8022e84:	687a      	ldr	r2, [r7, #4]
 8022e86:	4b12      	ldr	r3, [pc, #72]	; (8022ed0 <_ZN18MotherboardContextC1E17MotherboardConfig+0xd0>)
 8022e88:	4413      	add	r3, r2
 8022e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022e8c:	4611      	mov	r1, r2
 8022e8e:	4618      	mov	r0, r3
 8022e90:	f7fd fbf8 	bl	8020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 8022e94:	687a      	ldr	r2, [r7, #4]
 8022e96:	4b0f      	ldr	r3, [pc, #60]	; (8022ed4 <_ZN18MotherboardContextC1E17MotherboardConfig+0xd4>)
 8022e98:	4413      	add	r3, r2
 8022e9a:	4618      	mov	r0, r3
 8022e9c:	f7ff ff7d 	bl	8022d9a <_ZN20StrobeDurationFilterC1Ev>
 8022ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022ea2:	687a      	ldr	r2, [r7, #4]
 8022ea4:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
 8022ea8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
 8022eac:	687b      	ldr	r3, [r7, #4]
 8022eae:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8022eb2:	2200      	movs	r2, #0
 8022eb4:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
	}
 8022eb8:	687b      	ldr	r3, [r7, #4]
 8022eba:	4618      	mov	r0, r3
 8022ebc:	3708      	adds	r7, #8
 8022ebe:	46bd      	mov	sp, r7
 8022ec0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022ec4:	b004      	add	sp, #16
 8022ec6:	4770      	bx	lr
 8022ec8:	00023144 	.word	0x00023144
 8022ecc:	00023174 	.word	0x00023174
 8022ed0:	000231a8 	.word	0x000231a8
 8022ed4:	00024304 	.word	0x00024304

08022ed8 <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8022ed8:	b580      	push	{r7, lr}
 8022eda:	b082      	sub	sp, #8
 8022edc:	af00      	add	r7, sp, #0
 8022ede:	6078      	str	r0, [r7, #4]
 8022ee0:	687b      	ldr	r3, [r7, #4]
 8022ee2:	4618      	mov	r0, r3
 8022ee4:	f7fe fee8 	bl	8021cb8 <_ZN10FixedQueueI7RequestLj10EEC1Ev>
 8022ee8:	687b      	ldr	r3, [r7, #4]
 8022eea:	2201      	movs	r2, #1
 8022eec:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
 8022ef0:	687b      	ldr	r3, [r7, #4]
 8022ef2:	4618      	mov	r0, r3
 8022ef4:	3708      	adds	r7, #8
 8022ef6:	46bd      	mov	sp, r7
 8022ef8:	bd80      	pop	{r7, pc}
	...

08022efc <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8022efc:	b580      	push	{r7, lr}
 8022efe:	b082      	sub	sp, #8
 8022f00:	af00      	add	r7, sp, #0
 8022f02:	6078      	str	r0, [r7, #4]
 8022f04:	687b      	ldr	r3, [r7, #4]
 8022f06:	4618      	mov	r0, r3
 8022f08:	f7fe f850 	bl	8020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>
 8022f0c:	687a      	ldr	r2, [r7, #4]
 8022f0e:	4b1a      	ldr	r3, [pc, #104]	; (8022f78 <_ZN11QueueSenderC1Ev+0x7c>)
 8022f10:	4413      	add	r3, r2
 8022f12:	4618      	mov	r0, r3
 8022f14:	f7fe f85e 	bl	8020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>
 8022f18:	687b      	ldr	r3, [r7, #4]
 8022f1a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022f1e:	2200      	movs	r2, #0
 8022f20:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 8022f24:	687b      	ldr	r3, [r7, #4]
 8022f26:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022f2a:	2200      	movs	r2, #0
 8022f2c:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8022f30:	687b      	ldr	r3, [r7, #4]
 8022f32:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022f36:	2201      	movs	r2, #1
 8022f38:	f883 27f0 	strb.w	r2, [r3, #2032]	; 0x7f0
 8022f3c:	687b      	ldr	r3, [r7, #4]
 8022f3e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022f42:	2200      	movs	r2, #0
 8022f44:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8022f48:	687b      	ldr	r3, [r7, #4]
 8022f4a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022f4e:	2200      	movs	r2, #0
 8022f50:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8022f54:	687b      	ldr	r3, [r7, #4]
 8022f56:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022f5a:	2201      	movs	r2, #1
 8022f5c:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 8022f60:	687b      	ldr	r3, [r7, #4]
 8022f62:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022f66:	2200      	movs	r2, #0
 8022f68:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
 8022f6c:	687b      	ldr	r3, [r7, #4]
 8022f6e:	4618      	mov	r0, r3
 8022f70:	3708      	adds	r7, #8
 8022f72:	46bd      	mov	sp, r7
 8022f74:	bd80      	pop	{r7, pc}
 8022f76:	bf00      	nop
 8022f78:	00020b7c 	.word	0x00020b7c

08022f7c <_ZN10BHYWrapperC1Ev>:

		void SerializeTo(uint8_t* dest, uint8_t* size);
	};

	BHYWrapper(SPI_HandleTypeDef *spiHandle);
	BHYWrapper() = default;
 8022f7c:	b480      	push	{r7}
 8022f7e:	b083      	sub	sp, #12
 8022f80:	af00      	add	r7, sp, #0
 8022f82:	6078      	str	r0, [r7, #4]
 8022f84:	687b      	ldr	r3, [r7, #4]
 8022f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022f8a:	461a      	mov	r2, r3
 8022f8c:	2300      	movs	r3, #0
 8022f8e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8022f92:	687b      	ldr	r3, [r7, #4]
 8022f94:	4618      	mov	r0, r3
 8022f96:	370c      	adds	r7, #12
 8022f98:	46bd      	mov	sp, r7
 8022f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f9e:	4770      	bx	lr

08022fa0 <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8022fa0:	b580      	push	{r7, lr}
 8022fa2:	b082      	sub	sp, #8
 8022fa4:	af00      	add	r7, sp, #0
 8022fa6:	6078      	str	r0, [r7, #4]
 8022fa8:	687b      	ldr	r3, [r7, #4]
 8022faa:	4618      	mov	r0, r3
 8022fac:	f7ff ff94 	bl	8022ed8 <_ZN13HeadInterfaceC1Ev>
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022fb6:	4618      	mov	r0, r3
 8022fb8:	f7ff ff8e 	bl	8022ed8 <_ZN13HeadInterfaceC1Ev>
 8022fbc:	687a      	ldr	r2, [r7, #4]
 8022fbe:	f641 1348 	movw	r3, #6472	; 0x1948
 8022fc2:	4413      	add	r3, r2
 8022fc4:	2200      	movs	r2, #0
 8022fc6:	2100      	movs	r1, #0
 8022fc8:	4618      	mov	r0, r3
 8022fca:	f7ff fe3b 	bl	8022c44 <_ZN18AcknowledgeHandlerC1Ehh>
 8022fce:	687a      	ldr	r2, [r7, #4]
 8022fd0:	f641 134c 	movw	r3, #6476	; 0x194c
 8022fd4:	4413      	add	r3, r2
 8022fd6:	4618      	mov	r0, r3
 8022fd8:	f7ff ff90 	bl	8022efc <_ZN11QueueSenderC1Ev>
 8022fdc:	687a      	ldr	r2, [r7, #4]
 8022fde:	4b11      	ldr	r3, [pc, #68]	; (8023024 <_ZN18MotherboardContextC1Ev+0x84>)
 8022fe0:	4413      	add	r3, r2
 8022fe2:	4618      	mov	r0, r3
 8022fe4:	f7ff fe8b 	bl	8022cfe <_ZN17IMUFrameContainerC1Ev>
 8022fe8:	687a      	ldr	r2, [r7, #4]
 8022fea:	4b0f      	ldr	r3, [pc, #60]	; (8023028 <_ZN18MotherboardContextC1Ev+0x88>)
 8022fec:	4413      	add	r3, r2
 8022fee:	4618      	mov	r0, r3
 8022ff0:	f7ff fea6 	bl	8022d40 <_ZN12IMUFrameMemoC1Ev>
 8022ff4:	687a      	ldr	r2, [r7, #4]
 8022ff6:	4b0d      	ldr	r3, [pc, #52]	; (802302c <_ZN18MotherboardContextC1Ev+0x8c>)
 8022ff8:	4413      	add	r3, r2
 8022ffa:	4618      	mov	r0, r3
 8022ffc:	f7ff ffbe 	bl	8022f7c <_ZN10BHYWrapperC1Ev>
 8023000:	687a      	ldr	r2, [r7, #4]
 8023002:	4b0b      	ldr	r3, [pc, #44]	; (8023030 <_ZN18MotherboardContextC1Ev+0x90>)
 8023004:	4413      	add	r3, r2
 8023006:	4618      	mov	r0, r3
 8023008:	f7ff fec7 	bl	8022d9a <_ZN20StrobeDurationFilterC1Ev>
 802300c:	687b      	ldr	r3, [r7, #4]
 802300e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023012:	2200      	movs	r2, #0
 8023014:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
 8023018:	687b      	ldr	r3, [r7, #4]
 802301a:	4618      	mov	r0, r3
 802301c:	3708      	adds	r7, #8
 802301e:	46bd      	mov	sp, r7
 8023020:	bd80      	pop	{r7, pc}
 8023022:	bf00      	nop
 8023024:	00023144 	.word	0x00023144
 8023028:	00023174 	.word	0x00023174
 802302c:	000231a8 	.word	0x000231a8
 8023030:	00024304 	.word	0x00024304

08023034 <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8023034:	b580      	push	{r7, lr}
 8023036:	b082      	sub	sp, #8
 8023038:	af00      	add	r7, sp, #0
 802303a:	6078      	str	r0, [r7, #4]
 802303c:	687a      	ldr	r2, [r7, #4]
 802303e:	4b0b      	ldr	r3, [pc, #44]	; (802306c <_ZN18MotherboardContextD1Ev+0x38>)
 8023040:	4413      	add	r3, r2
 8023042:	4618      	mov	r0, r3
 8023044:	f7ff fecd 	bl	8022de2 <_ZN20StrobeDurationFilterD1Ev>
 8023048:	687a      	ldr	r2, [r7, #4]
 802304a:	4b09      	ldr	r3, [pc, #36]	; (8023070 <_ZN18MotherboardContextD1Ev+0x3c>)
 802304c:	4413      	add	r3, r2
 802304e:	4618      	mov	r0, r3
 8023050:	f7ff fe89 	bl	8022d66 <_ZN12IMUFrameMemoD1Ev>
 8023054:	687a      	ldr	r2, [r7, #4]
 8023056:	4b07      	ldr	r3, [pc, #28]	; (8023074 <_ZN18MotherboardContextD1Ev+0x40>)
 8023058:	4413      	add	r3, r2
 802305a:	4618      	mov	r0, r3
 802305c:	f7ff fe63 	bl	8022d26 <_ZN17IMUFrameContainerD1Ev>
 8023060:	687b      	ldr	r3, [r7, #4]
 8023062:	4618      	mov	r0, r3
 8023064:	3708      	adds	r7, #8
 8023066:	46bd      	mov	sp, r7
 8023068:	bd80      	pop	{r7, pc}
 802306a:	bf00      	nop
 802306c:	00024304 	.word	0x00024304
 8023070:	00023174 	.word	0x00023174
 8023074:	00023144 	.word	0x00023144

08023078 <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8023078:	b580      	push	{r7, lr}
 802307a:	b082      	sub	sp, #8
 802307c:	af00      	add	r7, sp, #0
 802307e:	6078      	str	r0, [r7, #4]
 8023080:	6039      	str	r1, [r7, #0]
 8023082:	687b      	ldr	r3, [r7, #4]
 8023084:	683a      	ldr	r2, [r7, #0]
 8023086:	4611      	mov	r1, r2
 8023088:	4618      	mov	r0, r3
 802308a:	f000 fe7c 	bl	8023d86 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 802308e:	683b      	ldr	r3, [r7, #0]
 8023090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023092:	687b      	ldr	r3, [r7, #4]
 8023094:	629a      	str	r2, [r3, #40]	; 0x28
 8023096:	683b      	ldr	r3, [r7, #0]
 8023098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802309a:	687b      	ldr	r3, [r7, #4]
 802309c:	62da      	str	r2, [r3, #44]	; 0x2c
 802309e:	687b      	ldr	r3, [r7, #4]
 80230a0:	4618      	mov	r0, r3
 80230a2:	3708      	adds	r7, #8
 80230a4:	46bd      	mov	sp, r7
 80230a6:	bd80      	pop	{r7, pc}

080230a8 <_ZN12IMUFrameMemoaSEOS_>:
class IMUFrameMemo {
 80230a8:	b580      	push	{r7, lr}
 80230aa:	b082      	sub	sp, #8
 80230ac:	af00      	add	r7, sp, #0
 80230ae:	6078      	str	r0, [r7, #4]
 80230b0:	6039      	str	r1, [r7, #0]
 80230b2:	687b      	ldr	r3, [r7, #4]
 80230b4:	683a      	ldr	r2, [r7, #0]
 80230b6:	4611      	mov	r1, r2
 80230b8:	4618      	mov	r0, r3
 80230ba:	f000 fe64 	bl	8023d86 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 80230be:	683b      	ldr	r3, [r7, #0]
 80230c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80230c2:	687b      	ldr	r3, [r7, #4]
 80230c4:	629a      	str	r2, [r3, #40]	; 0x28
 80230c6:	683b      	ldr	r3, [r7, #0]
 80230c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80230ca:	687b      	ldr	r3, [r7, #4]
 80230cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80230ce:	687b      	ldr	r3, [r7, #4]
 80230d0:	4618      	mov	r0, r3
 80230d2:	3708      	adds	r7, #8
 80230d4:	46bd      	mov	sp, r7
 80230d6:	bd80      	pop	{r7, pc}

080230d8 <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>:
 80230d8:	b580      	push	{r7, lr}
 80230da:	b082      	sub	sp, #8
 80230dc:	af00      	add	r7, sp, #0
 80230de:	6078      	str	r0, [r7, #4]
 80230e0:	6039      	str	r1, [r7, #0]
 80230e2:	687b      	ldr	r3, [r7, #4]
 80230e4:	683a      	ldr	r2, [r7, #0]
 80230e6:	4611      	mov	r1, r2
 80230e8:	4618      	mov	r0, r3
 80230ea:	f000 fe5f 	bl	8023dac <_ZNSt5dequeIjSaIjEEaSEOS1_>
 80230ee:	687b      	ldr	r3, [r7, #4]
 80230f0:	4618      	mov	r0, r3
 80230f2:	3708      	adds	r7, #8
 80230f4:	46bd      	mov	sp, r7
 80230f6:	bd80      	pop	{r7, pc}

080230f8 <_ZN20StrobeDurationFilteraSEOS_>:
class StrobeDurationFilter {
 80230f8:	b580      	push	{r7, lr}
 80230fa:	b082      	sub	sp, #8
 80230fc:	af00      	add	r7, sp, #0
 80230fe:	6078      	str	r0, [r7, #4]
 8023100:	6039      	str	r1, [r7, #0]
 8023102:	683b      	ldr	r3, [r7, #0]
 8023104:	681a      	ldr	r2, [r3, #0]
 8023106:	687b      	ldr	r3, [r7, #4]
 8023108:	601a      	str	r2, [r3, #0]
 802310a:	683b      	ldr	r3, [r7, #0]
 802310c:	685a      	ldr	r2, [r3, #4]
 802310e:	687b      	ldr	r3, [r7, #4]
 8023110:	605a      	str	r2, [r3, #4]
 8023112:	683b      	ldr	r3, [r7, #0]
 8023114:	689a      	ldr	r2, [r3, #8]
 8023116:	687b      	ldr	r3, [r7, #4]
 8023118:	609a      	str	r2, [r3, #8]
 802311a:	683b      	ldr	r3, [r7, #0]
 802311c:	68da      	ldr	r2, [r3, #12]
 802311e:	687b      	ldr	r3, [r7, #4]
 8023120:	60da      	str	r2, [r3, #12]
 8023122:	683b      	ldr	r3, [r7, #0]
 8023124:	691a      	ldr	r2, [r3, #16]
 8023126:	687b      	ldr	r3, [r7, #4]
 8023128:	611a      	str	r2, [r3, #16]
 802312a:	683b      	ldr	r3, [r7, #0]
 802312c:	695a      	ldr	r2, [r3, #20]
 802312e:	687b      	ldr	r3, [r7, #4]
 8023130:	615a      	str	r2, [r3, #20]
 8023132:	687b      	ldr	r3, [r7, #4]
 8023134:	f103 0218 	add.w	r2, r3, #24
 8023138:	683b      	ldr	r3, [r7, #0]
 802313a:	3318      	adds	r3, #24
 802313c:	4619      	mov	r1, r3
 802313e:	4610      	mov	r0, r2
 8023140:	f7ff ffca 	bl	80230d8 <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>
 8023144:	683b      	ldr	r3, [r7, #0]
 8023146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8023148:	687b      	ldr	r3, [r7, #4]
 802314a:	641a      	str	r2, [r3, #64]	; 0x40
 802314c:	687b      	ldr	r3, [r7, #4]
 802314e:	4618      	mov	r0, r3
 8023150:	3708      	adds	r7, #8
 8023152:	46bd      	mov	sp, r7
 8023154:	bd80      	pop	{r7, pc}
	...

08023158 <_ZN18MotherboardContextaSEOS_>:
 8023158:	b580      	push	{r7, lr}
 802315a:	b082      	sub	sp, #8
 802315c:	af00      	add	r7, sp, #0
 802315e:	6078      	str	r0, [r7, #4]
 8023160:	6039      	str	r1, [r7, #0]
 8023162:	687a      	ldr	r2, [r7, #4]
 8023164:	683b      	ldr	r3, [r7, #0]
 8023166:	4610      	mov	r0, r2
 8023168:	4619      	mov	r1, r3
 802316a:	f640 43a1 	movw	r3, #3233	; 0xca1
 802316e:	461a      	mov	r2, r3
 8023170:	f018 fe80 	bl	803be74 <memcpy>
 8023174:	687a      	ldr	r2, [r7, #4]
 8023176:	683b      	ldr	r3, [r7, #0]
 8023178:	f602 40a4 	addw	r0, r2, #3236	; 0xca4
 802317c:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8023180:	f640 42a1 	movw	r2, #3233	; 0xca1
 8023184:	4619      	mov	r1, r3
 8023186:	f018 fe75 	bl	803be74 <memcpy>
 802318a:	687b      	ldr	r3, [r7, #4]
 802318c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023190:	461a      	mov	r2, r3
 8023192:	683b      	ldr	r3, [r7, #0]
 8023194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023198:	f8b3 3948 	ldrh.w	r3, [r3, #2376]	; 0x948
 802319c:	f8a2 3948 	strh.w	r3, [r2, #2376]	; 0x948
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80231a6:	4619      	mov	r1, r3
 80231a8:	683b      	ldr	r3, [r7, #0]
 80231aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80231ae:	461a      	mov	r2, r3
 80231b0:	f601 134c 	addw	r3, r1, #2380	; 0x94c
 80231b4:	f602 114c 	addw	r1, r2, #2380	; 0x94c
 80231b8:	4a25      	ldr	r2, [pc, #148]	; (8023250 <_ZN18MotherboardContextaSEOS_+0xf8>)
 80231ba:	4618      	mov	r0, r3
 80231bc:	f018 fe5a 	bl	803be74 <memcpy>
 80231c0:	687a      	ldr	r2, [r7, #4]
 80231c2:	4b24      	ldr	r3, [pc, #144]	; (8023254 <_ZN18MotherboardContextaSEOS_+0xfc>)
 80231c4:	4413      	add	r3, r2
 80231c6:	6839      	ldr	r1, [r7, #0]
 80231c8:	4a22      	ldr	r2, [pc, #136]	; (8023254 <_ZN18MotherboardContextaSEOS_+0xfc>)
 80231ca:	440a      	add	r2, r1
 80231cc:	4611      	mov	r1, r2
 80231ce:	4618      	mov	r0, r3
 80231d0:	f7ff ff52 	bl	8023078 <_ZN17IMUFrameContaineraSEOS_>
 80231d4:	687a      	ldr	r2, [r7, #4]
 80231d6:	4b20      	ldr	r3, [pc, #128]	; (8023258 <_ZN18MotherboardContextaSEOS_+0x100>)
 80231d8:	4413      	add	r3, r2
 80231da:	6839      	ldr	r1, [r7, #0]
 80231dc:	4a1e      	ldr	r2, [pc, #120]	; (8023258 <_ZN18MotherboardContextaSEOS_+0x100>)
 80231de:	440a      	add	r2, r1
 80231e0:	4611      	mov	r1, r2
 80231e2:	4618      	mov	r0, r3
 80231e4:	f7ff ff60 	bl	80230a8 <_ZN12IMUFrameMemoaSEOS_>
 80231e8:	687b      	ldr	r3, [r7, #4]
 80231ea:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80231ee:	4619      	mov	r1, r3
 80231f0:	683b      	ldr	r3, [r7, #0]
 80231f2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80231f6:	461a      	mov	r2, r3
 80231f8:	f501 73d4 	add.w	r3, r1, #424	; 0x1a8
 80231fc:	f502 71d4 	add.w	r1, r2, #424	; 0x1a8
 8023200:	f241 1254 	movw	r2, #4436	; 0x1154
 8023204:	4618      	mov	r0, r3
 8023206:	f018 fe35 	bl	803be74 <memcpy>
 802320a:	687a      	ldr	r2, [r7, #4]
 802320c:	4b13      	ldr	r3, [pc, #76]	; (802325c <_ZN18MotherboardContextaSEOS_+0x104>)
 802320e:	4413      	add	r3, r2
 8023210:	6839      	ldr	r1, [r7, #0]
 8023212:	4a12      	ldr	r2, [pc, #72]	; (802325c <_ZN18MotherboardContextaSEOS_+0x104>)
 8023214:	440a      	add	r2, r1
 8023216:	4611      	mov	r1, r2
 8023218:	4618      	mov	r0, r3
 802321a:	f7ff ff6d 	bl	80230f8 <_ZN20StrobeDurationFilteraSEOS_>
 802321e:	683b      	ldr	r3, [r7, #0]
 8023220:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023224:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8023228:	687a      	ldr	r2, [r7, #4]
 802322a:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
 802322e:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
 8023232:	683b      	ldr	r3, [r7, #0]
 8023234:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023238:	f893 234c 	ldrb.w	r2, [r3, #844]	; 0x34c
 802323c:	687b      	ldr	r3, [r7, #4]
 802323e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023242:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
 8023246:	687b      	ldr	r3, [r7, #4]
 8023248:	4618      	mov	r0, r3
 802324a:	3708      	adds	r7, #8
 802324c:	46bd      	mov	sp, r7
 802324e:	bd80      	pop	{r7, pc}
 8023250:	000217f5 	.word	0x000217f5
 8023254:	00023144 	.word	0x00023144
 8023258:	00023174 	.word	0x00023174
 802325c:	00024304 	.word	0x00024304

08023260 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 8023260:	b084      	sub	sp, #16
 8023262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023264:	f5ad 3d10 	sub.w	sp, sp, #147456	; 0x24000
 8023268:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
 802326c:	af06      	add	r7, sp, #24
 802326e:	4c20      	ldr	r4, [pc, #128]	; (80232f0 <MotherboardInit+0x90>)
 8023270:	443c      	add	r4, r7
 8023272:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 8023276:	4e1f      	ldr	r6, [pc, #124]	; (80232f4 <MotherboardInit+0x94>)
 8023278:	4b1f      	ldr	r3, [pc, #124]	; (80232f8 <MotherboardInit+0x98>)
 802327a:	4433      	add	r3, r6
 802327c:	19de      	adds	r6, r3, r7
 802327e:	466d      	mov	r5, sp
 8023280:	4c1e      	ldr	r4, [pc, #120]	; (80232fc <MotherboardInit+0x9c>)
 8023282:	443c      	add	r4, r7
 8023284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8023286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8023288:	e894 0003 	ldmia.w	r4, {r0, r1}
 802328c:	e885 0003 	stmia.w	r5, {r0, r1}
 8023290:	4b17      	ldr	r3, [pc, #92]	; (80232f0 <MotherboardInit+0x90>)
 8023292:	443b      	add	r3, r7
 8023294:	cb0e      	ldmia	r3, {r1, r2, r3}
 8023296:	4630      	mov	r0, r6
 8023298:	f7ff fdb2 	bl	8022e00 <_ZN18MotherboardContextC1E17MotherboardConfig>
 802329c:	4b15      	ldr	r3, [pc, #84]	; (80232f4 <MotherboardInit+0x94>)
 802329e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80232a2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80232a6:	443b      	add	r3, r7
 80232a8:	4619      	mov	r1, r3
 80232aa:	4815      	ldr	r0, [pc, #84]	; (8023300 <MotherboardInit+0xa0>)
 80232ac:	f7ff ff54 	bl	8023158 <_ZN18MotherboardContextaSEOS_>
 80232b0:	4b10      	ldr	r3, [pc, #64]	; (80232f4 <MotherboardInit+0x94>)
 80232b2:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80232b6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80232ba:	443b      	add	r3, r7
 80232bc:	4618      	mov	r0, r3
 80232be:	f7ff feb9 	bl	8023034 <_ZN18MotherboardContextD1Ev>

	mbctx.HeadService.ResetReadState();
 80232c2:	480f      	ldr	r0, [pc, #60]	; (8023300 <MotherboardInit+0xa0>)
 80232c4:	f7fe fd38 	bl	8021d38 <_ZN13HeadInterface14ResetReadStateEv>
	mbctx.HeadStream.ResetReadState();
 80232c8:	480e      	ldr	r0, [pc, #56]	; (8023304 <MotherboardInit+0xa4>)
 80232ca:	f7fe fd35 	bl	8021d38 <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 80232ce:	2100      	movs	r1, #0
 80232d0:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8023308 <MotherboardInit+0xa8>
 80232d4:	480d      	ldr	r0, [pc, #52]	; (802330c <MotherboardInit+0xac>)
 80232d6:	f7fd f9f9 	bl	80206cc <_ZN10BHYWrapper4InitEfm>
 80232da:	4603      	mov	r3, r0
}
 80232dc:	4618      	mov	r0, r3
 80232de:	f507 3710 	add.w	r7, r7, #147456	; 0x24000
 80232e2:	f507 7755 	add.w	r7, r7, #852	; 0x354
 80232e6:	46bd      	mov	sp, r7
 80232e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80232ec:	b004      	add	sp, #16
 80232ee:	4770      	bx	lr
 80232f0:	00024368 	.word	0x00024368
 80232f4:	fffdbcb0 	.word	0xfffdbcb0
 80232f8:	00024350 	.word	0x00024350
 80232fc:	00024374 	.word	0x00024374
 8023300:	240001d0 	.word	0x240001d0
 8023304:	24000e74 	.word	0x24000e74
 8023308:	44480000 	.word	0x44480000
 802330c:	24023378 	.word	0x24023378

08023310 <MotherboardTick>:

int MotherboardTick() {
 8023310:	b580      	push	{r7, lr}
 8023312:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8023316:	af04      	add	r7, sp, #16
	if (mbctx.StrobeFilter.HasStrobe()) {
 8023318:	485f      	ldr	r0, [pc, #380]	; (8023498 <MotherboardTick+0x188>)
 802331a:	f7ff f889 	bl	8022430 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 802331e:	4603      	mov	r3, r0
 8023320:	2b00      	cmp	r3, #0
 8023322:	d026      	beq.n	8023372 <MotherboardTick+0x62>
		size_t targetSeq = mbctx.StrobeFilter.GetStrobe() + mbctx.StrobeOffset;
 8023324:	485c      	ldr	r0, [pc, #368]	; (8023498 <MotherboardTick+0x188>)
 8023326:	f7ff f861 	bl	80223ec <_ZNK20StrobeDurationFilter9GetStrobeEv>
 802332a:	4602      	mov	r2, r0
 802332c:	4b5b      	ldr	r3, [pc, #364]	; (802349c <MotherboardTick+0x18c>)
 802332e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023332:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8023336:	4413      	add	r3, r2
 8023338:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
		if (mbctx.FrameMemo.Has(targetSeq)) {
 802333c:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 8023340:	4857      	ldr	r0, [pc, #348]	; (80234a0 <MotherboardTick+0x190>)
 8023342:	f7ff fbd7 	bl	8022af4 <_ZNK12IMUFrameMemo3HasEj>
 8023346:	4603      	mov	r3, r0
 8023348:	2b00      	cmp	r3, #0
 802334a:	d012      	beq.n	8023372 <MotherboardTick+0x62>
			mbctx.FrameContainer.Add(mbctx.FrameMemo.Get(targetSeq));
 802334c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023350:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8023354:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8023358:	4951      	ldr	r1, [pc, #324]	; (80234a0 <MotherboardTick+0x190>)
 802335a:	4618      	mov	r0, r3
 802335c:	f7ff fbf0 	bl	8022b40 <_ZNK12IMUFrameMemo3GetEj>
 8023360:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8023364:	4619      	mov	r1, r3
 8023366:	484f      	ldr	r0, [pc, #316]	; (80234a4 <MotherboardTick+0x194>)
 8023368:	f7fe ff12 	bl	8022190 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
			mbctx.StrobeFilter.PopStrobe();
 802336c:	484a      	ldr	r0, [pc, #296]	; (8023498 <MotherboardTick+0x188>)
 802336e:	f7ff f870 	bl	8022452 <_ZN20StrobeDurationFilter9PopStrobeEv>
		}
	}

	if (mbctx.UpdateIMU && mbctx.IMU.Poll()) {
 8023372:	4b4a      	ldr	r3, [pc, #296]	; (802349c <MotherboardTick+0x18c>)
 8023374:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023378:	f893 334c 	ldrb.w	r3, [r3, #844]	; 0x34c
 802337c:	2b00      	cmp	r3, #0
 802337e:	d007      	beq.n	8023390 <MotherboardTick+0x80>
 8023380:	4849      	ldr	r0, [pc, #292]	; (80234a8 <MotherboardTick+0x198>)
 8023382:	f7fd fafb 	bl	802097c <_ZN10BHYWrapper4PollEv>
 8023386:	4603      	mov	r3, r0
 8023388:	2b00      	cmp	r3, #0
 802338a:	d001      	beq.n	8023390 <MotherboardTick+0x80>
 802338c:	2301      	movs	r3, #1
 802338e:	e000      	b.n	8023392 <MotherboardTick+0x82>
 8023390:	2300      	movs	r3, #0
 8023392:	2b00      	cmp	r3, #0
 8023394:	d017      	beq.n	80233c6 <MotherboardTick+0xb6>
		mbctx.FrameMemo.Add(mbctx.IMU.GetFrame(), mbctx.IMU.GetSeq());
 8023396:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 802339a:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 802339e:	4942      	ldr	r1, [pc, #264]	; (80234a8 <MotherboardTick+0x198>)
 80233a0:	4618      	mov	r0, r3
 80233a2:	f7fd fb2f 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>
 80233a6:	4840      	ldr	r0, [pc, #256]	; (80234a8 <MotherboardTick+0x198>)
 80233a8:	f7fd fc34 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 80233ac:	4602      	mov	r2, r0
 80233ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80233b2:	4619      	mov	r1, r3
 80233b4:	483a      	ldr	r0, [pc, #232]	; (80234a0 <MotherboardTick+0x190>)
 80233b6:	f7ff fb6d 	bl	8022a94 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>
		mbctx.UpdateIMU = false;
 80233ba:	4b38      	ldr	r3, [pc, #224]	; (802349c <MotherboardTick+0x18c>)
 80233bc:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80233c0:	2200      	movs	r2, #0
 80233c2:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
	}

	if (mbctx.HeadService.HasRequest()) {
 80233c6:	4835      	ldr	r0, [pc, #212]	; (802349c <MotherboardTick+0x18c>)
 80233c8:	f7fe fcdc 	bl	8021d84 <_ZNK13HeadInterface10HasRequestEv>
 80233cc:	4603      	mov	r3, r0
 80233ce:	2b00      	cmp	r3, #0
 80233d0:	d042      	beq.n	8023458 <MotherboardTick+0x148>
		Request request = mbctx.HeadService.GetRequest();
 80233d2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80233d6:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80233da:	4930      	ldr	r1, [pc, #192]	; (802349c <MotherboardTick+0x18c>)
 80233dc:	4618      	mov	r0, r3
 80233de:	f7fe fd61 	bl	8021ea4 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 80233e2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80233e6:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80233ea:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80233ee:	2b02      	cmp	r3, #2
 80233f0:	d006      	beq.n	8023400 <MotherboardTick+0xf0>
 80233f2:	2b02      	cmp	r3, #2
 80233f4:	dc30      	bgt.n	8023458 <MotherboardTick+0x148>
 80233f6:	2b00      	cmp	r3, #0
 80233f8:	d012      	beq.n	8023420 <MotherboardTick+0x110>
 80233fa:	2b01      	cmp	r3, #1
 80233fc:	d016      	beq.n	802342c <MotherboardTick+0x11c>
 80233fe:	e02b      	b.n	8023458 <MotherboardTick+0x148>
		case Periphery::Ack:
			mbctx.HeadService.Send(mbctx.AckHandler.Handle(request));
 8023400:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023404:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8023408:	463a      	mov	r2, r7
 802340a:	4928      	ldr	r1, [pc, #160]	; (80234ac <MotherboardTick+0x19c>)
 802340c:	4618      	mov	r0, r3
 802340e:	f7ff fc2f 	bl	8022c70 <_ZN18AcknowledgeHandler6HandleERK7Request>
 8023412:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8023416:	4619      	mov	r1, r3
 8023418:	4820      	ldr	r0, [pc, #128]	; (802349c <MotherboardTick+0x18c>)
 802341a:	f7fe fcc3 	bl	8021da4 <_ZN13HeadInterface4SendERK8Responce>
			break;
 802341e:	e01b      	b.n	8023458 <MotherboardTick+0x148>

		case Periphery::Body:
			mbctx.Body.AddRequest(request);
 8023420:	463b      	mov	r3, r7
 8023422:	4619      	mov	r1, r3
 8023424:	4822      	ldr	r0, [pc, #136]	; (80234b0 <MotherboardTick+0x1a0>)
 8023426:	f7fd fe49 	bl	80210bc <_ZN11QueueSender10AddRequestERK7Request>
			break;
 802342a:	e015      	b.n	8023458 <MotherboardTick+0x148>
		case Periphery::Imu:
			mbctx.HeadService.Send(
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
							mbctx.IMU, mbctx.StrobeOffset, mbctx.StrobeFilter));
 802342c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023430:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 8023434:	463a      	mov	r2, r7
 8023436:	4b18      	ldr	r3, [pc, #96]	; (8023498 <MotherboardTick+0x188>)
 8023438:	9302      	str	r3, [sp, #8]
 802343a:	4b1e      	ldr	r3, [pc, #120]	; (80234b4 <MotherboardTick+0x1a4>)
 802343c:	9301      	str	r3, [sp, #4]
 802343e:	4b1a      	ldr	r3, [pc, #104]	; (80234a8 <MotherboardTick+0x198>)
 8023440:	9300      	str	r3, [sp, #0]
 8023442:	4b18      	ldr	r3, [pc, #96]	; (80234a4 <MotherboardTick+0x194>)
 8023444:	491c      	ldr	r1, [pc, #112]	; (80234b8 <MotherboardTick+0x1a8>)
 8023446:	f7ff fab3 	bl	80229b0 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>
			mbctx.HeadService.Send(
 802344a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 802344e:	4619      	mov	r1, r3
 8023450:	4812      	ldr	r0, [pc, #72]	; (802349c <MotherboardTick+0x18c>)
 8023452:	f7fe fca7 	bl	8021da4 <_ZN13HeadInterface4SendERK8Responce>
			break;
 8023456:	bf00      	nop
		}
	}

	if (mbctx.Body.HasResponce()) {
 8023458:	4815      	ldr	r0, [pc, #84]	; (80234b0 <MotherboardTick+0x1a0>)
 802345a:	f7fd fefd 	bl	8021258 <_ZNK11QueueSender11HasResponceEv>
 802345e:	4603      	mov	r3, r0
 8023460:	2b00      	cmp	r3, #0
 8023462:	d00d      	beq.n	8023480 <MotherboardTick+0x170>
		mbctx.HeadService.Send(mbctx.Body.GetResponce());
 8023464:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023468:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802346c:	4910      	ldr	r1, [pc, #64]	; (80234b0 <MotherboardTick+0x1a0>)
 802346e:	4618      	mov	r0, r3
 8023470:	f7fd ff54 	bl	802131c <_ZN11QueueSender11GetResponceEv>
 8023474:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8023478:	4619      	mov	r1, r3
 802347a:	4808      	ldr	r0, [pc, #32]	; (802349c <MotherboardTick+0x18c>)
 802347c:	f7fe fc92 	bl	8021da4 <_ZN13HeadInterface4SendERK8Responce>
	}

	mbctx.Body.ProcessPriorityRequest();
 8023480:	480b      	ldr	r0, [pc, #44]	; (80234b0 <MotherboardTick+0x1a0>)
 8023482:	f7fd ff7f 	bl	8021384 <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbctx.Body.ProcessRequests();
 8023486:	480a      	ldr	r0, [pc, #40]	; (80234b0 <MotherboardTick+0x1a0>)
 8023488:	f7fe f898 	bl	80215bc <_ZN11QueueSender15ProcessRequestsEv>

	return 0;
 802348c:	2300      	movs	r3, #0
}
 802348e:	4618      	mov	r0, r3
 8023490:	f507 678a 	add.w	r7, r7, #1104	; 0x450
 8023494:	46bd      	mov	sp, r7
 8023496:	bd80      	pop	{r7, pc}
 8023498:	240244d4 	.word	0x240244d4
 802349c:	240001d0 	.word	0x240001d0
 80234a0:	24023344 	.word	0x24023344
 80234a4:	24023314 	.word	0x24023314
 80234a8:	24023378 	.word	0x24023378
 80234ac:	24001b18 	.word	0x24001b18
 80234b0:	24001b1c 	.word	0x24001b1c
 80234b4:	24024518 	.word	0x24024518
 80234b8:	240244d0 	.word	0x240244d0

080234bc <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 80234bc:	b580      	push	{r7, lr}
 80234be:	af00      	add	r7, sp, #0
	static bool firstEntry = true;
	if (firstEntry) {
 80234c0:	4b06      	ldr	r3, [pc, #24]	; (80234dc <MotherboardOnStrobe+0x20>)
 80234c2:	781b      	ldrb	r3, [r3, #0]
 80234c4:	2b00      	cmp	r3, #0
 80234c6:	d003      	beq.n	80234d0 <MotherboardOnStrobe+0x14>
		firstEntry = false;
 80234c8:	4b04      	ldr	r3, [pc, #16]	; (80234dc <MotherboardOnStrobe+0x20>)
 80234ca:	2200      	movs	r2, #0
 80234cc:	701a      	strb	r2, [r3, #0]
		return;
 80234ce:	e003      	b.n	80234d8 <MotherboardOnStrobe+0x1c>
	}

	mbctx.StrobeFilter.ProcessStrobe(mbctx.IMU);
 80234d0:	4903      	ldr	r1, [pc, #12]	; (80234e0 <MotherboardOnStrobe+0x24>)
 80234d2:	4804      	ldr	r0, [pc, #16]	; (80234e4 <MotherboardOnStrobe+0x28>)
 80234d4:	f7fe fef3 	bl	80222be <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>
}
 80234d8:	bd80      	pop	{r7, pc}
 80234da:	bf00      	nop
 80234dc:	24000000 	.word	0x24000000
 80234e0:	24023378 	.word	0x24023378
 80234e4:	240244d4 	.word	0x240244d4

080234e8 <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 80234e8:	b580      	push	{r7, lr}
 80234ea:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessResponces();
 80234ec:	4802      	ldr	r0, [pc, #8]	; (80234f8 <MotherboardOnBodyRecieveComplete+0x10>)
 80234ee:	f7fe fba7 	bl	8021c40 <_ZN11QueueSender16ProcessResponcesEv>
}
 80234f2:	bf00      	nop
 80234f4:	bd80      	pop	{r7, pc}
 80234f6:	bf00      	nop
 80234f8:	24001b1c 	.word	0x24001b1c

080234fc <MotherboardOnHeadServiceRecieveComplete>:

void MotherboardOnHeadServiceRecieveComplete() {
 80234fc:	b580      	push	{r7, lr}
 80234fe:	af00      	add	r7, sp, #0
	mbctx.HeadService.ProcessRecievedData();
 8023500:	4802      	ldr	r0, [pc, #8]	; (802350c <MotherboardOnHeadServiceRecieveComplete+0x10>)
 8023502:	f7fe fd0b 	bl	8021f1c <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 8023506:	bf00      	nop
 8023508:	bd80      	pop	{r7, pc}
 802350a:	bf00      	nop
 802350c:	240001d0 	.word	0x240001d0

08023510 <MotherboardOnHeadStreamRecieveComplete>:

void MotherboardOnHeadStreamRecieveComplete() {
 8023510:	b580      	push	{r7, lr}
 8023512:	af00      	add	r7, sp, #0
	mbctx.HeadStream.ProcessRecievedData();
 8023514:	4802      	ldr	r0, [pc, #8]	; (8023520 <MotherboardOnHeadStreamRecieveComplete+0x10>)
 8023516:	f7fe fd01 	bl	8021f1c <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 802351a:	bf00      	nop
 802351c:	bd80      	pop	{r7, pc}
 802351e:	bf00      	nop
 8023520:	24000e74 	.word	0x24000e74

08023524 <MotherboardOnHeadServiceTransmitComplete>:

void MotherboardOnHeadServiceTransmitComplete() {
 8023524:	b580      	push	{r7, lr}
 8023526:	af00      	add	r7, sp, #0
	mbctx.HeadService.FinishTransmit();
 8023528:	4802      	ldr	r0, [pc, #8]	; (8023534 <MotherboardOnHeadServiceTransmitComplete+0x10>)
 802352a:	f7fe fce9 	bl	8021f00 <_ZN13HeadInterface14FinishTransmitEv>
}
 802352e:	bf00      	nop
 8023530:	bd80      	pop	{r7, pc}
 8023532:	bf00      	nop
 8023534:	240001d0 	.word	0x240001d0

08023538 <MotherboardOnHeadStreamTransmitComplete>:

void MotherboardOnHeadStreamTransmitComplete() {
 8023538:	b580      	push	{r7, lr}
 802353a:	af00      	add	r7, sp, #0
	mbctx.HeadStream.FinishTransmit();
 802353c:	4802      	ldr	r0, [pc, #8]	; (8023548 <MotherboardOnHeadStreamTransmitComplete+0x10>)
 802353e:	f7fe fcdf 	bl	8021f00 <_ZN13HeadInterface14FinishTransmitEv>
}
 8023542:	bf00      	nop
 8023544:	bd80      	pop	{r7, pc}
 8023546:	bf00      	nop
 8023548:	24000e74 	.word	0x24000e74

0802354c <MotherboardOnBodyTransmitComplete>:

void MotherboardOnBodyTransmitComplete() {
 802354c:	b580      	push	{r7, lr}
 802354e:	af00      	add	r7, sp, #0
	mbctx.Body.FinishTransmit();
 8023550:	4802      	ldr	r0, [pc, #8]	; (802355c <MotherboardOnBodyTransmitComplete+0x10>)
 8023552:	f7fe fb7f 	bl	8021c54 <_ZN11QueueSender14FinishTransmitEv>
}
 8023556:	bf00      	nop
 8023558:	bd80      	pop	{r7, pc}
 802355a:	bf00      	nop
 802355c:	24001b1c 	.word	0x24001b1c

08023560 <MotherboardOnBodyTimerTick>:
void MotherboardOnBodyTimerTick() {
 8023560:	b580      	push	{r7, lr}
 8023562:	af00      	add	r7, sp, #0
	mbctx.Body.TickTimer();
 8023564:	4802      	ldr	r0, [pc, #8]	; (8023570 <MotherboardOnBodyTimerTick+0x10>)
 8023566:	f7fd fe8b 	bl	8021280 <_ZN11QueueSender9TickTimerEv>
}
 802356a:	bf00      	nop
 802356c:	bd80      	pop	{r7, pc}
 802356e:	bf00      	nop
 8023570:	24001b1c 	.word	0x24001b1c

08023574 <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 8023574:	b480      	push	{r7}
 8023576:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 8023578:	4b05      	ldr	r3, [pc, #20]	; (8023590 <MotherboardOnImuTimerTick+0x1c>)
 802357a:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 802357e:	2201      	movs	r2, #1
 8023580:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
}
 8023584:	bf00      	nop
 8023586:	46bd      	mov	sp, r7
 8023588:	f85d 7b04 	ldr.w	r7, [sp], #4
 802358c:	4770      	bx	lr
 802358e:	bf00      	nop
 8023590:	240001d0 	.word	0x240001d0

08023594 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>:
	bool Push(const T &rhs) {
 8023594:	b580      	push	{r7, lr}
 8023596:	b082      	sub	sp, #8
 8023598:	af00      	add	r7, sp, #0
 802359a:	6078      	str	r0, [r7, #4]
 802359c:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 802359e:	687b      	ldr	r3, [r7, #4]
 80235a0:	681b      	ldr	r3, [r3, #0]
 80235a2:	2b0a      	cmp	r3, #10
 80235a4:	d105      	bne.n	80235b2 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x1e>
 80235a6:	4b18      	ldr	r3, [pc, #96]	; (8023608 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x74>)
 80235a8:	4a18      	ldr	r2, [pc, #96]	; (802360c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x78>)
 80235aa:	2142      	movs	r1, #66	; 0x42
 80235ac:	4818      	ldr	r0, [pc, #96]	; (8023610 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x7c>)
 80235ae:	f018 fbf7 	bl	803bda0 <__assert_func>
		Buffer[Head] = rhs;
 80235b2:	687b      	ldr	r3, [r7, #4]
 80235b4:	f103 020c 	add.w	r2, r3, #12
 80235b8:	687b      	ldr	r3, [r7, #4]
 80235ba:	685b      	ldr	r3, [r3, #4]
 80235bc:	4619      	mov	r1, r3
 80235be:	4610      	mov	r0, r2
 80235c0:	f000 fc07 	bl	8023dd2 <_ZNSt5arrayI8ResponceLj10EEixEj>
 80235c4:	4602      	mov	r2, r0
 80235c6:	683b      	ldr	r3, [r7, #0]
 80235c8:	4610      	mov	r0, r2
 80235ca:	4619      	mov	r1, r3
 80235cc:	f44f 7384 	mov.w	r3, #264	; 0x108
 80235d0:	461a      	mov	r2, r3
 80235d2:	f018 fc4f 	bl	803be74 <memcpy>
		Head = (Head + 1) % Capacity;
 80235d6:	687b      	ldr	r3, [r7, #4]
 80235d8:	685b      	ldr	r3, [r3, #4]
 80235da:	1c59      	adds	r1, r3, #1
 80235dc:	4b0d      	ldr	r3, [pc, #52]	; (8023614 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x80>)
 80235de:	fba3 2301 	umull	r2, r3, r3, r1
 80235e2:	08da      	lsrs	r2, r3, #3
 80235e4:	4613      	mov	r3, r2
 80235e6:	009b      	lsls	r3, r3, #2
 80235e8:	4413      	add	r3, r2
 80235ea:	005b      	lsls	r3, r3, #1
 80235ec:	1aca      	subs	r2, r1, r3
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	605a      	str	r2, [r3, #4]
		Size++;
 80235f2:	687b      	ldr	r3, [r7, #4]
 80235f4:	681b      	ldr	r3, [r3, #0]
 80235f6:	1c5a      	adds	r2, r3, #1
 80235f8:	687b      	ldr	r3, [r7, #4]
 80235fa:	601a      	str	r2, [r3, #0]
		return true;
 80235fc:	2301      	movs	r3, #1
	}
 80235fe:	4618      	mov	r0, r3
 8023600:	3708      	adds	r7, #8
 8023602:	46bd      	mov	sp, r7
 8023604:	bd80      	pop	{r7, pc}
 8023606:	bf00      	nop
 8023608:	0803daf4 	.word	0x0803daf4
 802360c:	0803db08 	.word	0x0803db08
 8023610:	0803cff4 	.word	0x0803cff4
 8023614:	cccccccd 	.word	0xcccccccd

08023618 <_ZNK10FixedQueueI8ResponceLj10EE5EmptyEv>:
	bool Empty() const {
 8023618:	b480      	push	{r7}
 802361a:	b083      	sub	sp, #12
 802361c:	af00      	add	r7, sp, #0
 802361e:	6078      	str	r0, [r7, #4]
		return Size == 0;
 8023620:	687b      	ldr	r3, [r7, #4]
 8023622:	681b      	ldr	r3, [r3, #0]
 8023624:	2b00      	cmp	r3, #0
 8023626:	bf0c      	ite	eq
 8023628:	2301      	moveq	r3, #1
 802362a:	2300      	movne	r3, #0
 802362c:	b2db      	uxtb	r3, r3
	}
 802362e:	4618      	mov	r0, r3
 8023630:	370c      	adds	r7, #12
 8023632:	46bd      	mov	sp, r7
 8023634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023638:	4770      	bx	lr
	...

0802363c <_ZN10FixedQueueI8ResponceLj10EE5FrontEv>:
	T& Front() {
 802363c:	b580      	push	{r7, lr}
 802363e:	b082      	sub	sp, #8
 8023640:	af00      	add	r7, sp, #0
 8023642:	6078      	str	r0, [r7, #4]
		assert(Size);
 8023644:	687b      	ldr	r3, [r7, #4]
 8023646:	681b      	ldr	r3, [r3, #0]
 8023648:	2b00      	cmp	r3, #0
 802364a:	d105      	bne.n	8023658 <_ZN10FixedQueueI8ResponceLj10EE5FrontEv+0x1c>
 802364c:	4b09      	ldr	r3, [pc, #36]	; (8023674 <_ZN10FixedQueueI8ResponceLj10EE5FrontEv+0x38>)
 802364e:	4a0a      	ldr	r2, [pc, #40]	; (8023678 <_ZN10FixedQueueI8ResponceLj10EE5FrontEv+0x3c>)
 8023650:	2157      	movs	r1, #87	; 0x57
 8023652:	480a      	ldr	r0, [pc, #40]	; (802367c <_ZN10FixedQueueI8ResponceLj10EE5FrontEv+0x40>)
 8023654:	f018 fba4 	bl	803bda0 <__assert_func>
		return Buffer[Tail];
 8023658:	687b      	ldr	r3, [r7, #4]
 802365a:	f103 020c 	add.w	r2, r3, #12
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	689b      	ldr	r3, [r3, #8]
 8023662:	4619      	mov	r1, r3
 8023664:	4610      	mov	r0, r2
 8023666:	f000 fbb4 	bl	8023dd2 <_ZNSt5arrayI8ResponceLj10EEixEj>
 802366a:	4603      	mov	r3, r0
	}
 802366c:	4618      	mov	r0, r3
 802366e:	3708      	adds	r7, #8
 8023670:	46bd      	mov	sp, r7
 8023672:	bd80      	pop	{r7, pc}
 8023674:	0803db68 	.word	0x0803db68
 8023678:	0803db70 	.word	0x0803db70
 802367c:	0803cff4 	.word	0x0803cff4

08023680 <_ZN10FixedQueueI8ResponceLj10EE3PopEv>:
	bool Pop() {
 8023680:	b580      	push	{r7, lr}
 8023682:	b082      	sub	sp, #8
 8023684:	af00      	add	r7, sp, #0
 8023686:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8023688:	687b      	ldr	r3, [r7, #4]
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	2b00      	cmp	r3, #0
 802368e:	d105      	bne.n	802369c <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x1c>
 8023690:	4b0e      	ldr	r3, [pc, #56]	; (80236cc <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x4c>)
 8023692:	4a0f      	ldr	r2, [pc, #60]	; (80236d0 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x50>)
 8023694:	214c      	movs	r1, #76	; 0x4c
 8023696:	480f      	ldr	r0, [pc, #60]	; (80236d4 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x54>)
 8023698:	f018 fb82 	bl	803bda0 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 802369c:	687b      	ldr	r3, [r7, #4]
 802369e:	689b      	ldr	r3, [r3, #8]
 80236a0:	1c59      	adds	r1, r3, #1
 80236a2:	4b0d      	ldr	r3, [pc, #52]	; (80236d8 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x58>)
 80236a4:	fba3 2301 	umull	r2, r3, r3, r1
 80236a8:	08da      	lsrs	r2, r3, #3
 80236aa:	4613      	mov	r3, r2
 80236ac:	009b      	lsls	r3, r3, #2
 80236ae:	4413      	add	r3, r2
 80236b0:	005b      	lsls	r3, r3, #1
 80236b2:	1aca      	subs	r2, r1, r3
 80236b4:	687b      	ldr	r3, [r7, #4]
 80236b6:	609a      	str	r2, [r3, #8]
		Size--;
 80236b8:	687b      	ldr	r3, [r7, #4]
 80236ba:	681b      	ldr	r3, [r3, #0]
 80236bc:	1e5a      	subs	r2, r3, #1
 80236be:	687b      	ldr	r3, [r7, #4]
 80236c0:	601a      	str	r2, [r3, #0]
	}
 80236c2:	bf00      	nop
 80236c4:	4618      	mov	r0, r3
 80236c6:	3708      	adds	r7, #8
 80236c8:	46bd      	mov	sp, r7
 80236ca:	bd80      	pop	{r7, pc}
 80236cc:	0803dbc4 	.word	0x0803dbc4
 80236d0:	0803dbd0 	.word	0x0803dbd0
 80236d4:	0803cff4 	.word	0x0803cff4
 80236d8:	cccccccd 	.word	0xcccccccd

080236dc <_ZNSt5arrayIhLj256EE4dataEv>:
      data() noexcept
 80236dc:	b580      	push	{r7, lr}
 80236de:	b082      	sub	sp, #8
 80236e0:	af00      	add	r7, sp, #0
 80236e2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80236e4:	687b      	ldr	r3, [r7, #4]
 80236e6:	4618      	mov	r0, r3
 80236e8:	f000 fb82 	bl	8023df0 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 80236ec:	4603      	mov	r3, r0
 80236ee:	4618      	mov	r0, r3
 80236f0:	3708      	adds	r7, #8
 80236f2:	46bd      	mov	sp, r7
 80236f4:	bd80      	pop	{r7, pc}

080236f6 <_ZNK10FixedQueueI7RequestLj500EE5EmptyEv>:
	bool Empty() const {
 80236f6:	b480      	push	{r7}
 80236f8:	b083      	sub	sp, #12
 80236fa:	af00      	add	r7, sp, #0
 80236fc:	6078      	str	r0, [r7, #4]
		return Size == 0;
 80236fe:	687b      	ldr	r3, [r7, #4]
 8023700:	681b      	ldr	r3, [r3, #0]
 8023702:	2b00      	cmp	r3, #0
 8023704:	bf0c      	ite	eq
 8023706:	2301      	moveq	r3, #1
 8023708:	2300      	movne	r3, #0
 802370a:	b2db      	uxtb	r3, r3
	}
 802370c:	4618      	mov	r0, r3
 802370e:	370c      	adds	r7, #12
 8023710:	46bd      	mov	sp, r7
 8023712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023716:	4770      	bx	lr

08023718 <_ZN10FixedQueueI7RequestLj500EE5FrontEv>:
	T& Front() {
 8023718:	b580      	push	{r7, lr}
 802371a:	b082      	sub	sp, #8
 802371c:	af00      	add	r7, sp, #0
 802371e:	6078      	str	r0, [r7, #4]
		assert(Size);
 8023720:	687b      	ldr	r3, [r7, #4]
 8023722:	681b      	ldr	r3, [r3, #0]
 8023724:	2b00      	cmp	r3, #0
 8023726:	d105      	bne.n	8023734 <_ZN10FixedQueueI7RequestLj500EE5FrontEv+0x1c>
 8023728:	4b09      	ldr	r3, [pc, #36]	; (8023750 <_ZN10FixedQueueI7RequestLj500EE5FrontEv+0x38>)
 802372a:	4a0a      	ldr	r2, [pc, #40]	; (8023754 <_ZN10FixedQueueI7RequestLj500EE5FrontEv+0x3c>)
 802372c:	2157      	movs	r1, #87	; 0x57
 802372e:	480a      	ldr	r0, [pc, #40]	; (8023758 <_ZN10FixedQueueI7RequestLj500EE5FrontEv+0x40>)
 8023730:	f018 fb36 	bl	803bda0 <__assert_func>
		return Buffer[Tail];
 8023734:	687b      	ldr	r3, [r7, #4]
 8023736:	f103 020c 	add.w	r2, r3, #12
 802373a:	687b      	ldr	r3, [r7, #4]
 802373c:	689b      	ldr	r3, [r3, #8]
 802373e:	4619      	mov	r1, r3
 8023740:	4610      	mov	r0, r2
 8023742:	f000 fb60 	bl	8023e06 <_ZNSt5arrayI7RequestLj500EEixEj>
 8023746:	4603      	mov	r3, r0
	}
 8023748:	4618      	mov	r0, r3
 802374a:	3708      	adds	r7, #8
 802374c:	46bd      	mov	sp, r7
 802374e:	bd80      	pop	{r7, pc}
 8023750:	0803db68 	.word	0x0803db68
 8023754:	0803dc24 	.word	0x0803dc24
 8023758:	0803cff4 	.word	0x0803cff4

0802375c <_ZNSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) noexcept
 802375c:	b580      	push	{r7, lr}
 802375e:	b082      	sub	sp, #8
 8023760:	af00      	add	r7, sp, #0
 8023762:	6078      	str	r0, [r7, #4]
 8023764:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023766:	687b      	ldr	r3, [r7, #4]
 8023768:	6839      	ldr	r1, [r7, #0]
 802376a:	4618      	mov	r0, r3
 802376c:	f000 f84e 	bl	802380c <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8023770:	4603      	mov	r3, r0
 8023772:	4618      	mov	r0, r3
 8023774:	3708      	adds	r7, #8
 8023776:	46bd      	mov	sp, r7
 8023778:	bd80      	pop	{r7, pc}
	...

0802377c <_ZN10FixedQueueI7RequestLj500EE3PopEv>:
	bool Pop() {
 802377c:	b580      	push	{r7, lr}
 802377e:	b082      	sub	sp, #8
 8023780:	af00      	add	r7, sp, #0
 8023782:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8023784:	687b      	ldr	r3, [r7, #4]
 8023786:	681b      	ldr	r3, [r3, #0]
 8023788:	2b00      	cmp	r3, #0
 802378a:	d105      	bne.n	8023798 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x1c>
 802378c:	4b0e      	ldr	r3, [pc, #56]	; (80237c8 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x4c>)
 802378e:	4a0f      	ldr	r2, [pc, #60]	; (80237cc <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x50>)
 8023790:	214c      	movs	r1, #76	; 0x4c
 8023792:	480f      	ldr	r0, [pc, #60]	; (80237d0 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x54>)
 8023794:	f018 fb04 	bl	803bda0 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8023798:	687b      	ldr	r3, [r7, #4]
 802379a:	689b      	ldr	r3, [r3, #8]
 802379c:	1c5a      	adds	r2, r3, #1
 802379e:	4b0d      	ldr	r3, [pc, #52]	; (80237d4 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x58>)
 80237a0:	fba3 1302 	umull	r1, r3, r3, r2
 80237a4:	095b      	lsrs	r3, r3, #5
 80237a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80237aa:	fb01 f303 	mul.w	r3, r1, r3
 80237ae:	1ad3      	subs	r3, r2, r3
 80237b0:	687a      	ldr	r2, [r7, #4]
 80237b2:	6093      	str	r3, [r2, #8]
		Size--;
 80237b4:	687b      	ldr	r3, [r7, #4]
 80237b6:	681b      	ldr	r3, [r3, #0]
 80237b8:	1e5a      	subs	r2, r3, #1
 80237ba:	687b      	ldr	r3, [r7, #4]
 80237bc:	601a      	str	r2, [r3, #0]
	}
 80237be:	bf00      	nop
 80237c0:	4618      	mov	r0, r3
 80237c2:	3708      	adds	r7, #8
 80237c4:	46bd      	mov	sp, r7
 80237c6:	bd80      	pop	{r7, pc}
 80237c8:	0803dbc4 	.word	0x0803dbc4
 80237cc:	0803dc78 	.word	0x0803dc78
 80237d0:	0803cff4 	.word	0x0803cff4
 80237d4:	10624dd3 	.word	0x10624dd3

080237d8 <_ZN10FixedQueueI7RequestLj500EE5ClearEv>:
	void Clear() {
 80237d8:	b580      	push	{r7, lr}
 80237da:	b082      	sub	sp, #8
 80237dc:	af00      	add	r7, sp, #0
 80237de:	6078      	str	r0, [r7, #4]
		Buffer = std::array<T, Capacity> { };
 80237e0:	687b      	ldr	r3, [r7, #4]
 80237e2:	330c      	adds	r3, #12
 80237e4:	4a08      	ldr	r2, [pc, #32]	; (8023808 <_ZN10FixedQueueI7RequestLj500EE5ClearEv+0x30>)
 80237e6:	2100      	movs	r1, #0
 80237e8:	4618      	mov	r0, r3
 80237ea:	f018 fb6b 	bl	803bec4 <memset>
		Size = 0;
 80237ee:	687b      	ldr	r3, [r7, #4]
 80237f0:	2200      	movs	r2, #0
 80237f2:	601a      	str	r2, [r3, #0]
		Head = 0;
 80237f4:	687b      	ldr	r3, [r7, #4]
 80237f6:	2200      	movs	r2, #0
 80237f8:	605a      	str	r2, [r3, #4]
		Tail = 0;
 80237fa:	687b      	ldr	r3, [r7, #4]
 80237fc:	2200      	movs	r2, #0
 80237fe:	609a      	str	r2, [r3, #8]
	}
 8023800:	bf00      	nop
 8023802:	3708      	adds	r7, #8
 8023804:	46bd      	mov	sp, r7
 8023806:	bd80      	pop	{r7, pc}
 8023808:	00020b70 	.word	0x00020b70

0802380c <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 802380c:	b480      	push	{r7}
 802380e:	b083      	sub	sp, #12
 8023810:	af00      	add	r7, sp, #0
 8023812:	6078      	str	r0, [r7, #4]
 8023814:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8023816:	687a      	ldr	r2, [r7, #4]
 8023818:	683b      	ldr	r3, [r7, #0]
 802381a:	4413      	add	r3, r2
 802381c:	4618      	mov	r0, r3
 802381e:	370c      	adds	r7, #12
 8023820:	46bd      	mov	sp, r7
 8023822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023826:	4770      	bx	lr

08023828 <_ZNK10FixedQueueI7RequestLj500EE4FullEv>:
	bool Full() const {
 8023828:	b480      	push	{r7}
 802382a:	b083      	sub	sp, #12
 802382c:	af00      	add	r7, sp, #0
 802382e:	6078      	str	r0, [r7, #4]
		return Size == Capacity;
 8023830:	687b      	ldr	r3, [r7, #4]
 8023832:	681b      	ldr	r3, [r3, #0]
 8023834:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8023838:	bf0c      	ite	eq
 802383a:	2301      	moveq	r3, #1
 802383c:	2300      	movne	r3, #0
 802383e:	b2db      	uxtb	r3, r3
	}
 8023840:	4618      	mov	r0, r3
 8023842:	370c      	adds	r7, #12
 8023844:	46bd      	mov	sp, r7
 8023846:	f85d 7b04 	ldr.w	r7, [sp], #4
 802384a:	4770      	bx	lr

0802384c <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_>:
	bool Push(const T &rhs) {
 802384c:	b580      	push	{r7, lr}
 802384e:	b082      	sub	sp, #8
 8023850:	af00      	add	r7, sp, #0
 8023852:	6078      	str	r0, [r7, #4]
 8023854:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 8023856:	687b      	ldr	r3, [r7, #4]
 8023858:	681b      	ldr	r3, [r3, #0]
 802385a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 802385e:	d105      	bne.n	802386c <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x20>
 8023860:	4b17      	ldr	r3, [pc, #92]	; (80238c0 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x74>)
 8023862:	4a18      	ldr	r2, [pc, #96]	; (80238c4 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x78>)
 8023864:	2142      	movs	r1, #66	; 0x42
 8023866:	4818      	ldr	r0, [pc, #96]	; (80238c8 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x7c>)
 8023868:	f018 fa9a 	bl	803bda0 <__assert_func>
		Buffer[Head] = rhs;
 802386c:	687b      	ldr	r3, [r7, #4]
 802386e:	f103 020c 	add.w	r2, r3, #12
 8023872:	687b      	ldr	r3, [r7, #4]
 8023874:	685b      	ldr	r3, [r3, #4]
 8023876:	4619      	mov	r1, r3
 8023878:	4610      	mov	r0, r2
 802387a:	f000 fac4 	bl	8023e06 <_ZNSt5arrayI7RequestLj500EEixEj>
 802387e:	4602      	mov	r2, r0
 8023880:	683b      	ldr	r3, [r7, #0]
 8023882:	4610      	mov	r0, r2
 8023884:	4619      	mov	r1, r3
 8023886:	f44f 7386 	mov.w	r3, #268	; 0x10c
 802388a:	461a      	mov	r2, r3
 802388c:	f018 faf2 	bl	803be74 <memcpy>
		Head = (Head + 1) % Capacity;
 8023890:	687b      	ldr	r3, [r7, #4]
 8023892:	685b      	ldr	r3, [r3, #4]
 8023894:	1c5a      	adds	r2, r3, #1
 8023896:	4b0d      	ldr	r3, [pc, #52]	; (80238cc <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x80>)
 8023898:	fba3 1302 	umull	r1, r3, r3, r2
 802389c:	095b      	lsrs	r3, r3, #5
 802389e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80238a2:	fb01 f303 	mul.w	r3, r1, r3
 80238a6:	1ad3      	subs	r3, r2, r3
 80238a8:	687a      	ldr	r2, [r7, #4]
 80238aa:	6053      	str	r3, [r2, #4]
		Size++;
 80238ac:	687b      	ldr	r3, [r7, #4]
 80238ae:	681b      	ldr	r3, [r3, #0]
 80238b0:	1c5a      	adds	r2, r3, #1
 80238b2:	687b      	ldr	r3, [r7, #4]
 80238b4:	601a      	str	r2, [r3, #0]
		return true;
 80238b6:	2301      	movs	r3, #1
	}
 80238b8:	4618      	mov	r0, r3
 80238ba:	3708      	adds	r7, #8
 80238bc:	46bd      	mov	sp, r7
 80238be:	bd80      	pop	{r7, pc}
 80238c0:	0803daf4 	.word	0x0803daf4
 80238c4:	0803dccc 	.word	0x0803dccc
 80238c8:	0803cff4 	.word	0x0803cff4
 80238cc:	10624dd3 	.word	0x10624dd3

080238d0 <_ZNK10FixedQueueI7RequestLj500EE7GetSizeEv>:
	size_t GetSize() const {
 80238d0:	b480      	push	{r7}
 80238d2:	b083      	sub	sp, #12
 80238d4:	af00      	add	r7, sp, #0
 80238d6:	6078      	str	r0, [r7, #4]
		return Size;
 80238d8:	687b      	ldr	r3, [r7, #4]
 80238da:	681b      	ldr	r3, [r3, #0]
	}
 80238dc:	4618      	mov	r0, r3
 80238de:	370c      	adds	r7, #12
 80238e0:	46bd      	mov	sp, r7
 80238e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238e6:	4770      	bx	lr

080238e8 <_ZNK10FixedQueueI8ResponceLj10EE7GetSizeEv>:
	size_t GetSize() const {
 80238e8:	b480      	push	{r7}
 80238ea:	b083      	sub	sp, #12
 80238ec:	af00      	add	r7, sp, #0
 80238ee:	6078      	str	r0, [r7, #4]
		return Size;
 80238f0:	687b      	ldr	r3, [r7, #4]
 80238f2:	681b      	ldr	r3, [r3, #0]
	}
 80238f4:	4618      	mov	r0, r3
 80238f6:	370c      	adds	r7, #12
 80238f8:	46bd      	mov	sp, r7
 80238fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238fe:	4770      	bx	lr

08023900 <_ZNK10FixedQueueI7RequestLj10EE5EmptyEv>:
	bool Empty() const {
 8023900:	b480      	push	{r7}
 8023902:	b083      	sub	sp, #12
 8023904:	af00      	add	r7, sp, #0
 8023906:	6078      	str	r0, [r7, #4]
		return Size == 0;
 8023908:	687b      	ldr	r3, [r7, #4]
 802390a:	681b      	ldr	r3, [r3, #0]
 802390c:	2b00      	cmp	r3, #0
 802390e:	bf0c      	ite	eq
 8023910:	2301      	moveq	r3, #1
 8023912:	2300      	movne	r3, #0
 8023914:	b2db      	uxtb	r3, r3
	}
 8023916:	4618      	mov	r0, r3
 8023918:	370c      	adds	r7, #12
 802391a:	46bd      	mov	sp, r7
 802391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023920:	4770      	bx	lr

08023922 <_ZNKSt5arrayIhLj256EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 8023922:	b580      	push	{r7, lr}
 8023924:	b082      	sub	sp, #8
 8023926:	af00      	add	r7, sp, #0
 8023928:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 802392a:	687b      	ldr	r3, [r7, #4]
 802392c:	4618      	mov	r0, r3
 802392e:	f000 fa5f 	bl	8023df0 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 8023932:	4603      	mov	r3, r0
 8023934:	4618      	mov	r0, r3
 8023936:	3708      	adds	r7, #8
 8023938:	46bd      	mov	sp, r7
 802393a:	bd80      	pop	{r7, pc}

0802393c <_ZN10FixedQueueI7RequestLj10EE5FrontEv>:
	T& Front() {
 802393c:	b580      	push	{r7, lr}
 802393e:	b082      	sub	sp, #8
 8023940:	af00      	add	r7, sp, #0
 8023942:	6078      	str	r0, [r7, #4]
		assert(Size);
 8023944:	687b      	ldr	r3, [r7, #4]
 8023946:	681b      	ldr	r3, [r3, #0]
 8023948:	2b00      	cmp	r3, #0
 802394a:	d105      	bne.n	8023958 <_ZN10FixedQueueI7RequestLj10EE5FrontEv+0x1c>
 802394c:	4b09      	ldr	r3, [pc, #36]	; (8023974 <_ZN10FixedQueueI7RequestLj10EE5FrontEv+0x38>)
 802394e:	4a0a      	ldr	r2, [pc, #40]	; (8023978 <_ZN10FixedQueueI7RequestLj10EE5FrontEv+0x3c>)
 8023950:	2157      	movs	r1, #87	; 0x57
 8023952:	480a      	ldr	r0, [pc, #40]	; (802397c <_ZN10FixedQueueI7RequestLj10EE5FrontEv+0x40>)
 8023954:	f018 fa24 	bl	803bda0 <__assert_func>
		return Buffer[Tail];
 8023958:	687b      	ldr	r3, [r7, #4]
 802395a:	f103 020c 	add.w	r2, r3, #12
 802395e:	687b      	ldr	r3, [r7, #4]
 8023960:	689b      	ldr	r3, [r3, #8]
 8023962:	4619      	mov	r1, r3
 8023964:	4610      	mov	r0, r2
 8023966:	f000 fa5d 	bl	8023e24 <_ZNSt5arrayI7RequestLj10EEixEj>
 802396a:	4603      	mov	r3, r0
	}
 802396c:	4618      	mov	r0, r3
 802396e:	3708      	adds	r7, #8
 8023970:	46bd      	mov	sp, r7
 8023972:	bd80      	pop	{r7, pc}
 8023974:	0803db68 	.word	0x0803db68
 8023978:	0803dd2c 	.word	0x0803dd2c
 802397c:	0803cff4 	.word	0x0803cff4

08023980 <_ZN10FixedQueueI7RequestLj10EE3PopEv>:
	bool Pop() {
 8023980:	b580      	push	{r7, lr}
 8023982:	b082      	sub	sp, #8
 8023984:	af00      	add	r7, sp, #0
 8023986:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8023988:	687b      	ldr	r3, [r7, #4]
 802398a:	681b      	ldr	r3, [r3, #0]
 802398c:	2b00      	cmp	r3, #0
 802398e:	d105      	bne.n	802399c <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x1c>
 8023990:	4b0e      	ldr	r3, [pc, #56]	; (80239cc <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x4c>)
 8023992:	4a0f      	ldr	r2, [pc, #60]	; (80239d0 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x50>)
 8023994:	214c      	movs	r1, #76	; 0x4c
 8023996:	480f      	ldr	r0, [pc, #60]	; (80239d4 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x54>)
 8023998:	f018 fa02 	bl	803bda0 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 802399c:	687b      	ldr	r3, [r7, #4]
 802399e:	689b      	ldr	r3, [r3, #8]
 80239a0:	1c59      	adds	r1, r3, #1
 80239a2:	4b0d      	ldr	r3, [pc, #52]	; (80239d8 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x58>)
 80239a4:	fba3 2301 	umull	r2, r3, r3, r1
 80239a8:	08da      	lsrs	r2, r3, #3
 80239aa:	4613      	mov	r3, r2
 80239ac:	009b      	lsls	r3, r3, #2
 80239ae:	4413      	add	r3, r2
 80239b0:	005b      	lsls	r3, r3, #1
 80239b2:	1aca      	subs	r2, r1, r3
 80239b4:	687b      	ldr	r3, [r7, #4]
 80239b6:	609a      	str	r2, [r3, #8]
		Size--;
 80239b8:	687b      	ldr	r3, [r7, #4]
 80239ba:	681b      	ldr	r3, [r3, #0]
 80239bc:	1e5a      	subs	r2, r3, #1
 80239be:	687b      	ldr	r3, [r7, #4]
 80239c0:	601a      	str	r2, [r3, #0]
	}
 80239c2:	bf00      	nop
 80239c4:	4618      	mov	r0, r3
 80239c6:	3708      	adds	r7, #8
 80239c8:	46bd      	mov	sp, r7
 80239ca:	bd80      	pop	{r7, pc}
 80239cc:	0803dbc4 	.word	0x0803dbc4
 80239d0:	0803dd80 	.word	0x0803dd80
 80239d4:	0803cff4 	.word	0x0803cff4
 80239d8:	cccccccd 	.word	0xcccccccd

080239dc <_ZNK10FixedQueueI7RequestLj10EE7GetSizeEv>:
	size_t GetSize() const {
 80239dc:	b480      	push	{r7}
 80239de:	b083      	sub	sp, #12
 80239e0:	af00      	add	r7, sp, #0
 80239e2:	6078      	str	r0, [r7, #4]
		return Size;
 80239e4:	687b      	ldr	r3, [r7, #4]
 80239e6:	681b      	ldr	r3, [r3, #0]
	}
 80239e8:	4618      	mov	r0, r3
 80239ea:	370c      	adds	r7, #12
 80239ec:	46bd      	mov	sp, r7
 80239ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239f2:	4770      	bx	lr

080239f4 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_>:
	bool Push(const T &rhs) {
 80239f4:	b580      	push	{r7, lr}
 80239f6:	b082      	sub	sp, #8
 80239f8:	af00      	add	r7, sp, #0
 80239fa:	6078      	str	r0, [r7, #4]
 80239fc:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 80239fe:	687b      	ldr	r3, [r7, #4]
 8023a00:	681b      	ldr	r3, [r3, #0]
 8023a02:	2b0a      	cmp	r3, #10
 8023a04:	d105      	bne.n	8023a12 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x1e>
 8023a06:	4b18      	ldr	r3, [pc, #96]	; (8023a68 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x74>)
 8023a08:	4a18      	ldr	r2, [pc, #96]	; (8023a6c <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x78>)
 8023a0a:	2142      	movs	r1, #66	; 0x42
 8023a0c:	4818      	ldr	r0, [pc, #96]	; (8023a70 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x7c>)
 8023a0e:	f018 f9c7 	bl	803bda0 <__assert_func>
		Buffer[Head] = rhs;
 8023a12:	687b      	ldr	r3, [r7, #4]
 8023a14:	f103 020c 	add.w	r2, r3, #12
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	685b      	ldr	r3, [r3, #4]
 8023a1c:	4619      	mov	r1, r3
 8023a1e:	4610      	mov	r0, r2
 8023a20:	f000 fa00 	bl	8023e24 <_ZNSt5arrayI7RequestLj10EEixEj>
 8023a24:	4602      	mov	r2, r0
 8023a26:	683b      	ldr	r3, [r7, #0]
 8023a28:	4610      	mov	r0, r2
 8023a2a:	4619      	mov	r1, r3
 8023a2c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8023a30:	461a      	mov	r2, r3
 8023a32:	f018 fa1f 	bl	803be74 <memcpy>
		Head = (Head + 1) % Capacity;
 8023a36:	687b      	ldr	r3, [r7, #4]
 8023a38:	685b      	ldr	r3, [r3, #4]
 8023a3a:	1c59      	adds	r1, r3, #1
 8023a3c:	4b0d      	ldr	r3, [pc, #52]	; (8023a74 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x80>)
 8023a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8023a42:	08da      	lsrs	r2, r3, #3
 8023a44:	4613      	mov	r3, r2
 8023a46:	009b      	lsls	r3, r3, #2
 8023a48:	4413      	add	r3, r2
 8023a4a:	005b      	lsls	r3, r3, #1
 8023a4c:	1aca      	subs	r2, r1, r3
 8023a4e:	687b      	ldr	r3, [r7, #4]
 8023a50:	605a      	str	r2, [r3, #4]
		Size++;
 8023a52:	687b      	ldr	r3, [r7, #4]
 8023a54:	681b      	ldr	r3, [r3, #0]
 8023a56:	1c5a      	adds	r2, r3, #1
 8023a58:	687b      	ldr	r3, [r7, #4]
 8023a5a:	601a      	str	r2, [r3, #0]
		return true;
 8023a5c:	2301      	movs	r3, #1
	}
 8023a5e:	4618      	mov	r0, r3
 8023a60:	3708      	adds	r7, #8
 8023a62:	46bd      	mov	sp, r7
 8023a64:	bd80      	pop	{r7, pc}
 8023a66:	bf00      	nop
 8023a68:	0803daf4 	.word	0x0803daf4
 8023a6c:	0803ddd4 	.word	0x0803ddd4
 8023a70:	0803cff4 	.word	0x0803cff4
 8023a74:	cccccccd 	.word	0xcccccccd

08023a78 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>:
       *  Note that the assignment completely changes the %deque and that the
       *  resulting %deque's size is the same as the number of elements
       *  assigned.
       */
      deque&
      operator=(initializer_list<value_type> __l)
 8023a78:	b5b0      	push	{r4, r5, r7, lr}
 8023a7a:	b086      	sub	sp, #24
 8023a7c:	af00      	add	r7, sp, #0
 8023a7e:	60f8      	str	r0, [r7, #12]
 8023a80:	1d3b      	adds	r3, r7, #4
 8023a82:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	_M_assign_aux(__l.begin(), __l.end(),
 8023a86:	1d3b      	adds	r3, r7, #4
 8023a88:	4618      	mov	r0, r3
 8023a8a:	f000 f9da 	bl	8023e42 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8023a8e:	4604      	mov	r4, r0
 8023a90:	1d3b      	adds	r3, r7, #4
 8023a92:	4618      	mov	r0, r3
 8023a94:	f000 f9e1 	bl	8023e5a <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>
 8023a98:	4602      	mov	r2, r0
 8023a9a:	462b      	mov	r3, r5
 8023a9c:	4621      	mov	r1, r4
 8023a9e:	68f8      	ldr	r0, [r7, #12]
 8023aa0:	f000 f9f0 	bl	8023e84 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
		      random_access_iterator_tag());
	return *this;
 8023aa4:	68fb      	ldr	r3, [r7, #12]
      }
 8023aa6:	4618      	mov	r0, r3
 8023aa8:	3718      	adds	r7, #24
 8023aaa:	46bd      	mov	sp, r7
 8023aac:	bdb0      	pop	{r4, r5, r7, pc}

08023aae <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>:
       *  element at the front of the %deque and assigns the given
       *  data to it.  Due to the nature of a %deque this operation
       *  can be done in constant time.
       */
      void
      push_front(const value_type& __x)
 8023aae:	b580      	push	{r7, lr}
 8023ab0:	b082      	sub	sp, #8
 8023ab2:	af00      	add	r7, sp, #0
 8023ab4:	6078      	str	r0, [r7, #4]
 8023ab6:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8023ab8:	687b      	ldr	r3, [r7, #4]
 8023aba:	689a      	ldr	r2, [r3, #8]
 8023abc:	687b      	ldr	r3, [r7, #4]
 8023abe:	68db      	ldr	r3, [r3, #12]
 8023ac0:	429a      	cmp	r2, r3
 8023ac2:	d00e      	beq.n	8023ae2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x34>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8023ac4:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8023ac6:	687b      	ldr	r3, [r7, #4]
 8023ac8:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8023aca:	3b14      	subs	r3, #20
 8023acc:	683a      	ldr	r2, [r7, #0]
 8023ace:	4619      	mov	r1, r3
 8023ad0:	f000 fa3d 	bl	8023f4e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    --this->_M_impl._M_start._M_cur;
 8023ad4:	687b      	ldr	r3, [r7, #4]
 8023ad6:	689b      	ldr	r3, [r3, #8]
 8023ad8:	f1a3 0214 	sub.w	r2, r3, #20
 8023adc:	687b      	ldr	r3, [r7, #4]
 8023ade:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_push_front_aux(__x);
      }
 8023ae0:	e003      	b.n	8023aea <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x3c>
	  _M_push_front_aux(__x);
 8023ae2:	6839      	ldr	r1, [r7, #0]
 8023ae4:	6878      	ldr	r0, [r7, #4]
 8023ae6:	f000 fa45 	bl	8023f74 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>
      }
 8023aea:	bf00      	nop
 8023aec:	3708      	adds	r7, #8
 8023aee:	46bd      	mov	sp, r7
 8023af0:	bd80      	pop	{r7, pc}

08023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8023af2:	b580      	push	{r7, lr}
 8023af4:	b082      	sub	sp, #8
 8023af6:	af00      	add	r7, sp, #0
 8023af8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8023afa:	687b      	ldr	r3, [r7, #4]
 8023afc:	f103 0218 	add.w	r2, r3, #24
 8023b00:	687b      	ldr	r3, [r7, #4]
 8023b02:	3308      	adds	r3, #8
 8023b04:	4619      	mov	r1, r3
 8023b06:	4610      	mov	r0, r2
 8023b08:	f000 fa7a 	bl	8024000 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023b0c:	4603      	mov	r3, r0
 8023b0e:	4618      	mov	r0, r3
 8023b10:	3708      	adds	r7, #8
 8023b12:	46bd      	mov	sp, r7
 8023b14:	bd80      	pop	{r7, pc}

08023b16 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8023b16:	b580      	push	{r7, lr}
 8023b18:	b082      	sub	sp, #8
 8023b1a:	af00      	add	r7, sp, #0
 8023b1c:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 8023b1e:	687b      	ldr	r3, [r7, #4]
 8023b20:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8023b22:	687b      	ldr	r3, [r7, #4]
 8023b24:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8023b26:	429a      	cmp	r2, r3
 8023b28:	d011      	beq.n	8023b4e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 8023b2a:	687b      	ldr	r3, [r7, #4]
 8023b2c:	699b      	ldr	r3, [r3, #24]
 8023b2e:	f1a3 0214 	sub.w	r2, r3, #20
 8023b32:	687b      	ldr	r3, [r7, #4]
 8023b34:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023b36:	687b      	ldr	r3, [r7, #4]
 8023b38:	4618      	mov	r0, r3
 8023b3a:	f000 fa8d 	bl	8024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023b3e:	4602      	mov	r2, r0
 8023b40:	687b      	ldr	r3, [r7, #4]
 8023b42:	699b      	ldr	r3, [r3, #24]
 8023b44:	4619      	mov	r1, r3
 8023b46:	4610      	mov	r0, r2
 8023b48:	f000 fa91 	bl	802406e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 8023b4c:	e002      	b.n	8023b54 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 8023b4e:	6878      	ldr	r0, [r7, #4]
 8023b50:	f000 fa9a 	bl	8024088 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>
      }
 8023b54:	bf00      	nop
 8023b56:	3708      	adds	r7, #8
 8023b58:	46bd      	mov	sp, r7
 8023b5a:	bd80      	pop	{r7, pc}

08023b5c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8023b5c:	b580      	push	{r7, lr}
 8023b5e:	b082      	sub	sp, #8
 8023b60:	af00      	add	r7, sp, #0
 8023b62:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8023b64:	687b      	ldr	r3, [r7, #4]
 8023b66:	f103 0218 	add.w	r2, r3, #24
 8023b6a:	687b      	ldr	r3, [r7, #4]
 8023b6c:	3308      	adds	r3, #8
 8023b6e:	4619      	mov	r1, r3
 8023b70:	4610      	mov	r0, r2
 8023b72:	f000 fab3 	bl	80240dc <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023b76:	4603      	mov	r3, r0
 8023b78:	4618      	mov	r0, r3
 8023b7a:	3708      	adds	r7, #8
 8023b7c:	46bd      	mov	sp, r7
 8023b7e:	bd80      	pop	{r7, pc}

08023b80 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8023b80:	b580      	push	{r7, lr}
 8023b82:	b082      	sub	sp, #8
 8023b84:	af00      	add	r7, sp, #0
 8023b86:	6078      	str	r0, [r7, #4]
 8023b88:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	3308      	adds	r3, #8
 8023b8e:	683a      	ldr	r2, [r7, #0]
 8023b90:	4611      	mov	r1, r2
 8023b92:	4618      	mov	r0, r3
 8023b94:	f000 fab6 	bl	8024104 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>
 8023b98:	4603      	mov	r3, r0
      }
 8023b9a:	4618      	mov	r0, r3
 8023b9c:	3708      	adds	r7, #8
 8023b9e:	46bd      	mov	sp, r7
 8023ba0:	bd80      	pop	{r7, pc}

08023ba2 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8023ba2:	b580      	push	{r7, lr}
 8023ba4:	b082      	sub	sp, #8
 8023ba6:	af00      	add	r7, sp, #0
 8023ba8:	6078      	str	r0, [r7, #4]
 8023baa:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8023bac:	687b      	ldr	r3, [r7, #4]
 8023bae:	6839      	ldr	r1, [r7, #0]
 8023bb0:	4618      	mov	r0, r3
 8023bb2:	f000 fabd 	bl	8024130 <_ZNSt5dequeIjSaIjEE9push_backERKj>
 8023bb6:	bf00      	nop
 8023bb8:	3708      	adds	r7, #8
 8023bba:	46bd      	mov	sp, r7
 8023bbc:	bd80      	pop	{r7, pc}

08023bbe <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>:
      front() const
 8023bbe:	b580      	push	{r7, lr}
 8023bc0:	b082      	sub	sp, #8
 8023bc2:	af00      	add	r7, sp, #0
 8023bc4:	6078      	str	r0, [r7, #4]
	return c.front();
 8023bc6:	687b      	ldr	r3, [r7, #4]
 8023bc8:	4618      	mov	r0, r3
 8023bca:	f000 fad2 	bl	8024172 <_ZNKSt5dequeIjSaIjEE5frontEv>
 8023bce:	4603      	mov	r3, r0
      }
 8023bd0:	4618      	mov	r0, r3
 8023bd2:	3708      	adds	r7, #8
 8023bd4:	46bd      	mov	sp, r7
 8023bd6:	bd80      	pop	{r7, pc}

08023bd8 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>:
      empty() const
 8023bd8:	b580      	push	{r7, lr}
 8023bda:	b082      	sub	sp, #8
 8023bdc:	af00      	add	r7, sp, #0
 8023bde:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8023be0:	687b      	ldr	r3, [r7, #4]
 8023be2:	4618      	mov	r0, r3
 8023be4:	f000 fad9 	bl	802419a <_ZNKSt5dequeIjSaIjEE5emptyEv>
 8023be8:	4603      	mov	r3, r0
 8023bea:	4618      	mov	r0, r3
 8023bec:	3708      	adds	r7, #8
 8023bee:	46bd      	mov	sp, r7
 8023bf0:	bd80      	pop	{r7, pc}

08023bf2 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8023bf2:	b580      	push	{r7, lr}
 8023bf4:	b082      	sub	sp, #8
 8023bf6:	af00      	add	r7, sp, #0
 8023bf8:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8023bfa:	687b      	ldr	r3, [r7, #4]
 8023bfc:	4618      	mov	r0, r3
 8023bfe:	f000 fade 	bl	80241be <_ZNSt5dequeIjSaIjEE9pop_frontEv>
      }
 8023c02:	bf00      	nop
 8023c04:	3708      	adds	r7, #8
 8023c06:	46bd      	mov	sp, r7
 8023c08:	bd80      	pop	{r7, pc}

08023c0a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 8023c0a:	b580      	push	{r7, lr}
 8023c0c:	b086      	sub	sp, #24
 8023c0e:	af00      	add	r7, sp, #0
 8023c10:	6078      	str	r0, [r7, #4]
	return *begin();
 8023c12:	f107 0308 	add.w	r3, r7, #8
 8023c16:	6879      	ldr	r1, [r7, #4]
 8023c18:	4618      	mov	r0, r3
 8023c1a:	f000 faf3 	bl	8024204 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023c1e:	f107 0308 	add.w	r3, r7, #8
 8023c22:	4618      	mov	r0, r3
 8023c24:	f000 fafd 	bl	8024222 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>
 8023c28:	4603      	mov	r3, r0
      }
 8023c2a:	4618      	mov	r0, r3
 8023c2c:	3718      	adds	r7, #24
 8023c2e:	46bd      	mov	sp, r7
 8023c30:	bd80      	pop	{r7, pc}

08023c32 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8023c32:	b580      	push	{r7, lr}
 8023c34:	b082      	sub	sp, #8
 8023c36:	af00      	add	r7, sp, #0
 8023c38:	6078      	str	r0, [r7, #4]
 8023c3a:	6878      	ldr	r0, [r7, #4]
 8023c3c:	f000 fb0d 	bl	802425a <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>
 8023c40:	687b      	ldr	r3, [r7, #4]
 8023c42:	4618      	mov	r0, r3
 8023c44:	3708      	adds	r7, #8
 8023c46:	46bd      	mov	sp, r7
 8023c48:	bd80      	pop	{r7, pc}

08023c4a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
      _Deque_base()
 8023c4a:	b580      	push	{r7, lr}
 8023c4c:	b082      	sub	sp, #8
 8023c4e:	af00      	add	r7, sp, #0
 8023c50:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8023c52:	687b      	ldr	r3, [r7, #4]
 8023c54:	4618      	mov	r0, r3
 8023c56:	f000 faf0 	bl	802423a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8023c5a:	2100      	movs	r1, #0
 8023c5c:	6878      	ldr	r0, [r7, #4]
 8023c5e:	f000 fb08 	bl	8024272 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>
 8023c62:	687b      	ldr	r3, [r7, #4]
 8023c64:	4618      	mov	r0, r3
 8023c66:	3708      	adds	r7, #8
 8023c68:	46bd      	mov	sp, r7
 8023c6a:	bd80      	pop	{r7, pc}

08023c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8023c6c:	b580      	push	{r7, lr}
 8023c6e:	b082      	sub	sp, #8
 8023c70:	af00      	add	r7, sp, #0
 8023c72:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8023c74:	687b      	ldr	r3, [r7, #4]
 8023c76:	681b      	ldr	r3, [r3, #0]
 8023c78:	2b00      	cmp	r3, #0
 8023c7a:	d010      	beq.n	8023c9e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023c7c:	687b      	ldr	r3, [r7, #4]
 8023c7e:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8023c80:	687b      	ldr	r3, [r7, #4]
 8023c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023c84:	3304      	adds	r3, #4
 8023c86:	461a      	mov	r2, r3
 8023c88:	6878      	ldr	r0, [r7, #4]
 8023c8a:	f000 fb58 	bl	802433e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8023c8e:	687b      	ldr	r3, [r7, #4]
 8023c90:	6819      	ldr	r1, [r3, #0]
 8023c92:	687b      	ldr	r3, [r7, #4]
 8023c94:	685b      	ldr	r3, [r3, #4]
 8023c96:	461a      	mov	r2, r3
 8023c98:	6878      	ldr	r0, [r7, #4]
 8023c9a:	f000 fb6a 	bl	8024372 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8023c9e:	687b      	ldr	r3, [r7, #4]
 8023ca0:	4618      	mov	r0, r3
 8023ca2:	f7ff ffc6 	bl	8023c32 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>
 8023ca6:	687b      	ldr	r3, [r7, #4]
 8023ca8:	4618      	mov	r0, r3
 8023caa:	3708      	adds	r7, #8
 8023cac:	46bd      	mov	sp, r7
 8023cae:	bd80      	pop	{r7, pc}

08023cb0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
      ~deque()
 8023cb0:	b580      	push	{r7, lr}
 8023cb2:	b08a      	sub	sp, #40	; 0x28
 8023cb4:	af00      	add	r7, sp, #0
 8023cb6:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023cb8:	f107 0308 	add.w	r3, r7, #8
 8023cbc:	6879      	ldr	r1, [r7, #4]
 8023cbe:	4618      	mov	r0, r3
 8023cc0:	f000 fb73 	bl	80243aa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023cc4:	f107 0318 	add.w	r3, r7, #24
 8023cc8:	6879      	ldr	r1, [r7, #4]
 8023cca:	4618      	mov	r0, r3
 8023ccc:	f000 fb7c 	bl	80243c8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023cd0:	687b      	ldr	r3, [r7, #4]
 8023cd2:	4618      	mov	r0, r3
 8023cd4:	f000 f9c0 	bl	8024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023cd8:	4603      	mov	r3, r0
 8023cda:	f107 0218 	add.w	r2, r7, #24
 8023cde:	f107 0108 	add.w	r1, r7, #8
 8023ce2:	6878      	ldr	r0, [r7, #4]
 8023ce4:	f000 fb9b 	bl	802441e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	4618      	mov	r0, r3
 8023cec:	f7ff ffbe 	bl	8023c6c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8023cf0:	687b      	ldr	r3, [r7, #4]
 8023cf2:	4618      	mov	r0, r3
 8023cf4:	3728      	adds	r7, #40	; 0x28
 8023cf6:	46bd      	mov	sp, r7
 8023cf8:	bd80      	pop	{r7, pc}

08023cfa <_ZNSt5dequeIjSaIjEEC1Ev>:
      deque() = default;
 8023cfa:	b580      	push	{r7, lr}
 8023cfc:	b082      	sub	sp, #8
 8023cfe:	af00      	add	r7, sp, #0
 8023d00:	6078      	str	r0, [r7, #4]
 8023d02:	687b      	ldr	r3, [r7, #4]
 8023d04:	4618      	mov	r0, r3
 8023d06:	f000 fba3 	bl	8024450 <_ZNSt11_Deque_baseIjSaIjEEC1Ev>
 8023d0a:	687b      	ldr	r3, [r7, #4]
 8023d0c:	4618      	mov	r0, r3
 8023d0e:	3708      	adds	r7, #8
 8023d10:	46bd      	mov	sp, r7
 8023d12:	bd80      	pop	{r7, pc}

08023d14 <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>:
	queue()
 8023d14:	b580      	push	{r7, lr}
 8023d16:	b082      	sub	sp, #8
 8023d18:	af00      	add	r7, sp, #0
 8023d1a:	6078      	str	r0, [r7, #4]
	: c() { }
 8023d1c:	687b      	ldr	r3, [r7, #4]
 8023d1e:	4618      	mov	r0, r3
 8023d20:	2328      	movs	r3, #40	; 0x28
 8023d22:	461a      	mov	r2, r3
 8023d24:	2100      	movs	r1, #0
 8023d26:	f018 f8cd 	bl	803bec4 <memset>
 8023d2a:	687b      	ldr	r3, [r7, #4]
 8023d2c:	4618      	mov	r0, r3
 8023d2e:	f7ff ffe4 	bl	8023cfa <_ZNSt5dequeIjSaIjEEC1Ev>
 8023d32:	687b      	ldr	r3, [r7, #4]
 8023d34:	4618      	mov	r0, r3
 8023d36:	3708      	adds	r7, #8
 8023d38:	46bd      	mov	sp, r7
 8023d3a:	bd80      	pop	{r7, pc}

08023d3c <_ZNSt5dequeIjSaIjEED1Ev>:
      ~deque()
 8023d3c:	b580      	push	{r7, lr}
 8023d3e:	b08a      	sub	sp, #40	; 0x28
 8023d40:	af00      	add	r7, sp, #0
 8023d42:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023d44:	f107 0308 	add.w	r3, r7, #8
 8023d48:	6879      	ldr	r1, [r7, #4]
 8023d4a:	4618      	mov	r0, r3
 8023d4c:	f000 fbb3 	bl	80244b6 <_ZNSt5dequeIjSaIjEE5beginEv>
 8023d50:	f107 0318 	add.w	r3, r7, #24
 8023d54:	6879      	ldr	r1, [r7, #4]
 8023d56:	4618      	mov	r0, r3
 8023d58:	f000 fbbc 	bl	80244d4 <_ZNSt5dequeIjSaIjEE3endEv>
 8023d5c:	687b      	ldr	r3, [r7, #4]
 8023d5e:	4618      	mov	r0, r3
 8023d60:	f000 fbc7 	bl	80244f2 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8023d64:	4603      	mov	r3, r0
 8023d66:	f107 0218 	add.w	r2, r7, #24
 8023d6a:	f107 0108 	add.w	r1, r7, #8
 8023d6e:	6878      	ldr	r0, [r7, #4]
 8023d70:	f000 fbe6 	bl	8024540 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
 8023d74:	687b      	ldr	r3, [r7, #4]
 8023d76:	4618      	mov	r0, r3
 8023d78:	f000 fb7b 	bl	8024472 <_ZNSt11_Deque_baseIjSaIjEED1Ev>
 8023d7c:	687b      	ldr	r3, [r7, #4]
 8023d7e:	4618      	mov	r0, r3
 8023d80:	3728      	adds	r7, #40	; 0x28
 8023d82:	46bd      	mov	sp, r7
 8023d84:	bd80      	pop	{r7, pc}

08023d86 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023d86:	b590      	push	{r4, r7, lr}
 8023d88:	b083      	sub	sp, #12
 8023d8a:	af00      	add	r7, sp, #0
 8023d8c:	6078      	str	r0, [r7, #4]
 8023d8e:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023d90:	6838      	ldr	r0, [r7, #0]
 8023d92:	f000 fbe2 	bl	802455a <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8023d96:	4603      	mov	r3, r0
 8023d98:	4622      	mov	r2, r4
 8023d9a:	4619      	mov	r1, r3
 8023d9c:	6878      	ldr	r0, [r7, #4]
 8023d9e:	f000 fbe7 	bl	8024570 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>
	return *this;
 8023da2:	687b      	ldr	r3, [r7, #4]
      }
 8023da4:	4618      	mov	r0, r3
 8023da6:	370c      	adds	r7, #12
 8023da8:	46bd      	mov	sp, r7
 8023daa:	bd90      	pop	{r4, r7, pc}

08023dac <_ZNSt5dequeIjSaIjEEaSEOS1_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023dac:	b590      	push	{r4, r7, lr}
 8023dae:	b083      	sub	sp, #12
 8023db0:	af00      	add	r7, sp, #0
 8023db2:	6078      	str	r0, [r7, #4]
 8023db4:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023db6:	6838      	ldr	r0, [r7, #0]
 8023db8:	f000 fbfb 	bl	80245b2 <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>
 8023dbc:	4603      	mov	r3, r0
 8023dbe:	4622      	mov	r2, r4
 8023dc0:	4619      	mov	r1, r3
 8023dc2:	6878      	ldr	r0, [r7, #4]
 8023dc4:	f000 fc00 	bl	80245c8 <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>
	return *this;
 8023dc8:	687b      	ldr	r3, [r7, #4]
      }
 8023dca:	4618      	mov	r0, r3
 8023dcc:	370c      	adds	r7, #12
 8023dce:	46bd      	mov	sp, r7
 8023dd0:	bd90      	pop	{r4, r7, pc}

08023dd2 <_ZNSt5arrayI8ResponceLj10EEixEj>:
      operator[](size_type __n) noexcept
 8023dd2:	b580      	push	{r7, lr}
 8023dd4:	b082      	sub	sp, #8
 8023dd6:	af00      	add	r7, sp, #0
 8023dd8:	6078      	str	r0, [r7, #4]
 8023dda:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023ddc:	687b      	ldr	r3, [r7, #4]
 8023dde:	6839      	ldr	r1, [r7, #0]
 8023de0:	4618      	mov	r0, r3
 8023de2:	f000 fc12 	bl	802460a <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>
 8023de6:	4603      	mov	r3, r0
 8023de8:	4618      	mov	r0, r3
 8023dea:	3708      	adds	r7, #8
 8023dec:	46bd      	mov	sp, r7
 8023dee:	bd80      	pop	{r7, pc}

08023df0 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8023df0:	b480      	push	{r7}
 8023df2:	b083      	sub	sp, #12
 8023df4:	af00      	add	r7, sp, #0
 8023df6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8023df8:	687b      	ldr	r3, [r7, #4]
 8023dfa:	4618      	mov	r0, r3
 8023dfc:	370c      	adds	r7, #12
 8023dfe:	46bd      	mov	sp, r7
 8023e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e04:	4770      	bx	lr

08023e06 <_ZNSt5arrayI7RequestLj500EEixEj>:
      operator[](size_type __n) noexcept
 8023e06:	b580      	push	{r7, lr}
 8023e08:	b082      	sub	sp, #8
 8023e0a:	af00      	add	r7, sp, #0
 8023e0c:	6078      	str	r0, [r7, #4]
 8023e0e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023e10:	687b      	ldr	r3, [r7, #4]
 8023e12:	6839      	ldr	r1, [r7, #0]
 8023e14:	4618      	mov	r0, r3
 8023e16:	f000 fc0a 	bl	802462e <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>
 8023e1a:	4603      	mov	r3, r0
 8023e1c:	4618      	mov	r0, r3
 8023e1e:	3708      	adds	r7, #8
 8023e20:	46bd      	mov	sp, r7
 8023e22:	bd80      	pop	{r7, pc}

08023e24 <_ZNSt5arrayI7RequestLj10EEixEj>:
      operator[](size_type __n) noexcept
 8023e24:	b580      	push	{r7, lr}
 8023e26:	b082      	sub	sp, #8
 8023e28:	af00      	add	r7, sp, #0
 8023e2a:	6078      	str	r0, [r7, #4]
 8023e2c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023e2e:	687b      	ldr	r3, [r7, #4]
 8023e30:	6839      	ldr	r1, [r7, #0]
 8023e32:	4618      	mov	r0, r3
 8023e34:	f000 fc0d 	bl	8024652 <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>
 8023e38:	4603      	mov	r3, r0
 8023e3a:	4618      	mov	r0, r3
 8023e3c:	3708      	adds	r7, #8
 8023e3e:	46bd      	mov	sp, r7
 8023e40:	bd80      	pop	{r7, pc}

08023e42 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8023e42:	b480      	push	{r7}
 8023e44:	b083      	sub	sp, #12
 8023e46:	af00      	add	r7, sp, #0
 8023e48:	6078      	str	r0, [r7, #4]
 8023e4a:	687b      	ldr	r3, [r7, #4]
 8023e4c:	681b      	ldr	r3, [r3, #0]
 8023e4e:	4618      	mov	r0, r3
 8023e50:	370c      	adds	r7, #12
 8023e52:	46bd      	mov	sp, r7
 8023e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e58:	4770      	bx	lr

08023e5a <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8023e5a:	b590      	push	{r4, r7, lr}
 8023e5c:	b083      	sub	sp, #12
 8023e5e:	af00      	add	r7, sp, #0
 8023e60:	6078      	str	r0, [r7, #4]
 8023e62:	6878      	ldr	r0, [r7, #4]
 8023e64:	f7ff ffed 	bl	8023e42 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8023e68:	4604      	mov	r4, r0
 8023e6a:	6878      	ldr	r0, [r7, #4]
 8023e6c:	f000 fc03 	bl	8024676 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>
 8023e70:	4602      	mov	r2, r0
 8023e72:	4613      	mov	r3, r2
 8023e74:	009b      	lsls	r3, r3, #2
 8023e76:	4413      	add	r3, r2
 8023e78:	009b      	lsls	r3, r3, #2
 8023e7a:	4423      	add	r3, r4
 8023e7c:	4618      	mov	r0, r3
 8023e7e:	370c      	adds	r7, #12
 8023e80:	46bd      	mov	sp, r7
 8023e82:	bd90      	pop	{r4, r7, pc}

08023e84 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
		      std::input_iterator_tag);

      // called by the second assign_dispatch above
      template<typename _ForwardIterator>
	void
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 8023e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e86:	b09f      	sub	sp, #124	; 0x7c
 8023e88:	af02      	add	r7, sp, #8
 8023e8a:	60f8      	str	r0, [r7, #12]
 8023e8c:	60b9      	str	r1, [r7, #8]
 8023e8e:	607a      	str	r2, [r7, #4]
 8023e90:	703b      	strb	r3, [r7, #0]
		      std::forward_iterator_tag)
	{
	  const size_type __len = std::distance(__first, __last);
 8023e92:	68bb      	ldr	r3, [r7, #8]
 8023e94:	6879      	ldr	r1, [r7, #4]
 8023e96:	4618      	mov	r0, r3
 8023e98:	f000 fbf9 	bl	802468e <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8023e9c:	4603      	mov	r3, r0
 8023e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 8023ea0:	68f8      	ldr	r0, [r7, #12]
 8023ea2:	f7ff fe26 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023ea6:	4602      	mov	r2, r0
 8023ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023eaa:	4293      	cmp	r3, r2
 8023eac:	bf8c      	ite	hi
 8023eae:	2301      	movhi	r3, #1
 8023eb0:	2300      	movls	r3, #0
 8023eb2:	b2db      	uxtb	r3, r3
 8023eb4:	2b00      	cmp	r3, #0
 8023eb6:	d031      	beq.n	8023f1c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x98>
	    {
	      _ForwardIterator __mid = __first;
 8023eb8:	68bb      	ldr	r3, [r7, #8]
 8023eba:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 8023ebc:	68f8      	ldr	r0, [r7, #12]
 8023ebe:	f7ff fe18 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023ec2:	4602      	mov	r2, r0
 8023ec4:	f107 0314 	add.w	r3, r7, #20
 8023ec8:	4611      	mov	r1, r2
 8023eca:	4618      	mov	r0, r3
 8023ecc:	f000 fbf3 	bl	80246b6 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8023ed0:	68bc      	ldr	r4, [r7, #8]
 8023ed2:	697d      	ldr	r5, [r7, #20]
 8023ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023ed8:	68f9      	ldr	r1, [r7, #12]
 8023eda:	4618      	mov	r0, r3
 8023edc:	f000 fa65 	bl	80243aa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023ee0:	f107 0018 	add.w	r0, r7, #24
 8023ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023ee8:	462a      	mov	r2, r5
 8023eea:	4621      	mov	r1, r4
 8023eec:	f000 fbf6 	bl	80246dc <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_range_insert_aux(end(), __mid, __last,
 8023ef0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8023ef4:	68f9      	ldr	r1, [r7, #12]
 8023ef6:	4618      	mov	r0, r3
 8023ef8:	f000 fa66 	bl	80243c8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023efc:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8023efe:	f107 0308 	add.w	r3, r7, #8
 8023f02:	4618      	mov	r0, r3
 8023f04:	f000 fc0a 	bl	802471c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
	      _M_range_insert_aux(end(), __mid, __last,
 8023f08:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8023f0c:	f88d 6000 	strb.w	r6, [sp]
 8023f10:	687b      	ldr	r3, [r7, #4]
 8023f12:	4622      	mov	r2, r4
 8023f14:	68f8      	ldr	r0, [r7, #12]
 8023f16:	f000 fc0c 	bl	8024732 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>
	    }
	  else
	    _M_erase_at_end(std::copy(__first, __last, begin()));
	}
 8023f1a:	e014      	b.n	8023f46 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8023f1c:	68bc      	ldr	r4, [r7, #8]
 8023f1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023f22:	68f9      	ldr	r1, [r7, #12]
 8023f24:	4618      	mov	r0, r3
 8023f26:	f000 fa40 	bl	80243aa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023f2a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8023f2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023f32:	687a      	ldr	r2, [r7, #4]
 8023f34:	4621      	mov	r1, r4
 8023f36:	f000 fbd1 	bl	80246dc <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8023f3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8023f3e:	4619      	mov	r1, r3
 8023f40:	68f8      	ldr	r0, [r7, #12]
 8023f42:	f000 fc73 	bl	802482c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
	}
 8023f46:	bf00      	nop
 8023f48:	3774      	adds	r7, #116	; 0x74
 8023f4a:	46bd      	mov	sp, r7
 8023f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023f4e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8023f4e:	b580      	push	{r7, lr}
 8023f50:	b084      	sub	sp, #16
 8023f52:	af00      	add	r7, sp, #0
 8023f54:	60f8      	str	r0, [r7, #12]
 8023f56:	60b9      	str	r1, [r7, #8]
 8023f58:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8023f5a:	6878      	ldr	r0, [r7, #4]
 8023f5c:	f000 fc99 	bl	8024892 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8023f60:	4603      	mov	r3, r0
 8023f62:	461a      	mov	r2, r3
 8023f64:	68b9      	ldr	r1, [r7, #8]
 8023f66:	68f8      	ldr	r0, [r7, #12]
 8023f68:	f000 fc9e 	bl	80248a8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8023f6c:	bf00      	nop
 8023f6e:	3710      	adds	r7, #16
 8023f70:	46bd      	mov	sp, r7
 8023f72:	bd80      	pop	{r7, pc}

08023f74 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>:
  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8023f74:	b5b0      	push	{r4, r5, r7, lr}
 8023f76:	b082      	sub	sp, #8
 8023f78:	af00      	add	r7, sp, #0
 8023f7a:	6078      	str	r0, [r7, #4]
 8023f7c:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8023f7e:	6878      	ldr	r0, [r7, #4]
 8023f80:	f7ff fdb7 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023f84:	4604      	mov	r4, r0
 8023f86:	6878      	ldr	r0, [r7, #4]
 8023f88:	f000 fca7 	bl	80248da <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8023f8c:	4603      	mov	r3, r0
 8023f8e:	429c      	cmp	r4, r3
 8023f90:	bf0c      	ite	eq
 8023f92:	2301      	moveq	r3, #1
 8023f94:	2300      	movne	r3, #0
 8023f96:	b2db      	uxtb	r3, r3
 8023f98:	2b00      	cmp	r3, #0
 8023f9a:	d002      	beq.n	8023fa2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8023f9c:	4817      	ldr	r0, [pc, #92]	; (8023ffc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x88>)
 8023f9e:	f017 fee9 	bl	803bd74 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_front();
 8023fa2:	2101      	movs	r1, #1
 8023fa4:	6878      	ldr	r0, [r7, #4]
 8023fa6:	f000 fca9 	bl	80248fc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8023faa:	687a      	ldr	r2, [r7, #4]
 8023fac:	687b      	ldr	r3, [r7, #4]
 8023fae:	695b      	ldr	r3, [r3, #20]
 8023fb0:	1f1c      	subs	r4, r3, #4
 8023fb2:	4610      	mov	r0, r2
 8023fb4:	f000 fcba 	bl	802492c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8023fb8:	4603      	mov	r3, r0
 8023fba:	6023      	str	r3, [r4, #0]
	__try
	  {
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8023fbc:	687b      	ldr	r3, [r7, #4]
 8023fbe:	f103 0208 	add.w	r2, r3, #8
 8023fc2:	687b      	ldr	r3, [r7, #4]
 8023fc4:	695b      	ldr	r3, [r3, #20]
 8023fc6:	3b04      	subs	r3, #4
 8023fc8:	4619      	mov	r1, r3
 8023fca:	4610      	mov	r0, r2
 8023fcc:	f000 fcc0 	bl	8024950 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
					       - 1);
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8023fd0:	687b      	ldr	r3, [r7, #4]
 8023fd2:	691b      	ldr	r3, [r3, #16]
 8023fd4:	f1a3 0214 	sub.w	r2, r3, #20
 8023fd8:	687b      	ldr	r3, [r7, #4]
 8023fda:	609a      	str	r2, [r3, #8]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8023fdc:	687c      	ldr	r4, [r7, #4]
 8023fde:	687b      	ldr	r3, [r7, #4]
 8023fe0:	689d      	ldr	r5, [r3, #8]
 8023fe2:	6838      	ldr	r0, [r7, #0]
 8023fe4:	f000 fc55 	bl	8024892 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8023fe8:	4603      	mov	r3, r0
 8023fea:	461a      	mov	r2, r3
 8023fec:	4629      	mov	r1, r5
 8023fee:	4620      	mov	r0, r4
 8023ff0:	f7ff ffad 	bl	8023f4e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  {
	    ++this->_M_impl._M_start;
	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
	    __throw_exception_again;
	  }
      }
 8023ff4:	bf00      	nop
 8023ff6:	3708      	adds	r7, #8
 8023ff8:	46bd      	mov	sp, r7
 8023ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8023ffc:	0803de30 	.word	0x0803de30

08024000 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024000:	b580      	push	{r7, lr}
 8024002:	b082      	sub	sp, #8
 8024004:	af00      	add	r7, sp, #0
 8024006:	6078      	str	r0, [r7, #4]
 8024008:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 802400a:	f000 fcd0 	bl	80249ae <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802400e:	4603      	mov	r3, r0
 8024010:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8024012:	687b      	ldr	r3, [r7, #4]
 8024014:	68da      	ldr	r2, [r3, #12]
 8024016:	683b      	ldr	r3, [r7, #0]
 8024018:	68db      	ldr	r3, [r3, #12]
 802401a:	1ad3      	subs	r3, r2, r3
 802401c:	109b      	asrs	r3, r3, #2
 802401e:	3b01      	subs	r3, #1
 8024020:	fb01 f303 	mul.w	r3, r1, r3
 8024024:	687a      	ldr	r2, [r7, #4]
 8024026:	6811      	ldr	r1, [r2, #0]
 8024028:	687a      	ldr	r2, [r7, #4]
 802402a:	6852      	ldr	r2, [r2, #4]
 802402c:	1a8a      	subs	r2, r1, r2
 802402e:	1092      	asrs	r2, r2, #2
 8024030:	4908      	ldr	r1, [pc, #32]	; (8024054 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8024032:	fb01 f202 	mul.w	r2, r1, r2
 8024036:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8024038:	683a      	ldr	r2, [r7, #0]
 802403a:	6891      	ldr	r1, [r2, #8]
 802403c:	683a      	ldr	r2, [r7, #0]
 802403e:	6812      	ldr	r2, [r2, #0]
 8024040:	1a8a      	subs	r2, r1, r2
 8024042:	1092      	asrs	r2, r2, #2
 8024044:	4903      	ldr	r1, [pc, #12]	; (8024054 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8024046:	fb01 f202 	mul.w	r2, r1, r2
 802404a:	4413      	add	r3, r2
      }
 802404c:	4618      	mov	r0, r3
 802404e:	3708      	adds	r7, #8
 8024050:	46bd      	mov	sp, r7
 8024052:	bd80      	pop	{r7, pc}
 8024054:	cccccccd 	.word	0xcccccccd

08024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8024058:	b480      	push	{r7}
 802405a:	b083      	sub	sp, #12
 802405c:	af00      	add	r7, sp, #0
 802405e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8024060:	687b      	ldr	r3, [r7, #4]
 8024062:	4618      	mov	r0, r3
 8024064:	370c      	adds	r7, #12
 8024066:	46bd      	mov	sp, r7
 8024068:	f85d 7b04 	ldr.w	r7, [sp], #4
 802406c:	4770      	bx	lr

0802406e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 802406e:	b580      	push	{r7, lr}
 8024070:	b082      	sub	sp, #8
 8024072:	af00      	add	r7, sp, #0
 8024074:	6078      	str	r0, [r7, #4]
 8024076:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8024078:	6839      	ldr	r1, [r7, #0]
 802407a:	6878      	ldr	r0, [r7, #4]
 802407c:	f000 fc9f 	bl	80249be <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8024080:	bf00      	nop
 8024082:	3708      	adds	r7, #8
 8024084:	46bd      	mov	sp, r7
 8024086:	bd80      	pop	{r7, pc}

08024088 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>:

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8024088:	b580      	push	{r7, lr}
 802408a:	b082      	sub	sp, #8
 802408c:	af00      	add	r7, sp, #0
 802408e:	6078      	str	r0, [r7, #4]
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8024090:	687a      	ldr	r2, [r7, #4]
 8024092:	687b      	ldr	r3, [r7, #4]
 8024094:	69db      	ldr	r3, [r3, #28]
 8024096:	4619      	mov	r1, r3
 8024098:	4610      	mov	r0, r2
 802409a:	f000 fc75 	bl	8024988 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 802409e:	687b      	ldr	r3, [r7, #4]
 80240a0:	f103 0218 	add.w	r2, r3, #24
 80240a4:	687b      	ldr	r3, [r7, #4]
 80240a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80240a8:	3b04      	subs	r3, #4
 80240aa:	4619      	mov	r1, r3
 80240ac:	4610      	mov	r0, r2
 80240ae:	f000 fc4f 	bl	8024950 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 80240b2:	687b      	ldr	r3, [r7, #4]
 80240b4:	6a1b      	ldr	r3, [r3, #32]
 80240b6:	f1a3 0214 	sub.w	r2, r3, #20
 80240ba:	687b      	ldr	r3, [r7, #4]
 80240bc:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80240be:	687b      	ldr	r3, [r7, #4]
 80240c0:	4618      	mov	r0, r3
 80240c2:	f7ff ffc9 	bl	8024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80240c6:	4602      	mov	r2, r0
 80240c8:	687b      	ldr	r3, [r7, #4]
 80240ca:	699b      	ldr	r3, [r3, #24]
 80240cc:	4619      	mov	r1, r3
 80240ce:	4610      	mov	r0, r2
 80240d0:	f7ff ffcd 	bl	802406e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_finish._M_cur);
    }
 80240d4:	bf00      	nop
 80240d6:	3708      	adds	r7, #8
 80240d8:	46bd      	mov	sp, r7
 80240da:	bd80      	pop	{r7, pc}

080240dc <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80240dc:	b480      	push	{r7}
 80240de:	b083      	sub	sp, #12
 80240e0:	af00      	add	r7, sp, #0
 80240e2:	6078      	str	r0, [r7, #4]
 80240e4:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80240e6:	687b      	ldr	r3, [r7, #4]
 80240e8:	681a      	ldr	r2, [r3, #0]
 80240ea:	683b      	ldr	r3, [r7, #0]
 80240ec:	681b      	ldr	r3, [r3, #0]
 80240ee:	429a      	cmp	r2, r3
 80240f0:	bf0c      	ite	eq
 80240f2:	2301      	moveq	r3, #1
 80240f4:	2300      	movne	r3, #0
 80240f6:	b2db      	uxtb	r3, r3
 80240f8:	4618      	mov	r0, r3
 80240fa:	370c      	adds	r7, #12
 80240fc:	46bd      	mov	sp, r7
 80240fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024102:	4770      	bx	lr

08024104 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8024104:	b580      	push	{r7, lr}
 8024106:	b086      	sub	sp, #24
 8024108:	af00      	add	r7, sp, #0
 802410a:	6078      	str	r0, [r7, #4]
 802410c:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 802410e:	f107 0308 	add.w	r3, r7, #8
 8024112:	683a      	ldr	r2, [r7, #0]
 8024114:	6879      	ldr	r1, [r7, #4]
 8024116:	4618      	mov	r0, r3
 8024118:	f000 fc5c 	bl	80249d4 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 802411c:	f107 0308 	add.w	r3, r7, #8
 8024120:	4618      	mov	r0, r3
 8024122:	f000 fc6a 	bl	80249fa <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>
 8024126:	4603      	mov	r3, r0
 8024128:	4618      	mov	r0, r3
 802412a:	3718      	adds	r7, #24
 802412c:	46bd      	mov	sp, r7
 802412e:	bd80      	pop	{r7, pc}

08024130 <_ZNSt5dequeIjSaIjEE9push_backERKj>:
      push_back(const value_type& __x)
 8024130:	b580      	push	{r7, lr}
 8024132:	b082      	sub	sp, #8
 8024134:	af00      	add	r7, sp, #0
 8024136:	6078      	str	r0, [r7, #4]
 8024138:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 802413a:	687b      	ldr	r3, [r7, #4]
 802413c:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 802413e:	687b      	ldr	r3, [r7, #4]
 8024140:	6a1b      	ldr	r3, [r3, #32]
 8024142:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8024144:	429a      	cmp	r2, r3
 8024146:	d00c      	beq.n	8024162 <_ZNSt5dequeIjSaIjEE9push_backERKj+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8024148:	6878      	ldr	r0, [r7, #4]
 802414a:	687b      	ldr	r3, [r7, #4]
 802414c:	699b      	ldr	r3, [r3, #24]
 802414e:	683a      	ldr	r2, [r7, #0]
 8024150:	4619      	mov	r1, r3
 8024152:	f000 fc5e 	bl	8024a12 <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8024156:	687b      	ldr	r3, [r7, #4]
 8024158:	699b      	ldr	r3, [r3, #24]
 802415a:	1d1a      	adds	r2, r3, #4
 802415c:	687b      	ldr	r3, [r7, #4]
 802415e:	619a      	str	r2, [r3, #24]
      }
 8024160:	e003      	b.n	802416a <_ZNSt5dequeIjSaIjEE9push_backERKj+0x3a>
	  _M_push_back_aux(__x);
 8024162:	6839      	ldr	r1, [r7, #0]
 8024164:	6878      	ldr	r0, [r7, #4]
 8024166:	f000 fc67 	bl	8024a38 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>
      }
 802416a:	bf00      	nop
 802416c:	3708      	adds	r7, #8
 802416e:	46bd      	mov	sp, r7
 8024170:	bd80      	pop	{r7, pc}

08024172 <_ZNKSt5dequeIjSaIjEE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 8024172:	b580      	push	{r7, lr}
 8024174:	b086      	sub	sp, #24
 8024176:	af00      	add	r7, sp, #0
 8024178:	6078      	str	r0, [r7, #4]
	return *begin();
 802417a:	f107 0308 	add.w	r3, r7, #8
 802417e:	6879      	ldr	r1, [r7, #4]
 8024180:	4618      	mov	r0, r3
 8024182:	f000 fc9d 	bl	8024ac0 <_ZNKSt5dequeIjSaIjEE5beginEv>
 8024186:	f107 0308 	add.w	r3, r7, #8
 802418a:	4618      	mov	r0, r3
 802418c:	f000 fca7 	bl	8024ade <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>
 8024190:	4603      	mov	r3, r0
      }
 8024192:	4618      	mov	r0, r3
 8024194:	3718      	adds	r7, #24
 8024196:	46bd      	mov	sp, r7
 8024198:	bd80      	pop	{r7, pc}

0802419a <_ZNKSt5dequeIjSaIjEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 802419a:	b580      	push	{r7, lr}
 802419c:	b082      	sub	sp, #8
 802419e:	af00      	add	r7, sp, #0
 80241a0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80241a2:	687b      	ldr	r3, [r7, #4]
 80241a4:	f103 0218 	add.w	r2, r3, #24
 80241a8:	687b      	ldr	r3, [r7, #4]
 80241aa:	3308      	adds	r3, #8
 80241ac:	4619      	mov	r1, r3
 80241ae:	4610      	mov	r0, r2
 80241b0:	f000 fca1 	bl	8024af6 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>
 80241b4:	4603      	mov	r3, r0
 80241b6:	4618      	mov	r0, r3
 80241b8:	3708      	adds	r7, #8
 80241ba:	46bd      	mov	sp, r7
 80241bc:	bd80      	pop	{r7, pc}

080241be <_ZNSt5dequeIjSaIjEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 80241be:	b580      	push	{r7, lr}
 80241c0:	b082      	sub	sp, #8
 80241c2:	af00      	add	r7, sp, #0
 80241c4:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80241c6:	687b      	ldr	r3, [r7, #4]
 80241c8:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80241ca:	687b      	ldr	r3, [r7, #4]
 80241cc:	691b      	ldr	r3, [r3, #16]
 80241ce:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 80241d0:	429a      	cmp	r2, r3
 80241d2:	d010      	beq.n	80241f6 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80241d4:	687b      	ldr	r3, [r7, #4]
 80241d6:	4618      	mov	r0, r3
 80241d8:	f000 f98b 	bl	80244f2 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80241dc:	4602      	mov	r2, r0
 80241de:	687b      	ldr	r3, [r7, #4]
 80241e0:	689b      	ldr	r3, [r3, #8]
 80241e2:	4619      	mov	r1, r3
 80241e4:	4610      	mov	r0, r2
 80241e6:	f000 fc9a 	bl	8024b1e <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80241ea:	687b      	ldr	r3, [r7, #4]
 80241ec:	689b      	ldr	r3, [r3, #8]
 80241ee:	1d1a      	adds	r2, r3, #4
 80241f0:	687b      	ldr	r3, [r7, #4]
 80241f2:	609a      	str	r2, [r3, #8]
      }
 80241f4:	e002      	b.n	80241fc <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 80241f6:	6878      	ldr	r0, [r7, #4]
 80241f8:	f000 fc9e 	bl	8024b38 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>
      }
 80241fc:	bf00      	nop
 80241fe:	3708      	adds	r7, #8
 8024200:	46bd      	mov	sp, r7
 8024202:	bd80      	pop	{r7, pc}

08024204 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8024204:	b580      	push	{r7, lr}
 8024206:	b082      	sub	sp, #8
 8024208:	af00      	add	r7, sp, #0
 802420a:	6078      	str	r0, [r7, #4]
 802420c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 802420e:	683b      	ldr	r3, [r7, #0]
 8024210:	3308      	adds	r3, #8
 8024212:	4619      	mov	r1, r3
 8024214:	6878      	ldr	r0, [r7, #4]
 8024216:	f000 fcb7 	bl	8024b88 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>
 802421a:	6878      	ldr	r0, [r7, #4]
 802421c:	3708      	adds	r7, #8
 802421e:	46bd      	mov	sp, r7
 8024220:	bd80      	pop	{r7, pc}

08024222 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8024222:	b480      	push	{r7}
 8024224:	b083      	sub	sp, #12
 8024226:	af00      	add	r7, sp, #0
 8024228:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 802422a:	687b      	ldr	r3, [r7, #4]
 802422c:	681b      	ldr	r3, [r3, #0]
 802422e:	4618      	mov	r0, r3
 8024230:	370c      	adds	r7, #12
 8024232:	46bd      	mov	sp, r7
 8024234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024238:	4770      	bx	lr

0802423a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 802423a:	b580      	push	{r7, lr}
 802423c:	b082      	sub	sp, #8
 802423e:	af00      	add	r7, sp, #0
 8024240:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8024242:	6878      	ldr	r0, [r7, #4]
 8024244:	f000 fcbc 	bl	8024bc0 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>
 8024248:	687b      	ldr	r3, [r7, #4]
 802424a:	4618      	mov	r0, r3
 802424c:	f000 fcc4 	bl	8024bd8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 8024250:	687b      	ldr	r3, [r7, #4]
 8024252:	4618      	mov	r0, r3
 8024254:	3708      	adds	r7, #8
 8024256:	46bd      	mov	sp, r7
 8024258:	bd80      	pop	{r7, pc}

0802425a <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 802425a:	b580      	push	{r7, lr}
 802425c:	b082      	sub	sp, #8
 802425e:	af00      	add	r7, sp, #0
 8024260:	6078      	str	r0, [r7, #4]
 8024262:	6878      	ldr	r0, [r7, #4]
 8024264:	f000 fcd1 	bl	8024c0a <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>
 8024268:	687b      	ldr	r3, [r7, #4]
 802426a:	4618      	mov	r0, r3
 802426c:	3708      	adds	r7, #8
 802426e:	46bd      	mov	sp, r7
 8024270:	bd80      	pop	{r7, pc}

08024272 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8024272:	b590      	push	{r4, r7, lr}
 8024274:	b089      	sub	sp, #36	; 0x24
 8024276:	af00      	add	r7, sp, #0
 8024278:	6078      	str	r0, [r7, #4]
 802427a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 802427c:	2014      	movs	r0, #20
 802427e:	f7fc fe23 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024282:	4602      	mov	r2, r0
 8024284:	683b      	ldr	r3, [r7, #0]
 8024286:	fbb3 f3f2 	udiv	r3, r3, r2
 802428a:	3301      	adds	r3, #1
 802428c:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802428e:	2308      	movs	r3, #8
 8024290:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8024292:	69fb      	ldr	r3, [r7, #28]
 8024294:	3302      	adds	r3, #2
 8024296:	613b      	str	r3, [r7, #16]
 8024298:	f107 0210 	add.w	r2, r7, #16
 802429c:	f107 030c 	add.w	r3, r7, #12
 80242a0:	4611      	mov	r1, r2
 80242a2:	4618      	mov	r0, r3
 80242a4:	f000 fcbc 	bl	8024c20 <_ZSt3maxIjERKT_S2_S2_>
 80242a8:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80242aa:	681a      	ldr	r2, [r3, #0]
 80242ac:	687b      	ldr	r3, [r7, #4]
 80242ae:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80242b0:	687b      	ldr	r3, [r7, #4]
 80242b2:	685b      	ldr	r3, [r3, #4]
 80242b4:	4619      	mov	r1, r3
 80242b6:	6878      	ldr	r0, [r7, #4]
 80242b8:	f000 fcc6 	bl	8024c48 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 80242bc:	4602      	mov	r2, r0
 80242be:	687b      	ldr	r3, [r7, #4]
 80242c0:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80242c2:	687b      	ldr	r3, [r7, #4]
 80242c4:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80242c6:	687b      	ldr	r3, [r7, #4]
 80242c8:	6859      	ldr	r1, [r3, #4]
 80242ca:	69fb      	ldr	r3, [r7, #28]
 80242cc:	1acb      	subs	r3, r1, r3
 80242ce:	085b      	lsrs	r3, r3, #1
 80242d0:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80242d2:	4413      	add	r3, r2
 80242d4:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80242d6:	69fb      	ldr	r3, [r7, #28]
 80242d8:	009b      	lsls	r3, r3, #2
 80242da:	69ba      	ldr	r2, [r7, #24]
 80242dc:	4413      	add	r3, r2
 80242de:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80242e0:	697a      	ldr	r2, [r7, #20]
 80242e2:	69b9      	ldr	r1, [r7, #24]
 80242e4:	6878      	ldr	r0, [r7, #4]
 80242e6:	f000 fccc 	bl	8024c82 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80242ea:	687b      	ldr	r3, [r7, #4]
 80242ec:	3308      	adds	r3, #8
 80242ee:	69b9      	ldr	r1, [r7, #24]
 80242f0:	4618      	mov	r0, r3
 80242f2:	f000 fb2d 	bl	8024950 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80242f6:	687b      	ldr	r3, [r7, #4]
 80242f8:	f103 0218 	add.w	r2, r3, #24
 80242fc:	697b      	ldr	r3, [r7, #20]
 80242fe:	3b04      	subs	r3, #4
 8024300:	4619      	mov	r1, r3
 8024302:	4610      	mov	r0, r2
 8024304:	f000 fb24 	bl	8024950 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8024308:	687b      	ldr	r3, [r7, #4]
 802430a:	68da      	ldr	r2, [r3, #12]
 802430c:	687b      	ldr	r3, [r7, #4]
 802430e:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024310:	687b      	ldr	r3, [r7, #4]
 8024312:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8024314:	2014      	movs	r0, #20
 8024316:	f7fc fdd7 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 802431a:	4602      	mov	r2, r0
 802431c:	683b      	ldr	r3, [r7, #0]
 802431e:	fbb3 f1f2 	udiv	r1, r3, r2
 8024322:	fb01 f202 	mul.w	r2, r1, r2
 8024326:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8024328:	4613      	mov	r3, r2
 802432a:	009b      	lsls	r3, r3, #2
 802432c:	4413      	add	r3, r2
 802432e:	009b      	lsls	r3, r3, #2
 8024330:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024332:	687b      	ldr	r3, [r7, #4]
 8024334:	619a      	str	r2, [r3, #24]
    }
 8024336:	bf00      	nop
 8024338:	3724      	adds	r7, #36	; 0x24
 802433a:	46bd      	mov	sp, r7
 802433c:	bd90      	pop	{r4, r7, pc}

0802433e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 802433e:	b580      	push	{r7, lr}
 8024340:	b086      	sub	sp, #24
 8024342:	af00      	add	r7, sp, #0
 8024344:	60f8      	str	r0, [r7, #12]
 8024346:	60b9      	str	r1, [r7, #8]
 8024348:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 802434a:	68bb      	ldr	r3, [r7, #8]
 802434c:	617b      	str	r3, [r7, #20]
 802434e:	697a      	ldr	r2, [r7, #20]
 8024350:	687b      	ldr	r3, [r7, #4]
 8024352:	429a      	cmp	r2, r3
 8024354:	d209      	bcs.n	802436a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8024356:	697b      	ldr	r3, [r7, #20]
 8024358:	681b      	ldr	r3, [r3, #0]
 802435a:	4619      	mov	r1, r3
 802435c:	68f8      	ldr	r0, [r7, #12]
 802435e:	f000 fb13 	bl	8024988 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024362:	697b      	ldr	r3, [r7, #20]
 8024364:	3304      	adds	r3, #4
 8024366:	617b      	str	r3, [r7, #20]
 8024368:	e7f1      	b.n	802434e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 802436a:	bf00      	nop
 802436c:	3718      	adds	r7, #24
 802436e:	46bd      	mov	sp, r7
 8024370:	bd80      	pop	{r7, pc}

08024372 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8024372:	b580      	push	{r7, lr}
 8024374:	b086      	sub	sp, #24
 8024376:	af00      	add	r7, sp, #0
 8024378:	60f8      	str	r0, [r7, #12]
 802437a:	60b9      	str	r1, [r7, #8]
 802437c:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802437e:	f107 0314 	add.w	r3, r7, #20
 8024382:	68f9      	ldr	r1, [r7, #12]
 8024384:	4618      	mov	r0, r3
 8024386:	f000 fc96 	bl	8024cb6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 802438a:	f107 0314 	add.w	r3, r7, #20
 802438e:	687a      	ldr	r2, [r7, #4]
 8024390:	68b9      	ldr	r1, [r7, #8]
 8024392:	4618      	mov	r0, r3
 8024394:	f000 fcac 	bl	8024cf0 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024398:	f107 0314 	add.w	r3, r7, #20
 802439c:	4618      	mov	r0, r3
 802439e:	f000 fc9b 	bl	8024cd8 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
      }
 80243a2:	bf00      	nop
 80243a4:	3718      	adds	r7, #24
 80243a6:	46bd      	mov	sp, r7
 80243a8:	bd80      	pop	{r7, pc}

080243aa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80243aa:	b580      	push	{r7, lr}
 80243ac:	b082      	sub	sp, #8
 80243ae:	af00      	add	r7, sp, #0
 80243b0:	6078      	str	r0, [r7, #4]
 80243b2:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80243b4:	683b      	ldr	r3, [r7, #0]
 80243b6:	3308      	adds	r3, #8
 80243b8:	4619      	mov	r1, r3
 80243ba:	6878      	ldr	r0, [r7, #4]
 80243bc:	f000 f813 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80243c0:	6878      	ldr	r0, [r7, #4]
 80243c2:	3708      	adds	r7, #8
 80243c4:	46bd      	mov	sp, r7
 80243c6:	bd80      	pop	{r7, pc}

080243c8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80243c8:	b580      	push	{r7, lr}
 80243ca:	b082      	sub	sp, #8
 80243cc:	af00      	add	r7, sp, #0
 80243ce:	6078      	str	r0, [r7, #4]
 80243d0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80243d2:	683b      	ldr	r3, [r7, #0]
 80243d4:	3318      	adds	r3, #24
 80243d6:	4619      	mov	r1, r3
 80243d8:	6878      	ldr	r0, [r7, #4]
 80243da:	f000 f804 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80243de:	6878      	ldr	r0, [r7, #4]
 80243e0:	3708      	adds	r7, #8
 80243e2:	46bd      	mov	sp, r7
 80243e4:	bd80      	pop	{r7, pc}

080243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80243e6:	b480      	push	{r7}
 80243e8:	b083      	sub	sp, #12
 80243ea:	af00      	add	r7, sp, #0
 80243ec:	6078      	str	r0, [r7, #4]
 80243ee:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80243f0:	683b      	ldr	r3, [r7, #0]
 80243f2:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80243f4:	687b      	ldr	r3, [r7, #4]
 80243f6:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80243f8:	683b      	ldr	r3, [r7, #0]
 80243fa:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80243fc:	687b      	ldr	r3, [r7, #4]
 80243fe:	605a      	str	r2, [r3, #4]
 8024400:	683b      	ldr	r3, [r7, #0]
 8024402:	689a      	ldr	r2, [r3, #8]
 8024404:	687b      	ldr	r3, [r7, #4]
 8024406:	609a      	str	r2, [r3, #8]
 8024408:	683b      	ldr	r3, [r7, #0]
 802440a:	68da      	ldr	r2, [r3, #12]
 802440c:	687b      	ldr	r3, [r7, #4]
 802440e:	60da      	str	r2, [r3, #12]
 8024410:	687b      	ldr	r3, [r7, #4]
 8024412:	4618      	mov	r0, r3
 8024414:	370c      	adds	r7, #12
 8024416:	46bd      	mov	sp, r7
 8024418:	f85d 7b04 	ldr.w	r7, [sp], #4
 802441c:	4770      	bx	lr

0802441e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 802441e:	b480      	push	{r7}
 8024420:	b08d      	sub	sp, #52	; 0x34
 8024422:	af00      	add	r7, sp, #0
 8024424:	60f8      	str	r0, [r7, #12]
 8024426:	60b9      	str	r1, [r7, #8]
 8024428:	607a      	str	r2, [r7, #4]
 802442a:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 802442c:	bf00      	nop
 802442e:	3734      	adds	r7, #52	; 0x34
 8024430:	46bd      	mov	sp, r7
 8024432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024436:	4770      	bx	lr

08024438 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8024438:	b580      	push	{r7, lr}
 802443a:	b082      	sub	sp, #8
 802443c:	af00      	add	r7, sp, #0
 802443e:	6078      	str	r0, [r7, #4]
 8024440:	6878      	ldr	r0, [r7, #4]
 8024442:	f000 fc74 	bl	8024d2e <_ZNSaIjED1Ev>
 8024446:	687b      	ldr	r3, [r7, #4]
 8024448:	4618      	mov	r0, r3
 802444a:	3708      	adds	r7, #8
 802444c:	46bd      	mov	sp, r7
 802444e:	bd80      	pop	{r7, pc}

08024450 <_ZNSt11_Deque_baseIjSaIjEEC1Ev>:
      _Deque_base()
 8024450:	b580      	push	{r7, lr}
 8024452:	b082      	sub	sp, #8
 8024454:	af00      	add	r7, sp, #0
 8024456:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8024458:	687b      	ldr	r3, [r7, #4]
 802445a:	4618      	mov	r0, r3
 802445c:	f000 fc57 	bl	8024d0e <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8024460:	2100      	movs	r1, #0
 8024462:	6878      	ldr	r0, [r7, #4]
 8024464:	f000 fc6f 	bl	8024d46 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>
 8024468:	687b      	ldr	r3, [r7, #4]
 802446a:	4618      	mov	r0, r3
 802446c:	3708      	adds	r7, #8
 802446e:	46bd      	mov	sp, r7
 8024470:	bd80      	pop	{r7, pc}

08024472 <_ZNSt11_Deque_baseIjSaIjEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8024472:	b580      	push	{r7, lr}
 8024474:	b082      	sub	sp, #8
 8024476:	af00      	add	r7, sp, #0
 8024478:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 802447a:	687b      	ldr	r3, [r7, #4]
 802447c:	681b      	ldr	r3, [r3, #0]
 802447e:	2b00      	cmp	r3, #0
 8024480:	d010      	beq.n	80244a4 <_ZNSt11_Deque_baseIjSaIjEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8024482:	687b      	ldr	r3, [r7, #4]
 8024484:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8024486:	687b      	ldr	r3, [r7, #4]
 8024488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 802448a:	3304      	adds	r3, #4
 802448c:	461a      	mov	r2, r3
 802448e:	6878      	ldr	r0, [r7, #4]
 8024490:	f000 fcbc 	bl	8024e0c <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8024494:	687b      	ldr	r3, [r7, #4]
 8024496:	6819      	ldr	r1, [r3, #0]
 8024498:	687b      	ldr	r3, [r7, #4]
 802449a:	685b      	ldr	r3, [r3, #4]
 802449c:	461a      	mov	r2, r3
 802449e:	6878      	ldr	r0, [r7, #4]
 80244a0:	f000 fcce 	bl	8024e40 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
    }
 80244a4:	687b      	ldr	r3, [r7, #4]
 80244a6:	4618      	mov	r0, r3
 80244a8:	f7ff ffc6 	bl	8024438 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>
 80244ac:	687b      	ldr	r3, [r7, #4]
 80244ae:	4618      	mov	r0, r3
 80244b0:	3708      	adds	r7, #8
 80244b2:	46bd      	mov	sp, r7
 80244b4:	bd80      	pop	{r7, pc}

080244b6 <_ZNSt5dequeIjSaIjEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80244b6:	b580      	push	{r7, lr}
 80244b8:	b082      	sub	sp, #8
 80244ba:	af00      	add	r7, sp, #0
 80244bc:	6078      	str	r0, [r7, #4]
 80244be:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80244c0:	683b      	ldr	r3, [r7, #0]
 80244c2:	3308      	adds	r3, #8
 80244c4:	4619      	mov	r1, r3
 80244c6:	6878      	ldr	r0, [r7, #4]
 80244c8:	f000 f81e 	bl	8024508 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80244cc:	6878      	ldr	r0, [r7, #4]
 80244ce:	3708      	adds	r7, #8
 80244d0:	46bd      	mov	sp, r7
 80244d2:	bd80      	pop	{r7, pc}

080244d4 <_ZNSt5dequeIjSaIjEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80244d4:	b580      	push	{r7, lr}
 80244d6:	b082      	sub	sp, #8
 80244d8:	af00      	add	r7, sp, #0
 80244da:	6078      	str	r0, [r7, #4]
 80244dc:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80244de:	683b      	ldr	r3, [r7, #0]
 80244e0:	3318      	adds	r3, #24
 80244e2:	4619      	mov	r1, r3
 80244e4:	6878      	ldr	r0, [r7, #4]
 80244e6:	f000 f80f 	bl	8024508 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80244ea:	6878      	ldr	r0, [r7, #4]
 80244ec:	3708      	adds	r7, #8
 80244ee:	46bd      	mov	sp, r7
 80244f0:	bd80      	pop	{r7, pc}

080244f2 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80244f2:	b480      	push	{r7}
 80244f4:	b083      	sub	sp, #12
 80244f6:	af00      	add	r7, sp, #0
 80244f8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80244fa:	687b      	ldr	r3, [r7, #4]
 80244fc:	4618      	mov	r0, r3
 80244fe:	370c      	adds	r7, #12
 8024500:	46bd      	mov	sp, r7
 8024502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024506:	4770      	bx	lr

08024508 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8024508:	b480      	push	{r7}
 802450a:	b083      	sub	sp, #12
 802450c:	af00      	add	r7, sp, #0
 802450e:	6078      	str	r0, [r7, #4]
 8024510:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024512:	683b      	ldr	r3, [r7, #0]
 8024514:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024516:	687b      	ldr	r3, [r7, #4]
 8024518:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802451a:	683b      	ldr	r3, [r7, #0]
 802451c:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 802451e:	687b      	ldr	r3, [r7, #4]
 8024520:	605a      	str	r2, [r3, #4]
 8024522:	683b      	ldr	r3, [r7, #0]
 8024524:	689a      	ldr	r2, [r3, #8]
 8024526:	687b      	ldr	r3, [r7, #4]
 8024528:	609a      	str	r2, [r3, #8]
 802452a:	683b      	ldr	r3, [r7, #0]
 802452c:	68da      	ldr	r2, [r3, #12]
 802452e:	687b      	ldr	r3, [r7, #4]
 8024530:	60da      	str	r2, [r3, #12]
 8024532:	687b      	ldr	r3, [r7, #4]
 8024534:	4618      	mov	r0, r3
 8024536:	370c      	adds	r7, #12
 8024538:	46bd      	mov	sp, r7
 802453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802453e:	4770      	bx	lr

08024540 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 8024540:	b480      	push	{r7}
 8024542:	b08d      	sub	sp, #52	; 0x34
 8024544:	af00      	add	r7, sp, #0
 8024546:	60f8      	str	r0, [r7, #12]
 8024548:	60b9      	str	r1, [r7, #8]
 802454a:	607a      	str	r2, [r7, #4]
 802454c:	603b      	str	r3, [r7, #0]
      }
 802454e:	bf00      	nop
 8024550:	3734      	adds	r7, #52	; 0x34
 8024552:	46bd      	mov	sp, r7
 8024554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024558:	4770      	bx	lr

0802455a <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 802455a:	b480      	push	{r7}
 802455c:	b083      	sub	sp, #12
 802455e:	af00      	add	r7, sp, #0
 8024560:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8024562:	687b      	ldr	r3, [r7, #4]
 8024564:	4618      	mov	r0, r3
 8024566:	370c      	adds	r7, #12
 8024568:	46bd      	mov	sp, r7
 802456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802456e:	4770      	bx	lr

08024570 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8024570:	b590      	push	{r4, r7, lr}
 8024572:	b085      	sub	sp, #20
 8024574:	af00      	add	r7, sp, #0
 8024576:	60f8      	str	r0, [r7, #12]
 8024578:	60b9      	str	r1, [r7, #8]
 802457a:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 802457c:	68fb      	ldr	r3, [r7, #12]
 802457e:	68ba      	ldr	r2, [r7, #8]
 8024580:	4611      	mov	r1, r2
 8024582:	4618      	mov	r0, r3
 8024584:	f000 fc78 	bl	8024e78 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>
	__x.clear();
 8024588:	68b8      	ldr	r0, [r7, #8]
 802458a:	f000 fc82 	bl	8024e92 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 802458e:	68fb      	ldr	r3, [r7, #12]
 8024590:	4618      	mov	r0, r3
 8024592:	f7ff fd61 	bl	8024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024596:	4604      	mov	r4, r0
 8024598:	68bb      	ldr	r3, [r7, #8]
 802459a:	4618      	mov	r0, r3
 802459c:	f7ff fd5c 	bl	8024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80245a0:	4603      	mov	r3, r0
 80245a2:	4619      	mov	r1, r3
 80245a4:	4620      	mov	r0, r4
 80245a6:	f000 fc88 	bl	8024eba <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>
      }
 80245aa:	bf00      	nop
 80245ac:	3714      	adds	r7, #20
 80245ae:	46bd      	mov	sp, r7
 80245b0:	bd90      	pop	{r4, r7, pc}

080245b2 <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80245b2:	b480      	push	{r7}
 80245b4:	b083      	sub	sp, #12
 80245b6:	af00      	add	r7, sp, #0
 80245b8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80245ba:	687b      	ldr	r3, [r7, #4]
 80245bc:	4618      	mov	r0, r3
 80245be:	370c      	adds	r7, #12
 80245c0:	46bd      	mov	sp, r7
 80245c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245c6:	4770      	bx	lr

080245c8 <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80245c8:	b590      	push	{r4, r7, lr}
 80245ca:	b085      	sub	sp, #20
 80245cc:	af00      	add	r7, sp, #0
 80245ce:	60f8      	str	r0, [r7, #12]
 80245d0:	60b9      	str	r1, [r7, #8]
 80245d2:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 80245d4:	68fb      	ldr	r3, [r7, #12]
 80245d6:	68ba      	ldr	r2, [r7, #8]
 80245d8:	4611      	mov	r1, r2
 80245da:	4618      	mov	r0, r3
 80245dc:	f000 fc7b 	bl	8024ed6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>
	__x.clear();
 80245e0:	68b8      	ldr	r0, [r7, #8]
 80245e2:	f000 fc85 	bl	8024ef0 <_ZNSt5dequeIjSaIjEE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80245e6:	68fb      	ldr	r3, [r7, #12]
 80245e8:	4618      	mov	r0, r3
 80245ea:	f7ff ff82 	bl	80244f2 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80245ee:	4604      	mov	r4, r0
 80245f0:	68bb      	ldr	r3, [r7, #8]
 80245f2:	4618      	mov	r0, r3
 80245f4:	f7ff ff7d 	bl	80244f2 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80245f8:	4603      	mov	r3, r0
 80245fa:	4619      	mov	r1, r3
 80245fc:	4620      	mov	r0, r4
 80245fe:	f000 fc8b 	bl	8024f18 <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>
      }
 8024602:	bf00      	nop
 8024604:	3714      	adds	r7, #20
 8024606:	46bd      	mov	sp, r7
 8024608:	bd90      	pop	{r4, r7, pc}

0802460a <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 802460a:	b480      	push	{r7}
 802460c:	b083      	sub	sp, #12
 802460e:	af00      	add	r7, sp, #0
 8024610:	6078      	str	r0, [r7, #4]
 8024612:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8024614:	683a      	ldr	r2, [r7, #0]
 8024616:	4613      	mov	r3, r2
 8024618:	015b      	lsls	r3, r3, #5
 802461a:	4413      	add	r3, r2
 802461c:	00db      	lsls	r3, r3, #3
 802461e:	687a      	ldr	r2, [r7, #4]
 8024620:	4413      	add	r3, r2
 8024622:	4618      	mov	r0, r3
 8024624:	370c      	adds	r7, #12
 8024626:	46bd      	mov	sp, r7
 8024628:	f85d 7b04 	ldr.w	r7, [sp], #4
 802462c:	4770      	bx	lr

0802462e <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 802462e:	b480      	push	{r7}
 8024630:	b083      	sub	sp, #12
 8024632:	af00      	add	r7, sp, #0
 8024634:	6078      	str	r0, [r7, #4]
 8024636:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8024638:	683b      	ldr	r3, [r7, #0]
 802463a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802463e:	fb02 f303 	mul.w	r3, r2, r3
 8024642:	687a      	ldr	r2, [r7, #4]
 8024644:	4413      	add	r3, r2
 8024646:	4618      	mov	r0, r3
 8024648:	370c      	adds	r7, #12
 802464a:	46bd      	mov	sp, r7
 802464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024650:	4770      	bx	lr

08024652 <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8024652:	b480      	push	{r7}
 8024654:	b083      	sub	sp, #12
 8024656:	af00      	add	r7, sp, #0
 8024658:	6078      	str	r0, [r7, #4]
 802465a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 802465c:	683b      	ldr	r3, [r7, #0]
 802465e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8024662:	fb02 f303 	mul.w	r3, r2, r3
 8024666:	687a      	ldr	r2, [r7, #4]
 8024668:	4413      	add	r3, r2
 802466a:	4618      	mov	r0, r3
 802466c:	370c      	adds	r7, #12
 802466e:	46bd      	mov	sp, r7
 8024670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024674:	4770      	bx	lr

08024676 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8024676:	b480      	push	{r7}
 8024678:	b083      	sub	sp, #12
 802467a:	af00      	add	r7, sp, #0
 802467c:	6078      	str	r0, [r7, #4]
 802467e:	687b      	ldr	r3, [r7, #4]
 8024680:	685b      	ldr	r3, [r3, #4]
 8024682:	4618      	mov	r0, r3
 8024684:	370c      	adds	r7, #12
 8024686:	46bd      	mov	sp, r7
 8024688:	f85d 7b04 	ldr.w	r7, [sp], #4
 802468c:	4770      	bx	lr

0802468e <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 802468e:	b5b0      	push	{r4, r5, r7, lr}
 8024690:	b082      	sub	sp, #8
 8024692:	af00      	add	r7, sp, #0
 8024694:	6078      	str	r0, [r7, #4]
 8024696:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8024698:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 802469a:	1d3b      	adds	r3, r7, #4
 802469c:	4618      	mov	r0, r3
 802469e:	f000 f83d 	bl	802471c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 80246a2:	462a      	mov	r2, r5
 80246a4:	6839      	ldr	r1, [r7, #0]
 80246a6:	4620      	mov	r0, r4
 80246a8:	f000 fc44 	bl	8024f34 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 80246ac:	4603      	mov	r3, r0
    }
 80246ae:	4618      	mov	r0, r3
 80246b0:	3708      	adds	r7, #8
 80246b2:	46bd      	mov	sp, r7
 80246b4:	bdb0      	pop	{r4, r5, r7, pc}

080246b6 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 80246b6:	b590      	push	{r4, r7, lr}
 80246b8:	b085      	sub	sp, #20
 80246ba:	af00      	add	r7, sp, #0
 80246bc:	6078      	str	r0, [r7, #4]
 80246be:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 80246c0:	683b      	ldr	r3, [r7, #0]
 80246c2:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 80246c4:	6878      	ldr	r0, [r7, #4]
 80246c6:	f000 f829 	bl	802471c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 80246ca:	4622      	mov	r2, r4
 80246cc:	68f9      	ldr	r1, [r7, #12]
 80246ce:	6878      	ldr	r0, [r7, #4]
 80246d0:	f000 fc46 	bl	8024f60 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 80246d4:	bf00      	nop
 80246d6:	3714      	adds	r7, #20
 80246d8:	46bd      	mov	sp, r7
 80246da:	bd90      	pop	{r4, r7, pc}

080246dc <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80246dc:	b5b0      	push	{r4, r5, r7, lr}
 80246de:	b088      	sub	sp, #32
 80246e0:	af00      	add	r7, sp, #0
 80246e2:	60f8      	str	r0, [r7, #12]
 80246e4:	60b9      	str	r1, [r7, #8]
 80246e6:	607a      	str	r2, [r7, #4]
 80246e8:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80246ea:	68b8      	ldr	r0, [r7, #8]
 80246ec:	f000 fc4e 	bl	8024f8c <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 80246f0:	4604      	mov	r4, r0
 80246f2:	6878      	ldr	r0, [r7, #4]
 80246f4:	f000 fc4a 	bl	8024f8c <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 80246f8:	4605      	mov	r5, r0
 80246fa:	f107 0310 	add.w	r3, r7, #16
 80246fe:	6839      	ldr	r1, [r7, #0]
 8024700:	4618      	mov	r0, r3
 8024702:	f7ff fe70 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024706:	68f8      	ldr	r0, [r7, #12]
 8024708:	f107 0310 	add.w	r3, r7, #16
 802470c:	462a      	mov	r2, r5
 802470e:	4621      	mov	r1, r4
 8024710:	f000 fc47 	bl	8024fa2 <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>
    }
 8024714:	68f8      	ldr	r0, [r7, #12]
 8024716:	3720      	adds	r7, #32
 8024718:	46bd      	mov	sp, r7
 802471a:	bdb0      	pop	{r4, r5, r7, pc}

0802471c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 802471c:	b480      	push	{r7}
 802471e:	b083      	sub	sp, #12
 8024720:	af00      	add	r7, sp, #0
 8024722:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8024724:	bf00      	nop
 8024726:	4618      	mov	r0, r3
 8024728:	370c      	adds	r7, #12
 802472a:	46bd      	mov	sp, r7
 802472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024730:	4770      	bx	lr

08024732 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>:
      { std::copy(__first, __last, std::inserter(*this, __pos)); }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
 8024732:	b590      	push	{r4, r7, lr}
 8024734:	b0a5      	sub	sp, #148	; 0x94
 8024736:	af02      	add	r7, sp, #8
 8024738:	60f8      	str	r0, [r7, #12]
 802473a:	60b9      	str	r1, [r7, #8]
 802473c:	607a      	str	r2, [r7, #4]
 802473e:	603b      	str	r3, [r7, #0]
      _M_range_insert_aux(iterator __pos,
			  _ForwardIterator __first, _ForwardIterator __last,
			  std::forward_iterator_tag)
      {
	const size_type __n = std::distance(__first, __last);
 8024740:	6839      	ldr	r1, [r7, #0]
 8024742:	6878      	ldr	r0, [r7, #4]
 8024744:	f7ff ffa3 	bl	802468e <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8024748:	4603      	mov	r3, r0
 802474a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 802474e:	68bb      	ldr	r3, [r7, #8]
 8024750:	681a      	ldr	r2, [r3, #0]
 8024752:	68fb      	ldr	r3, [r7, #12]
 8024754:	689b      	ldr	r3, [r3, #8]
 8024756:	429a      	cmp	r2, r3
 8024758:	d126      	bne.n	80247a8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0x76>
	  {
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 802475a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802475e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8024762:	68f9      	ldr	r1, [r7, #12]
 8024764:	4618      	mov	r0, r3
 8024766:	f000 fc4d 	bl	8025004 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    __try
	      {
		std::__uninitialized_copy_a(__first, __last, __new_start,
 802476a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802476e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8024772:	4611      	mov	r1, r2
 8024774:	4618      	mov	r0, r3
 8024776:	f7ff fe36 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 802477a:	68fb      	ldr	r3, [r7, #12]
 802477c:	4618      	mov	r0, r3
 802477e:	f7ff fc6b 	bl	8024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024782:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8024784:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8024788:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802478c:	9200      	str	r2, [sp, #0]
 802478e:	683a      	ldr	r2, [r7, #0]
 8024790:	6879      	ldr	r1, [r7, #4]
 8024792:	f000 fc61 	bl	8025058 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 8024796:	68fb      	ldr	r3, [r7, #12]
 8024798:	f103 0408 	add.w	r4, r3, #8
 802479c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80247a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80247a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		__throw_exception_again;
	      }
	  }
	else
	  _M_insert_aux(__pos, __first, __last, __n);
      }
 80247a6:	e03d      	b.n	8024824 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 80247a8:	68bb      	ldr	r3, [r7, #8]
 80247aa:	681a      	ldr	r2, [r3, #0]
 80247ac:	68fb      	ldr	r3, [r7, #12]
 80247ae:	699b      	ldr	r3, [r3, #24]
 80247b0:	429a      	cmp	r2, r3
 80247b2:	d127      	bne.n	8024804 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 80247b4:	f107 0314 	add.w	r3, r7, #20
 80247b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80247bc:	68f9      	ldr	r1, [r7, #12]
 80247be:	4618      	mov	r0, r3
 80247c0:	f000 fc62 	bl	8025088 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 80247c4:	68fb      	ldr	r3, [r7, #12]
 80247c6:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 80247ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80247ce:	4611      	mov	r1, r2
 80247d0:	4618      	mov	r0, r3
 80247d2:	f7ff fe08 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 80247d6:	68fb      	ldr	r3, [r7, #12]
 80247d8:	4618      	mov	r0, r3
 80247da:	f7ff fc3d 	bl	8024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80247de:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 80247e0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80247e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80247e8:	9200      	str	r2, [sp, #0]
 80247ea:	683a      	ldr	r2, [r7, #0]
 80247ec:	6879      	ldr	r1, [r7, #4]
 80247ee:	f000 fc33 	bl	8025058 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 80247f2:	68fb      	ldr	r3, [r7, #12]
 80247f4:	f103 0418 	add.w	r4, r3, #24
 80247f8:	f107 0314 	add.w	r3, r7, #20
 80247fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80247fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8024802:	e00f      	b.n	8024824 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 8024804:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8024808:	68b9      	ldr	r1, [r7, #8]
 802480a:	4618      	mov	r0, r3
 802480c:	f7ff fdeb 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024810:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8024814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8024818:	9300      	str	r3, [sp, #0]
 802481a:	683b      	ldr	r3, [r7, #0]
 802481c:	687a      	ldr	r2, [r7, #4]
 802481e:	68f8      	ldr	r0, [r7, #12]
 8024820:	f000 fc5c 	bl	80250dc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>
      }
 8024824:	bf00      	nop
 8024826:	378c      	adds	r7, #140	; 0x8c
 8024828:	46bd      	mov	sp, r7
 802482a:	bd90      	pop	{r4, r7, pc}

0802482c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>:
      _M_erase_at_end(iterator __pos)
 802482c:	b590      	push	{r4, r7, lr}
 802482e:	b08b      	sub	sp, #44	; 0x2c
 8024830:	af00      	add	r7, sp, #0
 8024832:	6078      	str	r0, [r7, #4]
 8024834:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8024836:	f107 0308 	add.w	r3, r7, #8
 802483a:	6839      	ldr	r1, [r7, #0]
 802483c:	4618      	mov	r0, r3
 802483e:	f7ff fdd2 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024842:	f107 0318 	add.w	r3, r7, #24
 8024846:	6879      	ldr	r1, [r7, #4]
 8024848:	4618      	mov	r0, r3
 802484a:	f7ff fdbd 	bl	80243c8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 802484e:	687b      	ldr	r3, [r7, #4]
 8024850:	4618      	mov	r0, r3
 8024852:	f7ff fc01 	bl	8024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024856:	4603      	mov	r3, r0
 8024858:	f107 0218 	add.w	r2, r7, #24
 802485c:	f107 0108 	add.w	r1, r7, #8
 8024860:	6878      	ldr	r0, [r7, #4]
 8024862:	f7ff fddc 	bl	802441e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
	_M_destroy_nodes(__pos._M_node + 1,
 8024866:	6878      	ldr	r0, [r7, #4]
 8024868:	683b      	ldr	r3, [r7, #0]
 802486a:	68db      	ldr	r3, [r3, #12]
 802486c:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 802486e:	687b      	ldr	r3, [r7, #4]
 8024870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8024872:	3304      	adds	r3, #4
 8024874:	461a      	mov	r2, r3
 8024876:	f7ff fd62 	bl	802433e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	this->_M_impl._M_finish = __pos;
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	683a      	ldr	r2, [r7, #0]
 802487e:	f103 0418 	add.w	r4, r3, #24
 8024882:	4613      	mov	r3, r2
 8024884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024886:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 802488a:	bf00      	nop
 802488c:	372c      	adds	r7, #44	; 0x2c
 802488e:	46bd      	mov	sp, r7
 8024890:	bd90      	pop	{r4, r7, pc}

08024892 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8024892:	b480      	push	{r7}
 8024894:	b083      	sub	sp, #12
 8024896:	af00      	add	r7, sp, #0
 8024898:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 802489a:	687b      	ldr	r3, [r7, #4]
 802489c:	4618      	mov	r0, r3
 802489e:	370c      	adds	r7, #12
 80248a0:	46bd      	mov	sp, r7
 80248a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248a6:	4770      	bx	lr

080248a8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80248a8:	b5b0      	push	{r4, r5, r7, lr}
 80248aa:	b084      	sub	sp, #16
 80248ac:	af00      	add	r7, sp, #0
 80248ae:	60f8      	str	r0, [r7, #12]
 80248b0:	60b9      	str	r1, [r7, #8]
 80248b2:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80248b4:	6878      	ldr	r0, [r7, #4]
 80248b6:	f7ff ffec 	bl	8024892 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 80248ba:	4605      	mov	r5, r0
 80248bc:	68bb      	ldr	r3, [r7, #8]
 80248be:	4619      	mov	r1, r3
 80248c0:	2014      	movs	r0, #20
 80248c2:	f7fc faf5 	bl	8020eb0 <_ZnwjPv>
 80248c6:	4603      	mov	r3, r0
 80248c8:	461c      	mov	r4, r3
 80248ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80248cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80248ce:	682b      	ldr	r3, [r5, #0]
 80248d0:	6023      	str	r3, [r4, #0]
 80248d2:	bf00      	nop
 80248d4:	3710      	adds	r7, #16
 80248d6:	46bd      	mov	sp, r7
 80248d8:	bdb0      	pop	{r4, r5, r7, pc}

080248da <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80248da:	b580      	push	{r7, lr}
 80248dc:	b082      	sub	sp, #8
 80248de:	af00      	add	r7, sp, #0
 80248e0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80248e2:	687b      	ldr	r3, [r7, #4]
 80248e4:	4618      	mov	r0, r3
 80248e6:	f000 ff06 	bl	80256f6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80248ea:	4603      	mov	r3, r0
 80248ec:	4618      	mov	r0, r3
 80248ee:	f000 fee8 	bl	80256c2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>
 80248f2:	4603      	mov	r3, r0
 80248f4:	4618      	mov	r0, r3
 80248f6:	3708      	adds	r7, #8
 80248f8:	46bd      	mov	sp, r7
 80248fa:	bd80      	pop	{r7, pc}

080248fc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 80248fc:	b580      	push	{r7, lr}
 80248fe:	b082      	sub	sp, #8
 8024900:	af00      	add	r7, sp, #0
 8024902:	6078      	str	r0, [r7, #4]
 8024904:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8024906:	687b      	ldr	r3, [r7, #4]
 8024908:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 802490a:	687b      	ldr	r3, [r7, #4]
 802490c:	681b      	ldr	r3, [r3, #0]
 802490e:	1ad3      	subs	r3, r2, r3
 8024910:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8024912:	461a      	mov	r2, r3
 8024914:	683b      	ldr	r3, [r7, #0]
 8024916:	4293      	cmp	r3, r2
 8024918:	d904      	bls.n	8024924 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 802491a:	2201      	movs	r2, #1
 802491c:	6839      	ldr	r1, [r7, #0]
 802491e:	6878      	ldr	r0, [r7, #4]
 8024920:	f000 fef4 	bl	802570c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8024924:	bf00      	nop
 8024926:	3708      	adds	r7, #8
 8024928:	46bd      	mov	sp, r7
 802492a:	bd80      	pop	{r7, pc}

0802492c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 802492c:	b590      	push	{r4, r7, lr}
 802492e:	b083      	sub	sp, #12
 8024930:	af00      	add	r7, sp, #0
 8024932:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8024934:	687c      	ldr	r4, [r7, #4]
 8024936:	2014      	movs	r0, #20
 8024938:	f7fc fac6 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 802493c:	4603      	mov	r3, r0
 802493e:	4619      	mov	r1, r3
 8024940:	4620      	mov	r0, r4
 8024942:	f000 ff7d 	bl	8025840 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>
 8024946:	4603      	mov	r3, r0
      }
 8024948:	4618      	mov	r0, r3
 802494a:	370c      	adds	r7, #12
 802494c:	46bd      	mov	sp, r7
 802494e:	bd90      	pop	{r4, r7, pc}

08024950 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8024950:	b590      	push	{r4, r7, lr}
 8024952:	b083      	sub	sp, #12
 8024954:	af00      	add	r7, sp, #0
 8024956:	6078      	str	r0, [r7, #4]
 8024958:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 802495a:	687b      	ldr	r3, [r7, #4]
 802495c:	683a      	ldr	r2, [r7, #0]
 802495e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8024960:	683b      	ldr	r3, [r7, #0]
 8024962:	681a      	ldr	r2, [r3, #0]
 8024964:	687b      	ldr	r3, [r7, #4]
 8024966:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8024968:	687b      	ldr	r3, [r7, #4]
 802496a:	685c      	ldr	r4, [r3, #4]
 802496c:	f000 f81f 	bl	80249ae <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8024970:	4602      	mov	r2, r0
 8024972:	4613      	mov	r3, r2
 8024974:	009b      	lsls	r3, r3, #2
 8024976:	4413      	add	r3, r2
 8024978:	009b      	lsls	r3, r3, #2
 802497a:	18e2      	adds	r2, r4, r3
 802497c:	687b      	ldr	r3, [r7, #4]
 802497e:	609a      	str	r2, [r3, #8]
      }
 8024980:	bf00      	nop
 8024982:	370c      	adds	r7, #12
 8024984:	46bd      	mov	sp, r7
 8024986:	bd90      	pop	{r4, r7, pc}

08024988 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8024988:	b590      	push	{r4, r7, lr}
 802498a:	b083      	sub	sp, #12
 802498c:	af00      	add	r7, sp, #0
 802498e:	6078      	str	r0, [r7, #4]
 8024990:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8024992:	687c      	ldr	r4, [r7, #4]
 8024994:	2014      	movs	r0, #20
 8024996:	f7fc fa97 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 802499a:	4603      	mov	r3, r0
 802499c:	461a      	mov	r2, r3
 802499e:	6839      	ldr	r1, [r7, #0]
 80249a0:	4620      	mov	r0, r4
 80249a2:	f000 ff5c 	bl	802585e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>
      }
 80249a6:	bf00      	nop
 80249a8:	370c      	adds	r7, #12
 80249aa:	46bd      	mov	sp, r7
 80249ac:	bd90      	pop	{r4, r7, pc}

080249ae <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80249ae:	b580      	push	{r7, lr}
 80249b0:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80249b2:	2014      	movs	r0, #20
 80249b4:	f7fc fa88 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80249b8:	4603      	mov	r3, r0
 80249ba:	4618      	mov	r0, r3
 80249bc:	bd80      	pop	{r7, pc}

080249be <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80249be:	b480      	push	{r7}
 80249c0:	b083      	sub	sp, #12
 80249c2:	af00      	add	r7, sp, #0
 80249c4:	6078      	str	r0, [r7, #4]
 80249c6:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80249c8:	bf00      	nop
 80249ca:	370c      	adds	r7, #12
 80249cc:	46bd      	mov	sp, r7
 80249ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249d2:	4770      	bx	lr

080249d4 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 80249d4:	b580      	push	{r7, lr}
 80249d6:	b084      	sub	sp, #16
 80249d8:	af00      	add	r7, sp, #0
 80249da:	60f8      	str	r0, [r7, #12]
 80249dc:	60b9      	str	r1, [r7, #8]
 80249de:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 80249e0:	68b9      	ldr	r1, [r7, #8]
 80249e2:	68f8      	ldr	r0, [r7, #12]
 80249e4:	f7ff fcff 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp += __n;
 80249e8:	6879      	ldr	r1, [r7, #4]
 80249ea:	68f8      	ldr	r0, [r7, #12]
 80249ec:	f000 ff46 	bl	802587c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	return __tmp;
 80249f0:	bf00      	nop
      }
 80249f2:	68f8      	ldr	r0, [r7, #12]
 80249f4:	3710      	adds	r7, #16
 80249f6:	46bd      	mov	sp, r7
 80249f8:	bd80      	pop	{r7, pc}

080249fa <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80249fa:	b480      	push	{r7}
 80249fc:	b083      	sub	sp, #12
 80249fe:	af00      	add	r7, sp, #0
 8024a00:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8024a02:	687b      	ldr	r3, [r7, #4]
 8024a04:	681b      	ldr	r3, [r3, #0]
 8024a06:	4618      	mov	r0, r3
 8024a08:	370c      	adds	r7, #12
 8024a0a:	46bd      	mov	sp, r7
 8024a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a10:	4770      	bx	lr

08024a12 <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8024a12:	b580      	push	{r7, lr}
 8024a14:	b084      	sub	sp, #16
 8024a16:	af00      	add	r7, sp, #0
 8024a18:	60f8      	str	r0, [r7, #12]
 8024a1a:	60b9      	str	r1, [r7, #8]
 8024a1c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8024a1e:	6878      	ldr	r0, [r7, #4]
 8024a20:	f000 ff90 	bl	8025944 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8024a24:	4603      	mov	r3, r0
 8024a26:	461a      	mov	r2, r3
 8024a28:	68b9      	ldr	r1, [r7, #8]
 8024a2a:	68f8      	ldr	r0, [r7, #12]
 8024a2c:	f000 ff95 	bl	802595a <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>
	}
 8024a30:	bf00      	nop
 8024a32:	3710      	adds	r7, #16
 8024a34:	46bd      	mov	sp, r7
 8024a36:	bd80      	pop	{r7, pc}

08024a38 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8024a38:	b5b0      	push	{r4, r5, r7, lr}
 8024a3a:	b082      	sub	sp, #8
 8024a3c:	af00      	add	r7, sp, #0
 8024a3e:	6078      	str	r0, [r7, #4]
 8024a40:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8024a42:	6878      	ldr	r0, [r7, #4]
 8024a44:	f000 ff9f 	bl	8025986 <_ZNKSt5dequeIjSaIjEE4sizeEv>
 8024a48:	4604      	mov	r4, r0
 8024a4a:	6878      	ldr	r0, [r7, #4]
 8024a4c:	f000 ffad 	bl	80259aa <_ZNKSt5dequeIjSaIjEE8max_sizeEv>
 8024a50:	4603      	mov	r3, r0
 8024a52:	429c      	cmp	r4, r3
 8024a54:	bf0c      	ite	eq
 8024a56:	2301      	moveq	r3, #1
 8024a58:	2300      	movne	r3, #0
 8024a5a:	b2db      	uxtb	r3, r3
 8024a5c:	2b00      	cmp	r3, #0
 8024a5e:	d002      	beq.n	8024a66 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x2e>
	  __throw_length_error(
 8024a60:	4816      	ldr	r0, [pc, #88]	; (8024abc <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x84>)
 8024a62:	f017 f987 	bl	803bd74 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8024a66:	2101      	movs	r1, #1
 8024a68:	6878      	ldr	r0, [r7, #4]
 8024a6a:	f000 ffaf 	bl	80259cc <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8024a6e:	687a      	ldr	r2, [r7, #4]
 8024a70:	687b      	ldr	r3, [r7, #4]
 8024a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a74:	1d1c      	adds	r4, r3, #4
 8024a76:	4610      	mov	r0, r2
 8024a78:	f000 ffc3 	bl	8025a02 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8024a7c:	4603      	mov	r3, r0
 8024a7e:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8024a80:	687c      	ldr	r4, [r7, #4]
 8024a82:	687b      	ldr	r3, [r7, #4]
 8024a84:	699d      	ldr	r5, [r3, #24]
 8024a86:	6838      	ldr	r0, [r7, #0]
 8024a88:	f000 ff5c 	bl	8025944 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8024a8c:	4603      	mov	r3, r0
 8024a8e:	461a      	mov	r2, r3
 8024a90:	4629      	mov	r1, r5
 8024a92:	4620      	mov	r0, r4
 8024a94:	f7ff ffbd 	bl	8024a12 <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8024a98:	687b      	ldr	r3, [r7, #4]
 8024a9a:	f103 0218 	add.w	r2, r3, #24
 8024a9e:	687b      	ldr	r3, [r7, #4]
 8024aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024aa2:	3304      	adds	r3, #4
 8024aa4:	4619      	mov	r1, r3
 8024aa6:	4610      	mov	r0, r2
 8024aa8:	f000 ffbd 	bl	8025a26 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8024aac:	687b      	ldr	r3, [r7, #4]
 8024aae:	69da      	ldr	r2, [r3, #28]
 8024ab0:	687b      	ldr	r3, [r7, #4]
 8024ab2:	619a      	str	r2, [r3, #24]
      }
 8024ab4:	bf00      	nop
 8024ab6:	3708      	adds	r7, #8
 8024ab8:	46bd      	mov	sp, r7
 8024aba:	bdb0      	pop	{r4, r5, r7, pc}
 8024abc:	0803de30 	.word	0x0803de30

08024ac0 <_ZNKSt5dequeIjSaIjEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8024ac0:	b580      	push	{r7, lr}
 8024ac2:	b082      	sub	sp, #8
 8024ac4:	af00      	add	r7, sp, #0
 8024ac6:	6078      	str	r0, [r7, #4]
 8024ac8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024aca:	683b      	ldr	r3, [r7, #0]
 8024acc:	3308      	adds	r3, #8
 8024ace:	4619      	mov	r1, r3
 8024ad0:	6878      	ldr	r0, [r7, #4]
 8024ad2:	f000 ffd4 	bl	8025a7e <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>
 8024ad6:	6878      	ldr	r0, [r7, #4]
 8024ad8:	3708      	adds	r7, #8
 8024ada:	46bd      	mov	sp, r7
 8024adc:	bd80      	pop	{r7, pc}

08024ade <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8024ade:	b480      	push	{r7}
 8024ae0:	b083      	sub	sp, #12
 8024ae2:	af00      	add	r7, sp, #0
 8024ae4:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8024ae6:	687b      	ldr	r3, [r7, #4]
 8024ae8:	681b      	ldr	r3, [r3, #0]
 8024aea:	4618      	mov	r0, r3
 8024aec:	370c      	adds	r7, #12
 8024aee:	46bd      	mov	sp, r7
 8024af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024af4:	4770      	bx	lr

08024af6 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024af6:	b480      	push	{r7}
 8024af8:	b083      	sub	sp, #12
 8024afa:	af00      	add	r7, sp, #0
 8024afc:	6078      	str	r0, [r7, #4]
 8024afe:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8024b00:	687b      	ldr	r3, [r7, #4]
 8024b02:	681a      	ldr	r2, [r3, #0]
 8024b04:	683b      	ldr	r3, [r7, #0]
 8024b06:	681b      	ldr	r3, [r3, #0]
 8024b08:	429a      	cmp	r2, r3
 8024b0a:	bf0c      	ite	eq
 8024b0c:	2301      	moveq	r3, #1
 8024b0e:	2300      	movne	r3, #0
 8024b10:	b2db      	uxtb	r3, r3
 8024b12:	4618      	mov	r0, r3
 8024b14:	370c      	adds	r7, #12
 8024b16:	46bd      	mov	sp, r7
 8024b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b1c:	4770      	bx	lr

08024b1e <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8024b1e:	b580      	push	{r7, lr}
 8024b20:	b082      	sub	sp, #8
 8024b22:	af00      	add	r7, sp, #0
 8024b24:	6078      	str	r0, [r7, #4]
 8024b26:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8024b28:	6839      	ldr	r1, [r7, #0]
 8024b2a:	6878      	ldr	r0, [r7, #4]
 8024b2c:	f000 ffc3 	bl	8025ab6 <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>
	}
 8024b30:	bf00      	nop
 8024b32:	3708      	adds	r7, #8
 8024b34:	46bd      	mov	sp, r7
 8024b36:	bd80      	pop	{r7, pc}

08024b38 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8024b38:	b580      	push	{r7, lr}
 8024b3a:	b082      	sub	sp, #8
 8024b3c:	af00      	add	r7, sp, #0
 8024b3e:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8024b40:	687b      	ldr	r3, [r7, #4]
 8024b42:	4618      	mov	r0, r3
 8024b44:	f7ff fcd5 	bl	80244f2 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8024b48:	4602      	mov	r2, r0
 8024b4a:	687b      	ldr	r3, [r7, #4]
 8024b4c:	689b      	ldr	r3, [r3, #8]
 8024b4e:	4619      	mov	r1, r3
 8024b50:	4610      	mov	r0, r2
 8024b52:	f7ff ffe4 	bl	8024b1e <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8024b56:	687a      	ldr	r2, [r7, #4]
 8024b58:	687b      	ldr	r3, [r7, #4]
 8024b5a:	68db      	ldr	r3, [r3, #12]
 8024b5c:	4619      	mov	r1, r3
 8024b5e:	4610      	mov	r0, r2
 8024b60:	f000 ff7a 	bl	8025a58 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8024b64:	687b      	ldr	r3, [r7, #4]
 8024b66:	f103 0208 	add.w	r2, r3, #8
 8024b6a:	687b      	ldr	r3, [r7, #4]
 8024b6c:	695b      	ldr	r3, [r3, #20]
 8024b6e:	3304      	adds	r3, #4
 8024b70:	4619      	mov	r1, r3
 8024b72:	4610      	mov	r0, r2
 8024b74:	f000 ff57 	bl	8025a26 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8024b78:	687b      	ldr	r3, [r7, #4]
 8024b7a:	68da      	ldr	r2, [r3, #12]
 8024b7c:	687b      	ldr	r3, [r7, #4]
 8024b7e:	609a      	str	r2, [r3, #8]
    }
 8024b80:	bf00      	nop
 8024b82:	3708      	adds	r7, #8
 8024b84:	46bd      	mov	sp, r7
 8024b86:	bd80      	pop	{r7, pc}

08024b88 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8024b88:	b480      	push	{r7}
 8024b8a:	b083      	sub	sp, #12
 8024b8c:	af00      	add	r7, sp, #0
 8024b8e:	6078      	str	r0, [r7, #4]
 8024b90:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024b92:	683b      	ldr	r3, [r7, #0]
 8024b94:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024b96:	687b      	ldr	r3, [r7, #4]
 8024b98:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024b9a:	683b      	ldr	r3, [r7, #0]
 8024b9c:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024b9e:	687b      	ldr	r3, [r7, #4]
 8024ba0:	605a      	str	r2, [r3, #4]
 8024ba2:	683b      	ldr	r3, [r7, #0]
 8024ba4:	689a      	ldr	r2, [r3, #8]
 8024ba6:	687b      	ldr	r3, [r7, #4]
 8024ba8:	609a      	str	r2, [r3, #8]
 8024baa:	683b      	ldr	r3, [r7, #0]
 8024bac:	68da      	ldr	r2, [r3, #12]
 8024bae:	687b      	ldr	r3, [r7, #4]
 8024bb0:	60da      	str	r2, [r3, #12]
 8024bb2:	687b      	ldr	r3, [r7, #4]
 8024bb4:	4618      	mov	r0, r3
 8024bb6:	370c      	adds	r7, #12
 8024bb8:	46bd      	mov	sp, r7
 8024bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bbe:	4770      	bx	lr

08024bc0 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8024bc0:	b580      	push	{r7, lr}
 8024bc2:	b082      	sub	sp, #8
 8024bc4:	af00      	add	r7, sp, #0
 8024bc6:	6078      	str	r0, [r7, #4]
 8024bc8:	6878      	ldr	r0, [r7, #4]
 8024bca:	f000 ff7f 	bl	8025acc <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>
 8024bce:	687b      	ldr	r3, [r7, #4]
 8024bd0:	4618      	mov	r0, r3
 8024bd2:	3708      	adds	r7, #8
 8024bd4:	46bd      	mov	sp, r7
 8024bd6:	bd80      	pop	{r7, pc}

08024bd8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8024bd8:	b580      	push	{r7, lr}
 8024bda:	b082      	sub	sp, #8
 8024bdc:	af00      	add	r7, sp, #0
 8024bde:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8024be0:	687b      	ldr	r3, [r7, #4]
 8024be2:	2200      	movs	r2, #0
 8024be4:	601a      	str	r2, [r3, #0]
 8024be6:	687b      	ldr	r3, [r7, #4]
 8024be8:	2200      	movs	r2, #0
 8024bea:	605a      	str	r2, [r3, #4]
 8024bec:	687b      	ldr	r3, [r7, #4]
 8024bee:	3308      	adds	r3, #8
 8024bf0:	4618      	mov	r0, r3
 8024bf2:	f000 ff76 	bl	8025ae2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
 8024bf6:	687b      	ldr	r3, [r7, #4]
 8024bf8:	3318      	adds	r3, #24
 8024bfa:	4618      	mov	r0, r3
 8024bfc:	f000 ff71 	bl	8025ae2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
	{ }
 8024c00:	687b      	ldr	r3, [r7, #4]
 8024c02:	4618      	mov	r0, r3
 8024c04:	3708      	adds	r7, #8
 8024c06:	46bd      	mov	sp, r7
 8024c08:	bd80      	pop	{r7, pc}

08024c0a <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8024c0a:	b480      	push	{r7}
 8024c0c:	b083      	sub	sp, #12
 8024c0e:	af00      	add	r7, sp, #0
 8024c10:	6078      	str	r0, [r7, #4]
 8024c12:	687b      	ldr	r3, [r7, #4]
 8024c14:	4618      	mov	r0, r3
 8024c16:	370c      	adds	r7, #12
 8024c18:	46bd      	mov	sp, r7
 8024c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c1e:	4770      	bx	lr

08024c20 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8024c20:	b480      	push	{r7}
 8024c22:	b083      	sub	sp, #12
 8024c24:	af00      	add	r7, sp, #0
 8024c26:	6078      	str	r0, [r7, #4]
 8024c28:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8024c2a:	687b      	ldr	r3, [r7, #4]
 8024c2c:	681a      	ldr	r2, [r3, #0]
 8024c2e:	683b      	ldr	r3, [r7, #0]
 8024c30:	681b      	ldr	r3, [r3, #0]
 8024c32:	429a      	cmp	r2, r3
 8024c34:	d201      	bcs.n	8024c3a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8024c36:	683b      	ldr	r3, [r7, #0]
 8024c38:	e000      	b.n	8024c3c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8024c3a:	687b      	ldr	r3, [r7, #4]
    }
 8024c3c:	4618      	mov	r0, r3
 8024c3e:	370c      	adds	r7, #12
 8024c40:	46bd      	mov	sp, r7
 8024c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c46:	4770      	bx	lr

08024c48 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8024c48:	b590      	push	{r4, r7, lr}
 8024c4a:	b085      	sub	sp, #20
 8024c4c:	af00      	add	r7, sp, #0
 8024c4e:	6078      	str	r0, [r7, #4]
 8024c50:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024c52:	f107 030c 	add.w	r3, r7, #12
 8024c56:	6879      	ldr	r1, [r7, #4]
 8024c58:	4618      	mov	r0, r3
 8024c5a:	f000 f82c 	bl	8024cb6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8024c5e:	f107 030c 	add.w	r3, r7, #12
 8024c62:	6839      	ldr	r1, [r7, #0]
 8024c64:	4618      	mov	r0, r3
 8024c66:	f000 ff53 	bl	8025b10 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>
 8024c6a:	4604      	mov	r4, r0
 8024c6c:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024c6e:	f107 030c 	add.w	r3, r7, #12
 8024c72:	4618      	mov	r0, r3
 8024c74:	f000 f830 	bl	8024cd8 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8024c78:	4623      	mov	r3, r4
      }
 8024c7a:	4618      	mov	r0, r3
 8024c7c:	3714      	adds	r7, #20
 8024c7e:	46bd      	mov	sp, r7
 8024c80:	bd90      	pop	{r4, r7, pc}

08024c82 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8024c82:	b580      	push	{r7, lr}
 8024c84:	b086      	sub	sp, #24
 8024c86:	af00      	add	r7, sp, #0
 8024c88:	60f8      	str	r0, [r7, #12]
 8024c8a:	60b9      	str	r1, [r7, #8]
 8024c8c:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8024c8e:	68bb      	ldr	r3, [r7, #8]
 8024c90:	617b      	str	r3, [r7, #20]
 8024c92:	697a      	ldr	r2, [r7, #20]
 8024c94:	687b      	ldr	r3, [r7, #4]
 8024c96:	429a      	cmp	r2, r3
 8024c98:	d209      	bcs.n	8024cae <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8024c9a:	68f8      	ldr	r0, [r7, #12]
 8024c9c:	f7ff fe46 	bl	802492c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8024ca0:	4602      	mov	r2, r0
 8024ca2:	697b      	ldr	r3, [r7, #20]
 8024ca4:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8024ca6:	697b      	ldr	r3, [r7, #20]
 8024ca8:	3304      	adds	r3, #4
 8024caa:	617b      	str	r3, [r7, #20]
 8024cac:	e7f1      	b.n	8024c92 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8024cae:	bf00      	nop
 8024cb0:	3718      	adds	r7, #24
 8024cb2:	46bd      	mov	sp, r7
 8024cb4:	bd80      	pop	{r7, pc}

08024cb6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8024cb6:	b580      	push	{r7, lr}
 8024cb8:	b082      	sub	sp, #8
 8024cba:	af00      	add	r7, sp, #0
 8024cbc:	6078      	str	r0, [r7, #4]
 8024cbe:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8024cc0:	6838      	ldr	r0, [r7, #0]
 8024cc2:	f000 fd18 	bl	80256f6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024cc6:	4603      	mov	r3, r0
 8024cc8:	4619      	mov	r1, r3
 8024cca:	6878      	ldr	r0, [r7, #4]
 8024ccc:	f000 ff2f 	bl	8025b2e <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>
 8024cd0:	6878      	ldr	r0, [r7, #4]
 8024cd2:	3708      	adds	r7, #8
 8024cd4:	46bd      	mov	sp, r7
 8024cd6:	bd80      	pop	{r7, pc}

08024cd8 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8024cd8:	b580      	push	{r7, lr}
 8024cda:	b082      	sub	sp, #8
 8024cdc:	af00      	add	r7, sp, #0
 8024cde:	6078      	str	r0, [r7, #4]
 8024ce0:	6878      	ldr	r0, [r7, #4]
 8024ce2:	f000 ff31 	bl	8025b48 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>
 8024ce6:	687b      	ldr	r3, [r7, #4]
 8024ce8:	4618      	mov	r0, r3
 8024cea:	3708      	adds	r7, #8
 8024cec:	46bd      	mov	sp, r7
 8024cee:	bd80      	pop	{r7, pc}

08024cf0 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8024cf0:	b580      	push	{r7, lr}
 8024cf2:	b084      	sub	sp, #16
 8024cf4:	af00      	add	r7, sp, #0
 8024cf6:	60f8      	str	r0, [r7, #12]
 8024cf8:	60b9      	str	r1, [r7, #8]
 8024cfa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8024cfc:	687a      	ldr	r2, [r7, #4]
 8024cfe:	68b9      	ldr	r1, [r7, #8]
 8024d00:	68f8      	ldr	r0, [r7, #12]
 8024d02:	f000 ff2c 	bl	8025b5e <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>
 8024d06:	bf00      	nop
 8024d08:	3710      	adds	r7, #16
 8024d0a:	46bd      	mov	sp, r7
 8024d0c:	bd80      	pop	{r7, pc}

08024d0e <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8024d0e:	b580      	push	{r7, lr}
 8024d10:	b082      	sub	sp, #8
 8024d12:	af00      	add	r7, sp, #0
 8024d14:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8024d16:	6878      	ldr	r0, [r7, #4]
 8024d18:	f000 ff39 	bl	8025b8e <_ZNSaIjEC1Ev>
 8024d1c:	687b      	ldr	r3, [r7, #4]
 8024d1e:	4618      	mov	r0, r3
 8024d20:	f000 ff41 	bl	8025ba6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
	{ }
 8024d24:	687b      	ldr	r3, [r7, #4]
 8024d26:	4618      	mov	r0, r3
 8024d28:	3708      	adds	r7, #8
 8024d2a:	46bd      	mov	sp, r7
 8024d2c:	bd80      	pop	{r7, pc}

08024d2e <_ZNSaIjED1Ev>:
 8024d2e:	b580      	push	{r7, lr}
 8024d30:	b082      	sub	sp, #8
 8024d32:	af00      	add	r7, sp, #0
 8024d34:	6078      	str	r0, [r7, #4]
 8024d36:	6878      	ldr	r0, [r7, #4]
 8024d38:	f000 ff4e 	bl	8025bd8 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>
 8024d3c:	687b      	ldr	r3, [r7, #4]
 8024d3e:	4618      	mov	r0, r3
 8024d40:	3708      	adds	r7, #8
 8024d42:	46bd      	mov	sp, r7
 8024d44:	bd80      	pop	{r7, pc}

08024d46 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8024d46:	b590      	push	{r4, r7, lr}
 8024d48:	b089      	sub	sp, #36	; 0x24
 8024d4a:	af00      	add	r7, sp, #0
 8024d4c:	6078      	str	r0, [r7, #4]
 8024d4e:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8024d50:	2004      	movs	r0, #4
 8024d52:	f7fc f8b9 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024d56:	4602      	mov	r2, r0
 8024d58:	683b      	ldr	r3, [r7, #0]
 8024d5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8024d5e:	3301      	adds	r3, #1
 8024d60:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024d62:	2308      	movs	r3, #8
 8024d64:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8024d66:	69fb      	ldr	r3, [r7, #28]
 8024d68:	3302      	adds	r3, #2
 8024d6a:	613b      	str	r3, [r7, #16]
 8024d6c:	f107 0210 	add.w	r2, r7, #16
 8024d70:	f107 030c 	add.w	r3, r7, #12
 8024d74:	4611      	mov	r1, r2
 8024d76:	4618      	mov	r0, r3
 8024d78:	f7ff ff52 	bl	8024c20 <_ZSt3maxIjERKT_S2_S2_>
 8024d7c:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024d7e:	681a      	ldr	r2, [r3, #0]
 8024d80:	687b      	ldr	r3, [r7, #4]
 8024d82:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8024d84:	687b      	ldr	r3, [r7, #4]
 8024d86:	685b      	ldr	r3, [r3, #4]
 8024d88:	4619      	mov	r1, r3
 8024d8a:	6878      	ldr	r0, [r7, #4]
 8024d8c:	f000 ff2f 	bl	8025bee <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8024d90:	4602      	mov	r2, r0
 8024d92:	687b      	ldr	r3, [r7, #4]
 8024d94:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024d96:	687b      	ldr	r3, [r7, #4]
 8024d98:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8024d9a:	687b      	ldr	r3, [r7, #4]
 8024d9c:	6859      	ldr	r1, [r3, #4]
 8024d9e:	69fb      	ldr	r3, [r7, #28]
 8024da0:	1acb      	subs	r3, r1, r3
 8024da2:	085b      	lsrs	r3, r3, #1
 8024da4:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024da6:	4413      	add	r3, r2
 8024da8:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8024daa:	69fb      	ldr	r3, [r7, #28]
 8024dac:	009b      	lsls	r3, r3, #2
 8024dae:	69ba      	ldr	r2, [r7, #24]
 8024db0:	4413      	add	r3, r2
 8024db2:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8024db4:	697a      	ldr	r2, [r7, #20]
 8024db6:	69b9      	ldr	r1, [r7, #24]
 8024db8:	6878      	ldr	r0, [r7, #4]
 8024dba:	f000 ff35 	bl	8025c28 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8024dbe:	687b      	ldr	r3, [r7, #4]
 8024dc0:	3308      	adds	r3, #8
 8024dc2:	69b9      	ldr	r1, [r7, #24]
 8024dc4:	4618      	mov	r0, r3
 8024dc6:	f000 fe2e 	bl	8025a26 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8024dca:	687b      	ldr	r3, [r7, #4]
 8024dcc:	f103 0218 	add.w	r2, r3, #24
 8024dd0:	697b      	ldr	r3, [r7, #20]
 8024dd2:	3b04      	subs	r3, #4
 8024dd4:	4619      	mov	r1, r3
 8024dd6:	4610      	mov	r0, r2
 8024dd8:	f000 fe25 	bl	8025a26 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8024ddc:	687b      	ldr	r3, [r7, #4]
 8024dde:	68da      	ldr	r2, [r3, #12]
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024de4:	687b      	ldr	r3, [r7, #4]
 8024de6:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8024de8:	2004      	movs	r0, #4
 8024dea:	f7fc f86d 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024dee:	4602      	mov	r2, r0
 8024df0:	683b      	ldr	r3, [r7, #0]
 8024df2:	fbb3 f1f2 	udiv	r1, r3, r2
 8024df6:	fb01 f202 	mul.w	r2, r1, r2
 8024dfa:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8024dfc:	009b      	lsls	r3, r3, #2
 8024dfe:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024e00:	687b      	ldr	r3, [r7, #4]
 8024e02:	619a      	str	r2, [r3, #24]
    }
 8024e04:	bf00      	nop
 8024e06:	3724      	adds	r7, #36	; 0x24
 8024e08:	46bd      	mov	sp, r7
 8024e0a:	bd90      	pop	{r4, r7, pc}

08024e0c <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8024e0c:	b580      	push	{r7, lr}
 8024e0e:	b086      	sub	sp, #24
 8024e10:	af00      	add	r7, sp, #0
 8024e12:	60f8      	str	r0, [r7, #12]
 8024e14:	60b9      	str	r1, [r7, #8]
 8024e16:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024e18:	68bb      	ldr	r3, [r7, #8]
 8024e1a:	617b      	str	r3, [r7, #20]
 8024e1c:	697a      	ldr	r2, [r7, #20]
 8024e1e:	687b      	ldr	r3, [r7, #4]
 8024e20:	429a      	cmp	r2, r3
 8024e22:	d209      	bcs.n	8024e38 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x2c>
	_M_deallocate_node(*__n);
 8024e24:	697b      	ldr	r3, [r7, #20]
 8024e26:	681b      	ldr	r3, [r3, #0]
 8024e28:	4619      	mov	r1, r3
 8024e2a:	68f8      	ldr	r0, [r7, #12]
 8024e2c:	f000 fe14 	bl	8025a58 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024e30:	697b      	ldr	r3, [r7, #20]
 8024e32:	3304      	adds	r3, #4
 8024e34:	617b      	str	r3, [r7, #20]
 8024e36:	e7f1      	b.n	8024e1c <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x10>
    }
 8024e38:	bf00      	nop
 8024e3a:	3718      	adds	r7, #24
 8024e3c:	46bd      	mov	sp, r7
 8024e3e:	bd80      	pop	{r7, pc}

08024e40 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8024e40:	b580      	push	{r7, lr}
 8024e42:	b086      	sub	sp, #24
 8024e44:	af00      	add	r7, sp, #0
 8024e46:	60f8      	str	r0, [r7, #12]
 8024e48:	60b9      	str	r1, [r7, #8]
 8024e4a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024e4c:	f107 0314 	add.w	r3, r7, #20
 8024e50:	68f9      	ldr	r1, [r7, #12]
 8024e52:	4618      	mov	r0, r3
 8024e54:	f000 ff02 	bl	8025c5c <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024e58:	f107 0314 	add.w	r3, r7, #20
 8024e5c:	687a      	ldr	r2, [r7, #4]
 8024e5e:	68b9      	ldr	r1, [r7, #8]
 8024e60:	4618      	mov	r0, r3
 8024e62:	f000 ff18 	bl	8025c96 <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024e66:	f107 0314 	add.w	r3, r7, #20
 8024e6a:	4618      	mov	r0, r3
 8024e6c:	f000 ff07 	bl	8025c7e <_ZNSaIPjED1Ev>
      }
 8024e70:	bf00      	nop
 8024e72:	3718      	adds	r7, #24
 8024e74:	46bd      	mov	sp, r7
 8024e76:	bd80      	pop	{r7, pc}

08024e78 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8024e78:	b580      	push	{r7, lr}
 8024e7a:	b082      	sub	sp, #8
 8024e7c:	af00      	add	r7, sp, #0
 8024e7e:	6078      	str	r0, [r7, #4]
 8024e80:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8024e82:	6839      	ldr	r1, [r7, #0]
 8024e84:	6878      	ldr	r0, [r7, #4]
 8024e86:	f000 ff15 	bl	8025cb4 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
	}
 8024e8a:	bf00      	nop
 8024e8c:	3708      	adds	r7, #8
 8024e8e:	46bd      	mov	sp, r7
 8024e90:	bd80      	pop	{r7, pc}

08024e92 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8024e92:	b580      	push	{r7, lr}
 8024e94:	b086      	sub	sp, #24
 8024e96:	af00      	add	r7, sp, #0
 8024e98:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8024e9a:	f107 0308 	add.w	r3, r7, #8
 8024e9e:	6879      	ldr	r1, [r7, #4]
 8024ea0:	4618      	mov	r0, r3
 8024ea2:	f7ff fa82 	bl	80243aa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8024ea6:	f107 0308 	add.w	r3, r7, #8
 8024eaa:	4619      	mov	r1, r3
 8024eac:	6878      	ldr	r0, [r7, #4]
 8024eae:	f7ff fcbd 	bl	802482c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
 8024eb2:	bf00      	nop
 8024eb4:	3718      	adds	r7, #24
 8024eb6:	46bd      	mov	sp, r7
 8024eb8:	bd80      	pop	{r7, pc}

08024eba <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>:
    { }
#endif

  template<typename _Alloc>
    _GLIBCXX14_CONSTEXPR inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8024eba:	b580      	push	{r7, lr}
 8024ebc:	b082      	sub	sp, #8
 8024ebe:	af00      	add	r7, sp, #0
 8024ec0:	6078      	str	r0, [r7, #4]
 8024ec2:	6039      	str	r1, [r7, #0]
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
#else
      __do_alloc_on_move(__one, __two, __pocma());
 8024ec4:	461a      	mov	r2, r3
 8024ec6:	6839      	ldr	r1, [r7, #0]
 8024ec8:	6878      	ldr	r0, [r7, #4]
 8024eca:	f000 ff26 	bl	8025d1a <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>
#endif
    }
 8024ece:	bf00      	nop
 8024ed0:	3708      	adds	r7, #8
 8024ed2:	46bd      	mov	sp, r7
 8024ed4:	bd80      	pop	{r7, pc}

08024ed6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8024ed6:	b580      	push	{r7, lr}
 8024ed8:	b082      	sub	sp, #8
 8024eda:	af00      	add	r7, sp, #0
 8024edc:	6078      	str	r0, [r7, #4]
 8024ede:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8024ee0:	6839      	ldr	r1, [r7, #0]
 8024ee2:	6878      	ldr	r0, [r7, #4]
 8024ee4:	f000 ff26 	bl	8025d34 <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 8024ee8:	bf00      	nop
 8024eea:	3708      	adds	r7, #8
 8024eec:	46bd      	mov	sp, r7
 8024eee:	bd80      	pop	{r7, pc}

08024ef0 <_ZNSt5dequeIjSaIjEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8024ef0:	b580      	push	{r7, lr}
 8024ef2:	b086      	sub	sp, #24
 8024ef4:	af00      	add	r7, sp, #0
 8024ef6:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8024ef8:	f107 0308 	add.w	r3, r7, #8
 8024efc:	6879      	ldr	r1, [r7, #4]
 8024efe:	4618      	mov	r0, r3
 8024f00:	f7ff fad9 	bl	80244b6 <_ZNSt5dequeIjSaIjEE5beginEv>
 8024f04:	f107 0308 	add.w	r3, r7, #8
 8024f08:	4619      	mov	r1, r3
 8024f0a:	6878      	ldr	r0, [r7, #4]
 8024f0c:	f000 ff45 	bl	8025d9a <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>
 8024f10:	bf00      	nop
 8024f12:	3718      	adds	r7, #24
 8024f14:	46bd      	mov	sp, r7
 8024f16:	bd80      	pop	{r7, pc}

08024f18 <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8024f18:	b580      	push	{r7, lr}
 8024f1a:	b082      	sub	sp, #8
 8024f1c:	af00      	add	r7, sp, #0
 8024f1e:	6078      	str	r0, [r7, #4]
 8024f20:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8024f22:	461a      	mov	r2, r3
 8024f24:	6839      	ldr	r1, [r7, #0]
 8024f26:	6878      	ldr	r0, [r7, #4]
 8024f28:	f000 ff6a 	bl	8025e00 <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8024f2c:	bf00      	nop
 8024f2e:	3708      	adds	r7, #8
 8024f30:	46bd      	mov	sp, r7
 8024f32:	bd80      	pop	{r7, pc}

08024f34 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8024f34:	b480      	push	{r7}
 8024f36:	b085      	sub	sp, #20
 8024f38:	af00      	add	r7, sp, #0
 8024f3a:	60f8      	str	r0, [r7, #12]
 8024f3c:	60b9      	str	r1, [r7, #8]
 8024f3e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8024f40:	68ba      	ldr	r2, [r7, #8]
 8024f42:	68fb      	ldr	r3, [r7, #12]
 8024f44:	1ad3      	subs	r3, r2, r3
 8024f46:	109b      	asrs	r3, r3, #2
 8024f48:	4a04      	ldr	r2, [pc, #16]	; (8024f5c <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag+0x28>)
 8024f4a:	fb02 f303 	mul.w	r3, r2, r3
    }
 8024f4e:	4618      	mov	r0, r3
 8024f50:	3714      	adds	r7, #20
 8024f52:	46bd      	mov	sp, r7
 8024f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f58:	4770      	bx	lr
 8024f5a:	bf00      	nop
 8024f5c:	cccccccd 	.word	0xcccccccd

08024f60 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8024f60:	b480      	push	{r7}
 8024f62:	b085      	sub	sp, #20
 8024f64:	af00      	add	r7, sp, #0
 8024f66:	60f8      	str	r0, [r7, #12]
 8024f68:	60b9      	str	r1, [r7, #8]
 8024f6a:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8024f6c:	68fb      	ldr	r3, [r7, #12]
 8024f6e:	6819      	ldr	r1, [r3, #0]
 8024f70:	68ba      	ldr	r2, [r7, #8]
 8024f72:	4613      	mov	r3, r2
 8024f74:	009b      	lsls	r3, r3, #2
 8024f76:	4413      	add	r3, r2
 8024f78:	009b      	lsls	r3, r3, #2
 8024f7a:	18ca      	adds	r2, r1, r3
 8024f7c:	68fb      	ldr	r3, [r7, #12]
 8024f7e:	601a      	str	r2, [r3, #0]
    }
 8024f80:	bf00      	nop
 8024f82:	3714      	adds	r7, #20
 8024f84:	46bd      	mov	sp, r7
 8024f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f8a:	4770      	bx	lr

08024f8c <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8024f8c:	b480      	push	{r7}
 8024f8e:	b083      	sub	sp, #12
 8024f90:	af00      	add	r7, sp, #0
 8024f92:	6078      	str	r0, [r7, #4]
    { return __it; }
 8024f94:	687b      	ldr	r3, [r7, #4]
 8024f96:	4618      	mov	r0, r3
 8024f98:	370c      	adds	r7, #12
 8024f9a:	46bd      	mov	sp, r7
 8024f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fa0:	4770      	bx	lr

08024fa2 <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8024fa2:	b5b0      	push	{r4, r5, r7, lr}
 8024fa4:	b090      	sub	sp, #64	; 0x40
 8024fa6:	af00      	add	r7, sp, #0
 8024fa8:	60f8      	str	r0, [r7, #12]
 8024faa:	60b9      	str	r1, [r7, #8]
 8024fac:	607a      	str	r2, [r7, #4]
 8024fae:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8024fb0:	68b8      	ldr	r0, [r7, #8]
 8024fb2:	f000 ff32 	bl	8025e1a <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024fb6:	4604      	mov	r4, r0
 8024fb8:	6878      	ldr	r0, [r7, #4]
 8024fba:	f000 ff2e 	bl	8025e1a <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024fbe:	4605      	mov	r5, r0
 8024fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8024fc4:	6839      	ldr	r1, [r7, #0]
 8024fc6:	4618      	mov	r0, r3
 8024fc8:	f7ff fa0d 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024fcc:	f107 0320 	add.w	r3, r7, #32
 8024fd0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8024fd4:	4611      	mov	r1, r2
 8024fd6:	4618      	mov	r0, r3
 8024fd8:	f000 ff2a 	bl	8025e30 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8024fdc:	f107 0010 	add.w	r0, r7, #16
 8024fe0:	f107 0320 	add.w	r3, r7, #32
 8024fe4:	462a      	mov	r2, r5
 8024fe6:	4621      	mov	r1, r4
 8024fe8:	f000 ff44 	bl	8025e74 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>
 8024fec:	68fb      	ldr	r3, [r7, #12]
 8024fee:	f107 0210 	add.w	r2, r7, #16
 8024ff2:	6839      	ldr	r1, [r7, #0]
 8024ff4:	4618      	mov	r0, r3
 8024ff6:	f000 ff8f 	bl	8025f18 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8024ffa:	68f8      	ldr	r0, [r7, #12]
 8024ffc:	3740      	adds	r7, #64	; 0x40
 8024ffe:	46bd      	mov	sp, r7
 8025000:	bdb0      	pop	{r4, r5, r7, pc}
	...

08025004 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8025004:	b580      	push	{r7, lr}
 8025006:	b086      	sub	sp, #24
 8025008:	af00      	add	r7, sp, #0
 802500a:	60f8      	str	r0, [r7, #12]
 802500c:	60b9      	str	r1, [r7, #8]
 802500e:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8025010:	68bb      	ldr	r3, [r7, #8]
 8025012:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8025014:	68bb      	ldr	r3, [r7, #8]
 8025016:	68db      	ldr	r3, [r3, #12]
 8025018:	1ad3      	subs	r3, r2, r3
 802501a:	109b      	asrs	r3, r3, #2
 802501c:	4a0d      	ldr	r2, [pc, #52]	; (8025054 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x50>)
 802501e:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8025022:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8025024:	687a      	ldr	r2, [r7, #4]
 8025026:	697b      	ldr	r3, [r7, #20]
 8025028:	429a      	cmp	r2, r3
 802502a:	d906      	bls.n	802503a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 802502c:	687a      	ldr	r2, [r7, #4]
 802502e:	697b      	ldr	r3, [r7, #20]
 8025030:	1ad3      	subs	r3, r2, r3
 8025032:	4619      	mov	r1, r3
 8025034:	68b8      	ldr	r0, [r7, #8]
 8025036:	f000 ff7d 	bl	8025f34 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 802503a:	68bb      	ldr	r3, [r7, #8]
 802503c:	f103 0108 	add.w	r1, r3, #8
 8025040:	687a      	ldr	r2, [r7, #4]
 8025042:	68fb      	ldr	r3, [r7, #12]
 8025044:	4618      	mov	r0, r3
 8025046:	f000 ffbb 	bl	8025fc0 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 802504a:	68f8      	ldr	r0, [r7, #12]
 802504c:	3718      	adds	r7, #24
 802504e:	46bd      	mov	sp, r7
 8025050:	bd80      	pop	{r7, pc}
 8025052:	bf00      	nop
 8025054:	cccccccd 	.word	0xcccccccd

08025058 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8025058:	b580      	push	{r7, lr}
 802505a:	b088      	sub	sp, #32
 802505c:	af00      	add	r7, sp, #0
 802505e:	60f8      	str	r0, [r7, #12]
 8025060:	60b9      	str	r1, [r7, #8]
 8025062:	607a      	str	r2, [r7, #4]
 8025064:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8025066:	f107 0310 	add.w	r3, r7, #16
 802506a:	6839      	ldr	r1, [r7, #0]
 802506c:	4618      	mov	r0, r3
 802506e:	f7ff f9ba 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025072:	68f8      	ldr	r0, [r7, #12]
 8025074:	f107 0310 	add.w	r3, r7, #16
 8025078:	687a      	ldr	r2, [r7, #4]
 802507a:	68b9      	ldr	r1, [r7, #8]
 802507c:	f000 ffb3 	bl	8025fe6 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8025080:	68f8      	ldr	r0, [r7, #12]
 8025082:	3720      	adds	r7, #32
 8025084:	46bd      	mov	sp, r7
 8025086:	bd80      	pop	{r7, pc}

08025088 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8025088:	b580      	push	{r7, lr}
 802508a:	b086      	sub	sp, #24
 802508c:	af00      	add	r7, sp, #0
 802508e:	60f8      	str	r0, [r7, #12]
 8025090:	60b9      	str	r1, [r7, #8]
 8025092:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8025094:	68bb      	ldr	r3, [r7, #8]
 8025096:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 8025098:	68bb      	ldr	r3, [r7, #8]
 802509a:	699b      	ldr	r3, [r3, #24]
 802509c:	1ad3      	subs	r3, r2, r3
 802509e:	109b      	asrs	r3, r3, #2
 80250a0:	4a0d      	ldr	r2, [pc, #52]	; (80250d8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x50>)
 80250a2:	fb02 f303 	mul.w	r3, r2, r3
 80250a6:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 80250a8:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 80250aa:	687a      	ldr	r2, [r7, #4]
 80250ac:	697b      	ldr	r3, [r7, #20]
 80250ae:	429a      	cmp	r2, r3
 80250b0:	d906      	bls.n	80250c0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 80250b2:	687a      	ldr	r2, [r7, #4]
 80250b4:	697b      	ldr	r3, [r7, #20]
 80250b6:	1ad3      	subs	r3, r2, r3
 80250b8:	4619      	mov	r1, r3
 80250ba:	68b8      	ldr	r0, [r7, #8]
 80250bc:	f000 ffae 	bl	802601c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 80250c0:	68bb      	ldr	r3, [r7, #8]
 80250c2:	f103 0118 	add.w	r1, r3, #24
 80250c6:	687a      	ldr	r2, [r7, #4]
 80250c8:	68fb      	ldr	r3, [r7, #12]
 80250ca:	4618      	mov	r0, r3
 80250cc:	f7ff fc82 	bl	80249d4 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 80250d0:	68f8      	ldr	r0, [r7, #12]
 80250d2:	3718      	adds	r7, #24
 80250d4:	46bd      	mov	sp, r7
 80250d6:	bd80      	pop	{r7, pc}
 80250d8:	cccccccd 	.word	0xcccccccd

080250dc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>:
    }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
 80250dc:	b5b0      	push	{r4, r5, r7, lr}
 80250de:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 80250e2:	af04      	add	r7, sp, #16
 80250e4:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 80250e8:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 80250ec:	6020      	str	r0, [r4, #0]
 80250ee:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 80250f2:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 80250f6:	6001      	str	r1, [r0, #0]
 80250f8:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80250fc:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8025100:	600a      	str	r2, [r1, #0]
 8025102:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025106:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802510a:	6013      	str	r3, [r2, #0]
      _M_insert_aux(iterator __pos,
		    _ForwardIterator __first, _ForwardIterator __last,
		    size_type __n)
      {
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 802510c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025110:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025114:	681b      	ldr	r3, [r3, #0]
 8025116:	f103 0208 	add.w	r2, r3, #8
 802511a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802511e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025122:	4611      	mov	r1, r2
 8025124:	6818      	ldr	r0, [r3, #0]
 8025126:	f7fe ff6b 	bl	8024000 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 802512a:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 802512e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025132:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025136:	6818      	ldr	r0, [r3, #0]
 8025138:	f7fe fcdb 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 802513c:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 8025140:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8025144:	085a      	lsrs	r2, r3, #1
 8025146:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 802514a:	429a      	cmp	r2, r3
 802514c:	f240 8158 	bls.w	8025400 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x324>
	  {
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8025150:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025154:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8025158:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802515c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025160:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025164:	6819      	ldr	r1, [r3, #0]
 8025166:	f7ff ff4d 	bl	8025004 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 802516a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802516e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025172:	681b      	ldr	r3, [r3, #0]
 8025174:	f103 0208 	add.w	r2, r3, #8
 8025178:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802517c:	4611      	mov	r1, r2
 802517e:	4618      	mov	r0, r3
 8025180:	f7ff f931 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 8025184:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025188:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802518c:	681b      	ldr	r3, [r3, #0]
 802518e:	f103 0108 	add.w	r1, r3, #8
 8025192:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025196:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 802519a:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 802519e:	4618      	mov	r0, r3
 80251a0:	f7ff fc18 	bl	80249d4 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80251a4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251a8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80251ac:	681a      	ldr	r2, [r3, #0]
 80251ae:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251b2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80251b6:	4614      	mov	r4, r2
 80251b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80251ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    __try
	      {
		if (__elemsbefore >= difference_type(__n))
 80251be:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80251c2:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80251c6:	429a      	cmp	r2, r3
 80251c8:	f2c0 8098 	blt.w	80252fc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x220>
		  {
		    iterator __start_n = (this->_M_impl._M_start
 80251cc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251d0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80251d4:	681b      	ldr	r3, [r3, #0]
 80251d6:	f103 0108 	add.w	r1, r3, #8
 80251da:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80251de:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251e2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80251e6:	4618      	mov	r0, r3
 80251e8:	f7ff fbf4 	bl	80249d4 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
					  + difference_type(__n));
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 80251ec:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251f0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80251f4:	681b      	ldr	r3, [r3, #0]
 80251f6:	f103 0208 	add.w	r2, r3, #8
 80251fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80251fe:	4611      	mov	r1, r2
 8025200:	4618      	mov	r0, r3
 8025202:	f7ff f8f0 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025206:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802520a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802520e:	4611      	mov	r1, r2
 8025210:	4618      	mov	r0, r3
 8025212:	f7ff f8e8 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025216:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802521a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 802521e:	4611      	mov	r1, r2
 8025220:	4618      	mov	r0, r3
 8025222:	f7ff f8e0 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						__start_n, __new_start,
						_M_get_Tp_allocator());
 8025226:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802522a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802522e:	681b      	ldr	r3, [r3, #0]
 8025230:	4618      	mov	r0, r3
 8025232:	f7fe ff11 	bl	8024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025236:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8025238:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802523c:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 8025240:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8025244:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8025248:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 802524c:	9400      	str	r4, [sp, #0]
 802524e:	f000 ff29 	bl	80260a4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		    this->_M_impl._M_start = __new_start;
 8025252:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025256:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802525a:	681b      	ldr	r3, [r3, #0]
 802525c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025260:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8025264:	f103 0408 	add.w	r4, r3, #8
 8025268:	4613      	mov	r3, r2
 802526a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802526c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 8025270:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8025274:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8025278:	4611      	mov	r1, r2
 802527a:	4618      	mov	r0, r3
 802527c:	f7ff f8b3 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025280:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025284:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025288:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 802528c:	6819      	ldr	r1, [r3, #0]
 802528e:	4610      	mov	r0, r2
 8025290:	f7ff f8a9 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025294:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025298:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 802529c:	4611      	mov	r1, r2
 802529e:	4618      	mov	r0, r3
 80252a0:	f7ff f8a1 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80252a4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252a8:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 80252ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80252b0:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80252b4:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 80252b8:	f000 ff2d 	bl	8026116 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 80252bc:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80252c0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252c4:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 80252c8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252cc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80252d0:	6819      	ldr	r1, [r3, #0]
 80252d2:	f000 fe75 	bl	8025fc0 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80252d6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252da:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80252de:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80252e2:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80252e6:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80252ea:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80252ee:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80252f2:	6812      	ldr	r2, [r2, #0]
 80252f4:	6809      	ldr	r1, [r1, #0]
 80252f6:	f7ff f9f1 	bl	80246dc <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
			       __new_finish._M_node + 1);
	      __throw_exception_again;
	    }
	}
      }
 80252fa:	e1dd      	b.n	80256b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		    _ForwardIterator __mid = __first;
 80252fc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025300:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8025304:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025308:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 802530c:	6812      	ldr	r2, [r2, #0]
 802530e:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 8025310:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025314:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8025318:	1ad2      	subs	r2, r2, r3
 802531a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802531e:	4611      	mov	r1, r2
 8025320:	4618      	mov	r0, r3
 8025322:	f000 ff2e 	bl	8026182 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8025326:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802532a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802532e:	681b      	ldr	r3, [r3, #0]
 8025330:	f103 0208 	add.w	r2, r3, #8
 8025334:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8025338:	4611      	mov	r1, r2
 802533a:	4618      	mov	r0, r3
 802533c:	f7ff f853 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025340:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025344:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025348:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 802534c:	6819      	ldr	r1, [r3, #0]
 802534e:	4610      	mov	r0, r2
 8025350:	f7ff f849 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025354:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025358:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 802535c:	681c      	ldr	r4, [r3, #0]
 802535e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8025362:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8025366:	4611      	mov	r1, r2
 8025368:	4618      	mov	r0, r3
 802536a:	f7ff f83c 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						   _M_get_Tp_allocator());
 802536e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025372:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025376:	681b      	ldr	r3, [r3, #0]
 8025378:	4618      	mov	r0, r3
 802537a:	f7fe fe6d 	bl	8024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802537e:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8025380:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025384:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8025388:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802538c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8025390:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 8025394:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8025398:	9202      	str	r2, [sp, #8]
 802539a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 802539e:	9201      	str	r2, [sp, #4]
 80253a0:	9400      	str	r4, [sp, #0]
 80253a2:	681b      	ldr	r3, [r3, #0]
 80253a4:	462a      	mov	r2, r5
 80253a6:	f000 feff 	bl	80261a8 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>
		    this->_M_impl._M_start = __new_start;
 80253aa:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253ae:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80253b2:	681b      	ldr	r3, [r3, #0]
 80253b4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80253b8:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 80253bc:	f103 0408 	add.w	r4, r3, #8
 80253c0:	4613      	mov	r3, r2
 80253c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80253c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 80253c8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253cc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80253d0:	681c      	ldr	r4, [r3, #0]
 80253d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80253d6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80253da:	4611      	mov	r1, r2
 80253dc:	4618      	mov	r0, r3
 80253de:	f7ff f802 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80253e2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253e6:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80253ea:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80253ee:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80253f2:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80253f6:	6812      	ldr	r2, [r2, #0]
 80253f8:	4621      	mov	r1, r4
 80253fa:	f7ff f96f 	bl	80246dc <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80253fe:	e15b      	b.n	80256b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 8025400:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025404:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 8025408:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802540c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025410:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025414:	6819      	ldr	r1, [r3, #0]
 8025416:	f7ff fe37 	bl	8025088 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 802541a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802541e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025422:	681b      	ldr	r3, [r3, #0]
 8025424:	f103 0218 	add.w	r2, r3, #24
 8025428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802542c:	4611      	mov	r1, r2
 802542e:	4618      	mov	r0, r3
 8025430:	f7fe ffd9 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    difference_type(__length) - __elemsbefore;
 8025434:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 8025438:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 802543c:	1ad3      	subs	r3, r2, r3
 802543e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 8025442:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025446:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802544a:	681b      	ldr	r3, [r3, #0]
 802544c:	f103 0118 	add.w	r1, r3, #24
 8025450:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025454:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8025458:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 802545c:	4618      	mov	r0, r3
 802545e:	f000 fdaf 	bl	8025fc0 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8025462:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025466:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802546a:	681a      	ldr	r2, [r3, #0]
 802546c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025470:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8025474:	4614      	mov	r4, r2
 8025476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 802547c:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8025480:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8025484:	429a      	cmp	r2, r3
 8025486:	f340 8096 	ble.w	80255b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 802548a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802548e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025492:	681b      	ldr	r3, [r3, #0]
 8025494:	f103 0118 	add.w	r1, r3, #24
 8025498:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 802549c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254a0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80254a4:	4618      	mov	r0, r3
 80254a6:	f000 fd8b 	bl	8025fc0 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		  std::__uninitialized_move_a(__finish_n,
 80254aa:	f107 0218 	add.w	r2, r7, #24
 80254ae:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80254b2:	4611      	mov	r1, r2
 80254b4:	4618      	mov	r0, r3
 80254b6:	f7fe ff96 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 80254ba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254be:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80254c2:	681b      	ldr	r3, [r3, #0]
 80254c4:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 80254c8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80254cc:	4611      	mov	r1, r2
 80254ce:	4618      	mov	r0, r3
 80254d0:	f7fe ff89 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 80254d4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254d8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80254dc:	681b      	ldr	r3, [r3, #0]
 80254de:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 80254e2:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80254e6:	4611      	mov	r1, r2
 80254e8:	4618      	mov	r0, r3
 80254ea:	f7fe ff7c 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      _M_get_Tp_allocator());
 80254ee:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254f2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80254f6:	681b      	ldr	r3, [r3, #0]
 80254f8:	4618      	mov	r0, r3
 80254fa:	f7fe fdad 	bl	8024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80254fe:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 8025500:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025504:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8025508:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 802550c:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8025510:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8025514:	9400      	str	r4, [sp, #0]
 8025516:	f000 fdc5 	bl	80260a4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 802551a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802551e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025522:	681b      	ldr	r3, [r3, #0]
 8025524:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025528:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 802552c:	f103 0418 	add.w	r4, r3, #24
 8025530:	4613      	mov	r3, r2
 8025532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 8025538:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802553c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025540:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8025544:	6819      	ldr	r1, [r3, #0]
 8025546:	4610      	mov	r0, r2
 8025548:	f7fe ff4d 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802554c:	f107 0218 	add.w	r2, r7, #24
 8025550:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8025554:	4611      	mov	r1, r2
 8025556:	4618      	mov	r0, r3
 8025558:	f7fe ff45 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802555c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8025560:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8025564:	4611      	mov	r1, r2
 8025566:	4618      	mov	r0, r3
 8025568:	f7fe ff3d 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802556c:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8025570:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8025574:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8025578:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 802557c:	f000 fe54 	bl	8026228 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		  std::copy(__first, __last, __pos);
 8025580:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025584:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025588:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 802558c:	6819      	ldr	r1, [r3, #0]
 802558e:	4610      	mov	r0, r2
 8025590:	f7fe ff29 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025594:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8025598:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 802559c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80255a0:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80255a4:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80255a8:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80255ac:	6812      	ldr	r2, [r2, #0]
 80255ae:	6809      	ldr	r1, [r1, #0]
 80255b0:	f7ff f894 	bl	80246dc <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80255b4:	e080      	b.n	80256b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		  _ForwardIterator __mid = __first;
 80255b6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80255ba:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80255be:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80255c2:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80255c6:	6812      	ldr	r2, [r2, #0]
 80255c8:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 80255ca:	f107 0314 	add.w	r3, r7, #20
 80255ce:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 80255d2:	4618      	mov	r0, r3
 80255d4:	f000 fdd5 	bl	8026182 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80255d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80255dc:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80255e0:	681c      	ldr	r4, [r3, #0]
 80255e2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80255e6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80255ea:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80255ee:	6819      	ldr	r1, [r3, #0]
 80255f0:	4610      	mov	r0, r2
 80255f2:	f7fe fef8 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 80255f6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80255fa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80255fe:	681b      	ldr	r3, [r3, #0]
 8025600:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8025604:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8025608:	4611      	mov	r1, r2
 802560a:	4618      	mov	r0, r3
 802560c:	f7fe feeb 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 8025610:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025614:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025618:	681b      	ldr	r3, [r3, #0]
 802561a:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 802561e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8025622:	4611      	mov	r1, r2
 8025624:	4618      	mov	r0, r3
 8025626:	f7fe fede 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 _M_get_Tp_allocator());
 802562a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802562e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025632:	681b      	ldr	r3, [r3, #0]
 8025634:	4618      	mov	r0, r3
 8025636:	f7fe fd0f 	bl	8024058 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802563a:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 802563c:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8025640:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8025644:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025648:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802564c:	9302      	str	r3, [sp, #8]
 802564e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8025652:	9301      	str	r3, [sp, #4]
 8025654:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8025658:	9300      	str	r3, [sp, #0]
 802565a:	460b      	mov	r3, r1
 802565c:	6812      	ldr	r2, [r2, #0]
 802565e:	4621      	mov	r1, r4
 8025660:	f000 fe18 	bl	8026294 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8025664:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025668:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802566c:	681b      	ldr	r3, [r3, #0]
 802566e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025672:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8025676:	f103 0418 	add.w	r4, r3, #24
 802567a:	4613      	mov	r3, r2
 802567c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802567e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 8025682:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025686:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 802568a:	681c      	ldr	r4, [r3, #0]
 802568c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025690:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025694:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8025698:	6819      	ldr	r1, [r3, #0]
 802569a:	4610      	mov	r0, r2
 802569c:	f7fe fea3 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80256a0:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 80256a4:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80256a8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80256ac:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 80256b0:	4622      	mov	r2, r4
 80256b2:	6809      	ldr	r1, [r1, #0]
 80256b4:	f7ff f812 	bl	80246dc <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80256b8:	bf00      	nop
 80256ba:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 80256be:	46bd      	mov	sp, r7
 80256c0:	bdb0      	pop	{r4, r5, r7, pc}

080256c2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80256c2:	b580      	push	{r7, lr}
 80256c4:	b084      	sub	sp, #16
 80256c6:	af00      	add	r7, sp, #0
 80256c8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80256ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80256ce:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80256d0:	6878      	ldr	r0, [r7, #4]
 80256d2:	f000 fe1f 	bl	8026314 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>
 80256d6:	4603      	mov	r3, r0
 80256d8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80256da:	f107 0208 	add.w	r2, r7, #8
 80256de:	f107 030c 	add.w	r3, r7, #12
 80256e2:	4611      	mov	r1, r2
 80256e4:	4618      	mov	r0, r3
 80256e6:	f000 fe21 	bl	802632c <_ZSt3minIjERKT_S2_S2_>
 80256ea:	4603      	mov	r3, r0
 80256ec:	681b      	ldr	r3, [r3, #0]
      }
 80256ee:	4618      	mov	r0, r3
 80256f0:	3710      	adds	r7, #16
 80256f2:	46bd      	mov	sp, r7
 80256f4:	bd80      	pop	{r7, pc}

080256f6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80256f6:	b480      	push	{r7}
 80256f8:	b083      	sub	sp, #12
 80256fa:	af00      	add	r7, sp, #0
 80256fc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80256fe:	687b      	ldr	r3, [r7, #4]
 8025700:	4618      	mov	r0, r3
 8025702:	370c      	adds	r7, #12
 8025704:	46bd      	mov	sp, r7
 8025706:	f85d 7b04 	ldr.w	r7, [sp], #4
 802570a:	4770      	bx	lr

0802570c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 802570c:	b590      	push	{r4, r7, lr}
 802570e:	b08b      	sub	sp, #44	; 0x2c
 8025710:	af00      	add	r7, sp, #0
 8025712:	60f8      	str	r0, [r7, #12]
 8025714:	60b9      	str	r1, [r7, #8]
 8025716:	4613      	mov	r3, r2
 8025718:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 802571a:	68fb      	ldr	r3, [r7, #12]
 802571c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802571e:	68fb      	ldr	r3, [r7, #12]
 8025720:	695b      	ldr	r3, [r3, #20]
 8025722:	1ad3      	subs	r3, r2, r3
 8025724:	109b      	asrs	r3, r3, #2
 8025726:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8025728:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 802572a:	68bb      	ldr	r3, [r7, #8]
 802572c:	6a3a      	ldr	r2, [r7, #32]
 802572e:	4413      	add	r3, r2
 8025730:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8025732:	68fb      	ldr	r3, [r7, #12]
 8025734:	685a      	ldr	r2, [r3, #4]
 8025736:	69fb      	ldr	r3, [r7, #28]
 8025738:	005b      	lsls	r3, r3, #1
 802573a:	429a      	cmp	r2, r3
 802573c:	d92d      	bls.n	802579a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802573e:	68fb      	ldr	r3, [r7, #12]
 8025740:	681a      	ldr	r2, [r3, #0]
 8025742:	68fb      	ldr	r3, [r7, #12]
 8025744:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8025746:	69fb      	ldr	r3, [r7, #28]
 8025748:	1acb      	subs	r3, r1, r3
 802574a:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802574c:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802574e:	79fb      	ldrb	r3, [r7, #7]
 8025750:	2b00      	cmp	r3, #0
 8025752:	d002      	beq.n	802575a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8025754:	68bb      	ldr	r3, [r7, #8]
 8025756:	009b      	lsls	r3, r3, #2
 8025758:	e000      	b.n	802575c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x50>
 802575a:	2300      	movs	r3, #0
 802575c:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802575e:	4413      	add	r3, r2
 8025760:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8025762:	68fb      	ldr	r3, [r7, #12]
 8025764:	695b      	ldr	r3, [r3, #20]
 8025766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025768:	429a      	cmp	r2, r3
 802576a:	d209      	bcs.n	8025780 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 802576c:	68fb      	ldr	r3, [r7, #12]
 802576e:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8025770:	68fb      	ldr	r3, [r7, #12]
 8025772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8025774:	3304      	adds	r3, #4
 8025776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025778:	4619      	mov	r1, r3
 802577a:	f000 fdeb 	bl	8026354 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 802577e:	e048      	b.n	8025812 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8025780:	68fb      	ldr	r3, [r7, #12]
 8025782:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8025784:	68fb      	ldr	r3, [r7, #12]
 8025786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8025788:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 802578a:	6a3b      	ldr	r3, [r7, #32]
 802578c:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802578e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025790:	4413      	add	r3, r2
 8025792:	461a      	mov	r2, r3
 8025794:	f000 fdf6 	bl	8026384 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 8025798:	e03b      	b.n	8025812 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 802579a:	68fb      	ldr	r3, [r7, #12]
 802579c:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 802579e:	68fb      	ldr	r3, [r7, #12]
 80257a0:	3304      	adds	r3, #4
 80257a2:	f107 0208 	add.w	r2, r7, #8
 80257a6:	4611      	mov	r1, r2
 80257a8:	4618      	mov	r0, r3
 80257aa:	f7ff fa39 	bl	8024c20 <_ZSt3maxIjERKT_S2_S2_>
 80257ae:	4603      	mov	r3, r0
 80257b0:	681b      	ldr	r3, [r3, #0]
 80257b2:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80257b4:	3302      	adds	r3, #2
 80257b6:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80257b8:	68fb      	ldr	r3, [r7, #12]
 80257ba:	69b9      	ldr	r1, [r7, #24]
 80257bc:	4618      	mov	r0, r3
 80257be:	f7ff fa43 	bl	8024c48 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 80257c2:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80257c4:	69ba      	ldr	r2, [r7, #24]
 80257c6:	69fb      	ldr	r3, [r7, #28]
 80257c8:	1ad3      	subs	r3, r2, r3
 80257ca:	085b      	lsrs	r3, r3, #1
 80257cc:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80257ce:	79fb      	ldrb	r3, [r7, #7]
 80257d0:	2b00      	cmp	r3, #0
 80257d2:	d002      	beq.n	80257da <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xce>
 80257d4:	68bb      	ldr	r3, [r7, #8]
 80257d6:	009b      	lsls	r3, r3, #2
 80257d8:	e000      	b.n	80257dc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 80257da:	2300      	movs	r3, #0
 80257dc:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80257de:	697a      	ldr	r2, [r7, #20]
 80257e0:	4413      	add	r3, r2
 80257e2:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80257e4:	68fb      	ldr	r3, [r7, #12]
 80257e6:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80257e8:	68fb      	ldr	r3, [r7, #12]
 80257ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80257ec:	3304      	adds	r3, #4
 80257ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80257f0:	4619      	mov	r1, r3
 80257f2:	f000 fdaf 	bl	8026354 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80257f6:	68f8      	ldr	r0, [r7, #12]
 80257f8:	68fb      	ldr	r3, [r7, #12]
 80257fa:	6819      	ldr	r1, [r3, #0]
 80257fc:	68fb      	ldr	r3, [r7, #12]
 80257fe:	685b      	ldr	r3, [r3, #4]
 8025800:	461a      	mov	r2, r3
 8025802:	f7fe fdb6 	bl	8024372 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 8025806:	68fb      	ldr	r3, [r7, #12]
 8025808:	697a      	ldr	r2, [r7, #20]
 802580a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 802580c:	68fb      	ldr	r3, [r7, #12]
 802580e:	69ba      	ldr	r2, [r7, #24]
 8025810:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8025812:	68fb      	ldr	r3, [r7, #12]
 8025814:	3308      	adds	r3, #8
 8025816:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025818:	4618      	mov	r0, r3
 802581a:	f7ff f899 	bl	8024950 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 802581e:	68fb      	ldr	r3, [r7, #12]
 8025820:	f103 0018 	add.w	r0, r3, #24
 8025824:	6a3a      	ldr	r2, [r7, #32]
 8025826:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 802582a:	4413      	add	r3, r2
 802582c:	009b      	lsls	r3, r3, #2
 802582e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025830:	4413      	add	r3, r2
 8025832:	4619      	mov	r1, r3
 8025834:	f7ff f88c 	bl	8024950 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
    }
 8025838:	bf00      	nop
 802583a:	372c      	adds	r7, #44	; 0x2c
 802583c:	46bd      	mov	sp, r7
 802583e:	bd90      	pop	{r4, r7, pc}

08025840 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8025840:	b580      	push	{r7, lr}
 8025842:	b082      	sub	sp, #8
 8025844:	af00      	add	r7, sp, #0
 8025846:	6078      	str	r0, [r7, #4]
 8025848:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 802584a:	2200      	movs	r2, #0
 802584c:	6839      	ldr	r1, [r7, #0]
 802584e:	6878      	ldr	r0, [r7, #4]
 8025850:	f000 fdb0 	bl	80263b4 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8025854:	4603      	mov	r3, r0
 8025856:	4618      	mov	r0, r3
 8025858:	3708      	adds	r7, #8
 802585a:	46bd      	mov	sp, r7
 802585c:	bd80      	pop	{r7, pc}

0802585e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802585e:	b580      	push	{r7, lr}
 8025860:	b084      	sub	sp, #16
 8025862:	af00      	add	r7, sp, #0
 8025864:	60f8      	str	r0, [r7, #12]
 8025866:	60b9      	str	r1, [r7, #8]
 8025868:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802586a:	687a      	ldr	r2, [r7, #4]
 802586c:	68b9      	ldr	r1, [r7, #8]
 802586e:	68f8      	ldr	r0, [r7, #12]
 8025870:	f000 fdc1 	bl	80263f6 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>
 8025874:	bf00      	nop
 8025876:	3710      	adds	r7, #16
 8025878:	46bd      	mov	sp, r7
 802587a:	bd80      	pop	{r7, pc}

0802587c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 802587c:	b590      	push	{r4, r7, lr}
 802587e:	b085      	sub	sp, #20
 8025880:	af00      	add	r7, sp, #0
 8025882:	6078      	str	r0, [r7, #4]
 8025884:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8025886:	687b      	ldr	r3, [r7, #4]
 8025888:	681a      	ldr	r2, [r3, #0]
 802588a:	687b      	ldr	r3, [r7, #4]
 802588c:	685b      	ldr	r3, [r3, #4]
 802588e:	1ad3      	subs	r3, r2, r3
 8025890:	109b      	asrs	r3, r3, #2
 8025892:	4a2b      	ldr	r2, [pc, #172]	; (8025940 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xc4>)
 8025894:	fb02 f303 	mul.w	r3, r2, r3
 8025898:	461a      	mov	r2, r3
 802589a:	683b      	ldr	r3, [r7, #0]
 802589c:	4413      	add	r3, r2
 802589e:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 80258a0:	68fb      	ldr	r3, [r7, #12]
 80258a2:	2b00      	cmp	r3, #0
 80258a4:	db08      	blt.n	80258b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 80258a6:	f7ff f882 	bl	80249ae <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80258aa:	4603      	mov	r3, r0
 80258ac:	461a      	mov	r2, r3
 80258ae:	68fb      	ldr	r3, [r7, #12]
 80258b0:	4293      	cmp	r3, r2
 80258b2:	da01      	bge.n	80258b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 80258b4:	2301      	movs	r3, #1
 80258b6:	e000      	b.n	80258ba <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3e>
 80258b8:	2300      	movs	r3, #0
 80258ba:	2b00      	cmp	r3, #0
 80258bc:	d00a      	beq.n	80258d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x58>
	  _M_cur += __n;
 80258be:	687b      	ldr	r3, [r7, #4]
 80258c0:	6819      	ldr	r1, [r3, #0]
 80258c2:	683a      	ldr	r2, [r7, #0]
 80258c4:	4613      	mov	r3, r2
 80258c6:	009b      	lsls	r3, r3, #2
 80258c8:	4413      	add	r3, r2
 80258ca:	009b      	lsls	r3, r3, #2
 80258cc:	18ca      	adds	r2, r1, r3
 80258ce:	687b      	ldr	r3, [r7, #4]
 80258d0:	601a      	str	r2, [r3, #0]
 80258d2:	e02f      	b.n	8025934 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80258d4:	68fb      	ldr	r3, [r7, #12]
 80258d6:	2b00      	cmp	r3, #0
 80258d8:	dd07      	ble.n	80258ea <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x6e>
 80258da:	f7ff f868 	bl	80249ae <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80258de:	4603      	mov	r3, r0
 80258e0:	461a      	mov	r2, r3
 80258e2:	68fb      	ldr	r3, [r7, #12]
 80258e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80258e8:	e007      	b.n	80258fa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 80258ea:	68fb      	ldr	r3, [r7, #12]
 80258ec:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 80258ee:	f7ff f85e 	bl	80249ae <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80258f2:	4603      	mov	r3, r0
 80258f4:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80258f8:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 80258fa:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 80258fc:	687b      	ldr	r3, [r7, #4]
 80258fe:	68da      	ldr	r2, [r3, #12]
 8025900:	68bb      	ldr	r3, [r7, #8]
 8025902:	009b      	lsls	r3, r3, #2
 8025904:	4413      	add	r3, r2
 8025906:	4619      	mov	r1, r3
 8025908:	6878      	ldr	r0, [r7, #4]
 802590a:	f7ff f821 	bl	8024950 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first + (__offset - __node_offset
 802590e:	687b      	ldr	r3, [r7, #4]
 8025910:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8025912:	f7ff f84c 	bl	80249ae <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8025916:	4603      	mov	r3, r0
 8025918:	461a      	mov	r2, r3
 802591a:	68bb      	ldr	r3, [r7, #8]
 802591c:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8025920:	68fa      	ldr	r2, [r7, #12]
 8025922:	1ad3      	subs	r3, r2, r3
 8025924:	461a      	mov	r2, r3
 8025926:	4613      	mov	r3, r2
 8025928:	009b      	lsls	r3, r3, #2
 802592a:	4413      	add	r3, r2
 802592c:	009b      	lsls	r3, r3, #2
 802592e:	18e2      	adds	r2, r4, r3
 8025930:	687b      	ldr	r3, [r7, #4]
 8025932:	601a      	str	r2, [r3, #0]
	return *this;
 8025934:	687b      	ldr	r3, [r7, #4]
      }
 8025936:	4618      	mov	r0, r3
 8025938:	3714      	adds	r7, #20
 802593a:	46bd      	mov	sp, r7
 802593c:	bd90      	pop	{r4, r7, pc}
 802593e:	bf00      	nop
 8025940:	cccccccd 	.word	0xcccccccd

08025944 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8025944:	b480      	push	{r7}
 8025946:	b083      	sub	sp, #12
 8025948:	af00      	add	r7, sp, #0
 802594a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 802594c:	687b      	ldr	r3, [r7, #4]
 802594e:	4618      	mov	r0, r3
 8025950:	370c      	adds	r7, #12
 8025952:	46bd      	mov	sp, r7
 8025954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025958:	4770      	bx	lr

0802595a <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 802595a:	b590      	push	{r4, r7, lr}
 802595c:	b085      	sub	sp, #20
 802595e:	af00      	add	r7, sp, #0
 8025960:	60f8      	str	r0, [r7, #12]
 8025962:	60b9      	str	r1, [r7, #8]
 8025964:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8025966:	6878      	ldr	r0, [r7, #4]
 8025968:	f7ff ffec 	bl	8025944 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 802596c:	4603      	mov	r3, r0
 802596e:	681c      	ldr	r4, [r3, #0]
 8025970:	68bb      	ldr	r3, [r7, #8]
 8025972:	4619      	mov	r1, r3
 8025974:	2004      	movs	r0, #4
 8025976:	f7fb fa9b 	bl	8020eb0 <_ZnwjPv>
 802597a:	4603      	mov	r3, r0
 802597c:	601c      	str	r4, [r3, #0]
 802597e:	bf00      	nop
 8025980:	3714      	adds	r7, #20
 8025982:	46bd      	mov	sp, r7
 8025984:	bd90      	pop	{r4, r7, pc}

08025986 <_ZNKSt5dequeIjSaIjEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8025986:	b580      	push	{r7, lr}
 8025988:	b082      	sub	sp, #8
 802598a:	af00      	add	r7, sp, #0
 802598c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 802598e:	687b      	ldr	r3, [r7, #4]
 8025990:	f103 0218 	add.w	r2, r3, #24
 8025994:	687b      	ldr	r3, [r7, #4]
 8025996:	3308      	adds	r3, #8
 8025998:	4619      	mov	r1, r3
 802599a:	4610      	mov	r0, r2
 802599c:	f000 fd3e 	bl	802641c <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>
 80259a0:	4603      	mov	r3, r0
 80259a2:	4618      	mov	r0, r3
 80259a4:	3708      	adds	r7, #8
 80259a6:	46bd      	mov	sp, r7
 80259a8:	bd80      	pop	{r7, pc}

080259aa <_ZNKSt5dequeIjSaIjEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80259aa:	b580      	push	{r7, lr}
 80259ac:	b082      	sub	sp, #8
 80259ae:	af00      	add	r7, sp, #0
 80259b0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80259b2:	687b      	ldr	r3, [r7, #4]
 80259b4:	4618      	mov	r0, r3
 80259b6:	f000 fd6f 	bl	8026498 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80259ba:	4603      	mov	r3, r0
 80259bc:	4618      	mov	r0, r3
 80259be:	f000 fd51 	bl	8026464 <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>
 80259c2:	4603      	mov	r3, r0
 80259c4:	4618      	mov	r0, r3
 80259c6:	3708      	adds	r7, #8
 80259c8:	46bd      	mov	sp, r7
 80259ca:	bd80      	pop	{r7, pc}

080259cc <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80259cc:	b580      	push	{r7, lr}
 80259ce:	b082      	sub	sp, #8
 80259d0:	af00      	add	r7, sp, #0
 80259d2:	6078      	str	r0, [r7, #4]
 80259d4:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80259d6:	683b      	ldr	r3, [r7, #0]
 80259d8:	1c5a      	adds	r2, r3, #1
 80259da:	687b      	ldr	r3, [r7, #4]
 80259dc:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80259de:	6879      	ldr	r1, [r7, #4]
 80259e0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80259e2:	6879      	ldr	r1, [r7, #4]
 80259e4:	6809      	ldr	r1, [r1, #0]
 80259e6:	1a41      	subs	r1, r0, r1
 80259e8:	1089      	asrs	r1, r1, #2
 80259ea:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80259ec:	429a      	cmp	r2, r3
 80259ee:	d904      	bls.n	80259fa <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80259f0:	2200      	movs	r2, #0
 80259f2:	6839      	ldr	r1, [r7, #0]
 80259f4:	6878      	ldr	r0, [r7, #4]
 80259f6:	f000 fd5a 	bl	80264ae <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>
      }
 80259fa:	bf00      	nop
 80259fc:	3708      	adds	r7, #8
 80259fe:	46bd      	mov	sp, r7
 8025a00:	bd80      	pop	{r7, pc}

08025a02 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8025a02:	b590      	push	{r4, r7, lr}
 8025a04:	b083      	sub	sp, #12
 8025a06:	af00      	add	r7, sp, #0
 8025a08:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8025a0a:	687c      	ldr	r4, [r7, #4]
 8025a0c:	2004      	movs	r0, #4
 8025a0e:	f7fb fa5b 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8025a12:	4603      	mov	r3, r0
 8025a14:	4619      	mov	r1, r3
 8025a16:	4620      	mov	r0, r4
 8025a18:	f000 fde3 	bl	80265e2 <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>
 8025a1c:	4603      	mov	r3, r0
      }
 8025a1e:	4618      	mov	r0, r3
 8025a20:	370c      	adds	r7, #12
 8025a22:	46bd      	mov	sp, r7
 8025a24:	bd90      	pop	{r4, r7, pc}

08025a26 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8025a26:	b590      	push	{r4, r7, lr}
 8025a28:	b083      	sub	sp, #12
 8025a2a:	af00      	add	r7, sp, #0
 8025a2c:	6078      	str	r0, [r7, #4]
 8025a2e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8025a30:	687b      	ldr	r3, [r7, #4]
 8025a32:	683a      	ldr	r2, [r7, #0]
 8025a34:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8025a36:	683b      	ldr	r3, [r7, #0]
 8025a38:	681a      	ldr	r2, [r3, #0]
 8025a3a:	687b      	ldr	r3, [r7, #4]
 8025a3c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8025a3e:	687b      	ldr	r3, [r7, #4]
 8025a40:	685c      	ldr	r4, [r3, #4]
 8025a42:	f000 fddd 	bl	8026600 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 8025a46:	4603      	mov	r3, r0
 8025a48:	009b      	lsls	r3, r3, #2
 8025a4a:	18e2      	adds	r2, r4, r3
 8025a4c:	687b      	ldr	r3, [r7, #4]
 8025a4e:	609a      	str	r2, [r3, #8]
      }
 8025a50:	bf00      	nop
 8025a52:	370c      	adds	r7, #12
 8025a54:	46bd      	mov	sp, r7
 8025a56:	bd90      	pop	{r4, r7, pc}

08025a58 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8025a58:	b590      	push	{r4, r7, lr}
 8025a5a:	b083      	sub	sp, #12
 8025a5c:	af00      	add	r7, sp, #0
 8025a5e:	6078      	str	r0, [r7, #4]
 8025a60:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8025a62:	687c      	ldr	r4, [r7, #4]
 8025a64:	2004      	movs	r0, #4
 8025a66:	f7fb fa2f 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8025a6a:	4603      	mov	r3, r0
 8025a6c:	461a      	mov	r2, r3
 8025a6e:	6839      	ldr	r1, [r7, #0]
 8025a70:	4620      	mov	r0, r4
 8025a72:	f000 fdcd 	bl	8026610 <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>
      }
 8025a76:	bf00      	nop
 8025a78:	370c      	adds	r7, #12
 8025a7a:	46bd      	mov	sp, r7
 8025a7c:	bd90      	pop	{r4, r7, pc}

08025a7e <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8025a7e:	b480      	push	{r7}
 8025a80:	b083      	sub	sp, #12
 8025a82:	af00      	add	r7, sp, #0
 8025a84:	6078      	str	r0, [r7, #4]
 8025a86:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8025a88:	683b      	ldr	r3, [r7, #0]
 8025a8a:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025a8c:	687b      	ldr	r3, [r7, #4]
 8025a8e:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8025a90:	683b      	ldr	r3, [r7, #0]
 8025a92:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025a94:	687b      	ldr	r3, [r7, #4]
 8025a96:	605a      	str	r2, [r3, #4]
 8025a98:	683b      	ldr	r3, [r7, #0]
 8025a9a:	689a      	ldr	r2, [r3, #8]
 8025a9c:	687b      	ldr	r3, [r7, #4]
 8025a9e:	609a      	str	r2, [r3, #8]
 8025aa0:	683b      	ldr	r3, [r7, #0]
 8025aa2:	68da      	ldr	r2, [r3, #12]
 8025aa4:	687b      	ldr	r3, [r7, #4]
 8025aa6:	60da      	str	r2, [r3, #12]
 8025aa8:	687b      	ldr	r3, [r7, #4]
 8025aaa:	4618      	mov	r0, r3
 8025aac:	370c      	adds	r7, #12
 8025aae:	46bd      	mov	sp, r7
 8025ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ab4:	4770      	bx	lr

08025ab6 <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>:
	destroy(_Up* __p)
 8025ab6:	b480      	push	{r7}
 8025ab8:	b083      	sub	sp, #12
 8025aba:	af00      	add	r7, sp, #0
 8025abc:	6078      	str	r0, [r7, #4]
 8025abe:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8025ac0:	bf00      	nop
 8025ac2:	370c      	adds	r7, #12
 8025ac4:	46bd      	mov	sp, r7
 8025ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025aca:	4770      	bx	lr

08025acc <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025acc:	b480      	push	{r7}
 8025ace:	b083      	sub	sp, #12
 8025ad0:	af00      	add	r7, sp, #0
 8025ad2:	6078      	str	r0, [r7, #4]
 8025ad4:	687b      	ldr	r3, [r7, #4]
 8025ad6:	4618      	mov	r0, r3
 8025ad8:	370c      	adds	r7, #12
 8025ada:	46bd      	mov	sp, r7
 8025adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ae0:	4770      	bx	lr

08025ae2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8025ae2:	b480      	push	{r7}
 8025ae4:	b083      	sub	sp, #12
 8025ae6:	af00      	add	r7, sp, #0
 8025ae8:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8025aea:	687b      	ldr	r3, [r7, #4]
 8025aec:	2200      	movs	r2, #0
 8025aee:	601a      	str	r2, [r3, #0]
 8025af0:	687b      	ldr	r3, [r7, #4]
 8025af2:	2200      	movs	r2, #0
 8025af4:	605a      	str	r2, [r3, #4]
 8025af6:	687b      	ldr	r3, [r7, #4]
 8025af8:	2200      	movs	r2, #0
 8025afa:	609a      	str	r2, [r3, #8]
 8025afc:	687b      	ldr	r3, [r7, #4]
 8025afe:	2200      	movs	r2, #0
 8025b00:	60da      	str	r2, [r3, #12]
 8025b02:	687b      	ldr	r3, [r7, #4]
 8025b04:	4618      	mov	r0, r3
 8025b06:	370c      	adds	r7, #12
 8025b08:	46bd      	mov	sp, r7
 8025b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b0e:	4770      	bx	lr

08025b10 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8025b10:	b580      	push	{r7, lr}
 8025b12:	b082      	sub	sp, #8
 8025b14:	af00      	add	r7, sp, #0
 8025b16:	6078      	str	r0, [r7, #4]
 8025b18:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8025b1a:	2200      	movs	r2, #0
 8025b1c:	6839      	ldr	r1, [r7, #0]
 8025b1e:	6878      	ldr	r0, [r7, #4]
 8025b20:	f000 fd85 	bl	802662e <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8025b24:	4603      	mov	r3, r0
 8025b26:	4618      	mov	r0, r3
 8025b28:	3708      	adds	r7, #8
 8025b2a:	46bd      	mov	sp, r7
 8025b2c:	bd80      	pop	{r7, pc}

08025b2e <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8025b2e:	b580      	push	{r7, lr}
 8025b30:	b082      	sub	sp, #8
 8025b32:	af00      	add	r7, sp, #0
 8025b34:	6078      	str	r0, [r7, #4]
 8025b36:	6039      	str	r1, [r7, #0]
 8025b38:	6878      	ldr	r0, [r7, #4]
 8025b3a:	f000 fd96 	bl	802666a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>
 8025b3e:	687b      	ldr	r3, [r7, #4]
 8025b40:	4618      	mov	r0, r3
 8025b42:	3708      	adds	r7, #8
 8025b44:	46bd      	mov	sp, r7
 8025b46:	bd80      	pop	{r7, pc}

08025b48 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025b48:	b480      	push	{r7}
 8025b4a:	b083      	sub	sp, #12
 8025b4c:	af00      	add	r7, sp, #0
 8025b4e:	6078      	str	r0, [r7, #4]
 8025b50:	687b      	ldr	r3, [r7, #4]
 8025b52:	4618      	mov	r0, r3
 8025b54:	370c      	adds	r7, #12
 8025b56:	46bd      	mov	sp, r7
 8025b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b5c:	4770      	bx	lr

08025b5e <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8025b5e:	b580      	push	{r7, lr}
 8025b60:	b084      	sub	sp, #16
 8025b62:	af00      	add	r7, sp, #0
 8025b64:	60f8      	str	r0, [r7, #12]
 8025b66:	60b9      	str	r1, [r7, #8]
 8025b68:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8025b6a:	687b      	ldr	r3, [r7, #4]
 8025b6c:	009b      	lsls	r3, r3, #2
 8025b6e:	4619      	mov	r1, r3
 8025b70:	68b8      	ldr	r0, [r7, #8]
 8025b72:	f016 f8e9 	bl	803bd48 <_ZdlPvj>
      }
 8025b76:	bf00      	nop
 8025b78:	3710      	adds	r7, #16
 8025b7a:	46bd      	mov	sp, r7
 8025b7c:	bd80      	pop	{r7, pc}

08025b7e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8025b7e:	b580      	push	{r7, lr}
 8025b80:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025b82:	2014      	movs	r0, #20
 8025b84:	f7fb f9a0 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8025b88:	4603      	mov	r3, r0
 8025b8a:	4618      	mov	r0, r3
 8025b8c:	bd80      	pop	{r7, pc}

08025b8e <_ZNSaIjEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8025b8e:	b580      	push	{r7, lr}
 8025b90:	b082      	sub	sp, #8
 8025b92:	af00      	add	r7, sp, #0
 8025b94:	6078      	str	r0, [r7, #4]
 8025b96:	6878      	ldr	r0, [r7, #4]
 8025b98:	f000 fd72 	bl	8026680 <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>
 8025b9c:	687b      	ldr	r3, [r7, #4]
 8025b9e:	4618      	mov	r0, r3
 8025ba0:	3708      	adds	r7, #8
 8025ba2:	46bd      	mov	sp, r7
 8025ba4:	bd80      	pop	{r7, pc}

08025ba6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8025ba6:	b580      	push	{r7, lr}
 8025ba8:	b082      	sub	sp, #8
 8025baa:	af00      	add	r7, sp, #0
 8025bac:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8025bae:	687b      	ldr	r3, [r7, #4]
 8025bb0:	2200      	movs	r2, #0
 8025bb2:	601a      	str	r2, [r3, #0]
 8025bb4:	687b      	ldr	r3, [r7, #4]
 8025bb6:	2200      	movs	r2, #0
 8025bb8:	605a      	str	r2, [r3, #4]
 8025bba:	687b      	ldr	r3, [r7, #4]
 8025bbc:	3308      	adds	r3, #8
 8025bbe:	4618      	mov	r0, r3
 8025bc0:	f000 fd69 	bl	8026696 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
 8025bc4:	687b      	ldr	r3, [r7, #4]
 8025bc6:	3318      	adds	r3, #24
 8025bc8:	4618      	mov	r0, r3
 8025bca:	f000 fd64 	bl	8026696 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
	{ }
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	4618      	mov	r0, r3
 8025bd2:	3708      	adds	r7, #8
 8025bd4:	46bd      	mov	sp, r7
 8025bd6:	bd80      	pop	{r7, pc}

08025bd8 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025bd8:	b480      	push	{r7}
 8025bda:	b083      	sub	sp, #12
 8025bdc:	af00      	add	r7, sp, #0
 8025bde:	6078      	str	r0, [r7, #4]
 8025be0:	687b      	ldr	r3, [r7, #4]
 8025be2:	4618      	mov	r0, r3
 8025be4:	370c      	adds	r7, #12
 8025be6:	46bd      	mov	sp, r7
 8025be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bec:	4770      	bx	lr

08025bee <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8025bee:	b590      	push	{r4, r7, lr}
 8025bf0:	b085      	sub	sp, #20
 8025bf2:	af00      	add	r7, sp, #0
 8025bf4:	6078      	str	r0, [r7, #4]
 8025bf6:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025bf8:	f107 030c 	add.w	r3, r7, #12
 8025bfc:	6879      	ldr	r1, [r7, #4]
 8025bfe:	4618      	mov	r0, r3
 8025c00:	f000 f82c 	bl	8025c5c <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8025c04:	f107 030c 	add.w	r3, r7, #12
 8025c08:	6839      	ldr	r1, [r7, #0]
 8025c0a:	4618      	mov	r0, r3
 8025c0c:	f000 fd5a 	bl	80266c4 <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>
 8025c10:	4604      	mov	r4, r0
 8025c12:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025c14:	f107 030c 	add.w	r3, r7, #12
 8025c18:	4618      	mov	r0, r3
 8025c1a:	f000 f830 	bl	8025c7e <_ZNSaIPjED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8025c1e:	4623      	mov	r3, r4
      }
 8025c20:	4618      	mov	r0, r3
 8025c22:	3714      	adds	r7, #20
 8025c24:	46bd      	mov	sp, r7
 8025c26:	bd90      	pop	{r4, r7, pc}

08025c28 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8025c28:	b580      	push	{r7, lr}
 8025c2a:	b086      	sub	sp, #24
 8025c2c:	af00      	add	r7, sp, #0
 8025c2e:	60f8      	str	r0, [r7, #12]
 8025c30:	60b9      	str	r1, [r7, #8]
 8025c32:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025c34:	68bb      	ldr	r3, [r7, #8]
 8025c36:	617b      	str	r3, [r7, #20]
 8025c38:	697a      	ldr	r2, [r7, #20]
 8025c3a:	687b      	ldr	r3, [r7, #4]
 8025c3c:	429a      	cmp	r2, r3
 8025c3e:	d209      	bcs.n	8025c54 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8025c40:	68f8      	ldr	r0, [r7, #12]
 8025c42:	f7ff fede 	bl	8025a02 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8025c46:	4602      	mov	r2, r0
 8025c48:	697b      	ldr	r3, [r7, #20]
 8025c4a:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025c4c:	697b      	ldr	r3, [r7, #20]
 8025c4e:	3304      	adds	r3, #4
 8025c50:	617b      	str	r3, [r7, #20]
 8025c52:	e7f1      	b.n	8025c38 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x10>
    }
 8025c54:	bf00      	nop
 8025c56:	3718      	adds	r7, #24
 8025c58:	46bd      	mov	sp, r7
 8025c5a:	bd80      	pop	{r7, pc}

08025c5c <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8025c5c:	b580      	push	{r7, lr}
 8025c5e:	b082      	sub	sp, #8
 8025c60:	af00      	add	r7, sp, #0
 8025c62:	6078      	str	r0, [r7, #4]
 8025c64:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8025c66:	6838      	ldr	r0, [r7, #0]
 8025c68:	f000 fc16 	bl	8026498 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025c6c:	4603      	mov	r3, r0
 8025c6e:	4619      	mov	r1, r3
 8025c70:	6878      	ldr	r0, [r7, #4]
 8025c72:	f000 fd36 	bl	80266e2 <_ZNSaIPjEC1IjEERKSaIT_E>
 8025c76:	6878      	ldr	r0, [r7, #4]
 8025c78:	3708      	adds	r7, #8
 8025c7a:	46bd      	mov	sp, r7
 8025c7c:	bd80      	pop	{r7, pc}

08025c7e <_ZNSaIPjED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8025c7e:	b580      	push	{r7, lr}
 8025c80:	b082      	sub	sp, #8
 8025c82:	af00      	add	r7, sp, #0
 8025c84:	6078      	str	r0, [r7, #4]
 8025c86:	6878      	ldr	r0, [r7, #4]
 8025c88:	f000 fd38 	bl	80266fc <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>
 8025c8c:	687b      	ldr	r3, [r7, #4]
 8025c8e:	4618      	mov	r0, r3
 8025c90:	3708      	adds	r7, #8
 8025c92:	46bd      	mov	sp, r7
 8025c94:	bd80      	pop	{r7, pc}

08025c96 <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8025c96:	b580      	push	{r7, lr}
 8025c98:	b084      	sub	sp, #16
 8025c9a:	af00      	add	r7, sp, #0
 8025c9c:	60f8      	str	r0, [r7, #12]
 8025c9e:	60b9      	str	r1, [r7, #8]
 8025ca0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025ca2:	687a      	ldr	r2, [r7, #4]
 8025ca4:	68b9      	ldr	r1, [r7, #8]
 8025ca6:	68f8      	ldr	r0, [r7, #12]
 8025ca8:	f000 fd33 	bl	8026712 <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>
 8025cac:	bf00      	nop
 8025cae:	3710      	adds	r7, #16
 8025cb0:	46bd      	mov	sp, r7
 8025cb2:	bd80      	pop	{r7, pc}

08025cb4 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8025cb4:	b5b0      	push	{r4, r5, r7, lr}
 8025cb6:	b08c      	sub	sp, #48	; 0x30
 8025cb8:	af00      	add	r7, sp, #0
 8025cba:	6078      	str	r0, [r7, #4]
 8025cbc:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8025cbe:	6878      	ldr	r0, [r7, #4]
 8025cc0:	f000 fd37 	bl	8026732 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025cc4:	4602      	mov	r2, r0
 8025cc6:	f107 0308 	add.w	r3, r7, #8
 8025cca:	4611      	mov	r1, r2
 8025ccc:	4618      	mov	r0, r3
 8025cce:	f000 fd5f 	bl	8026790 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>
      __a = _GLIBCXX_MOVE(__b);
 8025cd2:	6838      	ldr	r0, [r7, #0]
 8025cd4:	f000 fd2d 	bl	8026732 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025cd8:	4602      	mov	r2, r0
 8025cda:	687b      	ldr	r3, [r7, #4]
 8025cdc:	461c      	mov	r4, r3
 8025cde:	4615      	mov	r5, r2
 8025ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025ce8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025cec:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8025cf0:	f107 0308 	add.w	r3, r7, #8
 8025cf4:	4618      	mov	r0, r3
 8025cf6:	f000 fd1c 	bl	8026732 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025cfa:	4602      	mov	r2, r0
 8025cfc:	683b      	ldr	r3, [r7, #0]
 8025cfe:	461c      	mov	r4, r3
 8025d00:	4615      	mov	r5, r2
 8025d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025d0e:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8025d12:	bf00      	nop
 8025d14:	3730      	adds	r7, #48	; 0x30
 8025d16:	46bd      	mov	sp, r7
 8025d18:	bdb0      	pop	{r4, r5, r7, pc}

08025d1a <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8025d1a:	b580      	push	{r7, lr}
 8025d1c:	b084      	sub	sp, #16
 8025d1e:	af00      	add	r7, sp, #0
 8025d20:	60f8      	str	r0, [r7, #12]
 8025d22:	60b9      	str	r1, [r7, #8]
 8025d24:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8025d26:	68b8      	ldr	r0, [r7, #8]
 8025d28:	f000 fd51 	bl	80267ce <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>
 8025d2c:	bf00      	nop
 8025d2e:	3710      	adds	r7, #16
 8025d30:	46bd      	mov	sp, r7
 8025d32:	bd80      	pop	{r7, pc}

08025d34 <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 8025d34:	b5b0      	push	{r4, r5, r7, lr}
 8025d36:	b08c      	sub	sp, #48	; 0x30
 8025d38:	af00      	add	r7, sp, #0
 8025d3a:	6078      	str	r0, [r7, #4]
 8025d3c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8025d3e:	6878      	ldr	r0, [r7, #4]
 8025d40:	f000 fd50 	bl	80267e4 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025d44:	4602      	mov	r2, r0
 8025d46:	f107 0308 	add.w	r3, r7, #8
 8025d4a:	4611      	mov	r1, r2
 8025d4c:	4618      	mov	r0, r3
 8025d4e:	f000 fd78 	bl	8026842 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 8025d52:	6838      	ldr	r0, [r7, #0]
 8025d54:	f000 fd46 	bl	80267e4 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025d58:	4602      	mov	r2, r0
 8025d5a:	687b      	ldr	r3, [r7, #4]
 8025d5c:	461c      	mov	r4, r3
 8025d5e:	4615      	mov	r5, r2
 8025d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025d6c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8025d70:	f107 0308 	add.w	r3, r7, #8
 8025d74:	4618      	mov	r0, r3
 8025d76:	f000 fd35 	bl	80267e4 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025d7a:	4602      	mov	r2, r0
 8025d7c:	683b      	ldr	r3, [r7, #0]
 8025d7e:	461c      	mov	r4, r3
 8025d80:	4615      	mov	r5, r2
 8025d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025d8e:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8025d92:	bf00      	nop
 8025d94:	3730      	adds	r7, #48	; 0x30
 8025d96:	46bd      	mov	sp, r7
 8025d98:	bdb0      	pop	{r4, r5, r7, pc}

08025d9a <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>:
      _M_erase_at_end(iterator __pos)
 8025d9a:	b590      	push	{r4, r7, lr}
 8025d9c:	b08b      	sub	sp, #44	; 0x2c
 8025d9e:	af00      	add	r7, sp, #0
 8025da0:	6078      	str	r0, [r7, #4]
 8025da2:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8025da4:	f107 0308 	add.w	r3, r7, #8
 8025da8:	6839      	ldr	r1, [r7, #0]
 8025daa:	4618      	mov	r0, r3
 8025dac:	f7fe fbac 	bl	8024508 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8025db0:	f107 0318 	add.w	r3, r7, #24
 8025db4:	6879      	ldr	r1, [r7, #4]
 8025db6:	4618      	mov	r0, r3
 8025db8:	f7fe fb8c 	bl	80244d4 <_ZNSt5dequeIjSaIjEE3endEv>
 8025dbc:	687b      	ldr	r3, [r7, #4]
 8025dbe:	4618      	mov	r0, r3
 8025dc0:	f7fe fb97 	bl	80244f2 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025dc4:	4603      	mov	r3, r0
 8025dc6:	f107 0218 	add.w	r2, r7, #24
 8025dca:	f107 0108 	add.w	r1, r7, #8
 8025dce:	6878      	ldr	r0, [r7, #4]
 8025dd0:	f7fe fbb6 	bl	8024540 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 8025dd4:	6878      	ldr	r0, [r7, #4]
 8025dd6:	683b      	ldr	r3, [r7, #0]
 8025dd8:	68db      	ldr	r3, [r3, #12]
 8025dda:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8025ddc:	687b      	ldr	r3, [r7, #4]
 8025dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8025de0:	3304      	adds	r3, #4
 8025de2:	461a      	mov	r2, r3
 8025de4:	f7ff f812 	bl	8024e0c <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	this->_M_impl._M_finish = __pos;
 8025de8:	687b      	ldr	r3, [r7, #4]
 8025dea:	683a      	ldr	r2, [r7, #0]
 8025dec:	f103 0418 	add.w	r4, r3, #24
 8025df0:	4613      	mov	r3, r2
 8025df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8025df8:	bf00      	nop
 8025dfa:	372c      	adds	r7, #44	; 0x2c
 8025dfc:	46bd      	mov	sp, r7
 8025dfe:	bd90      	pop	{r4, r7, pc}

08025e00 <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8025e00:	b580      	push	{r7, lr}
 8025e02:	b084      	sub	sp, #16
 8025e04:	af00      	add	r7, sp, #0
 8025e06:	60f8      	str	r0, [r7, #12]
 8025e08:	60b9      	str	r1, [r7, #8]
 8025e0a:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8025e0c:	68b8      	ldr	r0, [r7, #8]
 8025e0e:	f000 fd37 	bl	8026880 <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>
 8025e12:	bf00      	nop
 8025e14:	3710      	adds	r7, #16
 8025e16:	46bd      	mov	sp, r7
 8025e18:	bd80      	pop	{r7, pc}

08025e1a <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8025e1a:	b480      	push	{r7}
 8025e1c:	b083      	sub	sp, #12
 8025e1e:	af00      	add	r7, sp, #0
 8025e20:	6078      	str	r0, [r7, #4]
    { return __it; }
 8025e22:	687b      	ldr	r3, [r7, #4]
 8025e24:	4618      	mov	r0, r3
 8025e26:	370c      	adds	r7, #12
 8025e28:	46bd      	mov	sp, r7
 8025e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e2e:	4770      	bx	lr

08025e30 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __niter_base(_Iterator __it)
 8025e30:	b580      	push	{r7, lr}
 8025e32:	b082      	sub	sp, #8
 8025e34:	af00      	add	r7, sp, #0
 8025e36:	6078      	str	r0, [r7, #4]
 8025e38:	6039      	str	r1, [r7, #0]
    { return __it; }
 8025e3a:	6839      	ldr	r1, [r7, #0]
 8025e3c:	6878      	ldr	r0, [r7, #4]
 8025e3e:	f7fe fad2 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025e42:	6878      	ldr	r0, [r7, #4]
 8025e44:	3708      	adds	r7, #8
 8025e46:	46bd      	mov	sp, r7
 8025e48:	bd80      	pop	{r7, pc}

08025e4a <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8025e4a:	b480      	push	{r7}
 8025e4c:	b083      	sub	sp, #12
 8025e4e:	af00      	add	r7, sp, #0
 8025e50:	6078      	str	r0, [r7, #4]
 8025e52:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8025e54:	683b      	ldr	r3, [r7, #0]
 8025e56:	681a      	ldr	r2, [r3, #0]
 8025e58:	687b      	ldr	r3, [r7, #4]
 8025e5a:	681b      	ldr	r3, [r3, #0]
 8025e5c:	429a      	cmp	r2, r3
 8025e5e:	da01      	bge.n	8025e64 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8025e60:	683b      	ldr	r3, [r7, #0]
 8025e62:	e000      	b.n	8025e66 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8025e64:	687b      	ldr	r3, [r7, #4]
    }
 8025e66:	4618      	mov	r0, r3
 8025e68:	370c      	adds	r7, #12
 8025e6a:	46bd      	mov	sp, r7
 8025e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e70:	4770      	bx	lr
	...

08025e74 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8025e74:	b580      	push	{r7, lr}
 8025e76:	b088      	sub	sp, #32
 8025e78:	af00      	add	r7, sp, #0
 8025e7a:	60f8      	str	r0, [r7, #12]
 8025e7c:	60b9      	str	r1, [r7, #8]
 8025e7e:	607a      	str	r2, [r7, #4]
 8025e80:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8025e82:	687a      	ldr	r2, [r7, #4]
 8025e84:	68bb      	ldr	r3, [r7, #8]
 8025e86:	1ad3      	subs	r3, r2, r3
 8025e88:	109b      	asrs	r3, r3, #2
 8025e8a:	4a22      	ldr	r2, [pc, #136]	; (8025f14 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8025e8c:	fb02 f303 	mul.w	r3, r2, r3
 8025e90:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8025e92:	697b      	ldr	r3, [r7, #20]
 8025e94:	2b00      	cmp	r3, #0
 8025e96:	dd34      	ble.n	8025f02 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 8025e98:	683b      	ldr	r3, [r7, #0]
 8025e9a:	689a      	ldr	r2, [r3, #8]
 8025e9c:	683b      	ldr	r3, [r7, #0]
 8025e9e:	681b      	ldr	r3, [r3, #0]
 8025ea0:	1ad3      	subs	r3, r2, r3
 8025ea2:	109b      	asrs	r3, r3, #2
 8025ea4:	4a1b      	ldr	r2, [pc, #108]	; (8025f14 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8025ea6:	fb02 f303 	mul.w	r3, r2, r3
 8025eaa:	61bb      	str	r3, [r7, #24]
 8025eac:	f107 0218 	add.w	r2, r7, #24
 8025eb0:	f107 0314 	add.w	r3, r7, #20
 8025eb4:	4611      	mov	r1, r2
 8025eb6:	4618      	mov	r0, r3
 8025eb8:	f7ff ffc7 	bl	8025e4a <_ZSt3minIiERKT_S2_S2_>
 8025ebc:	4603      	mov	r3, r0
	  const difference_type __clen
 8025ebe:	681b      	ldr	r3, [r3, #0]
 8025ec0:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8025ec2:	69fa      	ldr	r2, [r7, #28]
 8025ec4:	4613      	mov	r3, r2
 8025ec6:	009b      	lsls	r3, r3, #2
 8025ec8:	4413      	add	r3, r2
 8025eca:	009b      	lsls	r3, r3, #2
 8025ecc:	461a      	mov	r2, r3
 8025ece:	68bb      	ldr	r3, [r7, #8]
 8025ed0:	1899      	adds	r1, r3, r2
 8025ed2:	683b      	ldr	r3, [r7, #0]
 8025ed4:	681b      	ldr	r3, [r3, #0]
 8025ed6:	461a      	mov	r2, r3
 8025ed8:	68b8      	ldr	r0, [r7, #8]
 8025eda:	f000 fcdc 	bl	8026896 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
				       __result._M_cur);

	  __first += __clen;
 8025ede:	69fa      	ldr	r2, [r7, #28]
 8025ee0:	4613      	mov	r3, r2
 8025ee2:	009b      	lsls	r3, r3, #2
 8025ee4:	4413      	add	r3, r2
 8025ee6:	009b      	lsls	r3, r3, #2
 8025ee8:	461a      	mov	r2, r3
 8025eea:	68bb      	ldr	r3, [r7, #8]
 8025eec:	4413      	add	r3, r2
 8025eee:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8025ef0:	69f9      	ldr	r1, [r7, #28]
 8025ef2:	6838      	ldr	r0, [r7, #0]
 8025ef4:	f7ff fcc2 	bl	802587c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8025ef8:	697a      	ldr	r2, [r7, #20]
 8025efa:	69fb      	ldr	r3, [r7, #28]
 8025efc:	1ad3      	subs	r3, r2, r3
 8025efe:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8025f00:	e7c7      	b.n	8025e92 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x1e>
	}

      return __result;
 8025f02:	6839      	ldr	r1, [r7, #0]
 8025f04:	68f8      	ldr	r0, [r7, #12]
 8025f06:	f7fe fa6e 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8025f0a:	68f8      	ldr	r0, [r7, #12]
 8025f0c:	3720      	adds	r7, #32
 8025f0e:	46bd      	mov	sp, r7
 8025f10:	bd80      	pop	{r7, pc}
 8025f12:	bf00      	nop
 8025f14:	cccccccd 	.word	0xcccccccd

08025f18 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8025f18:	b580      	push	{r7, lr}
 8025f1a:	b084      	sub	sp, #16
 8025f1c:	af00      	add	r7, sp, #0
 8025f1e:	60f8      	str	r0, [r7, #12]
 8025f20:	60b9      	str	r1, [r7, #8]
 8025f22:	607a      	str	r2, [r7, #4]
    { return __res; }
 8025f24:	6879      	ldr	r1, [r7, #4]
 8025f26:	68f8      	ldr	r0, [r7, #12]
 8025f28:	f7fe fa5d 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f2c:	68f8      	ldr	r0, [r7, #12]
 8025f2e:	3710      	adds	r7, #16
 8025f30:	46bd      	mov	sp, r7
 8025f32:	bd80      	pop	{r7, pc}

08025f34 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8025f34:	b590      	push	{r4, r7, lr}
 8025f36:	b085      	sub	sp, #20
 8025f38:	af00      	add	r7, sp, #0
 8025f3a:	6078      	str	r0, [r7, #4]
 8025f3c:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8025f3e:	6878      	ldr	r0, [r7, #4]
 8025f40:	f7fe fccb 	bl	80248da <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8025f44:	4604      	mov	r4, r0
 8025f46:	6878      	ldr	r0, [r7, #4]
 8025f48:	f7fd fdd3 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8025f4c:	4603      	mov	r3, r0
 8025f4e:	1ae3      	subs	r3, r4, r3
 8025f50:	683a      	ldr	r2, [r7, #0]
 8025f52:	429a      	cmp	r2, r3
 8025f54:	bf8c      	ite	hi
 8025f56:	2301      	movhi	r3, #1
 8025f58:	2300      	movls	r3, #0
 8025f5a:	b2db      	uxtb	r3, r3
 8025f5c:	2b00      	cmp	r3, #0
 8025f5e:	d002      	beq.n	8025f66 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 8025f60:	4816      	ldr	r0, [pc, #88]	; (8025fbc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x88>)
 8025f62:	f015 ff07 	bl	803bd74 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025f66:	f7ff fe0a 	bl	8025b7e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025f6a:	4602      	mov	r2, r0
 8025f6c:	683b      	ldr	r3, [r7, #0]
 8025f6e:	4413      	add	r3, r2
 8025f70:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8025f72:	f7ff fe04 	bl	8025b7e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025f76:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025f78:	fbb4 f3f3 	udiv	r3, r4, r3
 8025f7c:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 8025f7e:	68b9      	ldr	r1, [r7, #8]
 8025f80:	6878      	ldr	r0, [r7, #4]
 8025f82:	f7fe fcbb 	bl	80248fc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025f86:	2301      	movs	r3, #1
 8025f88:	60fb      	str	r3, [r7, #12]
 8025f8a:	68fa      	ldr	r2, [r7, #12]
 8025f8c:	68bb      	ldr	r3, [r7, #8]
 8025f8e:	429a      	cmp	r2, r3
 8025f90:	d80f      	bhi.n	8025fb2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 8025f92:	6879      	ldr	r1, [r7, #4]
 8025f94:	687b      	ldr	r3, [r7, #4]
 8025f96:	695a      	ldr	r2, [r3, #20]
 8025f98:	68fb      	ldr	r3, [r7, #12]
 8025f9a:	009b      	lsls	r3, r3, #2
 8025f9c:	425b      	negs	r3, r3
 8025f9e:	18d4      	adds	r4, r2, r3
 8025fa0:	4608      	mov	r0, r1
 8025fa2:	f7fe fcc3 	bl	802492c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8025fa6:	4603      	mov	r3, r0
 8025fa8:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025faa:	68fb      	ldr	r3, [r7, #12]
 8025fac:	3301      	adds	r3, #1
 8025fae:	60fb      	str	r3, [r7, #12]
 8025fb0:	e7eb      	b.n	8025f8a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x56>
    }
 8025fb2:	bf00      	nop
 8025fb4:	3714      	adds	r7, #20
 8025fb6:	46bd      	mov	sp, r7
 8025fb8:	bd90      	pop	{r4, r7, pc}
 8025fba:	bf00      	nop
 8025fbc:	0803de60 	.word	0x0803de60

08025fc0 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8025fc0:	b580      	push	{r7, lr}
 8025fc2:	b084      	sub	sp, #16
 8025fc4:	af00      	add	r7, sp, #0
 8025fc6:	60f8      	str	r0, [r7, #12]
 8025fc8:	60b9      	str	r1, [r7, #8]
 8025fca:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8025fcc:	68b9      	ldr	r1, [r7, #8]
 8025fce:	68f8      	ldr	r0, [r7, #12]
 8025fd0:	f7fe fa09 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp -= __n;
 8025fd4:	6879      	ldr	r1, [r7, #4]
 8025fd6:	68f8      	ldr	r0, [r7, #12]
 8025fd8:	f000 fc6d 	bl	80268b6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	return __tmp;
 8025fdc:	bf00      	nop
      }
 8025fde:	68f8      	ldr	r0, [r7, #12]
 8025fe0:	3710      	adds	r7, #16
 8025fe2:	46bd      	mov	sp, r7
 8025fe4:	bd80      	pop	{r7, pc}

08025fe6 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8025fe6:	b580      	push	{r7, lr}
 8025fe8:	b08a      	sub	sp, #40	; 0x28
 8025fea:	af00      	add	r7, sp, #0
 8025fec:	60f8      	str	r0, [r7, #12]
 8025fee:	60b9      	str	r1, [r7, #8]
 8025ff0:	607a      	str	r2, [r7, #4]
 8025ff2:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8025ff4:	2301      	movs	r3, #1
 8025ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8025ffa:	f107 0314 	add.w	r3, r7, #20
 8025ffe:	6839      	ldr	r1, [r7, #0]
 8026000:	4618      	mov	r0, r3
 8026002:	f7fe f9f0 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026006:	68f8      	ldr	r0, [r7, #12]
 8026008:	f107 0314 	add.w	r3, r7, #20
 802600c:	687a      	ldr	r2, [r7, #4]
 802600e:	68b9      	ldr	r1, [r7, #8]
 8026010:	f000 fc61 	bl	80268d6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>
    }
 8026014:	68f8      	ldr	r0, [r7, #12]
 8026016:	3728      	adds	r7, #40	; 0x28
 8026018:	46bd      	mov	sp, r7
 802601a:	bd80      	pop	{r7, pc}

0802601c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 802601c:	b590      	push	{r4, r7, lr}
 802601e:	b085      	sub	sp, #20
 8026020:	af00      	add	r7, sp, #0
 8026022:	6078      	str	r0, [r7, #4]
 8026024:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8026026:	6878      	ldr	r0, [r7, #4]
 8026028:	f7fe fc57 	bl	80248da <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 802602c:	4604      	mov	r4, r0
 802602e:	6878      	ldr	r0, [r7, #4]
 8026030:	f7fd fd5f 	bl	8023af2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8026034:	4603      	mov	r3, r0
 8026036:	1ae3      	subs	r3, r4, r3
 8026038:	683a      	ldr	r2, [r7, #0]
 802603a:	429a      	cmp	r2, r3
 802603c:	bf8c      	ite	hi
 802603e:	2301      	movhi	r3, #1
 8026040:	2300      	movls	r3, #0
 8026042:	b2db      	uxtb	r3, r3
 8026044:	2b00      	cmp	r3, #0
 8026046:	d002      	beq.n	802604e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8026048:	4815      	ldr	r0, [pc, #84]	; (80260a0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x84>)
 802604a:	f015 fe93 	bl	803bd74 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 802604e:	f7ff fd96 	bl	8025b7e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8026052:	4602      	mov	r2, r0
 8026054:	683b      	ldr	r3, [r7, #0]
 8026056:	4413      	add	r3, r2
 8026058:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 802605a:	f7ff fd90 	bl	8025b7e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 802605e:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8026060:	fbb4 f3f3 	udiv	r3, r4, r3
 8026064:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8026066:	68b9      	ldr	r1, [r7, #8]
 8026068:	6878      	ldr	r0, [r7, #4]
 802606a:	f000 fc4c 	bl	8026906 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 802606e:	2301      	movs	r3, #1
 8026070:	60fb      	str	r3, [r7, #12]
 8026072:	68fa      	ldr	r2, [r7, #12]
 8026074:	68bb      	ldr	r3, [r7, #8]
 8026076:	429a      	cmp	r2, r3
 8026078:	d80e      	bhi.n	8026098 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 802607a:	6879      	ldr	r1, [r7, #4]
 802607c:	687b      	ldr	r3, [r7, #4]
 802607e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026080:	68fb      	ldr	r3, [r7, #12]
 8026082:	009b      	lsls	r3, r3, #2
 8026084:	18d4      	adds	r4, r2, r3
 8026086:	4608      	mov	r0, r1
 8026088:	f7fe fc50 	bl	802492c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 802608c:	4603      	mov	r3, r0
 802608e:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8026090:	68fb      	ldr	r3, [r7, #12]
 8026092:	3301      	adds	r3, #1
 8026094:	60fb      	str	r3, [r7, #12]
 8026096:	e7ec      	b.n	8026072 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x56>
    }
 8026098:	bf00      	nop
 802609a:	3714      	adds	r7, #20
 802609c:	46bd      	mov	sp, r7
 802609e:	bd90      	pop	{r4, r7, pc}
 80260a0:	0803de80 	.word	0x0803de80

080260a4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 80260a4:	b590      	push	{r4, r7, lr}
 80260a6:	b09b      	sub	sp, #108	; 0x6c
 80260a8:	af02      	add	r7, sp, #8
 80260aa:	60f8      	str	r0, [r7, #12]
 80260ac:	60b9      	str	r1, [r7, #8]
 80260ae:	607a      	str	r2, [r7, #4]
 80260b0:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
					 __result, __alloc);
 80260b2:	f107 0320 	add.w	r3, r7, #32
 80260b6:	68b9      	ldr	r1, [r7, #8]
 80260b8:	4618      	mov	r0, r3
 80260ba:	f7fe f994 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260be:	f107 0310 	add.w	r3, r7, #16
 80260c2:	f107 0220 	add.w	r2, r7, #32
 80260c6:	4611      	mov	r1, r2
 80260c8:	4618      	mov	r0, r3
 80260ca:	f000 fc37 	bl	802693c <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 80260ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80260d2:	6879      	ldr	r1, [r7, #4]
 80260d4:	4618      	mov	r0, r3
 80260d6:	f7fe f986 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80260de:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80260e2:	4611      	mov	r1, r2
 80260e4:	4618      	mov	r0, r3
 80260e6:	f000 fc29 	bl	802693c <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 80260ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80260ee:	6839      	ldr	r1, [r7, #0]
 80260f0:	4618      	mov	r0, r3
 80260f2:	f7fe f978 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260f6:	68f8      	ldr	r0, [r7, #12]
 80260f8:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80260fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026100:	f107 0110 	add.w	r1, r7, #16
 8026104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8026106:	9300      	str	r3, [sp, #0]
 8026108:	4623      	mov	r3, r4
 802610a:	f000 fc40 	bl	802698e <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>
    }
 802610e:	68f8      	ldr	r0, [r7, #12]
 8026110:	3764      	adds	r7, #100	; 0x64
 8026112:	46bd      	mov	sp, r7
 8026114:	bd90      	pop	{r4, r7, pc}

08026116 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8026116:	b580      	push	{r7, lr}
 8026118:	b098      	sub	sp, #96	; 0x60
 802611a:	af00      	add	r7, sp, #0
 802611c:	60f8      	str	r0, [r7, #12]
 802611e:	60b9      	str	r1, [r7, #8]
 8026120:	607a      	str	r2, [r7, #4]
 8026122:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
				      std::__miter_base(__last), __result);
 8026124:	f107 0320 	add.w	r3, r7, #32
 8026128:	68b9      	ldr	r1, [r7, #8]
 802612a:	4618      	mov	r0, r3
 802612c:	f7fe f95b 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026130:	f107 0310 	add.w	r3, r7, #16
 8026134:	f107 0220 	add.w	r2, r7, #32
 8026138:	4611      	mov	r1, r2
 802613a:	4618      	mov	r0, r3
 802613c:	f000 fc4d 	bl	80269da <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026140:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026144:	6879      	ldr	r1, [r7, #4]
 8026146:	4618      	mov	r0, r3
 8026148:	f7fe f94d 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802614c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026150:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026154:	4611      	mov	r1, r2
 8026156:	4618      	mov	r0, r3
 8026158:	f000 fc3f 	bl	80269da <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802615c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026160:	6839      	ldr	r1, [r7, #0]
 8026162:	4618      	mov	r0, r3
 8026164:	f7fe f93f 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026168:	68f8      	ldr	r0, [r7, #12]
 802616a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802616e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026172:	f107 0110 	add.w	r1, r7, #16
 8026176:	f000 fc3d 	bl	80269f4 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 802617a:	68f8      	ldr	r0, [r7, #12]
 802617c:	3760      	adds	r7, #96	; 0x60
 802617e:	46bd      	mov	sp, r7
 8026180:	bd80      	pop	{r7, pc}

08026182 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8026182:	b590      	push	{r4, r7, lr}
 8026184:	b085      	sub	sp, #20
 8026186:	af00      	add	r7, sp, #0
 8026188:	6078      	str	r0, [r7, #4]
 802618a:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 802618c:	683b      	ldr	r3, [r7, #0]
 802618e:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8026190:	6878      	ldr	r0, [r7, #4]
 8026192:	f7fe fac3 	bl	802471c <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8026196:	4622      	mov	r2, r4
 8026198:	68f9      	ldr	r1, [r7, #12]
 802619a:	6878      	ldr	r0, [r7, #4]
 802619c:	f7fe fee0 	bl	8024f60 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 80261a0:	bf00      	nop
 80261a2:	3714      	adds	r7, #20
 80261a4:	46bd      	mov	sp, r7
 80261a6:	bd90      	pop	{r4, r7, pc}

080261a8 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>:
  //  copies [first2, last2) into
  //  [result, result + (last1 - first1) + (last2 - first2)).
  template<typename _InputIterator1, typename _InputIterator2,
	   typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
 80261a8:	b590      	push	{r4, r7, lr}
 80261aa:	b0a3      	sub	sp, #140	; 0x8c
 80261ac:	af02      	add	r7, sp, #8
 80261ae:	60f8      	str	r0, [r7, #12]
 80261b0:	60b9      	str	r1, [r7, #8]
 80261b2:	607a      	str	r2, [r7, #4]
 80261b4:	603b      	str	r3, [r7, #0]
			      _InputIterator2 __first2,
			      _InputIterator2 __last2,
			      _ForwardIterator __result,
			      _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 80261b6:	f107 0320 	add.w	r3, r7, #32
 80261ba:	68b9      	ldr	r1, [r7, #8]
 80261bc:	4618      	mov	r0, r3
 80261be:	f7fe f912 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80261c6:	6879      	ldr	r1, [r7, #4]
 80261c8:	4618      	mov	r0, r3
 80261ca:	f7fe f90c 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80261d2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80261d6:	4618      	mov	r0, r3
 80261d8:	f7fe f905 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261dc:	f107 0010 	add.w	r0, r7, #16
 80261e0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80261e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80261e8:	f107 0120 	add.w	r1, r7, #32
 80261ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80261f0:	9300      	str	r3, [sp, #0]
 80261f2:	4623      	mov	r3, r4
 80261f4:	f7ff ff56 	bl	80260a4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
							   __result,
							   __alloc);
      __try
	{
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 80261f8:	f107 0210 	add.w	r2, r7, #16
 80261fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026200:	4611      	mov	r1, r2
 8026202:	4618      	mov	r0, r3
 8026204:	f7fe f8ef 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026208:	68f8      	ldr	r0, [r7, #12]
 802620a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802620e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8026212:	9300      	str	r3, [sp, #0]
 8026214:	4613      	mov	r3, r2
 8026216:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802621a:	6839      	ldr	r1, [r7, #0]
 802621c:	f7fe ff1c 	bl	8025058 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
      __catch(...)
	{
	  std::_Destroy(__result, __mid, __alloc);
	  __throw_exception_again;
	}
    }
 8026220:	68f8      	ldr	r0, [r7, #12]
 8026222:	3784      	adds	r7, #132	; 0x84
 8026224:	46bd      	mov	sp, r7
 8026226:	bd90      	pop	{r4, r7, pc}

08026228 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026228:	b580      	push	{r7, lr}
 802622a:	b098      	sub	sp, #96	; 0x60
 802622c:	af00      	add	r7, sp, #0
 802622e:	60f8      	str	r0, [r7, #12]
 8026230:	60b9      	str	r1, [r7, #8]
 8026232:	607a      	str	r2, [r7, #4]
 8026234:	603b      	str	r3, [r7, #0]
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
					       std::__miter_base(__last),
					       __result);
 8026236:	f107 0320 	add.w	r3, r7, #32
 802623a:	68b9      	ldr	r1, [r7, #8]
 802623c:	4618      	mov	r0, r3
 802623e:	f7fe f8d2 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026242:	f107 0310 	add.w	r3, r7, #16
 8026246:	f107 0220 	add.w	r2, r7, #32
 802624a:	4611      	mov	r1, r2
 802624c:	4618      	mov	r0, r3
 802624e:	f000 fbc4 	bl	80269da <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026252:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026256:	6879      	ldr	r1, [r7, #4]
 8026258:	4618      	mov	r0, r3
 802625a:	f7fe f8c4 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802625e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026262:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026266:	4611      	mov	r1, r2
 8026268:	4618      	mov	r0, r3
 802626a:	f000 fbb6 	bl	80269da <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802626e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026272:	6839      	ldr	r1, [r7, #0]
 8026274:	4618      	mov	r0, r3
 8026276:	f7fe f8b6 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802627a:	68f8      	ldr	r0, [r7, #12]
 802627c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026280:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026284:	f107 0110 	add.w	r1, r7, #16
 8026288:	f000 fbfa 	bl	8026a80 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 802628c:	68f8      	ldr	r0, [r7, #12]
 802628e:	3760      	adds	r7, #96	; 0x60
 8026290:	46bd      	mov	sp, r7
 8026292:	bd80      	pop	{r7, pc}

08026294 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 8026294:	b590      	push	{r4, r7, lr}
 8026296:	b0a3      	sub	sp, #140	; 0x8c
 8026298:	af02      	add	r7, sp, #8
 802629a:	60f8      	str	r0, [r7, #12]
 802629c:	60b9      	str	r1, [r7, #8]
 802629e:	607a      	str	r2, [r7, #4]
 80262a0:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 80262a2:	f107 0320 	add.w	r3, r7, #32
 80262a6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80262aa:	4618      	mov	r0, r3
 80262ac:	f7fe f89b 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80262b0:	f107 0010 	add.w	r0, r7, #16
 80262b4:	f107 0220 	add.w	r2, r7, #32
 80262b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80262bc:	9300      	str	r3, [sp, #0]
 80262be:	4613      	mov	r3, r2
 80262c0:	687a      	ldr	r2, [r7, #4]
 80262c2:	68b9      	ldr	r1, [r7, #8]
 80262c4:	f7fe fec8 	bl	8025058 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 80262c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80262cc:	6839      	ldr	r1, [r7, #0]
 80262ce:	4618      	mov	r0, r3
 80262d0:	f7fe f889 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80262d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80262d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80262dc:	4618      	mov	r0, r3
 80262de:	f7fe f882 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80262e2:	f107 0210 	add.w	r2, r7, #16
 80262e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80262ea:	4611      	mov	r1, r2
 80262ec:	4618      	mov	r0, r3
 80262ee:	f7fe f87a 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80262f2:	68f8      	ldr	r0, [r7, #12]
 80262f4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80262f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80262fc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8026300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8026304:	9300      	str	r3, [sp, #0]
 8026306:	4623      	mov	r3, r4
 8026308:	f7ff fecc 	bl	80260a4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
    }
 802630c:	68f8      	ldr	r0, [r7, #12]
 802630e:	3784      	adds	r7, #132	; 0x84
 8026310:	46bd      	mov	sp, r7
 8026312:	bd90      	pop	{r4, r7, pc}

08026314 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8026314:	b580      	push	{r7, lr}
 8026316:	b082      	sub	sp, #8
 8026318:	af00      	add	r7, sp, #0
 802631a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 802631c:	6878      	ldr	r0, [r7, #4]
 802631e:	f000 fbf5 	bl	8026b0c <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>
 8026322:	4603      	mov	r3, r0
      }
 8026324:	4618      	mov	r0, r3
 8026326:	3708      	adds	r7, #8
 8026328:	46bd      	mov	sp, r7
 802632a:	bd80      	pop	{r7, pc}

0802632c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 802632c:	b480      	push	{r7}
 802632e:	b083      	sub	sp, #12
 8026330:	af00      	add	r7, sp, #0
 8026332:	6078      	str	r0, [r7, #4]
 8026334:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8026336:	683b      	ldr	r3, [r7, #0]
 8026338:	681a      	ldr	r2, [r3, #0]
 802633a:	687b      	ldr	r3, [r7, #4]
 802633c:	681b      	ldr	r3, [r3, #0]
 802633e:	429a      	cmp	r2, r3
 8026340:	d201      	bcs.n	8026346 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8026342:	683b      	ldr	r3, [r7, #0]
 8026344:	e000      	b.n	8026348 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8026346:	687b      	ldr	r3, [r7, #4]
    }
 8026348:	4618      	mov	r0, r3
 802634a:	370c      	adds	r7, #12
 802634c:	46bd      	mov	sp, r7
 802634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026352:	4770      	bx	lr

08026354 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8026354:	b590      	push	{r4, r7, lr}
 8026356:	b085      	sub	sp, #20
 8026358:	af00      	add	r7, sp, #0
 802635a:	60f8      	str	r0, [r7, #12]
 802635c:	60b9      	str	r1, [r7, #8]
 802635e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026360:	68f8      	ldr	r0, [r7, #12]
 8026362:	f000 fbdf 	bl	8026b24 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026366:	4604      	mov	r4, r0
 8026368:	68b8      	ldr	r0, [r7, #8]
 802636a:	f000 fbdb 	bl	8026b24 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802636e:	4603      	mov	r3, r0
 8026370:	687a      	ldr	r2, [r7, #4]
 8026372:	4619      	mov	r1, r3
 8026374:	4620      	mov	r0, r4
 8026376:	f000 fbe0 	bl	8026b3a <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802637a:	4603      	mov	r3, r0
    }
 802637c:	4618      	mov	r0, r3
 802637e:	3714      	adds	r7, #20
 8026380:	46bd      	mov	sp, r7
 8026382:	bd90      	pop	{r4, r7, pc}

08026384 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026384:	b590      	push	{r4, r7, lr}
 8026386:	b085      	sub	sp, #20
 8026388:	af00      	add	r7, sp, #0
 802638a:	60f8      	str	r0, [r7, #12]
 802638c:	60b9      	str	r1, [r7, #8]
 802638e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026390:	68f8      	ldr	r0, [r7, #12]
 8026392:	f000 fbc7 	bl	8026b24 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026396:	4604      	mov	r4, r0
 8026398:	68b8      	ldr	r0, [r7, #8]
 802639a:	f000 fbc3 	bl	8026b24 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802639e:	4603      	mov	r3, r0
 80263a0:	687a      	ldr	r2, [r7, #4]
 80263a2:	4619      	mov	r1, r3
 80263a4:	4620      	mov	r0, r4
 80263a6:	f000 fbeb 	bl	8026b80 <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 80263aa:	4603      	mov	r3, r0
    }
 80263ac:	4618      	mov	r0, r3
 80263ae:	3714      	adds	r7, #20
 80263b0:	46bd      	mov	sp, r7
 80263b2:	bd90      	pop	{r4, r7, pc}

080263b4 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80263b4:	b580      	push	{r7, lr}
 80263b6:	b084      	sub	sp, #16
 80263b8:	af00      	add	r7, sp, #0
 80263ba:	60f8      	str	r0, [r7, #12]
 80263bc:	60b9      	str	r1, [r7, #8]
 80263be:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80263c0:	68f8      	ldr	r0, [r7, #12]
 80263c2:	f000 fc01 	bl	8026bc8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 80263c6:	4602      	mov	r2, r0
 80263c8:	68bb      	ldr	r3, [r7, #8]
 80263ca:	4293      	cmp	r3, r2
 80263cc:	bf8c      	ite	hi
 80263ce:	2301      	movhi	r3, #1
 80263d0:	2300      	movls	r3, #0
 80263d2:	b2db      	uxtb	r3, r3
 80263d4:	2b00      	cmp	r3, #0
 80263d6:	d001      	beq.n	80263dc <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80263d8:	f015 fcc9 	bl	803bd6e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80263dc:	68ba      	ldr	r2, [r7, #8]
 80263de:	4613      	mov	r3, r2
 80263e0:	009b      	lsls	r3, r3, #2
 80263e2:	4413      	add	r3, r2
 80263e4:	009b      	lsls	r3, r3, #2
 80263e6:	4618      	mov	r0, r3
 80263e8:	f015 fcb0 	bl	803bd4c <_Znwj>
 80263ec:	4603      	mov	r3, r0
      }
 80263ee:	4618      	mov	r0, r3
 80263f0:	3710      	adds	r7, #16
 80263f2:	46bd      	mov	sp, r7
 80263f4:	bd80      	pop	{r7, pc}

080263f6 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80263f6:	b580      	push	{r7, lr}
 80263f8:	b084      	sub	sp, #16
 80263fa:	af00      	add	r7, sp, #0
 80263fc:	60f8      	str	r0, [r7, #12]
 80263fe:	60b9      	str	r1, [r7, #8]
 8026400:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8026402:	687a      	ldr	r2, [r7, #4]
 8026404:	4613      	mov	r3, r2
 8026406:	009b      	lsls	r3, r3, #2
 8026408:	4413      	add	r3, r2
 802640a:	009b      	lsls	r3, r3, #2
 802640c:	4619      	mov	r1, r3
 802640e:	68b8      	ldr	r0, [r7, #8]
 8026410:	f015 fc9a 	bl	803bd48 <_ZdlPvj>
      }
 8026414:	bf00      	nop
 8026416:	3710      	adds	r7, #16
 8026418:	46bd      	mov	sp, r7
 802641a:	bd80      	pop	{r7, pc}

0802641c <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 802641c:	b580      	push	{r7, lr}
 802641e:	b082      	sub	sp, #8
 8026420:	af00      	add	r7, sp, #0
 8026422:	6078      	str	r0, [r7, #4]
 8026424:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8026426:	f000 f8eb 	bl	8026600 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 802642a:	4603      	mov	r3, r0
 802642c:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 802642e:	687b      	ldr	r3, [r7, #4]
 8026430:	68da      	ldr	r2, [r3, #12]
 8026432:	683b      	ldr	r3, [r7, #0]
 8026434:	68db      	ldr	r3, [r3, #12]
 8026436:	1ad3      	subs	r3, r2, r3
 8026438:	109b      	asrs	r3, r3, #2
 802643a:	3b01      	subs	r3, #1
 802643c:	fb01 f303 	mul.w	r3, r1, r3
 8026440:	687a      	ldr	r2, [r7, #4]
 8026442:	6811      	ldr	r1, [r2, #0]
 8026444:	687a      	ldr	r2, [r7, #4]
 8026446:	6852      	ldr	r2, [r2, #4]
 8026448:	1a8a      	subs	r2, r1, r2
 802644a:	1092      	asrs	r2, r2, #2
 802644c:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 802644e:	683a      	ldr	r2, [r7, #0]
 8026450:	6891      	ldr	r1, [r2, #8]
 8026452:	683a      	ldr	r2, [r7, #0]
 8026454:	6812      	ldr	r2, [r2, #0]
 8026456:	1a8a      	subs	r2, r1, r2
 8026458:	1092      	asrs	r2, r2, #2
 802645a:	4413      	add	r3, r2
      }
 802645c:	4618      	mov	r0, r3
 802645e:	3708      	adds	r7, #8
 8026460:	46bd      	mov	sp, r7
 8026462:	bd80      	pop	{r7, pc}

08026464 <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8026464:	b580      	push	{r7, lr}
 8026466:	b084      	sub	sp, #16
 8026468:	af00      	add	r7, sp, #0
 802646a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 802646c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8026470:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8026472:	6878      	ldr	r0, [r7, #4]
 8026474:	f000 fbb6 	bl	8026be4 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>
 8026478:	4603      	mov	r3, r0
 802647a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 802647c:	f107 0208 	add.w	r2, r7, #8
 8026480:	f107 030c 	add.w	r3, r7, #12
 8026484:	4611      	mov	r1, r2
 8026486:	4618      	mov	r0, r3
 8026488:	f7ff ff50 	bl	802632c <_ZSt3minIjERKT_S2_S2_>
 802648c:	4603      	mov	r3, r0
 802648e:	681b      	ldr	r3, [r3, #0]
      }
 8026490:	4618      	mov	r0, r3
 8026492:	3710      	adds	r7, #16
 8026494:	46bd      	mov	sp, r7
 8026496:	bd80      	pop	{r7, pc}

08026498 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8026498:	b480      	push	{r7}
 802649a:	b083      	sub	sp, #12
 802649c:	af00      	add	r7, sp, #0
 802649e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80264a0:	687b      	ldr	r3, [r7, #4]
 80264a2:	4618      	mov	r0, r3
 80264a4:	370c      	adds	r7, #12
 80264a6:	46bd      	mov	sp, r7
 80264a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264ac:	4770      	bx	lr

080264ae <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 80264ae:	b590      	push	{r4, r7, lr}
 80264b0:	b08b      	sub	sp, #44	; 0x2c
 80264b2:	af00      	add	r7, sp, #0
 80264b4:	60f8      	str	r0, [r7, #12]
 80264b6:	60b9      	str	r1, [r7, #8]
 80264b8:	4613      	mov	r3, r2
 80264ba:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80264bc:	68fb      	ldr	r3, [r7, #12]
 80264be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80264c0:	68fb      	ldr	r3, [r7, #12]
 80264c2:	695b      	ldr	r3, [r3, #20]
 80264c4:	1ad3      	subs	r3, r2, r3
 80264c6:	109b      	asrs	r3, r3, #2
 80264c8:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80264ca:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80264cc:	68bb      	ldr	r3, [r7, #8]
 80264ce:	6a3a      	ldr	r2, [r7, #32]
 80264d0:	4413      	add	r3, r2
 80264d2:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80264d4:	68fb      	ldr	r3, [r7, #12]
 80264d6:	685a      	ldr	r2, [r3, #4]
 80264d8:	69fb      	ldr	r3, [r7, #28]
 80264da:	005b      	lsls	r3, r3, #1
 80264dc:	429a      	cmp	r2, r3
 80264de:	d92d      	bls.n	802653c <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80264e0:	68fb      	ldr	r3, [r7, #12]
 80264e2:	681a      	ldr	r2, [r3, #0]
 80264e4:	68fb      	ldr	r3, [r7, #12]
 80264e6:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80264e8:	69fb      	ldr	r3, [r7, #28]
 80264ea:	1acb      	subs	r3, r1, r3
 80264ec:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80264ee:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80264f0:	79fb      	ldrb	r3, [r7, #7]
 80264f2:	2b00      	cmp	r3, #0
 80264f4:	d002      	beq.n	80264fc <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x4e>
 80264f6:	68bb      	ldr	r3, [r7, #8]
 80264f8:	009b      	lsls	r3, r3, #2
 80264fa:	e000      	b.n	80264fe <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x50>
 80264fc:	2300      	movs	r3, #0
 80264fe:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026500:	4413      	add	r3, r2
 8026502:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8026504:	68fb      	ldr	r3, [r7, #12]
 8026506:	695b      	ldr	r3, [r3, #20]
 8026508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802650a:	429a      	cmp	r2, r3
 802650c:	d209      	bcs.n	8026522 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 802650e:	68fb      	ldr	r3, [r7, #12]
 8026510:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8026512:	68fb      	ldr	r3, [r7, #12]
 8026514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8026516:	3304      	adds	r3, #4
 8026518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802651a:	4619      	mov	r1, r3
 802651c:	f000 fb6e 	bl	8026bfc <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
 8026520:	e048      	b.n	80265b4 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026522:	68fb      	ldr	r3, [r7, #12]
 8026524:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8026526:	68fb      	ldr	r3, [r7, #12]
 8026528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802652a:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 802652c:	6a3b      	ldr	r3, [r7, #32]
 802652e:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026532:	4413      	add	r3, r2
 8026534:	461a      	mov	r2, r3
 8026536:	f000 fb79 	bl	8026c2c <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>
 802653a:	e03b      	b.n	80265b4 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 802653c:	68fb      	ldr	r3, [r7, #12]
 802653e:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8026540:	68fb      	ldr	r3, [r7, #12]
 8026542:	3304      	adds	r3, #4
 8026544:	f107 0208 	add.w	r2, r7, #8
 8026548:	4611      	mov	r1, r2
 802654a:	4618      	mov	r0, r3
 802654c:	f7fe fb68 	bl	8024c20 <_ZSt3maxIjERKT_S2_S2_>
 8026550:	4603      	mov	r3, r0
 8026552:	681b      	ldr	r3, [r3, #0]
 8026554:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026556:	3302      	adds	r3, #2
 8026558:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 802655a:	68fb      	ldr	r3, [r7, #12]
 802655c:	69b9      	ldr	r1, [r7, #24]
 802655e:	4618      	mov	r0, r3
 8026560:	f7ff fb45 	bl	8025bee <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8026564:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026566:	69ba      	ldr	r2, [r7, #24]
 8026568:	69fb      	ldr	r3, [r7, #28]
 802656a:	1ad3      	subs	r3, r2, r3
 802656c:	085b      	lsrs	r3, r3, #1
 802656e:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8026570:	79fb      	ldrb	r3, [r7, #7]
 8026572:	2b00      	cmp	r3, #0
 8026574:	d002      	beq.n	802657c <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xce>
 8026576:	68bb      	ldr	r3, [r7, #8]
 8026578:	009b      	lsls	r3, r3, #2
 802657a:	e000      	b.n	802657e <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xd0>
 802657c:	2300      	movs	r3, #0
 802657e:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026580:	697a      	ldr	r2, [r7, #20]
 8026582:	4413      	add	r3, r2
 8026584:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026586:	68fb      	ldr	r3, [r7, #12]
 8026588:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 802658a:	68fb      	ldr	r3, [r7, #12]
 802658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 802658e:	3304      	adds	r3, #4
 8026590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026592:	4619      	mov	r1, r3
 8026594:	f000 fb32 	bl	8026bfc <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8026598:	68f8      	ldr	r0, [r7, #12]
 802659a:	68fb      	ldr	r3, [r7, #12]
 802659c:	6819      	ldr	r1, [r3, #0]
 802659e:	68fb      	ldr	r3, [r7, #12]
 80265a0:	685b      	ldr	r3, [r3, #4]
 80265a2:	461a      	mov	r2, r3
 80265a4:	f7fe fc4c 	bl	8024e40 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
	  this->_M_impl._M_map = __new_map;
 80265a8:	68fb      	ldr	r3, [r7, #12]
 80265aa:	697a      	ldr	r2, [r7, #20]
 80265ac:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80265ae:	68fb      	ldr	r3, [r7, #12]
 80265b0:	69ba      	ldr	r2, [r7, #24]
 80265b2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 80265b4:	68fb      	ldr	r3, [r7, #12]
 80265b6:	3308      	adds	r3, #8
 80265b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80265ba:	4618      	mov	r0, r3
 80265bc:	f7ff fa33 	bl	8025a26 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80265c0:	68fb      	ldr	r3, [r7, #12]
 80265c2:	f103 0018 	add.w	r0, r3, #24
 80265c6:	6a3a      	ldr	r2, [r7, #32]
 80265c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80265cc:	4413      	add	r3, r2
 80265ce:	009b      	lsls	r3, r3, #2
 80265d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80265d2:	4413      	add	r3, r2
 80265d4:	4619      	mov	r1, r3
 80265d6:	f7ff fa26 	bl	8025a26 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
    }
 80265da:	bf00      	nop
 80265dc:	372c      	adds	r7, #44	; 0x2c
 80265de:	46bd      	mov	sp, r7
 80265e0:	bd90      	pop	{r4, r7, pc}

080265e2 <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80265e2:	b580      	push	{r7, lr}
 80265e4:	b082      	sub	sp, #8
 80265e6:	af00      	add	r7, sp, #0
 80265e8:	6078      	str	r0, [r7, #4]
 80265ea:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80265ec:	2200      	movs	r2, #0
 80265ee:	6839      	ldr	r1, [r7, #0]
 80265f0:	6878      	ldr	r0, [r7, #4]
 80265f2:	f000 fb33 	bl	8026c5c <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>
 80265f6:	4603      	mov	r3, r0
 80265f8:	4618      	mov	r0, r3
 80265fa:	3708      	adds	r7, #8
 80265fc:	46bd      	mov	sp, r7
 80265fe:	bd80      	pop	{r7, pc}

08026600 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8026600:	b580      	push	{r7, lr}
 8026602:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8026604:	2004      	movs	r0, #4
 8026606:	f7fa fc5f 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 802660a:	4603      	mov	r3, r0
 802660c:	4618      	mov	r0, r3
 802660e:	bd80      	pop	{r7, pc}

08026610 <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8026610:	b580      	push	{r7, lr}
 8026612:	b084      	sub	sp, #16
 8026614:	af00      	add	r7, sp, #0
 8026616:	60f8      	str	r0, [r7, #12]
 8026618:	60b9      	str	r1, [r7, #8]
 802661a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802661c:	687a      	ldr	r2, [r7, #4]
 802661e:	68b9      	ldr	r1, [r7, #8]
 8026620:	68f8      	ldr	r0, [r7, #12]
 8026622:	f000 fb39 	bl	8026c98 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>
 8026626:	bf00      	nop
 8026628:	3710      	adds	r7, #16
 802662a:	46bd      	mov	sp, r7
 802662c:	bd80      	pop	{r7, pc}

0802662e <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802662e:	b580      	push	{r7, lr}
 8026630:	b084      	sub	sp, #16
 8026632:	af00      	add	r7, sp, #0
 8026634:	60f8      	str	r0, [r7, #12]
 8026636:	60b9      	str	r1, [r7, #8]
 8026638:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802663a:	68f8      	ldr	r0, [r7, #12]
 802663c:	f000 fb3c 	bl	8026cb8 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8026640:	4602      	mov	r2, r0
 8026642:	68bb      	ldr	r3, [r7, #8]
 8026644:	4293      	cmp	r3, r2
 8026646:	bf8c      	ite	hi
 8026648:	2301      	movhi	r3, #1
 802664a:	2300      	movls	r3, #0
 802664c:	b2db      	uxtb	r3, r3
 802664e:	2b00      	cmp	r3, #0
 8026650:	d001      	beq.n	8026656 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026652:	f015 fb8c 	bl	803bd6e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026656:	68bb      	ldr	r3, [r7, #8]
 8026658:	009b      	lsls	r3, r3, #2
 802665a:	4618      	mov	r0, r3
 802665c:	f015 fb76 	bl	803bd4c <_Znwj>
 8026660:	4603      	mov	r3, r0
      }
 8026662:	4618      	mov	r0, r3
 8026664:	3710      	adds	r7, #16
 8026666:	46bd      	mov	sp, r7
 8026668:	bd80      	pop	{r7, pc}

0802666a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802666a:	b480      	push	{r7}
 802666c:	b083      	sub	sp, #12
 802666e:	af00      	add	r7, sp, #0
 8026670:	6078      	str	r0, [r7, #4]
 8026672:	687b      	ldr	r3, [r7, #4]
 8026674:	4618      	mov	r0, r3
 8026676:	370c      	adds	r7, #12
 8026678:	46bd      	mov	sp, r7
 802667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802667e:	4770      	bx	lr

08026680 <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>:
 8026680:	b480      	push	{r7}
 8026682:	b083      	sub	sp, #12
 8026684:	af00      	add	r7, sp, #0
 8026686:	6078      	str	r0, [r7, #4]
 8026688:	687b      	ldr	r3, [r7, #4]
 802668a:	4618      	mov	r0, r3
 802668c:	370c      	adds	r7, #12
 802668e:	46bd      	mov	sp, r7
 8026690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026694:	4770      	bx	lr

08026696 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8026696:	b480      	push	{r7}
 8026698:	b083      	sub	sp, #12
 802669a:	af00      	add	r7, sp, #0
 802669c:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 802669e:	687b      	ldr	r3, [r7, #4]
 80266a0:	2200      	movs	r2, #0
 80266a2:	601a      	str	r2, [r3, #0]
 80266a4:	687b      	ldr	r3, [r7, #4]
 80266a6:	2200      	movs	r2, #0
 80266a8:	605a      	str	r2, [r3, #4]
 80266aa:	687b      	ldr	r3, [r7, #4]
 80266ac:	2200      	movs	r2, #0
 80266ae:	609a      	str	r2, [r3, #8]
 80266b0:	687b      	ldr	r3, [r7, #4]
 80266b2:	2200      	movs	r2, #0
 80266b4:	60da      	str	r2, [r3, #12]
 80266b6:	687b      	ldr	r3, [r7, #4]
 80266b8:	4618      	mov	r0, r3
 80266ba:	370c      	adds	r7, #12
 80266bc:	46bd      	mov	sp, r7
 80266be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266c2:	4770      	bx	lr

080266c4 <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80266c4:	b580      	push	{r7, lr}
 80266c6:	b082      	sub	sp, #8
 80266c8:	af00      	add	r7, sp, #0
 80266ca:	6078      	str	r0, [r7, #4]
 80266cc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80266ce:	2200      	movs	r2, #0
 80266d0:	6839      	ldr	r1, [r7, #0]
 80266d2:	6878      	ldr	r0, [r7, #4]
 80266d4:	f000 fafc 	bl	8026cd0 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>
 80266d8:	4603      	mov	r3, r0
 80266da:	4618      	mov	r0, r3
 80266dc:	3708      	adds	r7, #8
 80266de:	46bd      	mov	sp, r7
 80266e0:	bd80      	pop	{r7, pc}

080266e2 <_ZNSaIPjEC1IjEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80266e2:	b580      	push	{r7, lr}
 80266e4:	b082      	sub	sp, #8
 80266e6:	af00      	add	r7, sp, #0
 80266e8:	6078      	str	r0, [r7, #4]
 80266ea:	6039      	str	r1, [r7, #0]
 80266ec:	6878      	ldr	r0, [r7, #4]
 80266ee:	f000 fb0d 	bl	8026d0c <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>
 80266f2:	687b      	ldr	r3, [r7, #4]
 80266f4:	4618      	mov	r0, r3
 80266f6:	3708      	adds	r7, #8
 80266f8:	46bd      	mov	sp, r7
 80266fa:	bd80      	pop	{r7, pc}

080266fc <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80266fc:	b480      	push	{r7}
 80266fe:	b083      	sub	sp, #12
 8026700:	af00      	add	r7, sp, #0
 8026702:	6078      	str	r0, [r7, #4]
 8026704:	687b      	ldr	r3, [r7, #4]
 8026706:	4618      	mov	r0, r3
 8026708:	370c      	adds	r7, #12
 802670a:	46bd      	mov	sp, r7
 802670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026710:	4770      	bx	lr

08026712 <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8026712:	b580      	push	{r7, lr}
 8026714:	b084      	sub	sp, #16
 8026716:	af00      	add	r7, sp, #0
 8026718:	60f8      	str	r0, [r7, #12]
 802671a:	60b9      	str	r1, [r7, #8]
 802671c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 802671e:	687b      	ldr	r3, [r7, #4]
 8026720:	009b      	lsls	r3, r3, #2
 8026722:	4619      	mov	r1, r3
 8026724:	68b8      	ldr	r0, [r7, #8]
 8026726:	f015 fb0f 	bl	803bd48 <_ZdlPvj>
      }
 802672a:	bf00      	nop
 802672c:	3710      	adds	r7, #16
 802672e:	46bd      	mov	sp, r7
 8026730:	bd80      	pop	{r7, pc}

08026732 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8026732:	b480      	push	{r7}
 8026734:	b083      	sub	sp, #12
 8026736:	af00      	add	r7, sp, #0
 8026738:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802673a:	687b      	ldr	r3, [r7, #4]
 802673c:	4618      	mov	r0, r3
 802673e:	370c      	adds	r7, #12
 8026740:	46bd      	mov	sp, r7
 8026742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026746:	4770      	bx	lr

08026748 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8026748:	b580      	push	{r7, lr}
 802674a:	b082      	sub	sp, #8
 802674c:	af00      	add	r7, sp, #0
 802674e:	6078      	str	r0, [r7, #4]
 8026750:	6039      	str	r1, [r7, #0]
 8026752:	683b      	ldr	r3, [r7, #0]
 8026754:	681a      	ldr	r2, [r3, #0]
 8026756:	687b      	ldr	r3, [r7, #4]
 8026758:	601a      	str	r2, [r3, #0]
 802675a:	683b      	ldr	r3, [r7, #0]
 802675c:	685a      	ldr	r2, [r3, #4]
 802675e:	687b      	ldr	r3, [r7, #4]
 8026760:	605a      	str	r2, [r3, #4]
 8026762:	687b      	ldr	r3, [r7, #4]
 8026764:	f103 0208 	add.w	r2, r3, #8
 8026768:	683b      	ldr	r3, [r7, #0]
 802676a:	3308      	adds	r3, #8
 802676c:	4619      	mov	r1, r3
 802676e:	4610      	mov	r0, r2
 8026770:	f7fd fe39 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026774:	687b      	ldr	r3, [r7, #4]
 8026776:	f103 0218 	add.w	r2, r3, #24
 802677a:	683b      	ldr	r3, [r7, #0]
 802677c:	3318      	adds	r3, #24
 802677e:	4619      	mov	r1, r3
 8026780:	4610      	mov	r0, r2
 8026782:	f7fd fe30 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026786:	687b      	ldr	r3, [r7, #4]
 8026788:	4618      	mov	r0, r3
 802678a:	3708      	adds	r7, #8
 802678c:	46bd      	mov	sp, r7
 802678e:	bd80      	pop	{r7, pc}

08026790 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8026790:	b5b0      	push	{r4, r5, r7, lr}
 8026792:	b08c      	sub	sp, #48	; 0x30
 8026794:	af00      	add	r7, sp, #0
 8026796:	6078      	str	r0, [r7, #4]
 8026798:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 802679a:	6839      	ldr	r1, [r7, #0]
 802679c:	6878      	ldr	r0, [r7, #4]
 802679e:	f7ff ffd3 	bl	8026748 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>
	{ __x = _Deque_impl_data(); }
 80267a2:	f107 0308 	add.w	r3, r7, #8
 80267a6:	4618      	mov	r0, r3
 80267a8:	f7fe fa16 	bl	8024bd8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
 80267ac:	683b      	ldr	r3, [r7, #0]
 80267ae:	461d      	mov	r5, r3
 80267b0:	f107 0408 	add.w	r4, r7, #8
 80267b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80267b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80267b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80267ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80267bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80267c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80267c4:	687b      	ldr	r3, [r7, #4]
 80267c6:	4618      	mov	r0, r3
 80267c8:	3730      	adds	r7, #48	; 0x30
 80267ca:	46bd      	mov	sp, r7
 80267cc:	bdb0      	pop	{r4, r5, r7, pc}

080267ce <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80267ce:	b480      	push	{r7}
 80267d0:	b083      	sub	sp, #12
 80267d2:	af00      	add	r7, sp, #0
 80267d4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80267d6:	687b      	ldr	r3, [r7, #4]
 80267d8:	4618      	mov	r0, r3
 80267da:	370c      	adds	r7, #12
 80267dc:	46bd      	mov	sp, r7
 80267de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267e2:	4770      	bx	lr

080267e4 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80267e4:	b480      	push	{r7}
 80267e6:	b083      	sub	sp, #12
 80267e8:	af00      	add	r7, sp, #0
 80267ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80267ec:	687b      	ldr	r3, [r7, #4]
 80267ee:	4618      	mov	r0, r3
 80267f0:	370c      	adds	r7, #12
 80267f2:	46bd      	mov	sp, r7
 80267f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267f8:	4770      	bx	lr

080267fa <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 80267fa:	b580      	push	{r7, lr}
 80267fc:	b082      	sub	sp, #8
 80267fe:	af00      	add	r7, sp, #0
 8026800:	6078      	str	r0, [r7, #4]
 8026802:	6039      	str	r1, [r7, #0]
 8026804:	683b      	ldr	r3, [r7, #0]
 8026806:	681a      	ldr	r2, [r3, #0]
 8026808:	687b      	ldr	r3, [r7, #4]
 802680a:	601a      	str	r2, [r3, #0]
 802680c:	683b      	ldr	r3, [r7, #0]
 802680e:	685a      	ldr	r2, [r3, #4]
 8026810:	687b      	ldr	r3, [r7, #4]
 8026812:	605a      	str	r2, [r3, #4]
 8026814:	687b      	ldr	r3, [r7, #4]
 8026816:	f103 0208 	add.w	r2, r3, #8
 802681a:	683b      	ldr	r3, [r7, #0]
 802681c:	3308      	adds	r3, #8
 802681e:	4619      	mov	r1, r3
 8026820:	4610      	mov	r0, r2
 8026822:	f7fd fe71 	bl	8024508 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8026826:	687b      	ldr	r3, [r7, #4]
 8026828:	f103 0218 	add.w	r2, r3, #24
 802682c:	683b      	ldr	r3, [r7, #0]
 802682e:	3318      	adds	r3, #24
 8026830:	4619      	mov	r1, r3
 8026832:	4610      	mov	r0, r2
 8026834:	f7fd fe68 	bl	8024508 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8026838:	687b      	ldr	r3, [r7, #4]
 802683a:	4618      	mov	r0, r3
 802683c:	3708      	adds	r7, #8
 802683e:	46bd      	mov	sp, r7
 8026840:	bd80      	pop	{r7, pc}

08026842 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8026842:	b5b0      	push	{r4, r5, r7, lr}
 8026844:	b08c      	sub	sp, #48	; 0x30
 8026846:	af00      	add	r7, sp, #0
 8026848:	6078      	str	r0, [r7, #4]
 802684a:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 802684c:	6839      	ldr	r1, [r7, #0]
 802684e:	6878      	ldr	r0, [r7, #4]
 8026850:	f7ff ffd3 	bl	80267fa <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 8026854:	f107 0308 	add.w	r3, r7, #8
 8026858:	4618      	mov	r0, r3
 802685a:	f7ff f9a4 	bl	8025ba6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
 802685e:	683b      	ldr	r3, [r7, #0]
 8026860:	461d      	mov	r5, r3
 8026862:	f107 0408 	add.w	r4, r7, #8
 8026866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802686a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802686c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802686e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026872:	e885 0003 	stmia.w	r5, {r0, r1}
 8026876:	687b      	ldr	r3, [r7, #4]
 8026878:	4618      	mov	r0, r3
 802687a:	3730      	adds	r7, #48	; 0x30
 802687c:	46bd      	mov	sp, r7
 802687e:	bdb0      	pop	{r4, r5, r7, pc}

08026880 <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8026880:	b480      	push	{r7}
 8026882:	b083      	sub	sp, #12
 8026884:	af00      	add	r7, sp, #0
 8026886:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026888:	687b      	ldr	r3, [r7, #4]
 802688a:	4618      	mov	r0, r3
 802688c:	370c      	adds	r7, #12
 802688e:	46bd      	mov	sp, r7
 8026890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026894:	4770      	bx	lr

08026896 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8026896:	b580      	push	{r7, lr}
 8026898:	b084      	sub	sp, #16
 802689a:	af00      	add	r7, sp, #0
 802689c:	60f8      	str	r0, [r7, #12]
 802689e:	60b9      	str	r1, [r7, #8]
 80268a0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80268a2:	687a      	ldr	r2, [r7, #4]
 80268a4:	68b9      	ldr	r1, [r7, #8]
 80268a6:	68f8      	ldr	r0, [r7, #12]
 80268a8:	f000 fa3b 	bl	8026d22 <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
 80268ac:	4603      	mov	r3, r0
 80268ae:	4618      	mov	r0, r3
 80268b0:	3710      	adds	r7, #16
 80268b2:	46bd      	mov	sp, r7
 80268b4:	bd80      	pop	{r7, pc}

080268b6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 80268b6:	b580      	push	{r7, lr}
 80268b8:	b082      	sub	sp, #8
 80268ba:	af00      	add	r7, sp, #0
 80268bc:	6078      	str	r0, [r7, #4]
 80268be:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 80268c0:	683b      	ldr	r3, [r7, #0]
 80268c2:	425b      	negs	r3, r3
 80268c4:	4619      	mov	r1, r3
 80268c6:	6878      	ldr	r0, [r7, #4]
 80268c8:	f7fe ffd8 	bl	802587c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
 80268cc:	4603      	mov	r3, r0
 80268ce:	4618      	mov	r0, r3
 80268d0:	3708      	adds	r7, #8
 80268d2:	46bd      	mov	sp, r7
 80268d4:	bd80      	pop	{r7, pc}

080268d6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80268d6:	b580      	push	{r7, lr}
 80268d8:	b088      	sub	sp, #32
 80268da:	af00      	add	r7, sp, #0
 80268dc:	60f8      	str	r0, [r7, #12]
 80268de:	60b9      	str	r1, [r7, #8]
 80268e0:	607a      	str	r2, [r7, #4]
 80268e2:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 80268e4:	f107 0310 	add.w	r3, r7, #16
 80268e8:	6839      	ldr	r1, [r7, #0]
 80268ea:	4618      	mov	r0, r3
 80268ec:	f7fd fd7b 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80268f0:	68f8      	ldr	r0, [r7, #12]
 80268f2:	f107 0310 	add.w	r3, r7, #16
 80268f6:	687a      	ldr	r2, [r7, #4]
 80268f8:	68b9      	ldr	r1, [r7, #8]
 80268fa:	f7fd feef 	bl	80246dc <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 80268fe:	68f8      	ldr	r0, [r7, #12]
 8026900:	3720      	adds	r7, #32
 8026902:	46bd      	mov	sp, r7
 8026904:	bd80      	pop	{r7, pc}

08026906 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8026906:	b580      	push	{r7, lr}
 8026908:	b082      	sub	sp, #8
 802690a:	af00      	add	r7, sp, #0
 802690c:	6078      	str	r0, [r7, #4]
 802690e:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8026910:	683b      	ldr	r3, [r7, #0]
 8026912:	1c5a      	adds	r2, r3, #1
 8026914:	687b      	ldr	r3, [r7, #4]
 8026916:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8026918:	6879      	ldr	r1, [r7, #4]
 802691a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 802691c:	6879      	ldr	r1, [r7, #4]
 802691e:	6809      	ldr	r1, [r1, #0]
 8026920:	1a41      	subs	r1, r0, r1
 8026922:	1089      	asrs	r1, r1, #2
 8026924:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8026926:	429a      	cmp	r2, r3
 8026928:	d904      	bls.n	8026934 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 802692a:	2200      	movs	r2, #0
 802692c:	6839      	ldr	r1, [r7, #0]
 802692e:	6878      	ldr	r0, [r7, #4]
 8026930:	f7fe feec 	bl	802570c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8026934:	bf00      	nop
 8026936:	3708      	adds	r7, #8
 8026938:	46bd      	mov	sp, r7
 802693a:	bd80      	pop	{r7, pc}

0802693c <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>:
	      const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
 802693c:	b580      	push	{r7, lr}
 802693e:	b086      	sub	sp, #24
 8026940:	af00      	add	r7, sp, #0
 8026942:	6078      	str	r0, [r7, #4]
 8026944:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8026946:	6838      	ldr	r0, [r7, #0]
 8026948:	f000 f9fb 	bl	8026d42 <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 802694c:	4602      	mov	r2, r0
 802694e:	f107 0308 	add.w	r3, r7, #8
 8026952:	4611      	mov	r1, r2
 8026954:	4618      	mov	r0, r3
 8026956:	f7fd fd46 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802695a:	f107 0308 	add.w	r3, r7, #8
 802695e:	4619      	mov	r1, r3
 8026960:	6878      	ldr	r0, [r7, #4]
 8026962:	f000 f9f9 	bl	8026d58 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>
 8026966:	6878      	ldr	r0, [r7, #4]
 8026968:	3718      	adds	r7, #24
 802696a:	46bd      	mov	sp, r7
 802696c:	bd80      	pop	{r7, pc}

0802696e <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>:
    class move_iterator
 802696e:	b580      	push	{r7, lr}
 8026970:	b082      	sub	sp, #8
 8026972:	af00      	add	r7, sp, #0
 8026974:	6078      	str	r0, [r7, #4]
 8026976:	6039      	str	r1, [r7, #0]
 8026978:	687b      	ldr	r3, [r7, #4]
 802697a:	683a      	ldr	r2, [r7, #0]
 802697c:	4611      	mov	r1, r2
 802697e:	4618      	mov	r0, r3
 8026980:	f7fd fd31 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026984:	687b      	ldr	r3, [r7, #4]
 8026986:	4618      	mov	r0, r3
 8026988:	3708      	adds	r7, #8
 802698a:	46bd      	mov	sp, r7
 802698c:	bd80      	pop	{r7, pc}

0802698e <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 802698e:	b580      	push	{r7, lr}
 8026990:	b090      	sub	sp, #64	; 0x40
 8026992:	af00      	add	r7, sp, #0
 8026994:	60f8      	str	r0, [r7, #12]
 8026996:	60b9      	str	r1, [r7, #8]
 8026998:	607a      	str	r2, [r7, #4]
 802699a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 802699c:	f107 0310 	add.w	r3, r7, #16
 80269a0:	68b9      	ldr	r1, [r7, #8]
 80269a2:	4618      	mov	r0, r3
 80269a4:	f7ff ffe3 	bl	802696e <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80269a8:	f107 0320 	add.w	r3, r7, #32
 80269ac:	6879      	ldr	r1, [r7, #4]
 80269ae:	4618      	mov	r0, r3
 80269b0:	f7ff ffdd 	bl	802696e <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80269b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80269b8:	6839      	ldr	r1, [r7, #0]
 80269ba:	4618      	mov	r0, r3
 80269bc:	f7fd fd13 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80269c0:	68f8      	ldr	r0, [r7, #12]
 80269c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80269c6:	f107 0220 	add.w	r2, r7, #32
 80269ca:	f107 0110 	add.w	r1, r7, #16
 80269ce:	f000 f9d6 	bl	8026d7e <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 80269d2:	68f8      	ldr	r0, [r7, #12]
 80269d4:	3740      	adds	r7, #64	; 0x40
 80269d6:	46bd      	mov	sp, r7
 80269d8:	bd80      	pop	{r7, pc}

080269da <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __miter_base(_Iterator __it)
 80269da:	b580      	push	{r7, lr}
 80269dc:	b082      	sub	sp, #8
 80269de:	af00      	add	r7, sp, #0
 80269e0:	6078      	str	r0, [r7, #4]
 80269e2:	6039      	str	r1, [r7, #0]
    { return __it; }
 80269e4:	6839      	ldr	r1, [r7, #0]
 80269e6:	6878      	ldr	r0, [r7, #4]
 80269e8:	f7fd fcfd 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80269ec:	6878      	ldr	r0, [r7, #4]
 80269ee:	3708      	adds	r7, #8
 80269f0:	46bd      	mov	sp, r7
 80269f2:	bd80      	pop	{r7, pc}

080269f4 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80269f4:	b580      	push	{r7, lr}
 80269f6:	b0a0      	sub	sp, #128	; 0x80
 80269f8:	af00      	add	r7, sp, #0
 80269fa:	60f8      	str	r0, [r7, #12]
 80269fc:	60b9      	str	r1, [r7, #8]
 80269fe:	607a      	str	r2, [r7, #4]
 8026a00:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8026a02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026a06:	68b9      	ldr	r1, [r7, #8]
 8026a08:	4618      	mov	r0, r3
 8026a0a:	f7fd fcec 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026a0e:	f107 0320 	add.w	r3, r7, #32
 8026a12:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026a16:	4611      	mov	r1, r2
 8026a18:	4618      	mov	r0, r3
 8026a1a:	f7ff fa09 	bl	8025e30 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026a1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026a22:	6879      	ldr	r1, [r7, #4]
 8026a24:	4618      	mov	r0, r3
 8026a26:	f7fd fcde 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026a2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026a2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8026a32:	4611      	mov	r1, r2
 8026a34:	4618      	mov	r0, r3
 8026a36:	f7ff f9fb 	bl	8025e30 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026a3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8026a3e:	6839      	ldr	r1, [r7, #0]
 8026a40:	4618      	mov	r0, r3
 8026a42:	f7fd fcd0 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026a46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026a4a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8026a4e:	4611      	mov	r1, r2
 8026a50:	4618      	mov	r0, r3
 8026a52:	f7ff f9ed 	bl	8025e30 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026a56:	f107 0010 	add.w	r0, r7, #16
 8026a5a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026a5e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026a62:	f107 0120 	add.w	r1, r7, #32
 8026a66:	f000 f9b3 	bl	8026dd0 <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8026a6a:	68fb      	ldr	r3, [r7, #12]
 8026a6c:	f107 0210 	add.w	r2, r7, #16
 8026a70:	6839      	ldr	r1, [r7, #0]
 8026a72:	4618      	mov	r0, r3
 8026a74:	f7ff fa50 	bl	8025f18 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8026a78:	68f8      	ldr	r0, [r7, #12]
 8026a7a:	3780      	adds	r7, #128	; 0x80
 8026a7c:	46bd      	mov	sp, r7
 8026a7e:	bd80      	pop	{r7, pc}

08026a80 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8026a80:	b580      	push	{r7, lr}
 8026a82:	b0a0      	sub	sp, #128	; 0x80
 8026a84:	af00      	add	r7, sp, #0
 8026a86:	60f8      	str	r0, [r7, #12]
 8026a88:	60b9      	str	r1, [r7, #8]
 8026a8a:	607a      	str	r2, [r7, #4]
 8026a8c:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 8026a8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026a92:	68b9      	ldr	r1, [r7, #8]
 8026a94:	4618      	mov	r0, r3
 8026a96:	f7fd fca6 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026a9a:	f107 0320 	add.w	r3, r7, #32
 8026a9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026aa2:	4611      	mov	r1, r2
 8026aa4:	4618      	mov	r0, r3
 8026aa6:	f7ff f9c3 	bl	8025e30 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026aaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026aae:	6879      	ldr	r1, [r7, #4]
 8026ab0:	4618      	mov	r0, r3
 8026ab2:	f7fd fc98 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026ab6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026aba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8026abe:	4611      	mov	r1, r2
 8026ac0:	4618      	mov	r0, r3
 8026ac2:	f7ff f9b5 	bl	8025e30 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026ac6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8026aca:	6839      	ldr	r1, [r7, #0]
 8026acc:	4618      	mov	r0, r3
 8026ace:	f7fd fc8a 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026ad2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026ad6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8026ada:	4611      	mov	r1, r2
 8026adc:	4618      	mov	r0, r3
 8026ade:	f7ff f9a7 	bl	8025e30 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026ae2:	f107 0010 	add.w	r0, r7, #16
 8026ae6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026aea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026aee:	f107 0120 	add.w	r1, r7, #32
 8026af2:	f000 f993 	bl	8026e1c <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8026af6:	68fb      	ldr	r3, [r7, #12]
 8026af8:	f107 0210 	add.w	r2, r7, #16
 8026afc:	6839      	ldr	r1, [r7, #0]
 8026afe:	4618      	mov	r0, r3
 8026b00:	f7ff fa0a 	bl	8025f18 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8026b04:	68f8      	ldr	r0, [r7, #12]
 8026b06:	3780      	adds	r7, #128	; 0x80
 8026b08:	46bd      	mov	sp, r7
 8026b0a:	bd80      	pop	{r7, pc}

08026b0c <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8026b0c:	b580      	push	{r7, lr}
 8026b0e:	b082      	sub	sp, #8
 8026b10:	af00      	add	r7, sp, #0
 8026b12:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8026b14:	6878      	ldr	r0, [r7, #4]
 8026b16:	f000 f857 	bl	8026bc8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8026b1a:	4603      	mov	r3, r0
 8026b1c:	4618      	mov	r0, r3
 8026b1e:	3708      	adds	r7, #8
 8026b20:	46bd      	mov	sp, r7
 8026b22:	bd80      	pop	{r7, pc}

08026b24 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8026b24:	b480      	push	{r7}
 8026b26:	b083      	sub	sp, #12
 8026b28:	af00      	add	r7, sp, #0
 8026b2a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026b2c:	687b      	ldr	r3, [r7, #4]
 8026b2e:	4618      	mov	r0, r3
 8026b30:	370c      	adds	r7, #12
 8026b32:	46bd      	mov	sp, r7
 8026b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b38:	4770      	bx	lr

08026b3a <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026b3a:	b5b0      	push	{r4, r5, r7, lr}
 8026b3c:	b084      	sub	sp, #16
 8026b3e:	af00      	add	r7, sp, #0
 8026b40:	60f8      	str	r0, [r7, #12]
 8026b42:	60b9      	str	r1, [r7, #8]
 8026b44:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026b46:	68f8      	ldr	r0, [r7, #12]
 8026b48:	f000 f98e 	bl	8026e68 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b4c:	4604      	mov	r4, r0
 8026b4e:	68b8      	ldr	r0, [r7, #8]
 8026b50:	f000 f98a 	bl	8026e68 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b54:	4605      	mov	r5, r0
 8026b56:	687b      	ldr	r3, [r7, #4]
 8026b58:	4618      	mov	r0, r3
 8026b5a:	f000 f985 	bl	8026e68 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b5e:	4603      	mov	r3, r0
 8026b60:	461a      	mov	r2, r3
 8026b62:	4629      	mov	r1, r5
 8026b64:	4620      	mov	r0, r4
 8026b66:	f000 f98a 	bl	8026e7e <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026b6a:	4602      	mov	r2, r0
 8026b6c:	1d3b      	adds	r3, r7, #4
 8026b6e:	4611      	mov	r1, r2
 8026b70:	4618      	mov	r0, r3
 8026b72:	f000 f994 	bl	8026e9e <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8026b76:	4603      	mov	r3, r0
    }
 8026b78:	4618      	mov	r0, r3
 8026b7a:	3710      	adds	r7, #16
 8026b7c:	46bd      	mov	sp, r7
 8026b7e:	bdb0      	pop	{r4, r5, r7, pc}

08026b80 <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8026b80:	b5b0      	push	{r4, r5, r7, lr}
 8026b82:	b084      	sub	sp, #16
 8026b84:	af00      	add	r7, sp, #0
 8026b86:	60f8      	str	r0, [r7, #12]
 8026b88:	60b9      	str	r1, [r7, #8]
 8026b8a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026b8c:	68f8      	ldr	r0, [r7, #12]
 8026b8e:	f000 f96b 	bl	8026e68 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b92:	4604      	mov	r4, r0
 8026b94:	68b8      	ldr	r0, [r7, #8]
 8026b96:	f000 f967 	bl	8026e68 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b9a:	4605      	mov	r5, r0
 8026b9c:	687b      	ldr	r3, [r7, #4]
 8026b9e:	4618      	mov	r0, r3
 8026ba0:	f000 f962 	bl	8026e68 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026ba4:	4603      	mov	r3, r0
 8026ba6:	461a      	mov	r2, r3
 8026ba8:	4629      	mov	r1, r5
 8026baa:	4620      	mov	r0, r4
 8026bac:	f000 f983 	bl	8026eb6 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026bb0:	4602      	mov	r2, r0
 8026bb2:	1d3b      	adds	r3, r7, #4
 8026bb4:	4611      	mov	r1, r2
 8026bb6:	4618      	mov	r0, r3
 8026bb8:	f000 f971 	bl	8026e9e <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8026bbc:	4603      	mov	r3, r0
    }
 8026bbe:	4618      	mov	r0, r3
 8026bc0:	3710      	adds	r7, #16
 8026bc2:	46bd      	mov	sp, r7
 8026bc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08026bc8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026bc8:	b480      	push	{r7}
 8026bca:	b083      	sub	sp, #12
 8026bcc:	af00      	add	r7, sp, #0
 8026bce:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026bd0:	4b03      	ldr	r3, [pc, #12]	; (8026be0 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8026bd2:	4618      	mov	r0, r3
 8026bd4:	370c      	adds	r7, #12
 8026bd6:	46bd      	mov	sp, r7
 8026bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bdc:	4770      	bx	lr
 8026bde:	bf00      	nop
 8026be0:	06666666 	.word	0x06666666

08026be4 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8026be4:	b580      	push	{r7, lr}
 8026be6:	b082      	sub	sp, #8
 8026be8:	af00      	add	r7, sp, #0
 8026bea:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8026bec:	6878      	ldr	r0, [r7, #4]
 8026bee:	f000 f972 	bl	8026ed6 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>
 8026bf2:	4603      	mov	r3, r0
      }
 8026bf4:	4618      	mov	r0, r3
 8026bf6:	3708      	adds	r7, #8
 8026bf8:	46bd      	mov	sp, r7
 8026bfa:	bd80      	pop	{r7, pc}

08026bfc <_ZSt4copyIPPjS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8026bfc:	b590      	push	{r4, r7, lr}
 8026bfe:	b085      	sub	sp, #20
 8026c00:	af00      	add	r7, sp, #0
 8026c02:	60f8      	str	r0, [r7, #12]
 8026c04:	60b9      	str	r1, [r7, #8]
 8026c06:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026c08:	68f8      	ldr	r0, [r7, #12]
 8026c0a:	f000 f970 	bl	8026eee <_ZSt12__miter_baseIPPjET_S2_>
 8026c0e:	4604      	mov	r4, r0
 8026c10:	68b8      	ldr	r0, [r7, #8]
 8026c12:	f000 f96c 	bl	8026eee <_ZSt12__miter_baseIPPjET_S2_>
 8026c16:	4603      	mov	r3, r0
 8026c18:	687a      	ldr	r2, [r7, #4]
 8026c1a:	4619      	mov	r1, r3
 8026c1c:	4620      	mov	r0, r4
 8026c1e:	f000 f971 	bl	8026f04 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>
 8026c22:	4603      	mov	r3, r0
    }
 8026c24:	4618      	mov	r0, r3
 8026c26:	3714      	adds	r7, #20
 8026c28:	46bd      	mov	sp, r7
 8026c2a:	bd90      	pop	{r4, r7, pc}

08026c2c <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026c2c:	b590      	push	{r4, r7, lr}
 8026c2e:	b085      	sub	sp, #20
 8026c30:	af00      	add	r7, sp, #0
 8026c32:	60f8      	str	r0, [r7, #12]
 8026c34:	60b9      	str	r1, [r7, #8]
 8026c36:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026c38:	68f8      	ldr	r0, [r7, #12]
 8026c3a:	f000 f958 	bl	8026eee <_ZSt12__miter_baseIPPjET_S2_>
 8026c3e:	4604      	mov	r4, r0
 8026c40:	68b8      	ldr	r0, [r7, #8]
 8026c42:	f000 f954 	bl	8026eee <_ZSt12__miter_baseIPPjET_S2_>
 8026c46:	4603      	mov	r3, r0
 8026c48:	687a      	ldr	r2, [r7, #4]
 8026c4a:	4619      	mov	r1, r3
 8026c4c:	4620      	mov	r0, r4
 8026c4e:	f000 f97c 	bl	8026f4a <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>
 8026c52:	4603      	mov	r3, r0
    }
 8026c54:	4618      	mov	r0, r3
 8026c56:	3714      	adds	r7, #20
 8026c58:	46bd      	mov	sp, r7
 8026c5a:	bd90      	pop	{r4, r7, pc}

08026c5c <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026c5c:	b580      	push	{r7, lr}
 8026c5e:	b084      	sub	sp, #16
 8026c60:	af00      	add	r7, sp, #0
 8026c62:	60f8      	str	r0, [r7, #12]
 8026c64:	60b9      	str	r1, [r7, #8]
 8026c66:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026c68:	68f8      	ldr	r0, [r7, #12]
 8026c6a:	f000 f991 	bl	8026f90 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8026c6e:	4602      	mov	r2, r0
 8026c70:	68bb      	ldr	r3, [r7, #8]
 8026c72:	4293      	cmp	r3, r2
 8026c74:	bf8c      	ite	hi
 8026c76:	2301      	movhi	r3, #1
 8026c78:	2300      	movls	r3, #0
 8026c7a:	b2db      	uxtb	r3, r3
 8026c7c:	2b00      	cmp	r3, #0
 8026c7e:	d001      	beq.n	8026c84 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026c80:	f015 f875 	bl	803bd6e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026c84:	68bb      	ldr	r3, [r7, #8]
 8026c86:	009b      	lsls	r3, r3, #2
 8026c88:	4618      	mov	r0, r3
 8026c8a:	f015 f85f 	bl	803bd4c <_Znwj>
 8026c8e:	4603      	mov	r3, r0
      }
 8026c90:	4618      	mov	r0, r3
 8026c92:	3710      	adds	r7, #16
 8026c94:	46bd      	mov	sp, r7
 8026c96:	bd80      	pop	{r7, pc}

08026c98 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>:
      deallocate(_Tp* __p, size_type __t)
 8026c98:	b580      	push	{r7, lr}
 8026c9a:	b084      	sub	sp, #16
 8026c9c:	af00      	add	r7, sp, #0
 8026c9e:	60f8      	str	r0, [r7, #12]
 8026ca0:	60b9      	str	r1, [r7, #8]
 8026ca2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8026ca4:	687b      	ldr	r3, [r7, #4]
 8026ca6:	009b      	lsls	r3, r3, #2
 8026ca8:	4619      	mov	r1, r3
 8026caa:	68b8      	ldr	r0, [r7, #8]
 8026cac:	f015 f84c 	bl	803bd48 <_ZdlPvj>
      }
 8026cb0:	bf00      	nop
 8026cb2:	3710      	adds	r7, #16
 8026cb4:	46bd      	mov	sp, r7
 8026cb6:	bd80      	pop	{r7, pc}

08026cb8 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026cb8:	b480      	push	{r7}
 8026cba:	b083      	sub	sp, #12
 8026cbc:	af00      	add	r7, sp, #0
 8026cbe:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026cc0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026cc4:	4618      	mov	r0, r3
 8026cc6:	370c      	adds	r7, #12
 8026cc8:	46bd      	mov	sp, r7
 8026cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cce:	4770      	bx	lr

08026cd0 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026cd0:	b580      	push	{r7, lr}
 8026cd2:	b084      	sub	sp, #16
 8026cd4:	af00      	add	r7, sp, #0
 8026cd6:	60f8      	str	r0, [r7, #12]
 8026cd8:	60b9      	str	r1, [r7, #8]
 8026cda:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026cdc:	68f8      	ldr	r0, [r7, #12]
 8026cde:	f000 f963 	bl	8026fa8 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>
 8026ce2:	4602      	mov	r2, r0
 8026ce4:	68bb      	ldr	r3, [r7, #8]
 8026ce6:	4293      	cmp	r3, r2
 8026ce8:	bf8c      	ite	hi
 8026cea:	2301      	movhi	r3, #1
 8026cec:	2300      	movls	r3, #0
 8026cee:	b2db      	uxtb	r3, r3
 8026cf0:	2b00      	cmp	r3, #0
 8026cf2:	d001      	beq.n	8026cf8 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026cf4:	f015 f83b 	bl	803bd6e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026cf8:	68bb      	ldr	r3, [r7, #8]
 8026cfa:	009b      	lsls	r3, r3, #2
 8026cfc:	4618      	mov	r0, r3
 8026cfe:	f015 f825 	bl	803bd4c <_Znwj>
 8026d02:	4603      	mov	r3, r0
      }
 8026d04:	4618      	mov	r0, r3
 8026d06:	3710      	adds	r7, #16
 8026d08:	46bd      	mov	sp, r7
 8026d0a:	bd80      	pop	{r7, pc}

08026d0c <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026d0c:	b480      	push	{r7}
 8026d0e:	b083      	sub	sp, #12
 8026d10:	af00      	add	r7, sp, #0
 8026d12:	6078      	str	r0, [r7, #4]
 8026d14:	687b      	ldr	r3, [r7, #4]
 8026d16:	4618      	mov	r0, r3
 8026d18:	370c      	adds	r7, #12
 8026d1a:	46bd      	mov	sp, r7
 8026d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d20:	4770      	bx	lr

08026d22 <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8026d22:	b580      	push	{r7, lr}
 8026d24:	b084      	sub	sp, #16
 8026d26:	af00      	add	r7, sp, #0
 8026d28:	60f8      	str	r0, [r7, #12]
 8026d2a:	60b9      	str	r1, [r7, #8]
 8026d2c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8026d2e:	687a      	ldr	r2, [r7, #4]
 8026d30:	68b9      	ldr	r1, [r7, #8]
 8026d32:	68f8      	ldr	r0, [r7, #12]
 8026d34:	f000 f944 	bl	8026fc0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8026d38:	4603      	mov	r3, r0
    }
 8026d3a:	4618      	mov	r0, r3
 8026d3c:	3710      	adds	r7, #16
 8026d3e:	46bd      	mov	sp, r7
 8026d40:	bd80      	pop	{r7, pc}

08026d42 <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8026d42:	b480      	push	{r7}
 8026d44:	b083      	sub	sp, #12
 8026d46:	af00      	add	r7, sp, #0
 8026d48:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026d4a:	687b      	ldr	r3, [r7, #4]
 8026d4c:	4618      	mov	r0, r3
 8026d4e:	370c      	adds	r7, #12
 8026d50:	46bd      	mov	sp, r7
 8026d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d56:	4770      	bx	lr

08026d58 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>:
      move_iterator(iterator_type __i)
 8026d58:	b590      	push	{r4, r7, lr}
 8026d5a:	b083      	sub	sp, #12
 8026d5c:	af00      	add	r7, sp, #0
 8026d5e:	6078      	str	r0, [r7, #4]
 8026d60:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8026d62:	687c      	ldr	r4, [r7, #4]
 8026d64:	6838      	ldr	r0, [r7, #0]
 8026d66:	f7ff ffec 	bl	8026d42 <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8026d6a:	4603      	mov	r3, r0
 8026d6c:	4619      	mov	r1, r3
 8026d6e:	4620      	mov	r0, r4
 8026d70:	f7fd fb39 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026d74:	687b      	ldr	r3, [r7, #4]
 8026d76:	4618      	mov	r0, r3
 8026d78:	370c      	adds	r7, #12
 8026d7a:	46bd      	mov	sp, r7
 8026d7c:	bd90      	pop	{r4, r7, pc}

08026d7e <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8026d7e:	b580      	push	{r7, lr}
 8026d80:	b092      	sub	sp, #72	; 0x48
 8026d82:	af00      	add	r7, sp, #0
 8026d84:	60f8      	str	r0, [r7, #12]
 8026d86:	60b9      	str	r1, [r7, #8]
 8026d88:	607a      	str	r2, [r7, #4]
 8026d8a:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8026d8c:	2301      	movs	r3, #1
 8026d8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 8026d92:	f107 0314 	add.w	r3, r7, #20
 8026d96:	68b9      	ldr	r1, [r7, #8]
 8026d98:	4618      	mov	r0, r3
 8026d9a:	f7ff fde8 	bl	802696e <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026da2:	6879      	ldr	r1, [r7, #4]
 8026da4:	4618      	mov	r0, r3
 8026da6:	f7ff fde2 	bl	802696e <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026daa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026dae:	6839      	ldr	r1, [r7, #0]
 8026db0:	4618      	mov	r0, r3
 8026db2:	f7fd fb18 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026db6:	68f8      	ldr	r0, [r7, #12]
 8026db8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026dbc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8026dc0:	f107 0114 	add.w	r1, r7, #20
 8026dc4:	f000 f926 	bl	8027014 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>
    }
 8026dc8:	68f8      	ldr	r0, [r7, #12]
 8026dca:	3748      	adds	r7, #72	; 0x48
 8026dcc:	46bd      	mov	sp, r7
 8026dce:	bd80      	pop	{r7, pc}

08026dd0 <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8026dd0:	b580      	push	{r7, lr}
 8026dd2:	b090      	sub	sp, #64	; 0x40
 8026dd4:	af00      	add	r7, sp, #0
 8026dd6:	60f8      	str	r0, [r7, #12]
 8026dd8:	60b9      	str	r1, [r7, #8]
 8026dda:	607a      	str	r2, [r7, #4]
 8026ddc:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8026dde:	f107 0310 	add.w	r3, r7, #16
 8026de2:	68b9      	ldr	r1, [r7, #8]
 8026de4:	4618      	mov	r0, r3
 8026de6:	f7fd fafe 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026dea:	f107 0320 	add.w	r3, r7, #32
 8026dee:	6879      	ldr	r1, [r7, #4]
 8026df0:	4618      	mov	r0, r3
 8026df2:	f7fd faf8 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026df6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026dfa:	6839      	ldr	r1, [r7, #0]
 8026dfc:	4618      	mov	r0, r3
 8026dfe:	f7fd faf2 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026e02:	68f8      	ldr	r0, [r7, #12]
 8026e04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026e08:	f107 0220 	add.w	r2, r7, #32
 8026e0c:	f107 0110 	add.w	r1, r7, #16
 8026e10:	f000 f926 	bl	8027060 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8026e14:	68f8      	ldr	r0, [r7, #12]
 8026e16:	3740      	adds	r7, #64	; 0x40
 8026e18:	46bd      	mov	sp, r7
 8026e1a:	bd80      	pop	{r7, pc}

08026e1c <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 8026e1c:	b580      	push	{r7, lr}
 8026e1e:	b090      	sub	sp, #64	; 0x40
 8026e20:	af00      	add	r7, sp, #0
 8026e22:	60f8      	str	r0, [r7, #12]
 8026e24:	60b9      	str	r1, [r7, #8]
 8026e26:	607a      	str	r2, [r7, #4]
 8026e28:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 8026e2a:	f107 0310 	add.w	r3, r7, #16
 8026e2e:	68b9      	ldr	r1, [r7, #8]
 8026e30:	4618      	mov	r0, r3
 8026e32:	f7fd fad8 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026e36:	f107 0320 	add.w	r3, r7, #32
 8026e3a:	6879      	ldr	r1, [r7, #4]
 8026e3c:	4618      	mov	r0, r3
 8026e3e:	f7fd fad2 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026e46:	6839      	ldr	r1, [r7, #0]
 8026e48:	4618      	mov	r0, r3
 8026e4a:	f7fd facc 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026e4e:	68f8      	ldr	r0, [r7, #12]
 8026e50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026e54:	f107 0220 	add.w	r2, r7, #32
 8026e58:	f107 0110 	add.w	r1, r7, #16
 8026e5c:	f000 f97b 	bl	8027156 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8026e60:	68f8      	ldr	r0, [r7, #12]
 8026e62:	3740      	adds	r7, #64	; 0x40
 8026e64:	46bd      	mov	sp, r7
 8026e66:	bd80      	pop	{r7, pc}

08026e68 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8026e68:	b480      	push	{r7}
 8026e6a:	b083      	sub	sp, #12
 8026e6c:	af00      	add	r7, sp, #0
 8026e6e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026e70:	687b      	ldr	r3, [r7, #4]
 8026e72:	4618      	mov	r0, r3
 8026e74:	370c      	adds	r7, #12
 8026e76:	46bd      	mov	sp, r7
 8026e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e7c:	4770      	bx	lr

08026e7e <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8026e7e:	b580      	push	{r7, lr}
 8026e80:	b084      	sub	sp, #16
 8026e82:	af00      	add	r7, sp, #0
 8026e84:	60f8      	str	r0, [r7, #12]
 8026e86:	60b9      	str	r1, [r7, #8]
 8026e88:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8026e8a:	687a      	ldr	r2, [r7, #4]
 8026e8c:	68b9      	ldr	r1, [r7, #8]
 8026e8e:	68f8      	ldr	r0, [r7, #12]
 8026e90:	f000 f9dc 	bl	802724c <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026e94:	4603      	mov	r3, r0
 8026e96:	4618      	mov	r0, r3
 8026e98:	3710      	adds	r7, #16
 8026e9a:	46bd      	mov	sp, r7
 8026e9c:	bd80      	pop	{r7, pc}

08026e9e <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8026e9e:	b480      	push	{r7}
 8026ea0:	b083      	sub	sp, #12
 8026ea2:	af00      	add	r7, sp, #0
 8026ea4:	6078      	str	r0, [r7, #4]
 8026ea6:	6039      	str	r1, [r7, #0]
    { return __res; }
 8026ea8:	683b      	ldr	r3, [r7, #0]
 8026eaa:	4618      	mov	r0, r3
 8026eac:	370c      	adds	r7, #12
 8026eae:	46bd      	mov	sp, r7
 8026eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eb4:	4770      	bx	lr

08026eb6 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8026eb6:	b580      	push	{r7, lr}
 8026eb8:	b084      	sub	sp, #16
 8026eba:	af00      	add	r7, sp, #0
 8026ebc:	60f8      	str	r0, [r7, #12]
 8026ebe:	60b9      	str	r1, [r7, #8]
 8026ec0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8026ec2:	687a      	ldr	r2, [r7, #4]
 8026ec4:	68b9      	ldr	r1, [r7, #8]
 8026ec6:	68f8      	ldr	r0, [r7, #12]
 8026ec8:	f000 f9d0 	bl	802726c <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026ecc:	4603      	mov	r3, r0
 8026ece:	4618      	mov	r0, r3
 8026ed0:	3710      	adds	r7, #16
 8026ed2:	46bd      	mov	sp, r7
 8026ed4:	bd80      	pop	{r7, pc}

08026ed6 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8026ed6:	b580      	push	{r7, lr}
 8026ed8:	b082      	sub	sp, #8
 8026eda:	af00      	add	r7, sp, #0
 8026edc:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8026ede:	6878      	ldr	r0, [r7, #4]
 8026ee0:	f000 f856 	bl	8026f90 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8026ee4:	4603      	mov	r3, r0
 8026ee6:	4618      	mov	r0, r3
 8026ee8:	3708      	adds	r7, #8
 8026eea:	46bd      	mov	sp, r7
 8026eec:	bd80      	pop	{r7, pc}

08026eee <_ZSt12__miter_baseIPPjET_S2_>:
    __miter_base(_Iterator __it)
 8026eee:	b480      	push	{r7}
 8026ef0:	b083      	sub	sp, #12
 8026ef2:	af00      	add	r7, sp, #0
 8026ef4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026ef6:	687b      	ldr	r3, [r7, #4]
 8026ef8:	4618      	mov	r0, r3
 8026efa:	370c      	adds	r7, #12
 8026efc:	46bd      	mov	sp, r7
 8026efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f02:	4770      	bx	lr

08026f04 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026f04:	b5b0      	push	{r4, r5, r7, lr}
 8026f06:	b084      	sub	sp, #16
 8026f08:	af00      	add	r7, sp, #0
 8026f0a:	60f8      	str	r0, [r7, #12]
 8026f0c:	60b9      	str	r1, [r7, #8]
 8026f0e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026f10:	68f8      	ldr	r0, [r7, #12]
 8026f12:	f000 f9bb 	bl	802728c <_ZSt12__niter_baseIPPjET_S2_>
 8026f16:	4604      	mov	r4, r0
 8026f18:	68b8      	ldr	r0, [r7, #8]
 8026f1a:	f000 f9b7 	bl	802728c <_ZSt12__niter_baseIPPjET_S2_>
 8026f1e:	4605      	mov	r5, r0
 8026f20:	687b      	ldr	r3, [r7, #4]
 8026f22:	4618      	mov	r0, r3
 8026f24:	f000 f9b2 	bl	802728c <_ZSt12__niter_baseIPPjET_S2_>
 8026f28:	4603      	mov	r3, r0
 8026f2a:	461a      	mov	r2, r3
 8026f2c:	4629      	mov	r1, r5
 8026f2e:	4620      	mov	r0, r4
 8026f30:	f000 f9b7 	bl	80272a2 <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 8026f34:	4602      	mov	r2, r0
 8026f36:	1d3b      	adds	r3, r7, #4
 8026f38:	4611      	mov	r1, r2
 8026f3a:	4618      	mov	r0, r3
 8026f3c:	f000 f9c1 	bl	80272c2 <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 8026f40:	4603      	mov	r3, r0
    }
 8026f42:	4618      	mov	r0, r3
 8026f44:	3710      	adds	r7, #16
 8026f46:	46bd      	mov	sp, r7
 8026f48:	bdb0      	pop	{r4, r5, r7, pc}

08026f4a <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8026f4a:	b5b0      	push	{r4, r5, r7, lr}
 8026f4c:	b084      	sub	sp, #16
 8026f4e:	af00      	add	r7, sp, #0
 8026f50:	60f8      	str	r0, [r7, #12]
 8026f52:	60b9      	str	r1, [r7, #8]
 8026f54:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026f56:	68f8      	ldr	r0, [r7, #12]
 8026f58:	f000 f998 	bl	802728c <_ZSt12__niter_baseIPPjET_S2_>
 8026f5c:	4604      	mov	r4, r0
 8026f5e:	68b8      	ldr	r0, [r7, #8]
 8026f60:	f000 f994 	bl	802728c <_ZSt12__niter_baseIPPjET_S2_>
 8026f64:	4605      	mov	r5, r0
 8026f66:	687b      	ldr	r3, [r7, #4]
 8026f68:	4618      	mov	r0, r3
 8026f6a:	f000 f98f 	bl	802728c <_ZSt12__niter_baseIPPjET_S2_>
 8026f6e:	4603      	mov	r3, r0
 8026f70:	461a      	mov	r2, r3
 8026f72:	4629      	mov	r1, r5
 8026f74:	4620      	mov	r0, r4
 8026f76:	f000 f9b0 	bl	80272da <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 8026f7a:	4602      	mov	r2, r0
 8026f7c:	1d3b      	adds	r3, r7, #4
 8026f7e:	4611      	mov	r1, r2
 8026f80:	4618      	mov	r0, r3
 8026f82:	f000 f99e 	bl	80272c2 <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 8026f86:	4603      	mov	r3, r0
    }
 8026f88:	4618      	mov	r0, r3
 8026f8a:	3710      	adds	r7, #16
 8026f8c:	46bd      	mov	sp, r7
 8026f8e:	bdb0      	pop	{r4, r5, r7, pc}

08026f90 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026f90:	b480      	push	{r7}
 8026f92:	b083      	sub	sp, #12
 8026f94:	af00      	add	r7, sp, #0
 8026f96:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026f98:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026f9c:	4618      	mov	r0, r3
 8026f9e:	370c      	adds	r7, #12
 8026fa0:	46bd      	mov	sp, r7
 8026fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fa6:	4770      	bx	lr

08026fa8 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026fa8:	b480      	push	{r7}
 8026faa:	b083      	sub	sp, #12
 8026fac:	af00      	add	r7, sp, #0
 8026fae:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026fb0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026fb4:	4618      	mov	r0, r3
 8026fb6:	370c      	adds	r7, #12
 8026fb8:	46bd      	mov	sp, r7
 8026fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fbe:	4770      	bx	lr

08026fc0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8026fc0:	b580      	push	{r7, lr}
 8026fc2:	b086      	sub	sp, #24
 8026fc4:	af00      	add	r7, sp, #0
 8026fc6:	60f8      	str	r0, [r7, #12]
 8026fc8:	60b9      	str	r1, [r7, #8]
 8026fca:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8026fcc:	68ba      	ldr	r2, [r7, #8]
 8026fce:	68fb      	ldr	r3, [r7, #12]
 8026fd0:	1ad3      	subs	r3, r2, r3
 8026fd2:	109b      	asrs	r3, r3, #2
 8026fd4:	4a0e      	ldr	r2, [pc, #56]	; (8027010 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 8026fd6:	fb02 f303 	mul.w	r3, r2, r3
 8026fda:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8026fdc:	697b      	ldr	r3, [r7, #20]
 8026fde:	2b00      	cmp	r3, #0
 8026fe0:	d009      	beq.n	8026ff6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8026fe2:	697a      	ldr	r2, [r7, #20]
 8026fe4:	4613      	mov	r3, r2
 8026fe6:	009b      	lsls	r3, r3, #2
 8026fe8:	4413      	add	r3, r2
 8026fea:	009b      	lsls	r3, r3, #2
 8026fec:	461a      	mov	r2, r3
 8026fee:	68f9      	ldr	r1, [r7, #12]
 8026ff0:	6878      	ldr	r0, [r7, #4]
 8026ff2:	f014 ff4d 	bl	803be90 <memmove>
	  return __result + _Num;
 8026ff6:	697a      	ldr	r2, [r7, #20]
 8026ff8:	4613      	mov	r3, r2
 8026ffa:	009b      	lsls	r3, r3, #2
 8026ffc:	4413      	add	r3, r2
 8026ffe:	009b      	lsls	r3, r3, #2
 8027000:	461a      	mov	r2, r3
 8027002:	687b      	ldr	r3, [r7, #4]
 8027004:	4413      	add	r3, r2
	}
 8027006:	4618      	mov	r0, r3
 8027008:	3718      	adds	r7, #24
 802700a:	46bd      	mov	sp, r7
 802700c:	bd80      	pop	{r7, pc}
 802700e:	bf00      	nop
 8027010:	cccccccd 	.word	0xcccccccd

08027014 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8027014:	b580      	push	{r7, lr}
 8027016:	b090      	sub	sp, #64	; 0x40
 8027018:	af00      	add	r7, sp, #0
 802701a:	60f8      	str	r0, [r7, #12]
 802701c:	60b9      	str	r1, [r7, #8]
 802701e:	607a      	str	r2, [r7, #4]
 8027020:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8027022:	f107 0310 	add.w	r3, r7, #16
 8027026:	68b9      	ldr	r1, [r7, #8]
 8027028:	4618      	mov	r0, r3
 802702a:	f7ff fca0 	bl	802696e <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802702e:	f107 0320 	add.w	r3, r7, #32
 8027032:	6879      	ldr	r1, [r7, #4]
 8027034:	4618      	mov	r0, r3
 8027036:	f7ff fc9a 	bl	802696e <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802703a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802703e:	6839      	ldr	r1, [r7, #0]
 8027040:	4618      	mov	r0, r3
 8027042:	f7fd f9d0 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027046:	68f8      	ldr	r0, [r7, #12]
 8027048:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802704c:	f107 0220 	add.w	r2, r7, #32
 8027050:	f107 0110 	add.w	r1, r7, #16
 8027054:	f000 f951 	bl	80272fa <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 8027058:	68f8      	ldr	r0, [r7, #12]
 802705a:	3740      	adds	r7, #64	; 0x40
 802705c:	46bd      	mov	sp, r7
 802705e:	bd80      	pop	{r7, pc}

08027060 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 8027060:	b5b0      	push	{r4, r5, r7, lr}
 8027062:	b09e      	sub	sp, #120	; 0x78
 8027064:	af00      	add	r7, sp, #0
 8027066:	60f8      	str	r0, [r7, #12]
 8027068:	60b9      	str	r1, [r7, #8]
 802706a:	607a      	str	r2, [r7, #4]
 802706c:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 802706e:	68bb      	ldr	r3, [r7, #8]
 8027070:	68da      	ldr	r2, [r3, #12]
 8027072:	687b      	ldr	r3, [r7, #4]
 8027074:	68db      	ldr	r3, [r3, #12]
 8027076:	429a      	cmp	r2, r3
 8027078:	d058      	beq.n	802712c <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result
 802707a:	68bb      	ldr	r3, [r7, #8]
 802707c:	681c      	ldr	r4, [r3, #0]
 802707e:	68bb      	ldr	r3, [r7, #8]
 8027080:	689d      	ldr	r5, [r3, #8]
 8027082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027086:	6839      	ldr	r1, [r7, #0]
 8027088:	4618      	mov	r0, r3
 802708a:	f7fd f9ac 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802708e:	f107 0014 	add.w	r0, r7, #20
 8027092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027096:	462a      	mov	r2, r5
 8027098:	4621      	mov	r1, r4
 802709a:	f000 f965 	bl	8027368 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802709e:	683b      	ldr	r3, [r7, #0]
 80270a0:	461c      	mov	r4, r3
 80270a2:	f107 0314 	add.w	r3, r7, #20
 80270a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80270a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 80270ac:	68bb      	ldr	r3, [r7, #8]
 80270ae:	68db      	ldr	r3, [r3, #12]
 80270b0:	3304      	adds	r3, #4
 80270b2:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 80270b4:	687b      	ldr	r3, [r7, #4]
 80270b6:	68db      	ldr	r3, [r3, #12]
 80270b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80270ba:	429a      	cmp	r2, r3
 80270bc:	d024      	beq.n	8027108 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result
 80270be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80270c0:	681d      	ldr	r5, [r3, #0]
 80270c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80270c4:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 80270c6:	f7fd fc72 	bl	80249ae <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80270ca:	4602      	mov	r2, r0
 80270cc:	4613      	mov	r3, r2
 80270ce:	009b      	lsls	r3, r3, #2
 80270d0:	4413      	add	r3, r2
 80270d2:	009b      	lsls	r3, r3, #2
	    __result
 80270d4:	441c      	add	r4, r3
 80270d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80270da:	6839      	ldr	r1, [r7, #0]
 80270dc:	4618      	mov	r0, r3
 80270de:	f7fd f982 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80270e2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80270e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80270ea:	4622      	mov	r2, r4
 80270ec:	4629      	mov	r1, r5
 80270ee:	f000 f93b 	bl	8027368 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80270f2:	683b      	ldr	r3, [r7, #0]
 80270f4:	461c      	mov	r4, r3
 80270f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80270fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80270fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8027100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8027102:	3304      	adds	r3, #4
 8027104:	677b      	str	r3, [r7, #116]	; 0x74
 8027106:	e7d5      	b.n	80270b4 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
					      __result);
 8027108:	687b      	ldr	r3, [r7, #4]
 802710a:	685c      	ldr	r4, [r3, #4]
 802710c:	687b      	ldr	r3, [r7, #4]
 802710e:	681d      	ldr	r5, [r3, #0]
 8027110:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8027114:	6839      	ldr	r1, [r7, #0]
 8027116:	4618      	mov	r0, r3
 8027118:	f7fd f965 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802711c:	68f8      	ldr	r0, [r7, #12]
 802711e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8027122:	462a      	mov	r2, r5
 8027124:	4621      	mov	r1, r4
 8027126:	f000 f91f 	bl	8027368 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802712a:	e010      	b.n	802714e <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
					  __result);
 802712c:	68bb      	ldr	r3, [r7, #8]
 802712e:	681c      	ldr	r4, [r3, #0]
 8027130:	687b      	ldr	r3, [r7, #4]
 8027132:	681d      	ldr	r5, [r3, #0]
 8027134:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8027138:	6839      	ldr	r1, [r7, #0]
 802713a:	4618      	mov	r0, r3
 802713c:	f7fd f953 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027140:	68f8      	ldr	r0, [r7, #12]
 8027142:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8027146:	462a      	mov	r2, r5
 8027148:	4621      	mov	r1, r4
 802714a:	f000 f90d 	bl	8027368 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802714e:	68f8      	ldr	r0, [r7, #12]
 8027150:	3778      	adds	r7, #120	; 0x78
 8027152:	46bd      	mov	sp, r7
 8027154:	bdb0      	pop	{r4, r5, r7, pc}

08027156 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_backward_dit(
 8027156:	b5b0      	push	{r4, r5, r7, lr}
 8027158:	b09e      	sub	sp, #120	; 0x78
 802715a:	af00      	add	r7, sp, #0
 802715c:	60f8      	str	r0, [r7, #12]
 802715e:	60b9      	str	r1, [r7, #8]
 8027160:	607a      	str	r2, [r7, #4]
 8027162:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8027164:	68bb      	ldr	r3, [r7, #8]
 8027166:	68da      	ldr	r2, [r3, #12]
 8027168:	687b      	ldr	r3, [r7, #4]
 802716a:	68db      	ldr	r3, [r3, #12]
 802716c:	429a      	cmp	r2, r3
 802716e:	d058      	beq.n	8027222 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 8027170:	687b      	ldr	r3, [r7, #4]
 8027172:	685c      	ldr	r4, [r3, #4]
 8027174:	687b      	ldr	r3, [r7, #4]
 8027176:	681d      	ldr	r5, [r3, #0]
 8027178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802717c:	6839      	ldr	r1, [r7, #0]
 802717e:	4618      	mov	r0, r3
 8027180:	f7fd f931 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027184:	f107 0014 	add.w	r0, r7, #20
 8027188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802718c:	462a      	mov	r2, r5
 802718e:	4621      	mov	r1, r4
 8027190:	f000 f93c 	bl	802740c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8027194:	683b      	ldr	r3, [r7, #0]
 8027196:	461c      	mov	r4, r3
 8027198:	f107 0314 	add.w	r3, r7, #20
 802719c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802719e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 80271a2:	687b      	ldr	r3, [r7, #4]
 80271a4:	68db      	ldr	r3, [r3, #12]
 80271a6:	3b04      	subs	r3, #4
 80271a8:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 80271aa:	68bb      	ldr	r3, [r7, #8]
 80271ac:	68db      	ldr	r3, [r3, #12]
 80271ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80271b0:	429a      	cmp	r2, r3
 80271b2:	d024      	beq.n	80271fe <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 80271b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80271b6:	681d      	ldr	r5, [r3, #0]
 80271b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80271ba:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 80271bc:	f7fd fbf7 	bl	80249ae <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80271c0:	4602      	mov	r2, r0
 80271c2:	4613      	mov	r3, r2
 80271c4:	009b      	lsls	r3, r3, #2
 80271c6:	4413      	add	r3, r2
 80271c8:	009b      	lsls	r3, r3, #2
	    __result = std::__copy_move_backward_a1<_IsMove>(
 80271ca:	441c      	add	r4, r3
 80271cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80271d0:	6839      	ldr	r1, [r7, #0]
 80271d2:	4618      	mov	r0, r3
 80271d4:	f7fd f907 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80271d8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80271dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80271e0:	4622      	mov	r2, r4
 80271e2:	4629      	mov	r1, r5
 80271e4:	f000 f912 	bl	802740c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80271e8:	683b      	ldr	r3, [r7, #0]
 80271ea:	461c      	mov	r4, r3
 80271ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80271f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80271f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 80271f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80271f8:	3b04      	subs	r3, #4
 80271fa:	677b      	str	r3, [r7, #116]	; 0x74
 80271fc:	e7d5      	b.n	80271aa <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
			__first._M_cur, __first._M_last, __result);
 80271fe:	68bb      	ldr	r3, [r7, #8]
 8027200:	681c      	ldr	r4, [r3, #0]
 8027202:	68bb      	ldr	r3, [r7, #8]
 8027204:	689d      	ldr	r5, [r3, #8]
 8027206:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802720a:	6839      	ldr	r1, [r7, #0]
 802720c:	4618      	mov	r0, r3
 802720e:	f7fd f8ea 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027212:	68f8      	ldr	r0, [r7, #12]
 8027214:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8027218:	462a      	mov	r2, r5
 802721a:	4621      	mov	r1, r4
 802721c:	f000 f8f6 	bl	802740c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8027220:	e010      	b.n	8027244 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
		__first._M_cur, __last._M_cur, __result);
 8027222:	68bb      	ldr	r3, [r7, #8]
 8027224:	681c      	ldr	r4, [r3, #0]
 8027226:	687b      	ldr	r3, [r7, #4]
 8027228:	681d      	ldr	r5, [r3, #0]
 802722a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802722e:	6839      	ldr	r1, [r7, #0]
 8027230:	4618      	mov	r0, r3
 8027232:	f7fd f8d8 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027236:	68f8      	ldr	r0, [r7, #12]
 8027238:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802723c:	462a      	mov	r2, r5
 802723e:	4621      	mov	r1, r4
 8027240:	f000 f8e4 	bl	802740c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8027244:	68f8      	ldr	r0, [r7, #12]
 8027246:	3778      	adds	r7, #120	; 0x78
 8027248:	46bd      	mov	sp, r7
 802724a:	bdb0      	pop	{r4, r5, r7, pc}

0802724c <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802724c:	b580      	push	{r7, lr}
 802724e:	b084      	sub	sp, #16
 8027250:	af00      	add	r7, sp, #0
 8027252:	60f8      	str	r0, [r7, #12]
 8027254:	60b9      	str	r1, [r7, #8]
 8027256:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8027258:	687a      	ldr	r2, [r7, #4]
 802725a:	68b9      	ldr	r1, [r7, #8]
 802725c:	68f8      	ldr	r0, [r7, #12]
 802725e:	f000 f93b 	bl	80274d8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 8027262:	4603      	mov	r3, r0
    }
 8027264:	4618      	mov	r0, r3
 8027266:	3710      	adds	r7, #16
 8027268:	46bd      	mov	sp, r7
 802726a:	bd80      	pop	{r7, pc}

0802726c <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802726c:	b580      	push	{r7, lr}
 802726e:	b084      	sub	sp, #16
 8027270:	af00      	add	r7, sp, #0
 8027272:	60f8      	str	r0, [r7, #12]
 8027274:	60b9      	str	r1, [r7, #8]
 8027276:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8027278:	687a      	ldr	r2, [r7, #4]
 802727a:	68b9      	ldr	r1, [r7, #8]
 802727c:	68f8      	ldr	r0, [r7, #12]
 802727e:	f000 f948 	bl	8027512 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 8027282:	4603      	mov	r3, r0
    }
 8027284:	4618      	mov	r0, r3
 8027286:	3710      	adds	r7, #16
 8027288:	46bd      	mov	sp, r7
 802728a:	bd80      	pop	{r7, pc}

0802728c <_ZSt12__niter_baseIPPjET_S2_>:
    __niter_base(_Iterator __it)
 802728c:	b480      	push	{r7}
 802728e:	b083      	sub	sp, #12
 8027290:	af00      	add	r7, sp, #0
 8027292:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027294:	687b      	ldr	r3, [r7, #4]
 8027296:	4618      	mov	r0, r3
 8027298:	370c      	adds	r7, #12
 802729a:	46bd      	mov	sp, r7
 802729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272a0:	4770      	bx	lr

080272a2 <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80272a2:	b580      	push	{r7, lr}
 80272a4:	b084      	sub	sp, #16
 80272a6:	af00      	add	r7, sp, #0
 80272a8:	60f8      	str	r0, [r7, #12]
 80272aa:	60b9      	str	r1, [r7, #8]
 80272ac:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80272ae:	687a      	ldr	r2, [r7, #4]
 80272b0:	68b9      	ldr	r1, [r7, #8]
 80272b2:	68f8      	ldr	r0, [r7, #12]
 80272b4:	f000 f94f 	bl	8027556 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 80272b8:	4603      	mov	r3, r0
 80272ba:	4618      	mov	r0, r3
 80272bc:	3710      	adds	r7, #16
 80272be:	46bd      	mov	sp, r7
 80272c0:	bd80      	pop	{r7, pc}

080272c2 <_ZSt12__niter_wrapIPPjET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80272c2:	b480      	push	{r7}
 80272c4:	b083      	sub	sp, #12
 80272c6:	af00      	add	r7, sp, #0
 80272c8:	6078      	str	r0, [r7, #4]
 80272ca:	6039      	str	r1, [r7, #0]
    { return __res; }
 80272cc:	683b      	ldr	r3, [r7, #0]
 80272ce:	4618      	mov	r0, r3
 80272d0:	370c      	adds	r7, #12
 80272d2:	46bd      	mov	sp, r7
 80272d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272d8:	4770      	bx	lr

080272da <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80272da:	b580      	push	{r7, lr}
 80272dc:	b084      	sub	sp, #16
 80272de:	af00      	add	r7, sp, #0
 80272e0:	60f8      	str	r0, [r7, #12]
 80272e2:	60b9      	str	r1, [r7, #8]
 80272e4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80272e6:	687a      	ldr	r2, [r7, #4]
 80272e8:	68b9      	ldr	r1, [r7, #8]
 80272ea:	68f8      	ldr	r0, [r7, #12]
 80272ec:	f000 f943 	bl	8027576 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 80272f0:	4603      	mov	r3, r0
 80272f2:	4618      	mov	r0, r3
 80272f4:	3710      	adds	r7, #16
 80272f6:	46bd      	mov	sp, r7
 80272f8:	bd80      	pop	{r7, pc}

080272fa <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 80272fa:	b580      	push	{r7, lr}
 80272fc:	b098      	sub	sp, #96	; 0x60
 80272fe:	af00      	add	r7, sp, #0
 8027300:	60f8      	str	r0, [r7, #12]
 8027302:	60b9      	str	r1, [r7, #8]
 8027304:	607a      	str	r2, [r7, #4]
 8027306:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8027308:	f107 0320 	add.w	r3, r7, #32
 802730c:	68b9      	ldr	r1, [r7, #8]
 802730e:	4618      	mov	r0, r3
 8027310:	f7ff fb2d 	bl	802696e <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8027314:	f107 0310 	add.w	r3, r7, #16
 8027318:	f107 0220 	add.w	r2, r7, #32
 802731c:	4611      	mov	r1, r2
 802731e:	4618      	mov	r0, r3
 8027320:	f000 f939 	bl	8027596 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8027324:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027328:	6879      	ldr	r1, [r7, #4]
 802732a:	4618      	mov	r0, r3
 802732c:	f7ff fb1f 	bl	802696e <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8027330:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027334:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027338:	4611      	mov	r1, r2
 802733a:	4618      	mov	r0, r3
 802733c:	f000 f92b 	bl	8027596 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8027340:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8027344:	6839      	ldr	r1, [r7, #0]
 8027346:	4618      	mov	r0, r3
 8027348:	f7fd f84d 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802734c:	68f8      	ldr	r0, [r7, #12]
 802734e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8027352:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8027356:	f107 0110 	add.w	r1, r7, #16
 802735a:	f7ff fb4b 	bl	80269f4 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 802735e:	68f8      	ldr	r0, [r7, #12]
 8027360:	3760      	adds	r7, #96	; 0x60
 8027362:	46bd      	mov	sp, r7
 8027364:	bd80      	pop	{r7, pc}
	...

08027368 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:
    __copy_move_a1(_II __first, _II __last,
 8027368:	b580      	push	{r7, lr}
 802736a:	b088      	sub	sp, #32
 802736c:	af00      	add	r7, sp, #0
 802736e:	60f8      	str	r0, [r7, #12]
 8027370:	60b9      	str	r1, [r7, #8]
 8027372:	607a      	str	r2, [r7, #4]
 8027374:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 8027376:	687a      	ldr	r2, [r7, #4]
 8027378:	68bb      	ldr	r3, [r7, #8]
 802737a:	1ad3      	subs	r3, r2, r3
 802737c:	109b      	asrs	r3, r3, #2
 802737e:	4a22      	ldr	r2, [pc, #136]	; (8027408 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8027380:	fb02 f303 	mul.w	r3, r2, r3
 8027384:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8027386:	697b      	ldr	r3, [r7, #20]
 8027388:	2b00      	cmp	r3, #0
 802738a:	dd34      	ble.n	80273f6 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 802738c:	683b      	ldr	r3, [r7, #0]
 802738e:	689a      	ldr	r2, [r3, #8]
 8027390:	683b      	ldr	r3, [r7, #0]
 8027392:	681b      	ldr	r3, [r3, #0]
 8027394:	1ad3      	subs	r3, r2, r3
 8027396:	109b      	asrs	r3, r3, #2
 8027398:	4a1b      	ldr	r2, [pc, #108]	; (8027408 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 802739a:	fb02 f303 	mul.w	r3, r2, r3
 802739e:	61bb      	str	r3, [r7, #24]
 80273a0:	f107 0218 	add.w	r2, r7, #24
 80273a4:	f107 0314 	add.w	r3, r7, #20
 80273a8:	4611      	mov	r1, r2
 80273aa:	4618      	mov	r0, r3
 80273ac:	f7fe fd4d 	bl	8025e4a <_ZSt3minIiERKT_S2_S2_>
 80273b0:	4603      	mov	r3, r0
	  const difference_type __clen
 80273b2:	681b      	ldr	r3, [r3, #0]
 80273b4:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 80273b6:	69fa      	ldr	r2, [r7, #28]
 80273b8:	4613      	mov	r3, r2
 80273ba:	009b      	lsls	r3, r3, #2
 80273bc:	4413      	add	r3, r2
 80273be:	009b      	lsls	r3, r3, #2
 80273c0:	461a      	mov	r2, r3
 80273c2:	68bb      	ldr	r3, [r7, #8]
 80273c4:	1899      	adds	r1, r3, r2
 80273c6:	683b      	ldr	r3, [r7, #0]
 80273c8:	681b      	ldr	r3, [r3, #0]
 80273ca:	461a      	mov	r2, r3
 80273cc:	68b8      	ldr	r0, [r7, #8]
 80273ce:	f000 f8f8 	bl	80275c2 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
	  __first += __clen;
 80273d2:	69fa      	ldr	r2, [r7, #28]
 80273d4:	4613      	mov	r3, r2
 80273d6:	009b      	lsls	r3, r3, #2
 80273d8:	4413      	add	r3, r2
 80273da:	009b      	lsls	r3, r3, #2
 80273dc:	461a      	mov	r2, r3
 80273de:	68bb      	ldr	r3, [r7, #8]
 80273e0:	4413      	add	r3, r2
 80273e2:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 80273e4:	69f9      	ldr	r1, [r7, #28]
 80273e6:	6838      	ldr	r0, [r7, #0]
 80273e8:	f7fe fa48 	bl	802587c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 80273ec:	697a      	ldr	r2, [r7, #20]
 80273ee:	69fb      	ldr	r3, [r7, #28]
 80273f0:	1ad3      	subs	r3, r2, r3
 80273f2:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80273f4:	e7c7      	b.n	8027386 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
      return __result;
 80273f6:	6839      	ldr	r1, [r7, #0]
 80273f8:	68f8      	ldr	r0, [r7, #12]
 80273fa:	f7fc fff4 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 80273fe:	68f8      	ldr	r0, [r7, #12]
 8027400:	3720      	adds	r7, #32
 8027402:	46bd      	mov	sp, r7
 8027404:	bd80      	pop	{r7, pc}
 8027406:	bf00      	nop
 8027408:	cccccccd 	.word	0xcccccccd

0802740c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 802740c:	b580      	push	{r7, lr}
 802740e:	b088      	sub	sp, #32
 8027410:	af00      	add	r7, sp, #0
 8027412:	60f8      	str	r0, [r7, #12]
 8027414:	60b9      	str	r1, [r7, #8]
 8027416:	607a      	str	r2, [r7, #4]
 8027418:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 802741a:	687a      	ldr	r2, [r7, #4]
 802741c:	68bb      	ldr	r3, [r7, #8]
 802741e:	1ad3      	subs	r3, r2, r3
 8027420:	109b      	asrs	r3, r3, #2
 8027422:	4a2c      	ldr	r2, [pc, #176]	; (80274d4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 8027424:	fb02 f303 	mul.w	r3, r2, r3
 8027428:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802742a:	697b      	ldr	r3, [r7, #20]
 802742c:	2b00      	cmp	r3, #0
 802742e:	dd49      	ble.n	80274c4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 8027430:	683b      	ldr	r3, [r7, #0]
 8027432:	681a      	ldr	r2, [r3, #0]
 8027434:	683b      	ldr	r3, [r7, #0]
 8027436:	685b      	ldr	r3, [r3, #4]
 8027438:	1ad3      	subs	r3, r2, r3
 802743a:	109b      	asrs	r3, r3, #2
 802743c:	4a25      	ldr	r2, [pc, #148]	; (80274d4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 802743e:	fb02 f303 	mul.w	r3, r2, r3
 8027442:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 8027444:	683b      	ldr	r3, [r7, #0]
 8027446:	681b      	ldr	r3, [r3, #0]
 8027448:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 802744a:	693b      	ldr	r3, [r7, #16]
 802744c:	2b00      	cmp	r3, #0
 802744e:	d10f      	bne.n	8027470 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 8027450:	f7fd faad 	bl	80249ae <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8027454:	4603      	mov	r3, r0
 8027456:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 8027458:	683b      	ldr	r3, [r7, #0]
 802745a:	68db      	ldr	r3, [r3, #12]
 802745c:	3b04      	subs	r3, #4
 802745e:	681a      	ldr	r2, [r3, #0]
 8027460:	693b      	ldr	r3, [r7, #16]
 8027462:	4619      	mov	r1, r3
 8027464:	460b      	mov	r3, r1
 8027466:	009b      	lsls	r3, r3, #2
 8027468:	440b      	add	r3, r1
 802746a:	009b      	lsls	r3, r3, #2
 802746c:	4413      	add	r3, r2
 802746e:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 8027470:	f107 0210 	add.w	r2, r7, #16
 8027474:	f107 0314 	add.w	r3, r7, #20
 8027478:	4611      	mov	r1, r2
 802747a:	4618      	mov	r0, r3
 802747c:	f7fe fce5 	bl	8025e4a <_ZSt3minIiERKT_S2_S2_>
 8027480:	4603      	mov	r3, r0
 8027482:	681b      	ldr	r3, [r3, #0]
 8027484:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 8027486:	69ba      	ldr	r2, [r7, #24]
 8027488:	4613      	mov	r3, r2
 802748a:	009b      	lsls	r3, r3, #2
 802748c:	4413      	add	r3, r2
 802748e:	009b      	lsls	r3, r3, #2
 8027490:	425b      	negs	r3, r3
 8027492:	687a      	ldr	r2, [r7, #4]
 8027494:	4413      	add	r3, r2
 8027496:	69fa      	ldr	r2, [r7, #28]
 8027498:	6879      	ldr	r1, [r7, #4]
 802749a:	4618      	mov	r0, r3
 802749c:	f000 f8a1 	bl	80275e2 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>

	  __last -= __clen;
 80274a0:	69ba      	ldr	r2, [r7, #24]
 80274a2:	4613      	mov	r3, r2
 80274a4:	009b      	lsls	r3, r3, #2
 80274a6:	4413      	add	r3, r2
 80274a8:	009b      	lsls	r3, r3, #2
 80274aa:	425b      	negs	r3, r3
 80274ac:	687a      	ldr	r2, [r7, #4]
 80274ae:	4413      	add	r3, r2
 80274b0:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 80274b2:	69b9      	ldr	r1, [r7, #24]
 80274b4:	6838      	ldr	r0, [r7, #0]
 80274b6:	f7ff f9fe 	bl	80268b6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	  __len -= __clen;
 80274ba:	697a      	ldr	r2, [r7, #20]
 80274bc:	69bb      	ldr	r3, [r7, #24]
 80274be:	1ad3      	subs	r3, r2, r3
 80274c0:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80274c2:	e7b2      	b.n	802742a <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 80274c4:	6839      	ldr	r1, [r7, #0]
 80274c6:	68f8      	ldr	r0, [r7, #12]
 80274c8:	f7fc ff8d 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 80274cc:	68f8      	ldr	r0, [r7, #12]
 80274ce:	3720      	adds	r7, #32
 80274d0:	46bd      	mov	sp, r7
 80274d2:	bd80      	pop	{r7, pc}
 80274d4:	cccccccd 	.word	0xcccccccd

080274d8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80274d8:	b580      	push	{r7, lr}
 80274da:	b086      	sub	sp, #24
 80274dc:	af00      	add	r7, sp, #0
 80274de:	60f8      	str	r0, [r7, #12]
 80274e0:	60b9      	str	r1, [r7, #8]
 80274e2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80274e4:	68ba      	ldr	r2, [r7, #8]
 80274e6:	68fb      	ldr	r3, [r7, #12]
 80274e8:	1ad3      	subs	r3, r2, r3
 80274ea:	109b      	asrs	r3, r3, #2
 80274ec:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80274ee:	697b      	ldr	r3, [r7, #20]
 80274f0:	2b00      	cmp	r3, #0
 80274f2:	d006      	beq.n	8027502 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80274f4:	697b      	ldr	r3, [r7, #20]
 80274f6:	009b      	lsls	r3, r3, #2
 80274f8:	461a      	mov	r2, r3
 80274fa:	68f9      	ldr	r1, [r7, #12]
 80274fc:	6878      	ldr	r0, [r7, #4]
 80274fe:	f014 fcc7 	bl	803be90 <memmove>
	  return __result + _Num;
 8027502:	697b      	ldr	r3, [r7, #20]
 8027504:	009b      	lsls	r3, r3, #2
 8027506:	687a      	ldr	r2, [r7, #4]
 8027508:	4413      	add	r3, r2
	}
 802750a:	4618      	mov	r0, r3
 802750c:	3718      	adds	r7, #24
 802750e:	46bd      	mov	sp, r7
 8027510:	bd80      	pop	{r7, pc}

08027512 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8027512:	b580      	push	{r7, lr}
 8027514:	b086      	sub	sp, #24
 8027516:	af00      	add	r7, sp, #0
 8027518:	60f8      	str	r0, [r7, #12]
 802751a:	60b9      	str	r1, [r7, #8]
 802751c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802751e:	68ba      	ldr	r2, [r7, #8]
 8027520:	68fb      	ldr	r3, [r7, #12]
 8027522:	1ad3      	subs	r3, r2, r3
 8027524:	109b      	asrs	r3, r3, #2
 8027526:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027528:	697b      	ldr	r3, [r7, #20]
 802752a:	2b00      	cmp	r3, #0
 802752c:	d00a      	beq.n	8027544 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802752e:	697b      	ldr	r3, [r7, #20]
 8027530:	009b      	lsls	r3, r3, #2
 8027532:	425b      	negs	r3, r3
 8027534:	687a      	ldr	r2, [r7, #4]
 8027536:	18d0      	adds	r0, r2, r3
 8027538:	697b      	ldr	r3, [r7, #20]
 802753a:	009b      	lsls	r3, r3, #2
 802753c:	461a      	mov	r2, r3
 802753e:	68f9      	ldr	r1, [r7, #12]
 8027540:	f014 fca6 	bl	803be90 <memmove>
	  return __result - _Num;
 8027544:	697b      	ldr	r3, [r7, #20]
 8027546:	009b      	lsls	r3, r3, #2
 8027548:	425b      	negs	r3, r3
 802754a:	687a      	ldr	r2, [r7, #4]
 802754c:	4413      	add	r3, r2
	}
 802754e:	4618      	mov	r0, r3
 8027550:	3718      	adds	r7, #24
 8027552:	46bd      	mov	sp, r7
 8027554:	bd80      	pop	{r7, pc}

08027556 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8027556:	b580      	push	{r7, lr}
 8027558:	b084      	sub	sp, #16
 802755a:	af00      	add	r7, sp, #0
 802755c:	60f8      	str	r0, [r7, #12]
 802755e:	60b9      	str	r1, [r7, #8]
 8027560:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8027562:	687a      	ldr	r2, [r7, #4]
 8027564:	68b9      	ldr	r1, [r7, #8]
 8027566:	68f8      	ldr	r0, [r7, #12]
 8027568:	f000 f84b 	bl	8027602 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>
 802756c:	4603      	mov	r3, r0
    }
 802756e:	4618      	mov	r0, r3
 8027570:	3710      	adds	r7, #16
 8027572:	46bd      	mov	sp, r7
 8027574:	bd80      	pop	{r7, pc}

08027576 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8027576:	b580      	push	{r7, lr}
 8027578:	b084      	sub	sp, #16
 802757a:	af00      	add	r7, sp, #0
 802757c:	60f8      	str	r0, [r7, #12]
 802757e:	60b9      	str	r1, [r7, #8]
 8027580:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8027582:	687a      	ldr	r2, [r7, #4]
 8027584:	68b9      	ldr	r1, [r7, #8]
 8027586:	68f8      	ldr	r0, [r7, #12]
 8027588:	f000 f858 	bl	802763c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>
 802758c:	4603      	mov	r3, r0
    }
 802758e:	4618      	mov	r0, r3
 8027590:	3710      	adds	r7, #16
 8027592:	46bd      	mov	sp, r7
 8027594:	bd80      	pop	{r7, pc}

08027596 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8027596:	b580      	push	{r7, lr}
 8027598:	b086      	sub	sp, #24
 802759a:	af00      	add	r7, sp, #0
 802759c:	6078      	str	r0, [r7, #4]
 802759e:	6039      	str	r1, [r7, #0]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80275a0:	f107 0308 	add.w	r3, r7, #8
 80275a4:	6839      	ldr	r1, [r7, #0]
 80275a6:	4618      	mov	r0, r3
 80275a8:	f000 f86a 	bl	8027680 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>
 80275ac:	687b      	ldr	r3, [r7, #4]
 80275ae:	f107 0208 	add.w	r2, r7, #8
 80275b2:	4611      	mov	r1, r2
 80275b4:	4618      	mov	r0, r3
 80275b6:	f7ff fa10 	bl	80269da <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80275ba:	6878      	ldr	r0, [r7, #4]
 80275bc:	3718      	adds	r7, #24
 80275be:	46bd      	mov	sp, r7
 80275c0:	bd80      	pop	{r7, pc}

080275c2 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80275c2:	b580      	push	{r7, lr}
 80275c4:	b084      	sub	sp, #16
 80275c6:	af00      	add	r7, sp, #0
 80275c8:	60f8      	str	r0, [r7, #12]
 80275ca:	60b9      	str	r1, [r7, #8]
 80275cc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80275ce:	687a      	ldr	r2, [r7, #4]
 80275d0:	68b9      	ldr	r1, [r7, #8]
 80275d2:	68f8      	ldr	r0, [r7, #12]
 80275d4:	f000 f862 	bl	802769c <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 80275d8:	4603      	mov	r3, r0
 80275da:	4618      	mov	r0, r3
 80275dc:	3710      	adds	r7, #16
 80275de:	46bd      	mov	sp, r7
 80275e0:	bd80      	pop	{r7, pc}

080275e2 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80275e2:	b580      	push	{r7, lr}
 80275e4:	b084      	sub	sp, #16
 80275e6:	af00      	add	r7, sp, #0
 80275e8:	60f8      	str	r0, [r7, #12]
 80275ea:	60b9      	str	r1, [r7, #8]
 80275ec:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80275ee:	687a      	ldr	r2, [r7, #4]
 80275f0:	68b9      	ldr	r1, [r7, #8]
 80275f2:	68f8      	ldr	r0, [r7, #12]
 80275f4:	f000 f862 	bl	80276bc <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 80275f8:	4603      	mov	r3, r0
 80275fa:	4618      	mov	r0, r3
 80275fc:	3710      	adds	r7, #16
 80275fe:	46bd      	mov	sp, r7
 8027600:	bd80      	pop	{r7, pc}

08027602 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8027602:	b580      	push	{r7, lr}
 8027604:	b086      	sub	sp, #24
 8027606:	af00      	add	r7, sp, #0
 8027608:	60f8      	str	r0, [r7, #12]
 802760a:	60b9      	str	r1, [r7, #8]
 802760c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802760e:	68ba      	ldr	r2, [r7, #8]
 8027610:	68fb      	ldr	r3, [r7, #12]
 8027612:	1ad3      	subs	r3, r2, r3
 8027614:	109b      	asrs	r3, r3, #2
 8027616:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027618:	697b      	ldr	r3, [r7, #20]
 802761a:	2b00      	cmp	r3, #0
 802761c:	d006      	beq.n	802762c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802761e:	697b      	ldr	r3, [r7, #20]
 8027620:	009b      	lsls	r3, r3, #2
 8027622:	461a      	mov	r2, r3
 8027624:	68f9      	ldr	r1, [r7, #12]
 8027626:	6878      	ldr	r0, [r7, #4]
 8027628:	f014 fc32 	bl	803be90 <memmove>
	  return __result + _Num;
 802762c:	697b      	ldr	r3, [r7, #20]
 802762e:	009b      	lsls	r3, r3, #2
 8027630:	687a      	ldr	r2, [r7, #4]
 8027632:	4413      	add	r3, r2
	}
 8027634:	4618      	mov	r0, r3
 8027636:	3718      	adds	r7, #24
 8027638:	46bd      	mov	sp, r7
 802763a:	bd80      	pop	{r7, pc}

0802763c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802763c:	b580      	push	{r7, lr}
 802763e:	b086      	sub	sp, #24
 8027640:	af00      	add	r7, sp, #0
 8027642:	60f8      	str	r0, [r7, #12]
 8027644:	60b9      	str	r1, [r7, #8]
 8027646:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8027648:	68ba      	ldr	r2, [r7, #8]
 802764a:	68fb      	ldr	r3, [r7, #12]
 802764c:	1ad3      	subs	r3, r2, r3
 802764e:	109b      	asrs	r3, r3, #2
 8027650:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027652:	697b      	ldr	r3, [r7, #20]
 8027654:	2b00      	cmp	r3, #0
 8027656:	d00a      	beq.n	802766e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8027658:	697b      	ldr	r3, [r7, #20]
 802765a:	009b      	lsls	r3, r3, #2
 802765c:	425b      	negs	r3, r3
 802765e:	687a      	ldr	r2, [r7, #4]
 8027660:	18d0      	adds	r0, r2, r3
 8027662:	697b      	ldr	r3, [r7, #20]
 8027664:	009b      	lsls	r3, r3, #2
 8027666:	461a      	mov	r2, r3
 8027668:	68f9      	ldr	r1, [r7, #12]
 802766a:	f014 fc11 	bl	803be90 <memmove>
	  return __result - _Num;
 802766e:	697b      	ldr	r3, [r7, #20]
 8027670:	009b      	lsls	r3, r3, #2
 8027672:	425b      	negs	r3, r3
 8027674:	687a      	ldr	r2, [r7, #4]
 8027676:	4413      	add	r3, r2
	}
 8027678:	4618      	mov	r0, r3
 802767a:	3718      	adds	r7, #24
 802767c:	46bd      	mov	sp, r7
 802767e:	bd80      	pop	{r7, pc}

08027680 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>:
      base() const
 8027680:	b580      	push	{r7, lr}
 8027682:	b082      	sub	sp, #8
 8027684:	af00      	add	r7, sp, #0
 8027686:	6078      	str	r0, [r7, #4]
 8027688:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 802768a:	683b      	ldr	r3, [r7, #0]
 802768c:	4619      	mov	r1, r3
 802768e:	6878      	ldr	r0, [r7, #4]
 8027690:	f7fc fea9 	bl	80243e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027694:	6878      	ldr	r0, [r7, #4]
 8027696:	3708      	adds	r7, #8
 8027698:	46bd      	mov	sp, r7
 802769a:	bd80      	pop	{r7, pc}

0802769c <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802769c:	b580      	push	{r7, lr}
 802769e:	b084      	sub	sp, #16
 80276a0:	af00      	add	r7, sp, #0
 80276a2:	60f8      	str	r0, [r7, #12]
 80276a4:	60b9      	str	r1, [r7, #8]
 80276a6:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80276a8:	687a      	ldr	r2, [r7, #4]
 80276aa:	68b9      	ldr	r1, [r7, #8]
 80276ac:	68f8      	ldr	r0, [r7, #12]
 80276ae:	f000 f815 	bl	80276dc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 80276b2:	4603      	mov	r3, r0
    }
 80276b4:	4618      	mov	r0, r3
 80276b6:	3710      	adds	r7, #16
 80276b8:	46bd      	mov	sp, r7
 80276ba:	bd80      	pop	{r7, pc}

080276bc <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80276bc:	b580      	push	{r7, lr}
 80276be:	b084      	sub	sp, #16
 80276c0:	af00      	add	r7, sp, #0
 80276c2:	60f8      	str	r0, [r7, #12]
 80276c4:	60b9      	str	r1, [r7, #8]
 80276c6:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80276c8:	687a      	ldr	r2, [r7, #4]
 80276ca:	68b9      	ldr	r1, [r7, #8]
 80276cc:	68f8      	ldr	r0, [r7, #12]
 80276ce:	f000 f82f 	bl	8027730 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 80276d2:	4603      	mov	r3, r0
    }
 80276d4:	4618      	mov	r0, r3
 80276d6:	3710      	adds	r7, #16
 80276d8:	46bd      	mov	sp, r7
 80276da:	bd80      	pop	{r7, pc}

080276dc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80276dc:	b580      	push	{r7, lr}
 80276de:	b086      	sub	sp, #24
 80276e0:	af00      	add	r7, sp, #0
 80276e2:	60f8      	str	r0, [r7, #12]
 80276e4:	60b9      	str	r1, [r7, #8]
 80276e6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80276e8:	68ba      	ldr	r2, [r7, #8]
 80276ea:	68fb      	ldr	r3, [r7, #12]
 80276ec:	1ad3      	subs	r3, r2, r3
 80276ee:	109b      	asrs	r3, r3, #2
 80276f0:	4a0e      	ldr	r2, [pc, #56]	; (802772c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 80276f2:	fb02 f303 	mul.w	r3, r2, r3
 80276f6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80276f8:	697b      	ldr	r3, [r7, #20]
 80276fa:	2b00      	cmp	r3, #0
 80276fc:	d009      	beq.n	8027712 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80276fe:	697a      	ldr	r2, [r7, #20]
 8027700:	4613      	mov	r3, r2
 8027702:	009b      	lsls	r3, r3, #2
 8027704:	4413      	add	r3, r2
 8027706:	009b      	lsls	r3, r3, #2
 8027708:	461a      	mov	r2, r3
 802770a:	68f9      	ldr	r1, [r7, #12]
 802770c:	6878      	ldr	r0, [r7, #4]
 802770e:	f014 fbbf 	bl	803be90 <memmove>
	  return __result + _Num;
 8027712:	697a      	ldr	r2, [r7, #20]
 8027714:	4613      	mov	r3, r2
 8027716:	009b      	lsls	r3, r3, #2
 8027718:	4413      	add	r3, r2
 802771a:	009b      	lsls	r3, r3, #2
 802771c:	461a      	mov	r2, r3
 802771e:	687b      	ldr	r3, [r7, #4]
 8027720:	4413      	add	r3, r2
	}
 8027722:	4618      	mov	r0, r3
 8027724:	3718      	adds	r7, #24
 8027726:	46bd      	mov	sp, r7
 8027728:	bd80      	pop	{r7, pc}
 802772a:	bf00      	nop
 802772c:	cccccccd 	.word	0xcccccccd

08027730 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8027730:	b580      	push	{r7, lr}
 8027732:	b086      	sub	sp, #24
 8027734:	af00      	add	r7, sp, #0
 8027736:	60f8      	str	r0, [r7, #12]
 8027738:	60b9      	str	r1, [r7, #8]
 802773a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802773c:	68ba      	ldr	r2, [r7, #8]
 802773e:	68fb      	ldr	r3, [r7, #12]
 8027740:	1ad3      	subs	r3, r2, r3
 8027742:	109b      	asrs	r3, r3, #2
 8027744:	4a11      	ldr	r2, [pc, #68]	; (802778c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x5c>)
 8027746:	fb02 f303 	mul.w	r3, r2, r3
 802774a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802774c:	697b      	ldr	r3, [r7, #20]
 802774e:	2b00      	cmp	r3, #0
 8027750:	d010      	beq.n	8027774 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8027752:	697a      	ldr	r2, [r7, #20]
 8027754:	4613      	mov	r3, r2
 8027756:	009b      	lsls	r3, r3, #2
 8027758:	4413      	add	r3, r2
 802775a:	009b      	lsls	r3, r3, #2
 802775c:	425b      	negs	r3, r3
 802775e:	687a      	ldr	r2, [r7, #4]
 8027760:	18d0      	adds	r0, r2, r3
 8027762:	697a      	ldr	r2, [r7, #20]
 8027764:	4613      	mov	r3, r2
 8027766:	009b      	lsls	r3, r3, #2
 8027768:	4413      	add	r3, r2
 802776a:	009b      	lsls	r3, r3, #2
 802776c:	461a      	mov	r2, r3
 802776e:	68f9      	ldr	r1, [r7, #12]
 8027770:	f014 fb8e 	bl	803be90 <memmove>
	  return __result - _Num;
 8027774:	697a      	ldr	r2, [r7, #20]
 8027776:	4613      	mov	r3, r2
 8027778:	009b      	lsls	r3, r3, #2
 802777a:	4413      	add	r3, r2
 802777c:	009b      	lsls	r3, r3, #2
 802777e:	425b      	negs	r3, r3
 8027780:	687a      	ldr	r2, [r7, #4]
 8027782:	4413      	add	r3, r2
	}
 8027784:	4618      	mov	r0, r3
 8027786:	3718      	adds	r7, #24
 8027788:	46bd      	mov	sp, r7
 802778a:	bd80      	pop	{r7, pc}
 802778c:	cccccccd 	.word	0xcccccccd

08027790 <_Z41__static_initialization_and_destruction_0ii>:
 8027790:	b580      	push	{r7, lr}
 8027792:	b082      	sub	sp, #8
 8027794:	af00      	add	r7, sp, #0
 8027796:	6078      	str	r0, [r7, #4]
 8027798:	6039      	str	r1, [r7, #0]
 802779a:	687b      	ldr	r3, [r7, #4]
 802779c:	2b01      	cmp	r3, #1
 802779e:	d107      	bne.n	80277b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80277a0:	683b      	ldr	r3, [r7, #0]
 80277a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80277a6:	4293      	cmp	r3, r2
 80277a8:	d102      	bne.n	80277b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 80277aa:	4809      	ldr	r0, [pc, #36]	; (80277d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80277ac:	f7fb fbf8 	bl	8022fa0 <_ZN18MotherboardContextC1Ev>
 80277b0:	687b      	ldr	r3, [r7, #4]
 80277b2:	2b00      	cmp	r3, #0
 80277b4:	d107      	bne.n	80277c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80277b6:	683b      	ldr	r3, [r7, #0]
 80277b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80277bc:	4293      	cmp	r3, r2
 80277be:	d102      	bne.n	80277c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80277c0:	4803      	ldr	r0, [pc, #12]	; (80277d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80277c2:	f7fb fc37 	bl	8023034 <_ZN18MotherboardContextD1Ev>
}
 80277c6:	bf00      	nop
 80277c8:	3708      	adds	r7, #8
 80277ca:	46bd      	mov	sp, r7
 80277cc:	bd80      	pop	{r7, pc}
 80277ce:	bf00      	nop
 80277d0:	240001d0 	.word	0x240001d0

080277d4 <_GLOBAL__sub_I_MotherboardInit>:
 80277d4:	b580      	push	{r7, lr}
 80277d6:	af00      	add	r7, sp, #0
 80277d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80277dc:	2001      	movs	r0, #1
 80277de:	f7ff ffd7 	bl	8027790 <_Z41__static_initialization_and_destruction_0ii>
 80277e2:	bd80      	pop	{r7, pc}

080277e4 <_GLOBAL__sub_D_MotherboardInit>:
 80277e4:	b580      	push	{r7, lr}
 80277e6:	af00      	add	r7, sp, #0
 80277e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80277ec:	2000      	movs	r0, #0
 80277ee:	f7ff ffcf 	bl	8027790 <_Z41__static_initialization_and_destruction_0ii>
 80277f2:	bd80      	pop	{r7, pc}

080277f4 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 80277f4:	b580      	push	{r7, lr}
 80277f6:	b086      	sub	sp, #24
 80277f8:	af00      	add	r7, sp, #0
 80277fa:	60b9      	str	r1, [r7, #8]
 80277fc:	607b      	str	r3, [r7, #4]
 80277fe:	4603      	mov	r3, r0
 8027800:	73fb      	strb	r3, [r7, #15]
 8027802:	4613      	mov	r3, r2
 8027804:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 8027806:	2300      	movs	r3, #0
 8027808:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 802780a:	687b      	ldr	r3, [r7, #4]
 802780c:	2b00      	cmp	r3, #0
 802780e:	d008      	beq.n	8027822 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 8027810:	89ba      	ldrh	r2, [r7, #12]
 8027812:	687b      	ldr	r3, [r7, #4]
 8027814:	7bf8      	ldrb	r0, [r7, #15]
 8027816:	68b9      	ldr	r1, [r7, #8]
 8027818:	f001 f925 	bl	8028a66 <bhy2_hif_get_regs>
 802781c:	4603      	mov	r3, r0
 802781e:	75fb      	strb	r3, [r7, #23]
 8027820:	e001      	b.n	8027826 <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027822:	23ff      	movs	r3, #255	; 0xff
 8027824:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027826:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802782a:	4618      	mov	r0, r3
 802782c:	3718      	adds	r7, #24
 802782e:	46bd      	mov	sp, r7
 8027830:	bd80      	pop	{r7, pc}

08027832 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 8027832:	b590      	push	{r4, r7, lr}
 8027834:	b08f      	sub	sp, #60	; 0x3c
 8027836:	af02      	add	r7, sp, #8
 8027838:	60f8      	str	r0, [r7, #12]
 802783a:	60b9      	str	r1, [r7, #8]
 802783c:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 802783e:	2300      	movs	r3, #0
 8027840:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 8027842:	687b      	ldr	r3, [r7, #4]
 8027844:	2b00      	cmp	r3, #0
 8027846:	d002      	beq.n	802784e <bhy2_get_and_process_fifo+0x1c>
 8027848:	68fb      	ldr	r3, [r7, #12]
 802784a:	2b00      	cmp	r3, #0
 802784c:	d102      	bne.n	8027854 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 802784e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8027852:	e11b      	b.n	8027a8c <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 8027854:	68bb      	ldr	r3, [r7, #8]
 8027856:	2b00      	cmp	r3, #0
 8027858:	d102      	bne.n	8027860 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 802785a:	f06f 0305 	mvn.w	r3, #5
 802785e:	e115      	b.n	8027a8c <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 8027860:	68ba      	ldr	r2, [r7, #8]
 8027862:	2100      	movs	r1, #0
 8027864:	68f8      	ldr	r0, [r7, #12]
 8027866:	f014 fb2d 	bl	803bec4 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 802786a:	f107 0314 	add.w	r3, r7, #20
 802786e:	2214      	movs	r2, #20
 8027870:	2100      	movs	r1, #0
 8027872:	4618      	mov	r0, r3
 8027874:	f014 fb26 	bl	803bec4 <memset>

    fifos.buffer = work_buffer;
 8027878:	68fb      	ldr	r3, [r7, #12]
 802787a:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 802787c:	68bb      	ldr	r3, [r7, #8]
 802787e:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 8027880:	687a      	ldr	r2, [r7, #4]
 8027882:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8027886:	4611      	mov	r1, r2
 8027888:	4618      	mov	r0, r3
 802788a:	f001 fa5f 	bl	8028d4c <bhy2_hif_get_interrupt_status>
 802788e:	4603      	mov	r3, r0
 8027890:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 8027894:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027898:	2b00      	cmp	r3, #0
 802789a:	d002      	beq.n	80278a2 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 802789c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80278a0:	e0f4      	b.n	8027a8c <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 80278a2:	2300      	movs	r3, #0
 80278a4:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80278a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80278aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80278ae:	e042      	b.n	8027936 <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 80278b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80278b4:	f003 0306 	and.w	r3, r3, #6
 80278b8:	2b02      	cmp	r3, #2
 80278ba:	d00e      	beq.n	80278da <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 80278bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80278c0:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 80278c4:	2b04      	cmp	r3, #4
 80278c6:	d008      	beq.n	80278da <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 80278c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80278cc:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 80278d0:	2b06      	cmp	r3, #6
 80278d2:	d002      	beq.n	80278da <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 80278d4:	69fb      	ldr	r3, [r7, #28]
 80278d6:	2b00      	cmp	r3, #0
 80278d8:	d020      	beq.n	802791c <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 80278da:	2300      	movs	r3, #0
 80278dc:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 80278de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80278e0:	69bb      	ldr	r3, [r7, #24]
 80278e2:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 80278e4:	6a3a      	ldr	r2, [r7, #32]
 80278e6:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 80278e8:	1ad1      	subs	r1, r2, r3
 80278ea:	687b      	ldr	r3, [r7, #4]
 80278ec:	f107 0214 	add.w	r2, r7, #20
 80278f0:	f102 0408 	add.w	r4, r2, #8
 80278f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80278f8:	9300      	str	r3, [sp, #0]
 80278fa:	4623      	mov	r3, r4
 80278fc:	f001 fad7 	bl	8028eae <bhy2_hif_get_wakeup_fifo>
 8027900:	4603      	mov	r3, r0
 8027902:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 8027906:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802790a:	2b00      	cmp	r3, #0
 802790c:	d002      	beq.n	8027914 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 802790e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027912:	e0bb      	b.n	8027a8c <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8027914:	69ba      	ldr	r2, [r7, #24]
 8027916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027918:	4413      	add	r3, r2
 802791a:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 802791c:	f107 0314 	add.w	r3, r7, #20
 8027920:	687a      	ldr	r2, [r7, #4]
 8027922:	4619      	mov	r1, r3
 8027924:	2000      	movs	r0, #0
 8027926:	f000 fbad 	bl	8028084 <parse_fifo>
 802792a:	4603      	mov	r3, r0
 802792c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8027930:	2300      	movs	r3, #0
 8027932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802793a:	2b00      	cmp	r3, #0
 802793c:	d102      	bne.n	8027944 <bhy2_get_and_process_fifo+0x112>
 802793e:	69fb      	ldr	r3, [r7, #28]
 8027940:	2b00      	cmp	r3, #0
 8027942:	d003      	beq.n	802794c <bhy2_get_and_process_fifo+0x11a>
 8027944:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027948:	2b00      	cmp	r3, #0
 802794a:	d0b1      	beq.n	80278b0 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 802794c:	2300      	movs	r3, #0
 802794e:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8027950:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8027954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027958:	e042      	b.n	80279e0 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 802795a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802795e:	f003 0318 	and.w	r3, r3, #24
 8027962:	2b08      	cmp	r3, #8
 8027964:	d00e      	beq.n	8027984 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8027966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802796a:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 802796e:	2b10      	cmp	r3, #16
 8027970:	d008      	beq.n	8027984 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8027972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027976:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 802797a:	2b18      	cmp	r3, #24
 802797c:	d002      	beq.n	8027984 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802797e:	69fb      	ldr	r3, [r7, #28]
 8027980:	2b00      	cmp	r3, #0
 8027982:	d020      	beq.n	80279c6 <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8027984:	2300      	movs	r3, #0
 8027986:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8027988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802798a:	69bb      	ldr	r3, [r7, #24]
 802798c:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 802798e:	6a3a      	ldr	r2, [r7, #32]
 8027990:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8027992:	1ad1      	subs	r1, r2, r3
 8027994:	687b      	ldr	r3, [r7, #4]
 8027996:	f107 0214 	add.w	r2, r7, #20
 802799a:	f102 0408 	add.w	r4, r2, #8
 802799e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80279a2:	9300      	str	r3, [sp, #0]
 80279a4:	4623      	mov	r3, r4
 80279a6:	f001 fa98 	bl	8028eda <bhy2_hif_get_nonwakeup_fifo>
 80279aa:	4603      	mov	r3, r0
 80279ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 80279b0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80279b4:	2b00      	cmp	r3, #0
 80279b6:	d002      	beq.n	80279be <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 80279b8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80279bc:	e066      	b.n	8027a8c <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 80279be:	69ba      	ldr	r2, [r7, #24]
 80279c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80279c2:	4413      	add	r3, r2
 80279c4:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 80279c6:	f107 0314 	add.w	r3, r7, #20
 80279ca:	687a      	ldr	r2, [r7, #4]
 80279cc:	4619      	mov	r1, r3
 80279ce:	2001      	movs	r0, #1
 80279d0:	f000 fb58 	bl	8028084 <parse_fifo>
 80279d4:	4603      	mov	r3, r0
 80279d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 80279da:	2300      	movs	r3, #0
 80279dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80279e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80279e4:	2b00      	cmp	r3, #0
 80279e6:	d102      	bne.n	80279ee <bhy2_get_and_process_fifo+0x1bc>
 80279e8:	69fb      	ldr	r3, [r7, #28]
 80279ea:	2b00      	cmp	r3, #0
 80279ec:	d003      	beq.n	80279f6 <bhy2_get_and_process_fifo+0x1c4>
 80279ee:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80279f2:	2b00      	cmp	r3, #0
 80279f4:	d0b1      	beq.n	802795a <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 80279f6:	2300      	movs	r3, #0
 80279f8:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80279fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80279fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027a02:	e036      	b.n	8027a72 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8027a04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027a0c:	2b00      	cmp	r3, #0
 8027a0e:	d102      	bne.n	8027a16 <bhy2_get_and_process_fifo+0x1e4>
 8027a10:	69fb      	ldr	r3, [r7, #28]
 8027a12:	2b00      	cmp	r3, #0
 8027a14:	d020      	beq.n	8027a58 <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8027a16:	2300      	movs	r3, #0
 8027a18:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8027a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027a1c:	69bb      	ldr	r3, [r7, #24]
 8027a1e:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8027a20:	6a3a      	ldr	r2, [r7, #32]
 8027a22:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8027a24:	1ad1      	subs	r1, r2, r3
 8027a26:	687b      	ldr	r3, [r7, #4]
 8027a28:	f107 0214 	add.w	r2, r7, #20
 8027a2c:	f102 0408 	add.w	r4, r2, #8
 8027a30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8027a34:	9300      	str	r3, [sp, #0]
 8027a36:	4623      	mov	r3, r4
 8027a38:	f001 fab0 	bl	8028f9c <bhy2_hif_get_status_fifo_async>
 8027a3c:	4603      	mov	r3, r0
 8027a3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8027a42:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027a46:	2b00      	cmp	r3, #0
 8027a48:	d002      	beq.n	8027a50 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8027a4a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027a4e:	e01d      	b.n	8027a8c <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8027a50:	69ba      	ldr	r2, [r7, #24]
 8027a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027a54:	4413      	add	r3, r2
 8027a56:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8027a58:	f107 0314 	add.w	r3, r7, #20
 8027a5c:	687a      	ldr	r2, [r7, #4]
 8027a5e:	4619      	mov	r1, r3
 8027a60:	2002      	movs	r0, #2
 8027a62:	f000 fb0f 	bl	8028084 <parse_fifo>
 8027a66:	4603      	mov	r3, r0
 8027a68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8027a6c:	2300      	movs	r3, #0
 8027a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027a76:	2b00      	cmp	r3, #0
 8027a78:	d102      	bne.n	8027a80 <bhy2_get_and_process_fifo+0x24e>
 8027a7a:	69fb      	ldr	r3, [r7, #28]
 8027a7c:	2b00      	cmp	r3, #0
 8027a7e:	d003      	beq.n	8027a88 <bhy2_get_and_process_fifo+0x256>
 8027a80:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027a84:	2b00      	cmp	r3, #0
 8027a86:	d0bd      	beq.n	8027a04 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8027a88:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8027a8c:	4618      	mov	r0, r3
 8027a8e:	3734      	adds	r7, #52	; 0x34
 8027a90:	46bd      	mov	sp, r7
 8027a92:	bd90      	pop	{r4, r7, pc}

08027a94 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8027a94:	b580      	push	{r7, lr}
 8027a96:	b086      	sub	sp, #24
 8027a98:	af00      	add	r7, sp, #0
 8027a9a:	4603      	mov	r3, r0
 8027a9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8027aa0:	6079      	str	r1, [r7, #4]
 8027aa2:	603a      	str	r2, [r7, #0]
 8027aa4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027aa6:	2300      	movs	r3, #0
 8027aa8:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8027aaa:	683b      	ldr	r3, [r7, #0]
 8027aac:	2b00      	cmp	r3, #0
 8027aae:	d00a      	beq.n	8027ac6 <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8027ab0:	683a      	ldr	r2, [r7, #0]
 8027ab2:	7bfb      	ldrb	r3, [r7, #15]
 8027ab4:	6879      	ldr	r1, [r7, #4]
 8027ab6:	ed97 0a02 	vldr	s0, [r7, #8]
 8027aba:	4618      	mov	r0, r3
 8027abc:	f001 fa84 	bl	8028fc8 <bhy2_hif_exec_sensor_conf_cmd>
 8027ac0:	4603      	mov	r3, r0
 8027ac2:	75fb      	strb	r3, [r7, #23]
 8027ac4:	e001      	b.n	8027aca <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027ac6:	23ff      	movs	r3, #255	; 0xff
 8027ac8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027ace:	4618      	mov	r0, r3
 8027ad0:	3718      	adds	r7, #24
 8027ad2:	46bd      	mov	sp, r7
 8027ad4:	bd80      	pop	{r7, pc}

08027ad6 <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8027ad6:	b580      	push	{r7, lr}
 8027ad8:	b084      	sub	sp, #16
 8027ada:	af00      	add	r7, sp, #0
 8027adc:	6078      	str	r0, [r7, #4]
 8027ade:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027ae0:	2300      	movs	r3, #0
 8027ae2:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027ae4:	683b      	ldr	r3, [r7, #0]
 8027ae6:	2b00      	cmp	r3, #0
 8027ae8:	d007      	beq.n	8027afa <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8027aea:	683b      	ldr	r3, [r7, #0]
 8027aec:	4619      	mov	r1, r3
 8027aee:	6878      	ldr	r0, [r7, #4]
 8027af0:	f001 f8e8 	bl	8028cc4 <bhy2_hif_get_product_id>
 8027af4:	4603      	mov	r3, r0
 8027af6:	73fb      	strb	r3, [r7, #15]
 8027af8:	e001      	b.n	8027afe <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027afa:	23ff      	movs	r3, #255	; 0xff
 8027afc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027b02:	4618      	mov	r0, r3
 8027b04:	3710      	adds	r7, #16
 8027b06:	46bd      	mov	sp, r7
 8027b08:	bd80      	pop	{r7, pc}

08027b0a <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8027b0a:	b580      	push	{r7, lr}
 8027b0c:	b084      	sub	sp, #16
 8027b0e:	af00      	add	r7, sp, #0
 8027b10:	6078      	str	r0, [r7, #4]
 8027b12:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027b14:	2300      	movs	r3, #0
 8027b16:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027b18:	683b      	ldr	r3, [r7, #0]
 8027b1a:	2b00      	cmp	r3, #0
 8027b1c:	d007      	beq.n	8027b2e <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8027b1e:	683b      	ldr	r3, [r7, #0]
 8027b20:	4619      	mov	r1, r3
 8027b22:	6878      	ldr	r0, [r7, #4]
 8027b24:	f001 f8de 	bl	8028ce4 <bhy2_hif_get_kernel_version>
 8027b28:	4603      	mov	r3, r0
 8027b2a:	73fb      	strb	r3, [r7, #15]
 8027b2c:	e001      	b.n	8027b32 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027b2e:	23ff      	movs	r3, #255	; 0xff
 8027b30:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027b36:	4618      	mov	r0, r3
 8027b38:	3710      	adds	r7, #16
 8027b3a:	46bd      	mov	sp, r7
 8027b3c:	bd80      	pop	{r7, pc}

08027b3e <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8027b3e:	b580      	push	{r7, lr}
 8027b40:	b084      	sub	sp, #16
 8027b42:	af00      	add	r7, sp, #0
 8027b44:	6078      	str	r0, [r7, #4]
 8027b46:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027b48:	2300      	movs	r3, #0
 8027b4a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027b4c:	683b      	ldr	r3, [r7, #0]
 8027b4e:	2b00      	cmp	r3, #0
 8027b50:	d007      	beq.n	8027b62 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8027b52:	683b      	ldr	r3, [r7, #0]
 8027b54:	4619      	mov	r1, r3
 8027b56:	6878      	ldr	r0, [r7, #4]
 8027b58:	f001 f8e8 	bl	8028d2c <bhy2_hif_get_boot_status>
 8027b5c:	4603      	mov	r3, r0
 8027b5e:	73fb      	strb	r3, [r7, #15]
 8027b60:	e001      	b.n	8027b66 <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027b62:	23ff      	movs	r3, #255	; 0xff
 8027b64:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027b6a:	4618      	mov	r0, r3
 8027b6c:	3710      	adds	r7, #16
 8027b6e:	46bd      	mov	sp, r7
 8027b70:	bd80      	pop	{r7, pc}

08027b72 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8027b72:	b580      	push	{r7, lr}
 8027b74:	b086      	sub	sp, #24
 8027b76:	af02      	add	r7, sp, #8
 8027b78:	6078      	str	r0, [r7, #4]
 8027b7a:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8027b7c:	2300      	movs	r3, #0
 8027b7e:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8027b80:	2300      	movs	r3, #0
 8027b82:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027b84:	683b      	ldr	r3, [r7, #0]
 8027b86:	2b00      	cmp	r3, #0
 8027b88:	d00d      	beq.n	8027ba6 <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8027b8a:	683b      	ldr	r3, [r7, #0]
 8027b8c:	f107 0208 	add.w	r2, r7, #8
 8027b90:	9300      	str	r3, [sp, #0]
 8027b92:	4613      	mov	r3, r2
 8027b94:	2220      	movs	r2, #32
 8027b96:	6879      	ldr	r1, [r7, #4]
 8027b98:	f240 101f 	movw	r0, #287	; 0x11f
 8027b9c:	f001 f80a 	bl	8028bb4 <bhy2_hif_get_parameter>
 8027ba0:	4603      	mov	r3, r0
 8027ba2:	73fb      	strb	r3, [r7, #15]
 8027ba4:	e001      	b.n	8027baa <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027ba6:	23ff      	movs	r3, #255	; 0xff
 8027ba8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027bae:	4618      	mov	r0, r3
 8027bb0:	3710      	adds	r7, #16
 8027bb2:	46bd      	mov	sp, r7
 8027bb4:	bd80      	pop	{r7, pc}

08027bb6 <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8027bb6:	b580      	push	{r7, lr}
 8027bb8:	b086      	sub	sp, #24
 8027bba:	af00      	add	r7, sp, #0
 8027bbc:	60f8      	str	r0, [r7, #12]
 8027bbe:	60b9      	str	r1, [r7, #8]
 8027bc0:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027bc2:	2300      	movs	r3, #0
 8027bc4:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8027bc6:	687b      	ldr	r3, [r7, #4]
 8027bc8:	2b00      	cmp	r3, #0
 8027bca:	d002      	beq.n	8027bd2 <bhy2_upload_firmware_to_ram+0x1c>
 8027bcc:	68fb      	ldr	r3, [r7, #12]
 8027bce:	2b00      	cmp	r3, #0
 8027bd0:	d102      	bne.n	8027bd8 <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8027bd2:	23ff      	movs	r3, #255	; 0xff
 8027bd4:	75fb      	strb	r3, [r7, #23]
 8027bd6:	e007      	b.n	8027be8 <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8027bd8:	687b      	ldr	r3, [r7, #4]
 8027bda:	461a      	mov	r2, r3
 8027bdc:	68b9      	ldr	r1, [r7, #8]
 8027bde:	68f8      	ldr	r0, [r7, #12]
 8027be0:	f001 f90d 	bl	8028dfe <bhy2_hif_upload_firmware_to_ram>
 8027be4:	4603      	mov	r3, r0
 8027be6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027bec:	4618      	mov	r0, r3
 8027bee:	3718      	adds	r7, #24
 8027bf0:	46bd      	mov	sp, r7
 8027bf2:	bd80      	pop	{r7, pc}

08027bf4 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8027bf4:	b580      	push	{r7, lr}
 8027bf6:	b084      	sub	sp, #16
 8027bf8:	af00      	add	r7, sp, #0
 8027bfa:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027bfc:	2300      	movs	r3, #0
 8027bfe:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027c00:	687b      	ldr	r3, [r7, #4]
 8027c02:	2b00      	cmp	r3, #0
 8027c04:	d102      	bne.n	8027c0c <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8027c06:	23ff      	movs	r3, #255	; 0xff
 8027c08:	73fb      	strb	r3, [r7, #15]
 8027c0a:	e005      	b.n	8027c18 <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8027c0c:	687b      	ldr	r3, [r7, #4]
 8027c0e:	4618      	mov	r0, r3
 8027c10:	f001 f932 	bl	8028e78 <bhy2_hif_boot_program_ram>
 8027c14:	4603      	mov	r3, r0
 8027c16:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027c1c:	4618      	mov	r0, r3
 8027c1e:	3710      	adds	r7, #16
 8027c20:	46bd      	mov	sp, r7
 8027c22:	bd80      	pop	{r7, pc}

08027c24 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8027c24:	b580      	push	{r7, lr}
 8027c26:	b084      	sub	sp, #16
 8027c28:	af00      	add	r7, sp, #0
 8027c2a:	4603      	mov	r3, r0
 8027c2c:	6039      	str	r1, [r7, #0]
 8027c2e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8027c30:	2300      	movs	r3, #0
 8027c32:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027c34:	683b      	ldr	r3, [r7, #0]
 8027c36:	2b00      	cmp	r3, #0
 8027c38:	d102      	bne.n	8027c40 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8027c3a:	23ff      	movs	r3, #255	; 0xff
 8027c3c:	73fb      	strb	r3, [r7, #15]
 8027c3e:	e007      	b.n	8027c50 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8027c40:	683b      	ldr	r3, [r7, #0]
 8027c42:	1df9      	adds	r1, r7, #7
 8027c44:	2201      	movs	r2, #1
 8027c46:	2007      	movs	r0, #7
 8027c48:	f000 ff45 	bl	8028ad6 <bhy2_hif_set_regs>
 8027c4c:	4603      	mov	r3, r0
 8027c4e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027c54:	4618      	mov	r0, r3
 8027c56:	3710      	adds	r7, #16
 8027c58:	46bd      	mov	sp, r7
 8027c5a:	bd80      	pop	{r7, pc}

08027c5c <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8027c5c:	b580      	push	{r7, lr}
 8027c5e:	b084      	sub	sp, #16
 8027c60:	af00      	add	r7, sp, #0
 8027c62:	6078      	str	r0, [r7, #4]
 8027c64:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027c66:	2300      	movs	r3, #0
 8027c68:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027c6a:	683b      	ldr	r3, [r7, #0]
 8027c6c:	2b00      	cmp	r3, #0
 8027c6e:	d102      	bne.n	8027c76 <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8027c70:	23ff      	movs	r3, #255	; 0xff
 8027c72:	73fb      	strb	r3, [r7, #15]
 8027c74:	e007      	b.n	8027c86 <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8027c76:	683b      	ldr	r3, [r7, #0]
 8027c78:	2201      	movs	r2, #1
 8027c7a:	6879      	ldr	r1, [r7, #4]
 8027c7c:	2007      	movs	r0, #7
 8027c7e:	f000 fef2 	bl	8028a66 <bhy2_hif_get_regs>
 8027c82:	4603      	mov	r3, r0
 8027c84:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027c8a:	4618      	mov	r0, r3
 8027c8c:	3710      	adds	r7, #16
 8027c8e:	46bd      	mov	sp, r7
 8027c90:	bd80      	pop	{r7, pc}

08027c92 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8027c92:	b580      	push	{r7, lr}
 8027c94:	b084      	sub	sp, #16
 8027c96:	af00      	add	r7, sp, #0
 8027c98:	6078      	str	r0, [r7, #4]
 8027c9a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027c9c:	2300      	movs	r3, #0
 8027c9e:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027ca0:	683b      	ldr	r3, [r7, #0]
 8027ca2:	2b00      	cmp	r3, #0
 8027ca4:	d102      	bne.n	8027cac <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8027ca6:	23ff      	movs	r3, #255	; 0xff
 8027ca8:	73fb      	strb	r3, [r7, #15]
 8027caa:	e006      	b.n	8027cba <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8027cac:	683b      	ldr	r3, [r7, #0]
 8027cae:	4619      	mov	r1, r3
 8027cb0:	6878      	ldr	r0, [r7, #4]
 8027cb2:	f001 f84b 	bl	8028d4c <bhy2_hif_get_interrupt_status>
 8027cb6:	4603      	mov	r3, r0
 8027cb8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027cbe:	4618      	mov	r0, r3
 8027cc0:	3710      	adds	r7, #16
 8027cc2:	46bd      	mov	sp, r7
 8027cc4:	bd80      	pop	{r7, pc}

08027cc6 <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8027cc6:	b580      	push	{r7, lr}
 8027cc8:	b084      	sub	sp, #16
 8027cca:	af00      	add	r7, sp, #0
 8027ccc:	4603      	mov	r3, r0
 8027cce:	6039      	str	r1, [r7, #0]
 8027cd0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8027cd2:	2300      	movs	r3, #0
 8027cd4:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027cd6:	683b      	ldr	r3, [r7, #0]
 8027cd8:	2b00      	cmp	r3, #0
 8027cda:	d102      	bne.n	8027ce2 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8027cdc:	23ff      	movs	r3, #255	; 0xff
 8027cde:	73fb      	strb	r3, [r7, #15]
 8027ce0:	e007      	b.n	8027cf2 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8027ce2:	683b      	ldr	r3, [r7, #0]
 8027ce4:	1df9      	adds	r1, r7, #7
 8027ce6:	2201      	movs	r2, #1
 8027ce8:	2006      	movs	r0, #6
 8027cea:	f000 fef4 	bl	8028ad6 <bhy2_hif_set_regs>
 8027cee:	4603      	mov	r3, r0
 8027cf0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027cf6:	4618      	mov	r0, r3
 8027cf8:	3710      	adds	r7, #16
 8027cfa:	46bd      	mov	sp, r7
 8027cfc:	bd80      	pop	{r7, pc}

08027cfe <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8027cfe:	b580      	push	{r7, lr}
 8027d00:	b084      	sub	sp, #16
 8027d02:	af00      	add	r7, sp, #0
 8027d04:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027d06:	2300      	movs	r3, #0
 8027d08:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027d0a:	687b      	ldr	r3, [r7, #4]
 8027d0c:	2b00      	cmp	r3, #0
 8027d0e:	d102      	bne.n	8027d16 <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8027d10:	23ff      	movs	r3, #255	; 0xff
 8027d12:	73fb      	strb	r3, [r7, #15]
 8027d14:	e005      	b.n	8027d22 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8027d16:	687b      	ldr	r3, [r7, #4]
 8027d18:	4618      	mov	r0, r3
 8027d1a:	f001 f827 	bl	8028d6c <bhy2_hif_reset>
 8027d1e:	4603      	mov	r3, r0
 8027d20:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027d26:	4618      	mov	r0, r3
 8027d28:	3710      	adds	r7, #16
 8027d2a:	46bd      	mov	sp, r7
 8027d2c:	bd80      	pop	{r7, pc}

08027d2e <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8027d2e:	b580      	push	{r7, lr}
 8027d30:	b08a      	sub	sp, #40	; 0x28
 8027d32:	af04      	add	r7, sp, #16
 8027d34:	60b9      	str	r1, [r7, #8]
 8027d36:	607a      	str	r2, [r7, #4]
 8027d38:	603b      	str	r3, [r7, #0]
 8027d3a:	4603      	mov	r3, r0
 8027d3c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027d3e:	2300      	movs	r3, #0
 8027d40:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8027d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027d44:	2b00      	cmp	r3, #0
 8027d46:	d014      	beq.n	8027d72 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8027d48:	f640 1238 	movw	r2, #2360	; 0x938
 8027d4c:	2100      	movs	r1, #0
 8027d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027d50:	f014 f8b8 	bl	803bec4 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8027d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027d56:	7bf8      	ldrb	r0, [r7, #15]
 8027d58:	9302      	str	r3, [sp, #8]
 8027d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d5c:	9301      	str	r3, [sp, #4]
 8027d5e:	6a3b      	ldr	r3, [r7, #32]
 8027d60:	9300      	str	r3, [sp, #0]
 8027d62:	683b      	ldr	r3, [r7, #0]
 8027d64:	687a      	ldr	r2, [r7, #4]
 8027d66:	68b9      	ldr	r1, [r7, #8]
 8027d68:	f000 fe3e 	bl	80289e8 <bhy2_hif_init>
 8027d6c:	4603      	mov	r3, r0
 8027d6e:	75fb      	strb	r3, [r7, #23]
 8027d70:	e001      	b.n	8027d76 <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027d72:	23ff      	movs	r3, #255	; 0xff
 8027d74:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027d7a:	4618      	mov	r0, r3
 8027d7c:	3718      	adds	r7, #24
 8027d7e:	46bd      	mov	sp, r7
 8027d80:	bd80      	pop	{r7, pc}

08027d82 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8027d82:	b480      	push	{r7}
 8027d84:	b087      	sub	sp, #28
 8027d86:	af00      	add	r7, sp, #0
 8027d88:	60b9      	str	r1, [r7, #8]
 8027d8a:	607a      	str	r2, [r7, #4]
 8027d8c:	603b      	str	r3, [r7, #0]
 8027d8e:	4603      	mov	r3, r0
 8027d90:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027d92:	2300      	movs	r3, #0
 8027d94:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 8027d96:	683b      	ldr	r3, [r7, #0]
 8027d98:	2b00      	cmp	r3, #0
 8027d9a:	d002      	beq.n	8027da2 <bhy2_register_fifo_parse_callback+0x20>
 8027d9c:	68bb      	ldr	r3, [r7, #8]
 8027d9e:	2b00      	cmp	r3, #0
 8027da0:	d102      	bne.n	8027da8 <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8027da2:	23ff      	movs	r3, #255	; 0xff
 8027da4:	75fb      	strb	r3, [r7, #23]
 8027da6:	e013      	b.n	8027dd0 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8027da8:	7bfa      	ldrb	r2, [r7, #15]
 8027daa:	6839      	ldr	r1, [r7, #0]
 8027dac:	4613      	mov	r3, r2
 8027dae:	00db      	lsls	r3, r3, #3
 8027db0:	4413      	add	r3, r2
 8027db2:	440b      	add	r3, r1
 8027db4:	3318      	adds	r3, #24
 8027db6:	68ba      	ldr	r2, [r7, #8]
 8027db8:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8027dbc:	7bfa      	ldrb	r2, [r7, #15]
 8027dbe:	6839      	ldr	r1, [r7, #0]
 8027dc0:	4613      	mov	r3, r2
 8027dc2:	00db      	lsls	r3, r3, #3
 8027dc4:	4413      	add	r3, r2
 8027dc6:	440b      	add	r3, r1
 8027dc8:	3318      	adds	r3, #24
 8027dca:	687a      	ldr	r2, [r7, #4]
 8027dcc:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8027dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027dd4:	4618      	mov	r0, r3
 8027dd6:	371c      	adds	r7, #28
 8027dd8:	46bd      	mov	sp, r7
 8027dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027dde:	4770      	bx	lr

08027de0 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8027de0:	b580      	push	{r7, lr}
 8027de2:	b092      	sub	sp, #72	; 0x48
 8027de4:	af00      	add	r7, sp, #0
 8027de6:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 8027de8:	687b      	ldr	r3, [r7, #4]
 8027dea:	2b00      	cmp	r3, #0
 8027dec:	d103      	bne.n	8027df6 <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8027dee:	23ff      	movs	r3, #255	; 0xff
 8027df0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8027df4:	e079      	b.n	8027eea <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 8027df6:	f107 0308 	add.w	r3, r7, #8
 8027dfa:	6879      	ldr	r1, [r7, #4]
 8027dfc:	4618      	mov	r0, r3
 8027dfe:	f7ff feb8 	bl	8027b72 <bhy2_get_virt_sensor_list>
 8027e02:	4603      	mov	r3, r0
 8027e04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 8027e08:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027e0c:	2b00      	cmp	r3, #0
 8027e0e:	d16c      	bne.n	8027eea <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8027e10:	687b      	ldr	r3, [r7, #4]
 8027e12:	2201      	movs	r2, #1
 8027e14:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8027e16:	2301      	movs	r3, #1
 8027e18:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027e1c:	e041      	b.n	8027ea2 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8027e1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e22:	08db      	lsrs	r3, r3, #3
 8027e24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8027e28:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e2c:	f003 0307 	and.w	r3, r3, #7
 8027e30:	2201      	movs	r2, #1
 8027e32:	fa02 f303 	lsl.w	r3, r2, r3
 8027e36:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 8027e3a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8027e3e:	3348      	adds	r3, #72	; 0x48
 8027e40:	443b      	add	r3, r7
 8027e42:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8027e46:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8027e4a:	4013      	ands	r3, r2
 8027e4c:	b2db      	uxtb	r3, r3
 8027e4e:	2b00      	cmp	r3, #0
 8027e50:	d022      	beq.n	8027e98 <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8027e52:	687a      	ldr	r2, [r7, #4]
 8027e54:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8027e58:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e5c:	4618      	mov	r0, r3
 8027e5e:	f001 f8e6 	bl	802902e <bhy2_hif_get_sensor_info>
 8027e62:	4603      	mov	r3, r0
 8027e64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8027e68:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027e6c:	2b00      	cmp	r3, #0
 8027e6e:	d113      	bne.n	8027e98 <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8027e70:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8027e74:	2b00      	cmp	r3, #0
 8027e76:	d103      	bne.n	8027e80 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 8027e78:	23f8      	movs	r3, #248	; 0xf8
 8027e7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8027e7e:	e018      	b.n	8027eb2 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8027e80:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8027e84:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8027e88:	6879      	ldr	r1, [r7, #4]
 8027e8a:	4613      	mov	r3, r2
 8027e8c:	00db      	lsls	r3, r3, #3
 8027e8e:	4413      	add	r3, r2
 8027e90:	440b      	add	r3, r1
 8027e92:	331c      	adds	r3, #28
 8027e94:	4602      	mov	r2, r0
 8027e96:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8027e98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e9c:	3301      	adds	r3, #1
 8027e9e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027ea2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027ea6:	2bf4      	cmp	r3, #244	; 0xf4
 8027ea8:	d803      	bhi.n	8027eb2 <bhy2_update_virtual_sensor_list+0xd2>
 8027eaa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027eae:	2b00      	cmp	r3, #0
 8027eb0:	d0b5      	beq.n	8027e1e <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8027eb2:	23ff      	movs	r3, #255	; 0xff
 8027eb4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027eb8:	e013      	b.n	8027ee2 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8027eba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027ebe:	3bf5      	subs	r3, #245	; 0xf5
 8027ec0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8027ec4:	490c      	ldr	r1, [pc, #48]	; (8027ef8 <bhy2_update_virtual_sensor_list+0x118>)
 8027ec6:	5cc8      	ldrb	r0, [r1, r3]
 8027ec8:	6879      	ldr	r1, [r7, #4]
 8027eca:	4613      	mov	r3, r2
 8027ecc:	00db      	lsls	r3, r3, #3
 8027ece:	4413      	add	r3, r2
 8027ed0:	440b      	add	r3, r1
 8027ed2:	331c      	adds	r3, #28
 8027ed4:	4602      	mov	r2, r0
 8027ed6:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8027ed8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027edc:	3b01      	subs	r3, #1
 8027ede:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027ee2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027ee6:	2bf4      	cmp	r3, #244	; 0xf4
 8027ee8:	d8e7      	bhi.n	8027eba <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 8027eea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8027eee:	4618      	mov	r0, r3
 8027ef0:	3748      	adds	r7, #72	; 0x48
 8027ef2:	46bd      	mov	sp, r7
 8027ef4:	bd80      	pop	{r7, pc}
 8027ef6:	bf00      	nop
 8027ef8:	08058554 	.word	0x08058554

08027efc <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 8027efc:	b580      	push	{r7, lr}
 8027efe:	b084      	sub	sp, #16
 8027f00:	af00      	add	r7, sp, #0
 8027f02:	6078      	str	r0, [r7, #4]
 8027f04:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027f06:	2300      	movs	r3, #0
 8027f08:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 8027f0a:	683b      	ldr	r3, [r7, #0]
 8027f0c:	2b00      	cmp	r3, #0
 8027f0e:	d002      	beq.n	8027f16 <bhy2_get_error_value+0x1a>
 8027f10:	687b      	ldr	r3, [r7, #4]
 8027f12:	2b00      	cmp	r3, #0
 8027f14:	d102      	bne.n	8027f1c <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 8027f16:	23ff      	movs	r3, #255	; 0xff
 8027f18:	73fb      	strb	r3, [r7, #15]
 8027f1a:	e007      	b.n	8027f2c <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8027f1c:	683b      	ldr	r3, [r7, #0]
 8027f1e:	2201      	movs	r2, #1
 8027f20:	6879      	ldr	r1, [r7, #4]
 8027f22:	202e      	movs	r0, #46	; 0x2e
 8027f24:	f7ff fc66 	bl	80277f4 <bhy2_get_regs>
 8027f28:	4603      	mov	r3, r0
 8027f2a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027f30:	4618      	mov	r0, r3
 8027f32:	3710      	adds	r7, #16
 8027f34:	46bd      	mov	sp, r7
 8027f36:	bd80      	pop	{r7, pc}

08027f38 <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8027f38:	b480      	push	{r7}
 8027f3a:	b087      	sub	sp, #28
 8027f3c:	af00      	add	r7, sp, #0
 8027f3e:	4603      	mov	r3, r0
 8027f40:	60b9      	str	r1, [r7, #8]
 8027f42:	607a      	str	r2, [r7, #4]
 8027f44:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 8027f46:	2300      	movs	r3, #0
 8027f48:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 8027f4a:	687b      	ldr	r3, [r7, #4]
 8027f4c:	2b00      	cmp	r3, #0
 8027f4e:	d04e      	beq.n	8027fee <get_callback_info+0xb6>
 8027f50:	68bb      	ldr	r3, [r7, #8]
 8027f52:	2b00      	cmp	r3, #0
 8027f54:	d04b      	beq.n	8027fee <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 8027f56:	7bfa      	ldrb	r2, [r7, #15]
 8027f58:	68b8      	ldr	r0, [r7, #8]
 8027f5a:	6879      	ldr	r1, [r7, #4]
 8027f5c:	4613      	mov	r3, r2
 8027f5e:	00db      	lsls	r3, r3, #3
 8027f60:	4413      	add	r3, r2
 8027f62:	440b      	add	r3, r1
 8027f64:	3318      	adds	r3, #24
 8027f66:	4602      	mov	r2, r0
 8027f68:	3304      	adds	r3, #4
 8027f6a:	6818      	ldr	r0, [r3, #0]
 8027f6c:	6859      	ldr	r1, [r3, #4]
 8027f6e:	6010      	str	r0, [r2, #0]
 8027f70:	6051      	str	r1, [r2, #4]
 8027f72:	7a1b      	ldrb	r3, [r3, #8]
 8027f74:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 8027f76:	7bfb      	ldrb	r3, [r7, #15]
 8027f78:	2bf4      	cmp	r3, #244	; 0xf4
 8027f7a:	d91b      	bls.n	8027fb4 <get_callback_info+0x7c>
 8027f7c:	68bb      	ldr	r3, [r7, #8]
 8027f7e:	781b      	ldrb	r3, [r3, #0]
 8027f80:	2b00      	cmp	r3, #0
 8027f82:	d117      	bne.n	8027fb4 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8027f84:	68bb      	ldr	r3, [r7, #8]
 8027f86:	2200      	movs	r2, #0
 8027f88:	705a      	strb	r2, [r3, #1]
 8027f8a:	2200      	movs	r2, #0
 8027f8c:	709a      	strb	r2, [r3, #2]
 8027f8e:	2200      	movs	r2, #0
 8027f90:	70da      	strb	r2, [r3, #3]
 8027f92:	2200      	movs	r2, #0
 8027f94:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8027f96:	68bb      	ldr	r3, [r7, #8]
 8027f98:	2200      	movs	r2, #0
 8027f9a:	715a      	strb	r2, [r3, #5]
 8027f9c:	2200      	movs	r2, #0
 8027f9e:	719a      	strb	r2, [r3, #6]
 8027fa0:	2200      	movs	r2, #0
 8027fa2:	71da      	strb	r2, [r3, #7]
 8027fa4:	2200      	movs	r2, #0
 8027fa6:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8027fa8:	7bfb      	ldrb	r3, [r7, #15]
 8027faa:	3bf5      	subs	r3, #245	; 0xf5
 8027fac:	4a16      	ldr	r2, [pc, #88]	; (8028008 <get_callback_info+0xd0>)
 8027fae:	5cd2      	ldrb	r2, [r2, r3]
 8027fb0:	68bb      	ldr	r3, [r7, #8]
 8027fb2:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 8027fb4:	7bfb      	ldrb	r3, [r7, #15]
 8027fb6:	2b00      	cmp	r3, #0
 8027fb8:	d11c      	bne.n	8027ff4 <get_callback_info+0xbc>
 8027fba:	68bb      	ldr	r3, [r7, #8]
 8027fbc:	781b      	ldrb	r3, [r3, #0]
 8027fbe:	2b00      	cmp	r3, #0
 8027fc0:	d118      	bne.n	8027ff4 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 8027fc2:	68bb      	ldr	r3, [r7, #8]
 8027fc4:	2200      	movs	r2, #0
 8027fc6:	705a      	strb	r2, [r3, #1]
 8027fc8:	2200      	movs	r2, #0
 8027fca:	709a      	strb	r2, [r3, #2]
 8027fcc:	2200      	movs	r2, #0
 8027fce:	70da      	strb	r2, [r3, #3]
 8027fd0:	2200      	movs	r2, #0
 8027fd2:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8027fd4:	68bb      	ldr	r3, [r7, #8]
 8027fd6:	2200      	movs	r2, #0
 8027fd8:	715a      	strb	r2, [r3, #5]
 8027fda:	2200      	movs	r2, #0
 8027fdc:	719a      	strb	r2, [r3, #6]
 8027fde:	2200      	movs	r2, #0
 8027fe0:	71da      	strb	r2, [r3, #7]
 8027fe2:	2200      	movs	r2, #0
 8027fe4:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 8027fe6:	68bb      	ldr	r3, [r7, #8]
 8027fe8:	2201      	movs	r2, #1
 8027fea:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 8027fec:	e002      	b.n	8027ff4 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027fee:	23ff      	movs	r3, #255	; 0xff
 8027ff0:	75fb      	strb	r3, [r7, #23]
 8027ff2:	e000      	b.n	8027ff6 <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8027ff4:	bf00      	nop
    }

    return rslt;
 8027ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027ffa:	4618      	mov	r0, r3
 8027ffc:	371c      	adds	r7, #28
 8027ffe:	46bd      	mov	sp, r7
 8028000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028004:	4770      	bx	lr
 8028006:	bf00      	nop
 8028008:	08058554 	.word	0x08058554

0802800c <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 802800c:	b480      	push	{r7}
 802800e:	b085      	sub	sp, #20
 8028010:	af00      	add	r7, sp, #0
 8028012:	60f8      	str	r0, [r7, #12]
 8028014:	460b      	mov	r3, r1
 8028016:	607a      	str	r2, [r7, #4]
 8028018:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 802801a:	68fb      	ldr	r3, [r7, #12]
 802801c:	681a      	ldr	r2, [r3, #0]
 802801e:	7afb      	ldrb	r3, [r7, #11]
 8028020:	441a      	add	r2, r3
 8028022:	68fb      	ldr	r3, [r7, #12]
 8028024:	685b      	ldr	r3, [r3, #4]
 8028026:	429a      	cmp	r2, r3
 8028028:	d803      	bhi.n	8028032 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 802802a:	687b      	ldr	r3, [r7, #4]
 802802c:	2200      	movs	r2, #0
 802802e:	701a      	strb	r2, [r3, #0]
 8028030:	e002      	b.n	8028038 <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 8028032:	687b      	ldr	r3, [r7, #4]
 8028034:	2201      	movs	r2, #1
 8028036:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 8028038:	2300      	movs	r3, #0
}
 802803a:	4618      	mov	r0, r3
 802803c:	3714      	adds	r7, #20
 802803e:	46bd      	mov	sp, r7
 8028040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028044:	4770      	bx	lr

08028046 <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 8028046:	b480      	push	{r7}
 8028048:	b087      	sub	sp, #28
 802804a:	af00      	add	r7, sp, #0
 802804c:	4603      	mov	r3, r0
 802804e:	60b9      	str	r1, [r7, #8]
 8028050:	607a      	str	r2, [r7, #4]
 8028052:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028054:	2300      	movs	r3, #0
 8028056:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 8028058:	7bfb      	ldrb	r3, [r7, #15]
 802805a:	2b02      	cmp	r3, #2
 802805c:	d808      	bhi.n	8028070 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 802805e:	7bfb      	ldrb	r3, [r7, #15]
 8028060:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8028064:	00db      	lsls	r3, r3, #3
 8028066:	687a      	ldr	r2, [r7, #4]
 8028068:	441a      	add	r2, r3
 802806a:	68bb      	ldr	r3, [r7, #8]
 802806c:	601a      	str	r2, [r3, #0]
 802806e:	e001      	b.n	8028074 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 8028070:	23f9      	movs	r3, #249	; 0xf9
 8028072:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028074:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028078:	4618      	mov	r0, r3
 802807a:	371c      	adds	r7, #28
 802807c:	46bd      	mov	sp, r7
 802807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028082:	4770      	bx	lr

08028084 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 8028084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028088:	b099      	sub	sp, #100	; 0x64
 802808a:	af00      	add	r7, sp, #0
 802808c:	4603      	mov	r3, r0
 802808e:	62b9      	str	r1, [r7, #40]	; 0x28
 8028090:	627a      	str	r2, [r7, #36]	; 0x24
 8028092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 8028096:	2300      	movs	r3, #0
 8028098:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 802809c:	2300      	movs	r3, #0
 802809e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 80280a2:	2300      	movs	r3, #0
 80280a4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 80280a8:	2300      	movs	r3, #0
 80280aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 80280ae:	e16a      	b.n	8028386 <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 80280b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280b2:	681b      	ldr	r3, [r3, #0]
 80280b4:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 80280b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280b8:	691a      	ldr	r2, [r3, #16]
 80280ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80280bc:	4413      	add	r3, r2
 80280be:	781b      	ldrb	r3, [r3, #0]
 80280c0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 80280c4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80280c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80280cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80280ce:	4618      	mov	r0, r3
 80280d0:	f7ff ffb9 	bl	8028046 <get_time_stamp>
 80280d4:	4603      	mov	r3, r0
 80280d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 80280da:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80280de:	2b00      	cmp	r3, #0
 80280e0:	d002      	beq.n	80280e8 <parse_fifo+0x64>
        {
            return rslt;
 80280e2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80280e6:	e191      	b.n	802840c <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 80280e8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80280ec:	2b00      	cmp	r3, #0
 80280ee:	d025      	beq.n	802813c <parse_fifo+0xb8>
 80280f0:	2b00      	cmp	r3, #0
 80280f2:	f2c0 80f6 	blt.w	80282e2 <parse_fifo+0x25e>
 80280f6:	2bff      	cmp	r3, #255	; 0xff
 80280f8:	f300 80f3 	bgt.w	80282e2 <parse_fifo+0x25e>
 80280fc:	2bf5      	cmp	r3, #245	; 0xf5
 80280fe:	f2c0 80f0 	blt.w	80282e2 <parse_fifo+0x25e>
 8028102:	3bf5      	subs	r3, #245	; 0xf5
 8028104:	2b0a      	cmp	r3, #10
 8028106:	f200 80ec 	bhi.w	80282e2 <parse_fifo+0x25e>
 802810a:	a201      	add	r2, pc, #4	; (adr r2, 8028110 <parse_fifo+0x8c>)
 802810c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028110:	08028149 	.word	0x08028149
 8028114:	080281b1 	.word	0x080281b1
 8028118:	0802822f 	.word	0x0802822f
 802811c:	080282e3 	.word	0x080282e3
 8028120:	080282e3 	.word	0x080282e3
 8028124:	080282e3 	.word	0x080282e3
 8028128:	08028149 	.word	0x08028149
 802812c:	080281b1 	.word	0x080281b1
 8028130:	0802822f 	.word	0x0802822f
 8028134:	080282e3 	.word	0x080282e3
 8028138:	0802813d 	.word	0x0802813d
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 802813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802813e:	681b      	ldr	r3, [r3, #0]
 8028140:	1c5a      	adds	r2, r3, #1
 8028142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028144:	601a      	str	r2, [r3, #0]
                break;
 8028146:	e11e      	b.n	8028386 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 8028148:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802814c:	461a      	mov	r2, r3
 802814e:	2102      	movs	r1, #2
 8028150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028152:	f7ff ff5b 	bl	802800c <get_buffer_status>
 8028156:	4603      	mov	r3, r0
 8028158:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802815c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028160:	2b00      	cmp	r3, #0
 8028162:	d002      	beq.n	802816a <parse_fifo+0xe6>
                {
                    return rslt;
 8028164:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028168:	e150      	b.n	802840c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802816a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802816e:	2b00      	cmp	r3, #0
 8028170:	d000      	beq.n	8028174 <parse_fifo+0xf0>
                {
                    break;
 8028172:	e108      	b.n	8028386 <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 8028174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028176:	e9d3 0100 	ldrd	r0, r1, [r3]
 802817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802817c:	691a      	ldr	r2, [r3, #16]
 802817e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028180:	3301      	adds	r3, #1
 8028182:	4413      	add	r3, r2
 8028184:	781b      	ldrb	r3, [r3, #0]
 8028186:	b2db      	uxtb	r3, r3
 8028188:	2200      	movs	r2, #0
 802818a:	469a      	mov	sl, r3
 802818c:	4693      	mov	fp, r2
 802818e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028190:	eb10 020a 	adds.w	r2, r0, sl
 8028194:	61ba      	str	r2, [r7, #24]
 8028196:	eb41 020b 	adc.w	r2, r1, fp
 802819a:	61fa      	str	r2, [r7, #28]
 802819c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80281a0:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 80281a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281a6:	681b      	ldr	r3, [r3, #0]
 80281a8:	1c9a      	adds	r2, r3, #2
 80281aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281ac:	601a      	str	r2, [r3, #0]
                break;
 80281ae:	e0ea      	b.n	8028386 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 80281b0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80281b4:	461a      	mov	r2, r3
 80281b6:	2103      	movs	r1, #3
 80281b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80281ba:	f7ff ff27 	bl	802800c <get_buffer_status>
 80281be:	4603      	mov	r3, r0
 80281c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80281c4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80281c8:	2b00      	cmp	r3, #0
 80281ca:	d002      	beq.n	80281d2 <parse_fifo+0x14e>
                {
                    return rslt;
 80281cc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80281d0:	e11c      	b.n	802840c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80281d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80281d6:	2b00      	cmp	r3, #0
 80281d8:	d000      	beq.n	80281dc <parse_fifo+0x158>
                {
                    break;
 80281da:	e0d4      	b.n	8028386 <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 80281dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80281de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80281e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281e4:	691a      	ldr	r2, [r3, #16]
 80281e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80281e8:	3301      	adds	r3, #1
 80281ea:	4413      	add	r3, r2
 80281ec:	781b      	ldrb	r3, [r3, #0]
 80281ee:	b21c      	sxth	r4, r3
 80281f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281f2:	691a      	ldr	r2, [r3, #16]
 80281f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80281f6:	3302      	adds	r3, #2
 80281f8:	4413      	add	r3, r2
 80281fa:	781b      	ldrb	r3, [r3, #0]
 80281fc:	021b      	lsls	r3, r3, #8
 80281fe:	b21b      	sxth	r3, r3
 8028200:	4323      	orrs	r3, r4
 8028202:	b21b      	sxth	r3, r3
 8028204:	b29b      	uxth	r3, r3
 8028206:	b29b      	uxth	r3, r3
 8028208:	2200      	movs	r2, #0
 802820a:	461d      	mov	r5, r3
 802820c:	4616      	mov	r6, r2
 802820e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028210:	1942      	adds	r2, r0, r5
 8028212:	613a      	str	r2, [r7, #16]
 8028214:	eb41 0206 	adc.w	r2, r1, r6
 8028218:	617a      	str	r2, [r7, #20]
 802821a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 802821e:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 8028222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028224:	681b      	ldr	r3, [r3, #0]
 8028226:	1cda      	adds	r2, r3, #3
 8028228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802822a:	601a      	str	r2, [r3, #0]
                break;
 802822c:	e0ab      	b.n	8028386 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 802822e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8028232:	461a      	mov	r2, r3
 8028234:	2106      	movs	r1, #6
 8028236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028238:	f7ff fee8 	bl	802800c <get_buffer_status>
 802823c:	4603      	mov	r3, r0
 802823e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8028242:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028246:	2b00      	cmp	r3, #0
 8028248:	d002      	beq.n	8028250 <parse_fifo+0x1cc>
                {
                    return rslt;
 802824a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802824e:	e0dd      	b.n	802840c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8028250:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8028254:	2b00      	cmp	r3, #0
 8028256:	d000      	beq.n	802825a <parse_fifo+0x1d6>
                {
                    break;
 8028258:	e095      	b.n	8028386 <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 802825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802825c:	691a      	ldr	r2, [r3, #16]
 802825e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028260:	3301      	adds	r3, #1
 8028262:	4413      	add	r3, r2
 8028264:	781b      	ldrb	r3, [r3, #0]
 8028266:	4619      	mov	r1, r3
 8028268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802826a:	691a      	ldr	r2, [r3, #16]
 802826c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802826e:	3302      	adds	r3, #2
 8028270:	4413      	add	r3, r2
 8028272:	781b      	ldrb	r3, [r3, #0]
 8028274:	021b      	lsls	r3, r3, #8
 8028276:	4319      	orrs	r1, r3
 8028278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802827a:	691a      	ldr	r2, [r3, #16]
 802827c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802827e:	3303      	adds	r3, #3
 8028280:	4413      	add	r3, r2
 8028282:	781b      	ldrb	r3, [r3, #0]
 8028284:	041b      	lsls	r3, r3, #16
 8028286:	4319      	orrs	r1, r3
 8028288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802828a:	691a      	ldr	r2, [r3, #16]
 802828c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802828e:	3304      	adds	r3, #4
 8028290:	4413      	add	r3, r2
 8028292:	781b      	ldrb	r3, [r3, #0]
 8028294:	061b      	lsls	r3, r3, #24
 8028296:	430b      	orrs	r3, r1
 8028298:	2200      	movs	r2, #0
 802829a:	4698      	mov	r8, r3
 802829c:	4691      	mov	r9, r2
 802829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282a0:	691a      	ldr	r2, [r3, #16]
 80282a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80282a4:	3305      	adds	r3, #5
 80282a6:	4413      	add	r3, r2
 80282a8:	781b      	ldrb	r3, [r3, #0]
 80282aa:	b2db      	uxtb	r3, r3
 80282ac:	2200      	movs	r2, #0
 80282ae:	60bb      	str	r3, [r7, #8]
 80282b0:	60fa      	str	r2, [r7, #12]
 80282b2:	f04f 0200 	mov.w	r2, #0
 80282b6:	f04f 0300 	mov.w	r3, #0
 80282ba:	68b9      	ldr	r1, [r7, #8]
 80282bc:	000b      	movs	r3, r1
 80282be:	2200      	movs	r2, #0
 80282c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80282c2:	ea48 0002 	orr.w	r0, r8, r2
 80282c6:	6038      	str	r0, [r7, #0]
 80282c8:	ea49 0303 	orr.w	r3, r9, r3
 80282cc:	607b      	str	r3, [r7, #4]
 80282ce:	e9d7 3400 	ldrd	r3, r4, [r7]
 80282d2:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 80282d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282d8:	681b      	ldr	r3, [r3, #0]
 80282da:	1d9a      	adds	r2, r3, #6
 80282dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282de:	601a      	str	r2, [r3, #0]
                break;
 80282e0:	e051      	b.n	8028386 <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 80282e2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80282e6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80282ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80282ec:	4618      	mov	r0, r3
 80282ee:	f7ff fe23 	bl	8027f38 <get_callback_info>
 80282f2:	4603      	mov	r3, r0
 80282f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 80282f8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80282fc:	2b00      	cmp	r3, #0
 80282fe:	d002      	beq.n	8028306 <parse_fifo+0x282>
                {
                    return rslt;
 8028300:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028304:	e082      	b.n	802840c <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 8028306:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 802830a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802830e:	461a      	mov	r2, r3
 8028310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028312:	f7ff fe7b 	bl	802800c <get_buffer_status>
 8028316:	4603      	mov	r3, r0
 8028318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802831c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028320:	2b00      	cmp	r3, #0
 8028322:	d002      	beq.n	802832a <parse_fifo+0x2a6>
                {
                    return rslt;
 8028324:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028328:	e070      	b.n	802840c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802832a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802832e:	2b00      	cmp	r3, #0
 8028330:	d000      	beq.n	8028334 <parse_fifo+0x2b0>
                {
                    break;
 8028332:	e028      	b.n	8028386 <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 8028334:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 8028338:	2b00      	cmp	r3, #0
 802833a:	d01c      	beq.n	8028376 <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 802833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802833e:	691a      	ldr	r2, [r3, #16]
 8028340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028342:	3301      	adds	r3, #1
 8028344:	4413      	add	r3, r2
 8028346:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 8028348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802834c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 8028350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028352:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 8028354:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8028358:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 802835c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8028360:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 8028364:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 8028368:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 802836c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8028370:	4611      	mov	r1, r2
 8028372:	4618      	mov	r0, r3
 8028374:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 8028376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028378:	681a      	ldr	r2, [r3, #0]
 802837a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802837e:	441a      	add	r2, r3
 8028380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028382:	601a      	str	r2, [r3, #0]
                break;
 8028384:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8028386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028388:	681a      	ldr	r2, [r3, #0]
 802838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802838c:	685b      	ldr	r3, [r3, #4]
 802838e:	429a      	cmp	r2, r3
 8028390:	d204      	bcs.n	802839c <parse_fifo+0x318>
 8028392:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8028396:	2b00      	cmp	r3, #0
 8028398:	f43f ae8a 	beq.w	80280b0 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 802839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802839e:	685b      	ldr	r3, [r3, #4]
 80283a0:	2b00      	cmp	r3, #0
 80283a2:	d031      	beq.n	8028408 <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 80283a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283a6:	685a      	ldr	r2, [r3, #4]
 80283a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283aa:	681b      	ldr	r3, [r3, #0]
 80283ac:	429a      	cmp	r2, r3
 80283ae:	d202      	bcs.n	80283b6 <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 80283b0:	f06f 0301 	mvn.w	r3, #1
 80283b4:	e02a      	b.n	802840c <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 80283b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283b8:	685a      	ldr	r2, [r3, #4]
 80283ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283bc:	681b      	ldr	r3, [r3, #0]
 80283be:	1ad2      	subs	r2, r2, r3
 80283c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283c2:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 80283c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283c6:	685b      	ldr	r3, [r3, #4]
 80283c8:	2b00      	cmp	r3, #0
 80283ca:	d01d      	beq.n	8028408 <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 80283cc:	2300      	movs	r3, #0
 80283ce:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80283d2:	e013      	b.n	80283fc <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 80283d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283d6:	691a      	ldr	r2, [r3, #16]
 80283d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283da:	6819      	ldr	r1, [r3, #0]
 80283dc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80283e0:	440b      	add	r3, r1
 80283e2:	441a      	add	r2, r3
 80283e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283e6:	6919      	ldr	r1, [r3, #16]
 80283e8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80283ec:	440b      	add	r3, r1
 80283ee:	7812      	ldrb	r2, [r2, #0]
 80283f0:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 80283f2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80283f6:	3301      	adds	r3, #1
 80283f8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80283fc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8028400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028402:	685b      	ldr	r3, [r3, #4]
 8028404:	429a      	cmp	r2, r3
 8028406:	d3e5      	bcc.n	80283d4 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 8028408:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 802840c:	4618      	mov	r0, r3
 802840e:	3764      	adds	r7, #100	; 0x64
 8028410:	46bd      	mov	sp, r7
 8028412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028416:	bf00      	nop

08028418 <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 8028418:	b590      	push	{r4, r7, lr}
 802841a:	b0cf      	sub	sp, #316	; 0x13c
 802841c:	af00      	add	r7, sp, #0
 802841e:	4604      	mov	r4, r0
 8028420:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8028424:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8028428:	6001      	str	r1, [r0, #0]
 802842a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 802842e:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8028432:	600a      	str	r2, [r1, #0]
 8028434:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8028438:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 802843c:	6013      	str	r3, [r2, #0]
 802843e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028442:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8028446:	4622      	mov	r2, r4
 8028448:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 802844a:	2300      	movs	r3, #0
 802844c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 8028450:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028454:	2b00      	cmp	r3, #0
 8028456:	f000 81af 	beq.w	80287b8 <bhy2_hif_exec_cmd_generic+0x3a0>
 802845a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802845e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8028462:	681b      	ldr	r3, [r3, #0]
 8028464:	2b00      	cmp	r3, #0
 8028466:	d007      	beq.n	8028478 <bhy2_hif_exec_cmd_generic+0x60>
 8028468:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802846c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8028470:	681b      	ldr	r3, [r3, #0]
 8028472:	2b00      	cmp	r3, #0
 8028474:	f000 81a0 	beq.w	80287b8 <bhy2_hif_exec_cmd_generic+0x3a0>
 8028478:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 802847c:	2b00      	cmp	r3, #0
 802847e:	d007      	beq.n	8028490 <bhy2_hif_exec_cmd_generic+0x78>
 8028480:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028484:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8028488:	681b      	ldr	r3, [r3, #0]
 802848a:	2b00      	cmp	r3, #0
 802848c:	f000 8194 	beq.w	80287b8 <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 8028490:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028494:	699b      	ldr	r3, [r3, #24]
 8028496:	2b00      	cmp	r3, #0
 8028498:	f000 8188 	beq.w	80287ac <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 802849c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80284a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80284a8:	681b      	ldr	r3, [r3, #0]
 80284aa:	4413      	add	r3, r2
 80284ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 80284b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80284b4:	2b00      	cmp	r3, #0
 80284b6:	d007      	beq.n	80284c8 <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 80284b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80284bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80284c0:	4413      	add	r3, r2
 80284c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80284c6:	e003      	b.n	80284d0 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 80284c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80284cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 80284d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80284d4:	f003 0303 	and.w	r3, r3, #3
 80284d8:	2b00      	cmp	r3, #0
 80284da:	d006      	beq.n	80284ea <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 80284dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80284e0:	089b      	lsrs	r3, r3, #2
 80284e2:	3301      	adds	r3, #1
 80284e4:	009b      	lsls	r3, r3, #2
 80284e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 80284ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284ee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80284f2:	881b      	ldrh	r3, [r3, #0]
 80284f4:	b2da      	uxtb	r2, r3
 80284f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284fa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80284fe:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 8028500:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028504:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8028508:	881b      	ldrh	r3, [r3, #0]
 802850a:	0a1b      	lsrs	r3, r3, #8
 802850c:	b29b      	uxth	r3, r3
 802850e:	b2da      	uxtb	r2, r3
 8028510:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028514:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8028518:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 802851a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802851e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8028522:	881b      	ldrh	r3, [r3, #0]
 8028524:	2b02      	cmp	r3, #2
 8028526:	d113      	bne.n	8028550 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 8028528:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802852c:	089b      	lsrs	r3, r3, #2
 802852e:	b2da      	uxtb	r2, r3
 8028530:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028534:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8028538:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 802853a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802853e:	089b      	lsrs	r3, r3, #2
 8028540:	0a1b      	lsrs	r3, r3, #8
 8028542:	b2da      	uxtb	r2, r3
 8028544:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028548:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802854c:	70da      	strb	r2, [r3, #3]
 802854e:	e010      	b.n	8028572 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 8028550:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8028554:	b2da      	uxtb	r2, r3
 8028556:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802855a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802855e:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 8028560:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8028564:	0a1b      	lsrs	r3, r3, #8
 8028566:	b2da      	uxtb	r2, r3
 8028568:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802856c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8028570:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 8028572:	2304      	movs	r3, #4
 8028574:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 8028578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802857c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 8028580:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028584:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028588:	4413      	add	r3, r2
 802858a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 802858e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8028592:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 8028596:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802859a:	699b      	ldr	r3, [r3, #24]
 802859c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80285a0:	429a      	cmp	r2, r3
 80285a2:	f240 80f9 	bls.w	8028798 <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 80285a6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80285aa:	699b      	ldr	r3, [r3, #24]
 80285ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 80285b0:	e0f2      	b.n	8028798 <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 80285b2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80285b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80285ba:	4413      	add	r3, r2
 80285bc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80285c0:	429a      	cmp	r2, r3
 80285c2:	d20b      	bcs.n	80285dc <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 80285c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80285c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 80285cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80285d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80285d4:	1ad3      	subs	r3, r2, r3
 80285d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80285da:	e020      	b.n	802861e <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 80285dc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80285e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80285e4:	4413      	add	r3, r2
 80285e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 80285ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80285ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 80285f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80285f6:	f003 0303 	and.w	r3, r3, #3
 80285fa:	2b00      	cmp	r3, #0
 80285fc:	d006      	beq.n	802860c <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 80285fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8028602:	089b      	lsrs	r3, r3, #2
 8028604:	3301      	adds	r3, #1
 8028606:	009b      	lsls	r3, r3, #2
 8028608:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 802860c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8028610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8028614:	d903      	bls.n	802861e <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 8028616:	f44f 7380 	mov.w	r3, #256	; 0x100
 802861a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 802861e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8028622:	2b00      	cmp	r3, #0
 8028624:	d07e      	beq.n	8028724 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 8028626:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802862a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802862e:	681a      	ldr	r2, [r3, #0]
 8028630:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8028634:	4413      	add	r3, r2
 8028636:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802863a:	429a      	cmp	r2, r3
 802863c:	d315      	bcc.n	802866a <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 802863e:	f107 0214 	add.w	r2, r7, #20
 8028642:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028646:	18d0      	adds	r0, r2, r3
 8028648:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 802864c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8028650:	1ad3      	subs	r3, r2, r3
 8028652:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8028656:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 802865a:	6812      	ldr	r2, [r2, #0]
 802865c:	4413      	add	r3, r2
 802865e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8028662:	4619      	mov	r1, r3
 8028664:	f013 fc06 	bl	803be74 <memcpy>
 8028668:	e05c      	b.n	8028724 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 802866a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802866e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8028672:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028676:	681b      	ldr	r3, [r3, #0]
 8028678:	429a      	cmp	r2, r3
 802867a:	d93b      	bls.n	80286f4 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 802867c:	f107 0214 	add.w	r2, r7, #20
 8028680:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028684:	18d0      	adds	r0, r2, r3
 8028686:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 802868a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802868e:	1ad3      	subs	r3, r2, r3
 8028690:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8028694:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8028698:	6812      	ldr	r2, [r2, #0]
 802869a:	18d1      	adds	r1, r2, r3
 802869c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80286a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80286a4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80286a8:	681b      	ldr	r3, [r3, #0]
 80286aa:	1ad3      	subs	r3, r2, r3
 80286ac:	461a      	mov	r2, r3
 80286ae:	f013 fbe1 	bl	803be74 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 80286b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80286b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80286ba:	441a      	add	r2, r3
 80286bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80286c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80286c4:	681b      	ldr	r3, [r3, #0]
 80286c6:	1ad3      	subs	r3, r2, r3
 80286c8:	f107 0214 	add.w	r2, r7, #20
 80286cc:	18d0      	adds	r0, r2, r3
 80286ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80286d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80286d6:	681a      	ldr	r2, [r3, #0]
 80286d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80286dc:	1ad2      	subs	r2, r2, r3
 80286de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80286e2:	441a      	add	r2, r3
 80286e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80286e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80286ec:	6819      	ldr	r1, [r3, #0]
 80286ee:	f013 fbc1 	bl	803be74 <memcpy>
 80286f2:	e017      	b.n	8028724 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 80286f4:	f107 0214 	add.w	r2, r7, #20
 80286f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80286fc:	18d0      	adds	r0, r2, r3
 80286fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028702:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8028706:	681a      	ldr	r2, [r3, #0]
 8028708:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802870c:	1ad3      	subs	r3, r2, r3
 802870e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8028712:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8028716:	6812      	ldr	r2, [r2, #0]
 8028718:	4413      	add	r3, r2
 802871a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 802871e:	4619      	mov	r1, r3
 8028720:	f013 fba8 	bl	803be74 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8028724:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8028728:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802872c:	4413      	add	r3, r2
 802872e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8028732:	429a      	cmp	r2, r3
 8028734:	d012      	beq.n	802875c <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 8028736:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802873a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802873e:	4413      	add	r3, r2
 8028740:	f107 0214 	add.w	r2, r7, #20
 8028744:	18d0      	adds	r0, r2, r3
 8028746:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802874a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802874e:	4413      	add	r3, r2
 8028750:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8028754:	461a      	mov	r2, r3
 8028756:	2100      	movs	r1, #0
 8028758:	f013 fbb4 	bl	803bec4 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 802875c:	f107 0114 	add.w	r1, r7, #20
 8028760:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028764:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8028768:	2000      	movs	r0, #0
 802876a:	f000 f9b4 	bl	8028ad6 <bhy2_hif_set_regs>
 802876e:	4603      	mov	r3, r0
 8028770:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 8028774:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8028778:	2b00      	cmp	r3, #0
 802877a:	d11b      	bne.n	80287b4 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 802877c:	2300      	movs	r3, #0
 802877e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 8028782:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028786:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802878a:	1ad3      	subs	r3, r2, r3
 802878c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 8028790:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8028794:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8028798:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802879c:	2b00      	cmp	r3, #0
 802879e:	d00f      	beq.n	80287c0 <bhy2_hif_exec_cmd_generic+0x3a8>
 80287a0:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80287a4:	2b00      	cmp	r3, #0
 80287a6:	f43f af04 	beq.w	80285b2 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 80287aa:	e009      	b.n	80287c0 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 80287ac:	23fe      	movs	r3, #254	; 0xfe
 80287ae:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 80287b2:	e005      	b.n	80287c0 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 80287b4:	bf00      	nop
        if (hif->read_write_len != 0)
 80287b6:	e003      	b.n	80287c0 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80287b8:	23ff      	movs	r3, #255	; 0xff
 80287ba:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80287be:	e000      	b.n	80287c2 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 80287c0:	bf00      	nop
    }

    return rslt;
 80287c2:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 80287c6:	4618      	mov	r0, r3
 80287c8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80287cc:	46bd      	mov	sp, r7
 80287ce:	bd90      	pop	{r4, r7, pc}

080287d0 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 80287d0:	b580      	push	{r7, lr}
 80287d2:	b084      	sub	sp, #16
 80287d4:	af00      	add	r7, sp, #0
 80287d6:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 80287d8:	2300      	movs	r3, #0
 80287da:	81fb      	strh	r3, [r7, #14]
 80287dc:	e027      	b.n	802882e <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 80287de:	f107 030c 	add.w	r3, r7, #12
 80287e2:	6879      	ldr	r1, [r7, #4]
 80287e4:	4618      	mov	r0, r3
 80287e6:	f000 fab1 	bl	8028d4c <bhy2_hif_get_interrupt_status>
 80287ea:	4603      	mov	r3, r0
 80287ec:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 80287ee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80287f2:	2b00      	cmp	r3, #0
 80287f4:	d115      	bne.n	8028822 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 80287f6:	7b3b      	ldrb	r3, [r7, #12]
 80287f8:	f003 0320 	and.w	r3, r3, #32
 80287fc:	2b00      	cmp	r3, #0
 80287fe:	d002      	beq.n	8028806 <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 8028800:	2300      	movs	r3, #0
 8028802:	737b      	strb	r3, [r7, #13]
                break;
 8028804:	e017      	b.n	8028836 <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 8028806:	6879      	ldr	r1, [r7, #4]
 8028808:	f242 7010 	movw	r0, #10000	; 0x2710
 802880c:	f000 f99b 	bl	8028b46 <bhy2_hif_delay_us>
 8028810:	4603      	mov	r3, r0
 8028812:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8028814:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028818:	2b00      	cmp	r3, #0
 802881a:	d005      	beq.n	8028828 <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 802881c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028820:	e00b      	b.n	802883a <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 8028822:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028826:	e008      	b.n	802883a <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8028828:	89fb      	ldrh	r3, [r7, #14]
 802882a:	3301      	adds	r3, #1
 802882c:	81fb      	strh	r3, [r7, #14]
 802882e:	89fb      	ldrh	r3, [r7, #14]
 8028830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8028834:	d3d3      	bcc.n	80287de <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8028836:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 802883a:	4618      	mov	r0, r3
 802883c:	3710      	adds	r7, #16
 802883e:	46bd      	mov	sp, r7
 8028840:	bd80      	pop	{r7, pc}

08028842 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 8028842:	b580      	push	{r7, lr}
 8028844:	b084      	sub	sp, #16
 8028846:	af00      	add	r7, sp, #0
 8028848:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 802884a:	2300      	movs	r3, #0
 802884c:	81fb      	strh	r3, [r7, #14]
 802884e:	e02f      	b.n	80288b0 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 8028850:	6879      	ldr	r1, [r7, #4]
 8028852:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028856:	f000 f976 	bl	8028b46 <bhy2_hif_delay_us>
 802885a:	4603      	mov	r3, r0
 802885c:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802885e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028862:	2b00      	cmp	r3, #0
 8028864:	da02      	bge.n	802886c <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 8028866:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802886a:	e02d      	b.n	80288c8 <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 802886c:	f107 010c 	add.w	r1, r7, #12
 8028870:	687b      	ldr	r3, [r7, #4]
 8028872:	2201      	movs	r2, #1
 8028874:	2025      	movs	r0, #37	; 0x25
 8028876:	f000 f8f6 	bl	8028a66 <bhy2_hif_get_regs>
 802887a:	4603      	mov	r3, r0
 802887c:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802887e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028882:	2b00      	cmp	r3, #0
 8028884:	da02      	bge.n	802888c <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 8028886:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802888a:	e01d      	b.n	80288c8 <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 802888c:	7b3b      	ldrb	r3, [r7, #12]
 802888e:	f003 0310 	and.w	r3, r3, #16
 8028892:	2b00      	cmp	r3, #0
 8028894:	d009      	beq.n	80288aa <bhy2_hif_check_boot_status_ram+0x68>
 8028896:	7b3b      	ldrb	r3, [r7, #12]
 8028898:	f003 0320 	and.w	r3, r3, #32
 802889c:	2b00      	cmp	r3, #0
 802889e:	d004      	beq.n	80288aa <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 80288a0:	7b3b      	ldrb	r3, [r7, #12]
 80288a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 80288a6:	2b00      	cmp	r3, #0
 80288a8:	d006      	beq.n	80288b8 <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 80288aa:	89fb      	ldrh	r3, [r7, #14]
 80288ac:	3301      	adds	r3, #1
 80288ae:	81fb      	strh	r3, [r7, #14]
 80288b0:	89fb      	ldrh	r3, [r7, #14]
 80288b2:	2b63      	cmp	r3, #99	; 0x63
 80288b4:	d9cc      	bls.n	8028850 <bhy2_hif_check_boot_status_ram+0xe>
 80288b6:	e000      	b.n	80288ba <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 80288b8:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 80288ba:	89fb      	ldrh	r3, [r7, #14]
 80288bc:	2b64      	cmp	r3, #100	; 0x64
 80288be:	d102      	bne.n	80288c6 <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 80288c0:	f06f 0304 	mvn.w	r3, #4
 80288c4:	e000      	b.n	80288c8 <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 80288c6:	2300      	movs	r3, #0
}
 80288c8:	4618      	mov	r0, r3
 80288ca:	3710      	adds	r7, #16
 80288cc:	46bd      	mov	sp, r7
 80288ce:	bd80      	pop	{r7, pc}

080288d0 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 80288d0:	b580      	push	{r7, lr}
 80288d2:	b08a      	sub	sp, #40	; 0x28
 80288d4:	af00      	add	r7, sp, #0
 80288d6:	60b9      	str	r1, [r7, #8]
 80288d8:	607a      	str	r2, [r7, #4]
 80288da:	603b      	str	r3, [r7, #0]
 80288dc:	4603      	mov	r3, r0
 80288de:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80288e0:	2300      	movs	r3, #0
 80288e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 80288e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80288e8:	2b00      	cmp	r3, #0
 80288ea:	d072      	beq.n	80289d2 <bhy2_hif_get_fifo+0x102>
 80288ec:	68bb      	ldr	r3, [r7, #8]
 80288ee:	2b00      	cmp	r3, #0
 80288f0:	d06f      	beq.n	80289d2 <bhy2_hif_get_fifo+0x102>
 80288f2:	683b      	ldr	r3, [r7, #0]
 80288f4:	2b00      	cmp	r3, #0
 80288f6:	d06c      	beq.n	80289d2 <bhy2_hif_get_fifo+0x102>
 80288f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80288fa:	2b00      	cmp	r3, #0
 80288fc:	d069      	beq.n	80289d2 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 80288fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028900:	699b      	ldr	r3, [r3, #24]
 8028902:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8028904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028906:	681b      	ldr	r3, [r3, #0]
 8028908:	2b00      	cmp	r3, #0
 802890a:	d114      	bne.n	8028936 <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 802890c:	f107 0114 	add.w	r1, r7, #20
 8028910:	7bf8      	ldrb	r0, [r7, #15]
 8028912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028914:	2202      	movs	r2, #2
 8028916:	f000 f8a6 	bl	8028a66 <bhy2_hif_get_regs>
 802891a:	4603      	mov	r3, r0
 802891c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 8028920:	7d3b      	ldrb	r3, [r7, #20]
 8028922:	b21a      	sxth	r2, r3
 8028924:	7d7b      	ldrb	r3, [r7, #21]
 8028926:	021b      	lsls	r3, r3, #8
 8028928:	b21b      	sxth	r3, r3
 802892a:	4313      	orrs	r3, r2
 802892c:	b21b      	sxth	r3, r3
 802892e:	b29b      	uxth	r3, r3
 8028930:	461a      	mov	r2, r3
 8028932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028934:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8028936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028938:	681b      	ldr	r3, [r3, #0]
 802893a:	2b00      	cmp	r3, #0
 802893c:	d04d      	beq.n	80289da <bhy2_hif_get_fifo+0x10a>
 802893e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8028942:	2b00      	cmp	r3, #0
 8028944:	d149      	bne.n	80289da <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 8028946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028948:	681b      	ldr	r3, [r3, #0]
 802894a:	687a      	ldr	r2, [r7, #4]
 802894c:	429a      	cmp	r2, r3
 802894e:	d203      	bcs.n	8028958 <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 8028950:	683b      	ldr	r3, [r7, #0]
 8028952:	687a      	ldr	r2, [r7, #4]
 8028954:	601a      	str	r2, [r3, #0]
 8028956:	e003      	b.n	8028960 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 8028958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802895a:	681a      	ldr	r2, [r3, #0]
 802895c:	683b      	ldr	r3, [r7, #0]
 802895e:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 8028960:	683b      	ldr	r3, [r7, #0]
 8028962:	681b      	ldr	r3, [r3, #0]
 8028964:	623b      	str	r3, [r7, #32]
            offset = 0;
 8028966:	2300      	movs	r3, #0
 8028968:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 802896a:	e016      	b.n	802899a <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 802896c:	68ba      	ldr	r2, [r7, #8]
 802896e:	69fb      	ldr	r3, [r7, #28]
 8028970:	18d1      	adds	r1, r2, r3
 8028972:	7bf8      	ldrb	r0, [r7, #15]
 8028974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028976:	69ba      	ldr	r2, [r7, #24]
 8028978:	f000 f875 	bl	8028a66 <bhy2_hif_get_regs>
 802897c:	4603      	mov	r3, r0
 802897e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 8028982:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8028986:	2b00      	cmp	r3, #0
 8028988:	d10c      	bne.n	80289a4 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 802898a:	6a3a      	ldr	r2, [r7, #32]
 802898c:	69bb      	ldr	r3, [r7, #24]
 802898e:	1ad3      	subs	r3, r2, r3
 8028990:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 8028992:	69fa      	ldr	r2, [r7, #28]
 8028994:	69bb      	ldr	r3, [r7, #24]
 8028996:	4413      	add	r3, r2
 8028998:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 802899a:	6a3a      	ldr	r2, [r7, #32]
 802899c:	69bb      	ldr	r3, [r7, #24]
 802899e:	429a      	cmp	r2, r3
 80289a0:	d8e4      	bhi.n	802896c <bhy2_hif_get_fifo+0x9c>
 80289a2:	e000      	b.n	80289a6 <bhy2_hif_get_fifo+0xd6>
                    break;
 80289a4:	bf00      	nop
            }

            if (read_len != 0)
 80289a6:	6a3b      	ldr	r3, [r7, #32]
 80289a8:	2b00      	cmp	r3, #0
 80289aa:	d00a      	beq.n	80289c2 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 80289ac:	68ba      	ldr	r2, [r7, #8]
 80289ae:	69fb      	ldr	r3, [r7, #28]
 80289b0:	18d1      	adds	r1, r2, r3
 80289b2:	7bf8      	ldrb	r0, [r7, #15]
 80289b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80289b6:	6a3a      	ldr	r2, [r7, #32]
 80289b8:	f000 f855 	bl	8028a66 <bhy2_hif_get_regs>
 80289bc:	4603      	mov	r3, r0
 80289be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 80289c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80289c4:	681a      	ldr	r2, [r3, #0]
 80289c6:	683b      	ldr	r3, [r7, #0]
 80289c8:	681b      	ldr	r3, [r3, #0]
 80289ca:	1ad2      	subs	r2, r2, r3
 80289cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80289ce:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 80289d0:	e003      	b.n	80289da <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80289d2:	23ff      	movs	r3, #255	; 0xff
 80289d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80289d8:	e000      	b.n	80289dc <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 80289da:	bf00      	nop
    }

    return rslt;
 80289dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80289e0:	4618      	mov	r0, r3
 80289e2:	3728      	adds	r7, #40	; 0x28
 80289e4:	46bd      	mov	sp, r7
 80289e6:	bd80      	pop	{r7, pc}

080289e8 <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 80289e8:	b480      	push	{r7}
 80289ea:	b087      	sub	sp, #28
 80289ec:	af00      	add	r7, sp, #0
 80289ee:	60b9      	str	r1, [r7, #8]
 80289f0:	607a      	str	r2, [r7, #4]
 80289f2:	603b      	str	r3, [r7, #0]
 80289f4:	4603      	mov	r3, r0
 80289f6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80289f8:	2300      	movs	r3, #0
 80289fa:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 80289fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289fe:	2b00      	cmp	r3, #0
 8028a00:	d027      	beq.n	8028a52 <bhy2_hif_init+0x6a>
 8028a02:	68bb      	ldr	r3, [r7, #8]
 8028a04:	2b00      	cmp	r3, #0
 8028a06:	d024      	beq.n	8028a52 <bhy2_hif_init+0x6a>
 8028a08:	687b      	ldr	r3, [r7, #4]
 8028a0a:	2b00      	cmp	r3, #0
 8028a0c:	d021      	beq.n	8028a52 <bhy2_hif_init+0x6a>
 8028a0e:	683b      	ldr	r3, [r7, #0]
 8028a10:	2b00      	cmp	r3, #0
 8028a12:	d01e      	beq.n	8028a52 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8028a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a16:	68ba      	ldr	r2, [r7, #8]
 8028a18:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8028a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a1c:	687a      	ldr	r2, [r7, #4]
 8028a1e:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 8028a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a22:	683a      	ldr	r2, [r7, #0]
 8028a24:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8028a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028a2a:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8028a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a2e:	7bfa      	ldrb	r2, [r7, #15]
 8028a30:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8028a32:	6a3b      	ldr	r3, [r7, #32]
 8028a34:	f003 0303 	and.w	r3, r3, #3
 8028a38:	2b00      	cmp	r3, #0
 8028a3a:	d006      	beq.n	8028a4a <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8028a3c:	6a3b      	ldr	r3, [r7, #32]
 8028a3e:	089b      	lsrs	r3, r3, #2
 8028a40:	3301      	adds	r3, #1
 8028a42:	009a      	lsls	r2, r3, #2
 8028a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a46:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8028a48:	e005      	b.n	8028a56 <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8028a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a4c:	6a3a      	ldr	r2, [r7, #32]
 8028a4e:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8028a50:	e001      	b.n	8028a56 <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028a52:	23ff      	movs	r3, #255	; 0xff
 8028a54:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028a5a:	4618      	mov	r0, r3
 8028a5c:	371c      	adds	r7, #28
 8028a5e:	46bd      	mov	sp, r7
 8028a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a64:	4770      	bx	lr

08028a66 <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028a66:	b590      	push	{r4, r7, lr}
 8028a68:	b087      	sub	sp, #28
 8028a6a:	af00      	add	r7, sp, #0
 8028a6c:	60b9      	str	r1, [r7, #8]
 8028a6e:	607a      	str	r2, [r7, #4]
 8028a70:	603b      	str	r3, [r7, #0]
 8028a72:	4603      	mov	r3, r0
 8028a74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028a76:	2300      	movs	r3, #0
 8028a78:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8028a7a:	683b      	ldr	r3, [r7, #0]
 8028a7c:	2b00      	cmp	r3, #0
 8028a7e:	d022      	beq.n	8028ac6 <bhy2_hif_get_regs+0x60>
 8028a80:	683b      	ldr	r3, [r7, #0]
 8028a82:	681b      	ldr	r3, [r3, #0]
 8028a84:	2b00      	cmp	r3, #0
 8028a86:	d01e      	beq.n	8028ac6 <bhy2_hif_get_regs+0x60>
 8028a88:	68bb      	ldr	r3, [r7, #8]
 8028a8a:	2b00      	cmp	r3, #0
 8028a8c:	d01b      	beq.n	8028ac6 <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8028a8e:	683b      	ldr	r3, [r7, #0]
 8028a90:	7b1b      	ldrb	r3, [r3, #12]
 8028a92:	2b01      	cmp	r3, #1
 8028a94:	d103      	bne.n	8028a9e <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8028a96:	7bfb      	ldrb	r3, [r7, #15]
 8028a98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8028a9c:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8028a9e:	683b      	ldr	r3, [r7, #0]
 8028aa0:	681c      	ldr	r4, [r3, #0]
 8028aa2:	683b      	ldr	r3, [r7, #0]
 8028aa4:	691b      	ldr	r3, [r3, #16]
 8028aa6:	7bf8      	ldrb	r0, [r7, #15]
 8028aa8:	687a      	ldr	r2, [r7, #4]
 8028aaa:	68b9      	ldr	r1, [r7, #8]
 8028aac:	47a0      	blx	r4
 8028aae:	4603      	mov	r3, r0
 8028ab0:	461a      	mov	r2, r3
 8028ab2:	683b      	ldr	r3, [r7, #0]
 8028ab4:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028ab6:	683b      	ldr	r3, [r7, #0]
 8028ab8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8028abc:	2b00      	cmp	r3, #0
 8028abe:	d004      	beq.n	8028aca <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8028ac0:	23fd      	movs	r3, #253	; 0xfd
 8028ac2:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028ac4:	e001      	b.n	8028aca <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028ac6:	23ff      	movs	r3, #255	; 0xff
 8028ac8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028ace:	4618      	mov	r0, r3
 8028ad0:	371c      	adds	r7, #28
 8028ad2:	46bd      	mov	sp, r7
 8028ad4:	bd90      	pop	{r4, r7, pc}

08028ad6 <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028ad6:	b590      	push	{r4, r7, lr}
 8028ad8:	b087      	sub	sp, #28
 8028ada:	af00      	add	r7, sp, #0
 8028adc:	60b9      	str	r1, [r7, #8]
 8028ade:	607a      	str	r2, [r7, #4]
 8028ae0:	603b      	str	r3, [r7, #0]
 8028ae2:	4603      	mov	r3, r0
 8028ae4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028ae6:	2300      	movs	r3, #0
 8028ae8:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8028aea:	683b      	ldr	r3, [r7, #0]
 8028aec:	2b00      	cmp	r3, #0
 8028aee:	d022      	beq.n	8028b36 <bhy2_hif_set_regs+0x60>
 8028af0:	683b      	ldr	r3, [r7, #0]
 8028af2:	681b      	ldr	r3, [r3, #0]
 8028af4:	2b00      	cmp	r3, #0
 8028af6:	d01e      	beq.n	8028b36 <bhy2_hif_set_regs+0x60>
 8028af8:	68bb      	ldr	r3, [r7, #8]
 8028afa:	2b00      	cmp	r3, #0
 8028afc:	d01b      	beq.n	8028b36 <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8028afe:	683b      	ldr	r3, [r7, #0]
 8028b00:	7b1b      	ldrb	r3, [r3, #12]
 8028b02:	2b01      	cmp	r3, #1
 8028b04:	d103      	bne.n	8028b0e <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8028b06:	7bfb      	ldrb	r3, [r7, #15]
 8028b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028b0c:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8028b0e:	683b      	ldr	r3, [r7, #0]
 8028b10:	685c      	ldr	r4, [r3, #4]
 8028b12:	683b      	ldr	r3, [r7, #0]
 8028b14:	691b      	ldr	r3, [r3, #16]
 8028b16:	7bf8      	ldrb	r0, [r7, #15]
 8028b18:	687a      	ldr	r2, [r7, #4]
 8028b1a:	68b9      	ldr	r1, [r7, #8]
 8028b1c:	47a0      	blx	r4
 8028b1e:	4603      	mov	r3, r0
 8028b20:	461a      	mov	r2, r3
 8028b22:	683b      	ldr	r3, [r7, #0]
 8028b24:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028b26:	683b      	ldr	r3, [r7, #0]
 8028b28:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8028b2c:	2b00      	cmp	r3, #0
 8028b2e:	d004      	beq.n	8028b3a <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8028b30:	23fd      	movs	r3, #253	; 0xfd
 8028b32:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028b34:	e001      	b.n	8028b3a <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028b36:	23ff      	movs	r3, #255	; 0xff
 8028b38:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028b3e:	4618      	mov	r0, r3
 8028b40:	371c      	adds	r7, #28
 8028b42:	46bd      	mov	sp, r7
 8028b44:	bd90      	pop	{r4, r7, pc}

08028b46 <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8028b46:	b580      	push	{r7, lr}
 8028b48:	b084      	sub	sp, #16
 8028b4a:	af00      	add	r7, sp, #0
 8028b4c:	6078      	str	r0, [r7, #4]
 8028b4e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8028b50:	2300      	movs	r3, #0
 8028b52:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8028b54:	683b      	ldr	r3, [r7, #0]
 8028b56:	2b00      	cmp	r3, #0
 8028b58:	d00b      	beq.n	8028b72 <bhy2_hif_delay_us+0x2c>
 8028b5a:	683b      	ldr	r3, [r7, #0]
 8028b5c:	689b      	ldr	r3, [r3, #8]
 8028b5e:	2b00      	cmp	r3, #0
 8028b60:	d007      	beq.n	8028b72 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8028b62:	683b      	ldr	r3, [r7, #0]
 8028b64:	689b      	ldr	r3, [r3, #8]
 8028b66:	683a      	ldr	r2, [r7, #0]
 8028b68:	6912      	ldr	r2, [r2, #16]
 8028b6a:	4611      	mov	r1, r2
 8028b6c:	6878      	ldr	r0, [r7, #4]
 8028b6e:	4798      	blx	r3
 8028b70:	e001      	b.n	8028b76 <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028b72:	23ff      	movs	r3, #255	; 0xff
 8028b74:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028b7a:	4618      	mov	r0, r3
 8028b7c:	3710      	adds	r7, #16
 8028b7e:	46bd      	mov	sp, r7
 8028b80:	bd80      	pop	{r7, pc}

08028b82 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028b82:	b580      	push	{r7, lr}
 8028b84:	b088      	sub	sp, #32
 8028b86:	af04      	add	r7, sp, #16
 8028b88:	60b9      	str	r1, [r7, #8]
 8028b8a:	607a      	str	r2, [r7, #4]
 8028b8c:	603b      	str	r3, [r7, #0]
 8028b8e:	4603      	mov	r3, r0
 8028b90:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8028b92:	89f8      	ldrh	r0, [r7, #14]
 8028b94:	683b      	ldr	r3, [r7, #0]
 8028b96:	9302      	str	r3, [sp, #8]
 8028b98:	2300      	movs	r3, #0
 8028b9a:	9301      	str	r3, [sp, #4]
 8028b9c:	2300      	movs	r3, #0
 8028b9e:	9300      	str	r3, [sp, #0]
 8028ba0:	2300      	movs	r3, #0
 8028ba2:	687a      	ldr	r2, [r7, #4]
 8028ba4:	68b9      	ldr	r1, [r7, #8]
 8028ba6:	f7ff fc37 	bl	8028418 <bhy2_hif_exec_cmd_generic>
 8028baa:	4603      	mov	r3, r0
}
 8028bac:	4618      	mov	r0, r3
 8028bae:	3710      	adds	r7, #16
 8028bb0:	46bd      	mov	sp, r7
 8028bb2:	bd80      	pop	{r7, pc}

08028bb4 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8028bb4:	b580      	push	{r7, lr}
 8028bb6:	b088      	sub	sp, #32
 8028bb8:	af02      	add	r7, sp, #8
 8028bba:	60b9      	str	r1, [r7, #8]
 8028bbc:	607a      	str	r2, [r7, #4]
 8028bbe:	603b      	str	r3, [r7, #0]
 8028bc0:	4603      	mov	r3, r0
 8028bc2:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8028bc4:	2300      	movs	r3, #0
 8028bc6:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8028bc8:	2300      	movs	r3, #0
 8028bca:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8028bcc:	6a3b      	ldr	r3, [r7, #32]
 8028bce:	2b00      	cmp	r3, #0
 8028bd0:	d06e      	beq.n	8028cb0 <bhy2_hif_get_parameter+0xfc>
 8028bd2:	68bb      	ldr	r3, [r7, #8]
 8028bd4:	2b00      	cmp	r3, #0
 8028bd6:	d06b      	beq.n	8028cb0 <bhy2_hif_get_parameter+0xfc>
 8028bd8:	683b      	ldr	r3, [r7, #0]
 8028bda:	2b00      	cmp	r3, #0
 8028bdc:	d068      	beq.n	8028cb0 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8028bde:	683b      	ldr	r3, [r7, #0]
 8028be0:	2200      	movs	r2, #0
 8028be2:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028be4:	f107 0113 	add.w	r1, r7, #19
 8028be8:	6a3b      	ldr	r3, [r7, #32]
 8028bea:	2201      	movs	r2, #1
 8028bec:	2006      	movs	r0, #6
 8028bee:	f7ff ff3a 	bl	8028a66 <bhy2_hif_get_regs>
 8028bf2:	4603      	mov	r3, r0
 8028bf4:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8028bf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028bfa:	2b00      	cmp	r3, #0
 8028bfc:	d15b      	bne.n	8028cb6 <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8028bfe:	7cfb      	ldrb	r3, [r7, #19]
 8028c00:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8028c02:	7cfb      	ldrb	r3, [r7, #19]
 8028c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028c08:	b2db      	uxtb	r3, r3
 8028c0a:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8028c0c:	7cfb      	ldrb	r3, [r7, #19]
 8028c0e:	7dba      	ldrb	r2, [r7, #22]
 8028c10:	429a      	cmp	r2, r3
 8028c12:	d008      	beq.n	8028c26 <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028c14:	f107 0113 	add.w	r1, r7, #19
 8028c18:	6a3b      	ldr	r3, [r7, #32]
 8028c1a:	2201      	movs	r2, #1
 8028c1c:	2006      	movs	r0, #6
 8028c1e:	f7ff ff5a 	bl	8028ad6 <bhy2_hif_set_regs>
 8028c22:	4603      	mov	r3, r0
 8028c24:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8028c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c2a:	2b00      	cmp	r3, #0
 8028c2c:	d143      	bne.n	8028cb6 <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8028c2e:	89fb      	ldrh	r3, [r7, #14]
 8028c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8028c34:	b298      	uxth	r0, r3
 8028c36:	6a3b      	ldr	r3, [r7, #32]
 8028c38:	2200      	movs	r2, #0
 8028c3a:	2100      	movs	r1, #0
 8028c3c:	f7ff ffa1 	bl	8028b82 <bhy2_hif_exec_cmd>
 8028c40:	4603      	mov	r3, r0
 8028c42:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8028c44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c48:	2b00      	cmp	r3, #0
 8028c4a:	d134      	bne.n	8028cb6 <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8028c4c:	6a38      	ldr	r0, [r7, #32]
 8028c4e:	f7ff fdbf 	bl	80287d0 <bhy2_wait_status_ready>
 8028c52:	4603      	mov	r3, r0
 8028c54:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8028c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c5a:	2b00      	cmp	r3, #0
 8028c5c:	d12b      	bne.n	8028cb6 <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8028c5e:	f107 0014 	add.w	r0, r7, #20
 8028c62:	6a3b      	ldr	r3, [r7, #32]
 8028c64:	9300      	str	r3, [sp, #0]
 8028c66:	683b      	ldr	r3, [r7, #0]
 8028c68:	687a      	ldr	r2, [r7, #4]
 8028c6a:	68b9      	ldr	r1, [r7, #8]
 8028c6c:	f000 f94b 	bl	8028f06 <bhy2_hif_get_status_fifo>
 8028c70:	4603      	mov	r3, r0
 8028c72:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8028c74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c78:	2b00      	cmp	r3, #0
 8028c7a:	d11c      	bne.n	8028cb6 <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8028c7c:	7cfb      	ldrb	r3, [r7, #19]
 8028c7e:	7dba      	ldrb	r2, [r7, #22]
 8028c80:	429a      	cmp	r2, r3
 8028c82:	d00a      	beq.n	8028c9a <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8028c84:	7dbb      	ldrb	r3, [r7, #22]
 8028c86:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028c88:	f107 0113 	add.w	r1, r7, #19
 8028c8c:	6a3b      	ldr	r3, [r7, #32]
 8028c8e:	2201      	movs	r2, #1
 8028c90:	2006      	movs	r0, #6
 8028c92:	f7ff ff20 	bl	8028ad6 <bhy2_hif_set_regs>
 8028c96:	4603      	mov	r3, r0
 8028c98:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8028c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c9e:	2b00      	cmp	r3, #0
 8028ca0:	d109      	bne.n	8028cb6 <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8028ca2:	8abb      	ldrh	r3, [r7, #20]
 8028ca4:	89fa      	ldrh	r2, [r7, #14]
 8028ca6:	429a      	cmp	r2, r3
 8028ca8:	d005      	beq.n	8028cb6 <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8028caa:	23fb      	movs	r3, #251	; 0xfb
 8028cac:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8028cae:	e002      	b.n	8028cb6 <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028cb0:	23ff      	movs	r3, #255	; 0xff
 8028cb2:	75fb      	strb	r3, [r7, #23]
 8028cb4:	e000      	b.n	8028cb8 <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8028cb6:	bf00      	nop
    }

    return rslt;
 8028cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028cbc:	4618      	mov	r0, r3
 8028cbe:	3718      	adds	r7, #24
 8028cc0:	46bd      	mov	sp, r7
 8028cc2:	bd80      	pop	{r7, pc}

08028cc4 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8028cc4:	b580      	push	{r7, lr}
 8028cc6:	b082      	sub	sp, #8
 8028cc8:	af00      	add	r7, sp, #0
 8028cca:	6078      	str	r0, [r7, #4]
 8028ccc:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8028cce:	683b      	ldr	r3, [r7, #0]
 8028cd0:	2201      	movs	r2, #1
 8028cd2:	6879      	ldr	r1, [r7, #4]
 8028cd4:	201c      	movs	r0, #28
 8028cd6:	f7ff fec6 	bl	8028a66 <bhy2_hif_get_regs>
 8028cda:	4603      	mov	r3, r0
}
 8028cdc:	4618      	mov	r0, r3
 8028cde:	3708      	adds	r7, #8
 8028ce0:	46bd      	mov	sp, r7
 8028ce2:	bd80      	pop	{r7, pc}

08028ce4 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8028ce4:	b580      	push	{r7, lr}
 8028ce6:	b084      	sub	sp, #16
 8028ce8:	af00      	add	r7, sp, #0
 8028cea:	6078      	str	r0, [r7, #4]
 8028cec:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8028cee:	687b      	ldr	r3, [r7, #4]
 8028cf0:	2b00      	cmp	r3, #0
 8028cf2:	d013      	beq.n	8028d1c <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8028cf4:	f107 010c 	add.w	r1, r7, #12
 8028cf8:	683b      	ldr	r3, [r7, #0]
 8028cfa:	2202      	movs	r2, #2
 8028cfc:	2020      	movs	r0, #32
 8028cfe:	f7ff feb2 	bl	8028a66 <bhy2_hif_get_regs>
 8028d02:	4603      	mov	r3, r0
 8028d04:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8028d06:	7b3b      	ldrb	r3, [r7, #12]
 8028d08:	b21a      	sxth	r2, r3
 8028d0a:	7b7b      	ldrb	r3, [r7, #13]
 8028d0c:	021b      	lsls	r3, r3, #8
 8028d0e:	b21b      	sxth	r3, r3
 8028d10:	4313      	orrs	r3, r2
 8028d12:	b21b      	sxth	r3, r3
 8028d14:	b29a      	uxth	r2, r3
 8028d16:	687b      	ldr	r3, [r7, #4]
 8028d18:	801a      	strh	r2, [r3, #0]
 8028d1a:	e001      	b.n	8028d20 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028d1c:	23ff      	movs	r3, #255	; 0xff
 8028d1e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028d24:	4618      	mov	r0, r3
 8028d26:	3710      	adds	r7, #16
 8028d28:	46bd      	mov	sp, r7
 8028d2a:	bd80      	pop	{r7, pc}

08028d2c <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8028d2c:	b580      	push	{r7, lr}
 8028d2e:	b082      	sub	sp, #8
 8028d30:	af00      	add	r7, sp, #0
 8028d32:	6078      	str	r0, [r7, #4]
 8028d34:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8028d36:	683b      	ldr	r3, [r7, #0]
 8028d38:	2201      	movs	r2, #1
 8028d3a:	6879      	ldr	r1, [r7, #4]
 8028d3c:	2025      	movs	r0, #37	; 0x25
 8028d3e:	f7ff fe92 	bl	8028a66 <bhy2_hif_get_regs>
 8028d42:	4603      	mov	r3, r0
}
 8028d44:	4618      	mov	r0, r3
 8028d46:	3708      	adds	r7, #8
 8028d48:	46bd      	mov	sp, r7
 8028d4a:	bd80      	pop	{r7, pc}

08028d4c <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8028d4c:	b580      	push	{r7, lr}
 8028d4e:	b082      	sub	sp, #8
 8028d50:	af00      	add	r7, sp, #0
 8028d52:	6078      	str	r0, [r7, #4]
 8028d54:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8028d56:	683b      	ldr	r3, [r7, #0]
 8028d58:	2201      	movs	r2, #1
 8028d5a:	6879      	ldr	r1, [r7, #4]
 8028d5c:	202d      	movs	r0, #45	; 0x2d
 8028d5e:	f7ff fe82 	bl	8028a66 <bhy2_hif_get_regs>
 8028d62:	4603      	mov	r3, r0
}
 8028d64:	4618      	mov	r0, r3
 8028d66:	3708      	adds	r7, #8
 8028d68:	46bd      	mov	sp, r7
 8028d6a:	bd80      	pop	{r7, pc}

08028d6c <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8028d6c:	b580      	push	{r7, lr}
 8028d6e:	b084      	sub	sp, #16
 8028d70:	af00      	add	r7, sp, #0
 8028d72:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8028d74:	2301      	movs	r3, #1
 8028d76:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8028d78:	2300      	movs	r3, #0
 8028d7a:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8028d7c:	230f      	movs	r3, #15
 8028d7e:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8028d80:	f107 010b 	add.w	r1, r7, #11
 8028d84:	687b      	ldr	r3, [r7, #4]
 8028d86:	2201      	movs	r2, #1
 8028d88:	2014      	movs	r0, #20
 8028d8a:	f7ff fea4 	bl	8028ad6 <bhy2_hif_set_regs>
 8028d8e:	4603      	mov	r3, r0
 8028d90:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8028d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028d96:	2b00      	cmp	r3, #0
 8028d98:	d12b      	bne.n	8028df2 <bhy2_hif_reset+0x86>
    {
        while (count--)
 8028d9a:	e01c      	b.n	8028dd6 <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8028d9c:	6879      	ldr	r1, [r7, #4]
 8028d9e:	f242 7010 	movw	r0, #10000	; 0x2710
 8028da2:	f7ff fed0 	bl	8028b46 <bhy2_hif_delay_us>
 8028da6:	4603      	mov	r3, r0
 8028da8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8028daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028dae:	2b00      	cmp	r3, #0
 8028db0:	d111      	bne.n	8028dd6 <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8028db2:	f107 010a 	add.w	r1, r7, #10
 8028db6:	687b      	ldr	r3, [r7, #4]
 8028db8:	2201      	movs	r2, #1
 8028dba:	2025      	movs	r0, #37	; 0x25
 8028dbc:	f7ff fe53 	bl	8028a66 <bhy2_hif_get_regs>
 8028dc0:	4603      	mov	r3, r0
 8028dc2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8028dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028dc8:	2b00      	cmp	r3, #0
 8028dca:	d104      	bne.n	8028dd6 <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8028dcc:	7abb      	ldrb	r3, [r7, #10]
 8028dce:	f003 0310 	and.w	r3, r3, #16
 8028dd2:	2b00      	cmp	r3, #0
 8028dd4:	d105      	bne.n	8028de2 <bhy2_hif_reset+0x76>
        while (count--)
 8028dd6:	89bb      	ldrh	r3, [r7, #12]
 8028dd8:	1e5a      	subs	r2, r3, #1
 8028dda:	81ba      	strh	r2, [r7, #12]
 8028ddc:	2b00      	cmp	r3, #0
 8028dde:	d1dd      	bne.n	8028d9c <bhy2_hif_reset+0x30>
 8028de0:	e000      	b.n	8028de4 <bhy2_hif_reset+0x78>
                    {
                        break;
 8028de2:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 8028de4:	7abb      	ldrb	r3, [r7, #10]
 8028de6:	f003 0310 	and.w	r3, r3, #16
 8028dea:	2b00      	cmp	r3, #0
 8028dec:	d101      	bne.n	8028df2 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 8028dee:	23fb      	movs	r3, #251	; 0xfb
 8028df0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8028df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028df6:	4618      	mov	r0, r3
 8028df8:	3710      	adds	r7, #16
 8028dfa:	46bd      	mov	sp, r7
 8028dfc:	bd80      	pop	{r7, pc}

08028dfe <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028dfe:	b580      	push	{r7, lr}
 8028e00:	b086      	sub	sp, #24
 8028e02:	af00      	add	r7, sp, #0
 8028e04:	60f8      	str	r0, [r7, #12]
 8028e06:	60b9      	str	r1, [r7, #8]
 8028e08:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8028e0a:	2300      	movs	r3, #0
 8028e0c:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 8028e0e:	687b      	ldr	r3, [r7, #4]
 8028e10:	2b00      	cmp	r3, #0
 8028e12:	d027      	beq.n	8028e64 <bhy2_hif_upload_firmware_to_ram+0x66>
 8028e14:	68fb      	ldr	r3, [r7, #12]
 8028e16:	2b00      	cmp	r3, #0
 8028e18:	d024      	beq.n	8028e64 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 8028e1a:	68fb      	ldr	r3, [r7, #12]
 8028e1c:	781b      	ldrb	r3, [r3, #0]
 8028e1e:	b21a      	sxth	r2, r3
 8028e20:	68fb      	ldr	r3, [r7, #12]
 8028e22:	3301      	adds	r3, #1
 8028e24:	781b      	ldrb	r3, [r3, #0]
 8028e26:	021b      	lsls	r3, r3, #8
 8028e28:	b21b      	sxth	r3, r3
 8028e2a:	4313      	orrs	r3, r2
 8028e2c:	b21b      	sxth	r3, r3
 8028e2e:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 8028e30:	8abb      	ldrh	r3, [r7, #20]
 8028e32:	f246 622b 	movw	r2, #26155	; 0x662b
 8028e36:	4293      	cmp	r3, r2
 8028e38:	d002      	beq.n	8028e40 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 8028e3a:	23fc      	movs	r3, #252	; 0xfc
 8028e3c:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8028e3e:	e014      	b.n	8028e6a <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 8028e40:	687b      	ldr	r3, [r7, #4]
 8028e42:	68ba      	ldr	r2, [r7, #8]
 8028e44:	68f9      	ldr	r1, [r7, #12]
 8028e46:	2002      	movs	r0, #2
 8028e48:	f7ff fe9b 	bl	8028b82 <bhy2_hif_exec_cmd>
 8028e4c:	4603      	mov	r3, r0
 8028e4e:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 8028e50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028e54:	2b00      	cmp	r3, #0
 8028e56:	d108      	bne.n	8028e6a <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 8028e58:	6878      	ldr	r0, [r7, #4]
 8028e5a:	f7ff fcf2 	bl	8028842 <bhy2_hif_check_boot_status_ram>
 8028e5e:	4603      	mov	r3, r0
 8028e60:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8028e62:	e002      	b.n	8028e6a <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028e64:	23ff      	movs	r3, #255	; 0xff
 8028e66:	75fb      	strb	r3, [r7, #23]
 8028e68:	e000      	b.n	8028e6c <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 8028e6a:	bf00      	nop
    }

    return rslt;
 8028e6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028e70:	4618      	mov	r0, r3
 8028e72:	3718      	adds	r7, #24
 8028e74:	46bd      	mov	sp, r7
 8028e76:	bd80      	pop	{r7, pc}

08028e78 <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 8028e78:	b580      	push	{r7, lr}
 8028e7a:	b084      	sub	sp, #16
 8028e7c:	af00      	add	r7, sp, #0
 8028e7e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 8028e80:	687b      	ldr	r3, [r7, #4]
 8028e82:	2200      	movs	r2, #0
 8028e84:	2100      	movs	r1, #0
 8028e86:	2003      	movs	r0, #3
 8028e88:	f7ff fe7b 	bl	8028b82 <bhy2_hif_exec_cmd>
 8028e8c:	4603      	mov	r3, r0
 8028e8e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8028e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028e94:	2b00      	cmp	r3, #0
 8028e96:	d104      	bne.n	8028ea2 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 8028e98:	6878      	ldr	r0, [r7, #4]
 8028e9a:	f7ff fcd2 	bl	8028842 <bhy2_hif_check_boot_status_ram>
 8028e9e:	4603      	mov	r3, r0
 8028ea0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028ea6:	4618      	mov	r0, r3
 8028ea8:	3710      	adds	r7, #16
 8028eaa:	46bd      	mov	sp, r7
 8028eac:	bd80      	pop	{r7, pc}

08028eae <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8028eae:	b580      	push	{r7, lr}
 8028eb0:	b086      	sub	sp, #24
 8028eb2:	af02      	add	r7, sp, #8
 8028eb4:	60f8      	str	r0, [r7, #12]
 8028eb6:	60b9      	str	r1, [r7, #8]
 8028eb8:	607a      	str	r2, [r7, #4]
 8028eba:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028ebc:	69bb      	ldr	r3, [r7, #24]
 8028ebe:	9301      	str	r3, [sp, #4]
 8028ec0:	683b      	ldr	r3, [r7, #0]
 8028ec2:	9300      	str	r3, [sp, #0]
 8028ec4:	687b      	ldr	r3, [r7, #4]
 8028ec6:	68ba      	ldr	r2, [r7, #8]
 8028ec8:	68f9      	ldr	r1, [r7, #12]
 8028eca:	2001      	movs	r0, #1
 8028ecc:	f7ff fd00 	bl	80288d0 <bhy2_hif_get_fifo>
 8028ed0:	4603      	mov	r3, r0
}
 8028ed2:	4618      	mov	r0, r3
 8028ed4:	3710      	adds	r7, #16
 8028ed6:	46bd      	mov	sp, r7
 8028ed8:	bd80      	pop	{r7, pc}

08028eda <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 8028eda:	b580      	push	{r7, lr}
 8028edc:	b086      	sub	sp, #24
 8028ede:	af02      	add	r7, sp, #8
 8028ee0:	60f8      	str	r0, [r7, #12]
 8028ee2:	60b9      	str	r1, [r7, #8]
 8028ee4:	607a      	str	r2, [r7, #4]
 8028ee6:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028ee8:	69bb      	ldr	r3, [r7, #24]
 8028eea:	9301      	str	r3, [sp, #4]
 8028eec:	683b      	ldr	r3, [r7, #0]
 8028eee:	9300      	str	r3, [sp, #0]
 8028ef0:	687b      	ldr	r3, [r7, #4]
 8028ef2:	68ba      	ldr	r2, [r7, #8]
 8028ef4:	68f9      	ldr	r1, [r7, #12]
 8028ef6:	2002      	movs	r0, #2
 8028ef8:	f7ff fcea 	bl	80288d0 <bhy2_hif_get_fifo>
 8028efc:	4603      	mov	r3, r0
}
 8028efe:	4618      	mov	r0, r3
 8028f00:	3710      	adds	r7, #16
 8028f02:	46bd      	mov	sp, r7
 8028f04:	bd80      	pop	{r7, pc}

08028f06 <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8028f06:	b580      	push	{r7, lr}
 8028f08:	b086      	sub	sp, #24
 8028f0a:	af00      	add	r7, sp, #0
 8028f0c:	60f8      	str	r0, [r7, #12]
 8028f0e:	60b9      	str	r1, [r7, #8]
 8028f10:	607a      	str	r2, [r7, #4]
 8028f12:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 8028f14:	f107 0110 	add.w	r1, r7, #16
 8028f18:	6a3b      	ldr	r3, [r7, #32]
 8028f1a:	2204      	movs	r2, #4
 8028f1c:	2003      	movs	r0, #3
 8028f1e:	f7ff fda2 	bl	8028a66 <bhy2_hif_get_regs>
 8028f22:	4603      	mov	r3, r0
 8028f24:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 8028f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028f2a:	2b00      	cmp	r3, #0
 8028f2c:	d130      	bne.n	8028f90 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 8028f2e:	7c3b      	ldrb	r3, [r7, #16]
 8028f30:	b21a      	sxth	r2, r3
 8028f32:	f107 0310 	add.w	r3, r7, #16
 8028f36:	3301      	adds	r3, #1
 8028f38:	781b      	ldrb	r3, [r3, #0]
 8028f3a:	021b      	lsls	r3, r3, #8
 8028f3c:	b21b      	sxth	r3, r3
 8028f3e:	4313      	orrs	r3, r2
 8028f40:	b21b      	sxth	r3, r3
 8028f42:	b29a      	uxth	r2, r3
 8028f44:	68fb      	ldr	r3, [r7, #12]
 8028f46:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 8028f48:	7cbb      	ldrb	r3, [r7, #18]
 8028f4a:	b21a      	sxth	r2, r3
 8028f4c:	f107 0310 	add.w	r3, r7, #16
 8028f50:	3302      	adds	r3, #2
 8028f52:	3301      	adds	r3, #1
 8028f54:	781b      	ldrb	r3, [r3, #0]
 8028f56:	021b      	lsls	r3, r3, #8
 8028f58:	b21b      	sxth	r3, r3
 8028f5a:	4313      	orrs	r3, r2
 8028f5c:	b21b      	sxth	r3, r3
 8028f5e:	b29b      	uxth	r3, r3
 8028f60:	461a      	mov	r2, r3
 8028f62:	683b      	ldr	r3, [r7, #0]
 8028f64:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 8028f66:	683b      	ldr	r3, [r7, #0]
 8028f68:	681b      	ldr	r3, [r3, #0]
 8028f6a:	2b00      	cmp	r3, #0
 8028f6c:	d010      	beq.n	8028f90 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 8028f6e:	683b      	ldr	r3, [r7, #0]
 8028f70:	681b      	ldr	r3, [r3, #0]
 8028f72:	687a      	ldr	r2, [r7, #4]
 8028f74:	429a      	cmp	r2, r3
 8028f76:	d202      	bcs.n	8028f7e <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 8028f78:	23fa      	movs	r3, #250	; 0xfa
 8028f7a:	75fb      	strb	r3, [r7, #23]
 8028f7c:	e008      	b.n	8028f90 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 8028f7e:	683b      	ldr	r3, [r7, #0]
 8028f80:	681a      	ldr	r2, [r3, #0]
 8028f82:	6a3b      	ldr	r3, [r7, #32]
 8028f84:	68b9      	ldr	r1, [r7, #8]
 8028f86:	2003      	movs	r0, #3
 8028f88:	f7ff fd6d 	bl	8028a66 <bhy2_hif_get_regs>
 8028f8c:	4603      	mov	r3, r0
 8028f8e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8028f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028f94:	4618      	mov	r0, r3
 8028f96:	3718      	adds	r7, #24
 8028f98:	46bd      	mov	sp, r7
 8028f9a:	bd80      	pop	{r7, pc}

08028f9c <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 8028f9c:	b580      	push	{r7, lr}
 8028f9e:	b086      	sub	sp, #24
 8028fa0:	af02      	add	r7, sp, #8
 8028fa2:	60f8      	str	r0, [r7, #12]
 8028fa4:	60b9      	str	r1, [r7, #8]
 8028fa6:	607a      	str	r2, [r7, #4]
 8028fa8:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028faa:	69bb      	ldr	r3, [r7, #24]
 8028fac:	9301      	str	r3, [sp, #4]
 8028fae:	683b      	ldr	r3, [r7, #0]
 8028fb0:	9300      	str	r3, [sp, #0]
 8028fb2:	687b      	ldr	r3, [r7, #4]
 8028fb4:	68ba      	ldr	r2, [r7, #8]
 8028fb6:	68f9      	ldr	r1, [r7, #12]
 8028fb8:	2003      	movs	r0, #3
 8028fba:	f7ff fc89 	bl	80288d0 <bhy2_hif_get_fifo>
 8028fbe:	4603      	mov	r3, r0
}
 8028fc0:	4618      	mov	r0, r3
 8028fc2:	3710      	adds	r7, #16
 8028fc4:	46bd      	mov	sp, r7
 8028fc6:	bd80      	pop	{r7, pc}

08028fc8 <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 8028fc8:	b580      	push	{r7, lr}
 8028fca:	b088      	sub	sp, #32
 8028fcc:	af00      	add	r7, sp, #0
 8028fce:	4603      	mov	r3, r0
 8028fd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8028fd4:	6079      	str	r1, [r7, #4]
 8028fd6:	603a      	str	r2, [r7, #0]
 8028fd8:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 8028fda:	68bb      	ldr	r3, [r7, #8]
 8028fdc:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 8028fde:	7bfb      	ldrb	r3, [r7, #15]
 8028fe0:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 8028fe2:	697b      	ldr	r3, [r7, #20]
 8028fe4:	b2db      	uxtb	r3, r3
 8028fe6:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 8028fe8:	697b      	ldr	r3, [r7, #20]
 8028fea:	0a1b      	lsrs	r3, r3, #8
 8028fec:	b2db      	uxtb	r3, r3
 8028fee:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 8028ff0:	697b      	ldr	r3, [r7, #20]
 8028ff2:	0c1b      	lsrs	r3, r3, #16
 8028ff4:	b2db      	uxtb	r3, r3
 8028ff6:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 8028ff8:	697b      	ldr	r3, [r7, #20]
 8028ffa:	0e1b      	lsrs	r3, r3, #24
 8028ffc:	b2db      	uxtb	r3, r3
 8028ffe:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 8029000:	687b      	ldr	r3, [r7, #4]
 8029002:	b2db      	uxtb	r3, r3
 8029004:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 8029006:	687b      	ldr	r3, [r7, #4]
 8029008:	0a1b      	lsrs	r3, r3, #8
 802900a:	b2db      	uxtb	r3, r3
 802900c:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 802900e:	687b      	ldr	r3, [r7, #4]
 8029010:	0c1b      	lsrs	r3, r3, #16
 8029012:	b2db      	uxtb	r3, r3
 8029014:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 8029016:	f107 0118 	add.w	r1, r7, #24
 802901a:	683b      	ldr	r3, [r7, #0]
 802901c:	2208      	movs	r2, #8
 802901e:	200d      	movs	r0, #13
 8029020:	f7ff fdaf 	bl	8028b82 <bhy2_hif_exec_cmd>
 8029024:	4603      	mov	r3, r0
}
 8029026:	4618      	mov	r0, r3
 8029028:	3720      	adds	r7, #32
 802902a:	46bd      	mov	sp, r7
 802902c:	bd80      	pop	{r7, pc}

0802902e <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 802902e:	b580      	push	{r7, lr}
 8029030:	b090      	sub	sp, #64	; 0x40
 8029032:	af02      	add	r7, sp, #8
 8029034:	4603      	mov	r3, r0
 8029036:	60b9      	str	r1, [r7, #8]
 8029038:	607a      	str	r2, [r7, #4]
 802903a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 802903c:	68bb      	ldr	r3, [r7, #8]
 802903e:	2b00      	cmp	r3, #0
 8029040:	f000 80da 	beq.w	80291f8 <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 8029044:	7bfb      	ldrb	r3, [r7, #15]
 8029046:	2bf5      	cmp	r3, #245	; 0xf5
 8029048:	d903      	bls.n	8029052 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 802904a:	23fe      	movs	r3, #254	; 0xfe
 802904c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8029050:	e0d5      	b.n	80291fe <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 8029052:	7bfb      	ldrb	r3, [r7, #15]
 8029054:	b29b      	uxth	r3, r3
 8029056:	f503 7340 	add.w	r3, r3, #768	; 0x300
 802905a:	b298      	uxth	r0, r3
 802905c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8029060:	f107 0114 	add.w	r1, r7, #20
 8029064:	687b      	ldr	r3, [r7, #4]
 8029066:	9300      	str	r3, [sp, #0]
 8029068:	4613      	mov	r3, r2
 802906a:	221c      	movs	r2, #28
 802906c:	f7ff fda2 	bl	8028bb4 <bhy2_hif_get_parameter>
 8029070:	4603      	mov	r3, r0
 8029072:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 8029076:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 802907a:	2b00      	cmp	r3, #0
 802907c:	f040 80bf 	bne.w	80291fe <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 8029080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029082:	2b1c      	cmp	r3, #28
 8029084:	d003      	beq.n	802908e <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 8029086:	23fe      	movs	r3, #254	; 0xfe
 8029088:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802908c:	e0b7      	b.n	80291fe <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 802908e:	7d3a      	ldrb	r2, [r7, #20]
 8029090:	68bb      	ldr	r3, [r7, #8]
 8029092:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 8029094:	7d7a      	ldrb	r2, [r7, #21]
 8029096:	68bb      	ldr	r3, [r7, #8]
 8029098:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 802909a:	7dba      	ldrb	r2, [r7, #22]
 802909c:	68bb      	ldr	r3, [r7, #8]
 802909e:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 80290a0:	7dfa      	ldrb	r2, [r7, #23]
 80290a2:	68bb      	ldr	r3, [r7, #8]
 80290a4:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 80290a6:	7e3a      	ldrb	r2, [r7, #24]
 80290a8:	68bb      	ldr	r3, [r7, #8]
 80290aa:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 80290ac:	7e7a      	ldrb	r2, [r7, #25]
 80290ae:	68bb      	ldr	r3, [r7, #8]
 80290b0:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 80290b2:	7eba      	ldrb	r2, [r7, #26]
 80290b4:	68bb      	ldr	r3, [r7, #8]
 80290b6:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 80290b8:	7efa      	ldrb	r2, [r7, #27]
 80290ba:	68bb      	ldr	r3, [r7, #8]
 80290bc:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 80290be:	7f3a      	ldrb	r2, [r7, #28]
 80290c0:	68bb      	ldr	r3, [r7, #8]
 80290c2:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 80290c4:	7f7a      	ldrb	r2, [r7, #29]
 80290c6:	68bb      	ldr	r3, [r7, #8]
 80290c8:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 80290ca:	7fba      	ldrb	r2, [r7, #30]
 80290cc:	68bb      	ldr	r3, [r7, #8]
 80290ce:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 80290d0:	7ffa      	ldrb	r2, [r7, #31]
 80290d2:	68bb      	ldr	r3, [r7, #8]
 80290d4:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 80290d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80290da:	68bb      	ldr	r3, [r7, #8]
 80290dc:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 80290de:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80290e2:	68bb      	ldr	r3, [r7, #8]
 80290e4:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 80290e6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80290ea:	68bb      	ldr	r3, [r7, #8]
 80290ec:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 80290ee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80290f2:	68bb      	ldr	r3, [r7, #8]
 80290f4:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 80290f6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80290fa:	68bb      	ldr	r3, [r7, #8]
 80290fc:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 80290fe:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8029102:	68bb      	ldr	r3, [r7, #8]
 8029104:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 8029106:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802910a:	68bb      	ldr	r3, [r7, #8]
 802910c:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 802910e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8029112:	68bb      	ldr	r3, [r7, #8]
 8029114:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 8029116:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802911a:	68bb      	ldr	r3, [r7, #8]
 802911c:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 802911e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8029122:	68bb      	ldr	r3, [r7, #8]
 8029124:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 8029126:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 802912a:	68bb      	ldr	r3, [r7, #8]
 802912c:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 802912e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8029132:	68bb      	ldr	r3, [r7, #8]
 8029134:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 8029136:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802913a:	68bb      	ldr	r3, [r7, #8]
 802913c:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 802913e:	68bb      	ldr	r3, [r7, #8]
 8029140:	791b      	ldrb	r3, [r3, #4]
 8029142:	b21a      	sxth	r2, r3
 8029144:	68bb      	ldr	r3, [r7, #8]
 8029146:	795b      	ldrb	r3, [r3, #5]
 8029148:	021b      	lsls	r3, r3, #8
 802914a:	b21b      	sxth	r3, r3
 802914c:	4313      	orrs	r3, r2
 802914e:	b21b      	sxth	r3, r3
 8029150:	b29a      	uxth	r2, r3
 8029152:	68bb      	ldr	r3, [r7, #8]
 8029154:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 8029156:	68bb      	ldr	r3, [r7, #8]
 8029158:	799b      	ldrb	r3, [r3, #6]
 802915a:	b21a      	sxth	r2, r3
 802915c:	68bb      	ldr	r3, [r7, #8]
 802915e:	79db      	ldrb	r3, [r3, #7]
 8029160:	021b      	lsls	r3, r3, #8
 8029162:	b21b      	sxth	r3, r3
 8029164:	4313      	orrs	r3, r2
 8029166:	b21b      	sxth	r3, r3
 8029168:	b29a      	uxth	r2, r3
 802916a:	68bb      	ldr	r3, [r7, #8]
 802916c:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 802916e:	68bb      	ldr	r3, [r7, #8]
 8029170:	7a1b      	ldrb	r3, [r3, #8]
 8029172:	461a      	mov	r2, r3
 8029174:	68bb      	ldr	r3, [r7, #8]
 8029176:	7a5b      	ldrb	r3, [r3, #9]
 8029178:	021b      	lsls	r3, r3, #8
 802917a:	431a      	orrs	r2, r3
 802917c:	68bb      	ldr	r3, [r7, #8]
 802917e:	7a9b      	ldrb	r3, [r3, #10]
 8029180:	041b      	lsls	r3, r3, #16
 8029182:	431a      	orrs	r2, r3
 8029184:	68bb      	ldr	r3, [r7, #8]
 8029186:	7adb      	ldrb	r3, [r3, #11]
 8029188:	061b      	lsls	r3, r3, #24
 802918a:	431a      	orrs	r2, r3
 802918c:	68bb      	ldr	r3, [r7, #8]
 802918e:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 8029190:	68bb      	ldr	r3, [r7, #8]
 8029192:	7b1b      	ldrb	r3, [r3, #12]
 8029194:	461a      	mov	r2, r3
 8029196:	68bb      	ldr	r3, [r7, #8]
 8029198:	7b5b      	ldrb	r3, [r3, #13]
 802919a:	021b      	lsls	r3, r3, #8
 802919c:	431a      	orrs	r2, r3
 802919e:	68bb      	ldr	r3, [r7, #8]
 80291a0:	7b9b      	ldrb	r3, [r3, #14]
 80291a2:	041b      	lsls	r3, r3, #16
 80291a4:	431a      	orrs	r2, r3
 80291a6:	68bb      	ldr	r3, [r7, #8]
 80291a8:	7bdb      	ldrb	r3, [r3, #15]
 80291aa:	061b      	lsls	r3, r3, #24
 80291ac:	431a      	orrs	r2, r3
 80291ae:	68bb      	ldr	r3, [r7, #8]
 80291b0:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 80291b2:	68bb      	ldr	r3, [r7, #8]
 80291b4:	7c1b      	ldrb	r3, [r3, #16]
 80291b6:	461a      	mov	r2, r3
 80291b8:	68bb      	ldr	r3, [r7, #8]
 80291ba:	7c5b      	ldrb	r3, [r3, #17]
 80291bc:	021b      	lsls	r3, r3, #8
 80291be:	431a      	orrs	r2, r3
 80291c0:	68bb      	ldr	r3, [r7, #8]
 80291c2:	7c9b      	ldrb	r3, [r3, #18]
 80291c4:	041b      	lsls	r3, r3, #16
 80291c6:	431a      	orrs	r2, r3
 80291c8:	68bb      	ldr	r3, [r7, #8]
 80291ca:	7cdb      	ldrb	r3, [r3, #19]
 80291cc:	061b      	lsls	r3, r3, #24
 80291ce:	431a      	orrs	r2, r3
 80291d0:	68bb      	ldr	r3, [r7, #8]
 80291d2:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 80291d4:	68bb      	ldr	r3, [r7, #8]
 80291d6:	7e1b      	ldrb	r3, [r3, #24]
 80291d8:	461a      	mov	r2, r3
 80291da:	68bb      	ldr	r3, [r7, #8]
 80291dc:	7e5b      	ldrb	r3, [r3, #25]
 80291de:	021b      	lsls	r3, r3, #8
 80291e0:	431a      	orrs	r2, r3
 80291e2:	68bb      	ldr	r3, [r7, #8]
 80291e4:	7e9b      	ldrb	r3, [r3, #26]
 80291e6:	041b      	lsls	r3, r3, #16
 80291e8:	431a      	orrs	r2, r3
 80291ea:	68bb      	ldr	r3, [r7, #8]
 80291ec:	7edb      	ldrb	r3, [r3, #27]
 80291ee:	061b      	lsls	r3, r3, #24
 80291f0:	431a      	orrs	r2, r3
 80291f2:	68bb      	ldr	r3, [r7, #8]
 80291f4:	619a      	str	r2, [r3, #24]
 80291f6:	e002      	b.n	80291fe <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80291f8:	23ff      	movs	r3, #255	; 0xff
 80291fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 80291fe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8029202:	4618      	mov	r0, r3
 8029204:	3738      	adds	r7, #56	; 0x38
 8029206:	46bd      	mov	sp, r7
 8029208:	bd80      	pop	{r7, pc}

0802920a <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 802920a:	b480      	push	{r7}
 802920c:	b083      	sub	sp, #12
 802920e:	af00      	add	r7, sp, #0
 8029210:	6078      	str	r0, [r7, #4]
 8029212:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 8029214:	687b      	ldr	r3, [r7, #4]
 8029216:	781b      	ldrb	r3, [r3, #0]
 8029218:	b21a      	sxth	r2, r3
 802921a:	687b      	ldr	r3, [r7, #4]
 802921c:	3301      	adds	r3, #1
 802921e:	781b      	ldrb	r3, [r3, #0]
 8029220:	021b      	lsls	r3, r3, #8
 8029222:	b21b      	sxth	r3, r3
 8029224:	4313      	orrs	r3, r2
 8029226:	b21a      	sxth	r2, r3
 8029228:	683b      	ldr	r3, [r7, #0]
 802922a:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 802922c:	687b      	ldr	r3, [r7, #4]
 802922e:	3302      	adds	r3, #2
 8029230:	781b      	ldrb	r3, [r3, #0]
 8029232:	b21a      	sxth	r2, r3
 8029234:	687b      	ldr	r3, [r7, #4]
 8029236:	3303      	adds	r3, #3
 8029238:	781b      	ldrb	r3, [r3, #0]
 802923a:	021b      	lsls	r3, r3, #8
 802923c:	b21b      	sxth	r3, r3
 802923e:	4313      	orrs	r3, r2
 8029240:	b21a      	sxth	r2, r3
 8029242:	683b      	ldr	r3, [r7, #0]
 8029244:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 8029246:	687b      	ldr	r3, [r7, #4]
 8029248:	3304      	adds	r3, #4
 802924a:	781b      	ldrb	r3, [r3, #0]
 802924c:	b21a      	sxth	r2, r3
 802924e:	687b      	ldr	r3, [r7, #4]
 8029250:	3305      	adds	r3, #5
 8029252:	781b      	ldrb	r3, [r3, #0]
 8029254:	021b      	lsls	r3, r3, #8
 8029256:	b21b      	sxth	r3, r3
 8029258:	4313      	orrs	r3, r2
 802925a:	b21a      	sxth	r2, r3
 802925c:	683b      	ldr	r3, [r7, #0]
 802925e:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 8029260:	687b      	ldr	r3, [r7, #4]
 8029262:	3306      	adds	r3, #6
 8029264:	781b      	ldrb	r3, [r3, #0]
 8029266:	b21a      	sxth	r2, r3
 8029268:	687b      	ldr	r3, [r7, #4]
 802926a:	3307      	adds	r3, #7
 802926c:	781b      	ldrb	r3, [r3, #0]
 802926e:	021b      	lsls	r3, r3, #8
 8029270:	b21b      	sxth	r3, r3
 8029272:	4313      	orrs	r3, r2
 8029274:	b21a      	sxth	r2, r3
 8029276:	683b      	ldr	r3, [r7, #0]
 8029278:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 802927a:	687b      	ldr	r3, [r7, #4]
 802927c:	3308      	adds	r3, #8
 802927e:	781b      	ldrb	r3, [r3, #0]
 8029280:	b21a      	sxth	r2, r3
 8029282:	687b      	ldr	r3, [r7, #4]
 8029284:	3309      	adds	r3, #9
 8029286:	781b      	ldrb	r3, [r3, #0]
 8029288:	021b      	lsls	r3, r3, #8
 802928a:	b21b      	sxth	r3, r3
 802928c:	4313      	orrs	r3, r2
 802928e:	b21b      	sxth	r3, r3
 8029290:	b29a      	uxth	r2, r3
 8029292:	683b      	ldr	r3, [r7, #0]
 8029294:	811a      	strh	r2, [r3, #8]
}
 8029296:	bf00      	nop
 8029298:	370c      	adds	r7, #12
 802929a:	46bd      	mov	sp, r7
 802929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292a0:	4770      	bx	lr
	...

080292a4 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 80292a4:	b580      	push	{r7, lr}
 80292a6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80292a8:	4b12      	ldr	r3, [pc, #72]	; (80292f4 <MX_COMP2_Init+0x50>)
 80292aa:	4a13      	ldr	r2, [pc, #76]	; (80292f8 <MX_COMP2_Init+0x54>)
 80292ac:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 80292ae:	4b11      	ldr	r3, [pc, #68]	; (80292f4 <MX_COMP2_Init+0x50>)
 80292b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80292b4:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 80292b6:	4b0f      	ldr	r3, [pc, #60]	; (80292f4 <MX_COMP2_Init+0x50>)
 80292b8:	2200      	movs	r2, #0
 80292ba:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80292bc:	4b0d      	ldr	r3, [pc, #52]	; (80292f4 <MX_COMP2_Init+0x50>)
 80292be:	2200      	movs	r2, #0
 80292c0:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80292c2:	4b0c      	ldr	r3, [pc, #48]	; (80292f4 <MX_COMP2_Init+0x50>)
 80292c4:	2200      	movs	r2, #0
 80292c6:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80292c8:	4b0a      	ldr	r3, [pc, #40]	; (80292f4 <MX_COMP2_Init+0x50>)
 80292ca:	2200      	movs	r2, #0
 80292cc:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80292ce:	4b09      	ldr	r3, [pc, #36]	; (80292f4 <MX_COMP2_Init+0x50>)
 80292d0:	2200      	movs	r2, #0
 80292d2:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80292d4:	4b07      	ldr	r3, [pc, #28]	; (80292f4 <MX_COMP2_Init+0x50>)
 80292d6:	2200      	movs	r2, #0
 80292d8:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80292da:	4b06      	ldr	r3, [pc, #24]	; (80292f4 <MX_COMP2_Init+0x50>)
 80292dc:	2231      	movs	r2, #49	; 0x31
 80292de:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80292e0:	4804      	ldr	r0, [pc, #16]	; (80292f4 <MX_COMP2_Init+0x50>)
 80292e2:	f001 fd1f 	bl	802ad24 <HAL_COMP_Init>
 80292e6:	4603      	mov	r3, r0
 80292e8:	2b00      	cmp	r3, #0
 80292ea:	d001      	beq.n	80292f0 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 80292ec:	f000 fc28 	bl	8029b40 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80292f0:	bf00      	nop
 80292f2:	bd80      	pop	{r7, pc}
 80292f4:	24024520 	.word	0x24024520
 80292f8:	58003810 	.word	0x58003810

080292fc <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80292fc:	b580      	push	{r7, lr}
 80292fe:	b08a      	sub	sp, #40	; 0x28
 8029300:	af00      	add	r7, sp, #0
 8029302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029304:	f107 0314 	add.w	r3, r7, #20
 8029308:	2200      	movs	r2, #0
 802930a:	601a      	str	r2, [r3, #0]
 802930c:	605a      	str	r2, [r3, #4]
 802930e:	609a      	str	r2, [r3, #8]
 8029310:	60da      	str	r2, [r3, #12]
 8029312:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 8029314:	687b      	ldr	r3, [r7, #4]
 8029316:	681b      	ldr	r3, [r3, #0]
 8029318:	4a1c      	ldr	r2, [pc, #112]	; (802938c <HAL_COMP_MspInit+0x90>)
 802931a:	4293      	cmp	r3, r2
 802931c:	d132      	bne.n	8029384 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 802931e:	4b1c      	ldr	r3, [pc, #112]	; (8029390 <HAL_COMP_MspInit+0x94>)
 8029320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029324:	4a1a      	ldr	r2, [pc, #104]	; (8029390 <HAL_COMP_MspInit+0x94>)
 8029326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802932a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802932e:	4b18      	ldr	r3, [pc, #96]	; (8029390 <HAL_COMP_MspInit+0x94>)
 8029330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8029338:	613b      	str	r3, [r7, #16]
 802933a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 802933c:	4b14      	ldr	r3, [pc, #80]	; (8029390 <HAL_COMP_MspInit+0x94>)
 802933e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029342:	4a13      	ldr	r2, [pc, #76]	; (8029390 <HAL_COMP_MspInit+0x94>)
 8029344:	f043 0310 	orr.w	r3, r3, #16
 8029348:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802934c:	4b10      	ldr	r3, [pc, #64]	; (8029390 <HAL_COMP_MspInit+0x94>)
 802934e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029352:	f003 0310 	and.w	r3, r3, #16
 8029356:	60fb      	str	r3, [r7, #12]
 8029358:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 802935a:	f44f 7300 	mov.w	r3, #512	; 0x200
 802935e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8029360:	2303      	movs	r3, #3
 8029362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029364:	2300      	movs	r3, #0
 8029366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8029368:	f107 0314 	add.w	r3, r7, #20
 802936c:	4619      	mov	r1, r3
 802936e:	4809      	ldr	r0, [pc, #36]	; (8029394 <HAL_COMP_MspInit+0x98>)
 8029370:	f004 ffee 	bl	802e350 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 4, 0);
 8029374:	2200      	movs	r2, #0
 8029376:	2104      	movs	r1, #4
 8029378:	2089      	movs	r0, #137	; 0x89
 802937a:	f001 ff96 	bl	802b2aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 802937e:	2089      	movs	r0, #137	; 0x89
 8029380:	f001 ffad 	bl	802b2de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 8029384:	bf00      	nop
 8029386:	3728      	adds	r7, #40	; 0x28
 8029388:	46bd      	mov	sp, r7
 802938a:	bd80      	pop	{r7, pc}
 802938c:	58003810 	.word	0x58003810
 8029390:	58024400 	.word	0x58024400
 8029394:	58021000 	.word	0x58021000

08029398 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8029398:	b580      	push	{r7, lr}
 802939a:	b08a      	sub	sp, #40	; 0x28
 802939c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 802939e:	1d3b      	adds	r3, r7, #4
 80293a0:	2224      	movs	r2, #36	; 0x24
 80293a2:	2100      	movs	r1, #0
 80293a4:	4618      	mov	r0, r3
 80293a6:	f012 fd8d 	bl	803bec4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80293aa:	4b12      	ldr	r3, [pc, #72]	; (80293f4 <MX_DAC1_Init+0x5c>)
 80293ac:	4a12      	ldr	r2, [pc, #72]	; (80293f8 <MX_DAC1_Init+0x60>)
 80293ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80293b0:	4810      	ldr	r0, [pc, #64]	; (80293f4 <MX_DAC1_Init+0x5c>)
 80293b2:	f001 ffae 	bl	802b312 <HAL_DAC_Init>
 80293b6:	4603      	mov	r3, r0
 80293b8:	2b00      	cmp	r3, #0
 80293ba:	d001      	beq.n	80293c0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80293bc:	f000 fbc0 	bl	8029b40 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80293c0:	2300      	movs	r3, #0
 80293c2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80293c4:	2300      	movs	r3, #0
 80293c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80293c8:	2302      	movs	r3, #2
 80293ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80293cc:	2302      	movs	r3, #2
 80293ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80293d0:	2300      	movs	r3, #0
 80293d2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80293d4:	1d3b      	adds	r3, r7, #4
 80293d6:	2200      	movs	r2, #0
 80293d8:	4619      	mov	r1, r3
 80293da:	4806      	ldr	r0, [pc, #24]	; (80293f4 <MX_DAC1_Init+0x5c>)
 80293dc:	f002 f832 	bl	802b444 <HAL_DAC_ConfigChannel>
 80293e0:	4603      	mov	r3, r0
 80293e2:	2b00      	cmp	r3, #0
 80293e4:	d001      	beq.n	80293ea <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80293e6:	f000 fbab 	bl	8029b40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80293ea:	bf00      	nop
 80293ec:	3728      	adds	r7, #40	; 0x28
 80293ee:	46bd      	mov	sp, r7
 80293f0:	bd80      	pop	{r7, pc}
 80293f2:	bf00      	nop
 80293f4:	2402454c 	.word	0x2402454c
 80293f8:	40007400 	.word	0x40007400

080293fc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80293fc:	b480      	push	{r7}
 80293fe:	b085      	sub	sp, #20
 8029400:	af00      	add	r7, sp, #0
 8029402:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8029404:	687b      	ldr	r3, [r7, #4]
 8029406:	681b      	ldr	r3, [r3, #0]
 8029408:	4a0b      	ldr	r2, [pc, #44]	; (8029438 <HAL_DAC_MspInit+0x3c>)
 802940a:	4293      	cmp	r3, r2
 802940c:	d10e      	bne.n	802942c <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 802940e:	4b0b      	ldr	r3, [pc, #44]	; (802943c <HAL_DAC_MspInit+0x40>)
 8029410:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029414:	4a09      	ldr	r2, [pc, #36]	; (802943c <HAL_DAC_MspInit+0x40>)
 8029416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802941a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802941e:	4b07      	ldr	r3, [pc, #28]	; (802943c <HAL_DAC_MspInit+0x40>)
 8029420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8029428:	60fb      	str	r3, [r7, #12]
 802942a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 802942c:	bf00      	nop
 802942e:	3714      	adds	r7, #20
 8029430:	46bd      	mov	sp, r7
 8029432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029436:	4770      	bx	lr
 8029438:	40007400 	.word	0x40007400
 802943c:	58024400 	.word	0x58024400

08029440 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8029440:	b580      	push	{r7, lr}
 8029442:	b082      	sub	sp, #8
 8029444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8029446:	4b19      	ldr	r3, [pc, #100]	; (80294ac <MX_DMA_Init+0x6c>)
 8029448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802944c:	4a17      	ldr	r2, [pc, #92]	; (80294ac <MX_DMA_Init+0x6c>)
 802944e:	f043 0301 	orr.w	r3, r3, #1
 8029452:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8029456:	4b15      	ldr	r3, [pc, #84]	; (80294ac <MX_DMA_Init+0x6c>)
 8029458:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802945c:	f003 0301 	and.w	r3, r3, #1
 8029460:	607b      	str	r3, [r7, #4]
 8029462:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8029464:	2200      	movs	r2, #0
 8029466:	2100      	movs	r1, #0
 8029468:	200b      	movs	r0, #11
 802946a:	f001 ff1e 	bl	802b2aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 802946e:	200b      	movs	r0, #11
 8029470:	f001 ff35 	bl	802b2de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8029474:	2200      	movs	r2, #0
 8029476:	2100      	movs	r1, #0
 8029478:	200c      	movs	r0, #12
 802947a:	f001 ff16 	bl	802b2aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 802947e:	200c      	movs	r0, #12
 8029480:	f001 ff2d 	bl	802b2de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8029484:	2200      	movs	r2, #0
 8029486:	2100      	movs	r1, #0
 8029488:	200f      	movs	r0, #15
 802948a:	f001 ff0e 	bl	802b2aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 802948e:	200f      	movs	r0, #15
 8029490:	f001 ff25 	bl	802b2de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8029494:	2200      	movs	r2, #0
 8029496:	2100      	movs	r1, #0
 8029498:	2010      	movs	r0, #16
 802949a:	f001 ff06 	bl	802b2aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 802949e:	2010      	movs	r0, #16
 80294a0:	f001 ff1d 	bl	802b2de <HAL_NVIC_EnableIRQ>

}
 80294a4:	bf00      	nop
 80294a6:	3708      	adds	r7, #8
 80294a8:	46bd      	mov	sp, r7
 80294aa:	bd80      	pop	{r7, pc}
 80294ac:	58024400 	.word	0x58024400

080294b0 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80294b0:	b580      	push	{r7, lr}
 80294b2:	b08a      	sub	sp, #40	; 0x28
 80294b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80294b6:	f107 0314 	add.w	r3, r7, #20
 80294ba:	2200      	movs	r2, #0
 80294bc:	601a      	str	r2, [r3, #0]
 80294be:	605a      	str	r2, [r3, #4]
 80294c0:	609a      	str	r2, [r3, #8]
 80294c2:	60da      	str	r2, [r3, #12]
 80294c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80294c6:	4b3b      	ldr	r3, [pc, #236]	; (80295b4 <MX_GPIO_Init+0x104>)
 80294c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294cc:	4a39      	ldr	r2, [pc, #228]	; (80295b4 <MX_GPIO_Init+0x104>)
 80294ce:	f043 0304 	orr.w	r3, r3, #4
 80294d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80294d6:	4b37      	ldr	r3, [pc, #220]	; (80295b4 <MX_GPIO_Init+0x104>)
 80294d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294dc:	f003 0304 	and.w	r3, r3, #4
 80294e0:	613b      	str	r3, [r7, #16]
 80294e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80294e4:	4b33      	ldr	r3, [pc, #204]	; (80295b4 <MX_GPIO_Init+0x104>)
 80294e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294ea:	4a32      	ldr	r2, [pc, #200]	; (80295b4 <MX_GPIO_Init+0x104>)
 80294ec:	f043 0301 	orr.w	r3, r3, #1
 80294f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80294f4:	4b2f      	ldr	r3, [pc, #188]	; (80295b4 <MX_GPIO_Init+0x104>)
 80294f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294fa:	f003 0301 	and.w	r3, r3, #1
 80294fe:	60fb      	str	r3, [r7, #12]
 8029500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8029502:	4b2c      	ldr	r3, [pc, #176]	; (80295b4 <MX_GPIO_Init+0x104>)
 8029504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029508:	4a2a      	ldr	r2, [pc, #168]	; (80295b4 <MX_GPIO_Init+0x104>)
 802950a:	f043 0310 	orr.w	r3, r3, #16
 802950e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029512:	4b28      	ldr	r3, [pc, #160]	; (80295b4 <MX_GPIO_Init+0x104>)
 8029514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029518:	f003 0310 	and.w	r3, r3, #16
 802951c:	60bb      	str	r3, [r7, #8]
 802951e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8029520:	4b24      	ldr	r3, [pc, #144]	; (80295b4 <MX_GPIO_Init+0x104>)
 8029522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029526:	4a23      	ldr	r2, [pc, #140]	; (80295b4 <MX_GPIO_Init+0x104>)
 8029528:	f043 0302 	orr.w	r3, r3, #2
 802952c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029530:	4b20      	ldr	r3, [pc, #128]	; (80295b4 <MX_GPIO_Init+0x104>)
 8029532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029536:	f003 0302 	and.w	r3, r3, #2
 802953a:	607b      	str	r3, [r7, #4]
 802953c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802953e:	4b1d      	ldr	r3, [pc, #116]	; (80295b4 <MX_GPIO_Init+0x104>)
 8029540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029544:	4a1b      	ldr	r2, [pc, #108]	; (80295b4 <MX_GPIO_Init+0x104>)
 8029546:	f043 0308 	orr.w	r3, r3, #8
 802954a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802954e:	4b19      	ldr	r3, [pc, #100]	; (80295b4 <MX_GPIO_Init+0x104>)
 8029550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029554:	f003 0308 	and.w	r3, r3, #8
 8029558:	603b      	str	r3, [r7, #0]
 802955a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 802955c:	2200      	movs	r2, #0
 802955e:	2101      	movs	r1, #1
 8029560:	4815      	ldr	r0, [pc, #84]	; (80295b8 <MX_GPIO_Init+0x108>)
 8029562:	f005 f8a5 	bl	802e6b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8029566:	2200      	movs	r2, #0
 8029568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802956c:	4813      	ldr	r0, [pc, #76]	; (80295bc <MX_GPIO_Init+0x10c>)
 802956e:	f005 f89f 	bl	802e6b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 8029572:	2301      	movs	r3, #1
 8029574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8029576:	2301      	movs	r3, #1
 8029578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802957a:	2302      	movs	r3, #2
 802957c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802957e:	2303      	movs	r3, #3
 8029580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 8029582:	f107 0314 	add.w	r3, r7, #20
 8029586:	4619      	mov	r1, r3
 8029588:	480b      	ldr	r0, [pc, #44]	; (80295b8 <MX_GPIO_Init+0x108>)
 802958a:	f004 fee1 	bl	802e350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 802958e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8029594:	2301      	movs	r3, #1
 8029596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8029598:	2302      	movs	r3, #2
 802959a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802959c:	2303      	movs	r3, #3
 802959e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80295a0:	f107 0314 	add.w	r3, r7, #20
 80295a4:	4619      	mov	r1, r3
 80295a6:	4805      	ldr	r0, [pc, #20]	; (80295bc <MX_GPIO_Init+0x10c>)
 80295a8:	f004 fed2 	bl	802e350 <HAL_GPIO_Init>

}
 80295ac:	bf00      	nop
 80295ae:	3728      	adds	r7, #40	; 0x28
 80295b0:	46bd      	mov	sp, r7
 80295b2:	bd80      	pop	{r7, pc}
 80295b4:	58024400 	.word	0x58024400
 80295b8:	58020800 	.word	0x58020800
 80295bc:	58021000 	.word	0x58021000

080295c0 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80295c0:	b580      	push	{r7, lr}
 80295c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80295c4:	4b1b      	ldr	r3, [pc, #108]	; (8029634 <MX_I2C2_Init+0x74>)
 80295c6:	4a1c      	ldr	r2, [pc, #112]	; (8029638 <MX_I2C2_Init+0x78>)
 80295c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 80295ca:	4b1a      	ldr	r3, [pc, #104]	; (8029634 <MX_I2C2_Init+0x74>)
 80295cc:	4a1b      	ldr	r2, [pc, #108]	; (802963c <MX_I2C2_Init+0x7c>)
 80295ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80295d0:	4b18      	ldr	r3, [pc, #96]	; (8029634 <MX_I2C2_Init+0x74>)
 80295d2:	2200      	movs	r2, #0
 80295d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80295d6:	4b17      	ldr	r3, [pc, #92]	; (8029634 <MX_I2C2_Init+0x74>)
 80295d8:	2201      	movs	r2, #1
 80295da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80295dc:	4b15      	ldr	r3, [pc, #84]	; (8029634 <MX_I2C2_Init+0x74>)
 80295de:	2200      	movs	r2, #0
 80295e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80295e2:	4b14      	ldr	r3, [pc, #80]	; (8029634 <MX_I2C2_Init+0x74>)
 80295e4:	2200      	movs	r2, #0
 80295e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80295e8:	4b12      	ldr	r3, [pc, #72]	; (8029634 <MX_I2C2_Init+0x74>)
 80295ea:	2200      	movs	r2, #0
 80295ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80295ee:	4b11      	ldr	r3, [pc, #68]	; (8029634 <MX_I2C2_Init+0x74>)
 80295f0:	2200      	movs	r2, #0
 80295f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80295f4:	4b0f      	ldr	r3, [pc, #60]	; (8029634 <MX_I2C2_Init+0x74>)
 80295f6:	2200      	movs	r2, #0
 80295f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80295fa:	480e      	ldr	r0, [pc, #56]	; (8029634 <MX_I2C2_Init+0x74>)
 80295fc:	f005 f872 	bl	802e6e4 <HAL_I2C_Init>
 8029600:	4603      	mov	r3, r0
 8029602:	2b00      	cmp	r3, #0
 8029604:	d001      	beq.n	802960a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8029606:	f000 fa9b 	bl	8029b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 802960a:	2100      	movs	r1, #0
 802960c:	4809      	ldr	r0, [pc, #36]	; (8029634 <MX_I2C2_Init+0x74>)
 802960e:	f005 ff7e 	bl	802f50e <HAL_I2CEx_ConfigAnalogFilter>
 8029612:	4603      	mov	r3, r0
 8029614:	2b00      	cmp	r3, #0
 8029616:	d001      	beq.n	802961c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8029618:	f000 fa92 	bl	8029b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 802961c:	2100      	movs	r1, #0
 802961e:	4805      	ldr	r0, [pc, #20]	; (8029634 <MX_I2C2_Init+0x74>)
 8029620:	f005 ffc0 	bl	802f5a4 <HAL_I2CEx_ConfigDigitalFilter>
 8029624:	4603      	mov	r3, r0
 8029626:	2b00      	cmp	r3, #0
 8029628:	d001      	beq.n	802962e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 802962a:	f000 fa89 	bl	8029b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 802962e:	bf00      	nop
 8029630:	bd80      	pop	{r7, pc}
 8029632:	bf00      	nop
 8029634:	24024560 	.word	0x24024560
 8029638:	40005800 	.word	0x40005800
 802963c:	00b03fdb 	.word	0x00b03fdb

08029640 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8029640:	b580      	push	{r7, lr}
 8029642:	b0b8      	sub	sp, #224	; 0xe0
 8029644:	af00      	add	r7, sp, #0
 8029646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029648:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802964c:	2200      	movs	r2, #0
 802964e:	601a      	str	r2, [r3, #0]
 8029650:	605a      	str	r2, [r3, #4]
 8029652:	609a      	str	r2, [r3, #8]
 8029654:	60da      	str	r2, [r3, #12]
 8029656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029658:	f107 0310 	add.w	r3, r7, #16
 802965c:	22bc      	movs	r2, #188	; 0xbc
 802965e:	2100      	movs	r1, #0
 8029660:	4618      	mov	r0, r3
 8029662:	f012 fc2f 	bl	803bec4 <memset>
  if(i2cHandle->Instance==I2C2)
 8029666:	687b      	ldr	r3, [r7, #4]
 8029668:	681b      	ldr	r3, [r3, #0]
 802966a:	4a5a      	ldr	r2, [pc, #360]	; (80297d4 <HAL_I2C_MspInit+0x194>)
 802966c:	4293      	cmp	r3, r2
 802966e:	f040 80ad 	bne.w	80297cc <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8029672:	2308      	movs	r3, #8
 8029674:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8029676:	2300      	movs	r3, #0
 8029678:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802967c:	f107 0310 	add.w	r3, r7, #16
 8029680:	4618      	mov	r0, r3
 8029682:	f008 fab5 	bl	8031bf0 <HAL_RCCEx_PeriphCLKConfig>
 8029686:	4603      	mov	r3, r0
 8029688:	2b00      	cmp	r3, #0
 802968a:	d001      	beq.n	8029690 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 802968c:	f000 fa58 	bl	8029b40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8029690:	4b51      	ldr	r3, [pc, #324]	; (80297d8 <HAL_I2C_MspInit+0x198>)
 8029692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029696:	4a50      	ldr	r2, [pc, #320]	; (80297d8 <HAL_I2C_MspInit+0x198>)
 8029698:	f043 0302 	orr.w	r3, r3, #2
 802969c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80296a0:	4b4d      	ldr	r3, [pc, #308]	; (80297d8 <HAL_I2C_MspInit+0x198>)
 80296a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80296a6:	f003 0302 	and.w	r3, r3, #2
 80296aa:	60fb      	str	r3, [r7, #12]
 80296ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80296ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80296b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80296b6:	2312      	movs	r3, #18
 80296b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80296bc:	2300      	movs	r3, #0
 80296be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80296c2:	2300      	movs	r3, #0
 80296c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80296c8:	2304      	movs	r3, #4
 80296ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80296ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80296d2:	4619      	mov	r1, r3
 80296d4:	4841      	ldr	r0, [pc, #260]	; (80297dc <HAL_I2C_MspInit+0x19c>)
 80296d6:	f004 fe3b 	bl	802e350 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80296da:	4b3f      	ldr	r3, [pc, #252]	; (80297d8 <HAL_I2C_MspInit+0x198>)
 80296dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80296e0:	4a3d      	ldr	r2, [pc, #244]	; (80297d8 <HAL_I2C_MspInit+0x198>)
 80296e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80296e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80296ea:	4b3b      	ldr	r3, [pc, #236]	; (80297d8 <HAL_I2C_MspInit+0x198>)
 80296ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80296f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80296f4:	60bb      	str	r3, [r7, #8]
 80296f6:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 80296f8:	4b39      	ldr	r3, [pc, #228]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 80296fa:	4a3a      	ldr	r2, [pc, #232]	; (80297e4 <HAL_I2C_MspInit+0x1a4>)
 80296fc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 80296fe:	4b38      	ldr	r3, [pc, #224]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 8029700:	2223      	movs	r2, #35	; 0x23
 8029702:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8029704:	4b36      	ldr	r3, [pc, #216]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 8029706:	2200      	movs	r2, #0
 8029708:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802970a:	4b35      	ldr	r3, [pc, #212]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 802970c:	2200      	movs	r2, #0
 802970e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8029710:	4b33      	ldr	r3, [pc, #204]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 8029712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029716:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029718:	4b31      	ldr	r3, [pc, #196]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 802971a:	2200      	movs	r2, #0
 802971c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802971e:	4b30      	ldr	r3, [pc, #192]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 8029720:	2200      	movs	r2, #0
 8029722:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8029724:	4b2e      	ldr	r3, [pc, #184]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 8029726:	2200      	movs	r2, #0
 8029728:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 802972a:	4b2d      	ldr	r3, [pc, #180]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 802972c:	2200      	movs	r2, #0
 802972e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029730:	4b2b      	ldr	r3, [pc, #172]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 8029732:	2200      	movs	r2, #0
 8029734:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8029736:	482a      	ldr	r0, [pc, #168]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 8029738:	f001 ffb4 	bl	802b6a4 <HAL_DMA_Init>
 802973c:	4603      	mov	r3, r0
 802973e:	2b00      	cmp	r3, #0
 8029740:	d001      	beq.n	8029746 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 8029742:	f000 f9fd 	bl	8029b40 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8029746:	687b      	ldr	r3, [r7, #4]
 8029748:	4a25      	ldr	r2, [pc, #148]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 802974a:	63da      	str	r2, [r3, #60]	; 0x3c
 802974c:	4a24      	ldr	r2, [pc, #144]	; (80297e0 <HAL_I2C_MspInit+0x1a0>)
 802974e:	687b      	ldr	r3, [r7, #4]
 8029750:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8029752:	4b25      	ldr	r3, [pc, #148]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 8029754:	4a25      	ldr	r2, [pc, #148]	; (80297ec <HAL_I2C_MspInit+0x1ac>)
 8029756:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8029758:	4b23      	ldr	r3, [pc, #140]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 802975a:	2224      	movs	r2, #36	; 0x24
 802975c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802975e:	4b22      	ldr	r3, [pc, #136]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 8029760:	2240      	movs	r2, #64	; 0x40
 8029762:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029764:	4b20      	ldr	r3, [pc, #128]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 8029766:	2200      	movs	r2, #0
 8029768:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 802976a:	4b1f      	ldr	r3, [pc, #124]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 802976c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029770:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029772:	4b1d      	ldr	r3, [pc, #116]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 8029774:	2200      	movs	r2, #0
 8029776:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029778:	4b1b      	ldr	r3, [pc, #108]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 802977a:	2200      	movs	r2, #0
 802977c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 802977e:	4b1a      	ldr	r3, [pc, #104]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 8029780:	2200      	movs	r2, #0
 8029782:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8029784:	4b18      	ldr	r3, [pc, #96]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 8029786:	2200      	movs	r2, #0
 8029788:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802978a:	4b17      	ldr	r3, [pc, #92]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 802978c:	2200      	movs	r2, #0
 802978e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8029790:	4815      	ldr	r0, [pc, #84]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 8029792:	f001 ff87 	bl	802b6a4 <HAL_DMA_Init>
 8029796:	4603      	mov	r3, r0
 8029798:	2b00      	cmp	r3, #0
 802979a:	d001      	beq.n	80297a0 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 802979c:	f000 f9d0 	bl	8029b40 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80297a0:	687b      	ldr	r3, [r7, #4]
 80297a2:	4a11      	ldr	r2, [pc, #68]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 80297a4:	639a      	str	r2, [r3, #56]	; 0x38
 80297a6:	4a10      	ldr	r2, [pc, #64]	; (80297e8 <HAL_I2C_MspInit+0x1a8>)
 80297a8:	687b      	ldr	r3, [r7, #4]
 80297aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80297ac:	2200      	movs	r2, #0
 80297ae:	2100      	movs	r1, #0
 80297b0:	2021      	movs	r0, #33	; 0x21
 80297b2:	f001 fd7a 	bl	802b2aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80297b6:	2021      	movs	r0, #33	; 0x21
 80297b8:	f001 fd91 	bl	802b2de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80297bc:	2200      	movs	r2, #0
 80297be:	2100      	movs	r1, #0
 80297c0:	2022      	movs	r0, #34	; 0x22
 80297c2:	f001 fd72 	bl	802b2aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80297c6:	2022      	movs	r0, #34	; 0x22
 80297c8:	f001 fd89 	bl	802b2de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80297cc:	bf00      	nop
 80297ce:	37e0      	adds	r7, #224	; 0xe0
 80297d0:	46bd      	mov	sp, r7
 80297d2:	bd80      	pop	{r7, pc}
 80297d4:	40005800 	.word	0x40005800
 80297d8:	58024400 	.word	0x58024400
 80297dc:	58020400 	.word	0x58020400
 80297e0:	240245ac 	.word	0x240245ac
 80297e4:	40020010 	.word	0x40020010
 80297e8:	24024624 	.word	0x24024624
 80297ec:	40020028 	.word	0x40020028

080297f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80297f0:	b5b0      	push	{r4, r5, r7, lr}
 80297f2:	b090      	sub	sp, #64	; 0x40
 80297f4:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (FLASH_BASE | 0x20000);
 80297f6:	4b33      	ldr	r3, [pc, #204]	; (80298c4 <main+0xd4>)
 80297f8:	4a33      	ldr	r2, [pc, #204]	; (80298c8 <main+0xd8>)
 80297fa:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80297fc:	f001 f9d0 	bl	802aba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8029800:	f000 f874 	bl	80298ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8029804:	f7ff fe54 	bl	80294b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8029808:	f7ff fe1a 	bl	8029440 <MX_DMA_Init>
  MX_I2C2_Init();
 802980c:	f7ff fed8 	bl	80295c0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8029810:	f000 f99c 	bl	8029b4c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8029814:	f011 fd78 	bl	803b308 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8029818:	f000 ff4a 	bl	802a6b0 <MX_USART2_UART_Init>
  MX_UART4_Init();
 802981c:	f000 fe52 	bl	802a4c4 <MX_UART4_Init>
  MX_UART7_Init();
 8029820:	f000 fea2 	bl	802a568 <MX_UART7_Init>
  MX_USART3_UART_Init();
 8029824:	f000 ff90 	bl	802a748 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8029828:	f000 fd4c 	bl	802a2c4 <MX_TIM3_Init>
  MX_TIM2_Init();
 802982c:	f000 fcfc 	bl	802a228 <MX_TIM2_Init>
  MX_TIM4_Init();
 8029830:	f000 fd96 	bl	802a360 <MX_TIM4_Init>
  MX_COMP2_Init();
 8029834:	f7ff fd36 	bl	80292a4 <MX_COMP2_Init>
  MX_DAC1_Init();
 8029838:	f7ff fdae 	bl	8029398 <MX_DAC1_Init>
  MX_UART8_Init();
 802983c:	f000 fee2 	bl	802a604 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8029840:	2100      	movs	r1, #0
 8029842:	4822      	ldr	r0, [pc, #136]	; (80298cc <main+0xdc>)
 8029844:	f001 fd87 	bl	802b356 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 8029848:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 802984c:	2200      	movs	r2, #0
 802984e:	2100      	movs	r1, #0
 8029850:	481e      	ldr	r0, [pc, #120]	; (80298cc <main+0xdc>)
 8029852:	f001 fdd2 	bl	802b3fa <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 8029856:	481e      	ldr	r0, [pc, #120]	; (80298d0 <main+0xe0>)
 8029858:	f00a feb6 	bl	80345c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 802985c:	481d      	ldr	r0, [pc, #116]	; (80298d4 <main+0xe4>)
 802985e:	f00a feb3 	bl	80345c8 <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 8029862:	481d      	ldr	r0, [pc, #116]	; (80298d8 <main+0xe8>)
 8029864:	f001 fb88 	bl	802af78 <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 8029868:	4b1c      	ldr	r3, [pc, #112]	; (80298dc <main+0xec>)
 802986a:	607b      	str	r3, [r7, #4]
	config.HeadStreamUart = &huart4;
 802986c:	4b1c      	ldr	r3, [pc, #112]	; (80298e0 <main+0xf0>)
 802986e:	60bb      	str	r3, [r7, #8]

	config.HeadTimeout = 10;
 8029870:	230a      	movs	r3, #10
 8029872:	60fb      	str	r3, [r7, #12]

	config.BodyUart = &huart8;
 8029874:	4b1b      	ldr	r3, [pc, #108]	; (80298e4 <main+0xf4>)
 8029876:	613b      	str	r3, [r7, #16]
	config.BodyTimeout = 10;
 8029878:	230a      	movs	r3, #10
 802987a:	617b      	str	r3, [r7, #20]
	config.BodyPeriod = 20;
 802987c:	2314      	movs	r3, #20
 802987e:	763b      	strb	r3, [r7, #24]

	config.IMUSpi = &hspi1;
 8029880:	4b19      	ldr	r3, [pc, #100]	; (80298e8 <main+0xf8>)
 8029882:	61fb      	str	r3, [r7, #28]

	config.VersionMajor = 0;
 8029884:	2300      	movs	r3, #0
 8029886:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	config.VersionMinor = 2;
 802988a:	2302      	movs	r3, #2
 802988c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	config.StrobeOffset = 0;
 8029890:	2300      	movs	r3, #0
 8029892:	623b      	str	r3, [r7, #32]

	if (MotherboardInit(config))
 8029894:	466d      	mov	r5, sp
 8029896:	f107 0414 	add.w	r4, r7, #20
 802989a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802989c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802989e:	6823      	ldr	r3, [r4, #0]
 80298a0:	602b      	str	r3, [r5, #0]
 80298a2:	1d3b      	adds	r3, r7, #4
 80298a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80298a6:	f7f9 fcdb 	bl	8023260 <MotherboardInit>
 80298aa:	4603      	mov	r3, r0
 80298ac:	2b00      	cmp	r3, #0
 80298ae:	d001      	beq.n	80298b4 <main+0xc4>
		return 1;
 80298b0:	2301      	movs	r3, #1
 80298b2:	e002      	b.n	80298ba <main+0xca>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 80298b4:	f7f9 fd2c 	bl	8023310 <MotherboardTick>
 80298b8:	e7fc      	b.n	80298b4 <main+0xc4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 80298ba:	4618      	mov	r0, r3
 80298bc:	3728      	adds	r7, #40	; 0x28
 80298be:	46bd      	mov	sp, r7
 80298c0:	bdb0      	pop	{r4, r5, r7, pc}
 80298c2:	bf00      	nop
 80298c4:	e000ed00 	.word	0xe000ed00
 80298c8:	08020000 	.word	0x08020000
 80298cc:	2402454c 	.word	0x2402454c
 80298d0:	24024864 	.word	0x24024864
 80298d4:	24024818 	.word	0x24024818
 80298d8:	24024520 	.word	0x24024520
 80298dc:	24024b3c 	.word	0x24024b3c
 80298e0:	240248fc 	.word	0x240248fc
 80298e4:	24024a1c 	.word	0x24024a1c
 80298e8:	2402469c 	.word	0x2402469c

080298ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80298ec:	b580      	push	{r7, lr}
 80298ee:	b09e      	sub	sp, #120	; 0x78
 80298f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80298f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80298f6:	224c      	movs	r2, #76	; 0x4c
 80298f8:	2100      	movs	r1, #0
 80298fa:	4618      	mov	r0, r3
 80298fc:	f012 fae2 	bl	803bec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8029900:	f107 030c 	add.w	r3, r7, #12
 8029904:	2220      	movs	r2, #32
 8029906:	2100      	movs	r1, #0
 8029908:	4618      	mov	r0, r3
 802990a:	f012 fadb 	bl	803bec4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 802990e:	2002      	movs	r0, #2
 8029910:	f007 f96a 	bl	8030be8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8029914:	2300      	movs	r3, #0
 8029916:	60bb      	str	r3, [r7, #8]
 8029918:	4b4d      	ldr	r3, [pc, #308]	; (8029a50 <SystemClock_Config+0x164>)
 802991a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802991c:	4a4c      	ldr	r2, [pc, #304]	; (8029a50 <SystemClock_Config+0x164>)
 802991e:	f023 0301 	bic.w	r3, r3, #1
 8029922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8029924:	4b4a      	ldr	r3, [pc, #296]	; (8029a50 <SystemClock_Config+0x164>)
 8029926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029928:	f003 0301 	and.w	r3, r3, #1
 802992c:	60bb      	str	r3, [r7, #8]
 802992e:	4b49      	ldr	r3, [pc, #292]	; (8029a54 <SystemClock_Config+0x168>)
 8029930:	699b      	ldr	r3, [r3, #24]
 8029932:	4a48      	ldr	r2, [pc, #288]	; (8029a54 <SystemClock_Config+0x168>)
 8029934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8029938:	6193      	str	r3, [r2, #24]
 802993a:	4b46      	ldr	r3, [pc, #280]	; (8029a54 <SystemClock_Config+0x168>)
 802993c:	699b      	ldr	r3, [r3, #24]
 802993e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8029942:	60bb      	str	r3, [r7, #8]
 8029944:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8029946:	bf00      	nop
 8029948:	4b42      	ldr	r3, [pc, #264]	; (8029a54 <SystemClock_Config+0x168>)
 802994a:	699b      	ldr	r3, [r3, #24]
 802994c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8029950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029954:	d1f8      	bne.n	8029948 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029956:	4b40      	ldr	r3, [pc, #256]	; (8029a58 <SystemClock_Config+0x16c>)
 8029958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802995c:	4a3e      	ldr	r2, [pc, #248]	; (8029a58 <SystemClock_Config+0x16c>)
 802995e:	f043 0302 	orr.w	r3, r3, #2
 8029962:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8029966:	4b3c      	ldr	r3, [pc, #240]	; (8029a58 <SystemClock_Config+0x16c>)
 8029968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802996c:	f003 0302 	and.w	r3, r3, #2
 8029970:	607b      	str	r3, [r7, #4]
 8029972:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8029974:	2300      	movs	r3, #0
 8029976:	603b      	str	r3, [r7, #0]
 8029978:	4b36      	ldr	r3, [pc, #216]	; (8029a54 <SystemClock_Config+0x168>)
 802997a:	699b      	ldr	r3, [r3, #24]
 802997c:	4a35      	ldr	r2, [pc, #212]	; (8029a54 <SystemClock_Config+0x168>)
 802997e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8029982:	6193      	str	r3, [r2, #24]
 8029984:	4b33      	ldr	r3, [pc, #204]	; (8029a54 <SystemClock_Config+0x168>)
 8029986:	699b      	ldr	r3, [r3, #24]
 8029988:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802998c:	603b      	str	r3, [r7, #0]
 802998e:	4b30      	ldr	r3, [pc, #192]	; (8029a50 <SystemClock_Config+0x164>)
 8029990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029992:	4a2f      	ldr	r2, [pc, #188]	; (8029a50 <SystemClock_Config+0x164>)
 8029994:	f043 0301 	orr.w	r3, r3, #1
 8029998:	62d3      	str	r3, [r2, #44]	; 0x2c
 802999a:	4b2d      	ldr	r3, [pc, #180]	; (8029a50 <SystemClock_Config+0x164>)
 802999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802999e:	f003 0301 	and.w	r3, r3, #1
 80299a2:	603b      	str	r3, [r7, #0]
 80299a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80299a6:	bf00      	nop
 80299a8:	4b2a      	ldr	r3, [pc, #168]	; (8029a54 <SystemClock_Config+0x168>)
 80299aa:	699b      	ldr	r3, [r3, #24]
 80299ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80299b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80299b4:	d1f8      	bne.n	80299a8 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80299b6:	4b28      	ldr	r3, [pc, #160]	; (8029a58 <SystemClock_Config+0x16c>)
 80299b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80299ba:	4a27      	ldr	r2, [pc, #156]	; (8029a58 <SystemClock_Config+0x16c>)
 80299bc:	f023 0303 	bic.w	r3, r3, #3
 80299c0:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80299c2:	2322      	movs	r3, #34	; 0x22
 80299c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80299c6:	2301      	movs	r3, #1
 80299c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80299ca:	2340      	movs	r3, #64	; 0x40
 80299cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80299ce:	2301      	movs	r3, #1
 80299d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80299d2:	2302      	movs	r3, #2
 80299d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80299d6:	2300      	movs	r3, #0
 80299d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80299da:	2304      	movs	r3, #4
 80299dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80299de:	233c      	movs	r3, #60	; 0x3c
 80299e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80299e2:	2302      	movs	r3, #2
 80299e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80299e6:	2305      	movs	r3, #5
 80299e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80299ea:	2302      	movs	r3, #2
 80299ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80299ee:	230c      	movs	r3, #12
 80299f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80299f2:	2300      	movs	r3, #0
 80299f4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80299f6:	2300      	movs	r3, #0
 80299f8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80299fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80299fe:	4618      	mov	r0, r3
 8029a00:	f007 f93c 	bl	8030c7c <HAL_RCC_OscConfig>
 8029a04:	4603      	mov	r3, r0
 8029a06:	2b00      	cmp	r3, #0
 8029a08:	d001      	beq.n	8029a0e <SystemClock_Config+0x122>
  {
    Error_Handler();
 8029a0a:	f000 f899 	bl	8029b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8029a0e:	233f      	movs	r3, #63	; 0x3f
 8029a10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8029a12:	2303      	movs	r3, #3
 8029a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8029a16:	2300      	movs	r3, #0
 8029a18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8029a1a:	2308      	movs	r3, #8
 8029a1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8029a1e:	2340      	movs	r3, #64	; 0x40
 8029a20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8029a22:	2340      	movs	r3, #64	; 0x40
 8029a24:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8029a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029a2a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8029a2c:	2340      	movs	r3, #64	; 0x40
 8029a2e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8029a30:	f107 030c 	add.w	r3, r7, #12
 8029a34:	2104      	movs	r1, #4
 8029a36:	4618      	mov	r0, r3
 8029a38:	f007 fd4e 	bl	80314d8 <HAL_RCC_ClockConfig>
 8029a3c:	4603      	mov	r3, r0
 8029a3e:	2b00      	cmp	r3, #0
 8029a40:	d001      	beq.n	8029a46 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8029a42:	f000 f87d 	bl	8029b40 <Error_Handler>
  }
}
 8029a46:	bf00      	nop
 8029a48:	3778      	adds	r7, #120	; 0x78
 8029a4a:	46bd      	mov	sp, r7
 8029a4c:	bd80      	pop	{r7, pc}
 8029a4e:	bf00      	nop
 8029a50:	58000400 	.word	0x58000400
 8029a54:	58024800 	.word	0x58024800
 8029a58:	58024400 	.word	0x58024400

08029a5c <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8029a5c:	b580      	push	{r7, lr}
 8029a5e:	b082      	sub	sp, #8
 8029a60:	af00      	add	r7, sp, #0
 8029a62:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 8029a64:	687b      	ldr	r3, [r7, #4]
 8029a66:	681b      	ldr	r3, [r3, #0]
 8029a68:	4a04      	ldr	r2, [pc, #16]	; (8029a7c <HAL_COMP_TriggerCallback+0x20>)
 8029a6a:	4293      	cmp	r3, r2
 8029a6c:	d101      	bne.n	8029a72 <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 8029a6e:	f7f9 fd25 	bl	80234bc <MotherboardOnStrobe>
	}
}
 8029a72:	bf00      	nop
 8029a74:	3708      	adds	r7, #8
 8029a76:	46bd      	mov	sp, r7
 8029a78:	bd80      	pop	{r7, pc}
 8029a7a:	bf00      	nop
 8029a7c:	58003810 	.word	0x58003810

08029a80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8029a80:	b580      	push	{r7, lr}
 8029a82:	b082      	sub	sp, #8
 8029a84:	af00      	add	r7, sp, #0
 8029a86:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8029a88:	687b      	ldr	r3, [r7, #4]
 8029a8a:	681b      	ldr	r3, [r3, #0]
 8029a8c:	4a0b      	ldr	r2, [pc, #44]	; (8029abc <HAL_UART_RxCpltCallback+0x3c>)
 8029a8e:	4293      	cmp	r3, r2
 8029a90:	d101      	bne.n	8029a96 <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadServiceRecieveComplete();
 8029a92:	f7f9 fd33 	bl	80234fc <MotherboardOnHeadServiceRecieveComplete>
	}
	if (huart->Instance == UART4) {
 8029a96:	687b      	ldr	r3, [r7, #4]
 8029a98:	681b      	ldr	r3, [r3, #0]
 8029a9a:	4a09      	ldr	r2, [pc, #36]	; (8029ac0 <HAL_UART_RxCpltCallback+0x40>)
 8029a9c:	4293      	cmp	r3, r2
 8029a9e:	d101      	bne.n	8029aa4 <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnHeadStreamRecieveComplete();
 8029aa0:	f7f9 fd36 	bl	8023510 <MotherboardOnHeadStreamRecieveComplete>
	}
	if (huart->Instance == UART8) {
 8029aa4:	687b      	ldr	r3, [r7, #4]
 8029aa6:	681b      	ldr	r3, [r3, #0]
 8029aa8:	4a06      	ldr	r2, [pc, #24]	; (8029ac4 <HAL_UART_RxCpltCallback+0x44>)
 8029aaa:	4293      	cmp	r3, r2
 8029aac:	d101      	bne.n	8029ab2 <HAL_UART_RxCpltCallback+0x32>
		MotherboardOnBodyRecieveComplete();
 8029aae:	f7f9 fd1b 	bl	80234e8 <MotherboardOnBodyRecieveComplete>
	}
}
 8029ab2:	bf00      	nop
 8029ab4:	3708      	adds	r7, #8
 8029ab6:	46bd      	mov	sp, r7
 8029ab8:	bd80      	pop	{r7, pc}
 8029aba:	bf00      	nop
 8029abc:	40004800 	.word	0x40004800
 8029ac0:	40004c00 	.word	0x40004c00
 8029ac4:	40007c00 	.word	0x40007c00

08029ac8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8029ac8:	b580      	push	{r7, lr}
 8029aca:	b082      	sub	sp, #8
 8029acc:	af00      	add	r7, sp, #0
 8029ace:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8029ad0:	687b      	ldr	r3, [r7, #4]
 8029ad2:	681b      	ldr	r3, [r3, #0]
 8029ad4:	4a0b      	ldr	r2, [pc, #44]	; (8029b04 <HAL_UART_TxCpltCallback+0x3c>)
 8029ad6:	4293      	cmp	r3, r2
 8029ad8:	d101      	bne.n	8029ade <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadServiceTransmitComplete();
 8029ada:	f7f9 fd23 	bl	8023524 <MotherboardOnHeadServiceTransmitComplete>
	}
	if (huart->Instance == UART4) {
 8029ade:	687b      	ldr	r3, [r7, #4]
 8029ae0:	681b      	ldr	r3, [r3, #0]
 8029ae2:	4a09      	ldr	r2, [pc, #36]	; (8029b08 <HAL_UART_TxCpltCallback+0x40>)
 8029ae4:	4293      	cmp	r3, r2
 8029ae6:	d101      	bne.n	8029aec <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnHeadStreamTransmitComplete();
 8029ae8:	f7f9 fd26 	bl	8023538 <MotherboardOnHeadStreamTransmitComplete>
	}
	if (huart->Instance == UART8) {
 8029aec:	687b      	ldr	r3, [r7, #4]
 8029aee:	681b      	ldr	r3, [r3, #0]
 8029af0:	4a06      	ldr	r2, [pc, #24]	; (8029b0c <HAL_UART_TxCpltCallback+0x44>)
 8029af2:	4293      	cmp	r3, r2
 8029af4:	d101      	bne.n	8029afa <HAL_UART_TxCpltCallback+0x32>
		MotherboardOnBodyTransmitComplete();
 8029af6:	f7f9 fd29 	bl	802354c <MotherboardOnBodyTransmitComplete>
	}
}
 8029afa:	bf00      	nop
 8029afc:	3708      	adds	r7, #8
 8029afe:	46bd      	mov	sp, r7
 8029b00:	bd80      	pop	{r7, pc}
 8029b02:	bf00      	nop
 8029b04:	40004800 	.word	0x40004800
 8029b08:	40004c00 	.word	0x40004c00
 8029b0c:	40007c00 	.word	0x40007c00

08029b10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8029b10:	b580      	push	{r7, lr}
 8029b12:	b082      	sub	sp, #8
 8029b14:	af00      	add	r7, sp, #0
 8029b16:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8029b18:	687b      	ldr	r3, [r7, #4]
 8029b1a:	681b      	ldr	r3, [r3, #0]
 8029b1c:	4a07      	ldr	r2, [pc, #28]	; (8029b3c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8029b1e:	4293      	cmp	r3, r2
 8029b20:	d101      	bne.n	8029b26 <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 8029b22:	f7f9 fd1d 	bl	8023560 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 8029b26:	687b      	ldr	r3, [r7, #4]
 8029b28:	681b      	ldr	r3, [r3, #0]
 8029b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029b2e:	d101      	bne.n	8029b34 <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 8029b30:	f7f9 fd20 	bl	8023574 <MotherboardOnImuTimerTick>
}
 8029b34:	bf00      	nop
 8029b36:	3708      	adds	r7, #8
 8029b38:	46bd      	mov	sp, r7
 8029b3a:	bd80      	pop	{r7, pc}
 8029b3c:	40000400 	.word	0x40000400

08029b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8029b40:	b480      	push	{r7}
 8029b42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8029b44:	b672      	cpsid	i
}
 8029b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8029b48:	e7fe      	b.n	8029b48 <Error_Handler+0x8>
	...

08029b4c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8029b4c:	b580      	push	{r7, lr}
 8029b4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8029b50:	4b28      	ldr	r3, [pc, #160]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029b52:	4a29      	ldr	r2, [pc, #164]	; (8029bf8 <MX_SPI1_Init+0xac>)
 8029b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8029b56:	4b27      	ldr	r3, [pc, #156]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029b58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8029b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8029b5e:	4b25      	ldr	r3, [pc, #148]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029b60:	2200      	movs	r2, #0
 8029b62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8029b64:	4b23      	ldr	r3, [pc, #140]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029b66:	2207      	movs	r2, #7
 8029b68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8029b6a:	4b22      	ldr	r3, [pc, #136]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029b6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8029b70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8029b72:	4b20      	ldr	r3, [pc, #128]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029b74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8029b78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8029b7a:	4b1e      	ldr	r3, [pc, #120]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029b7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8029b80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8029b82:	4b1c      	ldr	r3, [pc, #112]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029b84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8029b88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8029b8a:	4b1a      	ldr	r3, [pc, #104]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029b8c:	2200      	movs	r2, #0
 8029b8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8029b90:	4b18      	ldr	r3, [pc, #96]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029b92:	2200      	movs	r2, #0
 8029b94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8029b96:	4b17      	ldr	r3, [pc, #92]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029b98:	2200      	movs	r2, #0
 8029b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8029b9c:	4b15      	ldr	r3, [pc, #84]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029b9e:	2200      	movs	r2, #0
 8029ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8029ba2:	4b14      	ldr	r3, [pc, #80]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029ba4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8029ba8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8029baa:	4b12      	ldr	r3, [pc, #72]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029bac:	2200      	movs	r2, #0
 8029bae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8029bb0:	4b10      	ldr	r3, [pc, #64]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029bb2:	2200      	movs	r2, #0
 8029bb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8029bb6:	4b0f      	ldr	r3, [pc, #60]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029bb8:	2200      	movs	r2, #0
 8029bba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8029bbc:	4b0d      	ldr	r3, [pc, #52]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029bbe:	2200      	movs	r2, #0
 8029bc0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8029bc2:	4b0c      	ldr	r3, [pc, #48]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029bc4:	2200      	movs	r2, #0
 8029bc6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8029bc8:	4b0a      	ldr	r3, [pc, #40]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029bca:	2200      	movs	r2, #0
 8029bcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8029bce:	4b09      	ldr	r3, [pc, #36]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029bd0:	2200      	movs	r2, #0
 8029bd2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8029bd4:	4b07      	ldr	r3, [pc, #28]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029bd6:	2200      	movs	r2, #0
 8029bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8029bda:	4b06      	ldr	r3, [pc, #24]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029bdc:	2200      	movs	r2, #0
 8029bde:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8029be0:	4804      	ldr	r0, [pc, #16]	; (8029bf4 <MX_SPI1_Init+0xa8>)
 8029be2:	f009 fb6d 	bl	80332c0 <HAL_SPI_Init>
 8029be6:	4603      	mov	r3, r0
 8029be8:	2b00      	cmp	r3, #0
 8029bea:	d001      	beq.n	8029bf0 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8029bec:	f7ff ffa8 	bl	8029b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8029bf0:	bf00      	nop
 8029bf2:	bd80      	pop	{r7, pc}
 8029bf4:	2402469c 	.word	0x2402469c
 8029bf8:	40013000 	.word	0x40013000

08029bfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8029bfc:	b580      	push	{r7, lr}
 8029bfe:	b0b8      	sub	sp, #224	; 0xe0
 8029c00:	af00      	add	r7, sp, #0
 8029c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029c04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029c08:	2200      	movs	r2, #0
 8029c0a:	601a      	str	r2, [r3, #0]
 8029c0c:	605a      	str	r2, [r3, #4]
 8029c0e:	609a      	str	r2, [r3, #8]
 8029c10:	60da      	str	r2, [r3, #12]
 8029c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029c14:	f107 0310 	add.w	r3, r7, #16
 8029c18:	22bc      	movs	r2, #188	; 0xbc
 8029c1a:	2100      	movs	r1, #0
 8029c1c:	4618      	mov	r0, r3
 8029c1e:	f012 f951 	bl	803bec4 <memset>
  if(spiHandle->Instance==SPI1)
 8029c22:	687b      	ldr	r3, [r7, #4]
 8029c24:	681b      	ldr	r3, [r3, #0]
 8029c26:	4a60      	ldr	r2, [pc, #384]	; (8029da8 <HAL_SPI_MspInit+0x1ac>)
 8029c28:	4293      	cmp	r3, r2
 8029c2a:	f040 80b8 	bne.w	8029d9e <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8029c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8029c32:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8029c34:	2320      	movs	r3, #32
 8029c36:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8029c38:	2381      	movs	r3, #129	; 0x81
 8029c3a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8029c3c:	2302      	movs	r3, #2
 8029c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8029c40:	2302      	movs	r3, #2
 8029c42:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8029c44:	2302      	movs	r3, #2
 8029c46:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8029c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029c4c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8029c4e:	2300      	movs	r3, #0
 8029c50:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8029c52:	2300      	movs	r3, #0
 8029c54:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8029c56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8029c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029c5c:	f107 0310 	add.w	r3, r7, #16
 8029c60:	4618      	mov	r0, r3
 8029c62:	f007 ffc5 	bl	8031bf0 <HAL_RCCEx_PeriphCLKConfig>
 8029c66:	4603      	mov	r3, r0
 8029c68:	2b00      	cmp	r3, #0
 8029c6a:	d001      	beq.n	8029c70 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8029c6c:	f7ff ff68 	bl	8029b40 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8029c70:	4b4e      	ldr	r3, [pc, #312]	; (8029dac <HAL_SPI_MspInit+0x1b0>)
 8029c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029c76:	4a4d      	ldr	r2, [pc, #308]	; (8029dac <HAL_SPI_MspInit+0x1b0>)
 8029c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8029c7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8029c80:	4b4a      	ldr	r3, [pc, #296]	; (8029dac <HAL_SPI_MspInit+0x1b0>)
 8029c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029c8a:	60fb      	str	r3, [r7, #12]
 8029c8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8029c8e:	4b47      	ldr	r3, [pc, #284]	; (8029dac <HAL_SPI_MspInit+0x1b0>)
 8029c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029c94:	4a45      	ldr	r2, [pc, #276]	; (8029dac <HAL_SPI_MspInit+0x1b0>)
 8029c96:	f043 0301 	orr.w	r3, r3, #1
 8029c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029c9e:	4b43      	ldr	r3, [pc, #268]	; (8029dac <HAL_SPI_MspInit+0x1b0>)
 8029ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029ca4:	f003 0301 	and.w	r3, r3, #1
 8029ca8:	60bb      	str	r3, [r7, #8]
 8029caa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8029cac:	23e0      	movs	r3, #224	; 0xe0
 8029cae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029cb2:	2302      	movs	r3, #2
 8029cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029cb8:	2300      	movs	r3, #0
 8029cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029cbe:	2300      	movs	r3, #0
 8029cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8029cc4:	2305      	movs	r3, #5
 8029cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8029cca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029cce:	4619      	mov	r1, r3
 8029cd0:	4837      	ldr	r0, [pc, #220]	; (8029db0 <HAL_SPI_MspInit+0x1b4>)
 8029cd2:	f004 fb3d 	bl	802e350 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 8029cd6:	4b37      	ldr	r3, [pc, #220]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029cd8:	4a37      	ldr	r2, [pc, #220]	; (8029db8 <HAL_SPI_MspInit+0x1bc>)
 8029cda:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8029cdc:	4b35      	ldr	r3, [pc, #212]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029cde:	2226      	movs	r2, #38	; 0x26
 8029ce0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8029ce2:	4b34      	ldr	r3, [pc, #208]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029ce4:	2240      	movs	r2, #64	; 0x40
 8029ce6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029ce8:	4b32      	ldr	r3, [pc, #200]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029cea:	2200      	movs	r2, #0
 8029cec:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8029cee:	4b31      	ldr	r3, [pc, #196]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029cf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029cf4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029cf6:	4b2f      	ldr	r3, [pc, #188]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029cf8:	2200      	movs	r2, #0
 8029cfa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029cfc:	4b2d      	ldr	r3, [pc, #180]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029cfe:	2200      	movs	r2, #0
 8029d00:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8029d02:	4b2c      	ldr	r3, [pc, #176]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029d04:	2200      	movs	r2, #0
 8029d06:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8029d08:	4b2a      	ldr	r3, [pc, #168]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029d0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029d0e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029d10:	4b28      	ldr	r3, [pc, #160]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029d12:	2200      	movs	r2, #0
 8029d14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8029d16:	4827      	ldr	r0, [pc, #156]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029d18:	f001 fcc4 	bl	802b6a4 <HAL_DMA_Init>
 8029d1c:	4603      	mov	r3, r0
 8029d1e:	2b00      	cmp	r3, #0
 8029d20:	d001      	beq.n	8029d26 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8029d22:	f7ff ff0d 	bl	8029b40 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8029d26:	687b      	ldr	r3, [r7, #4]
 8029d28:	4a22      	ldr	r2, [pc, #136]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029d2a:	679a      	str	r2, [r3, #120]	; 0x78
 8029d2c:	4a21      	ldr	r2, [pc, #132]	; (8029db4 <HAL_SPI_MspInit+0x1b8>)
 8029d2e:	687b      	ldr	r3, [r7, #4]
 8029d30:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 8029d32:	4b22      	ldr	r3, [pc, #136]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d34:	4a22      	ldr	r2, [pc, #136]	; (8029dc0 <HAL_SPI_MspInit+0x1c4>)
 8029d36:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8029d38:	4b20      	ldr	r3, [pc, #128]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d3a:	2225      	movs	r2, #37	; 0x25
 8029d3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8029d3e:	4b1f      	ldr	r3, [pc, #124]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d40:	2200      	movs	r2, #0
 8029d42:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029d44:	4b1d      	ldr	r3, [pc, #116]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d46:	2200      	movs	r2, #0
 8029d48:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8029d4a:	4b1c      	ldr	r3, [pc, #112]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029d50:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029d52:	4b1a      	ldr	r3, [pc, #104]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d54:	2200      	movs	r2, #0
 8029d56:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029d58:	4b18      	ldr	r3, [pc, #96]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d5a:	2200      	movs	r2, #0
 8029d5c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8029d5e:	4b17      	ldr	r3, [pc, #92]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d60:	2200      	movs	r2, #0
 8029d62:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8029d64:	4b15      	ldr	r3, [pc, #84]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029d6a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029d6c:	4b13      	ldr	r3, [pc, #76]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d6e:	2200      	movs	r2, #0
 8029d70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8029d72:	4812      	ldr	r0, [pc, #72]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d74:	f001 fc96 	bl	802b6a4 <HAL_DMA_Init>
 8029d78:	4603      	mov	r3, r0
 8029d7a:	2b00      	cmp	r3, #0
 8029d7c:	d001      	beq.n	8029d82 <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 8029d7e:	f7ff fedf 	bl	8029b40 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8029d82:	687b      	ldr	r3, [r7, #4]
 8029d84:	4a0d      	ldr	r2, [pc, #52]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d86:	67da      	str	r2, [r3, #124]	; 0x7c
 8029d88:	4a0c      	ldr	r2, [pc, #48]	; (8029dbc <HAL_SPI_MspInit+0x1c0>)
 8029d8a:	687b      	ldr	r3, [r7, #4]
 8029d8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8029d8e:	2200      	movs	r2, #0
 8029d90:	2102      	movs	r1, #2
 8029d92:	2023      	movs	r0, #35	; 0x23
 8029d94:	f001 fa89 	bl	802b2aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8029d98:	2023      	movs	r0, #35	; 0x23
 8029d9a:	f001 faa0 	bl	802b2de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8029d9e:	bf00      	nop
 8029da0:	37e0      	adds	r7, #224	; 0xe0
 8029da2:	46bd      	mov	sp, r7
 8029da4:	bd80      	pop	{r7, pc}
 8029da6:	bf00      	nop
 8029da8:	40013000 	.word	0x40013000
 8029dac:	58024400 	.word	0x58024400
 8029db0:	58020000 	.word	0x58020000
 8029db4:	24024724 	.word	0x24024724
 8029db8:	40020070 	.word	0x40020070
 8029dbc:	2402479c 	.word	0x2402479c
 8029dc0:	40020088 	.word	0x40020088

08029dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8029dc4:	b480      	push	{r7}
 8029dc6:	b083      	sub	sp, #12
 8029dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029dca:	4b0a      	ldr	r3, [pc, #40]	; (8029df4 <HAL_MspInit+0x30>)
 8029dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029dd0:	4a08      	ldr	r2, [pc, #32]	; (8029df4 <HAL_MspInit+0x30>)
 8029dd2:	f043 0302 	orr.w	r3, r3, #2
 8029dd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8029dda:	4b06      	ldr	r3, [pc, #24]	; (8029df4 <HAL_MspInit+0x30>)
 8029ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029de0:	f003 0302 	and.w	r3, r3, #2
 8029de4:	607b      	str	r3, [r7, #4]
 8029de6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8029de8:	bf00      	nop
 8029dea:	370c      	adds	r7, #12
 8029dec:	46bd      	mov	sp, r7
 8029dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029df2:	4770      	bx	lr
 8029df4:	58024400 	.word	0x58024400

08029df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8029df8:	b480      	push	{r7}
 8029dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8029dfc:	e7fe      	b.n	8029dfc <NMI_Handler+0x4>

08029dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8029dfe:	b480      	push	{r7}
 8029e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8029e02:	e7fe      	b.n	8029e02 <HardFault_Handler+0x4>

08029e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8029e04:	b480      	push	{r7}
 8029e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8029e08:	e7fe      	b.n	8029e08 <MemManage_Handler+0x4>

08029e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8029e0a:	b480      	push	{r7}
 8029e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8029e0e:	e7fe      	b.n	8029e0e <BusFault_Handler+0x4>

08029e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8029e10:	b480      	push	{r7}
 8029e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8029e14:	e7fe      	b.n	8029e14 <UsageFault_Handler+0x4>

08029e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8029e16:	b480      	push	{r7}
 8029e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8029e1a:	bf00      	nop
 8029e1c:	46bd      	mov	sp, r7
 8029e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e22:	4770      	bx	lr

08029e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8029e24:	b480      	push	{r7}
 8029e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8029e28:	bf00      	nop
 8029e2a:	46bd      	mov	sp, r7
 8029e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e30:	4770      	bx	lr

08029e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8029e32:	b480      	push	{r7}
 8029e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8029e36:	bf00      	nop
 8029e38:	46bd      	mov	sp, r7
 8029e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e3e:	4770      	bx	lr

08029e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8029e40:	b580      	push	{r7, lr}
 8029e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8029e44:	f000 ff1e 	bl	802ac84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8029e48:	bf00      	nop
 8029e4a:	bd80      	pop	{r7, pc}

08029e4c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8029e4c:	b580      	push	{r7, lr}
 8029e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8029e50:	4802      	ldr	r0, [pc, #8]	; (8029e5c <DMA1_Stream0_IRQHandler+0x10>)
 8029e52:	f002 ff51 	bl	802ccf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8029e56:	bf00      	nop
 8029e58:	bd80      	pop	{r7, pc}
 8029e5a:	bf00      	nop
 8029e5c:	240245ac 	.word	0x240245ac

08029e60 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8029e60:	b580      	push	{r7, lr}
 8029e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8029e64:	4802      	ldr	r0, [pc, #8]	; (8029e70 <DMA1_Stream1_IRQHandler+0x10>)
 8029e66:	f002 ff47 	bl	802ccf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8029e6a:	bf00      	nop
 8029e6c:	bd80      	pop	{r7, pc}
 8029e6e:	bf00      	nop
 8029e70:	24024624 	.word	0x24024624

08029e74 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8029e74:	b580      	push	{r7, lr}
 8029e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8029e78:	4802      	ldr	r0, [pc, #8]	; (8029e84 <DMA1_Stream4_IRQHandler+0x10>)
 8029e7a:	f002 ff3d 	bl	802ccf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8029e7e:	bf00      	nop
 8029e80:	bd80      	pop	{r7, pc}
 8029e82:	bf00      	nop
 8029e84:	24024724 	.word	0x24024724

08029e88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8029e88:	b580      	push	{r7, lr}
 8029e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8029e8c:	4802      	ldr	r0, [pc, #8]	; (8029e98 <DMA1_Stream5_IRQHandler+0x10>)
 8029e8e:	f002 ff33 	bl	802ccf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8029e92:	bf00      	nop
 8029e94:	bd80      	pop	{r7, pc}
 8029e96:	bf00      	nop
 8029e98:	2402479c 	.word	0x2402479c

08029e9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8029e9c:	b580      	push	{r7, lr}
 8029e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8029ea0:	4802      	ldr	r0, [pc, #8]	; (8029eac <TIM2_IRQHandler+0x10>)
 8029ea2:	f00a fc09 	bl	80346b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8029ea6:	bf00      	nop
 8029ea8:	bd80      	pop	{r7, pc}
 8029eaa:	bf00      	nop
 8029eac:	24024818 	.word	0x24024818

08029eb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8029eb0:	b580      	push	{r7, lr}
 8029eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8029eb4:	4802      	ldr	r0, [pc, #8]	; (8029ec0 <TIM3_IRQHandler+0x10>)
 8029eb6:	f00a fbff 	bl	80346b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8029eba:	bf00      	nop
 8029ebc:	bd80      	pop	{r7, pc}
 8029ebe:	bf00      	nop
 8029ec0:	24024864 	.word	0x24024864

08029ec4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8029ec4:	b580      	push	{r7, lr}
 8029ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8029ec8:	4802      	ldr	r0, [pc, #8]	; (8029ed4 <TIM4_IRQHandler+0x10>)
 8029eca:	f00a fbf5 	bl	80346b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8029ece:	bf00      	nop
 8029ed0:	bd80      	pop	{r7, pc}
 8029ed2:	bf00      	nop
 8029ed4:	240248b0 	.word	0x240248b0

08029ed8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8029ed8:	b580      	push	{r7, lr}
 8029eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8029edc:	4802      	ldr	r0, [pc, #8]	; (8029ee8 <I2C2_EV_IRQHandler+0x10>)
 8029ede:	f004 fc91 	bl	802e804 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8029ee2:	bf00      	nop
 8029ee4:	bd80      	pop	{r7, pc}
 8029ee6:	bf00      	nop
 8029ee8:	24024560 	.word	0x24024560

08029eec <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8029eec:	b580      	push	{r7, lr}
 8029eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8029ef0:	4802      	ldr	r0, [pc, #8]	; (8029efc <I2C2_ER_IRQHandler+0x10>)
 8029ef2:	f004 fca1 	bl	802e838 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8029ef6:	bf00      	nop
 8029ef8:	bd80      	pop	{r7, pc}
 8029efa:	bf00      	nop
 8029efc:	24024560 	.word	0x24024560

08029f00 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8029f00:	b580      	push	{r7, lr}
 8029f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8029f04:	4802      	ldr	r0, [pc, #8]	; (8029f10 <SPI1_IRQHandler+0x10>)
 8029f06:	f009 ff5d 	bl	8033dc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8029f0a:	bf00      	nop
 8029f0c:	bd80      	pop	{r7, pc}
 8029f0e:	bf00      	nop
 8029f10:	2402469c 	.word	0x2402469c

08029f14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8029f14:	b580      	push	{r7, lr}
 8029f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8029f18:	4802      	ldr	r0, [pc, #8]	; (8029f24 <USART3_IRQHandler+0x10>)
 8029f1a:	f00b fa13 	bl	8035344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8029f1e:	bf00      	nop
 8029f20:	bd80      	pop	{r7, pc}
 8029f22:	bf00      	nop
 8029f24:	24024b3c 	.word	0x24024b3c

08029f28 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8029f28:	b580      	push	{r7, lr}
 8029f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8029f2c:	4802      	ldr	r0, [pc, #8]	; (8029f38 <UART4_IRQHandler+0x10>)
 8029f2e:	f00b fa09 	bl	8035344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8029f32:	bf00      	nop
 8029f34:	bd80      	pop	{r7, pc}
 8029f36:	bf00      	nop
 8029f38:	240248fc 	.word	0x240248fc

08029f3c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8029f3c:	b580      	push	{r7, lr}
 8029f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8029f40:	4802      	ldr	r0, [pc, #8]	; (8029f4c <UART8_IRQHandler+0x10>)
 8029f42:	f00b f9ff 	bl	8035344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8029f46:	bf00      	nop
 8029f48:	bd80      	pop	{r7, pc}
 8029f4a:	bf00      	nop
 8029f4c:	24024a1c 	.word	0x24024a1c

08029f50 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8029f50:	b580      	push	{r7, lr}
 8029f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8029f54:	4802      	ldr	r0, [pc, #8]	; (8029f60 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8029f56:	f005 fcc8 	bl	802f8ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8029f5a:	bf00      	nop
 8029f5c:	bd80      	pop	{r7, pc}
 8029f5e:	bf00      	nop
 8029f60:	240260b0 	.word	0x240260b0

08029f64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8029f64:	b580      	push	{r7, lr}
 8029f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8029f68:	4802      	ldr	r0, [pc, #8]	; (8029f74 <OTG_FS_IRQHandler+0x10>)
 8029f6a:	f005 fcbe 	bl	802f8ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8029f6e:	bf00      	nop
 8029f70:	bd80      	pop	{r7, pc}
 8029f72:	bf00      	nop
 8029f74:	240260b0 	.word	0x240260b0

08029f78 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8029f78:	b580      	push	{r7, lr}
 8029f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8029f7c:	4802      	ldr	r0, [pc, #8]	; (8029f88 <COMP1_IRQHandler+0x10>)
 8029f7e:	f001 f845 	bl	802b00c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8029f82:	bf00      	nop
 8029f84:	bd80      	pop	{r7, pc}
 8029f86:	bf00      	nop
 8029f88:	24024520 	.word	0x24024520

08029f8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8029f8c:	b480      	push	{r7}
 8029f8e:	af00      	add	r7, sp, #0
	return 1;
 8029f90:	2301      	movs	r3, #1
}
 8029f92:	4618      	mov	r0, r3
 8029f94:	46bd      	mov	sp, r7
 8029f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f9a:	4770      	bx	lr

08029f9c <_kill>:

int _kill(int pid, int sig)
{
 8029f9c:	b580      	push	{r7, lr}
 8029f9e:	b082      	sub	sp, #8
 8029fa0:	af00      	add	r7, sp, #0
 8029fa2:	6078      	str	r0, [r7, #4]
 8029fa4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8029fa6:	f011 ff19 	bl	803bddc <__errno>
 8029faa:	4603      	mov	r3, r0
 8029fac:	2216      	movs	r2, #22
 8029fae:	601a      	str	r2, [r3, #0]
	return -1;
 8029fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8029fb4:	4618      	mov	r0, r3
 8029fb6:	3708      	adds	r7, #8
 8029fb8:	46bd      	mov	sp, r7
 8029fba:	bd80      	pop	{r7, pc}

08029fbc <_exit>:

void _exit (int status)
{
 8029fbc:	b580      	push	{r7, lr}
 8029fbe:	b082      	sub	sp, #8
 8029fc0:	af00      	add	r7, sp, #0
 8029fc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8029fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8029fc8:	6878      	ldr	r0, [r7, #4]
 8029fca:	f7ff ffe7 	bl	8029f9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8029fce:	e7fe      	b.n	8029fce <_exit+0x12>

08029fd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8029fd0:	b580      	push	{r7, lr}
 8029fd2:	b086      	sub	sp, #24
 8029fd4:	af00      	add	r7, sp, #0
 8029fd6:	60f8      	str	r0, [r7, #12]
 8029fd8:	60b9      	str	r1, [r7, #8]
 8029fda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029fdc:	2300      	movs	r3, #0
 8029fde:	617b      	str	r3, [r7, #20]
 8029fe0:	e00a      	b.n	8029ff8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8029fe2:	f3af 8000 	nop.w
 8029fe6:	4601      	mov	r1, r0
 8029fe8:	68bb      	ldr	r3, [r7, #8]
 8029fea:	1c5a      	adds	r2, r3, #1
 8029fec:	60ba      	str	r2, [r7, #8]
 8029fee:	b2ca      	uxtb	r2, r1
 8029ff0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029ff2:	697b      	ldr	r3, [r7, #20]
 8029ff4:	3301      	adds	r3, #1
 8029ff6:	617b      	str	r3, [r7, #20]
 8029ff8:	697a      	ldr	r2, [r7, #20]
 8029ffa:	687b      	ldr	r3, [r7, #4]
 8029ffc:	429a      	cmp	r2, r3
 8029ffe:	dbf0      	blt.n	8029fe2 <_read+0x12>
	}

return len;
 802a000:	687b      	ldr	r3, [r7, #4]
}
 802a002:	4618      	mov	r0, r3
 802a004:	3718      	adds	r7, #24
 802a006:	46bd      	mov	sp, r7
 802a008:	bd80      	pop	{r7, pc}

0802a00a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802a00a:	b580      	push	{r7, lr}
 802a00c:	b086      	sub	sp, #24
 802a00e:	af00      	add	r7, sp, #0
 802a010:	60f8      	str	r0, [r7, #12]
 802a012:	60b9      	str	r1, [r7, #8]
 802a014:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802a016:	2300      	movs	r3, #0
 802a018:	617b      	str	r3, [r7, #20]
 802a01a:	e009      	b.n	802a030 <_write+0x26>
	{
		__io_putchar(*ptr++);
 802a01c:	68bb      	ldr	r3, [r7, #8]
 802a01e:	1c5a      	adds	r2, r3, #1
 802a020:	60ba      	str	r2, [r7, #8]
 802a022:	781b      	ldrb	r3, [r3, #0]
 802a024:	4618      	mov	r0, r3
 802a026:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802a02a:	697b      	ldr	r3, [r7, #20]
 802a02c:	3301      	adds	r3, #1
 802a02e:	617b      	str	r3, [r7, #20]
 802a030:	697a      	ldr	r2, [r7, #20]
 802a032:	687b      	ldr	r3, [r7, #4]
 802a034:	429a      	cmp	r2, r3
 802a036:	dbf1      	blt.n	802a01c <_write+0x12>
	}
	return len;
 802a038:	687b      	ldr	r3, [r7, #4]
}
 802a03a:	4618      	mov	r0, r3
 802a03c:	3718      	adds	r7, #24
 802a03e:	46bd      	mov	sp, r7
 802a040:	bd80      	pop	{r7, pc}

0802a042 <_close>:

int _close(int file)
{
 802a042:	b480      	push	{r7}
 802a044:	b083      	sub	sp, #12
 802a046:	af00      	add	r7, sp, #0
 802a048:	6078      	str	r0, [r7, #4]
	return -1;
 802a04a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802a04e:	4618      	mov	r0, r3
 802a050:	370c      	adds	r7, #12
 802a052:	46bd      	mov	sp, r7
 802a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a058:	4770      	bx	lr

0802a05a <_fstat>:


int _fstat(int file, struct stat *st)
{
 802a05a:	b480      	push	{r7}
 802a05c:	b083      	sub	sp, #12
 802a05e:	af00      	add	r7, sp, #0
 802a060:	6078      	str	r0, [r7, #4]
 802a062:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 802a064:	683b      	ldr	r3, [r7, #0]
 802a066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a06a:	605a      	str	r2, [r3, #4]
	return 0;
 802a06c:	2300      	movs	r3, #0
}
 802a06e:	4618      	mov	r0, r3
 802a070:	370c      	adds	r7, #12
 802a072:	46bd      	mov	sp, r7
 802a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a078:	4770      	bx	lr

0802a07a <_isatty>:

int _isatty(int file)
{
 802a07a:	b480      	push	{r7}
 802a07c:	b083      	sub	sp, #12
 802a07e:	af00      	add	r7, sp, #0
 802a080:	6078      	str	r0, [r7, #4]
	return 1;
 802a082:	2301      	movs	r3, #1
}
 802a084:	4618      	mov	r0, r3
 802a086:	370c      	adds	r7, #12
 802a088:	46bd      	mov	sp, r7
 802a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a08e:	4770      	bx	lr

0802a090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802a090:	b480      	push	{r7}
 802a092:	b085      	sub	sp, #20
 802a094:	af00      	add	r7, sp, #0
 802a096:	60f8      	str	r0, [r7, #12]
 802a098:	60b9      	str	r1, [r7, #8]
 802a09a:	607a      	str	r2, [r7, #4]
	return 0;
 802a09c:	2300      	movs	r3, #0
}
 802a09e:	4618      	mov	r0, r3
 802a0a0:	3714      	adds	r7, #20
 802a0a2:	46bd      	mov	sp, r7
 802a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0a8:	4770      	bx	lr
	...

0802a0ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802a0ac:	b580      	push	{r7, lr}
 802a0ae:	b086      	sub	sp, #24
 802a0b0:	af00      	add	r7, sp, #0
 802a0b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802a0b4:	4a14      	ldr	r2, [pc, #80]	; (802a108 <_sbrk+0x5c>)
 802a0b6:	4b15      	ldr	r3, [pc, #84]	; (802a10c <_sbrk+0x60>)
 802a0b8:	1ad3      	subs	r3, r2, r3
 802a0ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802a0bc:	697b      	ldr	r3, [r7, #20]
 802a0be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802a0c0:	4b13      	ldr	r3, [pc, #76]	; (802a110 <_sbrk+0x64>)
 802a0c2:	681b      	ldr	r3, [r3, #0]
 802a0c4:	2b00      	cmp	r3, #0
 802a0c6:	d102      	bne.n	802a0ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802a0c8:	4b11      	ldr	r3, [pc, #68]	; (802a110 <_sbrk+0x64>)
 802a0ca:	4a12      	ldr	r2, [pc, #72]	; (802a114 <_sbrk+0x68>)
 802a0cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802a0ce:	4b10      	ldr	r3, [pc, #64]	; (802a110 <_sbrk+0x64>)
 802a0d0:	681a      	ldr	r2, [r3, #0]
 802a0d2:	687b      	ldr	r3, [r7, #4]
 802a0d4:	4413      	add	r3, r2
 802a0d6:	693a      	ldr	r2, [r7, #16]
 802a0d8:	429a      	cmp	r2, r3
 802a0da:	d207      	bcs.n	802a0ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 802a0dc:	f011 fe7e 	bl	803bddc <__errno>
 802a0e0:	4603      	mov	r3, r0
 802a0e2:	220c      	movs	r2, #12
 802a0e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802a0e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a0ea:	e009      	b.n	802a100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802a0ec:	4b08      	ldr	r3, [pc, #32]	; (802a110 <_sbrk+0x64>)
 802a0ee:	681b      	ldr	r3, [r3, #0]
 802a0f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802a0f2:	4b07      	ldr	r3, [pc, #28]	; (802a110 <_sbrk+0x64>)
 802a0f4:	681a      	ldr	r2, [r3, #0]
 802a0f6:	687b      	ldr	r3, [r7, #4]
 802a0f8:	4413      	add	r3, r2
 802a0fa:	4a05      	ldr	r2, [pc, #20]	; (802a110 <_sbrk+0x64>)
 802a0fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802a0fe:	68fb      	ldr	r3, [r7, #12]
}
 802a100:	4618      	mov	r0, r3
 802a102:	3718      	adds	r7, #24
 802a104:	46bd      	mov	sp, r7
 802a106:	bd80      	pop	{r7, pc}
 802a108:	24080000 	.word	0x24080000
 802a10c:	00000400 	.word	0x00000400
 802a110:	24024814 	.word	0x24024814
 802a114:	240267f0 	.word	0x240267f0

0802a118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 802a118:	b480      	push	{r7}
 802a11a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 802a11c:	4b37      	ldr	r3, [pc, #220]	; (802a1fc <SystemInit+0xe4>)
 802a11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802a122:	4a36      	ldr	r2, [pc, #216]	; (802a1fc <SystemInit+0xe4>)
 802a124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802a128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802a12c:	4b34      	ldr	r3, [pc, #208]	; (802a200 <SystemInit+0xe8>)
 802a12e:	681b      	ldr	r3, [r3, #0]
 802a130:	f003 030f 	and.w	r3, r3, #15
 802a134:	2b06      	cmp	r3, #6
 802a136:	d807      	bhi.n	802a148 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802a138:	4b31      	ldr	r3, [pc, #196]	; (802a200 <SystemInit+0xe8>)
 802a13a:	681b      	ldr	r3, [r3, #0]
 802a13c:	f023 030f 	bic.w	r3, r3, #15
 802a140:	4a2f      	ldr	r2, [pc, #188]	; (802a200 <SystemInit+0xe8>)
 802a142:	f043 0307 	orr.w	r3, r3, #7
 802a146:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 802a148:	4b2e      	ldr	r3, [pc, #184]	; (802a204 <SystemInit+0xec>)
 802a14a:	681b      	ldr	r3, [r3, #0]
 802a14c:	4a2d      	ldr	r2, [pc, #180]	; (802a204 <SystemInit+0xec>)
 802a14e:	f043 0301 	orr.w	r3, r3, #1
 802a152:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 802a154:	4b2b      	ldr	r3, [pc, #172]	; (802a204 <SystemInit+0xec>)
 802a156:	2200      	movs	r2, #0
 802a158:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 802a15a:	4b2a      	ldr	r3, [pc, #168]	; (802a204 <SystemInit+0xec>)
 802a15c:	681a      	ldr	r2, [r3, #0]
 802a15e:	4929      	ldr	r1, [pc, #164]	; (802a204 <SystemInit+0xec>)
 802a160:	4b29      	ldr	r3, [pc, #164]	; (802a208 <SystemInit+0xf0>)
 802a162:	4013      	ands	r3, r2
 802a164:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802a166:	4b26      	ldr	r3, [pc, #152]	; (802a200 <SystemInit+0xe8>)
 802a168:	681b      	ldr	r3, [r3, #0]
 802a16a:	f003 0308 	and.w	r3, r3, #8
 802a16e:	2b00      	cmp	r3, #0
 802a170:	d007      	beq.n	802a182 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802a172:	4b23      	ldr	r3, [pc, #140]	; (802a200 <SystemInit+0xe8>)
 802a174:	681b      	ldr	r3, [r3, #0]
 802a176:	f023 030f 	bic.w	r3, r3, #15
 802a17a:	4a21      	ldr	r2, [pc, #132]	; (802a200 <SystemInit+0xe8>)
 802a17c:	f043 0307 	orr.w	r3, r3, #7
 802a180:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 802a182:	4b20      	ldr	r3, [pc, #128]	; (802a204 <SystemInit+0xec>)
 802a184:	2200      	movs	r2, #0
 802a186:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 802a188:	4b1e      	ldr	r3, [pc, #120]	; (802a204 <SystemInit+0xec>)
 802a18a:	2200      	movs	r2, #0
 802a18c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 802a18e:	4b1d      	ldr	r3, [pc, #116]	; (802a204 <SystemInit+0xec>)
 802a190:	2200      	movs	r2, #0
 802a192:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 802a194:	4b1b      	ldr	r3, [pc, #108]	; (802a204 <SystemInit+0xec>)
 802a196:	4a1d      	ldr	r2, [pc, #116]	; (802a20c <SystemInit+0xf4>)
 802a198:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802a19a:	4b1a      	ldr	r3, [pc, #104]	; (802a204 <SystemInit+0xec>)
 802a19c:	4a1c      	ldr	r2, [pc, #112]	; (802a210 <SystemInit+0xf8>)
 802a19e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 802a1a0:	4b18      	ldr	r3, [pc, #96]	; (802a204 <SystemInit+0xec>)
 802a1a2:	4a1c      	ldr	r2, [pc, #112]	; (802a214 <SystemInit+0xfc>)
 802a1a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802a1a6:	4b17      	ldr	r3, [pc, #92]	; (802a204 <SystemInit+0xec>)
 802a1a8:	2200      	movs	r2, #0
 802a1aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 802a1ac:	4b15      	ldr	r3, [pc, #84]	; (802a204 <SystemInit+0xec>)
 802a1ae:	4a19      	ldr	r2, [pc, #100]	; (802a214 <SystemInit+0xfc>)
 802a1b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 802a1b2:	4b14      	ldr	r3, [pc, #80]	; (802a204 <SystemInit+0xec>)
 802a1b4:	2200      	movs	r2, #0
 802a1b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 802a1b8:	4b12      	ldr	r3, [pc, #72]	; (802a204 <SystemInit+0xec>)
 802a1ba:	4a16      	ldr	r2, [pc, #88]	; (802a214 <SystemInit+0xfc>)
 802a1bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 802a1be:	4b11      	ldr	r3, [pc, #68]	; (802a204 <SystemInit+0xec>)
 802a1c0:	2200      	movs	r2, #0
 802a1c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 802a1c4:	4b0f      	ldr	r3, [pc, #60]	; (802a204 <SystemInit+0xec>)
 802a1c6:	681b      	ldr	r3, [r3, #0]
 802a1c8:	4a0e      	ldr	r2, [pc, #56]	; (802a204 <SystemInit+0xec>)
 802a1ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802a1ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 802a1d0:	4b0c      	ldr	r3, [pc, #48]	; (802a204 <SystemInit+0xec>)
 802a1d2:	2200      	movs	r2, #0
 802a1d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 802a1d6:	4b10      	ldr	r3, [pc, #64]	; (802a218 <SystemInit+0x100>)
 802a1d8:	681a      	ldr	r2, [r3, #0]
 802a1da:	4b10      	ldr	r3, [pc, #64]	; (802a21c <SystemInit+0x104>)
 802a1dc:	4013      	ands	r3, r2
 802a1de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802a1e2:	d202      	bcs.n	802a1ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 802a1e4:	4b0e      	ldr	r3, [pc, #56]	; (802a220 <SystemInit+0x108>)
 802a1e6:	2201      	movs	r2, #1
 802a1e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 802a1ea:	4b0e      	ldr	r3, [pc, #56]	; (802a224 <SystemInit+0x10c>)
 802a1ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 802a1f0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 802a1f2:	bf00      	nop
 802a1f4:	46bd      	mov	sp, r7
 802a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1fa:	4770      	bx	lr
 802a1fc:	e000ed00 	.word	0xe000ed00
 802a200:	52002000 	.word	0x52002000
 802a204:	58024400 	.word	0x58024400
 802a208:	eaf6ed7f 	.word	0xeaf6ed7f
 802a20c:	02020200 	.word	0x02020200
 802a210:	01ff0000 	.word	0x01ff0000
 802a214:	01010280 	.word	0x01010280
 802a218:	5c001000 	.word	0x5c001000
 802a21c:	ffff0000 	.word	0xffff0000
 802a220:	51008108 	.word	0x51008108
 802a224:	52004000 	.word	0x52004000

0802a228 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 802a228:	b580      	push	{r7, lr}
 802a22a:	b088      	sub	sp, #32
 802a22c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a22e:	f107 0310 	add.w	r3, r7, #16
 802a232:	2200      	movs	r2, #0
 802a234:	601a      	str	r2, [r3, #0]
 802a236:	605a      	str	r2, [r3, #4]
 802a238:	609a      	str	r2, [r3, #8]
 802a23a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a23c:	1d3b      	adds	r3, r7, #4
 802a23e:	2200      	movs	r2, #0
 802a240:	601a      	str	r2, [r3, #0]
 802a242:	605a      	str	r2, [r3, #4]
 802a244:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 802a246:	4b1e      	ldr	r3, [pc, #120]	; (802a2c0 <MX_TIM2_Init+0x98>)
 802a248:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802a24c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 802a24e:	4b1c      	ldr	r3, [pc, #112]	; (802a2c0 <MX_TIM2_Init+0x98>)
 802a250:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a254:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a256:	4b1a      	ldr	r3, [pc, #104]	; (802a2c0 <MX_TIM2_Init+0x98>)
 802a258:	2200      	movs	r2, #0
 802a25a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 802a25c:	4b18      	ldr	r3, [pc, #96]	; (802a2c0 <MX_TIM2_Init+0x98>)
 802a25e:	2264      	movs	r2, #100	; 0x64
 802a260:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a262:	4b17      	ldr	r3, [pc, #92]	; (802a2c0 <MX_TIM2_Init+0x98>)
 802a264:	2200      	movs	r2, #0
 802a266:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a268:	4b15      	ldr	r3, [pc, #84]	; (802a2c0 <MX_TIM2_Init+0x98>)
 802a26a:	2200      	movs	r2, #0
 802a26c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802a26e:	4814      	ldr	r0, [pc, #80]	; (802a2c0 <MX_TIM2_Init+0x98>)
 802a270:	f00a f953 	bl	803451a <HAL_TIM_Base_Init>
 802a274:	4603      	mov	r3, r0
 802a276:	2b00      	cmp	r3, #0
 802a278:	d001      	beq.n	802a27e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 802a27a:	f7ff fc61 	bl	8029b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a27e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a282:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802a284:	f107 0310 	add.w	r3, r7, #16
 802a288:	4619      	mov	r1, r3
 802a28a:	480d      	ldr	r0, [pc, #52]	; (802a2c0 <MX_TIM2_Init+0x98>)
 802a28c:	f00a fb34 	bl	80348f8 <HAL_TIM_ConfigClockSource>
 802a290:	4603      	mov	r3, r0
 802a292:	2b00      	cmp	r3, #0
 802a294:	d001      	beq.n	802a29a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 802a296:	f7ff fc53 	bl	8029b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a29a:	2300      	movs	r3, #0
 802a29c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a29e:	2300      	movs	r3, #0
 802a2a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802a2a2:	1d3b      	adds	r3, r7, #4
 802a2a4:	4619      	mov	r1, r3
 802a2a6:	4806      	ldr	r0, [pc, #24]	; (802a2c0 <MX_TIM2_Init+0x98>)
 802a2a8:	f00a fd7e 	bl	8034da8 <HAL_TIMEx_MasterConfigSynchronization>
 802a2ac:	4603      	mov	r3, r0
 802a2ae:	2b00      	cmp	r3, #0
 802a2b0:	d001      	beq.n	802a2b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 802a2b2:	f7ff fc45 	bl	8029b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802a2b6:	bf00      	nop
 802a2b8:	3720      	adds	r7, #32
 802a2ba:	46bd      	mov	sp, r7
 802a2bc:	bd80      	pop	{r7, pc}
 802a2be:	bf00      	nop
 802a2c0:	24024818 	.word	0x24024818

0802a2c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 802a2c4:	b580      	push	{r7, lr}
 802a2c6:	b088      	sub	sp, #32
 802a2c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a2ca:	f107 0310 	add.w	r3, r7, #16
 802a2ce:	2200      	movs	r2, #0
 802a2d0:	601a      	str	r2, [r3, #0]
 802a2d2:	605a      	str	r2, [r3, #4]
 802a2d4:	609a      	str	r2, [r3, #8]
 802a2d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a2d8:	1d3b      	adds	r3, r7, #4
 802a2da:	2200      	movs	r2, #0
 802a2dc:	601a      	str	r2, [r3, #0]
 802a2de:	605a      	str	r2, [r3, #4]
 802a2e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802a2e2:	4b1d      	ldr	r3, [pc, #116]	; (802a358 <MX_TIM3_Init+0x94>)
 802a2e4:	4a1d      	ldr	r2, [pc, #116]	; (802a35c <MX_TIM3_Init+0x98>)
 802a2e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 802a2e8:	4b1b      	ldr	r3, [pc, #108]	; (802a358 <MX_TIM3_Init+0x94>)
 802a2ea:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a2ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a2f0:	4b19      	ldr	r3, [pc, #100]	; (802a358 <MX_TIM3_Init+0x94>)
 802a2f2:	2200      	movs	r2, #0
 802a2f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 802a2f6:	4b18      	ldr	r3, [pc, #96]	; (802a358 <MX_TIM3_Init+0x94>)
 802a2f8:	220a      	movs	r2, #10
 802a2fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a2fc:	4b16      	ldr	r3, [pc, #88]	; (802a358 <MX_TIM3_Init+0x94>)
 802a2fe:	2200      	movs	r2, #0
 802a300:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a302:	4b15      	ldr	r3, [pc, #84]	; (802a358 <MX_TIM3_Init+0x94>)
 802a304:	2200      	movs	r2, #0
 802a306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 802a308:	4813      	ldr	r0, [pc, #76]	; (802a358 <MX_TIM3_Init+0x94>)
 802a30a:	f00a f906 	bl	803451a <HAL_TIM_Base_Init>
 802a30e:	4603      	mov	r3, r0
 802a310:	2b00      	cmp	r3, #0
 802a312:	d001      	beq.n	802a318 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 802a314:	f7ff fc14 	bl	8029b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a31c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 802a31e:	f107 0310 	add.w	r3, r7, #16
 802a322:	4619      	mov	r1, r3
 802a324:	480c      	ldr	r0, [pc, #48]	; (802a358 <MX_TIM3_Init+0x94>)
 802a326:	f00a fae7 	bl	80348f8 <HAL_TIM_ConfigClockSource>
 802a32a:	4603      	mov	r3, r0
 802a32c:	2b00      	cmp	r3, #0
 802a32e:	d001      	beq.n	802a334 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 802a330:	f7ff fc06 	bl	8029b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a334:	2300      	movs	r3, #0
 802a336:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a338:	2300      	movs	r3, #0
 802a33a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 802a33c:	1d3b      	adds	r3, r7, #4
 802a33e:	4619      	mov	r1, r3
 802a340:	4805      	ldr	r0, [pc, #20]	; (802a358 <MX_TIM3_Init+0x94>)
 802a342:	f00a fd31 	bl	8034da8 <HAL_TIMEx_MasterConfigSynchronization>
 802a346:	4603      	mov	r3, r0
 802a348:	2b00      	cmp	r3, #0
 802a34a:	d001      	beq.n	802a350 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 802a34c:	f7ff fbf8 	bl	8029b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 802a350:	bf00      	nop
 802a352:	3720      	adds	r7, #32
 802a354:	46bd      	mov	sp, r7
 802a356:	bd80      	pop	{r7, pc}
 802a358:	24024864 	.word	0x24024864
 802a35c:	40000400 	.word	0x40000400

0802a360 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 802a360:	b580      	push	{r7, lr}
 802a362:	b088      	sub	sp, #32
 802a364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a366:	f107 0310 	add.w	r3, r7, #16
 802a36a:	2200      	movs	r2, #0
 802a36c:	601a      	str	r2, [r3, #0]
 802a36e:	605a      	str	r2, [r3, #4]
 802a370:	609a      	str	r2, [r3, #8]
 802a372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a374:	1d3b      	adds	r3, r7, #4
 802a376:	2200      	movs	r2, #0
 802a378:	601a      	str	r2, [r3, #0]
 802a37a:	605a      	str	r2, [r3, #4]
 802a37c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 802a37e:	4b1d      	ldr	r3, [pc, #116]	; (802a3f4 <MX_TIM4_Init+0x94>)
 802a380:	4a1d      	ldr	r2, [pc, #116]	; (802a3f8 <MX_TIM4_Init+0x98>)
 802a382:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 802a384:	4b1b      	ldr	r3, [pc, #108]	; (802a3f4 <MX_TIM4_Init+0x94>)
 802a386:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a38a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a38c:	4b19      	ldr	r3, [pc, #100]	; (802a3f4 <MX_TIM4_Init+0x94>)
 802a38e:	2200      	movs	r2, #0
 802a390:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 802a392:	4b18      	ldr	r3, [pc, #96]	; (802a3f4 <MX_TIM4_Init+0x94>)
 802a394:	2264      	movs	r2, #100	; 0x64
 802a396:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a398:	4b16      	ldr	r3, [pc, #88]	; (802a3f4 <MX_TIM4_Init+0x94>)
 802a39a:	2200      	movs	r2, #0
 802a39c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a39e:	4b15      	ldr	r3, [pc, #84]	; (802a3f4 <MX_TIM4_Init+0x94>)
 802a3a0:	2200      	movs	r2, #0
 802a3a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 802a3a4:	4813      	ldr	r0, [pc, #76]	; (802a3f4 <MX_TIM4_Init+0x94>)
 802a3a6:	f00a f8b8 	bl	803451a <HAL_TIM_Base_Init>
 802a3aa:	4603      	mov	r3, r0
 802a3ac:	2b00      	cmp	r3, #0
 802a3ae:	d001      	beq.n	802a3b4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 802a3b0:	f7ff fbc6 	bl	8029b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a3b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a3b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 802a3ba:	f107 0310 	add.w	r3, r7, #16
 802a3be:	4619      	mov	r1, r3
 802a3c0:	480c      	ldr	r0, [pc, #48]	; (802a3f4 <MX_TIM4_Init+0x94>)
 802a3c2:	f00a fa99 	bl	80348f8 <HAL_TIM_ConfigClockSource>
 802a3c6:	4603      	mov	r3, r0
 802a3c8:	2b00      	cmp	r3, #0
 802a3ca:	d001      	beq.n	802a3d0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 802a3cc:	f7ff fbb8 	bl	8029b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a3d0:	2300      	movs	r3, #0
 802a3d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a3d4:	2300      	movs	r3, #0
 802a3d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802a3d8:	1d3b      	adds	r3, r7, #4
 802a3da:	4619      	mov	r1, r3
 802a3dc:	4805      	ldr	r0, [pc, #20]	; (802a3f4 <MX_TIM4_Init+0x94>)
 802a3de:	f00a fce3 	bl	8034da8 <HAL_TIMEx_MasterConfigSynchronization>
 802a3e2:	4603      	mov	r3, r0
 802a3e4:	2b00      	cmp	r3, #0
 802a3e6:	d001      	beq.n	802a3ec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 802a3e8:	f7ff fbaa 	bl	8029b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802a3ec:	bf00      	nop
 802a3ee:	3720      	adds	r7, #32
 802a3f0:	46bd      	mov	sp, r7
 802a3f2:	bd80      	pop	{r7, pc}
 802a3f4:	240248b0 	.word	0x240248b0
 802a3f8:	40000800 	.word	0x40000800

0802a3fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 802a3fc:	b580      	push	{r7, lr}
 802a3fe:	b086      	sub	sp, #24
 802a400:	af00      	add	r7, sp, #0
 802a402:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 802a404:	687b      	ldr	r3, [r7, #4]
 802a406:	681b      	ldr	r3, [r3, #0]
 802a408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a40c:	d117      	bne.n	802a43e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802a40e:	4b2a      	ldr	r3, [pc, #168]	; (802a4b8 <HAL_TIM_Base_MspInit+0xbc>)
 802a410:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a414:	4a28      	ldr	r2, [pc, #160]	; (802a4b8 <HAL_TIM_Base_MspInit+0xbc>)
 802a416:	f043 0301 	orr.w	r3, r3, #1
 802a41a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a41e:	4b26      	ldr	r3, [pc, #152]	; (802a4b8 <HAL_TIM_Base_MspInit+0xbc>)
 802a420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a424:	f003 0301 	and.w	r3, r3, #1
 802a428:	617b      	str	r3, [r7, #20]
 802a42a:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 802a42c:	2200      	movs	r2, #0
 802a42e:	2101      	movs	r1, #1
 802a430:	201c      	movs	r0, #28
 802a432:	f000 ff3a 	bl	802b2aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802a436:	201c      	movs	r0, #28
 802a438:	f000 ff51 	bl	802b2de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 802a43c:	e038      	b.n	802a4b0 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 802a43e:	687b      	ldr	r3, [r7, #4]
 802a440:	681b      	ldr	r3, [r3, #0]
 802a442:	4a1e      	ldr	r2, [pc, #120]	; (802a4bc <HAL_TIM_Base_MspInit+0xc0>)
 802a444:	4293      	cmp	r3, r2
 802a446:	d117      	bne.n	802a478 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802a448:	4b1b      	ldr	r3, [pc, #108]	; (802a4b8 <HAL_TIM_Base_MspInit+0xbc>)
 802a44a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a44e:	4a1a      	ldr	r2, [pc, #104]	; (802a4b8 <HAL_TIM_Base_MspInit+0xbc>)
 802a450:	f043 0302 	orr.w	r3, r3, #2
 802a454:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a458:	4b17      	ldr	r3, [pc, #92]	; (802a4b8 <HAL_TIM_Base_MspInit+0xbc>)
 802a45a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a45e:	f003 0302 	and.w	r3, r3, #2
 802a462:	613b      	str	r3, [r7, #16]
 802a464:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 802a466:	2200      	movs	r2, #0
 802a468:	2101      	movs	r1, #1
 802a46a:	201d      	movs	r0, #29
 802a46c:	f000 ff1d 	bl	802b2aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 802a470:	201d      	movs	r0, #29
 802a472:	f000 ff34 	bl	802b2de <HAL_NVIC_EnableIRQ>
}
 802a476:	e01b      	b.n	802a4b0 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 802a478:	687b      	ldr	r3, [r7, #4]
 802a47a:	681b      	ldr	r3, [r3, #0]
 802a47c:	4a10      	ldr	r2, [pc, #64]	; (802a4c0 <HAL_TIM_Base_MspInit+0xc4>)
 802a47e:	4293      	cmp	r3, r2
 802a480:	d116      	bne.n	802a4b0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 802a482:	4b0d      	ldr	r3, [pc, #52]	; (802a4b8 <HAL_TIM_Base_MspInit+0xbc>)
 802a484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a488:	4a0b      	ldr	r2, [pc, #44]	; (802a4b8 <HAL_TIM_Base_MspInit+0xbc>)
 802a48a:	f043 0304 	orr.w	r3, r3, #4
 802a48e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a492:	4b09      	ldr	r3, [pc, #36]	; (802a4b8 <HAL_TIM_Base_MspInit+0xbc>)
 802a494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a498:	f003 0304 	and.w	r3, r3, #4
 802a49c:	60fb      	str	r3, [r7, #12]
 802a49e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 802a4a0:	2200      	movs	r2, #0
 802a4a2:	2100      	movs	r1, #0
 802a4a4:	201e      	movs	r0, #30
 802a4a6:	f000 ff00 	bl	802b2aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 802a4aa:	201e      	movs	r0, #30
 802a4ac:	f000 ff17 	bl	802b2de <HAL_NVIC_EnableIRQ>
}
 802a4b0:	bf00      	nop
 802a4b2:	3718      	adds	r7, #24
 802a4b4:	46bd      	mov	sp, r7
 802a4b6:	bd80      	pop	{r7, pc}
 802a4b8:	58024400 	.word	0x58024400
 802a4bc:	40000400 	.word	0x40000400
 802a4c0:	40000800 	.word	0x40000800

0802a4c4 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 802a4c4:	b580      	push	{r7, lr}
 802a4c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 802a4c8:	4b25      	ldr	r3, [pc, #148]	; (802a560 <MX_UART4_Init+0x9c>)
 802a4ca:	4a26      	ldr	r2, [pc, #152]	; (802a564 <MX_UART4_Init+0xa0>)
 802a4cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 802a4ce:	4b24      	ldr	r3, [pc, #144]	; (802a560 <MX_UART4_Init+0x9c>)
 802a4d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802a4d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 802a4d6:	4b22      	ldr	r3, [pc, #136]	; (802a560 <MX_UART4_Init+0x9c>)
 802a4d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a4dc:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 802a4de:	4b20      	ldr	r3, [pc, #128]	; (802a560 <MX_UART4_Init+0x9c>)
 802a4e0:	2200      	movs	r2, #0
 802a4e2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 802a4e4:	4b1e      	ldr	r3, [pc, #120]	; (802a560 <MX_UART4_Init+0x9c>)
 802a4e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a4ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 802a4ec:	4b1c      	ldr	r3, [pc, #112]	; (802a560 <MX_UART4_Init+0x9c>)
 802a4ee:	220c      	movs	r2, #12
 802a4f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a4f2:	4b1b      	ldr	r3, [pc, #108]	; (802a560 <MX_UART4_Init+0x9c>)
 802a4f4:	2200      	movs	r2, #0
 802a4f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802a4f8:	4b19      	ldr	r3, [pc, #100]	; (802a560 <MX_UART4_Init+0x9c>)
 802a4fa:	2200      	movs	r2, #0
 802a4fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a4fe:	4b18      	ldr	r3, [pc, #96]	; (802a560 <MX_UART4_Init+0x9c>)
 802a500:	2200      	movs	r2, #0
 802a502:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a504:	4b16      	ldr	r3, [pc, #88]	; (802a560 <MX_UART4_Init+0x9c>)
 802a506:	2200      	movs	r2, #0
 802a508:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a50a:	4b15      	ldr	r3, [pc, #84]	; (802a560 <MX_UART4_Init+0x9c>)
 802a50c:	2220      	movs	r2, #32
 802a50e:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a510:	4b13      	ldr	r3, [pc, #76]	; (802a560 <MX_UART4_Init+0x9c>)
 802a512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a516:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 802a518:	4811      	ldr	r0, [pc, #68]	; (802a560 <MX_UART4_Init+0x9c>)
 802a51a:	f00a fcf1 	bl	8034f00 <HAL_UART_Init>
 802a51e:	4603      	mov	r3, r0
 802a520:	2b00      	cmp	r3, #0
 802a522:	d001      	beq.n	802a528 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 802a524:	f7ff fb0c 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a528:	2100      	movs	r1, #0
 802a52a:	480d      	ldr	r0, [pc, #52]	; (802a560 <MX_UART4_Init+0x9c>)
 802a52c:	f00d fa3e 	bl	80379ac <HAL_UARTEx_SetTxFifoThreshold>
 802a530:	4603      	mov	r3, r0
 802a532:	2b00      	cmp	r3, #0
 802a534:	d001      	beq.n	802a53a <MX_UART4_Init+0x76>
  {
    Error_Handler();
 802a536:	f7ff fb03 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a53a:	2100      	movs	r1, #0
 802a53c:	4808      	ldr	r0, [pc, #32]	; (802a560 <MX_UART4_Init+0x9c>)
 802a53e:	f00d fa73 	bl	8037a28 <HAL_UARTEx_SetRxFifoThreshold>
 802a542:	4603      	mov	r3, r0
 802a544:	2b00      	cmp	r3, #0
 802a546:	d001      	beq.n	802a54c <MX_UART4_Init+0x88>
  {
    Error_Handler();
 802a548:	f7ff fafa 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 802a54c:	4804      	ldr	r0, [pc, #16]	; (802a560 <MX_UART4_Init+0x9c>)
 802a54e:	f00d f9f4 	bl	803793a <HAL_UARTEx_DisableFifoMode>
 802a552:	4603      	mov	r3, r0
 802a554:	2b00      	cmp	r3, #0
 802a556:	d001      	beq.n	802a55c <MX_UART4_Init+0x98>
  {
    Error_Handler();
 802a558:	f7ff faf2 	bl	8029b40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 802a55c:	bf00      	nop
 802a55e:	bd80      	pop	{r7, pc}
 802a560:	240248fc 	.word	0x240248fc
 802a564:	40004c00 	.word	0x40004c00

0802a568 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 802a568:	b580      	push	{r7, lr}
 802a56a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 802a56c:	4b22      	ldr	r3, [pc, #136]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a56e:	4a23      	ldr	r2, [pc, #140]	; (802a5fc <MX_UART7_Init+0x94>)
 802a570:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 802a572:	4b21      	ldr	r3, [pc, #132]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a574:	4a22      	ldr	r2, [pc, #136]	; (802a600 <MX_UART7_Init+0x98>)
 802a576:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 802a578:	4b1f      	ldr	r3, [pc, #124]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a57a:	2200      	movs	r2, #0
 802a57c:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 802a57e:	4b1e      	ldr	r3, [pc, #120]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a580:	2200      	movs	r2, #0
 802a582:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 802a584:	4b1c      	ldr	r3, [pc, #112]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a586:	2200      	movs	r2, #0
 802a588:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 802a58a:	4b1b      	ldr	r3, [pc, #108]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a58c:	220c      	movs	r2, #12
 802a58e:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a590:	4b19      	ldr	r3, [pc, #100]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a592:	2200      	movs	r2, #0
 802a594:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 802a596:	4b18      	ldr	r3, [pc, #96]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a598:	2200      	movs	r2, #0
 802a59a:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a59c:	4b16      	ldr	r3, [pc, #88]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a59e:	2200      	movs	r2, #0
 802a5a0:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a5a2:	4b15      	ldr	r3, [pc, #84]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a5a4:	2200      	movs	r2, #0
 802a5a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802a5a8:	4b13      	ldr	r3, [pc, #76]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a5aa:	2200      	movs	r2, #0
 802a5ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 802a5ae:	4812      	ldr	r0, [pc, #72]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a5b0:	f00a fca6 	bl	8034f00 <HAL_UART_Init>
 802a5b4:	4603      	mov	r3, r0
 802a5b6:	2b00      	cmp	r3, #0
 802a5b8:	d001      	beq.n	802a5be <MX_UART7_Init+0x56>
  {
    Error_Handler();
 802a5ba:	f7ff fac1 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a5be:	2100      	movs	r1, #0
 802a5c0:	480d      	ldr	r0, [pc, #52]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a5c2:	f00d f9f3 	bl	80379ac <HAL_UARTEx_SetTxFifoThreshold>
 802a5c6:	4603      	mov	r3, r0
 802a5c8:	2b00      	cmp	r3, #0
 802a5ca:	d001      	beq.n	802a5d0 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 802a5cc:	f7ff fab8 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a5d0:	2100      	movs	r1, #0
 802a5d2:	4809      	ldr	r0, [pc, #36]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a5d4:	f00d fa28 	bl	8037a28 <HAL_UARTEx_SetRxFifoThreshold>
 802a5d8:	4603      	mov	r3, r0
 802a5da:	2b00      	cmp	r3, #0
 802a5dc:	d001      	beq.n	802a5e2 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 802a5de:	f7ff faaf 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 802a5e2:	4805      	ldr	r0, [pc, #20]	; (802a5f8 <MX_UART7_Init+0x90>)
 802a5e4:	f00d f9a9 	bl	803793a <HAL_UARTEx_DisableFifoMode>
 802a5e8:	4603      	mov	r3, r0
 802a5ea:	2b00      	cmp	r3, #0
 802a5ec:	d001      	beq.n	802a5f2 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 802a5ee:	f7ff faa7 	bl	8029b40 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 802a5f2:	bf00      	nop
 802a5f4:	bd80      	pop	{r7, pc}
 802a5f6:	bf00      	nop
 802a5f8:	2402498c 	.word	0x2402498c
 802a5fc:	40007800 	.word	0x40007800
 802a600:	001312d0 	.word	0x001312d0

0802a604 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 802a604:	b580      	push	{r7, lr}
 802a606:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 802a608:	4b26      	ldr	r3, [pc, #152]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a60a:	4a27      	ldr	r2, [pc, #156]	; (802a6a8 <MX_UART8_Init+0xa4>)
 802a60c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 802a60e:	4b25      	ldr	r3, [pc, #148]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a610:	4a26      	ldr	r2, [pc, #152]	; (802a6ac <MX_UART8_Init+0xa8>)
 802a612:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 802a614:	4b23      	ldr	r3, [pc, #140]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a616:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a61a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 802a61c:	4b21      	ldr	r3, [pc, #132]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a61e:	2200      	movs	r2, #0
 802a620:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 802a622:	4b20      	ldr	r3, [pc, #128]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a628:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 802a62a:	4b1e      	ldr	r3, [pc, #120]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a62c:	220c      	movs	r2, #12
 802a62e:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a630:	4b1c      	ldr	r3, [pc, #112]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a632:	2200      	movs	r2, #0
 802a634:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 802a636:	4b1b      	ldr	r3, [pc, #108]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a638:	2200      	movs	r2, #0
 802a63a:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a63c:	4b19      	ldr	r3, [pc, #100]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a63e:	2200      	movs	r2, #0
 802a640:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a642:	4b18      	ldr	r3, [pc, #96]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a644:	2200      	movs	r2, #0
 802a646:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a648:	4b16      	ldr	r3, [pc, #88]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a64a:	2220      	movs	r2, #32
 802a64c:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a64e:	4b15      	ldr	r3, [pc, #84]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a650:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a654:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 802a656:	4813      	ldr	r0, [pc, #76]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a658:	f00a fc52 	bl	8034f00 <HAL_UART_Init>
 802a65c:	4603      	mov	r3, r0
 802a65e:	2b00      	cmp	r3, #0
 802a660:	d001      	beq.n	802a666 <MX_UART8_Init+0x62>
  {
    Error_Handler();
 802a662:	f7ff fa6d 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a666:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802a66a:	480e      	ldr	r0, [pc, #56]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a66c:	f00d f99e 	bl	80379ac <HAL_UARTEx_SetTxFifoThreshold>
 802a670:	4603      	mov	r3, r0
 802a672:	2b00      	cmp	r3, #0
 802a674:	d001      	beq.n	802a67a <MX_UART8_Init+0x76>
  {
    Error_Handler();
 802a676:	f7ff fa63 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a67a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802a67e:	4809      	ldr	r0, [pc, #36]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a680:	f00d f9d2 	bl	8037a28 <HAL_UARTEx_SetRxFifoThreshold>
 802a684:	4603      	mov	r3, r0
 802a686:	2b00      	cmp	r3, #0
 802a688:	d001      	beq.n	802a68e <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 802a68a:	f7ff fa59 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 802a68e:	4805      	ldr	r0, [pc, #20]	; (802a6a4 <MX_UART8_Init+0xa0>)
 802a690:	f00d f918 	bl	80378c4 <HAL_UARTEx_EnableFifoMode>
 802a694:	4603      	mov	r3, r0
 802a696:	2b00      	cmp	r3, #0
 802a698:	d001      	beq.n	802a69e <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 802a69a:	f7ff fa51 	bl	8029b40 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 802a69e:	bf00      	nop
 802a6a0:	bd80      	pop	{r7, pc}
 802a6a2:	bf00      	nop
 802a6a4:	24024a1c 	.word	0x24024a1c
 802a6a8:	40007c00 	.word	0x40007c00
 802a6ac:	001312d0 	.word	0x001312d0

0802a6b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 802a6b0:	b580      	push	{r7, lr}
 802a6b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802a6b4:	4b22      	ldr	r3, [pc, #136]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a6b6:	4a23      	ldr	r2, [pc, #140]	; (802a744 <MX_USART2_UART_Init+0x94>)
 802a6b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 802a6ba:	4b21      	ldr	r3, [pc, #132]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a6bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802a6c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802a6c2:	4b1f      	ldr	r3, [pc, #124]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a6c4:	2200      	movs	r2, #0
 802a6c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802a6c8:	4b1d      	ldr	r3, [pc, #116]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a6ca:	2200      	movs	r2, #0
 802a6cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802a6ce:	4b1c      	ldr	r3, [pc, #112]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a6d0:	2200      	movs	r2, #0
 802a6d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802a6d4:	4b1a      	ldr	r3, [pc, #104]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a6d6:	220c      	movs	r2, #12
 802a6d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a6da:	4b19      	ldr	r3, [pc, #100]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a6dc:	2200      	movs	r2, #0
 802a6de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802a6e0:	4b17      	ldr	r3, [pc, #92]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a6e2:	2200      	movs	r2, #0
 802a6e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a6e6:	4b16      	ldr	r3, [pc, #88]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a6e8:	2200      	movs	r2, #0
 802a6ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a6ec:	4b14      	ldr	r3, [pc, #80]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a6ee:	2200      	movs	r2, #0
 802a6f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802a6f2:	4b13      	ldr	r3, [pc, #76]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a6f4:	2200      	movs	r2, #0
 802a6f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802a6f8:	4811      	ldr	r0, [pc, #68]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a6fa:	f00a fc01 	bl	8034f00 <HAL_UART_Init>
 802a6fe:	4603      	mov	r3, r0
 802a700:	2b00      	cmp	r3, #0
 802a702:	d001      	beq.n	802a708 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 802a704:	f7ff fa1c 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a708:	2100      	movs	r1, #0
 802a70a:	480d      	ldr	r0, [pc, #52]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a70c:	f00d f94e 	bl	80379ac <HAL_UARTEx_SetTxFifoThreshold>
 802a710:	4603      	mov	r3, r0
 802a712:	2b00      	cmp	r3, #0
 802a714:	d001      	beq.n	802a71a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 802a716:	f7ff fa13 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a71a:	2100      	movs	r1, #0
 802a71c:	4808      	ldr	r0, [pc, #32]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a71e:	f00d f983 	bl	8037a28 <HAL_UARTEx_SetRxFifoThreshold>
 802a722:	4603      	mov	r3, r0
 802a724:	2b00      	cmp	r3, #0
 802a726:	d001      	beq.n	802a72c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 802a728:	f7ff fa0a 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 802a72c:	4804      	ldr	r0, [pc, #16]	; (802a740 <MX_USART2_UART_Init+0x90>)
 802a72e:	f00d f904 	bl	803793a <HAL_UARTEx_DisableFifoMode>
 802a732:	4603      	mov	r3, r0
 802a734:	2b00      	cmp	r3, #0
 802a736:	d001      	beq.n	802a73c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 802a738:	f7ff fa02 	bl	8029b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802a73c:	bf00      	nop
 802a73e:	bd80      	pop	{r7, pc}
 802a740:	24024aac 	.word	0x24024aac
 802a744:	40004400 	.word	0x40004400

0802a748 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 802a748:	b580      	push	{r7, lr}
 802a74a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 802a74c:	4b26      	ldr	r3, [pc, #152]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a74e:	4a27      	ldr	r2, [pc, #156]	; (802a7ec <MX_USART3_UART_Init+0xa4>)
 802a750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 802a752:	4b25      	ldr	r3, [pc, #148]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a754:	4a26      	ldr	r2, [pc, #152]	; (802a7f0 <MX_USART3_UART_Init+0xa8>)
 802a756:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 802a758:	4b23      	ldr	r3, [pc, #140]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a75a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a75e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 802a760:	4b21      	ldr	r3, [pc, #132]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a762:	2200      	movs	r2, #0
 802a764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 802a766:	4b20      	ldr	r3, [pc, #128]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a76c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 802a76e:	4b1e      	ldr	r3, [pc, #120]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a770:	220c      	movs	r2, #12
 802a772:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a774:	4b1c      	ldr	r3, [pc, #112]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a776:	2200      	movs	r2, #0
 802a778:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 802a77a:	4b1b      	ldr	r3, [pc, #108]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a77c:	2200      	movs	r2, #0
 802a77e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a780:	4b19      	ldr	r3, [pc, #100]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a782:	2200      	movs	r2, #0
 802a784:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a786:	4b18      	ldr	r3, [pc, #96]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a788:	2200      	movs	r2, #0
 802a78a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a78c:	4b16      	ldr	r3, [pc, #88]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a78e:	2220      	movs	r2, #32
 802a790:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a792:	4b15      	ldr	r3, [pc, #84]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a794:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a798:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 802a79a:	4813      	ldr	r0, [pc, #76]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a79c:	f00a fbb0 	bl	8034f00 <HAL_UART_Init>
 802a7a0:	4603      	mov	r3, r0
 802a7a2:	2b00      	cmp	r3, #0
 802a7a4:	d001      	beq.n	802a7aa <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 802a7a6:	f7ff f9cb 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a7aa:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802a7ae:	480e      	ldr	r0, [pc, #56]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a7b0:	f00d f8fc 	bl	80379ac <HAL_UARTEx_SetTxFifoThreshold>
 802a7b4:	4603      	mov	r3, r0
 802a7b6:	2b00      	cmp	r3, #0
 802a7b8:	d001      	beq.n	802a7be <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 802a7ba:	f7ff f9c1 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a7be:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802a7c2:	4809      	ldr	r0, [pc, #36]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a7c4:	f00d f930 	bl	8037a28 <HAL_UARTEx_SetRxFifoThreshold>
 802a7c8:	4603      	mov	r3, r0
 802a7ca:	2b00      	cmp	r3, #0
 802a7cc:	d001      	beq.n	802a7d2 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 802a7ce:	f7ff f9b7 	bl	8029b40 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 802a7d2:	4805      	ldr	r0, [pc, #20]	; (802a7e8 <MX_USART3_UART_Init+0xa0>)
 802a7d4:	f00d f876 	bl	80378c4 <HAL_UARTEx_EnableFifoMode>
 802a7d8:	4603      	mov	r3, r0
 802a7da:	2b00      	cmp	r3, #0
 802a7dc:	d001      	beq.n	802a7e2 <MX_USART3_UART_Init+0x9a>
  {
    Error_Handler();
 802a7de:	f7ff f9af 	bl	8029b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 802a7e2:	bf00      	nop
 802a7e4:	bd80      	pop	{r7, pc}
 802a7e6:	bf00      	nop
 802a7e8:	24024b3c 	.word	0x24024b3c
 802a7ec:	40004800 	.word	0x40004800
 802a7f0:	001312d0 	.word	0x001312d0

0802a7f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 802a7f4:	b580      	push	{r7, lr}
 802a7f6:	b0c0      	sub	sp, #256	; 0x100
 802a7f8:	af00      	add	r7, sp, #0
 802a7fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802a7fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a800:	2200      	movs	r2, #0
 802a802:	601a      	str	r2, [r3, #0]
 802a804:	605a      	str	r2, [r3, #4]
 802a806:	609a      	str	r2, [r3, #8]
 802a808:	60da      	str	r2, [r3, #12]
 802a80a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802a80c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a810:	22bc      	movs	r2, #188	; 0xbc
 802a812:	2100      	movs	r1, #0
 802a814:	4618      	mov	r0, r3
 802a816:	f011 fb55 	bl	803bec4 <memset>
  if(uartHandle->Instance==UART4)
 802a81a:	687b      	ldr	r3, [r7, #4]
 802a81c:	681b      	ldr	r3, [r3, #0]
 802a81e:	4ac2      	ldr	r2, [pc, #776]	; (802ab28 <HAL_UART_MspInit+0x334>)
 802a820:	4293      	cmp	r3, r2
 802a822:	d14a      	bne.n	802a8ba <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 802a824:	2302      	movs	r3, #2
 802a826:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a828:	2300      	movs	r3, #0
 802a82a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a82e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a832:	4618      	mov	r0, r3
 802a834:	f007 f9dc 	bl	8031bf0 <HAL_RCCEx_PeriphCLKConfig>
 802a838:	4603      	mov	r3, r0
 802a83a:	2b00      	cmp	r3, #0
 802a83c:	d001      	beq.n	802a842 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 802a83e:	f7ff f97f 	bl	8029b40 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 802a842:	4bba      	ldr	r3, [pc, #744]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a848:	4ab8      	ldr	r2, [pc, #736]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a84a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802a84e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a852:	4bb6      	ldr	r3, [pc, #728]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802a85c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802a860:	4bb2      	ldr	r3, [pc, #712]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a866:	4ab1      	ldr	r2, [pc, #708]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a868:	f043 0301 	orr.w	r3, r3, #1
 802a86c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a870:	4bae      	ldr	r3, [pc, #696]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a876:	f003 0301 	and.w	r3, r3, #1
 802a87a:	62bb      	str	r3, [r7, #40]	; 0x28
 802a87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802a87e:	2303      	movs	r3, #3
 802a880:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a884:	2302      	movs	r3, #2
 802a886:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a88a:	2300      	movs	r3, #0
 802a88c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a890:	2300      	movs	r3, #0
 802a892:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802a896:	2308      	movs	r3, #8
 802a898:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802a89c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a8a0:	4619      	mov	r1, r3
 802a8a2:	48a3      	ldr	r0, [pc, #652]	; (802ab30 <HAL_UART_MspInit+0x33c>)
 802a8a4:	f003 fd54 	bl	802e350 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 802a8a8:	2200      	movs	r2, #0
 802a8aa:	2100      	movs	r1, #0
 802a8ac:	2034      	movs	r0, #52	; 0x34
 802a8ae:	f000 fcfc 	bl	802b2aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 802a8b2:	2034      	movs	r0, #52	; 0x34
 802a8b4:	f000 fd13 	bl	802b2de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 802a8b8:	e130      	b.n	802ab1c <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 802a8ba:	687b      	ldr	r3, [r7, #4]
 802a8bc:	681b      	ldr	r3, [r3, #0]
 802a8be:	4a9d      	ldr	r2, [pc, #628]	; (802ab34 <HAL_UART_MspInit+0x340>)
 802a8c0:	4293      	cmp	r3, r2
 802a8c2:	d143      	bne.n	802a94c <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 802a8c4:	2302      	movs	r3, #2
 802a8c6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a8c8:	2300      	movs	r3, #0
 802a8ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a8ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a8d2:	4618      	mov	r0, r3
 802a8d4:	f007 f98c 	bl	8031bf0 <HAL_RCCEx_PeriphCLKConfig>
 802a8d8:	4603      	mov	r3, r0
 802a8da:	2b00      	cmp	r3, #0
 802a8dc:	d001      	beq.n	802a8e2 <HAL_UART_MspInit+0xee>
      Error_Handler();
 802a8de:	f7ff f92f 	bl	8029b40 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 802a8e2:	4b92      	ldr	r3, [pc, #584]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a8e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a8e8:	4a90      	ldr	r2, [pc, #576]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a8ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a8ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a8f2:	4b8e      	ldr	r3, [pc, #568]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a8f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a8f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802a8fc:	627b      	str	r3, [r7, #36]	; 0x24
 802a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802a900:	4b8a      	ldr	r3, [pc, #552]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a906:	4a89      	ldr	r2, [pc, #548]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a908:	f043 0310 	orr.w	r3, r3, #16
 802a90c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a910:	4b86      	ldr	r3, [pc, #536]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a916:	f003 0310 	and.w	r3, r3, #16
 802a91a:	623b      	str	r3, [r7, #32]
 802a91c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 802a91e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 802a922:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a926:	2302      	movs	r3, #2
 802a928:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a92c:	2300      	movs	r3, #0
 802a92e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a932:	2300      	movs	r3, #0
 802a934:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 802a938:	2307      	movs	r3, #7
 802a93a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a93e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a942:	4619      	mov	r1, r3
 802a944:	487c      	ldr	r0, [pc, #496]	; (802ab38 <HAL_UART_MspInit+0x344>)
 802a946:	f003 fd03 	bl	802e350 <HAL_GPIO_Init>
}
 802a94a:	e0e7      	b.n	802ab1c <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 802a94c:	687b      	ldr	r3, [r7, #4]
 802a94e:	681b      	ldr	r3, [r3, #0]
 802a950:	4a7a      	ldr	r2, [pc, #488]	; (802ab3c <HAL_UART_MspInit+0x348>)
 802a952:	4293      	cmp	r3, r2
 802a954:	d14a      	bne.n	802a9ec <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 802a956:	2302      	movs	r3, #2
 802a958:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a95a:	2300      	movs	r3, #0
 802a95c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a960:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a964:	4618      	mov	r0, r3
 802a966:	f007 f943 	bl	8031bf0 <HAL_RCCEx_PeriphCLKConfig>
 802a96a:	4603      	mov	r3, r0
 802a96c:	2b00      	cmp	r3, #0
 802a96e:	d001      	beq.n	802a974 <HAL_UART_MspInit+0x180>
      Error_Handler();
 802a970:	f7ff f8e6 	bl	8029b40 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 802a974:	4b6d      	ldr	r3, [pc, #436]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a97a:	4a6c      	ldr	r2, [pc, #432]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a97c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802a980:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a984:	4b69      	ldr	r3, [pc, #420]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a98a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a98e:	61fb      	str	r3, [r7, #28]
 802a990:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802a992:	4b66      	ldr	r3, [pc, #408]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a998:	4a64      	ldr	r2, [pc, #400]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a99a:	f043 0310 	orr.w	r3, r3, #16
 802a99e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a9a2:	4b62      	ldr	r3, [pc, #392]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802a9a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a9a8:	f003 0310 	and.w	r3, r3, #16
 802a9ac:	61bb      	str	r3, [r7, #24]
 802a9ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802a9b0:	2303      	movs	r3, #3
 802a9b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a9b6:	2302      	movs	r3, #2
 802a9b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a9bc:	2300      	movs	r3, #0
 802a9be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a9c2:	2300      	movs	r3, #0
 802a9c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 802a9c8:	2308      	movs	r3, #8
 802a9ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a9ce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a9d2:	4619      	mov	r1, r3
 802a9d4:	4858      	ldr	r0, [pc, #352]	; (802ab38 <HAL_UART_MspInit+0x344>)
 802a9d6:	f003 fcbb 	bl	802e350 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 802a9da:	2200      	movs	r2, #0
 802a9dc:	2102      	movs	r1, #2
 802a9de:	2053      	movs	r0, #83	; 0x53
 802a9e0:	f000 fc63 	bl	802b2aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 802a9e4:	2053      	movs	r0, #83	; 0x53
 802a9e6:	f000 fc7a 	bl	802b2de <HAL_NVIC_EnableIRQ>
}
 802a9ea:	e097      	b.n	802ab1c <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 802a9ec:	687b      	ldr	r3, [r7, #4]
 802a9ee:	681b      	ldr	r3, [r3, #0]
 802a9f0:	4a53      	ldr	r2, [pc, #332]	; (802ab40 <HAL_UART_MspInit+0x34c>)
 802a9f2:	4293      	cmp	r3, r2
 802a9f4:	d142      	bne.n	802aa7c <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 802a9f6:	2302      	movs	r3, #2
 802a9f8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a9fa:	2300      	movs	r3, #0
 802a9fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802aa00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802aa04:	4618      	mov	r0, r3
 802aa06:	f007 f8f3 	bl	8031bf0 <HAL_RCCEx_PeriphCLKConfig>
 802aa0a:	4603      	mov	r3, r0
 802aa0c:	2b00      	cmp	r3, #0
 802aa0e:	d001      	beq.n	802aa14 <HAL_UART_MspInit+0x220>
      Error_Handler();
 802aa10:	f7ff f896 	bl	8029b40 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 802aa14:	4b45      	ldr	r3, [pc, #276]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802aa16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802aa1a:	4a44      	ldr	r2, [pc, #272]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802aa1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802aa20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802aa24:	4b41      	ldr	r3, [pc, #260]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802aa26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802aa2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802aa2e:	617b      	str	r3, [r7, #20]
 802aa30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802aa32:	4b3e      	ldr	r3, [pc, #248]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802aa34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802aa38:	4a3c      	ldr	r2, [pc, #240]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802aa3a:	f043 0301 	orr.w	r3, r3, #1
 802aa3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802aa42:	4b3a      	ldr	r3, [pc, #232]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802aa44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802aa48:	f003 0301 	and.w	r3, r3, #1
 802aa4c:	613b      	str	r3, [r7, #16]
 802aa4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802aa50:	230c      	movs	r3, #12
 802aa52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802aa56:	2302      	movs	r3, #2
 802aa58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802aa5c:	2300      	movs	r3, #0
 802aa5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802aa62:	2300      	movs	r3, #0
 802aa64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802aa68:	2307      	movs	r3, #7
 802aa6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802aa6e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802aa72:	4619      	mov	r1, r3
 802aa74:	482e      	ldr	r0, [pc, #184]	; (802ab30 <HAL_UART_MspInit+0x33c>)
 802aa76:	f003 fc6b 	bl	802e350 <HAL_GPIO_Init>
}
 802aa7a:	e04f      	b.n	802ab1c <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 802aa7c:	687b      	ldr	r3, [r7, #4]
 802aa7e:	681b      	ldr	r3, [r3, #0]
 802aa80:	4a30      	ldr	r2, [pc, #192]	; (802ab44 <HAL_UART_MspInit+0x350>)
 802aa82:	4293      	cmp	r3, r2
 802aa84:	d14a      	bne.n	802ab1c <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 802aa86:	2302      	movs	r3, #2
 802aa88:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802aa8a:	2300      	movs	r3, #0
 802aa8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802aa90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802aa94:	4618      	mov	r0, r3
 802aa96:	f007 f8ab 	bl	8031bf0 <HAL_RCCEx_PeriphCLKConfig>
 802aa9a:	4603      	mov	r3, r0
 802aa9c:	2b00      	cmp	r3, #0
 802aa9e:	d001      	beq.n	802aaa4 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 802aaa0:	f7ff f84e 	bl	8029b40 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 802aaa4:	4b21      	ldr	r3, [pc, #132]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802aaa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802aaaa:	4a20      	ldr	r2, [pc, #128]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802aaac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802aab0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802aab4:	4b1d      	ldr	r3, [pc, #116]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802aab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802aaba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802aabe:	60fb      	str	r3, [r7, #12]
 802aac0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802aac2:	4b1a      	ldr	r3, [pc, #104]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802aac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802aac8:	4a18      	ldr	r2, [pc, #96]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802aaca:	f043 0308 	orr.w	r3, r3, #8
 802aace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802aad2:	4b16      	ldr	r3, [pc, #88]	; (802ab2c <HAL_UART_MspInit+0x338>)
 802aad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802aad8:	f003 0308 	and.w	r3, r3, #8
 802aadc:	60bb      	str	r3, [r7, #8]
 802aade:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 802aae0:	f44f 7340 	mov.w	r3, #768	; 0x300
 802aae4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802aae8:	2302      	movs	r3, #2
 802aaea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802aaee:	2300      	movs	r3, #0
 802aaf0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802aaf4:	2300      	movs	r3, #0
 802aaf6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 802aafa:	2307      	movs	r3, #7
 802aafc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802ab00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802ab04:	4619      	mov	r1, r3
 802ab06:	4810      	ldr	r0, [pc, #64]	; (802ab48 <HAL_UART_MspInit+0x354>)
 802ab08:	f003 fc22 	bl	802e350 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 802ab0c:	2200      	movs	r2, #0
 802ab0e:	2100      	movs	r1, #0
 802ab10:	2027      	movs	r0, #39	; 0x27
 802ab12:	f000 fbca 	bl	802b2aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 802ab16:	2027      	movs	r0, #39	; 0x27
 802ab18:	f000 fbe1 	bl	802b2de <HAL_NVIC_EnableIRQ>
}
 802ab1c:	bf00      	nop
 802ab1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802ab22:	46bd      	mov	sp, r7
 802ab24:	bd80      	pop	{r7, pc}
 802ab26:	bf00      	nop
 802ab28:	40004c00 	.word	0x40004c00
 802ab2c:	58024400 	.word	0x58024400
 802ab30:	58020000 	.word	0x58020000
 802ab34:	40007800 	.word	0x40007800
 802ab38:	58021000 	.word	0x58021000
 802ab3c:	40007c00 	.word	0x40007c00
 802ab40:	40004400 	.word	0x40004400
 802ab44:	40004800 	.word	0x40004800
 802ab48:	58020c00 	.word	0x58020c00

0802ab4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 802ab4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 802ab84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 802ab50:	f7ff fae2 	bl	802a118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802ab54:	480c      	ldr	r0, [pc, #48]	; (802ab88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802ab56:	490d      	ldr	r1, [pc, #52]	; (802ab8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802ab58:	4a0d      	ldr	r2, [pc, #52]	; (802ab90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 802ab5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802ab5c:	e002      	b.n	802ab64 <LoopCopyDataInit>

0802ab5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802ab5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802ab60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802ab62:	3304      	adds	r3, #4

0802ab64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802ab64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802ab66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802ab68:	d3f9      	bcc.n	802ab5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802ab6a:	4a0a      	ldr	r2, [pc, #40]	; (802ab94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802ab6c:	4c0a      	ldr	r4, [pc, #40]	; (802ab98 <LoopFillZerobss+0x22>)
  movs r3, #0
 802ab6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 802ab70:	e001      	b.n	802ab76 <LoopFillZerobss>

0802ab72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802ab72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802ab74:	3204      	adds	r2, #4

0802ab76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802ab76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802ab78:	d3fb      	bcc.n	802ab72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802ab7a:	f011 f947 	bl	803be0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802ab7e:	f7fe fe37 	bl	80297f0 <main>
  bx  lr
 802ab82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 802ab84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 802ab88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 802ab8c:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 802ab90:	0805868c 	.word	0x0805868c
  ldr r2, =_sbss
 802ab94:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 802ab98:	240267f0 	.word	0x240267f0

0802ab9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802ab9c:	e7fe      	b.n	802ab9c <ADC3_IRQHandler>
	...

0802aba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802aba0:	b580      	push	{r7, lr}
 802aba2:	b082      	sub	sp, #8
 802aba4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802aba6:	2003      	movs	r0, #3
 802aba8:	f000 fb74 	bl	802b294 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802abac:	f006 fe4a 	bl	8031844 <HAL_RCC_GetSysClockFreq>
 802abb0:	4602      	mov	r2, r0
 802abb2:	4b15      	ldr	r3, [pc, #84]	; (802ac08 <HAL_Init+0x68>)
 802abb4:	699b      	ldr	r3, [r3, #24]
 802abb6:	0a1b      	lsrs	r3, r3, #8
 802abb8:	f003 030f 	and.w	r3, r3, #15
 802abbc:	4913      	ldr	r1, [pc, #76]	; (802ac0c <HAL_Init+0x6c>)
 802abbe:	5ccb      	ldrb	r3, [r1, r3]
 802abc0:	f003 031f 	and.w	r3, r3, #31
 802abc4:	fa22 f303 	lsr.w	r3, r2, r3
 802abc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802abca:	4b0f      	ldr	r3, [pc, #60]	; (802ac08 <HAL_Init+0x68>)
 802abcc:	699b      	ldr	r3, [r3, #24]
 802abce:	f003 030f 	and.w	r3, r3, #15
 802abd2:	4a0e      	ldr	r2, [pc, #56]	; (802ac0c <HAL_Init+0x6c>)
 802abd4:	5cd3      	ldrb	r3, [r2, r3]
 802abd6:	f003 031f 	and.w	r3, r3, #31
 802abda:	687a      	ldr	r2, [r7, #4]
 802abdc:	fa22 f303 	lsr.w	r3, r2, r3
 802abe0:	4a0b      	ldr	r2, [pc, #44]	; (802ac10 <HAL_Init+0x70>)
 802abe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802abe4:	4a0b      	ldr	r2, [pc, #44]	; (802ac14 <HAL_Init+0x74>)
 802abe6:	687b      	ldr	r3, [r7, #4]
 802abe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802abea:	200f      	movs	r0, #15
 802abec:	f000 f814 	bl	802ac18 <HAL_InitTick>
 802abf0:	4603      	mov	r3, r0
 802abf2:	2b00      	cmp	r3, #0
 802abf4:	d001      	beq.n	802abfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802abf6:	2301      	movs	r3, #1
 802abf8:	e002      	b.n	802ac00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802abfa:	f7ff f8e3 	bl	8029dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802abfe:	2300      	movs	r3, #0
}
 802ac00:	4618      	mov	r0, r3
 802ac02:	3708      	adds	r7, #8
 802ac04:	46bd      	mov	sp, r7
 802ac06:	bd80      	pop	{r7, pc}
 802ac08:	58024400 	.word	0x58024400
 802ac0c:	08058560 	.word	0x08058560
 802ac10:	24000008 	.word	0x24000008
 802ac14:	24000004 	.word	0x24000004

0802ac18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802ac18:	b580      	push	{r7, lr}
 802ac1a:	b082      	sub	sp, #8
 802ac1c:	af00      	add	r7, sp, #0
 802ac1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802ac20:	4b15      	ldr	r3, [pc, #84]	; (802ac78 <HAL_InitTick+0x60>)
 802ac22:	781b      	ldrb	r3, [r3, #0]
 802ac24:	2b00      	cmp	r3, #0
 802ac26:	d101      	bne.n	802ac2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802ac28:	2301      	movs	r3, #1
 802ac2a:	e021      	b.n	802ac70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 802ac2c:	4b13      	ldr	r3, [pc, #76]	; (802ac7c <HAL_InitTick+0x64>)
 802ac2e:	681a      	ldr	r2, [r3, #0]
 802ac30:	4b11      	ldr	r3, [pc, #68]	; (802ac78 <HAL_InitTick+0x60>)
 802ac32:	781b      	ldrb	r3, [r3, #0]
 802ac34:	4619      	mov	r1, r3
 802ac36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802ac3a:	fbb3 f3f1 	udiv	r3, r3, r1
 802ac3e:	fbb2 f3f3 	udiv	r3, r2, r3
 802ac42:	4618      	mov	r0, r3
 802ac44:	f000 fb59 	bl	802b2fa <HAL_SYSTICK_Config>
 802ac48:	4603      	mov	r3, r0
 802ac4a:	2b00      	cmp	r3, #0
 802ac4c:	d001      	beq.n	802ac52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802ac4e:	2301      	movs	r3, #1
 802ac50:	e00e      	b.n	802ac70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802ac52:	687b      	ldr	r3, [r7, #4]
 802ac54:	2b0f      	cmp	r3, #15
 802ac56:	d80a      	bhi.n	802ac6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802ac58:	2200      	movs	r2, #0
 802ac5a:	6879      	ldr	r1, [r7, #4]
 802ac5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802ac60:	f000 fb23 	bl	802b2aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802ac64:	4a06      	ldr	r2, [pc, #24]	; (802ac80 <HAL_InitTick+0x68>)
 802ac66:	687b      	ldr	r3, [r7, #4]
 802ac68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802ac6a:	2300      	movs	r3, #0
 802ac6c:	e000      	b.n	802ac70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 802ac6e:	2301      	movs	r3, #1
}
 802ac70:	4618      	mov	r0, r3
 802ac72:	3708      	adds	r7, #8
 802ac74:	46bd      	mov	sp, r7
 802ac76:	bd80      	pop	{r7, pc}
 802ac78:	24000010 	.word	0x24000010
 802ac7c:	24000004 	.word	0x24000004
 802ac80:	2400000c 	.word	0x2400000c

0802ac84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802ac84:	b480      	push	{r7}
 802ac86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802ac88:	4b06      	ldr	r3, [pc, #24]	; (802aca4 <HAL_IncTick+0x20>)
 802ac8a:	781b      	ldrb	r3, [r3, #0]
 802ac8c:	461a      	mov	r2, r3
 802ac8e:	4b06      	ldr	r3, [pc, #24]	; (802aca8 <HAL_IncTick+0x24>)
 802ac90:	681b      	ldr	r3, [r3, #0]
 802ac92:	4413      	add	r3, r2
 802ac94:	4a04      	ldr	r2, [pc, #16]	; (802aca8 <HAL_IncTick+0x24>)
 802ac96:	6013      	str	r3, [r2, #0]
}
 802ac98:	bf00      	nop
 802ac9a:	46bd      	mov	sp, r7
 802ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aca0:	4770      	bx	lr
 802aca2:	bf00      	nop
 802aca4:	24000010 	.word	0x24000010
 802aca8:	24024bcc 	.word	0x24024bcc

0802acac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802acac:	b480      	push	{r7}
 802acae:	af00      	add	r7, sp, #0
  return uwTick;
 802acb0:	4b03      	ldr	r3, [pc, #12]	; (802acc0 <HAL_GetTick+0x14>)
 802acb2:	681b      	ldr	r3, [r3, #0]
}
 802acb4:	4618      	mov	r0, r3
 802acb6:	46bd      	mov	sp, r7
 802acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acbc:	4770      	bx	lr
 802acbe:	bf00      	nop
 802acc0:	24024bcc 	.word	0x24024bcc

0802acc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802acc4:	b580      	push	{r7, lr}
 802acc6:	b084      	sub	sp, #16
 802acc8:	af00      	add	r7, sp, #0
 802acca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802accc:	f7ff ffee 	bl	802acac <HAL_GetTick>
 802acd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802acd2:	687b      	ldr	r3, [r7, #4]
 802acd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802acd6:	68fb      	ldr	r3, [r7, #12]
 802acd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802acdc:	d005      	beq.n	802acea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802acde:	4b0a      	ldr	r3, [pc, #40]	; (802ad08 <HAL_Delay+0x44>)
 802ace0:	781b      	ldrb	r3, [r3, #0]
 802ace2:	461a      	mov	r2, r3
 802ace4:	68fb      	ldr	r3, [r7, #12]
 802ace6:	4413      	add	r3, r2
 802ace8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802acea:	bf00      	nop
 802acec:	f7ff ffde 	bl	802acac <HAL_GetTick>
 802acf0:	4602      	mov	r2, r0
 802acf2:	68bb      	ldr	r3, [r7, #8]
 802acf4:	1ad3      	subs	r3, r2, r3
 802acf6:	68fa      	ldr	r2, [r7, #12]
 802acf8:	429a      	cmp	r2, r3
 802acfa:	d8f7      	bhi.n	802acec <HAL_Delay+0x28>
  {
  }
}
 802acfc:	bf00      	nop
 802acfe:	bf00      	nop
 802ad00:	3710      	adds	r7, #16
 802ad02:	46bd      	mov	sp, r7
 802ad04:	bd80      	pop	{r7, pc}
 802ad06:	bf00      	nop
 802ad08:	24000010 	.word	0x24000010

0802ad0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 802ad0c:	b480      	push	{r7}
 802ad0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 802ad10:	4b03      	ldr	r3, [pc, #12]	; (802ad20 <HAL_GetREVID+0x14>)
 802ad12:	681b      	ldr	r3, [r3, #0]
 802ad14:	0c1b      	lsrs	r3, r3, #16
}
 802ad16:	4618      	mov	r0, r3
 802ad18:	46bd      	mov	sp, r7
 802ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad1e:	4770      	bx	lr
 802ad20:	5c001000 	.word	0x5c001000

0802ad24 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 802ad24:	b580      	push	{r7, lr}
 802ad26:	b088      	sub	sp, #32
 802ad28:	af00      	add	r7, sp, #0
 802ad2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 802ad2c:	2300      	movs	r3, #0
 802ad2e:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 802ad30:	2300      	movs	r3, #0
 802ad32:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802ad34:	687b      	ldr	r3, [r7, #4]
 802ad36:	2b00      	cmp	r3, #0
 802ad38:	d102      	bne.n	802ad40 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 802ad3a:	2301      	movs	r3, #1
 802ad3c:	77fb      	strb	r3, [r7, #31]
 802ad3e:	e10e      	b.n	802af5e <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802ad40:	687b      	ldr	r3, [r7, #4]
 802ad42:	681b      	ldr	r3, [r3, #0]
 802ad44:	681b      	ldr	r3, [r3, #0]
 802ad46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ad4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ad4e:	d102      	bne.n	802ad56 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 802ad50:	2301      	movs	r3, #1
 802ad52:	77fb      	strb	r3, [r7, #31]
 802ad54:	e103      	b.n	802af5e <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 802ad56:	687b      	ldr	r3, [r7, #4]
 802ad58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802ad5c:	b2db      	uxtb	r3, r3
 802ad5e:	2b00      	cmp	r3, #0
 802ad60:	d109      	bne.n	802ad76 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 802ad62:	687b      	ldr	r3, [r7, #4]
 802ad64:	2200      	movs	r2, #0
 802ad66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 802ad6a:	687b      	ldr	r3, [r7, #4]
 802ad6c:	2200      	movs	r2, #0
 802ad6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 802ad70:	6878      	ldr	r0, [r7, #4]
 802ad72:	f7fe fac3 	bl	80292fc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 802ad76:	687b      	ldr	r3, [r7, #4]
 802ad78:	681b      	ldr	r3, [r3, #0]
 802ad7a:	681b      	ldr	r3, [r3, #0]
 802ad7c:	f003 0304 	and.w	r3, r3, #4
 802ad80:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ad82:	687b      	ldr	r3, [r7, #4]
 802ad84:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 802ad86:	687b      	ldr	r3, [r7, #4]
 802ad88:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ad8a:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 802ad8c:	687b      	ldr	r3, [r7, #4]
 802ad8e:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 802ad90:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 802ad92:	687b      	ldr	r3, [r7, #4]
 802ad94:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 802ad96:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 802ad98:	687b      	ldr	r3, [r7, #4]
 802ad9a:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 802ad9c:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 802ad9e:	687b      	ldr	r3, [r7, #4]
 802ada0:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ada2:	4313      	orrs	r3, r2
 802ada4:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 802ada6:	687b      	ldr	r3, [r7, #4]
 802ada8:	681b      	ldr	r3, [r3, #0]
 802adaa:	681a      	ldr	r2, [r3, #0]
 802adac:	4b6e      	ldr	r3, [pc, #440]	; (802af68 <HAL_COMP_Init+0x244>)
 802adae:	4013      	ands	r3, r2
 802adb0:	687a      	ldr	r2, [r7, #4]
 802adb2:	6812      	ldr	r2, [r2, #0]
 802adb4:	6979      	ldr	r1, [r7, #20]
 802adb6:	430b      	orrs	r3, r1
 802adb8:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 802adba:	687b      	ldr	r3, [r7, #4]
 802adbc:	685b      	ldr	r3, [r3, #4]
 802adbe:	2b10      	cmp	r3, #16
 802adc0:	d108      	bne.n	802add4 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802adc2:	687b      	ldr	r3, [r7, #4]
 802adc4:	681b      	ldr	r3, [r3, #0]
 802adc6:	681a      	ldr	r2, [r3, #0]
 802adc8:	687b      	ldr	r3, [r7, #4]
 802adca:	681b      	ldr	r3, [r3, #0]
 802adcc:	f042 0210 	orr.w	r2, r2, #16
 802add0:	601a      	str	r2, [r3, #0]
 802add2:	e007      	b.n	802ade4 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802add4:	687b      	ldr	r3, [r7, #4]
 802add6:	681b      	ldr	r3, [r3, #0]
 802add8:	681a      	ldr	r2, [r3, #0]
 802adda:	687b      	ldr	r3, [r7, #4]
 802addc:	681b      	ldr	r3, [r3, #0]
 802adde:	f022 0210 	bic.w	r2, r2, #16
 802ade2:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 802ade4:	687b      	ldr	r3, [r7, #4]
 802ade6:	681b      	ldr	r3, [r3, #0]
 802ade8:	681b      	ldr	r3, [r3, #0]
 802adea:	f003 0304 	and.w	r3, r3, #4
 802adee:	2b00      	cmp	r3, #0
 802adf0:	d016      	beq.n	802ae20 <HAL_COMP_Init+0xfc>
 802adf2:	69bb      	ldr	r3, [r7, #24]
 802adf4:	2b00      	cmp	r3, #0
 802adf6:	d013      	beq.n	802ae20 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802adf8:	4b5c      	ldr	r3, [pc, #368]	; (802af6c <HAL_COMP_Init+0x248>)
 802adfa:	681b      	ldr	r3, [r3, #0]
 802adfc:	099b      	lsrs	r3, r3, #6
 802adfe:	4a5c      	ldr	r2, [pc, #368]	; (802af70 <HAL_COMP_Init+0x24c>)
 802ae00:	fba2 2303 	umull	r2, r3, r2, r3
 802ae04:	099b      	lsrs	r3, r3, #6
 802ae06:	1c5a      	adds	r2, r3, #1
 802ae08:	4613      	mov	r3, r2
 802ae0a:	009b      	lsls	r3, r3, #2
 802ae0c:	4413      	add	r3, r2
 802ae0e:	009b      	lsls	r3, r3, #2
 802ae10:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 802ae12:	e002      	b.n	802ae1a <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 802ae14:	68fb      	ldr	r3, [r7, #12]
 802ae16:	3b01      	subs	r3, #1
 802ae18:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 802ae1a:	68fb      	ldr	r3, [r7, #12]
 802ae1c:	2b00      	cmp	r3, #0
 802ae1e:	d1f9      	bne.n	802ae14 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802ae20:	687b      	ldr	r3, [r7, #4]
 802ae22:	681b      	ldr	r3, [r3, #0]
 802ae24:	4a53      	ldr	r2, [pc, #332]	; (802af74 <HAL_COMP_Init+0x250>)
 802ae26:	4293      	cmp	r3, r2
 802ae28:	d102      	bne.n	802ae30 <HAL_COMP_Init+0x10c>
 802ae2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802ae2e:	e001      	b.n	802ae34 <HAL_COMP_Init+0x110>
 802ae30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802ae34:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 802ae36:	687b      	ldr	r3, [r7, #4]
 802ae38:	6a1b      	ldr	r3, [r3, #32]
 802ae3a:	f003 0303 	and.w	r3, r3, #3
 802ae3e:	2b00      	cmp	r3, #0
 802ae40:	d06d      	beq.n	802af1e <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 802ae42:	687b      	ldr	r3, [r7, #4]
 802ae44:	6a1b      	ldr	r3, [r3, #32]
 802ae46:	f003 0310 	and.w	r3, r3, #16
 802ae4a:	2b00      	cmp	r3, #0
 802ae4c:	d008      	beq.n	802ae60 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 802ae4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae52:	681a      	ldr	r2, [r3, #0]
 802ae54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae58:	693b      	ldr	r3, [r7, #16]
 802ae5a:	4313      	orrs	r3, r2
 802ae5c:	600b      	str	r3, [r1, #0]
 802ae5e:	e008      	b.n	802ae72 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 802ae60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae64:	681a      	ldr	r2, [r3, #0]
 802ae66:	693b      	ldr	r3, [r7, #16]
 802ae68:	43db      	mvns	r3, r3
 802ae6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae6e:	4013      	ands	r3, r2
 802ae70:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 802ae72:	687b      	ldr	r3, [r7, #4]
 802ae74:	6a1b      	ldr	r3, [r3, #32]
 802ae76:	f003 0320 	and.w	r3, r3, #32
 802ae7a:	2b00      	cmp	r3, #0
 802ae7c:	d008      	beq.n	802ae90 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 802ae7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae82:	685a      	ldr	r2, [r3, #4]
 802ae84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae88:	693b      	ldr	r3, [r7, #16]
 802ae8a:	4313      	orrs	r3, r2
 802ae8c:	604b      	str	r3, [r1, #4]
 802ae8e:	e008      	b.n	802aea2 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 802ae90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae94:	685a      	ldr	r2, [r3, #4]
 802ae96:	693b      	ldr	r3, [r7, #16]
 802ae98:	43db      	mvns	r3, r3
 802ae9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae9e:	4013      	ands	r3, r2
 802aea0:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 802aea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802aea6:	693b      	ldr	r3, [r7, #16]
 802aea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 802aeac:	687b      	ldr	r3, [r7, #4]
 802aeae:	6a1b      	ldr	r3, [r3, #32]
 802aeb0:	f003 0302 	and.w	r3, r3, #2
 802aeb4:	2b00      	cmp	r3, #0
 802aeb6:	d00a      	beq.n	802aece <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 802aeb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802aebc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802aec0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802aec4:	693b      	ldr	r3, [r7, #16]
 802aec6:	4313      	orrs	r3, r2
 802aec8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802aecc:	e00a      	b.n	802aee4 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 802aece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802aed2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802aed6:	693b      	ldr	r3, [r7, #16]
 802aed8:	43db      	mvns	r3, r3
 802aeda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802aede:	4013      	ands	r3, r2
 802aee0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 802aee4:	687b      	ldr	r3, [r7, #4]
 802aee6:	6a1b      	ldr	r3, [r3, #32]
 802aee8:	f003 0301 	and.w	r3, r3, #1
 802aeec:	2b00      	cmp	r3, #0
 802aeee:	d00a      	beq.n	802af06 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 802aef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802aef4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802aef8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802aefc:	693b      	ldr	r3, [r7, #16]
 802aefe:	4313      	orrs	r3, r2
 802af00:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802af04:	e021      	b.n	802af4a <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 802af06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802af0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802af0e:	693b      	ldr	r3, [r7, #16]
 802af10:	43db      	mvns	r3, r3
 802af12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802af16:	4013      	ands	r3, r2
 802af18:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802af1c:	e015      	b.n	802af4a <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 802af1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802af22:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802af26:	693b      	ldr	r3, [r7, #16]
 802af28:	43db      	mvns	r3, r3
 802af2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802af2e:	4013      	ands	r3, r2
 802af30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 802af34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802af38:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802af3c:	693b      	ldr	r3, [r7, #16]
 802af3e:	43db      	mvns	r3, r3
 802af40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802af44:	4013      	ands	r3, r2
 802af46:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 802af4a:	687b      	ldr	r3, [r7, #4]
 802af4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802af50:	b2db      	uxtb	r3, r3
 802af52:	2b00      	cmp	r3, #0
 802af54:	d103      	bne.n	802af5e <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 802af56:	687b      	ldr	r3, [r7, #4]
 802af58:	2201      	movs	r2, #1
 802af5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 802af5e:	7ffb      	ldrb	r3, [r7, #31]
}
 802af60:	4618      	mov	r0, r3
 802af62:	3720      	adds	r7, #32
 802af64:	46bd      	mov	sp, r7
 802af66:	bd80      	pop	{r7, pc}
 802af68:	f0e8cce1 	.word	0xf0e8cce1
 802af6c:	24000004 	.word	0x24000004
 802af70:	053e2d63 	.word	0x053e2d63
 802af74:	5800380c 	.word	0x5800380c

0802af78 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 802af78:	b480      	push	{r7}
 802af7a:	b085      	sub	sp, #20
 802af7c:	af00      	add	r7, sp, #0
 802af7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 802af80:	2300      	movs	r3, #0
 802af82:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 802af84:	2300      	movs	r3, #0
 802af86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802af88:	687b      	ldr	r3, [r7, #4]
 802af8a:	2b00      	cmp	r3, #0
 802af8c:	d102      	bne.n	802af94 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 802af8e:	2301      	movs	r3, #1
 802af90:	73fb      	strb	r3, [r7, #15]
 802af92:	e030      	b.n	802aff6 <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802af94:	687b      	ldr	r3, [r7, #4]
 802af96:	681b      	ldr	r3, [r3, #0]
 802af98:	681b      	ldr	r3, [r3, #0]
 802af9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802af9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802afa2:	d102      	bne.n	802afaa <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 802afa4:	2301      	movs	r3, #1
 802afa6:	73fb      	strb	r3, [r7, #15]
 802afa8:	e025      	b.n	802aff6 <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 802afaa:	687b      	ldr	r3, [r7, #4]
 802afac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802afb0:	b2db      	uxtb	r3, r3
 802afb2:	2b01      	cmp	r3, #1
 802afb4:	d11d      	bne.n	802aff2 <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 802afb6:	687b      	ldr	r3, [r7, #4]
 802afb8:	681b      	ldr	r3, [r3, #0]
 802afba:	681a      	ldr	r2, [r3, #0]
 802afbc:	687b      	ldr	r3, [r7, #4]
 802afbe:	681b      	ldr	r3, [r3, #0]
 802afc0:	f042 0201 	orr.w	r2, r2, #1
 802afc4:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 802afc6:	687b      	ldr	r3, [r7, #4]
 802afc8:	2202      	movs	r2, #2
 802afca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802afce:	4b0d      	ldr	r3, [pc, #52]	; (802b004 <HAL_COMP_Start+0x8c>)
 802afd0:	681b      	ldr	r3, [r3, #0]
 802afd2:	099b      	lsrs	r3, r3, #6
 802afd4:	4a0c      	ldr	r2, [pc, #48]	; (802b008 <HAL_COMP_Start+0x90>)
 802afd6:	fba2 2303 	umull	r2, r3, r2, r3
 802afda:	099b      	lsrs	r3, r3, #6
 802afdc:	3301      	adds	r3, #1
 802afde:	00db      	lsls	r3, r3, #3
 802afe0:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802afe2:	e002      	b.n	802afea <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 802afe4:	68bb      	ldr	r3, [r7, #8]
 802afe6:	3b01      	subs	r3, #1
 802afe8:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802afea:	68bb      	ldr	r3, [r7, #8]
 802afec:	2b00      	cmp	r3, #0
 802afee:	d1f9      	bne.n	802afe4 <HAL_COMP_Start+0x6c>
 802aff0:	e001      	b.n	802aff6 <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 802aff2:	2301      	movs	r3, #1
 802aff4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802aff6:	7bfb      	ldrb	r3, [r7, #15]
}
 802aff8:	4618      	mov	r0, r3
 802affa:	3714      	adds	r7, #20
 802affc:	46bd      	mov	sp, r7
 802affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b002:	4770      	bx	lr
 802b004:	24000004 	.word	0x24000004
 802b008:	053e2d63 	.word	0x053e2d63

0802b00c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 802b00c:	b580      	push	{r7, lr}
 802b00e:	b084      	sub	sp, #16
 802b010:	af00      	add	r7, sp, #0
 802b012:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802b014:	687b      	ldr	r3, [r7, #4]
 802b016:	681b      	ldr	r3, [r3, #0]
 802b018:	4a33      	ldr	r2, [pc, #204]	; (802b0e8 <HAL_COMP_IRQHandler+0xdc>)
 802b01a:	4293      	cmp	r3, r2
 802b01c:	d102      	bne.n	802b024 <HAL_COMP_IRQHandler+0x18>
 802b01e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802b022:	e001      	b.n	802b028 <HAL_COMP_IRQHandler+0x1c>
 802b024:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802b028:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 802b02a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802b02e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802b032:	68fb      	ldr	r3, [r7, #12]
 802b034:	4013      	ands	r3, r2
 802b036:	2b00      	cmp	r3, #0
 802b038:	d014      	beq.n	802b064 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 802b03a:	4b2c      	ldr	r3, [pc, #176]	; (802b0ec <HAL_COMP_IRQHandler+0xe0>)
 802b03c:	681b      	ldr	r3, [r3, #0]
 802b03e:	f003 0310 	and.w	r3, r3, #16
 802b042:	2b00      	cmp	r3, #0
 802b044:	d006      	beq.n	802b054 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 802b046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802b04a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 802b04e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 802b052:	e004      	b.n	802b05e <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 802b054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802b058:	68fb      	ldr	r3, [r7, #12]
 802b05a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802b05e:	6878      	ldr	r0, [r7, #4]
 802b060:	f7fe fcfc 	bl	8029a5c <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 802b064:	687b      	ldr	r3, [r7, #4]
 802b066:	681b      	ldr	r3, [r3, #0]
 802b068:	681b      	ldr	r3, [r3, #0]
 802b06a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b06e:	2b40      	cmp	r3, #64	; 0x40
 802b070:	d136      	bne.n	802b0e0 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 802b072:	4b1f      	ldr	r3, [pc, #124]	; (802b0f0 <HAL_COMP_IRQHandler+0xe4>)
 802b074:	681b      	ldr	r3, [r3, #0]
 802b076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802b07a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802b07e:	d101      	bne.n	802b084 <HAL_COMP_IRQHandler+0x78>
 802b080:	2301      	movs	r3, #1
 802b082:	e000      	b.n	802b086 <HAL_COMP_IRQHandler+0x7a>
 802b084:	2300      	movs	r3, #0
 802b086:	2b00      	cmp	r3, #0
 802b088:	d00b      	beq.n	802b0a2 <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 802b08a:	4b19      	ldr	r3, [pc, #100]	; (802b0f0 <HAL_COMP_IRQHandler+0xe4>)
 802b08c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802b090:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802b092:	687b      	ldr	r3, [r7, #4]
 802b094:	681b      	ldr	r3, [r3, #0]
 802b096:	681a      	ldr	r2, [r3, #0]
 802b098:	687b      	ldr	r3, [r7, #4]
 802b09a:	681b      	ldr	r3, [r3, #0]
 802b09c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b0a0:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 802b0a2:	4b13      	ldr	r3, [pc, #76]	; (802b0f0 <HAL_COMP_IRQHandler+0xe4>)
 802b0a4:	681b      	ldr	r3, [r3, #0]
 802b0a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802b0aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802b0ae:	d101      	bne.n	802b0b4 <HAL_COMP_IRQHandler+0xa8>
 802b0b0:	2301      	movs	r3, #1
 802b0b2:	e000      	b.n	802b0b6 <HAL_COMP_IRQHandler+0xaa>
 802b0b4:	2300      	movs	r3, #0
 802b0b6:	2b00      	cmp	r3, #0
 802b0b8:	d00b      	beq.n	802b0d2 <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 802b0ba:	4b0d      	ldr	r3, [pc, #52]	; (802b0f0 <HAL_COMP_IRQHandler+0xe4>)
 802b0bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802b0c0:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802b0c2:	687b      	ldr	r3, [r7, #4]
 802b0c4:	681b      	ldr	r3, [r3, #0]
 802b0c6:	681a      	ldr	r2, [r3, #0]
 802b0c8:	687b      	ldr	r3, [r7, #4]
 802b0ca:	681b      	ldr	r3, [r3, #0]
 802b0cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b0d0:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 802b0d2:	687b      	ldr	r3, [r7, #4]
 802b0d4:	2201      	movs	r2, #1
 802b0d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802b0da:	6878      	ldr	r0, [r7, #4]
 802b0dc:	f7fe fcbe 	bl	8029a5c <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 802b0e0:	bf00      	nop
 802b0e2:	3710      	adds	r7, #16
 802b0e4:	46bd      	mov	sp, r7
 802b0e6:	bd80      	pop	{r7, pc}
 802b0e8:	5800380c 	.word	0x5800380c
 802b0ec:	58003810 	.word	0x58003810
 802b0f0:	58003800 	.word	0x58003800

0802b0f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802b0f4:	b480      	push	{r7}
 802b0f6:	b085      	sub	sp, #20
 802b0f8:	af00      	add	r7, sp, #0
 802b0fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802b0fc:	687b      	ldr	r3, [r7, #4]
 802b0fe:	f003 0307 	and.w	r3, r3, #7
 802b102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802b104:	4b0b      	ldr	r3, [pc, #44]	; (802b134 <__NVIC_SetPriorityGrouping+0x40>)
 802b106:	68db      	ldr	r3, [r3, #12]
 802b108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802b10a:	68ba      	ldr	r2, [r7, #8]
 802b10c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802b110:	4013      	ands	r3, r2
 802b112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802b114:	68fb      	ldr	r3, [r7, #12]
 802b116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802b118:	68bb      	ldr	r3, [r7, #8]
 802b11a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802b11c:	4b06      	ldr	r3, [pc, #24]	; (802b138 <__NVIC_SetPriorityGrouping+0x44>)
 802b11e:	4313      	orrs	r3, r2
 802b120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802b122:	4a04      	ldr	r2, [pc, #16]	; (802b134 <__NVIC_SetPriorityGrouping+0x40>)
 802b124:	68bb      	ldr	r3, [r7, #8]
 802b126:	60d3      	str	r3, [r2, #12]
}
 802b128:	bf00      	nop
 802b12a:	3714      	adds	r7, #20
 802b12c:	46bd      	mov	sp, r7
 802b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b132:	4770      	bx	lr
 802b134:	e000ed00 	.word	0xe000ed00
 802b138:	05fa0000 	.word	0x05fa0000

0802b13c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802b13c:	b480      	push	{r7}
 802b13e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802b140:	4b04      	ldr	r3, [pc, #16]	; (802b154 <__NVIC_GetPriorityGrouping+0x18>)
 802b142:	68db      	ldr	r3, [r3, #12]
 802b144:	0a1b      	lsrs	r3, r3, #8
 802b146:	f003 0307 	and.w	r3, r3, #7
}
 802b14a:	4618      	mov	r0, r3
 802b14c:	46bd      	mov	sp, r7
 802b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b152:	4770      	bx	lr
 802b154:	e000ed00 	.word	0xe000ed00

0802b158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802b158:	b480      	push	{r7}
 802b15a:	b083      	sub	sp, #12
 802b15c:	af00      	add	r7, sp, #0
 802b15e:	4603      	mov	r3, r0
 802b160:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802b162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b166:	2b00      	cmp	r3, #0
 802b168:	db0b      	blt.n	802b182 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802b16a:	88fb      	ldrh	r3, [r7, #6]
 802b16c:	f003 021f 	and.w	r2, r3, #31
 802b170:	4907      	ldr	r1, [pc, #28]	; (802b190 <__NVIC_EnableIRQ+0x38>)
 802b172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b176:	095b      	lsrs	r3, r3, #5
 802b178:	2001      	movs	r0, #1
 802b17a:	fa00 f202 	lsl.w	r2, r0, r2
 802b17e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802b182:	bf00      	nop
 802b184:	370c      	adds	r7, #12
 802b186:	46bd      	mov	sp, r7
 802b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b18c:	4770      	bx	lr
 802b18e:	bf00      	nop
 802b190:	e000e100 	.word	0xe000e100

0802b194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802b194:	b480      	push	{r7}
 802b196:	b083      	sub	sp, #12
 802b198:	af00      	add	r7, sp, #0
 802b19a:	4603      	mov	r3, r0
 802b19c:	6039      	str	r1, [r7, #0]
 802b19e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802b1a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b1a4:	2b00      	cmp	r3, #0
 802b1a6:	db0a      	blt.n	802b1be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802b1a8:	683b      	ldr	r3, [r7, #0]
 802b1aa:	b2da      	uxtb	r2, r3
 802b1ac:	490c      	ldr	r1, [pc, #48]	; (802b1e0 <__NVIC_SetPriority+0x4c>)
 802b1ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b1b2:	0112      	lsls	r2, r2, #4
 802b1b4:	b2d2      	uxtb	r2, r2
 802b1b6:	440b      	add	r3, r1
 802b1b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802b1bc:	e00a      	b.n	802b1d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802b1be:	683b      	ldr	r3, [r7, #0]
 802b1c0:	b2da      	uxtb	r2, r3
 802b1c2:	4908      	ldr	r1, [pc, #32]	; (802b1e4 <__NVIC_SetPriority+0x50>)
 802b1c4:	88fb      	ldrh	r3, [r7, #6]
 802b1c6:	f003 030f 	and.w	r3, r3, #15
 802b1ca:	3b04      	subs	r3, #4
 802b1cc:	0112      	lsls	r2, r2, #4
 802b1ce:	b2d2      	uxtb	r2, r2
 802b1d0:	440b      	add	r3, r1
 802b1d2:	761a      	strb	r2, [r3, #24]
}
 802b1d4:	bf00      	nop
 802b1d6:	370c      	adds	r7, #12
 802b1d8:	46bd      	mov	sp, r7
 802b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1de:	4770      	bx	lr
 802b1e0:	e000e100 	.word	0xe000e100
 802b1e4:	e000ed00 	.word	0xe000ed00

0802b1e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802b1e8:	b480      	push	{r7}
 802b1ea:	b089      	sub	sp, #36	; 0x24
 802b1ec:	af00      	add	r7, sp, #0
 802b1ee:	60f8      	str	r0, [r7, #12]
 802b1f0:	60b9      	str	r1, [r7, #8]
 802b1f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802b1f4:	68fb      	ldr	r3, [r7, #12]
 802b1f6:	f003 0307 	and.w	r3, r3, #7
 802b1fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802b1fc:	69fb      	ldr	r3, [r7, #28]
 802b1fe:	f1c3 0307 	rsb	r3, r3, #7
 802b202:	2b04      	cmp	r3, #4
 802b204:	bf28      	it	cs
 802b206:	2304      	movcs	r3, #4
 802b208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802b20a:	69fb      	ldr	r3, [r7, #28]
 802b20c:	3304      	adds	r3, #4
 802b20e:	2b06      	cmp	r3, #6
 802b210:	d902      	bls.n	802b218 <NVIC_EncodePriority+0x30>
 802b212:	69fb      	ldr	r3, [r7, #28]
 802b214:	3b03      	subs	r3, #3
 802b216:	e000      	b.n	802b21a <NVIC_EncodePriority+0x32>
 802b218:	2300      	movs	r3, #0
 802b21a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802b21c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802b220:	69bb      	ldr	r3, [r7, #24]
 802b222:	fa02 f303 	lsl.w	r3, r2, r3
 802b226:	43da      	mvns	r2, r3
 802b228:	68bb      	ldr	r3, [r7, #8]
 802b22a:	401a      	ands	r2, r3
 802b22c:	697b      	ldr	r3, [r7, #20]
 802b22e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802b230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802b234:	697b      	ldr	r3, [r7, #20]
 802b236:	fa01 f303 	lsl.w	r3, r1, r3
 802b23a:	43d9      	mvns	r1, r3
 802b23c:	687b      	ldr	r3, [r7, #4]
 802b23e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802b240:	4313      	orrs	r3, r2
         );
}
 802b242:	4618      	mov	r0, r3
 802b244:	3724      	adds	r7, #36	; 0x24
 802b246:	46bd      	mov	sp, r7
 802b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b24c:	4770      	bx	lr
	...

0802b250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802b250:	b580      	push	{r7, lr}
 802b252:	b082      	sub	sp, #8
 802b254:	af00      	add	r7, sp, #0
 802b256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802b258:	687b      	ldr	r3, [r7, #4]
 802b25a:	3b01      	subs	r3, #1
 802b25c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802b260:	d301      	bcc.n	802b266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802b262:	2301      	movs	r3, #1
 802b264:	e00f      	b.n	802b286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802b266:	4a0a      	ldr	r2, [pc, #40]	; (802b290 <SysTick_Config+0x40>)
 802b268:	687b      	ldr	r3, [r7, #4]
 802b26a:	3b01      	subs	r3, #1
 802b26c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802b26e:	210f      	movs	r1, #15
 802b270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b274:	f7ff ff8e 	bl	802b194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802b278:	4b05      	ldr	r3, [pc, #20]	; (802b290 <SysTick_Config+0x40>)
 802b27a:	2200      	movs	r2, #0
 802b27c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802b27e:	4b04      	ldr	r3, [pc, #16]	; (802b290 <SysTick_Config+0x40>)
 802b280:	2207      	movs	r2, #7
 802b282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802b284:	2300      	movs	r3, #0
}
 802b286:	4618      	mov	r0, r3
 802b288:	3708      	adds	r7, #8
 802b28a:	46bd      	mov	sp, r7
 802b28c:	bd80      	pop	{r7, pc}
 802b28e:	bf00      	nop
 802b290:	e000e010 	.word	0xe000e010

0802b294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802b294:	b580      	push	{r7, lr}
 802b296:	b082      	sub	sp, #8
 802b298:	af00      	add	r7, sp, #0
 802b29a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802b29c:	6878      	ldr	r0, [r7, #4]
 802b29e:	f7ff ff29 	bl	802b0f4 <__NVIC_SetPriorityGrouping>
}
 802b2a2:	bf00      	nop
 802b2a4:	3708      	adds	r7, #8
 802b2a6:	46bd      	mov	sp, r7
 802b2a8:	bd80      	pop	{r7, pc}

0802b2aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802b2aa:	b580      	push	{r7, lr}
 802b2ac:	b086      	sub	sp, #24
 802b2ae:	af00      	add	r7, sp, #0
 802b2b0:	4603      	mov	r3, r0
 802b2b2:	60b9      	str	r1, [r7, #8]
 802b2b4:	607a      	str	r2, [r7, #4]
 802b2b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802b2b8:	f7ff ff40 	bl	802b13c <__NVIC_GetPriorityGrouping>
 802b2bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802b2be:	687a      	ldr	r2, [r7, #4]
 802b2c0:	68b9      	ldr	r1, [r7, #8]
 802b2c2:	6978      	ldr	r0, [r7, #20]
 802b2c4:	f7ff ff90 	bl	802b1e8 <NVIC_EncodePriority>
 802b2c8:	4602      	mov	r2, r0
 802b2ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802b2ce:	4611      	mov	r1, r2
 802b2d0:	4618      	mov	r0, r3
 802b2d2:	f7ff ff5f 	bl	802b194 <__NVIC_SetPriority>
}
 802b2d6:	bf00      	nop
 802b2d8:	3718      	adds	r7, #24
 802b2da:	46bd      	mov	sp, r7
 802b2dc:	bd80      	pop	{r7, pc}

0802b2de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802b2de:	b580      	push	{r7, lr}
 802b2e0:	b082      	sub	sp, #8
 802b2e2:	af00      	add	r7, sp, #0
 802b2e4:	4603      	mov	r3, r0
 802b2e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802b2e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b2ec:	4618      	mov	r0, r3
 802b2ee:	f7ff ff33 	bl	802b158 <__NVIC_EnableIRQ>
}
 802b2f2:	bf00      	nop
 802b2f4:	3708      	adds	r7, #8
 802b2f6:	46bd      	mov	sp, r7
 802b2f8:	bd80      	pop	{r7, pc}

0802b2fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802b2fa:	b580      	push	{r7, lr}
 802b2fc:	b082      	sub	sp, #8
 802b2fe:	af00      	add	r7, sp, #0
 802b300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802b302:	6878      	ldr	r0, [r7, #4]
 802b304:	f7ff ffa4 	bl	802b250 <SysTick_Config>
 802b308:	4603      	mov	r3, r0
}
 802b30a:	4618      	mov	r0, r3
 802b30c:	3708      	adds	r7, #8
 802b30e:	46bd      	mov	sp, r7
 802b310:	bd80      	pop	{r7, pc}

0802b312 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 802b312:	b580      	push	{r7, lr}
 802b314:	b082      	sub	sp, #8
 802b316:	af00      	add	r7, sp, #0
 802b318:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 802b31a:	687b      	ldr	r3, [r7, #4]
 802b31c:	2b00      	cmp	r3, #0
 802b31e:	d101      	bne.n	802b324 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 802b320:	2301      	movs	r3, #1
 802b322:	e014      	b.n	802b34e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 802b324:	687b      	ldr	r3, [r7, #4]
 802b326:	791b      	ldrb	r3, [r3, #4]
 802b328:	b2db      	uxtb	r3, r3
 802b32a:	2b00      	cmp	r3, #0
 802b32c:	d105      	bne.n	802b33a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 802b32e:	687b      	ldr	r3, [r7, #4]
 802b330:	2200      	movs	r2, #0
 802b332:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 802b334:	6878      	ldr	r0, [r7, #4]
 802b336:	f7fe f861 	bl	80293fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 802b33a:	687b      	ldr	r3, [r7, #4]
 802b33c:	2202      	movs	r2, #2
 802b33e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 802b340:	687b      	ldr	r3, [r7, #4]
 802b342:	2200      	movs	r2, #0
 802b344:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 802b346:	687b      	ldr	r3, [r7, #4]
 802b348:	2201      	movs	r2, #1
 802b34a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 802b34c:	2300      	movs	r3, #0
}
 802b34e:	4618      	mov	r0, r3
 802b350:	3708      	adds	r7, #8
 802b352:	46bd      	mov	sp, r7
 802b354:	bd80      	pop	{r7, pc}

0802b356 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 802b356:	b480      	push	{r7}
 802b358:	b083      	sub	sp, #12
 802b35a:	af00      	add	r7, sp, #0
 802b35c:	6078      	str	r0, [r7, #4]
 802b35e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802b360:	687b      	ldr	r3, [r7, #4]
 802b362:	795b      	ldrb	r3, [r3, #5]
 802b364:	2b01      	cmp	r3, #1
 802b366:	d101      	bne.n	802b36c <HAL_DAC_Start+0x16>
 802b368:	2302      	movs	r3, #2
 802b36a:	e040      	b.n	802b3ee <HAL_DAC_Start+0x98>
 802b36c:	687b      	ldr	r3, [r7, #4]
 802b36e:	2201      	movs	r2, #1
 802b370:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802b372:	687b      	ldr	r3, [r7, #4]
 802b374:	2202      	movs	r2, #2
 802b376:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 802b378:	687b      	ldr	r3, [r7, #4]
 802b37a:	681b      	ldr	r3, [r3, #0]
 802b37c:	6819      	ldr	r1, [r3, #0]
 802b37e:	683b      	ldr	r3, [r7, #0]
 802b380:	f003 0310 	and.w	r3, r3, #16
 802b384:	2201      	movs	r2, #1
 802b386:	409a      	lsls	r2, r3
 802b388:	687b      	ldr	r3, [r7, #4]
 802b38a:	681b      	ldr	r3, [r3, #0]
 802b38c:	430a      	orrs	r2, r1
 802b38e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 802b390:	683b      	ldr	r3, [r7, #0]
 802b392:	2b00      	cmp	r3, #0
 802b394:	d10f      	bne.n	802b3b6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 802b396:	687b      	ldr	r3, [r7, #4]
 802b398:	681b      	ldr	r3, [r3, #0]
 802b39a:	681b      	ldr	r3, [r3, #0]
 802b39c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802b3a0:	2b02      	cmp	r3, #2
 802b3a2:	d11d      	bne.n	802b3e0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 802b3a4:	687b      	ldr	r3, [r7, #4]
 802b3a6:	681b      	ldr	r3, [r3, #0]
 802b3a8:	685a      	ldr	r2, [r3, #4]
 802b3aa:	687b      	ldr	r3, [r7, #4]
 802b3ac:	681b      	ldr	r3, [r3, #0]
 802b3ae:	f042 0201 	orr.w	r2, r2, #1
 802b3b2:	605a      	str	r2, [r3, #4]
 802b3b4:	e014      	b.n	802b3e0 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 802b3b6:	687b      	ldr	r3, [r7, #4]
 802b3b8:	681b      	ldr	r3, [r3, #0]
 802b3ba:	681b      	ldr	r3, [r3, #0]
 802b3bc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 802b3c0:	683b      	ldr	r3, [r7, #0]
 802b3c2:	f003 0310 	and.w	r3, r3, #16
 802b3c6:	2102      	movs	r1, #2
 802b3c8:	fa01 f303 	lsl.w	r3, r1, r3
 802b3cc:	429a      	cmp	r2, r3
 802b3ce:	d107      	bne.n	802b3e0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 802b3d0:	687b      	ldr	r3, [r7, #4]
 802b3d2:	681b      	ldr	r3, [r3, #0]
 802b3d4:	685a      	ldr	r2, [r3, #4]
 802b3d6:	687b      	ldr	r3, [r7, #4]
 802b3d8:	681b      	ldr	r3, [r3, #0]
 802b3da:	f042 0202 	orr.w	r2, r2, #2
 802b3de:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802b3e0:	687b      	ldr	r3, [r7, #4]
 802b3e2:	2201      	movs	r2, #1
 802b3e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802b3e6:	687b      	ldr	r3, [r7, #4]
 802b3e8:	2200      	movs	r2, #0
 802b3ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802b3ec:	2300      	movs	r3, #0
}
 802b3ee:	4618      	mov	r0, r3
 802b3f0:	370c      	adds	r7, #12
 802b3f2:	46bd      	mov	sp, r7
 802b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b3f8:	4770      	bx	lr

0802b3fa <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 802b3fa:	b480      	push	{r7}
 802b3fc:	b087      	sub	sp, #28
 802b3fe:	af00      	add	r7, sp, #0
 802b400:	60f8      	str	r0, [r7, #12]
 802b402:	60b9      	str	r1, [r7, #8]
 802b404:	607a      	str	r2, [r7, #4]
 802b406:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 802b408:	2300      	movs	r3, #0
 802b40a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 802b40c:	68fb      	ldr	r3, [r7, #12]
 802b40e:	681b      	ldr	r3, [r3, #0]
 802b410:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 802b412:	68bb      	ldr	r3, [r7, #8]
 802b414:	2b00      	cmp	r3, #0
 802b416:	d105      	bne.n	802b424 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 802b418:	697a      	ldr	r2, [r7, #20]
 802b41a:	687b      	ldr	r3, [r7, #4]
 802b41c:	4413      	add	r3, r2
 802b41e:	3308      	adds	r3, #8
 802b420:	617b      	str	r3, [r7, #20]
 802b422:	e004      	b.n	802b42e <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 802b424:	697a      	ldr	r2, [r7, #20]
 802b426:	687b      	ldr	r3, [r7, #4]
 802b428:	4413      	add	r3, r2
 802b42a:	3314      	adds	r3, #20
 802b42c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 802b42e:	697b      	ldr	r3, [r7, #20]
 802b430:	461a      	mov	r2, r3
 802b432:	683b      	ldr	r3, [r7, #0]
 802b434:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 802b436:	2300      	movs	r3, #0
}
 802b438:	4618      	mov	r0, r3
 802b43a:	371c      	adds	r7, #28
 802b43c:	46bd      	mov	sp, r7
 802b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b442:	4770      	bx	lr

0802b444 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 802b444:	b580      	push	{r7, lr}
 802b446:	b088      	sub	sp, #32
 802b448:	af00      	add	r7, sp, #0
 802b44a:	60f8      	str	r0, [r7, #12]
 802b44c:	60b9      	str	r1, [r7, #8]
 802b44e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802b450:	68fb      	ldr	r3, [r7, #12]
 802b452:	795b      	ldrb	r3, [r3, #5]
 802b454:	2b01      	cmp	r3, #1
 802b456:	d101      	bne.n	802b45c <HAL_DAC_ConfigChannel+0x18>
 802b458:	2302      	movs	r3, #2
 802b45a:	e11d      	b.n	802b698 <HAL_DAC_ConfigChannel+0x254>
 802b45c:	68fb      	ldr	r3, [r7, #12]
 802b45e:	2201      	movs	r2, #1
 802b460:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802b462:	68fb      	ldr	r3, [r7, #12]
 802b464:	2202      	movs	r2, #2
 802b466:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 802b468:	68bb      	ldr	r3, [r7, #8]
 802b46a:	681b      	ldr	r3, [r3, #0]
 802b46c:	2b04      	cmp	r3, #4
 802b46e:	d174      	bne.n	802b55a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 802b470:	f7ff fc1c 	bl	802acac <HAL_GetTick>
 802b474:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 802b476:	687b      	ldr	r3, [r7, #4]
 802b478:	2b00      	cmp	r3, #0
 802b47a:	d134      	bne.n	802b4e6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802b47c:	e011      	b.n	802b4a2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802b47e:	f7ff fc15 	bl	802acac <HAL_GetTick>
 802b482:	4602      	mov	r2, r0
 802b484:	69bb      	ldr	r3, [r7, #24]
 802b486:	1ad3      	subs	r3, r2, r3
 802b488:	2b01      	cmp	r3, #1
 802b48a:	d90a      	bls.n	802b4a2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802b48c:	68fb      	ldr	r3, [r7, #12]
 802b48e:	691b      	ldr	r3, [r3, #16]
 802b490:	f043 0208 	orr.w	r2, r3, #8
 802b494:	68fb      	ldr	r3, [r7, #12]
 802b496:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802b498:	68fb      	ldr	r3, [r7, #12]
 802b49a:	2203      	movs	r2, #3
 802b49c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802b49e:	2303      	movs	r3, #3
 802b4a0:	e0fa      	b.n	802b698 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802b4a2:	68fb      	ldr	r3, [r7, #12]
 802b4a4:	681b      	ldr	r3, [r3, #0]
 802b4a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802b4a8:	4b7d      	ldr	r3, [pc, #500]	; (802b6a0 <HAL_DAC_ConfigChannel+0x25c>)
 802b4aa:	4013      	ands	r3, r2
 802b4ac:	2b00      	cmp	r3, #0
 802b4ae:	d1e6      	bne.n	802b47e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 802b4b0:	2001      	movs	r0, #1
 802b4b2:	f7ff fc07 	bl	802acc4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802b4b6:	68fb      	ldr	r3, [r7, #12]
 802b4b8:	681b      	ldr	r3, [r3, #0]
 802b4ba:	68ba      	ldr	r2, [r7, #8]
 802b4bc:	6992      	ldr	r2, [r2, #24]
 802b4be:	641a      	str	r2, [r3, #64]	; 0x40
 802b4c0:	e01e      	b.n	802b500 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802b4c2:	f7ff fbf3 	bl	802acac <HAL_GetTick>
 802b4c6:	4602      	mov	r2, r0
 802b4c8:	69bb      	ldr	r3, [r7, #24]
 802b4ca:	1ad3      	subs	r3, r2, r3
 802b4cc:	2b01      	cmp	r3, #1
 802b4ce:	d90a      	bls.n	802b4e6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802b4d0:	68fb      	ldr	r3, [r7, #12]
 802b4d2:	691b      	ldr	r3, [r3, #16]
 802b4d4:	f043 0208 	orr.w	r2, r3, #8
 802b4d8:	68fb      	ldr	r3, [r7, #12]
 802b4da:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802b4dc:	68fb      	ldr	r3, [r7, #12]
 802b4de:	2203      	movs	r2, #3
 802b4e0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802b4e2:	2303      	movs	r3, #3
 802b4e4:	e0d8      	b.n	802b698 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 802b4e6:	68fb      	ldr	r3, [r7, #12]
 802b4e8:	681b      	ldr	r3, [r3, #0]
 802b4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b4ec:	2b00      	cmp	r3, #0
 802b4ee:	dbe8      	blt.n	802b4c2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 802b4f0:	2001      	movs	r0, #1
 802b4f2:	f7ff fbe7 	bl	802acc4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802b4f6:	68fb      	ldr	r3, [r7, #12]
 802b4f8:	681b      	ldr	r3, [r3, #0]
 802b4fa:	68ba      	ldr	r2, [r7, #8]
 802b4fc:	6992      	ldr	r2, [r2, #24]
 802b4fe:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 802b500:	68fb      	ldr	r3, [r7, #12]
 802b502:	681b      	ldr	r3, [r3, #0]
 802b504:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802b506:	687b      	ldr	r3, [r7, #4]
 802b508:	f003 0310 	and.w	r3, r3, #16
 802b50c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802b510:	fa01 f303 	lsl.w	r3, r1, r3
 802b514:	43db      	mvns	r3, r3
 802b516:	ea02 0103 	and.w	r1, r2, r3
 802b51a:	68bb      	ldr	r3, [r7, #8]
 802b51c:	69da      	ldr	r2, [r3, #28]
 802b51e:	687b      	ldr	r3, [r7, #4]
 802b520:	f003 0310 	and.w	r3, r3, #16
 802b524:	409a      	lsls	r2, r3
 802b526:	68fb      	ldr	r3, [r7, #12]
 802b528:	681b      	ldr	r3, [r3, #0]
 802b52a:	430a      	orrs	r2, r1
 802b52c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 802b52e:	68fb      	ldr	r3, [r7, #12]
 802b530:	681b      	ldr	r3, [r3, #0]
 802b532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802b534:	687b      	ldr	r3, [r7, #4]
 802b536:	f003 0310 	and.w	r3, r3, #16
 802b53a:	21ff      	movs	r1, #255	; 0xff
 802b53c:	fa01 f303 	lsl.w	r3, r1, r3
 802b540:	43db      	mvns	r3, r3
 802b542:	ea02 0103 	and.w	r1, r2, r3
 802b546:	68bb      	ldr	r3, [r7, #8]
 802b548:	6a1a      	ldr	r2, [r3, #32]
 802b54a:	687b      	ldr	r3, [r7, #4]
 802b54c:	f003 0310 	and.w	r3, r3, #16
 802b550:	409a      	lsls	r2, r3
 802b552:	68fb      	ldr	r3, [r7, #12]
 802b554:	681b      	ldr	r3, [r3, #0]
 802b556:	430a      	orrs	r2, r1
 802b558:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 802b55a:	68bb      	ldr	r3, [r7, #8]
 802b55c:	691b      	ldr	r3, [r3, #16]
 802b55e:	2b01      	cmp	r3, #1
 802b560:	d11d      	bne.n	802b59e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 802b562:	68fb      	ldr	r3, [r7, #12]
 802b564:	681b      	ldr	r3, [r3, #0]
 802b566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b568:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 802b56a:	687b      	ldr	r3, [r7, #4]
 802b56c:	f003 0310 	and.w	r3, r3, #16
 802b570:	221f      	movs	r2, #31
 802b572:	fa02 f303 	lsl.w	r3, r2, r3
 802b576:	43db      	mvns	r3, r3
 802b578:	697a      	ldr	r2, [r7, #20]
 802b57a:	4013      	ands	r3, r2
 802b57c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 802b57e:	68bb      	ldr	r3, [r7, #8]
 802b580:	695b      	ldr	r3, [r3, #20]
 802b582:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b584:	687b      	ldr	r3, [r7, #4]
 802b586:	f003 0310 	and.w	r3, r3, #16
 802b58a:	693a      	ldr	r2, [r7, #16]
 802b58c:	fa02 f303 	lsl.w	r3, r2, r3
 802b590:	697a      	ldr	r2, [r7, #20]
 802b592:	4313      	orrs	r3, r2
 802b594:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 802b596:	68fb      	ldr	r3, [r7, #12]
 802b598:	681b      	ldr	r3, [r3, #0]
 802b59a:	697a      	ldr	r2, [r7, #20]
 802b59c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 802b59e:	68fb      	ldr	r3, [r7, #12]
 802b5a0:	681b      	ldr	r3, [r3, #0]
 802b5a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b5a4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 802b5a6:	687b      	ldr	r3, [r7, #4]
 802b5a8:	f003 0310 	and.w	r3, r3, #16
 802b5ac:	2207      	movs	r2, #7
 802b5ae:	fa02 f303 	lsl.w	r3, r2, r3
 802b5b2:	43db      	mvns	r3, r3
 802b5b4:	697a      	ldr	r2, [r7, #20]
 802b5b6:	4013      	ands	r3, r2
 802b5b8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 802b5ba:	68bb      	ldr	r3, [r7, #8]
 802b5bc:	68db      	ldr	r3, [r3, #12]
 802b5be:	2b01      	cmp	r3, #1
 802b5c0:	d102      	bne.n	802b5c8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 802b5c2:	2300      	movs	r3, #0
 802b5c4:	61fb      	str	r3, [r7, #28]
 802b5c6:	e00f      	b.n	802b5e8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 802b5c8:	68bb      	ldr	r3, [r7, #8]
 802b5ca:	68db      	ldr	r3, [r3, #12]
 802b5cc:	2b02      	cmp	r3, #2
 802b5ce:	d102      	bne.n	802b5d6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 802b5d0:	2301      	movs	r3, #1
 802b5d2:	61fb      	str	r3, [r7, #28]
 802b5d4:	e008      	b.n	802b5e8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 802b5d6:	68bb      	ldr	r3, [r7, #8]
 802b5d8:	689b      	ldr	r3, [r3, #8]
 802b5da:	2b00      	cmp	r3, #0
 802b5dc:	d102      	bne.n	802b5e4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 802b5de:	2301      	movs	r3, #1
 802b5e0:	61fb      	str	r3, [r7, #28]
 802b5e2:	e001      	b.n	802b5e8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 802b5e4:	2300      	movs	r3, #0
 802b5e6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 802b5e8:	68bb      	ldr	r3, [r7, #8]
 802b5ea:	681a      	ldr	r2, [r3, #0]
 802b5ec:	68bb      	ldr	r3, [r7, #8]
 802b5ee:	689b      	ldr	r3, [r3, #8]
 802b5f0:	4313      	orrs	r3, r2
 802b5f2:	69fa      	ldr	r2, [r7, #28]
 802b5f4:	4313      	orrs	r3, r2
 802b5f6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b5f8:	687b      	ldr	r3, [r7, #4]
 802b5fa:	f003 0310 	and.w	r3, r3, #16
 802b5fe:	693a      	ldr	r2, [r7, #16]
 802b600:	fa02 f303 	lsl.w	r3, r2, r3
 802b604:	697a      	ldr	r2, [r7, #20]
 802b606:	4313      	orrs	r3, r2
 802b608:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 802b60a:	68fb      	ldr	r3, [r7, #12]
 802b60c:	681b      	ldr	r3, [r3, #0]
 802b60e:	697a      	ldr	r2, [r7, #20]
 802b610:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 802b612:	68fb      	ldr	r3, [r7, #12]
 802b614:	681b      	ldr	r3, [r3, #0]
 802b616:	6819      	ldr	r1, [r3, #0]
 802b618:	687b      	ldr	r3, [r7, #4]
 802b61a:	f003 0310 	and.w	r3, r3, #16
 802b61e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802b622:	fa02 f303 	lsl.w	r3, r2, r3
 802b626:	43da      	mvns	r2, r3
 802b628:	68fb      	ldr	r3, [r7, #12]
 802b62a:	681b      	ldr	r3, [r3, #0]
 802b62c:	400a      	ands	r2, r1
 802b62e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 802b630:	68fb      	ldr	r3, [r7, #12]
 802b632:	681b      	ldr	r3, [r3, #0]
 802b634:	681b      	ldr	r3, [r3, #0]
 802b636:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 802b638:	687b      	ldr	r3, [r7, #4]
 802b63a:	f003 0310 	and.w	r3, r3, #16
 802b63e:	f640 72fe 	movw	r2, #4094	; 0xffe
 802b642:	fa02 f303 	lsl.w	r3, r2, r3
 802b646:	43db      	mvns	r3, r3
 802b648:	697a      	ldr	r2, [r7, #20]
 802b64a:	4013      	ands	r3, r2
 802b64c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 802b64e:	68bb      	ldr	r3, [r7, #8]
 802b650:	685b      	ldr	r3, [r3, #4]
 802b652:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b654:	687b      	ldr	r3, [r7, #4]
 802b656:	f003 0310 	and.w	r3, r3, #16
 802b65a:	693a      	ldr	r2, [r7, #16]
 802b65c:	fa02 f303 	lsl.w	r3, r2, r3
 802b660:	697a      	ldr	r2, [r7, #20]
 802b662:	4313      	orrs	r3, r2
 802b664:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 802b666:	68fb      	ldr	r3, [r7, #12]
 802b668:	681b      	ldr	r3, [r3, #0]
 802b66a:	697a      	ldr	r2, [r7, #20]
 802b66c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 802b66e:	68fb      	ldr	r3, [r7, #12]
 802b670:	681b      	ldr	r3, [r3, #0]
 802b672:	6819      	ldr	r1, [r3, #0]
 802b674:	687b      	ldr	r3, [r7, #4]
 802b676:	f003 0310 	and.w	r3, r3, #16
 802b67a:	22c0      	movs	r2, #192	; 0xc0
 802b67c:	fa02 f303 	lsl.w	r3, r2, r3
 802b680:	43da      	mvns	r2, r3
 802b682:	68fb      	ldr	r3, [r7, #12]
 802b684:	681b      	ldr	r3, [r3, #0]
 802b686:	400a      	ands	r2, r1
 802b688:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802b68a:	68fb      	ldr	r3, [r7, #12]
 802b68c:	2201      	movs	r2, #1
 802b68e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802b690:	68fb      	ldr	r3, [r7, #12]
 802b692:	2200      	movs	r2, #0
 802b694:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802b696:	2300      	movs	r3, #0
}
 802b698:	4618      	mov	r0, r3
 802b69a:	3720      	adds	r7, #32
 802b69c:	46bd      	mov	sp, r7
 802b69e:	bd80      	pop	{r7, pc}
 802b6a0:	20008000 	.word	0x20008000

0802b6a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802b6a4:	b580      	push	{r7, lr}
 802b6a6:	b086      	sub	sp, #24
 802b6a8:	af00      	add	r7, sp, #0
 802b6aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 802b6ac:	f7ff fafe 	bl	802acac <HAL_GetTick>
 802b6b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802b6b2:	687b      	ldr	r3, [r7, #4]
 802b6b4:	2b00      	cmp	r3, #0
 802b6b6:	d101      	bne.n	802b6bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 802b6b8:	2301      	movs	r3, #1
 802b6ba:	e316      	b.n	802bcea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802b6bc:	687b      	ldr	r3, [r7, #4]
 802b6be:	681b      	ldr	r3, [r3, #0]
 802b6c0:	4a66      	ldr	r2, [pc, #408]	; (802b85c <HAL_DMA_Init+0x1b8>)
 802b6c2:	4293      	cmp	r3, r2
 802b6c4:	d04a      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b6c6:	687b      	ldr	r3, [r7, #4]
 802b6c8:	681b      	ldr	r3, [r3, #0]
 802b6ca:	4a65      	ldr	r2, [pc, #404]	; (802b860 <HAL_DMA_Init+0x1bc>)
 802b6cc:	4293      	cmp	r3, r2
 802b6ce:	d045      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b6d0:	687b      	ldr	r3, [r7, #4]
 802b6d2:	681b      	ldr	r3, [r3, #0]
 802b6d4:	4a63      	ldr	r2, [pc, #396]	; (802b864 <HAL_DMA_Init+0x1c0>)
 802b6d6:	4293      	cmp	r3, r2
 802b6d8:	d040      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b6da:	687b      	ldr	r3, [r7, #4]
 802b6dc:	681b      	ldr	r3, [r3, #0]
 802b6de:	4a62      	ldr	r2, [pc, #392]	; (802b868 <HAL_DMA_Init+0x1c4>)
 802b6e0:	4293      	cmp	r3, r2
 802b6e2:	d03b      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b6e4:	687b      	ldr	r3, [r7, #4]
 802b6e6:	681b      	ldr	r3, [r3, #0]
 802b6e8:	4a60      	ldr	r2, [pc, #384]	; (802b86c <HAL_DMA_Init+0x1c8>)
 802b6ea:	4293      	cmp	r3, r2
 802b6ec:	d036      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b6ee:	687b      	ldr	r3, [r7, #4]
 802b6f0:	681b      	ldr	r3, [r3, #0]
 802b6f2:	4a5f      	ldr	r2, [pc, #380]	; (802b870 <HAL_DMA_Init+0x1cc>)
 802b6f4:	4293      	cmp	r3, r2
 802b6f6:	d031      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b6f8:	687b      	ldr	r3, [r7, #4]
 802b6fa:	681b      	ldr	r3, [r3, #0]
 802b6fc:	4a5d      	ldr	r2, [pc, #372]	; (802b874 <HAL_DMA_Init+0x1d0>)
 802b6fe:	4293      	cmp	r3, r2
 802b700:	d02c      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b702:	687b      	ldr	r3, [r7, #4]
 802b704:	681b      	ldr	r3, [r3, #0]
 802b706:	4a5c      	ldr	r2, [pc, #368]	; (802b878 <HAL_DMA_Init+0x1d4>)
 802b708:	4293      	cmp	r3, r2
 802b70a:	d027      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b70c:	687b      	ldr	r3, [r7, #4]
 802b70e:	681b      	ldr	r3, [r3, #0]
 802b710:	4a5a      	ldr	r2, [pc, #360]	; (802b87c <HAL_DMA_Init+0x1d8>)
 802b712:	4293      	cmp	r3, r2
 802b714:	d022      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b716:	687b      	ldr	r3, [r7, #4]
 802b718:	681b      	ldr	r3, [r3, #0]
 802b71a:	4a59      	ldr	r2, [pc, #356]	; (802b880 <HAL_DMA_Init+0x1dc>)
 802b71c:	4293      	cmp	r3, r2
 802b71e:	d01d      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b720:	687b      	ldr	r3, [r7, #4]
 802b722:	681b      	ldr	r3, [r3, #0]
 802b724:	4a57      	ldr	r2, [pc, #348]	; (802b884 <HAL_DMA_Init+0x1e0>)
 802b726:	4293      	cmp	r3, r2
 802b728:	d018      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b72a:	687b      	ldr	r3, [r7, #4]
 802b72c:	681b      	ldr	r3, [r3, #0]
 802b72e:	4a56      	ldr	r2, [pc, #344]	; (802b888 <HAL_DMA_Init+0x1e4>)
 802b730:	4293      	cmp	r3, r2
 802b732:	d013      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b734:	687b      	ldr	r3, [r7, #4]
 802b736:	681b      	ldr	r3, [r3, #0]
 802b738:	4a54      	ldr	r2, [pc, #336]	; (802b88c <HAL_DMA_Init+0x1e8>)
 802b73a:	4293      	cmp	r3, r2
 802b73c:	d00e      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b73e:	687b      	ldr	r3, [r7, #4]
 802b740:	681b      	ldr	r3, [r3, #0]
 802b742:	4a53      	ldr	r2, [pc, #332]	; (802b890 <HAL_DMA_Init+0x1ec>)
 802b744:	4293      	cmp	r3, r2
 802b746:	d009      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b748:	687b      	ldr	r3, [r7, #4]
 802b74a:	681b      	ldr	r3, [r3, #0]
 802b74c:	4a51      	ldr	r2, [pc, #324]	; (802b894 <HAL_DMA_Init+0x1f0>)
 802b74e:	4293      	cmp	r3, r2
 802b750:	d004      	beq.n	802b75c <HAL_DMA_Init+0xb8>
 802b752:	687b      	ldr	r3, [r7, #4]
 802b754:	681b      	ldr	r3, [r3, #0]
 802b756:	4a50      	ldr	r2, [pc, #320]	; (802b898 <HAL_DMA_Init+0x1f4>)
 802b758:	4293      	cmp	r3, r2
 802b75a:	d101      	bne.n	802b760 <HAL_DMA_Init+0xbc>
 802b75c:	2301      	movs	r3, #1
 802b75e:	e000      	b.n	802b762 <HAL_DMA_Init+0xbe>
 802b760:	2300      	movs	r3, #0
 802b762:	2b00      	cmp	r3, #0
 802b764:	f000 813b 	beq.w	802b9de <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802b768:	687b      	ldr	r3, [r7, #4]
 802b76a:	2202      	movs	r2, #2
 802b76c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802b770:	687b      	ldr	r3, [r7, #4]
 802b772:	2200      	movs	r2, #0
 802b774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802b778:	687b      	ldr	r3, [r7, #4]
 802b77a:	681b      	ldr	r3, [r3, #0]
 802b77c:	4a37      	ldr	r2, [pc, #220]	; (802b85c <HAL_DMA_Init+0x1b8>)
 802b77e:	4293      	cmp	r3, r2
 802b780:	d04a      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b782:	687b      	ldr	r3, [r7, #4]
 802b784:	681b      	ldr	r3, [r3, #0]
 802b786:	4a36      	ldr	r2, [pc, #216]	; (802b860 <HAL_DMA_Init+0x1bc>)
 802b788:	4293      	cmp	r3, r2
 802b78a:	d045      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b78c:	687b      	ldr	r3, [r7, #4]
 802b78e:	681b      	ldr	r3, [r3, #0]
 802b790:	4a34      	ldr	r2, [pc, #208]	; (802b864 <HAL_DMA_Init+0x1c0>)
 802b792:	4293      	cmp	r3, r2
 802b794:	d040      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b796:	687b      	ldr	r3, [r7, #4]
 802b798:	681b      	ldr	r3, [r3, #0]
 802b79a:	4a33      	ldr	r2, [pc, #204]	; (802b868 <HAL_DMA_Init+0x1c4>)
 802b79c:	4293      	cmp	r3, r2
 802b79e:	d03b      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b7a0:	687b      	ldr	r3, [r7, #4]
 802b7a2:	681b      	ldr	r3, [r3, #0]
 802b7a4:	4a31      	ldr	r2, [pc, #196]	; (802b86c <HAL_DMA_Init+0x1c8>)
 802b7a6:	4293      	cmp	r3, r2
 802b7a8:	d036      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b7aa:	687b      	ldr	r3, [r7, #4]
 802b7ac:	681b      	ldr	r3, [r3, #0]
 802b7ae:	4a30      	ldr	r2, [pc, #192]	; (802b870 <HAL_DMA_Init+0x1cc>)
 802b7b0:	4293      	cmp	r3, r2
 802b7b2:	d031      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b7b4:	687b      	ldr	r3, [r7, #4]
 802b7b6:	681b      	ldr	r3, [r3, #0]
 802b7b8:	4a2e      	ldr	r2, [pc, #184]	; (802b874 <HAL_DMA_Init+0x1d0>)
 802b7ba:	4293      	cmp	r3, r2
 802b7bc:	d02c      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b7be:	687b      	ldr	r3, [r7, #4]
 802b7c0:	681b      	ldr	r3, [r3, #0]
 802b7c2:	4a2d      	ldr	r2, [pc, #180]	; (802b878 <HAL_DMA_Init+0x1d4>)
 802b7c4:	4293      	cmp	r3, r2
 802b7c6:	d027      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b7c8:	687b      	ldr	r3, [r7, #4]
 802b7ca:	681b      	ldr	r3, [r3, #0]
 802b7cc:	4a2b      	ldr	r2, [pc, #172]	; (802b87c <HAL_DMA_Init+0x1d8>)
 802b7ce:	4293      	cmp	r3, r2
 802b7d0:	d022      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b7d2:	687b      	ldr	r3, [r7, #4]
 802b7d4:	681b      	ldr	r3, [r3, #0]
 802b7d6:	4a2a      	ldr	r2, [pc, #168]	; (802b880 <HAL_DMA_Init+0x1dc>)
 802b7d8:	4293      	cmp	r3, r2
 802b7da:	d01d      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b7dc:	687b      	ldr	r3, [r7, #4]
 802b7de:	681b      	ldr	r3, [r3, #0]
 802b7e0:	4a28      	ldr	r2, [pc, #160]	; (802b884 <HAL_DMA_Init+0x1e0>)
 802b7e2:	4293      	cmp	r3, r2
 802b7e4:	d018      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b7e6:	687b      	ldr	r3, [r7, #4]
 802b7e8:	681b      	ldr	r3, [r3, #0]
 802b7ea:	4a27      	ldr	r2, [pc, #156]	; (802b888 <HAL_DMA_Init+0x1e4>)
 802b7ec:	4293      	cmp	r3, r2
 802b7ee:	d013      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b7f0:	687b      	ldr	r3, [r7, #4]
 802b7f2:	681b      	ldr	r3, [r3, #0]
 802b7f4:	4a25      	ldr	r2, [pc, #148]	; (802b88c <HAL_DMA_Init+0x1e8>)
 802b7f6:	4293      	cmp	r3, r2
 802b7f8:	d00e      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b7fa:	687b      	ldr	r3, [r7, #4]
 802b7fc:	681b      	ldr	r3, [r3, #0]
 802b7fe:	4a24      	ldr	r2, [pc, #144]	; (802b890 <HAL_DMA_Init+0x1ec>)
 802b800:	4293      	cmp	r3, r2
 802b802:	d009      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b804:	687b      	ldr	r3, [r7, #4]
 802b806:	681b      	ldr	r3, [r3, #0]
 802b808:	4a22      	ldr	r2, [pc, #136]	; (802b894 <HAL_DMA_Init+0x1f0>)
 802b80a:	4293      	cmp	r3, r2
 802b80c:	d004      	beq.n	802b818 <HAL_DMA_Init+0x174>
 802b80e:	687b      	ldr	r3, [r7, #4]
 802b810:	681b      	ldr	r3, [r3, #0]
 802b812:	4a21      	ldr	r2, [pc, #132]	; (802b898 <HAL_DMA_Init+0x1f4>)
 802b814:	4293      	cmp	r3, r2
 802b816:	d108      	bne.n	802b82a <HAL_DMA_Init+0x186>
 802b818:	687b      	ldr	r3, [r7, #4]
 802b81a:	681b      	ldr	r3, [r3, #0]
 802b81c:	681a      	ldr	r2, [r3, #0]
 802b81e:	687b      	ldr	r3, [r7, #4]
 802b820:	681b      	ldr	r3, [r3, #0]
 802b822:	f022 0201 	bic.w	r2, r2, #1
 802b826:	601a      	str	r2, [r3, #0]
 802b828:	e007      	b.n	802b83a <HAL_DMA_Init+0x196>
 802b82a:	687b      	ldr	r3, [r7, #4]
 802b82c:	681b      	ldr	r3, [r3, #0]
 802b82e:	681a      	ldr	r2, [r3, #0]
 802b830:	687b      	ldr	r3, [r7, #4]
 802b832:	681b      	ldr	r3, [r3, #0]
 802b834:	f022 0201 	bic.w	r2, r2, #1
 802b838:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802b83a:	e02f      	b.n	802b89c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802b83c:	f7ff fa36 	bl	802acac <HAL_GetTick>
 802b840:	4602      	mov	r2, r0
 802b842:	693b      	ldr	r3, [r7, #16]
 802b844:	1ad3      	subs	r3, r2, r3
 802b846:	2b05      	cmp	r3, #5
 802b848:	d928      	bls.n	802b89c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802b84a:	687b      	ldr	r3, [r7, #4]
 802b84c:	2220      	movs	r2, #32
 802b84e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802b850:	687b      	ldr	r3, [r7, #4]
 802b852:	2203      	movs	r2, #3
 802b854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 802b858:	2301      	movs	r3, #1
 802b85a:	e246      	b.n	802bcea <HAL_DMA_Init+0x646>
 802b85c:	40020010 	.word	0x40020010
 802b860:	40020028 	.word	0x40020028
 802b864:	40020040 	.word	0x40020040
 802b868:	40020058 	.word	0x40020058
 802b86c:	40020070 	.word	0x40020070
 802b870:	40020088 	.word	0x40020088
 802b874:	400200a0 	.word	0x400200a0
 802b878:	400200b8 	.word	0x400200b8
 802b87c:	40020410 	.word	0x40020410
 802b880:	40020428 	.word	0x40020428
 802b884:	40020440 	.word	0x40020440
 802b888:	40020458 	.word	0x40020458
 802b88c:	40020470 	.word	0x40020470
 802b890:	40020488 	.word	0x40020488
 802b894:	400204a0 	.word	0x400204a0
 802b898:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802b89c:	687b      	ldr	r3, [r7, #4]
 802b89e:	681b      	ldr	r3, [r3, #0]
 802b8a0:	681b      	ldr	r3, [r3, #0]
 802b8a2:	f003 0301 	and.w	r3, r3, #1
 802b8a6:	2b00      	cmp	r3, #0
 802b8a8:	d1c8      	bne.n	802b83c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 802b8aa:	687b      	ldr	r3, [r7, #4]
 802b8ac:	681b      	ldr	r3, [r3, #0]
 802b8ae:	681b      	ldr	r3, [r3, #0]
 802b8b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802b8b2:	697a      	ldr	r2, [r7, #20]
 802b8b4:	4b83      	ldr	r3, [pc, #524]	; (802bac4 <HAL_DMA_Init+0x420>)
 802b8b6:	4013      	ands	r3, r2
 802b8b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 802b8ba:	687b      	ldr	r3, [r7, #4]
 802b8bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b8be:	687b      	ldr	r3, [r7, #4]
 802b8c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 802b8c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b8c4:	687b      	ldr	r3, [r7, #4]
 802b8c6:	691b      	ldr	r3, [r3, #16]
 802b8c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b8ca:	687b      	ldr	r3, [r7, #4]
 802b8cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b8ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b8d0:	687b      	ldr	r3, [r7, #4]
 802b8d2:	699b      	ldr	r3, [r3, #24]
 802b8d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802b8d6:	687b      	ldr	r3, [r7, #4]
 802b8d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b8da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802b8dc:	687b      	ldr	r3, [r7, #4]
 802b8de:	6a1b      	ldr	r3, [r3, #32]
 802b8e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 802b8e2:	697a      	ldr	r2, [r7, #20]
 802b8e4:	4313      	orrs	r3, r2
 802b8e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802b8e8:	687b      	ldr	r3, [r7, #4]
 802b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b8ec:	2b04      	cmp	r3, #4
 802b8ee:	d107      	bne.n	802b900 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802b8f0:	687b      	ldr	r3, [r7, #4]
 802b8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b8f4:	687b      	ldr	r3, [r7, #4]
 802b8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b8f8:	4313      	orrs	r3, r2
 802b8fa:	697a      	ldr	r2, [r7, #20]
 802b8fc:	4313      	orrs	r3, r2
 802b8fe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 802b900:	4b71      	ldr	r3, [pc, #452]	; (802bac8 <HAL_DMA_Init+0x424>)
 802b902:	681a      	ldr	r2, [r3, #0]
 802b904:	4b71      	ldr	r3, [pc, #452]	; (802bacc <HAL_DMA_Init+0x428>)
 802b906:	4013      	ands	r3, r2
 802b908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802b90c:	d328      	bcc.n	802b960 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 802b90e:	687b      	ldr	r3, [r7, #4]
 802b910:	685b      	ldr	r3, [r3, #4]
 802b912:	2b28      	cmp	r3, #40	; 0x28
 802b914:	d903      	bls.n	802b91e <HAL_DMA_Init+0x27a>
 802b916:	687b      	ldr	r3, [r7, #4]
 802b918:	685b      	ldr	r3, [r3, #4]
 802b91a:	2b2e      	cmp	r3, #46	; 0x2e
 802b91c:	d917      	bls.n	802b94e <HAL_DMA_Init+0x2aa>
 802b91e:	687b      	ldr	r3, [r7, #4]
 802b920:	685b      	ldr	r3, [r3, #4]
 802b922:	2b3e      	cmp	r3, #62	; 0x3e
 802b924:	d903      	bls.n	802b92e <HAL_DMA_Init+0x28a>
 802b926:	687b      	ldr	r3, [r7, #4]
 802b928:	685b      	ldr	r3, [r3, #4]
 802b92a:	2b42      	cmp	r3, #66	; 0x42
 802b92c:	d90f      	bls.n	802b94e <HAL_DMA_Init+0x2aa>
 802b92e:	687b      	ldr	r3, [r7, #4]
 802b930:	685b      	ldr	r3, [r3, #4]
 802b932:	2b46      	cmp	r3, #70	; 0x46
 802b934:	d903      	bls.n	802b93e <HAL_DMA_Init+0x29a>
 802b936:	687b      	ldr	r3, [r7, #4]
 802b938:	685b      	ldr	r3, [r3, #4]
 802b93a:	2b48      	cmp	r3, #72	; 0x48
 802b93c:	d907      	bls.n	802b94e <HAL_DMA_Init+0x2aa>
 802b93e:	687b      	ldr	r3, [r7, #4]
 802b940:	685b      	ldr	r3, [r3, #4]
 802b942:	2b4e      	cmp	r3, #78	; 0x4e
 802b944:	d905      	bls.n	802b952 <HAL_DMA_Init+0x2ae>
 802b946:	687b      	ldr	r3, [r7, #4]
 802b948:	685b      	ldr	r3, [r3, #4]
 802b94a:	2b52      	cmp	r3, #82	; 0x52
 802b94c:	d801      	bhi.n	802b952 <HAL_DMA_Init+0x2ae>
 802b94e:	2301      	movs	r3, #1
 802b950:	e000      	b.n	802b954 <HAL_DMA_Init+0x2b0>
 802b952:	2300      	movs	r3, #0
 802b954:	2b00      	cmp	r3, #0
 802b956:	d003      	beq.n	802b960 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 802b958:	697b      	ldr	r3, [r7, #20]
 802b95a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802b95e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 802b960:	687b      	ldr	r3, [r7, #4]
 802b962:	681b      	ldr	r3, [r3, #0]
 802b964:	697a      	ldr	r2, [r7, #20]
 802b966:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 802b968:	687b      	ldr	r3, [r7, #4]
 802b96a:	681b      	ldr	r3, [r3, #0]
 802b96c:	695b      	ldr	r3, [r3, #20]
 802b96e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802b970:	697b      	ldr	r3, [r7, #20]
 802b972:	f023 0307 	bic.w	r3, r3, #7
 802b976:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 802b978:	687b      	ldr	r3, [r7, #4]
 802b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b97c:	697a      	ldr	r2, [r7, #20]
 802b97e:	4313      	orrs	r3, r2
 802b980:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802b982:	687b      	ldr	r3, [r7, #4]
 802b984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b986:	2b04      	cmp	r3, #4
 802b988:	d117      	bne.n	802b9ba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 802b98a:	687b      	ldr	r3, [r7, #4]
 802b98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b98e:	697a      	ldr	r2, [r7, #20]
 802b990:	4313      	orrs	r3, r2
 802b992:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802b994:	687b      	ldr	r3, [r7, #4]
 802b996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b998:	2b00      	cmp	r3, #0
 802b99a:	d00e      	beq.n	802b9ba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802b99c:	6878      	ldr	r0, [r7, #4]
 802b99e:	f002 fb4d 	bl	802e03c <DMA_CheckFifoParam>
 802b9a2:	4603      	mov	r3, r0
 802b9a4:	2b00      	cmp	r3, #0
 802b9a6:	d008      	beq.n	802b9ba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802b9a8:	687b      	ldr	r3, [r7, #4]
 802b9aa:	2240      	movs	r2, #64	; 0x40
 802b9ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802b9ae:	687b      	ldr	r3, [r7, #4]
 802b9b0:	2201      	movs	r2, #1
 802b9b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 802b9b6:	2301      	movs	r3, #1
 802b9b8:	e197      	b.n	802bcea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 802b9ba:	687b      	ldr	r3, [r7, #4]
 802b9bc:	681b      	ldr	r3, [r3, #0]
 802b9be:	697a      	ldr	r2, [r7, #20]
 802b9c0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802b9c2:	6878      	ldr	r0, [r7, #4]
 802b9c4:	f002 fa88 	bl	802ded8 <DMA_CalcBaseAndBitshift>
 802b9c8:	4603      	mov	r3, r0
 802b9ca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802b9cc:	687b      	ldr	r3, [r7, #4]
 802b9ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802b9d0:	f003 031f 	and.w	r3, r3, #31
 802b9d4:	223f      	movs	r2, #63	; 0x3f
 802b9d6:	409a      	lsls	r2, r3
 802b9d8:	68bb      	ldr	r3, [r7, #8]
 802b9da:	609a      	str	r2, [r3, #8]
 802b9dc:	e0cd      	b.n	802bb7a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802b9de:	687b      	ldr	r3, [r7, #4]
 802b9e0:	681b      	ldr	r3, [r3, #0]
 802b9e2:	4a3b      	ldr	r2, [pc, #236]	; (802bad0 <HAL_DMA_Init+0x42c>)
 802b9e4:	4293      	cmp	r3, r2
 802b9e6:	d022      	beq.n	802ba2e <HAL_DMA_Init+0x38a>
 802b9e8:	687b      	ldr	r3, [r7, #4]
 802b9ea:	681b      	ldr	r3, [r3, #0]
 802b9ec:	4a39      	ldr	r2, [pc, #228]	; (802bad4 <HAL_DMA_Init+0x430>)
 802b9ee:	4293      	cmp	r3, r2
 802b9f0:	d01d      	beq.n	802ba2e <HAL_DMA_Init+0x38a>
 802b9f2:	687b      	ldr	r3, [r7, #4]
 802b9f4:	681b      	ldr	r3, [r3, #0]
 802b9f6:	4a38      	ldr	r2, [pc, #224]	; (802bad8 <HAL_DMA_Init+0x434>)
 802b9f8:	4293      	cmp	r3, r2
 802b9fa:	d018      	beq.n	802ba2e <HAL_DMA_Init+0x38a>
 802b9fc:	687b      	ldr	r3, [r7, #4]
 802b9fe:	681b      	ldr	r3, [r3, #0]
 802ba00:	4a36      	ldr	r2, [pc, #216]	; (802badc <HAL_DMA_Init+0x438>)
 802ba02:	4293      	cmp	r3, r2
 802ba04:	d013      	beq.n	802ba2e <HAL_DMA_Init+0x38a>
 802ba06:	687b      	ldr	r3, [r7, #4]
 802ba08:	681b      	ldr	r3, [r3, #0]
 802ba0a:	4a35      	ldr	r2, [pc, #212]	; (802bae0 <HAL_DMA_Init+0x43c>)
 802ba0c:	4293      	cmp	r3, r2
 802ba0e:	d00e      	beq.n	802ba2e <HAL_DMA_Init+0x38a>
 802ba10:	687b      	ldr	r3, [r7, #4]
 802ba12:	681b      	ldr	r3, [r3, #0]
 802ba14:	4a33      	ldr	r2, [pc, #204]	; (802bae4 <HAL_DMA_Init+0x440>)
 802ba16:	4293      	cmp	r3, r2
 802ba18:	d009      	beq.n	802ba2e <HAL_DMA_Init+0x38a>
 802ba1a:	687b      	ldr	r3, [r7, #4]
 802ba1c:	681b      	ldr	r3, [r3, #0]
 802ba1e:	4a32      	ldr	r2, [pc, #200]	; (802bae8 <HAL_DMA_Init+0x444>)
 802ba20:	4293      	cmp	r3, r2
 802ba22:	d004      	beq.n	802ba2e <HAL_DMA_Init+0x38a>
 802ba24:	687b      	ldr	r3, [r7, #4]
 802ba26:	681b      	ldr	r3, [r3, #0]
 802ba28:	4a30      	ldr	r2, [pc, #192]	; (802baec <HAL_DMA_Init+0x448>)
 802ba2a:	4293      	cmp	r3, r2
 802ba2c:	d101      	bne.n	802ba32 <HAL_DMA_Init+0x38e>
 802ba2e:	2301      	movs	r3, #1
 802ba30:	e000      	b.n	802ba34 <HAL_DMA_Init+0x390>
 802ba32:	2300      	movs	r3, #0
 802ba34:	2b00      	cmp	r3, #0
 802ba36:	f000 8097 	beq.w	802bb68 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802ba3a:	687b      	ldr	r3, [r7, #4]
 802ba3c:	681b      	ldr	r3, [r3, #0]
 802ba3e:	4a24      	ldr	r2, [pc, #144]	; (802bad0 <HAL_DMA_Init+0x42c>)
 802ba40:	4293      	cmp	r3, r2
 802ba42:	d021      	beq.n	802ba88 <HAL_DMA_Init+0x3e4>
 802ba44:	687b      	ldr	r3, [r7, #4]
 802ba46:	681b      	ldr	r3, [r3, #0]
 802ba48:	4a22      	ldr	r2, [pc, #136]	; (802bad4 <HAL_DMA_Init+0x430>)
 802ba4a:	4293      	cmp	r3, r2
 802ba4c:	d01c      	beq.n	802ba88 <HAL_DMA_Init+0x3e4>
 802ba4e:	687b      	ldr	r3, [r7, #4]
 802ba50:	681b      	ldr	r3, [r3, #0]
 802ba52:	4a21      	ldr	r2, [pc, #132]	; (802bad8 <HAL_DMA_Init+0x434>)
 802ba54:	4293      	cmp	r3, r2
 802ba56:	d017      	beq.n	802ba88 <HAL_DMA_Init+0x3e4>
 802ba58:	687b      	ldr	r3, [r7, #4]
 802ba5a:	681b      	ldr	r3, [r3, #0]
 802ba5c:	4a1f      	ldr	r2, [pc, #124]	; (802badc <HAL_DMA_Init+0x438>)
 802ba5e:	4293      	cmp	r3, r2
 802ba60:	d012      	beq.n	802ba88 <HAL_DMA_Init+0x3e4>
 802ba62:	687b      	ldr	r3, [r7, #4]
 802ba64:	681b      	ldr	r3, [r3, #0]
 802ba66:	4a1e      	ldr	r2, [pc, #120]	; (802bae0 <HAL_DMA_Init+0x43c>)
 802ba68:	4293      	cmp	r3, r2
 802ba6a:	d00d      	beq.n	802ba88 <HAL_DMA_Init+0x3e4>
 802ba6c:	687b      	ldr	r3, [r7, #4]
 802ba6e:	681b      	ldr	r3, [r3, #0]
 802ba70:	4a1c      	ldr	r2, [pc, #112]	; (802bae4 <HAL_DMA_Init+0x440>)
 802ba72:	4293      	cmp	r3, r2
 802ba74:	d008      	beq.n	802ba88 <HAL_DMA_Init+0x3e4>
 802ba76:	687b      	ldr	r3, [r7, #4]
 802ba78:	681b      	ldr	r3, [r3, #0]
 802ba7a:	4a1b      	ldr	r2, [pc, #108]	; (802bae8 <HAL_DMA_Init+0x444>)
 802ba7c:	4293      	cmp	r3, r2
 802ba7e:	d003      	beq.n	802ba88 <HAL_DMA_Init+0x3e4>
 802ba80:	687b      	ldr	r3, [r7, #4]
 802ba82:	681b      	ldr	r3, [r3, #0]
 802ba84:	4a19      	ldr	r2, [pc, #100]	; (802baec <HAL_DMA_Init+0x448>)
 802ba86:	4293      	cmp	r3, r2
 802ba88:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802ba8a:	687b      	ldr	r3, [r7, #4]
 802ba8c:	2202      	movs	r2, #2
 802ba8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802ba92:	687b      	ldr	r3, [r7, #4]
 802ba94:	2200      	movs	r2, #0
 802ba96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 802ba9a:	687b      	ldr	r3, [r7, #4]
 802ba9c:	681b      	ldr	r3, [r3, #0]
 802ba9e:	681b      	ldr	r3, [r3, #0]
 802baa0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 802baa2:	697a      	ldr	r2, [r7, #20]
 802baa4:	4b12      	ldr	r3, [pc, #72]	; (802baf0 <HAL_DMA_Init+0x44c>)
 802baa6:	4013      	ands	r3, r2
 802baa8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802baaa:	687b      	ldr	r3, [r7, #4]
 802baac:	689b      	ldr	r3, [r3, #8]
 802baae:	2b40      	cmp	r3, #64	; 0x40
 802bab0:	d020      	beq.n	802baf4 <HAL_DMA_Init+0x450>
 802bab2:	687b      	ldr	r3, [r7, #4]
 802bab4:	689b      	ldr	r3, [r3, #8]
 802bab6:	2b80      	cmp	r3, #128	; 0x80
 802bab8:	d102      	bne.n	802bac0 <HAL_DMA_Init+0x41c>
 802baba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802babe:	e01a      	b.n	802baf6 <HAL_DMA_Init+0x452>
 802bac0:	2300      	movs	r3, #0
 802bac2:	e018      	b.n	802baf6 <HAL_DMA_Init+0x452>
 802bac4:	fe10803f 	.word	0xfe10803f
 802bac8:	5c001000 	.word	0x5c001000
 802bacc:	ffff0000 	.word	0xffff0000
 802bad0:	58025408 	.word	0x58025408
 802bad4:	5802541c 	.word	0x5802541c
 802bad8:	58025430 	.word	0x58025430
 802badc:	58025444 	.word	0x58025444
 802bae0:	58025458 	.word	0x58025458
 802bae4:	5802546c 	.word	0x5802546c
 802bae8:	58025480 	.word	0x58025480
 802baec:	58025494 	.word	0x58025494
 802baf0:	fffe000f 	.word	0xfffe000f
 802baf4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802baf6:	687a      	ldr	r2, [r7, #4]
 802baf8:	68d2      	ldr	r2, [r2, #12]
 802bafa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802bafc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802bafe:	687b      	ldr	r3, [r7, #4]
 802bb00:	691b      	ldr	r3, [r3, #16]
 802bb02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802bb04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802bb06:	687b      	ldr	r3, [r7, #4]
 802bb08:	695b      	ldr	r3, [r3, #20]
 802bb0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802bb0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802bb0e:	687b      	ldr	r3, [r7, #4]
 802bb10:	699b      	ldr	r3, [r3, #24]
 802bb12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802bb14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802bb16:	687b      	ldr	r3, [r7, #4]
 802bb18:	69db      	ldr	r3, [r3, #28]
 802bb1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802bb1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 802bb1e:	687b      	ldr	r3, [r7, #4]
 802bb20:	6a1b      	ldr	r3, [r3, #32]
 802bb22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802bb24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802bb26:	697a      	ldr	r2, [r7, #20]
 802bb28:	4313      	orrs	r3, r2
 802bb2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 802bb2c:	687b      	ldr	r3, [r7, #4]
 802bb2e:	681b      	ldr	r3, [r3, #0]
 802bb30:	697a      	ldr	r2, [r7, #20]
 802bb32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 802bb34:	687b      	ldr	r3, [r7, #4]
 802bb36:	681b      	ldr	r3, [r3, #0]
 802bb38:	461a      	mov	r2, r3
 802bb3a:	4b6e      	ldr	r3, [pc, #440]	; (802bcf4 <HAL_DMA_Init+0x650>)
 802bb3c:	4413      	add	r3, r2
 802bb3e:	4a6e      	ldr	r2, [pc, #440]	; (802bcf8 <HAL_DMA_Init+0x654>)
 802bb40:	fba2 2303 	umull	r2, r3, r2, r3
 802bb44:	091b      	lsrs	r3, r3, #4
 802bb46:	009a      	lsls	r2, r3, #2
 802bb48:	687b      	ldr	r3, [r7, #4]
 802bb4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802bb4c:	6878      	ldr	r0, [r7, #4]
 802bb4e:	f002 f9c3 	bl	802ded8 <DMA_CalcBaseAndBitshift>
 802bb52:	4603      	mov	r3, r0
 802bb54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802bb56:	687b      	ldr	r3, [r7, #4]
 802bb58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802bb5a:	f003 031f 	and.w	r3, r3, #31
 802bb5e:	2201      	movs	r2, #1
 802bb60:	409a      	lsls	r2, r3
 802bb62:	68fb      	ldr	r3, [r7, #12]
 802bb64:	605a      	str	r2, [r3, #4]
 802bb66:	e008      	b.n	802bb7a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802bb68:	687b      	ldr	r3, [r7, #4]
 802bb6a:	2240      	movs	r2, #64	; 0x40
 802bb6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 802bb6e:	687b      	ldr	r3, [r7, #4]
 802bb70:	2203      	movs	r2, #3
 802bb72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 802bb76:	2301      	movs	r3, #1
 802bb78:	e0b7      	b.n	802bcea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802bb7a:	687b      	ldr	r3, [r7, #4]
 802bb7c:	681b      	ldr	r3, [r3, #0]
 802bb7e:	4a5f      	ldr	r2, [pc, #380]	; (802bcfc <HAL_DMA_Init+0x658>)
 802bb80:	4293      	cmp	r3, r2
 802bb82:	d072      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bb84:	687b      	ldr	r3, [r7, #4]
 802bb86:	681b      	ldr	r3, [r3, #0]
 802bb88:	4a5d      	ldr	r2, [pc, #372]	; (802bd00 <HAL_DMA_Init+0x65c>)
 802bb8a:	4293      	cmp	r3, r2
 802bb8c:	d06d      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bb8e:	687b      	ldr	r3, [r7, #4]
 802bb90:	681b      	ldr	r3, [r3, #0]
 802bb92:	4a5c      	ldr	r2, [pc, #368]	; (802bd04 <HAL_DMA_Init+0x660>)
 802bb94:	4293      	cmp	r3, r2
 802bb96:	d068      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bb98:	687b      	ldr	r3, [r7, #4]
 802bb9a:	681b      	ldr	r3, [r3, #0]
 802bb9c:	4a5a      	ldr	r2, [pc, #360]	; (802bd08 <HAL_DMA_Init+0x664>)
 802bb9e:	4293      	cmp	r3, r2
 802bba0:	d063      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bba2:	687b      	ldr	r3, [r7, #4]
 802bba4:	681b      	ldr	r3, [r3, #0]
 802bba6:	4a59      	ldr	r2, [pc, #356]	; (802bd0c <HAL_DMA_Init+0x668>)
 802bba8:	4293      	cmp	r3, r2
 802bbaa:	d05e      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bbac:	687b      	ldr	r3, [r7, #4]
 802bbae:	681b      	ldr	r3, [r3, #0]
 802bbb0:	4a57      	ldr	r2, [pc, #348]	; (802bd10 <HAL_DMA_Init+0x66c>)
 802bbb2:	4293      	cmp	r3, r2
 802bbb4:	d059      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bbb6:	687b      	ldr	r3, [r7, #4]
 802bbb8:	681b      	ldr	r3, [r3, #0]
 802bbba:	4a56      	ldr	r2, [pc, #344]	; (802bd14 <HAL_DMA_Init+0x670>)
 802bbbc:	4293      	cmp	r3, r2
 802bbbe:	d054      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bbc0:	687b      	ldr	r3, [r7, #4]
 802bbc2:	681b      	ldr	r3, [r3, #0]
 802bbc4:	4a54      	ldr	r2, [pc, #336]	; (802bd18 <HAL_DMA_Init+0x674>)
 802bbc6:	4293      	cmp	r3, r2
 802bbc8:	d04f      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bbca:	687b      	ldr	r3, [r7, #4]
 802bbcc:	681b      	ldr	r3, [r3, #0]
 802bbce:	4a53      	ldr	r2, [pc, #332]	; (802bd1c <HAL_DMA_Init+0x678>)
 802bbd0:	4293      	cmp	r3, r2
 802bbd2:	d04a      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bbd4:	687b      	ldr	r3, [r7, #4]
 802bbd6:	681b      	ldr	r3, [r3, #0]
 802bbd8:	4a51      	ldr	r2, [pc, #324]	; (802bd20 <HAL_DMA_Init+0x67c>)
 802bbda:	4293      	cmp	r3, r2
 802bbdc:	d045      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bbde:	687b      	ldr	r3, [r7, #4]
 802bbe0:	681b      	ldr	r3, [r3, #0]
 802bbe2:	4a50      	ldr	r2, [pc, #320]	; (802bd24 <HAL_DMA_Init+0x680>)
 802bbe4:	4293      	cmp	r3, r2
 802bbe6:	d040      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bbe8:	687b      	ldr	r3, [r7, #4]
 802bbea:	681b      	ldr	r3, [r3, #0]
 802bbec:	4a4e      	ldr	r2, [pc, #312]	; (802bd28 <HAL_DMA_Init+0x684>)
 802bbee:	4293      	cmp	r3, r2
 802bbf0:	d03b      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bbf2:	687b      	ldr	r3, [r7, #4]
 802bbf4:	681b      	ldr	r3, [r3, #0]
 802bbf6:	4a4d      	ldr	r2, [pc, #308]	; (802bd2c <HAL_DMA_Init+0x688>)
 802bbf8:	4293      	cmp	r3, r2
 802bbfa:	d036      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bbfc:	687b      	ldr	r3, [r7, #4]
 802bbfe:	681b      	ldr	r3, [r3, #0]
 802bc00:	4a4b      	ldr	r2, [pc, #300]	; (802bd30 <HAL_DMA_Init+0x68c>)
 802bc02:	4293      	cmp	r3, r2
 802bc04:	d031      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bc06:	687b      	ldr	r3, [r7, #4]
 802bc08:	681b      	ldr	r3, [r3, #0]
 802bc0a:	4a4a      	ldr	r2, [pc, #296]	; (802bd34 <HAL_DMA_Init+0x690>)
 802bc0c:	4293      	cmp	r3, r2
 802bc0e:	d02c      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bc10:	687b      	ldr	r3, [r7, #4]
 802bc12:	681b      	ldr	r3, [r3, #0]
 802bc14:	4a48      	ldr	r2, [pc, #288]	; (802bd38 <HAL_DMA_Init+0x694>)
 802bc16:	4293      	cmp	r3, r2
 802bc18:	d027      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bc1a:	687b      	ldr	r3, [r7, #4]
 802bc1c:	681b      	ldr	r3, [r3, #0]
 802bc1e:	4a47      	ldr	r2, [pc, #284]	; (802bd3c <HAL_DMA_Init+0x698>)
 802bc20:	4293      	cmp	r3, r2
 802bc22:	d022      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bc24:	687b      	ldr	r3, [r7, #4]
 802bc26:	681b      	ldr	r3, [r3, #0]
 802bc28:	4a45      	ldr	r2, [pc, #276]	; (802bd40 <HAL_DMA_Init+0x69c>)
 802bc2a:	4293      	cmp	r3, r2
 802bc2c:	d01d      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bc2e:	687b      	ldr	r3, [r7, #4]
 802bc30:	681b      	ldr	r3, [r3, #0]
 802bc32:	4a44      	ldr	r2, [pc, #272]	; (802bd44 <HAL_DMA_Init+0x6a0>)
 802bc34:	4293      	cmp	r3, r2
 802bc36:	d018      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bc38:	687b      	ldr	r3, [r7, #4]
 802bc3a:	681b      	ldr	r3, [r3, #0]
 802bc3c:	4a42      	ldr	r2, [pc, #264]	; (802bd48 <HAL_DMA_Init+0x6a4>)
 802bc3e:	4293      	cmp	r3, r2
 802bc40:	d013      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bc42:	687b      	ldr	r3, [r7, #4]
 802bc44:	681b      	ldr	r3, [r3, #0]
 802bc46:	4a41      	ldr	r2, [pc, #260]	; (802bd4c <HAL_DMA_Init+0x6a8>)
 802bc48:	4293      	cmp	r3, r2
 802bc4a:	d00e      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bc4c:	687b      	ldr	r3, [r7, #4]
 802bc4e:	681b      	ldr	r3, [r3, #0]
 802bc50:	4a3f      	ldr	r2, [pc, #252]	; (802bd50 <HAL_DMA_Init+0x6ac>)
 802bc52:	4293      	cmp	r3, r2
 802bc54:	d009      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bc56:	687b      	ldr	r3, [r7, #4]
 802bc58:	681b      	ldr	r3, [r3, #0]
 802bc5a:	4a3e      	ldr	r2, [pc, #248]	; (802bd54 <HAL_DMA_Init+0x6b0>)
 802bc5c:	4293      	cmp	r3, r2
 802bc5e:	d004      	beq.n	802bc6a <HAL_DMA_Init+0x5c6>
 802bc60:	687b      	ldr	r3, [r7, #4]
 802bc62:	681b      	ldr	r3, [r3, #0]
 802bc64:	4a3c      	ldr	r2, [pc, #240]	; (802bd58 <HAL_DMA_Init+0x6b4>)
 802bc66:	4293      	cmp	r3, r2
 802bc68:	d101      	bne.n	802bc6e <HAL_DMA_Init+0x5ca>
 802bc6a:	2301      	movs	r3, #1
 802bc6c:	e000      	b.n	802bc70 <HAL_DMA_Init+0x5cc>
 802bc6e:	2300      	movs	r3, #0
 802bc70:	2b00      	cmp	r3, #0
 802bc72:	d032      	beq.n	802bcda <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 802bc74:	6878      	ldr	r0, [r7, #4]
 802bc76:	f002 fa5d 	bl	802e134 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 802bc7a:	687b      	ldr	r3, [r7, #4]
 802bc7c:	689b      	ldr	r3, [r3, #8]
 802bc7e:	2b80      	cmp	r3, #128	; 0x80
 802bc80:	d102      	bne.n	802bc88 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 802bc82:	687b      	ldr	r3, [r7, #4]
 802bc84:	2200      	movs	r2, #0
 802bc86:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 802bc88:	687b      	ldr	r3, [r7, #4]
 802bc8a:	685a      	ldr	r2, [r3, #4]
 802bc8c:	687b      	ldr	r3, [r7, #4]
 802bc8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bc90:	b2d2      	uxtb	r2, r2
 802bc92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802bc94:	687b      	ldr	r3, [r7, #4]
 802bc96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802bc98:	687a      	ldr	r2, [r7, #4]
 802bc9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802bc9c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 802bc9e:	687b      	ldr	r3, [r7, #4]
 802bca0:	685b      	ldr	r3, [r3, #4]
 802bca2:	2b00      	cmp	r3, #0
 802bca4:	d010      	beq.n	802bcc8 <HAL_DMA_Init+0x624>
 802bca6:	687b      	ldr	r3, [r7, #4]
 802bca8:	685b      	ldr	r3, [r3, #4]
 802bcaa:	2b08      	cmp	r3, #8
 802bcac:	d80c      	bhi.n	802bcc8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 802bcae:	6878      	ldr	r0, [r7, #4]
 802bcb0:	f002 fada 	bl	802e268 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 802bcb4:	687b      	ldr	r3, [r7, #4]
 802bcb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802bcb8:	2200      	movs	r2, #0
 802bcba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802bcbc:	687b      	ldr	r3, [r7, #4]
 802bcbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802bcc0:	687a      	ldr	r2, [r7, #4]
 802bcc2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802bcc4:	605a      	str	r2, [r3, #4]
 802bcc6:	e008      	b.n	802bcda <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 802bcc8:	687b      	ldr	r3, [r7, #4]
 802bcca:	2200      	movs	r2, #0
 802bccc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 802bcce:	687b      	ldr	r3, [r7, #4]
 802bcd0:	2200      	movs	r2, #0
 802bcd2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 802bcd4:	687b      	ldr	r3, [r7, #4]
 802bcd6:	2200      	movs	r2, #0
 802bcd8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802bcda:	687b      	ldr	r3, [r7, #4]
 802bcdc:	2200      	movs	r2, #0
 802bcde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802bce0:	687b      	ldr	r3, [r7, #4]
 802bce2:	2201      	movs	r2, #1
 802bce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802bce8:	2300      	movs	r3, #0
}
 802bcea:	4618      	mov	r0, r3
 802bcec:	3718      	adds	r7, #24
 802bcee:	46bd      	mov	sp, r7
 802bcf0:	bd80      	pop	{r7, pc}
 802bcf2:	bf00      	nop
 802bcf4:	a7fdabf8 	.word	0xa7fdabf8
 802bcf8:	cccccccd 	.word	0xcccccccd
 802bcfc:	40020010 	.word	0x40020010
 802bd00:	40020028 	.word	0x40020028
 802bd04:	40020040 	.word	0x40020040
 802bd08:	40020058 	.word	0x40020058
 802bd0c:	40020070 	.word	0x40020070
 802bd10:	40020088 	.word	0x40020088
 802bd14:	400200a0 	.word	0x400200a0
 802bd18:	400200b8 	.word	0x400200b8
 802bd1c:	40020410 	.word	0x40020410
 802bd20:	40020428 	.word	0x40020428
 802bd24:	40020440 	.word	0x40020440
 802bd28:	40020458 	.word	0x40020458
 802bd2c:	40020470 	.word	0x40020470
 802bd30:	40020488 	.word	0x40020488
 802bd34:	400204a0 	.word	0x400204a0
 802bd38:	400204b8 	.word	0x400204b8
 802bd3c:	58025408 	.word	0x58025408
 802bd40:	5802541c 	.word	0x5802541c
 802bd44:	58025430 	.word	0x58025430
 802bd48:	58025444 	.word	0x58025444
 802bd4c:	58025458 	.word	0x58025458
 802bd50:	5802546c 	.word	0x5802546c
 802bd54:	58025480 	.word	0x58025480
 802bd58:	58025494 	.word	0x58025494

0802bd5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802bd5c:	b580      	push	{r7, lr}
 802bd5e:	b086      	sub	sp, #24
 802bd60:	af00      	add	r7, sp, #0
 802bd62:	60f8      	str	r0, [r7, #12]
 802bd64:	60b9      	str	r1, [r7, #8]
 802bd66:	607a      	str	r2, [r7, #4]
 802bd68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802bd6a:	2300      	movs	r3, #0
 802bd6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802bd6e:	68fb      	ldr	r3, [r7, #12]
 802bd70:	2b00      	cmp	r3, #0
 802bd72:	d101      	bne.n	802bd78 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 802bd74:	2301      	movs	r3, #1
 802bd76:	e226      	b.n	802c1c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 802bd78:	68fb      	ldr	r3, [r7, #12]
 802bd7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802bd7e:	2b01      	cmp	r3, #1
 802bd80:	d101      	bne.n	802bd86 <HAL_DMA_Start_IT+0x2a>
 802bd82:	2302      	movs	r3, #2
 802bd84:	e21f      	b.n	802c1c6 <HAL_DMA_Start_IT+0x46a>
 802bd86:	68fb      	ldr	r3, [r7, #12]
 802bd88:	2201      	movs	r2, #1
 802bd8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 802bd8e:	68fb      	ldr	r3, [r7, #12]
 802bd90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802bd94:	b2db      	uxtb	r3, r3
 802bd96:	2b01      	cmp	r3, #1
 802bd98:	f040 820a 	bne.w	802c1b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802bd9c:	68fb      	ldr	r3, [r7, #12]
 802bd9e:	2202      	movs	r2, #2
 802bda0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802bda4:	68fb      	ldr	r3, [r7, #12]
 802bda6:	2200      	movs	r2, #0
 802bda8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802bdaa:	68fb      	ldr	r3, [r7, #12]
 802bdac:	681b      	ldr	r3, [r3, #0]
 802bdae:	4a68      	ldr	r2, [pc, #416]	; (802bf50 <HAL_DMA_Start_IT+0x1f4>)
 802bdb0:	4293      	cmp	r3, r2
 802bdb2:	d04a      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802bdb4:	68fb      	ldr	r3, [r7, #12]
 802bdb6:	681b      	ldr	r3, [r3, #0]
 802bdb8:	4a66      	ldr	r2, [pc, #408]	; (802bf54 <HAL_DMA_Start_IT+0x1f8>)
 802bdba:	4293      	cmp	r3, r2
 802bdbc:	d045      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802bdbe:	68fb      	ldr	r3, [r7, #12]
 802bdc0:	681b      	ldr	r3, [r3, #0]
 802bdc2:	4a65      	ldr	r2, [pc, #404]	; (802bf58 <HAL_DMA_Start_IT+0x1fc>)
 802bdc4:	4293      	cmp	r3, r2
 802bdc6:	d040      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802bdc8:	68fb      	ldr	r3, [r7, #12]
 802bdca:	681b      	ldr	r3, [r3, #0]
 802bdcc:	4a63      	ldr	r2, [pc, #396]	; (802bf5c <HAL_DMA_Start_IT+0x200>)
 802bdce:	4293      	cmp	r3, r2
 802bdd0:	d03b      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802bdd2:	68fb      	ldr	r3, [r7, #12]
 802bdd4:	681b      	ldr	r3, [r3, #0]
 802bdd6:	4a62      	ldr	r2, [pc, #392]	; (802bf60 <HAL_DMA_Start_IT+0x204>)
 802bdd8:	4293      	cmp	r3, r2
 802bdda:	d036      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802bddc:	68fb      	ldr	r3, [r7, #12]
 802bdde:	681b      	ldr	r3, [r3, #0]
 802bde0:	4a60      	ldr	r2, [pc, #384]	; (802bf64 <HAL_DMA_Start_IT+0x208>)
 802bde2:	4293      	cmp	r3, r2
 802bde4:	d031      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802bde6:	68fb      	ldr	r3, [r7, #12]
 802bde8:	681b      	ldr	r3, [r3, #0]
 802bdea:	4a5f      	ldr	r2, [pc, #380]	; (802bf68 <HAL_DMA_Start_IT+0x20c>)
 802bdec:	4293      	cmp	r3, r2
 802bdee:	d02c      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802bdf0:	68fb      	ldr	r3, [r7, #12]
 802bdf2:	681b      	ldr	r3, [r3, #0]
 802bdf4:	4a5d      	ldr	r2, [pc, #372]	; (802bf6c <HAL_DMA_Start_IT+0x210>)
 802bdf6:	4293      	cmp	r3, r2
 802bdf8:	d027      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802bdfa:	68fb      	ldr	r3, [r7, #12]
 802bdfc:	681b      	ldr	r3, [r3, #0]
 802bdfe:	4a5c      	ldr	r2, [pc, #368]	; (802bf70 <HAL_DMA_Start_IT+0x214>)
 802be00:	4293      	cmp	r3, r2
 802be02:	d022      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802be04:	68fb      	ldr	r3, [r7, #12]
 802be06:	681b      	ldr	r3, [r3, #0]
 802be08:	4a5a      	ldr	r2, [pc, #360]	; (802bf74 <HAL_DMA_Start_IT+0x218>)
 802be0a:	4293      	cmp	r3, r2
 802be0c:	d01d      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802be0e:	68fb      	ldr	r3, [r7, #12]
 802be10:	681b      	ldr	r3, [r3, #0]
 802be12:	4a59      	ldr	r2, [pc, #356]	; (802bf78 <HAL_DMA_Start_IT+0x21c>)
 802be14:	4293      	cmp	r3, r2
 802be16:	d018      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802be18:	68fb      	ldr	r3, [r7, #12]
 802be1a:	681b      	ldr	r3, [r3, #0]
 802be1c:	4a57      	ldr	r2, [pc, #348]	; (802bf7c <HAL_DMA_Start_IT+0x220>)
 802be1e:	4293      	cmp	r3, r2
 802be20:	d013      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802be22:	68fb      	ldr	r3, [r7, #12]
 802be24:	681b      	ldr	r3, [r3, #0]
 802be26:	4a56      	ldr	r2, [pc, #344]	; (802bf80 <HAL_DMA_Start_IT+0x224>)
 802be28:	4293      	cmp	r3, r2
 802be2a:	d00e      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802be2c:	68fb      	ldr	r3, [r7, #12]
 802be2e:	681b      	ldr	r3, [r3, #0]
 802be30:	4a54      	ldr	r2, [pc, #336]	; (802bf84 <HAL_DMA_Start_IT+0x228>)
 802be32:	4293      	cmp	r3, r2
 802be34:	d009      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802be36:	68fb      	ldr	r3, [r7, #12]
 802be38:	681b      	ldr	r3, [r3, #0]
 802be3a:	4a53      	ldr	r2, [pc, #332]	; (802bf88 <HAL_DMA_Start_IT+0x22c>)
 802be3c:	4293      	cmp	r3, r2
 802be3e:	d004      	beq.n	802be4a <HAL_DMA_Start_IT+0xee>
 802be40:	68fb      	ldr	r3, [r7, #12]
 802be42:	681b      	ldr	r3, [r3, #0]
 802be44:	4a51      	ldr	r2, [pc, #324]	; (802bf8c <HAL_DMA_Start_IT+0x230>)
 802be46:	4293      	cmp	r3, r2
 802be48:	d108      	bne.n	802be5c <HAL_DMA_Start_IT+0x100>
 802be4a:	68fb      	ldr	r3, [r7, #12]
 802be4c:	681b      	ldr	r3, [r3, #0]
 802be4e:	681a      	ldr	r2, [r3, #0]
 802be50:	68fb      	ldr	r3, [r7, #12]
 802be52:	681b      	ldr	r3, [r3, #0]
 802be54:	f022 0201 	bic.w	r2, r2, #1
 802be58:	601a      	str	r2, [r3, #0]
 802be5a:	e007      	b.n	802be6c <HAL_DMA_Start_IT+0x110>
 802be5c:	68fb      	ldr	r3, [r7, #12]
 802be5e:	681b      	ldr	r3, [r3, #0]
 802be60:	681a      	ldr	r2, [r3, #0]
 802be62:	68fb      	ldr	r3, [r7, #12]
 802be64:	681b      	ldr	r3, [r3, #0]
 802be66:	f022 0201 	bic.w	r2, r2, #1
 802be6a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802be6c:	683b      	ldr	r3, [r7, #0]
 802be6e:	687a      	ldr	r2, [r7, #4]
 802be70:	68b9      	ldr	r1, [r7, #8]
 802be72:	68f8      	ldr	r0, [r7, #12]
 802be74:	f001 fe84 	bl	802db80 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802be78:	68fb      	ldr	r3, [r7, #12]
 802be7a:	681b      	ldr	r3, [r3, #0]
 802be7c:	4a34      	ldr	r2, [pc, #208]	; (802bf50 <HAL_DMA_Start_IT+0x1f4>)
 802be7e:	4293      	cmp	r3, r2
 802be80:	d04a      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802be82:	68fb      	ldr	r3, [r7, #12]
 802be84:	681b      	ldr	r3, [r3, #0]
 802be86:	4a33      	ldr	r2, [pc, #204]	; (802bf54 <HAL_DMA_Start_IT+0x1f8>)
 802be88:	4293      	cmp	r3, r2
 802be8a:	d045      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802be8c:	68fb      	ldr	r3, [r7, #12]
 802be8e:	681b      	ldr	r3, [r3, #0]
 802be90:	4a31      	ldr	r2, [pc, #196]	; (802bf58 <HAL_DMA_Start_IT+0x1fc>)
 802be92:	4293      	cmp	r3, r2
 802be94:	d040      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802be96:	68fb      	ldr	r3, [r7, #12]
 802be98:	681b      	ldr	r3, [r3, #0]
 802be9a:	4a30      	ldr	r2, [pc, #192]	; (802bf5c <HAL_DMA_Start_IT+0x200>)
 802be9c:	4293      	cmp	r3, r2
 802be9e:	d03b      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802bea0:	68fb      	ldr	r3, [r7, #12]
 802bea2:	681b      	ldr	r3, [r3, #0]
 802bea4:	4a2e      	ldr	r2, [pc, #184]	; (802bf60 <HAL_DMA_Start_IT+0x204>)
 802bea6:	4293      	cmp	r3, r2
 802bea8:	d036      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802beaa:	68fb      	ldr	r3, [r7, #12]
 802beac:	681b      	ldr	r3, [r3, #0]
 802beae:	4a2d      	ldr	r2, [pc, #180]	; (802bf64 <HAL_DMA_Start_IT+0x208>)
 802beb0:	4293      	cmp	r3, r2
 802beb2:	d031      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802beb4:	68fb      	ldr	r3, [r7, #12]
 802beb6:	681b      	ldr	r3, [r3, #0]
 802beb8:	4a2b      	ldr	r2, [pc, #172]	; (802bf68 <HAL_DMA_Start_IT+0x20c>)
 802beba:	4293      	cmp	r3, r2
 802bebc:	d02c      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802bebe:	68fb      	ldr	r3, [r7, #12]
 802bec0:	681b      	ldr	r3, [r3, #0]
 802bec2:	4a2a      	ldr	r2, [pc, #168]	; (802bf6c <HAL_DMA_Start_IT+0x210>)
 802bec4:	4293      	cmp	r3, r2
 802bec6:	d027      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802bec8:	68fb      	ldr	r3, [r7, #12]
 802beca:	681b      	ldr	r3, [r3, #0]
 802becc:	4a28      	ldr	r2, [pc, #160]	; (802bf70 <HAL_DMA_Start_IT+0x214>)
 802bece:	4293      	cmp	r3, r2
 802bed0:	d022      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802bed2:	68fb      	ldr	r3, [r7, #12]
 802bed4:	681b      	ldr	r3, [r3, #0]
 802bed6:	4a27      	ldr	r2, [pc, #156]	; (802bf74 <HAL_DMA_Start_IT+0x218>)
 802bed8:	4293      	cmp	r3, r2
 802beda:	d01d      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802bedc:	68fb      	ldr	r3, [r7, #12]
 802bede:	681b      	ldr	r3, [r3, #0]
 802bee0:	4a25      	ldr	r2, [pc, #148]	; (802bf78 <HAL_DMA_Start_IT+0x21c>)
 802bee2:	4293      	cmp	r3, r2
 802bee4:	d018      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802bee6:	68fb      	ldr	r3, [r7, #12]
 802bee8:	681b      	ldr	r3, [r3, #0]
 802beea:	4a24      	ldr	r2, [pc, #144]	; (802bf7c <HAL_DMA_Start_IT+0x220>)
 802beec:	4293      	cmp	r3, r2
 802beee:	d013      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802bef0:	68fb      	ldr	r3, [r7, #12]
 802bef2:	681b      	ldr	r3, [r3, #0]
 802bef4:	4a22      	ldr	r2, [pc, #136]	; (802bf80 <HAL_DMA_Start_IT+0x224>)
 802bef6:	4293      	cmp	r3, r2
 802bef8:	d00e      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802befa:	68fb      	ldr	r3, [r7, #12]
 802befc:	681b      	ldr	r3, [r3, #0]
 802befe:	4a21      	ldr	r2, [pc, #132]	; (802bf84 <HAL_DMA_Start_IT+0x228>)
 802bf00:	4293      	cmp	r3, r2
 802bf02:	d009      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802bf04:	68fb      	ldr	r3, [r7, #12]
 802bf06:	681b      	ldr	r3, [r3, #0]
 802bf08:	4a1f      	ldr	r2, [pc, #124]	; (802bf88 <HAL_DMA_Start_IT+0x22c>)
 802bf0a:	4293      	cmp	r3, r2
 802bf0c:	d004      	beq.n	802bf18 <HAL_DMA_Start_IT+0x1bc>
 802bf0e:	68fb      	ldr	r3, [r7, #12]
 802bf10:	681b      	ldr	r3, [r3, #0]
 802bf12:	4a1e      	ldr	r2, [pc, #120]	; (802bf8c <HAL_DMA_Start_IT+0x230>)
 802bf14:	4293      	cmp	r3, r2
 802bf16:	d101      	bne.n	802bf1c <HAL_DMA_Start_IT+0x1c0>
 802bf18:	2301      	movs	r3, #1
 802bf1a:	e000      	b.n	802bf1e <HAL_DMA_Start_IT+0x1c2>
 802bf1c:	2300      	movs	r3, #0
 802bf1e:	2b00      	cmp	r3, #0
 802bf20:	d036      	beq.n	802bf90 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 802bf22:	68fb      	ldr	r3, [r7, #12]
 802bf24:	681b      	ldr	r3, [r3, #0]
 802bf26:	681b      	ldr	r3, [r3, #0]
 802bf28:	f023 021e 	bic.w	r2, r3, #30
 802bf2c:	68fb      	ldr	r3, [r7, #12]
 802bf2e:	681b      	ldr	r3, [r3, #0]
 802bf30:	f042 0216 	orr.w	r2, r2, #22
 802bf34:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802bf36:	68fb      	ldr	r3, [r7, #12]
 802bf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf3a:	2b00      	cmp	r3, #0
 802bf3c:	d03e      	beq.n	802bfbc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 802bf3e:	68fb      	ldr	r3, [r7, #12]
 802bf40:	681b      	ldr	r3, [r3, #0]
 802bf42:	681a      	ldr	r2, [r3, #0]
 802bf44:	68fb      	ldr	r3, [r7, #12]
 802bf46:	681b      	ldr	r3, [r3, #0]
 802bf48:	f042 0208 	orr.w	r2, r2, #8
 802bf4c:	601a      	str	r2, [r3, #0]
 802bf4e:	e035      	b.n	802bfbc <HAL_DMA_Start_IT+0x260>
 802bf50:	40020010 	.word	0x40020010
 802bf54:	40020028 	.word	0x40020028
 802bf58:	40020040 	.word	0x40020040
 802bf5c:	40020058 	.word	0x40020058
 802bf60:	40020070 	.word	0x40020070
 802bf64:	40020088 	.word	0x40020088
 802bf68:	400200a0 	.word	0x400200a0
 802bf6c:	400200b8 	.word	0x400200b8
 802bf70:	40020410 	.word	0x40020410
 802bf74:	40020428 	.word	0x40020428
 802bf78:	40020440 	.word	0x40020440
 802bf7c:	40020458 	.word	0x40020458
 802bf80:	40020470 	.word	0x40020470
 802bf84:	40020488 	.word	0x40020488
 802bf88:	400204a0 	.word	0x400204a0
 802bf8c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 802bf90:	68fb      	ldr	r3, [r7, #12]
 802bf92:	681b      	ldr	r3, [r3, #0]
 802bf94:	681b      	ldr	r3, [r3, #0]
 802bf96:	f023 020e 	bic.w	r2, r3, #14
 802bf9a:	68fb      	ldr	r3, [r7, #12]
 802bf9c:	681b      	ldr	r3, [r3, #0]
 802bf9e:	f042 020a 	orr.w	r2, r2, #10
 802bfa2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802bfa4:	68fb      	ldr	r3, [r7, #12]
 802bfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bfa8:	2b00      	cmp	r3, #0
 802bfaa:	d007      	beq.n	802bfbc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 802bfac:	68fb      	ldr	r3, [r7, #12]
 802bfae:	681b      	ldr	r3, [r3, #0]
 802bfb0:	681a      	ldr	r2, [r3, #0]
 802bfb2:	68fb      	ldr	r3, [r7, #12]
 802bfb4:	681b      	ldr	r3, [r3, #0]
 802bfb6:	f042 0204 	orr.w	r2, r2, #4
 802bfba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802bfbc:	68fb      	ldr	r3, [r7, #12]
 802bfbe:	681b      	ldr	r3, [r3, #0]
 802bfc0:	4a83      	ldr	r2, [pc, #524]	; (802c1d0 <HAL_DMA_Start_IT+0x474>)
 802bfc2:	4293      	cmp	r3, r2
 802bfc4:	d072      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802bfc6:	68fb      	ldr	r3, [r7, #12]
 802bfc8:	681b      	ldr	r3, [r3, #0]
 802bfca:	4a82      	ldr	r2, [pc, #520]	; (802c1d4 <HAL_DMA_Start_IT+0x478>)
 802bfcc:	4293      	cmp	r3, r2
 802bfce:	d06d      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802bfd0:	68fb      	ldr	r3, [r7, #12]
 802bfd2:	681b      	ldr	r3, [r3, #0]
 802bfd4:	4a80      	ldr	r2, [pc, #512]	; (802c1d8 <HAL_DMA_Start_IT+0x47c>)
 802bfd6:	4293      	cmp	r3, r2
 802bfd8:	d068      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802bfda:	68fb      	ldr	r3, [r7, #12]
 802bfdc:	681b      	ldr	r3, [r3, #0]
 802bfde:	4a7f      	ldr	r2, [pc, #508]	; (802c1dc <HAL_DMA_Start_IT+0x480>)
 802bfe0:	4293      	cmp	r3, r2
 802bfe2:	d063      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802bfe4:	68fb      	ldr	r3, [r7, #12]
 802bfe6:	681b      	ldr	r3, [r3, #0]
 802bfe8:	4a7d      	ldr	r2, [pc, #500]	; (802c1e0 <HAL_DMA_Start_IT+0x484>)
 802bfea:	4293      	cmp	r3, r2
 802bfec:	d05e      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802bfee:	68fb      	ldr	r3, [r7, #12]
 802bff0:	681b      	ldr	r3, [r3, #0]
 802bff2:	4a7c      	ldr	r2, [pc, #496]	; (802c1e4 <HAL_DMA_Start_IT+0x488>)
 802bff4:	4293      	cmp	r3, r2
 802bff6:	d059      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802bff8:	68fb      	ldr	r3, [r7, #12]
 802bffa:	681b      	ldr	r3, [r3, #0]
 802bffc:	4a7a      	ldr	r2, [pc, #488]	; (802c1e8 <HAL_DMA_Start_IT+0x48c>)
 802bffe:	4293      	cmp	r3, r2
 802c000:	d054      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c002:	68fb      	ldr	r3, [r7, #12]
 802c004:	681b      	ldr	r3, [r3, #0]
 802c006:	4a79      	ldr	r2, [pc, #484]	; (802c1ec <HAL_DMA_Start_IT+0x490>)
 802c008:	4293      	cmp	r3, r2
 802c00a:	d04f      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c00c:	68fb      	ldr	r3, [r7, #12]
 802c00e:	681b      	ldr	r3, [r3, #0]
 802c010:	4a77      	ldr	r2, [pc, #476]	; (802c1f0 <HAL_DMA_Start_IT+0x494>)
 802c012:	4293      	cmp	r3, r2
 802c014:	d04a      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c016:	68fb      	ldr	r3, [r7, #12]
 802c018:	681b      	ldr	r3, [r3, #0]
 802c01a:	4a76      	ldr	r2, [pc, #472]	; (802c1f4 <HAL_DMA_Start_IT+0x498>)
 802c01c:	4293      	cmp	r3, r2
 802c01e:	d045      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c020:	68fb      	ldr	r3, [r7, #12]
 802c022:	681b      	ldr	r3, [r3, #0]
 802c024:	4a74      	ldr	r2, [pc, #464]	; (802c1f8 <HAL_DMA_Start_IT+0x49c>)
 802c026:	4293      	cmp	r3, r2
 802c028:	d040      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c02a:	68fb      	ldr	r3, [r7, #12]
 802c02c:	681b      	ldr	r3, [r3, #0]
 802c02e:	4a73      	ldr	r2, [pc, #460]	; (802c1fc <HAL_DMA_Start_IT+0x4a0>)
 802c030:	4293      	cmp	r3, r2
 802c032:	d03b      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c034:	68fb      	ldr	r3, [r7, #12]
 802c036:	681b      	ldr	r3, [r3, #0]
 802c038:	4a71      	ldr	r2, [pc, #452]	; (802c200 <HAL_DMA_Start_IT+0x4a4>)
 802c03a:	4293      	cmp	r3, r2
 802c03c:	d036      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c03e:	68fb      	ldr	r3, [r7, #12]
 802c040:	681b      	ldr	r3, [r3, #0]
 802c042:	4a70      	ldr	r2, [pc, #448]	; (802c204 <HAL_DMA_Start_IT+0x4a8>)
 802c044:	4293      	cmp	r3, r2
 802c046:	d031      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c048:	68fb      	ldr	r3, [r7, #12]
 802c04a:	681b      	ldr	r3, [r3, #0]
 802c04c:	4a6e      	ldr	r2, [pc, #440]	; (802c208 <HAL_DMA_Start_IT+0x4ac>)
 802c04e:	4293      	cmp	r3, r2
 802c050:	d02c      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c052:	68fb      	ldr	r3, [r7, #12]
 802c054:	681b      	ldr	r3, [r3, #0]
 802c056:	4a6d      	ldr	r2, [pc, #436]	; (802c20c <HAL_DMA_Start_IT+0x4b0>)
 802c058:	4293      	cmp	r3, r2
 802c05a:	d027      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c05c:	68fb      	ldr	r3, [r7, #12]
 802c05e:	681b      	ldr	r3, [r3, #0]
 802c060:	4a6b      	ldr	r2, [pc, #428]	; (802c210 <HAL_DMA_Start_IT+0x4b4>)
 802c062:	4293      	cmp	r3, r2
 802c064:	d022      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c066:	68fb      	ldr	r3, [r7, #12]
 802c068:	681b      	ldr	r3, [r3, #0]
 802c06a:	4a6a      	ldr	r2, [pc, #424]	; (802c214 <HAL_DMA_Start_IT+0x4b8>)
 802c06c:	4293      	cmp	r3, r2
 802c06e:	d01d      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c070:	68fb      	ldr	r3, [r7, #12]
 802c072:	681b      	ldr	r3, [r3, #0]
 802c074:	4a68      	ldr	r2, [pc, #416]	; (802c218 <HAL_DMA_Start_IT+0x4bc>)
 802c076:	4293      	cmp	r3, r2
 802c078:	d018      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c07a:	68fb      	ldr	r3, [r7, #12]
 802c07c:	681b      	ldr	r3, [r3, #0]
 802c07e:	4a67      	ldr	r2, [pc, #412]	; (802c21c <HAL_DMA_Start_IT+0x4c0>)
 802c080:	4293      	cmp	r3, r2
 802c082:	d013      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c084:	68fb      	ldr	r3, [r7, #12]
 802c086:	681b      	ldr	r3, [r3, #0]
 802c088:	4a65      	ldr	r2, [pc, #404]	; (802c220 <HAL_DMA_Start_IT+0x4c4>)
 802c08a:	4293      	cmp	r3, r2
 802c08c:	d00e      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c08e:	68fb      	ldr	r3, [r7, #12]
 802c090:	681b      	ldr	r3, [r3, #0]
 802c092:	4a64      	ldr	r2, [pc, #400]	; (802c224 <HAL_DMA_Start_IT+0x4c8>)
 802c094:	4293      	cmp	r3, r2
 802c096:	d009      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c098:	68fb      	ldr	r3, [r7, #12]
 802c09a:	681b      	ldr	r3, [r3, #0]
 802c09c:	4a62      	ldr	r2, [pc, #392]	; (802c228 <HAL_DMA_Start_IT+0x4cc>)
 802c09e:	4293      	cmp	r3, r2
 802c0a0:	d004      	beq.n	802c0ac <HAL_DMA_Start_IT+0x350>
 802c0a2:	68fb      	ldr	r3, [r7, #12]
 802c0a4:	681b      	ldr	r3, [r3, #0]
 802c0a6:	4a61      	ldr	r2, [pc, #388]	; (802c22c <HAL_DMA_Start_IT+0x4d0>)
 802c0a8:	4293      	cmp	r3, r2
 802c0aa:	d101      	bne.n	802c0b0 <HAL_DMA_Start_IT+0x354>
 802c0ac:	2301      	movs	r3, #1
 802c0ae:	e000      	b.n	802c0b2 <HAL_DMA_Start_IT+0x356>
 802c0b0:	2300      	movs	r3, #0
 802c0b2:	2b00      	cmp	r3, #0
 802c0b4:	d01a      	beq.n	802c0ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 802c0b6:	68fb      	ldr	r3, [r7, #12]
 802c0b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c0ba:	681b      	ldr	r3, [r3, #0]
 802c0bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802c0c0:	2b00      	cmp	r3, #0
 802c0c2:	d007      	beq.n	802c0d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 802c0c4:	68fb      	ldr	r3, [r7, #12]
 802c0c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c0c8:	681a      	ldr	r2, [r3, #0]
 802c0ca:	68fb      	ldr	r3, [r7, #12]
 802c0cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c0ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802c0d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 802c0d4:	68fb      	ldr	r3, [r7, #12]
 802c0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c0d8:	2b00      	cmp	r3, #0
 802c0da:	d007      	beq.n	802c0ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 802c0dc:	68fb      	ldr	r3, [r7, #12]
 802c0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c0e0:	681a      	ldr	r2, [r3, #0]
 802c0e2:	68fb      	ldr	r3, [r7, #12]
 802c0e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c0e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802c0ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802c0ec:	68fb      	ldr	r3, [r7, #12]
 802c0ee:	681b      	ldr	r3, [r3, #0]
 802c0f0:	4a37      	ldr	r2, [pc, #220]	; (802c1d0 <HAL_DMA_Start_IT+0x474>)
 802c0f2:	4293      	cmp	r3, r2
 802c0f4:	d04a      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c0f6:	68fb      	ldr	r3, [r7, #12]
 802c0f8:	681b      	ldr	r3, [r3, #0]
 802c0fa:	4a36      	ldr	r2, [pc, #216]	; (802c1d4 <HAL_DMA_Start_IT+0x478>)
 802c0fc:	4293      	cmp	r3, r2
 802c0fe:	d045      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c100:	68fb      	ldr	r3, [r7, #12]
 802c102:	681b      	ldr	r3, [r3, #0]
 802c104:	4a34      	ldr	r2, [pc, #208]	; (802c1d8 <HAL_DMA_Start_IT+0x47c>)
 802c106:	4293      	cmp	r3, r2
 802c108:	d040      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c10a:	68fb      	ldr	r3, [r7, #12]
 802c10c:	681b      	ldr	r3, [r3, #0]
 802c10e:	4a33      	ldr	r2, [pc, #204]	; (802c1dc <HAL_DMA_Start_IT+0x480>)
 802c110:	4293      	cmp	r3, r2
 802c112:	d03b      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c114:	68fb      	ldr	r3, [r7, #12]
 802c116:	681b      	ldr	r3, [r3, #0]
 802c118:	4a31      	ldr	r2, [pc, #196]	; (802c1e0 <HAL_DMA_Start_IT+0x484>)
 802c11a:	4293      	cmp	r3, r2
 802c11c:	d036      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c11e:	68fb      	ldr	r3, [r7, #12]
 802c120:	681b      	ldr	r3, [r3, #0]
 802c122:	4a30      	ldr	r2, [pc, #192]	; (802c1e4 <HAL_DMA_Start_IT+0x488>)
 802c124:	4293      	cmp	r3, r2
 802c126:	d031      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c128:	68fb      	ldr	r3, [r7, #12]
 802c12a:	681b      	ldr	r3, [r3, #0]
 802c12c:	4a2e      	ldr	r2, [pc, #184]	; (802c1e8 <HAL_DMA_Start_IT+0x48c>)
 802c12e:	4293      	cmp	r3, r2
 802c130:	d02c      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c132:	68fb      	ldr	r3, [r7, #12]
 802c134:	681b      	ldr	r3, [r3, #0]
 802c136:	4a2d      	ldr	r2, [pc, #180]	; (802c1ec <HAL_DMA_Start_IT+0x490>)
 802c138:	4293      	cmp	r3, r2
 802c13a:	d027      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c13c:	68fb      	ldr	r3, [r7, #12]
 802c13e:	681b      	ldr	r3, [r3, #0]
 802c140:	4a2b      	ldr	r2, [pc, #172]	; (802c1f0 <HAL_DMA_Start_IT+0x494>)
 802c142:	4293      	cmp	r3, r2
 802c144:	d022      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c146:	68fb      	ldr	r3, [r7, #12]
 802c148:	681b      	ldr	r3, [r3, #0]
 802c14a:	4a2a      	ldr	r2, [pc, #168]	; (802c1f4 <HAL_DMA_Start_IT+0x498>)
 802c14c:	4293      	cmp	r3, r2
 802c14e:	d01d      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c150:	68fb      	ldr	r3, [r7, #12]
 802c152:	681b      	ldr	r3, [r3, #0]
 802c154:	4a28      	ldr	r2, [pc, #160]	; (802c1f8 <HAL_DMA_Start_IT+0x49c>)
 802c156:	4293      	cmp	r3, r2
 802c158:	d018      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c15a:	68fb      	ldr	r3, [r7, #12]
 802c15c:	681b      	ldr	r3, [r3, #0]
 802c15e:	4a27      	ldr	r2, [pc, #156]	; (802c1fc <HAL_DMA_Start_IT+0x4a0>)
 802c160:	4293      	cmp	r3, r2
 802c162:	d013      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c164:	68fb      	ldr	r3, [r7, #12]
 802c166:	681b      	ldr	r3, [r3, #0]
 802c168:	4a25      	ldr	r2, [pc, #148]	; (802c200 <HAL_DMA_Start_IT+0x4a4>)
 802c16a:	4293      	cmp	r3, r2
 802c16c:	d00e      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c16e:	68fb      	ldr	r3, [r7, #12]
 802c170:	681b      	ldr	r3, [r3, #0]
 802c172:	4a24      	ldr	r2, [pc, #144]	; (802c204 <HAL_DMA_Start_IT+0x4a8>)
 802c174:	4293      	cmp	r3, r2
 802c176:	d009      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c178:	68fb      	ldr	r3, [r7, #12]
 802c17a:	681b      	ldr	r3, [r3, #0]
 802c17c:	4a22      	ldr	r2, [pc, #136]	; (802c208 <HAL_DMA_Start_IT+0x4ac>)
 802c17e:	4293      	cmp	r3, r2
 802c180:	d004      	beq.n	802c18c <HAL_DMA_Start_IT+0x430>
 802c182:	68fb      	ldr	r3, [r7, #12]
 802c184:	681b      	ldr	r3, [r3, #0]
 802c186:	4a21      	ldr	r2, [pc, #132]	; (802c20c <HAL_DMA_Start_IT+0x4b0>)
 802c188:	4293      	cmp	r3, r2
 802c18a:	d108      	bne.n	802c19e <HAL_DMA_Start_IT+0x442>
 802c18c:	68fb      	ldr	r3, [r7, #12]
 802c18e:	681b      	ldr	r3, [r3, #0]
 802c190:	681a      	ldr	r2, [r3, #0]
 802c192:	68fb      	ldr	r3, [r7, #12]
 802c194:	681b      	ldr	r3, [r3, #0]
 802c196:	f042 0201 	orr.w	r2, r2, #1
 802c19a:	601a      	str	r2, [r3, #0]
 802c19c:	e012      	b.n	802c1c4 <HAL_DMA_Start_IT+0x468>
 802c19e:	68fb      	ldr	r3, [r7, #12]
 802c1a0:	681b      	ldr	r3, [r3, #0]
 802c1a2:	681a      	ldr	r2, [r3, #0]
 802c1a4:	68fb      	ldr	r3, [r7, #12]
 802c1a6:	681b      	ldr	r3, [r3, #0]
 802c1a8:	f042 0201 	orr.w	r2, r2, #1
 802c1ac:	601a      	str	r2, [r3, #0]
 802c1ae:	e009      	b.n	802c1c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 802c1b0:	68fb      	ldr	r3, [r7, #12]
 802c1b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802c1b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 802c1b8:	68fb      	ldr	r3, [r7, #12]
 802c1ba:	2200      	movs	r2, #0
 802c1bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 802c1c0:	2301      	movs	r3, #1
 802c1c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 802c1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 802c1c6:	4618      	mov	r0, r3
 802c1c8:	3718      	adds	r7, #24
 802c1ca:	46bd      	mov	sp, r7
 802c1cc:	bd80      	pop	{r7, pc}
 802c1ce:	bf00      	nop
 802c1d0:	40020010 	.word	0x40020010
 802c1d4:	40020028 	.word	0x40020028
 802c1d8:	40020040 	.word	0x40020040
 802c1dc:	40020058 	.word	0x40020058
 802c1e0:	40020070 	.word	0x40020070
 802c1e4:	40020088 	.word	0x40020088
 802c1e8:	400200a0 	.word	0x400200a0
 802c1ec:	400200b8 	.word	0x400200b8
 802c1f0:	40020410 	.word	0x40020410
 802c1f4:	40020428 	.word	0x40020428
 802c1f8:	40020440 	.word	0x40020440
 802c1fc:	40020458 	.word	0x40020458
 802c200:	40020470 	.word	0x40020470
 802c204:	40020488 	.word	0x40020488
 802c208:	400204a0 	.word	0x400204a0
 802c20c:	400204b8 	.word	0x400204b8
 802c210:	58025408 	.word	0x58025408
 802c214:	5802541c 	.word	0x5802541c
 802c218:	58025430 	.word	0x58025430
 802c21c:	58025444 	.word	0x58025444
 802c220:	58025458 	.word	0x58025458
 802c224:	5802546c 	.word	0x5802546c
 802c228:	58025480 	.word	0x58025480
 802c22c:	58025494 	.word	0x58025494

0802c230 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802c230:	b580      	push	{r7, lr}
 802c232:	b086      	sub	sp, #24
 802c234:	af00      	add	r7, sp, #0
 802c236:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 802c238:	f7fe fd38 	bl	802acac <HAL_GetTick>
 802c23c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802c23e:	687b      	ldr	r3, [r7, #4]
 802c240:	2b00      	cmp	r3, #0
 802c242:	d101      	bne.n	802c248 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 802c244:	2301      	movs	r3, #1
 802c246:	e2dc      	b.n	802c802 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802c248:	687b      	ldr	r3, [r7, #4]
 802c24a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802c24e:	b2db      	uxtb	r3, r3
 802c250:	2b02      	cmp	r3, #2
 802c252:	d008      	beq.n	802c266 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802c254:	687b      	ldr	r3, [r7, #4]
 802c256:	2280      	movs	r2, #128	; 0x80
 802c258:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802c25a:	687b      	ldr	r3, [r7, #4]
 802c25c:	2200      	movs	r2, #0
 802c25e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 802c262:	2301      	movs	r3, #1
 802c264:	e2cd      	b.n	802c802 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c266:	687b      	ldr	r3, [r7, #4]
 802c268:	681b      	ldr	r3, [r3, #0]
 802c26a:	4a76      	ldr	r2, [pc, #472]	; (802c444 <HAL_DMA_Abort+0x214>)
 802c26c:	4293      	cmp	r3, r2
 802c26e:	d04a      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c270:	687b      	ldr	r3, [r7, #4]
 802c272:	681b      	ldr	r3, [r3, #0]
 802c274:	4a74      	ldr	r2, [pc, #464]	; (802c448 <HAL_DMA_Abort+0x218>)
 802c276:	4293      	cmp	r3, r2
 802c278:	d045      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c27a:	687b      	ldr	r3, [r7, #4]
 802c27c:	681b      	ldr	r3, [r3, #0]
 802c27e:	4a73      	ldr	r2, [pc, #460]	; (802c44c <HAL_DMA_Abort+0x21c>)
 802c280:	4293      	cmp	r3, r2
 802c282:	d040      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c284:	687b      	ldr	r3, [r7, #4]
 802c286:	681b      	ldr	r3, [r3, #0]
 802c288:	4a71      	ldr	r2, [pc, #452]	; (802c450 <HAL_DMA_Abort+0x220>)
 802c28a:	4293      	cmp	r3, r2
 802c28c:	d03b      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c28e:	687b      	ldr	r3, [r7, #4]
 802c290:	681b      	ldr	r3, [r3, #0]
 802c292:	4a70      	ldr	r2, [pc, #448]	; (802c454 <HAL_DMA_Abort+0x224>)
 802c294:	4293      	cmp	r3, r2
 802c296:	d036      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c298:	687b      	ldr	r3, [r7, #4]
 802c29a:	681b      	ldr	r3, [r3, #0]
 802c29c:	4a6e      	ldr	r2, [pc, #440]	; (802c458 <HAL_DMA_Abort+0x228>)
 802c29e:	4293      	cmp	r3, r2
 802c2a0:	d031      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c2a2:	687b      	ldr	r3, [r7, #4]
 802c2a4:	681b      	ldr	r3, [r3, #0]
 802c2a6:	4a6d      	ldr	r2, [pc, #436]	; (802c45c <HAL_DMA_Abort+0x22c>)
 802c2a8:	4293      	cmp	r3, r2
 802c2aa:	d02c      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c2ac:	687b      	ldr	r3, [r7, #4]
 802c2ae:	681b      	ldr	r3, [r3, #0]
 802c2b0:	4a6b      	ldr	r2, [pc, #428]	; (802c460 <HAL_DMA_Abort+0x230>)
 802c2b2:	4293      	cmp	r3, r2
 802c2b4:	d027      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c2b6:	687b      	ldr	r3, [r7, #4]
 802c2b8:	681b      	ldr	r3, [r3, #0]
 802c2ba:	4a6a      	ldr	r2, [pc, #424]	; (802c464 <HAL_DMA_Abort+0x234>)
 802c2bc:	4293      	cmp	r3, r2
 802c2be:	d022      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c2c0:	687b      	ldr	r3, [r7, #4]
 802c2c2:	681b      	ldr	r3, [r3, #0]
 802c2c4:	4a68      	ldr	r2, [pc, #416]	; (802c468 <HAL_DMA_Abort+0x238>)
 802c2c6:	4293      	cmp	r3, r2
 802c2c8:	d01d      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c2ca:	687b      	ldr	r3, [r7, #4]
 802c2cc:	681b      	ldr	r3, [r3, #0]
 802c2ce:	4a67      	ldr	r2, [pc, #412]	; (802c46c <HAL_DMA_Abort+0x23c>)
 802c2d0:	4293      	cmp	r3, r2
 802c2d2:	d018      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c2d4:	687b      	ldr	r3, [r7, #4]
 802c2d6:	681b      	ldr	r3, [r3, #0]
 802c2d8:	4a65      	ldr	r2, [pc, #404]	; (802c470 <HAL_DMA_Abort+0x240>)
 802c2da:	4293      	cmp	r3, r2
 802c2dc:	d013      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c2de:	687b      	ldr	r3, [r7, #4]
 802c2e0:	681b      	ldr	r3, [r3, #0]
 802c2e2:	4a64      	ldr	r2, [pc, #400]	; (802c474 <HAL_DMA_Abort+0x244>)
 802c2e4:	4293      	cmp	r3, r2
 802c2e6:	d00e      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c2e8:	687b      	ldr	r3, [r7, #4]
 802c2ea:	681b      	ldr	r3, [r3, #0]
 802c2ec:	4a62      	ldr	r2, [pc, #392]	; (802c478 <HAL_DMA_Abort+0x248>)
 802c2ee:	4293      	cmp	r3, r2
 802c2f0:	d009      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c2f2:	687b      	ldr	r3, [r7, #4]
 802c2f4:	681b      	ldr	r3, [r3, #0]
 802c2f6:	4a61      	ldr	r2, [pc, #388]	; (802c47c <HAL_DMA_Abort+0x24c>)
 802c2f8:	4293      	cmp	r3, r2
 802c2fa:	d004      	beq.n	802c306 <HAL_DMA_Abort+0xd6>
 802c2fc:	687b      	ldr	r3, [r7, #4]
 802c2fe:	681b      	ldr	r3, [r3, #0]
 802c300:	4a5f      	ldr	r2, [pc, #380]	; (802c480 <HAL_DMA_Abort+0x250>)
 802c302:	4293      	cmp	r3, r2
 802c304:	d101      	bne.n	802c30a <HAL_DMA_Abort+0xda>
 802c306:	2301      	movs	r3, #1
 802c308:	e000      	b.n	802c30c <HAL_DMA_Abort+0xdc>
 802c30a:	2300      	movs	r3, #0
 802c30c:	2b00      	cmp	r3, #0
 802c30e:	d013      	beq.n	802c338 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 802c310:	687b      	ldr	r3, [r7, #4]
 802c312:	681b      	ldr	r3, [r3, #0]
 802c314:	681a      	ldr	r2, [r3, #0]
 802c316:	687b      	ldr	r3, [r7, #4]
 802c318:	681b      	ldr	r3, [r3, #0]
 802c31a:	f022 021e 	bic.w	r2, r2, #30
 802c31e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802c320:	687b      	ldr	r3, [r7, #4]
 802c322:	681b      	ldr	r3, [r3, #0]
 802c324:	695a      	ldr	r2, [r3, #20]
 802c326:	687b      	ldr	r3, [r7, #4]
 802c328:	681b      	ldr	r3, [r3, #0]
 802c32a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802c32e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 802c330:	687b      	ldr	r3, [r7, #4]
 802c332:	681b      	ldr	r3, [r3, #0]
 802c334:	617b      	str	r3, [r7, #20]
 802c336:	e00a      	b.n	802c34e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802c338:	687b      	ldr	r3, [r7, #4]
 802c33a:	681b      	ldr	r3, [r3, #0]
 802c33c:	681a      	ldr	r2, [r3, #0]
 802c33e:	687b      	ldr	r3, [r7, #4]
 802c340:	681b      	ldr	r3, [r3, #0]
 802c342:	f022 020e 	bic.w	r2, r2, #14
 802c346:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 802c348:	687b      	ldr	r3, [r7, #4]
 802c34a:	681b      	ldr	r3, [r3, #0]
 802c34c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802c34e:	687b      	ldr	r3, [r7, #4]
 802c350:	681b      	ldr	r3, [r3, #0]
 802c352:	4a3c      	ldr	r2, [pc, #240]	; (802c444 <HAL_DMA_Abort+0x214>)
 802c354:	4293      	cmp	r3, r2
 802c356:	d072      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c358:	687b      	ldr	r3, [r7, #4]
 802c35a:	681b      	ldr	r3, [r3, #0]
 802c35c:	4a3a      	ldr	r2, [pc, #232]	; (802c448 <HAL_DMA_Abort+0x218>)
 802c35e:	4293      	cmp	r3, r2
 802c360:	d06d      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c362:	687b      	ldr	r3, [r7, #4]
 802c364:	681b      	ldr	r3, [r3, #0]
 802c366:	4a39      	ldr	r2, [pc, #228]	; (802c44c <HAL_DMA_Abort+0x21c>)
 802c368:	4293      	cmp	r3, r2
 802c36a:	d068      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c36c:	687b      	ldr	r3, [r7, #4]
 802c36e:	681b      	ldr	r3, [r3, #0]
 802c370:	4a37      	ldr	r2, [pc, #220]	; (802c450 <HAL_DMA_Abort+0x220>)
 802c372:	4293      	cmp	r3, r2
 802c374:	d063      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c376:	687b      	ldr	r3, [r7, #4]
 802c378:	681b      	ldr	r3, [r3, #0]
 802c37a:	4a36      	ldr	r2, [pc, #216]	; (802c454 <HAL_DMA_Abort+0x224>)
 802c37c:	4293      	cmp	r3, r2
 802c37e:	d05e      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c380:	687b      	ldr	r3, [r7, #4]
 802c382:	681b      	ldr	r3, [r3, #0]
 802c384:	4a34      	ldr	r2, [pc, #208]	; (802c458 <HAL_DMA_Abort+0x228>)
 802c386:	4293      	cmp	r3, r2
 802c388:	d059      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c38a:	687b      	ldr	r3, [r7, #4]
 802c38c:	681b      	ldr	r3, [r3, #0]
 802c38e:	4a33      	ldr	r2, [pc, #204]	; (802c45c <HAL_DMA_Abort+0x22c>)
 802c390:	4293      	cmp	r3, r2
 802c392:	d054      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c394:	687b      	ldr	r3, [r7, #4]
 802c396:	681b      	ldr	r3, [r3, #0]
 802c398:	4a31      	ldr	r2, [pc, #196]	; (802c460 <HAL_DMA_Abort+0x230>)
 802c39a:	4293      	cmp	r3, r2
 802c39c:	d04f      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c39e:	687b      	ldr	r3, [r7, #4]
 802c3a0:	681b      	ldr	r3, [r3, #0]
 802c3a2:	4a30      	ldr	r2, [pc, #192]	; (802c464 <HAL_DMA_Abort+0x234>)
 802c3a4:	4293      	cmp	r3, r2
 802c3a6:	d04a      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c3a8:	687b      	ldr	r3, [r7, #4]
 802c3aa:	681b      	ldr	r3, [r3, #0]
 802c3ac:	4a2e      	ldr	r2, [pc, #184]	; (802c468 <HAL_DMA_Abort+0x238>)
 802c3ae:	4293      	cmp	r3, r2
 802c3b0:	d045      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c3b2:	687b      	ldr	r3, [r7, #4]
 802c3b4:	681b      	ldr	r3, [r3, #0]
 802c3b6:	4a2d      	ldr	r2, [pc, #180]	; (802c46c <HAL_DMA_Abort+0x23c>)
 802c3b8:	4293      	cmp	r3, r2
 802c3ba:	d040      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c3bc:	687b      	ldr	r3, [r7, #4]
 802c3be:	681b      	ldr	r3, [r3, #0]
 802c3c0:	4a2b      	ldr	r2, [pc, #172]	; (802c470 <HAL_DMA_Abort+0x240>)
 802c3c2:	4293      	cmp	r3, r2
 802c3c4:	d03b      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c3c6:	687b      	ldr	r3, [r7, #4]
 802c3c8:	681b      	ldr	r3, [r3, #0]
 802c3ca:	4a2a      	ldr	r2, [pc, #168]	; (802c474 <HAL_DMA_Abort+0x244>)
 802c3cc:	4293      	cmp	r3, r2
 802c3ce:	d036      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c3d0:	687b      	ldr	r3, [r7, #4]
 802c3d2:	681b      	ldr	r3, [r3, #0]
 802c3d4:	4a28      	ldr	r2, [pc, #160]	; (802c478 <HAL_DMA_Abort+0x248>)
 802c3d6:	4293      	cmp	r3, r2
 802c3d8:	d031      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c3da:	687b      	ldr	r3, [r7, #4]
 802c3dc:	681b      	ldr	r3, [r3, #0]
 802c3de:	4a27      	ldr	r2, [pc, #156]	; (802c47c <HAL_DMA_Abort+0x24c>)
 802c3e0:	4293      	cmp	r3, r2
 802c3e2:	d02c      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c3e4:	687b      	ldr	r3, [r7, #4]
 802c3e6:	681b      	ldr	r3, [r3, #0]
 802c3e8:	4a25      	ldr	r2, [pc, #148]	; (802c480 <HAL_DMA_Abort+0x250>)
 802c3ea:	4293      	cmp	r3, r2
 802c3ec:	d027      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c3ee:	687b      	ldr	r3, [r7, #4]
 802c3f0:	681b      	ldr	r3, [r3, #0]
 802c3f2:	4a24      	ldr	r2, [pc, #144]	; (802c484 <HAL_DMA_Abort+0x254>)
 802c3f4:	4293      	cmp	r3, r2
 802c3f6:	d022      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c3f8:	687b      	ldr	r3, [r7, #4]
 802c3fa:	681b      	ldr	r3, [r3, #0]
 802c3fc:	4a22      	ldr	r2, [pc, #136]	; (802c488 <HAL_DMA_Abort+0x258>)
 802c3fe:	4293      	cmp	r3, r2
 802c400:	d01d      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c402:	687b      	ldr	r3, [r7, #4]
 802c404:	681b      	ldr	r3, [r3, #0]
 802c406:	4a21      	ldr	r2, [pc, #132]	; (802c48c <HAL_DMA_Abort+0x25c>)
 802c408:	4293      	cmp	r3, r2
 802c40a:	d018      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c40c:	687b      	ldr	r3, [r7, #4]
 802c40e:	681b      	ldr	r3, [r3, #0]
 802c410:	4a1f      	ldr	r2, [pc, #124]	; (802c490 <HAL_DMA_Abort+0x260>)
 802c412:	4293      	cmp	r3, r2
 802c414:	d013      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c416:	687b      	ldr	r3, [r7, #4]
 802c418:	681b      	ldr	r3, [r3, #0]
 802c41a:	4a1e      	ldr	r2, [pc, #120]	; (802c494 <HAL_DMA_Abort+0x264>)
 802c41c:	4293      	cmp	r3, r2
 802c41e:	d00e      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c420:	687b      	ldr	r3, [r7, #4]
 802c422:	681b      	ldr	r3, [r3, #0]
 802c424:	4a1c      	ldr	r2, [pc, #112]	; (802c498 <HAL_DMA_Abort+0x268>)
 802c426:	4293      	cmp	r3, r2
 802c428:	d009      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c42a:	687b      	ldr	r3, [r7, #4]
 802c42c:	681b      	ldr	r3, [r3, #0]
 802c42e:	4a1b      	ldr	r2, [pc, #108]	; (802c49c <HAL_DMA_Abort+0x26c>)
 802c430:	4293      	cmp	r3, r2
 802c432:	d004      	beq.n	802c43e <HAL_DMA_Abort+0x20e>
 802c434:	687b      	ldr	r3, [r7, #4]
 802c436:	681b      	ldr	r3, [r3, #0]
 802c438:	4a19      	ldr	r2, [pc, #100]	; (802c4a0 <HAL_DMA_Abort+0x270>)
 802c43a:	4293      	cmp	r3, r2
 802c43c:	d132      	bne.n	802c4a4 <HAL_DMA_Abort+0x274>
 802c43e:	2301      	movs	r3, #1
 802c440:	e031      	b.n	802c4a6 <HAL_DMA_Abort+0x276>
 802c442:	bf00      	nop
 802c444:	40020010 	.word	0x40020010
 802c448:	40020028 	.word	0x40020028
 802c44c:	40020040 	.word	0x40020040
 802c450:	40020058 	.word	0x40020058
 802c454:	40020070 	.word	0x40020070
 802c458:	40020088 	.word	0x40020088
 802c45c:	400200a0 	.word	0x400200a0
 802c460:	400200b8 	.word	0x400200b8
 802c464:	40020410 	.word	0x40020410
 802c468:	40020428 	.word	0x40020428
 802c46c:	40020440 	.word	0x40020440
 802c470:	40020458 	.word	0x40020458
 802c474:	40020470 	.word	0x40020470
 802c478:	40020488 	.word	0x40020488
 802c47c:	400204a0 	.word	0x400204a0
 802c480:	400204b8 	.word	0x400204b8
 802c484:	58025408 	.word	0x58025408
 802c488:	5802541c 	.word	0x5802541c
 802c48c:	58025430 	.word	0x58025430
 802c490:	58025444 	.word	0x58025444
 802c494:	58025458 	.word	0x58025458
 802c498:	5802546c 	.word	0x5802546c
 802c49c:	58025480 	.word	0x58025480
 802c4a0:	58025494 	.word	0x58025494
 802c4a4:	2300      	movs	r3, #0
 802c4a6:	2b00      	cmp	r3, #0
 802c4a8:	d007      	beq.n	802c4ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802c4aa:	687b      	ldr	r3, [r7, #4]
 802c4ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c4ae:	681a      	ldr	r2, [r3, #0]
 802c4b0:	687b      	ldr	r3, [r7, #4]
 802c4b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c4b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c4b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802c4ba:	687b      	ldr	r3, [r7, #4]
 802c4bc:	681b      	ldr	r3, [r3, #0]
 802c4be:	4a6d      	ldr	r2, [pc, #436]	; (802c674 <HAL_DMA_Abort+0x444>)
 802c4c0:	4293      	cmp	r3, r2
 802c4c2:	d04a      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c4c4:	687b      	ldr	r3, [r7, #4]
 802c4c6:	681b      	ldr	r3, [r3, #0]
 802c4c8:	4a6b      	ldr	r2, [pc, #428]	; (802c678 <HAL_DMA_Abort+0x448>)
 802c4ca:	4293      	cmp	r3, r2
 802c4cc:	d045      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c4ce:	687b      	ldr	r3, [r7, #4]
 802c4d0:	681b      	ldr	r3, [r3, #0]
 802c4d2:	4a6a      	ldr	r2, [pc, #424]	; (802c67c <HAL_DMA_Abort+0x44c>)
 802c4d4:	4293      	cmp	r3, r2
 802c4d6:	d040      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c4d8:	687b      	ldr	r3, [r7, #4]
 802c4da:	681b      	ldr	r3, [r3, #0]
 802c4dc:	4a68      	ldr	r2, [pc, #416]	; (802c680 <HAL_DMA_Abort+0x450>)
 802c4de:	4293      	cmp	r3, r2
 802c4e0:	d03b      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c4e2:	687b      	ldr	r3, [r7, #4]
 802c4e4:	681b      	ldr	r3, [r3, #0]
 802c4e6:	4a67      	ldr	r2, [pc, #412]	; (802c684 <HAL_DMA_Abort+0x454>)
 802c4e8:	4293      	cmp	r3, r2
 802c4ea:	d036      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c4ec:	687b      	ldr	r3, [r7, #4]
 802c4ee:	681b      	ldr	r3, [r3, #0]
 802c4f0:	4a65      	ldr	r2, [pc, #404]	; (802c688 <HAL_DMA_Abort+0x458>)
 802c4f2:	4293      	cmp	r3, r2
 802c4f4:	d031      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c4f6:	687b      	ldr	r3, [r7, #4]
 802c4f8:	681b      	ldr	r3, [r3, #0]
 802c4fa:	4a64      	ldr	r2, [pc, #400]	; (802c68c <HAL_DMA_Abort+0x45c>)
 802c4fc:	4293      	cmp	r3, r2
 802c4fe:	d02c      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c500:	687b      	ldr	r3, [r7, #4]
 802c502:	681b      	ldr	r3, [r3, #0]
 802c504:	4a62      	ldr	r2, [pc, #392]	; (802c690 <HAL_DMA_Abort+0x460>)
 802c506:	4293      	cmp	r3, r2
 802c508:	d027      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c50a:	687b      	ldr	r3, [r7, #4]
 802c50c:	681b      	ldr	r3, [r3, #0]
 802c50e:	4a61      	ldr	r2, [pc, #388]	; (802c694 <HAL_DMA_Abort+0x464>)
 802c510:	4293      	cmp	r3, r2
 802c512:	d022      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c514:	687b      	ldr	r3, [r7, #4]
 802c516:	681b      	ldr	r3, [r3, #0]
 802c518:	4a5f      	ldr	r2, [pc, #380]	; (802c698 <HAL_DMA_Abort+0x468>)
 802c51a:	4293      	cmp	r3, r2
 802c51c:	d01d      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c51e:	687b      	ldr	r3, [r7, #4]
 802c520:	681b      	ldr	r3, [r3, #0]
 802c522:	4a5e      	ldr	r2, [pc, #376]	; (802c69c <HAL_DMA_Abort+0x46c>)
 802c524:	4293      	cmp	r3, r2
 802c526:	d018      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c528:	687b      	ldr	r3, [r7, #4]
 802c52a:	681b      	ldr	r3, [r3, #0]
 802c52c:	4a5c      	ldr	r2, [pc, #368]	; (802c6a0 <HAL_DMA_Abort+0x470>)
 802c52e:	4293      	cmp	r3, r2
 802c530:	d013      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c532:	687b      	ldr	r3, [r7, #4]
 802c534:	681b      	ldr	r3, [r3, #0]
 802c536:	4a5b      	ldr	r2, [pc, #364]	; (802c6a4 <HAL_DMA_Abort+0x474>)
 802c538:	4293      	cmp	r3, r2
 802c53a:	d00e      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c53c:	687b      	ldr	r3, [r7, #4]
 802c53e:	681b      	ldr	r3, [r3, #0]
 802c540:	4a59      	ldr	r2, [pc, #356]	; (802c6a8 <HAL_DMA_Abort+0x478>)
 802c542:	4293      	cmp	r3, r2
 802c544:	d009      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c546:	687b      	ldr	r3, [r7, #4]
 802c548:	681b      	ldr	r3, [r3, #0]
 802c54a:	4a58      	ldr	r2, [pc, #352]	; (802c6ac <HAL_DMA_Abort+0x47c>)
 802c54c:	4293      	cmp	r3, r2
 802c54e:	d004      	beq.n	802c55a <HAL_DMA_Abort+0x32a>
 802c550:	687b      	ldr	r3, [r7, #4]
 802c552:	681b      	ldr	r3, [r3, #0]
 802c554:	4a56      	ldr	r2, [pc, #344]	; (802c6b0 <HAL_DMA_Abort+0x480>)
 802c556:	4293      	cmp	r3, r2
 802c558:	d108      	bne.n	802c56c <HAL_DMA_Abort+0x33c>
 802c55a:	687b      	ldr	r3, [r7, #4]
 802c55c:	681b      	ldr	r3, [r3, #0]
 802c55e:	681a      	ldr	r2, [r3, #0]
 802c560:	687b      	ldr	r3, [r7, #4]
 802c562:	681b      	ldr	r3, [r3, #0]
 802c564:	f022 0201 	bic.w	r2, r2, #1
 802c568:	601a      	str	r2, [r3, #0]
 802c56a:	e007      	b.n	802c57c <HAL_DMA_Abort+0x34c>
 802c56c:	687b      	ldr	r3, [r7, #4]
 802c56e:	681b      	ldr	r3, [r3, #0]
 802c570:	681a      	ldr	r2, [r3, #0]
 802c572:	687b      	ldr	r3, [r7, #4]
 802c574:	681b      	ldr	r3, [r3, #0]
 802c576:	f022 0201 	bic.w	r2, r2, #1
 802c57a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802c57c:	e013      	b.n	802c5a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802c57e:	f7fe fb95 	bl	802acac <HAL_GetTick>
 802c582:	4602      	mov	r2, r0
 802c584:	693b      	ldr	r3, [r7, #16]
 802c586:	1ad3      	subs	r3, r2, r3
 802c588:	2b05      	cmp	r3, #5
 802c58a:	d90c      	bls.n	802c5a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802c58c:	687b      	ldr	r3, [r7, #4]
 802c58e:	2220      	movs	r2, #32
 802c590:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802c592:	687b      	ldr	r3, [r7, #4]
 802c594:	2203      	movs	r2, #3
 802c596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802c59a:	687b      	ldr	r3, [r7, #4]
 802c59c:	2200      	movs	r2, #0
 802c59e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 802c5a2:	2301      	movs	r3, #1
 802c5a4:	e12d      	b.n	802c802 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802c5a6:	697b      	ldr	r3, [r7, #20]
 802c5a8:	681b      	ldr	r3, [r3, #0]
 802c5aa:	f003 0301 	and.w	r3, r3, #1
 802c5ae:	2b00      	cmp	r3, #0
 802c5b0:	d1e5      	bne.n	802c57e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c5b2:	687b      	ldr	r3, [r7, #4]
 802c5b4:	681b      	ldr	r3, [r3, #0]
 802c5b6:	4a2f      	ldr	r2, [pc, #188]	; (802c674 <HAL_DMA_Abort+0x444>)
 802c5b8:	4293      	cmp	r3, r2
 802c5ba:	d04a      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c5bc:	687b      	ldr	r3, [r7, #4]
 802c5be:	681b      	ldr	r3, [r3, #0]
 802c5c0:	4a2d      	ldr	r2, [pc, #180]	; (802c678 <HAL_DMA_Abort+0x448>)
 802c5c2:	4293      	cmp	r3, r2
 802c5c4:	d045      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c5c6:	687b      	ldr	r3, [r7, #4]
 802c5c8:	681b      	ldr	r3, [r3, #0]
 802c5ca:	4a2c      	ldr	r2, [pc, #176]	; (802c67c <HAL_DMA_Abort+0x44c>)
 802c5cc:	4293      	cmp	r3, r2
 802c5ce:	d040      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c5d0:	687b      	ldr	r3, [r7, #4]
 802c5d2:	681b      	ldr	r3, [r3, #0]
 802c5d4:	4a2a      	ldr	r2, [pc, #168]	; (802c680 <HAL_DMA_Abort+0x450>)
 802c5d6:	4293      	cmp	r3, r2
 802c5d8:	d03b      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c5da:	687b      	ldr	r3, [r7, #4]
 802c5dc:	681b      	ldr	r3, [r3, #0]
 802c5de:	4a29      	ldr	r2, [pc, #164]	; (802c684 <HAL_DMA_Abort+0x454>)
 802c5e0:	4293      	cmp	r3, r2
 802c5e2:	d036      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c5e4:	687b      	ldr	r3, [r7, #4]
 802c5e6:	681b      	ldr	r3, [r3, #0]
 802c5e8:	4a27      	ldr	r2, [pc, #156]	; (802c688 <HAL_DMA_Abort+0x458>)
 802c5ea:	4293      	cmp	r3, r2
 802c5ec:	d031      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c5ee:	687b      	ldr	r3, [r7, #4]
 802c5f0:	681b      	ldr	r3, [r3, #0]
 802c5f2:	4a26      	ldr	r2, [pc, #152]	; (802c68c <HAL_DMA_Abort+0x45c>)
 802c5f4:	4293      	cmp	r3, r2
 802c5f6:	d02c      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c5f8:	687b      	ldr	r3, [r7, #4]
 802c5fa:	681b      	ldr	r3, [r3, #0]
 802c5fc:	4a24      	ldr	r2, [pc, #144]	; (802c690 <HAL_DMA_Abort+0x460>)
 802c5fe:	4293      	cmp	r3, r2
 802c600:	d027      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c602:	687b      	ldr	r3, [r7, #4]
 802c604:	681b      	ldr	r3, [r3, #0]
 802c606:	4a23      	ldr	r2, [pc, #140]	; (802c694 <HAL_DMA_Abort+0x464>)
 802c608:	4293      	cmp	r3, r2
 802c60a:	d022      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c60c:	687b      	ldr	r3, [r7, #4]
 802c60e:	681b      	ldr	r3, [r3, #0]
 802c610:	4a21      	ldr	r2, [pc, #132]	; (802c698 <HAL_DMA_Abort+0x468>)
 802c612:	4293      	cmp	r3, r2
 802c614:	d01d      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c616:	687b      	ldr	r3, [r7, #4]
 802c618:	681b      	ldr	r3, [r3, #0]
 802c61a:	4a20      	ldr	r2, [pc, #128]	; (802c69c <HAL_DMA_Abort+0x46c>)
 802c61c:	4293      	cmp	r3, r2
 802c61e:	d018      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c620:	687b      	ldr	r3, [r7, #4]
 802c622:	681b      	ldr	r3, [r3, #0]
 802c624:	4a1e      	ldr	r2, [pc, #120]	; (802c6a0 <HAL_DMA_Abort+0x470>)
 802c626:	4293      	cmp	r3, r2
 802c628:	d013      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c62a:	687b      	ldr	r3, [r7, #4]
 802c62c:	681b      	ldr	r3, [r3, #0]
 802c62e:	4a1d      	ldr	r2, [pc, #116]	; (802c6a4 <HAL_DMA_Abort+0x474>)
 802c630:	4293      	cmp	r3, r2
 802c632:	d00e      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c634:	687b      	ldr	r3, [r7, #4]
 802c636:	681b      	ldr	r3, [r3, #0]
 802c638:	4a1b      	ldr	r2, [pc, #108]	; (802c6a8 <HAL_DMA_Abort+0x478>)
 802c63a:	4293      	cmp	r3, r2
 802c63c:	d009      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c63e:	687b      	ldr	r3, [r7, #4]
 802c640:	681b      	ldr	r3, [r3, #0]
 802c642:	4a1a      	ldr	r2, [pc, #104]	; (802c6ac <HAL_DMA_Abort+0x47c>)
 802c644:	4293      	cmp	r3, r2
 802c646:	d004      	beq.n	802c652 <HAL_DMA_Abort+0x422>
 802c648:	687b      	ldr	r3, [r7, #4]
 802c64a:	681b      	ldr	r3, [r3, #0]
 802c64c:	4a18      	ldr	r2, [pc, #96]	; (802c6b0 <HAL_DMA_Abort+0x480>)
 802c64e:	4293      	cmp	r3, r2
 802c650:	d101      	bne.n	802c656 <HAL_DMA_Abort+0x426>
 802c652:	2301      	movs	r3, #1
 802c654:	e000      	b.n	802c658 <HAL_DMA_Abort+0x428>
 802c656:	2300      	movs	r3, #0
 802c658:	2b00      	cmp	r3, #0
 802c65a:	d02b      	beq.n	802c6b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802c65c:	687b      	ldr	r3, [r7, #4]
 802c65e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c660:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802c662:	687b      	ldr	r3, [r7, #4]
 802c664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c666:	f003 031f 	and.w	r3, r3, #31
 802c66a:	223f      	movs	r2, #63	; 0x3f
 802c66c:	409a      	lsls	r2, r3
 802c66e:	68bb      	ldr	r3, [r7, #8]
 802c670:	609a      	str	r2, [r3, #8]
 802c672:	e02a      	b.n	802c6ca <HAL_DMA_Abort+0x49a>
 802c674:	40020010 	.word	0x40020010
 802c678:	40020028 	.word	0x40020028
 802c67c:	40020040 	.word	0x40020040
 802c680:	40020058 	.word	0x40020058
 802c684:	40020070 	.word	0x40020070
 802c688:	40020088 	.word	0x40020088
 802c68c:	400200a0 	.word	0x400200a0
 802c690:	400200b8 	.word	0x400200b8
 802c694:	40020410 	.word	0x40020410
 802c698:	40020428 	.word	0x40020428
 802c69c:	40020440 	.word	0x40020440
 802c6a0:	40020458 	.word	0x40020458
 802c6a4:	40020470 	.word	0x40020470
 802c6a8:	40020488 	.word	0x40020488
 802c6ac:	400204a0 	.word	0x400204a0
 802c6b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802c6b4:	687b      	ldr	r3, [r7, #4]
 802c6b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c6b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802c6ba:	687b      	ldr	r3, [r7, #4]
 802c6bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c6be:	f003 031f 	and.w	r3, r3, #31
 802c6c2:	2201      	movs	r2, #1
 802c6c4:	409a      	lsls	r2, r3
 802c6c6:	68fb      	ldr	r3, [r7, #12]
 802c6c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802c6ca:	687b      	ldr	r3, [r7, #4]
 802c6cc:	681b      	ldr	r3, [r3, #0]
 802c6ce:	4a4f      	ldr	r2, [pc, #316]	; (802c80c <HAL_DMA_Abort+0x5dc>)
 802c6d0:	4293      	cmp	r3, r2
 802c6d2:	d072      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c6d4:	687b      	ldr	r3, [r7, #4]
 802c6d6:	681b      	ldr	r3, [r3, #0]
 802c6d8:	4a4d      	ldr	r2, [pc, #308]	; (802c810 <HAL_DMA_Abort+0x5e0>)
 802c6da:	4293      	cmp	r3, r2
 802c6dc:	d06d      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c6de:	687b      	ldr	r3, [r7, #4]
 802c6e0:	681b      	ldr	r3, [r3, #0]
 802c6e2:	4a4c      	ldr	r2, [pc, #304]	; (802c814 <HAL_DMA_Abort+0x5e4>)
 802c6e4:	4293      	cmp	r3, r2
 802c6e6:	d068      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c6e8:	687b      	ldr	r3, [r7, #4]
 802c6ea:	681b      	ldr	r3, [r3, #0]
 802c6ec:	4a4a      	ldr	r2, [pc, #296]	; (802c818 <HAL_DMA_Abort+0x5e8>)
 802c6ee:	4293      	cmp	r3, r2
 802c6f0:	d063      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c6f2:	687b      	ldr	r3, [r7, #4]
 802c6f4:	681b      	ldr	r3, [r3, #0]
 802c6f6:	4a49      	ldr	r2, [pc, #292]	; (802c81c <HAL_DMA_Abort+0x5ec>)
 802c6f8:	4293      	cmp	r3, r2
 802c6fa:	d05e      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c6fc:	687b      	ldr	r3, [r7, #4]
 802c6fe:	681b      	ldr	r3, [r3, #0]
 802c700:	4a47      	ldr	r2, [pc, #284]	; (802c820 <HAL_DMA_Abort+0x5f0>)
 802c702:	4293      	cmp	r3, r2
 802c704:	d059      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c706:	687b      	ldr	r3, [r7, #4]
 802c708:	681b      	ldr	r3, [r3, #0]
 802c70a:	4a46      	ldr	r2, [pc, #280]	; (802c824 <HAL_DMA_Abort+0x5f4>)
 802c70c:	4293      	cmp	r3, r2
 802c70e:	d054      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c710:	687b      	ldr	r3, [r7, #4]
 802c712:	681b      	ldr	r3, [r3, #0]
 802c714:	4a44      	ldr	r2, [pc, #272]	; (802c828 <HAL_DMA_Abort+0x5f8>)
 802c716:	4293      	cmp	r3, r2
 802c718:	d04f      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c71a:	687b      	ldr	r3, [r7, #4]
 802c71c:	681b      	ldr	r3, [r3, #0]
 802c71e:	4a43      	ldr	r2, [pc, #268]	; (802c82c <HAL_DMA_Abort+0x5fc>)
 802c720:	4293      	cmp	r3, r2
 802c722:	d04a      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c724:	687b      	ldr	r3, [r7, #4]
 802c726:	681b      	ldr	r3, [r3, #0]
 802c728:	4a41      	ldr	r2, [pc, #260]	; (802c830 <HAL_DMA_Abort+0x600>)
 802c72a:	4293      	cmp	r3, r2
 802c72c:	d045      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c72e:	687b      	ldr	r3, [r7, #4]
 802c730:	681b      	ldr	r3, [r3, #0]
 802c732:	4a40      	ldr	r2, [pc, #256]	; (802c834 <HAL_DMA_Abort+0x604>)
 802c734:	4293      	cmp	r3, r2
 802c736:	d040      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c738:	687b      	ldr	r3, [r7, #4]
 802c73a:	681b      	ldr	r3, [r3, #0]
 802c73c:	4a3e      	ldr	r2, [pc, #248]	; (802c838 <HAL_DMA_Abort+0x608>)
 802c73e:	4293      	cmp	r3, r2
 802c740:	d03b      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c742:	687b      	ldr	r3, [r7, #4]
 802c744:	681b      	ldr	r3, [r3, #0]
 802c746:	4a3d      	ldr	r2, [pc, #244]	; (802c83c <HAL_DMA_Abort+0x60c>)
 802c748:	4293      	cmp	r3, r2
 802c74a:	d036      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c74c:	687b      	ldr	r3, [r7, #4]
 802c74e:	681b      	ldr	r3, [r3, #0]
 802c750:	4a3b      	ldr	r2, [pc, #236]	; (802c840 <HAL_DMA_Abort+0x610>)
 802c752:	4293      	cmp	r3, r2
 802c754:	d031      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c756:	687b      	ldr	r3, [r7, #4]
 802c758:	681b      	ldr	r3, [r3, #0]
 802c75a:	4a3a      	ldr	r2, [pc, #232]	; (802c844 <HAL_DMA_Abort+0x614>)
 802c75c:	4293      	cmp	r3, r2
 802c75e:	d02c      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c760:	687b      	ldr	r3, [r7, #4]
 802c762:	681b      	ldr	r3, [r3, #0]
 802c764:	4a38      	ldr	r2, [pc, #224]	; (802c848 <HAL_DMA_Abort+0x618>)
 802c766:	4293      	cmp	r3, r2
 802c768:	d027      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c76a:	687b      	ldr	r3, [r7, #4]
 802c76c:	681b      	ldr	r3, [r3, #0]
 802c76e:	4a37      	ldr	r2, [pc, #220]	; (802c84c <HAL_DMA_Abort+0x61c>)
 802c770:	4293      	cmp	r3, r2
 802c772:	d022      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c774:	687b      	ldr	r3, [r7, #4]
 802c776:	681b      	ldr	r3, [r3, #0]
 802c778:	4a35      	ldr	r2, [pc, #212]	; (802c850 <HAL_DMA_Abort+0x620>)
 802c77a:	4293      	cmp	r3, r2
 802c77c:	d01d      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c77e:	687b      	ldr	r3, [r7, #4]
 802c780:	681b      	ldr	r3, [r3, #0]
 802c782:	4a34      	ldr	r2, [pc, #208]	; (802c854 <HAL_DMA_Abort+0x624>)
 802c784:	4293      	cmp	r3, r2
 802c786:	d018      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c788:	687b      	ldr	r3, [r7, #4]
 802c78a:	681b      	ldr	r3, [r3, #0]
 802c78c:	4a32      	ldr	r2, [pc, #200]	; (802c858 <HAL_DMA_Abort+0x628>)
 802c78e:	4293      	cmp	r3, r2
 802c790:	d013      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c792:	687b      	ldr	r3, [r7, #4]
 802c794:	681b      	ldr	r3, [r3, #0]
 802c796:	4a31      	ldr	r2, [pc, #196]	; (802c85c <HAL_DMA_Abort+0x62c>)
 802c798:	4293      	cmp	r3, r2
 802c79a:	d00e      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c79c:	687b      	ldr	r3, [r7, #4]
 802c79e:	681b      	ldr	r3, [r3, #0]
 802c7a0:	4a2f      	ldr	r2, [pc, #188]	; (802c860 <HAL_DMA_Abort+0x630>)
 802c7a2:	4293      	cmp	r3, r2
 802c7a4:	d009      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c7a6:	687b      	ldr	r3, [r7, #4]
 802c7a8:	681b      	ldr	r3, [r3, #0]
 802c7aa:	4a2e      	ldr	r2, [pc, #184]	; (802c864 <HAL_DMA_Abort+0x634>)
 802c7ac:	4293      	cmp	r3, r2
 802c7ae:	d004      	beq.n	802c7ba <HAL_DMA_Abort+0x58a>
 802c7b0:	687b      	ldr	r3, [r7, #4]
 802c7b2:	681b      	ldr	r3, [r3, #0]
 802c7b4:	4a2c      	ldr	r2, [pc, #176]	; (802c868 <HAL_DMA_Abort+0x638>)
 802c7b6:	4293      	cmp	r3, r2
 802c7b8:	d101      	bne.n	802c7be <HAL_DMA_Abort+0x58e>
 802c7ba:	2301      	movs	r3, #1
 802c7bc:	e000      	b.n	802c7c0 <HAL_DMA_Abort+0x590>
 802c7be:	2300      	movs	r3, #0
 802c7c0:	2b00      	cmp	r3, #0
 802c7c2:	d015      	beq.n	802c7f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802c7c4:	687b      	ldr	r3, [r7, #4]
 802c7c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802c7c8:	687a      	ldr	r2, [r7, #4]
 802c7ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802c7cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 802c7ce:	687b      	ldr	r3, [r7, #4]
 802c7d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c7d2:	2b00      	cmp	r3, #0
 802c7d4:	d00c      	beq.n	802c7f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802c7d6:	687b      	ldr	r3, [r7, #4]
 802c7d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c7da:	681a      	ldr	r2, [r3, #0]
 802c7dc:	687b      	ldr	r3, [r7, #4]
 802c7de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c7e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c7e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802c7e6:	687b      	ldr	r3, [r7, #4]
 802c7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c7ea:	687a      	ldr	r2, [r7, #4]
 802c7ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802c7ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 802c7f0:	687b      	ldr	r3, [r7, #4]
 802c7f2:	2201      	movs	r2, #1
 802c7f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802c7f8:	687b      	ldr	r3, [r7, #4]
 802c7fa:	2200      	movs	r2, #0
 802c7fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 802c800:	2300      	movs	r3, #0
}
 802c802:	4618      	mov	r0, r3
 802c804:	3718      	adds	r7, #24
 802c806:	46bd      	mov	sp, r7
 802c808:	bd80      	pop	{r7, pc}
 802c80a:	bf00      	nop
 802c80c:	40020010 	.word	0x40020010
 802c810:	40020028 	.word	0x40020028
 802c814:	40020040 	.word	0x40020040
 802c818:	40020058 	.word	0x40020058
 802c81c:	40020070 	.word	0x40020070
 802c820:	40020088 	.word	0x40020088
 802c824:	400200a0 	.word	0x400200a0
 802c828:	400200b8 	.word	0x400200b8
 802c82c:	40020410 	.word	0x40020410
 802c830:	40020428 	.word	0x40020428
 802c834:	40020440 	.word	0x40020440
 802c838:	40020458 	.word	0x40020458
 802c83c:	40020470 	.word	0x40020470
 802c840:	40020488 	.word	0x40020488
 802c844:	400204a0 	.word	0x400204a0
 802c848:	400204b8 	.word	0x400204b8
 802c84c:	58025408 	.word	0x58025408
 802c850:	5802541c 	.word	0x5802541c
 802c854:	58025430 	.word	0x58025430
 802c858:	58025444 	.word	0x58025444
 802c85c:	58025458 	.word	0x58025458
 802c860:	5802546c 	.word	0x5802546c
 802c864:	58025480 	.word	0x58025480
 802c868:	58025494 	.word	0x58025494

0802c86c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802c86c:	b580      	push	{r7, lr}
 802c86e:	b084      	sub	sp, #16
 802c870:	af00      	add	r7, sp, #0
 802c872:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802c874:	687b      	ldr	r3, [r7, #4]
 802c876:	2b00      	cmp	r3, #0
 802c878:	d101      	bne.n	802c87e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 802c87a:	2301      	movs	r3, #1
 802c87c:	e237      	b.n	802ccee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 802c87e:	687b      	ldr	r3, [r7, #4]
 802c880:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802c884:	b2db      	uxtb	r3, r3
 802c886:	2b02      	cmp	r3, #2
 802c888:	d004      	beq.n	802c894 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802c88a:	687b      	ldr	r3, [r7, #4]
 802c88c:	2280      	movs	r2, #128	; 0x80
 802c88e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802c890:	2301      	movs	r3, #1
 802c892:	e22c      	b.n	802ccee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c894:	687b      	ldr	r3, [r7, #4]
 802c896:	681b      	ldr	r3, [r3, #0]
 802c898:	4a5c      	ldr	r2, [pc, #368]	; (802ca0c <HAL_DMA_Abort_IT+0x1a0>)
 802c89a:	4293      	cmp	r3, r2
 802c89c:	d04a      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c89e:	687b      	ldr	r3, [r7, #4]
 802c8a0:	681b      	ldr	r3, [r3, #0]
 802c8a2:	4a5b      	ldr	r2, [pc, #364]	; (802ca10 <HAL_DMA_Abort_IT+0x1a4>)
 802c8a4:	4293      	cmp	r3, r2
 802c8a6:	d045      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c8a8:	687b      	ldr	r3, [r7, #4]
 802c8aa:	681b      	ldr	r3, [r3, #0]
 802c8ac:	4a59      	ldr	r2, [pc, #356]	; (802ca14 <HAL_DMA_Abort_IT+0x1a8>)
 802c8ae:	4293      	cmp	r3, r2
 802c8b0:	d040      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c8b2:	687b      	ldr	r3, [r7, #4]
 802c8b4:	681b      	ldr	r3, [r3, #0]
 802c8b6:	4a58      	ldr	r2, [pc, #352]	; (802ca18 <HAL_DMA_Abort_IT+0x1ac>)
 802c8b8:	4293      	cmp	r3, r2
 802c8ba:	d03b      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c8bc:	687b      	ldr	r3, [r7, #4]
 802c8be:	681b      	ldr	r3, [r3, #0]
 802c8c0:	4a56      	ldr	r2, [pc, #344]	; (802ca1c <HAL_DMA_Abort_IT+0x1b0>)
 802c8c2:	4293      	cmp	r3, r2
 802c8c4:	d036      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c8c6:	687b      	ldr	r3, [r7, #4]
 802c8c8:	681b      	ldr	r3, [r3, #0]
 802c8ca:	4a55      	ldr	r2, [pc, #340]	; (802ca20 <HAL_DMA_Abort_IT+0x1b4>)
 802c8cc:	4293      	cmp	r3, r2
 802c8ce:	d031      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c8d0:	687b      	ldr	r3, [r7, #4]
 802c8d2:	681b      	ldr	r3, [r3, #0]
 802c8d4:	4a53      	ldr	r2, [pc, #332]	; (802ca24 <HAL_DMA_Abort_IT+0x1b8>)
 802c8d6:	4293      	cmp	r3, r2
 802c8d8:	d02c      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c8da:	687b      	ldr	r3, [r7, #4]
 802c8dc:	681b      	ldr	r3, [r3, #0]
 802c8de:	4a52      	ldr	r2, [pc, #328]	; (802ca28 <HAL_DMA_Abort_IT+0x1bc>)
 802c8e0:	4293      	cmp	r3, r2
 802c8e2:	d027      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c8e4:	687b      	ldr	r3, [r7, #4]
 802c8e6:	681b      	ldr	r3, [r3, #0]
 802c8e8:	4a50      	ldr	r2, [pc, #320]	; (802ca2c <HAL_DMA_Abort_IT+0x1c0>)
 802c8ea:	4293      	cmp	r3, r2
 802c8ec:	d022      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c8ee:	687b      	ldr	r3, [r7, #4]
 802c8f0:	681b      	ldr	r3, [r3, #0]
 802c8f2:	4a4f      	ldr	r2, [pc, #316]	; (802ca30 <HAL_DMA_Abort_IT+0x1c4>)
 802c8f4:	4293      	cmp	r3, r2
 802c8f6:	d01d      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c8f8:	687b      	ldr	r3, [r7, #4]
 802c8fa:	681b      	ldr	r3, [r3, #0]
 802c8fc:	4a4d      	ldr	r2, [pc, #308]	; (802ca34 <HAL_DMA_Abort_IT+0x1c8>)
 802c8fe:	4293      	cmp	r3, r2
 802c900:	d018      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c902:	687b      	ldr	r3, [r7, #4]
 802c904:	681b      	ldr	r3, [r3, #0]
 802c906:	4a4c      	ldr	r2, [pc, #304]	; (802ca38 <HAL_DMA_Abort_IT+0x1cc>)
 802c908:	4293      	cmp	r3, r2
 802c90a:	d013      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c90c:	687b      	ldr	r3, [r7, #4]
 802c90e:	681b      	ldr	r3, [r3, #0]
 802c910:	4a4a      	ldr	r2, [pc, #296]	; (802ca3c <HAL_DMA_Abort_IT+0x1d0>)
 802c912:	4293      	cmp	r3, r2
 802c914:	d00e      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c916:	687b      	ldr	r3, [r7, #4]
 802c918:	681b      	ldr	r3, [r3, #0]
 802c91a:	4a49      	ldr	r2, [pc, #292]	; (802ca40 <HAL_DMA_Abort_IT+0x1d4>)
 802c91c:	4293      	cmp	r3, r2
 802c91e:	d009      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c920:	687b      	ldr	r3, [r7, #4]
 802c922:	681b      	ldr	r3, [r3, #0]
 802c924:	4a47      	ldr	r2, [pc, #284]	; (802ca44 <HAL_DMA_Abort_IT+0x1d8>)
 802c926:	4293      	cmp	r3, r2
 802c928:	d004      	beq.n	802c934 <HAL_DMA_Abort_IT+0xc8>
 802c92a:	687b      	ldr	r3, [r7, #4]
 802c92c:	681b      	ldr	r3, [r3, #0]
 802c92e:	4a46      	ldr	r2, [pc, #280]	; (802ca48 <HAL_DMA_Abort_IT+0x1dc>)
 802c930:	4293      	cmp	r3, r2
 802c932:	d101      	bne.n	802c938 <HAL_DMA_Abort_IT+0xcc>
 802c934:	2301      	movs	r3, #1
 802c936:	e000      	b.n	802c93a <HAL_DMA_Abort_IT+0xce>
 802c938:	2300      	movs	r3, #0
 802c93a:	2b00      	cmp	r3, #0
 802c93c:	f000 8086 	beq.w	802ca4c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 802c940:	687b      	ldr	r3, [r7, #4]
 802c942:	2204      	movs	r2, #4
 802c944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802c948:	687b      	ldr	r3, [r7, #4]
 802c94a:	681b      	ldr	r3, [r3, #0]
 802c94c:	4a2f      	ldr	r2, [pc, #188]	; (802ca0c <HAL_DMA_Abort_IT+0x1a0>)
 802c94e:	4293      	cmp	r3, r2
 802c950:	d04a      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c952:	687b      	ldr	r3, [r7, #4]
 802c954:	681b      	ldr	r3, [r3, #0]
 802c956:	4a2e      	ldr	r2, [pc, #184]	; (802ca10 <HAL_DMA_Abort_IT+0x1a4>)
 802c958:	4293      	cmp	r3, r2
 802c95a:	d045      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c95c:	687b      	ldr	r3, [r7, #4]
 802c95e:	681b      	ldr	r3, [r3, #0]
 802c960:	4a2c      	ldr	r2, [pc, #176]	; (802ca14 <HAL_DMA_Abort_IT+0x1a8>)
 802c962:	4293      	cmp	r3, r2
 802c964:	d040      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c966:	687b      	ldr	r3, [r7, #4]
 802c968:	681b      	ldr	r3, [r3, #0]
 802c96a:	4a2b      	ldr	r2, [pc, #172]	; (802ca18 <HAL_DMA_Abort_IT+0x1ac>)
 802c96c:	4293      	cmp	r3, r2
 802c96e:	d03b      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c970:	687b      	ldr	r3, [r7, #4]
 802c972:	681b      	ldr	r3, [r3, #0]
 802c974:	4a29      	ldr	r2, [pc, #164]	; (802ca1c <HAL_DMA_Abort_IT+0x1b0>)
 802c976:	4293      	cmp	r3, r2
 802c978:	d036      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c97a:	687b      	ldr	r3, [r7, #4]
 802c97c:	681b      	ldr	r3, [r3, #0]
 802c97e:	4a28      	ldr	r2, [pc, #160]	; (802ca20 <HAL_DMA_Abort_IT+0x1b4>)
 802c980:	4293      	cmp	r3, r2
 802c982:	d031      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c984:	687b      	ldr	r3, [r7, #4]
 802c986:	681b      	ldr	r3, [r3, #0]
 802c988:	4a26      	ldr	r2, [pc, #152]	; (802ca24 <HAL_DMA_Abort_IT+0x1b8>)
 802c98a:	4293      	cmp	r3, r2
 802c98c:	d02c      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c98e:	687b      	ldr	r3, [r7, #4]
 802c990:	681b      	ldr	r3, [r3, #0]
 802c992:	4a25      	ldr	r2, [pc, #148]	; (802ca28 <HAL_DMA_Abort_IT+0x1bc>)
 802c994:	4293      	cmp	r3, r2
 802c996:	d027      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c998:	687b      	ldr	r3, [r7, #4]
 802c99a:	681b      	ldr	r3, [r3, #0]
 802c99c:	4a23      	ldr	r2, [pc, #140]	; (802ca2c <HAL_DMA_Abort_IT+0x1c0>)
 802c99e:	4293      	cmp	r3, r2
 802c9a0:	d022      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c9a2:	687b      	ldr	r3, [r7, #4]
 802c9a4:	681b      	ldr	r3, [r3, #0]
 802c9a6:	4a22      	ldr	r2, [pc, #136]	; (802ca30 <HAL_DMA_Abort_IT+0x1c4>)
 802c9a8:	4293      	cmp	r3, r2
 802c9aa:	d01d      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c9ac:	687b      	ldr	r3, [r7, #4]
 802c9ae:	681b      	ldr	r3, [r3, #0]
 802c9b0:	4a20      	ldr	r2, [pc, #128]	; (802ca34 <HAL_DMA_Abort_IT+0x1c8>)
 802c9b2:	4293      	cmp	r3, r2
 802c9b4:	d018      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c9b6:	687b      	ldr	r3, [r7, #4]
 802c9b8:	681b      	ldr	r3, [r3, #0]
 802c9ba:	4a1f      	ldr	r2, [pc, #124]	; (802ca38 <HAL_DMA_Abort_IT+0x1cc>)
 802c9bc:	4293      	cmp	r3, r2
 802c9be:	d013      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c9c0:	687b      	ldr	r3, [r7, #4]
 802c9c2:	681b      	ldr	r3, [r3, #0]
 802c9c4:	4a1d      	ldr	r2, [pc, #116]	; (802ca3c <HAL_DMA_Abort_IT+0x1d0>)
 802c9c6:	4293      	cmp	r3, r2
 802c9c8:	d00e      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c9ca:	687b      	ldr	r3, [r7, #4]
 802c9cc:	681b      	ldr	r3, [r3, #0]
 802c9ce:	4a1c      	ldr	r2, [pc, #112]	; (802ca40 <HAL_DMA_Abort_IT+0x1d4>)
 802c9d0:	4293      	cmp	r3, r2
 802c9d2:	d009      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c9d4:	687b      	ldr	r3, [r7, #4]
 802c9d6:	681b      	ldr	r3, [r3, #0]
 802c9d8:	4a1a      	ldr	r2, [pc, #104]	; (802ca44 <HAL_DMA_Abort_IT+0x1d8>)
 802c9da:	4293      	cmp	r3, r2
 802c9dc:	d004      	beq.n	802c9e8 <HAL_DMA_Abort_IT+0x17c>
 802c9de:	687b      	ldr	r3, [r7, #4]
 802c9e0:	681b      	ldr	r3, [r3, #0]
 802c9e2:	4a19      	ldr	r2, [pc, #100]	; (802ca48 <HAL_DMA_Abort_IT+0x1dc>)
 802c9e4:	4293      	cmp	r3, r2
 802c9e6:	d108      	bne.n	802c9fa <HAL_DMA_Abort_IT+0x18e>
 802c9e8:	687b      	ldr	r3, [r7, #4]
 802c9ea:	681b      	ldr	r3, [r3, #0]
 802c9ec:	681a      	ldr	r2, [r3, #0]
 802c9ee:	687b      	ldr	r3, [r7, #4]
 802c9f0:	681b      	ldr	r3, [r3, #0]
 802c9f2:	f022 0201 	bic.w	r2, r2, #1
 802c9f6:	601a      	str	r2, [r3, #0]
 802c9f8:	e178      	b.n	802ccec <HAL_DMA_Abort_IT+0x480>
 802c9fa:	687b      	ldr	r3, [r7, #4]
 802c9fc:	681b      	ldr	r3, [r3, #0]
 802c9fe:	681a      	ldr	r2, [r3, #0]
 802ca00:	687b      	ldr	r3, [r7, #4]
 802ca02:	681b      	ldr	r3, [r3, #0]
 802ca04:	f022 0201 	bic.w	r2, r2, #1
 802ca08:	601a      	str	r2, [r3, #0]
 802ca0a:	e16f      	b.n	802ccec <HAL_DMA_Abort_IT+0x480>
 802ca0c:	40020010 	.word	0x40020010
 802ca10:	40020028 	.word	0x40020028
 802ca14:	40020040 	.word	0x40020040
 802ca18:	40020058 	.word	0x40020058
 802ca1c:	40020070 	.word	0x40020070
 802ca20:	40020088 	.word	0x40020088
 802ca24:	400200a0 	.word	0x400200a0
 802ca28:	400200b8 	.word	0x400200b8
 802ca2c:	40020410 	.word	0x40020410
 802ca30:	40020428 	.word	0x40020428
 802ca34:	40020440 	.word	0x40020440
 802ca38:	40020458 	.word	0x40020458
 802ca3c:	40020470 	.word	0x40020470
 802ca40:	40020488 	.word	0x40020488
 802ca44:	400204a0 	.word	0x400204a0
 802ca48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802ca4c:	687b      	ldr	r3, [r7, #4]
 802ca4e:	681b      	ldr	r3, [r3, #0]
 802ca50:	681a      	ldr	r2, [r3, #0]
 802ca52:	687b      	ldr	r3, [r7, #4]
 802ca54:	681b      	ldr	r3, [r3, #0]
 802ca56:	f022 020e 	bic.w	r2, r2, #14
 802ca5a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 802ca5c:	687b      	ldr	r3, [r7, #4]
 802ca5e:	681b      	ldr	r3, [r3, #0]
 802ca60:	4a6c      	ldr	r2, [pc, #432]	; (802cc14 <HAL_DMA_Abort_IT+0x3a8>)
 802ca62:	4293      	cmp	r3, r2
 802ca64:	d04a      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802ca66:	687b      	ldr	r3, [r7, #4]
 802ca68:	681b      	ldr	r3, [r3, #0]
 802ca6a:	4a6b      	ldr	r2, [pc, #428]	; (802cc18 <HAL_DMA_Abort_IT+0x3ac>)
 802ca6c:	4293      	cmp	r3, r2
 802ca6e:	d045      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802ca70:	687b      	ldr	r3, [r7, #4]
 802ca72:	681b      	ldr	r3, [r3, #0]
 802ca74:	4a69      	ldr	r2, [pc, #420]	; (802cc1c <HAL_DMA_Abort_IT+0x3b0>)
 802ca76:	4293      	cmp	r3, r2
 802ca78:	d040      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802ca7a:	687b      	ldr	r3, [r7, #4]
 802ca7c:	681b      	ldr	r3, [r3, #0]
 802ca7e:	4a68      	ldr	r2, [pc, #416]	; (802cc20 <HAL_DMA_Abort_IT+0x3b4>)
 802ca80:	4293      	cmp	r3, r2
 802ca82:	d03b      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802ca84:	687b      	ldr	r3, [r7, #4]
 802ca86:	681b      	ldr	r3, [r3, #0]
 802ca88:	4a66      	ldr	r2, [pc, #408]	; (802cc24 <HAL_DMA_Abort_IT+0x3b8>)
 802ca8a:	4293      	cmp	r3, r2
 802ca8c:	d036      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802ca8e:	687b      	ldr	r3, [r7, #4]
 802ca90:	681b      	ldr	r3, [r3, #0]
 802ca92:	4a65      	ldr	r2, [pc, #404]	; (802cc28 <HAL_DMA_Abort_IT+0x3bc>)
 802ca94:	4293      	cmp	r3, r2
 802ca96:	d031      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802ca98:	687b      	ldr	r3, [r7, #4]
 802ca9a:	681b      	ldr	r3, [r3, #0]
 802ca9c:	4a63      	ldr	r2, [pc, #396]	; (802cc2c <HAL_DMA_Abort_IT+0x3c0>)
 802ca9e:	4293      	cmp	r3, r2
 802caa0:	d02c      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802caa2:	687b      	ldr	r3, [r7, #4]
 802caa4:	681b      	ldr	r3, [r3, #0]
 802caa6:	4a62      	ldr	r2, [pc, #392]	; (802cc30 <HAL_DMA_Abort_IT+0x3c4>)
 802caa8:	4293      	cmp	r3, r2
 802caaa:	d027      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802caac:	687b      	ldr	r3, [r7, #4]
 802caae:	681b      	ldr	r3, [r3, #0]
 802cab0:	4a60      	ldr	r2, [pc, #384]	; (802cc34 <HAL_DMA_Abort_IT+0x3c8>)
 802cab2:	4293      	cmp	r3, r2
 802cab4:	d022      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802cab6:	687b      	ldr	r3, [r7, #4]
 802cab8:	681b      	ldr	r3, [r3, #0]
 802caba:	4a5f      	ldr	r2, [pc, #380]	; (802cc38 <HAL_DMA_Abort_IT+0x3cc>)
 802cabc:	4293      	cmp	r3, r2
 802cabe:	d01d      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802cac0:	687b      	ldr	r3, [r7, #4]
 802cac2:	681b      	ldr	r3, [r3, #0]
 802cac4:	4a5d      	ldr	r2, [pc, #372]	; (802cc3c <HAL_DMA_Abort_IT+0x3d0>)
 802cac6:	4293      	cmp	r3, r2
 802cac8:	d018      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802caca:	687b      	ldr	r3, [r7, #4]
 802cacc:	681b      	ldr	r3, [r3, #0]
 802cace:	4a5c      	ldr	r2, [pc, #368]	; (802cc40 <HAL_DMA_Abort_IT+0x3d4>)
 802cad0:	4293      	cmp	r3, r2
 802cad2:	d013      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802cad4:	687b      	ldr	r3, [r7, #4]
 802cad6:	681b      	ldr	r3, [r3, #0]
 802cad8:	4a5a      	ldr	r2, [pc, #360]	; (802cc44 <HAL_DMA_Abort_IT+0x3d8>)
 802cada:	4293      	cmp	r3, r2
 802cadc:	d00e      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802cade:	687b      	ldr	r3, [r7, #4]
 802cae0:	681b      	ldr	r3, [r3, #0]
 802cae2:	4a59      	ldr	r2, [pc, #356]	; (802cc48 <HAL_DMA_Abort_IT+0x3dc>)
 802cae4:	4293      	cmp	r3, r2
 802cae6:	d009      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802cae8:	687b      	ldr	r3, [r7, #4]
 802caea:	681b      	ldr	r3, [r3, #0]
 802caec:	4a57      	ldr	r2, [pc, #348]	; (802cc4c <HAL_DMA_Abort_IT+0x3e0>)
 802caee:	4293      	cmp	r3, r2
 802caf0:	d004      	beq.n	802cafc <HAL_DMA_Abort_IT+0x290>
 802caf2:	687b      	ldr	r3, [r7, #4]
 802caf4:	681b      	ldr	r3, [r3, #0]
 802caf6:	4a56      	ldr	r2, [pc, #344]	; (802cc50 <HAL_DMA_Abort_IT+0x3e4>)
 802caf8:	4293      	cmp	r3, r2
 802cafa:	d108      	bne.n	802cb0e <HAL_DMA_Abort_IT+0x2a2>
 802cafc:	687b      	ldr	r3, [r7, #4]
 802cafe:	681b      	ldr	r3, [r3, #0]
 802cb00:	681a      	ldr	r2, [r3, #0]
 802cb02:	687b      	ldr	r3, [r7, #4]
 802cb04:	681b      	ldr	r3, [r3, #0]
 802cb06:	f022 0201 	bic.w	r2, r2, #1
 802cb0a:	601a      	str	r2, [r3, #0]
 802cb0c:	e007      	b.n	802cb1e <HAL_DMA_Abort_IT+0x2b2>
 802cb0e:	687b      	ldr	r3, [r7, #4]
 802cb10:	681b      	ldr	r3, [r3, #0]
 802cb12:	681a      	ldr	r2, [r3, #0]
 802cb14:	687b      	ldr	r3, [r7, #4]
 802cb16:	681b      	ldr	r3, [r3, #0]
 802cb18:	f022 0201 	bic.w	r2, r2, #1
 802cb1c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802cb1e:	687b      	ldr	r3, [r7, #4]
 802cb20:	681b      	ldr	r3, [r3, #0]
 802cb22:	4a3c      	ldr	r2, [pc, #240]	; (802cc14 <HAL_DMA_Abort_IT+0x3a8>)
 802cb24:	4293      	cmp	r3, r2
 802cb26:	d072      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cb28:	687b      	ldr	r3, [r7, #4]
 802cb2a:	681b      	ldr	r3, [r3, #0]
 802cb2c:	4a3a      	ldr	r2, [pc, #232]	; (802cc18 <HAL_DMA_Abort_IT+0x3ac>)
 802cb2e:	4293      	cmp	r3, r2
 802cb30:	d06d      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cb32:	687b      	ldr	r3, [r7, #4]
 802cb34:	681b      	ldr	r3, [r3, #0]
 802cb36:	4a39      	ldr	r2, [pc, #228]	; (802cc1c <HAL_DMA_Abort_IT+0x3b0>)
 802cb38:	4293      	cmp	r3, r2
 802cb3a:	d068      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cb3c:	687b      	ldr	r3, [r7, #4]
 802cb3e:	681b      	ldr	r3, [r3, #0]
 802cb40:	4a37      	ldr	r2, [pc, #220]	; (802cc20 <HAL_DMA_Abort_IT+0x3b4>)
 802cb42:	4293      	cmp	r3, r2
 802cb44:	d063      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cb46:	687b      	ldr	r3, [r7, #4]
 802cb48:	681b      	ldr	r3, [r3, #0]
 802cb4a:	4a36      	ldr	r2, [pc, #216]	; (802cc24 <HAL_DMA_Abort_IT+0x3b8>)
 802cb4c:	4293      	cmp	r3, r2
 802cb4e:	d05e      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cb50:	687b      	ldr	r3, [r7, #4]
 802cb52:	681b      	ldr	r3, [r3, #0]
 802cb54:	4a34      	ldr	r2, [pc, #208]	; (802cc28 <HAL_DMA_Abort_IT+0x3bc>)
 802cb56:	4293      	cmp	r3, r2
 802cb58:	d059      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cb5a:	687b      	ldr	r3, [r7, #4]
 802cb5c:	681b      	ldr	r3, [r3, #0]
 802cb5e:	4a33      	ldr	r2, [pc, #204]	; (802cc2c <HAL_DMA_Abort_IT+0x3c0>)
 802cb60:	4293      	cmp	r3, r2
 802cb62:	d054      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cb64:	687b      	ldr	r3, [r7, #4]
 802cb66:	681b      	ldr	r3, [r3, #0]
 802cb68:	4a31      	ldr	r2, [pc, #196]	; (802cc30 <HAL_DMA_Abort_IT+0x3c4>)
 802cb6a:	4293      	cmp	r3, r2
 802cb6c:	d04f      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cb6e:	687b      	ldr	r3, [r7, #4]
 802cb70:	681b      	ldr	r3, [r3, #0]
 802cb72:	4a30      	ldr	r2, [pc, #192]	; (802cc34 <HAL_DMA_Abort_IT+0x3c8>)
 802cb74:	4293      	cmp	r3, r2
 802cb76:	d04a      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cb78:	687b      	ldr	r3, [r7, #4]
 802cb7a:	681b      	ldr	r3, [r3, #0]
 802cb7c:	4a2e      	ldr	r2, [pc, #184]	; (802cc38 <HAL_DMA_Abort_IT+0x3cc>)
 802cb7e:	4293      	cmp	r3, r2
 802cb80:	d045      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cb82:	687b      	ldr	r3, [r7, #4]
 802cb84:	681b      	ldr	r3, [r3, #0]
 802cb86:	4a2d      	ldr	r2, [pc, #180]	; (802cc3c <HAL_DMA_Abort_IT+0x3d0>)
 802cb88:	4293      	cmp	r3, r2
 802cb8a:	d040      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cb8c:	687b      	ldr	r3, [r7, #4]
 802cb8e:	681b      	ldr	r3, [r3, #0]
 802cb90:	4a2b      	ldr	r2, [pc, #172]	; (802cc40 <HAL_DMA_Abort_IT+0x3d4>)
 802cb92:	4293      	cmp	r3, r2
 802cb94:	d03b      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cb96:	687b      	ldr	r3, [r7, #4]
 802cb98:	681b      	ldr	r3, [r3, #0]
 802cb9a:	4a2a      	ldr	r2, [pc, #168]	; (802cc44 <HAL_DMA_Abort_IT+0x3d8>)
 802cb9c:	4293      	cmp	r3, r2
 802cb9e:	d036      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cba0:	687b      	ldr	r3, [r7, #4]
 802cba2:	681b      	ldr	r3, [r3, #0]
 802cba4:	4a28      	ldr	r2, [pc, #160]	; (802cc48 <HAL_DMA_Abort_IT+0x3dc>)
 802cba6:	4293      	cmp	r3, r2
 802cba8:	d031      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cbaa:	687b      	ldr	r3, [r7, #4]
 802cbac:	681b      	ldr	r3, [r3, #0]
 802cbae:	4a27      	ldr	r2, [pc, #156]	; (802cc4c <HAL_DMA_Abort_IT+0x3e0>)
 802cbb0:	4293      	cmp	r3, r2
 802cbb2:	d02c      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cbb4:	687b      	ldr	r3, [r7, #4]
 802cbb6:	681b      	ldr	r3, [r3, #0]
 802cbb8:	4a25      	ldr	r2, [pc, #148]	; (802cc50 <HAL_DMA_Abort_IT+0x3e4>)
 802cbba:	4293      	cmp	r3, r2
 802cbbc:	d027      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cbbe:	687b      	ldr	r3, [r7, #4]
 802cbc0:	681b      	ldr	r3, [r3, #0]
 802cbc2:	4a24      	ldr	r2, [pc, #144]	; (802cc54 <HAL_DMA_Abort_IT+0x3e8>)
 802cbc4:	4293      	cmp	r3, r2
 802cbc6:	d022      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cbc8:	687b      	ldr	r3, [r7, #4]
 802cbca:	681b      	ldr	r3, [r3, #0]
 802cbcc:	4a22      	ldr	r2, [pc, #136]	; (802cc58 <HAL_DMA_Abort_IT+0x3ec>)
 802cbce:	4293      	cmp	r3, r2
 802cbd0:	d01d      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cbd2:	687b      	ldr	r3, [r7, #4]
 802cbd4:	681b      	ldr	r3, [r3, #0]
 802cbd6:	4a21      	ldr	r2, [pc, #132]	; (802cc5c <HAL_DMA_Abort_IT+0x3f0>)
 802cbd8:	4293      	cmp	r3, r2
 802cbda:	d018      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cbdc:	687b      	ldr	r3, [r7, #4]
 802cbde:	681b      	ldr	r3, [r3, #0]
 802cbe0:	4a1f      	ldr	r2, [pc, #124]	; (802cc60 <HAL_DMA_Abort_IT+0x3f4>)
 802cbe2:	4293      	cmp	r3, r2
 802cbe4:	d013      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cbe6:	687b      	ldr	r3, [r7, #4]
 802cbe8:	681b      	ldr	r3, [r3, #0]
 802cbea:	4a1e      	ldr	r2, [pc, #120]	; (802cc64 <HAL_DMA_Abort_IT+0x3f8>)
 802cbec:	4293      	cmp	r3, r2
 802cbee:	d00e      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cbf0:	687b      	ldr	r3, [r7, #4]
 802cbf2:	681b      	ldr	r3, [r3, #0]
 802cbf4:	4a1c      	ldr	r2, [pc, #112]	; (802cc68 <HAL_DMA_Abort_IT+0x3fc>)
 802cbf6:	4293      	cmp	r3, r2
 802cbf8:	d009      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cbfa:	687b      	ldr	r3, [r7, #4]
 802cbfc:	681b      	ldr	r3, [r3, #0]
 802cbfe:	4a1b      	ldr	r2, [pc, #108]	; (802cc6c <HAL_DMA_Abort_IT+0x400>)
 802cc00:	4293      	cmp	r3, r2
 802cc02:	d004      	beq.n	802cc0e <HAL_DMA_Abort_IT+0x3a2>
 802cc04:	687b      	ldr	r3, [r7, #4]
 802cc06:	681b      	ldr	r3, [r3, #0]
 802cc08:	4a19      	ldr	r2, [pc, #100]	; (802cc70 <HAL_DMA_Abort_IT+0x404>)
 802cc0a:	4293      	cmp	r3, r2
 802cc0c:	d132      	bne.n	802cc74 <HAL_DMA_Abort_IT+0x408>
 802cc0e:	2301      	movs	r3, #1
 802cc10:	e031      	b.n	802cc76 <HAL_DMA_Abort_IT+0x40a>
 802cc12:	bf00      	nop
 802cc14:	40020010 	.word	0x40020010
 802cc18:	40020028 	.word	0x40020028
 802cc1c:	40020040 	.word	0x40020040
 802cc20:	40020058 	.word	0x40020058
 802cc24:	40020070 	.word	0x40020070
 802cc28:	40020088 	.word	0x40020088
 802cc2c:	400200a0 	.word	0x400200a0
 802cc30:	400200b8 	.word	0x400200b8
 802cc34:	40020410 	.word	0x40020410
 802cc38:	40020428 	.word	0x40020428
 802cc3c:	40020440 	.word	0x40020440
 802cc40:	40020458 	.word	0x40020458
 802cc44:	40020470 	.word	0x40020470
 802cc48:	40020488 	.word	0x40020488
 802cc4c:	400204a0 	.word	0x400204a0
 802cc50:	400204b8 	.word	0x400204b8
 802cc54:	58025408 	.word	0x58025408
 802cc58:	5802541c 	.word	0x5802541c
 802cc5c:	58025430 	.word	0x58025430
 802cc60:	58025444 	.word	0x58025444
 802cc64:	58025458 	.word	0x58025458
 802cc68:	5802546c 	.word	0x5802546c
 802cc6c:	58025480 	.word	0x58025480
 802cc70:	58025494 	.word	0x58025494
 802cc74:	2300      	movs	r3, #0
 802cc76:	2b00      	cmp	r3, #0
 802cc78:	d028      	beq.n	802cccc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802cc7a:	687b      	ldr	r3, [r7, #4]
 802cc7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802cc7e:	681a      	ldr	r2, [r3, #0]
 802cc80:	687b      	ldr	r3, [r7, #4]
 802cc82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802cc84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802cc88:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802cc8a:	687b      	ldr	r3, [r7, #4]
 802cc8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cc8e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802cc90:	687b      	ldr	r3, [r7, #4]
 802cc92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cc94:	f003 031f 	and.w	r3, r3, #31
 802cc98:	2201      	movs	r2, #1
 802cc9a:	409a      	lsls	r2, r3
 802cc9c:	68fb      	ldr	r3, [r7, #12]
 802cc9e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802cca0:	687b      	ldr	r3, [r7, #4]
 802cca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802cca4:	687a      	ldr	r2, [r7, #4]
 802cca6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802cca8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 802ccaa:	687b      	ldr	r3, [r7, #4]
 802ccac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ccae:	2b00      	cmp	r3, #0
 802ccb0:	d00c      	beq.n	802cccc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802ccb2:	687b      	ldr	r3, [r7, #4]
 802ccb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ccb6:	681a      	ldr	r2, [r3, #0]
 802ccb8:	687b      	ldr	r3, [r7, #4]
 802ccba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ccbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802ccc0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802ccc2:	687b      	ldr	r3, [r7, #4]
 802ccc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802ccc6:	687a      	ldr	r2, [r7, #4]
 802ccc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802ccca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802cccc:	687b      	ldr	r3, [r7, #4]
 802ccce:	2201      	movs	r2, #1
 802ccd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802ccd4:	687b      	ldr	r3, [r7, #4]
 802ccd6:	2200      	movs	r2, #0
 802ccd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 802ccdc:	687b      	ldr	r3, [r7, #4]
 802ccde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802cce0:	2b00      	cmp	r3, #0
 802cce2:	d003      	beq.n	802ccec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 802cce4:	687b      	ldr	r3, [r7, #4]
 802cce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802cce8:	6878      	ldr	r0, [r7, #4]
 802ccea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 802ccec:	2300      	movs	r3, #0
}
 802ccee:	4618      	mov	r0, r3
 802ccf0:	3710      	adds	r7, #16
 802ccf2:	46bd      	mov	sp, r7
 802ccf4:	bd80      	pop	{r7, pc}
 802ccf6:	bf00      	nop

0802ccf8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802ccf8:	b580      	push	{r7, lr}
 802ccfa:	b08a      	sub	sp, #40	; 0x28
 802ccfc:	af00      	add	r7, sp, #0
 802ccfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 802cd00:	2300      	movs	r3, #0
 802cd02:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 802cd04:	4b67      	ldr	r3, [pc, #412]	; (802cea4 <HAL_DMA_IRQHandler+0x1ac>)
 802cd06:	681b      	ldr	r3, [r3, #0]
 802cd08:	4a67      	ldr	r2, [pc, #412]	; (802cea8 <HAL_DMA_IRQHandler+0x1b0>)
 802cd0a:	fba2 2303 	umull	r2, r3, r2, r3
 802cd0e:	0a9b      	lsrs	r3, r3, #10
 802cd10:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802cd12:	687b      	ldr	r3, [r7, #4]
 802cd14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cd16:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802cd18:	687b      	ldr	r3, [r7, #4]
 802cd1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cd1c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 802cd1e:	6a3b      	ldr	r3, [r7, #32]
 802cd20:	681b      	ldr	r3, [r3, #0]
 802cd22:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 802cd24:	69fb      	ldr	r3, [r7, #28]
 802cd26:	681b      	ldr	r3, [r3, #0]
 802cd28:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 802cd2a:	687b      	ldr	r3, [r7, #4]
 802cd2c:	681b      	ldr	r3, [r3, #0]
 802cd2e:	4a5f      	ldr	r2, [pc, #380]	; (802ceac <HAL_DMA_IRQHandler+0x1b4>)
 802cd30:	4293      	cmp	r3, r2
 802cd32:	d04a      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cd34:	687b      	ldr	r3, [r7, #4]
 802cd36:	681b      	ldr	r3, [r3, #0]
 802cd38:	4a5d      	ldr	r2, [pc, #372]	; (802ceb0 <HAL_DMA_IRQHandler+0x1b8>)
 802cd3a:	4293      	cmp	r3, r2
 802cd3c:	d045      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cd3e:	687b      	ldr	r3, [r7, #4]
 802cd40:	681b      	ldr	r3, [r3, #0]
 802cd42:	4a5c      	ldr	r2, [pc, #368]	; (802ceb4 <HAL_DMA_IRQHandler+0x1bc>)
 802cd44:	4293      	cmp	r3, r2
 802cd46:	d040      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cd48:	687b      	ldr	r3, [r7, #4]
 802cd4a:	681b      	ldr	r3, [r3, #0]
 802cd4c:	4a5a      	ldr	r2, [pc, #360]	; (802ceb8 <HAL_DMA_IRQHandler+0x1c0>)
 802cd4e:	4293      	cmp	r3, r2
 802cd50:	d03b      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cd52:	687b      	ldr	r3, [r7, #4]
 802cd54:	681b      	ldr	r3, [r3, #0]
 802cd56:	4a59      	ldr	r2, [pc, #356]	; (802cebc <HAL_DMA_IRQHandler+0x1c4>)
 802cd58:	4293      	cmp	r3, r2
 802cd5a:	d036      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cd5c:	687b      	ldr	r3, [r7, #4]
 802cd5e:	681b      	ldr	r3, [r3, #0]
 802cd60:	4a57      	ldr	r2, [pc, #348]	; (802cec0 <HAL_DMA_IRQHandler+0x1c8>)
 802cd62:	4293      	cmp	r3, r2
 802cd64:	d031      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cd66:	687b      	ldr	r3, [r7, #4]
 802cd68:	681b      	ldr	r3, [r3, #0]
 802cd6a:	4a56      	ldr	r2, [pc, #344]	; (802cec4 <HAL_DMA_IRQHandler+0x1cc>)
 802cd6c:	4293      	cmp	r3, r2
 802cd6e:	d02c      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cd70:	687b      	ldr	r3, [r7, #4]
 802cd72:	681b      	ldr	r3, [r3, #0]
 802cd74:	4a54      	ldr	r2, [pc, #336]	; (802cec8 <HAL_DMA_IRQHandler+0x1d0>)
 802cd76:	4293      	cmp	r3, r2
 802cd78:	d027      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cd7a:	687b      	ldr	r3, [r7, #4]
 802cd7c:	681b      	ldr	r3, [r3, #0]
 802cd7e:	4a53      	ldr	r2, [pc, #332]	; (802cecc <HAL_DMA_IRQHandler+0x1d4>)
 802cd80:	4293      	cmp	r3, r2
 802cd82:	d022      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cd84:	687b      	ldr	r3, [r7, #4]
 802cd86:	681b      	ldr	r3, [r3, #0]
 802cd88:	4a51      	ldr	r2, [pc, #324]	; (802ced0 <HAL_DMA_IRQHandler+0x1d8>)
 802cd8a:	4293      	cmp	r3, r2
 802cd8c:	d01d      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cd8e:	687b      	ldr	r3, [r7, #4]
 802cd90:	681b      	ldr	r3, [r3, #0]
 802cd92:	4a50      	ldr	r2, [pc, #320]	; (802ced4 <HAL_DMA_IRQHandler+0x1dc>)
 802cd94:	4293      	cmp	r3, r2
 802cd96:	d018      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cd98:	687b      	ldr	r3, [r7, #4]
 802cd9a:	681b      	ldr	r3, [r3, #0]
 802cd9c:	4a4e      	ldr	r2, [pc, #312]	; (802ced8 <HAL_DMA_IRQHandler+0x1e0>)
 802cd9e:	4293      	cmp	r3, r2
 802cda0:	d013      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cda2:	687b      	ldr	r3, [r7, #4]
 802cda4:	681b      	ldr	r3, [r3, #0]
 802cda6:	4a4d      	ldr	r2, [pc, #308]	; (802cedc <HAL_DMA_IRQHandler+0x1e4>)
 802cda8:	4293      	cmp	r3, r2
 802cdaa:	d00e      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cdac:	687b      	ldr	r3, [r7, #4]
 802cdae:	681b      	ldr	r3, [r3, #0]
 802cdb0:	4a4b      	ldr	r2, [pc, #300]	; (802cee0 <HAL_DMA_IRQHandler+0x1e8>)
 802cdb2:	4293      	cmp	r3, r2
 802cdb4:	d009      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cdb6:	687b      	ldr	r3, [r7, #4]
 802cdb8:	681b      	ldr	r3, [r3, #0]
 802cdba:	4a4a      	ldr	r2, [pc, #296]	; (802cee4 <HAL_DMA_IRQHandler+0x1ec>)
 802cdbc:	4293      	cmp	r3, r2
 802cdbe:	d004      	beq.n	802cdca <HAL_DMA_IRQHandler+0xd2>
 802cdc0:	687b      	ldr	r3, [r7, #4]
 802cdc2:	681b      	ldr	r3, [r3, #0]
 802cdc4:	4a48      	ldr	r2, [pc, #288]	; (802cee8 <HAL_DMA_IRQHandler+0x1f0>)
 802cdc6:	4293      	cmp	r3, r2
 802cdc8:	d101      	bne.n	802cdce <HAL_DMA_IRQHandler+0xd6>
 802cdca:	2301      	movs	r3, #1
 802cdcc:	e000      	b.n	802cdd0 <HAL_DMA_IRQHandler+0xd8>
 802cdce:	2300      	movs	r3, #0
 802cdd0:	2b00      	cmp	r3, #0
 802cdd2:	f000 842b 	beq.w	802d62c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802cdd6:	687b      	ldr	r3, [r7, #4]
 802cdd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cdda:	f003 031f 	and.w	r3, r3, #31
 802cdde:	2208      	movs	r2, #8
 802cde0:	409a      	lsls	r2, r3
 802cde2:	69bb      	ldr	r3, [r7, #24]
 802cde4:	4013      	ands	r3, r2
 802cde6:	2b00      	cmp	r3, #0
 802cde8:	f000 80a2 	beq.w	802cf30 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 802cdec:	687b      	ldr	r3, [r7, #4]
 802cdee:	681b      	ldr	r3, [r3, #0]
 802cdf0:	4a2e      	ldr	r2, [pc, #184]	; (802ceac <HAL_DMA_IRQHandler+0x1b4>)
 802cdf2:	4293      	cmp	r3, r2
 802cdf4:	d04a      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802cdf6:	687b      	ldr	r3, [r7, #4]
 802cdf8:	681b      	ldr	r3, [r3, #0]
 802cdfa:	4a2d      	ldr	r2, [pc, #180]	; (802ceb0 <HAL_DMA_IRQHandler+0x1b8>)
 802cdfc:	4293      	cmp	r3, r2
 802cdfe:	d045      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce00:	687b      	ldr	r3, [r7, #4]
 802ce02:	681b      	ldr	r3, [r3, #0]
 802ce04:	4a2b      	ldr	r2, [pc, #172]	; (802ceb4 <HAL_DMA_IRQHandler+0x1bc>)
 802ce06:	4293      	cmp	r3, r2
 802ce08:	d040      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce0a:	687b      	ldr	r3, [r7, #4]
 802ce0c:	681b      	ldr	r3, [r3, #0]
 802ce0e:	4a2a      	ldr	r2, [pc, #168]	; (802ceb8 <HAL_DMA_IRQHandler+0x1c0>)
 802ce10:	4293      	cmp	r3, r2
 802ce12:	d03b      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce14:	687b      	ldr	r3, [r7, #4]
 802ce16:	681b      	ldr	r3, [r3, #0]
 802ce18:	4a28      	ldr	r2, [pc, #160]	; (802cebc <HAL_DMA_IRQHandler+0x1c4>)
 802ce1a:	4293      	cmp	r3, r2
 802ce1c:	d036      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce1e:	687b      	ldr	r3, [r7, #4]
 802ce20:	681b      	ldr	r3, [r3, #0]
 802ce22:	4a27      	ldr	r2, [pc, #156]	; (802cec0 <HAL_DMA_IRQHandler+0x1c8>)
 802ce24:	4293      	cmp	r3, r2
 802ce26:	d031      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce28:	687b      	ldr	r3, [r7, #4]
 802ce2a:	681b      	ldr	r3, [r3, #0]
 802ce2c:	4a25      	ldr	r2, [pc, #148]	; (802cec4 <HAL_DMA_IRQHandler+0x1cc>)
 802ce2e:	4293      	cmp	r3, r2
 802ce30:	d02c      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce32:	687b      	ldr	r3, [r7, #4]
 802ce34:	681b      	ldr	r3, [r3, #0]
 802ce36:	4a24      	ldr	r2, [pc, #144]	; (802cec8 <HAL_DMA_IRQHandler+0x1d0>)
 802ce38:	4293      	cmp	r3, r2
 802ce3a:	d027      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce3c:	687b      	ldr	r3, [r7, #4]
 802ce3e:	681b      	ldr	r3, [r3, #0]
 802ce40:	4a22      	ldr	r2, [pc, #136]	; (802cecc <HAL_DMA_IRQHandler+0x1d4>)
 802ce42:	4293      	cmp	r3, r2
 802ce44:	d022      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce46:	687b      	ldr	r3, [r7, #4]
 802ce48:	681b      	ldr	r3, [r3, #0]
 802ce4a:	4a21      	ldr	r2, [pc, #132]	; (802ced0 <HAL_DMA_IRQHandler+0x1d8>)
 802ce4c:	4293      	cmp	r3, r2
 802ce4e:	d01d      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce50:	687b      	ldr	r3, [r7, #4]
 802ce52:	681b      	ldr	r3, [r3, #0]
 802ce54:	4a1f      	ldr	r2, [pc, #124]	; (802ced4 <HAL_DMA_IRQHandler+0x1dc>)
 802ce56:	4293      	cmp	r3, r2
 802ce58:	d018      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce5a:	687b      	ldr	r3, [r7, #4]
 802ce5c:	681b      	ldr	r3, [r3, #0]
 802ce5e:	4a1e      	ldr	r2, [pc, #120]	; (802ced8 <HAL_DMA_IRQHandler+0x1e0>)
 802ce60:	4293      	cmp	r3, r2
 802ce62:	d013      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce64:	687b      	ldr	r3, [r7, #4]
 802ce66:	681b      	ldr	r3, [r3, #0]
 802ce68:	4a1c      	ldr	r2, [pc, #112]	; (802cedc <HAL_DMA_IRQHandler+0x1e4>)
 802ce6a:	4293      	cmp	r3, r2
 802ce6c:	d00e      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce6e:	687b      	ldr	r3, [r7, #4]
 802ce70:	681b      	ldr	r3, [r3, #0]
 802ce72:	4a1b      	ldr	r2, [pc, #108]	; (802cee0 <HAL_DMA_IRQHandler+0x1e8>)
 802ce74:	4293      	cmp	r3, r2
 802ce76:	d009      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce78:	687b      	ldr	r3, [r7, #4]
 802ce7a:	681b      	ldr	r3, [r3, #0]
 802ce7c:	4a19      	ldr	r2, [pc, #100]	; (802cee4 <HAL_DMA_IRQHandler+0x1ec>)
 802ce7e:	4293      	cmp	r3, r2
 802ce80:	d004      	beq.n	802ce8c <HAL_DMA_IRQHandler+0x194>
 802ce82:	687b      	ldr	r3, [r7, #4]
 802ce84:	681b      	ldr	r3, [r3, #0]
 802ce86:	4a18      	ldr	r2, [pc, #96]	; (802cee8 <HAL_DMA_IRQHandler+0x1f0>)
 802ce88:	4293      	cmp	r3, r2
 802ce8a:	d12f      	bne.n	802ceec <HAL_DMA_IRQHandler+0x1f4>
 802ce8c:	687b      	ldr	r3, [r7, #4]
 802ce8e:	681b      	ldr	r3, [r3, #0]
 802ce90:	681b      	ldr	r3, [r3, #0]
 802ce92:	f003 0304 	and.w	r3, r3, #4
 802ce96:	2b00      	cmp	r3, #0
 802ce98:	bf14      	ite	ne
 802ce9a:	2301      	movne	r3, #1
 802ce9c:	2300      	moveq	r3, #0
 802ce9e:	b2db      	uxtb	r3, r3
 802cea0:	e02e      	b.n	802cf00 <HAL_DMA_IRQHandler+0x208>
 802cea2:	bf00      	nop
 802cea4:	24000004 	.word	0x24000004
 802cea8:	1b4e81b5 	.word	0x1b4e81b5
 802ceac:	40020010 	.word	0x40020010
 802ceb0:	40020028 	.word	0x40020028
 802ceb4:	40020040 	.word	0x40020040
 802ceb8:	40020058 	.word	0x40020058
 802cebc:	40020070 	.word	0x40020070
 802cec0:	40020088 	.word	0x40020088
 802cec4:	400200a0 	.word	0x400200a0
 802cec8:	400200b8 	.word	0x400200b8
 802cecc:	40020410 	.word	0x40020410
 802ced0:	40020428 	.word	0x40020428
 802ced4:	40020440 	.word	0x40020440
 802ced8:	40020458 	.word	0x40020458
 802cedc:	40020470 	.word	0x40020470
 802cee0:	40020488 	.word	0x40020488
 802cee4:	400204a0 	.word	0x400204a0
 802cee8:	400204b8 	.word	0x400204b8
 802ceec:	687b      	ldr	r3, [r7, #4]
 802ceee:	681b      	ldr	r3, [r3, #0]
 802cef0:	681b      	ldr	r3, [r3, #0]
 802cef2:	f003 0308 	and.w	r3, r3, #8
 802cef6:	2b00      	cmp	r3, #0
 802cef8:	bf14      	ite	ne
 802cefa:	2301      	movne	r3, #1
 802cefc:	2300      	moveq	r3, #0
 802cefe:	b2db      	uxtb	r3, r3
 802cf00:	2b00      	cmp	r3, #0
 802cf02:	d015      	beq.n	802cf30 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 802cf04:	687b      	ldr	r3, [r7, #4]
 802cf06:	681b      	ldr	r3, [r3, #0]
 802cf08:	681a      	ldr	r2, [r3, #0]
 802cf0a:	687b      	ldr	r3, [r7, #4]
 802cf0c:	681b      	ldr	r3, [r3, #0]
 802cf0e:	f022 0204 	bic.w	r2, r2, #4
 802cf12:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802cf14:	687b      	ldr	r3, [r7, #4]
 802cf16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cf18:	f003 031f 	and.w	r3, r3, #31
 802cf1c:	2208      	movs	r2, #8
 802cf1e:	409a      	lsls	r2, r3
 802cf20:	6a3b      	ldr	r3, [r7, #32]
 802cf22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802cf24:	687b      	ldr	r3, [r7, #4]
 802cf26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802cf28:	f043 0201 	orr.w	r2, r3, #1
 802cf2c:	687b      	ldr	r3, [r7, #4]
 802cf2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802cf30:	687b      	ldr	r3, [r7, #4]
 802cf32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cf34:	f003 031f 	and.w	r3, r3, #31
 802cf38:	69ba      	ldr	r2, [r7, #24]
 802cf3a:	fa22 f303 	lsr.w	r3, r2, r3
 802cf3e:	f003 0301 	and.w	r3, r3, #1
 802cf42:	2b00      	cmp	r3, #0
 802cf44:	d06e      	beq.n	802d024 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 802cf46:	687b      	ldr	r3, [r7, #4]
 802cf48:	681b      	ldr	r3, [r3, #0]
 802cf4a:	4a69      	ldr	r2, [pc, #420]	; (802d0f0 <HAL_DMA_IRQHandler+0x3f8>)
 802cf4c:	4293      	cmp	r3, r2
 802cf4e:	d04a      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cf50:	687b      	ldr	r3, [r7, #4]
 802cf52:	681b      	ldr	r3, [r3, #0]
 802cf54:	4a67      	ldr	r2, [pc, #412]	; (802d0f4 <HAL_DMA_IRQHandler+0x3fc>)
 802cf56:	4293      	cmp	r3, r2
 802cf58:	d045      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cf5a:	687b      	ldr	r3, [r7, #4]
 802cf5c:	681b      	ldr	r3, [r3, #0]
 802cf5e:	4a66      	ldr	r2, [pc, #408]	; (802d0f8 <HAL_DMA_IRQHandler+0x400>)
 802cf60:	4293      	cmp	r3, r2
 802cf62:	d040      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cf64:	687b      	ldr	r3, [r7, #4]
 802cf66:	681b      	ldr	r3, [r3, #0]
 802cf68:	4a64      	ldr	r2, [pc, #400]	; (802d0fc <HAL_DMA_IRQHandler+0x404>)
 802cf6a:	4293      	cmp	r3, r2
 802cf6c:	d03b      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cf6e:	687b      	ldr	r3, [r7, #4]
 802cf70:	681b      	ldr	r3, [r3, #0]
 802cf72:	4a63      	ldr	r2, [pc, #396]	; (802d100 <HAL_DMA_IRQHandler+0x408>)
 802cf74:	4293      	cmp	r3, r2
 802cf76:	d036      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cf78:	687b      	ldr	r3, [r7, #4]
 802cf7a:	681b      	ldr	r3, [r3, #0]
 802cf7c:	4a61      	ldr	r2, [pc, #388]	; (802d104 <HAL_DMA_IRQHandler+0x40c>)
 802cf7e:	4293      	cmp	r3, r2
 802cf80:	d031      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cf82:	687b      	ldr	r3, [r7, #4]
 802cf84:	681b      	ldr	r3, [r3, #0]
 802cf86:	4a60      	ldr	r2, [pc, #384]	; (802d108 <HAL_DMA_IRQHandler+0x410>)
 802cf88:	4293      	cmp	r3, r2
 802cf8a:	d02c      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cf8c:	687b      	ldr	r3, [r7, #4]
 802cf8e:	681b      	ldr	r3, [r3, #0]
 802cf90:	4a5e      	ldr	r2, [pc, #376]	; (802d10c <HAL_DMA_IRQHandler+0x414>)
 802cf92:	4293      	cmp	r3, r2
 802cf94:	d027      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cf96:	687b      	ldr	r3, [r7, #4]
 802cf98:	681b      	ldr	r3, [r3, #0]
 802cf9a:	4a5d      	ldr	r2, [pc, #372]	; (802d110 <HAL_DMA_IRQHandler+0x418>)
 802cf9c:	4293      	cmp	r3, r2
 802cf9e:	d022      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cfa0:	687b      	ldr	r3, [r7, #4]
 802cfa2:	681b      	ldr	r3, [r3, #0]
 802cfa4:	4a5b      	ldr	r2, [pc, #364]	; (802d114 <HAL_DMA_IRQHandler+0x41c>)
 802cfa6:	4293      	cmp	r3, r2
 802cfa8:	d01d      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cfaa:	687b      	ldr	r3, [r7, #4]
 802cfac:	681b      	ldr	r3, [r3, #0]
 802cfae:	4a5a      	ldr	r2, [pc, #360]	; (802d118 <HAL_DMA_IRQHandler+0x420>)
 802cfb0:	4293      	cmp	r3, r2
 802cfb2:	d018      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cfb4:	687b      	ldr	r3, [r7, #4]
 802cfb6:	681b      	ldr	r3, [r3, #0]
 802cfb8:	4a58      	ldr	r2, [pc, #352]	; (802d11c <HAL_DMA_IRQHandler+0x424>)
 802cfba:	4293      	cmp	r3, r2
 802cfbc:	d013      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cfbe:	687b      	ldr	r3, [r7, #4]
 802cfc0:	681b      	ldr	r3, [r3, #0]
 802cfc2:	4a57      	ldr	r2, [pc, #348]	; (802d120 <HAL_DMA_IRQHandler+0x428>)
 802cfc4:	4293      	cmp	r3, r2
 802cfc6:	d00e      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cfc8:	687b      	ldr	r3, [r7, #4]
 802cfca:	681b      	ldr	r3, [r3, #0]
 802cfcc:	4a55      	ldr	r2, [pc, #340]	; (802d124 <HAL_DMA_IRQHandler+0x42c>)
 802cfce:	4293      	cmp	r3, r2
 802cfd0:	d009      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cfd2:	687b      	ldr	r3, [r7, #4]
 802cfd4:	681b      	ldr	r3, [r3, #0]
 802cfd6:	4a54      	ldr	r2, [pc, #336]	; (802d128 <HAL_DMA_IRQHandler+0x430>)
 802cfd8:	4293      	cmp	r3, r2
 802cfda:	d004      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x2ee>
 802cfdc:	687b      	ldr	r3, [r7, #4]
 802cfde:	681b      	ldr	r3, [r3, #0]
 802cfe0:	4a52      	ldr	r2, [pc, #328]	; (802d12c <HAL_DMA_IRQHandler+0x434>)
 802cfe2:	4293      	cmp	r3, r2
 802cfe4:	d10a      	bne.n	802cffc <HAL_DMA_IRQHandler+0x304>
 802cfe6:	687b      	ldr	r3, [r7, #4]
 802cfe8:	681b      	ldr	r3, [r3, #0]
 802cfea:	695b      	ldr	r3, [r3, #20]
 802cfec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802cff0:	2b00      	cmp	r3, #0
 802cff2:	bf14      	ite	ne
 802cff4:	2301      	movne	r3, #1
 802cff6:	2300      	moveq	r3, #0
 802cff8:	b2db      	uxtb	r3, r3
 802cffa:	e003      	b.n	802d004 <HAL_DMA_IRQHandler+0x30c>
 802cffc:	687b      	ldr	r3, [r7, #4]
 802cffe:	681b      	ldr	r3, [r3, #0]
 802d000:	681b      	ldr	r3, [r3, #0]
 802d002:	2300      	movs	r3, #0
 802d004:	2b00      	cmp	r3, #0
 802d006:	d00d      	beq.n	802d024 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d008:	687b      	ldr	r3, [r7, #4]
 802d00a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d00c:	f003 031f 	and.w	r3, r3, #31
 802d010:	2201      	movs	r2, #1
 802d012:	409a      	lsls	r2, r3
 802d014:	6a3b      	ldr	r3, [r7, #32]
 802d016:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802d018:	687b      	ldr	r3, [r7, #4]
 802d01a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d01c:	f043 0202 	orr.w	r2, r3, #2
 802d020:	687b      	ldr	r3, [r7, #4]
 802d022:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802d024:	687b      	ldr	r3, [r7, #4]
 802d026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d028:	f003 031f 	and.w	r3, r3, #31
 802d02c:	2204      	movs	r2, #4
 802d02e:	409a      	lsls	r2, r3
 802d030:	69bb      	ldr	r3, [r7, #24]
 802d032:	4013      	ands	r3, r2
 802d034:	2b00      	cmp	r3, #0
 802d036:	f000 808f 	beq.w	802d158 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 802d03a:	687b      	ldr	r3, [r7, #4]
 802d03c:	681b      	ldr	r3, [r3, #0]
 802d03e:	4a2c      	ldr	r2, [pc, #176]	; (802d0f0 <HAL_DMA_IRQHandler+0x3f8>)
 802d040:	4293      	cmp	r3, r2
 802d042:	d04a      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d044:	687b      	ldr	r3, [r7, #4]
 802d046:	681b      	ldr	r3, [r3, #0]
 802d048:	4a2a      	ldr	r2, [pc, #168]	; (802d0f4 <HAL_DMA_IRQHandler+0x3fc>)
 802d04a:	4293      	cmp	r3, r2
 802d04c:	d045      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d04e:	687b      	ldr	r3, [r7, #4]
 802d050:	681b      	ldr	r3, [r3, #0]
 802d052:	4a29      	ldr	r2, [pc, #164]	; (802d0f8 <HAL_DMA_IRQHandler+0x400>)
 802d054:	4293      	cmp	r3, r2
 802d056:	d040      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d058:	687b      	ldr	r3, [r7, #4]
 802d05a:	681b      	ldr	r3, [r3, #0]
 802d05c:	4a27      	ldr	r2, [pc, #156]	; (802d0fc <HAL_DMA_IRQHandler+0x404>)
 802d05e:	4293      	cmp	r3, r2
 802d060:	d03b      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d062:	687b      	ldr	r3, [r7, #4]
 802d064:	681b      	ldr	r3, [r3, #0]
 802d066:	4a26      	ldr	r2, [pc, #152]	; (802d100 <HAL_DMA_IRQHandler+0x408>)
 802d068:	4293      	cmp	r3, r2
 802d06a:	d036      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d06c:	687b      	ldr	r3, [r7, #4]
 802d06e:	681b      	ldr	r3, [r3, #0]
 802d070:	4a24      	ldr	r2, [pc, #144]	; (802d104 <HAL_DMA_IRQHandler+0x40c>)
 802d072:	4293      	cmp	r3, r2
 802d074:	d031      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d076:	687b      	ldr	r3, [r7, #4]
 802d078:	681b      	ldr	r3, [r3, #0]
 802d07a:	4a23      	ldr	r2, [pc, #140]	; (802d108 <HAL_DMA_IRQHandler+0x410>)
 802d07c:	4293      	cmp	r3, r2
 802d07e:	d02c      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d080:	687b      	ldr	r3, [r7, #4]
 802d082:	681b      	ldr	r3, [r3, #0]
 802d084:	4a21      	ldr	r2, [pc, #132]	; (802d10c <HAL_DMA_IRQHandler+0x414>)
 802d086:	4293      	cmp	r3, r2
 802d088:	d027      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d08a:	687b      	ldr	r3, [r7, #4]
 802d08c:	681b      	ldr	r3, [r3, #0]
 802d08e:	4a20      	ldr	r2, [pc, #128]	; (802d110 <HAL_DMA_IRQHandler+0x418>)
 802d090:	4293      	cmp	r3, r2
 802d092:	d022      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d094:	687b      	ldr	r3, [r7, #4]
 802d096:	681b      	ldr	r3, [r3, #0]
 802d098:	4a1e      	ldr	r2, [pc, #120]	; (802d114 <HAL_DMA_IRQHandler+0x41c>)
 802d09a:	4293      	cmp	r3, r2
 802d09c:	d01d      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d09e:	687b      	ldr	r3, [r7, #4]
 802d0a0:	681b      	ldr	r3, [r3, #0]
 802d0a2:	4a1d      	ldr	r2, [pc, #116]	; (802d118 <HAL_DMA_IRQHandler+0x420>)
 802d0a4:	4293      	cmp	r3, r2
 802d0a6:	d018      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d0a8:	687b      	ldr	r3, [r7, #4]
 802d0aa:	681b      	ldr	r3, [r3, #0]
 802d0ac:	4a1b      	ldr	r2, [pc, #108]	; (802d11c <HAL_DMA_IRQHandler+0x424>)
 802d0ae:	4293      	cmp	r3, r2
 802d0b0:	d013      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d0b2:	687b      	ldr	r3, [r7, #4]
 802d0b4:	681b      	ldr	r3, [r3, #0]
 802d0b6:	4a1a      	ldr	r2, [pc, #104]	; (802d120 <HAL_DMA_IRQHandler+0x428>)
 802d0b8:	4293      	cmp	r3, r2
 802d0ba:	d00e      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d0bc:	687b      	ldr	r3, [r7, #4]
 802d0be:	681b      	ldr	r3, [r3, #0]
 802d0c0:	4a18      	ldr	r2, [pc, #96]	; (802d124 <HAL_DMA_IRQHandler+0x42c>)
 802d0c2:	4293      	cmp	r3, r2
 802d0c4:	d009      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d0c6:	687b      	ldr	r3, [r7, #4]
 802d0c8:	681b      	ldr	r3, [r3, #0]
 802d0ca:	4a17      	ldr	r2, [pc, #92]	; (802d128 <HAL_DMA_IRQHandler+0x430>)
 802d0cc:	4293      	cmp	r3, r2
 802d0ce:	d004      	beq.n	802d0da <HAL_DMA_IRQHandler+0x3e2>
 802d0d0:	687b      	ldr	r3, [r7, #4]
 802d0d2:	681b      	ldr	r3, [r3, #0]
 802d0d4:	4a15      	ldr	r2, [pc, #84]	; (802d12c <HAL_DMA_IRQHandler+0x434>)
 802d0d6:	4293      	cmp	r3, r2
 802d0d8:	d12a      	bne.n	802d130 <HAL_DMA_IRQHandler+0x438>
 802d0da:	687b      	ldr	r3, [r7, #4]
 802d0dc:	681b      	ldr	r3, [r3, #0]
 802d0de:	681b      	ldr	r3, [r3, #0]
 802d0e0:	f003 0302 	and.w	r3, r3, #2
 802d0e4:	2b00      	cmp	r3, #0
 802d0e6:	bf14      	ite	ne
 802d0e8:	2301      	movne	r3, #1
 802d0ea:	2300      	moveq	r3, #0
 802d0ec:	b2db      	uxtb	r3, r3
 802d0ee:	e023      	b.n	802d138 <HAL_DMA_IRQHandler+0x440>
 802d0f0:	40020010 	.word	0x40020010
 802d0f4:	40020028 	.word	0x40020028
 802d0f8:	40020040 	.word	0x40020040
 802d0fc:	40020058 	.word	0x40020058
 802d100:	40020070 	.word	0x40020070
 802d104:	40020088 	.word	0x40020088
 802d108:	400200a0 	.word	0x400200a0
 802d10c:	400200b8 	.word	0x400200b8
 802d110:	40020410 	.word	0x40020410
 802d114:	40020428 	.word	0x40020428
 802d118:	40020440 	.word	0x40020440
 802d11c:	40020458 	.word	0x40020458
 802d120:	40020470 	.word	0x40020470
 802d124:	40020488 	.word	0x40020488
 802d128:	400204a0 	.word	0x400204a0
 802d12c:	400204b8 	.word	0x400204b8
 802d130:	687b      	ldr	r3, [r7, #4]
 802d132:	681b      	ldr	r3, [r3, #0]
 802d134:	681b      	ldr	r3, [r3, #0]
 802d136:	2300      	movs	r3, #0
 802d138:	2b00      	cmp	r3, #0
 802d13a:	d00d      	beq.n	802d158 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d13c:	687b      	ldr	r3, [r7, #4]
 802d13e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d140:	f003 031f 	and.w	r3, r3, #31
 802d144:	2204      	movs	r2, #4
 802d146:	409a      	lsls	r2, r3
 802d148:	6a3b      	ldr	r3, [r7, #32]
 802d14a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802d14c:	687b      	ldr	r3, [r7, #4]
 802d14e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d150:	f043 0204 	orr.w	r2, r3, #4
 802d154:	687b      	ldr	r3, [r7, #4]
 802d156:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802d158:	687b      	ldr	r3, [r7, #4]
 802d15a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d15c:	f003 031f 	and.w	r3, r3, #31
 802d160:	2210      	movs	r2, #16
 802d162:	409a      	lsls	r2, r3
 802d164:	69bb      	ldr	r3, [r7, #24]
 802d166:	4013      	ands	r3, r2
 802d168:	2b00      	cmp	r3, #0
 802d16a:	f000 80a6 	beq.w	802d2ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 802d16e:	687b      	ldr	r3, [r7, #4]
 802d170:	681b      	ldr	r3, [r3, #0]
 802d172:	4a85      	ldr	r2, [pc, #532]	; (802d388 <HAL_DMA_IRQHandler+0x690>)
 802d174:	4293      	cmp	r3, r2
 802d176:	d04a      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d178:	687b      	ldr	r3, [r7, #4]
 802d17a:	681b      	ldr	r3, [r3, #0]
 802d17c:	4a83      	ldr	r2, [pc, #524]	; (802d38c <HAL_DMA_IRQHandler+0x694>)
 802d17e:	4293      	cmp	r3, r2
 802d180:	d045      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d182:	687b      	ldr	r3, [r7, #4]
 802d184:	681b      	ldr	r3, [r3, #0]
 802d186:	4a82      	ldr	r2, [pc, #520]	; (802d390 <HAL_DMA_IRQHandler+0x698>)
 802d188:	4293      	cmp	r3, r2
 802d18a:	d040      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d18c:	687b      	ldr	r3, [r7, #4]
 802d18e:	681b      	ldr	r3, [r3, #0]
 802d190:	4a80      	ldr	r2, [pc, #512]	; (802d394 <HAL_DMA_IRQHandler+0x69c>)
 802d192:	4293      	cmp	r3, r2
 802d194:	d03b      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d196:	687b      	ldr	r3, [r7, #4]
 802d198:	681b      	ldr	r3, [r3, #0]
 802d19a:	4a7f      	ldr	r2, [pc, #508]	; (802d398 <HAL_DMA_IRQHandler+0x6a0>)
 802d19c:	4293      	cmp	r3, r2
 802d19e:	d036      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d1a0:	687b      	ldr	r3, [r7, #4]
 802d1a2:	681b      	ldr	r3, [r3, #0]
 802d1a4:	4a7d      	ldr	r2, [pc, #500]	; (802d39c <HAL_DMA_IRQHandler+0x6a4>)
 802d1a6:	4293      	cmp	r3, r2
 802d1a8:	d031      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d1aa:	687b      	ldr	r3, [r7, #4]
 802d1ac:	681b      	ldr	r3, [r3, #0]
 802d1ae:	4a7c      	ldr	r2, [pc, #496]	; (802d3a0 <HAL_DMA_IRQHandler+0x6a8>)
 802d1b0:	4293      	cmp	r3, r2
 802d1b2:	d02c      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d1b4:	687b      	ldr	r3, [r7, #4]
 802d1b6:	681b      	ldr	r3, [r3, #0]
 802d1b8:	4a7a      	ldr	r2, [pc, #488]	; (802d3a4 <HAL_DMA_IRQHandler+0x6ac>)
 802d1ba:	4293      	cmp	r3, r2
 802d1bc:	d027      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d1be:	687b      	ldr	r3, [r7, #4]
 802d1c0:	681b      	ldr	r3, [r3, #0]
 802d1c2:	4a79      	ldr	r2, [pc, #484]	; (802d3a8 <HAL_DMA_IRQHandler+0x6b0>)
 802d1c4:	4293      	cmp	r3, r2
 802d1c6:	d022      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d1c8:	687b      	ldr	r3, [r7, #4]
 802d1ca:	681b      	ldr	r3, [r3, #0]
 802d1cc:	4a77      	ldr	r2, [pc, #476]	; (802d3ac <HAL_DMA_IRQHandler+0x6b4>)
 802d1ce:	4293      	cmp	r3, r2
 802d1d0:	d01d      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d1d2:	687b      	ldr	r3, [r7, #4]
 802d1d4:	681b      	ldr	r3, [r3, #0]
 802d1d6:	4a76      	ldr	r2, [pc, #472]	; (802d3b0 <HAL_DMA_IRQHandler+0x6b8>)
 802d1d8:	4293      	cmp	r3, r2
 802d1da:	d018      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d1dc:	687b      	ldr	r3, [r7, #4]
 802d1de:	681b      	ldr	r3, [r3, #0]
 802d1e0:	4a74      	ldr	r2, [pc, #464]	; (802d3b4 <HAL_DMA_IRQHandler+0x6bc>)
 802d1e2:	4293      	cmp	r3, r2
 802d1e4:	d013      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d1e6:	687b      	ldr	r3, [r7, #4]
 802d1e8:	681b      	ldr	r3, [r3, #0]
 802d1ea:	4a73      	ldr	r2, [pc, #460]	; (802d3b8 <HAL_DMA_IRQHandler+0x6c0>)
 802d1ec:	4293      	cmp	r3, r2
 802d1ee:	d00e      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d1f0:	687b      	ldr	r3, [r7, #4]
 802d1f2:	681b      	ldr	r3, [r3, #0]
 802d1f4:	4a71      	ldr	r2, [pc, #452]	; (802d3bc <HAL_DMA_IRQHandler+0x6c4>)
 802d1f6:	4293      	cmp	r3, r2
 802d1f8:	d009      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d1fa:	687b      	ldr	r3, [r7, #4]
 802d1fc:	681b      	ldr	r3, [r3, #0]
 802d1fe:	4a70      	ldr	r2, [pc, #448]	; (802d3c0 <HAL_DMA_IRQHandler+0x6c8>)
 802d200:	4293      	cmp	r3, r2
 802d202:	d004      	beq.n	802d20e <HAL_DMA_IRQHandler+0x516>
 802d204:	687b      	ldr	r3, [r7, #4]
 802d206:	681b      	ldr	r3, [r3, #0]
 802d208:	4a6e      	ldr	r2, [pc, #440]	; (802d3c4 <HAL_DMA_IRQHandler+0x6cc>)
 802d20a:	4293      	cmp	r3, r2
 802d20c:	d10a      	bne.n	802d224 <HAL_DMA_IRQHandler+0x52c>
 802d20e:	687b      	ldr	r3, [r7, #4]
 802d210:	681b      	ldr	r3, [r3, #0]
 802d212:	681b      	ldr	r3, [r3, #0]
 802d214:	f003 0308 	and.w	r3, r3, #8
 802d218:	2b00      	cmp	r3, #0
 802d21a:	bf14      	ite	ne
 802d21c:	2301      	movne	r3, #1
 802d21e:	2300      	moveq	r3, #0
 802d220:	b2db      	uxtb	r3, r3
 802d222:	e009      	b.n	802d238 <HAL_DMA_IRQHandler+0x540>
 802d224:	687b      	ldr	r3, [r7, #4]
 802d226:	681b      	ldr	r3, [r3, #0]
 802d228:	681b      	ldr	r3, [r3, #0]
 802d22a:	f003 0304 	and.w	r3, r3, #4
 802d22e:	2b00      	cmp	r3, #0
 802d230:	bf14      	ite	ne
 802d232:	2301      	movne	r3, #1
 802d234:	2300      	moveq	r3, #0
 802d236:	b2db      	uxtb	r3, r3
 802d238:	2b00      	cmp	r3, #0
 802d23a:	d03e      	beq.n	802d2ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d23c:	687b      	ldr	r3, [r7, #4]
 802d23e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d240:	f003 031f 	and.w	r3, r3, #31
 802d244:	2210      	movs	r2, #16
 802d246:	409a      	lsls	r2, r3
 802d248:	6a3b      	ldr	r3, [r7, #32]
 802d24a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802d24c:	687b      	ldr	r3, [r7, #4]
 802d24e:	681b      	ldr	r3, [r3, #0]
 802d250:	681b      	ldr	r3, [r3, #0]
 802d252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802d256:	2b00      	cmp	r3, #0
 802d258:	d018      	beq.n	802d28c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802d25a:	687b      	ldr	r3, [r7, #4]
 802d25c:	681b      	ldr	r3, [r3, #0]
 802d25e:	681b      	ldr	r3, [r3, #0]
 802d260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d264:	2b00      	cmp	r3, #0
 802d266:	d108      	bne.n	802d27a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 802d268:	687b      	ldr	r3, [r7, #4]
 802d26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d26c:	2b00      	cmp	r3, #0
 802d26e:	d024      	beq.n	802d2ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 802d270:	687b      	ldr	r3, [r7, #4]
 802d272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d274:	6878      	ldr	r0, [r7, #4]
 802d276:	4798      	blx	r3
 802d278:	e01f      	b.n	802d2ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 802d27a:	687b      	ldr	r3, [r7, #4]
 802d27c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d27e:	2b00      	cmp	r3, #0
 802d280:	d01b      	beq.n	802d2ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 802d282:	687b      	ldr	r3, [r7, #4]
 802d284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d286:	6878      	ldr	r0, [r7, #4]
 802d288:	4798      	blx	r3
 802d28a:	e016      	b.n	802d2ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802d28c:	687b      	ldr	r3, [r7, #4]
 802d28e:	681b      	ldr	r3, [r3, #0]
 802d290:	681b      	ldr	r3, [r3, #0]
 802d292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d296:	2b00      	cmp	r3, #0
 802d298:	d107      	bne.n	802d2aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802d29a:	687b      	ldr	r3, [r7, #4]
 802d29c:	681b      	ldr	r3, [r3, #0]
 802d29e:	681a      	ldr	r2, [r3, #0]
 802d2a0:	687b      	ldr	r3, [r7, #4]
 802d2a2:	681b      	ldr	r3, [r3, #0]
 802d2a4:	f022 0208 	bic.w	r2, r2, #8
 802d2a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 802d2aa:	687b      	ldr	r3, [r7, #4]
 802d2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d2ae:	2b00      	cmp	r3, #0
 802d2b0:	d003      	beq.n	802d2ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802d2b2:	687b      	ldr	r3, [r7, #4]
 802d2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d2b6:	6878      	ldr	r0, [r7, #4]
 802d2b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802d2ba:	687b      	ldr	r3, [r7, #4]
 802d2bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d2be:	f003 031f 	and.w	r3, r3, #31
 802d2c2:	2220      	movs	r2, #32
 802d2c4:	409a      	lsls	r2, r3
 802d2c6:	69bb      	ldr	r3, [r7, #24]
 802d2c8:	4013      	ands	r3, r2
 802d2ca:	2b00      	cmp	r3, #0
 802d2cc:	f000 8110 	beq.w	802d4f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 802d2d0:	687b      	ldr	r3, [r7, #4]
 802d2d2:	681b      	ldr	r3, [r3, #0]
 802d2d4:	4a2c      	ldr	r2, [pc, #176]	; (802d388 <HAL_DMA_IRQHandler+0x690>)
 802d2d6:	4293      	cmp	r3, r2
 802d2d8:	d04a      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d2da:	687b      	ldr	r3, [r7, #4]
 802d2dc:	681b      	ldr	r3, [r3, #0]
 802d2de:	4a2b      	ldr	r2, [pc, #172]	; (802d38c <HAL_DMA_IRQHandler+0x694>)
 802d2e0:	4293      	cmp	r3, r2
 802d2e2:	d045      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d2e4:	687b      	ldr	r3, [r7, #4]
 802d2e6:	681b      	ldr	r3, [r3, #0]
 802d2e8:	4a29      	ldr	r2, [pc, #164]	; (802d390 <HAL_DMA_IRQHandler+0x698>)
 802d2ea:	4293      	cmp	r3, r2
 802d2ec:	d040      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d2ee:	687b      	ldr	r3, [r7, #4]
 802d2f0:	681b      	ldr	r3, [r3, #0]
 802d2f2:	4a28      	ldr	r2, [pc, #160]	; (802d394 <HAL_DMA_IRQHandler+0x69c>)
 802d2f4:	4293      	cmp	r3, r2
 802d2f6:	d03b      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d2f8:	687b      	ldr	r3, [r7, #4]
 802d2fa:	681b      	ldr	r3, [r3, #0]
 802d2fc:	4a26      	ldr	r2, [pc, #152]	; (802d398 <HAL_DMA_IRQHandler+0x6a0>)
 802d2fe:	4293      	cmp	r3, r2
 802d300:	d036      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d302:	687b      	ldr	r3, [r7, #4]
 802d304:	681b      	ldr	r3, [r3, #0]
 802d306:	4a25      	ldr	r2, [pc, #148]	; (802d39c <HAL_DMA_IRQHandler+0x6a4>)
 802d308:	4293      	cmp	r3, r2
 802d30a:	d031      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d30c:	687b      	ldr	r3, [r7, #4]
 802d30e:	681b      	ldr	r3, [r3, #0]
 802d310:	4a23      	ldr	r2, [pc, #140]	; (802d3a0 <HAL_DMA_IRQHandler+0x6a8>)
 802d312:	4293      	cmp	r3, r2
 802d314:	d02c      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d316:	687b      	ldr	r3, [r7, #4]
 802d318:	681b      	ldr	r3, [r3, #0]
 802d31a:	4a22      	ldr	r2, [pc, #136]	; (802d3a4 <HAL_DMA_IRQHandler+0x6ac>)
 802d31c:	4293      	cmp	r3, r2
 802d31e:	d027      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d320:	687b      	ldr	r3, [r7, #4]
 802d322:	681b      	ldr	r3, [r3, #0]
 802d324:	4a20      	ldr	r2, [pc, #128]	; (802d3a8 <HAL_DMA_IRQHandler+0x6b0>)
 802d326:	4293      	cmp	r3, r2
 802d328:	d022      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d32a:	687b      	ldr	r3, [r7, #4]
 802d32c:	681b      	ldr	r3, [r3, #0]
 802d32e:	4a1f      	ldr	r2, [pc, #124]	; (802d3ac <HAL_DMA_IRQHandler+0x6b4>)
 802d330:	4293      	cmp	r3, r2
 802d332:	d01d      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d334:	687b      	ldr	r3, [r7, #4]
 802d336:	681b      	ldr	r3, [r3, #0]
 802d338:	4a1d      	ldr	r2, [pc, #116]	; (802d3b0 <HAL_DMA_IRQHandler+0x6b8>)
 802d33a:	4293      	cmp	r3, r2
 802d33c:	d018      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d33e:	687b      	ldr	r3, [r7, #4]
 802d340:	681b      	ldr	r3, [r3, #0]
 802d342:	4a1c      	ldr	r2, [pc, #112]	; (802d3b4 <HAL_DMA_IRQHandler+0x6bc>)
 802d344:	4293      	cmp	r3, r2
 802d346:	d013      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d348:	687b      	ldr	r3, [r7, #4]
 802d34a:	681b      	ldr	r3, [r3, #0]
 802d34c:	4a1a      	ldr	r2, [pc, #104]	; (802d3b8 <HAL_DMA_IRQHandler+0x6c0>)
 802d34e:	4293      	cmp	r3, r2
 802d350:	d00e      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d352:	687b      	ldr	r3, [r7, #4]
 802d354:	681b      	ldr	r3, [r3, #0]
 802d356:	4a19      	ldr	r2, [pc, #100]	; (802d3bc <HAL_DMA_IRQHandler+0x6c4>)
 802d358:	4293      	cmp	r3, r2
 802d35a:	d009      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d35c:	687b      	ldr	r3, [r7, #4]
 802d35e:	681b      	ldr	r3, [r3, #0]
 802d360:	4a17      	ldr	r2, [pc, #92]	; (802d3c0 <HAL_DMA_IRQHandler+0x6c8>)
 802d362:	4293      	cmp	r3, r2
 802d364:	d004      	beq.n	802d370 <HAL_DMA_IRQHandler+0x678>
 802d366:	687b      	ldr	r3, [r7, #4]
 802d368:	681b      	ldr	r3, [r3, #0]
 802d36a:	4a16      	ldr	r2, [pc, #88]	; (802d3c4 <HAL_DMA_IRQHandler+0x6cc>)
 802d36c:	4293      	cmp	r3, r2
 802d36e:	d12b      	bne.n	802d3c8 <HAL_DMA_IRQHandler+0x6d0>
 802d370:	687b      	ldr	r3, [r7, #4]
 802d372:	681b      	ldr	r3, [r3, #0]
 802d374:	681b      	ldr	r3, [r3, #0]
 802d376:	f003 0310 	and.w	r3, r3, #16
 802d37a:	2b00      	cmp	r3, #0
 802d37c:	bf14      	ite	ne
 802d37e:	2301      	movne	r3, #1
 802d380:	2300      	moveq	r3, #0
 802d382:	b2db      	uxtb	r3, r3
 802d384:	e02a      	b.n	802d3dc <HAL_DMA_IRQHandler+0x6e4>
 802d386:	bf00      	nop
 802d388:	40020010 	.word	0x40020010
 802d38c:	40020028 	.word	0x40020028
 802d390:	40020040 	.word	0x40020040
 802d394:	40020058 	.word	0x40020058
 802d398:	40020070 	.word	0x40020070
 802d39c:	40020088 	.word	0x40020088
 802d3a0:	400200a0 	.word	0x400200a0
 802d3a4:	400200b8 	.word	0x400200b8
 802d3a8:	40020410 	.word	0x40020410
 802d3ac:	40020428 	.word	0x40020428
 802d3b0:	40020440 	.word	0x40020440
 802d3b4:	40020458 	.word	0x40020458
 802d3b8:	40020470 	.word	0x40020470
 802d3bc:	40020488 	.word	0x40020488
 802d3c0:	400204a0 	.word	0x400204a0
 802d3c4:	400204b8 	.word	0x400204b8
 802d3c8:	687b      	ldr	r3, [r7, #4]
 802d3ca:	681b      	ldr	r3, [r3, #0]
 802d3cc:	681b      	ldr	r3, [r3, #0]
 802d3ce:	f003 0302 	and.w	r3, r3, #2
 802d3d2:	2b00      	cmp	r3, #0
 802d3d4:	bf14      	ite	ne
 802d3d6:	2301      	movne	r3, #1
 802d3d8:	2300      	moveq	r3, #0
 802d3da:	b2db      	uxtb	r3, r3
 802d3dc:	2b00      	cmp	r3, #0
 802d3de:	f000 8087 	beq.w	802d4f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d3e2:	687b      	ldr	r3, [r7, #4]
 802d3e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d3e6:	f003 031f 	and.w	r3, r3, #31
 802d3ea:	2220      	movs	r2, #32
 802d3ec:	409a      	lsls	r2, r3
 802d3ee:	6a3b      	ldr	r3, [r7, #32]
 802d3f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 802d3f2:	687b      	ldr	r3, [r7, #4]
 802d3f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802d3f8:	b2db      	uxtb	r3, r3
 802d3fa:	2b04      	cmp	r3, #4
 802d3fc:	d139      	bne.n	802d472 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802d3fe:	687b      	ldr	r3, [r7, #4]
 802d400:	681b      	ldr	r3, [r3, #0]
 802d402:	681a      	ldr	r2, [r3, #0]
 802d404:	687b      	ldr	r3, [r7, #4]
 802d406:	681b      	ldr	r3, [r3, #0]
 802d408:	f022 0216 	bic.w	r2, r2, #22
 802d40c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802d40e:	687b      	ldr	r3, [r7, #4]
 802d410:	681b      	ldr	r3, [r3, #0]
 802d412:	695a      	ldr	r2, [r3, #20]
 802d414:	687b      	ldr	r3, [r7, #4]
 802d416:	681b      	ldr	r3, [r3, #0]
 802d418:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802d41c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802d41e:	687b      	ldr	r3, [r7, #4]
 802d420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d422:	2b00      	cmp	r3, #0
 802d424:	d103      	bne.n	802d42e <HAL_DMA_IRQHandler+0x736>
 802d426:	687b      	ldr	r3, [r7, #4]
 802d428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d42a:	2b00      	cmp	r3, #0
 802d42c:	d007      	beq.n	802d43e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802d42e:	687b      	ldr	r3, [r7, #4]
 802d430:	681b      	ldr	r3, [r3, #0]
 802d432:	681a      	ldr	r2, [r3, #0]
 802d434:	687b      	ldr	r3, [r7, #4]
 802d436:	681b      	ldr	r3, [r3, #0]
 802d438:	f022 0208 	bic.w	r2, r2, #8
 802d43c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802d43e:	687b      	ldr	r3, [r7, #4]
 802d440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d442:	f003 031f 	and.w	r3, r3, #31
 802d446:	223f      	movs	r2, #63	; 0x3f
 802d448:	409a      	lsls	r2, r3
 802d44a:	6a3b      	ldr	r3, [r7, #32]
 802d44c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802d44e:	687b      	ldr	r3, [r7, #4]
 802d450:	2201      	movs	r2, #1
 802d452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802d456:	687b      	ldr	r3, [r7, #4]
 802d458:	2200      	movs	r2, #0
 802d45a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 802d45e:	687b      	ldr	r3, [r7, #4]
 802d460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d462:	2b00      	cmp	r3, #0
 802d464:	f000 834a 	beq.w	802dafc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 802d468:	687b      	ldr	r3, [r7, #4]
 802d46a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d46c:	6878      	ldr	r0, [r7, #4]
 802d46e:	4798      	blx	r3
          }
          return;
 802d470:	e344      	b.n	802dafc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802d472:	687b      	ldr	r3, [r7, #4]
 802d474:	681b      	ldr	r3, [r3, #0]
 802d476:	681b      	ldr	r3, [r3, #0]
 802d478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802d47c:	2b00      	cmp	r3, #0
 802d47e:	d018      	beq.n	802d4b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802d480:	687b      	ldr	r3, [r7, #4]
 802d482:	681b      	ldr	r3, [r3, #0]
 802d484:	681b      	ldr	r3, [r3, #0]
 802d486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d48a:	2b00      	cmp	r3, #0
 802d48c:	d108      	bne.n	802d4a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 802d48e:	687b      	ldr	r3, [r7, #4]
 802d490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d492:	2b00      	cmp	r3, #0
 802d494:	d02c      	beq.n	802d4f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 802d496:	687b      	ldr	r3, [r7, #4]
 802d498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d49a:	6878      	ldr	r0, [r7, #4]
 802d49c:	4798      	blx	r3
 802d49e:	e027      	b.n	802d4f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 802d4a0:	687b      	ldr	r3, [r7, #4]
 802d4a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d4a4:	2b00      	cmp	r3, #0
 802d4a6:	d023      	beq.n	802d4f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 802d4a8:	687b      	ldr	r3, [r7, #4]
 802d4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d4ac:	6878      	ldr	r0, [r7, #4]
 802d4ae:	4798      	blx	r3
 802d4b0:	e01e      	b.n	802d4f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802d4b2:	687b      	ldr	r3, [r7, #4]
 802d4b4:	681b      	ldr	r3, [r3, #0]
 802d4b6:	681b      	ldr	r3, [r3, #0]
 802d4b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d4bc:	2b00      	cmp	r3, #0
 802d4be:	d10f      	bne.n	802d4e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 802d4c0:	687b      	ldr	r3, [r7, #4]
 802d4c2:	681b      	ldr	r3, [r3, #0]
 802d4c4:	681a      	ldr	r2, [r3, #0]
 802d4c6:	687b      	ldr	r3, [r7, #4]
 802d4c8:	681b      	ldr	r3, [r3, #0]
 802d4ca:	f022 0210 	bic.w	r2, r2, #16
 802d4ce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 802d4d0:	687b      	ldr	r3, [r7, #4]
 802d4d2:	2201      	movs	r2, #1
 802d4d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 802d4d8:	687b      	ldr	r3, [r7, #4]
 802d4da:	2200      	movs	r2, #0
 802d4dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 802d4e0:	687b      	ldr	r3, [r7, #4]
 802d4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d4e4:	2b00      	cmp	r3, #0
 802d4e6:	d003      	beq.n	802d4f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 802d4e8:	687b      	ldr	r3, [r7, #4]
 802d4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d4ec:	6878      	ldr	r0, [r7, #4]
 802d4ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802d4f0:	687b      	ldr	r3, [r7, #4]
 802d4f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d4f4:	2b00      	cmp	r3, #0
 802d4f6:	f000 8306 	beq.w	802db06 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 802d4fa:	687b      	ldr	r3, [r7, #4]
 802d4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d4fe:	f003 0301 	and.w	r3, r3, #1
 802d502:	2b00      	cmp	r3, #0
 802d504:	f000 8088 	beq.w	802d618 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 802d508:	687b      	ldr	r3, [r7, #4]
 802d50a:	2204      	movs	r2, #4
 802d50c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 802d510:	687b      	ldr	r3, [r7, #4]
 802d512:	681b      	ldr	r3, [r3, #0]
 802d514:	4a7a      	ldr	r2, [pc, #488]	; (802d700 <HAL_DMA_IRQHandler+0xa08>)
 802d516:	4293      	cmp	r3, r2
 802d518:	d04a      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d51a:	687b      	ldr	r3, [r7, #4]
 802d51c:	681b      	ldr	r3, [r3, #0]
 802d51e:	4a79      	ldr	r2, [pc, #484]	; (802d704 <HAL_DMA_IRQHandler+0xa0c>)
 802d520:	4293      	cmp	r3, r2
 802d522:	d045      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d524:	687b      	ldr	r3, [r7, #4]
 802d526:	681b      	ldr	r3, [r3, #0]
 802d528:	4a77      	ldr	r2, [pc, #476]	; (802d708 <HAL_DMA_IRQHandler+0xa10>)
 802d52a:	4293      	cmp	r3, r2
 802d52c:	d040      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d52e:	687b      	ldr	r3, [r7, #4]
 802d530:	681b      	ldr	r3, [r3, #0]
 802d532:	4a76      	ldr	r2, [pc, #472]	; (802d70c <HAL_DMA_IRQHandler+0xa14>)
 802d534:	4293      	cmp	r3, r2
 802d536:	d03b      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d538:	687b      	ldr	r3, [r7, #4]
 802d53a:	681b      	ldr	r3, [r3, #0]
 802d53c:	4a74      	ldr	r2, [pc, #464]	; (802d710 <HAL_DMA_IRQHandler+0xa18>)
 802d53e:	4293      	cmp	r3, r2
 802d540:	d036      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d542:	687b      	ldr	r3, [r7, #4]
 802d544:	681b      	ldr	r3, [r3, #0]
 802d546:	4a73      	ldr	r2, [pc, #460]	; (802d714 <HAL_DMA_IRQHandler+0xa1c>)
 802d548:	4293      	cmp	r3, r2
 802d54a:	d031      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d54c:	687b      	ldr	r3, [r7, #4]
 802d54e:	681b      	ldr	r3, [r3, #0]
 802d550:	4a71      	ldr	r2, [pc, #452]	; (802d718 <HAL_DMA_IRQHandler+0xa20>)
 802d552:	4293      	cmp	r3, r2
 802d554:	d02c      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d556:	687b      	ldr	r3, [r7, #4]
 802d558:	681b      	ldr	r3, [r3, #0]
 802d55a:	4a70      	ldr	r2, [pc, #448]	; (802d71c <HAL_DMA_IRQHandler+0xa24>)
 802d55c:	4293      	cmp	r3, r2
 802d55e:	d027      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d560:	687b      	ldr	r3, [r7, #4]
 802d562:	681b      	ldr	r3, [r3, #0]
 802d564:	4a6e      	ldr	r2, [pc, #440]	; (802d720 <HAL_DMA_IRQHandler+0xa28>)
 802d566:	4293      	cmp	r3, r2
 802d568:	d022      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d56a:	687b      	ldr	r3, [r7, #4]
 802d56c:	681b      	ldr	r3, [r3, #0]
 802d56e:	4a6d      	ldr	r2, [pc, #436]	; (802d724 <HAL_DMA_IRQHandler+0xa2c>)
 802d570:	4293      	cmp	r3, r2
 802d572:	d01d      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d574:	687b      	ldr	r3, [r7, #4]
 802d576:	681b      	ldr	r3, [r3, #0]
 802d578:	4a6b      	ldr	r2, [pc, #428]	; (802d728 <HAL_DMA_IRQHandler+0xa30>)
 802d57a:	4293      	cmp	r3, r2
 802d57c:	d018      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d57e:	687b      	ldr	r3, [r7, #4]
 802d580:	681b      	ldr	r3, [r3, #0]
 802d582:	4a6a      	ldr	r2, [pc, #424]	; (802d72c <HAL_DMA_IRQHandler+0xa34>)
 802d584:	4293      	cmp	r3, r2
 802d586:	d013      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d588:	687b      	ldr	r3, [r7, #4]
 802d58a:	681b      	ldr	r3, [r3, #0]
 802d58c:	4a68      	ldr	r2, [pc, #416]	; (802d730 <HAL_DMA_IRQHandler+0xa38>)
 802d58e:	4293      	cmp	r3, r2
 802d590:	d00e      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d592:	687b      	ldr	r3, [r7, #4]
 802d594:	681b      	ldr	r3, [r3, #0]
 802d596:	4a67      	ldr	r2, [pc, #412]	; (802d734 <HAL_DMA_IRQHandler+0xa3c>)
 802d598:	4293      	cmp	r3, r2
 802d59a:	d009      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d59c:	687b      	ldr	r3, [r7, #4]
 802d59e:	681b      	ldr	r3, [r3, #0]
 802d5a0:	4a65      	ldr	r2, [pc, #404]	; (802d738 <HAL_DMA_IRQHandler+0xa40>)
 802d5a2:	4293      	cmp	r3, r2
 802d5a4:	d004      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x8b8>
 802d5a6:	687b      	ldr	r3, [r7, #4]
 802d5a8:	681b      	ldr	r3, [r3, #0]
 802d5aa:	4a64      	ldr	r2, [pc, #400]	; (802d73c <HAL_DMA_IRQHandler+0xa44>)
 802d5ac:	4293      	cmp	r3, r2
 802d5ae:	d108      	bne.n	802d5c2 <HAL_DMA_IRQHandler+0x8ca>
 802d5b0:	687b      	ldr	r3, [r7, #4]
 802d5b2:	681b      	ldr	r3, [r3, #0]
 802d5b4:	681a      	ldr	r2, [r3, #0]
 802d5b6:	687b      	ldr	r3, [r7, #4]
 802d5b8:	681b      	ldr	r3, [r3, #0]
 802d5ba:	f022 0201 	bic.w	r2, r2, #1
 802d5be:	601a      	str	r2, [r3, #0]
 802d5c0:	e007      	b.n	802d5d2 <HAL_DMA_IRQHandler+0x8da>
 802d5c2:	687b      	ldr	r3, [r7, #4]
 802d5c4:	681b      	ldr	r3, [r3, #0]
 802d5c6:	681a      	ldr	r2, [r3, #0]
 802d5c8:	687b      	ldr	r3, [r7, #4]
 802d5ca:	681b      	ldr	r3, [r3, #0]
 802d5cc:	f022 0201 	bic.w	r2, r2, #1
 802d5d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 802d5d2:	68fb      	ldr	r3, [r7, #12]
 802d5d4:	3301      	adds	r3, #1
 802d5d6:	60fb      	str	r3, [r7, #12]
 802d5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802d5da:	429a      	cmp	r2, r3
 802d5dc:	d307      	bcc.n	802d5ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 802d5de:	687b      	ldr	r3, [r7, #4]
 802d5e0:	681b      	ldr	r3, [r3, #0]
 802d5e2:	681b      	ldr	r3, [r3, #0]
 802d5e4:	f003 0301 	and.w	r3, r3, #1
 802d5e8:	2b00      	cmp	r3, #0
 802d5ea:	d1f2      	bne.n	802d5d2 <HAL_DMA_IRQHandler+0x8da>
 802d5ec:	e000      	b.n	802d5f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 802d5ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802d5f0:	687b      	ldr	r3, [r7, #4]
 802d5f2:	681b      	ldr	r3, [r3, #0]
 802d5f4:	681b      	ldr	r3, [r3, #0]
 802d5f6:	f003 0301 	and.w	r3, r3, #1
 802d5fa:	2b00      	cmp	r3, #0
 802d5fc:	d004      	beq.n	802d608 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 802d5fe:	687b      	ldr	r3, [r7, #4]
 802d600:	2203      	movs	r2, #3
 802d602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802d606:	e003      	b.n	802d610 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 802d608:	687b      	ldr	r3, [r7, #4]
 802d60a:	2201      	movs	r2, #1
 802d60c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802d610:	687b      	ldr	r3, [r7, #4]
 802d612:	2200      	movs	r2, #0
 802d614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 802d618:	687b      	ldr	r3, [r7, #4]
 802d61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d61c:	2b00      	cmp	r3, #0
 802d61e:	f000 8272 	beq.w	802db06 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802d622:	687b      	ldr	r3, [r7, #4]
 802d624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d626:	6878      	ldr	r0, [r7, #4]
 802d628:	4798      	blx	r3
 802d62a:	e26c      	b.n	802db06 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 802d62c:	687b      	ldr	r3, [r7, #4]
 802d62e:	681b      	ldr	r3, [r3, #0]
 802d630:	4a43      	ldr	r2, [pc, #268]	; (802d740 <HAL_DMA_IRQHandler+0xa48>)
 802d632:	4293      	cmp	r3, r2
 802d634:	d022      	beq.n	802d67c <HAL_DMA_IRQHandler+0x984>
 802d636:	687b      	ldr	r3, [r7, #4]
 802d638:	681b      	ldr	r3, [r3, #0]
 802d63a:	4a42      	ldr	r2, [pc, #264]	; (802d744 <HAL_DMA_IRQHandler+0xa4c>)
 802d63c:	4293      	cmp	r3, r2
 802d63e:	d01d      	beq.n	802d67c <HAL_DMA_IRQHandler+0x984>
 802d640:	687b      	ldr	r3, [r7, #4]
 802d642:	681b      	ldr	r3, [r3, #0]
 802d644:	4a40      	ldr	r2, [pc, #256]	; (802d748 <HAL_DMA_IRQHandler+0xa50>)
 802d646:	4293      	cmp	r3, r2
 802d648:	d018      	beq.n	802d67c <HAL_DMA_IRQHandler+0x984>
 802d64a:	687b      	ldr	r3, [r7, #4]
 802d64c:	681b      	ldr	r3, [r3, #0]
 802d64e:	4a3f      	ldr	r2, [pc, #252]	; (802d74c <HAL_DMA_IRQHandler+0xa54>)
 802d650:	4293      	cmp	r3, r2
 802d652:	d013      	beq.n	802d67c <HAL_DMA_IRQHandler+0x984>
 802d654:	687b      	ldr	r3, [r7, #4]
 802d656:	681b      	ldr	r3, [r3, #0]
 802d658:	4a3d      	ldr	r2, [pc, #244]	; (802d750 <HAL_DMA_IRQHandler+0xa58>)
 802d65a:	4293      	cmp	r3, r2
 802d65c:	d00e      	beq.n	802d67c <HAL_DMA_IRQHandler+0x984>
 802d65e:	687b      	ldr	r3, [r7, #4]
 802d660:	681b      	ldr	r3, [r3, #0]
 802d662:	4a3c      	ldr	r2, [pc, #240]	; (802d754 <HAL_DMA_IRQHandler+0xa5c>)
 802d664:	4293      	cmp	r3, r2
 802d666:	d009      	beq.n	802d67c <HAL_DMA_IRQHandler+0x984>
 802d668:	687b      	ldr	r3, [r7, #4]
 802d66a:	681b      	ldr	r3, [r3, #0]
 802d66c:	4a3a      	ldr	r2, [pc, #232]	; (802d758 <HAL_DMA_IRQHandler+0xa60>)
 802d66e:	4293      	cmp	r3, r2
 802d670:	d004      	beq.n	802d67c <HAL_DMA_IRQHandler+0x984>
 802d672:	687b      	ldr	r3, [r7, #4]
 802d674:	681b      	ldr	r3, [r3, #0]
 802d676:	4a39      	ldr	r2, [pc, #228]	; (802d75c <HAL_DMA_IRQHandler+0xa64>)
 802d678:	4293      	cmp	r3, r2
 802d67a:	d101      	bne.n	802d680 <HAL_DMA_IRQHandler+0x988>
 802d67c:	2301      	movs	r3, #1
 802d67e:	e000      	b.n	802d682 <HAL_DMA_IRQHandler+0x98a>
 802d680:	2300      	movs	r3, #0
 802d682:	2b00      	cmp	r3, #0
 802d684:	f000 823f 	beq.w	802db06 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 802d688:	687b      	ldr	r3, [r7, #4]
 802d68a:	681b      	ldr	r3, [r3, #0]
 802d68c:	681b      	ldr	r3, [r3, #0]
 802d68e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 802d690:	687b      	ldr	r3, [r7, #4]
 802d692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d694:	f003 031f 	and.w	r3, r3, #31
 802d698:	2204      	movs	r2, #4
 802d69a:	409a      	lsls	r2, r3
 802d69c:	697b      	ldr	r3, [r7, #20]
 802d69e:	4013      	ands	r3, r2
 802d6a0:	2b00      	cmp	r3, #0
 802d6a2:	f000 80cd 	beq.w	802d840 <HAL_DMA_IRQHandler+0xb48>
 802d6a6:	693b      	ldr	r3, [r7, #16]
 802d6a8:	f003 0304 	and.w	r3, r3, #4
 802d6ac:	2b00      	cmp	r3, #0
 802d6ae:	f000 80c7 	beq.w	802d840 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 802d6b2:	687b      	ldr	r3, [r7, #4]
 802d6b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d6b6:	f003 031f 	and.w	r3, r3, #31
 802d6ba:	2204      	movs	r2, #4
 802d6bc:	409a      	lsls	r2, r3
 802d6be:	69fb      	ldr	r3, [r7, #28]
 802d6c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d6c2:	693b      	ldr	r3, [r7, #16]
 802d6c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d6c8:	2b00      	cmp	r3, #0
 802d6ca:	d049      	beq.n	802d760 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802d6cc:	693b      	ldr	r3, [r7, #16]
 802d6ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d6d2:	2b00      	cmp	r3, #0
 802d6d4:	d109      	bne.n	802d6ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802d6d6:	687b      	ldr	r3, [r7, #4]
 802d6d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d6da:	2b00      	cmp	r3, #0
 802d6dc:	f000 8210 	beq.w	802db00 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 802d6e0:	687b      	ldr	r3, [r7, #4]
 802d6e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d6e4:	6878      	ldr	r0, [r7, #4]
 802d6e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d6e8:	e20a      	b.n	802db00 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802d6ea:	687b      	ldr	r3, [r7, #4]
 802d6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d6ee:	2b00      	cmp	r3, #0
 802d6f0:	f000 8206 	beq.w	802db00 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 802d6f4:	687b      	ldr	r3, [r7, #4]
 802d6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d6f8:	6878      	ldr	r0, [r7, #4]
 802d6fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d6fc:	e200      	b.n	802db00 <HAL_DMA_IRQHandler+0xe08>
 802d6fe:	bf00      	nop
 802d700:	40020010 	.word	0x40020010
 802d704:	40020028 	.word	0x40020028
 802d708:	40020040 	.word	0x40020040
 802d70c:	40020058 	.word	0x40020058
 802d710:	40020070 	.word	0x40020070
 802d714:	40020088 	.word	0x40020088
 802d718:	400200a0 	.word	0x400200a0
 802d71c:	400200b8 	.word	0x400200b8
 802d720:	40020410 	.word	0x40020410
 802d724:	40020428 	.word	0x40020428
 802d728:	40020440 	.word	0x40020440
 802d72c:	40020458 	.word	0x40020458
 802d730:	40020470 	.word	0x40020470
 802d734:	40020488 	.word	0x40020488
 802d738:	400204a0 	.word	0x400204a0
 802d73c:	400204b8 	.word	0x400204b8
 802d740:	58025408 	.word	0x58025408
 802d744:	5802541c 	.word	0x5802541c
 802d748:	58025430 	.word	0x58025430
 802d74c:	58025444 	.word	0x58025444
 802d750:	58025458 	.word	0x58025458
 802d754:	5802546c 	.word	0x5802546c
 802d758:	58025480 	.word	0x58025480
 802d75c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802d760:	693b      	ldr	r3, [r7, #16]
 802d762:	f003 0320 	and.w	r3, r3, #32
 802d766:	2b00      	cmp	r3, #0
 802d768:	d160      	bne.n	802d82c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 802d76a:	687b      	ldr	r3, [r7, #4]
 802d76c:	681b      	ldr	r3, [r3, #0]
 802d76e:	4a7f      	ldr	r2, [pc, #508]	; (802d96c <HAL_DMA_IRQHandler+0xc74>)
 802d770:	4293      	cmp	r3, r2
 802d772:	d04a      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d774:	687b      	ldr	r3, [r7, #4]
 802d776:	681b      	ldr	r3, [r3, #0]
 802d778:	4a7d      	ldr	r2, [pc, #500]	; (802d970 <HAL_DMA_IRQHandler+0xc78>)
 802d77a:	4293      	cmp	r3, r2
 802d77c:	d045      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d77e:	687b      	ldr	r3, [r7, #4]
 802d780:	681b      	ldr	r3, [r3, #0]
 802d782:	4a7c      	ldr	r2, [pc, #496]	; (802d974 <HAL_DMA_IRQHandler+0xc7c>)
 802d784:	4293      	cmp	r3, r2
 802d786:	d040      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d788:	687b      	ldr	r3, [r7, #4]
 802d78a:	681b      	ldr	r3, [r3, #0]
 802d78c:	4a7a      	ldr	r2, [pc, #488]	; (802d978 <HAL_DMA_IRQHandler+0xc80>)
 802d78e:	4293      	cmp	r3, r2
 802d790:	d03b      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d792:	687b      	ldr	r3, [r7, #4]
 802d794:	681b      	ldr	r3, [r3, #0]
 802d796:	4a79      	ldr	r2, [pc, #484]	; (802d97c <HAL_DMA_IRQHandler+0xc84>)
 802d798:	4293      	cmp	r3, r2
 802d79a:	d036      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d79c:	687b      	ldr	r3, [r7, #4]
 802d79e:	681b      	ldr	r3, [r3, #0]
 802d7a0:	4a77      	ldr	r2, [pc, #476]	; (802d980 <HAL_DMA_IRQHandler+0xc88>)
 802d7a2:	4293      	cmp	r3, r2
 802d7a4:	d031      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d7a6:	687b      	ldr	r3, [r7, #4]
 802d7a8:	681b      	ldr	r3, [r3, #0]
 802d7aa:	4a76      	ldr	r2, [pc, #472]	; (802d984 <HAL_DMA_IRQHandler+0xc8c>)
 802d7ac:	4293      	cmp	r3, r2
 802d7ae:	d02c      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d7b0:	687b      	ldr	r3, [r7, #4]
 802d7b2:	681b      	ldr	r3, [r3, #0]
 802d7b4:	4a74      	ldr	r2, [pc, #464]	; (802d988 <HAL_DMA_IRQHandler+0xc90>)
 802d7b6:	4293      	cmp	r3, r2
 802d7b8:	d027      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d7ba:	687b      	ldr	r3, [r7, #4]
 802d7bc:	681b      	ldr	r3, [r3, #0]
 802d7be:	4a73      	ldr	r2, [pc, #460]	; (802d98c <HAL_DMA_IRQHandler+0xc94>)
 802d7c0:	4293      	cmp	r3, r2
 802d7c2:	d022      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d7c4:	687b      	ldr	r3, [r7, #4]
 802d7c6:	681b      	ldr	r3, [r3, #0]
 802d7c8:	4a71      	ldr	r2, [pc, #452]	; (802d990 <HAL_DMA_IRQHandler+0xc98>)
 802d7ca:	4293      	cmp	r3, r2
 802d7cc:	d01d      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d7ce:	687b      	ldr	r3, [r7, #4]
 802d7d0:	681b      	ldr	r3, [r3, #0]
 802d7d2:	4a70      	ldr	r2, [pc, #448]	; (802d994 <HAL_DMA_IRQHandler+0xc9c>)
 802d7d4:	4293      	cmp	r3, r2
 802d7d6:	d018      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d7d8:	687b      	ldr	r3, [r7, #4]
 802d7da:	681b      	ldr	r3, [r3, #0]
 802d7dc:	4a6e      	ldr	r2, [pc, #440]	; (802d998 <HAL_DMA_IRQHandler+0xca0>)
 802d7de:	4293      	cmp	r3, r2
 802d7e0:	d013      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d7e2:	687b      	ldr	r3, [r7, #4]
 802d7e4:	681b      	ldr	r3, [r3, #0]
 802d7e6:	4a6d      	ldr	r2, [pc, #436]	; (802d99c <HAL_DMA_IRQHandler+0xca4>)
 802d7e8:	4293      	cmp	r3, r2
 802d7ea:	d00e      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d7ec:	687b      	ldr	r3, [r7, #4]
 802d7ee:	681b      	ldr	r3, [r3, #0]
 802d7f0:	4a6b      	ldr	r2, [pc, #428]	; (802d9a0 <HAL_DMA_IRQHandler+0xca8>)
 802d7f2:	4293      	cmp	r3, r2
 802d7f4:	d009      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d7f6:	687b      	ldr	r3, [r7, #4]
 802d7f8:	681b      	ldr	r3, [r3, #0]
 802d7fa:	4a6a      	ldr	r2, [pc, #424]	; (802d9a4 <HAL_DMA_IRQHandler+0xcac>)
 802d7fc:	4293      	cmp	r3, r2
 802d7fe:	d004      	beq.n	802d80a <HAL_DMA_IRQHandler+0xb12>
 802d800:	687b      	ldr	r3, [r7, #4]
 802d802:	681b      	ldr	r3, [r3, #0]
 802d804:	4a68      	ldr	r2, [pc, #416]	; (802d9a8 <HAL_DMA_IRQHandler+0xcb0>)
 802d806:	4293      	cmp	r3, r2
 802d808:	d108      	bne.n	802d81c <HAL_DMA_IRQHandler+0xb24>
 802d80a:	687b      	ldr	r3, [r7, #4]
 802d80c:	681b      	ldr	r3, [r3, #0]
 802d80e:	681a      	ldr	r2, [r3, #0]
 802d810:	687b      	ldr	r3, [r7, #4]
 802d812:	681b      	ldr	r3, [r3, #0]
 802d814:	f022 0208 	bic.w	r2, r2, #8
 802d818:	601a      	str	r2, [r3, #0]
 802d81a:	e007      	b.n	802d82c <HAL_DMA_IRQHandler+0xb34>
 802d81c:	687b      	ldr	r3, [r7, #4]
 802d81e:	681b      	ldr	r3, [r3, #0]
 802d820:	681a      	ldr	r2, [r3, #0]
 802d822:	687b      	ldr	r3, [r7, #4]
 802d824:	681b      	ldr	r3, [r3, #0]
 802d826:	f022 0204 	bic.w	r2, r2, #4
 802d82a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 802d82c:	687b      	ldr	r3, [r7, #4]
 802d82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d830:	2b00      	cmp	r3, #0
 802d832:	f000 8165 	beq.w	802db00 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802d836:	687b      	ldr	r3, [r7, #4]
 802d838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d83a:	6878      	ldr	r0, [r7, #4]
 802d83c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d83e:	e15f      	b.n	802db00 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 802d840:	687b      	ldr	r3, [r7, #4]
 802d842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d844:	f003 031f 	and.w	r3, r3, #31
 802d848:	2202      	movs	r2, #2
 802d84a:	409a      	lsls	r2, r3
 802d84c:	697b      	ldr	r3, [r7, #20]
 802d84e:	4013      	ands	r3, r2
 802d850:	2b00      	cmp	r3, #0
 802d852:	f000 80c5 	beq.w	802d9e0 <HAL_DMA_IRQHandler+0xce8>
 802d856:	693b      	ldr	r3, [r7, #16]
 802d858:	f003 0302 	and.w	r3, r3, #2
 802d85c:	2b00      	cmp	r3, #0
 802d85e:	f000 80bf 	beq.w	802d9e0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 802d862:	687b      	ldr	r3, [r7, #4]
 802d864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d866:	f003 031f 	and.w	r3, r3, #31
 802d86a:	2202      	movs	r2, #2
 802d86c:	409a      	lsls	r2, r3
 802d86e:	69fb      	ldr	r3, [r7, #28]
 802d870:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d872:	693b      	ldr	r3, [r7, #16]
 802d874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d878:	2b00      	cmp	r3, #0
 802d87a:	d018      	beq.n	802d8ae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802d87c:	693b      	ldr	r3, [r7, #16]
 802d87e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d882:	2b00      	cmp	r3, #0
 802d884:	d109      	bne.n	802d89a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802d886:	687b      	ldr	r3, [r7, #4]
 802d888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d88a:	2b00      	cmp	r3, #0
 802d88c:	f000 813a 	beq.w	802db04 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 802d890:	687b      	ldr	r3, [r7, #4]
 802d892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d894:	6878      	ldr	r0, [r7, #4]
 802d896:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d898:	e134      	b.n	802db04 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802d89a:	687b      	ldr	r3, [r7, #4]
 802d89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d89e:	2b00      	cmp	r3, #0
 802d8a0:	f000 8130 	beq.w	802db04 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 802d8a4:	687b      	ldr	r3, [r7, #4]
 802d8a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d8a8:	6878      	ldr	r0, [r7, #4]
 802d8aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d8ac:	e12a      	b.n	802db04 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802d8ae:	693b      	ldr	r3, [r7, #16]
 802d8b0:	f003 0320 	and.w	r3, r3, #32
 802d8b4:	2b00      	cmp	r3, #0
 802d8b6:	f040 8089 	bne.w	802d9cc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 802d8ba:	687b      	ldr	r3, [r7, #4]
 802d8bc:	681b      	ldr	r3, [r3, #0]
 802d8be:	4a2b      	ldr	r2, [pc, #172]	; (802d96c <HAL_DMA_IRQHandler+0xc74>)
 802d8c0:	4293      	cmp	r3, r2
 802d8c2:	d04a      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d8c4:	687b      	ldr	r3, [r7, #4]
 802d8c6:	681b      	ldr	r3, [r3, #0]
 802d8c8:	4a29      	ldr	r2, [pc, #164]	; (802d970 <HAL_DMA_IRQHandler+0xc78>)
 802d8ca:	4293      	cmp	r3, r2
 802d8cc:	d045      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d8ce:	687b      	ldr	r3, [r7, #4]
 802d8d0:	681b      	ldr	r3, [r3, #0]
 802d8d2:	4a28      	ldr	r2, [pc, #160]	; (802d974 <HAL_DMA_IRQHandler+0xc7c>)
 802d8d4:	4293      	cmp	r3, r2
 802d8d6:	d040      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d8d8:	687b      	ldr	r3, [r7, #4]
 802d8da:	681b      	ldr	r3, [r3, #0]
 802d8dc:	4a26      	ldr	r2, [pc, #152]	; (802d978 <HAL_DMA_IRQHandler+0xc80>)
 802d8de:	4293      	cmp	r3, r2
 802d8e0:	d03b      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d8e2:	687b      	ldr	r3, [r7, #4]
 802d8e4:	681b      	ldr	r3, [r3, #0]
 802d8e6:	4a25      	ldr	r2, [pc, #148]	; (802d97c <HAL_DMA_IRQHandler+0xc84>)
 802d8e8:	4293      	cmp	r3, r2
 802d8ea:	d036      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d8ec:	687b      	ldr	r3, [r7, #4]
 802d8ee:	681b      	ldr	r3, [r3, #0]
 802d8f0:	4a23      	ldr	r2, [pc, #140]	; (802d980 <HAL_DMA_IRQHandler+0xc88>)
 802d8f2:	4293      	cmp	r3, r2
 802d8f4:	d031      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d8f6:	687b      	ldr	r3, [r7, #4]
 802d8f8:	681b      	ldr	r3, [r3, #0]
 802d8fa:	4a22      	ldr	r2, [pc, #136]	; (802d984 <HAL_DMA_IRQHandler+0xc8c>)
 802d8fc:	4293      	cmp	r3, r2
 802d8fe:	d02c      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d900:	687b      	ldr	r3, [r7, #4]
 802d902:	681b      	ldr	r3, [r3, #0]
 802d904:	4a20      	ldr	r2, [pc, #128]	; (802d988 <HAL_DMA_IRQHandler+0xc90>)
 802d906:	4293      	cmp	r3, r2
 802d908:	d027      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d90a:	687b      	ldr	r3, [r7, #4]
 802d90c:	681b      	ldr	r3, [r3, #0]
 802d90e:	4a1f      	ldr	r2, [pc, #124]	; (802d98c <HAL_DMA_IRQHandler+0xc94>)
 802d910:	4293      	cmp	r3, r2
 802d912:	d022      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d914:	687b      	ldr	r3, [r7, #4]
 802d916:	681b      	ldr	r3, [r3, #0]
 802d918:	4a1d      	ldr	r2, [pc, #116]	; (802d990 <HAL_DMA_IRQHandler+0xc98>)
 802d91a:	4293      	cmp	r3, r2
 802d91c:	d01d      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d91e:	687b      	ldr	r3, [r7, #4]
 802d920:	681b      	ldr	r3, [r3, #0]
 802d922:	4a1c      	ldr	r2, [pc, #112]	; (802d994 <HAL_DMA_IRQHandler+0xc9c>)
 802d924:	4293      	cmp	r3, r2
 802d926:	d018      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d928:	687b      	ldr	r3, [r7, #4]
 802d92a:	681b      	ldr	r3, [r3, #0]
 802d92c:	4a1a      	ldr	r2, [pc, #104]	; (802d998 <HAL_DMA_IRQHandler+0xca0>)
 802d92e:	4293      	cmp	r3, r2
 802d930:	d013      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d932:	687b      	ldr	r3, [r7, #4]
 802d934:	681b      	ldr	r3, [r3, #0]
 802d936:	4a19      	ldr	r2, [pc, #100]	; (802d99c <HAL_DMA_IRQHandler+0xca4>)
 802d938:	4293      	cmp	r3, r2
 802d93a:	d00e      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d93c:	687b      	ldr	r3, [r7, #4]
 802d93e:	681b      	ldr	r3, [r3, #0]
 802d940:	4a17      	ldr	r2, [pc, #92]	; (802d9a0 <HAL_DMA_IRQHandler+0xca8>)
 802d942:	4293      	cmp	r3, r2
 802d944:	d009      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d946:	687b      	ldr	r3, [r7, #4]
 802d948:	681b      	ldr	r3, [r3, #0]
 802d94a:	4a16      	ldr	r2, [pc, #88]	; (802d9a4 <HAL_DMA_IRQHandler+0xcac>)
 802d94c:	4293      	cmp	r3, r2
 802d94e:	d004      	beq.n	802d95a <HAL_DMA_IRQHandler+0xc62>
 802d950:	687b      	ldr	r3, [r7, #4]
 802d952:	681b      	ldr	r3, [r3, #0]
 802d954:	4a14      	ldr	r2, [pc, #80]	; (802d9a8 <HAL_DMA_IRQHandler+0xcb0>)
 802d956:	4293      	cmp	r3, r2
 802d958:	d128      	bne.n	802d9ac <HAL_DMA_IRQHandler+0xcb4>
 802d95a:	687b      	ldr	r3, [r7, #4]
 802d95c:	681b      	ldr	r3, [r3, #0]
 802d95e:	681a      	ldr	r2, [r3, #0]
 802d960:	687b      	ldr	r3, [r7, #4]
 802d962:	681b      	ldr	r3, [r3, #0]
 802d964:	f022 0214 	bic.w	r2, r2, #20
 802d968:	601a      	str	r2, [r3, #0]
 802d96a:	e027      	b.n	802d9bc <HAL_DMA_IRQHandler+0xcc4>
 802d96c:	40020010 	.word	0x40020010
 802d970:	40020028 	.word	0x40020028
 802d974:	40020040 	.word	0x40020040
 802d978:	40020058 	.word	0x40020058
 802d97c:	40020070 	.word	0x40020070
 802d980:	40020088 	.word	0x40020088
 802d984:	400200a0 	.word	0x400200a0
 802d988:	400200b8 	.word	0x400200b8
 802d98c:	40020410 	.word	0x40020410
 802d990:	40020428 	.word	0x40020428
 802d994:	40020440 	.word	0x40020440
 802d998:	40020458 	.word	0x40020458
 802d99c:	40020470 	.word	0x40020470
 802d9a0:	40020488 	.word	0x40020488
 802d9a4:	400204a0 	.word	0x400204a0
 802d9a8:	400204b8 	.word	0x400204b8
 802d9ac:	687b      	ldr	r3, [r7, #4]
 802d9ae:	681b      	ldr	r3, [r3, #0]
 802d9b0:	681a      	ldr	r2, [r3, #0]
 802d9b2:	687b      	ldr	r3, [r7, #4]
 802d9b4:	681b      	ldr	r3, [r3, #0]
 802d9b6:	f022 020a 	bic.w	r2, r2, #10
 802d9ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802d9bc:	687b      	ldr	r3, [r7, #4]
 802d9be:	2201      	movs	r2, #1
 802d9c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802d9c4:	687b      	ldr	r3, [r7, #4]
 802d9c6:	2200      	movs	r2, #0
 802d9c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 802d9cc:	687b      	ldr	r3, [r7, #4]
 802d9ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d9d0:	2b00      	cmp	r3, #0
 802d9d2:	f000 8097 	beq.w	802db04 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802d9d6:	687b      	ldr	r3, [r7, #4]
 802d9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d9da:	6878      	ldr	r0, [r7, #4]
 802d9dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d9de:	e091      	b.n	802db04 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 802d9e0:	687b      	ldr	r3, [r7, #4]
 802d9e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d9e4:	f003 031f 	and.w	r3, r3, #31
 802d9e8:	2208      	movs	r2, #8
 802d9ea:	409a      	lsls	r2, r3
 802d9ec:	697b      	ldr	r3, [r7, #20]
 802d9ee:	4013      	ands	r3, r2
 802d9f0:	2b00      	cmp	r3, #0
 802d9f2:	f000 8088 	beq.w	802db06 <HAL_DMA_IRQHandler+0xe0e>
 802d9f6:	693b      	ldr	r3, [r7, #16]
 802d9f8:	f003 0308 	and.w	r3, r3, #8
 802d9fc:	2b00      	cmp	r3, #0
 802d9fe:	f000 8082 	beq.w	802db06 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 802da02:	687b      	ldr	r3, [r7, #4]
 802da04:	681b      	ldr	r3, [r3, #0]
 802da06:	4a41      	ldr	r2, [pc, #260]	; (802db0c <HAL_DMA_IRQHandler+0xe14>)
 802da08:	4293      	cmp	r3, r2
 802da0a:	d04a      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da0c:	687b      	ldr	r3, [r7, #4]
 802da0e:	681b      	ldr	r3, [r3, #0]
 802da10:	4a3f      	ldr	r2, [pc, #252]	; (802db10 <HAL_DMA_IRQHandler+0xe18>)
 802da12:	4293      	cmp	r3, r2
 802da14:	d045      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da16:	687b      	ldr	r3, [r7, #4]
 802da18:	681b      	ldr	r3, [r3, #0]
 802da1a:	4a3e      	ldr	r2, [pc, #248]	; (802db14 <HAL_DMA_IRQHandler+0xe1c>)
 802da1c:	4293      	cmp	r3, r2
 802da1e:	d040      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da20:	687b      	ldr	r3, [r7, #4]
 802da22:	681b      	ldr	r3, [r3, #0]
 802da24:	4a3c      	ldr	r2, [pc, #240]	; (802db18 <HAL_DMA_IRQHandler+0xe20>)
 802da26:	4293      	cmp	r3, r2
 802da28:	d03b      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da2a:	687b      	ldr	r3, [r7, #4]
 802da2c:	681b      	ldr	r3, [r3, #0]
 802da2e:	4a3b      	ldr	r2, [pc, #236]	; (802db1c <HAL_DMA_IRQHandler+0xe24>)
 802da30:	4293      	cmp	r3, r2
 802da32:	d036      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da34:	687b      	ldr	r3, [r7, #4]
 802da36:	681b      	ldr	r3, [r3, #0]
 802da38:	4a39      	ldr	r2, [pc, #228]	; (802db20 <HAL_DMA_IRQHandler+0xe28>)
 802da3a:	4293      	cmp	r3, r2
 802da3c:	d031      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da3e:	687b      	ldr	r3, [r7, #4]
 802da40:	681b      	ldr	r3, [r3, #0]
 802da42:	4a38      	ldr	r2, [pc, #224]	; (802db24 <HAL_DMA_IRQHandler+0xe2c>)
 802da44:	4293      	cmp	r3, r2
 802da46:	d02c      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da48:	687b      	ldr	r3, [r7, #4]
 802da4a:	681b      	ldr	r3, [r3, #0]
 802da4c:	4a36      	ldr	r2, [pc, #216]	; (802db28 <HAL_DMA_IRQHandler+0xe30>)
 802da4e:	4293      	cmp	r3, r2
 802da50:	d027      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da52:	687b      	ldr	r3, [r7, #4]
 802da54:	681b      	ldr	r3, [r3, #0]
 802da56:	4a35      	ldr	r2, [pc, #212]	; (802db2c <HAL_DMA_IRQHandler+0xe34>)
 802da58:	4293      	cmp	r3, r2
 802da5a:	d022      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da5c:	687b      	ldr	r3, [r7, #4]
 802da5e:	681b      	ldr	r3, [r3, #0]
 802da60:	4a33      	ldr	r2, [pc, #204]	; (802db30 <HAL_DMA_IRQHandler+0xe38>)
 802da62:	4293      	cmp	r3, r2
 802da64:	d01d      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da66:	687b      	ldr	r3, [r7, #4]
 802da68:	681b      	ldr	r3, [r3, #0]
 802da6a:	4a32      	ldr	r2, [pc, #200]	; (802db34 <HAL_DMA_IRQHandler+0xe3c>)
 802da6c:	4293      	cmp	r3, r2
 802da6e:	d018      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da70:	687b      	ldr	r3, [r7, #4]
 802da72:	681b      	ldr	r3, [r3, #0]
 802da74:	4a30      	ldr	r2, [pc, #192]	; (802db38 <HAL_DMA_IRQHandler+0xe40>)
 802da76:	4293      	cmp	r3, r2
 802da78:	d013      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da7a:	687b      	ldr	r3, [r7, #4]
 802da7c:	681b      	ldr	r3, [r3, #0]
 802da7e:	4a2f      	ldr	r2, [pc, #188]	; (802db3c <HAL_DMA_IRQHandler+0xe44>)
 802da80:	4293      	cmp	r3, r2
 802da82:	d00e      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da84:	687b      	ldr	r3, [r7, #4]
 802da86:	681b      	ldr	r3, [r3, #0]
 802da88:	4a2d      	ldr	r2, [pc, #180]	; (802db40 <HAL_DMA_IRQHandler+0xe48>)
 802da8a:	4293      	cmp	r3, r2
 802da8c:	d009      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da8e:	687b      	ldr	r3, [r7, #4]
 802da90:	681b      	ldr	r3, [r3, #0]
 802da92:	4a2c      	ldr	r2, [pc, #176]	; (802db44 <HAL_DMA_IRQHandler+0xe4c>)
 802da94:	4293      	cmp	r3, r2
 802da96:	d004      	beq.n	802daa2 <HAL_DMA_IRQHandler+0xdaa>
 802da98:	687b      	ldr	r3, [r7, #4]
 802da9a:	681b      	ldr	r3, [r3, #0]
 802da9c:	4a2a      	ldr	r2, [pc, #168]	; (802db48 <HAL_DMA_IRQHandler+0xe50>)
 802da9e:	4293      	cmp	r3, r2
 802daa0:	d108      	bne.n	802dab4 <HAL_DMA_IRQHandler+0xdbc>
 802daa2:	687b      	ldr	r3, [r7, #4]
 802daa4:	681b      	ldr	r3, [r3, #0]
 802daa6:	681a      	ldr	r2, [r3, #0]
 802daa8:	687b      	ldr	r3, [r7, #4]
 802daaa:	681b      	ldr	r3, [r3, #0]
 802daac:	f022 021c 	bic.w	r2, r2, #28
 802dab0:	601a      	str	r2, [r3, #0]
 802dab2:	e007      	b.n	802dac4 <HAL_DMA_IRQHandler+0xdcc>
 802dab4:	687b      	ldr	r3, [r7, #4]
 802dab6:	681b      	ldr	r3, [r3, #0]
 802dab8:	681a      	ldr	r2, [r3, #0]
 802daba:	687b      	ldr	r3, [r7, #4]
 802dabc:	681b      	ldr	r3, [r3, #0]
 802dabe:	f022 020e 	bic.w	r2, r2, #14
 802dac2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802dac4:	687b      	ldr	r3, [r7, #4]
 802dac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dac8:	f003 031f 	and.w	r3, r3, #31
 802dacc:	2201      	movs	r2, #1
 802dace:	409a      	lsls	r2, r3
 802dad0:	69fb      	ldr	r3, [r7, #28]
 802dad2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 802dad4:	687b      	ldr	r3, [r7, #4]
 802dad6:	2201      	movs	r2, #1
 802dad8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802dada:	687b      	ldr	r3, [r7, #4]
 802dadc:	2201      	movs	r2, #1
 802dade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802dae2:	687b      	ldr	r3, [r7, #4]
 802dae4:	2200      	movs	r2, #0
 802dae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 802daea:	687b      	ldr	r3, [r7, #4]
 802daec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802daee:	2b00      	cmp	r3, #0
 802daf0:	d009      	beq.n	802db06 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802daf2:	687b      	ldr	r3, [r7, #4]
 802daf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802daf6:	6878      	ldr	r0, [r7, #4]
 802daf8:	4798      	blx	r3
 802dafa:	e004      	b.n	802db06 <HAL_DMA_IRQHandler+0xe0e>
          return;
 802dafc:	bf00      	nop
 802dafe:	e002      	b.n	802db06 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802db00:	bf00      	nop
 802db02:	e000      	b.n	802db06 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802db04:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 802db06:	3728      	adds	r7, #40	; 0x28
 802db08:	46bd      	mov	sp, r7
 802db0a:	bd80      	pop	{r7, pc}
 802db0c:	40020010 	.word	0x40020010
 802db10:	40020028 	.word	0x40020028
 802db14:	40020040 	.word	0x40020040
 802db18:	40020058 	.word	0x40020058
 802db1c:	40020070 	.word	0x40020070
 802db20:	40020088 	.word	0x40020088
 802db24:	400200a0 	.word	0x400200a0
 802db28:	400200b8 	.word	0x400200b8
 802db2c:	40020410 	.word	0x40020410
 802db30:	40020428 	.word	0x40020428
 802db34:	40020440 	.word	0x40020440
 802db38:	40020458 	.word	0x40020458
 802db3c:	40020470 	.word	0x40020470
 802db40:	40020488 	.word	0x40020488
 802db44:	400204a0 	.word	0x400204a0
 802db48:	400204b8 	.word	0x400204b8

0802db4c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 802db4c:	b480      	push	{r7}
 802db4e:	b083      	sub	sp, #12
 802db50:	af00      	add	r7, sp, #0
 802db52:	6078      	str	r0, [r7, #4]
  return hdma->State;
 802db54:	687b      	ldr	r3, [r7, #4]
 802db56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802db5a:	b2db      	uxtb	r3, r3
}
 802db5c:	4618      	mov	r0, r3
 802db5e:	370c      	adds	r7, #12
 802db60:	46bd      	mov	sp, r7
 802db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db66:	4770      	bx	lr

0802db68 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 802db68:	b480      	push	{r7}
 802db6a:	b083      	sub	sp, #12
 802db6c:	af00      	add	r7, sp, #0
 802db6e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 802db70:	687b      	ldr	r3, [r7, #4]
 802db72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 802db74:	4618      	mov	r0, r3
 802db76:	370c      	adds	r7, #12
 802db78:	46bd      	mov	sp, r7
 802db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db7e:	4770      	bx	lr

0802db80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802db80:	b480      	push	{r7}
 802db82:	b087      	sub	sp, #28
 802db84:	af00      	add	r7, sp, #0
 802db86:	60f8      	str	r0, [r7, #12]
 802db88:	60b9      	str	r1, [r7, #8]
 802db8a:	607a      	str	r2, [r7, #4]
 802db8c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802db8e:	68fb      	ldr	r3, [r7, #12]
 802db90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802db92:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802db94:	68fb      	ldr	r3, [r7, #12]
 802db96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802db98:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802db9a:	68fb      	ldr	r3, [r7, #12]
 802db9c:	681b      	ldr	r3, [r3, #0]
 802db9e:	4a7f      	ldr	r2, [pc, #508]	; (802dd9c <DMA_SetConfig+0x21c>)
 802dba0:	4293      	cmp	r3, r2
 802dba2:	d072      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dba4:	68fb      	ldr	r3, [r7, #12]
 802dba6:	681b      	ldr	r3, [r3, #0]
 802dba8:	4a7d      	ldr	r2, [pc, #500]	; (802dda0 <DMA_SetConfig+0x220>)
 802dbaa:	4293      	cmp	r3, r2
 802dbac:	d06d      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dbae:	68fb      	ldr	r3, [r7, #12]
 802dbb0:	681b      	ldr	r3, [r3, #0]
 802dbb2:	4a7c      	ldr	r2, [pc, #496]	; (802dda4 <DMA_SetConfig+0x224>)
 802dbb4:	4293      	cmp	r3, r2
 802dbb6:	d068      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dbb8:	68fb      	ldr	r3, [r7, #12]
 802dbba:	681b      	ldr	r3, [r3, #0]
 802dbbc:	4a7a      	ldr	r2, [pc, #488]	; (802dda8 <DMA_SetConfig+0x228>)
 802dbbe:	4293      	cmp	r3, r2
 802dbc0:	d063      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dbc2:	68fb      	ldr	r3, [r7, #12]
 802dbc4:	681b      	ldr	r3, [r3, #0]
 802dbc6:	4a79      	ldr	r2, [pc, #484]	; (802ddac <DMA_SetConfig+0x22c>)
 802dbc8:	4293      	cmp	r3, r2
 802dbca:	d05e      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dbcc:	68fb      	ldr	r3, [r7, #12]
 802dbce:	681b      	ldr	r3, [r3, #0]
 802dbd0:	4a77      	ldr	r2, [pc, #476]	; (802ddb0 <DMA_SetConfig+0x230>)
 802dbd2:	4293      	cmp	r3, r2
 802dbd4:	d059      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dbd6:	68fb      	ldr	r3, [r7, #12]
 802dbd8:	681b      	ldr	r3, [r3, #0]
 802dbda:	4a76      	ldr	r2, [pc, #472]	; (802ddb4 <DMA_SetConfig+0x234>)
 802dbdc:	4293      	cmp	r3, r2
 802dbde:	d054      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dbe0:	68fb      	ldr	r3, [r7, #12]
 802dbe2:	681b      	ldr	r3, [r3, #0]
 802dbe4:	4a74      	ldr	r2, [pc, #464]	; (802ddb8 <DMA_SetConfig+0x238>)
 802dbe6:	4293      	cmp	r3, r2
 802dbe8:	d04f      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dbea:	68fb      	ldr	r3, [r7, #12]
 802dbec:	681b      	ldr	r3, [r3, #0]
 802dbee:	4a73      	ldr	r2, [pc, #460]	; (802ddbc <DMA_SetConfig+0x23c>)
 802dbf0:	4293      	cmp	r3, r2
 802dbf2:	d04a      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dbf4:	68fb      	ldr	r3, [r7, #12]
 802dbf6:	681b      	ldr	r3, [r3, #0]
 802dbf8:	4a71      	ldr	r2, [pc, #452]	; (802ddc0 <DMA_SetConfig+0x240>)
 802dbfa:	4293      	cmp	r3, r2
 802dbfc:	d045      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dbfe:	68fb      	ldr	r3, [r7, #12]
 802dc00:	681b      	ldr	r3, [r3, #0]
 802dc02:	4a70      	ldr	r2, [pc, #448]	; (802ddc4 <DMA_SetConfig+0x244>)
 802dc04:	4293      	cmp	r3, r2
 802dc06:	d040      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc08:	68fb      	ldr	r3, [r7, #12]
 802dc0a:	681b      	ldr	r3, [r3, #0]
 802dc0c:	4a6e      	ldr	r2, [pc, #440]	; (802ddc8 <DMA_SetConfig+0x248>)
 802dc0e:	4293      	cmp	r3, r2
 802dc10:	d03b      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc12:	68fb      	ldr	r3, [r7, #12]
 802dc14:	681b      	ldr	r3, [r3, #0]
 802dc16:	4a6d      	ldr	r2, [pc, #436]	; (802ddcc <DMA_SetConfig+0x24c>)
 802dc18:	4293      	cmp	r3, r2
 802dc1a:	d036      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc1c:	68fb      	ldr	r3, [r7, #12]
 802dc1e:	681b      	ldr	r3, [r3, #0]
 802dc20:	4a6b      	ldr	r2, [pc, #428]	; (802ddd0 <DMA_SetConfig+0x250>)
 802dc22:	4293      	cmp	r3, r2
 802dc24:	d031      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc26:	68fb      	ldr	r3, [r7, #12]
 802dc28:	681b      	ldr	r3, [r3, #0]
 802dc2a:	4a6a      	ldr	r2, [pc, #424]	; (802ddd4 <DMA_SetConfig+0x254>)
 802dc2c:	4293      	cmp	r3, r2
 802dc2e:	d02c      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc30:	68fb      	ldr	r3, [r7, #12]
 802dc32:	681b      	ldr	r3, [r3, #0]
 802dc34:	4a68      	ldr	r2, [pc, #416]	; (802ddd8 <DMA_SetConfig+0x258>)
 802dc36:	4293      	cmp	r3, r2
 802dc38:	d027      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc3a:	68fb      	ldr	r3, [r7, #12]
 802dc3c:	681b      	ldr	r3, [r3, #0]
 802dc3e:	4a67      	ldr	r2, [pc, #412]	; (802dddc <DMA_SetConfig+0x25c>)
 802dc40:	4293      	cmp	r3, r2
 802dc42:	d022      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc44:	68fb      	ldr	r3, [r7, #12]
 802dc46:	681b      	ldr	r3, [r3, #0]
 802dc48:	4a65      	ldr	r2, [pc, #404]	; (802dde0 <DMA_SetConfig+0x260>)
 802dc4a:	4293      	cmp	r3, r2
 802dc4c:	d01d      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc4e:	68fb      	ldr	r3, [r7, #12]
 802dc50:	681b      	ldr	r3, [r3, #0]
 802dc52:	4a64      	ldr	r2, [pc, #400]	; (802dde4 <DMA_SetConfig+0x264>)
 802dc54:	4293      	cmp	r3, r2
 802dc56:	d018      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc58:	68fb      	ldr	r3, [r7, #12]
 802dc5a:	681b      	ldr	r3, [r3, #0]
 802dc5c:	4a62      	ldr	r2, [pc, #392]	; (802dde8 <DMA_SetConfig+0x268>)
 802dc5e:	4293      	cmp	r3, r2
 802dc60:	d013      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc62:	68fb      	ldr	r3, [r7, #12]
 802dc64:	681b      	ldr	r3, [r3, #0]
 802dc66:	4a61      	ldr	r2, [pc, #388]	; (802ddec <DMA_SetConfig+0x26c>)
 802dc68:	4293      	cmp	r3, r2
 802dc6a:	d00e      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc6c:	68fb      	ldr	r3, [r7, #12]
 802dc6e:	681b      	ldr	r3, [r3, #0]
 802dc70:	4a5f      	ldr	r2, [pc, #380]	; (802ddf0 <DMA_SetConfig+0x270>)
 802dc72:	4293      	cmp	r3, r2
 802dc74:	d009      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc76:	68fb      	ldr	r3, [r7, #12]
 802dc78:	681b      	ldr	r3, [r3, #0]
 802dc7a:	4a5e      	ldr	r2, [pc, #376]	; (802ddf4 <DMA_SetConfig+0x274>)
 802dc7c:	4293      	cmp	r3, r2
 802dc7e:	d004      	beq.n	802dc8a <DMA_SetConfig+0x10a>
 802dc80:	68fb      	ldr	r3, [r7, #12]
 802dc82:	681b      	ldr	r3, [r3, #0]
 802dc84:	4a5c      	ldr	r2, [pc, #368]	; (802ddf8 <DMA_SetConfig+0x278>)
 802dc86:	4293      	cmp	r3, r2
 802dc88:	d101      	bne.n	802dc8e <DMA_SetConfig+0x10e>
 802dc8a:	2301      	movs	r3, #1
 802dc8c:	e000      	b.n	802dc90 <DMA_SetConfig+0x110>
 802dc8e:	2300      	movs	r3, #0
 802dc90:	2b00      	cmp	r3, #0
 802dc92:	d00d      	beq.n	802dcb0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802dc94:	68fb      	ldr	r3, [r7, #12]
 802dc96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802dc98:	68fa      	ldr	r2, [r7, #12]
 802dc9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802dc9c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 802dc9e:	68fb      	ldr	r3, [r7, #12]
 802dca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dca2:	2b00      	cmp	r3, #0
 802dca4:	d004      	beq.n	802dcb0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802dca6:	68fb      	ldr	r3, [r7, #12]
 802dca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802dcaa:	68fa      	ldr	r2, [r7, #12]
 802dcac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802dcae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802dcb0:	68fb      	ldr	r3, [r7, #12]
 802dcb2:	681b      	ldr	r3, [r3, #0]
 802dcb4:	4a39      	ldr	r2, [pc, #228]	; (802dd9c <DMA_SetConfig+0x21c>)
 802dcb6:	4293      	cmp	r3, r2
 802dcb8:	d04a      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dcba:	68fb      	ldr	r3, [r7, #12]
 802dcbc:	681b      	ldr	r3, [r3, #0]
 802dcbe:	4a38      	ldr	r2, [pc, #224]	; (802dda0 <DMA_SetConfig+0x220>)
 802dcc0:	4293      	cmp	r3, r2
 802dcc2:	d045      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dcc4:	68fb      	ldr	r3, [r7, #12]
 802dcc6:	681b      	ldr	r3, [r3, #0]
 802dcc8:	4a36      	ldr	r2, [pc, #216]	; (802dda4 <DMA_SetConfig+0x224>)
 802dcca:	4293      	cmp	r3, r2
 802dccc:	d040      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dcce:	68fb      	ldr	r3, [r7, #12]
 802dcd0:	681b      	ldr	r3, [r3, #0]
 802dcd2:	4a35      	ldr	r2, [pc, #212]	; (802dda8 <DMA_SetConfig+0x228>)
 802dcd4:	4293      	cmp	r3, r2
 802dcd6:	d03b      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dcd8:	68fb      	ldr	r3, [r7, #12]
 802dcda:	681b      	ldr	r3, [r3, #0]
 802dcdc:	4a33      	ldr	r2, [pc, #204]	; (802ddac <DMA_SetConfig+0x22c>)
 802dcde:	4293      	cmp	r3, r2
 802dce0:	d036      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dce2:	68fb      	ldr	r3, [r7, #12]
 802dce4:	681b      	ldr	r3, [r3, #0]
 802dce6:	4a32      	ldr	r2, [pc, #200]	; (802ddb0 <DMA_SetConfig+0x230>)
 802dce8:	4293      	cmp	r3, r2
 802dcea:	d031      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dcec:	68fb      	ldr	r3, [r7, #12]
 802dcee:	681b      	ldr	r3, [r3, #0]
 802dcf0:	4a30      	ldr	r2, [pc, #192]	; (802ddb4 <DMA_SetConfig+0x234>)
 802dcf2:	4293      	cmp	r3, r2
 802dcf4:	d02c      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dcf6:	68fb      	ldr	r3, [r7, #12]
 802dcf8:	681b      	ldr	r3, [r3, #0]
 802dcfa:	4a2f      	ldr	r2, [pc, #188]	; (802ddb8 <DMA_SetConfig+0x238>)
 802dcfc:	4293      	cmp	r3, r2
 802dcfe:	d027      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dd00:	68fb      	ldr	r3, [r7, #12]
 802dd02:	681b      	ldr	r3, [r3, #0]
 802dd04:	4a2d      	ldr	r2, [pc, #180]	; (802ddbc <DMA_SetConfig+0x23c>)
 802dd06:	4293      	cmp	r3, r2
 802dd08:	d022      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dd0a:	68fb      	ldr	r3, [r7, #12]
 802dd0c:	681b      	ldr	r3, [r3, #0]
 802dd0e:	4a2c      	ldr	r2, [pc, #176]	; (802ddc0 <DMA_SetConfig+0x240>)
 802dd10:	4293      	cmp	r3, r2
 802dd12:	d01d      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dd14:	68fb      	ldr	r3, [r7, #12]
 802dd16:	681b      	ldr	r3, [r3, #0]
 802dd18:	4a2a      	ldr	r2, [pc, #168]	; (802ddc4 <DMA_SetConfig+0x244>)
 802dd1a:	4293      	cmp	r3, r2
 802dd1c:	d018      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dd1e:	68fb      	ldr	r3, [r7, #12]
 802dd20:	681b      	ldr	r3, [r3, #0]
 802dd22:	4a29      	ldr	r2, [pc, #164]	; (802ddc8 <DMA_SetConfig+0x248>)
 802dd24:	4293      	cmp	r3, r2
 802dd26:	d013      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dd28:	68fb      	ldr	r3, [r7, #12]
 802dd2a:	681b      	ldr	r3, [r3, #0]
 802dd2c:	4a27      	ldr	r2, [pc, #156]	; (802ddcc <DMA_SetConfig+0x24c>)
 802dd2e:	4293      	cmp	r3, r2
 802dd30:	d00e      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dd32:	68fb      	ldr	r3, [r7, #12]
 802dd34:	681b      	ldr	r3, [r3, #0]
 802dd36:	4a26      	ldr	r2, [pc, #152]	; (802ddd0 <DMA_SetConfig+0x250>)
 802dd38:	4293      	cmp	r3, r2
 802dd3a:	d009      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dd3c:	68fb      	ldr	r3, [r7, #12]
 802dd3e:	681b      	ldr	r3, [r3, #0]
 802dd40:	4a24      	ldr	r2, [pc, #144]	; (802ddd4 <DMA_SetConfig+0x254>)
 802dd42:	4293      	cmp	r3, r2
 802dd44:	d004      	beq.n	802dd50 <DMA_SetConfig+0x1d0>
 802dd46:	68fb      	ldr	r3, [r7, #12]
 802dd48:	681b      	ldr	r3, [r3, #0]
 802dd4a:	4a23      	ldr	r2, [pc, #140]	; (802ddd8 <DMA_SetConfig+0x258>)
 802dd4c:	4293      	cmp	r3, r2
 802dd4e:	d101      	bne.n	802dd54 <DMA_SetConfig+0x1d4>
 802dd50:	2301      	movs	r3, #1
 802dd52:	e000      	b.n	802dd56 <DMA_SetConfig+0x1d6>
 802dd54:	2300      	movs	r3, #0
 802dd56:	2b00      	cmp	r3, #0
 802dd58:	d059      	beq.n	802de0e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802dd5a:	68fb      	ldr	r3, [r7, #12]
 802dd5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dd5e:	f003 031f 	and.w	r3, r3, #31
 802dd62:	223f      	movs	r2, #63	; 0x3f
 802dd64:	409a      	lsls	r2, r3
 802dd66:	697b      	ldr	r3, [r7, #20]
 802dd68:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802dd6a:	68fb      	ldr	r3, [r7, #12]
 802dd6c:	681b      	ldr	r3, [r3, #0]
 802dd6e:	681a      	ldr	r2, [r3, #0]
 802dd70:	68fb      	ldr	r3, [r7, #12]
 802dd72:	681b      	ldr	r3, [r3, #0]
 802dd74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802dd78:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 802dd7a:	68fb      	ldr	r3, [r7, #12]
 802dd7c:	681b      	ldr	r3, [r3, #0]
 802dd7e:	683a      	ldr	r2, [r7, #0]
 802dd80:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802dd82:	68fb      	ldr	r3, [r7, #12]
 802dd84:	689b      	ldr	r3, [r3, #8]
 802dd86:	2b40      	cmp	r3, #64	; 0x40
 802dd88:	d138      	bne.n	802ddfc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 802dd8a:	68fb      	ldr	r3, [r7, #12]
 802dd8c:	681b      	ldr	r3, [r3, #0]
 802dd8e:	687a      	ldr	r2, [r7, #4]
 802dd90:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 802dd92:	68fb      	ldr	r3, [r7, #12]
 802dd94:	681b      	ldr	r3, [r3, #0]
 802dd96:	68ba      	ldr	r2, [r7, #8]
 802dd98:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 802dd9a:	e086      	b.n	802deaa <DMA_SetConfig+0x32a>
 802dd9c:	40020010 	.word	0x40020010
 802dda0:	40020028 	.word	0x40020028
 802dda4:	40020040 	.word	0x40020040
 802dda8:	40020058 	.word	0x40020058
 802ddac:	40020070 	.word	0x40020070
 802ddb0:	40020088 	.word	0x40020088
 802ddb4:	400200a0 	.word	0x400200a0
 802ddb8:	400200b8 	.word	0x400200b8
 802ddbc:	40020410 	.word	0x40020410
 802ddc0:	40020428 	.word	0x40020428
 802ddc4:	40020440 	.word	0x40020440
 802ddc8:	40020458 	.word	0x40020458
 802ddcc:	40020470 	.word	0x40020470
 802ddd0:	40020488 	.word	0x40020488
 802ddd4:	400204a0 	.word	0x400204a0
 802ddd8:	400204b8 	.word	0x400204b8
 802dddc:	58025408 	.word	0x58025408
 802dde0:	5802541c 	.word	0x5802541c
 802dde4:	58025430 	.word	0x58025430
 802dde8:	58025444 	.word	0x58025444
 802ddec:	58025458 	.word	0x58025458
 802ddf0:	5802546c 	.word	0x5802546c
 802ddf4:	58025480 	.word	0x58025480
 802ddf8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 802ddfc:	68fb      	ldr	r3, [r7, #12]
 802ddfe:	681b      	ldr	r3, [r3, #0]
 802de00:	68ba      	ldr	r2, [r7, #8]
 802de02:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 802de04:	68fb      	ldr	r3, [r7, #12]
 802de06:	681b      	ldr	r3, [r3, #0]
 802de08:	687a      	ldr	r2, [r7, #4]
 802de0a:	60da      	str	r2, [r3, #12]
}
 802de0c:	e04d      	b.n	802deaa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802de0e:	68fb      	ldr	r3, [r7, #12]
 802de10:	681b      	ldr	r3, [r3, #0]
 802de12:	4a29      	ldr	r2, [pc, #164]	; (802deb8 <DMA_SetConfig+0x338>)
 802de14:	4293      	cmp	r3, r2
 802de16:	d022      	beq.n	802de5e <DMA_SetConfig+0x2de>
 802de18:	68fb      	ldr	r3, [r7, #12]
 802de1a:	681b      	ldr	r3, [r3, #0]
 802de1c:	4a27      	ldr	r2, [pc, #156]	; (802debc <DMA_SetConfig+0x33c>)
 802de1e:	4293      	cmp	r3, r2
 802de20:	d01d      	beq.n	802de5e <DMA_SetConfig+0x2de>
 802de22:	68fb      	ldr	r3, [r7, #12]
 802de24:	681b      	ldr	r3, [r3, #0]
 802de26:	4a26      	ldr	r2, [pc, #152]	; (802dec0 <DMA_SetConfig+0x340>)
 802de28:	4293      	cmp	r3, r2
 802de2a:	d018      	beq.n	802de5e <DMA_SetConfig+0x2de>
 802de2c:	68fb      	ldr	r3, [r7, #12]
 802de2e:	681b      	ldr	r3, [r3, #0]
 802de30:	4a24      	ldr	r2, [pc, #144]	; (802dec4 <DMA_SetConfig+0x344>)
 802de32:	4293      	cmp	r3, r2
 802de34:	d013      	beq.n	802de5e <DMA_SetConfig+0x2de>
 802de36:	68fb      	ldr	r3, [r7, #12]
 802de38:	681b      	ldr	r3, [r3, #0]
 802de3a:	4a23      	ldr	r2, [pc, #140]	; (802dec8 <DMA_SetConfig+0x348>)
 802de3c:	4293      	cmp	r3, r2
 802de3e:	d00e      	beq.n	802de5e <DMA_SetConfig+0x2de>
 802de40:	68fb      	ldr	r3, [r7, #12]
 802de42:	681b      	ldr	r3, [r3, #0]
 802de44:	4a21      	ldr	r2, [pc, #132]	; (802decc <DMA_SetConfig+0x34c>)
 802de46:	4293      	cmp	r3, r2
 802de48:	d009      	beq.n	802de5e <DMA_SetConfig+0x2de>
 802de4a:	68fb      	ldr	r3, [r7, #12]
 802de4c:	681b      	ldr	r3, [r3, #0]
 802de4e:	4a20      	ldr	r2, [pc, #128]	; (802ded0 <DMA_SetConfig+0x350>)
 802de50:	4293      	cmp	r3, r2
 802de52:	d004      	beq.n	802de5e <DMA_SetConfig+0x2de>
 802de54:	68fb      	ldr	r3, [r7, #12]
 802de56:	681b      	ldr	r3, [r3, #0]
 802de58:	4a1e      	ldr	r2, [pc, #120]	; (802ded4 <DMA_SetConfig+0x354>)
 802de5a:	4293      	cmp	r3, r2
 802de5c:	d101      	bne.n	802de62 <DMA_SetConfig+0x2e2>
 802de5e:	2301      	movs	r3, #1
 802de60:	e000      	b.n	802de64 <DMA_SetConfig+0x2e4>
 802de62:	2300      	movs	r3, #0
 802de64:	2b00      	cmp	r3, #0
 802de66:	d020      	beq.n	802deaa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802de68:	68fb      	ldr	r3, [r7, #12]
 802de6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802de6c:	f003 031f 	and.w	r3, r3, #31
 802de70:	2201      	movs	r2, #1
 802de72:	409a      	lsls	r2, r3
 802de74:	693b      	ldr	r3, [r7, #16]
 802de76:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 802de78:	68fb      	ldr	r3, [r7, #12]
 802de7a:	681b      	ldr	r3, [r3, #0]
 802de7c:	683a      	ldr	r2, [r7, #0]
 802de7e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802de80:	68fb      	ldr	r3, [r7, #12]
 802de82:	689b      	ldr	r3, [r3, #8]
 802de84:	2b40      	cmp	r3, #64	; 0x40
 802de86:	d108      	bne.n	802de9a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 802de88:	68fb      	ldr	r3, [r7, #12]
 802de8a:	681b      	ldr	r3, [r3, #0]
 802de8c:	687a      	ldr	r2, [r7, #4]
 802de8e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 802de90:	68fb      	ldr	r3, [r7, #12]
 802de92:	681b      	ldr	r3, [r3, #0]
 802de94:	68ba      	ldr	r2, [r7, #8]
 802de96:	60da      	str	r2, [r3, #12]
}
 802de98:	e007      	b.n	802deaa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 802de9a:	68fb      	ldr	r3, [r7, #12]
 802de9c:	681b      	ldr	r3, [r3, #0]
 802de9e:	68ba      	ldr	r2, [r7, #8]
 802dea0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 802dea2:	68fb      	ldr	r3, [r7, #12]
 802dea4:	681b      	ldr	r3, [r3, #0]
 802dea6:	687a      	ldr	r2, [r7, #4]
 802dea8:	60da      	str	r2, [r3, #12]
}
 802deaa:	bf00      	nop
 802deac:	371c      	adds	r7, #28
 802deae:	46bd      	mov	sp, r7
 802deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802deb4:	4770      	bx	lr
 802deb6:	bf00      	nop
 802deb8:	58025408 	.word	0x58025408
 802debc:	5802541c 	.word	0x5802541c
 802dec0:	58025430 	.word	0x58025430
 802dec4:	58025444 	.word	0x58025444
 802dec8:	58025458 	.word	0x58025458
 802decc:	5802546c 	.word	0x5802546c
 802ded0:	58025480 	.word	0x58025480
 802ded4:	58025494 	.word	0x58025494

0802ded8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802ded8:	b480      	push	{r7}
 802deda:	b085      	sub	sp, #20
 802dedc:	af00      	add	r7, sp, #0
 802dede:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802dee0:	687b      	ldr	r3, [r7, #4]
 802dee2:	681b      	ldr	r3, [r3, #0]
 802dee4:	4a42      	ldr	r2, [pc, #264]	; (802dff0 <DMA_CalcBaseAndBitshift+0x118>)
 802dee6:	4293      	cmp	r3, r2
 802dee8:	d04a      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802deea:	687b      	ldr	r3, [r7, #4]
 802deec:	681b      	ldr	r3, [r3, #0]
 802deee:	4a41      	ldr	r2, [pc, #260]	; (802dff4 <DMA_CalcBaseAndBitshift+0x11c>)
 802def0:	4293      	cmp	r3, r2
 802def2:	d045      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802def4:	687b      	ldr	r3, [r7, #4]
 802def6:	681b      	ldr	r3, [r3, #0]
 802def8:	4a3f      	ldr	r2, [pc, #252]	; (802dff8 <DMA_CalcBaseAndBitshift+0x120>)
 802defa:	4293      	cmp	r3, r2
 802defc:	d040      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802defe:	687b      	ldr	r3, [r7, #4]
 802df00:	681b      	ldr	r3, [r3, #0]
 802df02:	4a3e      	ldr	r2, [pc, #248]	; (802dffc <DMA_CalcBaseAndBitshift+0x124>)
 802df04:	4293      	cmp	r3, r2
 802df06:	d03b      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802df08:	687b      	ldr	r3, [r7, #4]
 802df0a:	681b      	ldr	r3, [r3, #0]
 802df0c:	4a3c      	ldr	r2, [pc, #240]	; (802e000 <DMA_CalcBaseAndBitshift+0x128>)
 802df0e:	4293      	cmp	r3, r2
 802df10:	d036      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802df12:	687b      	ldr	r3, [r7, #4]
 802df14:	681b      	ldr	r3, [r3, #0]
 802df16:	4a3b      	ldr	r2, [pc, #236]	; (802e004 <DMA_CalcBaseAndBitshift+0x12c>)
 802df18:	4293      	cmp	r3, r2
 802df1a:	d031      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802df1c:	687b      	ldr	r3, [r7, #4]
 802df1e:	681b      	ldr	r3, [r3, #0]
 802df20:	4a39      	ldr	r2, [pc, #228]	; (802e008 <DMA_CalcBaseAndBitshift+0x130>)
 802df22:	4293      	cmp	r3, r2
 802df24:	d02c      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802df26:	687b      	ldr	r3, [r7, #4]
 802df28:	681b      	ldr	r3, [r3, #0]
 802df2a:	4a38      	ldr	r2, [pc, #224]	; (802e00c <DMA_CalcBaseAndBitshift+0x134>)
 802df2c:	4293      	cmp	r3, r2
 802df2e:	d027      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802df30:	687b      	ldr	r3, [r7, #4]
 802df32:	681b      	ldr	r3, [r3, #0]
 802df34:	4a36      	ldr	r2, [pc, #216]	; (802e010 <DMA_CalcBaseAndBitshift+0x138>)
 802df36:	4293      	cmp	r3, r2
 802df38:	d022      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802df3a:	687b      	ldr	r3, [r7, #4]
 802df3c:	681b      	ldr	r3, [r3, #0]
 802df3e:	4a35      	ldr	r2, [pc, #212]	; (802e014 <DMA_CalcBaseAndBitshift+0x13c>)
 802df40:	4293      	cmp	r3, r2
 802df42:	d01d      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802df44:	687b      	ldr	r3, [r7, #4]
 802df46:	681b      	ldr	r3, [r3, #0]
 802df48:	4a33      	ldr	r2, [pc, #204]	; (802e018 <DMA_CalcBaseAndBitshift+0x140>)
 802df4a:	4293      	cmp	r3, r2
 802df4c:	d018      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802df4e:	687b      	ldr	r3, [r7, #4]
 802df50:	681b      	ldr	r3, [r3, #0]
 802df52:	4a32      	ldr	r2, [pc, #200]	; (802e01c <DMA_CalcBaseAndBitshift+0x144>)
 802df54:	4293      	cmp	r3, r2
 802df56:	d013      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802df58:	687b      	ldr	r3, [r7, #4]
 802df5a:	681b      	ldr	r3, [r3, #0]
 802df5c:	4a30      	ldr	r2, [pc, #192]	; (802e020 <DMA_CalcBaseAndBitshift+0x148>)
 802df5e:	4293      	cmp	r3, r2
 802df60:	d00e      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802df62:	687b      	ldr	r3, [r7, #4]
 802df64:	681b      	ldr	r3, [r3, #0]
 802df66:	4a2f      	ldr	r2, [pc, #188]	; (802e024 <DMA_CalcBaseAndBitshift+0x14c>)
 802df68:	4293      	cmp	r3, r2
 802df6a:	d009      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802df6c:	687b      	ldr	r3, [r7, #4]
 802df6e:	681b      	ldr	r3, [r3, #0]
 802df70:	4a2d      	ldr	r2, [pc, #180]	; (802e028 <DMA_CalcBaseAndBitshift+0x150>)
 802df72:	4293      	cmp	r3, r2
 802df74:	d004      	beq.n	802df80 <DMA_CalcBaseAndBitshift+0xa8>
 802df76:	687b      	ldr	r3, [r7, #4]
 802df78:	681b      	ldr	r3, [r3, #0]
 802df7a:	4a2c      	ldr	r2, [pc, #176]	; (802e02c <DMA_CalcBaseAndBitshift+0x154>)
 802df7c:	4293      	cmp	r3, r2
 802df7e:	d101      	bne.n	802df84 <DMA_CalcBaseAndBitshift+0xac>
 802df80:	2301      	movs	r3, #1
 802df82:	e000      	b.n	802df86 <DMA_CalcBaseAndBitshift+0xae>
 802df84:	2300      	movs	r3, #0
 802df86:	2b00      	cmp	r3, #0
 802df88:	d024      	beq.n	802dfd4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802df8a:	687b      	ldr	r3, [r7, #4]
 802df8c:	681b      	ldr	r3, [r3, #0]
 802df8e:	b2db      	uxtb	r3, r3
 802df90:	3b10      	subs	r3, #16
 802df92:	4a27      	ldr	r2, [pc, #156]	; (802e030 <DMA_CalcBaseAndBitshift+0x158>)
 802df94:	fba2 2303 	umull	r2, r3, r2, r3
 802df98:	091b      	lsrs	r3, r3, #4
 802df9a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 802df9c:	68fb      	ldr	r3, [r7, #12]
 802df9e:	f003 0307 	and.w	r3, r3, #7
 802dfa2:	4a24      	ldr	r2, [pc, #144]	; (802e034 <DMA_CalcBaseAndBitshift+0x15c>)
 802dfa4:	5cd3      	ldrb	r3, [r2, r3]
 802dfa6:	461a      	mov	r2, r3
 802dfa8:	687b      	ldr	r3, [r7, #4]
 802dfaa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 802dfac:	68fb      	ldr	r3, [r7, #12]
 802dfae:	2b03      	cmp	r3, #3
 802dfb0:	d908      	bls.n	802dfc4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 802dfb2:	687b      	ldr	r3, [r7, #4]
 802dfb4:	681b      	ldr	r3, [r3, #0]
 802dfb6:	461a      	mov	r2, r3
 802dfb8:	4b1f      	ldr	r3, [pc, #124]	; (802e038 <DMA_CalcBaseAndBitshift+0x160>)
 802dfba:	4013      	ands	r3, r2
 802dfbc:	1d1a      	adds	r2, r3, #4
 802dfbe:	687b      	ldr	r3, [r7, #4]
 802dfc0:	659a      	str	r2, [r3, #88]	; 0x58
 802dfc2:	e00d      	b.n	802dfe0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 802dfc4:	687b      	ldr	r3, [r7, #4]
 802dfc6:	681b      	ldr	r3, [r3, #0]
 802dfc8:	461a      	mov	r2, r3
 802dfca:	4b1b      	ldr	r3, [pc, #108]	; (802e038 <DMA_CalcBaseAndBitshift+0x160>)
 802dfcc:	4013      	ands	r3, r2
 802dfce:	687a      	ldr	r2, [r7, #4]
 802dfd0:	6593      	str	r3, [r2, #88]	; 0x58
 802dfd2:	e005      	b.n	802dfe0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 802dfd4:	687b      	ldr	r3, [r7, #4]
 802dfd6:	681b      	ldr	r3, [r3, #0]
 802dfd8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802dfdc:	687b      	ldr	r3, [r7, #4]
 802dfde:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 802dfe0:	687b      	ldr	r3, [r7, #4]
 802dfe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 802dfe4:	4618      	mov	r0, r3
 802dfe6:	3714      	adds	r7, #20
 802dfe8:	46bd      	mov	sp, r7
 802dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dfee:	4770      	bx	lr
 802dff0:	40020010 	.word	0x40020010
 802dff4:	40020028 	.word	0x40020028
 802dff8:	40020040 	.word	0x40020040
 802dffc:	40020058 	.word	0x40020058
 802e000:	40020070 	.word	0x40020070
 802e004:	40020088 	.word	0x40020088
 802e008:	400200a0 	.word	0x400200a0
 802e00c:	400200b8 	.word	0x400200b8
 802e010:	40020410 	.word	0x40020410
 802e014:	40020428 	.word	0x40020428
 802e018:	40020440 	.word	0x40020440
 802e01c:	40020458 	.word	0x40020458
 802e020:	40020470 	.word	0x40020470
 802e024:	40020488 	.word	0x40020488
 802e028:	400204a0 	.word	0x400204a0
 802e02c:	400204b8 	.word	0x400204b8
 802e030:	aaaaaaab 	.word	0xaaaaaaab
 802e034:	08058570 	.word	0x08058570
 802e038:	fffffc00 	.word	0xfffffc00

0802e03c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802e03c:	b480      	push	{r7}
 802e03e:	b085      	sub	sp, #20
 802e040:	af00      	add	r7, sp, #0
 802e042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802e044:	2300      	movs	r3, #0
 802e046:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802e048:	687b      	ldr	r3, [r7, #4]
 802e04a:	699b      	ldr	r3, [r3, #24]
 802e04c:	2b00      	cmp	r3, #0
 802e04e:	d120      	bne.n	802e092 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 802e050:	687b      	ldr	r3, [r7, #4]
 802e052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e054:	2b03      	cmp	r3, #3
 802e056:	d858      	bhi.n	802e10a <DMA_CheckFifoParam+0xce>
 802e058:	a201      	add	r2, pc, #4	; (adr r2, 802e060 <DMA_CheckFifoParam+0x24>)
 802e05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802e05e:	bf00      	nop
 802e060:	0802e071 	.word	0x0802e071
 802e064:	0802e083 	.word	0x0802e083
 802e068:	0802e071 	.word	0x0802e071
 802e06c:	0802e10b 	.word	0x0802e10b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802e070:	687b      	ldr	r3, [r7, #4]
 802e072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802e078:	2b00      	cmp	r3, #0
 802e07a:	d048      	beq.n	802e10e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 802e07c:	2301      	movs	r3, #1
 802e07e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802e080:	e045      	b.n	802e10e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802e082:	687b      	ldr	r3, [r7, #4]
 802e084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e086:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802e08a:	d142      	bne.n	802e112 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 802e08c:	2301      	movs	r3, #1
 802e08e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802e090:	e03f      	b.n	802e112 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802e092:	687b      	ldr	r3, [r7, #4]
 802e094:	699b      	ldr	r3, [r3, #24]
 802e096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802e09a:	d123      	bne.n	802e0e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 802e09c:	687b      	ldr	r3, [r7, #4]
 802e09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e0a0:	2b03      	cmp	r3, #3
 802e0a2:	d838      	bhi.n	802e116 <DMA_CheckFifoParam+0xda>
 802e0a4:	a201      	add	r2, pc, #4	; (adr r2, 802e0ac <DMA_CheckFifoParam+0x70>)
 802e0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802e0aa:	bf00      	nop
 802e0ac:	0802e0bd 	.word	0x0802e0bd
 802e0b0:	0802e0c3 	.word	0x0802e0c3
 802e0b4:	0802e0bd 	.word	0x0802e0bd
 802e0b8:	0802e0d5 	.word	0x0802e0d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 802e0bc:	2301      	movs	r3, #1
 802e0be:	73fb      	strb	r3, [r7, #15]
        break;
 802e0c0:	e030      	b.n	802e124 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802e0c2:	687b      	ldr	r3, [r7, #4]
 802e0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e0c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802e0ca:	2b00      	cmp	r3, #0
 802e0cc:	d025      	beq.n	802e11a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 802e0ce:	2301      	movs	r3, #1
 802e0d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802e0d2:	e022      	b.n	802e11a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802e0d4:	687b      	ldr	r3, [r7, #4]
 802e0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e0d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802e0dc:	d11f      	bne.n	802e11e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 802e0de:	2301      	movs	r3, #1
 802e0e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802e0e2:	e01c      	b.n	802e11e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 802e0e4:	687b      	ldr	r3, [r7, #4]
 802e0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e0e8:	2b02      	cmp	r3, #2
 802e0ea:	d902      	bls.n	802e0f2 <DMA_CheckFifoParam+0xb6>
 802e0ec:	2b03      	cmp	r3, #3
 802e0ee:	d003      	beq.n	802e0f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 802e0f0:	e018      	b.n	802e124 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 802e0f2:	2301      	movs	r3, #1
 802e0f4:	73fb      	strb	r3, [r7, #15]
        break;
 802e0f6:	e015      	b.n	802e124 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802e0f8:	687b      	ldr	r3, [r7, #4]
 802e0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e0fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802e100:	2b00      	cmp	r3, #0
 802e102:	d00e      	beq.n	802e122 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 802e104:	2301      	movs	r3, #1
 802e106:	73fb      	strb	r3, [r7, #15]
    break;
 802e108:	e00b      	b.n	802e122 <DMA_CheckFifoParam+0xe6>
        break;
 802e10a:	bf00      	nop
 802e10c:	e00a      	b.n	802e124 <DMA_CheckFifoParam+0xe8>
        break;
 802e10e:	bf00      	nop
 802e110:	e008      	b.n	802e124 <DMA_CheckFifoParam+0xe8>
        break;
 802e112:	bf00      	nop
 802e114:	e006      	b.n	802e124 <DMA_CheckFifoParam+0xe8>
        break;
 802e116:	bf00      	nop
 802e118:	e004      	b.n	802e124 <DMA_CheckFifoParam+0xe8>
        break;
 802e11a:	bf00      	nop
 802e11c:	e002      	b.n	802e124 <DMA_CheckFifoParam+0xe8>
        break;
 802e11e:	bf00      	nop
 802e120:	e000      	b.n	802e124 <DMA_CheckFifoParam+0xe8>
    break;
 802e122:	bf00      	nop
    }
  }

  return status;
 802e124:	7bfb      	ldrb	r3, [r7, #15]
}
 802e126:	4618      	mov	r0, r3
 802e128:	3714      	adds	r7, #20
 802e12a:	46bd      	mov	sp, r7
 802e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e130:	4770      	bx	lr
 802e132:	bf00      	nop

0802e134 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802e134:	b480      	push	{r7}
 802e136:	b085      	sub	sp, #20
 802e138:	af00      	add	r7, sp, #0
 802e13a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 802e13c:	687b      	ldr	r3, [r7, #4]
 802e13e:	681b      	ldr	r3, [r3, #0]
 802e140:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802e142:	687b      	ldr	r3, [r7, #4]
 802e144:	681b      	ldr	r3, [r3, #0]
 802e146:	4a38      	ldr	r2, [pc, #224]	; (802e228 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 802e148:	4293      	cmp	r3, r2
 802e14a:	d022      	beq.n	802e192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e14c:	687b      	ldr	r3, [r7, #4]
 802e14e:	681b      	ldr	r3, [r3, #0]
 802e150:	4a36      	ldr	r2, [pc, #216]	; (802e22c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 802e152:	4293      	cmp	r3, r2
 802e154:	d01d      	beq.n	802e192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e156:	687b      	ldr	r3, [r7, #4]
 802e158:	681b      	ldr	r3, [r3, #0]
 802e15a:	4a35      	ldr	r2, [pc, #212]	; (802e230 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 802e15c:	4293      	cmp	r3, r2
 802e15e:	d018      	beq.n	802e192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e160:	687b      	ldr	r3, [r7, #4]
 802e162:	681b      	ldr	r3, [r3, #0]
 802e164:	4a33      	ldr	r2, [pc, #204]	; (802e234 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 802e166:	4293      	cmp	r3, r2
 802e168:	d013      	beq.n	802e192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e16a:	687b      	ldr	r3, [r7, #4]
 802e16c:	681b      	ldr	r3, [r3, #0]
 802e16e:	4a32      	ldr	r2, [pc, #200]	; (802e238 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 802e170:	4293      	cmp	r3, r2
 802e172:	d00e      	beq.n	802e192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e174:	687b      	ldr	r3, [r7, #4]
 802e176:	681b      	ldr	r3, [r3, #0]
 802e178:	4a30      	ldr	r2, [pc, #192]	; (802e23c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 802e17a:	4293      	cmp	r3, r2
 802e17c:	d009      	beq.n	802e192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e17e:	687b      	ldr	r3, [r7, #4]
 802e180:	681b      	ldr	r3, [r3, #0]
 802e182:	4a2f      	ldr	r2, [pc, #188]	; (802e240 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 802e184:	4293      	cmp	r3, r2
 802e186:	d004      	beq.n	802e192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e188:	687b      	ldr	r3, [r7, #4]
 802e18a:	681b      	ldr	r3, [r3, #0]
 802e18c:	4a2d      	ldr	r2, [pc, #180]	; (802e244 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 802e18e:	4293      	cmp	r3, r2
 802e190:	d101      	bne.n	802e196 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 802e192:	2301      	movs	r3, #1
 802e194:	e000      	b.n	802e198 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 802e196:	2300      	movs	r3, #0
 802e198:	2b00      	cmp	r3, #0
 802e19a:	d01a      	beq.n	802e1d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 802e19c:	687b      	ldr	r3, [r7, #4]
 802e19e:	681b      	ldr	r3, [r3, #0]
 802e1a0:	b2db      	uxtb	r3, r3
 802e1a2:	3b08      	subs	r3, #8
 802e1a4:	4a28      	ldr	r2, [pc, #160]	; (802e248 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 802e1a6:	fba2 2303 	umull	r2, r3, r2, r3
 802e1aa:	091b      	lsrs	r3, r3, #4
 802e1ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 802e1ae:	68fa      	ldr	r2, [r7, #12]
 802e1b0:	4b26      	ldr	r3, [pc, #152]	; (802e24c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 802e1b2:	4413      	add	r3, r2
 802e1b4:	009b      	lsls	r3, r3, #2
 802e1b6:	461a      	mov	r2, r3
 802e1b8:	687b      	ldr	r3, [r7, #4]
 802e1ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 802e1bc:	687b      	ldr	r3, [r7, #4]
 802e1be:	4a24      	ldr	r2, [pc, #144]	; (802e250 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 802e1c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802e1c2:	68fb      	ldr	r3, [r7, #12]
 802e1c4:	f003 031f 	and.w	r3, r3, #31
 802e1c8:	2201      	movs	r2, #1
 802e1ca:	409a      	lsls	r2, r3
 802e1cc:	687b      	ldr	r3, [r7, #4]
 802e1ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 802e1d0:	e024      	b.n	802e21c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802e1d2:	687b      	ldr	r3, [r7, #4]
 802e1d4:	681b      	ldr	r3, [r3, #0]
 802e1d6:	b2db      	uxtb	r3, r3
 802e1d8:	3b10      	subs	r3, #16
 802e1da:	4a1e      	ldr	r2, [pc, #120]	; (802e254 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 802e1dc:	fba2 2303 	umull	r2, r3, r2, r3
 802e1e0:	091b      	lsrs	r3, r3, #4
 802e1e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 802e1e4:	68bb      	ldr	r3, [r7, #8]
 802e1e6:	4a1c      	ldr	r2, [pc, #112]	; (802e258 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 802e1e8:	4293      	cmp	r3, r2
 802e1ea:	d806      	bhi.n	802e1fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 802e1ec:	68bb      	ldr	r3, [r7, #8]
 802e1ee:	4a1b      	ldr	r2, [pc, #108]	; (802e25c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 802e1f0:	4293      	cmp	r3, r2
 802e1f2:	d902      	bls.n	802e1fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 802e1f4:	68fb      	ldr	r3, [r7, #12]
 802e1f6:	3308      	adds	r3, #8
 802e1f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 802e1fa:	68fa      	ldr	r2, [r7, #12]
 802e1fc:	4b18      	ldr	r3, [pc, #96]	; (802e260 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 802e1fe:	4413      	add	r3, r2
 802e200:	009b      	lsls	r3, r3, #2
 802e202:	461a      	mov	r2, r3
 802e204:	687b      	ldr	r3, [r7, #4]
 802e206:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 802e208:	687b      	ldr	r3, [r7, #4]
 802e20a:	4a16      	ldr	r2, [pc, #88]	; (802e264 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 802e20c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802e20e:	68fb      	ldr	r3, [r7, #12]
 802e210:	f003 031f 	and.w	r3, r3, #31
 802e214:	2201      	movs	r2, #1
 802e216:	409a      	lsls	r2, r3
 802e218:	687b      	ldr	r3, [r7, #4]
 802e21a:	669a      	str	r2, [r3, #104]	; 0x68
}
 802e21c:	bf00      	nop
 802e21e:	3714      	adds	r7, #20
 802e220:	46bd      	mov	sp, r7
 802e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e226:	4770      	bx	lr
 802e228:	58025408 	.word	0x58025408
 802e22c:	5802541c 	.word	0x5802541c
 802e230:	58025430 	.word	0x58025430
 802e234:	58025444 	.word	0x58025444
 802e238:	58025458 	.word	0x58025458
 802e23c:	5802546c 	.word	0x5802546c
 802e240:	58025480 	.word	0x58025480
 802e244:	58025494 	.word	0x58025494
 802e248:	cccccccd 	.word	0xcccccccd
 802e24c:	16009600 	.word	0x16009600
 802e250:	58025880 	.word	0x58025880
 802e254:	aaaaaaab 	.word	0xaaaaaaab
 802e258:	400204b8 	.word	0x400204b8
 802e25c:	4002040f 	.word	0x4002040f
 802e260:	10008200 	.word	0x10008200
 802e264:	40020880 	.word	0x40020880

0802e268 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802e268:	b480      	push	{r7}
 802e26a:	b085      	sub	sp, #20
 802e26c:	af00      	add	r7, sp, #0
 802e26e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 802e270:	687b      	ldr	r3, [r7, #4]
 802e272:	685b      	ldr	r3, [r3, #4]
 802e274:	b2db      	uxtb	r3, r3
 802e276:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 802e278:	68fb      	ldr	r3, [r7, #12]
 802e27a:	2b00      	cmp	r3, #0
 802e27c:	d04a      	beq.n	802e314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 802e27e:	68fb      	ldr	r3, [r7, #12]
 802e280:	2b08      	cmp	r3, #8
 802e282:	d847      	bhi.n	802e314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802e284:	687b      	ldr	r3, [r7, #4]
 802e286:	681b      	ldr	r3, [r3, #0]
 802e288:	4a25      	ldr	r2, [pc, #148]	; (802e320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 802e28a:	4293      	cmp	r3, r2
 802e28c:	d022      	beq.n	802e2d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e28e:	687b      	ldr	r3, [r7, #4]
 802e290:	681b      	ldr	r3, [r3, #0]
 802e292:	4a24      	ldr	r2, [pc, #144]	; (802e324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 802e294:	4293      	cmp	r3, r2
 802e296:	d01d      	beq.n	802e2d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e298:	687b      	ldr	r3, [r7, #4]
 802e29a:	681b      	ldr	r3, [r3, #0]
 802e29c:	4a22      	ldr	r2, [pc, #136]	; (802e328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 802e29e:	4293      	cmp	r3, r2
 802e2a0:	d018      	beq.n	802e2d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e2a2:	687b      	ldr	r3, [r7, #4]
 802e2a4:	681b      	ldr	r3, [r3, #0]
 802e2a6:	4a21      	ldr	r2, [pc, #132]	; (802e32c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 802e2a8:	4293      	cmp	r3, r2
 802e2aa:	d013      	beq.n	802e2d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e2ac:	687b      	ldr	r3, [r7, #4]
 802e2ae:	681b      	ldr	r3, [r3, #0]
 802e2b0:	4a1f      	ldr	r2, [pc, #124]	; (802e330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 802e2b2:	4293      	cmp	r3, r2
 802e2b4:	d00e      	beq.n	802e2d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e2b6:	687b      	ldr	r3, [r7, #4]
 802e2b8:	681b      	ldr	r3, [r3, #0]
 802e2ba:	4a1e      	ldr	r2, [pc, #120]	; (802e334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 802e2bc:	4293      	cmp	r3, r2
 802e2be:	d009      	beq.n	802e2d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e2c0:	687b      	ldr	r3, [r7, #4]
 802e2c2:	681b      	ldr	r3, [r3, #0]
 802e2c4:	4a1c      	ldr	r2, [pc, #112]	; (802e338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 802e2c6:	4293      	cmp	r3, r2
 802e2c8:	d004      	beq.n	802e2d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e2ca:	687b      	ldr	r3, [r7, #4]
 802e2cc:	681b      	ldr	r3, [r3, #0]
 802e2ce:	4a1b      	ldr	r2, [pc, #108]	; (802e33c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 802e2d0:	4293      	cmp	r3, r2
 802e2d2:	d101      	bne.n	802e2d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 802e2d4:	2301      	movs	r3, #1
 802e2d6:	e000      	b.n	802e2da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 802e2d8:	2300      	movs	r3, #0
 802e2da:	2b00      	cmp	r3, #0
 802e2dc:	d00a      	beq.n	802e2f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 802e2de:	68fa      	ldr	r2, [r7, #12]
 802e2e0:	4b17      	ldr	r3, [pc, #92]	; (802e340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 802e2e2:	4413      	add	r3, r2
 802e2e4:	009b      	lsls	r3, r3, #2
 802e2e6:	461a      	mov	r2, r3
 802e2e8:	687b      	ldr	r3, [r7, #4]
 802e2ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 802e2ec:	687b      	ldr	r3, [r7, #4]
 802e2ee:	4a15      	ldr	r2, [pc, #84]	; (802e344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 802e2f0:	671a      	str	r2, [r3, #112]	; 0x70
 802e2f2:	e009      	b.n	802e308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 802e2f4:	68fa      	ldr	r2, [r7, #12]
 802e2f6:	4b14      	ldr	r3, [pc, #80]	; (802e348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 802e2f8:	4413      	add	r3, r2
 802e2fa:	009b      	lsls	r3, r3, #2
 802e2fc:	461a      	mov	r2, r3
 802e2fe:	687b      	ldr	r3, [r7, #4]
 802e300:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 802e302:	687b      	ldr	r3, [r7, #4]
 802e304:	4a11      	ldr	r2, [pc, #68]	; (802e34c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 802e306:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 802e308:	68fb      	ldr	r3, [r7, #12]
 802e30a:	3b01      	subs	r3, #1
 802e30c:	2201      	movs	r2, #1
 802e30e:	409a      	lsls	r2, r3
 802e310:	687b      	ldr	r3, [r7, #4]
 802e312:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 802e314:	bf00      	nop
 802e316:	3714      	adds	r7, #20
 802e318:	46bd      	mov	sp, r7
 802e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e31e:	4770      	bx	lr
 802e320:	58025408 	.word	0x58025408
 802e324:	5802541c 	.word	0x5802541c
 802e328:	58025430 	.word	0x58025430
 802e32c:	58025444 	.word	0x58025444
 802e330:	58025458 	.word	0x58025458
 802e334:	5802546c 	.word	0x5802546c
 802e338:	58025480 	.word	0x58025480
 802e33c:	58025494 	.word	0x58025494
 802e340:	1600963f 	.word	0x1600963f
 802e344:	58025940 	.word	0x58025940
 802e348:	1000823f 	.word	0x1000823f
 802e34c:	40020940 	.word	0x40020940

0802e350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802e350:	b480      	push	{r7}
 802e352:	b089      	sub	sp, #36	; 0x24
 802e354:	af00      	add	r7, sp, #0
 802e356:	6078      	str	r0, [r7, #4]
 802e358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 802e35a:	2300      	movs	r3, #0
 802e35c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 802e35e:	4b89      	ldr	r3, [pc, #548]	; (802e584 <HAL_GPIO_Init+0x234>)
 802e360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802e362:	e194      	b.n	802e68e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 802e364:	683b      	ldr	r3, [r7, #0]
 802e366:	681a      	ldr	r2, [r3, #0]
 802e368:	2101      	movs	r1, #1
 802e36a:	69fb      	ldr	r3, [r7, #28]
 802e36c:	fa01 f303 	lsl.w	r3, r1, r3
 802e370:	4013      	ands	r3, r2
 802e372:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 802e374:	693b      	ldr	r3, [r7, #16]
 802e376:	2b00      	cmp	r3, #0
 802e378:	f000 8186 	beq.w	802e688 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 802e37c:	683b      	ldr	r3, [r7, #0]
 802e37e:	685b      	ldr	r3, [r3, #4]
 802e380:	f003 0303 	and.w	r3, r3, #3
 802e384:	2b01      	cmp	r3, #1
 802e386:	d005      	beq.n	802e394 <HAL_GPIO_Init+0x44>
 802e388:	683b      	ldr	r3, [r7, #0]
 802e38a:	685b      	ldr	r3, [r3, #4]
 802e38c:	f003 0303 	and.w	r3, r3, #3
 802e390:	2b02      	cmp	r3, #2
 802e392:	d130      	bne.n	802e3f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 802e394:	687b      	ldr	r3, [r7, #4]
 802e396:	689b      	ldr	r3, [r3, #8]
 802e398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 802e39a:	69fb      	ldr	r3, [r7, #28]
 802e39c:	005b      	lsls	r3, r3, #1
 802e39e:	2203      	movs	r2, #3
 802e3a0:	fa02 f303 	lsl.w	r3, r2, r3
 802e3a4:	43db      	mvns	r3, r3
 802e3a6:	69ba      	ldr	r2, [r7, #24]
 802e3a8:	4013      	ands	r3, r2
 802e3aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802e3ac:	683b      	ldr	r3, [r7, #0]
 802e3ae:	68da      	ldr	r2, [r3, #12]
 802e3b0:	69fb      	ldr	r3, [r7, #28]
 802e3b2:	005b      	lsls	r3, r3, #1
 802e3b4:	fa02 f303 	lsl.w	r3, r2, r3
 802e3b8:	69ba      	ldr	r2, [r7, #24]
 802e3ba:	4313      	orrs	r3, r2
 802e3bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802e3be:	687b      	ldr	r3, [r7, #4]
 802e3c0:	69ba      	ldr	r2, [r7, #24]
 802e3c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802e3c4:	687b      	ldr	r3, [r7, #4]
 802e3c6:	685b      	ldr	r3, [r3, #4]
 802e3c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 802e3ca:	2201      	movs	r2, #1
 802e3cc:	69fb      	ldr	r3, [r7, #28]
 802e3ce:	fa02 f303 	lsl.w	r3, r2, r3
 802e3d2:	43db      	mvns	r3, r3
 802e3d4:	69ba      	ldr	r2, [r7, #24]
 802e3d6:	4013      	ands	r3, r2
 802e3d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802e3da:	683b      	ldr	r3, [r7, #0]
 802e3dc:	685b      	ldr	r3, [r3, #4]
 802e3de:	091b      	lsrs	r3, r3, #4
 802e3e0:	f003 0201 	and.w	r2, r3, #1
 802e3e4:	69fb      	ldr	r3, [r7, #28]
 802e3e6:	fa02 f303 	lsl.w	r3, r2, r3
 802e3ea:	69ba      	ldr	r2, [r7, #24]
 802e3ec:	4313      	orrs	r3, r2
 802e3ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802e3f0:	687b      	ldr	r3, [r7, #4]
 802e3f2:	69ba      	ldr	r2, [r7, #24]
 802e3f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802e3f6:	683b      	ldr	r3, [r7, #0]
 802e3f8:	685b      	ldr	r3, [r3, #4]
 802e3fa:	f003 0303 	and.w	r3, r3, #3
 802e3fe:	2b03      	cmp	r3, #3
 802e400:	d017      	beq.n	802e432 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802e402:	687b      	ldr	r3, [r7, #4]
 802e404:	68db      	ldr	r3, [r3, #12]
 802e406:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 802e408:	69fb      	ldr	r3, [r7, #28]
 802e40a:	005b      	lsls	r3, r3, #1
 802e40c:	2203      	movs	r2, #3
 802e40e:	fa02 f303 	lsl.w	r3, r2, r3
 802e412:	43db      	mvns	r3, r3
 802e414:	69ba      	ldr	r2, [r7, #24]
 802e416:	4013      	ands	r3, r2
 802e418:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802e41a:	683b      	ldr	r3, [r7, #0]
 802e41c:	689a      	ldr	r2, [r3, #8]
 802e41e:	69fb      	ldr	r3, [r7, #28]
 802e420:	005b      	lsls	r3, r3, #1
 802e422:	fa02 f303 	lsl.w	r3, r2, r3
 802e426:	69ba      	ldr	r2, [r7, #24]
 802e428:	4313      	orrs	r3, r2
 802e42a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802e42c:	687b      	ldr	r3, [r7, #4]
 802e42e:	69ba      	ldr	r2, [r7, #24]
 802e430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802e432:	683b      	ldr	r3, [r7, #0]
 802e434:	685b      	ldr	r3, [r3, #4]
 802e436:	f003 0303 	and.w	r3, r3, #3
 802e43a:	2b02      	cmp	r3, #2
 802e43c:	d123      	bne.n	802e486 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802e43e:	69fb      	ldr	r3, [r7, #28]
 802e440:	08da      	lsrs	r2, r3, #3
 802e442:	687b      	ldr	r3, [r7, #4]
 802e444:	3208      	adds	r2, #8
 802e446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e44a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 802e44c:	69fb      	ldr	r3, [r7, #28]
 802e44e:	f003 0307 	and.w	r3, r3, #7
 802e452:	009b      	lsls	r3, r3, #2
 802e454:	220f      	movs	r2, #15
 802e456:	fa02 f303 	lsl.w	r3, r2, r3
 802e45a:	43db      	mvns	r3, r3
 802e45c:	69ba      	ldr	r2, [r7, #24]
 802e45e:	4013      	ands	r3, r2
 802e460:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 802e462:	683b      	ldr	r3, [r7, #0]
 802e464:	691a      	ldr	r2, [r3, #16]
 802e466:	69fb      	ldr	r3, [r7, #28]
 802e468:	f003 0307 	and.w	r3, r3, #7
 802e46c:	009b      	lsls	r3, r3, #2
 802e46e:	fa02 f303 	lsl.w	r3, r2, r3
 802e472:	69ba      	ldr	r2, [r7, #24]
 802e474:	4313      	orrs	r3, r2
 802e476:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802e478:	69fb      	ldr	r3, [r7, #28]
 802e47a:	08da      	lsrs	r2, r3, #3
 802e47c:	687b      	ldr	r3, [r7, #4]
 802e47e:	3208      	adds	r2, #8
 802e480:	69b9      	ldr	r1, [r7, #24]
 802e482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802e486:	687b      	ldr	r3, [r7, #4]
 802e488:	681b      	ldr	r3, [r3, #0]
 802e48a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 802e48c:	69fb      	ldr	r3, [r7, #28]
 802e48e:	005b      	lsls	r3, r3, #1
 802e490:	2203      	movs	r2, #3
 802e492:	fa02 f303 	lsl.w	r3, r2, r3
 802e496:	43db      	mvns	r3, r3
 802e498:	69ba      	ldr	r2, [r7, #24]
 802e49a:	4013      	ands	r3, r2
 802e49c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802e49e:	683b      	ldr	r3, [r7, #0]
 802e4a0:	685b      	ldr	r3, [r3, #4]
 802e4a2:	f003 0203 	and.w	r2, r3, #3
 802e4a6:	69fb      	ldr	r3, [r7, #28]
 802e4a8:	005b      	lsls	r3, r3, #1
 802e4aa:	fa02 f303 	lsl.w	r3, r2, r3
 802e4ae:	69ba      	ldr	r2, [r7, #24]
 802e4b0:	4313      	orrs	r3, r2
 802e4b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802e4b4:	687b      	ldr	r3, [r7, #4]
 802e4b6:	69ba      	ldr	r2, [r7, #24]
 802e4b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802e4ba:	683b      	ldr	r3, [r7, #0]
 802e4bc:	685b      	ldr	r3, [r3, #4]
 802e4be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802e4c2:	2b00      	cmp	r3, #0
 802e4c4:	f000 80e0 	beq.w	802e688 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802e4c8:	4b2f      	ldr	r3, [pc, #188]	; (802e588 <HAL_GPIO_Init+0x238>)
 802e4ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802e4ce:	4a2e      	ldr	r2, [pc, #184]	; (802e588 <HAL_GPIO_Init+0x238>)
 802e4d0:	f043 0302 	orr.w	r3, r3, #2
 802e4d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802e4d8:	4b2b      	ldr	r3, [pc, #172]	; (802e588 <HAL_GPIO_Init+0x238>)
 802e4da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802e4de:	f003 0302 	and.w	r3, r3, #2
 802e4e2:	60fb      	str	r3, [r7, #12]
 802e4e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802e4e6:	4a29      	ldr	r2, [pc, #164]	; (802e58c <HAL_GPIO_Init+0x23c>)
 802e4e8:	69fb      	ldr	r3, [r7, #28]
 802e4ea:	089b      	lsrs	r3, r3, #2
 802e4ec:	3302      	adds	r3, #2
 802e4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802e4f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 802e4f4:	69fb      	ldr	r3, [r7, #28]
 802e4f6:	f003 0303 	and.w	r3, r3, #3
 802e4fa:	009b      	lsls	r3, r3, #2
 802e4fc:	220f      	movs	r2, #15
 802e4fe:	fa02 f303 	lsl.w	r3, r2, r3
 802e502:	43db      	mvns	r3, r3
 802e504:	69ba      	ldr	r2, [r7, #24]
 802e506:	4013      	ands	r3, r2
 802e508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 802e50a:	687b      	ldr	r3, [r7, #4]
 802e50c:	4a20      	ldr	r2, [pc, #128]	; (802e590 <HAL_GPIO_Init+0x240>)
 802e50e:	4293      	cmp	r3, r2
 802e510:	d052      	beq.n	802e5b8 <HAL_GPIO_Init+0x268>
 802e512:	687b      	ldr	r3, [r7, #4]
 802e514:	4a1f      	ldr	r2, [pc, #124]	; (802e594 <HAL_GPIO_Init+0x244>)
 802e516:	4293      	cmp	r3, r2
 802e518:	d031      	beq.n	802e57e <HAL_GPIO_Init+0x22e>
 802e51a:	687b      	ldr	r3, [r7, #4]
 802e51c:	4a1e      	ldr	r2, [pc, #120]	; (802e598 <HAL_GPIO_Init+0x248>)
 802e51e:	4293      	cmp	r3, r2
 802e520:	d02b      	beq.n	802e57a <HAL_GPIO_Init+0x22a>
 802e522:	687b      	ldr	r3, [r7, #4]
 802e524:	4a1d      	ldr	r2, [pc, #116]	; (802e59c <HAL_GPIO_Init+0x24c>)
 802e526:	4293      	cmp	r3, r2
 802e528:	d025      	beq.n	802e576 <HAL_GPIO_Init+0x226>
 802e52a:	687b      	ldr	r3, [r7, #4]
 802e52c:	4a1c      	ldr	r2, [pc, #112]	; (802e5a0 <HAL_GPIO_Init+0x250>)
 802e52e:	4293      	cmp	r3, r2
 802e530:	d01f      	beq.n	802e572 <HAL_GPIO_Init+0x222>
 802e532:	687b      	ldr	r3, [r7, #4]
 802e534:	4a1b      	ldr	r2, [pc, #108]	; (802e5a4 <HAL_GPIO_Init+0x254>)
 802e536:	4293      	cmp	r3, r2
 802e538:	d019      	beq.n	802e56e <HAL_GPIO_Init+0x21e>
 802e53a:	687b      	ldr	r3, [r7, #4]
 802e53c:	4a1a      	ldr	r2, [pc, #104]	; (802e5a8 <HAL_GPIO_Init+0x258>)
 802e53e:	4293      	cmp	r3, r2
 802e540:	d013      	beq.n	802e56a <HAL_GPIO_Init+0x21a>
 802e542:	687b      	ldr	r3, [r7, #4]
 802e544:	4a19      	ldr	r2, [pc, #100]	; (802e5ac <HAL_GPIO_Init+0x25c>)
 802e546:	4293      	cmp	r3, r2
 802e548:	d00d      	beq.n	802e566 <HAL_GPIO_Init+0x216>
 802e54a:	687b      	ldr	r3, [r7, #4]
 802e54c:	4a18      	ldr	r2, [pc, #96]	; (802e5b0 <HAL_GPIO_Init+0x260>)
 802e54e:	4293      	cmp	r3, r2
 802e550:	d007      	beq.n	802e562 <HAL_GPIO_Init+0x212>
 802e552:	687b      	ldr	r3, [r7, #4]
 802e554:	4a17      	ldr	r2, [pc, #92]	; (802e5b4 <HAL_GPIO_Init+0x264>)
 802e556:	4293      	cmp	r3, r2
 802e558:	d101      	bne.n	802e55e <HAL_GPIO_Init+0x20e>
 802e55a:	2309      	movs	r3, #9
 802e55c:	e02d      	b.n	802e5ba <HAL_GPIO_Init+0x26a>
 802e55e:	230a      	movs	r3, #10
 802e560:	e02b      	b.n	802e5ba <HAL_GPIO_Init+0x26a>
 802e562:	2308      	movs	r3, #8
 802e564:	e029      	b.n	802e5ba <HAL_GPIO_Init+0x26a>
 802e566:	2307      	movs	r3, #7
 802e568:	e027      	b.n	802e5ba <HAL_GPIO_Init+0x26a>
 802e56a:	2306      	movs	r3, #6
 802e56c:	e025      	b.n	802e5ba <HAL_GPIO_Init+0x26a>
 802e56e:	2305      	movs	r3, #5
 802e570:	e023      	b.n	802e5ba <HAL_GPIO_Init+0x26a>
 802e572:	2304      	movs	r3, #4
 802e574:	e021      	b.n	802e5ba <HAL_GPIO_Init+0x26a>
 802e576:	2303      	movs	r3, #3
 802e578:	e01f      	b.n	802e5ba <HAL_GPIO_Init+0x26a>
 802e57a:	2302      	movs	r3, #2
 802e57c:	e01d      	b.n	802e5ba <HAL_GPIO_Init+0x26a>
 802e57e:	2301      	movs	r3, #1
 802e580:	e01b      	b.n	802e5ba <HAL_GPIO_Init+0x26a>
 802e582:	bf00      	nop
 802e584:	58000080 	.word	0x58000080
 802e588:	58024400 	.word	0x58024400
 802e58c:	58000400 	.word	0x58000400
 802e590:	58020000 	.word	0x58020000
 802e594:	58020400 	.word	0x58020400
 802e598:	58020800 	.word	0x58020800
 802e59c:	58020c00 	.word	0x58020c00
 802e5a0:	58021000 	.word	0x58021000
 802e5a4:	58021400 	.word	0x58021400
 802e5a8:	58021800 	.word	0x58021800
 802e5ac:	58021c00 	.word	0x58021c00
 802e5b0:	58022000 	.word	0x58022000
 802e5b4:	58022400 	.word	0x58022400
 802e5b8:	2300      	movs	r3, #0
 802e5ba:	69fa      	ldr	r2, [r7, #28]
 802e5bc:	f002 0203 	and.w	r2, r2, #3
 802e5c0:	0092      	lsls	r2, r2, #2
 802e5c2:	4093      	lsls	r3, r2
 802e5c4:	69ba      	ldr	r2, [r7, #24]
 802e5c6:	4313      	orrs	r3, r2
 802e5c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802e5ca:	4938      	ldr	r1, [pc, #224]	; (802e6ac <HAL_GPIO_Init+0x35c>)
 802e5cc:	69fb      	ldr	r3, [r7, #28]
 802e5ce:	089b      	lsrs	r3, r3, #2
 802e5d0:	3302      	adds	r3, #2
 802e5d2:	69ba      	ldr	r2, [r7, #24]
 802e5d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 802e5d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e5dc:	681b      	ldr	r3, [r3, #0]
 802e5de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e5e0:	693b      	ldr	r3, [r7, #16]
 802e5e2:	43db      	mvns	r3, r3
 802e5e4:	69ba      	ldr	r2, [r7, #24]
 802e5e6:	4013      	ands	r3, r2
 802e5e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802e5ea:	683b      	ldr	r3, [r7, #0]
 802e5ec:	685b      	ldr	r3, [r3, #4]
 802e5ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802e5f2:	2b00      	cmp	r3, #0
 802e5f4:	d003      	beq.n	802e5fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 802e5f6:	69ba      	ldr	r2, [r7, #24]
 802e5f8:	693b      	ldr	r3, [r7, #16]
 802e5fa:	4313      	orrs	r3, r2
 802e5fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 802e5fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e602:	69bb      	ldr	r3, [r7, #24]
 802e604:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 802e606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e60a:	685b      	ldr	r3, [r3, #4]
 802e60c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e60e:	693b      	ldr	r3, [r7, #16]
 802e610:	43db      	mvns	r3, r3
 802e612:	69ba      	ldr	r2, [r7, #24]
 802e614:	4013      	ands	r3, r2
 802e616:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802e618:	683b      	ldr	r3, [r7, #0]
 802e61a:	685b      	ldr	r3, [r3, #4]
 802e61c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802e620:	2b00      	cmp	r3, #0
 802e622:	d003      	beq.n	802e62c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802e624:	69ba      	ldr	r2, [r7, #24]
 802e626:	693b      	ldr	r3, [r7, #16]
 802e628:	4313      	orrs	r3, r2
 802e62a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 802e62c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e630:	69bb      	ldr	r3, [r7, #24]
 802e632:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 802e634:	697b      	ldr	r3, [r7, #20]
 802e636:	685b      	ldr	r3, [r3, #4]
 802e638:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e63a:	693b      	ldr	r3, [r7, #16]
 802e63c:	43db      	mvns	r3, r3
 802e63e:	69ba      	ldr	r2, [r7, #24]
 802e640:	4013      	ands	r3, r2
 802e642:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802e644:	683b      	ldr	r3, [r7, #0]
 802e646:	685b      	ldr	r3, [r3, #4]
 802e648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802e64c:	2b00      	cmp	r3, #0
 802e64e:	d003      	beq.n	802e658 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 802e650:	69ba      	ldr	r2, [r7, #24]
 802e652:	693b      	ldr	r3, [r7, #16]
 802e654:	4313      	orrs	r3, r2
 802e656:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 802e658:	697b      	ldr	r3, [r7, #20]
 802e65a:	69ba      	ldr	r2, [r7, #24]
 802e65c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 802e65e:	697b      	ldr	r3, [r7, #20]
 802e660:	681b      	ldr	r3, [r3, #0]
 802e662:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e664:	693b      	ldr	r3, [r7, #16]
 802e666:	43db      	mvns	r3, r3
 802e668:	69ba      	ldr	r2, [r7, #24]
 802e66a:	4013      	ands	r3, r2
 802e66c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802e66e:	683b      	ldr	r3, [r7, #0]
 802e670:	685b      	ldr	r3, [r3, #4]
 802e672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802e676:	2b00      	cmp	r3, #0
 802e678:	d003      	beq.n	802e682 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 802e67a:	69ba      	ldr	r2, [r7, #24]
 802e67c:	693b      	ldr	r3, [r7, #16]
 802e67e:	4313      	orrs	r3, r2
 802e680:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 802e682:	697b      	ldr	r3, [r7, #20]
 802e684:	69ba      	ldr	r2, [r7, #24]
 802e686:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 802e688:	69fb      	ldr	r3, [r7, #28]
 802e68a:	3301      	adds	r3, #1
 802e68c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802e68e:	683b      	ldr	r3, [r7, #0]
 802e690:	681a      	ldr	r2, [r3, #0]
 802e692:	69fb      	ldr	r3, [r7, #28]
 802e694:	fa22 f303 	lsr.w	r3, r2, r3
 802e698:	2b00      	cmp	r3, #0
 802e69a:	f47f ae63 	bne.w	802e364 <HAL_GPIO_Init+0x14>
  }
}
 802e69e:	bf00      	nop
 802e6a0:	bf00      	nop
 802e6a2:	3724      	adds	r7, #36	; 0x24
 802e6a4:	46bd      	mov	sp, r7
 802e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e6aa:	4770      	bx	lr
 802e6ac:	58000400 	.word	0x58000400

0802e6b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802e6b0:	b480      	push	{r7}
 802e6b2:	b083      	sub	sp, #12
 802e6b4:	af00      	add	r7, sp, #0
 802e6b6:	6078      	str	r0, [r7, #4]
 802e6b8:	460b      	mov	r3, r1
 802e6ba:	807b      	strh	r3, [r7, #2]
 802e6bc:	4613      	mov	r3, r2
 802e6be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 802e6c0:	787b      	ldrb	r3, [r7, #1]
 802e6c2:	2b00      	cmp	r3, #0
 802e6c4:	d003      	beq.n	802e6ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802e6c6:	887a      	ldrh	r2, [r7, #2]
 802e6c8:	687b      	ldr	r3, [r7, #4]
 802e6ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 802e6cc:	e003      	b.n	802e6d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802e6ce:	887b      	ldrh	r3, [r7, #2]
 802e6d0:	041a      	lsls	r2, r3, #16
 802e6d2:	687b      	ldr	r3, [r7, #4]
 802e6d4:	619a      	str	r2, [r3, #24]
}
 802e6d6:	bf00      	nop
 802e6d8:	370c      	adds	r7, #12
 802e6da:	46bd      	mov	sp, r7
 802e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e6e0:	4770      	bx	lr
	...

0802e6e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802e6e4:	b580      	push	{r7, lr}
 802e6e6:	b082      	sub	sp, #8
 802e6e8:	af00      	add	r7, sp, #0
 802e6ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802e6ec:	687b      	ldr	r3, [r7, #4]
 802e6ee:	2b00      	cmp	r3, #0
 802e6f0:	d101      	bne.n	802e6f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802e6f2:	2301      	movs	r3, #1
 802e6f4:	e07f      	b.n	802e7f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802e6f6:	687b      	ldr	r3, [r7, #4]
 802e6f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e6fc:	b2db      	uxtb	r3, r3
 802e6fe:	2b00      	cmp	r3, #0
 802e700:	d106      	bne.n	802e710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802e702:	687b      	ldr	r3, [r7, #4]
 802e704:	2200      	movs	r2, #0
 802e706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 802e70a:	6878      	ldr	r0, [r7, #4]
 802e70c:	f7fa ff98 	bl	8029640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802e710:	687b      	ldr	r3, [r7, #4]
 802e712:	2224      	movs	r2, #36	; 0x24
 802e714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802e718:	687b      	ldr	r3, [r7, #4]
 802e71a:	681b      	ldr	r3, [r3, #0]
 802e71c:	681a      	ldr	r2, [r3, #0]
 802e71e:	687b      	ldr	r3, [r7, #4]
 802e720:	681b      	ldr	r3, [r3, #0]
 802e722:	f022 0201 	bic.w	r2, r2, #1
 802e726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 802e728:	687b      	ldr	r3, [r7, #4]
 802e72a:	685a      	ldr	r2, [r3, #4]
 802e72c:	687b      	ldr	r3, [r7, #4]
 802e72e:	681b      	ldr	r3, [r3, #0]
 802e730:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802e734:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 802e736:	687b      	ldr	r3, [r7, #4]
 802e738:	681b      	ldr	r3, [r3, #0]
 802e73a:	689a      	ldr	r2, [r3, #8]
 802e73c:	687b      	ldr	r3, [r7, #4]
 802e73e:	681b      	ldr	r3, [r3, #0]
 802e740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802e744:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802e746:	687b      	ldr	r3, [r7, #4]
 802e748:	68db      	ldr	r3, [r3, #12]
 802e74a:	2b01      	cmp	r3, #1
 802e74c:	d107      	bne.n	802e75e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 802e74e:	687b      	ldr	r3, [r7, #4]
 802e750:	689a      	ldr	r2, [r3, #8]
 802e752:	687b      	ldr	r3, [r7, #4]
 802e754:	681b      	ldr	r3, [r3, #0]
 802e756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802e75a:	609a      	str	r2, [r3, #8]
 802e75c:	e006      	b.n	802e76c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 802e75e:	687b      	ldr	r3, [r7, #4]
 802e760:	689a      	ldr	r2, [r3, #8]
 802e762:	687b      	ldr	r3, [r7, #4]
 802e764:	681b      	ldr	r3, [r3, #0]
 802e766:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 802e76a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802e76c:	687b      	ldr	r3, [r7, #4]
 802e76e:	68db      	ldr	r3, [r3, #12]
 802e770:	2b02      	cmp	r3, #2
 802e772:	d104      	bne.n	802e77e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 802e774:	687b      	ldr	r3, [r7, #4]
 802e776:	681b      	ldr	r3, [r3, #0]
 802e778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802e77c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 802e77e:	687b      	ldr	r3, [r7, #4]
 802e780:	681b      	ldr	r3, [r3, #0]
 802e782:	6859      	ldr	r1, [r3, #4]
 802e784:	687b      	ldr	r3, [r7, #4]
 802e786:	681a      	ldr	r2, [r3, #0]
 802e788:	4b1d      	ldr	r3, [pc, #116]	; (802e800 <HAL_I2C_Init+0x11c>)
 802e78a:	430b      	orrs	r3, r1
 802e78c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 802e78e:	687b      	ldr	r3, [r7, #4]
 802e790:	681b      	ldr	r3, [r3, #0]
 802e792:	68da      	ldr	r2, [r3, #12]
 802e794:	687b      	ldr	r3, [r7, #4]
 802e796:	681b      	ldr	r3, [r3, #0]
 802e798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802e79c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802e79e:	687b      	ldr	r3, [r7, #4]
 802e7a0:	691a      	ldr	r2, [r3, #16]
 802e7a2:	687b      	ldr	r3, [r7, #4]
 802e7a4:	695b      	ldr	r3, [r3, #20]
 802e7a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 802e7aa:	687b      	ldr	r3, [r7, #4]
 802e7ac:	699b      	ldr	r3, [r3, #24]
 802e7ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802e7b0:	687b      	ldr	r3, [r7, #4]
 802e7b2:	681b      	ldr	r3, [r3, #0]
 802e7b4:	430a      	orrs	r2, r1
 802e7b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 802e7b8:	687b      	ldr	r3, [r7, #4]
 802e7ba:	69d9      	ldr	r1, [r3, #28]
 802e7bc:	687b      	ldr	r3, [r7, #4]
 802e7be:	6a1a      	ldr	r2, [r3, #32]
 802e7c0:	687b      	ldr	r3, [r7, #4]
 802e7c2:	681b      	ldr	r3, [r3, #0]
 802e7c4:	430a      	orrs	r2, r1
 802e7c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802e7c8:	687b      	ldr	r3, [r7, #4]
 802e7ca:	681b      	ldr	r3, [r3, #0]
 802e7cc:	681a      	ldr	r2, [r3, #0]
 802e7ce:	687b      	ldr	r3, [r7, #4]
 802e7d0:	681b      	ldr	r3, [r3, #0]
 802e7d2:	f042 0201 	orr.w	r2, r2, #1
 802e7d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802e7d8:	687b      	ldr	r3, [r7, #4]
 802e7da:	2200      	movs	r2, #0
 802e7dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 802e7de:	687b      	ldr	r3, [r7, #4]
 802e7e0:	2220      	movs	r2, #32
 802e7e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 802e7e6:	687b      	ldr	r3, [r7, #4]
 802e7e8:	2200      	movs	r2, #0
 802e7ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802e7ec:	687b      	ldr	r3, [r7, #4]
 802e7ee:	2200      	movs	r2, #0
 802e7f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 802e7f4:	2300      	movs	r3, #0
}
 802e7f6:	4618      	mov	r0, r3
 802e7f8:	3708      	adds	r7, #8
 802e7fa:	46bd      	mov	sp, r7
 802e7fc:	bd80      	pop	{r7, pc}
 802e7fe:	bf00      	nop
 802e800:	02008000 	.word	0x02008000

0802e804 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802e804:	b580      	push	{r7, lr}
 802e806:	b084      	sub	sp, #16
 802e808:	af00      	add	r7, sp, #0
 802e80a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802e80c:	687b      	ldr	r3, [r7, #4]
 802e80e:	681b      	ldr	r3, [r3, #0]
 802e810:	699b      	ldr	r3, [r3, #24]
 802e812:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802e814:	687b      	ldr	r3, [r7, #4]
 802e816:	681b      	ldr	r3, [r3, #0]
 802e818:	681b      	ldr	r3, [r3, #0]
 802e81a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 802e81c:	687b      	ldr	r3, [r7, #4]
 802e81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e820:	2b00      	cmp	r3, #0
 802e822:	d005      	beq.n	802e830 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 802e824:	687b      	ldr	r3, [r7, #4]
 802e826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e828:	68ba      	ldr	r2, [r7, #8]
 802e82a:	68f9      	ldr	r1, [r7, #12]
 802e82c:	6878      	ldr	r0, [r7, #4]
 802e82e:	4798      	blx	r3
  }
}
 802e830:	bf00      	nop
 802e832:	3710      	adds	r7, #16
 802e834:	46bd      	mov	sp, r7
 802e836:	bd80      	pop	{r7, pc}

0802e838 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802e838:	b580      	push	{r7, lr}
 802e83a:	b086      	sub	sp, #24
 802e83c:	af00      	add	r7, sp, #0
 802e83e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802e840:	687b      	ldr	r3, [r7, #4]
 802e842:	681b      	ldr	r3, [r3, #0]
 802e844:	699b      	ldr	r3, [r3, #24]
 802e846:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802e848:	687b      	ldr	r3, [r7, #4]
 802e84a:	681b      	ldr	r3, [r3, #0]
 802e84c:	681b      	ldr	r3, [r3, #0]
 802e84e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802e850:	697b      	ldr	r3, [r7, #20]
 802e852:	0a1b      	lsrs	r3, r3, #8
 802e854:	f003 0301 	and.w	r3, r3, #1
 802e858:	2b00      	cmp	r3, #0
 802e85a:	d010      	beq.n	802e87e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e85c:	693b      	ldr	r3, [r7, #16]
 802e85e:	09db      	lsrs	r3, r3, #7
 802e860:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802e864:	2b00      	cmp	r3, #0
 802e866:	d00a      	beq.n	802e87e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 802e868:	687b      	ldr	r3, [r7, #4]
 802e86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e86c:	f043 0201 	orr.w	r2, r3, #1
 802e870:	687b      	ldr	r3, [r7, #4]
 802e872:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 802e874:	687b      	ldr	r3, [r7, #4]
 802e876:	681b      	ldr	r3, [r3, #0]
 802e878:	f44f 7280 	mov.w	r2, #256	; 0x100
 802e87c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802e87e:	697b      	ldr	r3, [r7, #20]
 802e880:	0a9b      	lsrs	r3, r3, #10
 802e882:	f003 0301 	and.w	r3, r3, #1
 802e886:	2b00      	cmp	r3, #0
 802e888:	d010      	beq.n	802e8ac <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e88a:	693b      	ldr	r3, [r7, #16]
 802e88c:	09db      	lsrs	r3, r3, #7
 802e88e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802e892:	2b00      	cmp	r3, #0
 802e894:	d00a      	beq.n	802e8ac <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 802e896:	687b      	ldr	r3, [r7, #4]
 802e898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e89a:	f043 0208 	orr.w	r2, r3, #8
 802e89e:	687b      	ldr	r3, [r7, #4]
 802e8a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 802e8a2:	687b      	ldr	r3, [r7, #4]
 802e8a4:	681b      	ldr	r3, [r3, #0]
 802e8a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802e8aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802e8ac:	697b      	ldr	r3, [r7, #20]
 802e8ae:	0a5b      	lsrs	r3, r3, #9
 802e8b0:	f003 0301 	and.w	r3, r3, #1
 802e8b4:	2b00      	cmp	r3, #0
 802e8b6:	d010      	beq.n	802e8da <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e8b8:	693b      	ldr	r3, [r7, #16]
 802e8ba:	09db      	lsrs	r3, r3, #7
 802e8bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802e8c0:	2b00      	cmp	r3, #0
 802e8c2:	d00a      	beq.n	802e8da <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 802e8c4:	687b      	ldr	r3, [r7, #4]
 802e8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e8c8:	f043 0202 	orr.w	r2, r3, #2
 802e8cc:	687b      	ldr	r3, [r7, #4]
 802e8ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 802e8d0:	687b      	ldr	r3, [r7, #4]
 802e8d2:	681b      	ldr	r3, [r3, #0]
 802e8d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 802e8d8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 802e8da:	687b      	ldr	r3, [r7, #4]
 802e8dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e8de:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 802e8e0:	68fb      	ldr	r3, [r7, #12]
 802e8e2:	f003 030b 	and.w	r3, r3, #11
 802e8e6:	2b00      	cmp	r3, #0
 802e8e8:	d003      	beq.n	802e8f2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 802e8ea:	68f9      	ldr	r1, [r7, #12]
 802e8ec:	6878      	ldr	r0, [r7, #4]
 802e8ee:	f000 fc77 	bl	802f1e0 <I2C_ITError>
  }
}
 802e8f2:	bf00      	nop
 802e8f4:	3718      	adds	r7, #24
 802e8f6:	46bd      	mov	sp, r7
 802e8f8:	bd80      	pop	{r7, pc}

0802e8fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e8fa:	b480      	push	{r7}
 802e8fc:	b083      	sub	sp, #12
 802e8fe:	af00      	add	r7, sp, #0
 802e900:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 802e902:	bf00      	nop
 802e904:	370c      	adds	r7, #12
 802e906:	46bd      	mov	sp, r7
 802e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e90c:	4770      	bx	lr

0802e90e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e90e:	b480      	push	{r7}
 802e910:	b083      	sub	sp, #12
 802e912:	af00      	add	r7, sp, #0
 802e914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 802e916:	bf00      	nop
 802e918:	370c      	adds	r7, #12
 802e91a:	46bd      	mov	sp, r7
 802e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e920:	4770      	bx	lr

0802e922 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 802e922:	b480      	push	{r7}
 802e924:	b083      	sub	sp, #12
 802e926:	af00      	add	r7, sp, #0
 802e928:	6078      	str	r0, [r7, #4]
 802e92a:	460b      	mov	r3, r1
 802e92c:	70fb      	strb	r3, [r7, #3]
 802e92e:	4613      	mov	r3, r2
 802e930:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 802e932:	bf00      	nop
 802e934:	370c      	adds	r7, #12
 802e936:	46bd      	mov	sp, r7
 802e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e93c:	4770      	bx	lr

0802e93e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e93e:	b480      	push	{r7}
 802e940:	b083      	sub	sp, #12
 802e942:	af00      	add	r7, sp, #0
 802e944:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 802e946:	bf00      	nop
 802e948:	370c      	adds	r7, #12
 802e94a:	46bd      	mov	sp, r7
 802e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e950:	4770      	bx	lr

0802e952 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 802e952:	b480      	push	{r7}
 802e954:	b083      	sub	sp, #12
 802e956:	af00      	add	r7, sp, #0
 802e958:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 802e95a:	bf00      	nop
 802e95c:	370c      	adds	r7, #12
 802e95e:	46bd      	mov	sp, r7
 802e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e964:	4770      	bx	lr

0802e966 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e966:	b480      	push	{r7}
 802e968:	b083      	sub	sp, #12
 802e96a:	af00      	add	r7, sp, #0
 802e96c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 802e96e:	bf00      	nop
 802e970:	370c      	adds	r7, #12
 802e972:	46bd      	mov	sp, r7
 802e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e978:	4770      	bx	lr

0802e97a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 802e97a:	b580      	push	{r7, lr}
 802e97c:	b086      	sub	sp, #24
 802e97e:	af00      	add	r7, sp, #0
 802e980:	60f8      	str	r0, [r7, #12]
 802e982:	60b9      	str	r1, [r7, #8]
 802e984:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 802e986:	68fb      	ldr	r3, [r7, #12]
 802e988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e98a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 802e98c:	68bb      	ldr	r3, [r7, #8]
 802e98e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 802e990:	68fb      	ldr	r3, [r7, #12]
 802e992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802e996:	2b01      	cmp	r3, #1
 802e998:	d101      	bne.n	802e99e <I2C_Slave_ISR_IT+0x24>
 802e99a:	2302      	movs	r3, #2
 802e99c:	e0ec      	b.n	802eb78 <I2C_Slave_ISR_IT+0x1fe>
 802e99e:	68fb      	ldr	r3, [r7, #12]
 802e9a0:	2201      	movs	r2, #1
 802e9a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 802e9a6:	693b      	ldr	r3, [r7, #16]
 802e9a8:	095b      	lsrs	r3, r3, #5
 802e9aa:	f003 0301 	and.w	r3, r3, #1
 802e9ae:	2b00      	cmp	r3, #0
 802e9b0:	d009      	beq.n	802e9c6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 802e9b2:	687b      	ldr	r3, [r7, #4]
 802e9b4:	095b      	lsrs	r3, r3, #5
 802e9b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 802e9ba:	2b00      	cmp	r3, #0
 802e9bc:	d003      	beq.n	802e9c6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 802e9be:	6939      	ldr	r1, [r7, #16]
 802e9c0:	68f8      	ldr	r0, [r7, #12]
 802e9c2:	f000 f9bf 	bl	802ed44 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 802e9c6:	693b      	ldr	r3, [r7, #16]
 802e9c8:	091b      	lsrs	r3, r3, #4
 802e9ca:	f003 0301 	and.w	r3, r3, #1
 802e9ce:	2b00      	cmp	r3, #0
 802e9d0:	d04d      	beq.n	802ea6e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 802e9d2:	687b      	ldr	r3, [r7, #4]
 802e9d4:	091b      	lsrs	r3, r3, #4
 802e9d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 802e9da:	2b00      	cmp	r3, #0
 802e9dc:	d047      	beq.n	802ea6e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 802e9de:	68fb      	ldr	r3, [r7, #12]
 802e9e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e9e2:	b29b      	uxth	r3, r3
 802e9e4:	2b00      	cmp	r3, #0
 802e9e6:	d128      	bne.n	802ea3a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 802e9e8:	68fb      	ldr	r3, [r7, #12]
 802e9ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e9ee:	b2db      	uxtb	r3, r3
 802e9f0:	2b28      	cmp	r3, #40	; 0x28
 802e9f2:	d108      	bne.n	802ea06 <I2C_Slave_ISR_IT+0x8c>
 802e9f4:	697b      	ldr	r3, [r7, #20]
 802e9f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802e9fa:	d104      	bne.n	802ea06 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 802e9fc:	6939      	ldr	r1, [r7, #16]
 802e9fe:	68f8      	ldr	r0, [r7, #12]
 802ea00:	f000 fb98 	bl	802f134 <I2C_ITListenCplt>
 802ea04:	e032      	b.n	802ea6c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 802ea06:	68fb      	ldr	r3, [r7, #12]
 802ea08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ea0c:	b2db      	uxtb	r3, r3
 802ea0e:	2b29      	cmp	r3, #41	; 0x29
 802ea10:	d10e      	bne.n	802ea30 <I2C_Slave_ISR_IT+0xb6>
 802ea12:	697b      	ldr	r3, [r7, #20]
 802ea14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802ea18:	d00a      	beq.n	802ea30 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802ea1a:	68fb      	ldr	r3, [r7, #12]
 802ea1c:	681b      	ldr	r3, [r3, #0]
 802ea1e:	2210      	movs	r2, #16
 802ea20:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 802ea22:	68f8      	ldr	r0, [r7, #12]
 802ea24:	f000 fcd3 	bl	802f3ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802ea28:	68f8      	ldr	r0, [r7, #12]
 802ea2a:	f000 f92d 	bl	802ec88 <I2C_ITSlaveSeqCplt>
 802ea2e:	e01d      	b.n	802ea6c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802ea30:	68fb      	ldr	r3, [r7, #12]
 802ea32:	681b      	ldr	r3, [r3, #0]
 802ea34:	2210      	movs	r2, #16
 802ea36:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 802ea38:	e096      	b.n	802eb68 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802ea3a:	68fb      	ldr	r3, [r7, #12]
 802ea3c:	681b      	ldr	r3, [r3, #0]
 802ea3e:	2210      	movs	r2, #16
 802ea40:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802ea42:	68fb      	ldr	r3, [r7, #12]
 802ea44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ea46:	f043 0204 	orr.w	r2, r3, #4
 802ea4a:	68fb      	ldr	r3, [r7, #12]
 802ea4c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 802ea4e:	697b      	ldr	r3, [r7, #20]
 802ea50:	2b00      	cmp	r3, #0
 802ea52:	d004      	beq.n	802ea5e <I2C_Slave_ISR_IT+0xe4>
 802ea54:	697b      	ldr	r3, [r7, #20]
 802ea56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802ea5a:	f040 8085 	bne.w	802eb68 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 802ea5e:	68fb      	ldr	r3, [r7, #12]
 802ea60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ea62:	4619      	mov	r1, r3
 802ea64:	68f8      	ldr	r0, [r7, #12]
 802ea66:	f000 fbbb 	bl	802f1e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 802ea6a:	e07d      	b.n	802eb68 <I2C_Slave_ISR_IT+0x1ee>
 802ea6c:	e07c      	b.n	802eb68 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 802ea6e:	693b      	ldr	r3, [r7, #16]
 802ea70:	089b      	lsrs	r3, r3, #2
 802ea72:	f003 0301 	and.w	r3, r3, #1
 802ea76:	2b00      	cmp	r3, #0
 802ea78:	d030      	beq.n	802eadc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 802ea7a:	687b      	ldr	r3, [r7, #4]
 802ea7c:	089b      	lsrs	r3, r3, #2
 802ea7e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 802ea82:	2b00      	cmp	r3, #0
 802ea84:	d02a      	beq.n	802eadc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 802ea86:	68fb      	ldr	r3, [r7, #12]
 802ea88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ea8a:	b29b      	uxth	r3, r3
 802ea8c:	2b00      	cmp	r3, #0
 802ea8e:	d018      	beq.n	802eac2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802ea90:	68fb      	ldr	r3, [r7, #12]
 802ea92:	681b      	ldr	r3, [r3, #0]
 802ea94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802ea96:	68fb      	ldr	r3, [r7, #12]
 802ea98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ea9a:	b2d2      	uxtb	r2, r2
 802ea9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802ea9e:	68fb      	ldr	r3, [r7, #12]
 802eaa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802eaa2:	1c5a      	adds	r2, r3, #1
 802eaa4:	68fb      	ldr	r3, [r7, #12]
 802eaa6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 802eaa8:	68fb      	ldr	r3, [r7, #12]
 802eaaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802eaac:	3b01      	subs	r3, #1
 802eaae:	b29a      	uxth	r2, r3
 802eab0:	68fb      	ldr	r3, [r7, #12]
 802eab2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802eab4:	68fb      	ldr	r3, [r7, #12]
 802eab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802eab8:	b29b      	uxth	r3, r3
 802eaba:	3b01      	subs	r3, #1
 802eabc:	b29a      	uxth	r2, r3
 802eabe:	68fb      	ldr	r3, [r7, #12]
 802eac0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 802eac2:	68fb      	ldr	r3, [r7, #12]
 802eac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802eac6:	b29b      	uxth	r3, r3
 802eac8:	2b00      	cmp	r3, #0
 802eaca:	d14f      	bne.n	802eb6c <I2C_Slave_ISR_IT+0x1f2>
 802eacc:	697b      	ldr	r3, [r7, #20]
 802eace:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802ead2:	d04b      	beq.n	802eb6c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 802ead4:	68f8      	ldr	r0, [r7, #12]
 802ead6:	f000 f8d7 	bl	802ec88 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 802eada:	e047      	b.n	802eb6c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 802eadc:	693b      	ldr	r3, [r7, #16]
 802eade:	08db      	lsrs	r3, r3, #3
 802eae0:	f003 0301 	and.w	r3, r3, #1
 802eae4:	2b00      	cmp	r3, #0
 802eae6:	d00a      	beq.n	802eafe <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 802eae8:	687b      	ldr	r3, [r7, #4]
 802eaea:	08db      	lsrs	r3, r3, #3
 802eaec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 802eaf0:	2b00      	cmp	r3, #0
 802eaf2:	d004      	beq.n	802eafe <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 802eaf4:	6939      	ldr	r1, [r7, #16]
 802eaf6:	68f8      	ldr	r0, [r7, #12]
 802eaf8:	f000 f842 	bl	802eb80 <I2C_ITAddrCplt>
 802eafc:	e037      	b.n	802eb6e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 802eafe:	693b      	ldr	r3, [r7, #16]
 802eb00:	085b      	lsrs	r3, r3, #1
 802eb02:	f003 0301 	and.w	r3, r3, #1
 802eb06:	2b00      	cmp	r3, #0
 802eb08:	d031      	beq.n	802eb6e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 802eb0a:	687b      	ldr	r3, [r7, #4]
 802eb0c:	085b      	lsrs	r3, r3, #1
 802eb0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 802eb12:	2b00      	cmp	r3, #0
 802eb14:	d02b      	beq.n	802eb6e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 802eb16:	68fb      	ldr	r3, [r7, #12]
 802eb18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802eb1a:	b29b      	uxth	r3, r3
 802eb1c:	2b00      	cmp	r3, #0
 802eb1e:	d018      	beq.n	802eb52 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 802eb20:	68fb      	ldr	r3, [r7, #12]
 802eb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802eb24:	781a      	ldrb	r2, [r3, #0]
 802eb26:	68fb      	ldr	r3, [r7, #12]
 802eb28:	681b      	ldr	r3, [r3, #0]
 802eb2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802eb2c:	68fb      	ldr	r3, [r7, #12]
 802eb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802eb30:	1c5a      	adds	r2, r3, #1
 802eb32:	68fb      	ldr	r3, [r7, #12]
 802eb34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 802eb36:	68fb      	ldr	r3, [r7, #12]
 802eb38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802eb3a:	b29b      	uxth	r3, r3
 802eb3c:	3b01      	subs	r3, #1
 802eb3e:	b29a      	uxth	r2, r3
 802eb40:	68fb      	ldr	r3, [r7, #12]
 802eb42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 802eb44:	68fb      	ldr	r3, [r7, #12]
 802eb46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802eb48:	3b01      	subs	r3, #1
 802eb4a:	b29a      	uxth	r2, r3
 802eb4c:	68fb      	ldr	r3, [r7, #12]
 802eb4e:	851a      	strh	r2, [r3, #40]	; 0x28
 802eb50:	e00d      	b.n	802eb6e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 802eb52:	697b      	ldr	r3, [r7, #20]
 802eb54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802eb58:	d002      	beq.n	802eb60 <I2C_Slave_ISR_IT+0x1e6>
 802eb5a:	697b      	ldr	r3, [r7, #20]
 802eb5c:	2b00      	cmp	r3, #0
 802eb5e:	d106      	bne.n	802eb6e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802eb60:	68f8      	ldr	r0, [r7, #12]
 802eb62:	f000 f891 	bl	802ec88 <I2C_ITSlaveSeqCplt>
 802eb66:	e002      	b.n	802eb6e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 802eb68:	bf00      	nop
 802eb6a:	e000      	b.n	802eb6e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 802eb6c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 802eb6e:	68fb      	ldr	r3, [r7, #12]
 802eb70:	2200      	movs	r2, #0
 802eb72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 802eb76:	2300      	movs	r3, #0
}
 802eb78:	4618      	mov	r0, r3
 802eb7a:	3718      	adds	r7, #24
 802eb7c:	46bd      	mov	sp, r7
 802eb7e:	bd80      	pop	{r7, pc}

0802eb80 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802eb80:	b580      	push	{r7, lr}
 802eb82:	b084      	sub	sp, #16
 802eb84:	af00      	add	r7, sp, #0
 802eb86:	6078      	str	r0, [r7, #4]
 802eb88:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 802eb8a:	687b      	ldr	r3, [r7, #4]
 802eb8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802eb90:	b2db      	uxtb	r3, r3
 802eb92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802eb96:	2b28      	cmp	r3, #40	; 0x28
 802eb98:	d16a      	bne.n	802ec70 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 802eb9a:	687b      	ldr	r3, [r7, #4]
 802eb9c:	681b      	ldr	r3, [r3, #0]
 802eb9e:	699b      	ldr	r3, [r3, #24]
 802eba0:	0c1b      	lsrs	r3, r3, #16
 802eba2:	b2db      	uxtb	r3, r3
 802eba4:	f003 0301 	and.w	r3, r3, #1
 802eba8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 802ebaa:	687b      	ldr	r3, [r7, #4]
 802ebac:	681b      	ldr	r3, [r3, #0]
 802ebae:	699b      	ldr	r3, [r3, #24]
 802ebb0:	0c1b      	lsrs	r3, r3, #16
 802ebb2:	b29b      	uxth	r3, r3
 802ebb4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 802ebb8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 802ebba:	687b      	ldr	r3, [r7, #4]
 802ebbc:	681b      	ldr	r3, [r3, #0]
 802ebbe:	689b      	ldr	r3, [r3, #8]
 802ebc0:	b29b      	uxth	r3, r3
 802ebc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802ebc6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 802ebc8:	687b      	ldr	r3, [r7, #4]
 802ebca:	681b      	ldr	r3, [r3, #0]
 802ebcc:	68db      	ldr	r3, [r3, #12]
 802ebce:	b29b      	uxth	r3, r3
 802ebd0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 802ebd4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802ebd6:	687b      	ldr	r3, [r7, #4]
 802ebd8:	68db      	ldr	r3, [r3, #12]
 802ebda:	2b02      	cmp	r3, #2
 802ebdc:	d138      	bne.n	802ec50 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 802ebde:	897b      	ldrh	r3, [r7, #10]
 802ebe0:	09db      	lsrs	r3, r3, #7
 802ebe2:	b29a      	uxth	r2, r3
 802ebe4:	89bb      	ldrh	r3, [r7, #12]
 802ebe6:	4053      	eors	r3, r2
 802ebe8:	b29b      	uxth	r3, r3
 802ebea:	f003 0306 	and.w	r3, r3, #6
 802ebee:	2b00      	cmp	r3, #0
 802ebf0:	d11c      	bne.n	802ec2c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 802ebf2:	897b      	ldrh	r3, [r7, #10]
 802ebf4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 802ebf6:	687b      	ldr	r3, [r7, #4]
 802ebf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802ebfa:	1c5a      	adds	r2, r3, #1
 802ebfc:	687b      	ldr	r3, [r7, #4]
 802ebfe:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 802ec00:	687b      	ldr	r3, [r7, #4]
 802ec02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802ec04:	2b02      	cmp	r3, #2
 802ec06:	d13b      	bne.n	802ec80 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 802ec08:	687b      	ldr	r3, [r7, #4]
 802ec0a:	2200      	movs	r2, #0
 802ec0c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 802ec0e:	687b      	ldr	r3, [r7, #4]
 802ec10:	681b      	ldr	r3, [r3, #0]
 802ec12:	2208      	movs	r2, #8
 802ec14:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 802ec16:	687b      	ldr	r3, [r7, #4]
 802ec18:	2200      	movs	r2, #0
 802ec1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802ec1e:	89ba      	ldrh	r2, [r7, #12]
 802ec20:	7bfb      	ldrb	r3, [r7, #15]
 802ec22:	4619      	mov	r1, r3
 802ec24:	6878      	ldr	r0, [r7, #4]
 802ec26:	f7ff fe7c 	bl	802e922 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 802ec2a:	e029      	b.n	802ec80 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 802ec2c:	893b      	ldrh	r3, [r7, #8]
 802ec2e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 802ec30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802ec34:	6878      	ldr	r0, [r7, #4]
 802ec36:	f000 fc0c 	bl	802f452 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 802ec3a:	687b      	ldr	r3, [r7, #4]
 802ec3c:	2200      	movs	r2, #0
 802ec3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802ec42:	89ba      	ldrh	r2, [r7, #12]
 802ec44:	7bfb      	ldrb	r3, [r7, #15]
 802ec46:	4619      	mov	r1, r3
 802ec48:	6878      	ldr	r0, [r7, #4]
 802ec4a:	f7ff fe6a 	bl	802e922 <HAL_I2C_AddrCallback>
}
 802ec4e:	e017      	b.n	802ec80 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 802ec50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802ec54:	6878      	ldr	r0, [r7, #4]
 802ec56:	f000 fbfc 	bl	802f452 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 802ec5a:	687b      	ldr	r3, [r7, #4]
 802ec5c:	2200      	movs	r2, #0
 802ec5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802ec62:	89ba      	ldrh	r2, [r7, #12]
 802ec64:	7bfb      	ldrb	r3, [r7, #15]
 802ec66:	4619      	mov	r1, r3
 802ec68:	6878      	ldr	r0, [r7, #4]
 802ec6a:	f7ff fe5a 	bl	802e922 <HAL_I2C_AddrCallback>
}
 802ec6e:	e007      	b.n	802ec80 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 802ec70:	687b      	ldr	r3, [r7, #4]
 802ec72:	681b      	ldr	r3, [r3, #0]
 802ec74:	2208      	movs	r2, #8
 802ec76:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 802ec78:	687b      	ldr	r3, [r7, #4]
 802ec7a:	2200      	movs	r2, #0
 802ec7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 802ec80:	bf00      	nop
 802ec82:	3710      	adds	r7, #16
 802ec84:	46bd      	mov	sp, r7
 802ec86:	bd80      	pop	{r7, pc}

0802ec88 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 802ec88:	b580      	push	{r7, lr}
 802ec8a:	b084      	sub	sp, #16
 802ec8c:	af00      	add	r7, sp, #0
 802ec8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 802ec90:	687b      	ldr	r3, [r7, #4]
 802ec92:	681b      	ldr	r3, [r3, #0]
 802ec94:	681b      	ldr	r3, [r3, #0]
 802ec96:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802ec98:	687b      	ldr	r3, [r7, #4]
 802ec9a:	2200      	movs	r2, #0
 802ec9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 802eca0:	68fb      	ldr	r3, [r7, #12]
 802eca2:	0b9b      	lsrs	r3, r3, #14
 802eca4:	f003 0301 	and.w	r3, r3, #1
 802eca8:	2b00      	cmp	r3, #0
 802ecaa:	d008      	beq.n	802ecbe <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802ecac:	687b      	ldr	r3, [r7, #4]
 802ecae:	681b      	ldr	r3, [r3, #0]
 802ecb0:	681a      	ldr	r2, [r3, #0]
 802ecb2:	687b      	ldr	r3, [r7, #4]
 802ecb4:	681b      	ldr	r3, [r3, #0]
 802ecb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802ecba:	601a      	str	r2, [r3, #0]
 802ecbc:	e00d      	b.n	802ecda <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 802ecbe:	68fb      	ldr	r3, [r7, #12]
 802ecc0:	0bdb      	lsrs	r3, r3, #15
 802ecc2:	f003 0301 	and.w	r3, r3, #1
 802ecc6:	2b00      	cmp	r3, #0
 802ecc8:	d007      	beq.n	802ecda <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802ecca:	687b      	ldr	r3, [r7, #4]
 802eccc:	681b      	ldr	r3, [r3, #0]
 802ecce:	681a      	ldr	r2, [r3, #0]
 802ecd0:	687b      	ldr	r3, [r7, #4]
 802ecd2:	681b      	ldr	r3, [r3, #0]
 802ecd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802ecd8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 802ecda:	687b      	ldr	r3, [r7, #4]
 802ecdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ece0:	b2db      	uxtb	r3, r3
 802ece2:	2b29      	cmp	r3, #41	; 0x29
 802ece4:	d112      	bne.n	802ed0c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802ece6:	687b      	ldr	r3, [r7, #4]
 802ece8:	2228      	movs	r2, #40	; 0x28
 802ecea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802ecee:	687b      	ldr	r3, [r7, #4]
 802ecf0:	2221      	movs	r2, #33	; 0x21
 802ecf2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 802ecf4:	2101      	movs	r1, #1
 802ecf6:	6878      	ldr	r0, [r7, #4]
 802ecf8:	f000 fbab 	bl	802f452 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802ecfc:	687b      	ldr	r3, [r7, #4]
 802ecfe:	2200      	movs	r2, #0
 802ed00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 802ed04:	6878      	ldr	r0, [r7, #4]
 802ed06:	f7ff fdf8 	bl	802e8fa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 802ed0a:	e017      	b.n	802ed3c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 802ed0c:	687b      	ldr	r3, [r7, #4]
 802ed0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ed12:	b2db      	uxtb	r3, r3
 802ed14:	2b2a      	cmp	r3, #42	; 0x2a
 802ed16:	d111      	bne.n	802ed3c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802ed18:	687b      	ldr	r3, [r7, #4]
 802ed1a:	2228      	movs	r2, #40	; 0x28
 802ed1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802ed20:	687b      	ldr	r3, [r7, #4]
 802ed22:	2222      	movs	r2, #34	; 0x22
 802ed24:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 802ed26:	2102      	movs	r1, #2
 802ed28:	6878      	ldr	r0, [r7, #4]
 802ed2a:	f000 fb92 	bl	802f452 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 802ed2e:	687b      	ldr	r3, [r7, #4]
 802ed30:	2200      	movs	r2, #0
 802ed32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 802ed36:	6878      	ldr	r0, [r7, #4]
 802ed38:	f7ff fde9 	bl	802e90e <HAL_I2C_SlaveRxCpltCallback>
}
 802ed3c:	bf00      	nop
 802ed3e:	3710      	adds	r7, #16
 802ed40:	46bd      	mov	sp, r7
 802ed42:	bd80      	pop	{r7, pc}

0802ed44 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802ed44:	b580      	push	{r7, lr}
 802ed46:	b086      	sub	sp, #24
 802ed48:	af00      	add	r7, sp, #0
 802ed4a:	6078      	str	r0, [r7, #4]
 802ed4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 802ed4e:	687b      	ldr	r3, [r7, #4]
 802ed50:	681b      	ldr	r3, [r3, #0]
 802ed52:	681b      	ldr	r3, [r3, #0]
 802ed54:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 802ed56:	683b      	ldr	r3, [r7, #0]
 802ed58:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 802ed5a:	687b      	ldr	r3, [r7, #4]
 802ed5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ed60:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802ed62:	687b      	ldr	r3, [r7, #4]
 802ed64:	681b      	ldr	r3, [r3, #0]
 802ed66:	2220      	movs	r2, #32
 802ed68:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 802ed6a:	7bfb      	ldrb	r3, [r7, #15]
 802ed6c:	2b21      	cmp	r3, #33	; 0x21
 802ed6e:	d002      	beq.n	802ed76 <I2C_ITSlaveCplt+0x32>
 802ed70:	7bfb      	ldrb	r3, [r7, #15]
 802ed72:	2b29      	cmp	r3, #41	; 0x29
 802ed74:	d108      	bne.n	802ed88 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 802ed76:	f248 0101 	movw	r1, #32769	; 0x8001
 802ed7a:	6878      	ldr	r0, [r7, #4]
 802ed7c:	f000 fb69 	bl	802f452 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802ed80:	687b      	ldr	r3, [r7, #4]
 802ed82:	2221      	movs	r2, #33	; 0x21
 802ed84:	631a      	str	r2, [r3, #48]	; 0x30
 802ed86:	e00d      	b.n	802eda4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802ed88:	7bfb      	ldrb	r3, [r7, #15]
 802ed8a:	2b22      	cmp	r3, #34	; 0x22
 802ed8c:	d002      	beq.n	802ed94 <I2C_ITSlaveCplt+0x50>
 802ed8e:	7bfb      	ldrb	r3, [r7, #15]
 802ed90:	2b2a      	cmp	r3, #42	; 0x2a
 802ed92:	d107      	bne.n	802eda4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 802ed94:	f248 0102 	movw	r1, #32770	; 0x8002
 802ed98:	6878      	ldr	r0, [r7, #4]
 802ed9a:	f000 fb5a 	bl	802f452 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802ed9e:	687b      	ldr	r3, [r7, #4]
 802eda0:	2222      	movs	r2, #34	; 0x22
 802eda2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 802eda4:	687b      	ldr	r3, [r7, #4]
 802eda6:	681b      	ldr	r3, [r3, #0]
 802eda8:	685a      	ldr	r2, [r3, #4]
 802edaa:	687b      	ldr	r3, [r7, #4]
 802edac:	681b      	ldr	r3, [r3, #0]
 802edae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802edb2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 802edb4:	687b      	ldr	r3, [r7, #4]
 802edb6:	681b      	ldr	r3, [r3, #0]
 802edb8:	6859      	ldr	r1, [r3, #4]
 802edba:	687b      	ldr	r3, [r7, #4]
 802edbc:	681a      	ldr	r2, [r3, #0]
 802edbe:	4b80      	ldr	r3, [pc, #512]	; (802efc0 <I2C_ITSlaveCplt+0x27c>)
 802edc0:	400b      	ands	r3, r1
 802edc2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 802edc4:	6878      	ldr	r0, [r7, #4]
 802edc6:	f000 fb02 	bl	802f3ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 802edca:	693b      	ldr	r3, [r7, #16]
 802edcc:	0b9b      	lsrs	r3, r3, #14
 802edce:	f003 0301 	and.w	r3, r3, #1
 802edd2:	2b00      	cmp	r3, #0
 802edd4:	d07a      	beq.n	802eecc <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802edd6:	687b      	ldr	r3, [r7, #4]
 802edd8:	681b      	ldr	r3, [r3, #0]
 802edda:	681a      	ldr	r2, [r3, #0]
 802eddc:	687b      	ldr	r3, [r7, #4]
 802edde:	681b      	ldr	r3, [r3, #0]
 802ede0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802ede4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 802ede6:	687b      	ldr	r3, [r7, #4]
 802ede8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edea:	2b00      	cmp	r3, #0
 802edec:	f000 8111 	beq.w	802f012 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 802edf0:	687b      	ldr	r3, [r7, #4]
 802edf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edf4:	681b      	ldr	r3, [r3, #0]
 802edf6:	4a73      	ldr	r2, [pc, #460]	; (802efc4 <I2C_ITSlaveCplt+0x280>)
 802edf8:	4293      	cmp	r3, r2
 802edfa:	d059      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802edfc:	687b      	ldr	r3, [r7, #4]
 802edfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee00:	681b      	ldr	r3, [r3, #0]
 802ee02:	4a71      	ldr	r2, [pc, #452]	; (802efc8 <I2C_ITSlaveCplt+0x284>)
 802ee04:	4293      	cmp	r3, r2
 802ee06:	d053      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee08:	687b      	ldr	r3, [r7, #4]
 802ee0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee0c:	681b      	ldr	r3, [r3, #0]
 802ee0e:	4a6f      	ldr	r2, [pc, #444]	; (802efcc <I2C_ITSlaveCplt+0x288>)
 802ee10:	4293      	cmp	r3, r2
 802ee12:	d04d      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee14:	687b      	ldr	r3, [r7, #4]
 802ee16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee18:	681b      	ldr	r3, [r3, #0]
 802ee1a:	4a6d      	ldr	r2, [pc, #436]	; (802efd0 <I2C_ITSlaveCplt+0x28c>)
 802ee1c:	4293      	cmp	r3, r2
 802ee1e:	d047      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee20:	687b      	ldr	r3, [r7, #4]
 802ee22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee24:	681b      	ldr	r3, [r3, #0]
 802ee26:	4a6b      	ldr	r2, [pc, #428]	; (802efd4 <I2C_ITSlaveCplt+0x290>)
 802ee28:	4293      	cmp	r3, r2
 802ee2a:	d041      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee2c:	687b      	ldr	r3, [r7, #4]
 802ee2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee30:	681b      	ldr	r3, [r3, #0]
 802ee32:	4a69      	ldr	r2, [pc, #420]	; (802efd8 <I2C_ITSlaveCplt+0x294>)
 802ee34:	4293      	cmp	r3, r2
 802ee36:	d03b      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee38:	687b      	ldr	r3, [r7, #4]
 802ee3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee3c:	681b      	ldr	r3, [r3, #0]
 802ee3e:	4a67      	ldr	r2, [pc, #412]	; (802efdc <I2C_ITSlaveCplt+0x298>)
 802ee40:	4293      	cmp	r3, r2
 802ee42:	d035      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee44:	687b      	ldr	r3, [r7, #4]
 802ee46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee48:	681b      	ldr	r3, [r3, #0]
 802ee4a:	4a65      	ldr	r2, [pc, #404]	; (802efe0 <I2C_ITSlaveCplt+0x29c>)
 802ee4c:	4293      	cmp	r3, r2
 802ee4e:	d02f      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee50:	687b      	ldr	r3, [r7, #4]
 802ee52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee54:	681b      	ldr	r3, [r3, #0]
 802ee56:	4a63      	ldr	r2, [pc, #396]	; (802efe4 <I2C_ITSlaveCplt+0x2a0>)
 802ee58:	4293      	cmp	r3, r2
 802ee5a:	d029      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee5c:	687b      	ldr	r3, [r7, #4]
 802ee5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee60:	681b      	ldr	r3, [r3, #0]
 802ee62:	4a61      	ldr	r2, [pc, #388]	; (802efe8 <I2C_ITSlaveCplt+0x2a4>)
 802ee64:	4293      	cmp	r3, r2
 802ee66:	d023      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee68:	687b      	ldr	r3, [r7, #4]
 802ee6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee6c:	681b      	ldr	r3, [r3, #0]
 802ee6e:	4a5f      	ldr	r2, [pc, #380]	; (802efec <I2C_ITSlaveCplt+0x2a8>)
 802ee70:	4293      	cmp	r3, r2
 802ee72:	d01d      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee74:	687b      	ldr	r3, [r7, #4]
 802ee76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee78:	681b      	ldr	r3, [r3, #0]
 802ee7a:	4a5d      	ldr	r2, [pc, #372]	; (802eff0 <I2C_ITSlaveCplt+0x2ac>)
 802ee7c:	4293      	cmp	r3, r2
 802ee7e:	d017      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee80:	687b      	ldr	r3, [r7, #4]
 802ee82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee84:	681b      	ldr	r3, [r3, #0]
 802ee86:	4a5b      	ldr	r2, [pc, #364]	; (802eff4 <I2C_ITSlaveCplt+0x2b0>)
 802ee88:	4293      	cmp	r3, r2
 802ee8a:	d011      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee8c:	687b      	ldr	r3, [r7, #4]
 802ee8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee90:	681b      	ldr	r3, [r3, #0]
 802ee92:	4a59      	ldr	r2, [pc, #356]	; (802eff8 <I2C_ITSlaveCplt+0x2b4>)
 802ee94:	4293      	cmp	r3, r2
 802ee96:	d00b      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802ee98:	687b      	ldr	r3, [r7, #4]
 802ee9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee9c:	681b      	ldr	r3, [r3, #0]
 802ee9e:	4a57      	ldr	r2, [pc, #348]	; (802effc <I2C_ITSlaveCplt+0x2b8>)
 802eea0:	4293      	cmp	r3, r2
 802eea2:	d005      	beq.n	802eeb0 <I2C_ITSlaveCplt+0x16c>
 802eea4:	687b      	ldr	r3, [r7, #4]
 802eea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802eea8:	681b      	ldr	r3, [r3, #0]
 802eeaa:	4a55      	ldr	r2, [pc, #340]	; (802f000 <I2C_ITSlaveCplt+0x2bc>)
 802eeac:	4293      	cmp	r3, r2
 802eeae:	d105      	bne.n	802eebc <I2C_ITSlaveCplt+0x178>
 802eeb0:	687b      	ldr	r3, [r7, #4]
 802eeb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802eeb4:	681b      	ldr	r3, [r3, #0]
 802eeb6:	685b      	ldr	r3, [r3, #4]
 802eeb8:	b29b      	uxth	r3, r3
 802eeba:	e004      	b.n	802eec6 <I2C_ITSlaveCplt+0x182>
 802eebc:	687b      	ldr	r3, [r7, #4]
 802eebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802eec0:	681b      	ldr	r3, [r3, #0]
 802eec2:	685b      	ldr	r3, [r3, #4]
 802eec4:	b29b      	uxth	r3, r3
 802eec6:	687a      	ldr	r2, [r7, #4]
 802eec8:	8553      	strh	r3, [r2, #42]	; 0x2a
 802eeca:	e0a2      	b.n	802f012 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 802eecc:	693b      	ldr	r3, [r7, #16]
 802eece:	0bdb      	lsrs	r3, r3, #15
 802eed0:	f003 0301 	and.w	r3, r3, #1
 802eed4:	2b00      	cmp	r3, #0
 802eed6:	f000 809c 	beq.w	802f012 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802eeda:	687b      	ldr	r3, [r7, #4]
 802eedc:	681b      	ldr	r3, [r3, #0]
 802eede:	681a      	ldr	r2, [r3, #0]
 802eee0:	687b      	ldr	r3, [r7, #4]
 802eee2:	681b      	ldr	r3, [r3, #0]
 802eee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802eee8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 802eeea:	687b      	ldr	r3, [r7, #4]
 802eeec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eeee:	2b00      	cmp	r3, #0
 802eef0:	f000 808f 	beq.w	802f012 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 802eef4:	687b      	ldr	r3, [r7, #4]
 802eef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eef8:	681b      	ldr	r3, [r3, #0]
 802eefa:	4a32      	ldr	r2, [pc, #200]	; (802efc4 <I2C_ITSlaveCplt+0x280>)
 802eefc:	4293      	cmp	r3, r2
 802eefe:	d059      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef00:	687b      	ldr	r3, [r7, #4]
 802ef02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef04:	681b      	ldr	r3, [r3, #0]
 802ef06:	4a30      	ldr	r2, [pc, #192]	; (802efc8 <I2C_ITSlaveCplt+0x284>)
 802ef08:	4293      	cmp	r3, r2
 802ef0a:	d053      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef0c:	687b      	ldr	r3, [r7, #4]
 802ef0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef10:	681b      	ldr	r3, [r3, #0]
 802ef12:	4a2e      	ldr	r2, [pc, #184]	; (802efcc <I2C_ITSlaveCplt+0x288>)
 802ef14:	4293      	cmp	r3, r2
 802ef16:	d04d      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef18:	687b      	ldr	r3, [r7, #4]
 802ef1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef1c:	681b      	ldr	r3, [r3, #0]
 802ef1e:	4a2c      	ldr	r2, [pc, #176]	; (802efd0 <I2C_ITSlaveCplt+0x28c>)
 802ef20:	4293      	cmp	r3, r2
 802ef22:	d047      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef24:	687b      	ldr	r3, [r7, #4]
 802ef26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef28:	681b      	ldr	r3, [r3, #0]
 802ef2a:	4a2a      	ldr	r2, [pc, #168]	; (802efd4 <I2C_ITSlaveCplt+0x290>)
 802ef2c:	4293      	cmp	r3, r2
 802ef2e:	d041      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef30:	687b      	ldr	r3, [r7, #4]
 802ef32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef34:	681b      	ldr	r3, [r3, #0]
 802ef36:	4a28      	ldr	r2, [pc, #160]	; (802efd8 <I2C_ITSlaveCplt+0x294>)
 802ef38:	4293      	cmp	r3, r2
 802ef3a:	d03b      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef3c:	687b      	ldr	r3, [r7, #4]
 802ef3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef40:	681b      	ldr	r3, [r3, #0]
 802ef42:	4a26      	ldr	r2, [pc, #152]	; (802efdc <I2C_ITSlaveCplt+0x298>)
 802ef44:	4293      	cmp	r3, r2
 802ef46:	d035      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef48:	687b      	ldr	r3, [r7, #4]
 802ef4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef4c:	681b      	ldr	r3, [r3, #0]
 802ef4e:	4a24      	ldr	r2, [pc, #144]	; (802efe0 <I2C_ITSlaveCplt+0x29c>)
 802ef50:	4293      	cmp	r3, r2
 802ef52:	d02f      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef54:	687b      	ldr	r3, [r7, #4]
 802ef56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef58:	681b      	ldr	r3, [r3, #0]
 802ef5a:	4a22      	ldr	r2, [pc, #136]	; (802efe4 <I2C_ITSlaveCplt+0x2a0>)
 802ef5c:	4293      	cmp	r3, r2
 802ef5e:	d029      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef60:	687b      	ldr	r3, [r7, #4]
 802ef62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef64:	681b      	ldr	r3, [r3, #0]
 802ef66:	4a20      	ldr	r2, [pc, #128]	; (802efe8 <I2C_ITSlaveCplt+0x2a4>)
 802ef68:	4293      	cmp	r3, r2
 802ef6a:	d023      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef6c:	687b      	ldr	r3, [r7, #4]
 802ef6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef70:	681b      	ldr	r3, [r3, #0]
 802ef72:	4a1e      	ldr	r2, [pc, #120]	; (802efec <I2C_ITSlaveCplt+0x2a8>)
 802ef74:	4293      	cmp	r3, r2
 802ef76:	d01d      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef78:	687b      	ldr	r3, [r7, #4]
 802ef7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef7c:	681b      	ldr	r3, [r3, #0]
 802ef7e:	4a1c      	ldr	r2, [pc, #112]	; (802eff0 <I2C_ITSlaveCplt+0x2ac>)
 802ef80:	4293      	cmp	r3, r2
 802ef82:	d017      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef84:	687b      	ldr	r3, [r7, #4]
 802ef86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef88:	681b      	ldr	r3, [r3, #0]
 802ef8a:	4a1a      	ldr	r2, [pc, #104]	; (802eff4 <I2C_ITSlaveCplt+0x2b0>)
 802ef8c:	4293      	cmp	r3, r2
 802ef8e:	d011      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef90:	687b      	ldr	r3, [r7, #4]
 802ef92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef94:	681b      	ldr	r3, [r3, #0]
 802ef96:	4a18      	ldr	r2, [pc, #96]	; (802eff8 <I2C_ITSlaveCplt+0x2b4>)
 802ef98:	4293      	cmp	r3, r2
 802ef9a:	d00b      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802ef9c:	687b      	ldr	r3, [r7, #4]
 802ef9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802efa0:	681b      	ldr	r3, [r3, #0]
 802efa2:	4a16      	ldr	r2, [pc, #88]	; (802effc <I2C_ITSlaveCplt+0x2b8>)
 802efa4:	4293      	cmp	r3, r2
 802efa6:	d005      	beq.n	802efb4 <I2C_ITSlaveCplt+0x270>
 802efa8:	687b      	ldr	r3, [r7, #4]
 802efaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802efac:	681b      	ldr	r3, [r3, #0]
 802efae:	4a14      	ldr	r2, [pc, #80]	; (802f000 <I2C_ITSlaveCplt+0x2bc>)
 802efb0:	4293      	cmp	r3, r2
 802efb2:	d127      	bne.n	802f004 <I2C_ITSlaveCplt+0x2c0>
 802efb4:	687b      	ldr	r3, [r7, #4]
 802efb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802efb8:	681b      	ldr	r3, [r3, #0]
 802efba:	685b      	ldr	r3, [r3, #4]
 802efbc:	b29b      	uxth	r3, r3
 802efbe:	e026      	b.n	802f00e <I2C_ITSlaveCplt+0x2ca>
 802efc0:	fe00e800 	.word	0xfe00e800
 802efc4:	40020010 	.word	0x40020010
 802efc8:	40020028 	.word	0x40020028
 802efcc:	40020040 	.word	0x40020040
 802efd0:	40020058 	.word	0x40020058
 802efd4:	40020070 	.word	0x40020070
 802efd8:	40020088 	.word	0x40020088
 802efdc:	400200a0 	.word	0x400200a0
 802efe0:	400200b8 	.word	0x400200b8
 802efe4:	40020410 	.word	0x40020410
 802efe8:	40020428 	.word	0x40020428
 802efec:	40020440 	.word	0x40020440
 802eff0:	40020458 	.word	0x40020458
 802eff4:	40020470 	.word	0x40020470
 802eff8:	40020488 	.word	0x40020488
 802effc:	400204a0 	.word	0x400204a0
 802f000:	400204b8 	.word	0x400204b8
 802f004:	687b      	ldr	r3, [r7, #4]
 802f006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f008:	681b      	ldr	r3, [r3, #0]
 802f00a:	685b      	ldr	r3, [r3, #4]
 802f00c:	b29b      	uxth	r3, r3
 802f00e:	687a      	ldr	r2, [r7, #4]
 802f010:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 802f012:	697b      	ldr	r3, [r7, #20]
 802f014:	089b      	lsrs	r3, r3, #2
 802f016:	f003 0301 	and.w	r3, r3, #1
 802f01a:	2b00      	cmp	r3, #0
 802f01c:	d020      	beq.n	802f060 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 802f01e:	697b      	ldr	r3, [r7, #20]
 802f020:	f023 0304 	bic.w	r3, r3, #4
 802f024:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802f026:	687b      	ldr	r3, [r7, #4]
 802f028:	681b      	ldr	r3, [r3, #0]
 802f02a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802f02c:	687b      	ldr	r3, [r7, #4]
 802f02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f030:	b2d2      	uxtb	r2, r2
 802f032:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802f034:	687b      	ldr	r3, [r7, #4]
 802f036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f038:	1c5a      	adds	r2, r3, #1
 802f03a:	687b      	ldr	r3, [r7, #4]
 802f03c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 802f03e:	687b      	ldr	r3, [r7, #4]
 802f040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f042:	2b00      	cmp	r3, #0
 802f044:	d00c      	beq.n	802f060 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 802f046:	687b      	ldr	r3, [r7, #4]
 802f048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f04a:	3b01      	subs	r3, #1
 802f04c:	b29a      	uxth	r2, r3
 802f04e:	687b      	ldr	r3, [r7, #4]
 802f050:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802f052:	687b      	ldr	r3, [r7, #4]
 802f054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802f056:	b29b      	uxth	r3, r3
 802f058:	3b01      	subs	r3, #1
 802f05a:	b29a      	uxth	r2, r3
 802f05c:	687b      	ldr	r3, [r7, #4]
 802f05e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 802f060:	687b      	ldr	r3, [r7, #4]
 802f062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802f064:	b29b      	uxth	r3, r3
 802f066:	2b00      	cmp	r3, #0
 802f068:	d005      	beq.n	802f076 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802f06a:	687b      	ldr	r3, [r7, #4]
 802f06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f06e:	f043 0204 	orr.w	r2, r3, #4
 802f072:	687b      	ldr	r3, [r7, #4]
 802f074:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 802f076:	687b      	ldr	r3, [r7, #4]
 802f078:	2200      	movs	r2, #0
 802f07a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 802f07e:	687b      	ldr	r3, [r7, #4]
 802f080:	2200      	movs	r2, #0
 802f082:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 802f084:	687b      	ldr	r3, [r7, #4]
 802f086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f088:	2b00      	cmp	r3, #0
 802f08a:	d010      	beq.n	802f0ae <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 802f08c:	687b      	ldr	r3, [r7, #4]
 802f08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f090:	4619      	mov	r1, r3
 802f092:	6878      	ldr	r0, [r7, #4]
 802f094:	f000 f8a4 	bl	802f1e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 802f098:	687b      	ldr	r3, [r7, #4]
 802f09a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f09e:	b2db      	uxtb	r3, r3
 802f0a0:	2b28      	cmp	r3, #40	; 0x28
 802f0a2:	d141      	bne.n	802f128 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 802f0a4:	6979      	ldr	r1, [r7, #20]
 802f0a6:	6878      	ldr	r0, [r7, #4]
 802f0a8:	f000 f844 	bl	802f134 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802f0ac:	e03c      	b.n	802f128 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 802f0ae:	687b      	ldr	r3, [r7, #4]
 802f0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f0b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802f0b6:	d014      	beq.n	802f0e2 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 802f0b8:	6878      	ldr	r0, [r7, #4]
 802f0ba:	f7ff fde5 	bl	802ec88 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802f0be:	687b      	ldr	r3, [r7, #4]
 802f0c0:	4a1b      	ldr	r2, [pc, #108]	; (802f130 <I2C_ITSlaveCplt+0x3ec>)
 802f0c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 802f0c4:	687b      	ldr	r3, [r7, #4]
 802f0c6:	2220      	movs	r2, #32
 802f0c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f0cc:	687b      	ldr	r3, [r7, #4]
 802f0ce:	2200      	movs	r2, #0
 802f0d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f0d2:	687b      	ldr	r3, [r7, #4]
 802f0d4:	2200      	movs	r2, #0
 802f0d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 802f0da:	6878      	ldr	r0, [r7, #4]
 802f0dc:	f7ff fc2f 	bl	802e93e <HAL_I2C_ListenCpltCallback>
}
 802f0e0:	e022      	b.n	802f128 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 802f0e2:	687b      	ldr	r3, [r7, #4]
 802f0e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f0e8:	b2db      	uxtb	r3, r3
 802f0ea:	2b22      	cmp	r3, #34	; 0x22
 802f0ec:	d10e      	bne.n	802f10c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 802f0ee:	687b      	ldr	r3, [r7, #4]
 802f0f0:	2220      	movs	r2, #32
 802f0f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f0f6:	687b      	ldr	r3, [r7, #4]
 802f0f8:	2200      	movs	r2, #0
 802f0fa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f0fc:	687b      	ldr	r3, [r7, #4]
 802f0fe:	2200      	movs	r2, #0
 802f100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 802f104:	6878      	ldr	r0, [r7, #4]
 802f106:	f7ff fc02 	bl	802e90e <HAL_I2C_SlaveRxCpltCallback>
}
 802f10a:	e00d      	b.n	802f128 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 802f10c:	687b      	ldr	r3, [r7, #4]
 802f10e:	2220      	movs	r2, #32
 802f110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f114:	687b      	ldr	r3, [r7, #4]
 802f116:	2200      	movs	r2, #0
 802f118:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f11a:	687b      	ldr	r3, [r7, #4]
 802f11c:	2200      	movs	r2, #0
 802f11e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 802f122:	6878      	ldr	r0, [r7, #4]
 802f124:	f7ff fbe9 	bl	802e8fa <HAL_I2C_SlaveTxCpltCallback>
}
 802f128:	bf00      	nop
 802f12a:	3718      	adds	r7, #24
 802f12c:	46bd      	mov	sp, r7
 802f12e:	bd80      	pop	{r7, pc}
 802f130:	ffff0000 	.word	0xffff0000

0802f134 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802f134:	b580      	push	{r7, lr}
 802f136:	b082      	sub	sp, #8
 802f138:	af00      	add	r7, sp, #0
 802f13a:	6078      	str	r0, [r7, #4]
 802f13c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802f13e:	687b      	ldr	r3, [r7, #4]
 802f140:	4a26      	ldr	r2, [pc, #152]	; (802f1dc <I2C_ITListenCplt+0xa8>)
 802f142:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 802f144:	687b      	ldr	r3, [r7, #4]
 802f146:	2200      	movs	r2, #0
 802f148:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 802f14a:	687b      	ldr	r3, [r7, #4]
 802f14c:	2220      	movs	r2, #32
 802f14e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802f152:	687b      	ldr	r3, [r7, #4]
 802f154:	2200      	movs	r2, #0
 802f156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 802f15a:	687b      	ldr	r3, [r7, #4]
 802f15c:	2200      	movs	r2, #0
 802f15e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 802f160:	683b      	ldr	r3, [r7, #0]
 802f162:	089b      	lsrs	r3, r3, #2
 802f164:	f003 0301 	and.w	r3, r3, #1
 802f168:	2b00      	cmp	r3, #0
 802f16a:	d022      	beq.n	802f1b2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802f16c:	687b      	ldr	r3, [r7, #4]
 802f16e:	681b      	ldr	r3, [r3, #0]
 802f170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802f172:	687b      	ldr	r3, [r7, #4]
 802f174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f176:	b2d2      	uxtb	r2, r2
 802f178:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802f17a:	687b      	ldr	r3, [r7, #4]
 802f17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f17e:	1c5a      	adds	r2, r3, #1
 802f180:	687b      	ldr	r3, [r7, #4]
 802f182:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 802f184:	687b      	ldr	r3, [r7, #4]
 802f186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f188:	2b00      	cmp	r3, #0
 802f18a:	d012      	beq.n	802f1b2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 802f18c:	687b      	ldr	r3, [r7, #4]
 802f18e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f190:	3b01      	subs	r3, #1
 802f192:	b29a      	uxth	r2, r3
 802f194:	687b      	ldr	r3, [r7, #4]
 802f196:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802f198:	687b      	ldr	r3, [r7, #4]
 802f19a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802f19c:	b29b      	uxth	r3, r3
 802f19e:	3b01      	subs	r3, #1
 802f1a0:	b29a      	uxth	r2, r3
 802f1a2:	687b      	ldr	r3, [r7, #4]
 802f1a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802f1a6:	687b      	ldr	r3, [r7, #4]
 802f1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f1aa:	f043 0204 	orr.w	r2, r3, #4
 802f1ae:	687b      	ldr	r3, [r7, #4]
 802f1b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f1b2:	f248 0103 	movw	r1, #32771	; 0x8003
 802f1b6:	6878      	ldr	r0, [r7, #4]
 802f1b8:	f000 f94b 	bl	802f452 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802f1bc:	687b      	ldr	r3, [r7, #4]
 802f1be:	681b      	ldr	r3, [r3, #0]
 802f1c0:	2210      	movs	r2, #16
 802f1c2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 802f1c4:	687b      	ldr	r3, [r7, #4]
 802f1c6:	2200      	movs	r2, #0
 802f1c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 802f1cc:	6878      	ldr	r0, [r7, #4]
 802f1ce:	f7ff fbb6 	bl	802e93e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 802f1d2:	bf00      	nop
 802f1d4:	3708      	adds	r7, #8
 802f1d6:	46bd      	mov	sp, r7
 802f1d8:	bd80      	pop	{r7, pc}
 802f1da:	bf00      	nop
 802f1dc:	ffff0000 	.word	0xffff0000

0802f1e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 802f1e0:	b580      	push	{r7, lr}
 802f1e2:	b084      	sub	sp, #16
 802f1e4:	af00      	add	r7, sp, #0
 802f1e6:	6078      	str	r0, [r7, #4]
 802f1e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 802f1ea:	687b      	ldr	r3, [r7, #4]
 802f1ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f1f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 802f1f2:	687b      	ldr	r3, [r7, #4]
 802f1f4:	2200      	movs	r2, #0
 802f1f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 802f1fa:	687b      	ldr	r3, [r7, #4]
 802f1fc:	4a5d      	ldr	r2, [pc, #372]	; (802f374 <I2C_ITError+0x194>)
 802f1fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 802f200:	687b      	ldr	r3, [r7, #4]
 802f202:	2200      	movs	r2, #0
 802f204:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 802f206:	687b      	ldr	r3, [r7, #4]
 802f208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802f20a:	683b      	ldr	r3, [r7, #0]
 802f20c:	431a      	orrs	r2, r3
 802f20e:	687b      	ldr	r3, [r7, #4]
 802f210:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 802f212:	7bfb      	ldrb	r3, [r7, #15]
 802f214:	2b28      	cmp	r3, #40	; 0x28
 802f216:	d005      	beq.n	802f224 <I2C_ITError+0x44>
 802f218:	7bfb      	ldrb	r3, [r7, #15]
 802f21a:	2b29      	cmp	r3, #41	; 0x29
 802f21c:	d002      	beq.n	802f224 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 802f21e:	7bfb      	ldrb	r3, [r7, #15]
 802f220:	2b2a      	cmp	r3, #42	; 0x2a
 802f222:	d10b      	bne.n	802f23c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f224:	2103      	movs	r1, #3
 802f226:	6878      	ldr	r0, [r7, #4]
 802f228:	f000 f913 	bl	802f452 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802f22c:	687b      	ldr	r3, [r7, #4]
 802f22e:	2228      	movs	r2, #40	; 0x28
 802f230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 802f234:	687b      	ldr	r3, [r7, #4]
 802f236:	4a50      	ldr	r2, [pc, #320]	; (802f378 <I2C_ITError+0x198>)
 802f238:	635a      	str	r2, [r3, #52]	; 0x34
 802f23a:	e011      	b.n	802f260 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f23c:	f248 0103 	movw	r1, #32771	; 0x8003
 802f240:	6878      	ldr	r0, [r7, #4]
 802f242:	f000 f906 	bl	802f452 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 802f246:	687b      	ldr	r3, [r7, #4]
 802f248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f24c:	b2db      	uxtb	r3, r3
 802f24e:	2b60      	cmp	r3, #96	; 0x60
 802f250:	d003      	beq.n	802f25a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 802f252:	687b      	ldr	r3, [r7, #4]
 802f254:	2220      	movs	r2, #32
 802f256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 802f25a:	687b      	ldr	r3, [r7, #4]
 802f25c:	2200      	movs	r2, #0
 802f25e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 802f260:	687b      	ldr	r3, [r7, #4]
 802f262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802f264:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 802f266:	687b      	ldr	r3, [r7, #4]
 802f268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f26a:	2b00      	cmp	r3, #0
 802f26c:	d039      	beq.n	802f2e2 <I2C_ITError+0x102>
 802f26e:	68bb      	ldr	r3, [r7, #8]
 802f270:	2b11      	cmp	r3, #17
 802f272:	d002      	beq.n	802f27a <I2C_ITError+0x9a>
 802f274:	68bb      	ldr	r3, [r7, #8]
 802f276:	2b21      	cmp	r3, #33	; 0x21
 802f278:	d133      	bne.n	802f2e2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 802f27a:	687b      	ldr	r3, [r7, #4]
 802f27c:	681b      	ldr	r3, [r3, #0]
 802f27e:	681b      	ldr	r3, [r3, #0]
 802f280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802f284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802f288:	d107      	bne.n	802f29a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802f28a:	687b      	ldr	r3, [r7, #4]
 802f28c:	681b      	ldr	r3, [r3, #0]
 802f28e:	681a      	ldr	r2, [r3, #0]
 802f290:	687b      	ldr	r3, [r7, #4]
 802f292:	681b      	ldr	r3, [r3, #0]
 802f294:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802f298:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f29a:	687b      	ldr	r3, [r7, #4]
 802f29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f29e:	4618      	mov	r0, r3
 802f2a0:	f7fe fc54 	bl	802db4c <HAL_DMA_GetState>
 802f2a4:	4603      	mov	r3, r0
 802f2a6:	2b01      	cmp	r3, #1
 802f2a8:	d017      	beq.n	802f2da <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 802f2aa:	687b      	ldr	r3, [r7, #4]
 802f2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f2ae:	4a33      	ldr	r2, [pc, #204]	; (802f37c <I2C_ITError+0x19c>)
 802f2b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802f2b2:	687b      	ldr	r3, [r7, #4]
 802f2b4:	2200      	movs	r2, #0
 802f2b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 802f2ba:	687b      	ldr	r3, [r7, #4]
 802f2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f2be:	4618      	mov	r0, r3
 802f2c0:	f7fd fad4 	bl	802c86c <HAL_DMA_Abort_IT>
 802f2c4:	4603      	mov	r3, r0
 802f2c6:	2b00      	cmp	r3, #0
 802f2c8:	d04d      	beq.n	802f366 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 802f2ca:	687b      	ldr	r3, [r7, #4]
 802f2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f2ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f2d0:	687a      	ldr	r2, [r7, #4]
 802f2d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802f2d4:	4610      	mov	r0, r2
 802f2d6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f2d8:	e045      	b.n	802f366 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 802f2da:	6878      	ldr	r0, [r7, #4]
 802f2dc:	f000 f850 	bl	802f380 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f2e0:	e041      	b.n	802f366 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 802f2e2:	687b      	ldr	r3, [r7, #4]
 802f2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f2e6:	2b00      	cmp	r3, #0
 802f2e8:	d039      	beq.n	802f35e <I2C_ITError+0x17e>
 802f2ea:	68bb      	ldr	r3, [r7, #8]
 802f2ec:	2b12      	cmp	r3, #18
 802f2ee:	d002      	beq.n	802f2f6 <I2C_ITError+0x116>
 802f2f0:	68bb      	ldr	r3, [r7, #8]
 802f2f2:	2b22      	cmp	r3, #34	; 0x22
 802f2f4:	d133      	bne.n	802f35e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 802f2f6:	687b      	ldr	r3, [r7, #4]
 802f2f8:	681b      	ldr	r3, [r3, #0]
 802f2fa:	681b      	ldr	r3, [r3, #0]
 802f2fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802f300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f304:	d107      	bne.n	802f316 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802f306:	687b      	ldr	r3, [r7, #4]
 802f308:	681b      	ldr	r3, [r3, #0]
 802f30a:	681a      	ldr	r2, [r3, #0]
 802f30c:	687b      	ldr	r3, [r7, #4]
 802f30e:	681b      	ldr	r3, [r3, #0]
 802f310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802f314:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f316:	687b      	ldr	r3, [r7, #4]
 802f318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f31a:	4618      	mov	r0, r3
 802f31c:	f7fe fc16 	bl	802db4c <HAL_DMA_GetState>
 802f320:	4603      	mov	r3, r0
 802f322:	2b01      	cmp	r3, #1
 802f324:	d017      	beq.n	802f356 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 802f326:	687b      	ldr	r3, [r7, #4]
 802f328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f32a:	4a14      	ldr	r2, [pc, #80]	; (802f37c <I2C_ITError+0x19c>)
 802f32c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802f32e:	687b      	ldr	r3, [r7, #4]
 802f330:	2200      	movs	r2, #0
 802f332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 802f336:	687b      	ldr	r3, [r7, #4]
 802f338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f33a:	4618      	mov	r0, r3
 802f33c:	f7fd fa96 	bl	802c86c <HAL_DMA_Abort_IT>
 802f340:	4603      	mov	r3, r0
 802f342:	2b00      	cmp	r3, #0
 802f344:	d011      	beq.n	802f36a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 802f346:	687b      	ldr	r3, [r7, #4]
 802f348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f34a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f34c:	687a      	ldr	r2, [r7, #4]
 802f34e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 802f350:	4610      	mov	r0, r2
 802f352:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f354:	e009      	b.n	802f36a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 802f356:	6878      	ldr	r0, [r7, #4]
 802f358:	f000 f812 	bl	802f380 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f35c:	e005      	b.n	802f36a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 802f35e:	6878      	ldr	r0, [r7, #4]
 802f360:	f000 f80e 	bl	802f380 <I2C_TreatErrorCallback>
  }
}
 802f364:	e002      	b.n	802f36c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f366:	bf00      	nop
 802f368:	e000      	b.n	802f36c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f36a:	bf00      	nop
}
 802f36c:	bf00      	nop
 802f36e:	3710      	adds	r7, #16
 802f370:	46bd      	mov	sp, r7
 802f372:	bd80      	pop	{r7, pc}
 802f374:	ffff0000 	.word	0xffff0000
 802f378:	0802e97b 	.word	0x0802e97b
 802f37c:	0802f417 	.word	0x0802f417

0802f380 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 802f380:	b580      	push	{r7, lr}
 802f382:	b082      	sub	sp, #8
 802f384:	af00      	add	r7, sp, #0
 802f386:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 802f388:	687b      	ldr	r3, [r7, #4]
 802f38a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f38e:	b2db      	uxtb	r3, r3
 802f390:	2b60      	cmp	r3, #96	; 0x60
 802f392:	d10e      	bne.n	802f3b2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 802f394:	687b      	ldr	r3, [r7, #4]
 802f396:	2220      	movs	r2, #32
 802f398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f39c:	687b      	ldr	r3, [r7, #4]
 802f39e:	2200      	movs	r2, #0
 802f3a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f3a2:	687b      	ldr	r3, [r7, #4]
 802f3a4:	2200      	movs	r2, #0
 802f3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 802f3aa:	6878      	ldr	r0, [r7, #4]
 802f3ac:	f7ff fadb 	bl	802e966 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802f3b0:	e009      	b.n	802f3c6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 802f3b2:	687b      	ldr	r3, [r7, #4]
 802f3b4:	2200      	movs	r2, #0
 802f3b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f3b8:	687b      	ldr	r3, [r7, #4]
 802f3ba:	2200      	movs	r2, #0
 802f3bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 802f3c0:	6878      	ldr	r0, [r7, #4]
 802f3c2:	f7ff fac6 	bl	802e952 <HAL_I2C_ErrorCallback>
}
 802f3c6:	bf00      	nop
 802f3c8:	3708      	adds	r7, #8
 802f3ca:	46bd      	mov	sp, r7
 802f3cc:	bd80      	pop	{r7, pc}

0802f3ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 802f3ce:	b480      	push	{r7}
 802f3d0:	b083      	sub	sp, #12
 802f3d2:	af00      	add	r7, sp, #0
 802f3d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 802f3d6:	687b      	ldr	r3, [r7, #4]
 802f3d8:	681b      	ldr	r3, [r3, #0]
 802f3da:	699b      	ldr	r3, [r3, #24]
 802f3dc:	f003 0302 	and.w	r3, r3, #2
 802f3e0:	2b02      	cmp	r3, #2
 802f3e2:	d103      	bne.n	802f3ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 802f3e4:	687b      	ldr	r3, [r7, #4]
 802f3e6:	681b      	ldr	r3, [r3, #0]
 802f3e8:	2200      	movs	r2, #0
 802f3ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802f3ec:	687b      	ldr	r3, [r7, #4]
 802f3ee:	681b      	ldr	r3, [r3, #0]
 802f3f0:	699b      	ldr	r3, [r3, #24]
 802f3f2:	f003 0301 	and.w	r3, r3, #1
 802f3f6:	2b01      	cmp	r3, #1
 802f3f8:	d007      	beq.n	802f40a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 802f3fa:	687b      	ldr	r3, [r7, #4]
 802f3fc:	681b      	ldr	r3, [r3, #0]
 802f3fe:	699a      	ldr	r2, [r3, #24]
 802f400:	687b      	ldr	r3, [r7, #4]
 802f402:	681b      	ldr	r3, [r3, #0]
 802f404:	f042 0201 	orr.w	r2, r2, #1
 802f408:	619a      	str	r2, [r3, #24]
  }
}
 802f40a:	bf00      	nop
 802f40c:	370c      	adds	r7, #12
 802f40e:	46bd      	mov	sp, r7
 802f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f414:	4770      	bx	lr

0802f416 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 802f416:	b580      	push	{r7, lr}
 802f418:	b084      	sub	sp, #16
 802f41a:	af00      	add	r7, sp, #0
 802f41c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 802f41e:	687b      	ldr	r3, [r7, #4]
 802f420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f422:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 802f424:	68fb      	ldr	r3, [r7, #12]
 802f426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f428:	2b00      	cmp	r3, #0
 802f42a:	d003      	beq.n	802f434 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 802f42c:	68fb      	ldr	r3, [r7, #12]
 802f42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f430:	2200      	movs	r2, #0
 802f432:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 802f434:	68fb      	ldr	r3, [r7, #12]
 802f436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f438:	2b00      	cmp	r3, #0
 802f43a:	d003      	beq.n	802f444 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 802f43c:	68fb      	ldr	r3, [r7, #12]
 802f43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f440:	2200      	movs	r2, #0
 802f442:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 802f444:	68f8      	ldr	r0, [r7, #12]
 802f446:	f7ff ff9b 	bl	802f380 <I2C_TreatErrorCallback>
}
 802f44a:	bf00      	nop
 802f44c:	3710      	adds	r7, #16
 802f44e:	46bd      	mov	sp, r7
 802f450:	bd80      	pop	{r7, pc}

0802f452 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 802f452:	b480      	push	{r7}
 802f454:	b085      	sub	sp, #20
 802f456:	af00      	add	r7, sp, #0
 802f458:	6078      	str	r0, [r7, #4]
 802f45a:	460b      	mov	r3, r1
 802f45c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 802f45e:	2300      	movs	r3, #0
 802f460:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 802f462:	887b      	ldrh	r3, [r7, #2]
 802f464:	f003 0301 	and.w	r3, r3, #1
 802f468:	2b00      	cmp	r3, #0
 802f46a:	d00f      	beq.n	802f48c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 802f46c:	68fb      	ldr	r3, [r7, #12]
 802f46e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 802f472:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 802f474:	687b      	ldr	r3, [r7, #4]
 802f476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f47a:	b2db      	uxtb	r3, r3
 802f47c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802f480:	2b28      	cmp	r3, #40	; 0x28
 802f482:	d003      	beq.n	802f48c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f484:	68fb      	ldr	r3, [r7, #12]
 802f486:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802f48a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 802f48c:	887b      	ldrh	r3, [r7, #2]
 802f48e:	f003 0302 	and.w	r3, r3, #2
 802f492:	2b00      	cmp	r3, #0
 802f494:	d00f      	beq.n	802f4b6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 802f496:	68fb      	ldr	r3, [r7, #12]
 802f498:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 802f49c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 802f49e:	687b      	ldr	r3, [r7, #4]
 802f4a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f4a4:	b2db      	uxtb	r3, r3
 802f4a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802f4aa:	2b28      	cmp	r3, #40	; 0x28
 802f4ac:	d003      	beq.n	802f4b6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f4ae:	68fb      	ldr	r3, [r7, #12]
 802f4b0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802f4b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 802f4b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802f4ba:	2b00      	cmp	r3, #0
 802f4bc:	da03      	bge.n	802f4c6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f4be:	68fb      	ldr	r3, [r7, #12]
 802f4c0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 802f4c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 802f4c6:	887b      	ldrh	r3, [r7, #2]
 802f4c8:	2b10      	cmp	r3, #16
 802f4ca:	d103      	bne.n	802f4d4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 802f4cc:	68fb      	ldr	r3, [r7, #12]
 802f4ce:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 802f4d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 802f4d4:	887b      	ldrh	r3, [r7, #2]
 802f4d6:	2b20      	cmp	r3, #32
 802f4d8:	d103      	bne.n	802f4e2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 802f4da:	68fb      	ldr	r3, [r7, #12]
 802f4dc:	f043 0320 	orr.w	r3, r3, #32
 802f4e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 802f4e2:	887b      	ldrh	r3, [r7, #2]
 802f4e4:	2b40      	cmp	r3, #64	; 0x40
 802f4e6:	d103      	bne.n	802f4f0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 802f4e8:	68fb      	ldr	r3, [r7, #12]
 802f4ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f4ee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 802f4f0:	687b      	ldr	r3, [r7, #4]
 802f4f2:	681b      	ldr	r3, [r3, #0]
 802f4f4:	6819      	ldr	r1, [r3, #0]
 802f4f6:	68fb      	ldr	r3, [r7, #12]
 802f4f8:	43da      	mvns	r2, r3
 802f4fa:	687b      	ldr	r3, [r7, #4]
 802f4fc:	681b      	ldr	r3, [r3, #0]
 802f4fe:	400a      	ands	r2, r1
 802f500:	601a      	str	r2, [r3, #0]
}
 802f502:	bf00      	nop
 802f504:	3714      	adds	r7, #20
 802f506:	46bd      	mov	sp, r7
 802f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f50c:	4770      	bx	lr

0802f50e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 802f50e:	b480      	push	{r7}
 802f510:	b083      	sub	sp, #12
 802f512:	af00      	add	r7, sp, #0
 802f514:	6078      	str	r0, [r7, #4]
 802f516:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802f518:	687b      	ldr	r3, [r7, #4]
 802f51a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f51e:	b2db      	uxtb	r3, r3
 802f520:	2b20      	cmp	r3, #32
 802f522:	d138      	bne.n	802f596 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802f524:	687b      	ldr	r3, [r7, #4]
 802f526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802f52a:	2b01      	cmp	r3, #1
 802f52c:	d101      	bne.n	802f532 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 802f52e:	2302      	movs	r3, #2
 802f530:	e032      	b.n	802f598 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 802f532:	687b      	ldr	r3, [r7, #4]
 802f534:	2201      	movs	r2, #1
 802f536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802f53a:	687b      	ldr	r3, [r7, #4]
 802f53c:	2224      	movs	r2, #36	; 0x24
 802f53e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802f542:	687b      	ldr	r3, [r7, #4]
 802f544:	681b      	ldr	r3, [r3, #0]
 802f546:	681a      	ldr	r2, [r3, #0]
 802f548:	687b      	ldr	r3, [r7, #4]
 802f54a:	681b      	ldr	r3, [r3, #0]
 802f54c:	f022 0201 	bic.w	r2, r2, #1
 802f550:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 802f552:	687b      	ldr	r3, [r7, #4]
 802f554:	681b      	ldr	r3, [r3, #0]
 802f556:	681a      	ldr	r2, [r3, #0]
 802f558:	687b      	ldr	r3, [r7, #4]
 802f55a:	681b      	ldr	r3, [r3, #0]
 802f55c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802f560:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 802f562:	687b      	ldr	r3, [r7, #4]
 802f564:	681b      	ldr	r3, [r3, #0]
 802f566:	6819      	ldr	r1, [r3, #0]
 802f568:	687b      	ldr	r3, [r7, #4]
 802f56a:	681b      	ldr	r3, [r3, #0]
 802f56c:	683a      	ldr	r2, [r7, #0]
 802f56e:	430a      	orrs	r2, r1
 802f570:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802f572:	687b      	ldr	r3, [r7, #4]
 802f574:	681b      	ldr	r3, [r3, #0]
 802f576:	681a      	ldr	r2, [r3, #0]
 802f578:	687b      	ldr	r3, [r7, #4]
 802f57a:	681b      	ldr	r3, [r3, #0]
 802f57c:	f042 0201 	orr.w	r2, r2, #1
 802f580:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802f582:	687b      	ldr	r3, [r7, #4]
 802f584:	2220      	movs	r2, #32
 802f586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f58a:	687b      	ldr	r3, [r7, #4]
 802f58c:	2200      	movs	r2, #0
 802f58e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802f592:	2300      	movs	r3, #0
 802f594:	e000      	b.n	802f598 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 802f596:	2302      	movs	r3, #2
  }
}
 802f598:	4618      	mov	r0, r3
 802f59a:	370c      	adds	r7, #12
 802f59c:	46bd      	mov	sp, r7
 802f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f5a2:	4770      	bx	lr

0802f5a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 802f5a4:	b480      	push	{r7}
 802f5a6:	b085      	sub	sp, #20
 802f5a8:	af00      	add	r7, sp, #0
 802f5aa:	6078      	str	r0, [r7, #4]
 802f5ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802f5ae:	687b      	ldr	r3, [r7, #4]
 802f5b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f5b4:	b2db      	uxtb	r3, r3
 802f5b6:	2b20      	cmp	r3, #32
 802f5b8:	d139      	bne.n	802f62e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802f5ba:	687b      	ldr	r3, [r7, #4]
 802f5bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802f5c0:	2b01      	cmp	r3, #1
 802f5c2:	d101      	bne.n	802f5c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 802f5c4:	2302      	movs	r3, #2
 802f5c6:	e033      	b.n	802f630 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 802f5c8:	687b      	ldr	r3, [r7, #4]
 802f5ca:	2201      	movs	r2, #1
 802f5cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802f5d0:	687b      	ldr	r3, [r7, #4]
 802f5d2:	2224      	movs	r2, #36	; 0x24
 802f5d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802f5d8:	687b      	ldr	r3, [r7, #4]
 802f5da:	681b      	ldr	r3, [r3, #0]
 802f5dc:	681a      	ldr	r2, [r3, #0]
 802f5de:	687b      	ldr	r3, [r7, #4]
 802f5e0:	681b      	ldr	r3, [r3, #0]
 802f5e2:	f022 0201 	bic.w	r2, r2, #1
 802f5e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 802f5e8:	687b      	ldr	r3, [r7, #4]
 802f5ea:	681b      	ldr	r3, [r3, #0]
 802f5ec:	681b      	ldr	r3, [r3, #0]
 802f5ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 802f5f0:	68fb      	ldr	r3, [r7, #12]
 802f5f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 802f5f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 802f5f8:	683b      	ldr	r3, [r7, #0]
 802f5fa:	021b      	lsls	r3, r3, #8
 802f5fc:	68fa      	ldr	r2, [r7, #12]
 802f5fe:	4313      	orrs	r3, r2
 802f600:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 802f602:	687b      	ldr	r3, [r7, #4]
 802f604:	681b      	ldr	r3, [r3, #0]
 802f606:	68fa      	ldr	r2, [r7, #12]
 802f608:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802f60a:	687b      	ldr	r3, [r7, #4]
 802f60c:	681b      	ldr	r3, [r3, #0]
 802f60e:	681a      	ldr	r2, [r3, #0]
 802f610:	687b      	ldr	r3, [r7, #4]
 802f612:	681b      	ldr	r3, [r3, #0]
 802f614:	f042 0201 	orr.w	r2, r2, #1
 802f618:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802f61a:	687b      	ldr	r3, [r7, #4]
 802f61c:	2220      	movs	r2, #32
 802f61e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f622:	687b      	ldr	r3, [r7, #4]
 802f624:	2200      	movs	r2, #0
 802f626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802f62a:	2300      	movs	r3, #0
 802f62c:	e000      	b.n	802f630 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 802f62e:	2302      	movs	r3, #2
  }
}
 802f630:	4618      	mov	r0, r3
 802f632:	3714      	adds	r7, #20
 802f634:	46bd      	mov	sp, r7
 802f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f63a:	4770      	bx	lr

0802f63c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 802f63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f63e:	b08f      	sub	sp, #60	; 0x3c
 802f640:	af0a      	add	r7, sp, #40	; 0x28
 802f642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 802f644:	687b      	ldr	r3, [r7, #4]
 802f646:	2b00      	cmp	r3, #0
 802f648:	d101      	bne.n	802f64e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 802f64a:	2301      	movs	r3, #1
 802f64c:	e116      	b.n	802f87c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 802f64e:	687b      	ldr	r3, [r7, #4]
 802f650:	681b      	ldr	r3, [r3, #0]
 802f652:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 802f654:	687b      	ldr	r3, [r7, #4]
 802f656:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 802f65a:	b2db      	uxtb	r3, r3
 802f65c:	2b00      	cmp	r3, #0
 802f65e:	d106      	bne.n	802f66e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 802f660:	687b      	ldr	r3, [r7, #4]
 802f662:	2200      	movs	r2, #0
 802f664:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 802f668:	6878      	ldr	r0, [r7, #4]
 802f66a:	f00c f82f 	bl	803b6cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 802f66e:	687b      	ldr	r3, [r7, #4]
 802f670:	2203      	movs	r2, #3
 802f672:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 802f676:	68bb      	ldr	r3, [r7, #8]
 802f678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802f67e:	2b00      	cmp	r3, #0
 802f680:	d102      	bne.n	802f688 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 802f682:	687b      	ldr	r3, [r7, #4]
 802f684:	2200      	movs	r2, #0
 802f686:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 802f688:	687b      	ldr	r3, [r7, #4]
 802f68a:	681b      	ldr	r3, [r3, #0]
 802f68c:	4618      	mov	r0, r3
 802f68e:	f008 fb78 	bl	8037d82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802f692:	687b      	ldr	r3, [r7, #4]
 802f694:	681b      	ldr	r3, [r3, #0]
 802f696:	603b      	str	r3, [r7, #0]
 802f698:	687e      	ldr	r6, [r7, #4]
 802f69a:	466d      	mov	r5, sp
 802f69c:	f106 0410 	add.w	r4, r6, #16
 802f6a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f6a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f6a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f6a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f6a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 802f6ac:	e885 0003 	stmia.w	r5, {r0, r1}
 802f6b0:	1d33      	adds	r3, r6, #4
 802f6b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 802f6b4:	6838      	ldr	r0, [r7, #0]
 802f6b6:	f008 fa43 	bl	8037b40 <USB_CoreInit>
 802f6ba:	4603      	mov	r3, r0
 802f6bc:	2b00      	cmp	r3, #0
 802f6be:	d005      	beq.n	802f6cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802f6c0:	687b      	ldr	r3, [r7, #4]
 802f6c2:	2202      	movs	r2, #2
 802f6c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 802f6c8:	2301      	movs	r3, #1
 802f6ca:	e0d7      	b.n	802f87c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 802f6cc:	687b      	ldr	r3, [r7, #4]
 802f6ce:	681b      	ldr	r3, [r3, #0]
 802f6d0:	2100      	movs	r1, #0
 802f6d2:	4618      	mov	r0, r3
 802f6d4:	f008 fb66 	bl	8037da4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f6d8:	2300      	movs	r3, #0
 802f6da:	73fb      	strb	r3, [r7, #15]
 802f6dc:	e04a      	b.n	802f774 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 802f6de:	7bfa      	ldrb	r2, [r7, #15]
 802f6e0:	6879      	ldr	r1, [r7, #4]
 802f6e2:	4613      	mov	r3, r2
 802f6e4:	00db      	lsls	r3, r3, #3
 802f6e6:	4413      	add	r3, r2
 802f6e8:	009b      	lsls	r3, r3, #2
 802f6ea:	440b      	add	r3, r1
 802f6ec:	333d      	adds	r3, #61	; 0x3d
 802f6ee:	2201      	movs	r2, #1
 802f6f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 802f6f2:	7bfa      	ldrb	r2, [r7, #15]
 802f6f4:	6879      	ldr	r1, [r7, #4]
 802f6f6:	4613      	mov	r3, r2
 802f6f8:	00db      	lsls	r3, r3, #3
 802f6fa:	4413      	add	r3, r2
 802f6fc:	009b      	lsls	r3, r3, #2
 802f6fe:	440b      	add	r3, r1
 802f700:	333c      	adds	r3, #60	; 0x3c
 802f702:	7bfa      	ldrb	r2, [r7, #15]
 802f704:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 802f706:	7bfa      	ldrb	r2, [r7, #15]
 802f708:	7bfb      	ldrb	r3, [r7, #15]
 802f70a:	b298      	uxth	r0, r3
 802f70c:	6879      	ldr	r1, [r7, #4]
 802f70e:	4613      	mov	r3, r2
 802f710:	00db      	lsls	r3, r3, #3
 802f712:	4413      	add	r3, r2
 802f714:	009b      	lsls	r3, r3, #2
 802f716:	440b      	add	r3, r1
 802f718:	3344      	adds	r3, #68	; 0x44
 802f71a:	4602      	mov	r2, r0
 802f71c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 802f71e:	7bfa      	ldrb	r2, [r7, #15]
 802f720:	6879      	ldr	r1, [r7, #4]
 802f722:	4613      	mov	r3, r2
 802f724:	00db      	lsls	r3, r3, #3
 802f726:	4413      	add	r3, r2
 802f728:	009b      	lsls	r3, r3, #2
 802f72a:	440b      	add	r3, r1
 802f72c:	3340      	adds	r3, #64	; 0x40
 802f72e:	2200      	movs	r2, #0
 802f730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 802f732:	7bfa      	ldrb	r2, [r7, #15]
 802f734:	6879      	ldr	r1, [r7, #4]
 802f736:	4613      	mov	r3, r2
 802f738:	00db      	lsls	r3, r3, #3
 802f73a:	4413      	add	r3, r2
 802f73c:	009b      	lsls	r3, r3, #2
 802f73e:	440b      	add	r3, r1
 802f740:	3348      	adds	r3, #72	; 0x48
 802f742:	2200      	movs	r2, #0
 802f744:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 802f746:	7bfa      	ldrb	r2, [r7, #15]
 802f748:	6879      	ldr	r1, [r7, #4]
 802f74a:	4613      	mov	r3, r2
 802f74c:	00db      	lsls	r3, r3, #3
 802f74e:	4413      	add	r3, r2
 802f750:	009b      	lsls	r3, r3, #2
 802f752:	440b      	add	r3, r1
 802f754:	334c      	adds	r3, #76	; 0x4c
 802f756:	2200      	movs	r2, #0
 802f758:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 802f75a:	7bfa      	ldrb	r2, [r7, #15]
 802f75c:	6879      	ldr	r1, [r7, #4]
 802f75e:	4613      	mov	r3, r2
 802f760:	00db      	lsls	r3, r3, #3
 802f762:	4413      	add	r3, r2
 802f764:	009b      	lsls	r3, r3, #2
 802f766:	440b      	add	r3, r1
 802f768:	3354      	adds	r3, #84	; 0x54
 802f76a:	2200      	movs	r2, #0
 802f76c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f76e:	7bfb      	ldrb	r3, [r7, #15]
 802f770:	3301      	adds	r3, #1
 802f772:	73fb      	strb	r3, [r7, #15]
 802f774:	7bfa      	ldrb	r2, [r7, #15]
 802f776:	687b      	ldr	r3, [r7, #4]
 802f778:	685b      	ldr	r3, [r3, #4]
 802f77a:	429a      	cmp	r2, r3
 802f77c:	d3af      	bcc.n	802f6de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f77e:	2300      	movs	r3, #0
 802f780:	73fb      	strb	r3, [r7, #15]
 802f782:	e044      	b.n	802f80e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 802f784:	7bfa      	ldrb	r2, [r7, #15]
 802f786:	6879      	ldr	r1, [r7, #4]
 802f788:	4613      	mov	r3, r2
 802f78a:	00db      	lsls	r3, r3, #3
 802f78c:	4413      	add	r3, r2
 802f78e:	009b      	lsls	r3, r3, #2
 802f790:	440b      	add	r3, r1
 802f792:	f203 237d 	addw	r3, r3, #637	; 0x27d
 802f796:	2200      	movs	r2, #0
 802f798:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 802f79a:	7bfa      	ldrb	r2, [r7, #15]
 802f79c:	6879      	ldr	r1, [r7, #4]
 802f79e:	4613      	mov	r3, r2
 802f7a0:	00db      	lsls	r3, r3, #3
 802f7a2:	4413      	add	r3, r2
 802f7a4:	009b      	lsls	r3, r3, #2
 802f7a6:	440b      	add	r3, r1
 802f7a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 802f7ac:	7bfa      	ldrb	r2, [r7, #15]
 802f7ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 802f7b0:	7bfa      	ldrb	r2, [r7, #15]
 802f7b2:	6879      	ldr	r1, [r7, #4]
 802f7b4:	4613      	mov	r3, r2
 802f7b6:	00db      	lsls	r3, r3, #3
 802f7b8:	4413      	add	r3, r2
 802f7ba:	009b      	lsls	r3, r3, #2
 802f7bc:	440b      	add	r3, r1
 802f7be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 802f7c2:	2200      	movs	r2, #0
 802f7c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 802f7c6:	7bfa      	ldrb	r2, [r7, #15]
 802f7c8:	6879      	ldr	r1, [r7, #4]
 802f7ca:	4613      	mov	r3, r2
 802f7cc:	00db      	lsls	r3, r3, #3
 802f7ce:	4413      	add	r3, r2
 802f7d0:	009b      	lsls	r3, r3, #2
 802f7d2:	440b      	add	r3, r1
 802f7d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802f7d8:	2200      	movs	r2, #0
 802f7da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 802f7dc:	7bfa      	ldrb	r2, [r7, #15]
 802f7de:	6879      	ldr	r1, [r7, #4]
 802f7e0:	4613      	mov	r3, r2
 802f7e2:	00db      	lsls	r3, r3, #3
 802f7e4:	4413      	add	r3, r2
 802f7e6:	009b      	lsls	r3, r3, #2
 802f7e8:	440b      	add	r3, r1
 802f7ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 802f7ee:	2200      	movs	r2, #0
 802f7f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 802f7f2:	7bfa      	ldrb	r2, [r7, #15]
 802f7f4:	6879      	ldr	r1, [r7, #4]
 802f7f6:	4613      	mov	r3, r2
 802f7f8:	00db      	lsls	r3, r3, #3
 802f7fa:	4413      	add	r3, r2
 802f7fc:	009b      	lsls	r3, r3, #2
 802f7fe:	440b      	add	r3, r1
 802f800:	f503 7325 	add.w	r3, r3, #660	; 0x294
 802f804:	2200      	movs	r2, #0
 802f806:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f808:	7bfb      	ldrb	r3, [r7, #15]
 802f80a:	3301      	adds	r3, #1
 802f80c:	73fb      	strb	r3, [r7, #15]
 802f80e:	7bfa      	ldrb	r2, [r7, #15]
 802f810:	687b      	ldr	r3, [r7, #4]
 802f812:	685b      	ldr	r3, [r3, #4]
 802f814:	429a      	cmp	r2, r3
 802f816:	d3b5      	bcc.n	802f784 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802f818:	687b      	ldr	r3, [r7, #4]
 802f81a:	681b      	ldr	r3, [r3, #0]
 802f81c:	603b      	str	r3, [r7, #0]
 802f81e:	687e      	ldr	r6, [r7, #4]
 802f820:	466d      	mov	r5, sp
 802f822:	f106 0410 	add.w	r4, r6, #16
 802f826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f82a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f82c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f82e:	e894 0003 	ldmia.w	r4, {r0, r1}
 802f832:	e885 0003 	stmia.w	r5, {r0, r1}
 802f836:	1d33      	adds	r3, r6, #4
 802f838:	cb0e      	ldmia	r3, {r1, r2, r3}
 802f83a:	6838      	ldr	r0, [r7, #0]
 802f83c:	f008 fafe 	bl	8037e3c <USB_DevInit>
 802f840:	4603      	mov	r3, r0
 802f842:	2b00      	cmp	r3, #0
 802f844:	d005      	beq.n	802f852 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802f846:	687b      	ldr	r3, [r7, #4]
 802f848:	2202      	movs	r2, #2
 802f84a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 802f84e:	2301      	movs	r3, #1
 802f850:	e014      	b.n	802f87c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 802f852:	687b      	ldr	r3, [r7, #4]
 802f854:	2200      	movs	r2, #0
 802f856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 802f85a:	687b      	ldr	r3, [r7, #4]
 802f85c:	2201      	movs	r2, #1
 802f85e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 802f862:	687b      	ldr	r3, [r7, #4]
 802f864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f866:	2b01      	cmp	r3, #1
 802f868:	d102      	bne.n	802f870 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 802f86a:	6878      	ldr	r0, [r7, #4]
 802f86c:	f001 f98c 	bl	8030b88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 802f870:	687b      	ldr	r3, [r7, #4]
 802f872:	681b      	ldr	r3, [r3, #0]
 802f874:	4618      	mov	r0, r3
 802f876:	f009 fc4c 	bl	8039112 <USB_DevDisconnect>

  return HAL_OK;
 802f87a:	2300      	movs	r3, #0
}
 802f87c:	4618      	mov	r0, r3
 802f87e:	3714      	adds	r7, #20
 802f880:	46bd      	mov	sp, r7
 802f882:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802f884 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 802f884:	b580      	push	{r7, lr}
 802f886:	b084      	sub	sp, #16
 802f888:	af00      	add	r7, sp, #0
 802f88a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802f88c:	687b      	ldr	r3, [r7, #4]
 802f88e:	681b      	ldr	r3, [r3, #0]
 802f890:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 802f892:	687b      	ldr	r3, [r7, #4]
 802f894:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802f898:	2b01      	cmp	r3, #1
 802f89a:	d101      	bne.n	802f8a0 <HAL_PCD_Start+0x1c>
 802f89c:	2302      	movs	r3, #2
 802f89e:	e020      	b.n	802f8e2 <HAL_PCD_Start+0x5e>
 802f8a0:	687b      	ldr	r3, [r7, #4]
 802f8a2:	2201      	movs	r2, #1
 802f8a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 802f8a8:	687b      	ldr	r3, [r7, #4]
 802f8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f8ac:	2b01      	cmp	r3, #1
 802f8ae:	d109      	bne.n	802f8c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 802f8b0:	687b      	ldr	r3, [r7, #4]
 802f8b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 802f8b4:	2b01      	cmp	r3, #1
 802f8b6:	d005      	beq.n	802f8c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802f8b8:	68fb      	ldr	r3, [r7, #12]
 802f8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f8bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802f8c0:	68fb      	ldr	r3, [r7, #12]
 802f8c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 802f8c4:	687b      	ldr	r3, [r7, #4]
 802f8c6:	681b      	ldr	r3, [r3, #0]
 802f8c8:	4618      	mov	r0, r3
 802f8ca:	f008 fa49 	bl	8037d60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 802f8ce:	687b      	ldr	r3, [r7, #4]
 802f8d0:	681b      	ldr	r3, [r3, #0]
 802f8d2:	4618      	mov	r0, r3
 802f8d4:	f009 fbfc 	bl	80390d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 802f8d8:	687b      	ldr	r3, [r7, #4]
 802f8da:	2200      	movs	r2, #0
 802f8dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 802f8e0:	2300      	movs	r3, #0
}
 802f8e2:	4618      	mov	r0, r3
 802f8e4:	3710      	adds	r7, #16
 802f8e6:	46bd      	mov	sp, r7
 802f8e8:	bd80      	pop	{r7, pc}

0802f8ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 802f8ea:	b590      	push	{r4, r7, lr}
 802f8ec:	b08d      	sub	sp, #52	; 0x34
 802f8ee:	af00      	add	r7, sp, #0
 802f8f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802f8f2:	687b      	ldr	r3, [r7, #4]
 802f8f4:	681b      	ldr	r3, [r3, #0]
 802f8f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802f8f8:	6a3b      	ldr	r3, [r7, #32]
 802f8fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 802f8fc:	687b      	ldr	r3, [r7, #4]
 802f8fe:	681b      	ldr	r3, [r3, #0]
 802f900:	4618      	mov	r0, r3
 802f902:	f009 fcba 	bl	803927a <USB_GetMode>
 802f906:	4603      	mov	r3, r0
 802f908:	2b00      	cmp	r3, #0
 802f90a:	f040 84b7 	bne.w	803027c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 802f90e:	687b      	ldr	r3, [r7, #4]
 802f910:	681b      	ldr	r3, [r3, #0]
 802f912:	4618      	mov	r0, r3
 802f914:	f009 fc1e 	bl	8039154 <USB_ReadInterrupts>
 802f918:	4603      	mov	r3, r0
 802f91a:	2b00      	cmp	r3, #0
 802f91c:	f000 84ad 	beq.w	803027a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 802f920:	69fb      	ldr	r3, [r7, #28]
 802f922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f926:	689b      	ldr	r3, [r3, #8]
 802f928:	0a1b      	lsrs	r3, r3, #8
 802f92a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 802f92e:	687b      	ldr	r3, [r7, #4]
 802f930:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 802f934:	687b      	ldr	r3, [r7, #4]
 802f936:	681b      	ldr	r3, [r3, #0]
 802f938:	4618      	mov	r0, r3
 802f93a:	f009 fc0b 	bl	8039154 <USB_ReadInterrupts>
 802f93e:	4603      	mov	r3, r0
 802f940:	f003 0302 	and.w	r3, r3, #2
 802f944:	2b02      	cmp	r3, #2
 802f946:	d107      	bne.n	802f958 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 802f948:	687b      	ldr	r3, [r7, #4]
 802f94a:	681b      	ldr	r3, [r3, #0]
 802f94c:	695a      	ldr	r2, [r3, #20]
 802f94e:	687b      	ldr	r3, [r7, #4]
 802f950:	681b      	ldr	r3, [r3, #0]
 802f952:	f002 0202 	and.w	r2, r2, #2
 802f956:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 802f958:	687b      	ldr	r3, [r7, #4]
 802f95a:	681b      	ldr	r3, [r3, #0]
 802f95c:	4618      	mov	r0, r3
 802f95e:	f009 fbf9 	bl	8039154 <USB_ReadInterrupts>
 802f962:	4603      	mov	r3, r0
 802f964:	f003 0310 	and.w	r3, r3, #16
 802f968:	2b10      	cmp	r3, #16
 802f96a:	d161      	bne.n	802fa30 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802f96c:	687b      	ldr	r3, [r7, #4]
 802f96e:	681b      	ldr	r3, [r3, #0]
 802f970:	699a      	ldr	r2, [r3, #24]
 802f972:	687b      	ldr	r3, [r7, #4]
 802f974:	681b      	ldr	r3, [r3, #0]
 802f976:	f022 0210 	bic.w	r2, r2, #16
 802f97a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 802f97c:	6a3b      	ldr	r3, [r7, #32]
 802f97e:	6a1b      	ldr	r3, [r3, #32]
 802f980:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 802f982:	69bb      	ldr	r3, [r7, #24]
 802f984:	f003 020f 	and.w	r2, r3, #15
 802f988:	4613      	mov	r3, r2
 802f98a:	00db      	lsls	r3, r3, #3
 802f98c:	4413      	add	r3, r2
 802f98e:	009b      	lsls	r3, r3, #2
 802f990:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802f994:	687a      	ldr	r2, [r7, #4]
 802f996:	4413      	add	r3, r2
 802f998:	3304      	adds	r3, #4
 802f99a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 802f99c:	69bb      	ldr	r3, [r7, #24]
 802f99e:	0c5b      	lsrs	r3, r3, #17
 802f9a0:	f003 030f 	and.w	r3, r3, #15
 802f9a4:	2b02      	cmp	r3, #2
 802f9a6:	d124      	bne.n	802f9f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 802f9a8:	69ba      	ldr	r2, [r7, #24]
 802f9aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 802f9ae:	4013      	ands	r3, r2
 802f9b0:	2b00      	cmp	r3, #0
 802f9b2:	d035      	beq.n	802fa20 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 802f9b4:	697b      	ldr	r3, [r7, #20]
 802f9b6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 802f9b8:	69bb      	ldr	r3, [r7, #24]
 802f9ba:	091b      	lsrs	r3, r3, #4
 802f9bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 802f9be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f9c2:	b29b      	uxth	r3, r3
 802f9c4:	461a      	mov	r2, r3
 802f9c6:	6a38      	ldr	r0, [r7, #32]
 802f9c8:	f009 fa30 	bl	8038e2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f9cc:	697b      	ldr	r3, [r7, #20]
 802f9ce:	691a      	ldr	r2, [r3, #16]
 802f9d0:	69bb      	ldr	r3, [r7, #24]
 802f9d2:	091b      	lsrs	r3, r3, #4
 802f9d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f9d8:	441a      	add	r2, r3
 802f9da:	697b      	ldr	r3, [r7, #20]
 802f9dc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f9de:	697b      	ldr	r3, [r7, #20]
 802f9e0:	6a1a      	ldr	r2, [r3, #32]
 802f9e2:	69bb      	ldr	r3, [r7, #24]
 802f9e4:	091b      	lsrs	r3, r3, #4
 802f9e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f9ea:	441a      	add	r2, r3
 802f9ec:	697b      	ldr	r3, [r7, #20]
 802f9ee:	621a      	str	r2, [r3, #32]
 802f9f0:	e016      	b.n	802fa20 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 802f9f2:	69bb      	ldr	r3, [r7, #24]
 802f9f4:	0c5b      	lsrs	r3, r3, #17
 802f9f6:	f003 030f 	and.w	r3, r3, #15
 802f9fa:	2b06      	cmp	r3, #6
 802f9fc:	d110      	bne.n	802fa20 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 802f9fe:	687b      	ldr	r3, [r7, #4]
 802fa00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802fa04:	2208      	movs	r2, #8
 802fa06:	4619      	mov	r1, r3
 802fa08:	6a38      	ldr	r0, [r7, #32]
 802fa0a:	f009 fa0f 	bl	8038e2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802fa0e:	697b      	ldr	r3, [r7, #20]
 802fa10:	6a1a      	ldr	r2, [r3, #32]
 802fa12:	69bb      	ldr	r3, [r7, #24]
 802fa14:	091b      	lsrs	r3, r3, #4
 802fa16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802fa1a:	441a      	add	r2, r3
 802fa1c:	697b      	ldr	r3, [r7, #20]
 802fa1e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802fa20:	687b      	ldr	r3, [r7, #4]
 802fa22:	681b      	ldr	r3, [r3, #0]
 802fa24:	699a      	ldr	r2, [r3, #24]
 802fa26:	687b      	ldr	r3, [r7, #4]
 802fa28:	681b      	ldr	r3, [r3, #0]
 802fa2a:	f042 0210 	orr.w	r2, r2, #16
 802fa2e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 802fa30:	687b      	ldr	r3, [r7, #4]
 802fa32:	681b      	ldr	r3, [r3, #0]
 802fa34:	4618      	mov	r0, r3
 802fa36:	f009 fb8d 	bl	8039154 <USB_ReadInterrupts>
 802fa3a:	4603      	mov	r3, r0
 802fa3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802fa40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 802fa44:	f040 80a7 	bne.w	802fb96 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 802fa48:	2300      	movs	r3, #0
 802fa4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 802fa4c:	687b      	ldr	r3, [r7, #4]
 802fa4e:	681b      	ldr	r3, [r3, #0]
 802fa50:	4618      	mov	r0, r3
 802fa52:	f009 fb92 	bl	803917a <USB_ReadDevAllOutEpInterrupt>
 802fa56:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 802fa58:	e099      	b.n	802fb8e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 802fa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fa5c:	f003 0301 	and.w	r3, r3, #1
 802fa60:	2b00      	cmp	r3, #0
 802fa62:	f000 808e 	beq.w	802fb82 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 802fa66:	687b      	ldr	r3, [r7, #4]
 802fa68:	681b      	ldr	r3, [r3, #0]
 802fa6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fa6c:	b2d2      	uxtb	r2, r2
 802fa6e:	4611      	mov	r1, r2
 802fa70:	4618      	mov	r0, r3
 802fa72:	f009 fbb6 	bl	80391e2 <USB_ReadDevOutEPInterrupt>
 802fa76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 802fa78:	693b      	ldr	r3, [r7, #16]
 802fa7a:	f003 0301 	and.w	r3, r3, #1
 802fa7e:	2b00      	cmp	r3, #0
 802fa80:	d00c      	beq.n	802fa9c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 802fa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa84:	015a      	lsls	r2, r3, #5
 802fa86:	69fb      	ldr	r3, [r7, #28]
 802fa88:	4413      	add	r3, r2
 802fa8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fa8e:	461a      	mov	r2, r3
 802fa90:	2301      	movs	r3, #1
 802fa92:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 802fa94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fa96:	6878      	ldr	r0, [r7, #4]
 802fa98:	f000 fef0 	bl	803087c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 802fa9c:	693b      	ldr	r3, [r7, #16]
 802fa9e:	f003 0308 	and.w	r3, r3, #8
 802faa2:	2b00      	cmp	r3, #0
 802faa4:	d00c      	beq.n	802fac0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 802faa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802faa8:	015a      	lsls	r2, r3, #5
 802faaa:	69fb      	ldr	r3, [r7, #28]
 802faac:	4413      	add	r3, r2
 802faae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fab2:	461a      	mov	r2, r3
 802fab4:	2308      	movs	r3, #8
 802fab6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 802fab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802faba:	6878      	ldr	r0, [r7, #4]
 802fabc:	f000 ffc6 	bl	8030a4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 802fac0:	693b      	ldr	r3, [r7, #16]
 802fac2:	f003 0310 	and.w	r3, r3, #16
 802fac6:	2b00      	cmp	r3, #0
 802fac8:	d008      	beq.n	802fadc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 802faca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802facc:	015a      	lsls	r2, r3, #5
 802face:	69fb      	ldr	r3, [r7, #28]
 802fad0:	4413      	add	r3, r2
 802fad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fad6:	461a      	mov	r2, r3
 802fad8:	2310      	movs	r3, #16
 802fada:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 802fadc:	693b      	ldr	r3, [r7, #16]
 802fade:	f003 0302 	and.w	r3, r3, #2
 802fae2:	2b00      	cmp	r3, #0
 802fae4:	d030      	beq.n	802fb48 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 802fae6:	6a3b      	ldr	r3, [r7, #32]
 802fae8:	695b      	ldr	r3, [r3, #20]
 802faea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802faee:	2b80      	cmp	r3, #128	; 0x80
 802faf0:	d109      	bne.n	802fb06 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 802faf2:	69fb      	ldr	r3, [r7, #28]
 802faf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802faf8:	685b      	ldr	r3, [r3, #4]
 802fafa:	69fa      	ldr	r2, [r7, #28]
 802fafc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fb00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802fb04:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 802fb06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fb08:	4613      	mov	r3, r2
 802fb0a:	00db      	lsls	r3, r3, #3
 802fb0c:	4413      	add	r3, r2
 802fb0e:	009b      	lsls	r3, r3, #2
 802fb10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802fb14:	687a      	ldr	r2, [r7, #4]
 802fb16:	4413      	add	r3, r2
 802fb18:	3304      	adds	r3, #4
 802fb1a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 802fb1c:	697b      	ldr	r3, [r7, #20]
 802fb1e:	78db      	ldrb	r3, [r3, #3]
 802fb20:	2b01      	cmp	r3, #1
 802fb22:	d108      	bne.n	802fb36 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 802fb24:	697b      	ldr	r3, [r7, #20]
 802fb26:	2200      	movs	r2, #0
 802fb28:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 802fb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb2c:	b2db      	uxtb	r3, r3
 802fb2e:	4619      	mov	r1, r3
 802fb30:	6878      	ldr	r0, [r7, #4]
 802fb32:	f00b fef7 	bl	803b924 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 802fb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb38:	015a      	lsls	r2, r3, #5
 802fb3a:	69fb      	ldr	r3, [r7, #28]
 802fb3c:	4413      	add	r3, r2
 802fb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fb42:	461a      	mov	r2, r3
 802fb44:	2302      	movs	r3, #2
 802fb46:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 802fb48:	693b      	ldr	r3, [r7, #16]
 802fb4a:	f003 0320 	and.w	r3, r3, #32
 802fb4e:	2b00      	cmp	r3, #0
 802fb50:	d008      	beq.n	802fb64 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 802fb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb54:	015a      	lsls	r2, r3, #5
 802fb56:	69fb      	ldr	r3, [r7, #28]
 802fb58:	4413      	add	r3, r2
 802fb5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fb5e:	461a      	mov	r2, r3
 802fb60:	2320      	movs	r3, #32
 802fb62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 802fb64:	693b      	ldr	r3, [r7, #16]
 802fb66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802fb6a:	2b00      	cmp	r3, #0
 802fb6c:	d009      	beq.n	802fb82 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 802fb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb70:	015a      	lsls	r2, r3, #5
 802fb72:	69fb      	ldr	r3, [r7, #28]
 802fb74:	4413      	add	r3, r2
 802fb76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fb7a:	461a      	mov	r2, r3
 802fb7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802fb80:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 802fb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb84:	3301      	adds	r3, #1
 802fb86:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802fb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fb8a:	085b      	lsrs	r3, r3, #1
 802fb8c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 802fb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fb90:	2b00      	cmp	r3, #0
 802fb92:	f47f af62 	bne.w	802fa5a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 802fb96:	687b      	ldr	r3, [r7, #4]
 802fb98:	681b      	ldr	r3, [r3, #0]
 802fb9a:	4618      	mov	r0, r3
 802fb9c:	f009 fada 	bl	8039154 <USB_ReadInterrupts>
 802fba0:	4603      	mov	r3, r0
 802fba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802fba6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802fbaa:	f040 80db 	bne.w	802fd64 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 802fbae:	687b      	ldr	r3, [r7, #4]
 802fbb0:	681b      	ldr	r3, [r3, #0]
 802fbb2:	4618      	mov	r0, r3
 802fbb4:	f009 fafb 	bl	80391ae <USB_ReadDevAllInEpInterrupt>
 802fbb8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 802fbba:	2300      	movs	r3, #0
 802fbbc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 802fbbe:	e0cd      	b.n	802fd5c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 802fbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fbc2:	f003 0301 	and.w	r3, r3, #1
 802fbc6:	2b00      	cmp	r3, #0
 802fbc8:	f000 80c2 	beq.w	802fd50 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 802fbcc:	687b      	ldr	r3, [r7, #4]
 802fbce:	681b      	ldr	r3, [r3, #0]
 802fbd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fbd2:	b2d2      	uxtb	r2, r2
 802fbd4:	4611      	mov	r1, r2
 802fbd6:	4618      	mov	r0, r3
 802fbd8:	f009 fb21 	bl	803921e <USB_ReadDevInEPInterrupt>
 802fbdc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 802fbde:	693b      	ldr	r3, [r7, #16]
 802fbe0:	f003 0301 	and.w	r3, r3, #1
 802fbe4:	2b00      	cmp	r3, #0
 802fbe6:	d057      	beq.n	802fc98 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 802fbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fbea:	f003 030f 	and.w	r3, r3, #15
 802fbee:	2201      	movs	r2, #1
 802fbf0:	fa02 f303 	lsl.w	r3, r2, r3
 802fbf4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 802fbf6:	69fb      	ldr	r3, [r7, #28]
 802fbf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fbfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802fbfe:	68fb      	ldr	r3, [r7, #12]
 802fc00:	43db      	mvns	r3, r3
 802fc02:	69f9      	ldr	r1, [r7, #28]
 802fc04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802fc08:	4013      	ands	r3, r2
 802fc0a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 802fc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc0e:	015a      	lsls	r2, r3, #5
 802fc10:	69fb      	ldr	r3, [r7, #28]
 802fc12:	4413      	add	r3, r2
 802fc14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fc18:	461a      	mov	r2, r3
 802fc1a:	2301      	movs	r3, #1
 802fc1c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 802fc1e:	687b      	ldr	r3, [r7, #4]
 802fc20:	691b      	ldr	r3, [r3, #16]
 802fc22:	2b01      	cmp	r3, #1
 802fc24:	d132      	bne.n	802fc8c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 802fc26:	6879      	ldr	r1, [r7, #4]
 802fc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fc2a:	4613      	mov	r3, r2
 802fc2c:	00db      	lsls	r3, r3, #3
 802fc2e:	4413      	add	r3, r2
 802fc30:	009b      	lsls	r3, r3, #2
 802fc32:	440b      	add	r3, r1
 802fc34:	334c      	adds	r3, #76	; 0x4c
 802fc36:	6819      	ldr	r1, [r3, #0]
 802fc38:	6878      	ldr	r0, [r7, #4]
 802fc3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fc3c:	4613      	mov	r3, r2
 802fc3e:	00db      	lsls	r3, r3, #3
 802fc40:	4413      	add	r3, r2
 802fc42:	009b      	lsls	r3, r3, #2
 802fc44:	4403      	add	r3, r0
 802fc46:	3348      	adds	r3, #72	; 0x48
 802fc48:	681b      	ldr	r3, [r3, #0]
 802fc4a:	4419      	add	r1, r3
 802fc4c:	6878      	ldr	r0, [r7, #4]
 802fc4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fc50:	4613      	mov	r3, r2
 802fc52:	00db      	lsls	r3, r3, #3
 802fc54:	4413      	add	r3, r2
 802fc56:	009b      	lsls	r3, r3, #2
 802fc58:	4403      	add	r3, r0
 802fc5a:	334c      	adds	r3, #76	; 0x4c
 802fc5c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 802fc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc60:	2b00      	cmp	r3, #0
 802fc62:	d113      	bne.n	802fc8c <HAL_PCD_IRQHandler+0x3a2>
 802fc64:	6879      	ldr	r1, [r7, #4]
 802fc66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fc68:	4613      	mov	r3, r2
 802fc6a:	00db      	lsls	r3, r3, #3
 802fc6c:	4413      	add	r3, r2
 802fc6e:	009b      	lsls	r3, r3, #2
 802fc70:	440b      	add	r3, r1
 802fc72:	3354      	adds	r3, #84	; 0x54
 802fc74:	681b      	ldr	r3, [r3, #0]
 802fc76:	2b00      	cmp	r3, #0
 802fc78:	d108      	bne.n	802fc8c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 802fc7a:	687b      	ldr	r3, [r7, #4]
 802fc7c:	6818      	ldr	r0, [r3, #0]
 802fc7e:	687b      	ldr	r3, [r7, #4]
 802fc80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802fc84:	461a      	mov	r2, r3
 802fc86:	2101      	movs	r1, #1
 802fc88:	f009 fb2a 	bl	80392e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 802fc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc8e:	b2db      	uxtb	r3, r3
 802fc90:	4619      	mov	r1, r3
 802fc92:	6878      	ldr	r0, [r7, #4]
 802fc94:	f00b fdc1 	bl	803b81a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 802fc98:	693b      	ldr	r3, [r7, #16]
 802fc9a:	f003 0308 	and.w	r3, r3, #8
 802fc9e:	2b00      	cmp	r3, #0
 802fca0:	d008      	beq.n	802fcb4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 802fca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fca4:	015a      	lsls	r2, r3, #5
 802fca6:	69fb      	ldr	r3, [r7, #28]
 802fca8:	4413      	add	r3, r2
 802fcaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fcae:	461a      	mov	r2, r3
 802fcb0:	2308      	movs	r3, #8
 802fcb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 802fcb4:	693b      	ldr	r3, [r7, #16]
 802fcb6:	f003 0310 	and.w	r3, r3, #16
 802fcba:	2b00      	cmp	r3, #0
 802fcbc:	d008      	beq.n	802fcd0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 802fcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fcc0:	015a      	lsls	r2, r3, #5
 802fcc2:	69fb      	ldr	r3, [r7, #28]
 802fcc4:	4413      	add	r3, r2
 802fcc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fcca:	461a      	mov	r2, r3
 802fccc:	2310      	movs	r3, #16
 802fcce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 802fcd0:	693b      	ldr	r3, [r7, #16]
 802fcd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802fcd6:	2b00      	cmp	r3, #0
 802fcd8:	d008      	beq.n	802fcec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 802fcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fcdc:	015a      	lsls	r2, r3, #5
 802fcde:	69fb      	ldr	r3, [r7, #28]
 802fce0:	4413      	add	r3, r2
 802fce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fce6:	461a      	mov	r2, r3
 802fce8:	2340      	movs	r3, #64	; 0x40
 802fcea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 802fcec:	693b      	ldr	r3, [r7, #16]
 802fcee:	f003 0302 	and.w	r3, r3, #2
 802fcf2:	2b00      	cmp	r3, #0
 802fcf4:	d023      	beq.n	802fd3e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 802fcf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fcf8:	6a38      	ldr	r0, [r7, #32]
 802fcfa:	f008 f9fd 	bl	80380f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 802fcfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fd00:	4613      	mov	r3, r2
 802fd02:	00db      	lsls	r3, r3, #3
 802fd04:	4413      	add	r3, r2
 802fd06:	009b      	lsls	r3, r3, #2
 802fd08:	3338      	adds	r3, #56	; 0x38
 802fd0a:	687a      	ldr	r2, [r7, #4]
 802fd0c:	4413      	add	r3, r2
 802fd0e:	3304      	adds	r3, #4
 802fd10:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 802fd12:	697b      	ldr	r3, [r7, #20]
 802fd14:	78db      	ldrb	r3, [r3, #3]
 802fd16:	2b01      	cmp	r3, #1
 802fd18:	d108      	bne.n	802fd2c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 802fd1a:	697b      	ldr	r3, [r7, #20]
 802fd1c:	2200      	movs	r2, #0
 802fd1e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 802fd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fd22:	b2db      	uxtb	r3, r3
 802fd24:	4619      	mov	r1, r3
 802fd26:	6878      	ldr	r0, [r7, #4]
 802fd28:	f00b fe0e 	bl	803b948 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 802fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fd2e:	015a      	lsls	r2, r3, #5
 802fd30:	69fb      	ldr	r3, [r7, #28]
 802fd32:	4413      	add	r3, r2
 802fd34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fd38:	461a      	mov	r2, r3
 802fd3a:	2302      	movs	r3, #2
 802fd3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 802fd3e:	693b      	ldr	r3, [r7, #16]
 802fd40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802fd44:	2b00      	cmp	r3, #0
 802fd46:	d003      	beq.n	802fd50 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 802fd48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fd4a:	6878      	ldr	r0, [r7, #4]
 802fd4c:	f000 fd08 	bl	8030760 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 802fd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fd52:	3301      	adds	r3, #1
 802fd54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802fd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fd58:	085b      	lsrs	r3, r3, #1
 802fd5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 802fd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fd5e:	2b00      	cmp	r3, #0
 802fd60:	f47f af2e 	bne.w	802fbc0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 802fd64:	687b      	ldr	r3, [r7, #4]
 802fd66:	681b      	ldr	r3, [r3, #0]
 802fd68:	4618      	mov	r0, r3
 802fd6a:	f009 f9f3 	bl	8039154 <USB_ReadInterrupts>
 802fd6e:	4603      	mov	r3, r0
 802fd70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802fd74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802fd78:	d122      	bne.n	802fdc0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802fd7a:	69fb      	ldr	r3, [r7, #28]
 802fd7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fd80:	685b      	ldr	r3, [r3, #4]
 802fd82:	69fa      	ldr	r2, [r7, #28]
 802fd84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fd88:	f023 0301 	bic.w	r3, r3, #1
 802fd8c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 802fd8e:	687b      	ldr	r3, [r7, #4]
 802fd90:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802fd94:	2b01      	cmp	r3, #1
 802fd96:	d108      	bne.n	802fdaa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 802fd98:	687b      	ldr	r3, [r7, #4]
 802fd9a:	2200      	movs	r2, #0
 802fd9c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 802fda0:	2100      	movs	r1, #0
 802fda2:	6878      	ldr	r0, [r7, #4]
 802fda4:	f000 ff14 	bl	8030bd0 <HAL_PCDEx_LPM_Callback>
 802fda8:	e002      	b.n	802fdb0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 802fdaa:	6878      	ldr	r0, [r7, #4]
 802fdac:	f00b fdac 	bl	803b908 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 802fdb0:	687b      	ldr	r3, [r7, #4]
 802fdb2:	681b      	ldr	r3, [r3, #0]
 802fdb4:	695a      	ldr	r2, [r3, #20]
 802fdb6:	687b      	ldr	r3, [r7, #4]
 802fdb8:	681b      	ldr	r3, [r3, #0]
 802fdba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802fdbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 802fdc0:	687b      	ldr	r3, [r7, #4]
 802fdc2:	681b      	ldr	r3, [r3, #0]
 802fdc4:	4618      	mov	r0, r3
 802fdc6:	f009 f9c5 	bl	8039154 <USB_ReadInterrupts>
 802fdca:	4603      	mov	r3, r0
 802fdcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802fdd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802fdd4:	d112      	bne.n	802fdfc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 802fdd6:	69fb      	ldr	r3, [r7, #28]
 802fdd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fddc:	689b      	ldr	r3, [r3, #8]
 802fdde:	f003 0301 	and.w	r3, r3, #1
 802fde2:	2b01      	cmp	r3, #1
 802fde4:	d102      	bne.n	802fdec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802fde6:	6878      	ldr	r0, [r7, #4]
 802fde8:	f00b fd68 	bl	803b8bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 802fdec:	687b      	ldr	r3, [r7, #4]
 802fdee:	681b      	ldr	r3, [r3, #0]
 802fdf0:	695a      	ldr	r2, [r3, #20]
 802fdf2:	687b      	ldr	r3, [r7, #4]
 802fdf4:	681b      	ldr	r3, [r3, #0]
 802fdf6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 802fdfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 802fdfc:	687b      	ldr	r3, [r7, #4]
 802fdfe:	681b      	ldr	r3, [r3, #0]
 802fe00:	4618      	mov	r0, r3
 802fe02:	f009 f9a7 	bl	8039154 <USB_ReadInterrupts>
 802fe06:	4603      	mov	r3, r0
 802fe08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802fe0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802fe10:	d121      	bne.n	802fe56 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 802fe12:	687b      	ldr	r3, [r7, #4]
 802fe14:	681b      	ldr	r3, [r3, #0]
 802fe16:	695a      	ldr	r2, [r3, #20]
 802fe18:	687b      	ldr	r3, [r7, #4]
 802fe1a:	681b      	ldr	r3, [r3, #0]
 802fe1c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 802fe20:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 802fe22:	687b      	ldr	r3, [r7, #4]
 802fe24:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802fe28:	2b00      	cmp	r3, #0
 802fe2a:	d111      	bne.n	802fe50 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 802fe2c:	687b      	ldr	r3, [r7, #4]
 802fe2e:	2201      	movs	r2, #1
 802fe30:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 802fe34:	687b      	ldr	r3, [r7, #4]
 802fe36:	681b      	ldr	r3, [r3, #0]
 802fe38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802fe3a:	089b      	lsrs	r3, r3, #2
 802fe3c:	f003 020f 	and.w	r2, r3, #15
 802fe40:	687b      	ldr	r3, [r7, #4]
 802fe42:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 802fe46:	2101      	movs	r1, #1
 802fe48:	6878      	ldr	r0, [r7, #4]
 802fe4a:	f000 fec1 	bl	8030bd0 <HAL_PCDEx_LPM_Callback>
 802fe4e:	e002      	b.n	802fe56 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802fe50:	6878      	ldr	r0, [r7, #4]
 802fe52:	f00b fd33 	bl	803b8bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 802fe56:	687b      	ldr	r3, [r7, #4]
 802fe58:	681b      	ldr	r3, [r3, #0]
 802fe5a:	4618      	mov	r0, r3
 802fe5c:	f009 f97a 	bl	8039154 <USB_ReadInterrupts>
 802fe60:	4603      	mov	r3, r0
 802fe62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802fe66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802fe6a:	f040 80b7 	bne.w	802ffdc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802fe6e:	69fb      	ldr	r3, [r7, #28]
 802fe70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fe74:	685b      	ldr	r3, [r3, #4]
 802fe76:	69fa      	ldr	r2, [r7, #28]
 802fe78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fe7c:	f023 0301 	bic.w	r3, r3, #1
 802fe80:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 802fe82:	687b      	ldr	r3, [r7, #4]
 802fe84:	681b      	ldr	r3, [r3, #0]
 802fe86:	2110      	movs	r1, #16
 802fe88:	4618      	mov	r0, r3
 802fe8a:	f008 f935 	bl	80380f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802fe8e:	2300      	movs	r3, #0
 802fe90:	62fb      	str	r3, [r7, #44]	; 0x2c
 802fe92:	e046      	b.n	802ff22 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 802fe94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fe96:	015a      	lsls	r2, r3, #5
 802fe98:	69fb      	ldr	r3, [r7, #28]
 802fe9a:	4413      	add	r3, r2
 802fe9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fea0:	461a      	mov	r2, r3
 802fea2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802fea6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802fea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802feaa:	015a      	lsls	r2, r3, #5
 802feac:	69fb      	ldr	r3, [r7, #28]
 802feae:	4413      	add	r3, r2
 802feb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802feb4:	681b      	ldr	r3, [r3, #0]
 802feb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802feb8:	0151      	lsls	r1, r2, #5
 802feba:	69fa      	ldr	r2, [r7, #28]
 802febc:	440a      	add	r2, r1
 802febe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802fec6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 802fec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802feca:	015a      	lsls	r2, r3, #5
 802fecc:	69fb      	ldr	r3, [r7, #28]
 802fece:	4413      	add	r3, r2
 802fed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fed4:	461a      	mov	r2, r3
 802fed6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802feda:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802fedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fede:	015a      	lsls	r2, r3, #5
 802fee0:	69fb      	ldr	r3, [r7, #28]
 802fee2:	4413      	add	r3, r2
 802fee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fee8:	681b      	ldr	r3, [r3, #0]
 802feea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802feec:	0151      	lsls	r1, r2, #5
 802feee:	69fa      	ldr	r2, [r7, #28]
 802fef0:	440a      	add	r2, r1
 802fef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802fef6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802fefa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802fefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fefe:	015a      	lsls	r2, r3, #5
 802ff00:	69fb      	ldr	r3, [r7, #28]
 802ff02:	4413      	add	r3, r2
 802ff04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ff08:	681b      	ldr	r3, [r3, #0]
 802ff0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802ff0c:	0151      	lsls	r1, r2, #5
 802ff0e:	69fa      	ldr	r2, [r7, #28]
 802ff10:	440a      	add	r2, r1
 802ff12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ff16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802ff1a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802ff1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ff1e:	3301      	adds	r3, #1
 802ff20:	62fb      	str	r3, [r7, #44]	; 0x2c
 802ff22:	687b      	ldr	r3, [r7, #4]
 802ff24:	685b      	ldr	r3, [r3, #4]
 802ff26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802ff28:	429a      	cmp	r2, r3
 802ff2a:	d3b3      	bcc.n	802fe94 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 802ff2c:	69fb      	ldr	r3, [r7, #28]
 802ff2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff32:	69db      	ldr	r3, [r3, #28]
 802ff34:	69fa      	ldr	r2, [r7, #28]
 802ff36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff3a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 802ff3e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 802ff40:	687b      	ldr	r3, [r7, #4]
 802ff42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ff44:	2b00      	cmp	r3, #0
 802ff46:	d016      	beq.n	802ff76 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 802ff48:	69fb      	ldr	r3, [r7, #28]
 802ff4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802ff52:	69fa      	ldr	r2, [r7, #28]
 802ff54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff58:	f043 030b 	orr.w	r3, r3, #11
 802ff5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 802ff60:	69fb      	ldr	r3, [r7, #28]
 802ff62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ff68:	69fa      	ldr	r2, [r7, #28]
 802ff6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff6e:	f043 030b 	orr.w	r3, r3, #11
 802ff72:	6453      	str	r3, [r2, #68]	; 0x44
 802ff74:	e015      	b.n	802ffa2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 802ff76:	69fb      	ldr	r3, [r7, #28]
 802ff78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff7c:	695a      	ldr	r2, [r3, #20]
 802ff7e:	69fb      	ldr	r3, [r7, #28]
 802ff80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff84:	4619      	mov	r1, r3
 802ff86:	f242 032b 	movw	r3, #8235	; 0x202b
 802ff8a:	4313      	orrs	r3, r2
 802ff8c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 802ff8e:	69fb      	ldr	r3, [r7, #28]
 802ff90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff94:	691b      	ldr	r3, [r3, #16]
 802ff96:	69fa      	ldr	r2, [r7, #28]
 802ff98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff9c:	f043 030b 	orr.w	r3, r3, #11
 802ffa0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 802ffa2:	69fb      	ldr	r3, [r7, #28]
 802ffa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ffa8:	681b      	ldr	r3, [r3, #0]
 802ffaa:	69fa      	ldr	r2, [r7, #28]
 802ffac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ffb0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802ffb4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 802ffb6:	687b      	ldr	r3, [r7, #4]
 802ffb8:	6818      	ldr	r0, [r3, #0]
 802ffba:	687b      	ldr	r3, [r7, #4]
 802ffbc:	691b      	ldr	r3, [r3, #16]
 802ffbe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 802ffc0:	687b      	ldr	r3, [r7, #4]
 802ffc2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 802ffc6:	461a      	mov	r2, r3
 802ffc8:	f009 f98a 	bl	80392e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 802ffcc:	687b      	ldr	r3, [r7, #4]
 802ffce:	681b      	ldr	r3, [r3, #0]
 802ffd0:	695a      	ldr	r2, [r3, #20]
 802ffd2:	687b      	ldr	r3, [r7, #4]
 802ffd4:	681b      	ldr	r3, [r3, #0]
 802ffd6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 802ffda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 802ffdc:	687b      	ldr	r3, [r7, #4]
 802ffde:	681b      	ldr	r3, [r3, #0]
 802ffe0:	4618      	mov	r0, r3
 802ffe2:	f009 f8b7 	bl	8039154 <USB_ReadInterrupts>
 802ffe6:	4603      	mov	r3, r0
 802ffe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802ffec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802fff0:	d124      	bne.n	803003c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 802fff2:	687b      	ldr	r3, [r7, #4]
 802fff4:	681b      	ldr	r3, [r3, #0]
 802fff6:	4618      	mov	r0, r3
 802fff8:	f009 f94e 	bl	8039298 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 802fffc:	687b      	ldr	r3, [r7, #4]
 802fffe:	681b      	ldr	r3, [r3, #0]
 8030000:	4618      	mov	r0, r3
 8030002:	f008 f8f6 	bl	80381f2 <USB_GetDevSpeed>
 8030006:	4603      	mov	r3, r0
 8030008:	461a      	mov	r2, r3
 803000a:	687b      	ldr	r3, [r7, #4]
 803000c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 803000e:	687b      	ldr	r3, [r7, #4]
 8030010:	681c      	ldr	r4, [r3, #0]
 8030012:	f001 fd91 	bl	8031b38 <HAL_RCC_GetHCLKFreq>
 8030016:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8030018:	687b      	ldr	r3, [r7, #4]
 803001a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 803001c:	b2db      	uxtb	r3, r3
 803001e:	461a      	mov	r2, r3
 8030020:	4620      	mov	r0, r4
 8030022:	f007 fdfb 	bl	8037c1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8030026:	6878      	ldr	r0, [r7, #4]
 8030028:	f00b fc1f 	bl	803b86a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 803002c:	687b      	ldr	r3, [r7, #4]
 803002e:	681b      	ldr	r3, [r3, #0]
 8030030:	695a      	ldr	r2, [r3, #20]
 8030032:	687b      	ldr	r3, [r7, #4]
 8030034:	681b      	ldr	r3, [r3, #0]
 8030036:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 803003a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 803003c:	687b      	ldr	r3, [r7, #4]
 803003e:	681b      	ldr	r3, [r3, #0]
 8030040:	4618      	mov	r0, r3
 8030042:	f009 f887 	bl	8039154 <USB_ReadInterrupts>
 8030046:	4603      	mov	r3, r0
 8030048:	f003 0308 	and.w	r3, r3, #8
 803004c:	2b08      	cmp	r3, #8
 803004e:	d10a      	bne.n	8030066 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8030050:	6878      	ldr	r0, [r7, #4]
 8030052:	f00b fbfc 	bl	803b84e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8030056:	687b      	ldr	r3, [r7, #4]
 8030058:	681b      	ldr	r3, [r3, #0]
 803005a:	695a      	ldr	r2, [r3, #20]
 803005c:	687b      	ldr	r3, [r7, #4]
 803005e:	681b      	ldr	r3, [r3, #0]
 8030060:	f002 0208 	and.w	r2, r2, #8
 8030064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8030066:	687b      	ldr	r3, [r7, #4]
 8030068:	681b      	ldr	r3, [r3, #0]
 803006a:	4618      	mov	r0, r3
 803006c:	f009 f872 	bl	8039154 <USB_ReadInterrupts>
 8030070:	4603      	mov	r3, r0
 8030072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8030076:	2b80      	cmp	r3, #128	; 0x80
 8030078:	d122      	bne.n	80300c0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 803007a:	6a3b      	ldr	r3, [r7, #32]
 803007c:	699b      	ldr	r3, [r3, #24]
 803007e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8030082:	6a3b      	ldr	r3, [r7, #32]
 8030084:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8030086:	2301      	movs	r3, #1
 8030088:	627b      	str	r3, [r7, #36]	; 0x24
 803008a:	e014      	b.n	80300b6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 803008c:	6879      	ldr	r1, [r7, #4]
 803008e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030090:	4613      	mov	r3, r2
 8030092:	00db      	lsls	r3, r3, #3
 8030094:	4413      	add	r3, r2
 8030096:	009b      	lsls	r3, r3, #2
 8030098:	440b      	add	r3, r1
 803009a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 803009e:	781b      	ldrb	r3, [r3, #0]
 80300a0:	2b01      	cmp	r3, #1
 80300a2:	d105      	bne.n	80300b0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80300a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80300a6:	b2db      	uxtb	r3, r3
 80300a8:	4619      	mov	r1, r3
 80300aa:	6878      	ldr	r0, [r7, #4]
 80300ac:	f000 fb27 	bl	80306fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80300b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80300b2:	3301      	adds	r3, #1
 80300b4:	627b      	str	r3, [r7, #36]	; 0x24
 80300b6:	687b      	ldr	r3, [r7, #4]
 80300b8:	685b      	ldr	r3, [r3, #4]
 80300ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80300bc:	429a      	cmp	r2, r3
 80300be:	d3e5      	bcc.n	803008c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80300c0:	687b      	ldr	r3, [r7, #4]
 80300c2:	681b      	ldr	r3, [r3, #0]
 80300c4:	4618      	mov	r0, r3
 80300c6:	f009 f845 	bl	8039154 <USB_ReadInterrupts>
 80300ca:	4603      	mov	r3, r0
 80300cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80300d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80300d4:	d13b      	bne.n	803014e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80300d6:	2301      	movs	r3, #1
 80300d8:	627b      	str	r3, [r7, #36]	; 0x24
 80300da:	e02b      	b.n	8030134 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80300dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80300de:	015a      	lsls	r2, r3, #5
 80300e0:	69fb      	ldr	r3, [r7, #28]
 80300e2:	4413      	add	r3, r2
 80300e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80300e8:	681b      	ldr	r3, [r3, #0]
 80300ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80300ec:	6879      	ldr	r1, [r7, #4]
 80300ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80300f0:	4613      	mov	r3, r2
 80300f2:	00db      	lsls	r3, r3, #3
 80300f4:	4413      	add	r3, r2
 80300f6:	009b      	lsls	r3, r3, #2
 80300f8:	440b      	add	r3, r1
 80300fa:	3340      	adds	r3, #64	; 0x40
 80300fc:	781b      	ldrb	r3, [r3, #0]
 80300fe:	2b01      	cmp	r3, #1
 8030100:	d115      	bne.n	803012e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8030102:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8030104:	2b00      	cmp	r3, #0
 8030106:	da12      	bge.n	803012e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8030108:	6879      	ldr	r1, [r7, #4]
 803010a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803010c:	4613      	mov	r3, r2
 803010e:	00db      	lsls	r3, r3, #3
 8030110:	4413      	add	r3, r2
 8030112:	009b      	lsls	r3, r3, #2
 8030114:	440b      	add	r3, r1
 8030116:	333f      	adds	r3, #63	; 0x3f
 8030118:	2201      	movs	r2, #1
 803011a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 803011c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803011e:	b2db      	uxtb	r3, r3
 8030120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8030124:	b2db      	uxtb	r3, r3
 8030126:	4619      	mov	r1, r3
 8030128:	6878      	ldr	r0, [r7, #4]
 803012a:	f000 fae8 	bl	80306fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803012e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030130:	3301      	adds	r3, #1
 8030132:	627b      	str	r3, [r7, #36]	; 0x24
 8030134:	687b      	ldr	r3, [r7, #4]
 8030136:	685b      	ldr	r3, [r3, #4]
 8030138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803013a:	429a      	cmp	r2, r3
 803013c:	d3ce      	bcc.n	80300dc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 803013e:	687b      	ldr	r3, [r7, #4]
 8030140:	681b      	ldr	r3, [r3, #0]
 8030142:	695a      	ldr	r2, [r3, #20]
 8030144:	687b      	ldr	r3, [r7, #4]
 8030146:	681b      	ldr	r3, [r3, #0]
 8030148:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 803014c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 803014e:	687b      	ldr	r3, [r7, #4]
 8030150:	681b      	ldr	r3, [r3, #0]
 8030152:	4618      	mov	r0, r3
 8030154:	f008 fffe 	bl	8039154 <USB_ReadInterrupts>
 8030158:	4603      	mov	r3, r0
 803015a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 803015e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8030162:	d155      	bne.n	8030210 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8030164:	2301      	movs	r3, #1
 8030166:	627b      	str	r3, [r7, #36]	; 0x24
 8030168:	e045      	b.n	80301f6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 803016a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803016c:	015a      	lsls	r2, r3, #5
 803016e:	69fb      	ldr	r3, [r7, #28]
 8030170:	4413      	add	r3, r2
 8030172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030176:	681b      	ldr	r3, [r3, #0]
 8030178:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 803017a:	6879      	ldr	r1, [r7, #4]
 803017c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803017e:	4613      	mov	r3, r2
 8030180:	00db      	lsls	r3, r3, #3
 8030182:	4413      	add	r3, r2
 8030184:	009b      	lsls	r3, r3, #2
 8030186:	440b      	add	r3, r1
 8030188:	f503 7320 	add.w	r3, r3, #640	; 0x280
 803018c:	781b      	ldrb	r3, [r3, #0]
 803018e:	2b01      	cmp	r3, #1
 8030190:	d12e      	bne.n	80301f0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8030192:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8030194:	2b00      	cmp	r3, #0
 8030196:	da2b      	bge.n	80301f0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8030198:	69bb      	ldr	r3, [r7, #24]
 803019a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 803019e:	687b      	ldr	r3, [r7, #4]
 80301a0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80301a4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80301a8:	429a      	cmp	r2, r3
 80301aa:	d121      	bne.n	80301f0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80301ac:	6879      	ldr	r1, [r7, #4]
 80301ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80301b0:	4613      	mov	r3, r2
 80301b2:	00db      	lsls	r3, r3, #3
 80301b4:	4413      	add	r3, r2
 80301b6:	009b      	lsls	r3, r3, #2
 80301b8:	440b      	add	r3, r1
 80301ba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80301be:	2201      	movs	r2, #1
 80301c0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80301c2:	6a3b      	ldr	r3, [r7, #32]
 80301c4:	699b      	ldr	r3, [r3, #24]
 80301c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80301ca:	6a3b      	ldr	r3, [r7, #32]
 80301cc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80301ce:	6a3b      	ldr	r3, [r7, #32]
 80301d0:	695b      	ldr	r3, [r3, #20]
 80301d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80301d6:	2b00      	cmp	r3, #0
 80301d8:	d10a      	bne.n	80301f0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80301da:	69fb      	ldr	r3, [r7, #28]
 80301dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80301e0:	685b      	ldr	r3, [r3, #4]
 80301e2:	69fa      	ldr	r2, [r7, #28]
 80301e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80301e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80301ec:	6053      	str	r3, [r2, #4]
            break;
 80301ee:	e007      	b.n	8030200 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80301f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80301f2:	3301      	adds	r3, #1
 80301f4:	627b      	str	r3, [r7, #36]	; 0x24
 80301f6:	687b      	ldr	r3, [r7, #4]
 80301f8:	685b      	ldr	r3, [r3, #4]
 80301fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80301fc:	429a      	cmp	r2, r3
 80301fe:	d3b4      	bcc.n	803016a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8030200:	687b      	ldr	r3, [r7, #4]
 8030202:	681b      	ldr	r3, [r3, #0]
 8030204:	695a      	ldr	r2, [r3, #20]
 8030206:	687b      	ldr	r3, [r7, #4]
 8030208:	681b      	ldr	r3, [r3, #0]
 803020a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 803020e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8030210:	687b      	ldr	r3, [r7, #4]
 8030212:	681b      	ldr	r3, [r3, #0]
 8030214:	4618      	mov	r0, r3
 8030216:	f008 ff9d 	bl	8039154 <USB_ReadInterrupts>
 803021a:	4603      	mov	r3, r0
 803021c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8030220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8030224:	d10a      	bne.n	803023c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8030226:	6878      	ldr	r0, [r7, #4]
 8030228:	f00b fba0 	bl	803b96c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 803022c:	687b      	ldr	r3, [r7, #4]
 803022e:	681b      	ldr	r3, [r3, #0]
 8030230:	695a      	ldr	r2, [r3, #20]
 8030232:	687b      	ldr	r3, [r7, #4]
 8030234:	681b      	ldr	r3, [r3, #0]
 8030236:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 803023a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 803023c:	687b      	ldr	r3, [r7, #4]
 803023e:	681b      	ldr	r3, [r3, #0]
 8030240:	4618      	mov	r0, r3
 8030242:	f008 ff87 	bl	8039154 <USB_ReadInterrupts>
 8030246:	4603      	mov	r3, r0
 8030248:	f003 0304 	and.w	r3, r3, #4
 803024c:	2b04      	cmp	r3, #4
 803024e:	d115      	bne.n	803027c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8030250:	687b      	ldr	r3, [r7, #4]
 8030252:	681b      	ldr	r3, [r3, #0]
 8030254:	685b      	ldr	r3, [r3, #4]
 8030256:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8030258:	69bb      	ldr	r3, [r7, #24]
 803025a:	f003 0304 	and.w	r3, r3, #4
 803025e:	2b00      	cmp	r3, #0
 8030260:	d002      	beq.n	8030268 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8030262:	6878      	ldr	r0, [r7, #4]
 8030264:	f00b fb90 	bl	803b988 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8030268:	687b      	ldr	r3, [r7, #4]
 803026a:	681b      	ldr	r3, [r3, #0]
 803026c:	6859      	ldr	r1, [r3, #4]
 803026e:	687b      	ldr	r3, [r7, #4]
 8030270:	681b      	ldr	r3, [r3, #0]
 8030272:	69ba      	ldr	r2, [r7, #24]
 8030274:	430a      	orrs	r2, r1
 8030276:	605a      	str	r2, [r3, #4]
 8030278:	e000      	b.n	803027c <HAL_PCD_IRQHandler+0x992>
      return;
 803027a:	bf00      	nop
    }
  }
}
 803027c:	3734      	adds	r7, #52	; 0x34
 803027e:	46bd      	mov	sp, r7
 8030280:	bd90      	pop	{r4, r7, pc}

08030282 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8030282:	b580      	push	{r7, lr}
 8030284:	b082      	sub	sp, #8
 8030286:	af00      	add	r7, sp, #0
 8030288:	6078      	str	r0, [r7, #4]
 803028a:	460b      	mov	r3, r1
 803028c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 803028e:	687b      	ldr	r3, [r7, #4]
 8030290:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8030294:	2b01      	cmp	r3, #1
 8030296:	d101      	bne.n	803029c <HAL_PCD_SetAddress+0x1a>
 8030298:	2302      	movs	r3, #2
 803029a:	e013      	b.n	80302c4 <HAL_PCD_SetAddress+0x42>
 803029c:	687b      	ldr	r3, [r7, #4]
 803029e:	2201      	movs	r2, #1
 80302a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80302a4:	687b      	ldr	r3, [r7, #4]
 80302a6:	78fa      	ldrb	r2, [r7, #3]
 80302a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80302ac:	687b      	ldr	r3, [r7, #4]
 80302ae:	681b      	ldr	r3, [r3, #0]
 80302b0:	78fa      	ldrb	r2, [r7, #3]
 80302b2:	4611      	mov	r1, r2
 80302b4:	4618      	mov	r0, r3
 80302b6:	f008 fee5 	bl	8039084 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80302ba:	687b      	ldr	r3, [r7, #4]
 80302bc:	2200      	movs	r2, #0
 80302be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80302c2:	2300      	movs	r3, #0
}
 80302c4:	4618      	mov	r0, r3
 80302c6:	3708      	adds	r7, #8
 80302c8:	46bd      	mov	sp, r7
 80302ca:	bd80      	pop	{r7, pc}

080302cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80302cc:	b580      	push	{r7, lr}
 80302ce:	b084      	sub	sp, #16
 80302d0:	af00      	add	r7, sp, #0
 80302d2:	6078      	str	r0, [r7, #4]
 80302d4:	4608      	mov	r0, r1
 80302d6:	4611      	mov	r1, r2
 80302d8:	461a      	mov	r2, r3
 80302da:	4603      	mov	r3, r0
 80302dc:	70fb      	strb	r3, [r7, #3]
 80302de:	460b      	mov	r3, r1
 80302e0:	803b      	strh	r3, [r7, #0]
 80302e2:	4613      	mov	r3, r2
 80302e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80302e6:	2300      	movs	r3, #0
 80302e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80302ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80302ee:	2b00      	cmp	r3, #0
 80302f0:	da0f      	bge.n	8030312 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80302f2:	78fb      	ldrb	r3, [r7, #3]
 80302f4:	f003 020f 	and.w	r2, r3, #15
 80302f8:	4613      	mov	r3, r2
 80302fa:	00db      	lsls	r3, r3, #3
 80302fc:	4413      	add	r3, r2
 80302fe:	009b      	lsls	r3, r3, #2
 8030300:	3338      	adds	r3, #56	; 0x38
 8030302:	687a      	ldr	r2, [r7, #4]
 8030304:	4413      	add	r3, r2
 8030306:	3304      	adds	r3, #4
 8030308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 803030a:	68fb      	ldr	r3, [r7, #12]
 803030c:	2201      	movs	r2, #1
 803030e:	705a      	strb	r2, [r3, #1]
 8030310:	e00f      	b.n	8030332 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8030312:	78fb      	ldrb	r3, [r7, #3]
 8030314:	f003 020f 	and.w	r2, r3, #15
 8030318:	4613      	mov	r3, r2
 803031a:	00db      	lsls	r3, r3, #3
 803031c:	4413      	add	r3, r2
 803031e:	009b      	lsls	r3, r3, #2
 8030320:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030324:	687a      	ldr	r2, [r7, #4]
 8030326:	4413      	add	r3, r2
 8030328:	3304      	adds	r3, #4
 803032a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 803032c:	68fb      	ldr	r3, [r7, #12]
 803032e:	2200      	movs	r2, #0
 8030330:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8030332:	78fb      	ldrb	r3, [r7, #3]
 8030334:	f003 030f 	and.w	r3, r3, #15
 8030338:	b2da      	uxtb	r2, r3
 803033a:	68fb      	ldr	r3, [r7, #12]
 803033c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 803033e:	883a      	ldrh	r2, [r7, #0]
 8030340:	68fb      	ldr	r3, [r7, #12]
 8030342:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8030344:	68fb      	ldr	r3, [r7, #12]
 8030346:	78ba      	ldrb	r2, [r7, #2]
 8030348:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 803034a:	68fb      	ldr	r3, [r7, #12]
 803034c:	785b      	ldrb	r3, [r3, #1]
 803034e:	2b00      	cmp	r3, #0
 8030350:	d004      	beq.n	803035c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8030352:	68fb      	ldr	r3, [r7, #12]
 8030354:	781b      	ldrb	r3, [r3, #0]
 8030356:	b29a      	uxth	r2, r3
 8030358:	68fb      	ldr	r3, [r7, #12]
 803035a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 803035c:	78bb      	ldrb	r3, [r7, #2]
 803035e:	2b02      	cmp	r3, #2
 8030360:	d102      	bne.n	8030368 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8030362:	68fb      	ldr	r3, [r7, #12]
 8030364:	2200      	movs	r2, #0
 8030366:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8030368:	687b      	ldr	r3, [r7, #4]
 803036a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 803036e:	2b01      	cmp	r3, #1
 8030370:	d101      	bne.n	8030376 <HAL_PCD_EP_Open+0xaa>
 8030372:	2302      	movs	r3, #2
 8030374:	e00e      	b.n	8030394 <HAL_PCD_EP_Open+0xc8>
 8030376:	687b      	ldr	r3, [r7, #4]
 8030378:	2201      	movs	r2, #1
 803037a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 803037e:	687b      	ldr	r3, [r7, #4]
 8030380:	681b      	ldr	r3, [r3, #0]
 8030382:	68f9      	ldr	r1, [r7, #12]
 8030384:	4618      	mov	r0, r3
 8030386:	f007 ff59 	bl	803823c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 803038a:	687b      	ldr	r3, [r7, #4]
 803038c:	2200      	movs	r2, #0
 803038e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8030392:	7afb      	ldrb	r3, [r7, #11]
}
 8030394:	4618      	mov	r0, r3
 8030396:	3710      	adds	r7, #16
 8030398:	46bd      	mov	sp, r7
 803039a:	bd80      	pop	{r7, pc}

0803039c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 803039c:	b580      	push	{r7, lr}
 803039e:	b084      	sub	sp, #16
 80303a0:	af00      	add	r7, sp, #0
 80303a2:	6078      	str	r0, [r7, #4]
 80303a4:	460b      	mov	r3, r1
 80303a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80303a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80303ac:	2b00      	cmp	r3, #0
 80303ae:	da0f      	bge.n	80303d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80303b0:	78fb      	ldrb	r3, [r7, #3]
 80303b2:	f003 020f 	and.w	r2, r3, #15
 80303b6:	4613      	mov	r3, r2
 80303b8:	00db      	lsls	r3, r3, #3
 80303ba:	4413      	add	r3, r2
 80303bc:	009b      	lsls	r3, r3, #2
 80303be:	3338      	adds	r3, #56	; 0x38
 80303c0:	687a      	ldr	r2, [r7, #4]
 80303c2:	4413      	add	r3, r2
 80303c4:	3304      	adds	r3, #4
 80303c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80303c8:	68fb      	ldr	r3, [r7, #12]
 80303ca:	2201      	movs	r2, #1
 80303cc:	705a      	strb	r2, [r3, #1]
 80303ce:	e00f      	b.n	80303f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80303d0:	78fb      	ldrb	r3, [r7, #3]
 80303d2:	f003 020f 	and.w	r2, r3, #15
 80303d6:	4613      	mov	r3, r2
 80303d8:	00db      	lsls	r3, r3, #3
 80303da:	4413      	add	r3, r2
 80303dc:	009b      	lsls	r3, r3, #2
 80303de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80303e2:	687a      	ldr	r2, [r7, #4]
 80303e4:	4413      	add	r3, r2
 80303e6:	3304      	adds	r3, #4
 80303e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80303ea:	68fb      	ldr	r3, [r7, #12]
 80303ec:	2200      	movs	r2, #0
 80303ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80303f0:	78fb      	ldrb	r3, [r7, #3]
 80303f2:	f003 030f 	and.w	r3, r3, #15
 80303f6:	b2da      	uxtb	r2, r3
 80303f8:	68fb      	ldr	r3, [r7, #12]
 80303fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80303fc:	687b      	ldr	r3, [r7, #4]
 80303fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8030402:	2b01      	cmp	r3, #1
 8030404:	d101      	bne.n	803040a <HAL_PCD_EP_Close+0x6e>
 8030406:	2302      	movs	r3, #2
 8030408:	e00e      	b.n	8030428 <HAL_PCD_EP_Close+0x8c>
 803040a:	687b      	ldr	r3, [r7, #4]
 803040c:	2201      	movs	r2, #1
 803040e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8030412:	687b      	ldr	r3, [r7, #4]
 8030414:	681b      	ldr	r3, [r3, #0]
 8030416:	68f9      	ldr	r1, [r7, #12]
 8030418:	4618      	mov	r0, r3
 803041a:	f007 ff97 	bl	803834c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 803041e:	687b      	ldr	r3, [r7, #4]
 8030420:	2200      	movs	r2, #0
 8030422:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8030426:	2300      	movs	r3, #0
}
 8030428:	4618      	mov	r0, r3
 803042a:	3710      	adds	r7, #16
 803042c:	46bd      	mov	sp, r7
 803042e:	bd80      	pop	{r7, pc}

08030430 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8030430:	b580      	push	{r7, lr}
 8030432:	b086      	sub	sp, #24
 8030434:	af00      	add	r7, sp, #0
 8030436:	60f8      	str	r0, [r7, #12]
 8030438:	607a      	str	r2, [r7, #4]
 803043a:	603b      	str	r3, [r7, #0]
 803043c:	460b      	mov	r3, r1
 803043e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8030440:	7afb      	ldrb	r3, [r7, #11]
 8030442:	f003 020f 	and.w	r2, r3, #15
 8030446:	4613      	mov	r3, r2
 8030448:	00db      	lsls	r3, r3, #3
 803044a:	4413      	add	r3, r2
 803044c:	009b      	lsls	r3, r3, #2
 803044e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030452:	68fa      	ldr	r2, [r7, #12]
 8030454:	4413      	add	r3, r2
 8030456:	3304      	adds	r3, #4
 8030458:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 803045a:	697b      	ldr	r3, [r7, #20]
 803045c:	687a      	ldr	r2, [r7, #4]
 803045e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8030460:	697b      	ldr	r3, [r7, #20]
 8030462:	683a      	ldr	r2, [r7, #0]
 8030464:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8030466:	697b      	ldr	r3, [r7, #20]
 8030468:	2200      	movs	r2, #0
 803046a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 803046c:	697b      	ldr	r3, [r7, #20]
 803046e:	2200      	movs	r2, #0
 8030470:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8030472:	7afb      	ldrb	r3, [r7, #11]
 8030474:	f003 030f 	and.w	r3, r3, #15
 8030478:	b2da      	uxtb	r2, r3
 803047a:	697b      	ldr	r3, [r7, #20]
 803047c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 803047e:	68fb      	ldr	r3, [r7, #12]
 8030480:	691b      	ldr	r3, [r3, #16]
 8030482:	2b01      	cmp	r3, #1
 8030484:	d102      	bne.n	803048c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8030486:	687a      	ldr	r2, [r7, #4]
 8030488:	697b      	ldr	r3, [r7, #20]
 803048a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 803048c:	7afb      	ldrb	r3, [r7, #11]
 803048e:	f003 030f 	and.w	r3, r3, #15
 8030492:	2b00      	cmp	r3, #0
 8030494:	d109      	bne.n	80304aa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8030496:	68fb      	ldr	r3, [r7, #12]
 8030498:	6818      	ldr	r0, [r3, #0]
 803049a:	68fb      	ldr	r3, [r7, #12]
 803049c:	691b      	ldr	r3, [r3, #16]
 803049e:	b2db      	uxtb	r3, r3
 80304a0:	461a      	mov	r2, r3
 80304a2:	6979      	ldr	r1, [r7, #20]
 80304a4:	f008 fa7e 	bl	80389a4 <USB_EP0StartXfer>
 80304a8:	e008      	b.n	80304bc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80304aa:	68fb      	ldr	r3, [r7, #12]
 80304ac:	6818      	ldr	r0, [r3, #0]
 80304ae:	68fb      	ldr	r3, [r7, #12]
 80304b0:	691b      	ldr	r3, [r3, #16]
 80304b2:	b2db      	uxtb	r3, r3
 80304b4:	461a      	mov	r2, r3
 80304b6:	6979      	ldr	r1, [r7, #20]
 80304b8:	f008 f824 	bl	8038504 <USB_EPStartXfer>
  }

  return HAL_OK;
 80304bc:	2300      	movs	r3, #0
}
 80304be:	4618      	mov	r0, r3
 80304c0:	3718      	adds	r7, #24
 80304c2:	46bd      	mov	sp, r7
 80304c4:	bd80      	pop	{r7, pc}

080304c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80304c6:	b480      	push	{r7}
 80304c8:	b083      	sub	sp, #12
 80304ca:	af00      	add	r7, sp, #0
 80304cc:	6078      	str	r0, [r7, #4]
 80304ce:	460b      	mov	r3, r1
 80304d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80304d2:	78fb      	ldrb	r3, [r7, #3]
 80304d4:	f003 020f 	and.w	r2, r3, #15
 80304d8:	6879      	ldr	r1, [r7, #4]
 80304da:	4613      	mov	r3, r2
 80304dc:	00db      	lsls	r3, r3, #3
 80304de:	4413      	add	r3, r2
 80304e0:	009b      	lsls	r3, r3, #2
 80304e2:	440b      	add	r3, r1
 80304e4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80304e8:	681b      	ldr	r3, [r3, #0]
}
 80304ea:	4618      	mov	r0, r3
 80304ec:	370c      	adds	r7, #12
 80304ee:	46bd      	mov	sp, r7
 80304f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80304f4:	4770      	bx	lr

080304f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80304f6:	b580      	push	{r7, lr}
 80304f8:	b086      	sub	sp, #24
 80304fa:	af00      	add	r7, sp, #0
 80304fc:	60f8      	str	r0, [r7, #12]
 80304fe:	607a      	str	r2, [r7, #4]
 8030500:	603b      	str	r3, [r7, #0]
 8030502:	460b      	mov	r3, r1
 8030504:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8030506:	7afb      	ldrb	r3, [r7, #11]
 8030508:	f003 020f 	and.w	r2, r3, #15
 803050c:	4613      	mov	r3, r2
 803050e:	00db      	lsls	r3, r3, #3
 8030510:	4413      	add	r3, r2
 8030512:	009b      	lsls	r3, r3, #2
 8030514:	3338      	adds	r3, #56	; 0x38
 8030516:	68fa      	ldr	r2, [r7, #12]
 8030518:	4413      	add	r3, r2
 803051a:	3304      	adds	r3, #4
 803051c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 803051e:	697b      	ldr	r3, [r7, #20]
 8030520:	687a      	ldr	r2, [r7, #4]
 8030522:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8030524:	697b      	ldr	r3, [r7, #20]
 8030526:	683a      	ldr	r2, [r7, #0]
 8030528:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 803052a:	697b      	ldr	r3, [r7, #20]
 803052c:	2200      	movs	r2, #0
 803052e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8030530:	697b      	ldr	r3, [r7, #20]
 8030532:	2201      	movs	r2, #1
 8030534:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8030536:	7afb      	ldrb	r3, [r7, #11]
 8030538:	f003 030f 	and.w	r3, r3, #15
 803053c:	b2da      	uxtb	r2, r3
 803053e:	697b      	ldr	r3, [r7, #20]
 8030540:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8030542:	68fb      	ldr	r3, [r7, #12]
 8030544:	691b      	ldr	r3, [r3, #16]
 8030546:	2b01      	cmp	r3, #1
 8030548:	d102      	bne.n	8030550 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 803054a:	687a      	ldr	r2, [r7, #4]
 803054c:	697b      	ldr	r3, [r7, #20]
 803054e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8030550:	7afb      	ldrb	r3, [r7, #11]
 8030552:	f003 030f 	and.w	r3, r3, #15
 8030556:	2b00      	cmp	r3, #0
 8030558:	d109      	bne.n	803056e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 803055a:	68fb      	ldr	r3, [r7, #12]
 803055c:	6818      	ldr	r0, [r3, #0]
 803055e:	68fb      	ldr	r3, [r7, #12]
 8030560:	691b      	ldr	r3, [r3, #16]
 8030562:	b2db      	uxtb	r3, r3
 8030564:	461a      	mov	r2, r3
 8030566:	6979      	ldr	r1, [r7, #20]
 8030568:	f008 fa1c 	bl	80389a4 <USB_EP0StartXfer>
 803056c:	e008      	b.n	8030580 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 803056e:	68fb      	ldr	r3, [r7, #12]
 8030570:	6818      	ldr	r0, [r3, #0]
 8030572:	68fb      	ldr	r3, [r7, #12]
 8030574:	691b      	ldr	r3, [r3, #16]
 8030576:	b2db      	uxtb	r3, r3
 8030578:	461a      	mov	r2, r3
 803057a:	6979      	ldr	r1, [r7, #20]
 803057c:	f007 ffc2 	bl	8038504 <USB_EPStartXfer>
  }

  return HAL_OK;
 8030580:	2300      	movs	r3, #0
}
 8030582:	4618      	mov	r0, r3
 8030584:	3718      	adds	r7, #24
 8030586:	46bd      	mov	sp, r7
 8030588:	bd80      	pop	{r7, pc}

0803058a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 803058a:	b580      	push	{r7, lr}
 803058c:	b084      	sub	sp, #16
 803058e:	af00      	add	r7, sp, #0
 8030590:	6078      	str	r0, [r7, #4]
 8030592:	460b      	mov	r3, r1
 8030594:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8030596:	78fb      	ldrb	r3, [r7, #3]
 8030598:	f003 020f 	and.w	r2, r3, #15
 803059c:	687b      	ldr	r3, [r7, #4]
 803059e:	685b      	ldr	r3, [r3, #4]
 80305a0:	429a      	cmp	r2, r3
 80305a2:	d901      	bls.n	80305a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80305a4:	2301      	movs	r3, #1
 80305a6:	e050      	b.n	803064a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80305a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80305ac:	2b00      	cmp	r3, #0
 80305ae:	da0f      	bge.n	80305d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80305b0:	78fb      	ldrb	r3, [r7, #3]
 80305b2:	f003 020f 	and.w	r2, r3, #15
 80305b6:	4613      	mov	r3, r2
 80305b8:	00db      	lsls	r3, r3, #3
 80305ba:	4413      	add	r3, r2
 80305bc:	009b      	lsls	r3, r3, #2
 80305be:	3338      	adds	r3, #56	; 0x38
 80305c0:	687a      	ldr	r2, [r7, #4]
 80305c2:	4413      	add	r3, r2
 80305c4:	3304      	adds	r3, #4
 80305c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80305c8:	68fb      	ldr	r3, [r7, #12]
 80305ca:	2201      	movs	r2, #1
 80305cc:	705a      	strb	r2, [r3, #1]
 80305ce:	e00d      	b.n	80305ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80305d0:	78fa      	ldrb	r2, [r7, #3]
 80305d2:	4613      	mov	r3, r2
 80305d4:	00db      	lsls	r3, r3, #3
 80305d6:	4413      	add	r3, r2
 80305d8:	009b      	lsls	r3, r3, #2
 80305da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80305de:	687a      	ldr	r2, [r7, #4]
 80305e0:	4413      	add	r3, r2
 80305e2:	3304      	adds	r3, #4
 80305e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80305e6:	68fb      	ldr	r3, [r7, #12]
 80305e8:	2200      	movs	r2, #0
 80305ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80305ec:	68fb      	ldr	r3, [r7, #12]
 80305ee:	2201      	movs	r2, #1
 80305f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80305f2:	78fb      	ldrb	r3, [r7, #3]
 80305f4:	f003 030f 	and.w	r3, r3, #15
 80305f8:	b2da      	uxtb	r2, r3
 80305fa:	68fb      	ldr	r3, [r7, #12]
 80305fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80305fe:	687b      	ldr	r3, [r7, #4]
 8030600:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8030604:	2b01      	cmp	r3, #1
 8030606:	d101      	bne.n	803060c <HAL_PCD_EP_SetStall+0x82>
 8030608:	2302      	movs	r3, #2
 803060a:	e01e      	b.n	803064a <HAL_PCD_EP_SetStall+0xc0>
 803060c:	687b      	ldr	r3, [r7, #4]
 803060e:	2201      	movs	r2, #1
 8030610:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8030614:	687b      	ldr	r3, [r7, #4]
 8030616:	681b      	ldr	r3, [r3, #0]
 8030618:	68f9      	ldr	r1, [r7, #12]
 803061a:	4618      	mov	r0, r3
 803061c:	f008 fc5e 	bl	8038edc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8030620:	78fb      	ldrb	r3, [r7, #3]
 8030622:	f003 030f 	and.w	r3, r3, #15
 8030626:	2b00      	cmp	r3, #0
 8030628:	d10a      	bne.n	8030640 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 803062a:	687b      	ldr	r3, [r7, #4]
 803062c:	6818      	ldr	r0, [r3, #0]
 803062e:	687b      	ldr	r3, [r7, #4]
 8030630:	691b      	ldr	r3, [r3, #16]
 8030632:	b2d9      	uxtb	r1, r3
 8030634:	687b      	ldr	r3, [r7, #4]
 8030636:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803063a:	461a      	mov	r2, r3
 803063c:	f008 fe50 	bl	80392e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8030640:	687b      	ldr	r3, [r7, #4]
 8030642:	2200      	movs	r2, #0
 8030644:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8030648:	2300      	movs	r3, #0
}
 803064a:	4618      	mov	r0, r3
 803064c:	3710      	adds	r7, #16
 803064e:	46bd      	mov	sp, r7
 8030650:	bd80      	pop	{r7, pc}

08030652 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8030652:	b580      	push	{r7, lr}
 8030654:	b084      	sub	sp, #16
 8030656:	af00      	add	r7, sp, #0
 8030658:	6078      	str	r0, [r7, #4]
 803065a:	460b      	mov	r3, r1
 803065c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 803065e:	78fb      	ldrb	r3, [r7, #3]
 8030660:	f003 020f 	and.w	r2, r3, #15
 8030664:	687b      	ldr	r3, [r7, #4]
 8030666:	685b      	ldr	r3, [r3, #4]
 8030668:	429a      	cmp	r2, r3
 803066a:	d901      	bls.n	8030670 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 803066c:	2301      	movs	r3, #1
 803066e:	e042      	b.n	80306f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8030670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8030674:	2b00      	cmp	r3, #0
 8030676:	da0f      	bge.n	8030698 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8030678:	78fb      	ldrb	r3, [r7, #3]
 803067a:	f003 020f 	and.w	r2, r3, #15
 803067e:	4613      	mov	r3, r2
 8030680:	00db      	lsls	r3, r3, #3
 8030682:	4413      	add	r3, r2
 8030684:	009b      	lsls	r3, r3, #2
 8030686:	3338      	adds	r3, #56	; 0x38
 8030688:	687a      	ldr	r2, [r7, #4]
 803068a:	4413      	add	r3, r2
 803068c:	3304      	adds	r3, #4
 803068e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8030690:	68fb      	ldr	r3, [r7, #12]
 8030692:	2201      	movs	r2, #1
 8030694:	705a      	strb	r2, [r3, #1]
 8030696:	e00f      	b.n	80306b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8030698:	78fb      	ldrb	r3, [r7, #3]
 803069a:	f003 020f 	and.w	r2, r3, #15
 803069e:	4613      	mov	r3, r2
 80306a0:	00db      	lsls	r3, r3, #3
 80306a2:	4413      	add	r3, r2
 80306a4:	009b      	lsls	r3, r3, #2
 80306a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80306aa:	687a      	ldr	r2, [r7, #4]
 80306ac:	4413      	add	r3, r2
 80306ae:	3304      	adds	r3, #4
 80306b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80306b2:	68fb      	ldr	r3, [r7, #12]
 80306b4:	2200      	movs	r2, #0
 80306b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80306b8:	68fb      	ldr	r3, [r7, #12]
 80306ba:	2200      	movs	r2, #0
 80306bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80306be:	78fb      	ldrb	r3, [r7, #3]
 80306c0:	f003 030f 	and.w	r3, r3, #15
 80306c4:	b2da      	uxtb	r2, r3
 80306c6:	68fb      	ldr	r3, [r7, #12]
 80306c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80306ca:	687b      	ldr	r3, [r7, #4]
 80306cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80306d0:	2b01      	cmp	r3, #1
 80306d2:	d101      	bne.n	80306d8 <HAL_PCD_EP_ClrStall+0x86>
 80306d4:	2302      	movs	r3, #2
 80306d6:	e00e      	b.n	80306f6 <HAL_PCD_EP_ClrStall+0xa4>
 80306d8:	687b      	ldr	r3, [r7, #4]
 80306da:	2201      	movs	r2, #1
 80306dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80306e0:	687b      	ldr	r3, [r7, #4]
 80306e2:	681b      	ldr	r3, [r3, #0]
 80306e4:	68f9      	ldr	r1, [r7, #12]
 80306e6:	4618      	mov	r0, r3
 80306e8:	f008 fc66 	bl	8038fb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80306ec:	687b      	ldr	r3, [r7, #4]
 80306ee:	2200      	movs	r2, #0
 80306f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80306f4:	2300      	movs	r3, #0
}
 80306f6:	4618      	mov	r0, r3
 80306f8:	3710      	adds	r7, #16
 80306fa:	46bd      	mov	sp, r7
 80306fc:	bd80      	pop	{r7, pc}

080306fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80306fe:	b580      	push	{r7, lr}
 8030700:	b084      	sub	sp, #16
 8030702:	af00      	add	r7, sp, #0
 8030704:	6078      	str	r0, [r7, #4]
 8030706:	460b      	mov	r3, r1
 8030708:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 803070a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803070e:	2b00      	cmp	r3, #0
 8030710:	da0c      	bge.n	803072c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8030712:	78fb      	ldrb	r3, [r7, #3]
 8030714:	f003 020f 	and.w	r2, r3, #15
 8030718:	4613      	mov	r3, r2
 803071a:	00db      	lsls	r3, r3, #3
 803071c:	4413      	add	r3, r2
 803071e:	009b      	lsls	r3, r3, #2
 8030720:	3338      	adds	r3, #56	; 0x38
 8030722:	687a      	ldr	r2, [r7, #4]
 8030724:	4413      	add	r3, r2
 8030726:	3304      	adds	r3, #4
 8030728:	60fb      	str	r3, [r7, #12]
 803072a:	e00c      	b.n	8030746 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 803072c:	78fb      	ldrb	r3, [r7, #3]
 803072e:	f003 020f 	and.w	r2, r3, #15
 8030732:	4613      	mov	r3, r2
 8030734:	00db      	lsls	r3, r3, #3
 8030736:	4413      	add	r3, r2
 8030738:	009b      	lsls	r3, r3, #2
 803073a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803073e:	687a      	ldr	r2, [r7, #4]
 8030740:	4413      	add	r3, r2
 8030742:	3304      	adds	r3, #4
 8030744:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8030746:	687b      	ldr	r3, [r7, #4]
 8030748:	681b      	ldr	r3, [r3, #0]
 803074a:	68f9      	ldr	r1, [r7, #12]
 803074c:	4618      	mov	r0, r3
 803074e:	f008 fa85 	bl	8038c5c <USB_EPStopXfer>
 8030752:	4603      	mov	r3, r0
 8030754:	72fb      	strb	r3, [r7, #11]

  return ret;
 8030756:	7afb      	ldrb	r3, [r7, #11]
}
 8030758:	4618      	mov	r0, r3
 803075a:	3710      	adds	r7, #16
 803075c:	46bd      	mov	sp, r7
 803075e:	bd80      	pop	{r7, pc}

08030760 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8030760:	b580      	push	{r7, lr}
 8030762:	b08a      	sub	sp, #40	; 0x28
 8030764:	af02      	add	r7, sp, #8
 8030766:	6078      	str	r0, [r7, #4]
 8030768:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 803076a:	687b      	ldr	r3, [r7, #4]
 803076c:	681b      	ldr	r3, [r3, #0]
 803076e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030770:	697b      	ldr	r3, [r7, #20]
 8030772:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8030774:	683a      	ldr	r2, [r7, #0]
 8030776:	4613      	mov	r3, r2
 8030778:	00db      	lsls	r3, r3, #3
 803077a:	4413      	add	r3, r2
 803077c:	009b      	lsls	r3, r3, #2
 803077e:	3338      	adds	r3, #56	; 0x38
 8030780:	687a      	ldr	r2, [r7, #4]
 8030782:	4413      	add	r3, r2
 8030784:	3304      	adds	r3, #4
 8030786:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8030788:	68fb      	ldr	r3, [r7, #12]
 803078a:	6a1a      	ldr	r2, [r3, #32]
 803078c:	68fb      	ldr	r3, [r7, #12]
 803078e:	699b      	ldr	r3, [r3, #24]
 8030790:	429a      	cmp	r2, r3
 8030792:	d901      	bls.n	8030798 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8030794:	2301      	movs	r3, #1
 8030796:	e06c      	b.n	8030872 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8030798:	68fb      	ldr	r3, [r7, #12]
 803079a:	699a      	ldr	r2, [r3, #24]
 803079c:	68fb      	ldr	r3, [r7, #12]
 803079e:	6a1b      	ldr	r3, [r3, #32]
 80307a0:	1ad3      	subs	r3, r2, r3
 80307a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80307a4:	68fb      	ldr	r3, [r7, #12]
 80307a6:	68db      	ldr	r3, [r3, #12]
 80307a8:	69fa      	ldr	r2, [r7, #28]
 80307aa:	429a      	cmp	r2, r3
 80307ac:	d902      	bls.n	80307b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80307ae:	68fb      	ldr	r3, [r7, #12]
 80307b0:	68db      	ldr	r3, [r3, #12]
 80307b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80307b4:	69fb      	ldr	r3, [r7, #28]
 80307b6:	3303      	adds	r3, #3
 80307b8:	089b      	lsrs	r3, r3, #2
 80307ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80307bc:	e02b      	b.n	8030816 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80307be:	68fb      	ldr	r3, [r7, #12]
 80307c0:	699a      	ldr	r2, [r3, #24]
 80307c2:	68fb      	ldr	r3, [r7, #12]
 80307c4:	6a1b      	ldr	r3, [r3, #32]
 80307c6:	1ad3      	subs	r3, r2, r3
 80307c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80307ca:	68fb      	ldr	r3, [r7, #12]
 80307cc:	68db      	ldr	r3, [r3, #12]
 80307ce:	69fa      	ldr	r2, [r7, #28]
 80307d0:	429a      	cmp	r2, r3
 80307d2:	d902      	bls.n	80307da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80307d4:	68fb      	ldr	r3, [r7, #12]
 80307d6:	68db      	ldr	r3, [r3, #12]
 80307d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80307da:	69fb      	ldr	r3, [r7, #28]
 80307dc:	3303      	adds	r3, #3
 80307de:	089b      	lsrs	r3, r3, #2
 80307e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80307e2:	68fb      	ldr	r3, [r7, #12]
 80307e4:	6919      	ldr	r1, [r3, #16]
 80307e6:	683b      	ldr	r3, [r7, #0]
 80307e8:	b2da      	uxtb	r2, r3
 80307ea:	69fb      	ldr	r3, [r7, #28]
 80307ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80307ee:	687b      	ldr	r3, [r7, #4]
 80307f0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80307f2:	b2db      	uxtb	r3, r3
 80307f4:	9300      	str	r3, [sp, #0]
 80307f6:	4603      	mov	r3, r0
 80307f8:	6978      	ldr	r0, [r7, #20]
 80307fa:	f008 fad9 	bl	8038db0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80307fe:	68fb      	ldr	r3, [r7, #12]
 8030800:	691a      	ldr	r2, [r3, #16]
 8030802:	69fb      	ldr	r3, [r7, #28]
 8030804:	441a      	add	r2, r3
 8030806:	68fb      	ldr	r3, [r7, #12]
 8030808:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 803080a:	68fb      	ldr	r3, [r7, #12]
 803080c:	6a1a      	ldr	r2, [r3, #32]
 803080e:	69fb      	ldr	r3, [r7, #28]
 8030810:	441a      	add	r2, r3
 8030812:	68fb      	ldr	r3, [r7, #12]
 8030814:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8030816:	683b      	ldr	r3, [r7, #0]
 8030818:	015a      	lsls	r2, r3, #5
 803081a:	693b      	ldr	r3, [r7, #16]
 803081c:	4413      	add	r3, r2
 803081e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8030822:	699b      	ldr	r3, [r3, #24]
 8030824:	b29b      	uxth	r3, r3
 8030826:	69ba      	ldr	r2, [r7, #24]
 8030828:	429a      	cmp	r2, r3
 803082a:	d809      	bhi.n	8030840 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 803082c:	68fb      	ldr	r3, [r7, #12]
 803082e:	6a1a      	ldr	r2, [r3, #32]
 8030830:	68fb      	ldr	r3, [r7, #12]
 8030832:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8030834:	429a      	cmp	r2, r3
 8030836:	d203      	bcs.n	8030840 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8030838:	68fb      	ldr	r3, [r7, #12]
 803083a:	699b      	ldr	r3, [r3, #24]
 803083c:	2b00      	cmp	r3, #0
 803083e:	d1be      	bne.n	80307be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8030840:	68fb      	ldr	r3, [r7, #12]
 8030842:	699a      	ldr	r2, [r3, #24]
 8030844:	68fb      	ldr	r3, [r7, #12]
 8030846:	6a1b      	ldr	r3, [r3, #32]
 8030848:	429a      	cmp	r2, r3
 803084a:	d811      	bhi.n	8030870 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 803084c:	683b      	ldr	r3, [r7, #0]
 803084e:	f003 030f 	and.w	r3, r3, #15
 8030852:	2201      	movs	r2, #1
 8030854:	fa02 f303 	lsl.w	r3, r2, r3
 8030858:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 803085a:	693b      	ldr	r3, [r7, #16]
 803085c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8030860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8030862:	68bb      	ldr	r3, [r7, #8]
 8030864:	43db      	mvns	r3, r3
 8030866:	6939      	ldr	r1, [r7, #16]
 8030868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803086c:	4013      	ands	r3, r2
 803086e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8030870:	2300      	movs	r3, #0
}
 8030872:	4618      	mov	r0, r3
 8030874:	3720      	adds	r7, #32
 8030876:	46bd      	mov	sp, r7
 8030878:	bd80      	pop	{r7, pc}
	...

0803087c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 803087c:	b580      	push	{r7, lr}
 803087e:	b088      	sub	sp, #32
 8030880:	af00      	add	r7, sp, #0
 8030882:	6078      	str	r0, [r7, #4]
 8030884:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030886:	687b      	ldr	r3, [r7, #4]
 8030888:	681b      	ldr	r3, [r3, #0]
 803088a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803088c:	69fb      	ldr	r3, [r7, #28]
 803088e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8030890:	69fb      	ldr	r3, [r7, #28]
 8030892:	333c      	adds	r3, #60	; 0x3c
 8030894:	3304      	adds	r3, #4
 8030896:	681b      	ldr	r3, [r3, #0]
 8030898:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 803089a:	683b      	ldr	r3, [r7, #0]
 803089c:	015a      	lsls	r2, r3, #5
 803089e:	69bb      	ldr	r3, [r7, #24]
 80308a0:	4413      	add	r3, r2
 80308a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80308a6:	689b      	ldr	r3, [r3, #8]
 80308a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80308aa:	687b      	ldr	r3, [r7, #4]
 80308ac:	691b      	ldr	r3, [r3, #16]
 80308ae:	2b01      	cmp	r3, #1
 80308b0:	d17b      	bne.n	80309aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80308b2:	693b      	ldr	r3, [r7, #16]
 80308b4:	f003 0308 	and.w	r3, r3, #8
 80308b8:	2b00      	cmp	r3, #0
 80308ba:	d015      	beq.n	80308e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80308bc:	697b      	ldr	r3, [r7, #20]
 80308be:	4a61      	ldr	r2, [pc, #388]	; (8030a44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80308c0:	4293      	cmp	r3, r2
 80308c2:	f240 80b9 	bls.w	8030a38 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80308c6:	693b      	ldr	r3, [r7, #16]
 80308c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80308cc:	2b00      	cmp	r3, #0
 80308ce:	f000 80b3 	beq.w	8030a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80308d2:	683b      	ldr	r3, [r7, #0]
 80308d4:	015a      	lsls	r2, r3, #5
 80308d6:	69bb      	ldr	r3, [r7, #24]
 80308d8:	4413      	add	r3, r2
 80308da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80308de:	461a      	mov	r2, r3
 80308e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80308e4:	6093      	str	r3, [r2, #8]
 80308e6:	e0a7      	b.n	8030a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80308e8:	693b      	ldr	r3, [r7, #16]
 80308ea:	f003 0320 	and.w	r3, r3, #32
 80308ee:	2b00      	cmp	r3, #0
 80308f0:	d009      	beq.n	8030906 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80308f2:	683b      	ldr	r3, [r7, #0]
 80308f4:	015a      	lsls	r2, r3, #5
 80308f6:	69bb      	ldr	r3, [r7, #24]
 80308f8:	4413      	add	r3, r2
 80308fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80308fe:	461a      	mov	r2, r3
 8030900:	2320      	movs	r3, #32
 8030902:	6093      	str	r3, [r2, #8]
 8030904:	e098      	b.n	8030a38 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8030906:	693b      	ldr	r3, [r7, #16]
 8030908:	f003 0328 	and.w	r3, r3, #40	; 0x28
 803090c:	2b00      	cmp	r3, #0
 803090e:	f040 8093 	bne.w	8030a38 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030912:	697b      	ldr	r3, [r7, #20]
 8030914:	4a4b      	ldr	r2, [pc, #300]	; (8030a44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8030916:	4293      	cmp	r3, r2
 8030918:	d90f      	bls.n	803093a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 803091a:	693b      	ldr	r3, [r7, #16]
 803091c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030920:	2b00      	cmp	r3, #0
 8030922:	d00a      	beq.n	803093a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8030924:	683b      	ldr	r3, [r7, #0]
 8030926:	015a      	lsls	r2, r3, #5
 8030928:	69bb      	ldr	r3, [r7, #24]
 803092a:	4413      	add	r3, r2
 803092c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030930:	461a      	mov	r2, r3
 8030932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8030936:	6093      	str	r3, [r2, #8]
 8030938:	e07e      	b.n	8030a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 803093a:	683a      	ldr	r2, [r7, #0]
 803093c:	4613      	mov	r3, r2
 803093e:	00db      	lsls	r3, r3, #3
 8030940:	4413      	add	r3, r2
 8030942:	009b      	lsls	r3, r3, #2
 8030944:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030948:	687a      	ldr	r2, [r7, #4]
 803094a:	4413      	add	r3, r2
 803094c:	3304      	adds	r3, #4
 803094e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8030950:	68fb      	ldr	r3, [r7, #12]
 8030952:	69da      	ldr	r2, [r3, #28]
 8030954:	683b      	ldr	r3, [r7, #0]
 8030956:	0159      	lsls	r1, r3, #5
 8030958:	69bb      	ldr	r3, [r7, #24]
 803095a:	440b      	add	r3, r1
 803095c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030960:	691b      	ldr	r3, [r3, #16]
 8030962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8030966:	1ad2      	subs	r2, r2, r3
 8030968:	68fb      	ldr	r3, [r7, #12]
 803096a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 803096c:	683b      	ldr	r3, [r7, #0]
 803096e:	2b00      	cmp	r3, #0
 8030970:	d114      	bne.n	803099c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8030972:	68fb      	ldr	r3, [r7, #12]
 8030974:	699b      	ldr	r3, [r3, #24]
 8030976:	2b00      	cmp	r3, #0
 8030978:	d109      	bne.n	803098e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 803097a:	687b      	ldr	r3, [r7, #4]
 803097c:	6818      	ldr	r0, [r3, #0]
 803097e:	687b      	ldr	r3, [r7, #4]
 8030980:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030984:	461a      	mov	r2, r3
 8030986:	2101      	movs	r1, #1
 8030988:	f008 fcaa 	bl	80392e0 <USB_EP0_OutStart>
 803098c:	e006      	b.n	803099c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 803098e:	68fb      	ldr	r3, [r7, #12]
 8030990:	691a      	ldr	r2, [r3, #16]
 8030992:	68fb      	ldr	r3, [r7, #12]
 8030994:	6a1b      	ldr	r3, [r3, #32]
 8030996:	441a      	add	r2, r3
 8030998:	68fb      	ldr	r3, [r7, #12]
 803099a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 803099c:	683b      	ldr	r3, [r7, #0]
 803099e:	b2db      	uxtb	r3, r3
 80309a0:	4619      	mov	r1, r3
 80309a2:	6878      	ldr	r0, [r7, #4]
 80309a4:	f00a ff1e 	bl	803b7e4 <HAL_PCD_DataOutStageCallback>
 80309a8:	e046      	b.n	8030a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80309aa:	697b      	ldr	r3, [r7, #20]
 80309ac:	4a26      	ldr	r2, [pc, #152]	; (8030a48 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80309ae:	4293      	cmp	r3, r2
 80309b0:	d124      	bne.n	80309fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80309b2:	693b      	ldr	r3, [r7, #16]
 80309b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80309b8:	2b00      	cmp	r3, #0
 80309ba:	d00a      	beq.n	80309d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80309bc:	683b      	ldr	r3, [r7, #0]
 80309be:	015a      	lsls	r2, r3, #5
 80309c0:	69bb      	ldr	r3, [r7, #24]
 80309c2:	4413      	add	r3, r2
 80309c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80309c8:	461a      	mov	r2, r3
 80309ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80309ce:	6093      	str	r3, [r2, #8]
 80309d0:	e032      	b.n	8030a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80309d2:	693b      	ldr	r3, [r7, #16]
 80309d4:	f003 0320 	and.w	r3, r3, #32
 80309d8:	2b00      	cmp	r3, #0
 80309da:	d008      	beq.n	80309ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80309dc:	683b      	ldr	r3, [r7, #0]
 80309de:	015a      	lsls	r2, r3, #5
 80309e0:	69bb      	ldr	r3, [r7, #24]
 80309e2:	4413      	add	r3, r2
 80309e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80309e8:	461a      	mov	r2, r3
 80309ea:	2320      	movs	r3, #32
 80309ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80309ee:	683b      	ldr	r3, [r7, #0]
 80309f0:	b2db      	uxtb	r3, r3
 80309f2:	4619      	mov	r1, r3
 80309f4:	6878      	ldr	r0, [r7, #4]
 80309f6:	f00a fef5 	bl	803b7e4 <HAL_PCD_DataOutStageCallback>
 80309fa:	e01d      	b.n	8030a38 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80309fc:	683b      	ldr	r3, [r7, #0]
 80309fe:	2b00      	cmp	r3, #0
 8030a00:	d114      	bne.n	8030a2c <PCD_EP_OutXfrComplete_int+0x1b0>
 8030a02:	6879      	ldr	r1, [r7, #4]
 8030a04:	683a      	ldr	r2, [r7, #0]
 8030a06:	4613      	mov	r3, r2
 8030a08:	00db      	lsls	r3, r3, #3
 8030a0a:	4413      	add	r3, r2
 8030a0c:	009b      	lsls	r3, r3, #2
 8030a0e:	440b      	add	r3, r1
 8030a10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8030a14:	681b      	ldr	r3, [r3, #0]
 8030a16:	2b00      	cmp	r3, #0
 8030a18:	d108      	bne.n	8030a2c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8030a1a:	687b      	ldr	r3, [r7, #4]
 8030a1c:	6818      	ldr	r0, [r3, #0]
 8030a1e:	687b      	ldr	r3, [r7, #4]
 8030a20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030a24:	461a      	mov	r2, r3
 8030a26:	2100      	movs	r1, #0
 8030a28:	f008 fc5a 	bl	80392e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8030a2c:	683b      	ldr	r3, [r7, #0]
 8030a2e:	b2db      	uxtb	r3, r3
 8030a30:	4619      	mov	r1, r3
 8030a32:	6878      	ldr	r0, [r7, #4]
 8030a34:	f00a fed6 	bl	803b7e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8030a38:	2300      	movs	r3, #0
}
 8030a3a:	4618      	mov	r0, r3
 8030a3c:	3720      	adds	r7, #32
 8030a3e:	46bd      	mov	sp, r7
 8030a40:	bd80      	pop	{r7, pc}
 8030a42:	bf00      	nop
 8030a44:	4f54300a 	.word	0x4f54300a
 8030a48:	4f54310a 	.word	0x4f54310a

08030a4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8030a4c:	b580      	push	{r7, lr}
 8030a4e:	b086      	sub	sp, #24
 8030a50:	af00      	add	r7, sp, #0
 8030a52:	6078      	str	r0, [r7, #4]
 8030a54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030a56:	687b      	ldr	r3, [r7, #4]
 8030a58:	681b      	ldr	r3, [r3, #0]
 8030a5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030a5c:	697b      	ldr	r3, [r7, #20]
 8030a5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8030a60:	697b      	ldr	r3, [r7, #20]
 8030a62:	333c      	adds	r3, #60	; 0x3c
 8030a64:	3304      	adds	r3, #4
 8030a66:	681b      	ldr	r3, [r3, #0]
 8030a68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8030a6a:	683b      	ldr	r3, [r7, #0]
 8030a6c:	015a      	lsls	r2, r3, #5
 8030a6e:	693b      	ldr	r3, [r7, #16]
 8030a70:	4413      	add	r3, r2
 8030a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030a76:	689b      	ldr	r3, [r3, #8]
 8030a78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030a7a:	68fb      	ldr	r3, [r7, #12]
 8030a7c:	4a15      	ldr	r2, [pc, #84]	; (8030ad4 <PCD_EP_OutSetupPacket_int+0x88>)
 8030a7e:	4293      	cmp	r3, r2
 8030a80:	d90e      	bls.n	8030aa0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8030a82:	68bb      	ldr	r3, [r7, #8]
 8030a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030a88:	2b00      	cmp	r3, #0
 8030a8a:	d009      	beq.n	8030aa0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8030a8c:	683b      	ldr	r3, [r7, #0]
 8030a8e:	015a      	lsls	r2, r3, #5
 8030a90:	693b      	ldr	r3, [r7, #16]
 8030a92:	4413      	add	r3, r2
 8030a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030a98:	461a      	mov	r2, r3
 8030a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8030a9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8030aa0:	6878      	ldr	r0, [r7, #4]
 8030aa2:	f00a fe8d 	bl	803b7c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8030aa6:	68fb      	ldr	r3, [r7, #12]
 8030aa8:	4a0a      	ldr	r2, [pc, #40]	; (8030ad4 <PCD_EP_OutSetupPacket_int+0x88>)
 8030aaa:	4293      	cmp	r3, r2
 8030aac:	d90c      	bls.n	8030ac8 <PCD_EP_OutSetupPacket_int+0x7c>
 8030aae:	687b      	ldr	r3, [r7, #4]
 8030ab0:	691b      	ldr	r3, [r3, #16]
 8030ab2:	2b01      	cmp	r3, #1
 8030ab4:	d108      	bne.n	8030ac8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8030ab6:	687b      	ldr	r3, [r7, #4]
 8030ab8:	6818      	ldr	r0, [r3, #0]
 8030aba:	687b      	ldr	r3, [r7, #4]
 8030abc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030ac0:	461a      	mov	r2, r3
 8030ac2:	2101      	movs	r1, #1
 8030ac4:	f008 fc0c 	bl	80392e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8030ac8:	2300      	movs	r3, #0
}
 8030aca:	4618      	mov	r0, r3
 8030acc:	3718      	adds	r7, #24
 8030ace:	46bd      	mov	sp, r7
 8030ad0:	bd80      	pop	{r7, pc}
 8030ad2:	bf00      	nop
 8030ad4:	4f54300a 	.word	0x4f54300a

08030ad8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8030ad8:	b480      	push	{r7}
 8030ada:	b085      	sub	sp, #20
 8030adc:	af00      	add	r7, sp, #0
 8030ade:	6078      	str	r0, [r7, #4]
 8030ae0:	460b      	mov	r3, r1
 8030ae2:	70fb      	strb	r3, [r7, #3]
 8030ae4:	4613      	mov	r3, r2
 8030ae6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8030ae8:	687b      	ldr	r3, [r7, #4]
 8030aea:	681b      	ldr	r3, [r3, #0]
 8030aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030aee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8030af0:	78fb      	ldrb	r3, [r7, #3]
 8030af2:	2b00      	cmp	r3, #0
 8030af4:	d107      	bne.n	8030b06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8030af6:	883b      	ldrh	r3, [r7, #0]
 8030af8:	0419      	lsls	r1, r3, #16
 8030afa:	687b      	ldr	r3, [r7, #4]
 8030afc:	681b      	ldr	r3, [r3, #0]
 8030afe:	68ba      	ldr	r2, [r7, #8]
 8030b00:	430a      	orrs	r2, r1
 8030b02:	629a      	str	r2, [r3, #40]	; 0x28
 8030b04:	e028      	b.n	8030b58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8030b06:	687b      	ldr	r3, [r7, #4]
 8030b08:	681b      	ldr	r3, [r3, #0]
 8030b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030b0c:	0c1b      	lsrs	r3, r3, #16
 8030b0e:	68ba      	ldr	r2, [r7, #8]
 8030b10:	4413      	add	r3, r2
 8030b12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8030b14:	2300      	movs	r3, #0
 8030b16:	73fb      	strb	r3, [r7, #15]
 8030b18:	e00d      	b.n	8030b36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8030b1a:	687b      	ldr	r3, [r7, #4]
 8030b1c:	681a      	ldr	r2, [r3, #0]
 8030b1e:	7bfb      	ldrb	r3, [r7, #15]
 8030b20:	3340      	adds	r3, #64	; 0x40
 8030b22:	009b      	lsls	r3, r3, #2
 8030b24:	4413      	add	r3, r2
 8030b26:	685b      	ldr	r3, [r3, #4]
 8030b28:	0c1b      	lsrs	r3, r3, #16
 8030b2a:	68ba      	ldr	r2, [r7, #8]
 8030b2c:	4413      	add	r3, r2
 8030b2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8030b30:	7bfb      	ldrb	r3, [r7, #15]
 8030b32:	3301      	adds	r3, #1
 8030b34:	73fb      	strb	r3, [r7, #15]
 8030b36:	7bfa      	ldrb	r2, [r7, #15]
 8030b38:	78fb      	ldrb	r3, [r7, #3]
 8030b3a:	3b01      	subs	r3, #1
 8030b3c:	429a      	cmp	r2, r3
 8030b3e:	d3ec      	bcc.n	8030b1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8030b40:	883b      	ldrh	r3, [r7, #0]
 8030b42:	0418      	lsls	r0, r3, #16
 8030b44:	687b      	ldr	r3, [r7, #4]
 8030b46:	6819      	ldr	r1, [r3, #0]
 8030b48:	78fb      	ldrb	r3, [r7, #3]
 8030b4a:	3b01      	subs	r3, #1
 8030b4c:	68ba      	ldr	r2, [r7, #8]
 8030b4e:	4302      	orrs	r2, r0
 8030b50:	3340      	adds	r3, #64	; 0x40
 8030b52:	009b      	lsls	r3, r3, #2
 8030b54:	440b      	add	r3, r1
 8030b56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8030b58:	2300      	movs	r3, #0
}
 8030b5a:	4618      	mov	r0, r3
 8030b5c:	3714      	adds	r7, #20
 8030b5e:	46bd      	mov	sp, r7
 8030b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b64:	4770      	bx	lr

08030b66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8030b66:	b480      	push	{r7}
 8030b68:	b083      	sub	sp, #12
 8030b6a:	af00      	add	r7, sp, #0
 8030b6c:	6078      	str	r0, [r7, #4]
 8030b6e:	460b      	mov	r3, r1
 8030b70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8030b72:	687b      	ldr	r3, [r7, #4]
 8030b74:	681b      	ldr	r3, [r3, #0]
 8030b76:	887a      	ldrh	r2, [r7, #2]
 8030b78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8030b7a:	2300      	movs	r3, #0
}
 8030b7c:	4618      	mov	r0, r3
 8030b7e:	370c      	adds	r7, #12
 8030b80:	46bd      	mov	sp, r7
 8030b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b86:	4770      	bx	lr

08030b88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8030b88:	b480      	push	{r7}
 8030b8a:	b085      	sub	sp, #20
 8030b8c:	af00      	add	r7, sp, #0
 8030b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030b90:	687b      	ldr	r3, [r7, #4]
 8030b92:	681b      	ldr	r3, [r3, #0]
 8030b94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8030b96:	687b      	ldr	r3, [r7, #4]
 8030b98:	2201      	movs	r2, #1
 8030b9a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8030b9e:	687b      	ldr	r3, [r7, #4]
 8030ba0:	2200      	movs	r2, #0
 8030ba2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8030ba6:	68fb      	ldr	r3, [r7, #12]
 8030ba8:	699b      	ldr	r3, [r3, #24]
 8030baa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8030bae:	68fb      	ldr	r3, [r7, #12]
 8030bb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8030bb2:	68fb      	ldr	r3, [r7, #12]
 8030bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8030bb6:	4b05      	ldr	r3, [pc, #20]	; (8030bcc <HAL_PCDEx_ActivateLPM+0x44>)
 8030bb8:	4313      	orrs	r3, r2
 8030bba:	68fa      	ldr	r2, [r7, #12]
 8030bbc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8030bbe:	2300      	movs	r3, #0
}
 8030bc0:	4618      	mov	r0, r3
 8030bc2:	3714      	adds	r7, #20
 8030bc4:	46bd      	mov	sp, r7
 8030bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030bca:	4770      	bx	lr
 8030bcc:	10000003 	.word	0x10000003

08030bd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8030bd0:	b480      	push	{r7}
 8030bd2:	b083      	sub	sp, #12
 8030bd4:	af00      	add	r7, sp, #0
 8030bd6:	6078      	str	r0, [r7, #4]
 8030bd8:	460b      	mov	r3, r1
 8030bda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8030bdc:	bf00      	nop
 8030bde:	370c      	adds	r7, #12
 8030be0:	46bd      	mov	sp, r7
 8030be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030be6:	4770      	bx	lr

08030be8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8030be8:	b580      	push	{r7, lr}
 8030bea:	b084      	sub	sp, #16
 8030bec:	af00      	add	r7, sp, #0
 8030bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8030bf0:	4b19      	ldr	r3, [pc, #100]	; (8030c58 <HAL_PWREx_ConfigSupply+0x70>)
 8030bf2:	68db      	ldr	r3, [r3, #12]
 8030bf4:	f003 0304 	and.w	r3, r3, #4
 8030bf8:	2b04      	cmp	r3, #4
 8030bfa:	d00a      	beq.n	8030c12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8030bfc:	4b16      	ldr	r3, [pc, #88]	; (8030c58 <HAL_PWREx_ConfigSupply+0x70>)
 8030bfe:	68db      	ldr	r3, [r3, #12]
 8030c00:	f003 0307 	and.w	r3, r3, #7
 8030c04:	687a      	ldr	r2, [r7, #4]
 8030c06:	429a      	cmp	r2, r3
 8030c08:	d001      	beq.n	8030c0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8030c0a:	2301      	movs	r3, #1
 8030c0c:	e01f      	b.n	8030c4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8030c0e:	2300      	movs	r3, #0
 8030c10:	e01d      	b.n	8030c4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8030c12:	4b11      	ldr	r3, [pc, #68]	; (8030c58 <HAL_PWREx_ConfigSupply+0x70>)
 8030c14:	68db      	ldr	r3, [r3, #12]
 8030c16:	f023 0207 	bic.w	r2, r3, #7
 8030c1a:	490f      	ldr	r1, [pc, #60]	; (8030c58 <HAL_PWREx_ConfigSupply+0x70>)
 8030c1c:	687b      	ldr	r3, [r7, #4]
 8030c1e:	4313      	orrs	r3, r2
 8030c20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8030c22:	f7fa f843 	bl	802acac <HAL_GetTick>
 8030c26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8030c28:	e009      	b.n	8030c3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8030c2a:	f7fa f83f 	bl	802acac <HAL_GetTick>
 8030c2e:	4602      	mov	r2, r0
 8030c30:	68fb      	ldr	r3, [r7, #12]
 8030c32:	1ad3      	subs	r3, r2, r3
 8030c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8030c38:	d901      	bls.n	8030c3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8030c3a:	2301      	movs	r3, #1
 8030c3c:	e007      	b.n	8030c4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8030c3e:	4b06      	ldr	r3, [pc, #24]	; (8030c58 <HAL_PWREx_ConfigSupply+0x70>)
 8030c40:	685b      	ldr	r3, [r3, #4]
 8030c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8030c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8030c4a:	d1ee      	bne.n	8030c2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8030c4c:	2300      	movs	r3, #0
}
 8030c4e:	4618      	mov	r0, r3
 8030c50:	3710      	adds	r7, #16
 8030c52:	46bd      	mov	sp, r7
 8030c54:	bd80      	pop	{r7, pc}
 8030c56:	bf00      	nop
 8030c58:	58024800 	.word	0x58024800

08030c5c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8030c5c:	b480      	push	{r7}
 8030c5e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8030c60:	4b05      	ldr	r3, [pc, #20]	; (8030c78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8030c62:	68db      	ldr	r3, [r3, #12]
 8030c64:	4a04      	ldr	r2, [pc, #16]	; (8030c78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8030c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8030c6a:	60d3      	str	r3, [r2, #12]
}
 8030c6c:	bf00      	nop
 8030c6e:	46bd      	mov	sp, r7
 8030c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030c74:	4770      	bx	lr
 8030c76:	bf00      	nop
 8030c78:	58024800 	.word	0x58024800

08030c7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8030c7c:	b580      	push	{r7, lr}
 8030c7e:	b08c      	sub	sp, #48	; 0x30
 8030c80:	af00      	add	r7, sp, #0
 8030c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8030c84:	687b      	ldr	r3, [r7, #4]
 8030c86:	2b00      	cmp	r3, #0
 8030c88:	d102      	bne.n	8030c90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8030c8a:	2301      	movs	r3, #1
 8030c8c:	f000 bc1d 	b.w	80314ca <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8030c90:	687b      	ldr	r3, [r7, #4]
 8030c92:	681b      	ldr	r3, [r3, #0]
 8030c94:	f003 0301 	and.w	r3, r3, #1
 8030c98:	2b00      	cmp	r3, #0
 8030c9a:	f000 8087 	beq.w	8030dac <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030c9e:	4b99      	ldr	r3, [pc, #612]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030ca0:	691b      	ldr	r3, [r3, #16]
 8030ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030ca8:	4b96      	ldr	r3, [pc, #600]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030cac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8030cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030cb0:	2b10      	cmp	r3, #16
 8030cb2:	d007      	beq.n	8030cc4 <HAL_RCC_OscConfig+0x48>
 8030cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030cb6:	2b18      	cmp	r3, #24
 8030cb8:	d110      	bne.n	8030cdc <HAL_RCC_OscConfig+0x60>
 8030cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030cbc:	f003 0303 	and.w	r3, r3, #3
 8030cc0:	2b02      	cmp	r3, #2
 8030cc2:	d10b      	bne.n	8030cdc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8030cc4:	4b8f      	ldr	r3, [pc, #572]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030cc6:	681b      	ldr	r3, [r3, #0]
 8030cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030ccc:	2b00      	cmp	r3, #0
 8030cce:	d06c      	beq.n	8030daa <HAL_RCC_OscConfig+0x12e>
 8030cd0:	687b      	ldr	r3, [r7, #4]
 8030cd2:	685b      	ldr	r3, [r3, #4]
 8030cd4:	2b00      	cmp	r3, #0
 8030cd6:	d168      	bne.n	8030daa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8030cd8:	2301      	movs	r3, #1
 8030cda:	e3f6      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8030cdc:	687b      	ldr	r3, [r7, #4]
 8030cde:	685b      	ldr	r3, [r3, #4]
 8030ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8030ce4:	d106      	bne.n	8030cf4 <HAL_RCC_OscConfig+0x78>
 8030ce6:	4b87      	ldr	r3, [pc, #540]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030ce8:	681b      	ldr	r3, [r3, #0]
 8030cea:	4a86      	ldr	r2, [pc, #536]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8030cf0:	6013      	str	r3, [r2, #0]
 8030cf2:	e02e      	b.n	8030d52 <HAL_RCC_OscConfig+0xd6>
 8030cf4:	687b      	ldr	r3, [r7, #4]
 8030cf6:	685b      	ldr	r3, [r3, #4]
 8030cf8:	2b00      	cmp	r3, #0
 8030cfa:	d10c      	bne.n	8030d16 <HAL_RCC_OscConfig+0x9a>
 8030cfc:	4b81      	ldr	r3, [pc, #516]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030cfe:	681b      	ldr	r3, [r3, #0]
 8030d00:	4a80      	ldr	r2, [pc, #512]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8030d06:	6013      	str	r3, [r2, #0]
 8030d08:	4b7e      	ldr	r3, [pc, #504]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d0a:	681b      	ldr	r3, [r3, #0]
 8030d0c:	4a7d      	ldr	r2, [pc, #500]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8030d12:	6013      	str	r3, [r2, #0]
 8030d14:	e01d      	b.n	8030d52 <HAL_RCC_OscConfig+0xd6>
 8030d16:	687b      	ldr	r3, [r7, #4]
 8030d18:	685b      	ldr	r3, [r3, #4]
 8030d1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8030d1e:	d10c      	bne.n	8030d3a <HAL_RCC_OscConfig+0xbe>
 8030d20:	4b78      	ldr	r3, [pc, #480]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d22:	681b      	ldr	r3, [r3, #0]
 8030d24:	4a77      	ldr	r2, [pc, #476]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8030d2a:	6013      	str	r3, [r2, #0]
 8030d2c:	4b75      	ldr	r3, [pc, #468]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d2e:	681b      	ldr	r3, [r3, #0]
 8030d30:	4a74      	ldr	r2, [pc, #464]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8030d36:	6013      	str	r3, [r2, #0]
 8030d38:	e00b      	b.n	8030d52 <HAL_RCC_OscConfig+0xd6>
 8030d3a:	4b72      	ldr	r3, [pc, #456]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d3c:	681b      	ldr	r3, [r3, #0]
 8030d3e:	4a71      	ldr	r2, [pc, #452]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8030d44:	6013      	str	r3, [r2, #0]
 8030d46:	4b6f      	ldr	r3, [pc, #444]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d48:	681b      	ldr	r3, [r3, #0]
 8030d4a:	4a6e      	ldr	r2, [pc, #440]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8030d50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8030d52:	687b      	ldr	r3, [r7, #4]
 8030d54:	685b      	ldr	r3, [r3, #4]
 8030d56:	2b00      	cmp	r3, #0
 8030d58:	d013      	beq.n	8030d82 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030d5a:	f7f9 ffa7 	bl	802acac <HAL_GetTick>
 8030d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8030d60:	e008      	b.n	8030d74 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8030d62:	f7f9 ffa3 	bl	802acac <HAL_GetTick>
 8030d66:	4602      	mov	r2, r0
 8030d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030d6a:	1ad3      	subs	r3, r2, r3
 8030d6c:	2b64      	cmp	r3, #100	; 0x64
 8030d6e:	d901      	bls.n	8030d74 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8030d70:	2303      	movs	r3, #3
 8030d72:	e3aa      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8030d74:	4b63      	ldr	r3, [pc, #396]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d76:	681b      	ldr	r3, [r3, #0]
 8030d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030d7c:	2b00      	cmp	r3, #0
 8030d7e:	d0f0      	beq.n	8030d62 <HAL_RCC_OscConfig+0xe6>
 8030d80:	e014      	b.n	8030dac <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030d82:	f7f9 ff93 	bl	802acac <HAL_GetTick>
 8030d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8030d88:	e008      	b.n	8030d9c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8030d8a:	f7f9 ff8f 	bl	802acac <HAL_GetTick>
 8030d8e:	4602      	mov	r2, r0
 8030d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030d92:	1ad3      	subs	r3, r2, r3
 8030d94:	2b64      	cmp	r3, #100	; 0x64
 8030d96:	d901      	bls.n	8030d9c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8030d98:	2303      	movs	r3, #3
 8030d9a:	e396      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8030d9c:	4b59      	ldr	r3, [pc, #356]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030d9e:	681b      	ldr	r3, [r3, #0]
 8030da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030da4:	2b00      	cmp	r3, #0
 8030da6:	d1f0      	bne.n	8030d8a <HAL_RCC_OscConfig+0x10e>
 8030da8:	e000      	b.n	8030dac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8030daa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8030dac:	687b      	ldr	r3, [r7, #4]
 8030dae:	681b      	ldr	r3, [r3, #0]
 8030db0:	f003 0302 	and.w	r3, r3, #2
 8030db4:	2b00      	cmp	r3, #0
 8030db6:	f000 80cb 	beq.w	8030f50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030dba:	4b52      	ldr	r3, [pc, #328]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030dbc:	691b      	ldr	r3, [r3, #16]
 8030dbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030dc2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030dc4:	4b4f      	ldr	r3, [pc, #316]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030dc8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8030dca:	6a3b      	ldr	r3, [r7, #32]
 8030dcc:	2b00      	cmp	r3, #0
 8030dce:	d007      	beq.n	8030de0 <HAL_RCC_OscConfig+0x164>
 8030dd0:	6a3b      	ldr	r3, [r7, #32]
 8030dd2:	2b18      	cmp	r3, #24
 8030dd4:	d156      	bne.n	8030e84 <HAL_RCC_OscConfig+0x208>
 8030dd6:	69fb      	ldr	r3, [r7, #28]
 8030dd8:	f003 0303 	and.w	r3, r3, #3
 8030ddc:	2b00      	cmp	r3, #0
 8030dde:	d151      	bne.n	8030e84 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030de0:	4b48      	ldr	r3, [pc, #288]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030de2:	681b      	ldr	r3, [r3, #0]
 8030de4:	f003 0304 	and.w	r3, r3, #4
 8030de8:	2b00      	cmp	r3, #0
 8030dea:	d005      	beq.n	8030df8 <HAL_RCC_OscConfig+0x17c>
 8030dec:	687b      	ldr	r3, [r7, #4]
 8030dee:	68db      	ldr	r3, [r3, #12]
 8030df0:	2b00      	cmp	r3, #0
 8030df2:	d101      	bne.n	8030df8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8030df4:	2301      	movs	r3, #1
 8030df6:	e368      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8030df8:	4b42      	ldr	r3, [pc, #264]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030dfa:	681b      	ldr	r3, [r3, #0]
 8030dfc:	f023 0219 	bic.w	r2, r3, #25
 8030e00:	687b      	ldr	r3, [r7, #4]
 8030e02:	68db      	ldr	r3, [r3, #12]
 8030e04:	493f      	ldr	r1, [pc, #252]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030e06:	4313      	orrs	r3, r2
 8030e08:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8030e0a:	f7f9 ff4f 	bl	802acac <HAL_GetTick>
 8030e0e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030e10:	e008      	b.n	8030e24 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030e12:	f7f9 ff4b 	bl	802acac <HAL_GetTick>
 8030e16:	4602      	mov	r2, r0
 8030e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030e1a:	1ad3      	subs	r3, r2, r3
 8030e1c:	2b02      	cmp	r3, #2
 8030e1e:	d901      	bls.n	8030e24 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8030e20:	2303      	movs	r3, #3
 8030e22:	e352      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030e24:	4b37      	ldr	r3, [pc, #220]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030e26:	681b      	ldr	r3, [r3, #0]
 8030e28:	f003 0304 	and.w	r3, r3, #4
 8030e2c:	2b00      	cmp	r3, #0
 8030e2e:	d0f0      	beq.n	8030e12 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030e30:	f7f9 ff6c 	bl	802ad0c <HAL_GetREVID>
 8030e34:	4603      	mov	r3, r0
 8030e36:	f241 0203 	movw	r2, #4099	; 0x1003
 8030e3a:	4293      	cmp	r3, r2
 8030e3c:	d817      	bhi.n	8030e6e <HAL_RCC_OscConfig+0x1f2>
 8030e3e:	687b      	ldr	r3, [r7, #4]
 8030e40:	691b      	ldr	r3, [r3, #16]
 8030e42:	2b40      	cmp	r3, #64	; 0x40
 8030e44:	d108      	bne.n	8030e58 <HAL_RCC_OscConfig+0x1dc>
 8030e46:	4b2f      	ldr	r3, [pc, #188]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030e48:	685b      	ldr	r3, [r3, #4]
 8030e4a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8030e4e:	4a2d      	ldr	r2, [pc, #180]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8030e54:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030e56:	e07b      	b.n	8030f50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030e58:	4b2a      	ldr	r3, [pc, #168]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030e5a:	685b      	ldr	r3, [r3, #4]
 8030e5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8030e60:	687b      	ldr	r3, [r7, #4]
 8030e62:	691b      	ldr	r3, [r3, #16]
 8030e64:	031b      	lsls	r3, r3, #12
 8030e66:	4927      	ldr	r1, [pc, #156]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030e68:	4313      	orrs	r3, r2
 8030e6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030e6c:	e070      	b.n	8030f50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030e6e:	4b25      	ldr	r3, [pc, #148]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030e70:	685b      	ldr	r3, [r3, #4]
 8030e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8030e76:	687b      	ldr	r3, [r7, #4]
 8030e78:	691b      	ldr	r3, [r3, #16]
 8030e7a:	061b      	lsls	r3, r3, #24
 8030e7c:	4921      	ldr	r1, [pc, #132]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030e7e:	4313      	orrs	r3, r2
 8030e80:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030e82:	e065      	b.n	8030f50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8030e84:	687b      	ldr	r3, [r7, #4]
 8030e86:	68db      	ldr	r3, [r3, #12]
 8030e88:	2b00      	cmp	r3, #0
 8030e8a:	d048      	beq.n	8030f1e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8030e8c:	4b1d      	ldr	r3, [pc, #116]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030e8e:	681b      	ldr	r3, [r3, #0]
 8030e90:	f023 0219 	bic.w	r2, r3, #25
 8030e94:	687b      	ldr	r3, [r7, #4]
 8030e96:	68db      	ldr	r3, [r3, #12]
 8030e98:	491a      	ldr	r1, [pc, #104]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030e9a:	4313      	orrs	r3, r2
 8030e9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030e9e:	f7f9 ff05 	bl	802acac <HAL_GetTick>
 8030ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030ea4:	e008      	b.n	8030eb8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030ea6:	f7f9 ff01 	bl	802acac <HAL_GetTick>
 8030eaa:	4602      	mov	r2, r0
 8030eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030eae:	1ad3      	subs	r3, r2, r3
 8030eb0:	2b02      	cmp	r3, #2
 8030eb2:	d901      	bls.n	8030eb8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8030eb4:	2303      	movs	r3, #3
 8030eb6:	e308      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030eb8:	4b12      	ldr	r3, [pc, #72]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030eba:	681b      	ldr	r3, [r3, #0]
 8030ebc:	f003 0304 	and.w	r3, r3, #4
 8030ec0:	2b00      	cmp	r3, #0
 8030ec2:	d0f0      	beq.n	8030ea6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030ec4:	f7f9 ff22 	bl	802ad0c <HAL_GetREVID>
 8030ec8:	4603      	mov	r3, r0
 8030eca:	f241 0203 	movw	r2, #4099	; 0x1003
 8030ece:	4293      	cmp	r3, r2
 8030ed0:	d81a      	bhi.n	8030f08 <HAL_RCC_OscConfig+0x28c>
 8030ed2:	687b      	ldr	r3, [r7, #4]
 8030ed4:	691b      	ldr	r3, [r3, #16]
 8030ed6:	2b40      	cmp	r3, #64	; 0x40
 8030ed8:	d108      	bne.n	8030eec <HAL_RCC_OscConfig+0x270>
 8030eda:	4b0a      	ldr	r3, [pc, #40]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030edc:	685b      	ldr	r3, [r3, #4]
 8030ede:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8030ee2:	4a08      	ldr	r2, [pc, #32]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8030ee8:	6053      	str	r3, [r2, #4]
 8030eea:	e031      	b.n	8030f50 <HAL_RCC_OscConfig+0x2d4>
 8030eec:	4b05      	ldr	r3, [pc, #20]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030eee:	685b      	ldr	r3, [r3, #4]
 8030ef0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8030ef4:	687b      	ldr	r3, [r7, #4]
 8030ef6:	691b      	ldr	r3, [r3, #16]
 8030ef8:	031b      	lsls	r3, r3, #12
 8030efa:	4902      	ldr	r1, [pc, #8]	; (8030f04 <HAL_RCC_OscConfig+0x288>)
 8030efc:	4313      	orrs	r3, r2
 8030efe:	604b      	str	r3, [r1, #4]
 8030f00:	e026      	b.n	8030f50 <HAL_RCC_OscConfig+0x2d4>
 8030f02:	bf00      	nop
 8030f04:	58024400 	.word	0x58024400
 8030f08:	4b9a      	ldr	r3, [pc, #616]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030f0a:	685b      	ldr	r3, [r3, #4]
 8030f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8030f10:	687b      	ldr	r3, [r7, #4]
 8030f12:	691b      	ldr	r3, [r3, #16]
 8030f14:	061b      	lsls	r3, r3, #24
 8030f16:	4997      	ldr	r1, [pc, #604]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030f18:	4313      	orrs	r3, r2
 8030f1a:	604b      	str	r3, [r1, #4]
 8030f1c:	e018      	b.n	8030f50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8030f1e:	4b95      	ldr	r3, [pc, #596]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030f20:	681b      	ldr	r3, [r3, #0]
 8030f22:	4a94      	ldr	r2, [pc, #592]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030f24:	f023 0301 	bic.w	r3, r3, #1
 8030f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030f2a:	f7f9 febf 	bl	802acac <HAL_GetTick>
 8030f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8030f30:	e008      	b.n	8030f44 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030f32:	f7f9 febb 	bl	802acac <HAL_GetTick>
 8030f36:	4602      	mov	r2, r0
 8030f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030f3a:	1ad3      	subs	r3, r2, r3
 8030f3c:	2b02      	cmp	r3, #2
 8030f3e:	d901      	bls.n	8030f44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8030f40:	2303      	movs	r3, #3
 8030f42:	e2c2      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8030f44:	4b8b      	ldr	r3, [pc, #556]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030f46:	681b      	ldr	r3, [r3, #0]
 8030f48:	f003 0304 	and.w	r3, r3, #4
 8030f4c:	2b00      	cmp	r3, #0
 8030f4e:	d1f0      	bne.n	8030f32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8030f50:	687b      	ldr	r3, [r7, #4]
 8030f52:	681b      	ldr	r3, [r3, #0]
 8030f54:	f003 0310 	and.w	r3, r3, #16
 8030f58:	2b00      	cmp	r3, #0
 8030f5a:	f000 80a9 	beq.w	80310b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030f5e:	4b85      	ldr	r3, [pc, #532]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030f60:	691b      	ldr	r3, [r3, #16]
 8030f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030f66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030f68:	4b82      	ldr	r3, [pc, #520]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030f6c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8030f6e:	69bb      	ldr	r3, [r7, #24]
 8030f70:	2b08      	cmp	r3, #8
 8030f72:	d007      	beq.n	8030f84 <HAL_RCC_OscConfig+0x308>
 8030f74:	69bb      	ldr	r3, [r7, #24]
 8030f76:	2b18      	cmp	r3, #24
 8030f78:	d13a      	bne.n	8030ff0 <HAL_RCC_OscConfig+0x374>
 8030f7a:	697b      	ldr	r3, [r7, #20]
 8030f7c:	f003 0303 	and.w	r3, r3, #3
 8030f80:	2b01      	cmp	r3, #1
 8030f82:	d135      	bne.n	8030ff0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030f84:	4b7b      	ldr	r3, [pc, #492]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030f86:	681b      	ldr	r3, [r3, #0]
 8030f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030f8c:	2b00      	cmp	r3, #0
 8030f8e:	d005      	beq.n	8030f9c <HAL_RCC_OscConfig+0x320>
 8030f90:	687b      	ldr	r3, [r7, #4]
 8030f92:	69db      	ldr	r3, [r3, #28]
 8030f94:	2b80      	cmp	r3, #128	; 0x80
 8030f96:	d001      	beq.n	8030f9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8030f98:	2301      	movs	r3, #1
 8030f9a:	e296      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030f9c:	f7f9 feb6 	bl	802ad0c <HAL_GetREVID>
 8030fa0:	4603      	mov	r3, r0
 8030fa2:	f241 0203 	movw	r2, #4099	; 0x1003
 8030fa6:	4293      	cmp	r3, r2
 8030fa8:	d817      	bhi.n	8030fda <HAL_RCC_OscConfig+0x35e>
 8030faa:	687b      	ldr	r3, [r7, #4]
 8030fac:	6a1b      	ldr	r3, [r3, #32]
 8030fae:	2b20      	cmp	r3, #32
 8030fb0:	d108      	bne.n	8030fc4 <HAL_RCC_OscConfig+0x348>
 8030fb2:	4b70      	ldr	r3, [pc, #448]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030fb4:	685b      	ldr	r3, [r3, #4]
 8030fb6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8030fba:	4a6e      	ldr	r2, [pc, #440]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030fbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8030fc0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030fc2:	e075      	b.n	80310b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030fc4:	4b6b      	ldr	r3, [pc, #428]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030fc6:	685b      	ldr	r3, [r3, #4]
 8030fc8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8030fcc:	687b      	ldr	r3, [r7, #4]
 8030fce:	6a1b      	ldr	r3, [r3, #32]
 8030fd0:	069b      	lsls	r3, r3, #26
 8030fd2:	4968      	ldr	r1, [pc, #416]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030fd4:	4313      	orrs	r3, r2
 8030fd6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030fd8:	e06a      	b.n	80310b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030fda:	4b66      	ldr	r3, [pc, #408]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030fdc:	68db      	ldr	r3, [r3, #12]
 8030fde:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8030fe2:	687b      	ldr	r3, [r7, #4]
 8030fe4:	6a1b      	ldr	r3, [r3, #32]
 8030fe6:	061b      	lsls	r3, r3, #24
 8030fe8:	4962      	ldr	r1, [pc, #392]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030fea:	4313      	orrs	r3, r2
 8030fec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030fee:	e05f      	b.n	80310b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8030ff0:	687b      	ldr	r3, [r7, #4]
 8030ff2:	69db      	ldr	r3, [r3, #28]
 8030ff4:	2b00      	cmp	r3, #0
 8030ff6:	d042      	beq.n	803107e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8030ff8:	4b5e      	ldr	r3, [pc, #376]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030ffa:	681b      	ldr	r3, [r3, #0]
 8030ffc:	4a5d      	ldr	r2, [pc, #372]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8030ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8031002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8031004:	f7f9 fe52 	bl	802acac <HAL_GetTick>
 8031008:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 803100a:	e008      	b.n	803101e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 803100c:	f7f9 fe4e 	bl	802acac <HAL_GetTick>
 8031010:	4602      	mov	r2, r0
 8031012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031014:	1ad3      	subs	r3, r2, r3
 8031016:	2b02      	cmp	r3, #2
 8031018:	d901      	bls.n	803101e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 803101a:	2303      	movs	r3, #3
 803101c:	e255      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 803101e:	4b55      	ldr	r3, [pc, #340]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8031020:	681b      	ldr	r3, [r3, #0]
 8031022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031026:	2b00      	cmp	r3, #0
 8031028:	d0f0      	beq.n	803100c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 803102a:	f7f9 fe6f 	bl	802ad0c <HAL_GetREVID>
 803102e:	4603      	mov	r3, r0
 8031030:	f241 0203 	movw	r2, #4099	; 0x1003
 8031034:	4293      	cmp	r3, r2
 8031036:	d817      	bhi.n	8031068 <HAL_RCC_OscConfig+0x3ec>
 8031038:	687b      	ldr	r3, [r7, #4]
 803103a:	6a1b      	ldr	r3, [r3, #32]
 803103c:	2b20      	cmp	r3, #32
 803103e:	d108      	bne.n	8031052 <HAL_RCC_OscConfig+0x3d6>
 8031040:	4b4c      	ldr	r3, [pc, #304]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8031042:	685b      	ldr	r3, [r3, #4]
 8031044:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8031048:	4a4a      	ldr	r2, [pc, #296]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 803104a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803104e:	6053      	str	r3, [r2, #4]
 8031050:	e02e      	b.n	80310b0 <HAL_RCC_OscConfig+0x434>
 8031052:	4b48      	ldr	r3, [pc, #288]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8031054:	685b      	ldr	r3, [r3, #4]
 8031056:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 803105a:	687b      	ldr	r3, [r7, #4]
 803105c:	6a1b      	ldr	r3, [r3, #32]
 803105e:	069b      	lsls	r3, r3, #26
 8031060:	4944      	ldr	r1, [pc, #272]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8031062:	4313      	orrs	r3, r2
 8031064:	604b      	str	r3, [r1, #4]
 8031066:	e023      	b.n	80310b0 <HAL_RCC_OscConfig+0x434>
 8031068:	4b42      	ldr	r3, [pc, #264]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 803106a:	68db      	ldr	r3, [r3, #12]
 803106c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8031070:	687b      	ldr	r3, [r7, #4]
 8031072:	6a1b      	ldr	r3, [r3, #32]
 8031074:	061b      	lsls	r3, r3, #24
 8031076:	493f      	ldr	r1, [pc, #252]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8031078:	4313      	orrs	r3, r2
 803107a:	60cb      	str	r3, [r1, #12]
 803107c:	e018      	b.n	80310b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 803107e:	4b3d      	ldr	r3, [pc, #244]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8031080:	681b      	ldr	r3, [r3, #0]
 8031082:	4a3c      	ldr	r2, [pc, #240]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8031084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8031088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803108a:	f7f9 fe0f 	bl	802acac <HAL_GetTick>
 803108e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8031090:	e008      	b.n	80310a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8031092:	f7f9 fe0b 	bl	802acac <HAL_GetTick>
 8031096:	4602      	mov	r2, r0
 8031098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803109a:	1ad3      	subs	r3, r2, r3
 803109c:	2b02      	cmp	r3, #2
 803109e:	d901      	bls.n	80310a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80310a0:	2303      	movs	r3, #3
 80310a2:	e212      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80310a4:	4b33      	ldr	r3, [pc, #204]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 80310a6:	681b      	ldr	r3, [r3, #0]
 80310a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80310ac:	2b00      	cmp	r3, #0
 80310ae:	d1f0      	bne.n	8031092 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80310b0:	687b      	ldr	r3, [r7, #4]
 80310b2:	681b      	ldr	r3, [r3, #0]
 80310b4:	f003 0308 	and.w	r3, r3, #8
 80310b8:	2b00      	cmp	r3, #0
 80310ba:	d036      	beq.n	803112a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80310bc:	687b      	ldr	r3, [r7, #4]
 80310be:	695b      	ldr	r3, [r3, #20]
 80310c0:	2b00      	cmp	r3, #0
 80310c2:	d019      	beq.n	80310f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80310c4:	4b2b      	ldr	r3, [pc, #172]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 80310c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80310c8:	4a2a      	ldr	r2, [pc, #168]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 80310ca:	f043 0301 	orr.w	r3, r3, #1
 80310ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80310d0:	f7f9 fdec 	bl	802acac <HAL_GetTick>
 80310d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80310d6:	e008      	b.n	80310ea <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80310d8:	f7f9 fde8 	bl	802acac <HAL_GetTick>
 80310dc:	4602      	mov	r2, r0
 80310de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80310e0:	1ad3      	subs	r3, r2, r3
 80310e2:	2b02      	cmp	r3, #2
 80310e4:	d901      	bls.n	80310ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80310e6:	2303      	movs	r3, #3
 80310e8:	e1ef      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80310ea:	4b22      	ldr	r3, [pc, #136]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 80310ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80310ee:	f003 0302 	and.w	r3, r3, #2
 80310f2:	2b00      	cmp	r3, #0
 80310f4:	d0f0      	beq.n	80310d8 <HAL_RCC_OscConfig+0x45c>
 80310f6:	e018      	b.n	803112a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80310f8:	4b1e      	ldr	r3, [pc, #120]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 80310fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80310fc:	4a1d      	ldr	r2, [pc, #116]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 80310fe:	f023 0301 	bic.w	r3, r3, #1
 8031102:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031104:	f7f9 fdd2 	bl	802acac <HAL_GetTick>
 8031108:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 803110a:	e008      	b.n	803111e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 803110c:	f7f9 fdce 	bl	802acac <HAL_GetTick>
 8031110:	4602      	mov	r2, r0
 8031112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031114:	1ad3      	subs	r3, r2, r3
 8031116:	2b02      	cmp	r3, #2
 8031118:	d901      	bls.n	803111e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 803111a:	2303      	movs	r3, #3
 803111c:	e1d5      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 803111e:	4b15      	ldr	r3, [pc, #84]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8031120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8031122:	f003 0302 	and.w	r3, r3, #2
 8031126:	2b00      	cmp	r3, #0
 8031128:	d1f0      	bne.n	803110c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 803112a:	687b      	ldr	r3, [r7, #4]
 803112c:	681b      	ldr	r3, [r3, #0]
 803112e:	f003 0320 	and.w	r3, r3, #32
 8031132:	2b00      	cmp	r3, #0
 8031134:	d039      	beq.n	80311aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8031136:	687b      	ldr	r3, [r7, #4]
 8031138:	699b      	ldr	r3, [r3, #24]
 803113a:	2b00      	cmp	r3, #0
 803113c:	d01c      	beq.n	8031178 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 803113e:	4b0d      	ldr	r3, [pc, #52]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8031140:	681b      	ldr	r3, [r3, #0]
 8031142:	4a0c      	ldr	r2, [pc, #48]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8031144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8031148:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 803114a:	f7f9 fdaf 	bl	802acac <HAL_GetTick>
 803114e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8031150:	e008      	b.n	8031164 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8031152:	f7f9 fdab 	bl	802acac <HAL_GetTick>
 8031156:	4602      	mov	r2, r0
 8031158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803115a:	1ad3      	subs	r3, r2, r3
 803115c:	2b02      	cmp	r3, #2
 803115e:	d901      	bls.n	8031164 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8031160:	2303      	movs	r3, #3
 8031162:	e1b2      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8031164:	4b03      	ldr	r3, [pc, #12]	; (8031174 <HAL_RCC_OscConfig+0x4f8>)
 8031166:	681b      	ldr	r3, [r3, #0]
 8031168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 803116c:	2b00      	cmp	r3, #0
 803116e:	d0f0      	beq.n	8031152 <HAL_RCC_OscConfig+0x4d6>
 8031170:	e01b      	b.n	80311aa <HAL_RCC_OscConfig+0x52e>
 8031172:	bf00      	nop
 8031174:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8031178:	4b9b      	ldr	r3, [pc, #620]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803117a:	681b      	ldr	r3, [r3, #0]
 803117c:	4a9a      	ldr	r2, [pc, #616]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803117e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8031182:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8031184:	f7f9 fd92 	bl	802acac <HAL_GetTick>
 8031188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 803118a:	e008      	b.n	803119e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 803118c:	f7f9 fd8e 	bl	802acac <HAL_GetTick>
 8031190:	4602      	mov	r2, r0
 8031192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031194:	1ad3      	subs	r3, r2, r3
 8031196:	2b02      	cmp	r3, #2
 8031198:	d901      	bls.n	803119e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 803119a:	2303      	movs	r3, #3
 803119c:	e195      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 803119e:	4b92      	ldr	r3, [pc, #584]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80311a0:	681b      	ldr	r3, [r3, #0]
 80311a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80311a6:	2b00      	cmp	r3, #0
 80311a8:	d1f0      	bne.n	803118c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80311aa:	687b      	ldr	r3, [r7, #4]
 80311ac:	681b      	ldr	r3, [r3, #0]
 80311ae:	f003 0304 	and.w	r3, r3, #4
 80311b2:	2b00      	cmp	r3, #0
 80311b4:	f000 8081 	beq.w	80312ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80311b8:	4b8c      	ldr	r3, [pc, #560]	; (80313ec <HAL_RCC_OscConfig+0x770>)
 80311ba:	681b      	ldr	r3, [r3, #0]
 80311bc:	4a8b      	ldr	r2, [pc, #556]	; (80313ec <HAL_RCC_OscConfig+0x770>)
 80311be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80311c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80311c4:	f7f9 fd72 	bl	802acac <HAL_GetTick>
 80311c8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80311ca:	e008      	b.n	80311de <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80311cc:	f7f9 fd6e 	bl	802acac <HAL_GetTick>
 80311d0:	4602      	mov	r2, r0
 80311d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80311d4:	1ad3      	subs	r3, r2, r3
 80311d6:	2b64      	cmp	r3, #100	; 0x64
 80311d8:	d901      	bls.n	80311de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80311da:	2303      	movs	r3, #3
 80311dc:	e175      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80311de:	4b83      	ldr	r3, [pc, #524]	; (80313ec <HAL_RCC_OscConfig+0x770>)
 80311e0:	681b      	ldr	r3, [r3, #0]
 80311e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80311e6:	2b00      	cmp	r3, #0
 80311e8:	d0f0      	beq.n	80311cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80311ea:	687b      	ldr	r3, [r7, #4]
 80311ec:	689b      	ldr	r3, [r3, #8]
 80311ee:	2b01      	cmp	r3, #1
 80311f0:	d106      	bne.n	8031200 <HAL_RCC_OscConfig+0x584>
 80311f2:	4b7d      	ldr	r3, [pc, #500]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80311f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80311f6:	4a7c      	ldr	r2, [pc, #496]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80311f8:	f043 0301 	orr.w	r3, r3, #1
 80311fc:	6713      	str	r3, [r2, #112]	; 0x70
 80311fe:	e02d      	b.n	803125c <HAL_RCC_OscConfig+0x5e0>
 8031200:	687b      	ldr	r3, [r7, #4]
 8031202:	689b      	ldr	r3, [r3, #8]
 8031204:	2b00      	cmp	r3, #0
 8031206:	d10c      	bne.n	8031222 <HAL_RCC_OscConfig+0x5a6>
 8031208:	4b77      	ldr	r3, [pc, #476]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803120a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803120c:	4a76      	ldr	r2, [pc, #472]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803120e:	f023 0301 	bic.w	r3, r3, #1
 8031212:	6713      	str	r3, [r2, #112]	; 0x70
 8031214:	4b74      	ldr	r3, [pc, #464]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031218:	4a73      	ldr	r2, [pc, #460]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803121a:	f023 0304 	bic.w	r3, r3, #4
 803121e:	6713      	str	r3, [r2, #112]	; 0x70
 8031220:	e01c      	b.n	803125c <HAL_RCC_OscConfig+0x5e0>
 8031222:	687b      	ldr	r3, [r7, #4]
 8031224:	689b      	ldr	r3, [r3, #8]
 8031226:	2b05      	cmp	r3, #5
 8031228:	d10c      	bne.n	8031244 <HAL_RCC_OscConfig+0x5c8>
 803122a:	4b6f      	ldr	r3, [pc, #444]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803122e:	4a6e      	ldr	r2, [pc, #440]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031230:	f043 0304 	orr.w	r3, r3, #4
 8031234:	6713      	str	r3, [r2, #112]	; 0x70
 8031236:	4b6c      	ldr	r3, [pc, #432]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803123a:	4a6b      	ldr	r2, [pc, #428]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803123c:	f043 0301 	orr.w	r3, r3, #1
 8031240:	6713      	str	r3, [r2, #112]	; 0x70
 8031242:	e00b      	b.n	803125c <HAL_RCC_OscConfig+0x5e0>
 8031244:	4b68      	ldr	r3, [pc, #416]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031248:	4a67      	ldr	r2, [pc, #412]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803124a:	f023 0301 	bic.w	r3, r3, #1
 803124e:	6713      	str	r3, [r2, #112]	; 0x70
 8031250:	4b65      	ldr	r3, [pc, #404]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031254:	4a64      	ldr	r2, [pc, #400]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031256:	f023 0304 	bic.w	r3, r3, #4
 803125a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 803125c:	687b      	ldr	r3, [r7, #4]
 803125e:	689b      	ldr	r3, [r3, #8]
 8031260:	2b00      	cmp	r3, #0
 8031262:	d015      	beq.n	8031290 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031264:	f7f9 fd22 	bl	802acac <HAL_GetTick>
 8031268:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 803126a:	e00a      	b.n	8031282 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 803126c:	f7f9 fd1e 	bl	802acac <HAL_GetTick>
 8031270:	4602      	mov	r2, r0
 8031272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031274:	1ad3      	subs	r3, r2, r3
 8031276:	f241 3288 	movw	r2, #5000	; 0x1388
 803127a:	4293      	cmp	r3, r2
 803127c:	d901      	bls.n	8031282 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 803127e:	2303      	movs	r3, #3
 8031280:	e123      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8031282:	4b59      	ldr	r3, [pc, #356]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031286:	f003 0302 	and.w	r3, r3, #2
 803128a:	2b00      	cmp	r3, #0
 803128c:	d0ee      	beq.n	803126c <HAL_RCC_OscConfig+0x5f0>
 803128e:	e014      	b.n	80312ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031290:	f7f9 fd0c 	bl	802acac <HAL_GetTick>
 8031294:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8031296:	e00a      	b.n	80312ae <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8031298:	f7f9 fd08 	bl	802acac <HAL_GetTick>
 803129c:	4602      	mov	r2, r0
 803129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80312a0:	1ad3      	subs	r3, r2, r3
 80312a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80312a6:	4293      	cmp	r3, r2
 80312a8:	d901      	bls.n	80312ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80312aa:	2303      	movs	r3, #3
 80312ac:	e10d      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80312ae:	4b4e      	ldr	r3, [pc, #312]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80312b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80312b2:	f003 0302 	and.w	r3, r3, #2
 80312b6:	2b00      	cmp	r3, #0
 80312b8:	d1ee      	bne.n	8031298 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80312ba:	687b      	ldr	r3, [r7, #4]
 80312bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80312be:	2b00      	cmp	r3, #0
 80312c0:	f000 8102 	beq.w	80314c8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80312c4:	4b48      	ldr	r3, [pc, #288]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80312c6:	691b      	ldr	r3, [r3, #16]
 80312c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80312cc:	2b18      	cmp	r3, #24
 80312ce:	f000 80bd 	beq.w	803144c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80312d2:	687b      	ldr	r3, [r7, #4]
 80312d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80312d6:	2b02      	cmp	r3, #2
 80312d8:	f040 809e 	bne.w	8031418 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80312dc:	4b42      	ldr	r3, [pc, #264]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80312de:	681b      	ldr	r3, [r3, #0]
 80312e0:	4a41      	ldr	r2, [pc, #260]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80312e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80312e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80312e8:	f7f9 fce0 	bl	802acac <HAL_GetTick>
 80312ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80312ee:	e008      	b.n	8031302 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80312f0:	f7f9 fcdc 	bl	802acac <HAL_GetTick>
 80312f4:	4602      	mov	r2, r0
 80312f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80312f8:	1ad3      	subs	r3, r2, r3
 80312fa:	2b02      	cmp	r3, #2
 80312fc:	d901      	bls.n	8031302 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80312fe:	2303      	movs	r3, #3
 8031300:	e0e3      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8031302:	4b39      	ldr	r3, [pc, #228]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031304:	681b      	ldr	r3, [r3, #0]
 8031306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 803130a:	2b00      	cmp	r3, #0
 803130c:	d1f0      	bne.n	80312f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 803130e:	4b36      	ldr	r3, [pc, #216]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8031312:	4b37      	ldr	r3, [pc, #220]	; (80313f0 <HAL_RCC_OscConfig+0x774>)
 8031314:	4013      	ands	r3, r2
 8031316:	687a      	ldr	r2, [r7, #4]
 8031318:	6a91      	ldr	r1, [r2, #40]	; 0x28
 803131a:	687a      	ldr	r2, [r7, #4]
 803131c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 803131e:	0112      	lsls	r2, r2, #4
 8031320:	430a      	orrs	r2, r1
 8031322:	4931      	ldr	r1, [pc, #196]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031324:	4313      	orrs	r3, r2
 8031326:	628b      	str	r3, [r1, #40]	; 0x28
 8031328:	687b      	ldr	r3, [r7, #4]
 803132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803132c:	3b01      	subs	r3, #1
 803132e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8031332:	687b      	ldr	r3, [r7, #4]
 8031334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031336:	3b01      	subs	r3, #1
 8031338:	025b      	lsls	r3, r3, #9
 803133a:	b29b      	uxth	r3, r3
 803133c:	431a      	orrs	r2, r3
 803133e:	687b      	ldr	r3, [r7, #4]
 8031340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031342:	3b01      	subs	r3, #1
 8031344:	041b      	lsls	r3, r3, #16
 8031346:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 803134a:	431a      	orrs	r2, r3
 803134c:	687b      	ldr	r3, [r7, #4]
 803134e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031350:	3b01      	subs	r3, #1
 8031352:	061b      	lsls	r3, r3, #24
 8031354:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8031358:	4923      	ldr	r1, [pc, #140]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803135a:	4313      	orrs	r3, r2
 803135c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 803135e:	4b22      	ldr	r3, [pc, #136]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031362:	4a21      	ldr	r2, [pc, #132]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031364:	f023 0301 	bic.w	r3, r3, #1
 8031368:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 803136a:	4b1f      	ldr	r3, [pc, #124]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803136c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803136e:	4b21      	ldr	r3, [pc, #132]	; (80313f4 <HAL_RCC_OscConfig+0x778>)
 8031370:	4013      	ands	r3, r2
 8031372:	687a      	ldr	r2, [r7, #4]
 8031374:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8031376:	00d2      	lsls	r2, r2, #3
 8031378:	491b      	ldr	r1, [pc, #108]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803137a:	4313      	orrs	r3, r2
 803137c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 803137e:	4b1a      	ldr	r3, [pc, #104]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031382:	f023 020c 	bic.w	r2, r3, #12
 8031386:	687b      	ldr	r3, [r7, #4]
 8031388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803138a:	4917      	ldr	r1, [pc, #92]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803138c:	4313      	orrs	r3, r2
 803138e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8031390:	4b15      	ldr	r3, [pc, #84]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 8031392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031394:	f023 0202 	bic.w	r2, r3, #2
 8031398:	687b      	ldr	r3, [r7, #4]
 803139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803139c:	4912      	ldr	r1, [pc, #72]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 803139e:	4313      	orrs	r3, r2
 80313a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80313a2:	4b11      	ldr	r3, [pc, #68]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80313a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80313a6:	4a10      	ldr	r2, [pc, #64]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80313a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80313ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80313ae:	4b0e      	ldr	r3, [pc, #56]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80313b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80313b2:	4a0d      	ldr	r2, [pc, #52]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80313b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80313b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80313ba:	4b0b      	ldr	r3, [pc, #44]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80313bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80313be:	4a0a      	ldr	r2, [pc, #40]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80313c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80313c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80313c6:	4b08      	ldr	r3, [pc, #32]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80313c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80313ca:	4a07      	ldr	r2, [pc, #28]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80313cc:	f043 0301 	orr.w	r3, r3, #1
 80313d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80313d2:	4b05      	ldr	r3, [pc, #20]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80313d4:	681b      	ldr	r3, [r3, #0]
 80313d6:	4a04      	ldr	r2, [pc, #16]	; (80313e8 <HAL_RCC_OscConfig+0x76c>)
 80313d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80313dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80313de:	f7f9 fc65 	bl	802acac <HAL_GetTick>
 80313e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80313e4:	e011      	b.n	803140a <HAL_RCC_OscConfig+0x78e>
 80313e6:	bf00      	nop
 80313e8:	58024400 	.word	0x58024400
 80313ec:	58024800 	.word	0x58024800
 80313f0:	fffffc0c 	.word	0xfffffc0c
 80313f4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80313f8:	f7f9 fc58 	bl	802acac <HAL_GetTick>
 80313fc:	4602      	mov	r2, r0
 80313fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031400:	1ad3      	subs	r3, r2, r3
 8031402:	2b02      	cmp	r3, #2
 8031404:	d901      	bls.n	803140a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8031406:	2303      	movs	r3, #3
 8031408:	e05f      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 803140a:	4b32      	ldr	r3, [pc, #200]	; (80314d4 <HAL_RCC_OscConfig+0x858>)
 803140c:	681b      	ldr	r3, [r3, #0]
 803140e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031412:	2b00      	cmp	r3, #0
 8031414:	d0f0      	beq.n	80313f8 <HAL_RCC_OscConfig+0x77c>
 8031416:	e057      	b.n	80314c8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8031418:	4b2e      	ldr	r3, [pc, #184]	; (80314d4 <HAL_RCC_OscConfig+0x858>)
 803141a:	681b      	ldr	r3, [r3, #0]
 803141c:	4a2d      	ldr	r2, [pc, #180]	; (80314d4 <HAL_RCC_OscConfig+0x858>)
 803141e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8031422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8031424:	f7f9 fc42 	bl	802acac <HAL_GetTick>
 8031428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 803142a:	e008      	b.n	803143e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 803142c:	f7f9 fc3e 	bl	802acac <HAL_GetTick>
 8031430:	4602      	mov	r2, r0
 8031432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031434:	1ad3      	subs	r3, r2, r3
 8031436:	2b02      	cmp	r3, #2
 8031438:	d901      	bls.n	803143e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 803143a:	2303      	movs	r3, #3
 803143c:	e045      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 803143e:	4b25      	ldr	r3, [pc, #148]	; (80314d4 <HAL_RCC_OscConfig+0x858>)
 8031440:	681b      	ldr	r3, [r3, #0]
 8031442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031446:	2b00      	cmp	r3, #0
 8031448:	d1f0      	bne.n	803142c <HAL_RCC_OscConfig+0x7b0>
 803144a:	e03d      	b.n	80314c8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 803144c:	4b21      	ldr	r3, [pc, #132]	; (80314d4 <HAL_RCC_OscConfig+0x858>)
 803144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8031450:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8031452:	4b20      	ldr	r3, [pc, #128]	; (80314d4 <HAL_RCC_OscConfig+0x858>)
 8031454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031456:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8031458:	687b      	ldr	r3, [r7, #4]
 803145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803145c:	2b01      	cmp	r3, #1
 803145e:	d031      	beq.n	80314c4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8031460:	693b      	ldr	r3, [r7, #16]
 8031462:	f003 0203 	and.w	r2, r3, #3
 8031466:	687b      	ldr	r3, [r7, #4]
 8031468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 803146a:	429a      	cmp	r2, r3
 803146c:	d12a      	bne.n	80314c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 803146e:	693b      	ldr	r3, [r7, #16]
 8031470:	091b      	lsrs	r3, r3, #4
 8031472:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8031476:	687b      	ldr	r3, [r7, #4]
 8031478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 803147a:	429a      	cmp	r2, r3
 803147c:	d122      	bne.n	80314c4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 803147e:	68fb      	ldr	r3, [r7, #12]
 8031480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8031484:	687b      	ldr	r3, [r7, #4]
 8031486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031488:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 803148a:	429a      	cmp	r2, r3
 803148c:	d11a      	bne.n	80314c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 803148e:	68fb      	ldr	r3, [r7, #12]
 8031490:	0a5b      	lsrs	r3, r3, #9
 8031492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8031496:	687b      	ldr	r3, [r7, #4]
 8031498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803149a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 803149c:	429a      	cmp	r2, r3
 803149e:	d111      	bne.n	80314c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80314a0:	68fb      	ldr	r3, [r7, #12]
 80314a2:	0c1b      	lsrs	r3, r3, #16
 80314a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80314a8:	687b      	ldr	r3, [r7, #4]
 80314aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80314ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80314ae:	429a      	cmp	r2, r3
 80314b0:	d108      	bne.n	80314c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80314b2:	68fb      	ldr	r3, [r7, #12]
 80314b4:	0e1b      	lsrs	r3, r3, #24
 80314b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80314ba:	687b      	ldr	r3, [r7, #4]
 80314bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80314be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80314c0:	429a      	cmp	r2, r3
 80314c2:	d001      	beq.n	80314c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80314c4:	2301      	movs	r3, #1
 80314c6:	e000      	b.n	80314ca <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80314c8:	2300      	movs	r3, #0
}
 80314ca:	4618      	mov	r0, r3
 80314cc:	3730      	adds	r7, #48	; 0x30
 80314ce:	46bd      	mov	sp, r7
 80314d0:	bd80      	pop	{r7, pc}
 80314d2:	bf00      	nop
 80314d4:	58024400 	.word	0x58024400

080314d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80314d8:	b580      	push	{r7, lr}
 80314da:	b086      	sub	sp, #24
 80314dc:	af00      	add	r7, sp, #0
 80314de:	6078      	str	r0, [r7, #4]
 80314e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80314e2:	687b      	ldr	r3, [r7, #4]
 80314e4:	2b00      	cmp	r3, #0
 80314e6:	d101      	bne.n	80314ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80314e8:	2301      	movs	r3, #1
 80314ea:	e19c      	b.n	8031826 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80314ec:	4b8a      	ldr	r3, [pc, #552]	; (8031718 <HAL_RCC_ClockConfig+0x240>)
 80314ee:	681b      	ldr	r3, [r3, #0]
 80314f0:	f003 030f 	and.w	r3, r3, #15
 80314f4:	683a      	ldr	r2, [r7, #0]
 80314f6:	429a      	cmp	r2, r3
 80314f8:	d910      	bls.n	803151c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80314fa:	4b87      	ldr	r3, [pc, #540]	; (8031718 <HAL_RCC_ClockConfig+0x240>)
 80314fc:	681b      	ldr	r3, [r3, #0]
 80314fe:	f023 020f 	bic.w	r2, r3, #15
 8031502:	4985      	ldr	r1, [pc, #532]	; (8031718 <HAL_RCC_ClockConfig+0x240>)
 8031504:	683b      	ldr	r3, [r7, #0]
 8031506:	4313      	orrs	r3, r2
 8031508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 803150a:	4b83      	ldr	r3, [pc, #524]	; (8031718 <HAL_RCC_ClockConfig+0x240>)
 803150c:	681b      	ldr	r3, [r3, #0]
 803150e:	f003 030f 	and.w	r3, r3, #15
 8031512:	683a      	ldr	r2, [r7, #0]
 8031514:	429a      	cmp	r2, r3
 8031516:	d001      	beq.n	803151c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8031518:	2301      	movs	r3, #1
 803151a:	e184      	b.n	8031826 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 803151c:	687b      	ldr	r3, [r7, #4]
 803151e:	681b      	ldr	r3, [r3, #0]
 8031520:	f003 0304 	and.w	r3, r3, #4
 8031524:	2b00      	cmp	r3, #0
 8031526:	d010      	beq.n	803154a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8031528:	687b      	ldr	r3, [r7, #4]
 803152a:	691a      	ldr	r2, [r3, #16]
 803152c:	4b7b      	ldr	r3, [pc, #492]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 803152e:	699b      	ldr	r3, [r3, #24]
 8031530:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031534:	429a      	cmp	r2, r3
 8031536:	d908      	bls.n	803154a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8031538:	4b78      	ldr	r3, [pc, #480]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 803153a:	699b      	ldr	r3, [r3, #24]
 803153c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8031540:	687b      	ldr	r3, [r7, #4]
 8031542:	691b      	ldr	r3, [r3, #16]
 8031544:	4975      	ldr	r1, [pc, #468]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 8031546:	4313      	orrs	r3, r2
 8031548:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 803154a:	687b      	ldr	r3, [r7, #4]
 803154c:	681b      	ldr	r3, [r3, #0]
 803154e:	f003 0308 	and.w	r3, r3, #8
 8031552:	2b00      	cmp	r3, #0
 8031554:	d010      	beq.n	8031578 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8031556:	687b      	ldr	r3, [r7, #4]
 8031558:	695a      	ldr	r2, [r3, #20]
 803155a:	4b70      	ldr	r3, [pc, #448]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 803155c:	69db      	ldr	r3, [r3, #28]
 803155e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031562:	429a      	cmp	r2, r3
 8031564:	d908      	bls.n	8031578 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8031566:	4b6d      	ldr	r3, [pc, #436]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 8031568:	69db      	ldr	r3, [r3, #28]
 803156a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 803156e:	687b      	ldr	r3, [r7, #4]
 8031570:	695b      	ldr	r3, [r3, #20]
 8031572:	496a      	ldr	r1, [pc, #424]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 8031574:	4313      	orrs	r3, r2
 8031576:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8031578:	687b      	ldr	r3, [r7, #4]
 803157a:	681b      	ldr	r3, [r3, #0]
 803157c:	f003 0310 	and.w	r3, r3, #16
 8031580:	2b00      	cmp	r3, #0
 8031582:	d010      	beq.n	80315a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8031584:	687b      	ldr	r3, [r7, #4]
 8031586:	699a      	ldr	r2, [r3, #24]
 8031588:	4b64      	ldr	r3, [pc, #400]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 803158a:	69db      	ldr	r3, [r3, #28]
 803158c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8031590:	429a      	cmp	r2, r3
 8031592:	d908      	bls.n	80315a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8031594:	4b61      	ldr	r3, [pc, #388]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 8031596:	69db      	ldr	r3, [r3, #28]
 8031598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 803159c:	687b      	ldr	r3, [r7, #4]
 803159e:	699b      	ldr	r3, [r3, #24]
 80315a0:	495e      	ldr	r1, [pc, #376]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 80315a2:	4313      	orrs	r3, r2
 80315a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80315a6:	687b      	ldr	r3, [r7, #4]
 80315a8:	681b      	ldr	r3, [r3, #0]
 80315aa:	f003 0320 	and.w	r3, r3, #32
 80315ae:	2b00      	cmp	r3, #0
 80315b0:	d010      	beq.n	80315d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80315b2:	687b      	ldr	r3, [r7, #4]
 80315b4:	69da      	ldr	r2, [r3, #28]
 80315b6:	4b59      	ldr	r3, [pc, #356]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 80315b8:	6a1b      	ldr	r3, [r3, #32]
 80315ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80315be:	429a      	cmp	r2, r3
 80315c0:	d908      	bls.n	80315d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80315c2:	4b56      	ldr	r3, [pc, #344]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 80315c4:	6a1b      	ldr	r3, [r3, #32]
 80315c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80315ca:	687b      	ldr	r3, [r7, #4]
 80315cc:	69db      	ldr	r3, [r3, #28]
 80315ce:	4953      	ldr	r1, [pc, #332]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 80315d0:	4313      	orrs	r3, r2
 80315d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80315d4:	687b      	ldr	r3, [r7, #4]
 80315d6:	681b      	ldr	r3, [r3, #0]
 80315d8:	f003 0302 	and.w	r3, r3, #2
 80315dc:	2b00      	cmp	r3, #0
 80315de:	d010      	beq.n	8031602 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80315e0:	687b      	ldr	r3, [r7, #4]
 80315e2:	68da      	ldr	r2, [r3, #12]
 80315e4:	4b4d      	ldr	r3, [pc, #308]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 80315e6:	699b      	ldr	r3, [r3, #24]
 80315e8:	f003 030f 	and.w	r3, r3, #15
 80315ec:	429a      	cmp	r2, r3
 80315ee:	d908      	bls.n	8031602 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80315f0:	4b4a      	ldr	r3, [pc, #296]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 80315f2:	699b      	ldr	r3, [r3, #24]
 80315f4:	f023 020f 	bic.w	r2, r3, #15
 80315f8:	687b      	ldr	r3, [r7, #4]
 80315fa:	68db      	ldr	r3, [r3, #12]
 80315fc:	4947      	ldr	r1, [pc, #284]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 80315fe:	4313      	orrs	r3, r2
 8031600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8031602:	687b      	ldr	r3, [r7, #4]
 8031604:	681b      	ldr	r3, [r3, #0]
 8031606:	f003 0301 	and.w	r3, r3, #1
 803160a:	2b00      	cmp	r3, #0
 803160c:	d055      	beq.n	80316ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 803160e:	4b43      	ldr	r3, [pc, #268]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 8031610:	699b      	ldr	r3, [r3, #24]
 8031612:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8031616:	687b      	ldr	r3, [r7, #4]
 8031618:	689b      	ldr	r3, [r3, #8]
 803161a:	4940      	ldr	r1, [pc, #256]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 803161c:	4313      	orrs	r3, r2
 803161e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8031620:	687b      	ldr	r3, [r7, #4]
 8031622:	685b      	ldr	r3, [r3, #4]
 8031624:	2b02      	cmp	r3, #2
 8031626:	d107      	bne.n	8031638 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8031628:	4b3c      	ldr	r3, [pc, #240]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 803162a:	681b      	ldr	r3, [r3, #0]
 803162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8031630:	2b00      	cmp	r3, #0
 8031632:	d121      	bne.n	8031678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031634:	2301      	movs	r3, #1
 8031636:	e0f6      	b.n	8031826 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8031638:	687b      	ldr	r3, [r7, #4]
 803163a:	685b      	ldr	r3, [r3, #4]
 803163c:	2b03      	cmp	r3, #3
 803163e:	d107      	bne.n	8031650 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8031640:	4b36      	ldr	r3, [pc, #216]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 8031642:	681b      	ldr	r3, [r3, #0]
 8031644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031648:	2b00      	cmp	r3, #0
 803164a:	d115      	bne.n	8031678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 803164c:	2301      	movs	r3, #1
 803164e:	e0ea      	b.n	8031826 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8031650:	687b      	ldr	r3, [r7, #4]
 8031652:	685b      	ldr	r3, [r3, #4]
 8031654:	2b01      	cmp	r3, #1
 8031656:	d107      	bne.n	8031668 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8031658:	4b30      	ldr	r3, [pc, #192]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 803165a:	681b      	ldr	r3, [r3, #0]
 803165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031660:	2b00      	cmp	r3, #0
 8031662:	d109      	bne.n	8031678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031664:	2301      	movs	r3, #1
 8031666:	e0de      	b.n	8031826 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8031668:	4b2c      	ldr	r3, [pc, #176]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 803166a:	681b      	ldr	r3, [r3, #0]
 803166c:	f003 0304 	and.w	r3, r3, #4
 8031670:	2b00      	cmp	r3, #0
 8031672:	d101      	bne.n	8031678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031674:	2301      	movs	r3, #1
 8031676:	e0d6      	b.n	8031826 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8031678:	4b28      	ldr	r3, [pc, #160]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 803167a:	691b      	ldr	r3, [r3, #16]
 803167c:	f023 0207 	bic.w	r2, r3, #7
 8031680:	687b      	ldr	r3, [r7, #4]
 8031682:	685b      	ldr	r3, [r3, #4]
 8031684:	4925      	ldr	r1, [pc, #148]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 8031686:	4313      	orrs	r3, r2
 8031688:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 803168a:	f7f9 fb0f 	bl	802acac <HAL_GetTick>
 803168e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8031690:	e00a      	b.n	80316a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8031692:	f7f9 fb0b 	bl	802acac <HAL_GetTick>
 8031696:	4602      	mov	r2, r0
 8031698:	697b      	ldr	r3, [r7, #20]
 803169a:	1ad3      	subs	r3, r2, r3
 803169c:	f241 3288 	movw	r2, #5000	; 0x1388
 80316a0:	4293      	cmp	r3, r2
 80316a2:	d901      	bls.n	80316a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80316a4:	2303      	movs	r3, #3
 80316a6:	e0be      	b.n	8031826 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80316a8:	4b1c      	ldr	r3, [pc, #112]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 80316aa:	691b      	ldr	r3, [r3, #16]
 80316ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80316b0:	687b      	ldr	r3, [r7, #4]
 80316b2:	685b      	ldr	r3, [r3, #4]
 80316b4:	00db      	lsls	r3, r3, #3
 80316b6:	429a      	cmp	r2, r3
 80316b8:	d1eb      	bne.n	8031692 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80316ba:	687b      	ldr	r3, [r7, #4]
 80316bc:	681b      	ldr	r3, [r3, #0]
 80316be:	f003 0302 	and.w	r3, r3, #2
 80316c2:	2b00      	cmp	r3, #0
 80316c4:	d010      	beq.n	80316e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80316c6:	687b      	ldr	r3, [r7, #4]
 80316c8:	68da      	ldr	r2, [r3, #12]
 80316ca:	4b14      	ldr	r3, [pc, #80]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 80316cc:	699b      	ldr	r3, [r3, #24]
 80316ce:	f003 030f 	and.w	r3, r3, #15
 80316d2:	429a      	cmp	r2, r3
 80316d4:	d208      	bcs.n	80316e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80316d6:	4b11      	ldr	r3, [pc, #68]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 80316d8:	699b      	ldr	r3, [r3, #24]
 80316da:	f023 020f 	bic.w	r2, r3, #15
 80316de:	687b      	ldr	r3, [r7, #4]
 80316e0:	68db      	ldr	r3, [r3, #12]
 80316e2:	490e      	ldr	r1, [pc, #56]	; (803171c <HAL_RCC_ClockConfig+0x244>)
 80316e4:	4313      	orrs	r3, r2
 80316e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80316e8:	4b0b      	ldr	r3, [pc, #44]	; (8031718 <HAL_RCC_ClockConfig+0x240>)
 80316ea:	681b      	ldr	r3, [r3, #0]
 80316ec:	f003 030f 	and.w	r3, r3, #15
 80316f0:	683a      	ldr	r2, [r7, #0]
 80316f2:	429a      	cmp	r2, r3
 80316f4:	d214      	bcs.n	8031720 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80316f6:	4b08      	ldr	r3, [pc, #32]	; (8031718 <HAL_RCC_ClockConfig+0x240>)
 80316f8:	681b      	ldr	r3, [r3, #0]
 80316fa:	f023 020f 	bic.w	r2, r3, #15
 80316fe:	4906      	ldr	r1, [pc, #24]	; (8031718 <HAL_RCC_ClockConfig+0x240>)
 8031700:	683b      	ldr	r3, [r7, #0]
 8031702:	4313      	orrs	r3, r2
 8031704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8031706:	4b04      	ldr	r3, [pc, #16]	; (8031718 <HAL_RCC_ClockConfig+0x240>)
 8031708:	681b      	ldr	r3, [r3, #0]
 803170a:	f003 030f 	and.w	r3, r3, #15
 803170e:	683a      	ldr	r2, [r7, #0]
 8031710:	429a      	cmp	r2, r3
 8031712:	d005      	beq.n	8031720 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8031714:	2301      	movs	r3, #1
 8031716:	e086      	b.n	8031826 <HAL_RCC_ClockConfig+0x34e>
 8031718:	52002000 	.word	0x52002000
 803171c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8031720:	687b      	ldr	r3, [r7, #4]
 8031722:	681b      	ldr	r3, [r3, #0]
 8031724:	f003 0304 	and.w	r3, r3, #4
 8031728:	2b00      	cmp	r3, #0
 803172a:	d010      	beq.n	803174e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 803172c:	687b      	ldr	r3, [r7, #4]
 803172e:	691a      	ldr	r2, [r3, #16]
 8031730:	4b3f      	ldr	r3, [pc, #252]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 8031732:	699b      	ldr	r3, [r3, #24]
 8031734:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031738:	429a      	cmp	r2, r3
 803173a:	d208      	bcs.n	803174e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 803173c:	4b3c      	ldr	r3, [pc, #240]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 803173e:	699b      	ldr	r3, [r3, #24]
 8031740:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8031744:	687b      	ldr	r3, [r7, #4]
 8031746:	691b      	ldr	r3, [r3, #16]
 8031748:	4939      	ldr	r1, [pc, #228]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 803174a:	4313      	orrs	r3, r2
 803174c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 803174e:	687b      	ldr	r3, [r7, #4]
 8031750:	681b      	ldr	r3, [r3, #0]
 8031752:	f003 0308 	and.w	r3, r3, #8
 8031756:	2b00      	cmp	r3, #0
 8031758:	d010      	beq.n	803177c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 803175a:	687b      	ldr	r3, [r7, #4]
 803175c:	695a      	ldr	r2, [r3, #20]
 803175e:	4b34      	ldr	r3, [pc, #208]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 8031760:	69db      	ldr	r3, [r3, #28]
 8031762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031766:	429a      	cmp	r2, r3
 8031768:	d208      	bcs.n	803177c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 803176a:	4b31      	ldr	r3, [pc, #196]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 803176c:	69db      	ldr	r3, [r3, #28]
 803176e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8031772:	687b      	ldr	r3, [r7, #4]
 8031774:	695b      	ldr	r3, [r3, #20]
 8031776:	492e      	ldr	r1, [pc, #184]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 8031778:	4313      	orrs	r3, r2
 803177a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 803177c:	687b      	ldr	r3, [r7, #4]
 803177e:	681b      	ldr	r3, [r3, #0]
 8031780:	f003 0310 	and.w	r3, r3, #16
 8031784:	2b00      	cmp	r3, #0
 8031786:	d010      	beq.n	80317aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8031788:	687b      	ldr	r3, [r7, #4]
 803178a:	699a      	ldr	r2, [r3, #24]
 803178c:	4b28      	ldr	r3, [pc, #160]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 803178e:	69db      	ldr	r3, [r3, #28]
 8031790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8031794:	429a      	cmp	r2, r3
 8031796:	d208      	bcs.n	80317aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8031798:	4b25      	ldr	r3, [pc, #148]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 803179a:	69db      	ldr	r3, [r3, #28]
 803179c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80317a0:	687b      	ldr	r3, [r7, #4]
 80317a2:	699b      	ldr	r3, [r3, #24]
 80317a4:	4922      	ldr	r1, [pc, #136]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 80317a6:	4313      	orrs	r3, r2
 80317a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80317aa:	687b      	ldr	r3, [r7, #4]
 80317ac:	681b      	ldr	r3, [r3, #0]
 80317ae:	f003 0320 	and.w	r3, r3, #32
 80317b2:	2b00      	cmp	r3, #0
 80317b4:	d010      	beq.n	80317d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80317b6:	687b      	ldr	r3, [r7, #4]
 80317b8:	69da      	ldr	r2, [r3, #28]
 80317ba:	4b1d      	ldr	r3, [pc, #116]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 80317bc:	6a1b      	ldr	r3, [r3, #32]
 80317be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80317c2:	429a      	cmp	r2, r3
 80317c4:	d208      	bcs.n	80317d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80317c6:	4b1a      	ldr	r3, [pc, #104]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 80317c8:	6a1b      	ldr	r3, [r3, #32]
 80317ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80317ce:	687b      	ldr	r3, [r7, #4]
 80317d0:	69db      	ldr	r3, [r3, #28]
 80317d2:	4917      	ldr	r1, [pc, #92]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 80317d4:	4313      	orrs	r3, r2
 80317d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80317d8:	f000 f834 	bl	8031844 <HAL_RCC_GetSysClockFreq>
 80317dc:	4602      	mov	r2, r0
 80317de:	4b14      	ldr	r3, [pc, #80]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 80317e0:	699b      	ldr	r3, [r3, #24]
 80317e2:	0a1b      	lsrs	r3, r3, #8
 80317e4:	f003 030f 	and.w	r3, r3, #15
 80317e8:	4912      	ldr	r1, [pc, #72]	; (8031834 <HAL_RCC_ClockConfig+0x35c>)
 80317ea:	5ccb      	ldrb	r3, [r1, r3]
 80317ec:	f003 031f 	and.w	r3, r3, #31
 80317f0:	fa22 f303 	lsr.w	r3, r2, r3
 80317f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80317f6:	4b0e      	ldr	r3, [pc, #56]	; (8031830 <HAL_RCC_ClockConfig+0x358>)
 80317f8:	699b      	ldr	r3, [r3, #24]
 80317fa:	f003 030f 	and.w	r3, r3, #15
 80317fe:	4a0d      	ldr	r2, [pc, #52]	; (8031834 <HAL_RCC_ClockConfig+0x35c>)
 8031800:	5cd3      	ldrb	r3, [r2, r3]
 8031802:	f003 031f 	and.w	r3, r3, #31
 8031806:	693a      	ldr	r2, [r7, #16]
 8031808:	fa22 f303 	lsr.w	r3, r2, r3
 803180c:	4a0a      	ldr	r2, [pc, #40]	; (8031838 <HAL_RCC_ClockConfig+0x360>)
 803180e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8031810:	4a0a      	ldr	r2, [pc, #40]	; (803183c <HAL_RCC_ClockConfig+0x364>)
 8031812:	693b      	ldr	r3, [r7, #16]
 8031814:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8031816:	4b0a      	ldr	r3, [pc, #40]	; (8031840 <HAL_RCC_ClockConfig+0x368>)
 8031818:	681b      	ldr	r3, [r3, #0]
 803181a:	4618      	mov	r0, r3
 803181c:	f7f9 f9fc 	bl	802ac18 <HAL_InitTick>
 8031820:	4603      	mov	r3, r0
 8031822:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8031824:	7bfb      	ldrb	r3, [r7, #15]
}
 8031826:	4618      	mov	r0, r3
 8031828:	3718      	adds	r7, #24
 803182a:	46bd      	mov	sp, r7
 803182c:	bd80      	pop	{r7, pc}
 803182e:	bf00      	nop
 8031830:	58024400 	.word	0x58024400
 8031834:	08058560 	.word	0x08058560
 8031838:	24000008 	.word	0x24000008
 803183c:	24000004 	.word	0x24000004
 8031840:	2400000c 	.word	0x2400000c

08031844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8031844:	b480      	push	{r7}
 8031846:	b089      	sub	sp, #36	; 0x24
 8031848:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 803184a:	4bb3      	ldr	r3, [pc, #716]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803184c:	691b      	ldr	r3, [r3, #16]
 803184e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8031852:	2b18      	cmp	r3, #24
 8031854:	f200 8155 	bhi.w	8031b02 <HAL_RCC_GetSysClockFreq+0x2be>
 8031858:	a201      	add	r2, pc, #4	; (adr r2, 8031860 <HAL_RCC_GetSysClockFreq+0x1c>)
 803185a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803185e:	bf00      	nop
 8031860:	080318c5 	.word	0x080318c5
 8031864:	08031b03 	.word	0x08031b03
 8031868:	08031b03 	.word	0x08031b03
 803186c:	08031b03 	.word	0x08031b03
 8031870:	08031b03 	.word	0x08031b03
 8031874:	08031b03 	.word	0x08031b03
 8031878:	08031b03 	.word	0x08031b03
 803187c:	08031b03 	.word	0x08031b03
 8031880:	080318eb 	.word	0x080318eb
 8031884:	08031b03 	.word	0x08031b03
 8031888:	08031b03 	.word	0x08031b03
 803188c:	08031b03 	.word	0x08031b03
 8031890:	08031b03 	.word	0x08031b03
 8031894:	08031b03 	.word	0x08031b03
 8031898:	08031b03 	.word	0x08031b03
 803189c:	08031b03 	.word	0x08031b03
 80318a0:	080318f1 	.word	0x080318f1
 80318a4:	08031b03 	.word	0x08031b03
 80318a8:	08031b03 	.word	0x08031b03
 80318ac:	08031b03 	.word	0x08031b03
 80318b0:	08031b03 	.word	0x08031b03
 80318b4:	08031b03 	.word	0x08031b03
 80318b8:	08031b03 	.word	0x08031b03
 80318bc:	08031b03 	.word	0x08031b03
 80318c0:	080318f7 	.word	0x080318f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80318c4:	4b94      	ldr	r3, [pc, #592]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318c6:	681b      	ldr	r3, [r3, #0]
 80318c8:	f003 0320 	and.w	r3, r3, #32
 80318cc:	2b00      	cmp	r3, #0
 80318ce:	d009      	beq.n	80318e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80318d0:	4b91      	ldr	r3, [pc, #580]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318d2:	681b      	ldr	r3, [r3, #0]
 80318d4:	08db      	lsrs	r3, r3, #3
 80318d6:	f003 0303 	and.w	r3, r3, #3
 80318da:	4a90      	ldr	r2, [pc, #576]	; (8031b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80318dc:	fa22 f303 	lsr.w	r3, r2, r3
 80318e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80318e2:	e111      	b.n	8031b08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80318e4:	4b8d      	ldr	r3, [pc, #564]	; (8031b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80318e6:	61bb      	str	r3, [r7, #24]
    break;
 80318e8:	e10e      	b.n	8031b08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80318ea:	4b8d      	ldr	r3, [pc, #564]	; (8031b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80318ec:	61bb      	str	r3, [r7, #24]
    break;
 80318ee:	e10b      	b.n	8031b08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80318f0:	4b8c      	ldr	r3, [pc, #560]	; (8031b24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80318f2:	61bb      	str	r3, [r7, #24]
    break;
 80318f4:	e108      	b.n	8031b08 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80318f6:	4b88      	ldr	r3, [pc, #544]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80318fa:	f003 0303 	and.w	r3, r3, #3
 80318fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8031900:	4b85      	ldr	r3, [pc, #532]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8031904:	091b      	lsrs	r3, r3, #4
 8031906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803190a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 803190c:	4b82      	ldr	r3, [pc, #520]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031910:	f003 0301 	and.w	r3, r3, #1
 8031914:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8031916:	4b80      	ldr	r3, [pc, #512]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803191a:	08db      	lsrs	r3, r3, #3
 803191c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8031920:	68fa      	ldr	r2, [r7, #12]
 8031922:	fb02 f303 	mul.w	r3, r2, r3
 8031926:	ee07 3a90 	vmov	s15, r3
 803192a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803192e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8031932:	693b      	ldr	r3, [r7, #16]
 8031934:	2b00      	cmp	r3, #0
 8031936:	f000 80e1 	beq.w	8031afc <HAL_RCC_GetSysClockFreq+0x2b8>
 803193a:	697b      	ldr	r3, [r7, #20]
 803193c:	2b02      	cmp	r3, #2
 803193e:	f000 8083 	beq.w	8031a48 <HAL_RCC_GetSysClockFreq+0x204>
 8031942:	697b      	ldr	r3, [r7, #20]
 8031944:	2b02      	cmp	r3, #2
 8031946:	f200 80a1 	bhi.w	8031a8c <HAL_RCC_GetSysClockFreq+0x248>
 803194a:	697b      	ldr	r3, [r7, #20]
 803194c:	2b00      	cmp	r3, #0
 803194e:	d003      	beq.n	8031958 <HAL_RCC_GetSysClockFreq+0x114>
 8031950:	697b      	ldr	r3, [r7, #20]
 8031952:	2b01      	cmp	r3, #1
 8031954:	d056      	beq.n	8031a04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8031956:	e099      	b.n	8031a8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8031958:	4b6f      	ldr	r3, [pc, #444]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803195a:	681b      	ldr	r3, [r3, #0]
 803195c:	f003 0320 	and.w	r3, r3, #32
 8031960:	2b00      	cmp	r3, #0
 8031962:	d02d      	beq.n	80319c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8031964:	4b6c      	ldr	r3, [pc, #432]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031966:	681b      	ldr	r3, [r3, #0]
 8031968:	08db      	lsrs	r3, r3, #3
 803196a:	f003 0303 	and.w	r3, r3, #3
 803196e:	4a6b      	ldr	r2, [pc, #428]	; (8031b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8031970:	fa22 f303 	lsr.w	r3, r2, r3
 8031974:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031976:	687b      	ldr	r3, [r7, #4]
 8031978:	ee07 3a90 	vmov	s15, r3
 803197c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031980:	693b      	ldr	r3, [r7, #16]
 8031982:	ee07 3a90 	vmov	s15, r3
 8031986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803198a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803198e:	4b62      	ldr	r3, [pc, #392]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8031996:	ee07 3a90 	vmov	s15, r3
 803199a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803199e:	ed97 6a02 	vldr	s12, [r7, #8]
 80319a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8031b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 80319a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80319aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80319ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80319b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80319b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80319ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80319be:	e087      	b.n	8031ad0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80319c0:	693b      	ldr	r3, [r7, #16]
 80319c2:	ee07 3a90 	vmov	s15, r3
 80319c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80319ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8031b2c <HAL_RCC_GetSysClockFreq+0x2e8>
 80319ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80319d2:	4b51      	ldr	r3, [pc, #324]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80319d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80319d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80319da:	ee07 3a90 	vmov	s15, r3
 80319de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80319e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80319e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8031b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 80319ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80319ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80319f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80319f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80319fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80319fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031a02:	e065      	b.n	8031ad0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031a04:	693b      	ldr	r3, [r7, #16]
 8031a06:	ee07 3a90 	vmov	s15, r3
 8031a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8031a0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8031b30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8031a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8031a16:	4b40      	ldr	r3, [pc, #256]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8031a1e:	ee07 3a90 	vmov	s15, r3
 8031a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8031a2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8031b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8031a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8031a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8031a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031a46:	e043      	b.n	8031ad0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031a48:	693b      	ldr	r3, [r7, #16]
 8031a4a:	ee07 3a90 	vmov	s15, r3
 8031a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8031a52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8031b34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8031a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8031a5a:	4b2f      	ldr	r3, [pc, #188]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8031a62:	ee07 3a90 	vmov	s15, r3
 8031a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8031a6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8031b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8031a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8031a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8031a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031a8a:	e021      	b.n	8031ad0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031a8c:	693b      	ldr	r3, [r7, #16]
 8031a8e:	ee07 3a90 	vmov	s15, r3
 8031a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8031a96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8031b30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8031a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8031a9e:	4b1e      	ldr	r3, [pc, #120]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8031aa6:	ee07 3a90 	vmov	s15, r3
 8031aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8031ab2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8031b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8031ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8031ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8031ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031ace:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8031ad0:	4b11      	ldr	r3, [pc, #68]	; (8031b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031ad4:	0a5b      	lsrs	r3, r3, #9
 8031ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8031ada:	3301      	adds	r3, #1
 8031adc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8031ade:	683b      	ldr	r3, [r7, #0]
 8031ae0:	ee07 3a90 	vmov	s15, r3
 8031ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8031ae8:	edd7 6a07 	vldr	s13, [r7, #28]
 8031aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8031af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8031af4:	ee17 3a90 	vmov	r3, s15
 8031af8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8031afa:	e005      	b.n	8031b08 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8031afc:	2300      	movs	r3, #0
 8031afe:	61bb      	str	r3, [r7, #24]
    break;
 8031b00:	e002      	b.n	8031b08 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8031b02:	4b07      	ldr	r3, [pc, #28]	; (8031b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8031b04:	61bb      	str	r3, [r7, #24]
    break;
 8031b06:	bf00      	nop
  }

  return sysclockfreq;
 8031b08:	69bb      	ldr	r3, [r7, #24]
}
 8031b0a:	4618      	mov	r0, r3
 8031b0c:	3724      	adds	r7, #36	; 0x24
 8031b0e:	46bd      	mov	sp, r7
 8031b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031b14:	4770      	bx	lr
 8031b16:	bf00      	nop
 8031b18:	58024400 	.word	0x58024400
 8031b1c:	03d09000 	.word	0x03d09000
 8031b20:	003d0900 	.word	0x003d0900
 8031b24:	017d7840 	.word	0x017d7840
 8031b28:	46000000 	.word	0x46000000
 8031b2c:	4c742400 	.word	0x4c742400
 8031b30:	4a742400 	.word	0x4a742400
 8031b34:	4bbebc20 	.word	0x4bbebc20

08031b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8031b38:	b580      	push	{r7, lr}
 8031b3a:	b082      	sub	sp, #8
 8031b3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8031b3e:	f7ff fe81 	bl	8031844 <HAL_RCC_GetSysClockFreq>
 8031b42:	4602      	mov	r2, r0
 8031b44:	4b10      	ldr	r3, [pc, #64]	; (8031b88 <HAL_RCC_GetHCLKFreq+0x50>)
 8031b46:	699b      	ldr	r3, [r3, #24]
 8031b48:	0a1b      	lsrs	r3, r3, #8
 8031b4a:	f003 030f 	and.w	r3, r3, #15
 8031b4e:	490f      	ldr	r1, [pc, #60]	; (8031b8c <HAL_RCC_GetHCLKFreq+0x54>)
 8031b50:	5ccb      	ldrb	r3, [r1, r3]
 8031b52:	f003 031f 	and.w	r3, r3, #31
 8031b56:	fa22 f303 	lsr.w	r3, r2, r3
 8031b5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8031b5c:	4b0a      	ldr	r3, [pc, #40]	; (8031b88 <HAL_RCC_GetHCLKFreq+0x50>)
 8031b5e:	699b      	ldr	r3, [r3, #24]
 8031b60:	f003 030f 	and.w	r3, r3, #15
 8031b64:	4a09      	ldr	r2, [pc, #36]	; (8031b8c <HAL_RCC_GetHCLKFreq+0x54>)
 8031b66:	5cd3      	ldrb	r3, [r2, r3]
 8031b68:	f003 031f 	and.w	r3, r3, #31
 8031b6c:	687a      	ldr	r2, [r7, #4]
 8031b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8031b72:	4a07      	ldr	r2, [pc, #28]	; (8031b90 <HAL_RCC_GetHCLKFreq+0x58>)
 8031b74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8031b76:	4a07      	ldr	r2, [pc, #28]	; (8031b94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8031b78:	687b      	ldr	r3, [r7, #4]
 8031b7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8031b7c:	4b04      	ldr	r3, [pc, #16]	; (8031b90 <HAL_RCC_GetHCLKFreq+0x58>)
 8031b7e:	681b      	ldr	r3, [r3, #0]
}
 8031b80:	4618      	mov	r0, r3
 8031b82:	3708      	adds	r7, #8
 8031b84:	46bd      	mov	sp, r7
 8031b86:	bd80      	pop	{r7, pc}
 8031b88:	58024400 	.word	0x58024400
 8031b8c:	08058560 	.word	0x08058560
 8031b90:	24000008 	.word	0x24000008
 8031b94:	24000004 	.word	0x24000004

08031b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8031b98:	b580      	push	{r7, lr}
 8031b9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8031b9c:	f7ff ffcc 	bl	8031b38 <HAL_RCC_GetHCLKFreq>
 8031ba0:	4602      	mov	r2, r0
 8031ba2:	4b06      	ldr	r3, [pc, #24]	; (8031bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8031ba4:	69db      	ldr	r3, [r3, #28]
 8031ba6:	091b      	lsrs	r3, r3, #4
 8031ba8:	f003 0307 	and.w	r3, r3, #7
 8031bac:	4904      	ldr	r1, [pc, #16]	; (8031bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8031bae:	5ccb      	ldrb	r3, [r1, r3]
 8031bb0:	f003 031f 	and.w	r3, r3, #31
 8031bb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8031bb8:	4618      	mov	r0, r3
 8031bba:	bd80      	pop	{r7, pc}
 8031bbc:	58024400 	.word	0x58024400
 8031bc0:	08058560 	.word	0x08058560

08031bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8031bc4:	b580      	push	{r7, lr}
 8031bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8031bc8:	f7ff ffb6 	bl	8031b38 <HAL_RCC_GetHCLKFreq>
 8031bcc:	4602      	mov	r2, r0
 8031bce:	4b06      	ldr	r3, [pc, #24]	; (8031be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8031bd0:	69db      	ldr	r3, [r3, #28]
 8031bd2:	0a1b      	lsrs	r3, r3, #8
 8031bd4:	f003 0307 	and.w	r3, r3, #7
 8031bd8:	4904      	ldr	r1, [pc, #16]	; (8031bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8031bda:	5ccb      	ldrb	r3, [r1, r3]
 8031bdc:	f003 031f 	and.w	r3, r3, #31
 8031be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8031be4:	4618      	mov	r0, r3
 8031be6:	bd80      	pop	{r7, pc}
 8031be8:	58024400 	.word	0x58024400
 8031bec:	08058560 	.word	0x08058560

08031bf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8031bf0:	b580      	push	{r7, lr}
 8031bf2:	b086      	sub	sp, #24
 8031bf4:	af00      	add	r7, sp, #0
 8031bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8031bf8:	2300      	movs	r3, #0
 8031bfa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8031bfc:	2300      	movs	r3, #0
 8031bfe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8031c00:	687b      	ldr	r3, [r7, #4]
 8031c02:	681b      	ldr	r3, [r3, #0]
 8031c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8031c08:	2b00      	cmp	r3, #0
 8031c0a:	d03f      	beq.n	8031c8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8031c0c:	687b      	ldr	r3, [r7, #4]
 8031c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8031c10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8031c14:	d02a      	beq.n	8031c6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8031c16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8031c1a:	d824      	bhi.n	8031c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8031c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031c20:	d018      	beq.n	8031c54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8031c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031c26:	d81e      	bhi.n	8031c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8031c28:	2b00      	cmp	r3, #0
 8031c2a:	d003      	beq.n	8031c34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8031c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8031c30:	d007      	beq.n	8031c42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8031c32:	e018      	b.n	8031c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031c34:	4ba3      	ldr	r3, [pc, #652]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031c38:	4aa2      	ldr	r2, [pc, #648]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031c40:	e015      	b.n	8031c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8031c42:	687b      	ldr	r3, [r7, #4]
 8031c44:	3304      	adds	r3, #4
 8031c46:	2102      	movs	r1, #2
 8031c48:	4618      	mov	r0, r3
 8031c4a:	f001 f9d5 	bl	8032ff8 <RCCEx_PLL2_Config>
 8031c4e:	4603      	mov	r3, r0
 8031c50:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031c52:	e00c      	b.n	8031c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8031c54:	687b      	ldr	r3, [r7, #4]
 8031c56:	3324      	adds	r3, #36	; 0x24
 8031c58:	2102      	movs	r1, #2
 8031c5a:	4618      	mov	r0, r3
 8031c5c:	f001 fa7e 	bl	803315c <RCCEx_PLL3_Config>
 8031c60:	4603      	mov	r3, r0
 8031c62:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031c64:	e003      	b.n	8031c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031c66:	2301      	movs	r3, #1
 8031c68:	75fb      	strb	r3, [r7, #23]
      break;
 8031c6a:	e000      	b.n	8031c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8031c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031c6e:	7dfb      	ldrb	r3, [r7, #23]
 8031c70:	2b00      	cmp	r3, #0
 8031c72:	d109      	bne.n	8031c88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8031c74:	4b93      	ldr	r3, [pc, #588]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031c78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8031c7c:	687b      	ldr	r3, [r7, #4]
 8031c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8031c80:	4990      	ldr	r1, [pc, #576]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c82:	4313      	orrs	r3, r2
 8031c84:	650b      	str	r3, [r1, #80]	; 0x50
 8031c86:	e001      	b.n	8031c8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031c88:	7dfb      	ldrb	r3, [r7, #23]
 8031c8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8031c8c:	687b      	ldr	r3, [r7, #4]
 8031c8e:	681b      	ldr	r3, [r3, #0]
 8031c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031c94:	2b00      	cmp	r3, #0
 8031c96:	d03d      	beq.n	8031d14 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8031c98:	687b      	ldr	r3, [r7, #4]
 8031c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031c9c:	2b04      	cmp	r3, #4
 8031c9e:	d826      	bhi.n	8031cee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8031ca0:	a201      	add	r2, pc, #4	; (adr r2, 8031ca8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8031ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8031ca6:	bf00      	nop
 8031ca8:	08031cbd 	.word	0x08031cbd
 8031cac:	08031ccb 	.word	0x08031ccb
 8031cb0:	08031cdd 	.word	0x08031cdd
 8031cb4:	08031cf5 	.word	0x08031cf5
 8031cb8:	08031cf5 	.word	0x08031cf5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031cbc:	4b81      	ldr	r3, [pc, #516]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031cc0:	4a80      	ldr	r2, [pc, #512]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031cc8:	e015      	b.n	8031cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031cca:	687b      	ldr	r3, [r7, #4]
 8031ccc:	3304      	adds	r3, #4
 8031cce:	2100      	movs	r1, #0
 8031cd0:	4618      	mov	r0, r3
 8031cd2:	f001 f991 	bl	8032ff8 <RCCEx_PLL2_Config>
 8031cd6:	4603      	mov	r3, r0
 8031cd8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031cda:	e00c      	b.n	8031cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031cdc:	687b      	ldr	r3, [r7, #4]
 8031cde:	3324      	adds	r3, #36	; 0x24
 8031ce0:	2100      	movs	r1, #0
 8031ce2:	4618      	mov	r0, r3
 8031ce4:	f001 fa3a 	bl	803315c <RCCEx_PLL3_Config>
 8031ce8:	4603      	mov	r3, r0
 8031cea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031cec:	e003      	b.n	8031cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031cee:	2301      	movs	r3, #1
 8031cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8031cf2:	e000      	b.n	8031cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8031cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031cf6:	7dfb      	ldrb	r3, [r7, #23]
 8031cf8:	2b00      	cmp	r3, #0
 8031cfa:	d109      	bne.n	8031d10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8031cfc:	4b71      	ldr	r3, [pc, #452]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031d00:	f023 0207 	bic.w	r2, r3, #7
 8031d04:	687b      	ldr	r3, [r7, #4]
 8031d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031d08:	496e      	ldr	r1, [pc, #440]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d0a:	4313      	orrs	r3, r2
 8031d0c:	650b      	str	r3, [r1, #80]	; 0x50
 8031d0e:	e001      	b.n	8031d14 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031d10:	7dfb      	ldrb	r3, [r7, #23]
 8031d12:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8031d14:	687b      	ldr	r3, [r7, #4]
 8031d16:	681b      	ldr	r3, [r3, #0]
 8031d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8031d1c:	2b00      	cmp	r3, #0
 8031d1e:	d042      	beq.n	8031da6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8031d20:	687b      	ldr	r3, [r7, #4]
 8031d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8031d28:	d02b      	beq.n	8031d82 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8031d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8031d2e:	d825      	bhi.n	8031d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031d30:	2bc0      	cmp	r3, #192	; 0xc0
 8031d32:	d028      	beq.n	8031d86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8031d34:	2bc0      	cmp	r3, #192	; 0xc0
 8031d36:	d821      	bhi.n	8031d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031d38:	2b80      	cmp	r3, #128	; 0x80
 8031d3a:	d016      	beq.n	8031d6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8031d3c:	2b80      	cmp	r3, #128	; 0x80
 8031d3e:	d81d      	bhi.n	8031d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031d40:	2b00      	cmp	r3, #0
 8031d42:	d002      	beq.n	8031d4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8031d44:	2b40      	cmp	r3, #64	; 0x40
 8031d46:	d007      	beq.n	8031d58 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8031d48:	e018      	b.n	8031d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031d4a:	4b5e      	ldr	r3, [pc, #376]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031d4e:	4a5d      	ldr	r2, [pc, #372]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031d54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031d56:	e017      	b.n	8031d88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031d58:	687b      	ldr	r3, [r7, #4]
 8031d5a:	3304      	adds	r3, #4
 8031d5c:	2100      	movs	r1, #0
 8031d5e:	4618      	mov	r0, r3
 8031d60:	f001 f94a 	bl	8032ff8 <RCCEx_PLL2_Config>
 8031d64:	4603      	mov	r3, r0
 8031d66:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031d68:	e00e      	b.n	8031d88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031d6a:	687b      	ldr	r3, [r7, #4]
 8031d6c:	3324      	adds	r3, #36	; 0x24
 8031d6e:	2100      	movs	r1, #0
 8031d70:	4618      	mov	r0, r3
 8031d72:	f001 f9f3 	bl	803315c <RCCEx_PLL3_Config>
 8031d76:	4603      	mov	r3, r0
 8031d78:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031d7a:	e005      	b.n	8031d88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031d7c:	2301      	movs	r3, #1
 8031d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8031d80:	e002      	b.n	8031d88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8031d82:	bf00      	nop
 8031d84:	e000      	b.n	8031d88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8031d86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031d88:	7dfb      	ldrb	r3, [r7, #23]
 8031d8a:	2b00      	cmp	r3, #0
 8031d8c:	d109      	bne.n	8031da2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8031d8e:	4b4d      	ldr	r3, [pc, #308]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031d92:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8031d96:	687b      	ldr	r3, [r7, #4]
 8031d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031d9a:	494a      	ldr	r1, [pc, #296]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d9c:	4313      	orrs	r3, r2
 8031d9e:	650b      	str	r3, [r1, #80]	; 0x50
 8031da0:	e001      	b.n	8031da6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031da2:	7dfb      	ldrb	r3, [r7, #23]
 8031da4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8031da6:	687b      	ldr	r3, [r7, #4]
 8031da8:	681b      	ldr	r3, [r3, #0]
 8031daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8031dae:	2b00      	cmp	r3, #0
 8031db0:	d049      	beq.n	8031e46 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8031db2:	687b      	ldr	r3, [r7, #4]
 8031db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8031db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8031dbc:	d030      	beq.n	8031e20 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8031dbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8031dc2:	d82a      	bhi.n	8031e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031dc4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8031dc8:	d02c      	beq.n	8031e24 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8031dca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8031dce:	d824      	bhi.n	8031e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8031dd4:	d018      	beq.n	8031e08 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8031dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8031dda:	d81e      	bhi.n	8031e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031ddc:	2b00      	cmp	r3, #0
 8031dde:	d003      	beq.n	8031de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8031de0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031de4:	d007      	beq.n	8031df6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8031de6:	e018      	b.n	8031e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031de8:	4b36      	ldr	r3, [pc, #216]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031dec:	4a35      	ldr	r2, [pc, #212]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031df2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031df4:	e017      	b.n	8031e26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031df6:	687b      	ldr	r3, [r7, #4]
 8031df8:	3304      	adds	r3, #4
 8031dfa:	2100      	movs	r1, #0
 8031dfc:	4618      	mov	r0, r3
 8031dfe:	f001 f8fb 	bl	8032ff8 <RCCEx_PLL2_Config>
 8031e02:	4603      	mov	r3, r0
 8031e04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8031e06:	e00e      	b.n	8031e26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031e08:	687b      	ldr	r3, [r7, #4]
 8031e0a:	3324      	adds	r3, #36	; 0x24
 8031e0c:	2100      	movs	r1, #0
 8031e0e:	4618      	mov	r0, r3
 8031e10:	f001 f9a4 	bl	803315c <RCCEx_PLL3_Config>
 8031e14:	4603      	mov	r3, r0
 8031e16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031e18:	e005      	b.n	8031e26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8031e1a:	2301      	movs	r3, #1
 8031e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8031e1e:	e002      	b.n	8031e26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8031e20:	bf00      	nop
 8031e22:	e000      	b.n	8031e26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8031e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031e26:	7dfb      	ldrb	r3, [r7, #23]
 8031e28:	2b00      	cmp	r3, #0
 8031e2a:	d10a      	bne.n	8031e42 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8031e2c:	4b25      	ldr	r3, [pc, #148]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031e30:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8031e34:	687b      	ldr	r3, [r7, #4]
 8031e36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8031e3a:	4922      	ldr	r1, [pc, #136]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031e3c:	4313      	orrs	r3, r2
 8031e3e:	658b      	str	r3, [r1, #88]	; 0x58
 8031e40:	e001      	b.n	8031e46 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031e42:	7dfb      	ldrb	r3, [r7, #23]
 8031e44:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8031e46:	687b      	ldr	r3, [r7, #4]
 8031e48:	681b      	ldr	r3, [r3, #0]
 8031e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031e4e:	2b00      	cmp	r3, #0
 8031e50:	d04b      	beq.n	8031eea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8031e52:	687b      	ldr	r3, [r7, #4]
 8031e54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8031e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8031e5c:	d030      	beq.n	8031ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8031e5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8031e62:	d82a      	bhi.n	8031eba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031e64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8031e68:	d02e      	beq.n	8031ec8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8031e6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8031e6e:	d824      	bhi.n	8031eba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031e70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8031e74:	d018      	beq.n	8031ea8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8031e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8031e7a:	d81e      	bhi.n	8031eba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031e7c:	2b00      	cmp	r3, #0
 8031e7e:	d003      	beq.n	8031e88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8031e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8031e84:	d007      	beq.n	8031e96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8031e86:	e018      	b.n	8031eba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031e88:	4b0e      	ldr	r3, [pc, #56]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031e8c:	4a0d      	ldr	r2, [pc, #52]	; (8031ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031e92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031e94:	e019      	b.n	8031eca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031e96:	687b      	ldr	r3, [r7, #4]
 8031e98:	3304      	adds	r3, #4
 8031e9a:	2100      	movs	r1, #0
 8031e9c:	4618      	mov	r0, r3
 8031e9e:	f001 f8ab 	bl	8032ff8 <RCCEx_PLL2_Config>
 8031ea2:	4603      	mov	r3, r0
 8031ea4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8031ea6:	e010      	b.n	8031eca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8031ea8:	687b      	ldr	r3, [r7, #4]
 8031eaa:	3324      	adds	r3, #36	; 0x24
 8031eac:	2100      	movs	r1, #0
 8031eae:	4618      	mov	r0, r3
 8031eb0:	f001 f954 	bl	803315c <RCCEx_PLL3_Config>
 8031eb4:	4603      	mov	r3, r0
 8031eb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031eb8:	e007      	b.n	8031eca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8031eba:	2301      	movs	r3, #1
 8031ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8031ebe:	e004      	b.n	8031eca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8031ec0:	bf00      	nop
 8031ec2:	e002      	b.n	8031eca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8031ec4:	58024400 	.word	0x58024400
      break;
 8031ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031eca:	7dfb      	ldrb	r3, [r7, #23]
 8031ecc:	2b00      	cmp	r3, #0
 8031ece:	d10a      	bne.n	8031ee6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8031ed0:	4b99      	ldr	r3, [pc, #612]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031ed4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8031ed8:	687b      	ldr	r3, [r7, #4]
 8031eda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8031ede:	4996      	ldr	r1, [pc, #600]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031ee0:	4313      	orrs	r3, r2
 8031ee2:	658b      	str	r3, [r1, #88]	; 0x58
 8031ee4:	e001      	b.n	8031eea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031ee6:	7dfb      	ldrb	r3, [r7, #23]
 8031ee8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8031eea:	687b      	ldr	r3, [r7, #4]
 8031eec:	681b      	ldr	r3, [r3, #0]
 8031eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031ef2:	2b00      	cmp	r3, #0
 8031ef4:	d032      	beq.n	8031f5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8031ef6:	687b      	ldr	r3, [r7, #4]
 8031ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031efa:	2b30      	cmp	r3, #48	; 0x30
 8031efc:	d01c      	beq.n	8031f38 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8031efe:	2b30      	cmp	r3, #48	; 0x30
 8031f00:	d817      	bhi.n	8031f32 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8031f02:	2b20      	cmp	r3, #32
 8031f04:	d00c      	beq.n	8031f20 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8031f06:	2b20      	cmp	r3, #32
 8031f08:	d813      	bhi.n	8031f32 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8031f0a:	2b00      	cmp	r3, #0
 8031f0c:	d016      	beq.n	8031f3c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8031f0e:	2b10      	cmp	r3, #16
 8031f10:	d10f      	bne.n	8031f32 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031f12:	4b89      	ldr	r3, [pc, #548]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031f16:	4a88      	ldr	r2, [pc, #544]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8031f1e:	e00e      	b.n	8031f3e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8031f20:	687b      	ldr	r3, [r7, #4]
 8031f22:	3304      	adds	r3, #4
 8031f24:	2102      	movs	r1, #2
 8031f26:	4618      	mov	r0, r3
 8031f28:	f001 f866 	bl	8032ff8 <RCCEx_PLL2_Config>
 8031f2c:	4603      	mov	r3, r0
 8031f2e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8031f30:	e005      	b.n	8031f3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8031f32:	2301      	movs	r3, #1
 8031f34:	75fb      	strb	r3, [r7, #23]
      break;
 8031f36:	e002      	b.n	8031f3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8031f38:	bf00      	nop
 8031f3a:	e000      	b.n	8031f3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8031f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031f3e:	7dfb      	ldrb	r3, [r7, #23]
 8031f40:	2b00      	cmp	r3, #0
 8031f42:	d109      	bne.n	8031f58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8031f44:	4b7c      	ldr	r3, [pc, #496]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031f48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8031f4c:	687b      	ldr	r3, [r7, #4]
 8031f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031f50:	4979      	ldr	r1, [pc, #484]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f52:	4313      	orrs	r3, r2
 8031f54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8031f56:	e001      	b.n	8031f5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031f58:	7dfb      	ldrb	r3, [r7, #23]
 8031f5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8031f5c:	687b      	ldr	r3, [r7, #4]
 8031f5e:	681b      	ldr	r3, [r3, #0]
 8031f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8031f64:	2b00      	cmp	r3, #0
 8031f66:	d047      	beq.n	8031ff8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8031f68:	687b      	ldr	r3, [r7, #4]
 8031f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8031f70:	d030      	beq.n	8031fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8031f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8031f76:	d82a      	bhi.n	8031fce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031f78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8031f7c:	d02c      	beq.n	8031fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8031f7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8031f82:	d824      	bhi.n	8031fce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031f88:	d018      	beq.n	8031fbc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8031f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031f8e:	d81e      	bhi.n	8031fce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031f90:	2b00      	cmp	r3, #0
 8031f92:	d003      	beq.n	8031f9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8031f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8031f98:	d007      	beq.n	8031faa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8031f9a:	e018      	b.n	8031fce <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031f9c:	4b66      	ldr	r3, [pc, #408]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031fa0:	4a65      	ldr	r2, [pc, #404]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031fa8:	e017      	b.n	8031fda <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031faa:	687b      	ldr	r3, [r7, #4]
 8031fac:	3304      	adds	r3, #4
 8031fae:	2100      	movs	r1, #0
 8031fb0:	4618      	mov	r0, r3
 8031fb2:	f001 f821 	bl	8032ff8 <RCCEx_PLL2_Config>
 8031fb6:	4603      	mov	r3, r0
 8031fb8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031fba:	e00e      	b.n	8031fda <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031fbc:	687b      	ldr	r3, [r7, #4]
 8031fbe:	3324      	adds	r3, #36	; 0x24
 8031fc0:	2100      	movs	r1, #0
 8031fc2:	4618      	mov	r0, r3
 8031fc4:	f001 f8ca 	bl	803315c <RCCEx_PLL3_Config>
 8031fc8:	4603      	mov	r3, r0
 8031fca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031fcc:	e005      	b.n	8031fda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031fce:	2301      	movs	r3, #1
 8031fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8031fd2:	e002      	b.n	8031fda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8031fd4:	bf00      	nop
 8031fd6:	e000      	b.n	8031fda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8031fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031fda:	7dfb      	ldrb	r3, [r7, #23]
 8031fdc:	2b00      	cmp	r3, #0
 8031fde:	d109      	bne.n	8031ff4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8031fe0:	4b55      	ldr	r3, [pc, #340]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031fe4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8031fe8:	687b      	ldr	r3, [r7, #4]
 8031fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031fec:	4952      	ldr	r1, [pc, #328]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031fee:	4313      	orrs	r3, r2
 8031ff0:	650b      	str	r3, [r1, #80]	; 0x50
 8031ff2:	e001      	b.n	8031ff8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031ff4:	7dfb      	ldrb	r3, [r7, #23]
 8031ff6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8031ff8:	687b      	ldr	r3, [r7, #4]
 8031ffa:	681b      	ldr	r3, [r3, #0]
 8031ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8032000:	2b00      	cmp	r3, #0
 8032002:	d049      	beq.n	8032098 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8032004:	687b      	ldr	r3, [r7, #4]
 8032006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8032008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 803200c:	d02e      	beq.n	803206c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 803200e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8032012:	d828      	bhi.n	8032066 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8032014:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8032018:	d02a      	beq.n	8032070 <HAL_RCCEx_PeriphCLKConfig+0x480>
 803201a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 803201e:	d822      	bhi.n	8032066 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8032020:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8032024:	d026      	beq.n	8032074 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8032026:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 803202a:	d81c      	bhi.n	8032066 <HAL_RCCEx_PeriphCLKConfig+0x476>
 803202c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8032030:	d010      	beq.n	8032054 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8032032:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8032036:	d816      	bhi.n	8032066 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8032038:	2b00      	cmp	r3, #0
 803203a:	d01d      	beq.n	8032078 <HAL_RCCEx_PeriphCLKConfig+0x488>
 803203c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8032040:	d111      	bne.n	8032066 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8032042:	687b      	ldr	r3, [r7, #4]
 8032044:	3304      	adds	r3, #4
 8032046:	2101      	movs	r1, #1
 8032048:	4618      	mov	r0, r3
 803204a:	f000 ffd5 	bl	8032ff8 <RCCEx_PLL2_Config>
 803204e:	4603      	mov	r3, r0
 8032050:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8032052:	e012      	b.n	803207a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032054:	687b      	ldr	r3, [r7, #4]
 8032056:	3324      	adds	r3, #36	; 0x24
 8032058:	2101      	movs	r1, #1
 803205a:	4618      	mov	r0, r3
 803205c:	f001 f87e 	bl	803315c <RCCEx_PLL3_Config>
 8032060:	4603      	mov	r3, r0
 8032062:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8032064:	e009      	b.n	803207a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032066:	2301      	movs	r3, #1
 8032068:	75fb      	strb	r3, [r7, #23]
      break;
 803206a:	e006      	b.n	803207a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 803206c:	bf00      	nop
 803206e:	e004      	b.n	803207a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8032070:	bf00      	nop
 8032072:	e002      	b.n	803207a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8032074:	bf00      	nop
 8032076:	e000      	b.n	803207a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8032078:	bf00      	nop
    }

    if(ret == HAL_OK)
 803207a:	7dfb      	ldrb	r3, [r7, #23]
 803207c:	2b00      	cmp	r3, #0
 803207e:	d109      	bne.n	8032094 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8032080:	4b2d      	ldr	r3, [pc, #180]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8032082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032084:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8032088:	687b      	ldr	r3, [r7, #4]
 803208a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 803208c:	492a      	ldr	r1, [pc, #168]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803208e:	4313      	orrs	r3, r2
 8032090:	650b      	str	r3, [r1, #80]	; 0x50
 8032092:	e001      	b.n	8032098 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032094:	7dfb      	ldrb	r3, [r7, #23]
 8032096:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8032098:	687b      	ldr	r3, [r7, #4]
 803209a:	681b      	ldr	r3, [r3, #0]
 803209c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80320a0:	2b00      	cmp	r3, #0
 80320a2:	d04d      	beq.n	8032140 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80320a4:	687b      	ldr	r3, [r7, #4]
 80320a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80320aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80320ae:	d02e      	beq.n	803210e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80320b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80320b4:	d828      	bhi.n	8032108 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80320b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80320ba:	d02a      	beq.n	8032112 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80320bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80320c0:	d822      	bhi.n	8032108 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80320c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80320c6:	d026      	beq.n	8032116 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80320c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80320cc:	d81c      	bhi.n	8032108 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80320ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80320d2:	d010      	beq.n	80320f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80320d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80320d8:	d816      	bhi.n	8032108 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80320da:	2b00      	cmp	r3, #0
 80320dc:	d01d      	beq.n	803211a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80320de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80320e2:	d111      	bne.n	8032108 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80320e4:	687b      	ldr	r3, [r7, #4]
 80320e6:	3304      	adds	r3, #4
 80320e8:	2101      	movs	r1, #1
 80320ea:	4618      	mov	r0, r3
 80320ec:	f000 ff84 	bl	8032ff8 <RCCEx_PLL2_Config>
 80320f0:	4603      	mov	r3, r0
 80320f2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80320f4:	e012      	b.n	803211c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80320f6:	687b      	ldr	r3, [r7, #4]
 80320f8:	3324      	adds	r3, #36	; 0x24
 80320fa:	2101      	movs	r1, #1
 80320fc:	4618      	mov	r0, r3
 80320fe:	f001 f82d 	bl	803315c <RCCEx_PLL3_Config>
 8032102:	4603      	mov	r3, r0
 8032104:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8032106:	e009      	b.n	803211c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8032108:	2301      	movs	r3, #1
 803210a:	75fb      	strb	r3, [r7, #23]
      break;
 803210c:	e006      	b.n	803211c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 803210e:	bf00      	nop
 8032110:	e004      	b.n	803211c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8032112:	bf00      	nop
 8032114:	e002      	b.n	803211c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8032116:	bf00      	nop
 8032118:	e000      	b.n	803211c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 803211a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803211c:	7dfb      	ldrb	r3, [r7, #23]
 803211e:	2b00      	cmp	r3, #0
 8032120:	d10c      	bne.n	803213c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8032122:	4b05      	ldr	r3, [pc, #20]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8032124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032126:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 803212a:	687b      	ldr	r3, [r7, #4]
 803212c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8032130:	4901      	ldr	r1, [pc, #4]	; (8032138 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8032132:	4313      	orrs	r3, r2
 8032134:	658b      	str	r3, [r1, #88]	; 0x58
 8032136:	e003      	b.n	8032140 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8032138:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 803213c:	7dfb      	ldrb	r3, [r7, #23]
 803213e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8032140:	687b      	ldr	r3, [r7, #4]
 8032142:	681b      	ldr	r3, [r3, #0]
 8032144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8032148:	2b00      	cmp	r3, #0
 803214a:	d02f      	beq.n	80321ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 803214c:	687b      	ldr	r3, [r7, #4]
 803214e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8032150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032154:	d00e      	beq.n	8032174 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8032156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803215a:	d814      	bhi.n	8032186 <HAL_RCCEx_PeriphCLKConfig+0x596>
 803215c:	2b00      	cmp	r3, #0
 803215e:	d015      	beq.n	803218c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8032160:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8032164:	d10f      	bne.n	8032186 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8032166:	4baf      	ldr	r3, [pc, #700]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803216a:	4aae      	ldr	r2, [pc, #696]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803216c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8032170:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8032172:	e00c      	b.n	803218e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8032174:	687b      	ldr	r3, [r7, #4]
 8032176:	3304      	adds	r3, #4
 8032178:	2101      	movs	r1, #1
 803217a:	4618      	mov	r0, r3
 803217c:	f000 ff3c 	bl	8032ff8 <RCCEx_PLL2_Config>
 8032180:	4603      	mov	r3, r0
 8032182:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8032184:	e003      	b.n	803218e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032186:	2301      	movs	r3, #1
 8032188:	75fb      	strb	r3, [r7, #23]
      break;
 803218a:	e000      	b.n	803218e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 803218c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803218e:	7dfb      	ldrb	r3, [r7, #23]
 8032190:	2b00      	cmp	r3, #0
 8032192:	d109      	bne.n	80321a8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8032194:	4ba3      	ldr	r3, [pc, #652]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032198:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 803219c:	687b      	ldr	r3, [r7, #4]
 803219e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80321a0:	49a0      	ldr	r1, [pc, #640]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321a2:	4313      	orrs	r3, r2
 80321a4:	650b      	str	r3, [r1, #80]	; 0x50
 80321a6:	e001      	b.n	80321ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80321a8:	7dfb      	ldrb	r3, [r7, #23]
 80321aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80321ac:	687b      	ldr	r3, [r7, #4]
 80321ae:	681b      	ldr	r3, [r3, #0]
 80321b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80321b4:	2b00      	cmp	r3, #0
 80321b6:	d032      	beq.n	803221e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80321b8:	687b      	ldr	r3, [r7, #4]
 80321ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80321bc:	2b03      	cmp	r3, #3
 80321be:	d81b      	bhi.n	80321f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80321c0:	a201      	add	r2, pc, #4	; (adr r2, 80321c8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80321c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80321c6:	bf00      	nop
 80321c8:	080321ff 	.word	0x080321ff
 80321cc:	080321d9 	.word	0x080321d9
 80321d0:	080321e7 	.word	0x080321e7
 80321d4:	080321ff 	.word	0x080321ff
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80321d8:	4b92      	ldr	r3, [pc, #584]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80321dc:	4a91      	ldr	r2, [pc, #580]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80321e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80321e4:	e00c      	b.n	8032200 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80321e6:	687b      	ldr	r3, [r7, #4]
 80321e8:	3304      	adds	r3, #4
 80321ea:	2102      	movs	r1, #2
 80321ec:	4618      	mov	r0, r3
 80321ee:	f000 ff03 	bl	8032ff8 <RCCEx_PLL2_Config>
 80321f2:	4603      	mov	r3, r0
 80321f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80321f6:	e003      	b.n	8032200 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80321f8:	2301      	movs	r3, #1
 80321fa:	75fb      	strb	r3, [r7, #23]
      break;
 80321fc:	e000      	b.n	8032200 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80321fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032200:	7dfb      	ldrb	r3, [r7, #23]
 8032202:	2b00      	cmp	r3, #0
 8032204:	d109      	bne.n	803221a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8032206:	4b87      	ldr	r3, [pc, #540]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803220a:	f023 0203 	bic.w	r2, r3, #3
 803220e:	687b      	ldr	r3, [r7, #4]
 8032210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032212:	4984      	ldr	r1, [pc, #528]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032214:	4313      	orrs	r3, r2
 8032216:	64cb      	str	r3, [r1, #76]	; 0x4c
 8032218:	e001      	b.n	803221e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803221a:	7dfb      	ldrb	r3, [r7, #23]
 803221c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 803221e:	687b      	ldr	r3, [r7, #4]
 8032220:	681b      	ldr	r3, [r3, #0]
 8032222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8032226:	2b00      	cmp	r3, #0
 8032228:	f000 8086 	beq.w	8032338 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 803222c:	4b7e      	ldr	r3, [pc, #504]	; (8032428 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 803222e:	681b      	ldr	r3, [r3, #0]
 8032230:	4a7d      	ldr	r2, [pc, #500]	; (8032428 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8032232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8032236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8032238:	f7f8 fd38 	bl	802acac <HAL_GetTick>
 803223c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 803223e:	e009      	b.n	8032254 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8032240:	f7f8 fd34 	bl	802acac <HAL_GetTick>
 8032244:	4602      	mov	r2, r0
 8032246:	693b      	ldr	r3, [r7, #16]
 8032248:	1ad3      	subs	r3, r2, r3
 803224a:	2b64      	cmp	r3, #100	; 0x64
 803224c:	d902      	bls.n	8032254 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 803224e:	2303      	movs	r3, #3
 8032250:	75fb      	strb	r3, [r7, #23]
        break;
 8032252:	e005      	b.n	8032260 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8032254:	4b74      	ldr	r3, [pc, #464]	; (8032428 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8032256:	681b      	ldr	r3, [r3, #0]
 8032258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803225c:	2b00      	cmp	r3, #0
 803225e:	d0ef      	beq.n	8032240 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8032260:	7dfb      	ldrb	r3, [r7, #23]
 8032262:	2b00      	cmp	r3, #0
 8032264:	d166      	bne.n	8032334 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8032266:	4b6f      	ldr	r3, [pc, #444]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032268:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 803226a:	687b      	ldr	r3, [r7, #4]
 803226c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8032270:	4053      	eors	r3, r2
 8032272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8032276:	2b00      	cmp	r3, #0
 8032278:	d013      	beq.n	80322a2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 803227a:	4b6a      	ldr	r3, [pc, #424]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803227e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8032282:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8032284:	4b67      	ldr	r3, [pc, #412]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032288:	4a66      	ldr	r2, [pc, #408]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 803228e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8032290:	4b64      	ldr	r3, [pc, #400]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032294:	4a63      	ldr	r2, [pc, #396]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 803229a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 803229c:	4a61      	ldr	r2, [pc, #388]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803229e:	68fb      	ldr	r3, [r7, #12]
 80322a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80322a2:	687b      	ldr	r3, [r7, #4]
 80322a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80322a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80322ac:	d115      	bne.n	80322da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80322ae:	f7f8 fcfd 	bl	802acac <HAL_GetTick>
 80322b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80322b4:	e00b      	b.n	80322ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80322b6:	f7f8 fcf9 	bl	802acac <HAL_GetTick>
 80322ba:	4602      	mov	r2, r0
 80322bc:	693b      	ldr	r3, [r7, #16]
 80322be:	1ad3      	subs	r3, r2, r3
 80322c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80322c4:	4293      	cmp	r3, r2
 80322c6:	d902      	bls.n	80322ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80322c8:	2303      	movs	r3, #3
 80322ca:	75fb      	strb	r3, [r7, #23]
            break;
 80322cc:	e005      	b.n	80322da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80322ce:	4b55      	ldr	r3, [pc, #340]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80322d2:	f003 0302 	and.w	r3, r3, #2
 80322d6:	2b00      	cmp	r3, #0
 80322d8:	d0ed      	beq.n	80322b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80322da:	7dfb      	ldrb	r3, [r7, #23]
 80322dc:	2b00      	cmp	r3, #0
 80322de:	d126      	bne.n	803232e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80322e0:	687b      	ldr	r3, [r7, #4]
 80322e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80322e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80322ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80322ee:	d10d      	bne.n	803230c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80322f0:	4b4c      	ldr	r3, [pc, #304]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322f2:	691b      	ldr	r3, [r3, #16]
 80322f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80322f8:	687b      	ldr	r3, [r7, #4]
 80322fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80322fe:	0919      	lsrs	r1, r3, #4
 8032300:	4b4a      	ldr	r3, [pc, #296]	; (803242c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8032302:	400b      	ands	r3, r1
 8032304:	4947      	ldr	r1, [pc, #284]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032306:	4313      	orrs	r3, r2
 8032308:	610b      	str	r3, [r1, #16]
 803230a:	e005      	b.n	8032318 <HAL_RCCEx_PeriphCLKConfig+0x728>
 803230c:	4b45      	ldr	r3, [pc, #276]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803230e:	691b      	ldr	r3, [r3, #16]
 8032310:	4a44      	ldr	r2, [pc, #272]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032312:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8032316:	6113      	str	r3, [r2, #16]
 8032318:	4b42      	ldr	r3, [pc, #264]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803231a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 803231c:	687b      	ldr	r3, [r7, #4]
 803231e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8032322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8032326:	493f      	ldr	r1, [pc, #252]	; (8032424 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032328:	4313      	orrs	r3, r2
 803232a:	670b      	str	r3, [r1, #112]	; 0x70
 803232c:	e004      	b.n	8032338 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 803232e:	7dfb      	ldrb	r3, [r7, #23]
 8032330:	75bb      	strb	r3, [r7, #22]
 8032332:	e001      	b.n	8032338 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032334:	7dfb      	ldrb	r3, [r7, #23]
 8032336:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8032338:	687b      	ldr	r3, [r7, #4]
 803233a:	681b      	ldr	r3, [r3, #0]
 803233c:	f003 0301 	and.w	r3, r3, #1
 8032340:	2b00      	cmp	r3, #0
 8032342:	f000 8085 	beq.w	8032450 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8032346:	687b      	ldr	r3, [r7, #4]
 8032348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803234a:	2b28      	cmp	r3, #40	; 0x28
 803234c:	d866      	bhi.n	803241c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 803234e:	a201      	add	r2, pc, #4	; (adr r2, 8032354 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8032350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032354:	08032431 	.word	0x08032431
 8032358:	0803241d 	.word	0x0803241d
 803235c:	0803241d 	.word	0x0803241d
 8032360:	0803241d 	.word	0x0803241d
 8032364:	0803241d 	.word	0x0803241d
 8032368:	0803241d 	.word	0x0803241d
 803236c:	0803241d 	.word	0x0803241d
 8032370:	0803241d 	.word	0x0803241d
 8032374:	080323f9 	.word	0x080323f9
 8032378:	0803241d 	.word	0x0803241d
 803237c:	0803241d 	.word	0x0803241d
 8032380:	0803241d 	.word	0x0803241d
 8032384:	0803241d 	.word	0x0803241d
 8032388:	0803241d 	.word	0x0803241d
 803238c:	0803241d 	.word	0x0803241d
 8032390:	0803241d 	.word	0x0803241d
 8032394:	0803240b 	.word	0x0803240b
 8032398:	0803241d 	.word	0x0803241d
 803239c:	0803241d 	.word	0x0803241d
 80323a0:	0803241d 	.word	0x0803241d
 80323a4:	0803241d 	.word	0x0803241d
 80323a8:	0803241d 	.word	0x0803241d
 80323ac:	0803241d 	.word	0x0803241d
 80323b0:	0803241d 	.word	0x0803241d
 80323b4:	08032431 	.word	0x08032431
 80323b8:	0803241d 	.word	0x0803241d
 80323bc:	0803241d 	.word	0x0803241d
 80323c0:	0803241d 	.word	0x0803241d
 80323c4:	0803241d 	.word	0x0803241d
 80323c8:	0803241d 	.word	0x0803241d
 80323cc:	0803241d 	.word	0x0803241d
 80323d0:	0803241d 	.word	0x0803241d
 80323d4:	08032431 	.word	0x08032431
 80323d8:	0803241d 	.word	0x0803241d
 80323dc:	0803241d 	.word	0x0803241d
 80323e0:	0803241d 	.word	0x0803241d
 80323e4:	0803241d 	.word	0x0803241d
 80323e8:	0803241d 	.word	0x0803241d
 80323ec:	0803241d 	.word	0x0803241d
 80323f0:	0803241d 	.word	0x0803241d
 80323f4:	08032431 	.word	0x08032431
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80323f8:	687b      	ldr	r3, [r7, #4]
 80323fa:	3304      	adds	r3, #4
 80323fc:	2101      	movs	r1, #1
 80323fe:	4618      	mov	r0, r3
 8032400:	f000 fdfa 	bl	8032ff8 <RCCEx_PLL2_Config>
 8032404:	4603      	mov	r3, r0
 8032406:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8032408:	e013      	b.n	8032432 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803240a:	687b      	ldr	r3, [r7, #4]
 803240c:	3324      	adds	r3, #36	; 0x24
 803240e:	2101      	movs	r1, #1
 8032410:	4618      	mov	r0, r3
 8032412:	f000 fea3 	bl	803315c <RCCEx_PLL3_Config>
 8032416:	4603      	mov	r3, r0
 8032418:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 803241a:	e00a      	b.n	8032432 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803241c:	2301      	movs	r3, #1
 803241e:	75fb      	strb	r3, [r7, #23]
      break;
 8032420:	e007      	b.n	8032432 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8032422:	bf00      	nop
 8032424:	58024400 	.word	0x58024400
 8032428:	58024800 	.word	0x58024800
 803242c:	00ffffcf 	.word	0x00ffffcf
      break;
 8032430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032432:	7dfb      	ldrb	r3, [r7, #23]
 8032434:	2b00      	cmp	r3, #0
 8032436:	d109      	bne.n	803244c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8032438:	4b96      	ldr	r3, [pc, #600]	; (8032694 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803243c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8032440:	687b      	ldr	r3, [r7, #4]
 8032442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8032444:	4993      	ldr	r1, [pc, #588]	; (8032694 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032446:	4313      	orrs	r3, r2
 8032448:	654b      	str	r3, [r1, #84]	; 0x54
 803244a:	e001      	b.n	8032450 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803244c:	7dfb      	ldrb	r3, [r7, #23]
 803244e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8032450:	687b      	ldr	r3, [r7, #4]
 8032452:	681b      	ldr	r3, [r3, #0]
 8032454:	f003 0302 	and.w	r3, r3, #2
 8032458:	2b00      	cmp	r3, #0
 803245a:	d038      	beq.n	80324ce <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 803245c:	687b      	ldr	r3, [r7, #4]
 803245e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8032460:	2b05      	cmp	r3, #5
 8032462:	d821      	bhi.n	80324a8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8032464:	a201      	add	r2, pc, #4	; (adr r2, 803246c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8032466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803246a:	bf00      	nop
 803246c:	080324af 	.word	0x080324af
 8032470:	08032485 	.word	0x08032485
 8032474:	08032497 	.word	0x08032497
 8032478:	080324af 	.word	0x080324af
 803247c:	080324af 	.word	0x080324af
 8032480:	080324af 	.word	0x080324af
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8032484:	687b      	ldr	r3, [r7, #4]
 8032486:	3304      	adds	r3, #4
 8032488:	2101      	movs	r1, #1
 803248a:	4618      	mov	r0, r3
 803248c:	f000 fdb4 	bl	8032ff8 <RCCEx_PLL2_Config>
 8032490:	4603      	mov	r3, r0
 8032492:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8032494:	e00c      	b.n	80324b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032496:	687b      	ldr	r3, [r7, #4]
 8032498:	3324      	adds	r3, #36	; 0x24
 803249a:	2101      	movs	r1, #1
 803249c:	4618      	mov	r0, r3
 803249e:	f000 fe5d 	bl	803315c <RCCEx_PLL3_Config>
 80324a2:	4603      	mov	r3, r0
 80324a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80324a6:	e003      	b.n	80324b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80324a8:	2301      	movs	r3, #1
 80324aa:	75fb      	strb	r3, [r7, #23]
      break;
 80324ac:	e000      	b.n	80324b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80324ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80324b0:	7dfb      	ldrb	r3, [r7, #23]
 80324b2:	2b00      	cmp	r3, #0
 80324b4:	d109      	bne.n	80324ca <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80324b6:	4b77      	ldr	r3, [pc, #476]	; (8032694 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80324b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80324ba:	f023 0207 	bic.w	r2, r3, #7
 80324be:	687b      	ldr	r3, [r7, #4]
 80324c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80324c2:	4974      	ldr	r1, [pc, #464]	; (8032694 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80324c4:	4313      	orrs	r3, r2
 80324c6:	654b      	str	r3, [r1, #84]	; 0x54
 80324c8:	e001      	b.n	80324ce <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80324ca:	7dfb      	ldrb	r3, [r7, #23]
 80324cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80324ce:	687b      	ldr	r3, [r7, #4]
 80324d0:	681b      	ldr	r3, [r3, #0]
 80324d2:	f003 0304 	and.w	r3, r3, #4
 80324d6:	2b00      	cmp	r3, #0
 80324d8:	d03a      	beq.n	8032550 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80324da:	687b      	ldr	r3, [r7, #4]
 80324dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80324e0:	2b05      	cmp	r3, #5
 80324e2:	d821      	bhi.n	8032528 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80324e4:	a201      	add	r2, pc, #4	; (adr r2, 80324ec <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80324e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80324ea:	bf00      	nop
 80324ec:	0803252f 	.word	0x0803252f
 80324f0:	08032505 	.word	0x08032505
 80324f4:	08032517 	.word	0x08032517
 80324f8:	0803252f 	.word	0x0803252f
 80324fc:	0803252f 	.word	0x0803252f
 8032500:	0803252f 	.word	0x0803252f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8032504:	687b      	ldr	r3, [r7, #4]
 8032506:	3304      	adds	r3, #4
 8032508:	2101      	movs	r1, #1
 803250a:	4618      	mov	r0, r3
 803250c:	f000 fd74 	bl	8032ff8 <RCCEx_PLL2_Config>
 8032510:	4603      	mov	r3, r0
 8032512:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8032514:	e00c      	b.n	8032530 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032516:	687b      	ldr	r3, [r7, #4]
 8032518:	3324      	adds	r3, #36	; 0x24
 803251a:	2101      	movs	r1, #1
 803251c:	4618      	mov	r0, r3
 803251e:	f000 fe1d 	bl	803315c <RCCEx_PLL3_Config>
 8032522:	4603      	mov	r3, r0
 8032524:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8032526:	e003      	b.n	8032530 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032528:	2301      	movs	r3, #1
 803252a:	75fb      	strb	r3, [r7, #23]
      break;
 803252c:	e000      	b.n	8032530 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 803252e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032530:	7dfb      	ldrb	r3, [r7, #23]
 8032532:	2b00      	cmp	r3, #0
 8032534:	d10a      	bne.n	803254c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8032536:	4b57      	ldr	r3, [pc, #348]	; (8032694 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803253a:	f023 0207 	bic.w	r2, r3, #7
 803253e:	687b      	ldr	r3, [r7, #4]
 8032540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8032544:	4953      	ldr	r1, [pc, #332]	; (8032694 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032546:	4313      	orrs	r3, r2
 8032548:	658b      	str	r3, [r1, #88]	; 0x58
 803254a:	e001      	b.n	8032550 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803254c:	7dfb      	ldrb	r3, [r7, #23]
 803254e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8032550:	687b      	ldr	r3, [r7, #4]
 8032552:	681b      	ldr	r3, [r3, #0]
 8032554:	f003 0320 	and.w	r3, r3, #32
 8032558:	2b00      	cmp	r3, #0
 803255a:	d04b      	beq.n	80325f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 803255c:	687b      	ldr	r3, [r7, #4]
 803255e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8032562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8032566:	d02e      	beq.n	80325c6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8032568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 803256c:	d828      	bhi.n	80325c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 803256e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8032572:	d02a      	beq.n	80325ca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8032574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8032578:	d822      	bhi.n	80325c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 803257a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 803257e:	d026      	beq.n	80325ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8032580:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8032584:	d81c      	bhi.n	80325c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8032586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803258a:	d010      	beq.n	80325ae <HAL_RCCEx_PeriphCLKConfig+0x9be>
 803258c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032590:	d816      	bhi.n	80325c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8032592:	2b00      	cmp	r3, #0
 8032594:	d01d      	beq.n	80325d2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8032596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803259a:	d111      	bne.n	80325c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803259c:	687b      	ldr	r3, [r7, #4]
 803259e:	3304      	adds	r3, #4
 80325a0:	2100      	movs	r1, #0
 80325a2:	4618      	mov	r0, r3
 80325a4:	f000 fd28 	bl	8032ff8 <RCCEx_PLL2_Config>
 80325a8:	4603      	mov	r3, r0
 80325aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80325ac:	e012      	b.n	80325d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80325ae:	687b      	ldr	r3, [r7, #4]
 80325b0:	3324      	adds	r3, #36	; 0x24
 80325b2:	2102      	movs	r1, #2
 80325b4:	4618      	mov	r0, r3
 80325b6:	f000 fdd1 	bl	803315c <RCCEx_PLL3_Config>
 80325ba:	4603      	mov	r3, r0
 80325bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80325be:	e009      	b.n	80325d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80325c0:	2301      	movs	r3, #1
 80325c2:	75fb      	strb	r3, [r7, #23]
      break;
 80325c4:	e006      	b.n	80325d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80325c6:	bf00      	nop
 80325c8:	e004      	b.n	80325d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80325ca:	bf00      	nop
 80325cc:	e002      	b.n	80325d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80325ce:	bf00      	nop
 80325d0:	e000      	b.n	80325d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80325d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80325d4:	7dfb      	ldrb	r3, [r7, #23]
 80325d6:	2b00      	cmp	r3, #0
 80325d8:	d10a      	bne.n	80325f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80325da:	4b2e      	ldr	r3, [pc, #184]	; (8032694 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80325dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80325de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80325e2:	687b      	ldr	r3, [r7, #4]
 80325e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80325e8:	492a      	ldr	r1, [pc, #168]	; (8032694 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80325ea:	4313      	orrs	r3, r2
 80325ec:	654b      	str	r3, [r1, #84]	; 0x54
 80325ee:	e001      	b.n	80325f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80325f0:	7dfb      	ldrb	r3, [r7, #23]
 80325f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80325f4:	687b      	ldr	r3, [r7, #4]
 80325f6:	681b      	ldr	r3, [r3, #0]
 80325f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80325fc:	2b00      	cmp	r3, #0
 80325fe:	d04d      	beq.n	803269c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8032600:	687b      	ldr	r3, [r7, #4]
 8032602:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8032606:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 803260a:	d02e      	beq.n	803266a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 803260c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8032610:	d828      	bhi.n	8032664 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8032612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8032616:	d02a      	beq.n	803266e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8032618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803261c:	d822      	bhi.n	8032664 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 803261e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8032622:	d026      	beq.n	8032672 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8032624:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8032628:	d81c      	bhi.n	8032664 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 803262a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 803262e:	d010      	beq.n	8032652 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8032630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8032634:	d816      	bhi.n	8032664 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8032636:	2b00      	cmp	r3, #0
 8032638:	d01d      	beq.n	8032676 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 803263a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 803263e:	d111      	bne.n	8032664 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8032640:	687b      	ldr	r3, [r7, #4]
 8032642:	3304      	adds	r3, #4
 8032644:	2100      	movs	r1, #0
 8032646:	4618      	mov	r0, r3
 8032648:	f000 fcd6 	bl	8032ff8 <RCCEx_PLL2_Config>
 803264c:	4603      	mov	r3, r0
 803264e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8032650:	e012      	b.n	8032678 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8032652:	687b      	ldr	r3, [r7, #4]
 8032654:	3324      	adds	r3, #36	; 0x24
 8032656:	2102      	movs	r1, #2
 8032658:	4618      	mov	r0, r3
 803265a:	f000 fd7f 	bl	803315c <RCCEx_PLL3_Config>
 803265e:	4603      	mov	r3, r0
 8032660:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8032662:	e009      	b.n	8032678 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032664:	2301      	movs	r3, #1
 8032666:	75fb      	strb	r3, [r7, #23]
      break;
 8032668:	e006      	b.n	8032678 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 803266a:	bf00      	nop
 803266c:	e004      	b.n	8032678 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 803266e:	bf00      	nop
 8032670:	e002      	b.n	8032678 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8032672:	bf00      	nop
 8032674:	e000      	b.n	8032678 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8032676:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032678:	7dfb      	ldrb	r3, [r7, #23]
 803267a:	2b00      	cmp	r3, #0
 803267c:	d10c      	bne.n	8032698 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 803267e:	4b05      	ldr	r3, [pc, #20]	; (8032694 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032682:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8032686:	687b      	ldr	r3, [r7, #4]
 8032688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 803268c:	4901      	ldr	r1, [pc, #4]	; (8032694 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803268e:	4313      	orrs	r3, r2
 8032690:	658b      	str	r3, [r1, #88]	; 0x58
 8032692:	e003      	b.n	803269c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8032694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032698:	7dfb      	ldrb	r3, [r7, #23]
 803269a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 803269c:	687b      	ldr	r3, [r7, #4]
 803269e:	681b      	ldr	r3, [r3, #0]
 80326a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80326a4:	2b00      	cmp	r3, #0
 80326a6:	d04b      	beq.n	8032740 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80326a8:	687b      	ldr	r3, [r7, #4]
 80326aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80326ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80326b2:	d02e      	beq.n	8032712 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80326b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80326b8:	d828      	bhi.n	803270c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80326ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80326be:	d02a      	beq.n	8032716 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80326c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80326c4:	d822      	bhi.n	803270c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80326c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80326ca:	d026      	beq.n	803271a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80326cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80326d0:	d81c      	bhi.n	803270c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80326d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80326d6:	d010      	beq.n	80326fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80326d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80326dc:	d816      	bhi.n	803270c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80326de:	2b00      	cmp	r3, #0
 80326e0:	d01d      	beq.n	803271e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80326e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80326e6:	d111      	bne.n	803270c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80326e8:	687b      	ldr	r3, [r7, #4]
 80326ea:	3304      	adds	r3, #4
 80326ec:	2100      	movs	r1, #0
 80326ee:	4618      	mov	r0, r3
 80326f0:	f000 fc82 	bl	8032ff8 <RCCEx_PLL2_Config>
 80326f4:	4603      	mov	r3, r0
 80326f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80326f8:	e012      	b.n	8032720 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80326fa:	687b      	ldr	r3, [r7, #4]
 80326fc:	3324      	adds	r3, #36	; 0x24
 80326fe:	2102      	movs	r1, #2
 8032700:	4618      	mov	r0, r3
 8032702:	f000 fd2b 	bl	803315c <RCCEx_PLL3_Config>
 8032706:	4603      	mov	r3, r0
 8032708:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 803270a:	e009      	b.n	8032720 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803270c:	2301      	movs	r3, #1
 803270e:	75fb      	strb	r3, [r7, #23]
      break;
 8032710:	e006      	b.n	8032720 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8032712:	bf00      	nop
 8032714:	e004      	b.n	8032720 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8032716:	bf00      	nop
 8032718:	e002      	b.n	8032720 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 803271a:	bf00      	nop
 803271c:	e000      	b.n	8032720 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 803271e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032720:	7dfb      	ldrb	r3, [r7, #23]
 8032722:	2b00      	cmp	r3, #0
 8032724:	d10a      	bne.n	803273c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8032726:	4b9d      	ldr	r3, [pc, #628]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803272a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 803272e:	687b      	ldr	r3, [r7, #4]
 8032730:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8032734:	4999      	ldr	r1, [pc, #612]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032736:	4313      	orrs	r3, r2
 8032738:	658b      	str	r3, [r1, #88]	; 0x58
 803273a:	e001      	b.n	8032740 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803273c:	7dfb      	ldrb	r3, [r7, #23]
 803273e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8032740:	687b      	ldr	r3, [r7, #4]
 8032742:	681b      	ldr	r3, [r3, #0]
 8032744:	f003 0308 	and.w	r3, r3, #8
 8032748:	2b00      	cmp	r3, #0
 803274a:	d01a      	beq.n	8032782 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 803274c:	687b      	ldr	r3, [r7, #4]
 803274e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8032752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8032756:	d10a      	bne.n	803276e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8032758:	687b      	ldr	r3, [r7, #4]
 803275a:	3324      	adds	r3, #36	; 0x24
 803275c:	2102      	movs	r1, #2
 803275e:	4618      	mov	r0, r3
 8032760:	f000 fcfc 	bl	803315c <RCCEx_PLL3_Config>
 8032764:	4603      	mov	r3, r0
 8032766:	2b00      	cmp	r3, #0
 8032768:	d001      	beq.n	803276e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 803276a:	2301      	movs	r3, #1
 803276c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 803276e:	4b8b      	ldr	r3, [pc, #556]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032772:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8032776:	687b      	ldr	r3, [r7, #4]
 8032778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 803277c:	4987      	ldr	r1, [pc, #540]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803277e:	4313      	orrs	r3, r2
 8032780:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8032782:	687b      	ldr	r3, [r7, #4]
 8032784:	681b      	ldr	r3, [r3, #0]
 8032786:	f003 0310 	and.w	r3, r3, #16
 803278a:	2b00      	cmp	r3, #0
 803278c:	d01a      	beq.n	80327c4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 803278e:	687b      	ldr	r3, [r7, #4]
 8032790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8032794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8032798:	d10a      	bne.n	80327b0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 803279a:	687b      	ldr	r3, [r7, #4]
 803279c:	3324      	adds	r3, #36	; 0x24
 803279e:	2102      	movs	r1, #2
 80327a0:	4618      	mov	r0, r3
 80327a2:	f000 fcdb 	bl	803315c <RCCEx_PLL3_Config>
 80327a6:	4603      	mov	r3, r0
 80327a8:	2b00      	cmp	r3, #0
 80327aa:	d001      	beq.n	80327b0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80327ac:	2301      	movs	r3, #1
 80327ae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80327b0:	4b7a      	ldr	r3, [pc, #488]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80327b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80327b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80327b8:	687b      	ldr	r3, [r7, #4]
 80327ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80327be:	4977      	ldr	r1, [pc, #476]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80327c0:	4313      	orrs	r3, r2
 80327c2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80327c4:	687b      	ldr	r3, [r7, #4]
 80327c6:	681b      	ldr	r3, [r3, #0]
 80327c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80327cc:	2b00      	cmp	r3, #0
 80327ce:	d034      	beq.n	803283a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80327d0:	687b      	ldr	r3, [r7, #4]
 80327d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80327d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80327da:	d01d      	beq.n	8032818 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80327dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80327e0:	d817      	bhi.n	8032812 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80327e2:	2b00      	cmp	r3, #0
 80327e4:	d003      	beq.n	80327ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80327e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80327ea:	d009      	beq.n	8032800 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80327ec:	e011      	b.n	8032812 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80327ee:	687b      	ldr	r3, [r7, #4]
 80327f0:	3304      	adds	r3, #4
 80327f2:	2100      	movs	r1, #0
 80327f4:	4618      	mov	r0, r3
 80327f6:	f000 fbff 	bl	8032ff8 <RCCEx_PLL2_Config>
 80327fa:	4603      	mov	r3, r0
 80327fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80327fe:	e00c      	b.n	803281a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8032800:	687b      	ldr	r3, [r7, #4]
 8032802:	3324      	adds	r3, #36	; 0x24
 8032804:	2102      	movs	r1, #2
 8032806:	4618      	mov	r0, r3
 8032808:	f000 fca8 	bl	803315c <RCCEx_PLL3_Config>
 803280c:	4603      	mov	r3, r0
 803280e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8032810:	e003      	b.n	803281a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032812:	2301      	movs	r3, #1
 8032814:	75fb      	strb	r3, [r7, #23]
      break;
 8032816:	e000      	b.n	803281a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8032818:	bf00      	nop
    }

    if(ret == HAL_OK)
 803281a:	7dfb      	ldrb	r3, [r7, #23]
 803281c:	2b00      	cmp	r3, #0
 803281e:	d10a      	bne.n	8032836 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8032820:	4b5e      	ldr	r3, [pc, #376]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8032828:	687b      	ldr	r3, [r7, #4]
 803282a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 803282e:	495b      	ldr	r1, [pc, #364]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032830:	4313      	orrs	r3, r2
 8032832:	658b      	str	r3, [r1, #88]	; 0x58
 8032834:	e001      	b.n	803283a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032836:	7dfb      	ldrb	r3, [r7, #23]
 8032838:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 803283a:	687b      	ldr	r3, [r7, #4]
 803283c:	681b      	ldr	r3, [r3, #0]
 803283e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8032842:	2b00      	cmp	r3, #0
 8032844:	d033      	beq.n	80328ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8032846:	687b      	ldr	r3, [r7, #4]
 8032848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803284c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8032850:	d01c      	beq.n	803288c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8032852:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8032856:	d816      	bhi.n	8032886 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8032858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803285c:	d003      	beq.n	8032866 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 803285e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8032862:	d007      	beq.n	8032874 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8032864:	e00f      	b.n	8032886 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8032866:	4b4d      	ldr	r3, [pc, #308]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803286a:	4a4c      	ldr	r2, [pc, #304]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803286c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8032870:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8032872:	e00c      	b.n	803288e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032874:	687b      	ldr	r3, [r7, #4]
 8032876:	3324      	adds	r3, #36	; 0x24
 8032878:	2101      	movs	r1, #1
 803287a:	4618      	mov	r0, r3
 803287c:	f000 fc6e 	bl	803315c <RCCEx_PLL3_Config>
 8032880:	4603      	mov	r3, r0
 8032882:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8032884:	e003      	b.n	803288e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032886:	2301      	movs	r3, #1
 8032888:	75fb      	strb	r3, [r7, #23]
      break;
 803288a:	e000      	b.n	803288e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 803288c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803288e:	7dfb      	ldrb	r3, [r7, #23]
 8032890:	2b00      	cmp	r3, #0
 8032892:	d10a      	bne.n	80328aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8032894:	4b41      	ldr	r3, [pc, #260]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 803289c:	687b      	ldr	r3, [r7, #4]
 803289e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80328a2:	493e      	ldr	r1, [pc, #248]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80328a4:	4313      	orrs	r3, r2
 80328a6:	654b      	str	r3, [r1, #84]	; 0x54
 80328a8:	e001      	b.n	80328ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80328aa:	7dfb      	ldrb	r3, [r7, #23]
 80328ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80328ae:	687b      	ldr	r3, [r7, #4]
 80328b0:	681b      	ldr	r3, [r3, #0]
 80328b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80328b6:	2b00      	cmp	r3, #0
 80328b8:	d029      	beq.n	803290e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80328ba:	687b      	ldr	r3, [r7, #4]
 80328bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80328be:	2b00      	cmp	r3, #0
 80328c0:	d003      	beq.n	80328ca <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80328c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80328c6:	d007      	beq.n	80328d8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80328c8:	e00f      	b.n	80328ea <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80328ca:	4b34      	ldr	r3, [pc, #208]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80328cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80328ce:	4a33      	ldr	r2, [pc, #204]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80328d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80328d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80328d6:	e00b      	b.n	80328f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80328d8:	687b      	ldr	r3, [r7, #4]
 80328da:	3304      	adds	r3, #4
 80328dc:	2102      	movs	r1, #2
 80328de:	4618      	mov	r0, r3
 80328e0:	f000 fb8a 	bl	8032ff8 <RCCEx_PLL2_Config>
 80328e4:	4603      	mov	r3, r0
 80328e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80328e8:	e002      	b.n	80328f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80328ea:	2301      	movs	r3, #1
 80328ec:	75fb      	strb	r3, [r7, #23]
      break;
 80328ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80328f0:	7dfb      	ldrb	r3, [r7, #23]
 80328f2:	2b00      	cmp	r3, #0
 80328f4:	d109      	bne.n	803290a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80328f6:	4b29      	ldr	r3, [pc, #164]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80328f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80328fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80328fe:	687b      	ldr	r3, [r7, #4]
 8032900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032902:	4926      	ldr	r1, [pc, #152]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032904:	4313      	orrs	r3, r2
 8032906:	64cb      	str	r3, [r1, #76]	; 0x4c
 8032908:	e001      	b.n	803290e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803290a:	7dfb      	ldrb	r3, [r7, #23]
 803290c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 803290e:	687b      	ldr	r3, [r7, #4]
 8032910:	681b      	ldr	r3, [r3, #0]
 8032912:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8032916:	2b00      	cmp	r3, #0
 8032918:	d00a      	beq.n	8032930 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 803291a:	687b      	ldr	r3, [r7, #4]
 803291c:	3324      	adds	r3, #36	; 0x24
 803291e:	2102      	movs	r1, #2
 8032920:	4618      	mov	r0, r3
 8032922:	f000 fc1b 	bl	803315c <RCCEx_PLL3_Config>
 8032926:	4603      	mov	r3, r0
 8032928:	2b00      	cmp	r3, #0
 803292a:	d001      	beq.n	8032930 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 803292c:	2301      	movs	r3, #1
 803292e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8032930:	687b      	ldr	r3, [r7, #4]
 8032932:	681b      	ldr	r3, [r3, #0]
 8032934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032938:	2b00      	cmp	r3, #0
 803293a:	d033      	beq.n	80329a4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 803293c:	687b      	ldr	r3, [r7, #4]
 803293e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8032940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8032944:	d017      	beq.n	8032976 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8032946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803294a:	d811      	bhi.n	8032970 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 803294c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8032950:	d013      	beq.n	803297a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8032952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8032956:	d80b      	bhi.n	8032970 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8032958:	2b00      	cmp	r3, #0
 803295a:	d010      	beq.n	803297e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 803295c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8032960:	d106      	bne.n	8032970 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8032962:	4b0e      	ldr	r3, [pc, #56]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032966:	4a0d      	ldr	r2, [pc, #52]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803296c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 803296e:	e007      	b.n	8032980 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032970:	2301      	movs	r3, #1
 8032972:	75fb      	strb	r3, [r7, #23]
      break;
 8032974:	e004      	b.n	8032980 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8032976:	bf00      	nop
 8032978:	e002      	b.n	8032980 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 803297a:	bf00      	nop
 803297c:	e000      	b.n	8032980 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 803297e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032980:	7dfb      	ldrb	r3, [r7, #23]
 8032982:	2b00      	cmp	r3, #0
 8032984:	d10c      	bne.n	80329a0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8032986:	4b05      	ldr	r3, [pc, #20]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803298a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 803298e:	687b      	ldr	r3, [r7, #4]
 8032990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8032992:	4902      	ldr	r1, [pc, #8]	; (803299c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032994:	4313      	orrs	r3, r2
 8032996:	654b      	str	r3, [r1, #84]	; 0x54
 8032998:	e004      	b.n	80329a4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 803299a:	bf00      	nop
 803299c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80329a0:	7dfb      	ldrb	r3, [r7, #23]
 80329a2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80329a4:	687b      	ldr	r3, [r7, #4]
 80329a6:	681b      	ldr	r3, [r3, #0]
 80329a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80329ac:	2b00      	cmp	r3, #0
 80329ae:	d008      	beq.n	80329c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80329b0:	4b31      	ldr	r3, [pc, #196]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80329b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80329b8:	687b      	ldr	r3, [r7, #4]
 80329ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80329bc:	492e      	ldr	r1, [pc, #184]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329be:	4313      	orrs	r3, r2
 80329c0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80329c2:	687b      	ldr	r3, [r7, #4]
 80329c4:	681b      	ldr	r3, [r3, #0]
 80329c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80329ca:	2b00      	cmp	r3, #0
 80329cc:	d009      	beq.n	80329e2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80329ce:	4b2a      	ldr	r3, [pc, #168]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329d0:	691b      	ldr	r3, [r3, #16]
 80329d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80329d6:	687b      	ldr	r3, [r7, #4]
 80329d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80329dc:	4926      	ldr	r1, [pc, #152]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329de:	4313      	orrs	r3, r2
 80329e0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80329e2:	687b      	ldr	r3, [r7, #4]
 80329e4:	681b      	ldr	r3, [r3, #0]
 80329e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80329ea:	2b00      	cmp	r3, #0
 80329ec:	d008      	beq.n	8032a00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80329ee:	4b22      	ldr	r3, [pc, #136]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80329f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80329f6:	687b      	ldr	r3, [r7, #4]
 80329f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80329fa:	491f      	ldr	r1, [pc, #124]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329fc:	4313      	orrs	r3, r2
 80329fe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8032a00:	687b      	ldr	r3, [r7, #4]
 8032a02:	681b      	ldr	r3, [r3, #0]
 8032a04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8032a08:	2b00      	cmp	r3, #0
 8032a0a:	d00d      	beq.n	8032a28 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8032a0c:	4b1a      	ldr	r3, [pc, #104]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a0e:	691b      	ldr	r3, [r3, #16]
 8032a10:	4a19      	ldr	r2, [pc, #100]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8032a16:	6113      	str	r3, [r2, #16]
 8032a18:	4b17      	ldr	r3, [pc, #92]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a1a:	691a      	ldr	r2, [r3, #16]
 8032a1c:	687b      	ldr	r3, [r7, #4]
 8032a1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8032a22:	4915      	ldr	r1, [pc, #84]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a24:	4313      	orrs	r3, r2
 8032a26:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8032a28:	687b      	ldr	r3, [r7, #4]
 8032a2a:	681b      	ldr	r3, [r3, #0]
 8032a2c:	2b00      	cmp	r3, #0
 8032a2e:	da08      	bge.n	8032a42 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8032a30:	4b11      	ldr	r3, [pc, #68]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032a34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8032a38:	687b      	ldr	r3, [r7, #4]
 8032a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032a3c:	490e      	ldr	r1, [pc, #56]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a3e:	4313      	orrs	r3, r2
 8032a40:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8032a42:	687b      	ldr	r3, [r7, #4]
 8032a44:	681b      	ldr	r3, [r3, #0]
 8032a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8032a4a:	2b00      	cmp	r3, #0
 8032a4c:	d009      	beq.n	8032a62 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8032a4e:	4b0a      	ldr	r3, [pc, #40]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032a52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8032a56:	687b      	ldr	r3, [r7, #4]
 8032a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8032a5c:	4906      	ldr	r1, [pc, #24]	; (8032a78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a5e:	4313      	orrs	r3, r2
 8032a60:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8032a62:	7dbb      	ldrb	r3, [r7, #22]
 8032a64:	2b00      	cmp	r3, #0
 8032a66:	d101      	bne.n	8032a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8032a68:	2300      	movs	r3, #0
 8032a6a:	e000      	b.n	8032a6e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8032a6c:	2301      	movs	r3, #1
}
 8032a6e:	4618      	mov	r0, r3
 8032a70:	3718      	adds	r7, #24
 8032a72:	46bd      	mov	sp, r7
 8032a74:	bd80      	pop	{r7, pc}
 8032a76:	bf00      	nop
 8032a78:	58024400 	.word	0x58024400

08032a7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8032a7c:	b580      	push	{r7, lr}
 8032a7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8032a80:	f7ff f85a 	bl	8031b38 <HAL_RCC_GetHCLKFreq>
 8032a84:	4602      	mov	r2, r0
 8032a86:	4b06      	ldr	r3, [pc, #24]	; (8032aa0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8032a88:	6a1b      	ldr	r3, [r3, #32]
 8032a8a:	091b      	lsrs	r3, r3, #4
 8032a8c:	f003 0307 	and.w	r3, r3, #7
 8032a90:	4904      	ldr	r1, [pc, #16]	; (8032aa4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8032a92:	5ccb      	ldrb	r3, [r1, r3]
 8032a94:	f003 031f 	and.w	r3, r3, #31
 8032a98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8032a9c:	4618      	mov	r0, r3
 8032a9e:	bd80      	pop	{r7, pc}
 8032aa0:	58024400 	.word	0x58024400
 8032aa4:	08058560 	.word	0x08058560

08032aa8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8032aa8:	b480      	push	{r7}
 8032aaa:	b089      	sub	sp, #36	; 0x24
 8032aac:	af00      	add	r7, sp, #0
 8032aae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8032ab0:	4ba1      	ldr	r3, [pc, #644]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032ab4:	f003 0303 	and.w	r3, r3, #3
 8032ab8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8032aba:	4b9f      	ldr	r3, [pc, #636]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032abe:	0b1b      	lsrs	r3, r3, #12
 8032ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032ac4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8032ac6:	4b9c      	ldr	r3, [pc, #624]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032aca:	091b      	lsrs	r3, r3, #4
 8032acc:	f003 0301 	and.w	r3, r3, #1
 8032ad0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8032ad2:	4b99      	ldr	r3, [pc, #612]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032ad6:	08db      	lsrs	r3, r3, #3
 8032ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8032adc:	693a      	ldr	r2, [r7, #16]
 8032ade:	fb02 f303 	mul.w	r3, r2, r3
 8032ae2:	ee07 3a90 	vmov	s15, r3
 8032ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032aea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8032aee:	697b      	ldr	r3, [r7, #20]
 8032af0:	2b00      	cmp	r3, #0
 8032af2:	f000 8111 	beq.w	8032d18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8032af6:	69bb      	ldr	r3, [r7, #24]
 8032af8:	2b02      	cmp	r3, #2
 8032afa:	f000 8083 	beq.w	8032c04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8032afe:	69bb      	ldr	r3, [r7, #24]
 8032b00:	2b02      	cmp	r3, #2
 8032b02:	f200 80a1 	bhi.w	8032c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8032b06:	69bb      	ldr	r3, [r7, #24]
 8032b08:	2b00      	cmp	r3, #0
 8032b0a:	d003      	beq.n	8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8032b0c:	69bb      	ldr	r3, [r7, #24]
 8032b0e:	2b01      	cmp	r3, #1
 8032b10:	d056      	beq.n	8032bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8032b12:	e099      	b.n	8032c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8032b14:	4b88      	ldr	r3, [pc, #544]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032b16:	681b      	ldr	r3, [r3, #0]
 8032b18:	f003 0320 	and.w	r3, r3, #32
 8032b1c:	2b00      	cmp	r3, #0
 8032b1e:	d02d      	beq.n	8032b7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8032b20:	4b85      	ldr	r3, [pc, #532]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032b22:	681b      	ldr	r3, [r3, #0]
 8032b24:	08db      	lsrs	r3, r3, #3
 8032b26:	f003 0303 	and.w	r3, r3, #3
 8032b2a:	4a84      	ldr	r2, [pc, #528]	; (8032d3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8032b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8032b30:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032b32:	68bb      	ldr	r3, [r7, #8]
 8032b34:	ee07 3a90 	vmov	s15, r3
 8032b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032b3c:	697b      	ldr	r3, [r7, #20]
 8032b3e:	ee07 3a90 	vmov	s15, r3
 8032b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032b4a:	4b7b      	ldr	r3, [pc, #492]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032b52:	ee07 3a90 	vmov	s15, r3
 8032b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8032b5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8032d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032b76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8032b7a:	e087      	b.n	8032c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032b7c:	697b      	ldr	r3, [r7, #20]
 8032b7e:	ee07 3a90 	vmov	s15, r3
 8032b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032b86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8032d44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8032b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032b8e:	4b6a      	ldr	r3, [pc, #424]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032b96:	ee07 3a90 	vmov	s15, r3
 8032b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8032ba2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8032d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032bba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032bbe:	e065      	b.n	8032c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032bc0:	697b      	ldr	r3, [r7, #20]
 8032bc2:	ee07 3a90 	vmov	s15, r3
 8032bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032bca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8032d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8032bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032bd2:	4b59      	ldr	r3, [pc, #356]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032bda:	ee07 3a90 	vmov	s15, r3
 8032bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8032be6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8032d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032c02:	e043      	b.n	8032c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032c04:	697b      	ldr	r3, [r7, #20]
 8032c06:	ee07 3a90 	vmov	s15, r3
 8032c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032c0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8032d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8032c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032c16:	4b48      	ldr	r3, [pc, #288]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032c1e:	ee07 3a90 	vmov	s15, r3
 8032c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8032c2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8032d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032c42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032c46:	e021      	b.n	8032c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032c48:	697b      	ldr	r3, [r7, #20]
 8032c4a:	ee07 3a90 	vmov	s15, r3
 8032c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032c52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8032d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8032c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032c5a:	4b37      	ldr	r3, [pc, #220]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032c62:	ee07 3a90 	vmov	s15, r3
 8032c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8032c6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8032d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032c86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032c8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8032c8c:	4b2a      	ldr	r3, [pc, #168]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032c90:	0a5b      	lsrs	r3, r3, #9
 8032c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032c96:	ee07 3a90 	vmov	s15, r3
 8032c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8032caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032cb2:	ee17 2a90 	vmov	r2, s15
 8032cb6:	687b      	ldr	r3, [r7, #4]
 8032cb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8032cba:	4b1f      	ldr	r3, [pc, #124]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032cbe:	0c1b      	lsrs	r3, r3, #16
 8032cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032cc4:	ee07 3a90 	vmov	s15, r3
 8032cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8032cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032ce0:	ee17 2a90 	vmov	r2, s15
 8032ce4:	687b      	ldr	r3, [r7, #4]
 8032ce6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8032ce8:	4b13      	ldr	r3, [pc, #76]	; (8032d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032cec:	0e1b      	lsrs	r3, r3, #24
 8032cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032cf2:	ee07 3a90 	vmov	s15, r3
 8032cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8032d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032d0e:	ee17 2a90 	vmov	r2, s15
 8032d12:	687b      	ldr	r3, [r7, #4]
 8032d14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8032d16:	e008      	b.n	8032d2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8032d18:	687b      	ldr	r3, [r7, #4]
 8032d1a:	2200      	movs	r2, #0
 8032d1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8032d1e:	687b      	ldr	r3, [r7, #4]
 8032d20:	2200      	movs	r2, #0
 8032d22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8032d24:	687b      	ldr	r3, [r7, #4]
 8032d26:	2200      	movs	r2, #0
 8032d28:	609a      	str	r2, [r3, #8]
}
 8032d2a:	bf00      	nop
 8032d2c:	3724      	adds	r7, #36	; 0x24
 8032d2e:	46bd      	mov	sp, r7
 8032d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d34:	4770      	bx	lr
 8032d36:	bf00      	nop
 8032d38:	58024400 	.word	0x58024400
 8032d3c:	03d09000 	.word	0x03d09000
 8032d40:	46000000 	.word	0x46000000
 8032d44:	4c742400 	.word	0x4c742400
 8032d48:	4a742400 	.word	0x4a742400
 8032d4c:	4bbebc20 	.word	0x4bbebc20

08032d50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8032d50:	b480      	push	{r7}
 8032d52:	b089      	sub	sp, #36	; 0x24
 8032d54:	af00      	add	r7, sp, #0
 8032d56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8032d58:	4ba1      	ldr	r3, [pc, #644]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032d5c:	f003 0303 	and.w	r3, r3, #3
 8032d60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8032d62:	4b9f      	ldr	r3, [pc, #636]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032d66:	0d1b      	lsrs	r3, r3, #20
 8032d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032d6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8032d6e:	4b9c      	ldr	r3, [pc, #624]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032d72:	0a1b      	lsrs	r3, r3, #8
 8032d74:	f003 0301 	and.w	r3, r3, #1
 8032d78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8032d7a:	4b99      	ldr	r3, [pc, #612]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032d7e:	08db      	lsrs	r3, r3, #3
 8032d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8032d84:	693a      	ldr	r2, [r7, #16]
 8032d86:	fb02 f303 	mul.w	r3, r2, r3
 8032d8a:	ee07 3a90 	vmov	s15, r3
 8032d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032d92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8032d96:	697b      	ldr	r3, [r7, #20]
 8032d98:	2b00      	cmp	r3, #0
 8032d9a:	f000 8111 	beq.w	8032fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8032d9e:	69bb      	ldr	r3, [r7, #24]
 8032da0:	2b02      	cmp	r3, #2
 8032da2:	f000 8083 	beq.w	8032eac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8032da6:	69bb      	ldr	r3, [r7, #24]
 8032da8:	2b02      	cmp	r3, #2
 8032daa:	f200 80a1 	bhi.w	8032ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8032dae:	69bb      	ldr	r3, [r7, #24]
 8032db0:	2b00      	cmp	r3, #0
 8032db2:	d003      	beq.n	8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8032db4:	69bb      	ldr	r3, [r7, #24]
 8032db6:	2b01      	cmp	r3, #1
 8032db8:	d056      	beq.n	8032e68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8032dba:	e099      	b.n	8032ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8032dbc:	4b88      	ldr	r3, [pc, #544]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032dbe:	681b      	ldr	r3, [r3, #0]
 8032dc0:	f003 0320 	and.w	r3, r3, #32
 8032dc4:	2b00      	cmp	r3, #0
 8032dc6:	d02d      	beq.n	8032e24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8032dc8:	4b85      	ldr	r3, [pc, #532]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032dca:	681b      	ldr	r3, [r3, #0]
 8032dcc:	08db      	lsrs	r3, r3, #3
 8032dce:	f003 0303 	and.w	r3, r3, #3
 8032dd2:	4a84      	ldr	r2, [pc, #528]	; (8032fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8032dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8032dd8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032dda:	68bb      	ldr	r3, [r7, #8]
 8032ddc:	ee07 3a90 	vmov	s15, r3
 8032de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032de4:	697b      	ldr	r3, [r7, #20]
 8032de6:	ee07 3a90 	vmov	s15, r3
 8032dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032df2:	4b7b      	ldr	r3, [pc, #492]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032dfa:	ee07 3a90 	vmov	s15, r3
 8032dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8032e06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8032fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032e1e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8032e22:	e087      	b.n	8032f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032e24:	697b      	ldr	r3, [r7, #20]
 8032e26:	ee07 3a90 	vmov	s15, r3
 8032e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8032fec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8032e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032e36:	4b6a      	ldr	r3, [pc, #424]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032e3e:	ee07 3a90 	vmov	s15, r3
 8032e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8032e4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8032fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032e62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032e66:	e065      	b.n	8032f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032e68:	697b      	ldr	r3, [r7, #20]
 8032e6a:	ee07 3a90 	vmov	s15, r3
 8032e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8032ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8032e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032e7a:	4b59      	ldr	r3, [pc, #356]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032e82:	ee07 3a90 	vmov	s15, r3
 8032e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8032e8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8032fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032ea6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032eaa:	e043      	b.n	8032f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032eac:	697b      	ldr	r3, [r7, #20]
 8032eae:	ee07 3a90 	vmov	s15, r3
 8032eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032eb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8032ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8032eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032ebe:	4b48      	ldr	r3, [pc, #288]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032ec6:	ee07 3a90 	vmov	s15, r3
 8032eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8032ed2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8032fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032eea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032eee:	e021      	b.n	8032f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032ef0:	697b      	ldr	r3, [r7, #20]
 8032ef2:	ee07 3a90 	vmov	s15, r3
 8032ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032efa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8032ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8032efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032f02:	4b37      	ldr	r3, [pc, #220]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032f0a:	ee07 3a90 	vmov	s15, r3
 8032f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8032f16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8032fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032f2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032f32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8032f34:	4b2a      	ldr	r3, [pc, #168]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032f38:	0a5b      	lsrs	r3, r3, #9
 8032f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032f3e:	ee07 3a90 	vmov	s15, r3
 8032f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8032f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032f5a:	ee17 2a90 	vmov	r2, s15
 8032f5e:	687b      	ldr	r3, [r7, #4]
 8032f60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8032f62:	4b1f      	ldr	r3, [pc, #124]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032f66:	0c1b      	lsrs	r3, r3, #16
 8032f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032f6c:	ee07 3a90 	vmov	s15, r3
 8032f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032f74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8032f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032f88:	ee17 2a90 	vmov	r2, s15
 8032f8c:	687b      	ldr	r3, [r7, #4]
 8032f8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8032f90:	4b13      	ldr	r3, [pc, #76]	; (8032fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032f94:	0e1b      	lsrs	r3, r3, #24
 8032f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032f9a:	ee07 3a90 	vmov	s15, r3
 8032f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8032fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032fb6:	ee17 2a90 	vmov	r2, s15
 8032fba:	687b      	ldr	r3, [r7, #4]
 8032fbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8032fbe:	e008      	b.n	8032fd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8032fc0:	687b      	ldr	r3, [r7, #4]
 8032fc2:	2200      	movs	r2, #0
 8032fc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8032fc6:	687b      	ldr	r3, [r7, #4]
 8032fc8:	2200      	movs	r2, #0
 8032fca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8032fcc:	687b      	ldr	r3, [r7, #4]
 8032fce:	2200      	movs	r2, #0
 8032fd0:	609a      	str	r2, [r3, #8]
}
 8032fd2:	bf00      	nop
 8032fd4:	3724      	adds	r7, #36	; 0x24
 8032fd6:	46bd      	mov	sp, r7
 8032fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032fdc:	4770      	bx	lr
 8032fde:	bf00      	nop
 8032fe0:	58024400 	.word	0x58024400
 8032fe4:	03d09000 	.word	0x03d09000
 8032fe8:	46000000 	.word	0x46000000
 8032fec:	4c742400 	.word	0x4c742400
 8032ff0:	4a742400 	.word	0x4a742400
 8032ff4:	4bbebc20 	.word	0x4bbebc20

08032ff8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8032ff8:	b580      	push	{r7, lr}
 8032ffa:	b084      	sub	sp, #16
 8032ffc:	af00      	add	r7, sp, #0
 8032ffe:	6078      	str	r0, [r7, #4]
 8033000:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8033002:	2300      	movs	r3, #0
 8033004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8033006:	4b53      	ldr	r3, [pc, #332]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 8033008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803300a:	f003 0303 	and.w	r3, r3, #3
 803300e:	2b03      	cmp	r3, #3
 8033010:	d101      	bne.n	8033016 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8033012:	2301      	movs	r3, #1
 8033014:	e099      	b.n	803314a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8033016:	4b4f      	ldr	r3, [pc, #316]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 8033018:	681b      	ldr	r3, [r3, #0]
 803301a:	4a4e      	ldr	r2, [pc, #312]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 803301c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8033020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8033022:	f7f7 fe43 	bl	802acac <HAL_GetTick>
 8033026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8033028:	e008      	b.n	803303c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 803302a:	f7f7 fe3f 	bl	802acac <HAL_GetTick>
 803302e:	4602      	mov	r2, r0
 8033030:	68bb      	ldr	r3, [r7, #8]
 8033032:	1ad3      	subs	r3, r2, r3
 8033034:	2b02      	cmp	r3, #2
 8033036:	d901      	bls.n	803303c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8033038:	2303      	movs	r3, #3
 803303a:	e086      	b.n	803314a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 803303c:	4b45      	ldr	r3, [pc, #276]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 803303e:	681b      	ldr	r3, [r3, #0]
 8033040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8033044:	2b00      	cmp	r3, #0
 8033046:	d1f0      	bne.n	803302a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8033048:	4b42      	ldr	r3, [pc, #264]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 803304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803304c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8033050:	687b      	ldr	r3, [r7, #4]
 8033052:	681b      	ldr	r3, [r3, #0]
 8033054:	031b      	lsls	r3, r3, #12
 8033056:	493f      	ldr	r1, [pc, #252]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 8033058:	4313      	orrs	r3, r2
 803305a:	628b      	str	r3, [r1, #40]	; 0x28
 803305c:	687b      	ldr	r3, [r7, #4]
 803305e:	685b      	ldr	r3, [r3, #4]
 8033060:	3b01      	subs	r3, #1
 8033062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8033066:	687b      	ldr	r3, [r7, #4]
 8033068:	689b      	ldr	r3, [r3, #8]
 803306a:	3b01      	subs	r3, #1
 803306c:	025b      	lsls	r3, r3, #9
 803306e:	b29b      	uxth	r3, r3
 8033070:	431a      	orrs	r2, r3
 8033072:	687b      	ldr	r3, [r7, #4]
 8033074:	68db      	ldr	r3, [r3, #12]
 8033076:	3b01      	subs	r3, #1
 8033078:	041b      	lsls	r3, r3, #16
 803307a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 803307e:	431a      	orrs	r2, r3
 8033080:	687b      	ldr	r3, [r7, #4]
 8033082:	691b      	ldr	r3, [r3, #16]
 8033084:	3b01      	subs	r3, #1
 8033086:	061b      	lsls	r3, r3, #24
 8033088:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 803308c:	4931      	ldr	r1, [pc, #196]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 803308e:	4313      	orrs	r3, r2
 8033090:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8033092:	4b30      	ldr	r3, [pc, #192]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 8033094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033096:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 803309a:	687b      	ldr	r3, [r7, #4]
 803309c:	695b      	ldr	r3, [r3, #20]
 803309e:	492d      	ldr	r1, [pc, #180]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 80330a0:	4313      	orrs	r3, r2
 80330a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80330a4:	4b2b      	ldr	r3, [pc, #172]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 80330a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80330a8:	f023 0220 	bic.w	r2, r3, #32
 80330ac:	687b      	ldr	r3, [r7, #4]
 80330ae:	699b      	ldr	r3, [r3, #24]
 80330b0:	4928      	ldr	r1, [pc, #160]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 80330b2:	4313      	orrs	r3, r2
 80330b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80330b6:	4b27      	ldr	r3, [pc, #156]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 80330b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80330ba:	4a26      	ldr	r2, [pc, #152]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 80330bc:	f023 0310 	bic.w	r3, r3, #16
 80330c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80330c2:	4b24      	ldr	r3, [pc, #144]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 80330c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80330c6:	4b24      	ldr	r3, [pc, #144]	; (8033158 <RCCEx_PLL2_Config+0x160>)
 80330c8:	4013      	ands	r3, r2
 80330ca:	687a      	ldr	r2, [r7, #4]
 80330cc:	69d2      	ldr	r2, [r2, #28]
 80330ce:	00d2      	lsls	r2, r2, #3
 80330d0:	4920      	ldr	r1, [pc, #128]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 80330d2:	4313      	orrs	r3, r2
 80330d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80330d6:	4b1f      	ldr	r3, [pc, #124]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 80330d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80330da:	4a1e      	ldr	r2, [pc, #120]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 80330dc:	f043 0310 	orr.w	r3, r3, #16
 80330e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80330e2:	683b      	ldr	r3, [r7, #0]
 80330e4:	2b00      	cmp	r3, #0
 80330e6:	d106      	bne.n	80330f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80330e8:	4b1a      	ldr	r3, [pc, #104]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 80330ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80330ec:	4a19      	ldr	r2, [pc, #100]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 80330ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80330f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80330f4:	e00f      	b.n	8033116 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80330f6:	683b      	ldr	r3, [r7, #0]
 80330f8:	2b01      	cmp	r3, #1
 80330fa:	d106      	bne.n	803310a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80330fc:	4b15      	ldr	r3, [pc, #84]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 80330fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033100:	4a14      	ldr	r2, [pc, #80]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 8033102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8033106:	62d3      	str	r3, [r2, #44]	; 0x2c
 8033108:	e005      	b.n	8033116 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 803310a:	4b12      	ldr	r3, [pc, #72]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 803310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803310e:	4a11      	ldr	r2, [pc, #68]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 8033110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8033114:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8033116:	4b0f      	ldr	r3, [pc, #60]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 8033118:	681b      	ldr	r3, [r3, #0]
 803311a:	4a0e      	ldr	r2, [pc, #56]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 803311c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8033120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8033122:	f7f7 fdc3 	bl	802acac <HAL_GetTick>
 8033126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8033128:	e008      	b.n	803313c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 803312a:	f7f7 fdbf 	bl	802acac <HAL_GetTick>
 803312e:	4602      	mov	r2, r0
 8033130:	68bb      	ldr	r3, [r7, #8]
 8033132:	1ad3      	subs	r3, r2, r3
 8033134:	2b02      	cmp	r3, #2
 8033136:	d901      	bls.n	803313c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8033138:	2303      	movs	r3, #3
 803313a:	e006      	b.n	803314a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 803313c:	4b05      	ldr	r3, [pc, #20]	; (8033154 <RCCEx_PLL2_Config+0x15c>)
 803313e:	681b      	ldr	r3, [r3, #0]
 8033140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8033144:	2b00      	cmp	r3, #0
 8033146:	d0f0      	beq.n	803312a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8033148:	7bfb      	ldrb	r3, [r7, #15]
}
 803314a:	4618      	mov	r0, r3
 803314c:	3710      	adds	r7, #16
 803314e:	46bd      	mov	sp, r7
 8033150:	bd80      	pop	{r7, pc}
 8033152:	bf00      	nop
 8033154:	58024400 	.word	0x58024400
 8033158:	ffff0007 	.word	0xffff0007

0803315c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 803315c:	b580      	push	{r7, lr}
 803315e:	b084      	sub	sp, #16
 8033160:	af00      	add	r7, sp, #0
 8033162:	6078      	str	r0, [r7, #4]
 8033164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8033166:	2300      	movs	r3, #0
 8033168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 803316a:	4b53      	ldr	r3, [pc, #332]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 803316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803316e:	f003 0303 	and.w	r3, r3, #3
 8033172:	2b03      	cmp	r3, #3
 8033174:	d101      	bne.n	803317a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8033176:	2301      	movs	r3, #1
 8033178:	e099      	b.n	80332ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 803317a:	4b4f      	ldr	r3, [pc, #316]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 803317c:	681b      	ldr	r3, [r3, #0]
 803317e:	4a4e      	ldr	r2, [pc, #312]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8033184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8033186:	f7f7 fd91 	bl	802acac <HAL_GetTick>
 803318a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 803318c:	e008      	b.n	80331a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 803318e:	f7f7 fd8d 	bl	802acac <HAL_GetTick>
 8033192:	4602      	mov	r2, r0
 8033194:	68bb      	ldr	r3, [r7, #8]
 8033196:	1ad3      	subs	r3, r2, r3
 8033198:	2b02      	cmp	r3, #2
 803319a:	d901      	bls.n	80331a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 803319c:	2303      	movs	r3, #3
 803319e:	e086      	b.n	80332ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80331a0:	4b45      	ldr	r3, [pc, #276]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 80331a2:	681b      	ldr	r3, [r3, #0]
 80331a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80331a8:	2b00      	cmp	r3, #0
 80331aa:	d1f0      	bne.n	803318e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80331ac:	4b42      	ldr	r3, [pc, #264]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 80331ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80331b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80331b4:	687b      	ldr	r3, [r7, #4]
 80331b6:	681b      	ldr	r3, [r3, #0]
 80331b8:	051b      	lsls	r3, r3, #20
 80331ba:	493f      	ldr	r1, [pc, #252]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 80331bc:	4313      	orrs	r3, r2
 80331be:	628b      	str	r3, [r1, #40]	; 0x28
 80331c0:	687b      	ldr	r3, [r7, #4]
 80331c2:	685b      	ldr	r3, [r3, #4]
 80331c4:	3b01      	subs	r3, #1
 80331c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80331ca:	687b      	ldr	r3, [r7, #4]
 80331cc:	689b      	ldr	r3, [r3, #8]
 80331ce:	3b01      	subs	r3, #1
 80331d0:	025b      	lsls	r3, r3, #9
 80331d2:	b29b      	uxth	r3, r3
 80331d4:	431a      	orrs	r2, r3
 80331d6:	687b      	ldr	r3, [r7, #4]
 80331d8:	68db      	ldr	r3, [r3, #12]
 80331da:	3b01      	subs	r3, #1
 80331dc:	041b      	lsls	r3, r3, #16
 80331de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80331e2:	431a      	orrs	r2, r3
 80331e4:	687b      	ldr	r3, [r7, #4]
 80331e6:	691b      	ldr	r3, [r3, #16]
 80331e8:	3b01      	subs	r3, #1
 80331ea:	061b      	lsls	r3, r3, #24
 80331ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80331f0:	4931      	ldr	r1, [pc, #196]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 80331f2:	4313      	orrs	r3, r2
 80331f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80331f6:	4b30      	ldr	r3, [pc, #192]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 80331f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80331fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80331fe:	687b      	ldr	r3, [r7, #4]
 8033200:	695b      	ldr	r3, [r3, #20]
 8033202:	492d      	ldr	r1, [pc, #180]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033204:	4313      	orrs	r3, r2
 8033206:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8033208:	4b2b      	ldr	r3, [pc, #172]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 803320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803320c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8033210:	687b      	ldr	r3, [r7, #4]
 8033212:	699b      	ldr	r3, [r3, #24]
 8033214:	4928      	ldr	r1, [pc, #160]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033216:	4313      	orrs	r3, r2
 8033218:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 803321a:	4b27      	ldr	r3, [pc, #156]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 803321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803321e:	4a26      	ldr	r2, [pc, #152]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8033224:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8033226:	4b24      	ldr	r3, [pc, #144]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803322a:	4b24      	ldr	r3, [pc, #144]	; (80332bc <RCCEx_PLL3_Config+0x160>)
 803322c:	4013      	ands	r3, r2
 803322e:	687a      	ldr	r2, [r7, #4]
 8033230:	69d2      	ldr	r2, [r2, #28]
 8033232:	00d2      	lsls	r2, r2, #3
 8033234:	4920      	ldr	r1, [pc, #128]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033236:	4313      	orrs	r3, r2
 8033238:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 803323a:	4b1f      	ldr	r3, [pc, #124]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 803323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803323e:	4a1e      	ldr	r2, [pc, #120]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8033244:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8033246:	683b      	ldr	r3, [r7, #0]
 8033248:	2b00      	cmp	r3, #0
 803324a:	d106      	bne.n	803325a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 803324c:	4b1a      	ldr	r3, [pc, #104]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 803324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033250:	4a19      	ldr	r2, [pc, #100]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033252:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8033256:	62d3      	str	r3, [r2, #44]	; 0x2c
 8033258:	e00f      	b.n	803327a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 803325a:	683b      	ldr	r3, [r7, #0]
 803325c:	2b01      	cmp	r3, #1
 803325e:	d106      	bne.n	803326e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8033260:	4b15      	ldr	r3, [pc, #84]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033264:	4a14      	ldr	r2, [pc, #80]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033266:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 803326a:	62d3      	str	r3, [r2, #44]	; 0x2c
 803326c:	e005      	b.n	803327a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 803326e:	4b12      	ldr	r3, [pc, #72]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033272:	4a11      	ldr	r2, [pc, #68]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8033278:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 803327a:	4b0f      	ldr	r3, [pc, #60]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 803327c:	681b      	ldr	r3, [r3, #0]
 803327e:	4a0e      	ldr	r2, [pc, #56]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 8033280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8033284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8033286:	f7f7 fd11 	bl	802acac <HAL_GetTick>
 803328a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 803328c:	e008      	b.n	80332a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 803328e:	f7f7 fd0d 	bl	802acac <HAL_GetTick>
 8033292:	4602      	mov	r2, r0
 8033294:	68bb      	ldr	r3, [r7, #8]
 8033296:	1ad3      	subs	r3, r2, r3
 8033298:	2b02      	cmp	r3, #2
 803329a:	d901      	bls.n	80332a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 803329c:	2303      	movs	r3, #3
 803329e:	e006      	b.n	80332ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80332a0:	4b05      	ldr	r3, [pc, #20]	; (80332b8 <RCCEx_PLL3_Config+0x15c>)
 80332a2:	681b      	ldr	r3, [r3, #0]
 80332a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80332a8:	2b00      	cmp	r3, #0
 80332aa:	d0f0      	beq.n	803328e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80332ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80332ae:	4618      	mov	r0, r3
 80332b0:	3710      	adds	r7, #16
 80332b2:	46bd      	mov	sp, r7
 80332b4:	bd80      	pop	{r7, pc}
 80332b6:	bf00      	nop
 80332b8:	58024400 	.word	0x58024400
 80332bc:	ffff0007 	.word	0xffff0007

080332c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80332c0:	b580      	push	{r7, lr}
 80332c2:	b084      	sub	sp, #16
 80332c4:	af00      	add	r7, sp, #0
 80332c6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80332c8:	687b      	ldr	r3, [r7, #4]
 80332ca:	2b00      	cmp	r3, #0
 80332cc:	d101      	bne.n	80332d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80332ce:	2301      	movs	r3, #1
 80332d0:	e0f1      	b.n	80334b6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80332d2:	687b      	ldr	r3, [r7, #4]
 80332d4:	2200      	movs	r2, #0
 80332d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80332d8:	687b      	ldr	r3, [r7, #4]
 80332da:	681b      	ldr	r3, [r3, #0]
 80332dc:	4a78      	ldr	r2, [pc, #480]	; (80334c0 <HAL_SPI_Init+0x200>)
 80332de:	4293      	cmp	r3, r2
 80332e0:	d00f      	beq.n	8033302 <HAL_SPI_Init+0x42>
 80332e2:	687b      	ldr	r3, [r7, #4]
 80332e4:	681b      	ldr	r3, [r3, #0]
 80332e6:	4a77      	ldr	r2, [pc, #476]	; (80334c4 <HAL_SPI_Init+0x204>)
 80332e8:	4293      	cmp	r3, r2
 80332ea:	d00a      	beq.n	8033302 <HAL_SPI_Init+0x42>
 80332ec:	687b      	ldr	r3, [r7, #4]
 80332ee:	681b      	ldr	r3, [r3, #0]
 80332f0:	4a75      	ldr	r2, [pc, #468]	; (80334c8 <HAL_SPI_Init+0x208>)
 80332f2:	4293      	cmp	r3, r2
 80332f4:	d005      	beq.n	8033302 <HAL_SPI_Init+0x42>
 80332f6:	687b      	ldr	r3, [r7, #4]
 80332f8:	68db      	ldr	r3, [r3, #12]
 80332fa:	2b0f      	cmp	r3, #15
 80332fc:	d901      	bls.n	8033302 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80332fe:	2301      	movs	r3, #1
 8033300:	e0d9      	b.n	80334b6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8033302:	6878      	ldr	r0, [r7, #4]
 8033304:	f001 f8ee 	bl	80344e4 <SPI_GetPacketSize>
 8033308:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 803330a:	687b      	ldr	r3, [r7, #4]
 803330c:	681b      	ldr	r3, [r3, #0]
 803330e:	4a6c      	ldr	r2, [pc, #432]	; (80334c0 <HAL_SPI_Init+0x200>)
 8033310:	4293      	cmp	r3, r2
 8033312:	d00c      	beq.n	803332e <HAL_SPI_Init+0x6e>
 8033314:	687b      	ldr	r3, [r7, #4]
 8033316:	681b      	ldr	r3, [r3, #0]
 8033318:	4a6a      	ldr	r2, [pc, #424]	; (80334c4 <HAL_SPI_Init+0x204>)
 803331a:	4293      	cmp	r3, r2
 803331c:	d007      	beq.n	803332e <HAL_SPI_Init+0x6e>
 803331e:	687b      	ldr	r3, [r7, #4]
 8033320:	681b      	ldr	r3, [r3, #0]
 8033322:	4a69      	ldr	r2, [pc, #420]	; (80334c8 <HAL_SPI_Init+0x208>)
 8033324:	4293      	cmp	r3, r2
 8033326:	d002      	beq.n	803332e <HAL_SPI_Init+0x6e>
 8033328:	68fb      	ldr	r3, [r7, #12]
 803332a:	2b08      	cmp	r3, #8
 803332c:	d811      	bhi.n	8033352 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 803332e:	687b      	ldr	r3, [r7, #4]
 8033330:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8033332:	4a63      	ldr	r2, [pc, #396]	; (80334c0 <HAL_SPI_Init+0x200>)
 8033334:	4293      	cmp	r3, r2
 8033336:	d009      	beq.n	803334c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8033338:	687b      	ldr	r3, [r7, #4]
 803333a:	681b      	ldr	r3, [r3, #0]
 803333c:	4a61      	ldr	r2, [pc, #388]	; (80334c4 <HAL_SPI_Init+0x204>)
 803333e:	4293      	cmp	r3, r2
 8033340:	d004      	beq.n	803334c <HAL_SPI_Init+0x8c>
 8033342:	687b      	ldr	r3, [r7, #4]
 8033344:	681b      	ldr	r3, [r3, #0]
 8033346:	4a60      	ldr	r2, [pc, #384]	; (80334c8 <HAL_SPI_Init+0x208>)
 8033348:	4293      	cmp	r3, r2
 803334a:	d104      	bne.n	8033356 <HAL_SPI_Init+0x96>
 803334c:	68fb      	ldr	r3, [r7, #12]
 803334e:	2b10      	cmp	r3, #16
 8033350:	d901      	bls.n	8033356 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8033352:	2301      	movs	r3, #1
 8033354:	e0af      	b.n	80334b6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8033356:	687b      	ldr	r3, [r7, #4]
 8033358:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803335c:	b2db      	uxtb	r3, r3
 803335e:	2b00      	cmp	r3, #0
 8033360:	d106      	bne.n	8033370 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8033362:	687b      	ldr	r3, [r7, #4]
 8033364:	2200      	movs	r2, #0
 8033366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 803336a:	6878      	ldr	r0, [r7, #4]
 803336c:	f7f6 fc46 	bl	8029bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8033370:	687b      	ldr	r3, [r7, #4]
 8033372:	2202      	movs	r2, #2
 8033374:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8033378:	687b      	ldr	r3, [r7, #4]
 803337a:	681b      	ldr	r3, [r3, #0]
 803337c:	681a      	ldr	r2, [r3, #0]
 803337e:	687b      	ldr	r3, [r7, #4]
 8033380:	681b      	ldr	r3, [r3, #0]
 8033382:	f022 0201 	bic.w	r2, r2, #1
 8033386:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8033388:	687b      	ldr	r3, [r7, #4]
 803338a:	681b      	ldr	r3, [r3, #0]
 803338c:	689b      	ldr	r3, [r3, #8]
 803338e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8033392:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8033394:	687b      	ldr	r3, [r7, #4]
 8033396:	699b      	ldr	r3, [r3, #24]
 8033398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 803339c:	d119      	bne.n	80333d2 <HAL_SPI_Init+0x112>
 803339e:	687b      	ldr	r3, [r7, #4]
 80333a0:	685b      	ldr	r3, [r3, #4]
 80333a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80333a6:	d103      	bne.n	80333b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80333a8:	687b      	ldr	r3, [r7, #4]
 80333aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80333ac:	2b00      	cmp	r3, #0
 80333ae:	d008      	beq.n	80333c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80333b0:	687b      	ldr	r3, [r7, #4]
 80333b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80333b4:	2b00      	cmp	r3, #0
 80333b6:	d10c      	bne.n	80333d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80333b8:	687b      	ldr	r3, [r7, #4]
 80333ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80333bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80333c0:	d107      	bne.n	80333d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80333c2:	687b      	ldr	r3, [r7, #4]
 80333c4:	681b      	ldr	r3, [r3, #0]
 80333c6:	681a      	ldr	r2, [r3, #0]
 80333c8:	687b      	ldr	r3, [r7, #4]
 80333ca:	681b      	ldr	r3, [r3, #0]
 80333cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80333d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80333d2:	687b      	ldr	r3, [r7, #4]
 80333d4:	69da      	ldr	r2, [r3, #28]
 80333d6:	687b      	ldr	r3, [r7, #4]
 80333d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80333da:	431a      	orrs	r2, r3
 80333dc:	68bb      	ldr	r3, [r7, #8]
 80333de:	431a      	orrs	r2, r3
 80333e0:	687b      	ldr	r3, [r7, #4]
 80333e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80333e4:	ea42 0103 	orr.w	r1, r2, r3
 80333e8:	687b      	ldr	r3, [r7, #4]
 80333ea:	68da      	ldr	r2, [r3, #12]
 80333ec:	687b      	ldr	r3, [r7, #4]
 80333ee:	681b      	ldr	r3, [r3, #0]
 80333f0:	430a      	orrs	r2, r1
 80333f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80333f4:	687b      	ldr	r3, [r7, #4]
 80333f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80333f8:	687b      	ldr	r3, [r7, #4]
 80333fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80333fc:	431a      	orrs	r2, r3
 80333fe:	687b      	ldr	r3, [r7, #4]
 8033400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033402:	431a      	orrs	r2, r3
 8033404:	687b      	ldr	r3, [r7, #4]
 8033406:	699b      	ldr	r3, [r3, #24]
 8033408:	431a      	orrs	r2, r3
 803340a:	687b      	ldr	r3, [r7, #4]
 803340c:	691b      	ldr	r3, [r3, #16]
 803340e:	431a      	orrs	r2, r3
 8033410:	687b      	ldr	r3, [r7, #4]
 8033412:	695b      	ldr	r3, [r3, #20]
 8033414:	431a      	orrs	r2, r3
 8033416:	687b      	ldr	r3, [r7, #4]
 8033418:	6a1b      	ldr	r3, [r3, #32]
 803341a:	431a      	orrs	r2, r3
 803341c:	687b      	ldr	r3, [r7, #4]
 803341e:	685b      	ldr	r3, [r3, #4]
 8033420:	431a      	orrs	r2, r3
 8033422:	687b      	ldr	r3, [r7, #4]
 8033424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033426:	431a      	orrs	r2, r3
 8033428:	687b      	ldr	r3, [r7, #4]
 803342a:	689b      	ldr	r3, [r3, #8]
 803342c:	431a      	orrs	r2, r3
 803342e:	687b      	ldr	r3, [r7, #4]
 8033430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8033432:	ea42 0103 	orr.w	r1, r2, r3
 8033436:	687b      	ldr	r3, [r7, #4]
 8033438:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 803343a:	687b      	ldr	r3, [r7, #4]
 803343c:	681b      	ldr	r3, [r3, #0]
 803343e:	430a      	orrs	r2, r1
 8033440:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8033442:	687b      	ldr	r3, [r7, #4]
 8033444:	685b      	ldr	r3, [r3, #4]
 8033446:	2b00      	cmp	r3, #0
 8033448:	d113      	bne.n	8033472 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 803344a:	687b      	ldr	r3, [r7, #4]
 803344c:	681b      	ldr	r3, [r3, #0]
 803344e:	689b      	ldr	r3, [r3, #8]
 8033450:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8033454:	687b      	ldr	r3, [r7, #4]
 8033456:	681b      	ldr	r3, [r3, #0]
 8033458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 803345c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 803345e:	687b      	ldr	r3, [r7, #4]
 8033460:	681b      	ldr	r3, [r3, #0]
 8033462:	689b      	ldr	r3, [r3, #8]
 8033464:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8033468:	687b      	ldr	r3, [r7, #4]
 803346a:	681b      	ldr	r3, [r3, #0]
 803346c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8033470:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8033472:	687b      	ldr	r3, [r7, #4]
 8033474:	681b      	ldr	r3, [r3, #0]
 8033476:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8033478:	687b      	ldr	r3, [r7, #4]
 803347a:	681b      	ldr	r3, [r3, #0]
 803347c:	f022 0201 	bic.w	r2, r2, #1
 8033480:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8033482:	687b      	ldr	r3, [r7, #4]
 8033484:	685b      	ldr	r3, [r3, #4]
 8033486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803348a:	2b00      	cmp	r3, #0
 803348c:	d00a      	beq.n	80334a4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 803348e:	687b      	ldr	r3, [r7, #4]
 8033490:	681b      	ldr	r3, [r3, #0]
 8033492:	68db      	ldr	r3, [r3, #12]
 8033494:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8033498:	687b      	ldr	r3, [r7, #4]
 803349a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 803349c:	687b      	ldr	r3, [r7, #4]
 803349e:	681b      	ldr	r3, [r3, #0]
 80334a0:	430a      	orrs	r2, r1
 80334a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80334a4:	687b      	ldr	r3, [r7, #4]
 80334a6:	2200      	movs	r2, #0
 80334a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80334ac:	687b      	ldr	r3, [r7, #4]
 80334ae:	2201      	movs	r2, #1
 80334b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80334b4:	2300      	movs	r3, #0
}
 80334b6:	4618      	mov	r0, r3
 80334b8:	3710      	adds	r7, #16
 80334ba:	46bd      	mov	sp, r7
 80334bc:	bd80      	pop	{r7, pc}
 80334be:	bf00      	nop
 80334c0:	40013000 	.word	0x40013000
 80334c4:	40003800 	.word	0x40003800
 80334c8:	40003c00 	.word	0x40003c00

080334cc <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80334cc:	b580      	push	{r7, lr}
 80334ce:	b086      	sub	sp, #24
 80334d0:	af00      	add	r7, sp, #0
 80334d2:	60f8      	str	r0, [r7, #12]
 80334d4:	60b9      	str	r1, [r7, #8]
 80334d6:	4613      	mov	r3, r2
 80334d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80334da:	2300      	movs	r3, #0
 80334dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80334de:	68fb      	ldr	r3, [r7, #12]
 80334e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80334e4:	2b01      	cmp	r3, #1
 80334e6:	d101      	bne.n	80334ec <HAL_SPI_Transmit_DMA+0x20>
 80334e8:	2302      	movs	r3, #2
 80334ea:	e12c      	b.n	8033746 <HAL_SPI_Transmit_DMA+0x27a>
 80334ec:	68fb      	ldr	r3, [r7, #12]
 80334ee:	2201      	movs	r2, #1
 80334f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80334f4:	68fb      	ldr	r3, [r7, #12]
 80334f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80334fa:	b2db      	uxtb	r3, r3
 80334fc:	2b01      	cmp	r3, #1
 80334fe:	d007      	beq.n	8033510 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8033500:	2302      	movs	r3, #2
 8033502:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8033504:	68fb      	ldr	r3, [r7, #12]
 8033506:	2200      	movs	r2, #0
 8033508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 803350c:	7dfb      	ldrb	r3, [r7, #23]
 803350e:	e11a      	b.n	8033746 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8033510:	68bb      	ldr	r3, [r7, #8]
 8033512:	2b00      	cmp	r3, #0
 8033514:	d002      	beq.n	803351c <HAL_SPI_Transmit_DMA+0x50>
 8033516:	88fb      	ldrh	r3, [r7, #6]
 8033518:	2b00      	cmp	r3, #0
 803351a:	d107      	bne.n	803352c <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 803351c:	2301      	movs	r3, #1
 803351e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8033520:	68fb      	ldr	r3, [r7, #12]
 8033522:	2200      	movs	r2, #0
 8033524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033528:	7dfb      	ldrb	r3, [r7, #23]
 803352a:	e10c      	b.n	8033746 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 803352c:	68fb      	ldr	r3, [r7, #12]
 803352e:	2203      	movs	r2, #3
 8033530:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8033534:	68fb      	ldr	r3, [r7, #12]
 8033536:	2200      	movs	r2, #0
 8033538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 803353c:	68fb      	ldr	r3, [r7, #12]
 803353e:	68ba      	ldr	r2, [r7, #8]
 8033540:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8033542:	68fb      	ldr	r3, [r7, #12]
 8033544:	88fa      	ldrh	r2, [r7, #6]
 8033546:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 803354a:	68fb      	ldr	r3, [r7, #12]
 803354c:	88fa      	ldrh	r2, [r7, #6]
 803354e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8033552:	68fb      	ldr	r3, [r7, #12]
 8033554:	2200      	movs	r2, #0
 8033556:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8033558:	68fb      	ldr	r3, [r7, #12]
 803355a:	2200      	movs	r2, #0
 803355c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 803355e:	68fb      	ldr	r3, [r7, #12]
 8033560:	2200      	movs	r2, #0
 8033562:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8033564:	68fb      	ldr	r3, [r7, #12]
 8033566:	2200      	movs	r2, #0
 8033568:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 803356c:	68fb      	ldr	r3, [r7, #12]
 803356e:	2200      	movs	r2, #0
 8033570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8033574:	68fb      	ldr	r3, [r7, #12]
 8033576:	689b      	ldr	r3, [r3, #8]
 8033578:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 803357c:	d107      	bne.n	803358e <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 803357e:	68fb      	ldr	r3, [r7, #12]
 8033580:	681b      	ldr	r3, [r3, #0]
 8033582:	681a      	ldr	r2, [r3, #0]
 8033584:	68fb      	ldr	r3, [r7, #12]
 8033586:	681b      	ldr	r3, [r3, #0]
 8033588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 803358c:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 803358e:	68fb      	ldr	r3, [r7, #12]
 8033590:	68db      	ldr	r3, [r3, #12]
 8033592:	2b0f      	cmp	r3, #15
 8033594:	d905      	bls.n	80335a2 <HAL_SPI_Transmit_DMA+0xd6>
 8033596:	68fb      	ldr	r3, [r7, #12]
 8033598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803359a:	699b      	ldr	r3, [r3, #24]
 803359c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80335a0:	d10f      	bne.n	80335c2 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80335a2:	68fb      	ldr	r3, [r7, #12]
 80335a4:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80335a6:	2b07      	cmp	r3, #7
 80335a8:	d913      	bls.n	80335d2 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80335aa:	68fb      	ldr	r3, [r7, #12]
 80335ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80335ae:	699b      	ldr	r3, [r3, #24]
 80335b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80335b4:	d00d      	beq.n	80335d2 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80335b6:	68fb      	ldr	r3, [r7, #12]
 80335b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80335ba:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80335bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80335c0:	d007      	beq.n	80335d2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80335c2:	2301      	movs	r3, #1
 80335c4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80335c6:	68fb      	ldr	r3, [r7, #12]
 80335c8:	2200      	movs	r2, #0
 80335ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80335ce:	7dfb      	ldrb	r3, [r7, #23]
 80335d0:	e0b9      	b.n	8033746 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80335d2:	68fb      	ldr	r3, [r7, #12]
 80335d4:	68db      	ldr	r3, [r3, #12]
 80335d6:	2b07      	cmp	r3, #7
 80335d8:	d820      	bhi.n	803361c <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80335da:	68fb      	ldr	r3, [r7, #12]
 80335dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80335de:	699b      	ldr	r3, [r3, #24]
 80335e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80335e4:	d109      	bne.n	80335fa <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80335e6:	68fb      	ldr	r3, [r7, #12]
 80335e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80335ec:	b29b      	uxth	r3, r3
 80335ee:	3301      	adds	r3, #1
 80335f0:	105b      	asrs	r3, r3, #1
 80335f2:	b29a      	uxth	r2, r3
 80335f4:	68fb      	ldr	r3, [r7, #12]
 80335f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80335fa:	68fb      	ldr	r3, [r7, #12]
 80335fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80335fe:	699b      	ldr	r3, [r3, #24]
 8033600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033604:	d11e      	bne.n	8033644 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8033606:	68fb      	ldr	r3, [r7, #12]
 8033608:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 803360c:	b29b      	uxth	r3, r3
 803360e:	3303      	adds	r3, #3
 8033610:	109b      	asrs	r3, r3, #2
 8033612:	b29a      	uxth	r2, r3
 8033614:	68fb      	ldr	r3, [r7, #12]
 8033616:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 803361a:	e013      	b.n	8033644 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 803361c:	68fb      	ldr	r3, [r7, #12]
 803361e:	68db      	ldr	r3, [r3, #12]
 8033620:	2b0f      	cmp	r3, #15
 8033622:	d80f      	bhi.n	8033644 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033624:	68fb      	ldr	r3, [r7, #12]
 8033626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033628:	699b      	ldr	r3, [r3, #24]
 803362a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803362e:	d109      	bne.n	8033644 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8033630:	68fb      	ldr	r3, [r7, #12]
 8033632:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033636:	b29b      	uxth	r3, r3
 8033638:	3301      	adds	r3, #1
 803363a:	105b      	asrs	r3, r3, #1
 803363c:	b29a      	uxth	r2, r3
 803363e:	68fb      	ldr	r3, [r7, #12]
 8033640:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8033644:	68fb      	ldr	r3, [r7, #12]
 8033646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033648:	4a41      	ldr	r2, [pc, #260]	; (8033750 <HAL_SPI_Transmit_DMA+0x284>)
 803364a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 803364c:	68fb      	ldr	r3, [r7, #12]
 803364e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033650:	4a40      	ldr	r2, [pc, #256]	; (8033754 <HAL_SPI_Transmit_DMA+0x288>)
 8033652:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8033654:	68fb      	ldr	r3, [r7, #12]
 8033656:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033658:	4a3f      	ldr	r2, [pc, #252]	; (8033758 <HAL_SPI_Transmit_DMA+0x28c>)
 803365a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 803365c:	68fb      	ldr	r3, [r7, #12]
 803365e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033660:	2200      	movs	r2, #0
 8033662:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8033664:	68fb      	ldr	r3, [r7, #12]
 8033666:	681b      	ldr	r3, [r3, #0]
 8033668:	689a      	ldr	r2, [r3, #8]
 803366a:	68fb      	ldr	r3, [r7, #12]
 803366c:	681b      	ldr	r3, [r3, #0]
 803366e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8033672:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033674:	68fb      	ldr	r3, [r7, #12]
 8033676:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8033678:	68fb      	ldr	r3, [r7, #12]
 803367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803367c:	4619      	mov	r1, r3
 803367e:	68fb      	ldr	r3, [r7, #12]
 8033680:	681b      	ldr	r3, [r3, #0]
 8033682:	3320      	adds	r3, #32
 8033684:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8033686:	68fb      	ldr	r3, [r7, #12]
 8033688:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 803368c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 803368e:	f7f8 fb65 	bl	802bd5c <HAL_DMA_Start_IT>
 8033692:	4603      	mov	r3, r0
 8033694:	2b00      	cmp	r3, #0
 8033696:	d013      	beq.n	80336c0 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033698:	68fb      	ldr	r3, [r7, #12]
 803369a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803369e:	f043 0210 	orr.w	r2, r3, #16
 80336a2:	68fb      	ldr	r3, [r7, #12]
 80336a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80336a8:	68fb      	ldr	r3, [r7, #12]
 80336aa:	2200      	movs	r2, #0
 80336ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80336b0:	68fb      	ldr	r3, [r7, #12]
 80336b2:	2201      	movs	r2, #1
 80336b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80336b8:	2301      	movs	r3, #1
 80336ba:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80336bc:	7dfb      	ldrb	r3, [r7, #23]
 80336be:	e042      	b.n	8033746 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80336c0:	68fb      	ldr	r3, [r7, #12]
 80336c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80336c4:	69db      	ldr	r3, [r3, #28]
 80336c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80336ca:	d108      	bne.n	80336de <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80336cc:	68fb      	ldr	r3, [r7, #12]
 80336ce:	681b      	ldr	r3, [r3, #0]
 80336d0:	6859      	ldr	r1, [r3, #4]
 80336d2:	68fb      	ldr	r3, [r7, #12]
 80336d4:	681a      	ldr	r2, [r3, #0]
 80336d6:	4b21      	ldr	r3, [pc, #132]	; (803375c <HAL_SPI_Transmit_DMA+0x290>)
 80336d8:	400b      	ands	r3, r1
 80336da:	6053      	str	r3, [r2, #4]
 80336dc:	e009      	b.n	80336f2 <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80336de:	68fb      	ldr	r3, [r7, #12]
 80336e0:	681b      	ldr	r3, [r3, #0]
 80336e2:	685a      	ldr	r2, [r3, #4]
 80336e4:	4b1d      	ldr	r3, [pc, #116]	; (803375c <HAL_SPI_Transmit_DMA+0x290>)
 80336e6:	4013      	ands	r3, r2
 80336e8:	88f9      	ldrh	r1, [r7, #6]
 80336ea:	68fa      	ldr	r2, [r7, #12]
 80336ec:	6812      	ldr	r2, [r2, #0]
 80336ee:	430b      	orrs	r3, r1
 80336f0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80336f2:	68fb      	ldr	r3, [r7, #12]
 80336f4:	681b      	ldr	r3, [r3, #0]
 80336f6:	689a      	ldr	r2, [r3, #8]
 80336f8:	68fb      	ldr	r3, [r7, #12]
 80336fa:	681b      	ldr	r3, [r3, #0]
 80336fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8033700:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8033702:	68fb      	ldr	r3, [r7, #12]
 8033704:	681b      	ldr	r3, [r3, #0]
 8033706:	691a      	ldr	r2, [r3, #16]
 8033708:	68fb      	ldr	r3, [r7, #12]
 803370a:	681b      	ldr	r3, [r3, #0]
 803370c:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8033710:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8033712:	68fb      	ldr	r3, [r7, #12]
 8033714:	681b      	ldr	r3, [r3, #0]
 8033716:	681a      	ldr	r2, [r3, #0]
 8033718:	68fb      	ldr	r3, [r7, #12]
 803371a:	681b      	ldr	r3, [r3, #0]
 803371c:	f042 0201 	orr.w	r2, r2, #1
 8033720:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8033722:	68fb      	ldr	r3, [r7, #12]
 8033724:	685b      	ldr	r3, [r3, #4]
 8033726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803372a:	d107      	bne.n	803373c <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 803372c:	68fb      	ldr	r3, [r7, #12]
 803372e:	681b      	ldr	r3, [r3, #0]
 8033730:	681a      	ldr	r2, [r3, #0]
 8033732:	68fb      	ldr	r3, [r7, #12]
 8033734:	681b      	ldr	r3, [r3, #0]
 8033736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803373a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 803373c:	68fb      	ldr	r3, [r7, #12]
 803373e:	2200      	movs	r2, #0
 8033740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8033744:	7dfb      	ldrb	r3, [r7, #23]
}
 8033746:	4618      	mov	r0, r3
 8033748:	3718      	adds	r7, #24
 803374a:	46bd      	mov	sp, r7
 803374c:	bd80      	pop	{r7, pc}
 803374e:	bf00      	nop
 8033750:	080342d7 	.word	0x080342d7
 8033754:	08034205 	.word	0x08034205
 8033758:	0803432b 	.word	0x0803432b
 803375c:	ffff0000 	.word	0xffff0000

08033760 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8033760:	b580      	push	{r7, lr}
 8033762:	b086      	sub	sp, #24
 8033764:	af00      	add	r7, sp, #0
 8033766:	60f8      	str	r0, [r7, #12]
 8033768:	60b9      	str	r1, [r7, #8]
 803376a:	4613      	mov	r3, r2
 803376c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 803376e:	2300      	movs	r3, #0
 8033770:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8033772:	68fb      	ldr	r3, [r7, #12]
 8033774:	689b      	ldr	r3, [r3, #8]
 8033776:	2b00      	cmp	r3, #0
 8033778:	d110      	bne.n	803379c <HAL_SPI_Receive_DMA+0x3c>
 803377a:	68fb      	ldr	r3, [r7, #12]
 803377c:	685b      	ldr	r3, [r3, #4]
 803377e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033782:	d10b      	bne.n	803379c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8033784:	68fb      	ldr	r3, [r7, #12]
 8033786:	2204      	movs	r2, #4
 8033788:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 803378c:	88fb      	ldrh	r3, [r7, #6]
 803378e:	68ba      	ldr	r2, [r7, #8]
 8033790:	68b9      	ldr	r1, [r7, #8]
 8033792:	68f8      	ldr	r0, [r7, #12]
 8033794:	f000 f940 	bl	8033a18 <HAL_SPI_TransmitReceive_DMA>
 8033798:	4603      	mov	r3, r0
 803379a:	e130      	b.n	80339fe <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 803379c:	68fb      	ldr	r3, [r7, #12]
 803379e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80337a2:	2b01      	cmp	r3, #1
 80337a4:	d101      	bne.n	80337aa <HAL_SPI_Receive_DMA+0x4a>
 80337a6:	2302      	movs	r3, #2
 80337a8:	e129      	b.n	80339fe <HAL_SPI_Receive_DMA+0x29e>
 80337aa:	68fb      	ldr	r3, [r7, #12]
 80337ac:	2201      	movs	r2, #1
 80337ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80337b2:	68fb      	ldr	r3, [r7, #12]
 80337b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80337b8:	b2db      	uxtb	r3, r3
 80337ba:	2b01      	cmp	r3, #1
 80337bc:	d007      	beq.n	80337ce <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 80337be:	2302      	movs	r3, #2
 80337c0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80337c2:	68fb      	ldr	r3, [r7, #12]
 80337c4:	2200      	movs	r2, #0
 80337c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80337ca:	7dfb      	ldrb	r3, [r7, #23]
 80337cc:	e117      	b.n	80339fe <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 80337ce:	68bb      	ldr	r3, [r7, #8]
 80337d0:	2b00      	cmp	r3, #0
 80337d2:	d002      	beq.n	80337da <HAL_SPI_Receive_DMA+0x7a>
 80337d4:	88fb      	ldrh	r3, [r7, #6]
 80337d6:	2b00      	cmp	r3, #0
 80337d8:	d107      	bne.n	80337ea <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 80337da:	2301      	movs	r3, #1
 80337dc:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80337de:	68fb      	ldr	r3, [r7, #12]
 80337e0:	2200      	movs	r2, #0
 80337e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80337e6:	7dfb      	ldrb	r3, [r7, #23]
 80337e8:	e109      	b.n	80339fe <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80337ea:	68fb      	ldr	r3, [r7, #12]
 80337ec:	2204      	movs	r2, #4
 80337ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80337f2:	68fb      	ldr	r3, [r7, #12]
 80337f4:	2200      	movs	r2, #0
 80337f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80337fa:	68fb      	ldr	r3, [r7, #12]
 80337fc:	68ba      	ldr	r2, [r7, #8]
 80337fe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8033800:	68fb      	ldr	r3, [r7, #12]
 8033802:	88fa      	ldrh	r2, [r7, #6]
 8033804:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8033808:	68fb      	ldr	r3, [r7, #12]
 803380a:	88fa      	ldrh	r2, [r7, #6]
 803380c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8033810:	68fb      	ldr	r3, [r7, #12]
 8033812:	2200      	movs	r2, #0
 8033814:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8033816:	68fb      	ldr	r3, [r7, #12]
 8033818:	2200      	movs	r2, #0
 803381a:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 803381c:	68fb      	ldr	r3, [r7, #12]
 803381e:	2200      	movs	r2, #0
 8033820:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8033824:	68fb      	ldr	r3, [r7, #12]
 8033826:	2200      	movs	r2, #0
 8033828:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 803382c:	68fb      	ldr	r3, [r7, #12]
 803382e:	689b      	ldr	r3, [r3, #8]
 8033830:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8033834:	d107      	bne.n	8033846 <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8033836:	68fb      	ldr	r3, [r7, #12]
 8033838:	681b      	ldr	r3, [r3, #0]
 803383a:	681a      	ldr	r2, [r3, #0]
 803383c:	68fb      	ldr	r3, [r7, #12]
 803383e:	681b      	ldr	r3, [r3, #0]
 8033840:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8033844:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033846:	68fb      	ldr	r3, [r7, #12]
 8033848:	68db      	ldr	r3, [r3, #12]
 803384a:	2b0f      	cmp	r3, #15
 803384c:	d905      	bls.n	803385a <HAL_SPI_Receive_DMA+0xfa>
 803384e:	68fb      	ldr	r3, [r7, #12]
 8033850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033852:	699b      	ldr	r3, [r3, #24]
 8033854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033858:	d10f      	bne.n	803387a <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 803385a:	68fb      	ldr	r3, [r7, #12]
 803385c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 803385e:	2b07      	cmp	r3, #7
 8033860:	d913      	bls.n	803388a <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033862:	68fb      	ldr	r3, [r7, #12]
 8033864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033866:	699b      	ldr	r3, [r3, #24]
 8033868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803386c:	d00d      	beq.n	803388a <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 803386e:	68fb      	ldr	r3, [r7, #12]
 8033870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033872:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033878:	d007      	beq.n	803388a <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 803387a:	2301      	movs	r3, #1
 803387c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803387e:	68fb      	ldr	r3, [r7, #12]
 8033880:	2200      	movs	r2, #0
 8033882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033886:	7dfb      	ldrb	r3, [r7, #23]
 8033888:	e0b9      	b.n	80339fe <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 803388a:	68fb      	ldr	r3, [r7, #12]
 803388c:	681b      	ldr	r3, [r3, #0]
 803388e:	689a      	ldr	r2, [r3, #8]
 8033890:	68fb      	ldr	r3, [r7, #12]
 8033892:	681b      	ldr	r3, [r3, #0]
 8033894:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8033898:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 803389a:	68fb      	ldr	r3, [r7, #12]
 803389c:	68db      	ldr	r3, [r3, #12]
 803389e:	2b07      	cmp	r3, #7
 80338a0:	d820      	bhi.n	80338e4 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80338a2:	68fb      	ldr	r3, [r7, #12]
 80338a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338a6:	699b      	ldr	r3, [r3, #24]
 80338a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80338ac:	d109      	bne.n	80338c2 <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80338ae:	68fb      	ldr	r3, [r7, #12]
 80338b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80338b4:	b29b      	uxth	r3, r3
 80338b6:	3301      	adds	r3, #1
 80338b8:	105b      	asrs	r3, r3, #1
 80338ba:	b29a      	uxth	r2, r3
 80338bc:	68fb      	ldr	r3, [r7, #12]
 80338be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80338c2:	68fb      	ldr	r3, [r7, #12]
 80338c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338c6:	699b      	ldr	r3, [r3, #24]
 80338c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80338cc:	d11e      	bne.n	803390c <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80338ce:	68fb      	ldr	r3, [r7, #12]
 80338d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80338d4:	b29b      	uxth	r3, r3
 80338d6:	3303      	adds	r3, #3
 80338d8:	109b      	asrs	r3, r3, #2
 80338da:	b29a      	uxth	r2, r3
 80338dc:	68fb      	ldr	r3, [r7, #12]
 80338de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80338e2:	e013      	b.n	803390c <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80338e4:	68fb      	ldr	r3, [r7, #12]
 80338e6:	68db      	ldr	r3, [r3, #12]
 80338e8:	2b0f      	cmp	r3, #15
 80338ea:	d80f      	bhi.n	803390c <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80338ec:	68fb      	ldr	r3, [r7, #12]
 80338ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338f0:	699b      	ldr	r3, [r3, #24]
 80338f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80338f6:	d109      	bne.n	803390c <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80338f8:	68fb      	ldr	r3, [r7, #12]
 80338fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80338fe:	b29b      	uxth	r3, r3
 8033900:	3301      	adds	r3, #1
 8033902:	105b      	asrs	r3, r3, #1
 8033904:	b29a      	uxth	r2, r3
 8033906:	68fb      	ldr	r3, [r7, #12]
 8033908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 803390c:	68fb      	ldr	r3, [r7, #12]
 803390e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033910:	4a3d      	ldr	r2, [pc, #244]	; (8033a08 <HAL_SPI_Receive_DMA+0x2a8>)
 8033912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8033914:	68fb      	ldr	r3, [r7, #12]
 8033916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033918:	4a3c      	ldr	r2, [pc, #240]	; (8033a0c <HAL_SPI_Receive_DMA+0x2ac>)
 803391a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 803391c:	68fb      	ldr	r3, [r7, #12]
 803391e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033920:	4a3b      	ldr	r2, [pc, #236]	; (8033a10 <HAL_SPI_Receive_DMA+0x2b0>)
 8033922:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8033924:	68fb      	ldr	r3, [r7, #12]
 8033926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033928:	2200      	movs	r2, #0
 803392a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 803392c:	68fb      	ldr	r3, [r7, #12]
 803392e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8033930:	68fb      	ldr	r3, [r7, #12]
 8033932:	681b      	ldr	r3, [r3, #0]
 8033934:	3330      	adds	r3, #48	; 0x30
 8033936:	4619      	mov	r1, r3
 8033938:	68fb      	ldr	r3, [r7, #12]
 803393a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803393c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 803393e:	68fb      	ldr	r3, [r7, #12]
 8033940:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033944:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033946:	f7f8 fa09 	bl	802bd5c <HAL_DMA_Start_IT>
 803394a:	4603      	mov	r3, r0
 803394c:	2b00      	cmp	r3, #0
 803394e:	d013      	beq.n	8033978 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033950:	68fb      	ldr	r3, [r7, #12]
 8033952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033956:	f043 0210 	orr.w	r2, r3, #16
 803395a:	68fb      	ldr	r3, [r7, #12]
 803395c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033960:	68fb      	ldr	r3, [r7, #12]
 8033962:	2200      	movs	r2, #0
 8033964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033968:	68fb      	ldr	r3, [r7, #12]
 803396a:	2201      	movs	r2, #1
 803396c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033970:	2301      	movs	r3, #1
 8033972:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033974:	7dfb      	ldrb	r3, [r7, #23]
 8033976:	e042      	b.n	80339fe <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8033978:	68fb      	ldr	r3, [r7, #12]
 803397a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803397c:	69db      	ldr	r3, [r3, #28]
 803397e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033982:	d108      	bne.n	8033996 <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8033984:	68fb      	ldr	r3, [r7, #12]
 8033986:	681b      	ldr	r3, [r3, #0]
 8033988:	6859      	ldr	r1, [r3, #4]
 803398a:	68fb      	ldr	r3, [r7, #12]
 803398c:	681a      	ldr	r2, [r3, #0]
 803398e:	4b21      	ldr	r3, [pc, #132]	; (8033a14 <HAL_SPI_Receive_DMA+0x2b4>)
 8033990:	400b      	ands	r3, r1
 8033992:	6053      	str	r3, [r2, #4]
 8033994:	e009      	b.n	80339aa <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8033996:	68fb      	ldr	r3, [r7, #12]
 8033998:	681b      	ldr	r3, [r3, #0]
 803399a:	685a      	ldr	r2, [r3, #4]
 803399c:	4b1d      	ldr	r3, [pc, #116]	; (8033a14 <HAL_SPI_Receive_DMA+0x2b4>)
 803399e:	4013      	ands	r3, r2
 80339a0:	88f9      	ldrh	r1, [r7, #6]
 80339a2:	68fa      	ldr	r2, [r7, #12]
 80339a4:	6812      	ldr	r2, [r2, #0]
 80339a6:	430b      	orrs	r3, r1
 80339a8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80339aa:	68fb      	ldr	r3, [r7, #12]
 80339ac:	681b      	ldr	r3, [r3, #0]
 80339ae:	689a      	ldr	r2, [r3, #8]
 80339b0:	68fb      	ldr	r3, [r7, #12]
 80339b2:	681b      	ldr	r3, [r3, #0]
 80339b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80339b8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80339ba:	68fb      	ldr	r3, [r7, #12]
 80339bc:	681b      	ldr	r3, [r3, #0]
 80339be:	691a      	ldr	r2, [r3, #16]
 80339c0:	68fb      	ldr	r3, [r7, #12]
 80339c2:	681b      	ldr	r3, [r3, #0]
 80339c4:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80339c8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80339ca:	68fb      	ldr	r3, [r7, #12]
 80339cc:	681b      	ldr	r3, [r3, #0]
 80339ce:	681a      	ldr	r2, [r3, #0]
 80339d0:	68fb      	ldr	r3, [r7, #12]
 80339d2:	681b      	ldr	r3, [r3, #0]
 80339d4:	f042 0201 	orr.w	r2, r2, #1
 80339d8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80339da:	68fb      	ldr	r3, [r7, #12]
 80339dc:	685b      	ldr	r3, [r3, #4]
 80339de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80339e2:	d107      	bne.n	80339f4 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80339e4:	68fb      	ldr	r3, [r7, #12]
 80339e6:	681b      	ldr	r3, [r3, #0]
 80339e8:	681a      	ldr	r2, [r3, #0]
 80339ea:	68fb      	ldr	r3, [r7, #12]
 80339ec:	681b      	ldr	r3, [r3, #0]
 80339ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80339f2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80339f4:	68fb      	ldr	r3, [r7, #12]
 80339f6:	2200      	movs	r2, #0
 80339f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80339fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80339fe:	4618      	mov	r0, r3
 8033a00:	3718      	adds	r7, #24
 8033a02:	46bd      	mov	sp, r7
 8033a04:	bd80      	pop	{r7, pc}
 8033a06:	bf00      	nop
 8033a08:	080342f3 	.word	0x080342f3
 8033a0c:	0803424b 	.word	0x0803424b
 8033a10:	0803432b 	.word	0x0803432b
 8033a14:	ffff0000 	.word	0xffff0000

08033a18 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8033a18:	b580      	push	{r7, lr}
 8033a1a:	b086      	sub	sp, #24
 8033a1c:	af00      	add	r7, sp, #0
 8033a1e:	60f8      	str	r0, [r7, #12]
 8033a20:	60b9      	str	r1, [r7, #8]
 8033a22:	607a      	str	r2, [r7, #4]
 8033a24:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8033a26:	2300      	movs	r3, #0
 8033a28:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8033a2a:	68fb      	ldr	r3, [r7, #12]
 8033a2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8033a30:	2b01      	cmp	r3, #1
 8033a32:	d101      	bne.n	8033a38 <HAL_SPI_TransmitReceive_DMA+0x20>
 8033a34:	2302      	movs	r3, #2
 8033a36:	e1b4      	b.n	8033da2 <HAL_SPI_TransmitReceive_DMA+0x38a>
 8033a38:	68fb      	ldr	r3, [r7, #12]
 8033a3a:	2201      	movs	r2, #1
 8033a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8033a40:	68fb      	ldr	r3, [r7, #12]
 8033a42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033a46:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8033a48:	68fb      	ldr	r3, [r7, #12]
 8033a4a:	685b      	ldr	r3, [r3, #4]
 8033a4c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8033a4e:	7dbb      	ldrb	r3, [r7, #22]
 8033a50:	2b01      	cmp	r3, #1
 8033a52:	d012      	beq.n	8033a7a <HAL_SPI_TransmitReceive_DMA+0x62>
 8033a54:	693b      	ldr	r3, [r7, #16]
 8033a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033a5a:	d106      	bne.n	8033a6a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8033a5c:	68fb      	ldr	r3, [r7, #12]
 8033a5e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8033a60:	2b00      	cmp	r3, #0
 8033a62:	d102      	bne.n	8033a6a <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8033a64:	7dbb      	ldrb	r3, [r7, #22]
 8033a66:	2b04      	cmp	r3, #4
 8033a68:	d007      	beq.n	8033a7a <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8033a6a:	2302      	movs	r3, #2
 8033a6c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8033a6e:	68fb      	ldr	r3, [r7, #12]
 8033a70:	2200      	movs	r2, #0
 8033a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033a76:	7dfb      	ldrb	r3, [r7, #23]
 8033a78:	e193      	b.n	8033da2 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8033a7a:	68bb      	ldr	r3, [r7, #8]
 8033a7c:	2b00      	cmp	r3, #0
 8033a7e:	d005      	beq.n	8033a8c <HAL_SPI_TransmitReceive_DMA+0x74>
 8033a80:	687b      	ldr	r3, [r7, #4]
 8033a82:	2b00      	cmp	r3, #0
 8033a84:	d002      	beq.n	8033a8c <HAL_SPI_TransmitReceive_DMA+0x74>
 8033a86:	887b      	ldrh	r3, [r7, #2]
 8033a88:	2b00      	cmp	r3, #0
 8033a8a:	d107      	bne.n	8033a9c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8033a8c:	2301      	movs	r3, #1
 8033a8e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8033a90:	68fb      	ldr	r3, [r7, #12]
 8033a92:	2200      	movs	r2, #0
 8033a94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033a98:	7dfb      	ldrb	r3, [r7, #23]
 8033a9a:	e182      	b.n	8033da2 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8033a9c:	68fb      	ldr	r3, [r7, #12]
 8033a9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033aa2:	b2db      	uxtb	r3, r3
 8033aa4:	2b04      	cmp	r3, #4
 8033aa6:	d003      	beq.n	8033ab0 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8033aa8:	68fb      	ldr	r3, [r7, #12]
 8033aaa:	2205      	movs	r2, #5
 8033aac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8033ab0:	68fb      	ldr	r3, [r7, #12]
 8033ab2:	2200      	movs	r2, #0
 8033ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8033ab8:	68fb      	ldr	r3, [r7, #12]
 8033aba:	68ba      	ldr	r2, [r7, #8]
 8033abc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8033abe:	68fb      	ldr	r3, [r7, #12]
 8033ac0:	887a      	ldrh	r2, [r7, #2]
 8033ac2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8033ac6:	68fb      	ldr	r3, [r7, #12]
 8033ac8:	887a      	ldrh	r2, [r7, #2]
 8033aca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8033ace:	68fb      	ldr	r3, [r7, #12]
 8033ad0:	687a      	ldr	r2, [r7, #4]
 8033ad2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8033ad4:	68fb      	ldr	r3, [r7, #12]
 8033ad6:	887a      	ldrh	r2, [r7, #2]
 8033ad8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8033adc:	68fb      	ldr	r3, [r7, #12]
 8033ade:	887a      	ldrh	r2, [r7, #2]
 8033ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8033ae4:	68fb      	ldr	r3, [r7, #12]
 8033ae6:	2200      	movs	r2, #0
 8033ae8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8033aea:	68fb      	ldr	r3, [r7, #12]
 8033aec:	2200      	movs	r2, #0
 8033aee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8033af0:	68fb      	ldr	r3, [r7, #12]
 8033af2:	681b      	ldr	r3, [r3, #0]
 8033af4:	689a      	ldr	r2, [r3, #8]
 8033af6:	68fb      	ldr	r3, [r7, #12]
 8033af8:	681b      	ldr	r3, [r3, #0]
 8033afa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8033afe:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033b00:	68fb      	ldr	r3, [r7, #12]
 8033b02:	68db      	ldr	r3, [r3, #12]
 8033b04:	2b0f      	cmp	r3, #15
 8033b06:	d905      	bls.n	8033b14 <HAL_SPI_TransmitReceive_DMA+0xfc>
 8033b08:	68fb      	ldr	r3, [r7, #12]
 8033b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b0c:	699b      	ldr	r3, [r3, #24]
 8033b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033b12:	d10f      	bne.n	8033b34 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033b14:	68fb      	ldr	r3, [r7, #12]
 8033b16:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033b18:	2b07      	cmp	r3, #7
 8033b1a:	d913      	bls.n	8033b44 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033b1c:	68fb      	ldr	r3, [r7, #12]
 8033b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b20:	699b      	ldr	r3, [r3, #24]
 8033b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033b26:	d00d      	beq.n	8033b44 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8033b28:	68fb      	ldr	r3, [r7, #12]
 8033b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b2c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033b2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033b32:	d007      	beq.n	8033b44 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8033b34:	2301      	movs	r3, #1
 8033b36:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033b38:	68fb      	ldr	r3, [r7, #12]
 8033b3a:	2200      	movs	r2, #0
 8033b3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033b40:	7dfb      	ldrb	r3, [r7, #23]
 8033b42:	e12e      	b.n	8033da2 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8033b44:	68fb      	ldr	r3, [r7, #12]
 8033b46:	68db      	ldr	r3, [r3, #12]
 8033b48:	2b07      	cmp	r3, #7
 8033b4a:	d840      	bhi.n	8033bce <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8033b4c:	68fb      	ldr	r3, [r7, #12]
 8033b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033b50:	699b      	ldr	r3, [r3, #24]
 8033b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033b56:	d109      	bne.n	8033b6c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8033b58:	68fb      	ldr	r3, [r7, #12]
 8033b5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033b5e:	b29b      	uxth	r3, r3
 8033b60:	3301      	adds	r3, #1
 8033b62:	105b      	asrs	r3, r3, #1
 8033b64:	b29a      	uxth	r2, r3
 8033b66:	68fb      	ldr	r3, [r7, #12]
 8033b68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033b6c:	68fb      	ldr	r3, [r7, #12]
 8033b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033b70:	699b      	ldr	r3, [r3, #24]
 8033b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033b76:	d109      	bne.n	8033b8c <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8033b78:	68fb      	ldr	r3, [r7, #12]
 8033b7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033b7e:	b29b      	uxth	r3, r3
 8033b80:	3303      	adds	r3, #3
 8033b82:	109b      	asrs	r3, r3, #2
 8033b84:	b29a      	uxth	r2, r3
 8033b86:	68fb      	ldr	r3, [r7, #12]
 8033b88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8033b8c:	68fb      	ldr	r3, [r7, #12]
 8033b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b90:	699b      	ldr	r3, [r3, #24]
 8033b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033b96:	d109      	bne.n	8033bac <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8033b98:	68fb      	ldr	r3, [r7, #12]
 8033b9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033b9e:	b29b      	uxth	r3, r3
 8033ba0:	3301      	adds	r3, #1
 8033ba2:	105b      	asrs	r3, r3, #1
 8033ba4:	b29a      	uxth	r2, r3
 8033ba6:	68fb      	ldr	r3, [r7, #12]
 8033ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033bac:	68fb      	ldr	r3, [r7, #12]
 8033bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033bb0:	699b      	ldr	r3, [r3, #24]
 8033bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033bb6:	d12e      	bne.n	8033c16 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8033bb8:	68fb      	ldr	r3, [r7, #12]
 8033bba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033bbe:	b29b      	uxth	r3, r3
 8033bc0:	3303      	adds	r3, #3
 8033bc2:	109b      	asrs	r3, r3, #2
 8033bc4:	b29a      	uxth	r2, r3
 8033bc6:	68fb      	ldr	r3, [r7, #12]
 8033bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8033bcc:	e023      	b.n	8033c16 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8033bce:	68fb      	ldr	r3, [r7, #12]
 8033bd0:	68db      	ldr	r3, [r3, #12]
 8033bd2:	2b0f      	cmp	r3, #15
 8033bd4:	d81f      	bhi.n	8033c16 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033bd6:	68fb      	ldr	r3, [r7, #12]
 8033bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033bda:	699b      	ldr	r3, [r3, #24]
 8033bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033be0:	d109      	bne.n	8033bf6 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8033be2:	68fb      	ldr	r3, [r7, #12]
 8033be4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033be8:	b29b      	uxth	r3, r3
 8033bea:	3301      	adds	r3, #1
 8033bec:	105b      	asrs	r3, r3, #1
 8033bee:	b29a      	uxth	r2, r3
 8033bf0:	68fb      	ldr	r3, [r7, #12]
 8033bf2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033bf6:	68fb      	ldr	r3, [r7, #12]
 8033bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033bfa:	699b      	ldr	r3, [r3, #24]
 8033bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033c00:	d109      	bne.n	8033c16 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8033c02:	68fb      	ldr	r3, [r7, #12]
 8033c04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033c08:	b29b      	uxth	r3, r3
 8033c0a:	3301      	adds	r3, #1
 8033c0c:	105b      	asrs	r3, r3, #1
 8033c0e:	b29a      	uxth	r2, r3
 8033c10:	68fb      	ldr	r3, [r7, #12]
 8033c12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8033c16:	68fb      	ldr	r3, [r7, #12]
 8033c18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033c1c:	b2db      	uxtb	r3, r3
 8033c1e:	2b04      	cmp	r3, #4
 8033c20:	d108      	bne.n	8033c34 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8033c22:	68fb      	ldr	r3, [r7, #12]
 8033c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033c26:	4a61      	ldr	r2, [pc, #388]	; (8033dac <HAL_SPI_TransmitReceive_DMA+0x394>)
 8033c28:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8033c2a:	68fb      	ldr	r3, [r7, #12]
 8033c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033c2e:	4a60      	ldr	r2, [pc, #384]	; (8033db0 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8033c30:	63da      	str	r2, [r3, #60]	; 0x3c
 8033c32:	e007      	b.n	8033c44 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8033c34:	68fb      	ldr	r3, [r7, #12]
 8033c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033c38:	4a5e      	ldr	r2, [pc, #376]	; (8033db4 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8033c3a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8033c3c:	68fb      	ldr	r3, [r7, #12]
 8033c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033c40:	4a5d      	ldr	r2, [pc, #372]	; (8033db8 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8033c42:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8033c44:	68fb      	ldr	r3, [r7, #12]
 8033c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033c48:	4a5c      	ldr	r2, [pc, #368]	; (8033dbc <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8033c4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8033c4c:	68fb      	ldr	r3, [r7, #12]
 8033c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033c50:	2200      	movs	r2, #0
 8033c52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033c54:	68fb      	ldr	r3, [r7, #12]
 8033c56:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8033c58:	68fb      	ldr	r3, [r7, #12]
 8033c5a:	681b      	ldr	r3, [r3, #0]
 8033c5c:	3330      	adds	r3, #48	; 0x30
 8033c5e:	4619      	mov	r1, r3
 8033c60:	68fb      	ldr	r3, [r7, #12]
 8033c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033c64:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8033c66:	68fb      	ldr	r3, [r7, #12]
 8033c68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033c6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033c6e:	f7f8 f875 	bl	802bd5c <HAL_DMA_Start_IT>
 8033c72:	4603      	mov	r3, r0
 8033c74:	2b00      	cmp	r3, #0
 8033c76:	d013      	beq.n	8033ca0 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033c78:	68fb      	ldr	r3, [r7, #12]
 8033c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033c7e:	f043 0210 	orr.w	r2, r3, #16
 8033c82:	68fb      	ldr	r3, [r7, #12]
 8033c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033c88:	68fb      	ldr	r3, [r7, #12]
 8033c8a:	2200      	movs	r2, #0
 8033c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033c90:	68fb      	ldr	r3, [r7, #12]
 8033c92:	2201      	movs	r2, #1
 8033c94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033c98:	2301      	movs	r3, #1
 8033c9a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033c9c:	7dfb      	ldrb	r3, [r7, #23]
 8033c9e:	e080      	b.n	8033da2 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8033ca0:	68fb      	ldr	r3, [r7, #12]
 8033ca2:	681b      	ldr	r3, [r3, #0]
 8033ca4:	689a      	ldr	r2, [r3, #8]
 8033ca6:	68fb      	ldr	r3, [r7, #12]
 8033ca8:	681b      	ldr	r3, [r3, #0]
 8033caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8033cae:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8033cb0:	68fb      	ldr	r3, [r7, #12]
 8033cb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033cb4:	2200      	movs	r2, #0
 8033cb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8033cb8:	68fb      	ldr	r3, [r7, #12]
 8033cba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033cbc:	2200      	movs	r2, #0
 8033cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8033cc0:	68fb      	ldr	r3, [r7, #12]
 8033cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033cc4:	2200      	movs	r2, #0
 8033cc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8033cc8:	68fb      	ldr	r3, [r7, #12]
 8033cca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033ccc:	2200      	movs	r2, #0
 8033cce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033cd0:	68fb      	ldr	r3, [r7, #12]
 8033cd2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8033cd4:	68fb      	ldr	r3, [r7, #12]
 8033cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033cd8:	4619      	mov	r1, r3
 8033cda:	68fb      	ldr	r3, [r7, #12]
 8033cdc:	681b      	ldr	r3, [r3, #0]
 8033cde:	3320      	adds	r3, #32
 8033ce0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8033ce2:	68fb      	ldr	r3, [r7, #12]
 8033ce4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033ce8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033cea:	f7f8 f837 	bl	802bd5c <HAL_DMA_Start_IT>
 8033cee:	4603      	mov	r3, r0
 8033cf0:	2b00      	cmp	r3, #0
 8033cf2:	d013      	beq.n	8033d1c <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033cf4:	68fb      	ldr	r3, [r7, #12]
 8033cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033cfa:	f043 0210 	orr.w	r2, r3, #16
 8033cfe:	68fb      	ldr	r3, [r7, #12]
 8033d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033d04:	68fb      	ldr	r3, [r7, #12]
 8033d06:	2200      	movs	r2, #0
 8033d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033d0c:	68fb      	ldr	r3, [r7, #12]
 8033d0e:	2201      	movs	r2, #1
 8033d10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033d14:	2301      	movs	r3, #1
 8033d16:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033d18:	7dfb      	ldrb	r3, [r7, #23]
 8033d1a:	e042      	b.n	8033da2 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8033d1c:	68fb      	ldr	r3, [r7, #12]
 8033d1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033d20:	69db      	ldr	r3, [r3, #28]
 8033d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033d26:	d108      	bne.n	8033d3a <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8033d28:	68fb      	ldr	r3, [r7, #12]
 8033d2a:	681b      	ldr	r3, [r3, #0]
 8033d2c:	6859      	ldr	r1, [r3, #4]
 8033d2e:	68fb      	ldr	r3, [r7, #12]
 8033d30:	681a      	ldr	r2, [r3, #0]
 8033d32:	4b23      	ldr	r3, [pc, #140]	; (8033dc0 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8033d34:	400b      	ands	r3, r1
 8033d36:	6053      	str	r3, [r2, #4]
 8033d38:	e009      	b.n	8033d4e <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8033d3a:	68fb      	ldr	r3, [r7, #12]
 8033d3c:	681b      	ldr	r3, [r3, #0]
 8033d3e:	685a      	ldr	r2, [r3, #4]
 8033d40:	4b1f      	ldr	r3, [pc, #124]	; (8033dc0 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8033d42:	4013      	ands	r3, r2
 8033d44:	8879      	ldrh	r1, [r7, #2]
 8033d46:	68fa      	ldr	r2, [r7, #12]
 8033d48:	6812      	ldr	r2, [r2, #0]
 8033d4a:	430b      	orrs	r3, r1
 8033d4c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8033d4e:	68fb      	ldr	r3, [r7, #12]
 8033d50:	681b      	ldr	r3, [r3, #0]
 8033d52:	689a      	ldr	r2, [r3, #8]
 8033d54:	68fb      	ldr	r3, [r7, #12]
 8033d56:	681b      	ldr	r3, [r3, #0]
 8033d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8033d5c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8033d5e:	68fb      	ldr	r3, [r7, #12]
 8033d60:	681b      	ldr	r3, [r3, #0]
 8033d62:	691a      	ldr	r2, [r3, #16]
 8033d64:	68fb      	ldr	r3, [r7, #12]
 8033d66:	681b      	ldr	r3, [r3, #0]
 8033d68:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8033d6c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8033d6e:	68fb      	ldr	r3, [r7, #12]
 8033d70:	681b      	ldr	r3, [r3, #0]
 8033d72:	681a      	ldr	r2, [r3, #0]
 8033d74:	68fb      	ldr	r3, [r7, #12]
 8033d76:	681b      	ldr	r3, [r3, #0]
 8033d78:	f042 0201 	orr.w	r2, r2, #1
 8033d7c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8033d7e:	68fb      	ldr	r3, [r7, #12]
 8033d80:	685b      	ldr	r3, [r3, #4]
 8033d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033d86:	d107      	bne.n	8033d98 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8033d88:	68fb      	ldr	r3, [r7, #12]
 8033d8a:	681b      	ldr	r3, [r3, #0]
 8033d8c:	681a      	ldr	r2, [r3, #0]
 8033d8e:	68fb      	ldr	r3, [r7, #12]
 8033d90:	681b      	ldr	r3, [r3, #0]
 8033d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8033d96:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8033d98:	68fb      	ldr	r3, [r7, #12]
 8033d9a:	2200      	movs	r2, #0
 8033d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8033da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8033da2:	4618      	mov	r0, r3
 8033da4:	3718      	adds	r7, #24
 8033da6:	46bd      	mov	sp, r7
 8033da8:	bd80      	pop	{r7, pc}
 8033daa:	bf00      	nop
 8033dac:	080342f3 	.word	0x080342f3
 8033db0:	0803424b 	.word	0x0803424b
 8033db4:	0803430f 	.word	0x0803430f
 8033db8:	08034291 	.word	0x08034291
 8033dbc:	0803432b 	.word	0x0803432b
 8033dc0:	ffff0000 	.word	0xffff0000

08033dc4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8033dc4:	b580      	push	{r7, lr}
 8033dc6:	b08a      	sub	sp, #40	; 0x28
 8033dc8:	af00      	add	r7, sp, #0
 8033dca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8033dcc:	687b      	ldr	r3, [r7, #4]
 8033dce:	681b      	ldr	r3, [r3, #0]
 8033dd0:	691b      	ldr	r3, [r3, #16]
 8033dd2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8033dd4:	687b      	ldr	r3, [r7, #4]
 8033dd6:	681b      	ldr	r3, [r3, #0]
 8033dd8:	695b      	ldr	r3, [r3, #20]
 8033dda:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8033ddc:	6a3a      	ldr	r2, [r7, #32]
 8033dde:	69fb      	ldr	r3, [r7, #28]
 8033de0:	4013      	ands	r3, r2
 8033de2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8033de4:	687b      	ldr	r3, [r7, #4]
 8033de6:	681b      	ldr	r3, [r3, #0]
 8033de8:	689b      	ldr	r3, [r3, #8]
 8033dea:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8033dec:	2300      	movs	r3, #0
 8033dee:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8033df0:	687b      	ldr	r3, [r7, #4]
 8033df2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033df6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8033df8:	687b      	ldr	r3, [r7, #4]
 8033dfa:	681b      	ldr	r3, [r3, #0]
 8033dfc:	3330      	adds	r3, #48	; 0x30
 8033dfe:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8033e00:	69bb      	ldr	r3, [r7, #24]
 8033e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033e06:	2b00      	cmp	r3, #0
 8033e08:	d113      	bne.n	8033e32 <HAL_SPI_IRQHandler+0x6e>
 8033e0a:	69bb      	ldr	r3, [r7, #24]
 8033e0c:	f003 0320 	and.w	r3, r3, #32
 8033e10:	2b00      	cmp	r3, #0
 8033e12:	d10e      	bne.n	8033e32 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8033e14:	69bb      	ldr	r3, [r7, #24]
 8033e16:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8033e1a:	2b00      	cmp	r3, #0
 8033e1c:	d009      	beq.n	8033e32 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8033e1e:	687b      	ldr	r3, [r7, #4]
 8033e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033e22:	6878      	ldr	r0, [r7, #4]
 8033e24:	4798      	blx	r3
    hspi->RxISR(hspi);
 8033e26:	687b      	ldr	r3, [r7, #4]
 8033e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033e2a:	6878      	ldr	r0, [r7, #4]
 8033e2c:	4798      	blx	r3
    handled = 1UL;
 8033e2e:	2301      	movs	r3, #1
 8033e30:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8033e32:	69bb      	ldr	r3, [r7, #24]
 8033e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033e38:	2b00      	cmp	r3, #0
 8033e3a:	d10f      	bne.n	8033e5c <HAL_SPI_IRQHandler+0x98>
 8033e3c:	69bb      	ldr	r3, [r7, #24]
 8033e3e:	f003 0301 	and.w	r3, r3, #1
 8033e42:	2b00      	cmp	r3, #0
 8033e44:	d00a      	beq.n	8033e5c <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8033e46:	69bb      	ldr	r3, [r7, #24]
 8033e48:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8033e4c:	2b00      	cmp	r3, #0
 8033e4e:	d105      	bne.n	8033e5c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8033e50:	687b      	ldr	r3, [r7, #4]
 8033e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033e54:	6878      	ldr	r0, [r7, #4]
 8033e56:	4798      	blx	r3
    handled = 1UL;
 8033e58:	2301      	movs	r3, #1
 8033e5a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8033e5c:	69bb      	ldr	r3, [r7, #24]
 8033e5e:	f003 0320 	and.w	r3, r3, #32
 8033e62:	2b00      	cmp	r3, #0
 8033e64:	d10f      	bne.n	8033e86 <HAL_SPI_IRQHandler+0xc2>
 8033e66:	69bb      	ldr	r3, [r7, #24]
 8033e68:	f003 0302 	and.w	r3, r3, #2
 8033e6c:	2b00      	cmp	r3, #0
 8033e6e:	d00a      	beq.n	8033e86 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8033e70:	69bb      	ldr	r3, [r7, #24]
 8033e72:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8033e76:	2b00      	cmp	r3, #0
 8033e78:	d105      	bne.n	8033e86 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8033e7a:	687b      	ldr	r3, [r7, #4]
 8033e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033e7e:	6878      	ldr	r0, [r7, #4]
 8033e80:	4798      	blx	r3
    handled = 1UL;
 8033e82:	2301      	movs	r3, #1
 8033e84:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8033e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033e88:	2b00      	cmp	r3, #0
 8033e8a:	f040 815a 	bne.w	8034142 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8033e8e:	69bb      	ldr	r3, [r7, #24]
 8033e90:	f003 0308 	and.w	r3, r3, #8
 8033e94:	2b00      	cmp	r3, #0
 8033e96:	f000 808b 	beq.w	8033fb0 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8033e9a:	687b      	ldr	r3, [r7, #4]
 8033e9c:	681b      	ldr	r3, [r3, #0]
 8033e9e:	699a      	ldr	r2, [r3, #24]
 8033ea0:	687b      	ldr	r3, [r7, #4]
 8033ea2:	681b      	ldr	r3, [r3, #0]
 8033ea4:	f042 0208 	orr.w	r2, r2, #8
 8033ea8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8033eaa:	687b      	ldr	r3, [r7, #4]
 8033eac:	681b      	ldr	r3, [r3, #0]
 8033eae:	699a      	ldr	r2, [r3, #24]
 8033eb0:	687b      	ldr	r3, [r7, #4]
 8033eb2:	681b      	ldr	r3, [r3, #0]
 8033eb4:	f042 0210 	orr.w	r2, r2, #16
 8033eb8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8033eba:	687b      	ldr	r3, [r7, #4]
 8033ebc:	681b      	ldr	r3, [r3, #0]
 8033ebe:	699a      	ldr	r2, [r3, #24]
 8033ec0:	687b      	ldr	r3, [r7, #4]
 8033ec2:	681b      	ldr	r3, [r3, #0]
 8033ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033ec8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8033eca:	687b      	ldr	r3, [r7, #4]
 8033ecc:	681b      	ldr	r3, [r3, #0]
 8033ece:	691a      	ldr	r2, [r3, #16]
 8033ed0:	687b      	ldr	r3, [r7, #4]
 8033ed2:	681b      	ldr	r3, [r3, #0]
 8033ed4:	f022 0208 	bic.w	r2, r2, #8
 8033ed8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8033eda:	687b      	ldr	r3, [r7, #4]
 8033edc:	681b      	ldr	r3, [r3, #0]
 8033ede:	689b      	ldr	r3, [r3, #8]
 8033ee0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8033ee4:	2b00      	cmp	r3, #0
 8033ee6:	d13d      	bne.n	8033f64 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8033ee8:	e036      	b.n	8033f58 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8033eea:	687b      	ldr	r3, [r7, #4]
 8033eec:	68db      	ldr	r3, [r3, #12]
 8033eee:	2b0f      	cmp	r3, #15
 8033ef0:	d90b      	bls.n	8033f0a <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8033ef2:	687b      	ldr	r3, [r7, #4]
 8033ef4:	681a      	ldr	r2, [r3, #0]
 8033ef6:	687b      	ldr	r3, [r7, #4]
 8033ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033efa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8033efc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8033efe:	687b      	ldr	r3, [r7, #4]
 8033f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033f02:	1d1a      	adds	r2, r3, #4
 8033f04:	687b      	ldr	r3, [r7, #4]
 8033f06:	665a      	str	r2, [r3, #100]	; 0x64
 8033f08:	e01d      	b.n	8033f46 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8033f0a:	687b      	ldr	r3, [r7, #4]
 8033f0c:	68db      	ldr	r3, [r3, #12]
 8033f0e:	2b07      	cmp	r3, #7
 8033f10:	d90b      	bls.n	8033f2a <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8033f12:	687b      	ldr	r3, [r7, #4]
 8033f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033f16:	68fa      	ldr	r2, [r7, #12]
 8033f18:	8812      	ldrh	r2, [r2, #0]
 8033f1a:	b292      	uxth	r2, r2
 8033f1c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8033f1e:	687b      	ldr	r3, [r7, #4]
 8033f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033f22:	1c9a      	adds	r2, r3, #2
 8033f24:	687b      	ldr	r3, [r7, #4]
 8033f26:	665a      	str	r2, [r3, #100]	; 0x64
 8033f28:	e00d      	b.n	8033f46 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8033f2a:	687b      	ldr	r3, [r7, #4]
 8033f2c:	681b      	ldr	r3, [r3, #0]
 8033f2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8033f32:	687b      	ldr	r3, [r7, #4]
 8033f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033f36:	7812      	ldrb	r2, [r2, #0]
 8033f38:	b2d2      	uxtb	r2, r2
 8033f3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8033f3c:	687b      	ldr	r3, [r7, #4]
 8033f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033f40:	1c5a      	adds	r2, r3, #1
 8033f42:	687b      	ldr	r3, [r7, #4]
 8033f44:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8033f46:	687b      	ldr	r3, [r7, #4]
 8033f48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033f4c:	b29b      	uxth	r3, r3
 8033f4e:	3b01      	subs	r3, #1
 8033f50:	b29a      	uxth	r2, r3
 8033f52:	687b      	ldr	r3, [r7, #4]
 8033f54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8033f58:	687b      	ldr	r3, [r7, #4]
 8033f5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033f5e:	b29b      	uxth	r3, r3
 8033f60:	2b00      	cmp	r3, #0
 8033f62:	d1c2      	bne.n	8033eea <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8033f64:	6878      	ldr	r0, [r7, #4]
 8033f66:	f000 fa1d 	bl	80343a4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8033f6a:	687b      	ldr	r3, [r7, #4]
 8033f6c:	2201      	movs	r2, #1
 8033f6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8033f72:	687b      	ldr	r3, [r7, #4]
 8033f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033f78:	2b00      	cmp	r3, #0
 8033f7a:	d003      	beq.n	8033f84 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8033f7c:	6878      	ldr	r0, [r7, #4]
 8033f7e:	f000 f929 	bl	80341d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8033f82:	e0e3      	b.n	803414c <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8033f84:	7cfb      	ldrb	r3, [r7, #19]
 8033f86:	2b05      	cmp	r3, #5
 8033f88:	d103      	bne.n	8033f92 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8033f8a:	6878      	ldr	r0, [r7, #4]
 8033f8c:	f000 f8fa 	bl	8034184 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8033f90:	e0d9      	b.n	8034146 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8033f92:	7cfb      	ldrb	r3, [r7, #19]
 8033f94:	2b04      	cmp	r3, #4
 8033f96:	d103      	bne.n	8033fa0 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8033f98:	6878      	ldr	r0, [r7, #4]
 8033f9a:	f000 f8e9 	bl	8034170 <HAL_SPI_RxCpltCallback>
    return;
 8033f9e:	e0d2      	b.n	8034146 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8033fa0:	7cfb      	ldrb	r3, [r7, #19]
 8033fa2:	2b03      	cmp	r3, #3
 8033fa4:	f040 80cf 	bne.w	8034146 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8033fa8:	6878      	ldr	r0, [r7, #4]
 8033faa:	f000 f8d7 	bl	803415c <HAL_SPI_TxCpltCallback>
    return;
 8033fae:	e0ca      	b.n	8034146 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8033fb0:	69fb      	ldr	r3, [r7, #28]
 8033fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8033fb6:	2b00      	cmp	r3, #0
 8033fb8:	d00d      	beq.n	8033fd6 <HAL_SPI_IRQHandler+0x212>
 8033fba:	6a3b      	ldr	r3, [r7, #32]
 8033fbc:	f003 0308 	and.w	r3, r3, #8
 8033fc0:	2b00      	cmp	r3, #0
 8033fc2:	d008      	beq.n	8033fd6 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8033fc4:	687b      	ldr	r3, [r7, #4]
 8033fc6:	681b      	ldr	r3, [r3, #0]
 8033fc8:	699a      	ldr	r2, [r3, #24]
 8033fca:	687b      	ldr	r3, [r7, #4]
 8033fcc:	681b      	ldr	r3, [r3, #0]
 8033fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033fd2:	619a      	str	r2, [r3, #24]

    return;
 8033fd4:	e0ba      	b.n	803414c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8033fd6:	69bb      	ldr	r3, [r7, #24]
 8033fd8:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8033fdc:	2b00      	cmp	r3, #0
 8033fde:	f000 80b5 	beq.w	803414c <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8033fe2:	69bb      	ldr	r3, [r7, #24]
 8033fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033fe8:	2b00      	cmp	r3, #0
 8033fea:	d00f      	beq.n	803400c <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8033fec:	687b      	ldr	r3, [r7, #4]
 8033fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033ff2:	f043 0204 	orr.w	r2, r3, #4
 8033ff6:	687b      	ldr	r3, [r7, #4]
 8033ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8033ffc:	687b      	ldr	r3, [r7, #4]
 8033ffe:	681b      	ldr	r3, [r3, #0]
 8034000:	699a      	ldr	r2, [r3, #24]
 8034002:	687b      	ldr	r3, [r7, #4]
 8034004:	681b      	ldr	r3, [r3, #0]
 8034006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803400a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 803400c:	69bb      	ldr	r3, [r7, #24]
 803400e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8034012:	2b00      	cmp	r3, #0
 8034014:	d00f      	beq.n	8034036 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8034016:	687b      	ldr	r3, [r7, #4]
 8034018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803401c:	f043 0201 	orr.w	r2, r3, #1
 8034020:	687b      	ldr	r3, [r7, #4]
 8034022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8034026:	687b      	ldr	r3, [r7, #4]
 8034028:	681b      	ldr	r3, [r3, #0]
 803402a:	699a      	ldr	r2, [r3, #24]
 803402c:	687b      	ldr	r3, [r7, #4]
 803402e:	681b      	ldr	r3, [r3, #0]
 8034030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8034034:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8034036:	69bb      	ldr	r3, [r7, #24]
 8034038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803403c:	2b00      	cmp	r3, #0
 803403e:	d00f      	beq.n	8034060 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8034040:	687b      	ldr	r3, [r7, #4]
 8034042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034046:	f043 0208 	orr.w	r2, r3, #8
 803404a:	687b      	ldr	r3, [r7, #4]
 803404c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8034050:	687b      	ldr	r3, [r7, #4]
 8034052:	681b      	ldr	r3, [r3, #0]
 8034054:	699a      	ldr	r2, [r3, #24]
 8034056:	687b      	ldr	r3, [r7, #4]
 8034058:	681b      	ldr	r3, [r3, #0]
 803405a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 803405e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8034060:	69bb      	ldr	r3, [r7, #24]
 8034062:	f003 0320 	and.w	r3, r3, #32
 8034066:	2b00      	cmp	r3, #0
 8034068:	d00f      	beq.n	803408a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 803406a:	687b      	ldr	r3, [r7, #4]
 803406c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034070:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8034074:	687b      	ldr	r3, [r7, #4]
 8034076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 803407a:	687b      	ldr	r3, [r7, #4]
 803407c:	681b      	ldr	r3, [r3, #0]
 803407e:	699a      	ldr	r2, [r3, #24]
 8034080:	687b      	ldr	r3, [r7, #4]
 8034082:	681b      	ldr	r3, [r3, #0]
 8034084:	f042 0220 	orr.w	r2, r2, #32
 8034088:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 803408a:	687b      	ldr	r3, [r7, #4]
 803408c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034090:	2b00      	cmp	r3, #0
 8034092:	d05a      	beq.n	803414a <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8034094:	687b      	ldr	r3, [r7, #4]
 8034096:	681b      	ldr	r3, [r3, #0]
 8034098:	681a      	ldr	r2, [r3, #0]
 803409a:	687b      	ldr	r3, [r7, #4]
 803409c:	681b      	ldr	r3, [r3, #0]
 803409e:	f022 0201 	bic.w	r2, r2, #1
 80340a2:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80340a4:	687b      	ldr	r3, [r7, #4]
 80340a6:	681b      	ldr	r3, [r3, #0]
 80340a8:	6919      	ldr	r1, [r3, #16]
 80340aa:	687b      	ldr	r3, [r7, #4]
 80340ac:	681a      	ldr	r2, [r3, #0]
 80340ae:	4b29      	ldr	r3, [pc, #164]	; (8034154 <HAL_SPI_IRQHandler+0x390>)
 80340b0:	400b      	ands	r3, r1
 80340b2:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80340b4:	697b      	ldr	r3, [r7, #20]
 80340b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80340ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80340be:	d138      	bne.n	8034132 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80340c0:	687b      	ldr	r3, [r7, #4]
 80340c2:	681b      	ldr	r3, [r3, #0]
 80340c4:	689a      	ldr	r2, [r3, #8]
 80340c6:	687b      	ldr	r3, [r7, #4]
 80340c8:	681b      	ldr	r3, [r3, #0]
 80340ca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80340ce:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80340d0:	687b      	ldr	r3, [r7, #4]
 80340d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80340d4:	2b00      	cmp	r3, #0
 80340d6:	d013      	beq.n	8034100 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80340d8:	687b      	ldr	r3, [r7, #4]
 80340da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80340dc:	4a1e      	ldr	r2, [pc, #120]	; (8034158 <HAL_SPI_IRQHandler+0x394>)
 80340de:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80340e0:	687b      	ldr	r3, [r7, #4]
 80340e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80340e4:	4618      	mov	r0, r3
 80340e6:	f7f8 fbc1 	bl	802c86c <HAL_DMA_Abort_IT>
 80340ea:	4603      	mov	r3, r0
 80340ec:	2b00      	cmp	r3, #0
 80340ee:	d007      	beq.n	8034100 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80340f0:	687b      	ldr	r3, [r7, #4]
 80340f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80340f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80340fa:	687b      	ldr	r3, [r7, #4]
 80340fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8034100:	687b      	ldr	r3, [r7, #4]
 8034102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034104:	2b00      	cmp	r3, #0
 8034106:	d020      	beq.n	803414a <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8034108:	687b      	ldr	r3, [r7, #4]
 803410a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803410c:	4a12      	ldr	r2, [pc, #72]	; (8034158 <HAL_SPI_IRQHandler+0x394>)
 803410e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8034110:	687b      	ldr	r3, [r7, #4]
 8034112:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034114:	4618      	mov	r0, r3
 8034116:	f7f8 fba9 	bl	802c86c <HAL_DMA_Abort_IT>
 803411a:	4603      	mov	r3, r0
 803411c:	2b00      	cmp	r3, #0
 803411e:	d014      	beq.n	803414a <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8034120:	687b      	ldr	r3, [r7, #4]
 8034122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034126:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803412a:	687b      	ldr	r3, [r7, #4]
 803412c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8034130:	e00b      	b.n	803414a <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8034132:	687b      	ldr	r3, [r7, #4]
 8034134:	2201      	movs	r2, #1
 8034136:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 803413a:	6878      	ldr	r0, [r7, #4]
 803413c:	f000 f84a 	bl	80341d4 <HAL_SPI_ErrorCallback>
    return;
 8034140:	e003      	b.n	803414a <HAL_SPI_IRQHandler+0x386>
    return;
 8034142:	bf00      	nop
 8034144:	e002      	b.n	803414c <HAL_SPI_IRQHandler+0x388>
    return;
 8034146:	bf00      	nop
 8034148:	e000      	b.n	803414c <HAL_SPI_IRQHandler+0x388>
    return;
 803414a:	bf00      	nop
  }
}
 803414c:	3728      	adds	r7, #40	; 0x28
 803414e:	46bd      	mov	sp, r7
 8034150:	bd80      	pop	{r7, pc}
 8034152:	bf00      	nop
 8034154:	fffffc94 	.word	0xfffffc94
 8034158:	08034371 	.word	0x08034371

0803415c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 803415c:	b480      	push	{r7}
 803415e:	b083      	sub	sp, #12
 8034160:	af00      	add	r7, sp, #0
 8034162:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8034164:	bf00      	nop
 8034166:	370c      	adds	r7, #12
 8034168:	46bd      	mov	sp, r7
 803416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803416e:	4770      	bx	lr

08034170 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034170:	b480      	push	{r7}
 8034172:	b083      	sub	sp, #12
 8034174:	af00      	add	r7, sp, #0
 8034176:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8034178:	bf00      	nop
 803417a:	370c      	adds	r7, #12
 803417c:	46bd      	mov	sp, r7
 803417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034182:	4770      	bx	lr

08034184 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034184:	b480      	push	{r7}
 8034186:	b083      	sub	sp, #12
 8034188:	af00      	add	r7, sp, #0
 803418a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 803418c:	bf00      	nop
 803418e:	370c      	adds	r7, #12
 8034190:	46bd      	mov	sp, r7
 8034192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034196:	4770      	bx	lr

08034198 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034198:	b480      	push	{r7}
 803419a:	b083      	sub	sp, #12
 803419c:	af00      	add	r7, sp, #0
 803419e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80341a0:	bf00      	nop
 80341a2:	370c      	adds	r7, #12
 80341a4:	46bd      	mov	sp, r7
 80341a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80341aa:	4770      	bx	lr

080341ac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80341ac:	b480      	push	{r7}
 80341ae:	b083      	sub	sp, #12
 80341b0:	af00      	add	r7, sp, #0
 80341b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80341b4:	bf00      	nop
 80341b6:	370c      	adds	r7, #12
 80341b8:	46bd      	mov	sp, r7
 80341ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80341be:	4770      	bx	lr

080341c0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80341c0:	b480      	push	{r7}
 80341c2:	b083      	sub	sp, #12
 80341c4:	af00      	add	r7, sp, #0
 80341c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80341c8:	bf00      	nop
 80341ca:	370c      	adds	r7, #12
 80341cc:	46bd      	mov	sp, r7
 80341ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80341d2:	4770      	bx	lr

080341d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80341d4:	b480      	push	{r7}
 80341d6:	b083      	sub	sp, #12
 80341d8:	af00      	add	r7, sp, #0
 80341da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80341dc:	bf00      	nop
 80341de:	370c      	adds	r7, #12
 80341e0:	46bd      	mov	sp, r7
 80341e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80341e6:	4770      	bx	lr

080341e8 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80341e8:	b480      	push	{r7}
 80341ea:	b083      	sub	sp, #12
 80341ec:	af00      	add	r7, sp, #0
 80341ee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80341f0:	687b      	ldr	r3, [r7, #4]
 80341f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80341f6:	b2db      	uxtb	r3, r3
}
 80341f8:	4618      	mov	r0, r3
 80341fa:	370c      	adds	r7, #12
 80341fc:	46bd      	mov	sp, r7
 80341fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034202:	4770      	bx	lr

08034204 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8034204:	b580      	push	{r7, lr}
 8034206:	b084      	sub	sp, #16
 8034208:	af00      	add	r7, sp, #0
 803420a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803420c:	687b      	ldr	r3, [r7, #4]
 803420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034210:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8034212:	68fb      	ldr	r3, [r7, #12]
 8034214:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034218:	b2db      	uxtb	r3, r3
 803421a:	2b07      	cmp	r3, #7
 803421c:	d011      	beq.n	8034242 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 803421e:	68fb      	ldr	r3, [r7, #12]
 8034220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034222:	69db      	ldr	r3, [r3, #28]
 8034224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034228:	d103      	bne.n	8034232 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 803422a:	68f8      	ldr	r0, [r7, #12]
 803422c:	f7ff ff96 	bl	803415c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8034230:	e007      	b.n	8034242 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8034232:	68fb      	ldr	r3, [r7, #12]
 8034234:	681b      	ldr	r3, [r3, #0]
 8034236:	691a      	ldr	r2, [r3, #16]
 8034238:	68fb      	ldr	r3, [r7, #12]
 803423a:	681b      	ldr	r3, [r3, #0]
 803423c:	f042 0208 	orr.w	r2, r2, #8
 8034240:	611a      	str	r2, [r3, #16]
}
 8034242:	bf00      	nop
 8034244:	3710      	adds	r7, #16
 8034246:	46bd      	mov	sp, r7
 8034248:	bd80      	pop	{r7, pc}

0803424a <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 803424a:	b580      	push	{r7, lr}
 803424c:	b084      	sub	sp, #16
 803424e:	af00      	add	r7, sp, #0
 8034250:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034252:	687b      	ldr	r3, [r7, #4]
 8034254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034256:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8034258:	68fb      	ldr	r3, [r7, #12]
 803425a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803425e:	b2db      	uxtb	r3, r3
 8034260:	2b07      	cmp	r3, #7
 8034262:	d011      	beq.n	8034288 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8034264:	68fb      	ldr	r3, [r7, #12]
 8034266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034268:	69db      	ldr	r3, [r3, #28]
 803426a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803426e:	d103      	bne.n	8034278 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8034270:	68f8      	ldr	r0, [r7, #12]
 8034272:	f7ff ff7d 	bl	8034170 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8034276:	e007      	b.n	8034288 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8034278:	68fb      	ldr	r3, [r7, #12]
 803427a:	681b      	ldr	r3, [r3, #0]
 803427c:	691a      	ldr	r2, [r3, #16]
 803427e:	68fb      	ldr	r3, [r7, #12]
 8034280:	681b      	ldr	r3, [r3, #0]
 8034282:	f042 0208 	orr.w	r2, r2, #8
 8034286:	611a      	str	r2, [r3, #16]
}
 8034288:	bf00      	nop
 803428a:	3710      	adds	r7, #16
 803428c:	46bd      	mov	sp, r7
 803428e:	bd80      	pop	{r7, pc}

08034290 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8034290:	b580      	push	{r7, lr}
 8034292:	b084      	sub	sp, #16
 8034294:	af00      	add	r7, sp, #0
 8034296:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034298:	687b      	ldr	r3, [r7, #4]
 803429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803429c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 803429e:	68fb      	ldr	r3, [r7, #12]
 80342a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80342a4:	b2db      	uxtb	r3, r3
 80342a6:	2b07      	cmp	r3, #7
 80342a8:	d011      	beq.n	80342ce <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80342aa:	68fb      	ldr	r3, [r7, #12]
 80342ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80342ae:	69db      	ldr	r3, [r3, #28]
 80342b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80342b4:	d103      	bne.n	80342be <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 80342b6:	68f8      	ldr	r0, [r7, #12]
 80342b8:	f7ff ff64 	bl	8034184 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80342bc:	e007      	b.n	80342ce <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80342be:	68fb      	ldr	r3, [r7, #12]
 80342c0:	681b      	ldr	r3, [r3, #0]
 80342c2:	691a      	ldr	r2, [r3, #16]
 80342c4:	68fb      	ldr	r3, [r7, #12]
 80342c6:	681b      	ldr	r3, [r3, #0]
 80342c8:	f042 0208 	orr.w	r2, r2, #8
 80342cc:	611a      	str	r2, [r3, #16]
}
 80342ce:	bf00      	nop
 80342d0:	3710      	adds	r7, #16
 80342d2:	46bd      	mov	sp, r7
 80342d4:	bd80      	pop	{r7, pc}

080342d6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80342d6:	b580      	push	{r7, lr}
 80342d8:	b084      	sub	sp, #16
 80342da:	af00      	add	r7, sp, #0
 80342dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80342de:	687b      	ldr	r3, [r7, #4]
 80342e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80342e2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80342e4:	68f8      	ldr	r0, [r7, #12]
 80342e6:	f7ff ff57 	bl	8034198 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80342ea:	bf00      	nop
 80342ec:	3710      	adds	r7, #16
 80342ee:	46bd      	mov	sp, r7
 80342f0:	bd80      	pop	{r7, pc}

080342f2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80342f2:	b580      	push	{r7, lr}
 80342f4:	b084      	sub	sp, #16
 80342f6:	af00      	add	r7, sp, #0
 80342f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80342fa:	687b      	ldr	r3, [r7, #4]
 80342fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80342fe:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8034300:	68f8      	ldr	r0, [r7, #12]
 8034302:	f7ff ff53 	bl	80341ac <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8034306:	bf00      	nop
 8034308:	3710      	adds	r7, #16
 803430a:	46bd      	mov	sp, r7
 803430c:	bd80      	pop	{r7, pc}

0803430e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 803430e:	b580      	push	{r7, lr}
 8034310:	b084      	sub	sp, #16
 8034312:	af00      	add	r7, sp, #0
 8034314:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034316:	687b      	ldr	r3, [r7, #4]
 8034318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803431a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 803431c:	68f8      	ldr	r0, [r7, #12]
 803431e:	f7ff ff4f 	bl	80341c0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8034322:	bf00      	nop
 8034324:	3710      	adds	r7, #16
 8034326:	46bd      	mov	sp, r7
 8034328:	bd80      	pop	{r7, pc}

0803432a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 803432a:	b580      	push	{r7, lr}
 803432c:	b084      	sub	sp, #16
 803432e:	af00      	add	r7, sp, #0
 8034330:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034332:	687b      	ldr	r3, [r7, #4]
 8034334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034336:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8034338:	6878      	ldr	r0, [r7, #4]
 803433a:	f7f9 fc15 	bl	802db68 <HAL_DMA_GetError>
 803433e:	4603      	mov	r3, r0
 8034340:	2b02      	cmp	r3, #2
 8034342:	d011      	beq.n	8034368 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8034344:	68f8      	ldr	r0, [r7, #12]
 8034346:	f000 f82d 	bl	80343a4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 803434a:	68fb      	ldr	r3, [r7, #12]
 803434c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034350:	f043 0210 	orr.w	r2, r3, #16
 8034354:	68fb      	ldr	r3, [r7, #12]
 8034356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 803435a:	68fb      	ldr	r3, [r7, #12]
 803435c:	2201      	movs	r2, #1
 803435e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8034362:	68f8      	ldr	r0, [r7, #12]
 8034364:	f7ff ff36 	bl	80341d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8034368:	bf00      	nop
 803436a:	3710      	adds	r7, #16
 803436c:	46bd      	mov	sp, r7
 803436e:	bd80      	pop	{r7, pc}

08034370 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8034370:	b580      	push	{r7, lr}
 8034372:	b084      	sub	sp, #16
 8034374:	af00      	add	r7, sp, #0
 8034376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034378:	687b      	ldr	r3, [r7, #4]
 803437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803437c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 803437e:	68fb      	ldr	r3, [r7, #12]
 8034380:	2200      	movs	r2, #0
 8034382:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8034386:	68fb      	ldr	r3, [r7, #12]
 8034388:	2200      	movs	r2, #0
 803438a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 803438e:	68fb      	ldr	r3, [r7, #12]
 8034390:	2201      	movs	r2, #1
 8034392:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8034396:	68f8      	ldr	r0, [r7, #12]
 8034398:	f7ff ff1c 	bl	80341d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 803439c:	bf00      	nop
 803439e:	3710      	adds	r7, #16
 80343a0:	46bd      	mov	sp, r7
 80343a2:	bd80      	pop	{r7, pc}

080343a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80343a4:	b480      	push	{r7}
 80343a6:	b085      	sub	sp, #20
 80343a8:	af00      	add	r7, sp, #0
 80343aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80343ac:	687b      	ldr	r3, [r7, #4]
 80343ae:	681b      	ldr	r3, [r3, #0]
 80343b0:	695b      	ldr	r3, [r3, #20]
 80343b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80343b4:	687b      	ldr	r3, [r7, #4]
 80343b6:	681b      	ldr	r3, [r3, #0]
 80343b8:	699a      	ldr	r2, [r3, #24]
 80343ba:	687b      	ldr	r3, [r7, #4]
 80343bc:	681b      	ldr	r3, [r3, #0]
 80343be:	f042 0208 	orr.w	r2, r2, #8
 80343c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80343c4:	687b      	ldr	r3, [r7, #4]
 80343c6:	681b      	ldr	r3, [r3, #0]
 80343c8:	699a      	ldr	r2, [r3, #24]
 80343ca:	687b      	ldr	r3, [r7, #4]
 80343cc:	681b      	ldr	r3, [r3, #0]
 80343ce:	f042 0210 	orr.w	r2, r2, #16
 80343d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80343d4:	687b      	ldr	r3, [r7, #4]
 80343d6:	681b      	ldr	r3, [r3, #0]
 80343d8:	681a      	ldr	r2, [r3, #0]
 80343da:	687b      	ldr	r3, [r7, #4]
 80343dc:	681b      	ldr	r3, [r3, #0]
 80343de:	f022 0201 	bic.w	r2, r2, #1
 80343e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80343e4:	687b      	ldr	r3, [r7, #4]
 80343e6:	681b      	ldr	r3, [r3, #0]
 80343e8:	6919      	ldr	r1, [r3, #16]
 80343ea:	687b      	ldr	r3, [r7, #4]
 80343ec:	681a      	ldr	r2, [r3, #0]
 80343ee:	4b3c      	ldr	r3, [pc, #240]	; (80344e0 <SPI_CloseTransfer+0x13c>)
 80343f0:	400b      	ands	r3, r1
 80343f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80343f4:	687b      	ldr	r3, [r7, #4]
 80343f6:	681b      	ldr	r3, [r3, #0]
 80343f8:	689a      	ldr	r2, [r3, #8]
 80343fa:	687b      	ldr	r3, [r7, #4]
 80343fc:	681b      	ldr	r3, [r3, #0]
 80343fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8034402:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8034404:	687b      	ldr	r3, [r7, #4]
 8034406:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803440a:	b2db      	uxtb	r3, r3
 803440c:	2b04      	cmp	r3, #4
 803440e:	d014      	beq.n	803443a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8034410:	68fb      	ldr	r3, [r7, #12]
 8034412:	f003 0320 	and.w	r3, r3, #32
 8034416:	2b00      	cmp	r3, #0
 8034418:	d00f      	beq.n	803443a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 803441a:	687b      	ldr	r3, [r7, #4]
 803441c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034420:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8034424:	687b      	ldr	r3, [r7, #4]
 8034426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 803442a:	687b      	ldr	r3, [r7, #4]
 803442c:	681b      	ldr	r3, [r3, #0]
 803442e:	699a      	ldr	r2, [r3, #24]
 8034430:	687b      	ldr	r3, [r7, #4]
 8034432:	681b      	ldr	r3, [r3, #0]
 8034434:	f042 0220 	orr.w	r2, r2, #32
 8034438:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 803443a:	687b      	ldr	r3, [r7, #4]
 803443c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034440:	b2db      	uxtb	r3, r3
 8034442:	2b03      	cmp	r3, #3
 8034444:	d014      	beq.n	8034470 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8034446:	68fb      	ldr	r3, [r7, #12]
 8034448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803444c:	2b00      	cmp	r3, #0
 803444e:	d00f      	beq.n	8034470 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8034450:	687b      	ldr	r3, [r7, #4]
 8034452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034456:	f043 0204 	orr.w	r2, r3, #4
 803445a:	687b      	ldr	r3, [r7, #4]
 803445c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8034460:	687b      	ldr	r3, [r7, #4]
 8034462:	681b      	ldr	r3, [r3, #0]
 8034464:	699a      	ldr	r2, [r3, #24]
 8034466:	687b      	ldr	r3, [r7, #4]
 8034468:	681b      	ldr	r3, [r3, #0]
 803446a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803446e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8034470:	68fb      	ldr	r3, [r7, #12]
 8034472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8034476:	2b00      	cmp	r3, #0
 8034478:	d00f      	beq.n	803449a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 803447a:	687b      	ldr	r3, [r7, #4]
 803447c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034480:	f043 0201 	orr.w	r2, r3, #1
 8034484:	687b      	ldr	r3, [r7, #4]
 8034486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 803448a:	687b      	ldr	r3, [r7, #4]
 803448c:	681b      	ldr	r3, [r3, #0]
 803448e:	699a      	ldr	r2, [r3, #24]
 8034490:	687b      	ldr	r3, [r7, #4]
 8034492:	681b      	ldr	r3, [r3, #0]
 8034494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8034498:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 803449a:	68fb      	ldr	r3, [r7, #12]
 803449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80344a0:	2b00      	cmp	r3, #0
 80344a2:	d00f      	beq.n	80344c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80344a4:	687b      	ldr	r3, [r7, #4]
 80344a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80344aa:	f043 0208 	orr.w	r2, r3, #8
 80344ae:	687b      	ldr	r3, [r7, #4]
 80344b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80344b4:	687b      	ldr	r3, [r7, #4]
 80344b6:	681b      	ldr	r3, [r3, #0]
 80344b8:	699a      	ldr	r2, [r3, #24]
 80344ba:	687b      	ldr	r3, [r7, #4]
 80344bc:	681b      	ldr	r3, [r3, #0]
 80344be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80344c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80344c4:	687b      	ldr	r3, [r7, #4]
 80344c6:	2200      	movs	r2, #0
 80344c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80344cc:	687b      	ldr	r3, [r7, #4]
 80344ce:	2200      	movs	r2, #0
 80344d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80344d4:	bf00      	nop
 80344d6:	3714      	adds	r7, #20
 80344d8:	46bd      	mov	sp, r7
 80344da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80344de:	4770      	bx	lr
 80344e0:	fffffc90 	.word	0xfffffc90

080344e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80344e4:	b480      	push	{r7}
 80344e6:	b085      	sub	sp, #20
 80344e8:	af00      	add	r7, sp, #0
 80344ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80344ec:	687b      	ldr	r3, [r7, #4]
 80344ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80344f0:	095b      	lsrs	r3, r3, #5
 80344f2:	3301      	adds	r3, #1
 80344f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80344f6:	687b      	ldr	r3, [r7, #4]
 80344f8:	68db      	ldr	r3, [r3, #12]
 80344fa:	3301      	adds	r3, #1
 80344fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80344fe:	68bb      	ldr	r3, [r7, #8]
 8034500:	3307      	adds	r3, #7
 8034502:	08db      	lsrs	r3, r3, #3
 8034504:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8034506:	68bb      	ldr	r3, [r7, #8]
 8034508:	68fa      	ldr	r2, [r7, #12]
 803450a:	fb02 f303 	mul.w	r3, r2, r3
}
 803450e:	4618      	mov	r0, r3
 8034510:	3714      	adds	r7, #20
 8034512:	46bd      	mov	sp, r7
 8034514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034518:	4770      	bx	lr

0803451a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 803451a:	b580      	push	{r7, lr}
 803451c:	b082      	sub	sp, #8
 803451e:	af00      	add	r7, sp, #0
 8034520:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8034522:	687b      	ldr	r3, [r7, #4]
 8034524:	2b00      	cmp	r3, #0
 8034526:	d101      	bne.n	803452c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8034528:	2301      	movs	r3, #1
 803452a:	e049      	b.n	80345c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 803452c:	687b      	ldr	r3, [r7, #4]
 803452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8034532:	b2db      	uxtb	r3, r3
 8034534:	2b00      	cmp	r3, #0
 8034536:	d106      	bne.n	8034546 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8034538:	687b      	ldr	r3, [r7, #4]
 803453a:	2200      	movs	r2, #0
 803453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8034540:	6878      	ldr	r0, [r7, #4]
 8034542:	f7f5 ff5b 	bl	802a3fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8034546:	687b      	ldr	r3, [r7, #4]
 8034548:	2202      	movs	r2, #2
 803454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 803454e:	687b      	ldr	r3, [r7, #4]
 8034550:	681a      	ldr	r2, [r3, #0]
 8034552:	687b      	ldr	r3, [r7, #4]
 8034554:	3304      	adds	r3, #4
 8034556:	4619      	mov	r1, r3
 8034558:	4610      	mov	r0, r2
 803455a:	f000 faed 	bl	8034b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 803455e:	687b      	ldr	r3, [r7, #4]
 8034560:	2201      	movs	r2, #1
 8034562:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8034566:	687b      	ldr	r3, [r7, #4]
 8034568:	2201      	movs	r2, #1
 803456a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 803456e:	687b      	ldr	r3, [r7, #4]
 8034570:	2201      	movs	r2, #1
 8034572:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8034576:	687b      	ldr	r3, [r7, #4]
 8034578:	2201      	movs	r2, #1
 803457a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 803457e:	687b      	ldr	r3, [r7, #4]
 8034580:	2201      	movs	r2, #1
 8034582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8034586:	687b      	ldr	r3, [r7, #4]
 8034588:	2201      	movs	r2, #1
 803458a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 803458e:	687b      	ldr	r3, [r7, #4]
 8034590:	2201      	movs	r2, #1
 8034592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8034596:	687b      	ldr	r3, [r7, #4]
 8034598:	2201      	movs	r2, #1
 803459a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 803459e:	687b      	ldr	r3, [r7, #4]
 80345a0:	2201      	movs	r2, #1
 80345a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80345a6:	687b      	ldr	r3, [r7, #4]
 80345a8:	2201      	movs	r2, #1
 80345aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80345ae:	687b      	ldr	r3, [r7, #4]
 80345b0:	2201      	movs	r2, #1
 80345b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80345b6:	687b      	ldr	r3, [r7, #4]
 80345b8:	2201      	movs	r2, #1
 80345ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80345be:	2300      	movs	r3, #0
}
 80345c0:	4618      	mov	r0, r3
 80345c2:	3708      	adds	r7, #8
 80345c4:	46bd      	mov	sp, r7
 80345c6:	bd80      	pop	{r7, pc}

080345c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80345c8:	b480      	push	{r7}
 80345ca:	b085      	sub	sp, #20
 80345cc:	af00      	add	r7, sp, #0
 80345ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80345d0:	687b      	ldr	r3, [r7, #4]
 80345d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80345d6:	b2db      	uxtb	r3, r3
 80345d8:	2b01      	cmp	r3, #1
 80345da:	d001      	beq.n	80345e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80345dc:	2301      	movs	r3, #1
 80345de:	e054      	b.n	803468a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80345e0:	687b      	ldr	r3, [r7, #4]
 80345e2:	2202      	movs	r2, #2
 80345e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80345e8:	687b      	ldr	r3, [r7, #4]
 80345ea:	681b      	ldr	r3, [r3, #0]
 80345ec:	68da      	ldr	r2, [r3, #12]
 80345ee:	687b      	ldr	r3, [r7, #4]
 80345f0:	681b      	ldr	r3, [r3, #0]
 80345f2:	f042 0201 	orr.w	r2, r2, #1
 80345f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80345f8:	687b      	ldr	r3, [r7, #4]
 80345fa:	681b      	ldr	r3, [r3, #0]
 80345fc:	4a26      	ldr	r2, [pc, #152]	; (8034698 <HAL_TIM_Base_Start_IT+0xd0>)
 80345fe:	4293      	cmp	r3, r2
 8034600:	d022      	beq.n	8034648 <HAL_TIM_Base_Start_IT+0x80>
 8034602:	687b      	ldr	r3, [r7, #4]
 8034604:	681b      	ldr	r3, [r3, #0]
 8034606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803460a:	d01d      	beq.n	8034648 <HAL_TIM_Base_Start_IT+0x80>
 803460c:	687b      	ldr	r3, [r7, #4]
 803460e:	681b      	ldr	r3, [r3, #0]
 8034610:	4a22      	ldr	r2, [pc, #136]	; (803469c <HAL_TIM_Base_Start_IT+0xd4>)
 8034612:	4293      	cmp	r3, r2
 8034614:	d018      	beq.n	8034648 <HAL_TIM_Base_Start_IT+0x80>
 8034616:	687b      	ldr	r3, [r7, #4]
 8034618:	681b      	ldr	r3, [r3, #0]
 803461a:	4a21      	ldr	r2, [pc, #132]	; (80346a0 <HAL_TIM_Base_Start_IT+0xd8>)
 803461c:	4293      	cmp	r3, r2
 803461e:	d013      	beq.n	8034648 <HAL_TIM_Base_Start_IT+0x80>
 8034620:	687b      	ldr	r3, [r7, #4]
 8034622:	681b      	ldr	r3, [r3, #0]
 8034624:	4a1f      	ldr	r2, [pc, #124]	; (80346a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8034626:	4293      	cmp	r3, r2
 8034628:	d00e      	beq.n	8034648 <HAL_TIM_Base_Start_IT+0x80>
 803462a:	687b      	ldr	r3, [r7, #4]
 803462c:	681b      	ldr	r3, [r3, #0]
 803462e:	4a1e      	ldr	r2, [pc, #120]	; (80346a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8034630:	4293      	cmp	r3, r2
 8034632:	d009      	beq.n	8034648 <HAL_TIM_Base_Start_IT+0x80>
 8034634:	687b      	ldr	r3, [r7, #4]
 8034636:	681b      	ldr	r3, [r3, #0]
 8034638:	4a1c      	ldr	r2, [pc, #112]	; (80346ac <HAL_TIM_Base_Start_IT+0xe4>)
 803463a:	4293      	cmp	r3, r2
 803463c:	d004      	beq.n	8034648 <HAL_TIM_Base_Start_IT+0x80>
 803463e:	687b      	ldr	r3, [r7, #4]
 8034640:	681b      	ldr	r3, [r3, #0]
 8034642:	4a1b      	ldr	r2, [pc, #108]	; (80346b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8034644:	4293      	cmp	r3, r2
 8034646:	d115      	bne.n	8034674 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8034648:	687b      	ldr	r3, [r7, #4]
 803464a:	681b      	ldr	r3, [r3, #0]
 803464c:	689a      	ldr	r2, [r3, #8]
 803464e:	4b19      	ldr	r3, [pc, #100]	; (80346b4 <HAL_TIM_Base_Start_IT+0xec>)
 8034650:	4013      	ands	r3, r2
 8034652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8034654:	68fb      	ldr	r3, [r7, #12]
 8034656:	2b06      	cmp	r3, #6
 8034658:	d015      	beq.n	8034686 <HAL_TIM_Base_Start_IT+0xbe>
 803465a:	68fb      	ldr	r3, [r7, #12]
 803465c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8034660:	d011      	beq.n	8034686 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8034662:	687b      	ldr	r3, [r7, #4]
 8034664:	681b      	ldr	r3, [r3, #0]
 8034666:	681a      	ldr	r2, [r3, #0]
 8034668:	687b      	ldr	r3, [r7, #4]
 803466a:	681b      	ldr	r3, [r3, #0]
 803466c:	f042 0201 	orr.w	r2, r2, #1
 8034670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8034672:	e008      	b.n	8034686 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8034674:	687b      	ldr	r3, [r7, #4]
 8034676:	681b      	ldr	r3, [r3, #0]
 8034678:	681a      	ldr	r2, [r3, #0]
 803467a:	687b      	ldr	r3, [r7, #4]
 803467c:	681b      	ldr	r3, [r3, #0]
 803467e:	f042 0201 	orr.w	r2, r2, #1
 8034682:	601a      	str	r2, [r3, #0]
 8034684:	e000      	b.n	8034688 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8034686:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8034688:	2300      	movs	r3, #0
}
 803468a:	4618      	mov	r0, r3
 803468c:	3714      	adds	r7, #20
 803468e:	46bd      	mov	sp, r7
 8034690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034694:	4770      	bx	lr
 8034696:	bf00      	nop
 8034698:	40010000 	.word	0x40010000
 803469c:	40000400 	.word	0x40000400
 80346a0:	40000800 	.word	0x40000800
 80346a4:	40000c00 	.word	0x40000c00
 80346a8:	40010400 	.word	0x40010400
 80346ac:	40001800 	.word	0x40001800
 80346b0:	40014000 	.word	0x40014000
 80346b4:	00010007 	.word	0x00010007

080346b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80346b8:	b580      	push	{r7, lr}
 80346ba:	b082      	sub	sp, #8
 80346bc:	af00      	add	r7, sp, #0
 80346be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80346c0:	687b      	ldr	r3, [r7, #4]
 80346c2:	681b      	ldr	r3, [r3, #0]
 80346c4:	691b      	ldr	r3, [r3, #16]
 80346c6:	f003 0302 	and.w	r3, r3, #2
 80346ca:	2b02      	cmp	r3, #2
 80346cc:	d122      	bne.n	8034714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80346ce:	687b      	ldr	r3, [r7, #4]
 80346d0:	681b      	ldr	r3, [r3, #0]
 80346d2:	68db      	ldr	r3, [r3, #12]
 80346d4:	f003 0302 	and.w	r3, r3, #2
 80346d8:	2b02      	cmp	r3, #2
 80346da:	d11b      	bne.n	8034714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80346dc:	687b      	ldr	r3, [r7, #4]
 80346de:	681b      	ldr	r3, [r3, #0]
 80346e0:	f06f 0202 	mvn.w	r2, #2
 80346e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80346e6:	687b      	ldr	r3, [r7, #4]
 80346e8:	2201      	movs	r2, #1
 80346ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80346ec:	687b      	ldr	r3, [r7, #4]
 80346ee:	681b      	ldr	r3, [r3, #0]
 80346f0:	699b      	ldr	r3, [r3, #24]
 80346f2:	f003 0303 	and.w	r3, r3, #3
 80346f6:	2b00      	cmp	r3, #0
 80346f8:	d003      	beq.n	8034702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80346fa:	6878      	ldr	r0, [r7, #4]
 80346fc:	f000 f9fe 	bl	8034afc <HAL_TIM_IC_CaptureCallback>
 8034700:	e005      	b.n	803470e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8034702:	6878      	ldr	r0, [r7, #4]
 8034704:	f000 f9f0 	bl	8034ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8034708:	6878      	ldr	r0, [r7, #4]
 803470a:	f000 fa01 	bl	8034b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 803470e:	687b      	ldr	r3, [r7, #4]
 8034710:	2200      	movs	r2, #0
 8034712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8034714:	687b      	ldr	r3, [r7, #4]
 8034716:	681b      	ldr	r3, [r3, #0]
 8034718:	691b      	ldr	r3, [r3, #16]
 803471a:	f003 0304 	and.w	r3, r3, #4
 803471e:	2b04      	cmp	r3, #4
 8034720:	d122      	bne.n	8034768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8034722:	687b      	ldr	r3, [r7, #4]
 8034724:	681b      	ldr	r3, [r3, #0]
 8034726:	68db      	ldr	r3, [r3, #12]
 8034728:	f003 0304 	and.w	r3, r3, #4
 803472c:	2b04      	cmp	r3, #4
 803472e:	d11b      	bne.n	8034768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8034730:	687b      	ldr	r3, [r7, #4]
 8034732:	681b      	ldr	r3, [r3, #0]
 8034734:	f06f 0204 	mvn.w	r2, #4
 8034738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 803473a:	687b      	ldr	r3, [r7, #4]
 803473c:	2202      	movs	r2, #2
 803473e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8034740:	687b      	ldr	r3, [r7, #4]
 8034742:	681b      	ldr	r3, [r3, #0]
 8034744:	699b      	ldr	r3, [r3, #24]
 8034746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 803474a:	2b00      	cmp	r3, #0
 803474c:	d003      	beq.n	8034756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 803474e:	6878      	ldr	r0, [r7, #4]
 8034750:	f000 f9d4 	bl	8034afc <HAL_TIM_IC_CaptureCallback>
 8034754:	e005      	b.n	8034762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8034756:	6878      	ldr	r0, [r7, #4]
 8034758:	f000 f9c6 	bl	8034ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 803475c:	6878      	ldr	r0, [r7, #4]
 803475e:	f000 f9d7 	bl	8034b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8034762:	687b      	ldr	r3, [r7, #4]
 8034764:	2200      	movs	r2, #0
 8034766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8034768:	687b      	ldr	r3, [r7, #4]
 803476a:	681b      	ldr	r3, [r3, #0]
 803476c:	691b      	ldr	r3, [r3, #16]
 803476e:	f003 0308 	and.w	r3, r3, #8
 8034772:	2b08      	cmp	r3, #8
 8034774:	d122      	bne.n	80347bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8034776:	687b      	ldr	r3, [r7, #4]
 8034778:	681b      	ldr	r3, [r3, #0]
 803477a:	68db      	ldr	r3, [r3, #12]
 803477c:	f003 0308 	and.w	r3, r3, #8
 8034780:	2b08      	cmp	r3, #8
 8034782:	d11b      	bne.n	80347bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8034784:	687b      	ldr	r3, [r7, #4]
 8034786:	681b      	ldr	r3, [r3, #0]
 8034788:	f06f 0208 	mvn.w	r2, #8
 803478c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 803478e:	687b      	ldr	r3, [r7, #4]
 8034790:	2204      	movs	r2, #4
 8034792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8034794:	687b      	ldr	r3, [r7, #4]
 8034796:	681b      	ldr	r3, [r3, #0]
 8034798:	69db      	ldr	r3, [r3, #28]
 803479a:	f003 0303 	and.w	r3, r3, #3
 803479e:	2b00      	cmp	r3, #0
 80347a0:	d003      	beq.n	80347aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80347a2:	6878      	ldr	r0, [r7, #4]
 80347a4:	f000 f9aa 	bl	8034afc <HAL_TIM_IC_CaptureCallback>
 80347a8:	e005      	b.n	80347b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80347aa:	6878      	ldr	r0, [r7, #4]
 80347ac:	f000 f99c 	bl	8034ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80347b0:	6878      	ldr	r0, [r7, #4]
 80347b2:	f000 f9ad 	bl	8034b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80347b6:	687b      	ldr	r3, [r7, #4]
 80347b8:	2200      	movs	r2, #0
 80347ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80347bc:	687b      	ldr	r3, [r7, #4]
 80347be:	681b      	ldr	r3, [r3, #0]
 80347c0:	691b      	ldr	r3, [r3, #16]
 80347c2:	f003 0310 	and.w	r3, r3, #16
 80347c6:	2b10      	cmp	r3, #16
 80347c8:	d122      	bne.n	8034810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80347ca:	687b      	ldr	r3, [r7, #4]
 80347cc:	681b      	ldr	r3, [r3, #0]
 80347ce:	68db      	ldr	r3, [r3, #12]
 80347d0:	f003 0310 	and.w	r3, r3, #16
 80347d4:	2b10      	cmp	r3, #16
 80347d6:	d11b      	bne.n	8034810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80347d8:	687b      	ldr	r3, [r7, #4]
 80347da:	681b      	ldr	r3, [r3, #0]
 80347dc:	f06f 0210 	mvn.w	r2, #16
 80347e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80347e2:	687b      	ldr	r3, [r7, #4]
 80347e4:	2208      	movs	r2, #8
 80347e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80347e8:	687b      	ldr	r3, [r7, #4]
 80347ea:	681b      	ldr	r3, [r3, #0]
 80347ec:	69db      	ldr	r3, [r3, #28]
 80347ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80347f2:	2b00      	cmp	r3, #0
 80347f4:	d003      	beq.n	80347fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80347f6:	6878      	ldr	r0, [r7, #4]
 80347f8:	f000 f980 	bl	8034afc <HAL_TIM_IC_CaptureCallback>
 80347fc:	e005      	b.n	803480a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80347fe:	6878      	ldr	r0, [r7, #4]
 8034800:	f000 f972 	bl	8034ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8034804:	6878      	ldr	r0, [r7, #4]
 8034806:	f000 f983 	bl	8034b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 803480a:	687b      	ldr	r3, [r7, #4]
 803480c:	2200      	movs	r2, #0
 803480e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8034810:	687b      	ldr	r3, [r7, #4]
 8034812:	681b      	ldr	r3, [r3, #0]
 8034814:	691b      	ldr	r3, [r3, #16]
 8034816:	f003 0301 	and.w	r3, r3, #1
 803481a:	2b01      	cmp	r3, #1
 803481c:	d10e      	bne.n	803483c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 803481e:	687b      	ldr	r3, [r7, #4]
 8034820:	681b      	ldr	r3, [r3, #0]
 8034822:	68db      	ldr	r3, [r3, #12]
 8034824:	f003 0301 	and.w	r3, r3, #1
 8034828:	2b01      	cmp	r3, #1
 803482a:	d107      	bne.n	803483c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 803482c:	687b      	ldr	r3, [r7, #4]
 803482e:	681b      	ldr	r3, [r3, #0]
 8034830:	f06f 0201 	mvn.w	r2, #1
 8034834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8034836:	6878      	ldr	r0, [r7, #4]
 8034838:	f7f5 f96a 	bl	8029b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 803483c:	687b      	ldr	r3, [r7, #4]
 803483e:	681b      	ldr	r3, [r3, #0]
 8034840:	691b      	ldr	r3, [r3, #16]
 8034842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8034846:	2b80      	cmp	r3, #128	; 0x80
 8034848:	d10e      	bne.n	8034868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 803484a:	687b      	ldr	r3, [r7, #4]
 803484c:	681b      	ldr	r3, [r3, #0]
 803484e:	68db      	ldr	r3, [r3, #12]
 8034850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8034854:	2b80      	cmp	r3, #128	; 0x80
 8034856:	d107      	bne.n	8034868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8034858:	687b      	ldr	r3, [r7, #4]
 803485a:	681b      	ldr	r3, [r3, #0]
 803485c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8034860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8034862:	6878      	ldr	r0, [r7, #4]
 8034864:	f000 fb38 	bl	8034ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8034868:	687b      	ldr	r3, [r7, #4]
 803486a:	681b      	ldr	r3, [r3, #0]
 803486c:	691b      	ldr	r3, [r3, #16]
 803486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034876:	d10e      	bne.n	8034896 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8034878:	687b      	ldr	r3, [r7, #4]
 803487a:	681b      	ldr	r3, [r3, #0]
 803487c:	68db      	ldr	r3, [r3, #12]
 803487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8034882:	2b80      	cmp	r3, #128	; 0x80
 8034884:	d107      	bne.n	8034896 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8034886:	687b      	ldr	r3, [r7, #4]
 8034888:	681b      	ldr	r3, [r3, #0]
 803488a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 803488e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8034890:	6878      	ldr	r0, [r7, #4]
 8034892:	f000 fb2b 	bl	8034eec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8034896:	687b      	ldr	r3, [r7, #4]
 8034898:	681b      	ldr	r3, [r3, #0]
 803489a:	691b      	ldr	r3, [r3, #16]
 803489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80348a0:	2b40      	cmp	r3, #64	; 0x40
 80348a2:	d10e      	bne.n	80348c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80348a4:	687b      	ldr	r3, [r7, #4]
 80348a6:	681b      	ldr	r3, [r3, #0]
 80348a8:	68db      	ldr	r3, [r3, #12]
 80348aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80348ae:	2b40      	cmp	r3, #64	; 0x40
 80348b0:	d107      	bne.n	80348c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80348b2:	687b      	ldr	r3, [r7, #4]
 80348b4:	681b      	ldr	r3, [r3, #0]
 80348b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80348ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80348bc:	6878      	ldr	r0, [r7, #4]
 80348be:	f000 f931 	bl	8034b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80348c2:	687b      	ldr	r3, [r7, #4]
 80348c4:	681b      	ldr	r3, [r3, #0]
 80348c6:	691b      	ldr	r3, [r3, #16]
 80348c8:	f003 0320 	and.w	r3, r3, #32
 80348cc:	2b20      	cmp	r3, #32
 80348ce:	d10e      	bne.n	80348ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80348d0:	687b      	ldr	r3, [r7, #4]
 80348d2:	681b      	ldr	r3, [r3, #0]
 80348d4:	68db      	ldr	r3, [r3, #12]
 80348d6:	f003 0320 	and.w	r3, r3, #32
 80348da:	2b20      	cmp	r3, #32
 80348dc:	d107      	bne.n	80348ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80348de:	687b      	ldr	r3, [r7, #4]
 80348e0:	681b      	ldr	r3, [r3, #0]
 80348e2:	f06f 0220 	mvn.w	r2, #32
 80348e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80348e8:	6878      	ldr	r0, [r7, #4]
 80348ea:	f000 faeb 	bl	8034ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80348ee:	bf00      	nop
 80348f0:	3708      	adds	r7, #8
 80348f2:	46bd      	mov	sp, r7
 80348f4:	bd80      	pop	{r7, pc}
	...

080348f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80348f8:	b580      	push	{r7, lr}
 80348fa:	b084      	sub	sp, #16
 80348fc:	af00      	add	r7, sp, #0
 80348fe:	6078      	str	r0, [r7, #4]
 8034900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8034902:	2300      	movs	r3, #0
 8034904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8034906:	687b      	ldr	r3, [r7, #4]
 8034908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 803490c:	2b01      	cmp	r3, #1
 803490e:	d101      	bne.n	8034914 <HAL_TIM_ConfigClockSource+0x1c>
 8034910:	2302      	movs	r3, #2
 8034912:	e0dc      	b.n	8034ace <HAL_TIM_ConfigClockSource+0x1d6>
 8034914:	687b      	ldr	r3, [r7, #4]
 8034916:	2201      	movs	r2, #1
 8034918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 803491c:	687b      	ldr	r3, [r7, #4]
 803491e:	2202      	movs	r2, #2
 8034920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8034924:	687b      	ldr	r3, [r7, #4]
 8034926:	681b      	ldr	r3, [r3, #0]
 8034928:	689b      	ldr	r3, [r3, #8]
 803492a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 803492c:	68ba      	ldr	r2, [r7, #8]
 803492e:	4b6a      	ldr	r3, [pc, #424]	; (8034ad8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8034930:	4013      	ands	r3, r2
 8034932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8034934:	68bb      	ldr	r3, [r7, #8]
 8034936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 803493a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 803493c:	687b      	ldr	r3, [r7, #4]
 803493e:	681b      	ldr	r3, [r3, #0]
 8034940:	68ba      	ldr	r2, [r7, #8]
 8034942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8034944:	683b      	ldr	r3, [r7, #0]
 8034946:	681b      	ldr	r3, [r3, #0]
 8034948:	4a64      	ldr	r2, [pc, #400]	; (8034adc <HAL_TIM_ConfigClockSource+0x1e4>)
 803494a:	4293      	cmp	r3, r2
 803494c:	f000 80a9 	beq.w	8034aa2 <HAL_TIM_ConfigClockSource+0x1aa>
 8034950:	4a62      	ldr	r2, [pc, #392]	; (8034adc <HAL_TIM_ConfigClockSource+0x1e4>)
 8034952:	4293      	cmp	r3, r2
 8034954:	f200 80ae 	bhi.w	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 8034958:	4a61      	ldr	r2, [pc, #388]	; (8034ae0 <HAL_TIM_ConfigClockSource+0x1e8>)
 803495a:	4293      	cmp	r3, r2
 803495c:	f000 80a1 	beq.w	8034aa2 <HAL_TIM_ConfigClockSource+0x1aa>
 8034960:	4a5f      	ldr	r2, [pc, #380]	; (8034ae0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8034962:	4293      	cmp	r3, r2
 8034964:	f200 80a6 	bhi.w	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 8034968:	4a5e      	ldr	r2, [pc, #376]	; (8034ae4 <HAL_TIM_ConfigClockSource+0x1ec>)
 803496a:	4293      	cmp	r3, r2
 803496c:	f000 8099 	beq.w	8034aa2 <HAL_TIM_ConfigClockSource+0x1aa>
 8034970:	4a5c      	ldr	r2, [pc, #368]	; (8034ae4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8034972:	4293      	cmp	r3, r2
 8034974:	f200 809e 	bhi.w	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 8034978:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 803497c:	f000 8091 	beq.w	8034aa2 <HAL_TIM_ConfigClockSource+0x1aa>
 8034980:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8034984:	f200 8096 	bhi.w	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 8034988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803498c:	f000 8089 	beq.w	8034aa2 <HAL_TIM_ConfigClockSource+0x1aa>
 8034990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8034994:	f200 808e 	bhi.w	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 8034998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803499c:	d03e      	beq.n	8034a1c <HAL_TIM_ConfigClockSource+0x124>
 803499e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80349a2:	f200 8087 	bhi.w	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 80349a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80349aa:	f000 8086 	beq.w	8034aba <HAL_TIM_ConfigClockSource+0x1c2>
 80349ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80349b2:	d87f      	bhi.n	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 80349b4:	2b70      	cmp	r3, #112	; 0x70
 80349b6:	d01a      	beq.n	80349ee <HAL_TIM_ConfigClockSource+0xf6>
 80349b8:	2b70      	cmp	r3, #112	; 0x70
 80349ba:	d87b      	bhi.n	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 80349bc:	2b60      	cmp	r3, #96	; 0x60
 80349be:	d050      	beq.n	8034a62 <HAL_TIM_ConfigClockSource+0x16a>
 80349c0:	2b60      	cmp	r3, #96	; 0x60
 80349c2:	d877      	bhi.n	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 80349c4:	2b50      	cmp	r3, #80	; 0x50
 80349c6:	d03c      	beq.n	8034a42 <HAL_TIM_ConfigClockSource+0x14a>
 80349c8:	2b50      	cmp	r3, #80	; 0x50
 80349ca:	d873      	bhi.n	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 80349cc:	2b40      	cmp	r3, #64	; 0x40
 80349ce:	d058      	beq.n	8034a82 <HAL_TIM_ConfigClockSource+0x18a>
 80349d0:	2b40      	cmp	r3, #64	; 0x40
 80349d2:	d86f      	bhi.n	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 80349d4:	2b30      	cmp	r3, #48	; 0x30
 80349d6:	d064      	beq.n	8034aa2 <HAL_TIM_ConfigClockSource+0x1aa>
 80349d8:	2b30      	cmp	r3, #48	; 0x30
 80349da:	d86b      	bhi.n	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 80349dc:	2b20      	cmp	r3, #32
 80349de:	d060      	beq.n	8034aa2 <HAL_TIM_ConfigClockSource+0x1aa>
 80349e0:	2b20      	cmp	r3, #32
 80349e2:	d867      	bhi.n	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
 80349e4:	2b00      	cmp	r3, #0
 80349e6:	d05c      	beq.n	8034aa2 <HAL_TIM_ConfigClockSource+0x1aa>
 80349e8:	2b10      	cmp	r3, #16
 80349ea:	d05a      	beq.n	8034aa2 <HAL_TIM_ConfigClockSource+0x1aa>
 80349ec:	e062      	b.n	8034ab4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80349ee:	687b      	ldr	r3, [r7, #4]
 80349f0:	6818      	ldr	r0, [r3, #0]
 80349f2:	683b      	ldr	r3, [r7, #0]
 80349f4:	6899      	ldr	r1, [r3, #8]
 80349f6:	683b      	ldr	r3, [r7, #0]
 80349f8:	685a      	ldr	r2, [r3, #4]
 80349fa:	683b      	ldr	r3, [r7, #0]
 80349fc:	68db      	ldr	r3, [r3, #12]
 80349fe:	f000 f9b3 	bl	8034d68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8034a02:	687b      	ldr	r3, [r7, #4]
 8034a04:	681b      	ldr	r3, [r3, #0]
 8034a06:	689b      	ldr	r3, [r3, #8]
 8034a08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8034a0a:	68bb      	ldr	r3, [r7, #8]
 8034a0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8034a10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8034a12:	687b      	ldr	r3, [r7, #4]
 8034a14:	681b      	ldr	r3, [r3, #0]
 8034a16:	68ba      	ldr	r2, [r7, #8]
 8034a18:	609a      	str	r2, [r3, #8]
      break;
 8034a1a:	e04f      	b.n	8034abc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8034a1c:	687b      	ldr	r3, [r7, #4]
 8034a1e:	6818      	ldr	r0, [r3, #0]
 8034a20:	683b      	ldr	r3, [r7, #0]
 8034a22:	6899      	ldr	r1, [r3, #8]
 8034a24:	683b      	ldr	r3, [r7, #0]
 8034a26:	685a      	ldr	r2, [r3, #4]
 8034a28:	683b      	ldr	r3, [r7, #0]
 8034a2a:	68db      	ldr	r3, [r3, #12]
 8034a2c:	f000 f99c 	bl	8034d68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8034a30:	687b      	ldr	r3, [r7, #4]
 8034a32:	681b      	ldr	r3, [r3, #0]
 8034a34:	689a      	ldr	r2, [r3, #8]
 8034a36:	687b      	ldr	r3, [r7, #4]
 8034a38:	681b      	ldr	r3, [r3, #0]
 8034a3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8034a3e:	609a      	str	r2, [r3, #8]
      break;
 8034a40:	e03c      	b.n	8034abc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8034a42:	687b      	ldr	r3, [r7, #4]
 8034a44:	6818      	ldr	r0, [r3, #0]
 8034a46:	683b      	ldr	r3, [r7, #0]
 8034a48:	6859      	ldr	r1, [r3, #4]
 8034a4a:	683b      	ldr	r3, [r7, #0]
 8034a4c:	68db      	ldr	r3, [r3, #12]
 8034a4e:	461a      	mov	r2, r3
 8034a50:	f000 f90c 	bl	8034c6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8034a54:	687b      	ldr	r3, [r7, #4]
 8034a56:	681b      	ldr	r3, [r3, #0]
 8034a58:	2150      	movs	r1, #80	; 0x50
 8034a5a:	4618      	mov	r0, r3
 8034a5c:	f000 f966 	bl	8034d2c <TIM_ITRx_SetConfig>
      break;
 8034a60:	e02c      	b.n	8034abc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8034a62:	687b      	ldr	r3, [r7, #4]
 8034a64:	6818      	ldr	r0, [r3, #0]
 8034a66:	683b      	ldr	r3, [r7, #0]
 8034a68:	6859      	ldr	r1, [r3, #4]
 8034a6a:	683b      	ldr	r3, [r7, #0]
 8034a6c:	68db      	ldr	r3, [r3, #12]
 8034a6e:	461a      	mov	r2, r3
 8034a70:	f000 f92b 	bl	8034cca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8034a74:	687b      	ldr	r3, [r7, #4]
 8034a76:	681b      	ldr	r3, [r3, #0]
 8034a78:	2160      	movs	r1, #96	; 0x60
 8034a7a:	4618      	mov	r0, r3
 8034a7c:	f000 f956 	bl	8034d2c <TIM_ITRx_SetConfig>
      break;
 8034a80:	e01c      	b.n	8034abc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8034a82:	687b      	ldr	r3, [r7, #4]
 8034a84:	6818      	ldr	r0, [r3, #0]
 8034a86:	683b      	ldr	r3, [r7, #0]
 8034a88:	6859      	ldr	r1, [r3, #4]
 8034a8a:	683b      	ldr	r3, [r7, #0]
 8034a8c:	68db      	ldr	r3, [r3, #12]
 8034a8e:	461a      	mov	r2, r3
 8034a90:	f000 f8ec 	bl	8034c6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8034a94:	687b      	ldr	r3, [r7, #4]
 8034a96:	681b      	ldr	r3, [r3, #0]
 8034a98:	2140      	movs	r1, #64	; 0x40
 8034a9a:	4618      	mov	r0, r3
 8034a9c:	f000 f946 	bl	8034d2c <TIM_ITRx_SetConfig>
      break;
 8034aa0:	e00c      	b.n	8034abc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8034aa2:	687b      	ldr	r3, [r7, #4]
 8034aa4:	681a      	ldr	r2, [r3, #0]
 8034aa6:	683b      	ldr	r3, [r7, #0]
 8034aa8:	681b      	ldr	r3, [r3, #0]
 8034aaa:	4619      	mov	r1, r3
 8034aac:	4610      	mov	r0, r2
 8034aae:	f000 f93d 	bl	8034d2c <TIM_ITRx_SetConfig>
      break;
 8034ab2:	e003      	b.n	8034abc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8034ab4:	2301      	movs	r3, #1
 8034ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8034ab8:	e000      	b.n	8034abc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8034aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8034abc:	687b      	ldr	r3, [r7, #4]
 8034abe:	2201      	movs	r2, #1
 8034ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8034ac4:	687b      	ldr	r3, [r7, #4]
 8034ac6:	2200      	movs	r2, #0
 8034ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8034acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8034ace:	4618      	mov	r0, r3
 8034ad0:	3710      	adds	r7, #16
 8034ad2:	46bd      	mov	sp, r7
 8034ad4:	bd80      	pop	{r7, pc}
 8034ad6:	bf00      	nop
 8034ad8:	ffceff88 	.word	0xffceff88
 8034adc:	00100040 	.word	0x00100040
 8034ae0:	00100030 	.word	0x00100030
 8034ae4:	00100020 	.word	0x00100020

08034ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8034ae8:	b480      	push	{r7}
 8034aea:	b083      	sub	sp, #12
 8034aec:	af00      	add	r7, sp, #0
 8034aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8034af0:	bf00      	nop
 8034af2:	370c      	adds	r7, #12
 8034af4:	46bd      	mov	sp, r7
 8034af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034afa:	4770      	bx	lr

08034afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8034afc:	b480      	push	{r7}
 8034afe:	b083      	sub	sp, #12
 8034b00:	af00      	add	r7, sp, #0
 8034b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8034b04:	bf00      	nop
 8034b06:	370c      	adds	r7, #12
 8034b08:	46bd      	mov	sp, r7
 8034b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b0e:	4770      	bx	lr

08034b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8034b10:	b480      	push	{r7}
 8034b12:	b083      	sub	sp, #12
 8034b14:	af00      	add	r7, sp, #0
 8034b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8034b18:	bf00      	nop
 8034b1a:	370c      	adds	r7, #12
 8034b1c:	46bd      	mov	sp, r7
 8034b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b22:	4770      	bx	lr

08034b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8034b24:	b480      	push	{r7}
 8034b26:	b083      	sub	sp, #12
 8034b28:	af00      	add	r7, sp, #0
 8034b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8034b2c:	bf00      	nop
 8034b2e:	370c      	adds	r7, #12
 8034b30:	46bd      	mov	sp, r7
 8034b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b36:	4770      	bx	lr

08034b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8034b38:	b480      	push	{r7}
 8034b3a:	b085      	sub	sp, #20
 8034b3c:	af00      	add	r7, sp, #0
 8034b3e:	6078      	str	r0, [r7, #4]
 8034b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8034b42:	687b      	ldr	r3, [r7, #4]
 8034b44:	681b      	ldr	r3, [r3, #0]
 8034b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8034b48:	687b      	ldr	r3, [r7, #4]
 8034b4a:	4a40      	ldr	r2, [pc, #256]	; (8034c4c <TIM_Base_SetConfig+0x114>)
 8034b4c:	4293      	cmp	r3, r2
 8034b4e:	d013      	beq.n	8034b78 <TIM_Base_SetConfig+0x40>
 8034b50:	687b      	ldr	r3, [r7, #4]
 8034b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034b56:	d00f      	beq.n	8034b78 <TIM_Base_SetConfig+0x40>
 8034b58:	687b      	ldr	r3, [r7, #4]
 8034b5a:	4a3d      	ldr	r2, [pc, #244]	; (8034c50 <TIM_Base_SetConfig+0x118>)
 8034b5c:	4293      	cmp	r3, r2
 8034b5e:	d00b      	beq.n	8034b78 <TIM_Base_SetConfig+0x40>
 8034b60:	687b      	ldr	r3, [r7, #4]
 8034b62:	4a3c      	ldr	r2, [pc, #240]	; (8034c54 <TIM_Base_SetConfig+0x11c>)
 8034b64:	4293      	cmp	r3, r2
 8034b66:	d007      	beq.n	8034b78 <TIM_Base_SetConfig+0x40>
 8034b68:	687b      	ldr	r3, [r7, #4]
 8034b6a:	4a3b      	ldr	r2, [pc, #236]	; (8034c58 <TIM_Base_SetConfig+0x120>)
 8034b6c:	4293      	cmp	r3, r2
 8034b6e:	d003      	beq.n	8034b78 <TIM_Base_SetConfig+0x40>
 8034b70:	687b      	ldr	r3, [r7, #4]
 8034b72:	4a3a      	ldr	r2, [pc, #232]	; (8034c5c <TIM_Base_SetConfig+0x124>)
 8034b74:	4293      	cmp	r3, r2
 8034b76:	d108      	bne.n	8034b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8034b78:	68fb      	ldr	r3, [r7, #12]
 8034b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8034b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8034b80:	683b      	ldr	r3, [r7, #0]
 8034b82:	685b      	ldr	r3, [r3, #4]
 8034b84:	68fa      	ldr	r2, [r7, #12]
 8034b86:	4313      	orrs	r3, r2
 8034b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8034b8a:	687b      	ldr	r3, [r7, #4]
 8034b8c:	4a2f      	ldr	r2, [pc, #188]	; (8034c4c <TIM_Base_SetConfig+0x114>)
 8034b8e:	4293      	cmp	r3, r2
 8034b90:	d01f      	beq.n	8034bd2 <TIM_Base_SetConfig+0x9a>
 8034b92:	687b      	ldr	r3, [r7, #4]
 8034b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034b98:	d01b      	beq.n	8034bd2 <TIM_Base_SetConfig+0x9a>
 8034b9a:	687b      	ldr	r3, [r7, #4]
 8034b9c:	4a2c      	ldr	r2, [pc, #176]	; (8034c50 <TIM_Base_SetConfig+0x118>)
 8034b9e:	4293      	cmp	r3, r2
 8034ba0:	d017      	beq.n	8034bd2 <TIM_Base_SetConfig+0x9a>
 8034ba2:	687b      	ldr	r3, [r7, #4]
 8034ba4:	4a2b      	ldr	r2, [pc, #172]	; (8034c54 <TIM_Base_SetConfig+0x11c>)
 8034ba6:	4293      	cmp	r3, r2
 8034ba8:	d013      	beq.n	8034bd2 <TIM_Base_SetConfig+0x9a>
 8034baa:	687b      	ldr	r3, [r7, #4]
 8034bac:	4a2a      	ldr	r2, [pc, #168]	; (8034c58 <TIM_Base_SetConfig+0x120>)
 8034bae:	4293      	cmp	r3, r2
 8034bb0:	d00f      	beq.n	8034bd2 <TIM_Base_SetConfig+0x9a>
 8034bb2:	687b      	ldr	r3, [r7, #4]
 8034bb4:	4a29      	ldr	r2, [pc, #164]	; (8034c5c <TIM_Base_SetConfig+0x124>)
 8034bb6:	4293      	cmp	r3, r2
 8034bb8:	d00b      	beq.n	8034bd2 <TIM_Base_SetConfig+0x9a>
 8034bba:	687b      	ldr	r3, [r7, #4]
 8034bbc:	4a28      	ldr	r2, [pc, #160]	; (8034c60 <TIM_Base_SetConfig+0x128>)
 8034bbe:	4293      	cmp	r3, r2
 8034bc0:	d007      	beq.n	8034bd2 <TIM_Base_SetConfig+0x9a>
 8034bc2:	687b      	ldr	r3, [r7, #4]
 8034bc4:	4a27      	ldr	r2, [pc, #156]	; (8034c64 <TIM_Base_SetConfig+0x12c>)
 8034bc6:	4293      	cmp	r3, r2
 8034bc8:	d003      	beq.n	8034bd2 <TIM_Base_SetConfig+0x9a>
 8034bca:	687b      	ldr	r3, [r7, #4]
 8034bcc:	4a26      	ldr	r2, [pc, #152]	; (8034c68 <TIM_Base_SetConfig+0x130>)
 8034bce:	4293      	cmp	r3, r2
 8034bd0:	d108      	bne.n	8034be4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8034bd2:	68fb      	ldr	r3, [r7, #12]
 8034bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8034bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8034bda:	683b      	ldr	r3, [r7, #0]
 8034bdc:	68db      	ldr	r3, [r3, #12]
 8034bde:	68fa      	ldr	r2, [r7, #12]
 8034be0:	4313      	orrs	r3, r2
 8034be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8034be4:	68fb      	ldr	r3, [r7, #12]
 8034be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8034bea:	683b      	ldr	r3, [r7, #0]
 8034bec:	695b      	ldr	r3, [r3, #20]
 8034bee:	4313      	orrs	r3, r2
 8034bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8034bf2:	687b      	ldr	r3, [r7, #4]
 8034bf4:	68fa      	ldr	r2, [r7, #12]
 8034bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8034bf8:	683b      	ldr	r3, [r7, #0]
 8034bfa:	689a      	ldr	r2, [r3, #8]
 8034bfc:	687b      	ldr	r3, [r7, #4]
 8034bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8034c00:	683b      	ldr	r3, [r7, #0]
 8034c02:	681a      	ldr	r2, [r3, #0]
 8034c04:	687b      	ldr	r3, [r7, #4]
 8034c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8034c08:	687b      	ldr	r3, [r7, #4]
 8034c0a:	4a10      	ldr	r2, [pc, #64]	; (8034c4c <TIM_Base_SetConfig+0x114>)
 8034c0c:	4293      	cmp	r3, r2
 8034c0e:	d00f      	beq.n	8034c30 <TIM_Base_SetConfig+0xf8>
 8034c10:	687b      	ldr	r3, [r7, #4]
 8034c12:	4a12      	ldr	r2, [pc, #72]	; (8034c5c <TIM_Base_SetConfig+0x124>)
 8034c14:	4293      	cmp	r3, r2
 8034c16:	d00b      	beq.n	8034c30 <TIM_Base_SetConfig+0xf8>
 8034c18:	687b      	ldr	r3, [r7, #4]
 8034c1a:	4a11      	ldr	r2, [pc, #68]	; (8034c60 <TIM_Base_SetConfig+0x128>)
 8034c1c:	4293      	cmp	r3, r2
 8034c1e:	d007      	beq.n	8034c30 <TIM_Base_SetConfig+0xf8>
 8034c20:	687b      	ldr	r3, [r7, #4]
 8034c22:	4a10      	ldr	r2, [pc, #64]	; (8034c64 <TIM_Base_SetConfig+0x12c>)
 8034c24:	4293      	cmp	r3, r2
 8034c26:	d003      	beq.n	8034c30 <TIM_Base_SetConfig+0xf8>
 8034c28:	687b      	ldr	r3, [r7, #4]
 8034c2a:	4a0f      	ldr	r2, [pc, #60]	; (8034c68 <TIM_Base_SetConfig+0x130>)
 8034c2c:	4293      	cmp	r3, r2
 8034c2e:	d103      	bne.n	8034c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8034c30:	683b      	ldr	r3, [r7, #0]
 8034c32:	691a      	ldr	r2, [r3, #16]
 8034c34:	687b      	ldr	r3, [r7, #4]
 8034c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8034c38:	687b      	ldr	r3, [r7, #4]
 8034c3a:	2201      	movs	r2, #1
 8034c3c:	615a      	str	r2, [r3, #20]
}
 8034c3e:	bf00      	nop
 8034c40:	3714      	adds	r7, #20
 8034c42:	46bd      	mov	sp, r7
 8034c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034c48:	4770      	bx	lr
 8034c4a:	bf00      	nop
 8034c4c:	40010000 	.word	0x40010000
 8034c50:	40000400 	.word	0x40000400
 8034c54:	40000800 	.word	0x40000800
 8034c58:	40000c00 	.word	0x40000c00
 8034c5c:	40010400 	.word	0x40010400
 8034c60:	40014000 	.word	0x40014000
 8034c64:	40014400 	.word	0x40014400
 8034c68:	40014800 	.word	0x40014800

08034c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8034c6c:	b480      	push	{r7}
 8034c6e:	b087      	sub	sp, #28
 8034c70:	af00      	add	r7, sp, #0
 8034c72:	60f8      	str	r0, [r7, #12]
 8034c74:	60b9      	str	r1, [r7, #8]
 8034c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8034c78:	68fb      	ldr	r3, [r7, #12]
 8034c7a:	6a1b      	ldr	r3, [r3, #32]
 8034c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8034c7e:	68fb      	ldr	r3, [r7, #12]
 8034c80:	6a1b      	ldr	r3, [r3, #32]
 8034c82:	f023 0201 	bic.w	r2, r3, #1
 8034c86:	68fb      	ldr	r3, [r7, #12]
 8034c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034c8a:	68fb      	ldr	r3, [r7, #12]
 8034c8c:	699b      	ldr	r3, [r3, #24]
 8034c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8034c90:	693b      	ldr	r3, [r7, #16]
 8034c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8034c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8034c98:	687b      	ldr	r3, [r7, #4]
 8034c9a:	011b      	lsls	r3, r3, #4
 8034c9c:	693a      	ldr	r2, [r7, #16]
 8034c9e:	4313      	orrs	r3, r2
 8034ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8034ca2:	697b      	ldr	r3, [r7, #20]
 8034ca4:	f023 030a 	bic.w	r3, r3, #10
 8034ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8034caa:	697a      	ldr	r2, [r7, #20]
 8034cac:	68bb      	ldr	r3, [r7, #8]
 8034cae:	4313      	orrs	r3, r2
 8034cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8034cb2:	68fb      	ldr	r3, [r7, #12]
 8034cb4:	693a      	ldr	r2, [r7, #16]
 8034cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034cb8:	68fb      	ldr	r3, [r7, #12]
 8034cba:	697a      	ldr	r2, [r7, #20]
 8034cbc:	621a      	str	r2, [r3, #32]
}
 8034cbe:	bf00      	nop
 8034cc0:	371c      	adds	r7, #28
 8034cc2:	46bd      	mov	sp, r7
 8034cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034cc8:	4770      	bx	lr

08034cca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8034cca:	b480      	push	{r7}
 8034ccc:	b087      	sub	sp, #28
 8034cce:	af00      	add	r7, sp, #0
 8034cd0:	60f8      	str	r0, [r7, #12]
 8034cd2:	60b9      	str	r1, [r7, #8]
 8034cd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8034cd6:	68fb      	ldr	r3, [r7, #12]
 8034cd8:	6a1b      	ldr	r3, [r3, #32]
 8034cda:	f023 0210 	bic.w	r2, r3, #16
 8034cde:	68fb      	ldr	r3, [r7, #12]
 8034ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034ce2:	68fb      	ldr	r3, [r7, #12]
 8034ce4:	699b      	ldr	r3, [r3, #24]
 8034ce6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8034ce8:	68fb      	ldr	r3, [r7, #12]
 8034cea:	6a1b      	ldr	r3, [r3, #32]
 8034cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8034cee:	697b      	ldr	r3, [r7, #20]
 8034cf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8034cf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8034cf6:	687b      	ldr	r3, [r7, #4]
 8034cf8:	031b      	lsls	r3, r3, #12
 8034cfa:	697a      	ldr	r2, [r7, #20]
 8034cfc:	4313      	orrs	r3, r2
 8034cfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8034d00:	693b      	ldr	r3, [r7, #16]
 8034d02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8034d06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8034d08:	68bb      	ldr	r3, [r7, #8]
 8034d0a:	011b      	lsls	r3, r3, #4
 8034d0c:	693a      	ldr	r2, [r7, #16]
 8034d0e:	4313      	orrs	r3, r2
 8034d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8034d12:	68fb      	ldr	r3, [r7, #12]
 8034d14:	697a      	ldr	r2, [r7, #20]
 8034d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034d18:	68fb      	ldr	r3, [r7, #12]
 8034d1a:	693a      	ldr	r2, [r7, #16]
 8034d1c:	621a      	str	r2, [r3, #32]
}
 8034d1e:	bf00      	nop
 8034d20:	371c      	adds	r7, #28
 8034d22:	46bd      	mov	sp, r7
 8034d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034d28:	4770      	bx	lr
	...

08034d2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8034d2c:	b480      	push	{r7}
 8034d2e:	b085      	sub	sp, #20
 8034d30:	af00      	add	r7, sp, #0
 8034d32:	6078      	str	r0, [r7, #4]
 8034d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8034d36:	687b      	ldr	r3, [r7, #4]
 8034d38:	689b      	ldr	r3, [r3, #8]
 8034d3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8034d3c:	68fa      	ldr	r2, [r7, #12]
 8034d3e:	4b09      	ldr	r3, [pc, #36]	; (8034d64 <TIM_ITRx_SetConfig+0x38>)
 8034d40:	4013      	ands	r3, r2
 8034d42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8034d44:	683a      	ldr	r2, [r7, #0]
 8034d46:	68fb      	ldr	r3, [r7, #12]
 8034d48:	4313      	orrs	r3, r2
 8034d4a:	f043 0307 	orr.w	r3, r3, #7
 8034d4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8034d50:	687b      	ldr	r3, [r7, #4]
 8034d52:	68fa      	ldr	r2, [r7, #12]
 8034d54:	609a      	str	r2, [r3, #8]
}
 8034d56:	bf00      	nop
 8034d58:	3714      	adds	r7, #20
 8034d5a:	46bd      	mov	sp, r7
 8034d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034d60:	4770      	bx	lr
 8034d62:	bf00      	nop
 8034d64:	ffcfff8f 	.word	0xffcfff8f

08034d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8034d68:	b480      	push	{r7}
 8034d6a:	b087      	sub	sp, #28
 8034d6c:	af00      	add	r7, sp, #0
 8034d6e:	60f8      	str	r0, [r7, #12]
 8034d70:	60b9      	str	r1, [r7, #8]
 8034d72:	607a      	str	r2, [r7, #4]
 8034d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8034d76:	68fb      	ldr	r3, [r7, #12]
 8034d78:	689b      	ldr	r3, [r3, #8]
 8034d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8034d7c:	697b      	ldr	r3, [r7, #20]
 8034d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8034d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8034d84:	683b      	ldr	r3, [r7, #0]
 8034d86:	021a      	lsls	r2, r3, #8
 8034d88:	687b      	ldr	r3, [r7, #4]
 8034d8a:	431a      	orrs	r2, r3
 8034d8c:	68bb      	ldr	r3, [r7, #8]
 8034d8e:	4313      	orrs	r3, r2
 8034d90:	697a      	ldr	r2, [r7, #20]
 8034d92:	4313      	orrs	r3, r2
 8034d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8034d96:	68fb      	ldr	r3, [r7, #12]
 8034d98:	697a      	ldr	r2, [r7, #20]
 8034d9a:	609a      	str	r2, [r3, #8]
}
 8034d9c:	bf00      	nop
 8034d9e:	371c      	adds	r7, #28
 8034da0:	46bd      	mov	sp, r7
 8034da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034da6:	4770      	bx	lr

08034da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8034da8:	b480      	push	{r7}
 8034daa:	b085      	sub	sp, #20
 8034dac:	af00      	add	r7, sp, #0
 8034dae:	6078      	str	r0, [r7, #4]
 8034db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8034db2:	687b      	ldr	r3, [r7, #4]
 8034db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8034db8:	2b01      	cmp	r3, #1
 8034dba:	d101      	bne.n	8034dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8034dbc:	2302      	movs	r3, #2
 8034dbe:	e06d      	b.n	8034e9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8034dc0:	687b      	ldr	r3, [r7, #4]
 8034dc2:	2201      	movs	r2, #1
 8034dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8034dc8:	687b      	ldr	r3, [r7, #4]
 8034dca:	2202      	movs	r2, #2
 8034dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8034dd0:	687b      	ldr	r3, [r7, #4]
 8034dd2:	681b      	ldr	r3, [r3, #0]
 8034dd4:	685b      	ldr	r3, [r3, #4]
 8034dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8034dd8:	687b      	ldr	r3, [r7, #4]
 8034dda:	681b      	ldr	r3, [r3, #0]
 8034ddc:	689b      	ldr	r3, [r3, #8]
 8034dde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8034de0:	687b      	ldr	r3, [r7, #4]
 8034de2:	681b      	ldr	r3, [r3, #0]
 8034de4:	4a30      	ldr	r2, [pc, #192]	; (8034ea8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8034de6:	4293      	cmp	r3, r2
 8034de8:	d004      	beq.n	8034df4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8034dea:	687b      	ldr	r3, [r7, #4]
 8034dec:	681b      	ldr	r3, [r3, #0]
 8034dee:	4a2f      	ldr	r2, [pc, #188]	; (8034eac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8034df0:	4293      	cmp	r3, r2
 8034df2:	d108      	bne.n	8034e06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8034df4:	68fb      	ldr	r3, [r7, #12]
 8034df6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8034dfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8034dfc:	683b      	ldr	r3, [r7, #0]
 8034dfe:	685b      	ldr	r3, [r3, #4]
 8034e00:	68fa      	ldr	r2, [r7, #12]
 8034e02:	4313      	orrs	r3, r2
 8034e04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8034e06:	68fb      	ldr	r3, [r7, #12]
 8034e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8034e0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8034e0e:	683b      	ldr	r3, [r7, #0]
 8034e10:	681b      	ldr	r3, [r3, #0]
 8034e12:	68fa      	ldr	r2, [r7, #12]
 8034e14:	4313      	orrs	r3, r2
 8034e16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8034e18:	687b      	ldr	r3, [r7, #4]
 8034e1a:	681b      	ldr	r3, [r3, #0]
 8034e1c:	68fa      	ldr	r2, [r7, #12]
 8034e1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8034e20:	687b      	ldr	r3, [r7, #4]
 8034e22:	681b      	ldr	r3, [r3, #0]
 8034e24:	4a20      	ldr	r2, [pc, #128]	; (8034ea8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8034e26:	4293      	cmp	r3, r2
 8034e28:	d022      	beq.n	8034e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e2a:	687b      	ldr	r3, [r7, #4]
 8034e2c:	681b      	ldr	r3, [r3, #0]
 8034e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034e32:	d01d      	beq.n	8034e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e34:	687b      	ldr	r3, [r7, #4]
 8034e36:	681b      	ldr	r3, [r3, #0]
 8034e38:	4a1d      	ldr	r2, [pc, #116]	; (8034eb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8034e3a:	4293      	cmp	r3, r2
 8034e3c:	d018      	beq.n	8034e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e3e:	687b      	ldr	r3, [r7, #4]
 8034e40:	681b      	ldr	r3, [r3, #0]
 8034e42:	4a1c      	ldr	r2, [pc, #112]	; (8034eb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8034e44:	4293      	cmp	r3, r2
 8034e46:	d013      	beq.n	8034e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e48:	687b      	ldr	r3, [r7, #4]
 8034e4a:	681b      	ldr	r3, [r3, #0]
 8034e4c:	4a1a      	ldr	r2, [pc, #104]	; (8034eb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8034e4e:	4293      	cmp	r3, r2
 8034e50:	d00e      	beq.n	8034e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e52:	687b      	ldr	r3, [r7, #4]
 8034e54:	681b      	ldr	r3, [r3, #0]
 8034e56:	4a15      	ldr	r2, [pc, #84]	; (8034eac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8034e58:	4293      	cmp	r3, r2
 8034e5a:	d009      	beq.n	8034e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e5c:	687b      	ldr	r3, [r7, #4]
 8034e5e:	681b      	ldr	r3, [r3, #0]
 8034e60:	4a16      	ldr	r2, [pc, #88]	; (8034ebc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8034e62:	4293      	cmp	r3, r2
 8034e64:	d004      	beq.n	8034e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e66:	687b      	ldr	r3, [r7, #4]
 8034e68:	681b      	ldr	r3, [r3, #0]
 8034e6a:	4a15      	ldr	r2, [pc, #84]	; (8034ec0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8034e6c:	4293      	cmp	r3, r2
 8034e6e:	d10c      	bne.n	8034e8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8034e70:	68bb      	ldr	r3, [r7, #8]
 8034e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8034e76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8034e78:	683b      	ldr	r3, [r7, #0]
 8034e7a:	689b      	ldr	r3, [r3, #8]
 8034e7c:	68ba      	ldr	r2, [r7, #8]
 8034e7e:	4313      	orrs	r3, r2
 8034e80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8034e82:	687b      	ldr	r3, [r7, #4]
 8034e84:	681b      	ldr	r3, [r3, #0]
 8034e86:	68ba      	ldr	r2, [r7, #8]
 8034e88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8034e8a:	687b      	ldr	r3, [r7, #4]
 8034e8c:	2201      	movs	r2, #1
 8034e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8034e92:	687b      	ldr	r3, [r7, #4]
 8034e94:	2200      	movs	r2, #0
 8034e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8034e9a:	2300      	movs	r3, #0
}
 8034e9c:	4618      	mov	r0, r3
 8034e9e:	3714      	adds	r7, #20
 8034ea0:	46bd      	mov	sp, r7
 8034ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ea6:	4770      	bx	lr
 8034ea8:	40010000 	.word	0x40010000
 8034eac:	40010400 	.word	0x40010400
 8034eb0:	40000400 	.word	0x40000400
 8034eb4:	40000800 	.word	0x40000800
 8034eb8:	40000c00 	.word	0x40000c00
 8034ebc:	40001800 	.word	0x40001800
 8034ec0:	40014000 	.word	0x40014000

08034ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8034ec4:	b480      	push	{r7}
 8034ec6:	b083      	sub	sp, #12
 8034ec8:	af00      	add	r7, sp, #0
 8034eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8034ecc:	bf00      	nop
 8034ece:	370c      	adds	r7, #12
 8034ed0:	46bd      	mov	sp, r7
 8034ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ed6:	4770      	bx	lr

08034ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8034ed8:	b480      	push	{r7}
 8034eda:	b083      	sub	sp, #12
 8034edc:	af00      	add	r7, sp, #0
 8034ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8034ee0:	bf00      	nop
 8034ee2:	370c      	adds	r7, #12
 8034ee4:	46bd      	mov	sp, r7
 8034ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034eea:	4770      	bx	lr

08034eec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8034eec:	b480      	push	{r7}
 8034eee:	b083      	sub	sp, #12
 8034ef0:	af00      	add	r7, sp, #0
 8034ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8034ef4:	bf00      	nop
 8034ef6:	370c      	adds	r7, #12
 8034ef8:	46bd      	mov	sp, r7
 8034efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034efe:	4770      	bx	lr

08034f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8034f00:	b580      	push	{r7, lr}
 8034f02:	b082      	sub	sp, #8
 8034f04:	af00      	add	r7, sp, #0
 8034f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8034f08:	687b      	ldr	r3, [r7, #4]
 8034f0a:	2b00      	cmp	r3, #0
 8034f0c:	d101      	bne.n	8034f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8034f0e:	2301      	movs	r3, #1
 8034f10:	e042      	b.n	8034f98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8034f12:	687b      	ldr	r3, [r7, #4]
 8034f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034f18:	2b00      	cmp	r3, #0
 8034f1a:	d106      	bne.n	8034f2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8034f1c:	687b      	ldr	r3, [r7, #4]
 8034f1e:	2200      	movs	r2, #0
 8034f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8034f24:	6878      	ldr	r0, [r7, #4]
 8034f26:	f7f5 fc65 	bl	802a7f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8034f2a:	687b      	ldr	r3, [r7, #4]
 8034f2c:	2224      	movs	r2, #36	; 0x24
 8034f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8034f32:	687b      	ldr	r3, [r7, #4]
 8034f34:	681b      	ldr	r3, [r3, #0]
 8034f36:	681a      	ldr	r2, [r3, #0]
 8034f38:	687b      	ldr	r3, [r7, #4]
 8034f3a:	681b      	ldr	r3, [r3, #0]
 8034f3c:	f022 0201 	bic.w	r2, r2, #1
 8034f40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8034f42:	6878      	ldr	r0, [r7, #4]
 8034f44:	f000 fdb2 	bl	8035aac <UART_SetConfig>
 8034f48:	4603      	mov	r3, r0
 8034f4a:	2b01      	cmp	r3, #1
 8034f4c:	d101      	bne.n	8034f52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8034f4e:	2301      	movs	r3, #1
 8034f50:	e022      	b.n	8034f98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8034f52:	687b      	ldr	r3, [r7, #4]
 8034f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034f56:	2b00      	cmp	r3, #0
 8034f58:	d002      	beq.n	8034f60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8034f5a:	6878      	ldr	r0, [r7, #4]
 8034f5c:	f001 fb0e 	bl	803657c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8034f60:	687b      	ldr	r3, [r7, #4]
 8034f62:	681b      	ldr	r3, [r3, #0]
 8034f64:	685a      	ldr	r2, [r3, #4]
 8034f66:	687b      	ldr	r3, [r7, #4]
 8034f68:	681b      	ldr	r3, [r3, #0]
 8034f6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8034f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8034f70:	687b      	ldr	r3, [r7, #4]
 8034f72:	681b      	ldr	r3, [r3, #0]
 8034f74:	689a      	ldr	r2, [r3, #8]
 8034f76:	687b      	ldr	r3, [r7, #4]
 8034f78:	681b      	ldr	r3, [r3, #0]
 8034f7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8034f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8034f80:	687b      	ldr	r3, [r7, #4]
 8034f82:	681b      	ldr	r3, [r3, #0]
 8034f84:	681a      	ldr	r2, [r3, #0]
 8034f86:	687b      	ldr	r3, [r7, #4]
 8034f88:	681b      	ldr	r3, [r3, #0]
 8034f8a:	f042 0201 	orr.w	r2, r2, #1
 8034f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8034f90:	6878      	ldr	r0, [r7, #4]
 8034f92:	f001 fb95 	bl	80366c0 <UART_CheckIdleState>
 8034f96:	4603      	mov	r3, r0
}
 8034f98:	4618      	mov	r0, r3
 8034f9a:	3708      	adds	r7, #8
 8034f9c:	46bd      	mov	sp, r7
 8034f9e:	bd80      	pop	{r7, pc}

08034fa0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8034fa0:	b580      	push	{r7, lr}
 8034fa2:	b08a      	sub	sp, #40	; 0x28
 8034fa4:	af02      	add	r7, sp, #8
 8034fa6:	60f8      	str	r0, [r7, #12]
 8034fa8:	60b9      	str	r1, [r7, #8]
 8034faa:	603b      	str	r3, [r7, #0]
 8034fac:	4613      	mov	r3, r2
 8034fae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8034fb0:	68fb      	ldr	r3, [r7, #12]
 8034fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8034fb6:	2b20      	cmp	r3, #32
 8034fb8:	f040 80c0 	bne.w	803513c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8034fbc:	68bb      	ldr	r3, [r7, #8]
 8034fbe:	2b00      	cmp	r3, #0
 8034fc0:	d002      	beq.n	8034fc8 <HAL_UART_Receive+0x28>
 8034fc2:	88fb      	ldrh	r3, [r7, #6]
 8034fc4:	2b00      	cmp	r3, #0
 8034fc6:	d101      	bne.n	8034fcc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8034fc8:	2301      	movs	r3, #1
 8034fca:	e0b8      	b.n	803513e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8034fcc:	68fb      	ldr	r3, [r7, #12]
 8034fce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8034fd2:	2b01      	cmp	r3, #1
 8034fd4:	d101      	bne.n	8034fda <HAL_UART_Receive+0x3a>
 8034fd6:	2302      	movs	r3, #2
 8034fd8:	e0b1      	b.n	803513e <HAL_UART_Receive+0x19e>
 8034fda:	68fb      	ldr	r3, [r7, #12]
 8034fdc:	2201      	movs	r2, #1
 8034fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8034fe2:	68fb      	ldr	r3, [r7, #12]
 8034fe4:	2200      	movs	r2, #0
 8034fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8034fea:	68fb      	ldr	r3, [r7, #12]
 8034fec:	2222      	movs	r2, #34	; 0x22
 8034fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8034ff2:	68fb      	ldr	r3, [r7, #12]
 8034ff4:	2200      	movs	r2, #0
 8034ff6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8034ff8:	f7f5 fe58 	bl	802acac <HAL_GetTick>
 8034ffc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8034ffe:	68fb      	ldr	r3, [r7, #12]
 8035000:	88fa      	ldrh	r2, [r7, #6]
 8035002:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8035006:	68fb      	ldr	r3, [r7, #12]
 8035008:	88fa      	ldrh	r2, [r7, #6]
 803500a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 803500e:	68fb      	ldr	r3, [r7, #12]
 8035010:	689b      	ldr	r3, [r3, #8]
 8035012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035016:	d10e      	bne.n	8035036 <HAL_UART_Receive+0x96>
 8035018:	68fb      	ldr	r3, [r7, #12]
 803501a:	691b      	ldr	r3, [r3, #16]
 803501c:	2b00      	cmp	r3, #0
 803501e:	d105      	bne.n	803502c <HAL_UART_Receive+0x8c>
 8035020:	68fb      	ldr	r3, [r7, #12]
 8035022:	f240 12ff 	movw	r2, #511	; 0x1ff
 8035026:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803502a:	e02d      	b.n	8035088 <HAL_UART_Receive+0xe8>
 803502c:	68fb      	ldr	r3, [r7, #12]
 803502e:	22ff      	movs	r2, #255	; 0xff
 8035030:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8035034:	e028      	b.n	8035088 <HAL_UART_Receive+0xe8>
 8035036:	68fb      	ldr	r3, [r7, #12]
 8035038:	689b      	ldr	r3, [r3, #8]
 803503a:	2b00      	cmp	r3, #0
 803503c:	d10d      	bne.n	803505a <HAL_UART_Receive+0xba>
 803503e:	68fb      	ldr	r3, [r7, #12]
 8035040:	691b      	ldr	r3, [r3, #16]
 8035042:	2b00      	cmp	r3, #0
 8035044:	d104      	bne.n	8035050 <HAL_UART_Receive+0xb0>
 8035046:	68fb      	ldr	r3, [r7, #12]
 8035048:	22ff      	movs	r2, #255	; 0xff
 803504a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803504e:	e01b      	b.n	8035088 <HAL_UART_Receive+0xe8>
 8035050:	68fb      	ldr	r3, [r7, #12]
 8035052:	227f      	movs	r2, #127	; 0x7f
 8035054:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8035058:	e016      	b.n	8035088 <HAL_UART_Receive+0xe8>
 803505a:	68fb      	ldr	r3, [r7, #12]
 803505c:	689b      	ldr	r3, [r3, #8]
 803505e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8035062:	d10d      	bne.n	8035080 <HAL_UART_Receive+0xe0>
 8035064:	68fb      	ldr	r3, [r7, #12]
 8035066:	691b      	ldr	r3, [r3, #16]
 8035068:	2b00      	cmp	r3, #0
 803506a:	d104      	bne.n	8035076 <HAL_UART_Receive+0xd6>
 803506c:	68fb      	ldr	r3, [r7, #12]
 803506e:	227f      	movs	r2, #127	; 0x7f
 8035070:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8035074:	e008      	b.n	8035088 <HAL_UART_Receive+0xe8>
 8035076:	68fb      	ldr	r3, [r7, #12]
 8035078:	223f      	movs	r2, #63	; 0x3f
 803507a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803507e:	e003      	b.n	8035088 <HAL_UART_Receive+0xe8>
 8035080:	68fb      	ldr	r3, [r7, #12]
 8035082:	2200      	movs	r2, #0
 8035084:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8035088:	68fb      	ldr	r3, [r7, #12]
 803508a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803508e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8035090:	68fb      	ldr	r3, [r7, #12]
 8035092:	689b      	ldr	r3, [r3, #8]
 8035094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035098:	d108      	bne.n	80350ac <HAL_UART_Receive+0x10c>
 803509a:	68fb      	ldr	r3, [r7, #12]
 803509c:	691b      	ldr	r3, [r3, #16]
 803509e:	2b00      	cmp	r3, #0
 80350a0:	d104      	bne.n	80350ac <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80350a2:	2300      	movs	r3, #0
 80350a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80350a6:	68bb      	ldr	r3, [r7, #8]
 80350a8:	61bb      	str	r3, [r7, #24]
 80350aa:	e003      	b.n	80350b4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80350ac:	68bb      	ldr	r3, [r7, #8]
 80350ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80350b0:	2300      	movs	r3, #0
 80350b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80350b4:	68fb      	ldr	r3, [r7, #12]
 80350b6:	2200      	movs	r2, #0
 80350b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80350bc:	e032      	b.n	8035124 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80350be:	683b      	ldr	r3, [r7, #0]
 80350c0:	9300      	str	r3, [sp, #0]
 80350c2:	697b      	ldr	r3, [r7, #20]
 80350c4:	2200      	movs	r2, #0
 80350c6:	2120      	movs	r1, #32
 80350c8:	68f8      	ldr	r0, [r7, #12]
 80350ca:	f001 fb44 	bl	8036756 <UART_WaitOnFlagUntilTimeout>
 80350ce:	4603      	mov	r3, r0
 80350d0:	2b00      	cmp	r3, #0
 80350d2:	d001      	beq.n	80350d8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80350d4:	2303      	movs	r3, #3
 80350d6:	e032      	b.n	803513e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80350d8:	69fb      	ldr	r3, [r7, #28]
 80350da:	2b00      	cmp	r3, #0
 80350dc:	d10c      	bne.n	80350f8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80350de:	68fb      	ldr	r3, [r7, #12]
 80350e0:	681b      	ldr	r3, [r3, #0]
 80350e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80350e4:	b29a      	uxth	r2, r3
 80350e6:	8a7b      	ldrh	r3, [r7, #18]
 80350e8:	4013      	ands	r3, r2
 80350ea:	b29a      	uxth	r2, r3
 80350ec:	69bb      	ldr	r3, [r7, #24]
 80350ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80350f0:	69bb      	ldr	r3, [r7, #24]
 80350f2:	3302      	adds	r3, #2
 80350f4:	61bb      	str	r3, [r7, #24]
 80350f6:	e00c      	b.n	8035112 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80350f8:	68fb      	ldr	r3, [r7, #12]
 80350fa:	681b      	ldr	r3, [r3, #0]
 80350fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80350fe:	b2da      	uxtb	r2, r3
 8035100:	8a7b      	ldrh	r3, [r7, #18]
 8035102:	b2db      	uxtb	r3, r3
 8035104:	4013      	ands	r3, r2
 8035106:	b2da      	uxtb	r2, r3
 8035108:	69fb      	ldr	r3, [r7, #28]
 803510a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 803510c:	69fb      	ldr	r3, [r7, #28]
 803510e:	3301      	adds	r3, #1
 8035110:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8035112:	68fb      	ldr	r3, [r7, #12]
 8035114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8035118:	b29b      	uxth	r3, r3
 803511a:	3b01      	subs	r3, #1
 803511c:	b29a      	uxth	r2, r3
 803511e:	68fb      	ldr	r3, [r7, #12]
 8035120:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8035124:	68fb      	ldr	r3, [r7, #12]
 8035126:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803512a:	b29b      	uxth	r3, r3
 803512c:	2b00      	cmp	r3, #0
 803512e:	d1c6      	bne.n	80350be <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8035130:	68fb      	ldr	r3, [r7, #12]
 8035132:	2220      	movs	r2, #32
 8035134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8035138:	2300      	movs	r3, #0
 803513a:	e000      	b.n	803513e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 803513c:	2302      	movs	r3, #2
  }
}
 803513e:	4618      	mov	r0, r3
 8035140:	3720      	adds	r7, #32
 8035142:	46bd      	mov	sp, r7
 8035144:	bd80      	pop	{r7, pc}
	...

08035148 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8035148:	b480      	push	{r7}
 803514a:	b091      	sub	sp, #68	; 0x44
 803514c:	af00      	add	r7, sp, #0
 803514e:	60f8      	str	r0, [r7, #12]
 8035150:	60b9      	str	r1, [r7, #8]
 8035152:	4613      	mov	r3, r2
 8035154:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8035156:	68fb      	ldr	r3, [r7, #12]
 8035158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803515c:	2b20      	cmp	r3, #32
 803515e:	f040 808c 	bne.w	803527a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8035162:	68bb      	ldr	r3, [r7, #8]
 8035164:	2b00      	cmp	r3, #0
 8035166:	d002      	beq.n	803516e <HAL_UART_Transmit_IT+0x26>
 8035168:	88fb      	ldrh	r3, [r7, #6]
 803516a:	2b00      	cmp	r3, #0
 803516c:	d101      	bne.n	8035172 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 803516e:	2301      	movs	r3, #1
 8035170:	e084      	b.n	803527c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8035172:	68fb      	ldr	r3, [r7, #12]
 8035174:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8035178:	2b01      	cmp	r3, #1
 803517a:	d101      	bne.n	8035180 <HAL_UART_Transmit_IT+0x38>
 803517c:	2302      	movs	r3, #2
 803517e:	e07d      	b.n	803527c <HAL_UART_Transmit_IT+0x134>
 8035180:	68fb      	ldr	r3, [r7, #12]
 8035182:	2201      	movs	r2, #1
 8035184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8035188:	68fb      	ldr	r3, [r7, #12]
 803518a:	68ba      	ldr	r2, [r7, #8]
 803518c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 803518e:	68fb      	ldr	r3, [r7, #12]
 8035190:	88fa      	ldrh	r2, [r7, #6]
 8035192:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8035196:	68fb      	ldr	r3, [r7, #12]
 8035198:	88fa      	ldrh	r2, [r7, #6]
 803519a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 803519e:	68fb      	ldr	r3, [r7, #12]
 80351a0:	2200      	movs	r2, #0
 80351a2:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80351a4:	68fb      	ldr	r3, [r7, #12]
 80351a6:	2200      	movs	r2, #0
 80351a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80351ac:	68fb      	ldr	r3, [r7, #12]
 80351ae:	2221      	movs	r2, #33	; 0x21
 80351b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80351b4:	68fb      	ldr	r3, [r7, #12]
 80351b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80351b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80351bc:	d12e      	bne.n	803521c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80351be:	68fb      	ldr	r3, [r7, #12]
 80351c0:	689b      	ldr	r3, [r3, #8]
 80351c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80351c6:	d107      	bne.n	80351d8 <HAL_UART_Transmit_IT+0x90>
 80351c8:	68fb      	ldr	r3, [r7, #12]
 80351ca:	691b      	ldr	r3, [r3, #16]
 80351cc:	2b00      	cmp	r3, #0
 80351ce:	d103      	bne.n	80351d8 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80351d0:	68fb      	ldr	r3, [r7, #12]
 80351d2:	4a2d      	ldr	r2, [pc, #180]	; (8035288 <HAL_UART_Transmit_IT+0x140>)
 80351d4:	675a      	str	r2, [r3, #116]	; 0x74
 80351d6:	e002      	b.n	80351de <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80351d8:	68fb      	ldr	r3, [r7, #12]
 80351da:	4a2c      	ldr	r2, [pc, #176]	; (803528c <HAL_UART_Transmit_IT+0x144>)
 80351dc:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80351de:	68fb      	ldr	r3, [r7, #12]
 80351e0:	2200      	movs	r2, #0
 80351e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80351e6:	68fb      	ldr	r3, [r7, #12]
 80351e8:	681b      	ldr	r3, [r3, #0]
 80351ea:	3308      	adds	r3, #8
 80351ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80351ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80351f0:	e853 3f00 	ldrex	r3, [r3]
 80351f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80351f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80351f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80351fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80351fe:	68fb      	ldr	r3, [r7, #12]
 8035200:	681b      	ldr	r3, [r3, #0]
 8035202:	3308      	adds	r3, #8
 8035204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8035206:	637a      	str	r2, [r7, #52]	; 0x34
 8035208:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803520a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 803520c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803520e:	e841 2300 	strex	r3, r2, [r1]
 8035212:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8035214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035216:	2b00      	cmp	r3, #0
 8035218:	d1e5      	bne.n	80351e6 <HAL_UART_Transmit_IT+0x9e>
 803521a:	e02c      	b.n	8035276 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 803521c:	68fb      	ldr	r3, [r7, #12]
 803521e:	689b      	ldr	r3, [r3, #8]
 8035220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035224:	d107      	bne.n	8035236 <HAL_UART_Transmit_IT+0xee>
 8035226:	68fb      	ldr	r3, [r7, #12]
 8035228:	691b      	ldr	r3, [r3, #16]
 803522a:	2b00      	cmp	r3, #0
 803522c:	d103      	bne.n	8035236 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 803522e:	68fb      	ldr	r3, [r7, #12]
 8035230:	4a17      	ldr	r2, [pc, #92]	; (8035290 <HAL_UART_Transmit_IT+0x148>)
 8035232:	675a      	str	r2, [r3, #116]	; 0x74
 8035234:	e002      	b.n	803523c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8035236:	68fb      	ldr	r3, [r7, #12]
 8035238:	4a16      	ldr	r2, [pc, #88]	; (8035294 <HAL_UART_Transmit_IT+0x14c>)
 803523a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 803523c:	68fb      	ldr	r3, [r7, #12]
 803523e:	2200      	movs	r2, #0
 8035240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8035244:	68fb      	ldr	r3, [r7, #12]
 8035246:	681b      	ldr	r3, [r3, #0]
 8035248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803524a:	697b      	ldr	r3, [r7, #20]
 803524c:	e853 3f00 	ldrex	r3, [r3]
 8035250:	613b      	str	r3, [r7, #16]
   return(result);
 8035252:	693b      	ldr	r3, [r7, #16]
 8035254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8035258:	63fb      	str	r3, [r7, #60]	; 0x3c
 803525a:	68fb      	ldr	r3, [r7, #12]
 803525c:	681b      	ldr	r3, [r3, #0]
 803525e:	461a      	mov	r2, r3
 8035260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035262:	623b      	str	r3, [r7, #32]
 8035264:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035266:	69f9      	ldr	r1, [r7, #28]
 8035268:	6a3a      	ldr	r2, [r7, #32]
 803526a:	e841 2300 	strex	r3, r2, [r1]
 803526e:	61bb      	str	r3, [r7, #24]
   return(result);
 8035270:	69bb      	ldr	r3, [r7, #24]
 8035272:	2b00      	cmp	r3, #0
 8035274:	d1e6      	bne.n	8035244 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8035276:	2300      	movs	r3, #0
 8035278:	e000      	b.n	803527c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 803527a:	2302      	movs	r3, #2
  }
}
 803527c:	4618      	mov	r0, r3
 803527e:	3744      	adds	r7, #68	; 0x44
 8035280:	46bd      	mov	sp, r7
 8035282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035286:	4770      	bx	lr
 8035288:	08036e8f 	.word	0x08036e8f
 803528c:	08036daf 	.word	0x08036daf
 8035290:	08036ced 	.word	0x08036ced
 8035294:	08036c35 	.word	0x08036c35

08035298 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8035298:	b580      	push	{r7, lr}
 803529a:	b08a      	sub	sp, #40	; 0x28
 803529c:	af00      	add	r7, sp, #0
 803529e:	60f8      	str	r0, [r7, #12]
 80352a0:	60b9      	str	r1, [r7, #8]
 80352a2:	4613      	mov	r3, r2
 80352a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80352a6:	68fb      	ldr	r3, [r7, #12]
 80352a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80352ac:	2b20      	cmp	r3, #32
 80352ae:	d142      	bne.n	8035336 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80352b0:	68bb      	ldr	r3, [r7, #8]
 80352b2:	2b00      	cmp	r3, #0
 80352b4:	d002      	beq.n	80352bc <HAL_UART_Receive_IT+0x24>
 80352b6:	88fb      	ldrh	r3, [r7, #6]
 80352b8:	2b00      	cmp	r3, #0
 80352ba:	d101      	bne.n	80352c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80352bc:	2301      	movs	r3, #1
 80352be:	e03b      	b.n	8035338 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80352c0:	68fb      	ldr	r3, [r7, #12]
 80352c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80352c6:	2b01      	cmp	r3, #1
 80352c8:	d101      	bne.n	80352ce <HAL_UART_Receive_IT+0x36>
 80352ca:	2302      	movs	r3, #2
 80352cc:	e034      	b.n	8035338 <HAL_UART_Receive_IT+0xa0>
 80352ce:	68fb      	ldr	r3, [r7, #12]
 80352d0:	2201      	movs	r2, #1
 80352d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80352d6:	68fb      	ldr	r3, [r7, #12]
 80352d8:	2200      	movs	r2, #0
 80352da:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80352dc:	68fb      	ldr	r3, [r7, #12]
 80352de:	681b      	ldr	r3, [r3, #0]
 80352e0:	4a17      	ldr	r2, [pc, #92]	; (8035340 <HAL_UART_Receive_IT+0xa8>)
 80352e2:	4293      	cmp	r3, r2
 80352e4:	d01f      	beq.n	8035326 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80352e6:	68fb      	ldr	r3, [r7, #12]
 80352e8:	681b      	ldr	r3, [r3, #0]
 80352ea:	685b      	ldr	r3, [r3, #4]
 80352ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80352f0:	2b00      	cmp	r3, #0
 80352f2:	d018      	beq.n	8035326 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80352f4:	68fb      	ldr	r3, [r7, #12]
 80352f6:	681b      	ldr	r3, [r3, #0]
 80352f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80352fa:	697b      	ldr	r3, [r7, #20]
 80352fc:	e853 3f00 	ldrex	r3, [r3]
 8035300:	613b      	str	r3, [r7, #16]
   return(result);
 8035302:	693b      	ldr	r3, [r7, #16]
 8035304:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8035308:	627b      	str	r3, [r7, #36]	; 0x24
 803530a:	68fb      	ldr	r3, [r7, #12]
 803530c:	681b      	ldr	r3, [r3, #0]
 803530e:	461a      	mov	r2, r3
 8035310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035312:	623b      	str	r3, [r7, #32]
 8035314:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035316:	69f9      	ldr	r1, [r7, #28]
 8035318:	6a3a      	ldr	r2, [r7, #32]
 803531a:	e841 2300 	strex	r3, r2, [r1]
 803531e:	61bb      	str	r3, [r7, #24]
   return(result);
 8035320:	69bb      	ldr	r3, [r7, #24]
 8035322:	2b00      	cmp	r3, #0
 8035324:	d1e6      	bne.n	80352f4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8035326:	88fb      	ldrh	r3, [r7, #6]
 8035328:	461a      	mov	r2, r3
 803532a:	68b9      	ldr	r1, [r7, #8]
 803532c:	68f8      	ldr	r0, [r7, #12]
 803532e:	f001 fadb 	bl	80368e8 <UART_Start_Receive_IT>
 8035332:	4603      	mov	r3, r0
 8035334:	e000      	b.n	8035338 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8035336:	2302      	movs	r3, #2
  }
}
 8035338:	4618      	mov	r0, r3
 803533a:	3728      	adds	r7, #40	; 0x28
 803533c:	46bd      	mov	sp, r7
 803533e:	bd80      	pop	{r7, pc}
 8035340:	58000c00 	.word	0x58000c00

08035344 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8035344:	b580      	push	{r7, lr}
 8035346:	b0ba      	sub	sp, #232	; 0xe8
 8035348:	af00      	add	r7, sp, #0
 803534a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 803534c:	687b      	ldr	r3, [r7, #4]
 803534e:	681b      	ldr	r3, [r3, #0]
 8035350:	69db      	ldr	r3, [r3, #28]
 8035352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8035356:	687b      	ldr	r3, [r7, #4]
 8035358:	681b      	ldr	r3, [r3, #0]
 803535a:	681b      	ldr	r3, [r3, #0]
 803535c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8035360:	687b      	ldr	r3, [r7, #4]
 8035362:	681b      	ldr	r3, [r3, #0]
 8035364:	689b      	ldr	r3, [r3, #8]
 8035366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 803536a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 803536e:	f640 030f 	movw	r3, #2063	; 0x80f
 8035372:	4013      	ands	r3, r2
 8035374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8035378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 803537c:	2b00      	cmp	r3, #0
 803537e:	d11b      	bne.n	80353b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8035380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035384:	f003 0320 	and.w	r3, r3, #32
 8035388:	2b00      	cmp	r3, #0
 803538a:	d015      	beq.n	80353b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 803538c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035390:	f003 0320 	and.w	r3, r3, #32
 8035394:	2b00      	cmp	r3, #0
 8035396:	d105      	bne.n	80353a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8035398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803539c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80353a0:	2b00      	cmp	r3, #0
 80353a2:	d009      	beq.n	80353b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80353a4:	687b      	ldr	r3, [r7, #4]
 80353a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80353a8:	2b00      	cmp	r3, #0
 80353aa:	f000 835a 	beq.w	8035a62 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80353ae:	687b      	ldr	r3, [r7, #4]
 80353b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80353b2:	6878      	ldr	r0, [r7, #4]
 80353b4:	4798      	blx	r3
      }
      return;
 80353b6:	e354      	b.n	8035a62 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80353b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80353bc:	2b00      	cmp	r3, #0
 80353be:	f000 811f 	beq.w	8035600 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80353c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80353c6:	4b8b      	ldr	r3, [pc, #556]	; (80355f4 <HAL_UART_IRQHandler+0x2b0>)
 80353c8:	4013      	ands	r3, r2
 80353ca:	2b00      	cmp	r3, #0
 80353cc:	d106      	bne.n	80353dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80353ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80353d2:	4b89      	ldr	r3, [pc, #548]	; (80355f8 <HAL_UART_IRQHandler+0x2b4>)
 80353d4:	4013      	ands	r3, r2
 80353d6:	2b00      	cmp	r3, #0
 80353d8:	f000 8112 	beq.w	8035600 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80353dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80353e0:	f003 0301 	and.w	r3, r3, #1
 80353e4:	2b00      	cmp	r3, #0
 80353e6:	d011      	beq.n	803540c <HAL_UART_IRQHandler+0xc8>
 80353e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80353ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80353f0:	2b00      	cmp	r3, #0
 80353f2:	d00b      	beq.n	803540c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80353f4:	687b      	ldr	r3, [r7, #4]
 80353f6:	681b      	ldr	r3, [r3, #0]
 80353f8:	2201      	movs	r2, #1
 80353fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80353fc:	687b      	ldr	r3, [r7, #4]
 80353fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8035402:	f043 0201 	orr.w	r2, r3, #1
 8035406:	687b      	ldr	r3, [r7, #4]
 8035408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803540c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035410:	f003 0302 	and.w	r3, r3, #2
 8035414:	2b00      	cmp	r3, #0
 8035416:	d011      	beq.n	803543c <HAL_UART_IRQHandler+0xf8>
 8035418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803541c:	f003 0301 	and.w	r3, r3, #1
 8035420:	2b00      	cmp	r3, #0
 8035422:	d00b      	beq.n	803543c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8035424:	687b      	ldr	r3, [r7, #4]
 8035426:	681b      	ldr	r3, [r3, #0]
 8035428:	2202      	movs	r2, #2
 803542a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 803542c:	687b      	ldr	r3, [r7, #4]
 803542e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8035432:	f043 0204 	orr.w	r2, r3, #4
 8035436:	687b      	ldr	r3, [r7, #4]
 8035438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035440:	f003 0304 	and.w	r3, r3, #4
 8035444:	2b00      	cmp	r3, #0
 8035446:	d011      	beq.n	803546c <HAL_UART_IRQHandler+0x128>
 8035448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803544c:	f003 0301 	and.w	r3, r3, #1
 8035450:	2b00      	cmp	r3, #0
 8035452:	d00b      	beq.n	803546c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8035454:	687b      	ldr	r3, [r7, #4]
 8035456:	681b      	ldr	r3, [r3, #0]
 8035458:	2204      	movs	r2, #4
 803545a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 803545c:	687b      	ldr	r3, [r7, #4]
 803545e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8035462:	f043 0202 	orr.w	r2, r3, #2
 8035466:	687b      	ldr	r3, [r7, #4]
 8035468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 803546c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035470:	f003 0308 	and.w	r3, r3, #8
 8035474:	2b00      	cmp	r3, #0
 8035476:	d017      	beq.n	80354a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8035478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803547c:	f003 0320 	and.w	r3, r3, #32
 8035480:	2b00      	cmp	r3, #0
 8035482:	d105      	bne.n	8035490 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8035484:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8035488:	4b5a      	ldr	r3, [pc, #360]	; (80355f4 <HAL_UART_IRQHandler+0x2b0>)
 803548a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 803548c:	2b00      	cmp	r3, #0
 803548e:	d00b      	beq.n	80354a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8035490:	687b      	ldr	r3, [r7, #4]
 8035492:	681b      	ldr	r3, [r3, #0]
 8035494:	2208      	movs	r2, #8
 8035496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8035498:	687b      	ldr	r3, [r7, #4]
 803549a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803549e:	f043 0208 	orr.w	r2, r3, #8
 80354a2:	687b      	ldr	r3, [r7, #4]
 80354a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80354a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80354ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80354b0:	2b00      	cmp	r3, #0
 80354b2:	d012      	beq.n	80354da <HAL_UART_IRQHandler+0x196>
 80354b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80354b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80354bc:	2b00      	cmp	r3, #0
 80354be:	d00c      	beq.n	80354da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80354c0:	687b      	ldr	r3, [r7, #4]
 80354c2:	681b      	ldr	r3, [r3, #0]
 80354c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80354c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80354ca:	687b      	ldr	r3, [r7, #4]
 80354cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80354d0:	f043 0220 	orr.w	r2, r3, #32
 80354d4:	687b      	ldr	r3, [r7, #4]
 80354d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80354da:	687b      	ldr	r3, [r7, #4]
 80354dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80354e0:	2b00      	cmp	r3, #0
 80354e2:	f000 82c0 	beq.w	8035a66 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80354e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80354ea:	f003 0320 	and.w	r3, r3, #32
 80354ee:	2b00      	cmp	r3, #0
 80354f0:	d013      	beq.n	803551a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80354f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80354f6:	f003 0320 	and.w	r3, r3, #32
 80354fa:	2b00      	cmp	r3, #0
 80354fc:	d105      	bne.n	803550a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80354fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8035502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8035506:	2b00      	cmp	r3, #0
 8035508:	d007      	beq.n	803551a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 803550a:	687b      	ldr	r3, [r7, #4]
 803550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803550e:	2b00      	cmp	r3, #0
 8035510:	d003      	beq.n	803551a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8035512:	687b      	ldr	r3, [r7, #4]
 8035514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035516:	6878      	ldr	r0, [r7, #4]
 8035518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 803551a:	687b      	ldr	r3, [r7, #4]
 803551c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8035520:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8035524:	687b      	ldr	r3, [r7, #4]
 8035526:	681b      	ldr	r3, [r3, #0]
 8035528:	689b      	ldr	r3, [r3, #8]
 803552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803552e:	2b40      	cmp	r3, #64	; 0x40
 8035530:	d005      	beq.n	803553e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8035532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8035536:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 803553a:	2b00      	cmp	r3, #0
 803553c:	d04f      	beq.n	80355de <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 803553e:	6878      	ldr	r0, [r7, #4]
 8035540:	f001 fafc 	bl	8036b3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8035544:	687b      	ldr	r3, [r7, #4]
 8035546:	681b      	ldr	r3, [r3, #0]
 8035548:	689b      	ldr	r3, [r3, #8]
 803554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803554e:	2b40      	cmp	r3, #64	; 0x40
 8035550:	d141      	bne.n	80355d6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8035552:	687b      	ldr	r3, [r7, #4]
 8035554:	681b      	ldr	r3, [r3, #0]
 8035556:	3308      	adds	r3, #8
 8035558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803555c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8035560:	e853 3f00 	ldrex	r3, [r3]
 8035564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8035568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 803556c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8035570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8035574:	687b      	ldr	r3, [r7, #4]
 8035576:	681b      	ldr	r3, [r3, #0]
 8035578:	3308      	adds	r3, #8
 803557a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 803557e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8035582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 803558a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 803558e:	e841 2300 	strex	r3, r2, [r1]
 8035592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8035596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 803559a:	2b00      	cmp	r3, #0
 803559c:	d1d9      	bne.n	8035552 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 803559e:	687b      	ldr	r3, [r7, #4]
 80355a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355a2:	2b00      	cmp	r3, #0
 80355a4:	d013      	beq.n	80355ce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80355a6:	687b      	ldr	r3, [r7, #4]
 80355a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355aa:	4a14      	ldr	r2, [pc, #80]	; (80355fc <HAL_UART_IRQHandler+0x2b8>)
 80355ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80355ae:	687b      	ldr	r3, [r7, #4]
 80355b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355b2:	4618      	mov	r0, r3
 80355b4:	f7f7 f95a 	bl	802c86c <HAL_DMA_Abort_IT>
 80355b8:	4603      	mov	r3, r0
 80355ba:	2b00      	cmp	r3, #0
 80355bc:	d017      	beq.n	80355ee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80355be:	687b      	ldr	r3, [r7, #4]
 80355c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80355c4:	687a      	ldr	r2, [r7, #4]
 80355c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80355c8:	4610      	mov	r0, r2
 80355ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80355cc:	e00f      	b.n	80355ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80355ce:	6878      	ldr	r0, [r7, #4]
 80355d0:	f000 fa56 	bl	8035a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80355d4:	e00b      	b.n	80355ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80355d6:	6878      	ldr	r0, [r7, #4]
 80355d8:	f000 fa52 	bl	8035a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80355dc:	e007      	b.n	80355ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80355de:	6878      	ldr	r0, [r7, #4]
 80355e0:	f000 fa4e 	bl	8035a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80355e4:	687b      	ldr	r3, [r7, #4]
 80355e6:	2200      	movs	r2, #0
 80355e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80355ec:	e23b      	b.n	8035a66 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80355ee:	bf00      	nop
    return;
 80355f0:	e239      	b.n	8035a66 <HAL_UART_IRQHandler+0x722>
 80355f2:	bf00      	nop
 80355f4:	10000001 	.word	0x10000001
 80355f8:	04000120 	.word	0x04000120
 80355fc:	08036c09 	.word	0x08036c09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8035600:	687b      	ldr	r3, [r7, #4]
 8035602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8035604:	2b01      	cmp	r3, #1
 8035606:	f040 81ce 	bne.w	80359a6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 803560a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803560e:	f003 0310 	and.w	r3, r3, #16
 8035612:	2b00      	cmp	r3, #0
 8035614:	f000 81c7 	beq.w	80359a6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8035618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803561c:	f003 0310 	and.w	r3, r3, #16
 8035620:	2b00      	cmp	r3, #0
 8035622:	f000 81c0 	beq.w	80359a6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8035626:	687b      	ldr	r3, [r7, #4]
 8035628:	681b      	ldr	r3, [r3, #0]
 803562a:	2210      	movs	r2, #16
 803562c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 803562e:	687b      	ldr	r3, [r7, #4]
 8035630:	681b      	ldr	r3, [r3, #0]
 8035632:	689b      	ldr	r3, [r3, #8]
 8035634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035638:	2b40      	cmp	r3, #64	; 0x40
 803563a:	f040 813b 	bne.w	80358b4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 803563e:	687b      	ldr	r3, [r7, #4]
 8035640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035642:	681b      	ldr	r3, [r3, #0]
 8035644:	4a8b      	ldr	r2, [pc, #556]	; (8035874 <HAL_UART_IRQHandler+0x530>)
 8035646:	4293      	cmp	r3, r2
 8035648:	d059      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 803564a:	687b      	ldr	r3, [r7, #4]
 803564c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803564e:	681b      	ldr	r3, [r3, #0]
 8035650:	4a89      	ldr	r2, [pc, #548]	; (8035878 <HAL_UART_IRQHandler+0x534>)
 8035652:	4293      	cmp	r3, r2
 8035654:	d053      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 8035656:	687b      	ldr	r3, [r7, #4]
 8035658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803565a:	681b      	ldr	r3, [r3, #0]
 803565c:	4a87      	ldr	r2, [pc, #540]	; (803587c <HAL_UART_IRQHandler+0x538>)
 803565e:	4293      	cmp	r3, r2
 8035660:	d04d      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 8035662:	687b      	ldr	r3, [r7, #4]
 8035664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035666:	681b      	ldr	r3, [r3, #0]
 8035668:	4a85      	ldr	r2, [pc, #532]	; (8035880 <HAL_UART_IRQHandler+0x53c>)
 803566a:	4293      	cmp	r3, r2
 803566c:	d047      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 803566e:	687b      	ldr	r3, [r7, #4]
 8035670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035672:	681b      	ldr	r3, [r3, #0]
 8035674:	4a83      	ldr	r2, [pc, #524]	; (8035884 <HAL_UART_IRQHandler+0x540>)
 8035676:	4293      	cmp	r3, r2
 8035678:	d041      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 803567a:	687b      	ldr	r3, [r7, #4]
 803567c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803567e:	681b      	ldr	r3, [r3, #0]
 8035680:	4a81      	ldr	r2, [pc, #516]	; (8035888 <HAL_UART_IRQHandler+0x544>)
 8035682:	4293      	cmp	r3, r2
 8035684:	d03b      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 8035686:	687b      	ldr	r3, [r7, #4]
 8035688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803568a:	681b      	ldr	r3, [r3, #0]
 803568c:	4a7f      	ldr	r2, [pc, #508]	; (803588c <HAL_UART_IRQHandler+0x548>)
 803568e:	4293      	cmp	r3, r2
 8035690:	d035      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 8035692:	687b      	ldr	r3, [r7, #4]
 8035694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035696:	681b      	ldr	r3, [r3, #0]
 8035698:	4a7d      	ldr	r2, [pc, #500]	; (8035890 <HAL_UART_IRQHandler+0x54c>)
 803569a:	4293      	cmp	r3, r2
 803569c:	d02f      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 803569e:	687b      	ldr	r3, [r7, #4]
 80356a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356a2:	681b      	ldr	r3, [r3, #0]
 80356a4:	4a7b      	ldr	r2, [pc, #492]	; (8035894 <HAL_UART_IRQHandler+0x550>)
 80356a6:	4293      	cmp	r3, r2
 80356a8:	d029      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 80356aa:	687b      	ldr	r3, [r7, #4]
 80356ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356ae:	681b      	ldr	r3, [r3, #0]
 80356b0:	4a79      	ldr	r2, [pc, #484]	; (8035898 <HAL_UART_IRQHandler+0x554>)
 80356b2:	4293      	cmp	r3, r2
 80356b4:	d023      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 80356b6:	687b      	ldr	r3, [r7, #4]
 80356b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356ba:	681b      	ldr	r3, [r3, #0]
 80356bc:	4a77      	ldr	r2, [pc, #476]	; (803589c <HAL_UART_IRQHandler+0x558>)
 80356be:	4293      	cmp	r3, r2
 80356c0:	d01d      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 80356c2:	687b      	ldr	r3, [r7, #4]
 80356c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356c6:	681b      	ldr	r3, [r3, #0]
 80356c8:	4a75      	ldr	r2, [pc, #468]	; (80358a0 <HAL_UART_IRQHandler+0x55c>)
 80356ca:	4293      	cmp	r3, r2
 80356cc:	d017      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 80356ce:	687b      	ldr	r3, [r7, #4]
 80356d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356d2:	681b      	ldr	r3, [r3, #0]
 80356d4:	4a73      	ldr	r2, [pc, #460]	; (80358a4 <HAL_UART_IRQHandler+0x560>)
 80356d6:	4293      	cmp	r3, r2
 80356d8:	d011      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 80356da:	687b      	ldr	r3, [r7, #4]
 80356dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356de:	681b      	ldr	r3, [r3, #0]
 80356e0:	4a71      	ldr	r2, [pc, #452]	; (80358a8 <HAL_UART_IRQHandler+0x564>)
 80356e2:	4293      	cmp	r3, r2
 80356e4:	d00b      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 80356e6:	687b      	ldr	r3, [r7, #4]
 80356e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356ea:	681b      	ldr	r3, [r3, #0]
 80356ec:	4a6f      	ldr	r2, [pc, #444]	; (80358ac <HAL_UART_IRQHandler+0x568>)
 80356ee:	4293      	cmp	r3, r2
 80356f0:	d005      	beq.n	80356fe <HAL_UART_IRQHandler+0x3ba>
 80356f2:	687b      	ldr	r3, [r7, #4]
 80356f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356f6:	681b      	ldr	r3, [r3, #0]
 80356f8:	4a6d      	ldr	r2, [pc, #436]	; (80358b0 <HAL_UART_IRQHandler+0x56c>)
 80356fa:	4293      	cmp	r3, r2
 80356fc:	d105      	bne.n	803570a <HAL_UART_IRQHandler+0x3c6>
 80356fe:	687b      	ldr	r3, [r7, #4]
 8035700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035702:	681b      	ldr	r3, [r3, #0]
 8035704:	685b      	ldr	r3, [r3, #4]
 8035706:	b29b      	uxth	r3, r3
 8035708:	e004      	b.n	8035714 <HAL_UART_IRQHandler+0x3d0>
 803570a:	687b      	ldr	r3, [r7, #4]
 803570c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803570e:	681b      	ldr	r3, [r3, #0]
 8035710:	685b      	ldr	r3, [r3, #4]
 8035712:	b29b      	uxth	r3, r3
 8035714:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8035718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 803571c:	2b00      	cmp	r3, #0
 803571e:	f000 81a4 	beq.w	8035a6a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8035722:	687b      	ldr	r3, [r7, #4]
 8035724:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8035728:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 803572c:	429a      	cmp	r2, r3
 803572e:	f080 819c 	bcs.w	8035a6a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8035732:	687b      	ldr	r3, [r7, #4]
 8035734:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8035738:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 803573c:	687b      	ldr	r3, [r7, #4]
 803573e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035740:	69db      	ldr	r3, [r3, #28]
 8035742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035746:	f000 8086 	beq.w	8035856 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803574a:	687b      	ldr	r3, [r7, #4]
 803574c:	681b      	ldr	r3, [r3, #0]
 803574e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8035756:	e853 3f00 	ldrex	r3, [r3]
 803575a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 803575e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8035762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8035766:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 803576a:	687b      	ldr	r3, [r7, #4]
 803576c:	681b      	ldr	r3, [r3, #0]
 803576e:	461a      	mov	r2, r3
 8035770:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8035774:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8035778:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803577c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8035780:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8035784:	e841 2300 	strex	r3, r2, [r1]
 8035788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 803578c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8035790:	2b00      	cmp	r3, #0
 8035792:	d1da      	bne.n	803574a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8035794:	687b      	ldr	r3, [r7, #4]
 8035796:	681b      	ldr	r3, [r3, #0]
 8035798:	3308      	adds	r3, #8
 803579a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803579c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803579e:	e853 3f00 	ldrex	r3, [r3]
 80357a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80357a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80357a6:	f023 0301 	bic.w	r3, r3, #1
 80357aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80357ae:	687b      	ldr	r3, [r7, #4]
 80357b0:	681b      	ldr	r3, [r3, #0]
 80357b2:	3308      	adds	r3, #8
 80357b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80357b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80357bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80357be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80357c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80357c4:	e841 2300 	strex	r3, r2, [r1]
 80357c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80357ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80357cc:	2b00      	cmp	r3, #0
 80357ce:	d1e1      	bne.n	8035794 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80357d0:	687b      	ldr	r3, [r7, #4]
 80357d2:	681b      	ldr	r3, [r3, #0]
 80357d4:	3308      	adds	r3, #8
 80357d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80357d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80357da:	e853 3f00 	ldrex	r3, [r3]
 80357de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80357e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80357e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80357e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80357ea:	687b      	ldr	r3, [r7, #4]
 80357ec:	681b      	ldr	r3, [r3, #0]
 80357ee:	3308      	adds	r3, #8
 80357f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80357f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80357f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80357f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80357fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80357fc:	e841 2300 	strex	r3, r2, [r1]
 8035800:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8035802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8035804:	2b00      	cmp	r3, #0
 8035806:	d1e3      	bne.n	80357d0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8035808:	687b      	ldr	r3, [r7, #4]
 803580a:	2220      	movs	r2, #32
 803580c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8035810:	687b      	ldr	r3, [r7, #4]
 8035812:	2200      	movs	r2, #0
 8035814:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8035816:	687b      	ldr	r3, [r7, #4]
 8035818:	681b      	ldr	r3, [r3, #0]
 803581a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803581c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803581e:	e853 3f00 	ldrex	r3, [r3]
 8035822:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8035824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8035826:	f023 0310 	bic.w	r3, r3, #16
 803582a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 803582e:	687b      	ldr	r3, [r7, #4]
 8035830:	681b      	ldr	r3, [r3, #0]
 8035832:	461a      	mov	r2, r3
 8035834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8035838:	65bb      	str	r3, [r7, #88]	; 0x58
 803583a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803583c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 803583e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8035840:	e841 2300 	strex	r3, r2, [r1]
 8035844:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8035846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8035848:	2b00      	cmp	r3, #0
 803584a:	d1e4      	bne.n	8035816 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 803584c:	687b      	ldr	r3, [r7, #4]
 803584e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035850:	4618      	mov	r0, r3
 8035852:	f7f6 fced 	bl	802c230 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8035856:	687b      	ldr	r3, [r7, #4]
 8035858:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 803585c:	687b      	ldr	r3, [r7, #4]
 803585e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8035862:	b29b      	uxth	r3, r3
 8035864:	1ad3      	subs	r3, r2, r3
 8035866:	b29b      	uxth	r3, r3
 8035868:	4619      	mov	r1, r3
 803586a:	6878      	ldr	r0, [r7, #4]
 803586c:	f000 f912 	bl	8035a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8035870:	e0fb      	b.n	8035a6a <HAL_UART_IRQHandler+0x726>
 8035872:	bf00      	nop
 8035874:	40020010 	.word	0x40020010
 8035878:	40020028 	.word	0x40020028
 803587c:	40020040 	.word	0x40020040
 8035880:	40020058 	.word	0x40020058
 8035884:	40020070 	.word	0x40020070
 8035888:	40020088 	.word	0x40020088
 803588c:	400200a0 	.word	0x400200a0
 8035890:	400200b8 	.word	0x400200b8
 8035894:	40020410 	.word	0x40020410
 8035898:	40020428 	.word	0x40020428
 803589c:	40020440 	.word	0x40020440
 80358a0:	40020458 	.word	0x40020458
 80358a4:	40020470 	.word	0x40020470
 80358a8:	40020488 	.word	0x40020488
 80358ac:	400204a0 	.word	0x400204a0
 80358b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80358b4:	687b      	ldr	r3, [r7, #4]
 80358b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80358ba:	687b      	ldr	r3, [r7, #4]
 80358bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80358c0:	b29b      	uxth	r3, r3
 80358c2:	1ad3      	subs	r3, r2, r3
 80358c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80358c8:	687b      	ldr	r3, [r7, #4]
 80358ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80358ce:	b29b      	uxth	r3, r3
 80358d0:	2b00      	cmp	r3, #0
 80358d2:	f000 80cc 	beq.w	8035a6e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80358d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80358da:	2b00      	cmp	r3, #0
 80358dc:	f000 80c7 	beq.w	8035a6e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80358e0:	687b      	ldr	r3, [r7, #4]
 80358e2:	681b      	ldr	r3, [r3, #0]
 80358e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80358e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80358e8:	e853 3f00 	ldrex	r3, [r3]
 80358ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80358ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80358f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80358f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80358f8:	687b      	ldr	r3, [r7, #4]
 80358fa:	681b      	ldr	r3, [r3, #0]
 80358fc:	461a      	mov	r2, r3
 80358fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8035902:	647b      	str	r3, [r7, #68]	; 0x44
 8035904:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035906:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8035908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803590a:	e841 2300 	strex	r3, r2, [r1]
 803590e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8035910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035912:	2b00      	cmp	r3, #0
 8035914:	d1e4      	bne.n	80358e0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8035916:	687b      	ldr	r3, [r7, #4]
 8035918:	681b      	ldr	r3, [r3, #0]
 803591a:	3308      	adds	r3, #8
 803591c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035920:	e853 3f00 	ldrex	r3, [r3]
 8035924:	623b      	str	r3, [r7, #32]
   return(result);
 8035926:	6a3a      	ldr	r2, [r7, #32]
 8035928:	4b54      	ldr	r3, [pc, #336]	; (8035a7c <HAL_UART_IRQHandler+0x738>)
 803592a:	4013      	ands	r3, r2
 803592c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8035930:	687b      	ldr	r3, [r7, #4]
 8035932:	681b      	ldr	r3, [r3, #0]
 8035934:	3308      	adds	r3, #8
 8035936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 803593a:	633a      	str	r2, [r7, #48]	; 0x30
 803593c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803593e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8035940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8035942:	e841 2300 	strex	r3, r2, [r1]
 8035946:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8035948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803594a:	2b00      	cmp	r3, #0
 803594c:	d1e3      	bne.n	8035916 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 803594e:	687b      	ldr	r3, [r7, #4]
 8035950:	2220      	movs	r2, #32
 8035952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8035956:	687b      	ldr	r3, [r7, #4]
 8035958:	2200      	movs	r2, #0
 803595a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803595c:	687b      	ldr	r3, [r7, #4]
 803595e:	2200      	movs	r2, #0
 8035960:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8035962:	687b      	ldr	r3, [r7, #4]
 8035964:	681b      	ldr	r3, [r3, #0]
 8035966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035968:	693b      	ldr	r3, [r7, #16]
 803596a:	e853 3f00 	ldrex	r3, [r3]
 803596e:	60fb      	str	r3, [r7, #12]
   return(result);
 8035970:	68fb      	ldr	r3, [r7, #12]
 8035972:	f023 0310 	bic.w	r3, r3, #16
 8035976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 803597a:	687b      	ldr	r3, [r7, #4]
 803597c:	681b      	ldr	r3, [r3, #0]
 803597e:	461a      	mov	r2, r3
 8035980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8035984:	61fb      	str	r3, [r7, #28]
 8035986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035988:	69b9      	ldr	r1, [r7, #24]
 803598a:	69fa      	ldr	r2, [r7, #28]
 803598c:	e841 2300 	strex	r3, r2, [r1]
 8035990:	617b      	str	r3, [r7, #20]
   return(result);
 8035992:	697b      	ldr	r3, [r7, #20]
 8035994:	2b00      	cmp	r3, #0
 8035996:	d1e4      	bne.n	8035962 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8035998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 803599c:	4619      	mov	r1, r3
 803599e:	6878      	ldr	r0, [r7, #4]
 80359a0:	f000 f878 	bl	8035a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80359a4:	e063      	b.n	8035a6e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80359a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80359aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80359ae:	2b00      	cmp	r3, #0
 80359b0:	d00e      	beq.n	80359d0 <HAL_UART_IRQHandler+0x68c>
 80359b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80359b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80359ba:	2b00      	cmp	r3, #0
 80359bc:	d008      	beq.n	80359d0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80359be:	687b      	ldr	r3, [r7, #4]
 80359c0:	681b      	ldr	r3, [r3, #0]
 80359c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80359c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80359c8:	6878      	ldr	r0, [r7, #4]
 80359ca:	f001 ff5d 	bl	8037888 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80359ce:	e051      	b.n	8035a74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80359d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80359d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80359d8:	2b00      	cmp	r3, #0
 80359da:	d014      	beq.n	8035a06 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80359dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80359e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80359e4:	2b00      	cmp	r3, #0
 80359e6:	d105      	bne.n	80359f4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80359e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80359ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80359f0:	2b00      	cmp	r3, #0
 80359f2:	d008      	beq.n	8035a06 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80359f4:	687b      	ldr	r3, [r7, #4]
 80359f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80359f8:	2b00      	cmp	r3, #0
 80359fa:	d03a      	beq.n	8035a72 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80359fc:	687b      	ldr	r3, [r7, #4]
 80359fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8035a00:	6878      	ldr	r0, [r7, #4]
 8035a02:	4798      	blx	r3
    }
    return;
 8035a04:	e035      	b.n	8035a72 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8035a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035a0e:	2b00      	cmp	r3, #0
 8035a10:	d009      	beq.n	8035a26 <HAL_UART_IRQHandler+0x6e2>
 8035a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035a1a:	2b00      	cmp	r3, #0
 8035a1c:	d003      	beq.n	8035a26 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8035a1e:	6878      	ldr	r0, [r7, #4]
 8035a20:	f001 faaa 	bl	8036f78 <UART_EndTransmit_IT>
    return;
 8035a24:	e026      	b.n	8035a74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8035a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8035a2e:	2b00      	cmp	r3, #0
 8035a30:	d009      	beq.n	8035a46 <HAL_UART_IRQHandler+0x702>
 8035a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035a36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8035a3a:	2b00      	cmp	r3, #0
 8035a3c:	d003      	beq.n	8035a46 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8035a3e:	6878      	ldr	r0, [r7, #4]
 8035a40:	f001 ff36 	bl	80378b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8035a44:	e016      	b.n	8035a74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8035a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8035a4e:	2b00      	cmp	r3, #0
 8035a50:	d010      	beq.n	8035a74 <HAL_UART_IRQHandler+0x730>
 8035a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035a56:	2b00      	cmp	r3, #0
 8035a58:	da0c      	bge.n	8035a74 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8035a5a:	6878      	ldr	r0, [r7, #4]
 8035a5c:	f001 ff1e 	bl	803789c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8035a60:	e008      	b.n	8035a74 <HAL_UART_IRQHandler+0x730>
      return;
 8035a62:	bf00      	nop
 8035a64:	e006      	b.n	8035a74 <HAL_UART_IRQHandler+0x730>
    return;
 8035a66:	bf00      	nop
 8035a68:	e004      	b.n	8035a74 <HAL_UART_IRQHandler+0x730>
      return;
 8035a6a:	bf00      	nop
 8035a6c:	e002      	b.n	8035a74 <HAL_UART_IRQHandler+0x730>
      return;
 8035a6e:	bf00      	nop
 8035a70:	e000      	b.n	8035a74 <HAL_UART_IRQHandler+0x730>
    return;
 8035a72:	bf00      	nop
  }
}
 8035a74:	37e8      	adds	r7, #232	; 0xe8
 8035a76:	46bd      	mov	sp, r7
 8035a78:	bd80      	pop	{r7, pc}
 8035a7a:	bf00      	nop
 8035a7c:	effffffe 	.word	0xeffffffe

08035a80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8035a80:	b480      	push	{r7}
 8035a82:	b083      	sub	sp, #12
 8035a84:	af00      	add	r7, sp, #0
 8035a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8035a88:	bf00      	nop
 8035a8a:	370c      	adds	r7, #12
 8035a8c:	46bd      	mov	sp, r7
 8035a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035a92:	4770      	bx	lr

08035a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8035a94:	b480      	push	{r7}
 8035a96:	b083      	sub	sp, #12
 8035a98:	af00      	add	r7, sp, #0
 8035a9a:	6078      	str	r0, [r7, #4]
 8035a9c:	460b      	mov	r3, r1
 8035a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8035aa0:	bf00      	nop
 8035aa2:	370c      	adds	r7, #12
 8035aa4:	46bd      	mov	sp, r7
 8035aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035aaa:	4770      	bx	lr

08035aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8035aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8035ab0:	b092      	sub	sp, #72	; 0x48
 8035ab2:	af00      	add	r7, sp, #0
 8035ab4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8035ab6:	2300      	movs	r3, #0
 8035ab8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8035abc:	697b      	ldr	r3, [r7, #20]
 8035abe:	689a      	ldr	r2, [r3, #8]
 8035ac0:	697b      	ldr	r3, [r7, #20]
 8035ac2:	691b      	ldr	r3, [r3, #16]
 8035ac4:	431a      	orrs	r2, r3
 8035ac6:	697b      	ldr	r3, [r7, #20]
 8035ac8:	695b      	ldr	r3, [r3, #20]
 8035aca:	431a      	orrs	r2, r3
 8035acc:	697b      	ldr	r3, [r7, #20]
 8035ace:	69db      	ldr	r3, [r3, #28]
 8035ad0:	4313      	orrs	r3, r2
 8035ad2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8035ad4:	697b      	ldr	r3, [r7, #20]
 8035ad6:	681b      	ldr	r3, [r3, #0]
 8035ad8:	681a      	ldr	r2, [r3, #0]
 8035ada:	4bbe      	ldr	r3, [pc, #760]	; (8035dd4 <UART_SetConfig+0x328>)
 8035adc:	4013      	ands	r3, r2
 8035ade:	697a      	ldr	r2, [r7, #20]
 8035ae0:	6812      	ldr	r2, [r2, #0]
 8035ae2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8035ae4:	430b      	orrs	r3, r1
 8035ae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8035ae8:	697b      	ldr	r3, [r7, #20]
 8035aea:	681b      	ldr	r3, [r3, #0]
 8035aec:	685b      	ldr	r3, [r3, #4]
 8035aee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8035af2:	697b      	ldr	r3, [r7, #20]
 8035af4:	68da      	ldr	r2, [r3, #12]
 8035af6:	697b      	ldr	r3, [r7, #20]
 8035af8:	681b      	ldr	r3, [r3, #0]
 8035afa:	430a      	orrs	r2, r1
 8035afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8035afe:	697b      	ldr	r3, [r7, #20]
 8035b00:	699b      	ldr	r3, [r3, #24]
 8035b02:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8035b04:	697b      	ldr	r3, [r7, #20]
 8035b06:	681b      	ldr	r3, [r3, #0]
 8035b08:	4ab3      	ldr	r2, [pc, #716]	; (8035dd8 <UART_SetConfig+0x32c>)
 8035b0a:	4293      	cmp	r3, r2
 8035b0c:	d004      	beq.n	8035b18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8035b0e:	697b      	ldr	r3, [r7, #20]
 8035b10:	6a1b      	ldr	r3, [r3, #32]
 8035b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8035b14:	4313      	orrs	r3, r2
 8035b16:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8035b18:	697b      	ldr	r3, [r7, #20]
 8035b1a:	681b      	ldr	r3, [r3, #0]
 8035b1c:	689a      	ldr	r2, [r3, #8]
 8035b1e:	4baf      	ldr	r3, [pc, #700]	; (8035ddc <UART_SetConfig+0x330>)
 8035b20:	4013      	ands	r3, r2
 8035b22:	697a      	ldr	r2, [r7, #20]
 8035b24:	6812      	ldr	r2, [r2, #0]
 8035b26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8035b28:	430b      	orrs	r3, r1
 8035b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8035b2c:	697b      	ldr	r3, [r7, #20]
 8035b2e:	681b      	ldr	r3, [r3, #0]
 8035b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035b32:	f023 010f 	bic.w	r1, r3, #15
 8035b36:	697b      	ldr	r3, [r7, #20]
 8035b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8035b3a:	697b      	ldr	r3, [r7, #20]
 8035b3c:	681b      	ldr	r3, [r3, #0]
 8035b3e:	430a      	orrs	r2, r1
 8035b40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8035b42:	697b      	ldr	r3, [r7, #20]
 8035b44:	681b      	ldr	r3, [r3, #0]
 8035b46:	4aa6      	ldr	r2, [pc, #664]	; (8035de0 <UART_SetConfig+0x334>)
 8035b48:	4293      	cmp	r3, r2
 8035b4a:	d177      	bne.n	8035c3c <UART_SetConfig+0x190>
 8035b4c:	4ba5      	ldr	r3, [pc, #660]	; (8035de4 <UART_SetConfig+0x338>)
 8035b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035b50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8035b54:	2b28      	cmp	r3, #40	; 0x28
 8035b56:	d86d      	bhi.n	8035c34 <UART_SetConfig+0x188>
 8035b58:	a201      	add	r2, pc, #4	; (adr r2, 8035b60 <UART_SetConfig+0xb4>)
 8035b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035b5e:	bf00      	nop
 8035b60:	08035c05 	.word	0x08035c05
 8035b64:	08035c35 	.word	0x08035c35
 8035b68:	08035c35 	.word	0x08035c35
 8035b6c:	08035c35 	.word	0x08035c35
 8035b70:	08035c35 	.word	0x08035c35
 8035b74:	08035c35 	.word	0x08035c35
 8035b78:	08035c35 	.word	0x08035c35
 8035b7c:	08035c35 	.word	0x08035c35
 8035b80:	08035c0d 	.word	0x08035c0d
 8035b84:	08035c35 	.word	0x08035c35
 8035b88:	08035c35 	.word	0x08035c35
 8035b8c:	08035c35 	.word	0x08035c35
 8035b90:	08035c35 	.word	0x08035c35
 8035b94:	08035c35 	.word	0x08035c35
 8035b98:	08035c35 	.word	0x08035c35
 8035b9c:	08035c35 	.word	0x08035c35
 8035ba0:	08035c15 	.word	0x08035c15
 8035ba4:	08035c35 	.word	0x08035c35
 8035ba8:	08035c35 	.word	0x08035c35
 8035bac:	08035c35 	.word	0x08035c35
 8035bb0:	08035c35 	.word	0x08035c35
 8035bb4:	08035c35 	.word	0x08035c35
 8035bb8:	08035c35 	.word	0x08035c35
 8035bbc:	08035c35 	.word	0x08035c35
 8035bc0:	08035c1d 	.word	0x08035c1d
 8035bc4:	08035c35 	.word	0x08035c35
 8035bc8:	08035c35 	.word	0x08035c35
 8035bcc:	08035c35 	.word	0x08035c35
 8035bd0:	08035c35 	.word	0x08035c35
 8035bd4:	08035c35 	.word	0x08035c35
 8035bd8:	08035c35 	.word	0x08035c35
 8035bdc:	08035c35 	.word	0x08035c35
 8035be0:	08035c25 	.word	0x08035c25
 8035be4:	08035c35 	.word	0x08035c35
 8035be8:	08035c35 	.word	0x08035c35
 8035bec:	08035c35 	.word	0x08035c35
 8035bf0:	08035c35 	.word	0x08035c35
 8035bf4:	08035c35 	.word	0x08035c35
 8035bf8:	08035c35 	.word	0x08035c35
 8035bfc:	08035c35 	.word	0x08035c35
 8035c00:	08035c2d 	.word	0x08035c2d
 8035c04:	2301      	movs	r3, #1
 8035c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c0a:	e222      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035c0c:	2304      	movs	r3, #4
 8035c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c12:	e21e      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035c14:	2308      	movs	r3, #8
 8035c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c1a:	e21a      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035c1c:	2310      	movs	r3, #16
 8035c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c22:	e216      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035c24:	2320      	movs	r3, #32
 8035c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c2a:	e212      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035c2c:	2340      	movs	r3, #64	; 0x40
 8035c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c32:	e20e      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035c34:	2380      	movs	r3, #128	; 0x80
 8035c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c3a:	e20a      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035c3c:	697b      	ldr	r3, [r7, #20]
 8035c3e:	681b      	ldr	r3, [r3, #0]
 8035c40:	4a69      	ldr	r2, [pc, #420]	; (8035de8 <UART_SetConfig+0x33c>)
 8035c42:	4293      	cmp	r3, r2
 8035c44:	d130      	bne.n	8035ca8 <UART_SetConfig+0x1fc>
 8035c46:	4b67      	ldr	r3, [pc, #412]	; (8035de4 <UART_SetConfig+0x338>)
 8035c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035c4a:	f003 0307 	and.w	r3, r3, #7
 8035c4e:	2b05      	cmp	r3, #5
 8035c50:	d826      	bhi.n	8035ca0 <UART_SetConfig+0x1f4>
 8035c52:	a201      	add	r2, pc, #4	; (adr r2, 8035c58 <UART_SetConfig+0x1ac>)
 8035c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035c58:	08035c71 	.word	0x08035c71
 8035c5c:	08035c79 	.word	0x08035c79
 8035c60:	08035c81 	.word	0x08035c81
 8035c64:	08035c89 	.word	0x08035c89
 8035c68:	08035c91 	.word	0x08035c91
 8035c6c:	08035c99 	.word	0x08035c99
 8035c70:	2300      	movs	r3, #0
 8035c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c76:	e1ec      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035c78:	2304      	movs	r3, #4
 8035c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c7e:	e1e8      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035c80:	2308      	movs	r3, #8
 8035c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c86:	e1e4      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035c88:	2310      	movs	r3, #16
 8035c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c8e:	e1e0      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035c90:	2320      	movs	r3, #32
 8035c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c96:	e1dc      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035c98:	2340      	movs	r3, #64	; 0x40
 8035c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c9e:	e1d8      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035ca0:	2380      	movs	r3, #128	; 0x80
 8035ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ca6:	e1d4      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035ca8:	697b      	ldr	r3, [r7, #20]
 8035caa:	681b      	ldr	r3, [r3, #0]
 8035cac:	4a4f      	ldr	r2, [pc, #316]	; (8035dec <UART_SetConfig+0x340>)
 8035cae:	4293      	cmp	r3, r2
 8035cb0:	d130      	bne.n	8035d14 <UART_SetConfig+0x268>
 8035cb2:	4b4c      	ldr	r3, [pc, #304]	; (8035de4 <UART_SetConfig+0x338>)
 8035cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035cb6:	f003 0307 	and.w	r3, r3, #7
 8035cba:	2b05      	cmp	r3, #5
 8035cbc:	d826      	bhi.n	8035d0c <UART_SetConfig+0x260>
 8035cbe:	a201      	add	r2, pc, #4	; (adr r2, 8035cc4 <UART_SetConfig+0x218>)
 8035cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035cc4:	08035cdd 	.word	0x08035cdd
 8035cc8:	08035ce5 	.word	0x08035ce5
 8035ccc:	08035ced 	.word	0x08035ced
 8035cd0:	08035cf5 	.word	0x08035cf5
 8035cd4:	08035cfd 	.word	0x08035cfd
 8035cd8:	08035d05 	.word	0x08035d05
 8035cdc:	2300      	movs	r3, #0
 8035cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ce2:	e1b6      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035ce4:	2304      	movs	r3, #4
 8035ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cea:	e1b2      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035cec:	2308      	movs	r3, #8
 8035cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cf2:	e1ae      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035cf4:	2310      	movs	r3, #16
 8035cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cfa:	e1aa      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035cfc:	2320      	movs	r3, #32
 8035cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d02:	e1a6      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035d04:	2340      	movs	r3, #64	; 0x40
 8035d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d0a:	e1a2      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035d0c:	2380      	movs	r3, #128	; 0x80
 8035d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d12:	e19e      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035d14:	697b      	ldr	r3, [r7, #20]
 8035d16:	681b      	ldr	r3, [r3, #0]
 8035d18:	4a35      	ldr	r2, [pc, #212]	; (8035df0 <UART_SetConfig+0x344>)
 8035d1a:	4293      	cmp	r3, r2
 8035d1c:	d130      	bne.n	8035d80 <UART_SetConfig+0x2d4>
 8035d1e:	4b31      	ldr	r3, [pc, #196]	; (8035de4 <UART_SetConfig+0x338>)
 8035d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035d22:	f003 0307 	and.w	r3, r3, #7
 8035d26:	2b05      	cmp	r3, #5
 8035d28:	d826      	bhi.n	8035d78 <UART_SetConfig+0x2cc>
 8035d2a:	a201      	add	r2, pc, #4	; (adr r2, 8035d30 <UART_SetConfig+0x284>)
 8035d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035d30:	08035d49 	.word	0x08035d49
 8035d34:	08035d51 	.word	0x08035d51
 8035d38:	08035d59 	.word	0x08035d59
 8035d3c:	08035d61 	.word	0x08035d61
 8035d40:	08035d69 	.word	0x08035d69
 8035d44:	08035d71 	.word	0x08035d71
 8035d48:	2300      	movs	r3, #0
 8035d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d4e:	e180      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035d50:	2304      	movs	r3, #4
 8035d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d56:	e17c      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035d58:	2308      	movs	r3, #8
 8035d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d5e:	e178      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035d60:	2310      	movs	r3, #16
 8035d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d66:	e174      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035d68:	2320      	movs	r3, #32
 8035d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d6e:	e170      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035d70:	2340      	movs	r3, #64	; 0x40
 8035d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d76:	e16c      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035d78:	2380      	movs	r3, #128	; 0x80
 8035d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d7e:	e168      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035d80:	697b      	ldr	r3, [r7, #20]
 8035d82:	681b      	ldr	r3, [r3, #0]
 8035d84:	4a1b      	ldr	r2, [pc, #108]	; (8035df4 <UART_SetConfig+0x348>)
 8035d86:	4293      	cmp	r3, r2
 8035d88:	d142      	bne.n	8035e10 <UART_SetConfig+0x364>
 8035d8a:	4b16      	ldr	r3, [pc, #88]	; (8035de4 <UART_SetConfig+0x338>)
 8035d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035d8e:	f003 0307 	and.w	r3, r3, #7
 8035d92:	2b05      	cmp	r3, #5
 8035d94:	d838      	bhi.n	8035e08 <UART_SetConfig+0x35c>
 8035d96:	a201      	add	r2, pc, #4	; (adr r2, 8035d9c <UART_SetConfig+0x2f0>)
 8035d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035d9c:	08035db5 	.word	0x08035db5
 8035da0:	08035dbd 	.word	0x08035dbd
 8035da4:	08035dc5 	.word	0x08035dc5
 8035da8:	08035dcd 	.word	0x08035dcd
 8035dac:	08035df9 	.word	0x08035df9
 8035db0:	08035e01 	.word	0x08035e01
 8035db4:	2300      	movs	r3, #0
 8035db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dba:	e14a      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035dbc:	2304      	movs	r3, #4
 8035dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dc2:	e146      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035dc4:	2308      	movs	r3, #8
 8035dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dca:	e142      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035dcc:	2310      	movs	r3, #16
 8035dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dd2:	e13e      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035dd4:	cfff69f3 	.word	0xcfff69f3
 8035dd8:	58000c00 	.word	0x58000c00
 8035ddc:	11fff4ff 	.word	0x11fff4ff
 8035de0:	40011000 	.word	0x40011000
 8035de4:	58024400 	.word	0x58024400
 8035de8:	40004400 	.word	0x40004400
 8035dec:	40004800 	.word	0x40004800
 8035df0:	40004c00 	.word	0x40004c00
 8035df4:	40005000 	.word	0x40005000
 8035df8:	2320      	movs	r3, #32
 8035dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dfe:	e128      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035e00:	2340      	movs	r3, #64	; 0x40
 8035e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e06:	e124      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035e08:	2380      	movs	r3, #128	; 0x80
 8035e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e0e:	e120      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035e10:	697b      	ldr	r3, [r7, #20]
 8035e12:	681b      	ldr	r3, [r3, #0]
 8035e14:	4acb      	ldr	r2, [pc, #812]	; (8036144 <UART_SetConfig+0x698>)
 8035e16:	4293      	cmp	r3, r2
 8035e18:	d176      	bne.n	8035f08 <UART_SetConfig+0x45c>
 8035e1a:	4bcb      	ldr	r3, [pc, #812]	; (8036148 <UART_SetConfig+0x69c>)
 8035e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8035e22:	2b28      	cmp	r3, #40	; 0x28
 8035e24:	d86c      	bhi.n	8035f00 <UART_SetConfig+0x454>
 8035e26:	a201      	add	r2, pc, #4	; (adr r2, 8035e2c <UART_SetConfig+0x380>)
 8035e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035e2c:	08035ed1 	.word	0x08035ed1
 8035e30:	08035f01 	.word	0x08035f01
 8035e34:	08035f01 	.word	0x08035f01
 8035e38:	08035f01 	.word	0x08035f01
 8035e3c:	08035f01 	.word	0x08035f01
 8035e40:	08035f01 	.word	0x08035f01
 8035e44:	08035f01 	.word	0x08035f01
 8035e48:	08035f01 	.word	0x08035f01
 8035e4c:	08035ed9 	.word	0x08035ed9
 8035e50:	08035f01 	.word	0x08035f01
 8035e54:	08035f01 	.word	0x08035f01
 8035e58:	08035f01 	.word	0x08035f01
 8035e5c:	08035f01 	.word	0x08035f01
 8035e60:	08035f01 	.word	0x08035f01
 8035e64:	08035f01 	.word	0x08035f01
 8035e68:	08035f01 	.word	0x08035f01
 8035e6c:	08035ee1 	.word	0x08035ee1
 8035e70:	08035f01 	.word	0x08035f01
 8035e74:	08035f01 	.word	0x08035f01
 8035e78:	08035f01 	.word	0x08035f01
 8035e7c:	08035f01 	.word	0x08035f01
 8035e80:	08035f01 	.word	0x08035f01
 8035e84:	08035f01 	.word	0x08035f01
 8035e88:	08035f01 	.word	0x08035f01
 8035e8c:	08035ee9 	.word	0x08035ee9
 8035e90:	08035f01 	.word	0x08035f01
 8035e94:	08035f01 	.word	0x08035f01
 8035e98:	08035f01 	.word	0x08035f01
 8035e9c:	08035f01 	.word	0x08035f01
 8035ea0:	08035f01 	.word	0x08035f01
 8035ea4:	08035f01 	.word	0x08035f01
 8035ea8:	08035f01 	.word	0x08035f01
 8035eac:	08035ef1 	.word	0x08035ef1
 8035eb0:	08035f01 	.word	0x08035f01
 8035eb4:	08035f01 	.word	0x08035f01
 8035eb8:	08035f01 	.word	0x08035f01
 8035ebc:	08035f01 	.word	0x08035f01
 8035ec0:	08035f01 	.word	0x08035f01
 8035ec4:	08035f01 	.word	0x08035f01
 8035ec8:	08035f01 	.word	0x08035f01
 8035ecc:	08035ef9 	.word	0x08035ef9
 8035ed0:	2301      	movs	r3, #1
 8035ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ed6:	e0bc      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035ed8:	2304      	movs	r3, #4
 8035eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ede:	e0b8      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035ee0:	2308      	movs	r3, #8
 8035ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ee6:	e0b4      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035ee8:	2310      	movs	r3, #16
 8035eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035eee:	e0b0      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035ef0:	2320      	movs	r3, #32
 8035ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ef6:	e0ac      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035ef8:	2340      	movs	r3, #64	; 0x40
 8035efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035efe:	e0a8      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035f00:	2380      	movs	r3, #128	; 0x80
 8035f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f06:	e0a4      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035f08:	697b      	ldr	r3, [r7, #20]
 8035f0a:	681b      	ldr	r3, [r3, #0]
 8035f0c:	4a8f      	ldr	r2, [pc, #572]	; (803614c <UART_SetConfig+0x6a0>)
 8035f0e:	4293      	cmp	r3, r2
 8035f10:	d130      	bne.n	8035f74 <UART_SetConfig+0x4c8>
 8035f12:	4b8d      	ldr	r3, [pc, #564]	; (8036148 <UART_SetConfig+0x69c>)
 8035f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035f16:	f003 0307 	and.w	r3, r3, #7
 8035f1a:	2b05      	cmp	r3, #5
 8035f1c:	d826      	bhi.n	8035f6c <UART_SetConfig+0x4c0>
 8035f1e:	a201      	add	r2, pc, #4	; (adr r2, 8035f24 <UART_SetConfig+0x478>)
 8035f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035f24:	08035f3d 	.word	0x08035f3d
 8035f28:	08035f45 	.word	0x08035f45
 8035f2c:	08035f4d 	.word	0x08035f4d
 8035f30:	08035f55 	.word	0x08035f55
 8035f34:	08035f5d 	.word	0x08035f5d
 8035f38:	08035f65 	.word	0x08035f65
 8035f3c:	2300      	movs	r3, #0
 8035f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f42:	e086      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035f44:	2304      	movs	r3, #4
 8035f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f4a:	e082      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035f4c:	2308      	movs	r3, #8
 8035f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f52:	e07e      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035f54:	2310      	movs	r3, #16
 8035f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f5a:	e07a      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035f5c:	2320      	movs	r3, #32
 8035f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f62:	e076      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035f64:	2340      	movs	r3, #64	; 0x40
 8035f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f6a:	e072      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035f6c:	2380      	movs	r3, #128	; 0x80
 8035f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f72:	e06e      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035f74:	697b      	ldr	r3, [r7, #20]
 8035f76:	681b      	ldr	r3, [r3, #0]
 8035f78:	4a75      	ldr	r2, [pc, #468]	; (8036150 <UART_SetConfig+0x6a4>)
 8035f7a:	4293      	cmp	r3, r2
 8035f7c:	d130      	bne.n	8035fe0 <UART_SetConfig+0x534>
 8035f7e:	4b72      	ldr	r3, [pc, #456]	; (8036148 <UART_SetConfig+0x69c>)
 8035f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035f82:	f003 0307 	and.w	r3, r3, #7
 8035f86:	2b05      	cmp	r3, #5
 8035f88:	d826      	bhi.n	8035fd8 <UART_SetConfig+0x52c>
 8035f8a:	a201      	add	r2, pc, #4	; (adr r2, 8035f90 <UART_SetConfig+0x4e4>)
 8035f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035f90:	08035fa9 	.word	0x08035fa9
 8035f94:	08035fb1 	.word	0x08035fb1
 8035f98:	08035fb9 	.word	0x08035fb9
 8035f9c:	08035fc1 	.word	0x08035fc1
 8035fa0:	08035fc9 	.word	0x08035fc9
 8035fa4:	08035fd1 	.word	0x08035fd1
 8035fa8:	2300      	movs	r3, #0
 8035faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fae:	e050      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035fb0:	2304      	movs	r3, #4
 8035fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fb6:	e04c      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035fb8:	2308      	movs	r3, #8
 8035fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fbe:	e048      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035fc0:	2310      	movs	r3, #16
 8035fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fc6:	e044      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035fc8:	2320      	movs	r3, #32
 8035fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fce:	e040      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035fd0:	2340      	movs	r3, #64	; 0x40
 8035fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fd6:	e03c      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035fd8:	2380      	movs	r3, #128	; 0x80
 8035fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fde:	e038      	b.n	8036052 <UART_SetConfig+0x5a6>
 8035fe0:	697b      	ldr	r3, [r7, #20]
 8035fe2:	681b      	ldr	r3, [r3, #0]
 8035fe4:	4a5b      	ldr	r2, [pc, #364]	; (8036154 <UART_SetConfig+0x6a8>)
 8035fe6:	4293      	cmp	r3, r2
 8035fe8:	d130      	bne.n	803604c <UART_SetConfig+0x5a0>
 8035fea:	4b57      	ldr	r3, [pc, #348]	; (8036148 <UART_SetConfig+0x69c>)
 8035fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035fee:	f003 0307 	and.w	r3, r3, #7
 8035ff2:	2b05      	cmp	r3, #5
 8035ff4:	d826      	bhi.n	8036044 <UART_SetConfig+0x598>
 8035ff6:	a201      	add	r2, pc, #4	; (adr r2, 8035ffc <UART_SetConfig+0x550>)
 8035ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035ffc:	08036015 	.word	0x08036015
 8036000:	0803601d 	.word	0x0803601d
 8036004:	08036025 	.word	0x08036025
 8036008:	0803602d 	.word	0x0803602d
 803600c:	08036035 	.word	0x08036035
 8036010:	0803603d 	.word	0x0803603d
 8036014:	2302      	movs	r3, #2
 8036016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803601a:	e01a      	b.n	8036052 <UART_SetConfig+0x5a6>
 803601c:	2304      	movs	r3, #4
 803601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8036022:	e016      	b.n	8036052 <UART_SetConfig+0x5a6>
 8036024:	2308      	movs	r3, #8
 8036026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803602a:	e012      	b.n	8036052 <UART_SetConfig+0x5a6>
 803602c:	2310      	movs	r3, #16
 803602e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8036032:	e00e      	b.n	8036052 <UART_SetConfig+0x5a6>
 8036034:	2320      	movs	r3, #32
 8036036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803603a:	e00a      	b.n	8036052 <UART_SetConfig+0x5a6>
 803603c:	2340      	movs	r3, #64	; 0x40
 803603e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8036042:	e006      	b.n	8036052 <UART_SetConfig+0x5a6>
 8036044:	2380      	movs	r3, #128	; 0x80
 8036046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803604a:	e002      	b.n	8036052 <UART_SetConfig+0x5a6>
 803604c:	2380      	movs	r3, #128	; 0x80
 803604e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8036052:	697b      	ldr	r3, [r7, #20]
 8036054:	681b      	ldr	r3, [r3, #0]
 8036056:	4a3f      	ldr	r2, [pc, #252]	; (8036154 <UART_SetConfig+0x6a8>)
 8036058:	4293      	cmp	r3, r2
 803605a:	f040 80f8 	bne.w	803624e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 803605e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8036062:	2b20      	cmp	r3, #32
 8036064:	dc46      	bgt.n	80360f4 <UART_SetConfig+0x648>
 8036066:	2b02      	cmp	r3, #2
 8036068:	f2c0 8082 	blt.w	8036170 <UART_SetConfig+0x6c4>
 803606c:	3b02      	subs	r3, #2
 803606e:	2b1e      	cmp	r3, #30
 8036070:	d87e      	bhi.n	8036170 <UART_SetConfig+0x6c4>
 8036072:	a201      	add	r2, pc, #4	; (adr r2, 8036078 <UART_SetConfig+0x5cc>)
 8036074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036078:	080360fb 	.word	0x080360fb
 803607c:	08036171 	.word	0x08036171
 8036080:	08036103 	.word	0x08036103
 8036084:	08036171 	.word	0x08036171
 8036088:	08036171 	.word	0x08036171
 803608c:	08036171 	.word	0x08036171
 8036090:	08036113 	.word	0x08036113
 8036094:	08036171 	.word	0x08036171
 8036098:	08036171 	.word	0x08036171
 803609c:	08036171 	.word	0x08036171
 80360a0:	08036171 	.word	0x08036171
 80360a4:	08036171 	.word	0x08036171
 80360a8:	08036171 	.word	0x08036171
 80360ac:	08036171 	.word	0x08036171
 80360b0:	08036123 	.word	0x08036123
 80360b4:	08036171 	.word	0x08036171
 80360b8:	08036171 	.word	0x08036171
 80360bc:	08036171 	.word	0x08036171
 80360c0:	08036171 	.word	0x08036171
 80360c4:	08036171 	.word	0x08036171
 80360c8:	08036171 	.word	0x08036171
 80360cc:	08036171 	.word	0x08036171
 80360d0:	08036171 	.word	0x08036171
 80360d4:	08036171 	.word	0x08036171
 80360d8:	08036171 	.word	0x08036171
 80360dc:	08036171 	.word	0x08036171
 80360e0:	08036171 	.word	0x08036171
 80360e4:	08036171 	.word	0x08036171
 80360e8:	08036171 	.word	0x08036171
 80360ec:	08036171 	.word	0x08036171
 80360f0:	08036163 	.word	0x08036163
 80360f4:	2b40      	cmp	r3, #64	; 0x40
 80360f6:	d037      	beq.n	8036168 <UART_SetConfig+0x6bc>
 80360f8:	e03a      	b.n	8036170 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80360fa:	f7fc fcbf 	bl	8032a7c <HAL_RCCEx_GetD3PCLK1Freq>
 80360fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8036100:	e03c      	b.n	803617c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8036102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8036106:	4618      	mov	r0, r3
 8036108:	f7fc fcce 	bl	8032aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 803610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803610e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036110:	e034      	b.n	803617c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8036112:	f107 0318 	add.w	r3, r7, #24
 8036116:	4618      	mov	r0, r3
 8036118:	f7fc fe1a 	bl	8032d50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 803611c:	69fb      	ldr	r3, [r7, #28]
 803611e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036120:	e02c      	b.n	803617c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8036122:	4b09      	ldr	r3, [pc, #36]	; (8036148 <UART_SetConfig+0x69c>)
 8036124:	681b      	ldr	r3, [r3, #0]
 8036126:	f003 0320 	and.w	r3, r3, #32
 803612a:	2b00      	cmp	r3, #0
 803612c:	d016      	beq.n	803615c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 803612e:	4b06      	ldr	r3, [pc, #24]	; (8036148 <UART_SetConfig+0x69c>)
 8036130:	681b      	ldr	r3, [r3, #0]
 8036132:	08db      	lsrs	r3, r3, #3
 8036134:	f003 0303 	and.w	r3, r3, #3
 8036138:	4a07      	ldr	r2, [pc, #28]	; (8036158 <UART_SetConfig+0x6ac>)
 803613a:	fa22 f303 	lsr.w	r3, r2, r3
 803613e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8036140:	e01c      	b.n	803617c <UART_SetConfig+0x6d0>
 8036142:	bf00      	nop
 8036144:	40011400 	.word	0x40011400
 8036148:	58024400 	.word	0x58024400
 803614c:	40007800 	.word	0x40007800
 8036150:	40007c00 	.word	0x40007c00
 8036154:	58000c00 	.word	0x58000c00
 8036158:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 803615c:	4b9d      	ldr	r3, [pc, #628]	; (80363d4 <UART_SetConfig+0x928>)
 803615e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036160:	e00c      	b.n	803617c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8036162:	4b9d      	ldr	r3, [pc, #628]	; (80363d8 <UART_SetConfig+0x92c>)
 8036164:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036166:	e009      	b.n	803617c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8036168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 803616c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803616e:	e005      	b.n	803617c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8036170:	2300      	movs	r3, #0
 8036172:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8036174:	2301      	movs	r3, #1
 8036176:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 803617a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 803617c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803617e:	2b00      	cmp	r3, #0
 8036180:	f000 81de 	beq.w	8036540 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8036184:	697b      	ldr	r3, [r7, #20]
 8036186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036188:	4a94      	ldr	r2, [pc, #592]	; (80363dc <UART_SetConfig+0x930>)
 803618a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 803618e:	461a      	mov	r2, r3
 8036190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036192:	fbb3 f3f2 	udiv	r3, r3, r2
 8036196:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8036198:	697b      	ldr	r3, [r7, #20]
 803619a:	685a      	ldr	r2, [r3, #4]
 803619c:	4613      	mov	r3, r2
 803619e:	005b      	lsls	r3, r3, #1
 80361a0:	4413      	add	r3, r2
 80361a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80361a4:	429a      	cmp	r2, r3
 80361a6:	d305      	bcc.n	80361b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80361a8:	697b      	ldr	r3, [r7, #20]
 80361aa:	685b      	ldr	r3, [r3, #4]
 80361ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80361ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80361b0:	429a      	cmp	r2, r3
 80361b2:	d903      	bls.n	80361bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80361b4:	2301      	movs	r3, #1
 80361b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80361ba:	e1c1      	b.n	8036540 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80361bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80361be:	2200      	movs	r2, #0
 80361c0:	60bb      	str	r3, [r7, #8]
 80361c2:	60fa      	str	r2, [r7, #12]
 80361c4:	697b      	ldr	r3, [r7, #20]
 80361c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80361c8:	4a84      	ldr	r2, [pc, #528]	; (80363dc <UART_SetConfig+0x930>)
 80361ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80361ce:	b29b      	uxth	r3, r3
 80361d0:	2200      	movs	r2, #0
 80361d2:	603b      	str	r3, [r7, #0]
 80361d4:	607a      	str	r2, [r7, #4]
 80361d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80361da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80361de:	f7ea f8cf 	bl	8020380 <__aeabi_uldivmod>
 80361e2:	4602      	mov	r2, r0
 80361e4:	460b      	mov	r3, r1
 80361e6:	4610      	mov	r0, r2
 80361e8:	4619      	mov	r1, r3
 80361ea:	f04f 0200 	mov.w	r2, #0
 80361ee:	f04f 0300 	mov.w	r3, #0
 80361f2:	020b      	lsls	r3, r1, #8
 80361f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80361f8:	0202      	lsls	r2, r0, #8
 80361fa:	6979      	ldr	r1, [r7, #20]
 80361fc:	6849      	ldr	r1, [r1, #4]
 80361fe:	0849      	lsrs	r1, r1, #1
 8036200:	2000      	movs	r0, #0
 8036202:	460c      	mov	r4, r1
 8036204:	4605      	mov	r5, r0
 8036206:	eb12 0804 	adds.w	r8, r2, r4
 803620a:	eb43 0905 	adc.w	r9, r3, r5
 803620e:	697b      	ldr	r3, [r7, #20]
 8036210:	685b      	ldr	r3, [r3, #4]
 8036212:	2200      	movs	r2, #0
 8036214:	469a      	mov	sl, r3
 8036216:	4693      	mov	fp, r2
 8036218:	4652      	mov	r2, sl
 803621a:	465b      	mov	r3, fp
 803621c:	4640      	mov	r0, r8
 803621e:	4649      	mov	r1, r9
 8036220:	f7ea f8ae 	bl	8020380 <__aeabi_uldivmod>
 8036224:	4602      	mov	r2, r0
 8036226:	460b      	mov	r3, r1
 8036228:	4613      	mov	r3, r2
 803622a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 803622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803622e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8036232:	d308      	bcc.n	8036246 <UART_SetConfig+0x79a>
 8036234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803623a:	d204      	bcs.n	8036246 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 803623c:	697b      	ldr	r3, [r7, #20]
 803623e:	681b      	ldr	r3, [r3, #0]
 8036240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8036242:	60da      	str	r2, [r3, #12]
 8036244:	e17c      	b.n	8036540 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8036246:	2301      	movs	r3, #1
 8036248:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 803624c:	e178      	b.n	8036540 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 803624e:	697b      	ldr	r3, [r7, #20]
 8036250:	69db      	ldr	r3, [r3, #28]
 8036252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8036256:	f040 80c5 	bne.w	80363e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 803625a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 803625e:	2b20      	cmp	r3, #32
 8036260:	dc48      	bgt.n	80362f4 <UART_SetConfig+0x848>
 8036262:	2b00      	cmp	r3, #0
 8036264:	db7b      	blt.n	803635e <UART_SetConfig+0x8b2>
 8036266:	2b20      	cmp	r3, #32
 8036268:	d879      	bhi.n	803635e <UART_SetConfig+0x8b2>
 803626a:	a201      	add	r2, pc, #4	; (adr r2, 8036270 <UART_SetConfig+0x7c4>)
 803626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036270:	080362fb 	.word	0x080362fb
 8036274:	08036303 	.word	0x08036303
 8036278:	0803635f 	.word	0x0803635f
 803627c:	0803635f 	.word	0x0803635f
 8036280:	0803630b 	.word	0x0803630b
 8036284:	0803635f 	.word	0x0803635f
 8036288:	0803635f 	.word	0x0803635f
 803628c:	0803635f 	.word	0x0803635f
 8036290:	0803631b 	.word	0x0803631b
 8036294:	0803635f 	.word	0x0803635f
 8036298:	0803635f 	.word	0x0803635f
 803629c:	0803635f 	.word	0x0803635f
 80362a0:	0803635f 	.word	0x0803635f
 80362a4:	0803635f 	.word	0x0803635f
 80362a8:	0803635f 	.word	0x0803635f
 80362ac:	0803635f 	.word	0x0803635f
 80362b0:	0803632b 	.word	0x0803632b
 80362b4:	0803635f 	.word	0x0803635f
 80362b8:	0803635f 	.word	0x0803635f
 80362bc:	0803635f 	.word	0x0803635f
 80362c0:	0803635f 	.word	0x0803635f
 80362c4:	0803635f 	.word	0x0803635f
 80362c8:	0803635f 	.word	0x0803635f
 80362cc:	0803635f 	.word	0x0803635f
 80362d0:	0803635f 	.word	0x0803635f
 80362d4:	0803635f 	.word	0x0803635f
 80362d8:	0803635f 	.word	0x0803635f
 80362dc:	0803635f 	.word	0x0803635f
 80362e0:	0803635f 	.word	0x0803635f
 80362e4:	0803635f 	.word	0x0803635f
 80362e8:	0803635f 	.word	0x0803635f
 80362ec:	0803635f 	.word	0x0803635f
 80362f0:	08036351 	.word	0x08036351
 80362f4:	2b40      	cmp	r3, #64	; 0x40
 80362f6:	d02e      	beq.n	8036356 <UART_SetConfig+0x8aa>
 80362f8:	e031      	b.n	803635e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80362fa:	f7fb fc4d 	bl	8031b98 <HAL_RCC_GetPCLK1Freq>
 80362fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8036300:	e033      	b.n	803636a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8036302:	f7fb fc5f 	bl	8031bc4 <HAL_RCC_GetPCLK2Freq>
 8036306:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8036308:	e02f      	b.n	803636a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 803630a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803630e:	4618      	mov	r0, r3
 8036310:	f7fc fbca 	bl	8032aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8036314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036318:	e027      	b.n	803636a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 803631a:	f107 0318 	add.w	r3, r7, #24
 803631e:	4618      	mov	r0, r3
 8036320:	f7fc fd16 	bl	8032d50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8036324:	69fb      	ldr	r3, [r7, #28]
 8036326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036328:	e01f      	b.n	803636a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 803632a:	4b2d      	ldr	r3, [pc, #180]	; (80363e0 <UART_SetConfig+0x934>)
 803632c:	681b      	ldr	r3, [r3, #0]
 803632e:	f003 0320 	and.w	r3, r3, #32
 8036332:	2b00      	cmp	r3, #0
 8036334:	d009      	beq.n	803634a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8036336:	4b2a      	ldr	r3, [pc, #168]	; (80363e0 <UART_SetConfig+0x934>)
 8036338:	681b      	ldr	r3, [r3, #0]
 803633a:	08db      	lsrs	r3, r3, #3
 803633c:	f003 0303 	and.w	r3, r3, #3
 8036340:	4a24      	ldr	r2, [pc, #144]	; (80363d4 <UART_SetConfig+0x928>)
 8036342:	fa22 f303 	lsr.w	r3, r2, r3
 8036346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8036348:	e00f      	b.n	803636a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 803634a:	4b22      	ldr	r3, [pc, #136]	; (80363d4 <UART_SetConfig+0x928>)
 803634c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803634e:	e00c      	b.n	803636a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8036350:	4b21      	ldr	r3, [pc, #132]	; (80363d8 <UART_SetConfig+0x92c>)
 8036352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036354:	e009      	b.n	803636a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8036356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 803635a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803635c:	e005      	b.n	803636a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 803635e:	2300      	movs	r3, #0
 8036360:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8036362:	2301      	movs	r3, #1
 8036364:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8036368:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 803636a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803636c:	2b00      	cmp	r3, #0
 803636e:	f000 80e7 	beq.w	8036540 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8036372:	697b      	ldr	r3, [r7, #20]
 8036374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036376:	4a19      	ldr	r2, [pc, #100]	; (80363dc <UART_SetConfig+0x930>)
 8036378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 803637c:	461a      	mov	r2, r3
 803637e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036380:	fbb3 f3f2 	udiv	r3, r3, r2
 8036384:	005a      	lsls	r2, r3, #1
 8036386:	697b      	ldr	r3, [r7, #20]
 8036388:	685b      	ldr	r3, [r3, #4]
 803638a:	085b      	lsrs	r3, r3, #1
 803638c:	441a      	add	r2, r3
 803638e:	697b      	ldr	r3, [r7, #20]
 8036390:	685b      	ldr	r3, [r3, #4]
 8036392:	fbb2 f3f3 	udiv	r3, r2, r3
 8036396:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8036398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803639a:	2b0f      	cmp	r3, #15
 803639c:	d916      	bls.n	80363cc <UART_SetConfig+0x920>
 803639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80363a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80363a4:	d212      	bcs.n	80363cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80363a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80363a8:	b29b      	uxth	r3, r3
 80363aa:	f023 030f 	bic.w	r3, r3, #15
 80363ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80363b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80363b2:	085b      	lsrs	r3, r3, #1
 80363b4:	b29b      	uxth	r3, r3
 80363b6:	f003 0307 	and.w	r3, r3, #7
 80363ba:	b29a      	uxth	r2, r3
 80363bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80363be:	4313      	orrs	r3, r2
 80363c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80363c2:	697b      	ldr	r3, [r7, #20]
 80363c4:	681b      	ldr	r3, [r3, #0]
 80363c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80363c8:	60da      	str	r2, [r3, #12]
 80363ca:	e0b9      	b.n	8036540 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80363cc:	2301      	movs	r3, #1
 80363ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80363d2:	e0b5      	b.n	8036540 <UART_SetConfig+0xa94>
 80363d4:	03d09000 	.word	0x03d09000
 80363d8:	003d0900 	.word	0x003d0900
 80363dc:	08058578 	.word	0x08058578
 80363e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80363e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80363e8:	2b20      	cmp	r3, #32
 80363ea:	dc49      	bgt.n	8036480 <UART_SetConfig+0x9d4>
 80363ec:	2b00      	cmp	r3, #0
 80363ee:	db7c      	blt.n	80364ea <UART_SetConfig+0xa3e>
 80363f0:	2b20      	cmp	r3, #32
 80363f2:	d87a      	bhi.n	80364ea <UART_SetConfig+0xa3e>
 80363f4:	a201      	add	r2, pc, #4	; (adr r2, 80363fc <UART_SetConfig+0x950>)
 80363f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80363fa:	bf00      	nop
 80363fc:	08036487 	.word	0x08036487
 8036400:	0803648f 	.word	0x0803648f
 8036404:	080364eb 	.word	0x080364eb
 8036408:	080364eb 	.word	0x080364eb
 803640c:	08036497 	.word	0x08036497
 8036410:	080364eb 	.word	0x080364eb
 8036414:	080364eb 	.word	0x080364eb
 8036418:	080364eb 	.word	0x080364eb
 803641c:	080364a7 	.word	0x080364a7
 8036420:	080364eb 	.word	0x080364eb
 8036424:	080364eb 	.word	0x080364eb
 8036428:	080364eb 	.word	0x080364eb
 803642c:	080364eb 	.word	0x080364eb
 8036430:	080364eb 	.word	0x080364eb
 8036434:	080364eb 	.word	0x080364eb
 8036438:	080364eb 	.word	0x080364eb
 803643c:	080364b7 	.word	0x080364b7
 8036440:	080364eb 	.word	0x080364eb
 8036444:	080364eb 	.word	0x080364eb
 8036448:	080364eb 	.word	0x080364eb
 803644c:	080364eb 	.word	0x080364eb
 8036450:	080364eb 	.word	0x080364eb
 8036454:	080364eb 	.word	0x080364eb
 8036458:	080364eb 	.word	0x080364eb
 803645c:	080364eb 	.word	0x080364eb
 8036460:	080364eb 	.word	0x080364eb
 8036464:	080364eb 	.word	0x080364eb
 8036468:	080364eb 	.word	0x080364eb
 803646c:	080364eb 	.word	0x080364eb
 8036470:	080364eb 	.word	0x080364eb
 8036474:	080364eb 	.word	0x080364eb
 8036478:	080364eb 	.word	0x080364eb
 803647c:	080364dd 	.word	0x080364dd
 8036480:	2b40      	cmp	r3, #64	; 0x40
 8036482:	d02e      	beq.n	80364e2 <UART_SetConfig+0xa36>
 8036484:	e031      	b.n	80364ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8036486:	f7fb fb87 	bl	8031b98 <HAL_RCC_GetPCLK1Freq>
 803648a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 803648c:	e033      	b.n	80364f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 803648e:	f7fb fb99 	bl	8031bc4 <HAL_RCC_GetPCLK2Freq>
 8036492:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8036494:	e02f      	b.n	80364f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8036496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803649a:	4618      	mov	r0, r3
 803649c:	f7fc fb04 	bl	8032aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80364a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80364a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80364a4:	e027      	b.n	80364f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80364a6:	f107 0318 	add.w	r3, r7, #24
 80364aa:	4618      	mov	r0, r3
 80364ac:	f7fc fc50 	bl	8032d50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80364b0:	69fb      	ldr	r3, [r7, #28]
 80364b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80364b4:	e01f      	b.n	80364f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80364b6:	4b2d      	ldr	r3, [pc, #180]	; (803656c <UART_SetConfig+0xac0>)
 80364b8:	681b      	ldr	r3, [r3, #0]
 80364ba:	f003 0320 	and.w	r3, r3, #32
 80364be:	2b00      	cmp	r3, #0
 80364c0:	d009      	beq.n	80364d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80364c2:	4b2a      	ldr	r3, [pc, #168]	; (803656c <UART_SetConfig+0xac0>)
 80364c4:	681b      	ldr	r3, [r3, #0]
 80364c6:	08db      	lsrs	r3, r3, #3
 80364c8:	f003 0303 	and.w	r3, r3, #3
 80364cc:	4a28      	ldr	r2, [pc, #160]	; (8036570 <UART_SetConfig+0xac4>)
 80364ce:	fa22 f303 	lsr.w	r3, r2, r3
 80364d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80364d4:	e00f      	b.n	80364f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80364d6:	4b26      	ldr	r3, [pc, #152]	; (8036570 <UART_SetConfig+0xac4>)
 80364d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80364da:	e00c      	b.n	80364f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80364dc:	4b25      	ldr	r3, [pc, #148]	; (8036574 <UART_SetConfig+0xac8>)
 80364de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80364e0:	e009      	b.n	80364f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80364e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80364e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80364e8:	e005      	b.n	80364f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80364ea:	2300      	movs	r3, #0
 80364ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80364ee:	2301      	movs	r3, #1
 80364f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80364f4:	bf00      	nop
    }

    if (pclk != 0U)
 80364f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80364f8:	2b00      	cmp	r3, #0
 80364fa:	d021      	beq.n	8036540 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80364fc:	697b      	ldr	r3, [r7, #20]
 80364fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036500:	4a1d      	ldr	r2, [pc, #116]	; (8036578 <UART_SetConfig+0xacc>)
 8036502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8036506:	461a      	mov	r2, r3
 8036508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803650a:	fbb3 f2f2 	udiv	r2, r3, r2
 803650e:	697b      	ldr	r3, [r7, #20]
 8036510:	685b      	ldr	r3, [r3, #4]
 8036512:	085b      	lsrs	r3, r3, #1
 8036514:	441a      	add	r2, r3
 8036516:	697b      	ldr	r3, [r7, #20]
 8036518:	685b      	ldr	r3, [r3, #4]
 803651a:	fbb2 f3f3 	udiv	r3, r2, r3
 803651e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8036520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036522:	2b0f      	cmp	r3, #15
 8036524:	d909      	bls.n	803653a <UART_SetConfig+0xa8e>
 8036526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803652c:	d205      	bcs.n	803653a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 803652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036530:	b29a      	uxth	r2, r3
 8036532:	697b      	ldr	r3, [r7, #20]
 8036534:	681b      	ldr	r3, [r3, #0]
 8036536:	60da      	str	r2, [r3, #12]
 8036538:	e002      	b.n	8036540 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 803653a:	2301      	movs	r3, #1
 803653c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8036540:	697b      	ldr	r3, [r7, #20]
 8036542:	2201      	movs	r2, #1
 8036544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8036548:	697b      	ldr	r3, [r7, #20]
 803654a:	2201      	movs	r2, #1
 803654c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8036550:	697b      	ldr	r3, [r7, #20]
 8036552:	2200      	movs	r2, #0
 8036554:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8036556:	697b      	ldr	r3, [r7, #20]
 8036558:	2200      	movs	r2, #0
 803655a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 803655c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8036560:	4618      	mov	r0, r3
 8036562:	3748      	adds	r7, #72	; 0x48
 8036564:	46bd      	mov	sp, r7
 8036566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 803656a:	bf00      	nop
 803656c:	58024400 	.word	0x58024400
 8036570:	03d09000 	.word	0x03d09000
 8036574:	003d0900 	.word	0x003d0900
 8036578:	08058578 	.word	0x08058578

0803657c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 803657c:	b480      	push	{r7}
 803657e:	b083      	sub	sp, #12
 8036580:	af00      	add	r7, sp, #0
 8036582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8036584:	687b      	ldr	r3, [r7, #4]
 8036586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036588:	f003 0301 	and.w	r3, r3, #1
 803658c:	2b00      	cmp	r3, #0
 803658e:	d00a      	beq.n	80365a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8036590:	687b      	ldr	r3, [r7, #4]
 8036592:	681b      	ldr	r3, [r3, #0]
 8036594:	685b      	ldr	r3, [r3, #4]
 8036596:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 803659a:	687b      	ldr	r3, [r7, #4]
 803659c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803659e:	687b      	ldr	r3, [r7, #4]
 80365a0:	681b      	ldr	r3, [r3, #0]
 80365a2:	430a      	orrs	r2, r1
 80365a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80365a6:	687b      	ldr	r3, [r7, #4]
 80365a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80365aa:	f003 0302 	and.w	r3, r3, #2
 80365ae:	2b00      	cmp	r3, #0
 80365b0:	d00a      	beq.n	80365c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80365b2:	687b      	ldr	r3, [r7, #4]
 80365b4:	681b      	ldr	r3, [r3, #0]
 80365b6:	685b      	ldr	r3, [r3, #4]
 80365b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80365bc:	687b      	ldr	r3, [r7, #4]
 80365be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80365c0:	687b      	ldr	r3, [r7, #4]
 80365c2:	681b      	ldr	r3, [r3, #0]
 80365c4:	430a      	orrs	r2, r1
 80365c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80365c8:	687b      	ldr	r3, [r7, #4]
 80365ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80365cc:	f003 0304 	and.w	r3, r3, #4
 80365d0:	2b00      	cmp	r3, #0
 80365d2:	d00a      	beq.n	80365ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80365d4:	687b      	ldr	r3, [r7, #4]
 80365d6:	681b      	ldr	r3, [r3, #0]
 80365d8:	685b      	ldr	r3, [r3, #4]
 80365da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80365de:	687b      	ldr	r3, [r7, #4]
 80365e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80365e2:	687b      	ldr	r3, [r7, #4]
 80365e4:	681b      	ldr	r3, [r3, #0]
 80365e6:	430a      	orrs	r2, r1
 80365e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80365ea:	687b      	ldr	r3, [r7, #4]
 80365ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80365ee:	f003 0308 	and.w	r3, r3, #8
 80365f2:	2b00      	cmp	r3, #0
 80365f4:	d00a      	beq.n	803660c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80365f6:	687b      	ldr	r3, [r7, #4]
 80365f8:	681b      	ldr	r3, [r3, #0]
 80365fa:	685b      	ldr	r3, [r3, #4]
 80365fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8036600:	687b      	ldr	r3, [r7, #4]
 8036602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8036604:	687b      	ldr	r3, [r7, #4]
 8036606:	681b      	ldr	r3, [r3, #0]
 8036608:	430a      	orrs	r2, r1
 803660a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 803660c:	687b      	ldr	r3, [r7, #4]
 803660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036610:	f003 0310 	and.w	r3, r3, #16
 8036614:	2b00      	cmp	r3, #0
 8036616:	d00a      	beq.n	803662e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8036618:	687b      	ldr	r3, [r7, #4]
 803661a:	681b      	ldr	r3, [r3, #0]
 803661c:	689b      	ldr	r3, [r3, #8]
 803661e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8036622:	687b      	ldr	r3, [r7, #4]
 8036624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8036626:	687b      	ldr	r3, [r7, #4]
 8036628:	681b      	ldr	r3, [r3, #0]
 803662a:	430a      	orrs	r2, r1
 803662c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 803662e:	687b      	ldr	r3, [r7, #4]
 8036630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036632:	f003 0320 	and.w	r3, r3, #32
 8036636:	2b00      	cmp	r3, #0
 8036638:	d00a      	beq.n	8036650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 803663a:	687b      	ldr	r3, [r7, #4]
 803663c:	681b      	ldr	r3, [r3, #0]
 803663e:	689b      	ldr	r3, [r3, #8]
 8036640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8036644:	687b      	ldr	r3, [r7, #4]
 8036646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8036648:	687b      	ldr	r3, [r7, #4]
 803664a:	681b      	ldr	r3, [r3, #0]
 803664c:	430a      	orrs	r2, r1
 803664e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8036650:	687b      	ldr	r3, [r7, #4]
 8036652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036658:	2b00      	cmp	r3, #0
 803665a:	d01a      	beq.n	8036692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 803665c:	687b      	ldr	r3, [r7, #4]
 803665e:	681b      	ldr	r3, [r3, #0]
 8036660:	685b      	ldr	r3, [r3, #4]
 8036662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8036666:	687b      	ldr	r3, [r7, #4]
 8036668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803666a:	687b      	ldr	r3, [r7, #4]
 803666c:	681b      	ldr	r3, [r3, #0]
 803666e:	430a      	orrs	r2, r1
 8036670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8036672:	687b      	ldr	r3, [r7, #4]
 8036674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8036676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803667a:	d10a      	bne.n	8036692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 803667c:	687b      	ldr	r3, [r7, #4]
 803667e:	681b      	ldr	r3, [r3, #0]
 8036680:	685b      	ldr	r3, [r3, #4]
 8036682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8036686:	687b      	ldr	r3, [r7, #4]
 8036688:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 803668a:	687b      	ldr	r3, [r7, #4]
 803668c:	681b      	ldr	r3, [r3, #0]
 803668e:	430a      	orrs	r2, r1
 8036690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8036692:	687b      	ldr	r3, [r7, #4]
 8036694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803669a:	2b00      	cmp	r3, #0
 803669c:	d00a      	beq.n	80366b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 803669e:	687b      	ldr	r3, [r7, #4]
 80366a0:	681b      	ldr	r3, [r3, #0]
 80366a2:	685b      	ldr	r3, [r3, #4]
 80366a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80366a8:	687b      	ldr	r3, [r7, #4]
 80366aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80366ac:	687b      	ldr	r3, [r7, #4]
 80366ae:	681b      	ldr	r3, [r3, #0]
 80366b0:	430a      	orrs	r2, r1
 80366b2:	605a      	str	r2, [r3, #4]
  }
}
 80366b4:	bf00      	nop
 80366b6:	370c      	adds	r7, #12
 80366b8:	46bd      	mov	sp, r7
 80366ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80366be:	4770      	bx	lr

080366c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80366c0:	b580      	push	{r7, lr}
 80366c2:	b086      	sub	sp, #24
 80366c4:	af02      	add	r7, sp, #8
 80366c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80366c8:	687b      	ldr	r3, [r7, #4]
 80366ca:	2200      	movs	r2, #0
 80366cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80366d0:	f7f4 faec 	bl	802acac <HAL_GetTick>
 80366d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80366d6:	687b      	ldr	r3, [r7, #4]
 80366d8:	681b      	ldr	r3, [r3, #0]
 80366da:	681b      	ldr	r3, [r3, #0]
 80366dc:	f003 0308 	and.w	r3, r3, #8
 80366e0:	2b08      	cmp	r3, #8
 80366e2:	d10e      	bne.n	8036702 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80366e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80366e8:	9300      	str	r3, [sp, #0]
 80366ea:	68fb      	ldr	r3, [r7, #12]
 80366ec:	2200      	movs	r2, #0
 80366ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80366f2:	6878      	ldr	r0, [r7, #4]
 80366f4:	f000 f82f 	bl	8036756 <UART_WaitOnFlagUntilTimeout>
 80366f8:	4603      	mov	r3, r0
 80366fa:	2b00      	cmp	r3, #0
 80366fc:	d001      	beq.n	8036702 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80366fe:	2303      	movs	r3, #3
 8036700:	e025      	b.n	803674e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8036702:	687b      	ldr	r3, [r7, #4]
 8036704:	681b      	ldr	r3, [r3, #0]
 8036706:	681b      	ldr	r3, [r3, #0]
 8036708:	f003 0304 	and.w	r3, r3, #4
 803670c:	2b04      	cmp	r3, #4
 803670e:	d10e      	bne.n	803672e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8036710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8036714:	9300      	str	r3, [sp, #0]
 8036716:	68fb      	ldr	r3, [r7, #12]
 8036718:	2200      	movs	r2, #0
 803671a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 803671e:	6878      	ldr	r0, [r7, #4]
 8036720:	f000 f819 	bl	8036756 <UART_WaitOnFlagUntilTimeout>
 8036724:	4603      	mov	r3, r0
 8036726:	2b00      	cmp	r3, #0
 8036728:	d001      	beq.n	803672e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 803672a:	2303      	movs	r3, #3
 803672c:	e00f      	b.n	803674e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 803672e:	687b      	ldr	r3, [r7, #4]
 8036730:	2220      	movs	r2, #32
 8036732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8036736:	687b      	ldr	r3, [r7, #4]
 8036738:	2220      	movs	r2, #32
 803673a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803673e:	687b      	ldr	r3, [r7, #4]
 8036740:	2200      	movs	r2, #0
 8036742:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8036744:	687b      	ldr	r3, [r7, #4]
 8036746:	2200      	movs	r2, #0
 8036748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803674c:	2300      	movs	r3, #0
}
 803674e:	4618      	mov	r0, r3
 8036750:	3710      	adds	r7, #16
 8036752:	46bd      	mov	sp, r7
 8036754:	bd80      	pop	{r7, pc}

08036756 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8036756:	b580      	push	{r7, lr}
 8036758:	b09c      	sub	sp, #112	; 0x70
 803675a:	af00      	add	r7, sp, #0
 803675c:	60f8      	str	r0, [r7, #12]
 803675e:	60b9      	str	r1, [r7, #8]
 8036760:	603b      	str	r3, [r7, #0]
 8036762:	4613      	mov	r3, r2
 8036764:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8036766:	e0a9      	b.n	80368bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8036768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803676a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803676e:	f000 80a5 	beq.w	80368bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8036772:	f7f4 fa9b 	bl	802acac <HAL_GetTick>
 8036776:	4602      	mov	r2, r0
 8036778:	683b      	ldr	r3, [r7, #0]
 803677a:	1ad3      	subs	r3, r2, r3
 803677c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 803677e:	429a      	cmp	r2, r3
 8036780:	d302      	bcc.n	8036788 <UART_WaitOnFlagUntilTimeout+0x32>
 8036782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036784:	2b00      	cmp	r3, #0
 8036786:	d140      	bne.n	803680a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8036788:	68fb      	ldr	r3, [r7, #12]
 803678a:	681b      	ldr	r3, [r3, #0]
 803678c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803678e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8036790:	e853 3f00 	ldrex	r3, [r3]
 8036794:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8036796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036798:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 803679c:	667b      	str	r3, [r7, #100]	; 0x64
 803679e:	68fb      	ldr	r3, [r7, #12]
 80367a0:	681b      	ldr	r3, [r3, #0]
 80367a2:	461a      	mov	r2, r3
 80367a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80367a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80367a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80367aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80367ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80367ae:	e841 2300 	strex	r3, r2, [r1]
 80367b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80367b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80367b6:	2b00      	cmp	r3, #0
 80367b8:	d1e6      	bne.n	8036788 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80367ba:	68fb      	ldr	r3, [r7, #12]
 80367bc:	681b      	ldr	r3, [r3, #0]
 80367be:	3308      	adds	r3, #8
 80367c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80367c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80367c4:	e853 3f00 	ldrex	r3, [r3]
 80367c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80367ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80367cc:	f023 0301 	bic.w	r3, r3, #1
 80367d0:	663b      	str	r3, [r7, #96]	; 0x60
 80367d2:	68fb      	ldr	r3, [r7, #12]
 80367d4:	681b      	ldr	r3, [r3, #0]
 80367d6:	3308      	adds	r3, #8
 80367d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80367da:	64ba      	str	r2, [r7, #72]	; 0x48
 80367dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80367de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80367e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80367e2:	e841 2300 	strex	r3, r2, [r1]
 80367e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80367e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80367ea:	2b00      	cmp	r3, #0
 80367ec:	d1e5      	bne.n	80367ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80367ee:	68fb      	ldr	r3, [r7, #12]
 80367f0:	2220      	movs	r2, #32
 80367f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80367f6:	68fb      	ldr	r3, [r7, #12]
 80367f8:	2220      	movs	r2, #32
 80367fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80367fe:	68fb      	ldr	r3, [r7, #12]
 8036800:	2200      	movs	r2, #0
 8036802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8036806:	2303      	movs	r3, #3
 8036808:	e069      	b.n	80368de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 803680a:	68fb      	ldr	r3, [r7, #12]
 803680c:	681b      	ldr	r3, [r3, #0]
 803680e:	681b      	ldr	r3, [r3, #0]
 8036810:	f003 0304 	and.w	r3, r3, #4
 8036814:	2b00      	cmp	r3, #0
 8036816:	d051      	beq.n	80368bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8036818:	68fb      	ldr	r3, [r7, #12]
 803681a:	681b      	ldr	r3, [r3, #0]
 803681c:	69db      	ldr	r3, [r3, #28]
 803681e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8036822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8036826:	d149      	bne.n	80368bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8036828:	68fb      	ldr	r3, [r7, #12]
 803682a:	681b      	ldr	r3, [r3, #0]
 803682c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8036830:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8036832:	68fb      	ldr	r3, [r7, #12]
 8036834:	681b      	ldr	r3, [r3, #0]
 8036836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803683a:	e853 3f00 	ldrex	r3, [r3]
 803683e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036842:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8036846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8036848:	68fb      	ldr	r3, [r7, #12]
 803684a:	681b      	ldr	r3, [r3, #0]
 803684c:	461a      	mov	r2, r3
 803684e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8036850:	637b      	str	r3, [r7, #52]	; 0x34
 8036852:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8036856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036858:	e841 2300 	strex	r3, r2, [r1]
 803685c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 803685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036860:	2b00      	cmp	r3, #0
 8036862:	d1e6      	bne.n	8036832 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036864:	68fb      	ldr	r3, [r7, #12]
 8036866:	681b      	ldr	r3, [r3, #0]
 8036868:	3308      	adds	r3, #8
 803686a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803686c:	697b      	ldr	r3, [r7, #20]
 803686e:	e853 3f00 	ldrex	r3, [r3]
 8036872:	613b      	str	r3, [r7, #16]
   return(result);
 8036874:	693b      	ldr	r3, [r7, #16]
 8036876:	f023 0301 	bic.w	r3, r3, #1
 803687a:	66bb      	str	r3, [r7, #104]	; 0x68
 803687c:	68fb      	ldr	r3, [r7, #12]
 803687e:	681b      	ldr	r3, [r3, #0]
 8036880:	3308      	adds	r3, #8
 8036882:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8036884:	623a      	str	r2, [r7, #32]
 8036886:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036888:	69f9      	ldr	r1, [r7, #28]
 803688a:	6a3a      	ldr	r2, [r7, #32]
 803688c:	e841 2300 	strex	r3, r2, [r1]
 8036890:	61bb      	str	r3, [r7, #24]
   return(result);
 8036892:	69bb      	ldr	r3, [r7, #24]
 8036894:	2b00      	cmp	r3, #0
 8036896:	d1e5      	bne.n	8036864 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8036898:	68fb      	ldr	r3, [r7, #12]
 803689a:	2220      	movs	r2, #32
 803689c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80368a0:	68fb      	ldr	r3, [r7, #12]
 80368a2:	2220      	movs	r2, #32
 80368a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80368a8:	68fb      	ldr	r3, [r7, #12]
 80368aa:	2220      	movs	r2, #32
 80368ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80368b0:	68fb      	ldr	r3, [r7, #12]
 80368b2:	2200      	movs	r2, #0
 80368b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80368b8:	2303      	movs	r3, #3
 80368ba:	e010      	b.n	80368de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80368bc:	68fb      	ldr	r3, [r7, #12]
 80368be:	681b      	ldr	r3, [r3, #0]
 80368c0:	69da      	ldr	r2, [r3, #28]
 80368c2:	68bb      	ldr	r3, [r7, #8]
 80368c4:	4013      	ands	r3, r2
 80368c6:	68ba      	ldr	r2, [r7, #8]
 80368c8:	429a      	cmp	r2, r3
 80368ca:	bf0c      	ite	eq
 80368cc:	2301      	moveq	r3, #1
 80368ce:	2300      	movne	r3, #0
 80368d0:	b2db      	uxtb	r3, r3
 80368d2:	461a      	mov	r2, r3
 80368d4:	79fb      	ldrb	r3, [r7, #7]
 80368d6:	429a      	cmp	r2, r3
 80368d8:	f43f af46 	beq.w	8036768 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80368dc:	2300      	movs	r3, #0
}
 80368de:	4618      	mov	r0, r3
 80368e0:	3770      	adds	r7, #112	; 0x70
 80368e2:	46bd      	mov	sp, r7
 80368e4:	bd80      	pop	{r7, pc}
	...

080368e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80368e8:	b480      	push	{r7}
 80368ea:	b0a3      	sub	sp, #140	; 0x8c
 80368ec:	af00      	add	r7, sp, #0
 80368ee:	60f8      	str	r0, [r7, #12]
 80368f0:	60b9      	str	r1, [r7, #8]
 80368f2:	4613      	mov	r3, r2
 80368f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80368f6:	68fb      	ldr	r3, [r7, #12]
 80368f8:	68ba      	ldr	r2, [r7, #8]
 80368fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80368fc:	68fb      	ldr	r3, [r7, #12]
 80368fe:	88fa      	ldrh	r2, [r7, #6]
 8036900:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8036904:	68fb      	ldr	r3, [r7, #12]
 8036906:	88fa      	ldrh	r2, [r7, #6]
 8036908:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 803690c:	68fb      	ldr	r3, [r7, #12]
 803690e:	2200      	movs	r2, #0
 8036910:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8036912:	68fb      	ldr	r3, [r7, #12]
 8036914:	689b      	ldr	r3, [r3, #8]
 8036916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803691a:	d10e      	bne.n	803693a <UART_Start_Receive_IT+0x52>
 803691c:	68fb      	ldr	r3, [r7, #12]
 803691e:	691b      	ldr	r3, [r3, #16]
 8036920:	2b00      	cmp	r3, #0
 8036922:	d105      	bne.n	8036930 <UART_Start_Receive_IT+0x48>
 8036924:	68fb      	ldr	r3, [r7, #12]
 8036926:	f240 12ff 	movw	r2, #511	; 0x1ff
 803692a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803692e:	e02d      	b.n	803698c <UART_Start_Receive_IT+0xa4>
 8036930:	68fb      	ldr	r3, [r7, #12]
 8036932:	22ff      	movs	r2, #255	; 0xff
 8036934:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036938:	e028      	b.n	803698c <UART_Start_Receive_IT+0xa4>
 803693a:	68fb      	ldr	r3, [r7, #12]
 803693c:	689b      	ldr	r3, [r3, #8]
 803693e:	2b00      	cmp	r3, #0
 8036940:	d10d      	bne.n	803695e <UART_Start_Receive_IT+0x76>
 8036942:	68fb      	ldr	r3, [r7, #12]
 8036944:	691b      	ldr	r3, [r3, #16]
 8036946:	2b00      	cmp	r3, #0
 8036948:	d104      	bne.n	8036954 <UART_Start_Receive_IT+0x6c>
 803694a:	68fb      	ldr	r3, [r7, #12]
 803694c:	22ff      	movs	r2, #255	; 0xff
 803694e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036952:	e01b      	b.n	803698c <UART_Start_Receive_IT+0xa4>
 8036954:	68fb      	ldr	r3, [r7, #12]
 8036956:	227f      	movs	r2, #127	; 0x7f
 8036958:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803695c:	e016      	b.n	803698c <UART_Start_Receive_IT+0xa4>
 803695e:	68fb      	ldr	r3, [r7, #12]
 8036960:	689b      	ldr	r3, [r3, #8]
 8036962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8036966:	d10d      	bne.n	8036984 <UART_Start_Receive_IT+0x9c>
 8036968:	68fb      	ldr	r3, [r7, #12]
 803696a:	691b      	ldr	r3, [r3, #16]
 803696c:	2b00      	cmp	r3, #0
 803696e:	d104      	bne.n	803697a <UART_Start_Receive_IT+0x92>
 8036970:	68fb      	ldr	r3, [r7, #12]
 8036972:	227f      	movs	r2, #127	; 0x7f
 8036974:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036978:	e008      	b.n	803698c <UART_Start_Receive_IT+0xa4>
 803697a:	68fb      	ldr	r3, [r7, #12]
 803697c:	223f      	movs	r2, #63	; 0x3f
 803697e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036982:	e003      	b.n	803698c <UART_Start_Receive_IT+0xa4>
 8036984:	68fb      	ldr	r3, [r7, #12]
 8036986:	2200      	movs	r2, #0
 8036988:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 803698c:	68fb      	ldr	r3, [r7, #12]
 803698e:	2200      	movs	r2, #0
 8036990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8036994:	68fb      	ldr	r3, [r7, #12]
 8036996:	2222      	movs	r2, #34	; 0x22
 8036998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803699c:	68fb      	ldr	r3, [r7, #12]
 803699e:	681b      	ldr	r3, [r3, #0]
 80369a0:	3308      	adds	r3, #8
 80369a2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80369a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80369a6:	e853 3f00 	ldrex	r3, [r3]
 80369aa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80369ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80369ae:	f043 0301 	orr.w	r3, r3, #1
 80369b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80369b6:	68fb      	ldr	r3, [r7, #12]
 80369b8:	681b      	ldr	r3, [r3, #0]
 80369ba:	3308      	adds	r3, #8
 80369bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80369c0:	673a      	str	r2, [r7, #112]	; 0x70
 80369c2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80369c4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80369c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80369c8:	e841 2300 	strex	r3, r2, [r1]
 80369cc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80369ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80369d0:	2b00      	cmp	r3, #0
 80369d2:	d1e3      	bne.n	803699c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80369d4:	68fb      	ldr	r3, [r7, #12]
 80369d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80369d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80369dc:	d153      	bne.n	8036a86 <UART_Start_Receive_IT+0x19e>
 80369de:	68fb      	ldr	r3, [r7, #12]
 80369e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80369e4:	88fa      	ldrh	r2, [r7, #6]
 80369e6:	429a      	cmp	r2, r3
 80369e8:	d34d      	bcc.n	8036a86 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80369ea:	68fb      	ldr	r3, [r7, #12]
 80369ec:	689b      	ldr	r3, [r3, #8]
 80369ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80369f2:	d107      	bne.n	8036a04 <UART_Start_Receive_IT+0x11c>
 80369f4:	68fb      	ldr	r3, [r7, #12]
 80369f6:	691b      	ldr	r3, [r3, #16]
 80369f8:	2b00      	cmp	r3, #0
 80369fa:	d103      	bne.n	8036a04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80369fc:	68fb      	ldr	r3, [r7, #12]
 80369fe:	4a4b      	ldr	r2, [pc, #300]	; (8036b2c <UART_Start_Receive_IT+0x244>)
 8036a00:	671a      	str	r2, [r3, #112]	; 0x70
 8036a02:	e002      	b.n	8036a0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8036a04:	68fb      	ldr	r3, [r7, #12]
 8036a06:	4a4a      	ldr	r2, [pc, #296]	; (8036b30 <UART_Start_Receive_IT+0x248>)
 8036a08:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8036a0a:	68fb      	ldr	r3, [r7, #12]
 8036a0c:	2200      	movs	r2, #0
 8036a0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8036a12:	68fb      	ldr	r3, [r7, #12]
 8036a14:	691b      	ldr	r3, [r3, #16]
 8036a16:	2b00      	cmp	r3, #0
 8036a18:	d01a      	beq.n	8036a50 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8036a1a:	68fb      	ldr	r3, [r7, #12]
 8036a1c:	681b      	ldr	r3, [r3, #0]
 8036a1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8036a22:	e853 3f00 	ldrex	r3, [r3]
 8036a26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8036a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8036a2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8036a32:	68fb      	ldr	r3, [r7, #12]
 8036a34:	681b      	ldr	r3, [r3, #0]
 8036a36:	461a      	mov	r2, r3
 8036a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8036a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8036a3e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036a40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8036a42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8036a44:	e841 2300 	strex	r3, r2, [r1]
 8036a48:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8036a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8036a4c:	2b00      	cmp	r3, #0
 8036a4e:	d1e4      	bne.n	8036a1a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8036a50:	68fb      	ldr	r3, [r7, #12]
 8036a52:	681b      	ldr	r3, [r3, #0]
 8036a54:	3308      	adds	r3, #8
 8036a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036a5a:	e853 3f00 	ldrex	r3, [r3]
 8036a5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8036a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8036a66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8036a68:	68fb      	ldr	r3, [r7, #12]
 8036a6a:	681b      	ldr	r3, [r3, #0]
 8036a6c:	3308      	adds	r3, #8
 8036a6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8036a70:	64ba      	str	r2, [r7, #72]	; 0x48
 8036a72:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036a74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8036a76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036a78:	e841 2300 	strex	r3, r2, [r1]
 8036a7c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8036a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8036a80:	2b00      	cmp	r3, #0
 8036a82:	d1e5      	bne.n	8036a50 <UART_Start_Receive_IT+0x168>
 8036a84:	e04a      	b.n	8036b1c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036a86:	68fb      	ldr	r3, [r7, #12]
 8036a88:	689b      	ldr	r3, [r3, #8]
 8036a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036a8e:	d107      	bne.n	8036aa0 <UART_Start_Receive_IT+0x1b8>
 8036a90:	68fb      	ldr	r3, [r7, #12]
 8036a92:	691b      	ldr	r3, [r3, #16]
 8036a94:	2b00      	cmp	r3, #0
 8036a96:	d103      	bne.n	8036aa0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8036a98:	68fb      	ldr	r3, [r7, #12]
 8036a9a:	4a26      	ldr	r2, [pc, #152]	; (8036b34 <UART_Start_Receive_IT+0x24c>)
 8036a9c:	671a      	str	r2, [r3, #112]	; 0x70
 8036a9e:	e002      	b.n	8036aa6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8036aa0:	68fb      	ldr	r3, [r7, #12]
 8036aa2:	4a25      	ldr	r2, [pc, #148]	; (8036b38 <UART_Start_Receive_IT+0x250>)
 8036aa4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8036aa6:	68fb      	ldr	r3, [r7, #12]
 8036aa8:	2200      	movs	r2, #0
 8036aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8036aae:	68fb      	ldr	r3, [r7, #12]
 8036ab0:	691b      	ldr	r3, [r3, #16]
 8036ab2:	2b00      	cmp	r3, #0
 8036ab4:	d019      	beq.n	8036aea <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8036ab6:	68fb      	ldr	r3, [r7, #12]
 8036ab8:	681b      	ldr	r3, [r3, #0]
 8036aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036abe:	e853 3f00 	ldrex	r3, [r3]
 8036ac2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036ac6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8036aca:	677b      	str	r3, [r7, #116]	; 0x74
 8036acc:	68fb      	ldr	r3, [r7, #12]
 8036ace:	681b      	ldr	r3, [r3, #0]
 8036ad0:	461a      	mov	r2, r3
 8036ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8036ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8036ad6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036ad8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8036ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036adc:	e841 2300 	strex	r3, r2, [r1]
 8036ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8036ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036ae4:	2b00      	cmp	r3, #0
 8036ae6:	d1e6      	bne.n	8036ab6 <UART_Start_Receive_IT+0x1ce>
 8036ae8:	e018      	b.n	8036b1c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8036aea:	68fb      	ldr	r3, [r7, #12]
 8036aec:	681b      	ldr	r3, [r3, #0]
 8036aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036af0:	697b      	ldr	r3, [r7, #20]
 8036af2:	e853 3f00 	ldrex	r3, [r3]
 8036af6:	613b      	str	r3, [r7, #16]
   return(result);
 8036af8:	693b      	ldr	r3, [r7, #16]
 8036afa:	f043 0320 	orr.w	r3, r3, #32
 8036afe:	67bb      	str	r3, [r7, #120]	; 0x78
 8036b00:	68fb      	ldr	r3, [r7, #12]
 8036b02:	681b      	ldr	r3, [r3, #0]
 8036b04:	461a      	mov	r2, r3
 8036b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036b08:	623b      	str	r3, [r7, #32]
 8036b0a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b0c:	69f9      	ldr	r1, [r7, #28]
 8036b0e:	6a3a      	ldr	r2, [r7, #32]
 8036b10:	e841 2300 	strex	r3, r2, [r1]
 8036b14:	61bb      	str	r3, [r7, #24]
   return(result);
 8036b16:	69bb      	ldr	r3, [r7, #24]
 8036b18:	2b00      	cmp	r3, #0
 8036b1a:	d1e6      	bne.n	8036aea <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8036b1c:	2300      	movs	r3, #0
}
 8036b1e:	4618      	mov	r0, r3
 8036b20:	378c      	adds	r7, #140	; 0x8c
 8036b22:	46bd      	mov	sp, r7
 8036b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036b28:	4770      	bx	lr
 8036b2a:	bf00      	nop
 8036b2c:	08037589 	.word	0x08037589
 8036b30:	08037291 	.word	0x08037291
 8036b34:	0803712f 	.word	0x0803712f
 8036b38:	08036fcf 	.word	0x08036fcf

08036b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8036b3c:	b480      	push	{r7}
 8036b3e:	b095      	sub	sp, #84	; 0x54
 8036b40:	af00      	add	r7, sp, #0
 8036b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8036b44:	687b      	ldr	r3, [r7, #4]
 8036b46:	681b      	ldr	r3, [r3, #0]
 8036b48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036b4c:	e853 3f00 	ldrex	r3, [r3]
 8036b50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8036b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8036b5a:	687b      	ldr	r3, [r7, #4]
 8036b5c:	681b      	ldr	r3, [r3, #0]
 8036b5e:	461a      	mov	r2, r3
 8036b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036b62:	643b      	str	r3, [r7, #64]	; 0x40
 8036b64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8036b68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8036b6a:	e841 2300 	strex	r3, r2, [r1]
 8036b6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8036b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b72:	2b00      	cmp	r3, #0
 8036b74:	d1e6      	bne.n	8036b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8036b76:	687b      	ldr	r3, [r7, #4]
 8036b78:	681b      	ldr	r3, [r3, #0]
 8036b7a:	3308      	adds	r3, #8
 8036b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036b7e:	6a3b      	ldr	r3, [r7, #32]
 8036b80:	e853 3f00 	ldrex	r3, [r3]
 8036b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8036b86:	69fa      	ldr	r2, [r7, #28]
 8036b88:	4b1e      	ldr	r3, [pc, #120]	; (8036c04 <UART_EndRxTransfer+0xc8>)
 8036b8a:	4013      	ands	r3, r2
 8036b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8036b8e:	687b      	ldr	r3, [r7, #4]
 8036b90:	681b      	ldr	r3, [r3, #0]
 8036b92:	3308      	adds	r3, #8
 8036b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8036b98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036b9e:	e841 2300 	strex	r3, r2, [r1]
 8036ba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036ba6:	2b00      	cmp	r3, #0
 8036ba8:	d1e5      	bne.n	8036b76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8036baa:	687b      	ldr	r3, [r7, #4]
 8036bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8036bae:	2b01      	cmp	r3, #1
 8036bb0:	d118      	bne.n	8036be4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036bb2:	687b      	ldr	r3, [r7, #4]
 8036bb4:	681b      	ldr	r3, [r3, #0]
 8036bb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036bb8:	68fb      	ldr	r3, [r7, #12]
 8036bba:	e853 3f00 	ldrex	r3, [r3]
 8036bbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8036bc0:	68bb      	ldr	r3, [r7, #8]
 8036bc2:	f023 0310 	bic.w	r3, r3, #16
 8036bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8036bc8:	687b      	ldr	r3, [r7, #4]
 8036bca:	681b      	ldr	r3, [r3, #0]
 8036bcc:	461a      	mov	r2, r3
 8036bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8036bd0:	61bb      	str	r3, [r7, #24]
 8036bd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036bd4:	6979      	ldr	r1, [r7, #20]
 8036bd6:	69ba      	ldr	r2, [r7, #24]
 8036bd8:	e841 2300 	strex	r3, r2, [r1]
 8036bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8036bde:	693b      	ldr	r3, [r7, #16]
 8036be0:	2b00      	cmp	r3, #0
 8036be2:	d1e6      	bne.n	8036bb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8036be4:	687b      	ldr	r3, [r7, #4]
 8036be6:	2220      	movs	r2, #32
 8036be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036bec:	687b      	ldr	r3, [r7, #4]
 8036bee:	2200      	movs	r2, #0
 8036bf0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8036bf2:	687b      	ldr	r3, [r7, #4]
 8036bf4:	2200      	movs	r2, #0
 8036bf6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8036bf8:	bf00      	nop
 8036bfa:	3754      	adds	r7, #84	; 0x54
 8036bfc:	46bd      	mov	sp, r7
 8036bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036c02:	4770      	bx	lr
 8036c04:	effffffe 	.word	0xeffffffe

08036c08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8036c08:	b580      	push	{r7, lr}
 8036c0a:	b084      	sub	sp, #16
 8036c0c:	af00      	add	r7, sp, #0
 8036c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8036c10:	687b      	ldr	r3, [r7, #4]
 8036c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8036c16:	68fb      	ldr	r3, [r7, #12]
 8036c18:	2200      	movs	r2, #0
 8036c1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8036c1e:	68fb      	ldr	r3, [r7, #12]
 8036c20:	2200      	movs	r2, #0
 8036c22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8036c26:	68f8      	ldr	r0, [r7, #12]
 8036c28:	f7fe ff2a 	bl	8035a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036c2c:	bf00      	nop
 8036c2e:	3710      	adds	r7, #16
 8036c30:	46bd      	mov	sp, r7
 8036c32:	bd80      	pop	{r7, pc}

08036c34 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8036c34:	b480      	push	{r7}
 8036c36:	b08f      	sub	sp, #60	; 0x3c
 8036c38:	af00      	add	r7, sp, #0
 8036c3a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036c3c:	687b      	ldr	r3, [r7, #4]
 8036c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036c42:	2b21      	cmp	r3, #33	; 0x21
 8036c44:	d14c      	bne.n	8036ce0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8036c46:	687b      	ldr	r3, [r7, #4]
 8036c48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036c4c:	b29b      	uxth	r3, r3
 8036c4e:	2b00      	cmp	r3, #0
 8036c50:	d132      	bne.n	8036cb8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8036c52:	687b      	ldr	r3, [r7, #4]
 8036c54:	681b      	ldr	r3, [r3, #0]
 8036c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c58:	6a3b      	ldr	r3, [r7, #32]
 8036c5a:	e853 3f00 	ldrex	r3, [r3]
 8036c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8036c60:	69fb      	ldr	r3, [r7, #28]
 8036c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8036c66:	637b      	str	r3, [r7, #52]	; 0x34
 8036c68:	687b      	ldr	r3, [r7, #4]
 8036c6a:	681b      	ldr	r3, [r3, #0]
 8036c6c:	461a      	mov	r2, r3
 8036c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8036c72:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036c78:	e841 2300 	strex	r3, r2, [r1]
 8036c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036c80:	2b00      	cmp	r3, #0
 8036c82:	d1e6      	bne.n	8036c52 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036c84:	687b      	ldr	r3, [r7, #4]
 8036c86:	681b      	ldr	r3, [r3, #0]
 8036c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c8a:	68fb      	ldr	r3, [r7, #12]
 8036c8c:	e853 3f00 	ldrex	r3, [r3]
 8036c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8036c92:	68bb      	ldr	r3, [r7, #8]
 8036c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036c98:	633b      	str	r3, [r7, #48]	; 0x30
 8036c9a:	687b      	ldr	r3, [r7, #4]
 8036c9c:	681b      	ldr	r3, [r3, #0]
 8036c9e:	461a      	mov	r2, r3
 8036ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036ca2:	61bb      	str	r3, [r7, #24]
 8036ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036ca6:	6979      	ldr	r1, [r7, #20]
 8036ca8:	69ba      	ldr	r2, [r7, #24]
 8036caa:	e841 2300 	strex	r3, r2, [r1]
 8036cae:	613b      	str	r3, [r7, #16]
   return(result);
 8036cb0:	693b      	ldr	r3, [r7, #16]
 8036cb2:	2b00      	cmp	r3, #0
 8036cb4:	d1e6      	bne.n	8036c84 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8036cb6:	e013      	b.n	8036ce0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8036cb8:	687b      	ldr	r3, [r7, #4]
 8036cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036cbc:	781a      	ldrb	r2, [r3, #0]
 8036cbe:	687b      	ldr	r3, [r7, #4]
 8036cc0:	681b      	ldr	r3, [r3, #0]
 8036cc2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8036cc4:	687b      	ldr	r3, [r7, #4]
 8036cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036cc8:	1c5a      	adds	r2, r3, #1
 8036cca:	687b      	ldr	r3, [r7, #4]
 8036ccc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8036cce:	687b      	ldr	r3, [r7, #4]
 8036cd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036cd4:	b29b      	uxth	r3, r3
 8036cd6:	3b01      	subs	r3, #1
 8036cd8:	b29a      	uxth	r2, r3
 8036cda:	687b      	ldr	r3, [r7, #4]
 8036cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8036ce0:	bf00      	nop
 8036ce2:	373c      	adds	r7, #60	; 0x3c
 8036ce4:	46bd      	mov	sp, r7
 8036ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036cea:	4770      	bx	lr

08036cec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8036cec:	b480      	push	{r7}
 8036cee:	b091      	sub	sp, #68	; 0x44
 8036cf0:	af00      	add	r7, sp, #0
 8036cf2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036cf4:	687b      	ldr	r3, [r7, #4]
 8036cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036cfa:	2b21      	cmp	r3, #33	; 0x21
 8036cfc:	d151      	bne.n	8036da2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8036cfe:	687b      	ldr	r3, [r7, #4]
 8036d00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036d04:	b29b      	uxth	r3, r3
 8036d06:	2b00      	cmp	r3, #0
 8036d08:	d132      	bne.n	8036d70 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8036d0a:	687b      	ldr	r3, [r7, #4]
 8036d0c:	681b      	ldr	r3, [r3, #0]
 8036d0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036d12:	e853 3f00 	ldrex	r3, [r3]
 8036d16:	623b      	str	r3, [r7, #32]
   return(result);
 8036d18:	6a3b      	ldr	r3, [r7, #32]
 8036d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8036d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8036d20:	687b      	ldr	r3, [r7, #4]
 8036d22:	681b      	ldr	r3, [r3, #0]
 8036d24:	461a      	mov	r2, r3
 8036d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036d28:	633b      	str	r3, [r7, #48]	; 0x30
 8036d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036d2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036d30:	e841 2300 	strex	r3, r2, [r1]
 8036d34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036d38:	2b00      	cmp	r3, #0
 8036d3a:	d1e6      	bne.n	8036d0a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036d3c:	687b      	ldr	r3, [r7, #4]
 8036d3e:	681b      	ldr	r3, [r3, #0]
 8036d40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036d42:	693b      	ldr	r3, [r7, #16]
 8036d44:	e853 3f00 	ldrex	r3, [r3]
 8036d48:	60fb      	str	r3, [r7, #12]
   return(result);
 8036d4a:	68fb      	ldr	r3, [r7, #12]
 8036d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036d50:	637b      	str	r3, [r7, #52]	; 0x34
 8036d52:	687b      	ldr	r3, [r7, #4]
 8036d54:	681b      	ldr	r3, [r3, #0]
 8036d56:	461a      	mov	r2, r3
 8036d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036d5a:	61fb      	str	r3, [r7, #28]
 8036d5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036d5e:	69b9      	ldr	r1, [r7, #24]
 8036d60:	69fa      	ldr	r2, [r7, #28]
 8036d62:	e841 2300 	strex	r3, r2, [r1]
 8036d66:	617b      	str	r3, [r7, #20]
   return(result);
 8036d68:	697b      	ldr	r3, [r7, #20]
 8036d6a:	2b00      	cmp	r3, #0
 8036d6c:	d1e6      	bne.n	8036d3c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8036d6e:	e018      	b.n	8036da2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8036d70:	687b      	ldr	r3, [r7, #4]
 8036d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036d74:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8036d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036d78:	881b      	ldrh	r3, [r3, #0]
 8036d7a:	461a      	mov	r2, r3
 8036d7c:	687b      	ldr	r3, [r7, #4]
 8036d7e:	681b      	ldr	r3, [r3, #0]
 8036d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036d84:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8036d86:	687b      	ldr	r3, [r7, #4]
 8036d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036d8a:	1c9a      	adds	r2, r3, #2
 8036d8c:	687b      	ldr	r3, [r7, #4]
 8036d8e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8036d90:	687b      	ldr	r3, [r7, #4]
 8036d92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036d96:	b29b      	uxth	r3, r3
 8036d98:	3b01      	subs	r3, #1
 8036d9a:	b29a      	uxth	r2, r3
 8036d9c:	687b      	ldr	r3, [r7, #4]
 8036d9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8036da2:	bf00      	nop
 8036da4:	3744      	adds	r7, #68	; 0x44
 8036da6:	46bd      	mov	sp, r7
 8036da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036dac:	4770      	bx	lr

08036dae <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8036dae:	b480      	push	{r7}
 8036db0:	b091      	sub	sp, #68	; 0x44
 8036db2:	af00      	add	r7, sp, #0
 8036db4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036db6:	687b      	ldr	r3, [r7, #4]
 8036db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036dbc:	2b21      	cmp	r3, #33	; 0x21
 8036dbe:	d160      	bne.n	8036e82 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036dc0:	687b      	ldr	r3, [r7, #4]
 8036dc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036dc6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036dc8:	e057      	b.n	8036e7a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8036dca:	687b      	ldr	r3, [r7, #4]
 8036dcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036dd0:	b29b      	uxth	r3, r3
 8036dd2:	2b00      	cmp	r3, #0
 8036dd4:	d133      	bne.n	8036e3e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8036dd6:	687b      	ldr	r3, [r7, #4]
 8036dd8:	681b      	ldr	r3, [r3, #0]
 8036dda:	3308      	adds	r3, #8
 8036ddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036de0:	e853 3f00 	ldrex	r3, [r3]
 8036de4:	623b      	str	r3, [r7, #32]
   return(result);
 8036de6:	6a3b      	ldr	r3, [r7, #32]
 8036de8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8036dec:	63bb      	str	r3, [r7, #56]	; 0x38
 8036dee:	687b      	ldr	r3, [r7, #4]
 8036df0:	681b      	ldr	r3, [r3, #0]
 8036df2:	3308      	adds	r3, #8
 8036df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8036df6:	633a      	str	r2, [r7, #48]	; 0x30
 8036df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036dfe:	e841 2300 	strex	r3, r2, [r1]
 8036e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036e06:	2b00      	cmp	r3, #0
 8036e08:	d1e5      	bne.n	8036dd6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036e0a:	687b      	ldr	r3, [r7, #4]
 8036e0c:	681b      	ldr	r3, [r3, #0]
 8036e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036e10:	693b      	ldr	r3, [r7, #16]
 8036e12:	e853 3f00 	ldrex	r3, [r3]
 8036e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8036e18:	68fb      	ldr	r3, [r7, #12]
 8036e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8036e20:	687b      	ldr	r3, [r7, #4]
 8036e22:	681b      	ldr	r3, [r3, #0]
 8036e24:	461a      	mov	r2, r3
 8036e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036e28:	61fb      	str	r3, [r7, #28]
 8036e2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036e2c:	69b9      	ldr	r1, [r7, #24]
 8036e2e:	69fa      	ldr	r2, [r7, #28]
 8036e30:	e841 2300 	strex	r3, r2, [r1]
 8036e34:	617b      	str	r3, [r7, #20]
   return(result);
 8036e36:	697b      	ldr	r3, [r7, #20]
 8036e38:	2b00      	cmp	r3, #0
 8036e3a:	d1e6      	bne.n	8036e0a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8036e3c:	e021      	b.n	8036e82 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8036e3e:	687b      	ldr	r3, [r7, #4]
 8036e40:	681b      	ldr	r3, [r3, #0]
 8036e42:	69db      	ldr	r3, [r3, #28]
 8036e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036e48:	2b00      	cmp	r3, #0
 8036e4a:	d013      	beq.n	8036e74 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8036e4c:	687b      	ldr	r3, [r7, #4]
 8036e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036e50:	781a      	ldrb	r2, [r3, #0]
 8036e52:	687b      	ldr	r3, [r7, #4]
 8036e54:	681b      	ldr	r3, [r3, #0]
 8036e56:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8036e58:	687b      	ldr	r3, [r7, #4]
 8036e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036e5c:	1c5a      	adds	r2, r3, #1
 8036e5e:	687b      	ldr	r3, [r7, #4]
 8036e60:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8036e62:	687b      	ldr	r3, [r7, #4]
 8036e64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036e68:	b29b      	uxth	r3, r3
 8036e6a:	3b01      	subs	r3, #1
 8036e6c:	b29a      	uxth	r2, r3
 8036e6e:	687b      	ldr	r3, [r7, #4]
 8036e70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036e74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036e76:	3b01      	subs	r3, #1
 8036e78:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036e7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036e7c:	2b00      	cmp	r3, #0
 8036e7e:	d1a4      	bne.n	8036dca <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8036e80:	e7ff      	b.n	8036e82 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8036e82:	bf00      	nop
 8036e84:	3744      	adds	r7, #68	; 0x44
 8036e86:	46bd      	mov	sp, r7
 8036e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036e8c:	4770      	bx	lr

08036e8e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8036e8e:	b480      	push	{r7}
 8036e90:	b091      	sub	sp, #68	; 0x44
 8036e92:	af00      	add	r7, sp, #0
 8036e94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036e96:	687b      	ldr	r3, [r7, #4]
 8036e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036e9c:	2b21      	cmp	r3, #33	; 0x21
 8036e9e:	d165      	bne.n	8036f6c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036ea0:	687b      	ldr	r3, [r7, #4]
 8036ea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036ea6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036ea8:	e05c      	b.n	8036f64 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8036eaa:	687b      	ldr	r3, [r7, #4]
 8036eac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036eb0:	b29b      	uxth	r3, r3
 8036eb2:	2b00      	cmp	r3, #0
 8036eb4:	d133      	bne.n	8036f1e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8036eb6:	687b      	ldr	r3, [r7, #4]
 8036eb8:	681b      	ldr	r3, [r3, #0]
 8036eba:	3308      	adds	r3, #8
 8036ebc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036ebe:	6a3b      	ldr	r3, [r7, #32]
 8036ec0:	e853 3f00 	ldrex	r3, [r3]
 8036ec4:	61fb      	str	r3, [r7, #28]
   return(result);
 8036ec6:	69fb      	ldr	r3, [r7, #28]
 8036ec8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8036ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8036ece:	687b      	ldr	r3, [r7, #4]
 8036ed0:	681b      	ldr	r3, [r3, #0]
 8036ed2:	3308      	adds	r3, #8
 8036ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8036ed8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036eda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036ede:	e841 2300 	strex	r3, r2, [r1]
 8036ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036ee6:	2b00      	cmp	r3, #0
 8036ee8:	d1e5      	bne.n	8036eb6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036eea:	687b      	ldr	r3, [r7, #4]
 8036eec:	681b      	ldr	r3, [r3, #0]
 8036eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036ef0:	68fb      	ldr	r3, [r7, #12]
 8036ef2:	e853 3f00 	ldrex	r3, [r3]
 8036ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8036ef8:	68bb      	ldr	r3, [r7, #8]
 8036efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036efe:	633b      	str	r3, [r7, #48]	; 0x30
 8036f00:	687b      	ldr	r3, [r7, #4]
 8036f02:	681b      	ldr	r3, [r3, #0]
 8036f04:	461a      	mov	r2, r3
 8036f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036f08:	61bb      	str	r3, [r7, #24]
 8036f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036f0c:	6979      	ldr	r1, [r7, #20]
 8036f0e:	69ba      	ldr	r2, [r7, #24]
 8036f10:	e841 2300 	strex	r3, r2, [r1]
 8036f14:	613b      	str	r3, [r7, #16]
   return(result);
 8036f16:	693b      	ldr	r3, [r7, #16]
 8036f18:	2b00      	cmp	r3, #0
 8036f1a:	d1e6      	bne.n	8036eea <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8036f1c:	e026      	b.n	8036f6c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8036f1e:	687b      	ldr	r3, [r7, #4]
 8036f20:	681b      	ldr	r3, [r3, #0]
 8036f22:	69db      	ldr	r3, [r3, #28]
 8036f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036f28:	2b00      	cmp	r3, #0
 8036f2a:	d018      	beq.n	8036f5e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8036f2c:	687b      	ldr	r3, [r7, #4]
 8036f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036f30:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8036f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036f34:	881b      	ldrh	r3, [r3, #0]
 8036f36:	461a      	mov	r2, r3
 8036f38:	687b      	ldr	r3, [r7, #4]
 8036f3a:	681b      	ldr	r3, [r3, #0]
 8036f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036f40:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8036f42:	687b      	ldr	r3, [r7, #4]
 8036f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036f46:	1c9a      	adds	r2, r3, #2
 8036f48:	687b      	ldr	r3, [r7, #4]
 8036f4a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8036f4c:	687b      	ldr	r3, [r7, #4]
 8036f4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036f52:	b29b      	uxth	r3, r3
 8036f54:	3b01      	subs	r3, #1
 8036f56:	b29a      	uxth	r2, r3
 8036f58:	687b      	ldr	r3, [r7, #4]
 8036f5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036f5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036f60:	3b01      	subs	r3, #1
 8036f62:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036f64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036f66:	2b00      	cmp	r3, #0
 8036f68:	d19f      	bne.n	8036eaa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8036f6a:	e7ff      	b.n	8036f6c <UART_TxISR_16BIT_FIFOEN+0xde>
 8036f6c:	bf00      	nop
 8036f6e:	3744      	adds	r7, #68	; 0x44
 8036f70:	46bd      	mov	sp, r7
 8036f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036f76:	4770      	bx	lr

08036f78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8036f78:	b580      	push	{r7, lr}
 8036f7a:	b088      	sub	sp, #32
 8036f7c:	af00      	add	r7, sp, #0
 8036f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036f80:	687b      	ldr	r3, [r7, #4]
 8036f82:	681b      	ldr	r3, [r3, #0]
 8036f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036f86:	68fb      	ldr	r3, [r7, #12]
 8036f88:	e853 3f00 	ldrex	r3, [r3]
 8036f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8036f8e:	68bb      	ldr	r3, [r7, #8]
 8036f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8036f94:	61fb      	str	r3, [r7, #28]
 8036f96:	687b      	ldr	r3, [r7, #4]
 8036f98:	681b      	ldr	r3, [r3, #0]
 8036f9a:	461a      	mov	r2, r3
 8036f9c:	69fb      	ldr	r3, [r7, #28]
 8036f9e:	61bb      	str	r3, [r7, #24]
 8036fa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036fa2:	6979      	ldr	r1, [r7, #20]
 8036fa4:	69ba      	ldr	r2, [r7, #24]
 8036fa6:	e841 2300 	strex	r3, r2, [r1]
 8036faa:	613b      	str	r3, [r7, #16]
   return(result);
 8036fac:	693b      	ldr	r3, [r7, #16]
 8036fae:	2b00      	cmp	r3, #0
 8036fb0:	d1e6      	bne.n	8036f80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8036fb2:	687b      	ldr	r3, [r7, #4]
 8036fb4:	2220      	movs	r2, #32
 8036fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8036fba:	687b      	ldr	r3, [r7, #4]
 8036fbc:	2200      	movs	r2, #0
 8036fbe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8036fc0:	6878      	ldr	r0, [r7, #4]
 8036fc2:	f7f2 fd81 	bl	8029ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036fc6:	bf00      	nop
 8036fc8:	3720      	adds	r7, #32
 8036fca:	46bd      	mov	sp, r7
 8036fcc:	bd80      	pop	{r7, pc}

08036fce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8036fce:	b580      	push	{r7, lr}
 8036fd0:	b096      	sub	sp, #88	; 0x58
 8036fd2:	af00      	add	r7, sp, #0
 8036fd4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8036fd6:	687b      	ldr	r3, [r7, #4]
 8036fd8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8036fdc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8036fe0:	687b      	ldr	r3, [r7, #4]
 8036fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8036fe6:	2b22      	cmp	r3, #34	; 0x22
 8036fe8:	f040 8095 	bne.w	8037116 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8036fec:	687b      	ldr	r3, [r7, #4]
 8036fee:	681b      	ldr	r3, [r3, #0]
 8036ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036ff2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8036ff6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8036ffa:	b2d9      	uxtb	r1, r3
 8036ffc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8037000:	b2da      	uxtb	r2, r3
 8037002:	687b      	ldr	r3, [r7, #4]
 8037004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8037006:	400a      	ands	r2, r1
 8037008:	b2d2      	uxtb	r2, r2
 803700a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 803700c:	687b      	ldr	r3, [r7, #4]
 803700e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8037010:	1c5a      	adds	r2, r3, #1
 8037012:	687b      	ldr	r3, [r7, #4]
 8037014:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8037016:	687b      	ldr	r3, [r7, #4]
 8037018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803701c:	b29b      	uxth	r3, r3
 803701e:	3b01      	subs	r3, #1
 8037020:	b29a      	uxth	r2, r3
 8037022:	687b      	ldr	r3, [r7, #4]
 8037024:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8037028:	687b      	ldr	r3, [r7, #4]
 803702a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803702e:	b29b      	uxth	r3, r3
 8037030:	2b00      	cmp	r3, #0
 8037032:	d178      	bne.n	8037126 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8037034:	687b      	ldr	r3, [r7, #4]
 8037036:	681b      	ldr	r3, [r3, #0]
 8037038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803703c:	e853 3f00 	ldrex	r3, [r3]
 8037040:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8037042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8037048:	653b      	str	r3, [r7, #80]	; 0x50
 803704a:	687b      	ldr	r3, [r7, #4]
 803704c:	681b      	ldr	r3, [r3, #0]
 803704e:	461a      	mov	r2, r3
 8037050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8037052:	647b      	str	r3, [r7, #68]	; 0x44
 8037054:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8037058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803705a:	e841 2300 	strex	r3, r2, [r1]
 803705e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8037060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037062:	2b00      	cmp	r3, #0
 8037064:	d1e6      	bne.n	8037034 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8037066:	687b      	ldr	r3, [r7, #4]
 8037068:	681b      	ldr	r3, [r3, #0]
 803706a:	3308      	adds	r3, #8
 803706c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037070:	e853 3f00 	ldrex	r3, [r3]
 8037074:	623b      	str	r3, [r7, #32]
   return(result);
 8037076:	6a3b      	ldr	r3, [r7, #32]
 8037078:	f023 0301 	bic.w	r3, r3, #1
 803707c:	64fb      	str	r3, [r7, #76]	; 0x4c
 803707e:	687b      	ldr	r3, [r7, #4]
 8037080:	681b      	ldr	r3, [r3, #0]
 8037082:	3308      	adds	r3, #8
 8037084:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8037086:	633a      	str	r2, [r7, #48]	; 0x30
 8037088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803708a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803708c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803708e:	e841 2300 	strex	r3, r2, [r1]
 8037092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8037094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037096:	2b00      	cmp	r3, #0
 8037098:	d1e5      	bne.n	8037066 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 803709a:	687b      	ldr	r3, [r7, #4]
 803709c:	2220      	movs	r2, #32
 803709e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80370a2:	687b      	ldr	r3, [r7, #4]
 80370a4:	2200      	movs	r2, #0
 80370a6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80370a8:	687b      	ldr	r3, [r7, #4]
 80370aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80370ac:	2b01      	cmp	r3, #1
 80370ae:	d12e      	bne.n	803710e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80370b0:	687b      	ldr	r3, [r7, #4]
 80370b2:	2200      	movs	r2, #0
 80370b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80370b6:	687b      	ldr	r3, [r7, #4]
 80370b8:	681b      	ldr	r3, [r3, #0]
 80370ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80370bc:	693b      	ldr	r3, [r7, #16]
 80370be:	e853 3f00 	ldrex	r3, [r3]
 80370c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80370c4:	68fb      	ldr	r3, [r7, #12]
 80370c6:	f023 0310 	bic.w	r3, r3, #16
 80370ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80370cc:	687b      	ldr	r3, [r7, #4]
 80370ce:	681b      	ldr	r3, [r3, #0]
 80370d0:	461a      	mov	r2, r3
 80370d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80370d4:	61fb      	str	r3, [r7, #28]
 80370d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80370d8:	69b9      	ldr	r1, [r7, #24]
 80370da:	69fa      	ldr	r2, [r7, #28]
 80370dc:	e841 2300 	strex	r3, r2, [r1]
 80370e0:	617b      	str	r3, [r7, #20]
   return(result);
 80370e2:	697b      	ldr	r3, [r7, #20]
 80370e4:	2b00      	cmp	r3, #0
 80370e6:	d1e6      	bne.n	80370b6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80370e8:	687b      	ldr	r3, [r7, #4]
 80370ea:	681b      	ldr	r3, [r3, #0]
 80370ec:	69db      	ldr	r3, [r3, #28]
 80370ee:	f003 0310 	and.w	r3, r3, #16
 80370f2:	2b10      	cmp	r3, #16
 80370f4:	d103      	bne.n	80370fe <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80370f6:	687b      	ldr	r3, [r7, #4]
 80370f8:	681b      	ldr	r3, [r3, #0]
 80370fa:	2210      	movs	r2, #16
 80370fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80370fe:	687b      	ldr	r3, [r7, #4]
 8037100:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8037104:	4619      	mov	r1, r3
 8037106:	6878      	ldr	r0, [r7, #4]
 8037108:	f7fe fcc4 	bl	8035a94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803710c:	e00b      	b.n	8037126 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803710e:	6878      	ldr	r0, [r7, #4]
 8037110:	f7f2 fcb6 	bl	8029a80 <HAL_UART_RxCpltCallback>
}
 8037114:	e007      	b.n	8037126 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037116:	687b      	ldr	r3, [r7, #4]
 8037118:	681b      	ldr	r3, [r3, #0]
 803711a:	699a      	ldr	r2, [r3, #24]
 803711c:	687b      	ldr	r3, [r7, #4]
 803711e:	681b      	ldr	r3, [r3, #0]
 8037120:	f042 0208 	orr.w	r2, r2, #8
 8037124:	619a      	str	r2, [r3, #24]
}
 8037126:	bf00      	nop
 8037128:	3758      	adds	r7, #88	; 0x58
 803712a:	46bd      	mov	sp, r7
 803712c:	bd80      	pop	{r7, pc}

0803712e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 803712e:	b580      	push	{r7, lr}
 8037130:	b096      	sub	sp, #88	; 0x58
 8037132:	af00      	add	r7, sp, #0
 8037134:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8037136:	687b      	ldr	r3, [r7, #4]
 8037138:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803713c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8037140:	687b      	ldr	r3, [r7, #4]
 8037142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8037146:	2b22      	cmp	r3, #34	; 0x22
 8037148:	f040 8095 	bne.w	8037276 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803714c:	687b      	ldr	r3, [r7, #4]
 803714e:	681b      	ldr	r3, [r3, #0]
 8037150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8037152:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8037156:	687b      	ldr	r3, [r7, #4]
 8037158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803715a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 803715c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8037160:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8037164:	4013      	ands	r3, r2
 8037166:	b29a      	uxth	r2, r3
 8037168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803716a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 803716c:	687b      	ldr	r3, [r7, #4]
 803716e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8037170:	1c9a      	adds	r2, r3, #2
 8037172:	687b      	ldr	r3, [r7, #4]
 8037174:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8037176:	687b      	ldr	r3, [r7, #4]
 8037178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803717c:	b29b      	uxth	r3, r3
 803717e:	3b01      	subs	r3, #1
 8037180:	b29a      	uxth	r2, r3
 8037182:	687b      	ldr	r3, [r7, #4]
 8037184:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8037188:	687b      	ldr	r3, [r7, #4]
 803718a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803718e:	b29b      	uxth	r3, r3
 8037190:	2b00      	cmp	r3, #0
 8037192:	d178      	bne.n	8037286 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8037194:	687b      	ldr	r3, [r7, #4]
 8037196:	681b      	ldr	r3, [r3, #0]
 8037198:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803719c:	e853 3f00 	ldrex	r3, [r3]
 80371a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80371a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80371a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80371a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80371aa:	687b      	ldr	r3, [r7, #4]
 80371ac:	681b      	ldr	r3, [r3, #0]
 80371ae:	461a      	mov	r2, r3
 80371b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80371b2:	643b      	str	r3, [r7, #64]	; 0x40
 80371b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80371b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80371b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80371ba:	e841 2300 	strex	r3, r2, [r1]
 80371be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80371c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80371c2:	2b00      	cmp	r3, #0
 80371c4:	d1e6      	bne.n	8037194 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80371c6:	687b      	ldr	r3, [r7, #4]
 80371c8:	681b      	ldr	r3, [r3, #0]
 80371ca:	3308      	adds	r3, #8
 80371cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80371ce:	6a3b      	ldr	r3, [r7, #32]
 80371d0:	e853 3f00 	ldrex	r3, [r3]
 80371d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80371d6:	69fb      	ldr	r3, [r7, #28]
 80371d8:	f023 0301 	bic.w	r3, r3, #1
 80371dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80371de:	687b      	ldr	r3, [r7, #4]
 80371e0:	681b      	ldr	r3, [r3, #0]
 80371e2:	3308      	adds	r3, #8
 80371e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80371e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80371e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80371ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80371ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80371ee:	e841 2300 	strex	r3, r2, [r1]
 80371f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80371f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80371f6:	2b00      	cmp	r3, #0
 80371f8:	d1e5      	bne.n	80371c6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80371fa:	687b      	ldr	r3, [r7, #4]
 80371fc:	2220      	movs	r2, #32
 80371fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8037202:	687b      	ldr	r3, [r7, #4]
 8037204:	2200      	movs	r2, #0
 8037206:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037208:	687b      	ldr	r3, [r7, #4]
 803720a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803720c:	2b01      	cmp	r3, #1
 803720e:	d12e      	bne.n	803726e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8037210:	687b      	ldr	r3, [r7, #4]
 8037212:	2200      	movs	r2, #0
 8037214:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8037216:	687b      	ldr	r3, [r7, #4]
 8037218:	681b      	ldr	r3, [r3, #0]
 803721a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803721c:	68fb      	ldr	r3, [r7, #12]
 803721e:	e853 3f00 	ldrex	r3, [r3]
 8037222:	60bb      	str	r3, [r7, #8]
   return(result);
 8037224:	68bb      	ldr	r3, [r7, #8]
 8037226:	f023 0310 	bic.w	r3, r3, #16
 803722a:	647b      	str	r3, [r7, #68]	; 0x44
 803722c:	687b      	ldr	r3, [r7, #4]
 803722e:	681b      	ldr	r3, [r3, #0]
 8037230:	461a      	mov	r2, r3
 8037232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8037234:	61bb      	str	r3, [r7, #24]
 8037236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037238:	6979      	ldr	r1, [r7, #20]
 803723a:	69ba      	ldr	r2, [r7, #24]
 803723c:	e841 2300 	strex	r3, r2, [r1]
 8037240:	613b      	str	r3, [r7, #16]
   return(result);
 8037242:	693b      	ldr	r3, [r7, #16]
 8037244:	2b00      	cmp	r3, #0
 8037246:	d1e6      	bne.n	8037216 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8037248:	687b      	ldr	r3, [r7, #4]
 803724a:	681b      	ldr	r3, [r3, #0]
 803724c:	69db      	ldr	r3, [r3, #28]
 803724e:	f003 0310 	and.w	r3, r3, #16
 8037252:	2b10      	cmp	r3, #16
 8037254:	d103      	bne.n	803725e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8037256:	687b      	ldr	r3, [r7, #4]
 8037258:	681b      	ldr	r3, [r3, #0]
 803725a:	2210      	movs	r2, #16
 803725c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803725e:	687b      	ldr	r3, [r7, #4]
 8037260:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8037264:	4619      	mov	r1, r3
 8037266:	6878      	ldr	r0, [r7, #4]
 8037268:	f7fe fc14 	bl	8035a94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803726c:	e00b      	b.n	8037286 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803726e:	6878      	ldr	r0, [r7, #4]
 8037270:	f7f2 fc06 	bl	8029a80 <HAL_UART_RxCpltCallback>
}
 8037274:	e007      	b.n	8037286 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037276:	687b      	ldr	r3, [r7, #4]
 8037278:	681b      	ldr	r3, [r3, #0]
 803727a:	699a      	ldr	r2, [r3, #24]
 803727c:	687b      	ldr	r3, [r7, #4]
 803727e:	681b      	ldr	r3, [r3, #0]
 8037280:	f042 0208 	orr.w	r2, r2, #8
 8037284:	619a      	str	r2, [r3, #24]
}
 8037286:	bf00      	nop
 8037288:	3758      	adds	r7, #88	; 0x58
 803728a:	46bd      	mov	sp, r7
 803728c:	bd80      	pop	{r7, pc}
	...

08037290 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8037290:	b580      	push	{r7, lr}
 8037292:	b0a6      	sub	sp, #152	; 0x98
 8037294:	af00      	add	r7, sp, #0
 8037296:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8037298:	687b      	ldr	r3, [r7, #4]
 803729a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803729e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80372a2:	687b      	ldr	r3, [r7, #4]
 80372a4:	681b      	ldr	r3, [r3, #0]
 80372a6:	69db      	ldr	r3, [r3, #28]
 80372a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80372ac:	687b      	ldr	r3, [r7, #4]
 80372ae:	681b      	ldr	r3, [r3, #0]
 80372b0:	681b      	ldr	r3, [r3, #0]
 80372b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80372b6:	687b      	ldr	r3, [r7, #4]
 80372b8:	681b      	ldr	r3, [r3, #0]
 80372ba:	689b      	ldr	r3, [r3, #8]
 80372bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80372c0:	687b      	ldr	r3, [r7, #4]
 80372c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80372c6:	2b22      	cmp	r3, #34	; 0x22
 80372c8:	f040 814d 	bne.w	8037566 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80372cc:	687b      	ldr	r3, [r7, #4]
 80372ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80372d2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80372d6:	e0f4      	b.n	80374c2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80372d8:	687b      	ldr	r3, [r7, #4]
 80372da:	681b      	ldr	r3, [r3, #0]
 80372dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80372de:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80372e2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80372e6:	b2d9      	uxtb	r1, r3
 80372e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80372ec:	b2da      	uxtb	r2, r3
 80372ee:	687b      	ldr	r3, [r7, #4]
 80372f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80372f2:	400a      	ands	r2, r1
 80372f4:	b2d2      	uxtb	r2, r2
 80372f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80372f8:	687b      	ldr	r3, [r7, #4]
 80372fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80372fc:	1c5a      	adds	r2, r3, #1
 80372fe:	687b      	ldr	r3, [r7, #4]
 8037300:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8037302:	687b      	ldr	r3, [r7, #4]
 8037304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8037308:	b29b      	uxth	r3, r3
 803730a:	3b01      	subs	r3, #1
 803730c:	b29a      	uxth	r2, r3
 803730e:	687b      	ldr	r3, [r7, #4]
 8037310:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8037314:	687b      	ldr	r3, [r7, #4]
 8037316:	681b      	ldr	r3, [r3, #0]
 8037318:	69db      	ldr	r3, [r3, #28]
 803731a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 803731e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8037322:	f003 0307 	and.w	r3, r3, #7
 8037326:	2b00      	cmp	r3, #0
 8037328:	d053      	beq.n	80373d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 803732a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803732e:	f003 0301 	and.w	r3, r3, #1
 8037332:	2b00      	cmp	r3, #0
 8037334:	d011      	beq.n	803735a <UART_RxISR_8BIT_FIFOEN+0xca>
 8037336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 803733a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803733e:	2b00      	cmp	r3, #0
 8037340:	d00b      	beq.n	803735a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8037342:	687b      	ldr	r3, [r7, #4]
 8037344:	681b      	ldr	r3, [r3, #0]
 8037346:	2201      	movs	r2, #1
 8037348:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 803734a:	687b      	ldr	r3, [r7, #4]
 803734c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037350:	f043 0201 	orr.w	r2, r3, #1
 8037354:	687b      	ldr	r3, [r7, #4]
 8037356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803735a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803735e:	f003 0302 	and.w	r3, r3, #2
 8037362:	2b00      	cmp	r3, #0
 8037364:	d011      	beq.n	803738a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8037366:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803736a:	f003 0301 	and.w	r3, r3, #1
 803736e:	2b00      	cmp	r3, #0
 8037370:	d00b      	beq.n	803738a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8037372:	687b      	ldr	r3, [r7, #4]
 8037374:	681b      	ldr	r3, [r3, #0]
 8037376:	2202      	movs	r2, #2
 8037378:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 803737a:	687b      	ldr	r3, [r7, #4]
 803737c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037380:	f043 0204 	orr.w	r2, r3, #4
 8037384:	687b      	ldr	r3, [r7, #4]
 8037386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803738a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803738e:	f003 0304 	and.w	r3, r3, #4
 8037392:	2b00      	cmp	r3, #0
 8037394:	d011      	beq.n	80373ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8037396:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803739a:	f003 0301 	and.w	r3, r3, #1
 803739e:	2b00      	cmp	r3, #0
 80373a0:	d00b      	beq.n	80373ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80373a2:	687b      	ldr	r3, [r7, #4]
 80373a4:	681b      	ldr	r3, [r3, #0]
 80373a6:	2204      	movs	r2, #4
 80373a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80373aa:	687b      	ldr	r3, [r7, #4]
 80373ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80373b0:	f043 0202 	orr.w	r2, r3, #2
 80373b4:	687b      	ldr	r3, [r7, #4]
 80373b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80373ba:	687b      	ldr	r3, [r7, #4]
 80373bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80373c0:	2b00      	cmp	r3, #0
 80373c2:	d006      	beq.n	80373d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80373c4:	6878      	ldr	r0, [r7, #4]
 80373c6:	f7fe fb5b 	bl	8035a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80373ca:	687b      	ldr	r3, [r7, #4]
 80373cc:	2200      	movs	r2, #0
 80373ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80373d2:	687b      	ldr	r3, [r7, #4]
 80373d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80373d8:	b29b      	uxth	r3, r3
 80373da:	2b00      	cmp	r3, #0
 80373dc:	d171      	bne.n	80374c2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80373de:	687b      	ldr	r3, [r7, #4]
 80373e0:	681b      	ldr	r3, [r3, #0]
 80373e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80373e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80373e6:	e853 3f00 	ldrex	r3, [r3]
 80373ea:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80373ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80373ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80373f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80373f6:	687b      	ldr	r3, [r7, #4]
 80373f8:	681b      	ldr	r3, [r3, #0]
 80373fa:	461a      	mov	r2, r3
 80373fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8037400:	66bb      	str	r3, [r7, #104]	; 0x68
 8037402:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037404:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8037406:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8037408:	e841 2300 	strex	r3, r2, [r1]
 803740c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 803740e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8037410:	2b00      	cmp	r3, #0
 8037412:	d1e4      	bne.n	80373de <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8037414:	687b      	ldr	r3, [r7, #4]
 8037416:	681b      	ldr	r3, [r3, #0]
 8037418:	3308      	adds	r3, #8
 803741a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803741c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803741e:	e853 3f00 	ldrex	r3, [r3]
 8037422:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8037424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8037426:	4b56      	ldr	r3, [pc, #344]	; (8037580 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8037428:	4013      	ands	r3, r2
 803742a:	67fb      	str	r3, [r7, #124]	; 0x7c
 803742c:	687b      	ldr	r3, [r7, #4]
 803742e:	681b      	ldr	r3, [r3, #0]
 8037430:	3308      	adds	r3, #8
 8037432:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8037434:	657a      	str	r2, [r7, #84]	; 0x54
 8037436:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037438:	6d39      	ldr	r1, [r7, #80]	; 0x50
 803743a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 803743c:	e841 2300 	strex	r3, r2, [r1]
 8037440:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8037442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037444:	2b00      	cmp	r3, #0
 8037446:	d1e5      	bne.n	8037414 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8037448:	687b      	ldr	r3, [r7, #4]
 803744a:	2220      	movs	r2, #32
 803744c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8037450:	687b      	ldr	r3, [r7, #4]
 8037452:	2200      	movs	r2, #0
 8037454:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037456:	687b      	ldr	r3, [r7, #4]
 8037458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803745a:	2b01      	cmp	r3, #1
 803745c:	d12e      	bne.n	80374bc <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803745e:	687b      	ldr	r3, [r7, #4]
 8037460:	2200      	movs	r2, #0
 8037462:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8037464:	687b      	ldr	r3, [r7, #4]
 8037466:	681b      	ldr	r3, [r3, #0]
 8037468:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803746a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803746c:	e853 3f00 	ldrex	r3, [r3]
 8037470:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8037472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037474:	f023 0310 	bic.w	r3, r3, #16
 8037478:	67bb      	str	r3, [r7, #120]	; 0x78
 803747a:	687b      	ldr	r3, [r7, #4]
 803747c:	681b      	ldr	r3, [r3, #0]
 803747e:	461a      	mov	r2, r3
 8037480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8037482:	643b      	str	r3, [r7, #64]	; 0x40
 8037484:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037486:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8037488:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803748a:	e841 2300 	strex	r3, r2, [r1]
 803748e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8037490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037492:	2b00      	cmp	r3, #0
 8037494:	d1e6      	bne.n	8037464 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8037496:	687b      	ldr	r3, [r7, #4]
 8037498:	681b      	ldr	r3, [r3, #0]
 803749a:	69db      	ldr	r3, [r3, #28]
 803749c:	f003 0310 	and.w	r3, r3, #16
 80374a0:	2b10      	cmp	r3, #16
 80374a2:	d103      	bne.n	80374ac <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80374a4:	687b      	ldr	r3, [r7, #4]
 80374a6:	681b      	ldr	r3, [r3, #0]
 80374a8:	2210      	movs	r2, #16
 80374aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80374ac:	687b      	ldr	r3, [r7, #4]
 80374ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80374b2:	4619      	mov	r1, r3
 80374b4:	6878      	ldr	r0, [r7, #4]
 80374b6:	f7fe faed 	bl	8035a94 <HAL_UARTEx_RxEventCallback>
 80374ba:	e002      	b.n	80374c2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80374bc:	6878      	ldr	r0, [r7, #4]
 80374be:	f7f2 fadf 	bl	8029a80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80374c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80374c6:	2b00      	cmp	r3, #0
 80374c8:	d006      	beq.n	80374d8 <UART_RxISR_8BIT_FIFOEN+0x248>
 80374ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80374ce:	f003 0320 	and.w	r3, r3, #32
 80374d2:	2b00      	cmp	r3, #0
 80374d4:	f47f af00 	bne.w	80372d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80374d8:	687b      	ldr	r3, [r7, #4]
 80374da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80374de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80374e2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80374e6:	2b00      	cmp	r3, #0
 80374e8:	d045      	beq.n	8037576 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80374ea:	687b      	ldr	r3, [r7, #4]
 80374ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80374f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80374f4:	429a      	cmp	r2, r3
 80374f6:	d23e      	bcs.n	8037576 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80374f8:	687b      	ldr	r3, [r7, #4]
 80374fa:	681b      	ldr	r3, [r3, #0]
 80374fc:	3308      	adds	r3, #8
 80374fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037500:	6a3b      	ldr	r3, [r7, #32]
 8037502:	e853 3f00 	ldrex	r3, [r3]
 8037506:	61fb      	str	r3, [r7, #28]
   return(result);
 8037508:	69fb      	ldr	r3, [r7, #28]
 803750a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803750e:	673b      	str	r3, [r7, #112]	; 0x70
 8037510:	687b      	ldr	r3, [r7, #4]
 8037512:	681b      	ldr	r3, [r3, #0]
 8037514:	3308      	adds	r3, #8
 8037516:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8037518:	62fa      	str	r2, [r7, #44]	; 0x2c
 803751a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803751c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803751e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8037520:	e841 2300 	strex	r3, r2, [r1]
 8037524:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8037526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037528:	2b00      	cmp	r3, #0
 803752a:	d1e5      	bne.n	80374f8 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 803752c:	687b      	ldr	r3, [r7, #4]
 803752e:	4a15      	ldr	r2, [pc, #84]	; (8037584 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8037530:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8037532:	687b      	ldr	r3, [r7, #4]
 8037534:	681b      	ldr	r3, [r3, #0]
 8037536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037538:	68fb      	ldr	r3, [r7, #12]
 803753a:	e853 3f00 	ldrex	r3, [r3]
 803753e:	60bb      	str	r3, [r7, #8]
   return(result);
 8037540:	68bb      	ldr	r3, [r7, #8]
 8037542:	f043 0320 	orr.w	r3, r3, #32
 8037546:	66fb      	str	r3, [r7, #108]	; 0x6c
 8037548:	687b      	ldr	r3, [r7, #4]
 803754a:	681b      	ldr	r3, [r3, #0]
 803754c:	461a      	mov	r2, r3
 803754e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8037550:	61bb      	str	r3, [r7, #24]
 8037552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037554:	6979      	ldr	r1, [r7, #20]
 8037556:	69ba      	ldr	r2, [r7, #24]
 8037558:	e841 2300 	strex	r3, r2, [r1]
 803755c:	613b      	str	r3, [r7, #16]
   return(result);
 803755e:	693b      	ldr	r3, [r7, #16]
 8037560:	2b00      	cmp	r3, #0
 8037562:	d1e6      	bne.n	8037532 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037564:	e007      	b.n	8037576 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037566:	687b      	ldr	r3, [r7, #4]
 8037568:	681b      	ldr	r3, [r3, #0]
 803756a:	699a      	ldr	r2, [r3, #24]
 803756c:	687b      	ldr	r3, [r7, #4]
 803756e:	681b      	ldr	r3, [r3, #0]
 8037570:	f042 0208 	orr.w	r2, r2, #8
 8037574:	619a      	str	r2, [r3, #24]
}
 8037576:	bf00      	nop
 8037578:	3798      	adds	r7, #152	; 0x98
 803757a:	46bd      	mov	sp, r7
 803757c:	bd80      	pop	{r7, pc}
 803757e:	bf00      	nop
 8037580:	effffffe 	.word	0xeffffffe
 8037584:	08036fcf 	.word	0x08036fcf

08037588 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8037588:	b580      	push	{r7, lr}
 803758a:	b0a8      	sub	sp, #160	; 0xa0
 803758c:	af00      	add	r7, sp, #0
 803758e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8037590:	687b      	ldr	r3, [r7, #4]
 8037592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8037596:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 803759a:	687b      	ldr	r3, [r7, #4]
 803759c:	681b      	ldr	r3, [r3, #0]
 803759e:	69db      	ldr	r3, [r3, #28]
 80375a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80375a4:	687b      	ldr	r3, [r7, #4]
 80375a6:	681b      	ldr	r3, [r3, #0]
 80375a8:	681b      	ldr	r3, [r3, #0]
 80375aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80375ae:	687b      	ldr	r3, [r7, #4]
 80375b0:	681b      	ldr	r3, [r3, #0]
 80375b2:	689b      	ldr	r3, [r3, #8]
 80375b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80375b8:	687b      	ldr	r3, [r7, #4]
 80375ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80375be:	2b22      	cmp	r3, #34	; 0x22
 80375c0:	f040 8151 	bne.w	8037866 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80375c4:	687b      	ldr	r3, [r7, #4]
 80375c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80375ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80375ce:	e0f8      	b.n	80377c2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80375d0:	687b      	ldr	r3, [r7, #4]
 80375d2:	681b      	ldr	r3, [r3, #0]
 80375d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80375d6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80375da:	687b      	ldr	r3, [r7, #4]
 80375dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80375de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80375e2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80375e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80375ea:	4013      	ands	r3, r2
 80375ec:	b29a      	uxth	r2, r3
 80375ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80375f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80375f4:	687b      	ldr	r3, [r7, #4]
 80375f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80375f8:	1c9a      	adds	r2, r3, #2
 80375fa:	687b      	ldr	r3, [r7, #4]
 80375fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80375fe:	687b      	ldr	r3, [r7, #4]
 8037600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8037604:	b29b      	uxth	r3, r3
 8037606:	3b01      	subs	r3, #1
 8037608:	b29a      	uxth	r2, r3
 803760a:	687b      	ldr	r3, [r7, #4]
 803760c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8037610:	687b      	ldr	r3, [r7, #4]
 8037612:	681b      	ldr	r3, [r3, #0]
 8037614:	69db      	ldr	r3, [r3, #28]
 8037616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 803761a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803761e:	f003 0307 	and.w	r3, r3, #7
 8037622:	2b00      	cmp	r3, #0
 8037624:	d053      	beq.n	80376ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8037626:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803762a:	f003 0301 	and.w	r3, r3, #1
 803762e:	2b00      	cmp	r3, #0
 8037630:	d011      	beq.n	8037656 <UART_RxISR_16BIT_FIFOEN+0xce>
 8037632:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8037636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803763a:	2b00      	cmp	r3, #0
 803763c:	d00b      	beq.n	8037656 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803763e:	687b      	ldr	r3, [r7, #4]
 8037640:	681b      	ldr	r3, [r3, #0]
 8037642:	2201      	movs	r2, #1
 8037644:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8037646:	687b      	ldr	r3, [r7, #4]
 8037648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803764c:	f043 0201 	orr.w	r2, r3, #1
 8037650:	687b      	ldr	r3, [r7, #4]
 8037652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037656:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803765a:	f003 0302 	and.w	r3, r3, #2
 803765e:	2b00      	cmp	r3, #0
 8037660:	d011      	beq.n	8037686 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8037662:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8037666:	f003 0301 	and.w	r3, r3, #1
 803766a:	2b00      	cmp	r3, #0
 803766c:	d00b      	beq.n	8037686 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803766e:	687b      	ldr	r3, [r7, #4]
 8037670:	681b      	ldr	r3, [r3, #0]
 8037672:	2202      	movs	r2, #2
 8037674:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8037676:	687b      	ldr	r3, [r7, #4]
 8037678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803767c:	f043 0204 	orr.w	r2, r3, #4
 8037680:	687b      	ldr	r3, [r7, #4]
 8037682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037686:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803768a:	f003 0304 	and.w	r3, r3, #4
 803768e:	2b00      	cmp	r3, #0
 8037690:	d011      	beq.n	80376b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8037692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8037696:	f003 0301 	and.w	r3, r3, #1
 803769a:	2b00      	cmp	r3, #0
 803769c:	d00b      	beq.n	80376b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803769e:	687b      	ldr	r3, [r7, #4]
 80376a0:	681b      	ldr	r3, [r3, #0]
 80376a2:	2204      	movs	r2, #4
 80376a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80376a6:	687b      	ldr	r3, [r7, #4]
 80376a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80376ac:	f043 0202 	orr.w	r2, r3, #2
 80376b0:	687b      	ldr	r3, [r7, #4]
 80376b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80376b6:	687b      	ldr	r3, [r7, #4]
 80376b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80376bc:	2b00      	cmp	r3, #0
 80376be:	d006      	beq.n	80376ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80376c0:	6878      	ldr	r0, [r7, #4]
 80376c2:	f7fe f9dd 	bl	8035a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80376c6:	687b      	ldr	r3, [r7, #4]
 80376c8:	2200      	movs	r2, #0
 80376ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80376ce:	687b      	ldr	r3, [r7, #4]
 80376d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80376d4:	b29b      	uxth	r3, r3
 80376d6:	2b00      	cmp	r3, #0
 80376d8:	d173      	bne.n	80377c2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80376da:	687b      	ldr	r3, [r7, #4]
 80376dc:	681b      	ldr	r3, [r3, #0]
 80376de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80376e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80376e2:	e853 3f00 	ldrex	r3, [r3]
 80376e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80376e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80376ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80376ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80376f2:	687b      	ldr	r3, [r7, #4]
 80376f4:	681b      	ldr	r3, [r3, #0]
 80376f6:	461a      	mov	r2, r3
 80376f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80376fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80376fe:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037700:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8037702:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8037704:	e841 2300 	strex	r3, r2, [r1]
 8037708:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 803770a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803770c:	2b00      	cmp	r3, #0
 803770e:	d1e4      	bne.n	80376da <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8037710:	687b      	ldr	r3, [r7, #4]
 8037712:	681b      	ldr	r3, [r3, #0]
 8037714:	3308      	adds	r3, #8
 8037716:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803771a:	e853 3f00 	ldrex	r3, [r3]
 803771e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8037720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8037722:	4b57      	ldr	r3, [pc, #348]	; (8037880 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8037724:	4013      	ands	r3, r2
 8037726:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803772a:	687b      	ldr	r3, [r7, #4]
 803772c:	681b      	ldr	r3, [r3, #0]
 803772e:	3308      	adds	r3, #8
 8037730:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8037734:	65ba      	str	r2, [r7, #88]	; 0x58
 8037736:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037738:	6d79      	ldr	r1, [r7, #84]	; 0x54
 803773a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 803773c:	e841 2300 	strex	r3, r2, [r1]
 8037740:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8037742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8037744:	2b00      	cmp	r3, #0
 8037746:	d1e3      	bne.n	8037710 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8037748:	687b      	ldr	r3, [r7, #4]
 803774a:	2220      	movs	r2, #32
 803774c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8037750:	687b      	ldr	r3, [r7, #4]
 8037752:	2200      	movs	r2, #0
 8037754:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037756:	687b      	ldr	r3, [r7, #4]
 8037758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803775a:	2b01      	cmp	r3, #1
 803775c:	d12e      	bne.n	80377bc <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803775e:	687b      	ldr	r3, [r7, #4]
 8037760:	2200      	movs	r2, #0
 8037762:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8037764:	687b      	ldr	r3, [r7, #4]
 8037766:	681b      	ldr	r3, [r3, #0]
 8037768:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803776c:	e853 3f00 	ldrex	r3, [r3]
 8037770:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8037772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037774:	f023 0310 	bic.w	r3, r3, #16
 8037778:	67fb      	str	r3, [r7, #124]	; 0x7c
 803777a:	687b      	ldr	r3, [r7, #4]
 803777c:	681b      	ldr	r3, [r3, #0]
 803777e:	461a      	mov	r2, r3
 8037780:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8037782:	647b      	str	r3, [r7, #68]	; 0x44
 8037784:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037786:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8037788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803778a:	e841 2300 	strex	r3, r2, [r1]
 803778e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8037790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037792:	2b00      	cmp	r3, #0
 8037794:	d1e6      	bne.n	8037764 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8037796:	687b      	ldr	r3, [r7, #4]
 8037798:	681b      	ldr	r3, [r3, #0]
 803779a:	69db      	ldr	r3, [r3, #28]
 803779c:	f003 0310 	and.w	r3, r3, #16
 80377a0:	2b10      	cmp	r3, #16
 80377a2:	d103      	bne.n	80377ac <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80377a4:	687b      	ldr	r3, [r7, #4]
 80377a6:	681b      	ldr	r3, [r3, #0]
 80377a8:	2210      	movs	r2, #16
 80377aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80377ac:	687b      	ldr	r3, [r7, #4]
 80377ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80377b2:	4619      	mov	r1, r3
 80377b4:	6878      	ldr	r0, [r7, #4]
 80377b6:	f7fe f96d 	bl	8035a94 <HAL_UARTEx_RxEventCallback>
 80377ba:	e002      	b.n	80377c2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80377bc:	6878      	ldr	r0, [r7, #4]
 80377be:	f7f2 f95f 	bl	8029a80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80377c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80377c6:	2b00      	cmp	r3, #0
 80377c8:	d006      	beq.n	80377d8 <UART_RxISR_16BIT_FIFOEN+0x250>
 80377ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80377ce:	f003 0320 	and.w	r3, r3, #32
 80377d2:	2b00      	cmp	r3, #0
 80377d4:	f47f aefc 	bne.w	80375d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80377d8:	687b      	ldr	r3, [r7, #4]
 80377da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80377de:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80377e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80377e6:	2b00      	cmp	r3, #0
 80377e8:	d045      	beq.n	8037876 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80377ea:	687b      	ldr	r3, [r7, #4]
 80377ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80377f0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80377f4:	429a      	cmp	r2, r3
 80377f6:	d23e      	bcs.n	8037876 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80377f8:	687b      	ldr	r3, [r7, #4]
 80377fa:	681b      	ldr	r3, [r3, #0]
 80377fc:	3308      	adds	r3, #8
 80377fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037802:	e853 3f00 	ldrex	r3, [r3]
 8037806:	623b      	str	r3, [r7, #32]
   return(result);
 8037808:	6a3b      	ldr	r3, [r7, #32]
 803780a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803780e:	677b      	str	r3, [r7, #116]	; 0x74
 8037810:	687b      	ldr	r3, [r7, #4]
 8037812:	681b      	ldr	r3, [r3, #0]
 8037814:	3308      	adds	r3, #8
 8037816:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8037818:	633a      	str	r2, [r7, #48]	; 0x30
 803781a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803781c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803781e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8037820:	e841 2300 	strex	r3, r2, [r1]
 8037824:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8037826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037828:	2b00      	cmp	r3, #0
 803782a:	d1e5      	bne.n	80377f8 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 803782c:	687b      	ldr	r3, [r7, #4]
 803782e:	4a15      	ldr	r2, [pc, #84]	; (8037884 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8037830:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8037832:	687b      	ldr	r3, [r7, #4]
 8037834:	681b      	ldr	r3, [r3, #0]
 8037836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037838:	693b      	ldr	r3, [r7, #16]
 803783a:	e853 3f00 	ldrex	r3, [r3]
 803783e:	60fb      	str	r3, [r7, #12]
   return(result);
 8037840:	68fb      	ldr	r3, [r7, #12]
 8037842:	f043 0320 	orr.w	r3, r3, #32
 8037846:	673b      	str	r3, [r7, #112]	; 0x70
 8037848:	687b      	ldr	r3, [r7, #4]
 803784a:	681b      	ldr	r3, [r3, #0]
 803784c:	461a      	mov	r2, r3
 803784e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8037850:	61fb      	str	r3, [r7, #28]
 8037852:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037854:	69b9      	ldr	r1, [r7, #24]
 8037856:	69fa      	ldr	r2, [r7, #28]
 8037858:	e841 2300 	strex	r3, r2, [r1]
 803785c:	617b      	str	r3, [r7, #20]
   return(result);
 803785e:	697b      	ldr	r3, [r7, #20]
 8037860:	2b00      	cmp	r3, #0
 8037862:	d1e6      	bne.n	8037832 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037864:	e007      	b.n	8037876 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037866:	687b      	ldr	r3, [r7, #4]
 8037868:	681b      	ldr	r3, [r3, #0]
 803786a:	699a      	ldr	r2, [r3, #24]
 803786c:	687b      	ldr	r3, [r7, #4]
 803786e:	681b      	ldr	r3, [r3, #0]
 8037870:	f042 0208 	orr.w	r2, r2, #8
 8037874:	619a      	str	r2, [r3, #24]
}
 8037876:	bf00      	nop
 8037878:	37a0      	adds	r7, #160	; 0xa0
 803787a:	46bd      	mov	sp, r7
 803787c:	bd80      	pop	{r7, pc}
 803787e:	bf00      	nop
 8037880:	effffffe 	.word	0xeffffffe
 8037884:	0803712f 	.word	0x0803712f

08037888 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8037888:	b480      	push	{r7}
 803788a:	b083      	sub	sp, #12
 803788c:	af00      	add	r7, sp, #0
 803788e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8037890:	bf00      	nop
 8037892:	370c      	adds	r7, #12
 8037894:	46bd      	mov	sp, r7
 8037896:	f85d 7b04 	ldr.w	r7, [sp], #4
 803789a:	4770      	bx	lr

0803789c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 803789c:	b480      	push	{r7}
 803789e:	b083      	sub	sp, #12
 80378a0:	af00      	add	r7, sp, #0
 80378a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80378a4:	bf00      	nop
 80378a6:	370c      	adds	r7, #12
 80378a8:	46bd      	mov	sp, r7
 80378aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80378ae:	4770      	bx	lr

080378b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80378b0:	b480      	push	{r7}
 80378b2:	b083      	sub	sp, #12
 80378b4:	af00      	add	r7, sp, #0
 80378b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80378b8:	bf00      	nop
 80378ba:	370c      	adds	r7, #12
 80378bc:	46bd      	mov	sp, r7
 80378be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80378c2:	4770      	bx	lr

080378c4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80378c4:	b580      	push	{r7, lr}
 80378c6:	b084      	sub	sp, #16
 80378c8:	af00      	add	r7, sp, #0
 80378ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80378cc:	687b      	ldr	r3, [r7, #4]
 80378ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80378d2:	2b01      	cmp	r3, #1
 80378d4:	d101      	bne.n	80378da <HAL_UARTEx_EnableFifoMode+0x16>
 80378d6:	2302      	movs	r3, #2
 80378d8:	e02b      	b.n	8037932 <HAL_UARTEx_EnableFifoMode+0x6e>
 80378da:	687b      	ldr	r3, [r7, #4]
 80378dc:	2201      	movs	r2, #1
 80378de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80378e2:	687b      	ldr	r3, [r7, #4]
 80378e4:	2224      	movs	r2, #36	; 0x24
 80378e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80378ea:	687b      	ldr	r3, [r7, #4]
 80378ec:	681b      	ldr	r3, [r3, #0]
 80378ee:	681b      	ldr	r3, [r3, #0]
 80378f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80378f2:	687b      	ldr	r3, [r7, #4]
 80378f4:	681b      	ldr	r3, [r3, #0]
 80378f6:	681a      	ldr	r2, [r3, #0]
 80378f8:	687b      	ldr	r3, [r7, #4]
 80378fa:	681b      	ldr	r3, [r3, #0]
 80378fc:	f022 0201 	bic.w	r2, r2, #1
 8037900:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8037902:	68fb      	ldr	r3, [r7, #12]
 8037904:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8037908:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 803790a:	687b      	ldr	r3, [r7, #4]
 803790c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8037910:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8037912:	687b      	ldr	r3, [r7, #4]
 8037914:	681b      	ldr	r3, [r3, #0]
 8037916:	68fa      	ldr	r2, [r7, #12]
 8037918:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 803791a:	6878      	ldr	r0, [r7, #4]
 803791c:	f000 f8c2 	bl	8037aa4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8037920:	687b      	ldr	r3, [r7, #4]
 8037922:	2220      	movs	r2, #32
 8037924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8037928:	687b      	ldr	r3, [r7, #4]
 803792a:	2200      	movs	r2, #0
 803792c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8037930:	2300      	movs	r3, #0
}
 8037932:	4618      	mov	r0, r3
 8037934:	3710      	adds	r7, #16
 8037936:	46bd      	mov	sp, r7
 8037938:	bd80      	pop	{r7, pc}

0803793a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 803793a:	b480      	push	{r7}
 803793c:	b085      	sub	sp, #20
 803793e:	af00      	add	r7, sp, #0
 8037940:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8037942:	687b      	ldr	r3, [r7, #4]
 8037944:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037948:	2b01      	cmp	r3, #1
 803794a:	d101      	bne.n	8037950 <HAL_UARTEx_DisableFifoMode+0x16>
 803794c:	2302      	movs	r3, #2
 803794e:	e027      	b.n	80379a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8037950:	687b      	ldr	r3, [r7, #4]
 8037952:	2201      	movs	r2, #1
 8037954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8037958:	687b      	ldr	r3, [r7, #4]
 803795a:	2224      	movs	r2, #36	; 0x24
 803795c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8037960:	687b      	ldr	r3, [r7, #4]
 8037962:	681b      	ldr	r3, [r3, #0]
 8037964:	681b      	ldr	r3, [r3, #0]
 8037966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8037968:	687b      	ldr	r3, [r7, #4]
 803796a:	681b      	ldr	r3, [r3, #0]
 803796c:	681a      	ldr	r2, [r3, #0]
 803796e:	687b      	ldr	r3, [r7, #4]
 8037970:	681b      	ldr	r3, [r3, #0]
 8037972:	f022 0201 	bic.w	r2, r2, #1
 8037976:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8037978:	68fb      	ldr	r3, [r7, #12]
 803797a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 803797e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8037980:	687b      	ldr	r3, [r7, #4]
 8037982:	2200      	movs	r2, #0
 8037984:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8037986:	687b      	ldr	r3, [r7, #4]
 8037988:	681b      	ldr	r3, [r3, #0]
 803798a:	68fa      	ldr	r2, [r7, #12]
 803798c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803798e:	687b      	ldr	r3, [r7, #4]
 8037990:	2220      	movs	r2, #32
 8037992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8037996:	687b      	ldr	r3, [r7, #4]
 8037998:	2200      	movs	r2, #0
 803799a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803799e:	2300      	movs	r3, #0
}
 80379a0:	4618      	mov	r0, r3
 80379a2:	3714      	adds	r7, #20
 80379a4:	46bd      	mov	sp, r7
 80379a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80379aa:	4770      	bx	lr

080379ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80379ac:	b580      	push	{r7, lr}
 80379ae:	b084      	sub	sp, #16
 80379b0:	af00      	add	r7, sp, #0
 80379b2:	6078      	str	r0, [r7, #4]
 80379b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80379b6:	687b      	ldr	r3, [r7, #4]
 80379b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80379bc:	2b01      	cmp	r3, #1
 80379be:	d101      	bne.n	80379c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80379c0:	2302      	movs	r3, #2
 80379c2:	e02d      	b.n	8037a20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80379c4:	687b      	ldr	r3, [r7, #4]
 80379c6:	2201      	movs	r2, #1
 80379c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80379cc:	687b      	ldr	r3, [r7, #4]
 80379ce:	2224      	movs	r2, #36	; 0x24
 80379d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80379d4:	687b      	ldr	r3, [r7, #4]
 80379d6:	681b      	ldr	r3, [r3, #0]
 80379d8:	681b      	ldr	r3, [r3, #0]
 80379da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80379dc:	687b      	ldr	r3, [r7, #4]
 80379de:	681b      	ldr	r3, [r3, #0]
 80379e0:	681a      	ldr	r2, [r3, #0]
 80379e2:	687b      	ldr	r3, [r7, #4]
 80379e4:	681b      	ldr	r3, [r3, #0]
 80379e6:	f022 0201 	bic.w	r2, r2, #1
 80379ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80379ec:	687b      	ldr	r3, [r7, #4]
 80379ee:	681b      	ldr	r3, [r3, #0]
 80379f0:	689b      	ldr	r3, [r3, #8]
 80379f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80379f6:	687b      	ldr	r3, [r7, #4]
 80379f8:	681b      	ldr	r3, [r3, #0]
 80379fa:	683a      	ldr	r2, [r7, #0]
 80379fc:	430a      	orrs	r2, r1
 80379fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8037a00:	6878      	ldr	r0, [r7, #4]
 8037a02:	f000 f84f 	bl	8037aa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8037a06:	687b      	ldr	r3, [r7, #4]
 8037a08:	681b      	ldr	r3, [r3, #0]
 8037a0a:	68fa      	ldr	r2, [r7, #12]
 8037a0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8037a0e:	687b      	ldr	r3, [r7, #4]
 8037a10:	2220      	movs	r2, #32
 8037a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8037a16:	687b      	ldr	r3, [r7, #4]
 8037a18:	2200      	movs	r2, #0
 8037a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8037a1e:	2300      	movs	r3, #0
}
 8037a20:	4618      	mov	r0, r3
 8037a22:	3710      	adds	r7, #16
 8037a24:	46bd      	mov	sp, r7
 8037a26:	bd80      	pop	{r7, pc}

08037a28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8037a28:	b580      	push	{r7, lr}
 8037a2a:	b084      	sub	sp, #16
 8037a2c:	af00      	add	r7, sp, #0
 8037a2e:	6078      	str	r0, [r7, #4]
 8037a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8037a32:	687b      	ldr	r3, [r7, #4]
 8037a34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037a38:	2b01      	cmp	r3, #1
 8037a3a:	d101      	bne.n	8037a40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8037a3c:	2302      	movs	r3, #2
 8037a3e:	e02d      	b.n	8037a9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8037a40:	687b      	ldr	r3, [r7, #4]
 8037a42:	2201      	movs	r2, #1
 8037a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8037a48:	687b      	ldr	r3, [r7, #4]
 8037a4a:	2224      	movs	r2, #36	; 0x24
 8037a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8037a50:	687b      	ldr	r3, [r7, #4]
 8037a52:	681b      	ldr	r3, [r3, #0]
 8037a54:	681b      	ldr	r3, [r3, #0]
 8037a56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8037a58:	687b      	ldr	r3, [r7, #4]
 8037a5a:	681b      	ldr	r3, [r3, #0]
 8037a5c:	681a      	ldr	r2, [r3, #0]
 8037a5e:	687b      	ldr	r3, [r7, #4]
 8037a60:	681b      	ldr	r3, [r3, #0]
 8037a62:	f022 0201 	bic.w	r2, r2, #1
 8037a66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8037a68:	687b      	ldr	r3, [r7, #4]
 8037a6a:	681b      	ldr	r3, [r3, #0]
 8037a6c:	689b      	ldr	r3, [r3, #8]
 8037a6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8037a72:	687b      	ldr	r3, [r7, #4]
 8037a74:	681b      	ldr	r3, [r3, #0]
 8037a76:	683a      	ldr	r2, [r7, #0]
 8037a78:	430a      	orrs	r2, r1
 8037a7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8037a7c:	6878      	ldr	r0, [r7, #4]
 8037a7e:	f000 f811 	bl	8037aa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8037a82:	687b      	ldr	r3, [r7, #4]
 8037a84:	681b      	ldr	r3, [r3, #0]
 8037a86:	68fa      	ldr	r2, [r7, #12]
 8037a88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8037a8a:	687b      	ldr	r3, [r7, #4]
 8037a8c:	2220      	movs	r2, #32
 8037a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8037a92:	687b      	ldr	r3, [r7, #4]
 8037a94:	2200      	movs	r2, #0
 8037a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8037a9a:	2300      	movs	r3, #0
}
 8037a9c:	4618      	mov	r0, r3
 8037a9e:	3710      	adds	r7, #16
 8037aa0:	46bd      	mov	sp, r7
 8037aa2:	bd80      	pop	{r7, pc}

08037aa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8037aa4:	b480      	push	{r7}
 8037aa6:	b085      	sub	sp, #20
 8037aa8:	af00      	add	r7, sp, #0
 8037aaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8037aac:	687b      	ldr	r3, [r7, #4]
 8037aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8037ab0:	2b00      	cmp	r3, #0
 8037ab2:	d108      	bne.n	8037ac6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8037ab4:	687b      	ldr	r3, [r7, #4]
 8037ab6:	2201      	movs	r2, #1
 8037ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8037abc:	687b      	ldr	r3, [r7, #4]
 8037abe:	2201      	movs	r2, #1
 8037ac0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8037ac4:	e031      	b.n	8037b2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8037ac6:	2310      	movs	r3, #16
 8037ac8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8037aca:	2310      	movs	r3, #16
 8037acc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8037ace:	687b      	ldr	r3, [r7, #4]
 8037ad0:	681b      	ldr	r3, [r3, #0]
 8037ad2:	689b      	ldr	r3, [r3, #8]
 8037ad4:	0e5b      	lsrs	r3, r3, #25
 8037ad6:	b2db      	uxtb	r3, r3
 8037ad8:	f003 0307 	and.w	r3, r3, #7
 8037adc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8037ade:	687b      	ldr	r3, [r7, #4]
 8037ae0:	681b      	ldr	r3, [r3, #0]
 8037ae2:	689b      	ldr	r3, [r3, #8]
 8037ae4:	0f5b      	lsrs	r3, r3, #29
 8037ae6:	b2db      	uxtb	r3, r3
 8037ae8:	f003 0307 	and.w	r3, r3, #7
 8037aec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8037aee:	7bbb      	ldrb	r3, [r7, #14]
 8037af0:	7b3a      	ldrb	r2, [r7, #12]
 8037af2:	4911      	ldr	r1, [pc, #68]	; (8037b38 <UARTEx_SetNbDataToProcess+0x94>)
 8037af4:	5c8a      	ldrb	r2, [r1, r2]
 8037af6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8037afa:	7b3a      	ldrb	r2, [r7, #12]
 8037afc:	490f      	ldr	r1, [pc, #60]	; (8037b3c <UARTEx_SetNbDataToProcess+0x98>)
 8037afe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8037b00:	fb93 f3f2 	sdiv	r3, r3, r2
 8037b04:	b29a      	uxth	r2, r3
 8037b06:	687b      	ldr	r3, [r7, #4]
 8037b08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8037b0c:	7bfb      	ldrb	r3, [r7, #15]
 8037b0e:	7b7a      	ldrb	r2, [r7, #13]
 8037b10:	4909      	ldr	r1, [pc, #36]	; (8037b38 <UARTEx_SetNbDataToProcess+0x94>)
 8037b12:	5c8a      	ldrb	r2, [r1, r2]
 8037b14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8037b18:	7b7a      	ldrb	r2, [r7, #13]
 8037b1a:	4908      	ldr	r1, [pc, #32]	; (8037b3c <UARTEx_SetNbDataToProcess+0x98>)
 8037b1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8037b1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8037b22:	b29a      	uxth	r2, r3
 8037b24:	687b      	ldr	r3, [r7, #4]
 8037b26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8037b2a:	bf00      	nop
 8037b2c:	3714      	adds	r7, #20
 8037b2e:	46bd      	mov	sp, r7
 8037b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037b34:	4770      	bx	lr
 8037b36:	bf00      	nop
 8037b38:	08058590 	.word	0x08058590
 8037b3c:	08058598 	.word	0x08058598

08037b40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8037b40:	b084      	sub	sp, #16
 8037b42:	b580      	push	{r7, lr}
 8037b44:	b084      	sub	sp, #16
 8037b46:	af00      	add	r7, sp, #0
 8037b48:	6078      	str	r0, [r7, #4]
 8037b4a:	f107 001c 	add.w	r0, r7, #28
 8037b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8037b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037b54:	2b01      	cmp	r3, #1
 8037b56:	d120      	bne.n	8037b9a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8037b58:	687b      	ldr	r3, [r7, #4]
 8037b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037b5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8037b60:	687b      	ldr	r3, [r7, #4]
 8037b62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8037b64:	687b      	ldr	r3, [r7, #4]
 8037b66:	68da      	ldr	r2, [r3, #12]
 8037b68:	4b2a      	ldr	r3, [pc, #168]	; (8037c14 <USB_CoreInit+0xd4>)
 8037b6a:	4013      	ands	r3, r2
 8037b6c:	687a      	ldr	r2, [r7, #4]
 8037b6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8037b70:	687b      	ldr	r3, [r7, #4]
 8037b72:	68db      	ldr	r3, [r3, #12]
 8037b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8037b78:	687b      	ldr	r3, [r7, #4]
 8037b7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8037b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037b7e:	2b01      	cmp	r3, #1
 8037b80:	d105      	bne.n	8037b8e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8037b82:	687b      	ldr	r3, [r7, #4]
 8037b84:	68db      	ldr	r3, [r3, #12]
 8037b86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8037b8a:	687b      	ldr	r3, [r7, #4]
 8037b8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8037b8e:	6878      	ldr	r0, [r7, #4]
 8037b90:	f001 fc04 	bl	803939c <USB_CoreReset>
 8037b94:	4603      	mov	r3, r0
 8037b96:	73fb      	strb	r3, [r7, #15]
 8037b98:	e01a      	b.n	8037bd0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8037b9a:	687b      	ldr	r3, [r7, #4]
 8037b9c:	68db      	ldr	r3, [r3, #12]
 8037b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8037ba2:	687b      	ldr	r3, [r7, #4]
 8037ba4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8037ba6:	6878      	ldr	r0, [r7, #4]
 8037ba8:	f001 fbf8 	bl	803939c <USB_CoreReset>
 8037bac:	4603      	mov	r3, r0
 8037bae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8037bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8037bb2:	2b00      	cmp	r3, #0
 8037bb4:	d106      	bne.n	8037bc4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8037bb6:	687b      	ldr	r3, [r7, #4]
 8037bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037bba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8037bbe:	687b      	ldr	r3, [r7, #4]
 8037bc0:	639a      	str	r2, [r3, #56]	; 0x38
 8037bc2:	e005      	b.n	8037bd0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8037bc4:	687b      	ldr	r3, [r7, #4]
 8037bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8037bcc:	687b      	ldr	r3, [r7, #4]
 8037bce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8037bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037bd2:	2b01      	cmp	r3, #1
 8037bd4:	d116      	bne.n	8037c04 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8037bd6:	687b      	ldr	r3, [r7, #4]
 8037bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8037bda:	b29a      	uxth	r2, r3
 8037bdc:	687b      	ldr	r3, [r7, #4]
 8037bde:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8037be0:	687b      	ldr	r3, [r7, #4]
 8037be2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8037be4:	4b0c      	ldr	r3, [pc, #48]	; (8037c18 <USB_CoreInit+0xd8>)
 8037be6:	4313      	orrs	r3, r2
 8037be8:	687a      	ldr	r2, [r7, #4]
 8037bea:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8037bec:	687b      	ldr	r3, [r7, #4]
 8037bee:	689b      	ldr	r3, [r3, #8]
 8037bf0:	f043 0206 	orr.w	r2, r3, #6
 8037bf4:	687b      	ldr	r3, [r7, #4]
 8037bf6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8037bf8:	687b      	ldr	r3, [r7, #4]
 8037bfa:	689b      	ldr	r3, [r3, #8]
 8037bfc:	f043 0220 	orr.w	r2, r3, #32
 8037c00:	687b      	ldr	r3, [r7, #4]
 8037c02:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8037c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8037c06:	4618      	mov	r0, r3
 8037c08:	3710      	adds	r7, #16
 8037c0a:	46bd      	mov	sp, r7
 8037c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8037c10:	b004      	add	sp, #16
 8037c12:	4770      	bx	lr
 8037c14:	ffbdffbf 	.word	0xffbdffbf
 8037c18:	03ee0000 	.word	0x03ee0000

08037c1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8037c1c:	b480      	push	{r7}
 8037c1e:	b087      	sub	sp, #28
 8037c20:	af00      	add	r7, sp, #0
 8037c22:	60f8      	str	r0, [r7, #12]
 8037c24:	60b9      	str	r1, [r7, #8]
 8037c26:	4613      	mov	r3, r2
 8037c28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8037c2a:	79fb      	ldrb	r3, [r7, #7]
 8037c2c:	2b02      	cmp	r3, #2
 8037c2e:	d165      	bne.n	8037cfc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8037c30:	68bb      	ldr	r3, [r7, #8]
 8037c32:	4a41      	ldr	r2, [pc, #260]	; (8037d38 <USB_SetTurnaroundTime+0x11c>)
 8037c34:	4293      	cmp	r3, r2
 8037c36:	d906      	bls.n	8037c46 <USB_SetTurnaroundTime+0x2a>
 8037c38:	68bb      	ldr	r3, [r7, #8]
 8037c3a:	4a40      	ldr	r2, [pc, #256]	; (8037d3c <USB_SetTurnaroundTime+0x120>)
 8037c3c:	4293      	cmp	r3, r2
 8037c3e:	d202      	bcs.n	8037c46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8037c40:	230f      	movs	r3, #15
 8037c42:	617b      	str	r3, [r7, #20]
 8037c44:	e062      	b.n	8037d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8037c46:	68bb      	ldr	r3, [r7, #8]
 8037c48:	4a3c      	ldr	r2, [pc, #240]	; (8037d3c <USB_SetTurnaroundTime+0x120>)
 8037c4a:	4293      	cmp	r3, r2
 8037c4c:	d306      	bcc.n	8037c5c <USB_SetTurnaroundTime+0x40>
 8037c4e:	68bb      	ldr	r3, [r7, #8]
 8037c50:	4a3b      	ldr	r2, [pc, #236]	; (8037d40 <USB_SetTurnaroundTime+0x124>)
 8037c52:	4293      	cmp	r3, r2
 8037c54:	d202      	bcs.n	8037c5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8037c56:	230e      	movs	r3, #14
 8037c58:	617b      	str	r3, [r7, #20]
 8037c5a:	e057      	b.n	8037d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8037c5c:	68bb      	ldr	r3, [r7, #8]
 8037c5e:	4a38      	ldr	r2, [pc, #224]	; (8037d40 <USB_SetTurnaroundTime+0x124>)
 8037c60:	4293      	cmp	r3, r2
 8037c62:	d306      	bcc.n	8037c72 <USB_SetTurnaroundTime+0x56>
 8037c64:	68bb      	ldr	r3, [r7, #8]
 8037c66:	4a37      	ldr	r2, [pc, #220]	; (8037d44 <USB_SetTurnaroundTime+0x128>)
 8037c68:	4293      	cmp	r3, r2
 8037c6a:	d202      	bcs.n	8037c72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8037c6c:	230d      	movs	r3, #13
 8037c6e:	617b      	str	r3, [r7, #20]
 8037c70:	e04c      	b.n	8037d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8037c72:	68bb      	ldr	r3, [r7, #8]
 8037c74:	4a33      	ldr	r2, [pc, #204]	; (8037d44 <USB_SetTurnaroundTime+0x128>)
 8037c76:	4293      	cmp	r3, r2
 8037c78:	d306      	bcc.n	8037c88 <USB_SetTurnaroundTime+0x6c>
 8037c7a:	68bb      	ldr	r3, [r7, #8]
 8037c7c:	4a32      	ldr	r2, [pc, #200]	; (8037d48 <USB_SetTurnaroundTime+0x12c>)
 8037c7e:	4293      	cmp	r3, r2
 8037c80:	d802      	bhi.n	8037c88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8037c82:	230c      	movs	r3, #12
 8037c84:	617b      	str	r3, [r7, #20]
 8037c86:	e041      	b.n	8037d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8037c88:	68bb      	ldr	r3, [r7, #8]
 8037c8a:	4a2f      	ldr	r2, [pc, #188]	; (8037d48 <USB_SetTurnaroundTime+0x12c>)
 8037c8c:	4293      	cmp	r3, r2
 8037c8e:	d906      	bls.n	8037c9e <USB_SetTurnaroundTime+0x82>
 8037c90:	68bb      	ldr	r3, [r7, #8]
 8037c92:	4a2e      	ldr	r2, [pc, #184]	; (8037d4c <USB_SetTurnaroundTime+0x130>)
 8037c94:	4293      	cmp	r3, r2
 8037c96:	d802      	bhi.n	8037c9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8037c98:	230b      	movs	r3, #11
 8037c9a:	617b      	str	r3, [r7, #20]
 8037c9c:	e036      	b.n	8037d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8037c9e:	68bb      	ldr	r3, [r7, #8]
 8037ca0:	4a2a      	ldr	r2, [pc, #168]	; (8037d4c <USB_SetTurnaroundTime+0x130>)
 8037ca2:	4293      	cmp	r3, r2
 8037ca4:	d906      	bls.n	8037cb4 <USB_SetTurnaroundTime+0x98>
 8037ca6:	68bb      	ldr	r3, [r7, #8]
 8037ca8:	4a29      	ldr	r2, [pc, #164]	; (8037d50 <USB_SetTurnaroundTime+0x134>)
 8037caa:	4293      	cmp	r3, r2
 8037cac:	d802      	bhi.n	8037cb4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8037cae:	230a      	movs	r3, #10
 8037cb0:	617b      	str	r3, [r7, #20]
 8037cb2:	e02b      	b.n	8037d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8037cb4:	68bb      	ldr	r3, [r7, #8]
 8037cb6:	4a26      	ldr	r2, [pc, #152]	; (8037d50 <USB_SetTurnaroundTime+0x134>)
 8037cb8:	4293      	cmp	r3, r2
 8037cba:	d906      	bls.n	8037cca <USB_SetTurnaroundTime+0xae>
 8037cbc:	68bb      	ldr	r3, [r7, #8]
 8037cbe:	4a25      	ldr	r2, [pc, #148]	; (8037d54 <USB_SetTurnaroundTime+0x138>)
 8037cc0:	4293      	cmp	r3, r2
 8037cc2:	d202      	bcs.n	8037cca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8037cc4:	2309      	movs	r3, #9
 8037cc6:	617b      	str	r3, [r7, #20]
 8037cc8:	e020      	b.n	8037d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8037cca:	68bb      	ldr	r3, [r7, #8]
 8037ccc:	4a21      	ldr	r2, [pc, #132]	; (8037d54 <USB_SetTurnaroundTime+0x138>)
 8037cce:	4293      	cmp	r3, r2
 8037cd0:	d306      	bcc.n	8037ce0 <USB_SetTurnaroundTime+0xc4>
 8037cd2:	68bb      	ldr	r3, [r7, #8]
 8037cd4:	4a20      	ldr	r2, [pc, #128]	; (8037d58 <USB_SetTurnaroundTime+0x13c>)
 8037cd6:	4293      	cmp	r3, r2
 8037cd8:	d802      	bhi.n	8037ce0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8037cda:	2308      	movs	r3, #8
 8037cdc:	617b      	str	r3, [r7, #20]
 8037cde:	e015      	b.n	8037d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8037ce0:	68bb      	ldr	r3, [r7, #8]
 8037ce2:	4a1d      	ldr	r2, [pc, #116]	; (8037d58 <USB_SetTurnaroundTime+0x13c>)
 8037ce4:	4293      	cmp	r3, r2
 8037ce6:	d906      	bls.n	8037cf6 <USB_SetTurnaroundTime+0xda>
 8037ce8:	68bb      	ldr	r3, [r7, #8]
 8037cea:	4a1c      	ldr	r2, [pc, #112]	; (8037d5c <USB_SetTurnaroundTime+0x140>)
 8037cec:	4293      	cmp	r3, r2
 8037cee:	d202      	bcs.n	8037cf6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8037cf0:	2307      	movs	r3, #7
 8037cf2:	617b      	str	r3, [r7, #20]
 8037cf4:	e00a      	b.n	8037d0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8037cf6:	2306      	movs	r3, #6
 8037cf8:	617b      	str	r3, [r7, #20]
 8037cfa:	e007      	b.n	8037d0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8037cfc:	79fb      	ldrb	r3, [r7, #7]
 8037cfe:	2b00      	cmp	r3, #0
 8037d00:	d102      	bne.n	8037d08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8037d02:	2309      	movs	r3, #9
 8037d04:	617b      	str	r3, [r7, #20]
 8037d06:	e001      	b.n	8037d0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8037d08:	2309      	movs	r3, #9
 8037d0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8037d0c:	68fb      	ldr	r3, [r7, #12]
 8037d0e:	68db      	ldr	r3, [r3, #12]
 8037d10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8037d14:	68fb      	ldr	r3, [r7, #12]
 8037d16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8037d18:	68fb      	ldr	r3, [r7, #12]
 8037d1a:	68da      	ldr	r2, [r3, #12]
 8037d1c:	697b      	ldr	r3, [r7, #20]
 8037d1e:	029b      	lsls	r3, r3, #10
 8037d20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8037d24:	431a      	orrs	r2, r3
 8037d26:	68fb      	ldr	r3, [r7, #12]
 8037d28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8037d2a:	2300      	movs	r3, #0
}
 8037d2c:	4618      	mov	r0, r3
 8037d2e:	371c      	adds	r7, #28
 8037d30:	46bd      	mov	sp, r7
 8037d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037d36:	4770      	bx	lr
 8037d38:	00d8acbf 	.word	0x00d8acbf
 8037d3c:	00e4e1c0 	.word	0x00e4e1c0
 8037d40:	00f42400 	.word	0x00f42400
 8037d44:	01067380 	.word	0x01067380
 8037d48:	011a499f 	.word	0x011a499f
 8037d4c:	01312cff 	.word	0x01312cff
 8037d50:	014ca43f 	.word	0x014ca43f
 8037d54:	016e3600 	.word	0x016e3600
 8037d58:	01a6ab1f 	.word	0x01a6ab1f
 8037d5c:	01e84800 	.word	0x01e84800

08037d60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8037d60:	b480      	push	{r7}
 8037d62:	b083      	sub	sp, #12
 8037d64:	af00      	add	r7, sp, #0
 8037d66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8037d68:	687b      	ldr	r3, [r7, #4]
 8037d6a:	689b      	ldr	r3, [r3, #8]
 8037d6c:	f043 0201 	orr.w	r2, r3, #1
 8037d70:	687b      	ldr	r3, [r7, #4]
 8037d72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8037d74:	2300      	movs	r3, #0
}
 8037d76:	4618      	mov	r0, r3
 8037d78:	370c      	adds	r7, #12
 8037d7a:	46bd      	mov	sp, r7
 8037d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037d80:	4770      	bx	lr

08037d82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8037d82:	b480      	push	{r7}
 8037d84:	b083      	sub	sp, #12
 8037d86:	af00      	add	r7, sp, #0
 8037d88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8037d8a:	687b      	ldr	r3, [r7, #4]
 8037d8c:	689b      	ldr	r3, [r3, #8]
 8037d8e:	f023 0201 	bic.w	r2, r3, #1
 8037d92:	687b      	ldr	r3, [r7, #4]
 8037d94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8037d96:	2300      	movs	r3, #0
}
 8037d98:	4618      	mov	r0, r3
 8037d9a:	370c      	adds	r7, #12
 8037d9c:	46bd      	mov	sp, r7
 8037d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037da2:	4770      	bx	lr

08037da4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8037da4:	b580      	push	{r7, lr}
 8037da6:	b084      	sub	sp, #16
 8037da8:	af00      	add	r7, sp, #0
 8037daa:	6078      	str	r0, [r7, #4]
 8037dac:	460b      	mov	r3, r1
 8037dae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8037db0:	2300      	movs	r3, #0
 8037db2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8037db4:	687b      	ldr	r3, [r7, #4]
 8037db6:	68db      	ldr	r3, [r3, #12]
 8037db8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8037dbc:	687b      	ldr	r3, [r7, #4]
 8037dbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8037dc0:	78fb      	ldrb	r3, [r7, #3]
 8037dc2:	2b01      	cmp	r3, #1
 8037dc4:	d115      	bne.n	8037df2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8037dc6:	687b      	ldr	r3, [r7, #4]
 8037dc8:	68db      	ldr	r3, [r3, #12]
 8037dca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8037dce:	687b      	ldr	r3, [r7, #4]
 8037dd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8037dd2:	2001      	movs	r0, #1
 8037dd4:	f7f2 ff76 	bl	802acc4 <HAL_Delay>
      ms++;
 8037dd8:	68fb      	ldr	r3, [r7, #12]
 8037dda:	3301      	adds	r3, #1
 8037ddc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8037dde:	6878      	ldr	r0, [r7, #4]
 8037de0:	f001 fa4b 	bl	803927a <USB_GetMode>
 8037de4:	4603      	mov	r3, r0
 8037de6:	2b01      	cmp	r3, #1
 8037de8:	d01e      	beq.n	8037e28 <USB_SetCurrentMode+0x84>
 8037dea:	68fb      	ldr	r3, [r7, #12]
 8037dec:	2b31      	cmp	r3, #49	; 0x31
 8037dee:	d9f0      	bls.n	8037dd2 <USB_SetCurrentMode+0x2e>
 8037df0:	e01a      	b.n	8037e28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8037df2:	78fb      	ldrb	r3, [r7, #3]
 8037df4:	2b00      	cmp	r3, #0
 8037df6:	d115      	bne.n	8037e24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8037df8:	687b      	ldr	r3, [r7, #4]
 8037dfa:	68db      	ldr	r3, [r3, #12]
 8037dfc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8037e00:	687b      	ldr	r3, [r7, #4]
 8037e02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8037e04:	2001      	movs	r0, #1
 8037e06:	f7f2 ff5d 	bl	802acc4 <HAL_Delay>
      ms++;
 8037e0a:	68fb      	ldr	r3, [r7, #12]
 8037e0c:	3301      	adds	r3, #1
 8037e0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8037e10:	6878      	ldr	r0, [r7, #4]
 8037e12:	f001 fa32 	bl	803927a <USB_GetMode>
 8037e16:	4603      	mov	r3, r0
 8037e18:	2b00      	cmp	r3, #0
 8037e1a:	d005      	beq.n	8037e28 <USB_SetCurrentMode+0x84>
 8037e1c:	68fb      	ldr	r3, [r7, #12]
 8037e1e:	2b31      	cmp	r3, #49	; 0x31
 8037e20:	d9f0      	bls.n	8037e04 <USB_SetCurrentMode+0x60>
 8037e22:	e001      	b.n	8037e28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8037e24:	2301      	movs	r3, #1
 8037e26:	e005      	b.n	8037e34 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8037e28:	68fb      	ldr	r3, [r7, #12]
 8037e2a:	2b32      	cmp	r3, #50	; 0x32
 8037e2c:	d101      	bne.n	8037e32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8037e2e:	2301      	movs	r3, #1
 8037e30:	e000      	b.n	8037e34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8037e32:	2300      	movs	r3, #0
}
 8037e34:	4618      	mov	r0, r3
 8037e36:	3710      	adds	r7, #16
 8037e38:	46bd      	mov	sp, r7
 8037e3a:	bd80      	pop	{r7, pc}

08037e3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8037e3c:	b084      	sub	sp, #16
 8037e3e:	b580      	push	{r7, lr}
 8037e40:	b086      	sub	sp, #24
 8037e42:	af00      	add	r7, sp, #0
 8037e44:	6078      	str	r0, [r7, #4]
 8037e46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8037e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8037e4e:	2300      	movs	r3, #0
 8037e50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8037e52:	687b      	ldr	r3, [r7, #4]
 8037e54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8037e56:	2300      	movs	r3, #0
 8037e58:	613b      	str	r3, [r7, #16]
 8037e5a:	e009      	b.n	8037e70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8037e5c:	687a      	ldr	r2, [r7, #4]
 8037e5e:	693b      	ldr	r3, [r7, #16]
 8037e60:	3340      	adds	r3, #64	; 0x40
 8037e62:	009b      	lsls	r3, r3, #2
 8037e64:	4413      	add	r3, r2
 8037e66:	2200      	movs	r2, #0
 8037e68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8037e6a:	693b      	ldr	r3, [r7, #16]
 8037e6c:	3301      	adds	r3, #1
 8037e6e:	613b      	str	r3, [r7, #16]
 8037e70:	693b      	ldr	r3, [r7, #16]
 8037e72:	2b0e      	cmp	r3, #14
 8037e74:	d9f2      	bls.n	8037e5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8037e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037e78:	2b00      	cmp	r3, #0
 8037e7a:	d11c      	bne.n	8037eb6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8037e7c:	68fb      	ldr	r3, [r7, #12]
 8037e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037e82:	685b      	ldr	r3, [r3, #4]
 8037e84:	68fa      	ldr	r2, [r7, #12]
 8037e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8037e8a:	f043 0302 	orr.w	r3, r3, #2
 8037e8e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8037e90:	687b      	ldr	r3, [r7, #4]
 8037e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037e94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8037e98:	687b      	ldr	r3, [r7, #4]
 8037e9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8037e9c:	687b      	ldr	r3, [r7, #4]
 8037e9e:	681b      	ldr	r3, [r3, #0]
 8037ea0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8037ea4:	687b      	ldr	r3, [r7, #4]
 8037ea6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8037ea8:	687b      	ldr	r3, [r7, #4]
 8037eaa:	681b      	ldr	r3, [r3, #0]
 8037eac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8037eb0:	687b      	ldr	r3, [r7, #4]
 8037eb2:	601a      	str	r2, [r3, #0]
 8037eb4:	e005      	b.n	8037ec2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8037eb6:	687b      	ldr	r3, [r7, #4]
 8037eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037eba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8037ebe:	687b      	ldr	r3, [r7, #4]
 8037ec0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8037ec2:	68fb      	ldr	r3, [r7, #12]
 8037ec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8037ec8:	461a      	mov	r2, r3
 8037eca:	2300      	movs	r3, #0
 8037ecc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8037ece:	68fb      	ldr	r3, [r7, #12]
 8037ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037ed4:	4619      	mov	r1, r3
 8037ed6:	68fb      	ldr	r3, [r7, #12]
 8037ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037edc:	461a      	mov	r2, r3
 8037ede:	680b      	ldr	r3, [r1, #0]
 8037ee0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8037ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037ee4:	2b01      	cmp	r3, #1
 8037ee6:	d10c      	bne.n	8037f02 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8037ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037eea:	2b00      	cmp	r3, #0
 8037eec:	d104      	bne.n	8037ef8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8037eee:	2100      	movs	r1, #0
 8037ef0:	6878      	ldr	r0, [r7, #4]
 8037ef2:	f000 f965 	bl	80381c0 <USB_SetDevSpeed>
 8037ef6:	e008      	b.n	8037f0a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8037ef8:	2101      	movs	r1, #1
 8037efa:	6878      	ldr	r0, [r7, #4]
 8037efc:	f000 f960 	bl	80381c0 <USB_SetDevSpeed>
 8037f00:	e003      	b.n	8037f0a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8037f02:	2103      	movs	r1, #3
 8037f04:	6878      	ldr	r0, [r7, #4]
 8037f06:	f000 f95b 	bl	80381c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8037f0a:	2110      	movs	r1, #16
 8037f0c:	6878      	ldr	r0, [r7, #4]
 8037f0e:	f000 f8f3 	bl	80380f8 <USB_FlushTxFifo>
 8037f12:	4603      	mov	r3, r0
 8037f14:	2b00      	cmp	r3, #0
 8037f16:	d001      	beq.n	8037f1c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8037f18:	2301      	movs	r3, #1
 8037f1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8037f1c:	6878      	ldr	r0, [r7, #4]
 8037f1e:	f000 f91f 	bl	8038160 <USB_FlushRxFifo>
 8037f22:	4603      	mov	r3, r0
 8037f24:	2b00      	cmp	r3, #0
 8037f26:	d001      	beq.n	8037f2c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8037f28:	2301      	movs	r3, #1
 8037f2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8037f2c:	68fb      	ldr	r3, [r7, #12]
 8037f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037f32:	461a      	mov	r2, r3
 8037f34:	2300      	movs	r3, #0
 8037f36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8037f38:	68fb      	ldr	r3, [r7, #12]
 8037f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037f3e:	461a      	mov	r2, r3
 8037f40:	2300      	movs	r3, #0
 8037f42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8037f44:	68fb      	ldr	r3, [r7, #12]
 8037f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037f4a:	461a      	mov	r2, r3
 8037f4c:	2300      	movs	r3, #0
 8037f4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037f50:	2300      	movs	r3, #0
 8037f52:	613b      	str	r3, [r7, #16]
 8037f54:	e043      	b.n	8037fde <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8037f56:	693b      	ldr	r3, [r7, #16]
 8037f58:	015a      	lsls	r2, r3, #5
 8037f5a:	68fb      	ldr	r3, [r7, #12]
 8037f5c:	4413      	add	r3, r2
 8037f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f62:	681b      	ldr	r3, [r3, #0]
 8037f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8037f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8037f6c:	d118      	bne.n	8037fa0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8037f6e:	693b      	ldr	r3, [r7, #16]
 8037f70:	2b00      	cmp	r3, #0
 8037f72:	d10a      	bne.n	8037f8a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8037f74:	693b      	ldr	r3, [r7, #16]
 8037f76:	015a      	lsls	r2, r3, #5
 8037f78:	68fb      	ldr	r3, [r7, #12]
 8037f7a:	4413      	add	r3, r2
 8037f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f80:	461a      	mov	r2, r3
 8037f82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8037f86:	6013      	str	r3, [r2, #0]
 8037f88:	e013      	b.n	8037fb2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8037f8a:	693b      	ldr	r3, [r7, #16]
 8037f8c:	015a      	lsls	r2, r3, #5
 8037f8e:	68fb      	ldr	r3, [r7, #12]
 8037f90:	4413      	add	r3, r2
 8037f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f96:	461a      	mov	r2, r3
 8037f98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8037f9c:	6013      	str	r3, [r2, #0]
 8037f9e:	e008      	b.n	8037fb2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8037fa0:	693b      	ldr	r3, [r7, #16]
 8037fa2:	015a      	lsls	r2, r3, #5
 8037fa4:	68fb      	ldr	r3, [r7, #12]
 8037fa6:	4413      	add	r3, r2
 8037fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037fac:	461a      	mov	r2, r3
 8037fae:	2300      	movs	r3, #0
 8037fb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8037fb2:	693b      	ldr	r3, [r7, #16]
 8037fb4:	015a      	lsls	r2, r3, #5
 8037fb6:	68fb      	ldr	r3, [r7, #12]
 8037fb8:	4413      	add	r3, r2
 8037fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037fbe:	461a      	mov	r2, r3
 8037fc0:	2300      	movs	r3, #0
 8037fc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8037fc4:	693b      	ldr	r3, [r7, #16]
 8037fc6:	015a      	lsls	r2, r3, #5
 8037fc8:	68fb      	ldr	r3, [r7, #12]
 8037fca:	4413      	add	r3, r2
 8037fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037fd0:	461a      	mov	r2, r3
 8037fd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8037fd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037fd8:	693b      	ldr	r3, [r7, #16]
 8037fda:	3301      	adds	r3, #1
 8037fdc:	613b      	str	r3, [r7, #16]
 8037fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037fe0:	693a      	ldr	r2, [r7, #16]
 8037fe2:	429a      	cmp	r2, r3
 8037fe4:	d3b7      	bcc.n	8037f56 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037fe6:	2300      	movs	r3, #0
 8037fe8:	613b      	str	r3, [r7, #16]
 8037fea:	e043      	b.n	8038074 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8037fec:	693b      	ldr	r3, [r7, #16]
 8037fee:	015a      	lsls	r2, r3, #5
 8037ff0:	68fb      	ldr	r3, [r7, #12]
 8037ff2:	4413      	add	r3, r2
 8037ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037ff8:	681b      	ldr	r3, [r3, #0]
 8037ffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8037ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038002:	d118      	bne.n	8038036 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8038004:	693b      	ldr	r3, [r7, #16]
 8038006:	2b00      	cmp	r3, #0
 8038008:	d10a      	bne.n	8038020 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 803800a:	693b      	ldr	r3, [r7, #16]
 803800c:	015a      	lsls	r2, r3, #5
 803800e:	68fb      	ldr	r3, [r7, #12]
 8038010:	4413      	add	r3, r2
 8038012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038016:	461a      	mov	r2, r3
 8038018:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803801c:	6013      	str	r3, [r2, #0]
 803801e:	e013      	b.n	8038048 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8038020:	693b      	ldr	r3, [r7, #16]
 8038022:	015a      	lsls	r2, r3, #5
 8038024:	68fb      	ldr	r3, [r7, #12]
 8038026:	4413      	add	r3, r2
 8038028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803802c:	461a      	mov	r2, r3
 803802e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8038032:	6013      	str	r3, [r2, #0]
 8038034:	e008      	b.n	8038048 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8038036:	693b      	ldr	r3, [r7, #16]
 8038038:	015a      	lsls	r2, r3, #5
 803803a:	68fb      	ldr	r3, [r7, #12]
 803803c:	4413      	add	r3, r2
 803803e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038042:	461a      	mov	r2, r3
 8038044:	2300      	movs	r3, #0
 8038046:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8038048:	693b      	ldr	r3, [r7, #16]
 803804a:	015a      	lsls	r2, r3, #5
 803804c:	68fb      	ldr	r3, [r7, #12]
 803804e:	4413      	add	r3, r2
 8038050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038054:	461a      	mov	r2, r3
 8038056:	2300      	movs	r3, #0
 8038058:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 803805a:	693b      	ldr	r3, [r7, #16]
 803805c:	015a      	lsls	r2, r3, #5
 803805e:	68fb      	ldr	r3, [r7, #12]
 8038060:	4413      	add	r3, r2
 8038062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038066:	461a      	mov	r2, r3
 8038068:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803806c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 803806e:	693b      	ldr	r3, [r7, #16]
 8038070:	3301      	adds	r3, #1
 8038072:	613b      	str	r3, [r7, #16]
 8038074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038076:	693a      	ldr	r2, [r7, #16]
 8038078:	429a      	cmp	r2, r3
 803807a:	d3b7      	bcc.n	8037fec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 803807c:	68fb      	ldr	r3, [r7, #12]
 803807e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038082:	691b      	ldr	r3, [r3, #16]
 8038084:	68fa      	ldr	r2, [r7, #12]
 8038086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803808a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803808e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8038090:	687b      	ldr	r3, [r7, #4]
 8038092:	2200      	movs	r2, #0
 8038094:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8038096:	687b      	ldr	r3, [r7, #4]
 8038098:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 803809c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 803809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80380a0:	2b00      	cmp	r3, #0
 80380a2:	d105      	bne.n	80380b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80380a4:	687b      	ldr	r3, [r7, #4]
 80380a6:	699b      	ldr	r3, [r3, #24]
 80380a8:	f043 0210 	orr.w	r2, r3, #16
 80380ac:	687b      	ldr	r3, [r7, #4]
 80380ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80380b0:	687b      	ldr	r3, [r7, #4]
 80380b2:	699a      	ldr	r2, [r3, #24]
 80380b4:	4b0e      	ldr	r3, [pc, #56]	; (80380f0 <USB_DevInit+0x2b4>)
 80380b6:	4313      	orrs	r3, r2
 80380b8:	687a      	ldr	r2, [r7, #4]
 80380ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80380bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80380be:	2b00      	cmp	r3, #0
 80380c0:	d005      	beq.n	80380ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80380c2:	687b      	ldr	r3, [r7, #4]
 80380c4:	699b      	ldr	r3, [r3, #24]
 80380c6:	f043 0208 	orr.w	r2, r3, #8
 80380ca:	687b      	ldr	r3, [r7, #4]
 80380cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80380ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80380d0:	2b01      	cmp	r3, #1
 80380d2:	d105      	bne.n	80380e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80380d4:	687b      	ldr	r3, [r7, #4]
 80380d6:	699a      	ldr	r2, [r3, #24]
 80380d8:	4b06      	ldr	r3, [pc, #24]	; (80380f4 <USB_DevInit+0x2b8>)
 80380da:	4313      	orrs	r3, r2
 80380dc:	687a      	ldr	r2, [r7, #4]
 80380de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80380e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80380e2:	4618      	mov	r0, r3
 80380e4:	3718      	adds	r7, #24
 80380e6:	46bd      	mov	sp, r7
 80380e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80380ec:	b004      	add	sp, #16
 80380ee:	4770      	bx	lr
 80380f0:	803c3800 	.word	0x803c3800
 80380f4:	40000004 	.word	0x40000004

080380f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80380f8:	b480      	push	{r7}
 80380fa:	b085      	sub	sp, #20
 80380fc:	af00      	add	r7, sp, #0
 80380fe:	6078      	str	r0, [r7, #4]
 8038100:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8038102:	2300      	movs	r3, #0
 8038104:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8038106:	68fb      	ldr	r3, [r7, #12]
 8038108:	3301      	adds	r3, #1
 803810a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803810c:	68fb      	ldr	r3, [r7, #12]
 803810e:	4a13      	ldr	r2, [pc, #76]	; (803815c <USB_FlushTxFifo+0x64>)
 8038110:	4293      	cmp	r3, r2
 8038112:	d901      	bls.n	8038118 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8038114:	2303      	movs	r3, #3
 8038116:	e01b      	b.n	8038150 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8038118:	687b      	ldr	r3, [r7, #4]
 803811a:	691b      	ldr	r3, [r3, #16]
 803811c:	2b00      	cmp	r3, #0
 803811e:	daf2      	bge.n	8038106 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8038120:	2300      	movs	r3, #0
 8038122:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8038124:	683b      	ldr	r3, [r7, #0]
 8038126:	019b      	lsls	r3, r3, #6
 8038128:	f043 0220 	orr.w	r2, r3, #32
 803812c:	687b      	ldr	r3, [r7, #4]
 803812e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8038130:	68fb      	ldr	r3, [r7, #12]
 8038132:	3301      	adds	r3, #1
 8038134:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8038136:	68fb      	ldr	r3, [r7, #12]
 8038138:	4a08      	ldr	r2, [pc, #32]	; (803815c <USB_FlushTxFifo+0x64>)
 803813a:	4293      	cmp	r3, r2
 803813c:	d901      	bls.n	8038142 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 803813e:	2303      	movs	r3, #3
 8038140:	e006      	b.n	8038150 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8038142:	687b      	ldr	r3, [r7, #4]
 8038144:	691b      	ldr	r3, [r3, #16]
 8038146:	f003 0320 	and.w	r3, r3, #32
 803814a:	2b20      	cmp	r3, #32
 803814c:	d0f0      	beq.n	8038130 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 803814e:	2300      	movs	r3, #0
}
 8038150:	4618      	mov	r0, r3
 8038152:	3714      	adds	r7, #20
 8038154:	46bd      	mov	sp, r7
 8038156:	f85d 7b04 	ldr.w	r7, [sp], #4
 803815a:	4770      	bx	lr
 803815c:	00030d40 	.word	0x00030d40

08038160 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8038160:	b480      	push	{r7}
 8038162:	b085      	sub	sp, #20
 8038164:	af00      	add	r7, sp, #0
 8038166:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8038168:	2300      	movs	r3, #0
 803816a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 803816c:	68fb      	ldr	r3, [r7, #12]
 803816e:	3301      	adds	r3, #1
 8038170:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8038172:	68fb      	ldr	r3, [r7, #12]
 8038174:	4a11      	ldr	r2, [pc, #68]	; (80381bc <USB_FlushRxFifo+0x5c>)
 8038176:	4293      	cmp	r3, r2
 8038178:	d901      	bls.n	803817e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 803817a:	2303      	movs	r3, #3
 803817c:	e018      	b.n	80381b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803817e:	687b      	ldr	r3, [r7, #4]
 8038180:	691b      	ldr	r3, [r3, #16]
 8038182:	2b00      	cmp	r3, #0
 8038184:	daf2      	bge.n	803816c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8038186:	2300      	movs	r3, #0
 8038188:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 803818a:	687b      	ldr	r3, [r7, #4]
 803818c:	2210      	movs	r2, #16
 803818e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8038190:	68fb      	ldr	r3, [r7, #12]
 8038192:	3301      	adds	r3, #1
 8038194:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8038196:	68fb      	ldr	r3, [r7, #12]
 8038198:	4a08      	ldr	r2, [pc, #32]	; (80381bc <USB_FlushRxFifo+0x5c>)
 803819a:	4293      	cmp	r3, r2
 803819c:	d901      	bls.n	80381a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 803819e:	2303      	movs	r3, #3
 80381a0:	e006      	b.n	80381b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80381a2:	687b      	ldr	r3, [r7, #4]
 80381a4:	691b      	ldr	r3, [r3, #16]
 80381a6:	f003 0310 	and.w	r3, r3, #16
 80381aa:	2b10      	cmp	r3, #16
 80381ac:	d0f0      	beq.n	8038190 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80381ae:	2300      	movs	r3, #0
}
 80381b0:	4618      	mov	r0, r3
 80381b2:	3714      	adds	r7, #20
 80381b4:	46bd      	mov	sp, r7
 80381b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80381ba:	4770      	bx	lr
 80381bc:	00030d40 	.word	0x00030d40

080381c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80381c0:	b480      	push	{r7}
 80381c2:	b085      	sub	sp, #20
 80381c4:	af00      	add	r7, sp, #0
 80381c6:	6078      	str	r0, [r7, #4]
 80381c8:	460b      	mov	r3, r1
 80381ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80381cc:	687b      	ldr	r3, [r7, #4]
 80381ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80381d0:	68fb      	ldr	r3, [r7, #12]
 80381d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80381d6:	681a      	ldr	r2, [r3, #0]
 80381d8:	78fb      	ldrb	r3, [r7, #3]
 80381da:	68f9      	ldr	r1, [r7, #12]
 80381dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80381e0:	4313      	orrs	r3, r2
 80381e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80381e4:	2300      	movs	r3, #0
}
 80381e6:	4618      	mov	r0, r3
 80381e8:	3714      	adds	r7, #20
 80381ea:	46bd      	mov	sp, r7
 80381ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80381f0:	4770      	bx	lr

080381f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80381f2:	b480      	push	{r7}
 80381f4:	b087      	sub	sp, #28
 80381f6:	af00      	add	r7, sp, #0
 80381f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80381fa:	687b      	ldr	r3, [r7, #4]
 80381fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80381fe:	693b      	ldr	r3, [r7, #16]
 8038200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038204:	689b      	ldr	r3, [r3, #8]
 8038206:	f003 0306 	and.w	r3, r3, #6
 803820a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 803820c:	68fb      	ldr	r3, [r7, #12]
 803820e:	2b00      	cmp	r3, #0
 8038210:	d102      	bne.n	8038218 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8038212:	2300      	movs	r3, #0
 8038214:	75fb      	strb	r3, [r7, #23]
 8038216:	e00a      	b.n	803822e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8038218:	68fb      	ldr	r3, [r7, #12]
 803821a:	2b02      	cmp	r3, #2
 803821c:	d002      	beq.n	8038224 <USB_GetDevSpeed+0x32>
 803821e:	68fb      	ldr	r3, [r7, #12]
 8038220:	2b06      	cmp	r3, #6
 8038222:	d102      	bne.n	803822a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8038224:	2302      	movs	r3, #2
 8038226:	75fb      	strb	r3, [r7, #23]
 8038228:	e001      	b.n	803822e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 803822a:	230f      	movs	r3, #15
 803822c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 803822e:	7dfb      	ldrb	r3, [r7, #23]
}
 8038230:	4618      	mov	r0, r3
 8038232:	371c      	adds	r7, #28
 8038234:	46bd      	mov	sp, r7
 8038236:	f85d 7b04 	ldr.w	r7, [sp], #4
 803823a:	4770      	bx	lr

0803823c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803823c:	b480      	push	{r7}
 803823e:	b085      	sub	sp, #20
 8038240:	af00      	add	r7, sp, #0
 8038242:	6078      	str	r0, [r7, #4]
 8038244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038246:	687b      	ldr	r3, [r7, #4]
 8038248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803824a:	683b      	ldr	r3, [r7, #0]
 803824c:	781b      	ldrb	r3, [r3, #0]
 803824e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8038250:	683b      	ldr	r3, [r7, #0]
 8038252:	785b      	ldrb	r3, [r3, #1]
 8038254:	2b01      	cmp	r3, #1
 8038256:	d139      	bne.n	80382cc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8038258:	68fb      	ldr	r3, [r7, #12]
 803825a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803825e:	69da      	ldr	r2, [r3, #28]
 8038260:	683b      	ldr	r3, [r7, #0]
 8038262:	781b      	ldrb	r3, [r3, #0]
 8038264:	f003 030f 	and.w	r3, r3, #15
 8038268:	2101      	movs	r1, #1
 803826a:	fa01 f303 	lsl.w	r3, r1, r3
 803826e:	b29b      	uxth	r3, r3
 8038270:	68f9      	ldr	r1, [r7, #12]
 8038272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038276:	4313      	orrs	r3, r2
 8038278:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 803827a:	68bb      	ldr	r3, [r7, #8]
 803827c:	015a      	lsls	r2, r3, #5
 803827e:	68fb      	ldr	r3, [r7, #12]
 8038280:	4413      	add	r3, r2
 8038282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038286:	681b      	ldr	r3, [r3, #0]
 8038288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803828c:	2b00      	cmp	r3, #0
 803828e:	d153      	bne.n	8038338 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8038290:	68bb      	ldr	r3, [r7, #8]
 8038292:	015a      	lsls	r2, r3, #5
 8038294:	68fb      	ldr	r3, [r7, #12]
 8038296:	4413      	add	r3, r2
 8038298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803829c:	681a      	ldr	r2, [r3, #0]
 803829e:	683b      	ldr	r3, [r7, #0]
 80382a0:	68db      	ldr	r3, [r3, #12]
 80382a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80382a6:	683b      	ldr	r3, [r7, #0]
 80382a8:	791b      	ldrb	r3, [r3, #4]
 80382aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80382ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80382ae:	68bb      	ldr	r3, [r7, #8]
 80382b0:	059b      	lsls	r3, r3, #22
 80382b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80382b4:	431a      	orrs	r2, r3
 80382b6:	68bb      	ldr	r3, [r7, #8]
 80382b8:	0159      	lsls	r1, r3, #5
 80382ba:	68fb      	ldr	r3, [r7, #12]
 80382bc:	440b      	add	r3, r1
 80382be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80382c2:	4619      	mov	r1, r3
 80382c4:	4b20      	ldr	r3, [pc, #128]	; (8038348 <USB_ActivateEndpoint+0x10c>)
 80382c6:	4313      	orrs	r3, r2
 80382c8:	600b      	str	r3, [r1, #0]
 80382ca:	e035      	b.n	8038338 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80382cc:	68fb      	ldr	r3, [r7, #12]
 80382ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80382d2:	69da      	ldr	r2, [r3, #28]
 80382d4:	683b      	ldr	r3, [r7, #0]
 80382d6:	781b      	ldrb	r3, [r3, #0]
 80382d8:	f003 030f 	and.w	r3, r3, #15
 80382dc:	2101      	movs	r1, #1
 80382de:	fa01 f303 	lsl.w	r3, r1, r3
 80382e2:	041b      	lsls	r3, r3, #16
 80382e4:	68f9      	ldr	r1, [r7, #12]
 80382e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80382ea:	4313      	orrs	r3, r2
 80382ec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80382ee:	68bb      	ldr	r3, [r7, #8]
 80382f0:	015a      	lsls	r2, r3, #5
 80382f2:	68fb      	ldr	r3, [r7, #12]
 80382f4:	4413      	add	r3, r2
 80382f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80382fa:	681b      	ldr	r3, [r3, #0]
 80382fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8038300:	2b00      	cmp	r3, #0
 8038302:	d119      	bne.n	8038338 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8038304:	68bb      	ldr	r3, [r7, #8]
 8038306:	015a      	lsls	r2, r3, #5
 8038308:	68fb      	ldr	r3, [r7, #12]
 803830a:	4413      	add	r3, r2
 803830c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038310:	681a      	ldr	r2, [r3, #0]
 8038312:	683b      	ldr	r3, [r7, #0]
 8038314:	68db      	ldr	r3, [r3, #12]
 8038316:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 803831a:	683b      	ldr	r3, [r7, #0]
 803831c:	791b      	ldrb	r3, [r3, #4]
 803831e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8038320:	430b      	orrs	r3, r1
 8038322:	431a      	orrs	r2, r3
 8038324:	68bb      	ldr	r3, [r7, #8]
 8038326:	0159      	lsls	r1, r3, #5
 8038328:	68fb      	ldr	r3, [r7, #12]
 803832a:	440b      	add	r3, r1
 803832c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038330:	4619      	mov	r1, r3
 8038332:	4b05      	ldr	r3, [pc, #20]	; (8038348 <USB_ActivateEndpoint+0x10c>)
 8038334:	4313      	orrs	r3, r2
 8038336:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8038338:	2300      	movs	r3, #0
}
 803833a:	4618      	mov	r0, r3
 803833c:	3714      	adds	r7, #20
 803833e:	46bd      	mov	sp, r7
 8038340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038344:	4770      	bx	lr
 8038346:	bf00      	nop
 8038348:	10008000 	.word	0x10008000

0803834c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803834c:	b480      	push	{r7}
 803834e:	b085      	sub	sp, #20
 8038350:	af00      	add	r7, sp, #0
 8038352:	6078      	str	r0, [r7, #4]
 8038354:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038356:	687b      	ldr	r3, [r7, #4]
 8038358:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803835a:	683b      	ldr	r3, [r7, #0]
 803835c:	781b      	ldrb	r3, [r3, #0]
 803835e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8038360:	683b      	ldr	r3, [r7, #0]
 8038362:	785b      	ldrb	r3, [r3, #1]
 8038364:	2b01      	cmp	r3, #1
 8038366:	d161      	bne.n	803842c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8038368:	68bb      	ldr	r3, [r7, #8]
 803836a:	015a      	lsls	r2, r3, #5
 803836c:	68fb      	ldr	r3, [r7, #12]
 803836e:	4413      	add	r3, r2
 8038370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038374:	681b      	ldr	r3, [r3, #0]
 8038376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803837a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803837e:	d11f      	bne.n	80383c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8038380:	68bb      	ldr	r3, [r7, #8]
 8038382:	015a      	lsls	r2, r3, #5
 8038384:	68fb      	ldr	r3, [r7, #12]
 8038386:	4413      	add	r3, r2
 8038388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803838c:	681b      	ldr	r3, [r3, #0]
 803838e:	68ba      	ldr	r2, [r7, #8]
 8038390:	0151      	lsls	r1, r2, #5
 8038392:	68fa      	ldr	r2, [r7, #12]
 8038394:	440a      	add	r2, r1
 8038396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803839a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803839e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80383a0:	68bb      	ldr	r3, [r7, #8]
 80383a2:	015a      	lsls	r2, r3, #5
 80383a4:	68fb      	ldr	r3, [r7, #12]
 80383a6:	4413      	add	r3, r2
 80383a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80383ac:	681b      	ldr	r3, [r3, #0]
 80383ae:	68ba      	ldr	r2, [r7, #8]
 80383b0:	0151      	lsls	r1, r2, #5
 80383b2:	68fa      	ldr	r2, [r7, #12]
 80383b4:	440a      	add	r2, r1
 80383b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80383ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80383be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80383c0:	68fb      	ldr	r3, [r7, #12]
 80383c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80383c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80383c8:	683b      	ldr	r3, [r7, #0]
 80383ca:	781b      	ldrb	r3, [r3, #0]
 80383cc:	f003 030f 	and.w	r3, r3, #15
 80383d0:	2101      	movs	r1, #1
 80383d2:	fa01 f303 	lsl.w	r3, r1, r3
 80383d6:	b29b      	uxth	r3, r3
 80383d8:	43db      	mvns	r3, r3
 80383da:	68f9      	ldr	r1, [r7, #12]
 80383dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80383e0:	4013      	ands	r3, r2
 80383e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80383e4:	68fb      	ldr	r3, [r7, #12]
 80383e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80383ea:	69da      	ldr	r2, [r3, #28]
 80383ec:	683b      	ldr	r3, [r7, #0]
 80383ee:	781b      	ldrb	r3, [r3, #0]
 80383f0:	f003 030f 	and.w	r3, r3, #15
 80383f4:	2101      	movs	r1, #1
 80383f6:	fa01 f303 	lsl.w	r3, r1, r3
 80383fa:	b29b      	uxth	r3, r3
 80383fc:	43db      	mvns	r3, r3
 80383fe:	68f9      	ldr	r1, [r7, #12]
 8038400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038404:	4013      	ands	r3, r2
 8038406:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8038408:	68bb      	ldr	r3, [r7, #8]
 803840a:	015a      	lsls	r2, r3, #5
 803840c:	68fb      	ldr	r3, [r7, #12]
 803840e:	4413      	add	r3, r2
 8038410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038414:	681a      	ldr	r2, [r3, #0]
 8038416:	68bb      	ldr	r3, [r7, #8]
 8038418:	0159      	lsls	r1, r3, #5
 803841a:	68fb      	ldr	r3, [r7, #12]
 803841c:	440b      	add	r3, r1
 803841e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038422:	4619      	mov	r1, r3
 8038424:	4b35      	ldr	r3, [pc, #212]	; (80384fc <USB_DeactivateEndpoint+0x1b0>)
 8038426:	4013      	ands	r3, r2
 8038428:	600b      	str	r3, [r1, #0]
 803842a:	e060      	b.n	80384ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803842c:	68bb      	ldr	r3, [r7, #8]
 803842e:	015a      	lsls	r2, r3, #5
 8038430:	68fb      	ldr	r3, [r7, #12]
 8038432:	4413      	add	r3, r2
 8038434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038438:	681b      	ldr	r3, [r3, #0]
 803843a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803843e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038442:	d11f      	bne.n	8038484 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8038444:	68bb      	ldr	r3, [r7, #8]
 8038446:	015a      	lsls	r2, r3, #5
 8038448:	68fb      	ldr	r3, [r7, #12]
 803844a:	4413      	add	r3, r2
 803844c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038450:	681b      	ldr	r3, [r3, #0]
 8038452:	68ba      	ldr	r2, [r7, #8]
 8038454:	0151      	lsls	r1, r2, #5
 8038456:	68fa      	ldr	r2, [r7, #12]
 8038458:	440a      	add	r2, r1
 803845a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803845e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8038462:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8038464:	68bb      	ldr	r3, [r7, #8]
 8038466:	015a      	lsls	r2, r3, #5
 8038468:	68fb      	ldr	r3, [r7, #12]
 803846a:	4413      	add	r3, r2
 803846c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038470:	681b      	ldr	r3, [r3, #0]
 8038472:	68ba      	ldr	r2, [r7, #8]
 8038474:	0151      	lsls	r1, r2, #5
 8038476:	68fa      	ldr	r2, [r7, #12]
 8038478:	440a      	add	r2, r1
 803847a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803847e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8038482:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8038484:	68fb      	ldr	r3, [r7, #12]
 8038486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803848a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 803848c:	683b      	ldr	r3, [r7, #0]
 803848e:	781b      	ldrb	r3, [r3, #0]
 8038490:	f003 030f 	and.w	r3, r3, #15
 8038494:	2101      	movs	r1, #1
 8038496:	fa01 f303 	lsl.w	r3, r1, r3
 803849a:	041b      	lsls	r3, r3, #16
 803849c:	43db      	mvns	r3, r3
 803849e:	68f9      	ldr	r1, [r7, #12]
 80384a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80384a4:	4013      	ands	r3, r2
 80384a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80384a8:	68fb      	ldr	r3, [r7, #12]
 80384aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80384ae:	69da      	ldr	r2, [r3, #28]
 80384b0:	683b      	ldr	r3, [r7, #0]
 80384b2:	781b      	ldrb	r3, [r3, #0]
 80384b4:	f003 030f 	and.w	r3, r3, #15
 80384b8:	2101      	movs	r1, #1
 80384ba:	fa01 f303 	lsl.w	r3, r1, r3
 80384be:	041b      	lsls	r3, r3, #16
 80384c0:	43db      	mvns	r3, r3
 80384c2:	68f9      	ldr	r1, [r7, #12]
 80384c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80384c8:	4013      	ands	r3, r2
 80384ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80384cc:	68bb      	ldr	r3, [r7, #8]
 80384ce:	015a      	lsls	r2, r3, #5
 80384d0:	68fb      	ldr	r3, [r7, #12]
 80384d2:	4413      	add	r3, r2
 80384d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80384d8:	681a      	ldr	r2, [r3, #0]
 80384da:	68bb      	ldr	r3, [r7, #8]
 80384dc:	0159      	lsls	r1, r3, #5
 80384de:	68fb      	ldr	r3, [r7, #12]
 80384e0:	440b      	add	r3, r1
 80384e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80384e6:	4619      	mov	r1, r3
 80384e8:	4b05      	ldr	r3, [pc, #20]	; (8038500 <USB_DeactivateEndpoint+0x1b4>)
 80384ea:	4013      	ands	r3, r2
 80384ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80384ee:	2300      	movs	r3, #0
}
 80384f0:	4618      	mov	r0, r3
 80384f2:	3714      	adds	r7, #20
 80384f4:	46bd      	mov	sp, r7
 80384f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80384fa:	4770      	bx	lr
 80384fc:	ec337800 	.word	0xec337800
 8038500:	eff37800 	.word	0xeff37800

08038504 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8038504:	b580      	push	{r7, lr}
 8038506:	b08a      	sub	sp, #40	; 0x28
 8038508:	af02      	add	r7, sp, #8
 803850a:	60f8      	str	r0, [r7, #12]
 803850c:	60b9      	str	r1, [r7, #8]
 803850e:	4613      	mov	r3, r2
 8038510:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038512:	68fb      	ldr	r3, [r7, #12]
 8038514:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8038516:	68bb      	ldr	r3, [r7, #8]
 8038518:	781b      	ldrb	r3, [r3, #0]
 803851a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 803851c:	68bb      	ldr	r3, [r7, #8]
 803851e:	785b      	ldrb	r3, [r3, #1]
 8038520:	2b01      	cmp	r3, #1
 8038522:	f040 8163 	bne.w	80387ec <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8038526:	68bb      	ldr	r3, [r7, #8]
 8038528:	699b      	ldr	r3, [r3, #24]
 803852a:	2b00      	cmp	r3, #0
 803852c:	d132      	bne.n	8038594 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803852e:	69bb      	ldr	r3, [r7, #24]
 8038530:	015a      	lsls	r2, r3, #5
 8038532:	69fb      	ldr	r3, [r7, #28]
 8038534:	4413      	add	r3, r2
 8038536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803853a:	691a      	ldr	r2, [r3, #16]
 803853c:	69bb      	ldr	r3, [r7, #24]
 803853e:	0159      	lsls	r1, r3, #5
 8038540:	69fb      	ldr	r3, [r7, #28]
 8038542:	440b      	add	r3, r1
 8038544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038548:	4619      	mov	r1, r3
 803854a:	4ba5      	ldr	r3, [pc, #660]	; (80387e0 <USB_EPStartXfer+0x2dc>)
 803854c:	4013      	ands	r3, r2
 803854e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8038550:	69bb      	ldr	r3, [r7, #24]
 8038552:	015a      	lsls	r2, r3, #5
 8038554:	69fb      	ldr	r3, [r7, #28]
 8038556:	4413      	add	r3, r2
 8038558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803855c:	691b      	ldr	r3, [r3, #16]
 803855e:	69ba      	ldr	r2, [r7, #24]
 8038560:	0151      	lsls	r1, r2, #5
 8038562:	69fa      	ldr	r2, [r7, #28]
 8038564:	440a      	add	r2, r1
 8038566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803856a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803856e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8038570:	69bb      	ldr	r3, [r7, #24]
 8038572:	015a      	lsls	r2, r3, #5
 8038574:	69fb      	ldr	r3, [r7, #28]
 8038576:	4413      	add	r3, r2
 8038578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803857c:	691a      	ldr	r2, [r3, #16]
 803857e:	69bb      	ldr	r3, [r7, #24]
 8038580:	0159      	lsls	r1, r3, #5
 8038582:	69fb      	ldr	r3, [r7, #28]
 8038584:	440b      	add	r3, r1
 8038586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803858a:	4619      	mov	r1, r3
 803858c:	4b95      	ldr	r3, [pc, #596]	; (80387e4 <USB_EPStartXfer+0x2e0>)
 803858e:	4013      	ands	r3, r2
 8038590:	610b      	str	r3, [r1, #16]
 8038592:	e074      	b.n	803867e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8038594:	69bb      	ldr	r3, [r7, #24]
 8038596:	015a      	lsls	r2, r3, #5
 8038598:	69fb      	ldr	r3, [r7, #28]
 803859a:	4413      	add	r3, r2
 803859c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385a0:	691a      	ldr	r2, [r3, #16]
 80385a2:	69bb      	ldr	r3, [r7, #24]
 80385a4:	0159      	lsls	r1, r3, #5
 80385a6:	69fb      	ldr	r3, [r7, #28]
 80385a8:	440b      	add	r3, r1
 80385aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385ae:	4619      	mov	r1, r3
 80385b0:	4b8c      	ldr	r3, [pc, #560]	; (80387e4 <USB_EPStartXfer+0x2e0>)
 80385b2:	4013      	ands	r3, r2
 80385b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80385b6:	69bb      	ldr	r3, [r7, #24]
 80385b8:	015a      	lsls	r2, r3, #5
 80385ba:	69fb      	ldr	r3, [r7, #28]
 80385bc:	4413      	add	r3, r2
 80385be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385c2:	691a      	ldr	r2, [r3, #16]
 80385c4:	69bb      	ldr	r3, [r7, #24]
 80385c6:	0159      	lsls	r1, r3, #5
 80385c8:	69fb      	ldr	r3, [r7, #28]
 80385ca:	440b      	add	r3, r1
 80385cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385d0:	4619      	mov	r1, r3
 80385d2:	4b83      	ldr	r3, [pc, #524]	; (80387e0 <USB_EPStartXfer+0x2dc>)
 80385d4:	4013      	ands	r3, r2
 80385d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80385d8:	69bb      	ldr	r3, [r7, #24]
 80385da:	015a      	lsls	r2, r3, #5
 80385dc:	69fb      	ldr	r3, [r7, #28]
 80385de:	4413      	add	r3, r2
 80385e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80385e6:	68bb      	ldr	r3, [r7, #8]
 80385e8:	6999      	ldr	r1, [r3, #24]
 80385ea:	68bb      	ldr	r3, [r7, #8]
 80385ec:	68db      	ldr	r3, [r3, #12]
 80385ee:	440b      	add	r3, r1
 80385f0:	1e59      	subs	r1, r3, #1
 80385f2:	68bb      	ldr	r3, [r7, #8]
 80385f4:	68db      	ldr	r3, [r3, #12]
 80385f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80385fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80385fc:	4b7a      	ldr	r3, [pc, #488]	; (80387e8 <USB_EPStartXfer+0x2e4>)
 80385fe:	400b      	ands	r3, r1
 8038600:	69b9      	ldr	r1, [r7, #24]
 8038602:	0148      	lsls	r0, r1, #5
 8038604:	69f9      	ldr	r1, [r7, #28]
 8038606:	4401      	add	r1, r0
 8038608:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803860c:	4313      	orrs	r3, r2
 803860e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8038610:	69bb      	ldr	r3, [r7, #24]
 8038612:	015a      	lsls	r2, r3, #5
 8038614:	69fb      	ldr	r3, [r7, #28]
 8038616:	4413      	add	r3, r2
 8038618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803861c:	691a      	ldr	r2, [r3, #16]
 803861e:	68bb      	ldr	r3, [r7, #8]
 8038620:	699b      	ldr	r3, [r3, #24]
 8038622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8038626:	69b9      	ldr	r1, [r7, #24]
 8038628:	0148      	lsls	r0, r1, #5
 803862a:	69f9      	ldr	r1, [r7, #28]
 803862c:	4401      	add	r1, r0
 803862e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8038632:	4313      	orrs	r3, r2
 8038634:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8038636:	68bb      	ldr	r3, [r7, #8]
 8038638:	791b      	ldrb	r3, [r3, #4]
 803863a:	2b01      	cmp	r3, #1
 803863c:	d11f      	bne.n	803867e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 803863e:	69bb      	ldr	r3, [r7, #24]
 8038640:	015a      	lsls	r2, r3, #5
 8038642:	69fb      	ldr	r3, [r7, #28]
 8038644:	4413      	add	r3, r2
 8038646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803864a:	691b      	ldr	r3, [r3, #16]
 803864c:	69ba      	ldr	r2, [r7, #24]
 803864e:	0151      	lsls	r1, r2, #5
 8038650:	69fa      	ldr	r2, [r7, #28]
 8038652:	440a      	add	r2, r1
 8038654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038658:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 803865c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 803865e:	69bb      	ldr	r3, [r7, #24]
 8038660:	015a      	lsls	r2, r3, #5
 8038662:	69fb      	ldr	r3, [r7, #28]
 8038664:	4413      	add	r3, r2
 8038666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803866a:	691b      	ldr	r3, [r3, #16]
 803866c:	69ba      	ldr	r2, [r7, #24]
 803866e:	0151      	lsls	r1, r2, #5
 8038670:	69fa      	ldr	r2, [r7, #28]
 8038672:	440a      	add	r2, r1
 8038674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038678:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803867c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 803867e:	79fb      	ldrb	r3, [r7, #7]
 8038680:	2b01      	cmp	r3, #1
 8038682:	d14b      	bne.n	803871c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8038684:	68bb      	ldr	r3, [r7, #8]
 8038686:	695b      	ldr	r3, [r3, #20]
 8038688:	2b00      	cmp	r3, #0
 803868a:	d009      	beq.n	80386a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 803868c:	69bb      	ldr	r3, [r7, #24]
 803868e:	015a      	lsls	r2, r3, #5
 8038690:	69fb      	ldr	r3, [r7, #28]
 8038692:	4413      	add	r3, r2
 8038694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038698:	461a      	mov	r2, r3
 803869a:	68bb      	ldr	r3, [r7, #8]
 803869c:	695b      	ldr	r3, [r3, #20]
 803869e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80386a0:	68bb      	ldr	r3, [r7, #8]
 80386a2:	791b      	ldrb	r3, [r3, #4]
 80386a4:	2b01      	cmp	r3, #1
 80386a6:	d128      	bne.n	80386fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80386a8:	69fb      	ldr	r3, [r7, #28]
 80386aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80386ae:	689b      	ldr	r3, [r3, #8]
 80386b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80386b4:	2b00      	cmp	r3, #0
 80386b6:	d110      	bne.n	80386da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80386b8:	69bb      	ldr	r3, [r7, #24]
 80386ba:	015a      	lsls	r2, r3, #5
 80386bc:	69fb      	ldr	r3, [r7, #28]
 80386be:	4413      	add	r3, r2
 80386c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80386c4:	681b      	ldr	r3, [r3, #0]
 80386c6:	69ba      	ldr	r2, [r7, #24]
 80386c8:	0151      	lsls	r1, r2, #5
 80386ca:	69fa      	ldr	r2, [r7, #28]
 80386cc:	440a      	add	r2, r1
 80386ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80386d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80386d6:	6013      	str	r3, [r2, #0]
 80386d8:	e00f      	b.n	80386fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80386da:	69bb      	ldr	r3, [r7, #24]
 80386dc:	015a      	lsls	r2, r3, #5
 80386de:	69fb      	ldr	r3, [r7, #28]
 80386e0:	4413      	add	r3, r2
 80386e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80386e6:	681b      	ldr	r3, [r3, #0]
 80386e8:	69ba      	ldr	r2, [r7, #24]
 80386ea:	0151      	lsls	r1, r2, #5
 80386ec:	69fa      	ldr	r2, [r7, #28]
 80386ee:	440a      	add	r2, r1
 80386f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80386f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80386f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80386fa:	69bb      	ldr	r3, [r7, #24]
 80386fc:	015a      	lsls	r2, r3, #5
 80386fe:	69fb      	ldr	r3, [r7, #28]
 8038700:	4413      	add	r3, r2
 8038702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038706:	681b      	ldr	r3, [r3, #0]
 8038708:	69ba      	ldr	r2, [r7, #24]
 803870a:	0151      	lsls	r1, r2, #5
 803870c:	69fa      	ldr	r2, [r7, #28]
 803870e:	440a      	add	r2, r1
 8038710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038714:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038718:	6013      	str	r3, [r2, #0]
 803871a:	e137      	b.n	803898c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803871c:	69bb      	ldr	r3, [r7, #24]
 803871e:	015a      	lsls	r2, r3, #5
 8038720:	69fb      	ldr	r3, [r7, #28]
 8038722:	4413      	add	r3, r2
 8038724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038728:	681b      	ldr	r3, [r3, #0]
 803872a:	69ba      	ldr	r2, [r7, #24]
 803872c:	0151      	lsls	r1, r2, #5
 803872e:	69fa      	ldr	r2, [r7, #28]
 8038730:	440a      	add	r2, r1
 8038732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038736:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803873a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 803873c:	68bb      	ldr	r3, [r7, #8]
 803873e:	791b      	ldrb	r3, [r3, #4]
 8038740:	2b01      	cmp	r3, #1
 8038742:	d015      	beq.n	8038770 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8038744:	68bb      	ldr	r3, [r7, #8]
 8038746:	699b      	ldr	r3, [r3, #24]
 8038748:	2b00      	cmp	r3, #0
 803874a:	f000 811f 	beq.w	803898c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803874e:	69fb      	ldr	r3, [r7, #28]
 8038750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8038756:	68bb      	ldr	r3, [r7, #8]
 8038758:	781b      	ldrb	r3, [r3, #0]
 803875a:	f003 030f 	and.w	r3, r3, #15
 803875e:	2101      	movs	r1, #1
 8038760:	fa01 f303 	lsl.w	r3, r1, r3
 8038764:	69f9      	ldr	r1, [r7, #28]
 8038766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803876a:	4313      	orrs	r3, r2
 803876c:	634b      	str	r3, [r1, #52]	; 0x34
 803876e:	e10d      	b.n	803898c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8038770:	69fb      	ldr	r3, [r7, #28]
 8038772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038776:	689b      	ldr	r3, [r3, #8]
 8038778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803877c:	2b00      	cmp	r3, #0
 803877e:	d110      	bne.n	80387a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8038780:	69bb      	ldr	r3, [r7, #24]
 8038782:	015a      	lsls	r2, r3, #5
 8038784:	69fb      	ldr	r3, [r7, #28]
 8038786:	4413      	add	r3, r2
 8038788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803878c:	681b      	ldr	r3, [r3, #0]
 803878e:	69ba      	ldr	r2, [r7, #24]
 8038790:	0151      	lsls	r1, r2, #5
 8038792:	69fa      	ldr	r2, [r7, #28]
 8038794:	440a      	add	r2, r1
 8038796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803879a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803879e:	6013      	str	r3, [r2, #0]
 80387a0:	e00f      	b.n	80387c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80387a2:	69bb      	ldr	r3, [r7, #24]
 80387a4:	015a      	lsls	r2, r3, #5
 80387a6:	69fb      	ldr	r3, [r7, #28]
 80387a8:	4413      	add	r3, r2
 80387aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80387ae:	681b      	ldr	r3, [r3, #0]
 80387b0:	69ba      	ldr	r2, [r7, #24]
 80387b2:	0151      	lsls	r1, r2, #5
 80387b4:	69fa      	ldr	r2, [r7, #28]
 80387b6:	440a      	add	r2, r1
 80387b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80387bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80387c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80387c2:	68bb      	ldr	r3, [r7, #8]
 80387c4:	6919      	ldr	r1, [r3, #16]
 80387c6:	68bb      	ldr	r3, [r7, #8]
 80387c8:	781a      	ldrb	r2, [r3, #0]
 80387ca:	68bb      	ldr	r3, [r7, #8]
 80387cc:	699b      	ldr	r3, [r3, #24]
 80387ce:	b298      	uxth	r0, r3
 80387d0:	79fb      	ldrb	r3, [r7, #7]
 80387d2:	9300      	str	r3, [sp, #0]
 80387d4:	4603      	mov	r3, r0
 80387d6:	68f8      	ldr	r0, [r7, #12]
 80387d8:	f000 faea 	bl	8038db0 <USB_WritePacket>
 80387dc:	e0d6      	b.n	803898c <USB_EPStartXfer+0x488>
 80387de:	bf00      	nop
 80387e0:	e007ffff 	.word	0xe007ffff
 80387e4:	fff80000 	.word	0xfff80000
 80387e8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80387ec:	69bb      	ldr	r3, [r7, #24]
 80387ee:	015a      	lsls	r2, r3, #5
 80387f0:	69fb      	ldr	r3, [r7, #28]
 80387f2:	4413      	add	r3, r2
 80387f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80387f8:	691a      	ldr	r2, [r3, #16]
 80387fa:	69bb      	ldr	r3, [r7, #24]
 80387fc:	0159      	lsls	r1, r3, #5
 80387fe:	69fb      	ldr	r3, [r7, #28]
 8038800:	440b      	add	r3, r1
 8038802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038806:	4619      	mov	r1, r3
 8038808:	4b63      	ldr	r3, [pc, #396]	; (8038998 <USB_EPStartXfer+0x494>)
 803880a:	4013      	ands	r3, r2
 803880c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 803880e:	69bb      	ldr	r3, [r7, #24]
 8038810:	015a      	lsls	r2, r3, #5
 8038812:	69fb      	ldr	r3, [r7, #28]
 8038814:	4413      	add	r3, r2
 8038816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803881a:	691a      	ldr	r2, [r3, #16]
 803881c:	69bb      	ldr	r3, [r7, #24]
 803881e:	0159      	lsls	r1, r3, #5
 8038820:	69fb      	ldr	r3, [r7, #28]
 8038822:	440b      	add	r3, r1
 8038824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038828:	4619      	mov	r1, r3
 803882a:	4b5c      	ldr	r3, [pc, #368]	; (803899c <USB_EPStartXfer+0x498>)
 803882c:	4013      	ands	r3, r2
 803882e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8038830:	68bb      	ldr	r3, [r7, #8]
 8038832:	699b      	ldr	r3, [r3, #24]
 8038834:	2b00      	cmp	r3, #0
 8038836:	d123      	bne.n	8038880 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8038838:	69bb      	ldr	r3, [r7, #24]
 803883a:	015a      	lsls	r2, r3, #5
 803883c:	69fb      	ldr	r3, [r7, #28]
 803883e:	4413      	add	r3, r2
 8038840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038844:	691a      	ldr	r2, [r3, #16]
 8038846:	68bb      	ldr	r3, [r7, #8]
 8038848:	68db      	ldr	r3, [r3, #12]
 803884a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803884e:	69b9      	ldr	r1, [r7, #24]
 8038850:	0148      	lsls	r0, r1, #5
 8038852:	69f9      	ldr	r1, [r7, #28]
 8038854:	4401      	add	r1, r0
 8038856:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803885a:	4313      	orrs	r3, r2
 803885c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803885e:	69bb      	ldr	r3, [r7, #24]
 8038860:	015a      	lsls	r2, r3, #5
 8038862:	69fb      	ldr	r3, [r7, #28]
 8038864:	4413      	add	r3, r2
 8038866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803886a:	691b      	ldr	r3, [r3, #16]
 803886c:	69ba      	ldr	r2, [r7, #24]
 803886e:	0151      	lsls	r1, r2, #5
 8038870:	69fa      	ldr	r2, [r7, #28]
 8038872:	440a      	add	r2, r1
 8038874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038878:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803887c:	6113      	str	r3, [r2, #16]
 803887e:	e037      	b.n	80388f0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8038880:	68bb      	ldr	r3, [r7, #8]
 8038882:	699a      	ldr	r2, [r3, #24]
 8038884:	68bb      	ldr	r3, [r7, #8]
 8038886:	68db      	ldr	r3, [r3, #12]
 8038888:	4413      	add	r3, r2
 803888a:	1e5a      	subs	r2, r3, #1
 803888c:	68bb      	ldr	r3, [r7, #8]
 803888e:	68db      	ldr	r3, [r3, #12]
 8038890:	fbb2 f3f3 	udiv	r3, r2, r3
 8038894:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8038896:	68bb      	ldr	r3, [r7, #8]
 8038898:	68db      	ldr	r3, [r3, #12]
 803889a:	8afa      	ldrh	r2, [r7, #22]
 803889c:	fb03 f202 	mul.w	r2, r3, r2
 80388a0:	68bb      	ldr	r3, [r7, #8]
 80388a2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80388a4:	69bb      	ldr	r3, [r7, #24]
 80388a6:	015a      	lsls	r2, r3, #5
 80388a8:	69fb      	ldr	r3, [r7, #28]
 80388aa:	4413      	add	r3, r2
 80388ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80388b0:	691a      	ldr	r2, [r3, #16]
 80388b2:	8afb      	ldrh	r3, [r7, #22]
 80388b4:	04d9      	lsls	r1, r3, #19
 80388b6:	4b3a      	ldr	r3, [pc, #232]	; (80389a0 <USB_EPStartXfer+0x49c>)
 80388b8:	400b      	ands	r3, r1
 80388ba:	69b9      	ldr	r1, [r7, #24]
 80388bc:	0148      	lsls	r0, r1, #5
 80388be:	69f9      	ldr	r1, [r7, #28]
 80388c0:	4401      	add	r1, r0
 80388c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80388c6:	4313      	orrs	r3, r2
 80388c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80388ca:	69bb      	ldr	r3, [r7, #24]
 80388cc:	015a      	lsls	r2, r3, #5
 80388ce:	69fb      	ldr	r3, [r7, #28]
 80388d0:	4413      	add	r3, r2
 80388d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80388d6:	691a      	ldr	r2, [r3, #16]
 80388d8:	68bb      	ldr	r3, [r7, #8]
 80388da:	69db      	ldr	r3, [r3, #28]
 80388dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80388e0:	69b9      	ldr	r1, [r7, #24]
 80388e2:	0148      	lsls	r0, r1, #5
 80388e4:	69f9      	ldr	r1, [r7, #28]
 80388e6:	4401      	add	r1, r0
 80388e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80388ec:	4313      	orrs	r3, r2
 80388ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80388f0:	79fb      	ldrb	r3, [r7, #7]
 80388f2:	2b01      	cmp	r3, #1
 80388f4:	d10d      	bne.n	8038912 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80388f6:	68bb      	ldr	r3, [r7, #8]
 80388f8:	691b      	ldr	r3, [r3, #16]
 80388fa:	2b00      	cmp	r3, #0
 80388fc:	d009      	beq.n	8038912 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80388fe:	68bb      	ldr	r3, [r7, #8]
 8038900:	6919      	ldr	r1, [r3, #16]
 8038902:	69bb      	ldr	r3, [r7, #24]
 8038904:	015a      	lsls	r2, r3, #5
 8038906:	69fb      	ldr	r3, [r7, #28]
 8038908:	4413      	add	r3, r2
 803890a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803890e:	460a      	mov	r2, r1
 8038910:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8038912:	68bb      	ldr	r3, [r7, #8]
 8038914:	791b      	ldrb	r3, [r3, #4]
 8038916:	2b01      	cmp	r3, #1
 8038918:	d128      	bne.n	803896c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803891a:	69fb      	ldr	r3, [r7, #28]
 803891c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038920:	689b      	ldr	r3, [r3, #8]
 8038922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038926:	2b00      	cmp	r3, #0
 8038928:	d110      	bne.n	803894c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 803892a:	69bb      	ldr	r3, [r7, #24]
 803892c:	015a      	lsls	r2, r3, #5
 803892e:	69fb      	ldr	r3, [r7, #28]
 8038930:	4413      	add	r3, r2
 8038932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038936:	681b      	ldr	r3, [r3, #0]
 8038938:	69ba      	ldr	r2, [r7, #24]
 803893a:	0151      	lsls	r1, r2, #5
 803893c:	69fa      	ldr	r2, [r7, #28]
 803893e:	440a      	add	r2, r1
 8038940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038944:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8038948:	6013      	str	r3, [r2, #0]
 803894a:	e00f      	b.n	803896c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 803894c:	69bb      	ldr	r3, [r7, #24]
 803894e:	015a      	lsls	r2, r3, #5
 8038950:	69fb      	ldr	r3, [r7, #28]
 8038952:	4413      	add	r3, r2
 8038954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038958:	681b      	ldr	r3, [r3, #0]
 803895a:	69ba      	ldr	r2, [r7, #24]
 803895c:	0151      	lsls	r1, r2, #5
 803895e:	69fa      	ldr	r2, [r7, #28]
 8038960:	440a      	add	r2, r1
 8038962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803896a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 803896c:	69bb      	ldr	r3, [r7, #24]
 803896e:	015a      	lsls	r2, r3, #5
 8038970:	69fb      	ldr	r3, [r7, #28]
 8038972:	4413      	add	r3, r2
 8038974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038978:	681b      	ldr	r3, [r3, #0]
 803897a:	69ba      	ldr	r2, [r7, #24]
 803897c:	0151      	lsls	r1, r2, #5
 803897e:	69fa      	ldr	r2, [r7, #28]
 8038980:	440a      	add	r2, r1
 8038982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803898a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803898c:	2300      	movs	r3, #0
}
 803898e:	4618      	mov	r0, r3
 8038990:	3720      	adds	r7, #32
 8038992:	46bd      	mov	sp, r7
 8038994:	bd80      	pop	{r7, pc}
 8038996:	bf00      	nop
 8038998:	fff80000 	.word	0xfff80000
 803899c:	e007ffff 	.word	0xe007ffff
 80389a0:	1ff80000 	.word	0x1ff80000

080389a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80389a4:	b480      	push	{r7}
 80389a6:	b087      	sub	sp, #28
 80389a8:	af00      	add	r7, sp, #0
 80389aa:	60f8      	str	r0, [r7, #12]
 80389ac:	60b9      	str	r1, [r7, #8]
 80389ae:	4613      	mov	r3, r2
 80389b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80389b2:	68fb      	ldr	r3, [r7, #12]
 80389b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80389b6:	68bb      	ldr	r3, [r7, #8]
 80389b8:	781b      	ldrb	r3, [r3, #0]
 80389ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80389bc:	68bb      	ldr	r3, [r7, #8]
 80389be:	785b      	ldrb	r3, [r3, #1]
 80389c0:	2b01      	cmp	r3, #1
 80389c2:	f040 80ce 	bne.w	8038b62 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80389c6:	68bb      	ldr	r3, [r7, #8]
 80389c8:	699b      	ldr	r3, [r3, #24]
 80389ca:	2b00      	cmp	r3, #0
 80389cc:	d132      	bne.n	8038a34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80389ce:	693b      	ldr	r3, [r7, #16]
 80389d0:	015a      	lsls	r2, r3, #5
 80389d2:	697b      	ldr	r3, [r7, #20]
 80389d4:	4413      	add	r3, r2
 80389d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389da:	691a      	ldr	r2, [r3, #16]
 80389dc:	693b      	ldr	r3, [r7, #16]
 80389de:	0159      	lsls	r1, r3, #5
 80389e0:	697b      	ldr	r3, [r7, #20]
 80389e2:	440b      	add	r3, r1
 80389e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389e8:	4619      	mov	r1, r3
 80389ea:	4b9a      	ldr	r3, [pc, #616]	; (8038c54 <USB_EP0StartXfer+0x2b0>)
 80389ec:	4013      	ands	r3, r2
 80389ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80389f0:	693b      	ldr	r3, [r7, #16]
 80389f2:	015a      	lsls	r2, r3, #5
 80389f4:	697b      	ldr	r3, [r7, #20]
 80389f6:	4413      	add	r3, r2
 80389f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389fc:	691b      	ldr	r3, [r3, #16]
 80389fe:	693a      	ldr	r2, [r7, #16]
 8038a00:	0151      	lsls	r1, r2, #5
 8038a02:	697a      	ldr	r2, [r7, #20]
 8038a04:	440a      	add	r2, r1
 8038a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038a0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8038a10:	693b      	ldr	r3, [r7, #16]
 8038a12:	015a      	lsls	r2, r3, #5
 8038a14:	697b      	ldr	r3, [r7, #20]
 8038a16:	4413      	add	r3, r2
 8038a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a1c:	691a      	ldr	r2, [r3, #16]
 8038a1e:	693b      	ldr	r3, [r7, #16]
 8038a20:	0159      	lsls	r1, r3, #5
 8038a22:	697b      	ldr	r3, [r7, #20]
 8038a24:	440b      	add	r3, r1
 8038a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a2a:	4619      	mov	r1, r3
 8038a2c:	4b8a      	ldr	r3, [pc, #552]	; (8038c58 <USB_EP0StartXfer+0x2b4>)
 8038a2e:	4013      	ands	r3, r2
 8038a30:	610b      	str	r3, [r1, #16]
 8038a32:	e04e      	b.n	8038ad2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8038a34:	693b      	ldr	r3, [r7, #16]
 8038a36:	015a      	lsls	r2, r3, #5
 8038a38:	697b      	ldr	r3, [r7, #20]
 8038a3a:	4413      	add	r3, r2
 8038a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a40:	691a      	ldr	r2, [r3, #16]
 8038a42:	693b      	ldr	r3, [r7, #16]
 8038a44:	0159      	lsls	r1, r3, #5
 8038a46:	697b      	ldr	r3, [r7, #20]
 8038a48:	440b      	add	r3, r1
 8038a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a4e:	4619      	mov	r1, r3
 8038a50:	4b81      	ldr	r3, [pc, #516]	; (8038c58 <USB_EP0StartXfer+0x2b4>)
 8038a52:	4013      	ands	r3, r2
 8038a54:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8038a56:	693b      	ldr	r3, [r7, #16]
 8038a58:	015a      	lsls	r2, r3, #5
 8038a5a:	697b      	ldr	r3, [r7, #20]
 8038a5c:	4413      	add	r3, r2
 8038a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a62:	691a      	ldr	r2, [r3, #16]
 8038a64:	693b      	ldr	r3, [r7, #16]
 8038a66:	0159      	lsls	r1, r3, #5
 8038a68:	697b      	ldr	r3, [r7, #20]
 8038a6a:	440b      	add	r3, r1
 8038a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a70:	4619      	mov	r1, r3
 8038a72:	4b78      	ldr	r3, [pc, #480]	; (8038c54 <USB_EP0StartXfer+0x2b0>)
 8038a74:	4013      	ands	r3, r2
 8038a76:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8038a78:	68bb      	ldr	r3, [r7, #8]
 8038a7a:	699a      	ldr	r2, [r3, #24]
 8038a7c:	68bb      	ldr	r3, [r7, #8]
 8038a7e:	68db      	ldr	r3, [r3, #12]
 8038a80:	429a      	cmp	r2, r3
 8038a82:	d903      	bls.n	8038a8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8038a84:	68bb      	ldr	r3, [r7, #8]
 8038a86:	68da      	ldr	r2, [r3, #12]
 8038a88:	68bb      	ldr	r3, [r7, #8]
 8038a8a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8038a8c:	693b      	ldr	r3, [r7, #16]
 8038a8e:	015a      	lsls	r2, r3, #5
 8038a90:	697b      	ldr	r3, [r7, #20]
 8038a92:	4413      	add	r3, r2
 8038a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a98:	691b      	ldr	r3, [r3, #16]
 8038a9a:	693a      	ldr	r2, [r7, #16]
 8038a9c:	0151      	lsls	r1, r2, #5
 8038a9e:	697a      	ldr	r2, [r7, #20]
 8038aa0:	440a      	add	r2, r1
 8038aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038aaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8038aac:	693b      	ldr	r3, [r7, #16]
 8038aae:	015a      	lsls	r2, r3, #5
 8038ab0:	697b      	ldr	r3, [r7, #20]
 8038ab2:	4413      	add	r3, r2
 8038ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038ab8:	691a      	ldr	r2, [r3, #16]
 8038aba:	68bb      	ldr	r3, [r7, #8]
 8038abc:	699b      	ldr	r3, [r3, #24]
 8038abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8038ac2:	6939      	ldr	r1, [r7, #16]
 8038ac4:	0148      	lsls	r0, r1, #5
 8038ac6:	6979      	ldr	r1, [r7, #20]
 8038ac8:	4401      	add	r1, r0
 8038aca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8038ace:	4313      	orrs	r3, r2
 8038ad0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8038ad2:	79fb      	ldrb	r3, [r7, #7]
 8038ad4:	2b01      	cmp	r3, #1
 8038ad6:	d11e      	bne.n	8038b16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8038ad8:	68bb      	ldr	r3, [r7, #8]
 8038ada:	695b      	ldr	r3, [r3, #20]
 8038adc:	2b00      	cmp	r3, #0
 8038ade:	d009      	beq.n	8038af4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8038ae0:	693b      	ldr	r3, [r7, #16]
 8038ae2:	015a      	lsls	r2, r3, #5
 8038ae4:	697b      	ldr	r3, [r7, #20]
 8038ae6:	4413      	add	r3, r2
 8038ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038aec:	461a      	mov	r2, r3
 8038aee:	68bb      	ldr	r3, [r7, #8]
 8038af0:	695b      	ldr	r3, [r3, #20]
 8038af2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8038af4:	693b      	ldr	r3, [r7, #16]
 8038af6:	015a      	lsls	r2, r3, #5
 8038af8:	697b      	ldr	r3, [r7, #20]
 8038afa:	4413      	add	r3, r2
 8038afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038b00:	681b      	ldr	r3, [r3, #0]
 8038b02:	693a      	ldr	r2, [r7, #16]
 8038b04:	0151      	lsls	r1, r2, #5
 8038b06:	697a      	ldr	r2, [r7, #20]
 8038b08:	440a      	add	r2, r1
 8038b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038b0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038b12:	6013      	str	r3, [r2, #0]
 8038b14:	e097      	b.n	8038c46 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8038b16:	693b      	ldr	r3, [r7, #16]
 8038b18:	015a      	lsls	r2, r3, #5
 8038b1a:	697b      	ldr	r3, [r7, #20]
 8038b1c:	4413      	add	r3, r2
 8038b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038b22:	681b      	ldr	r3, [r3, #0]
 8038b24:	693a      	ldr	r2, [r7, #16]
 8038b26:	0151      	lsls	r1, r2, #5
 8038b28:	697a      	ldr	r2, [r7, #20]
 8038b2a:	440a      	add	r2, r1
 8038b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038b30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038b34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8038b36:	68bb      	ldr	r3, [r7, #8]
 8038b38:	699b      	ldr	r3, [r3, #24]
 8038b3a:	2b00      	cmp	r3, #0
 8038b3c:	f000 8083 	beq.w	8038c46 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8038b40:	697b      	ldr	r3, [r7, #20]
 8038b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8038b48:	68bb      	ldr	r3, [r7, #8]
 8038b4a:	781b      	ldrb	r3, [r3, #0]
 8038b4c:	f003 030f 	and.w	r3, r3, #15
 8038b50:	2101      	movs	r1, #1
 8038b52:	fa01 f303 	lsl.w	r3, r1, r3
 8038b56:	6979      	ldr	r1, [r7, #20]
 8038b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038b5c:	4313      	orrs	r3, r2
 8038b5e:	634b      	str	r3, [r1, #52]	; 0x34
 8038b60:	e071      	b.n	8038c46 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8038b62:	693b      	ldr	r3, [r7, #16]
 8038b64:	015a      	lsls	r2, r3, #5
 8038b66:	697b      	ldr	r3, [r7, #20]
 8038b68:	4413      	add	r3, r2
 8038b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b6e:	691a      	ldr	r2, [r3, #16]
 8038b70:	693b      	ldr	r3, [r7, #16]
 8038b72:	0159      	lsls	r1, r3, #5
 8038b74:	697b      	ldr	r3, [r7, #20]
 8038b76:	440b      	add	r3, r1
 8038b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b7c:	4619      	mov	r1, r3
 8038b7e:	4b36      	ldr	r3, [pc, #216]	; (8038c58 <USB_EP0StartXfer+0x2b4>)
 8038b80:	4013      	ands	r3, r2
 8038b82:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8038b84:	693b      	ldr	r3, [r7, #16]
 8038b86:	015a      	lsls	r2, r3, #5
 8038b88:	697b      	ldr	r3, [r7, #20]
 8038b8a:	4413      	add	r3, r2
 8038b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b90:	691a      	ldr	r2, [r3, #16]
 8038b92:	693b      	ldr	r3, [r7, #16]
 8038b94:	0159      	lsls	r1, r3, #5
 8038b96:	697b      	ldr	r3, [r7, #20]
 8038b98:	440b      	add	r3, r1
 8038b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b9e:	4619      	mov	r1, r3
 8038ba0:	4b2c      	ldr	r3, [pc, #176]	; (8038c54 <USB_EP0StartXfer+0x2b0>)
 8038ba2:	4013      	ands	r3, r2
 8038ba4:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8038ba6:	68bb      	ldr	r3, [r7, #8]
 8038ba8:	699b      	ldr	r3, [r3, #24]
 8038baa:	2b00      	cmp	r3, #0
 8038bac:	d003      	beq.n	8038bb6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8038bae:	68bb      	ldr	r3, [r7, #8]
 8038bb0:	68da      	ldr	r2, [r3, #12]
 8038bb2:	68bb      	ldr	r3, [r7, #8]
 8038bb4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8038bb6:	68bb      	ldr	r3, [r7, #8]
 8038bb8:	68da      	ldr	r2, [r3, #12]
 8038bba:	68bb      	ldr	r3, [r7, #8]
 8038bbc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8038bbe:	693b      	ldr	r3, [r7, #16]
 8038bc0:	015a      	lsls	r2, r3, #5
 8038bc2:	697b      	ldr	r3, [r7, #20]
 8038bc4:	4413      	add	r3, r2
 8038bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038bca:	691b      	ldr	r3, [r3, #16]
 8038bcc:	693a      	ldr	r2, [r7, #16]
 8038bce:	0151      	lsls	r1, r2, #5
 8038bd0:	697a      	ldr	r2, [r7, #20]
 8038bd2:	440a      	add	r2, r1
 8038bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038bd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038bdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8038bde:	693b      	ldr	r3, [r7, #16]
 8038be0:	015a      	lsls	r2, r3, #5
 8038be2:	697b      	ldr	r3, [r7, #20]
 8038be4:	4413      	add	r3, r2
 8038be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038bea:	691a      	ldr	r2, [r3, #16]
 8038bec:	68bb      	ldr	r3, [r7, #8]
 8038bee:	69db      	ldr	r3, [r3, #28]
 8038bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8038bf4:	6939      	ldr	r1, [r7, #16]
 8038bf6:	0148      	lsls	r0, r1, #5
 8038bf8:	6979      	ldr	r1, [r7, #20]
 8038bfa:	4401      	add	r1, r0
 8038bfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8038c00:	4313      	orrs	r3, r2
 8038c02:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8038c04:	79fb      	ldrb	r3, [r7, #7]
 8038c06:	2b01      	cmp	r3, #1
 8038c08:	d10d      	bne.n	8038c26 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8038c0a:	68bb      	ldr	r3, [r7, #8]
 8038c0c:	691b      	ldr	r3, [r3, #16]
 8038c0e:	2b00      	cmp	r3, #0
 8038c10:	d009      	beq.n	8038c26 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8038c12:	68bb      	ldr	r3, [r7, #8]
 8038c14:	6919      	ldr	r1, [r3, #16]
 8038c16:	693b      	ldr	r3, [r7, #16]
 8038c18:	015a      	lsls	r2, r3, #5
 8038c1a:	697b      	ldr	r3, [r7, #20]
 8038c1c:	4413      	add	r3, r2
 8038c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038c22:	460a      	mov	r2, r1
 8038c24:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8038c26:	693b      	ldr	r3, [r7, #16]
 8038c28:	015a      	lsls	r2, r3, #5
 8038c2a:	697b      	ldr	r3, [r7, #20]
 8038c2c:	4413      	add	r3, r2
 8038c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038c32:	681b      	ldr	r3, [r3, #0]
 8038c34:	693a      	ldr	r2, [r7, #16]
 8038c36:	0151      	lsls	r1, r2, #5
 8038c38:	697a      	ldr	r2, [r7, #20]
 8038c3a:	440a      	add	r2, r1
 8038c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038c40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038c44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038c46:	2300      	movs	r3, #0
}
 8038c48:	4618      	mov	r0, r3
 8038c4a:	371c      	adds	r7, #28
 8038c4c:	46bd      	mov	sp, r7
 8038c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038c52:	4770      	bx	lr
 8038c54:	e007ffff 	.word	0xe007ffff
 8038c58:	fff80000 	.word	0xfff80000

08038c5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038c5c:	b480      	push	{r7}
 8038c5e:	b087      	sub	sp, #28
 8038c60:	af00      	add	r7, sp, #0
 8038c62:	6078      	str	r0, [r7, #4]
 8038c64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8038c66:	2300      	movs	r3, #0
 8038c68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8038c6a:	2300      	movs	r3, #0
 8038c6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038c6e:	687b      	ldr	r3, [r7, #4]
 8038c70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8038c72:	683b      	ldr	r3, [r7, #0]
 8038c74:	785b      	ldrb	r3, [r3, #1]
 8038c76:	2b01      	cmp	r3, #1
 8038c78:	d14a      	bne.n	8038d10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8038c7a:	683b      	ldr	r3, [r7, #0]
 8038c7c:	781b      	ldrb	r3, [r3, #0]
 8038c7e:	015a      	lsls	r2, r3, #5
 8038c80:	693b      	ldr	r3, [r7, #16]
 8038c82:	4413      	add	r3, r2
 8038c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038c88:	681b      	ldr	r3, [r3, #0]
 8038c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038c92:	f040 8086 	bne.w	8038da2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8038c96:	683b      	ldr	r3, [r7, #0]
 8038c98:	781b      	ldrb	r3, [r3, #0]
 8038c9a:	015a      	lsls	r2, r3, #5
 8038c9c:	693b      	ldr	r3, [r7, #16]
 8038c9e:	4413      	add	r3, r2
 8038ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038ca4:	681b      	ldr	r3, [r3, #0]
 8038ca6:	683a      	ldr	r2, [r7, #0]
 8038ca8:	7812      	ldrb	r2, [r2, #0]
 8038caa:	0151      	lsls	r1, r2, #5
 8038cac:	693a      	ldr	r2, [r7, #16]
 8038cae:	440a      	add	r2, r1
 8038cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038cb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8038cb8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8038cba:	683b      	ldr	r3, [r7, #0]
 8038cbc:	781b      	ldrb	r3, [r3, #0]
 8038cbe:	015a      	lsls	r2, r3, #5
 8038cc0:	693b      	ldr	r3, [r7, #16]
 8038cc2:	4413      	add	r3, r2
 8038cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038cc8:	681b      	ldr	r3, [r3, #0]
 8038cca:	683a      	ldr	r2, [r7, #0]
 8038ccc:	7812      	ldrb	r2, [r2, #0]
 8038cce:	0151      	lsls	r1, r2, #5
 8038cd0:	693a      	ldr	r2, [r7, #16]
 8038cd2:	440a      	add	r2, r1
 8038cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038cd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8038cdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8038cde:	68fb      	ldr	r3, [r7, #12]
 8038ce0:	3301      	adds	r3, #1
 8038ce2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8038ce4:	68fb      	ldr	r3, [r7, #12]
 8038ce6:	f242 7210 	movw	r2, #10000	; 0x2710
 8038cea:	4293      	cmp	r3, r2
 8038cec:	d902      	bls.n	8038cf4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8038cee:	2301      	movs	r3, #1
 8038cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8038cf2:	e056      	b.n	8038da2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8038cf4:	683b      	ldr	r3, [r7, #0]
 8038cf6:	781b      	ldrb	r3, [r3, #0]
 8038cf8:	015a      	lsls	r2, r3, #5
 8038cfa:	693b      	ldr	r3, [r7, #16]
 8038cfc:	4413      	add	r3, r2
 8038cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038d02:	681b      	ldr	r3, [r3, #0]
 8038d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038d0c:	d0e7      	beq.n	8038cde <USB_EPStopXfer+0x82>
 8038d0e:	e048      	b.n	8038da2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8038d10:	683b      	ldr	r3, [r7, #0]
 8038d12:	781b      	ldrb	r3, [r3, #0]
 8038d14:	015a      	lsls	r2, r3, #5
 8038d16:	693b      	ldr	r3, [r7, #16]
 8038d18:	4413      	add	r3, r2
 8038d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038d1e:	681b      	ldr	r3, [r3, #0]
 8038d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038d28:	d13b      	bne.n	8038da2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8038d2a:	683b      	ldr	r3, [r7, #0]
 8038d2c:	781b      	ldrb	r3, [r3, #0]
 8038d2e:	015a      	lsls	r2, r3, #5
 8038d30:	693b      	ldr	r3, [r7, #16]
 8038d32:	4413      	add	r3, r2
 8038d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038d38:	681b      	ldr	r3, [r3, #0]
 8038d3a:	683a      	ldr	r2, [r7, #0]
 8038d3c:	7812      	ldrb	r2, [r2, #0]
 8038d3e:	0151      	lsls	r1, r2, #5
 8038d40:	693a      	ldr	r2, [r7, #16]
 8038d42:	440a      	add	r2, r1
 8038d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038d48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8038d4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8038d4e:	683b      	ldr	r3, [r7, #0]
 8038d50:	781b      	ldrb	r3, [r3, #0]
 8038d52:	015a      	lsls	r2, r3, #5
 8038d54:	693b      	ldr	r3, [r7, #16]
 8038d56:	4413      	add	r3, r2
 8038d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038d5c:	681b      	ldr	r3, [r3, #0]
 8038d5e:	683a      	ldr	r2, [r7, #0]
 8038d60:	7812      	ldrb	r2, [r2, #0]
 8038d62:	0151      	lsls	r1, r2, #5
 8038d64:	693a      	ldr	r2, [r7, #16]
 8038d66:	440a      	add	r2, r1
 8038d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038d6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8038d70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8038d72:	68fb      	ldr	r3, [r7, #12]
 8038d74:	3301      	adds	r3, #1
 8038d76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8038d78:	68fb      	ldr	r3, [r7, #12]
 8038d7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8038d7e:	4293      	cmp	r3, r2
 8038d80:	d902      	bls.n	8038d88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8038d82:	2301      	movs	r3, #1
 8038d84:	75fb      	strb	r3, [r7, #23]
          break;
 8038d86:	e00c      	b.n	8038da2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8038d88:	683b      	ldr	r3, [r7, #0]
 8038d8a:	781b      	ldrb	r3, [r3, #0]
 8038d8c:	015a      	lsls	r2, r3, #5
 8038d8e:	693b      	ldr	r3, [r7, #16]
 8038d90:	4413      	add	r3, r2
 8038d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038d96:	681b      	ldr	r3, [r3, #0]
 8038d98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038da0:	d0e7      	beq.n	8038d72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8038da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8038da4:	4618      	mov	r0, r3
 8038da6:	371c      	adds	r7, #28
 8038da8:	46bd      	mov	sp, r7
 8038daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038dae:	4770      	bx	lr

08038db0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8038db0:	b480      	push	{r7}
 8038db2:	b089      	sub	sp, #36	; 0x24
 8038db4:	af00      	add	r7, sp, #0
 8038db6:	60f8      	str	r0, [r7, #12]
 8038db8:	60b9      	str	r1, [r7, #8]
 8038dba:	4611      	mov	r1, r2
 8038dbc:	461a      	mov	r2, r3
 8038dbe:	460b      	mov	r3, r1
 8038dc0:	71fb      	strb	r3, [r7, #7]
 8038dc2:	4613      	mov	r3, r2
 8038dc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038dc6:	68fb      	ldr	r3, [r7, #12]
 8038dc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8038dca:	68bb      	ldr	r3, [r7, #8]
 8038dcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8038dce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8038dd2:	2b00      	cmp	r3, #0
 8038dd4:	d123      	bne.n	8038e1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8038dd6:	88bb      	ldrh	r3, [r7, #4]
 8038dd8:	3303      	adds	r3, #3
 8038dda:	089b      	lsrs	r3, r3, #2
 8038ddc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8038dde:	2300      	movs	r3, #0
 8038de0:	61bb      	str	r3, [r7, #24]
 8038de2:	e018      	b.n	8038e16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8038de4:	79fb      	ldrb	r3, [r7, #7]
 8038de6:	031a      	lsls	r2, r3, #12
 8038de8:	697b      	ldr	r3, [r7, #20]
 8038dea:	4413      	add	r3, r2
 8038dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038df0:	461a      	mov	r2, r3
 8038df2:	69fb      	ldr	r3, [r7, #28]
 8038df4:	681b      	ldr	r3, [r3, #0]
 8038df6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8038df8:	69fb      	ldr	r3, [r7, #28]
 8038dfa:	3301      	adds	r3, #1
 8038dfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038dfe:	69fb      	ldr	r3, [r7, #28]
 8038e00:	3301      	adds	r3, #1
 8038e02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038e04:	69fb      	ldr	r3, [r7, #28]
 8038e06:	3301      	adds	r3, #1
 8038e08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038e0a:	69fb      	ldr	r3, [r7, #28]
 8038e0c:	3301      	adds	r3, #1
 8038e0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8038e10:	69bb      	ldr	r3, [r7, #24]
 8038e12:	3301      	adds	r3, #1
 8038e14:	61bb      	str	r3, [r7, #24]
 8038e16:	69ba      	ldr	r2, [r7, #24]
 8038e18:	693b      	ldr	r3, [r7, #16]
 8038e1a:	429a      	cmp	r2, r3
 8038e1c:	d3e2      	bcc.n	8038de4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8038e1e:	2300      	movs	r3, #0
}
 8038e20:	4618      	mov	r0, r3
 8038e22:	3724      	adds	r7, #36	; 0x24
 8038e24:	46bd      	mov	sp, r7
 8038e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038e2a:	4770      	bx	lr

08038e2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8038e2c:	b480      	push	{r7}
 8038e2e:	b08b      	sub	sp, #44	; 0x2c
 8038e30:	af00      	add	r7, sp, #0
 8038e32:	60f8      	str	r0, [r7, #12]
 8038e34:	60b9      	str	r1, [r7, #8]
 8038e36:	4613      	mov	r3, r2
 8038e38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038e3a:	68fb      	ldr	r3, [r7, #12]
 8038e3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8038e3e:	68bb      	ldr	r3, [r7, #8]
 8038e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8038e42:	88fb      	ldrh	r3, [r7, #6]
 8038e44:	089b      	lsrs	r3, r3, #2
 8038e46:	b29b      	uxth	r3, r3
 8038e48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8038e4a:	88fb      	ldrh	r3, [r7, #6]
 8038e4c:	f003 0303 	and.w	r3, r3, #3
 8038e50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8038e52:	2300      	movs	r3, #0
 8038e54:	623b      	str	r3, [r7, #32]
 8038e56:	e014      	b.n	8038e82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8038e58:	69bb      	ldr	r3, [r7, #24]
 8038e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038e5e:	681a      	ldr	r2, [r3, #0]
 8038e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e62:	601a      	str	r2, [r3, #0]
    pDest++;
 8038e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e66:	3301      	adds	r3, #1
 8038e68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e6c:	3301      	adds	r3, #1
 8038e6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e72:	3301      	adds	r3, #1
 8038e74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e78:	3301      	adds	r3, #1
 8038e7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8038e7c:	6a3b      	ldr	r3, [r7, #32]
 8038e7e:	3301      	adds	r3, #1
 8038e80:	623b      	str	r3, [r7, #32]
 8038e82:	6a3a      	ldr	r2, [r7, #32]
 8038e84:	697b      	ldr	r3, [r7, #20]
 8038e86:	429a      	cmp	r2, r3
 8038e88:	d3e6      	bcc.n	8038e58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8038e8a:	8bfb      	ldrh	r3, [r7, #30]
 8038e8c:	2b00      	cmp	r3, #0
 8038e8e:	d01e      	beq.n	8038ece <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8038e90:	2300      	movs	r3, #0
 8038e92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8038e94:	69bb      	ldr	r3, [r7, #24]
 8038e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038e9a:	461a      	mov	r2, r3
 8038e9c:	f107 0310 	add.w	r3, r7, #16
 8038ea0:	6812      	ldr	r2, [r2, #0]
 8038ea2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8038ea4:	693a      	ldr	r2, [r7, #16]
 8038ea6:	6a3b      	ldr	r3, [r7, #32]
 8038ea8:	b2db      	uxtb	r3, r3
 8038eaa:	00db      	lsls	r3, r3, #3
 8038eac:	fa22 f303 	lsr.w	r3, r2, r3
 8038eb0:	b2da      	uxtb	r2, r3
 8038eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038eb4:	701a      	strb	r2, [r3, #0]
      i++;
 8038eb6:	6a3b      	ldr	r3, [r7, #32]
 8038eb8:	3301      	adds	r3, #1
 8038eba:	623b      	str	r3, [r7, #32]
      pDest++;
 8038ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038ebe:	3301      	adds	r3, #1
 8038ec0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8038ec2:	8bfb      	ldrh	r3, [r7, #30]
 8038ec4:	3b01      	subs	r3, #1
 8038ec6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8038ec8:	8bfb      	ldrh	r3, [r7, #30]
 8038eca:	2b00      	cmp	r3, #0
 8038ecc:	d1ea      	bne.n	8038ea4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8038ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8038ed0:	4618      	mov	r0, r3
 8038ed2:	372c      	adds	r7, #44	; 0x2c
 8038ed4:	46bd      	mov	sp, r7
 8038ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038eda:	4770      	bx	lr

08038edc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038edc:	b480      	push	{r7}
 8038ede:	b085      	sub	sp, #20
 8038ee0:	af00      	add	r7, sp, #0
 8038ee2:	6078      	str	r0, [r7, #4]
 8038ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038ee6:	687b      	ldr	r3, [r7, #4]
 8038ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038eea:	683b      	ldr	r3, [r7, #0]
 8038eec:	781b      	ldrb	r3, [r3, #0]
 8038eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8038ef0:	683b      	ldr	r3, [r7, #0]
 8038ef2:	785b      	ldrb	r3, [r3, #1]
 8038ef4:	2b01      	cmp	r3, #1
 8038ef6:	d12c      	bne.n	8038f52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8038ef8:	68bb      	ldr	r3, [r7, #8]
 8038efa:	015a      	lsls	r2, r3, #5
 8038efc:	68fb      	ldr	r3, [r7, #12]
 8038efe:	4413      	add	r3, r2
 8038f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038f04:	681b      	ldr	r3, [r3, #0]
 8038f06:	2b00      	cmp	r3, #0
 8038f08:	db12      	blt.n	8038f30 <USB_EPSetStall+0x54>
 8038f0a:	68bb      	ldr	r3, [r7, #8]
 8038f0c:	2b00      	cmp	r3, #0
 8038f0e:	d00f      	beq.n	8038f30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8038f10:	68bb      	ldr	r3, [r7, #8]
 8038f12:	015a      	lsls	r2, r3, #5
 8038f14:	68fb      	ldr	r3, [r7, #12]
 8038f16:	4413      	add	r3, r2
 8038f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038f1c:	681b      	ldr	r3, [r3, #0]
 8038f1e:	68ba      	ldr	r2, [r7, #8]
 8038f20:	0151      	lsls	r1, r2, #5
 8038f22:	68fa      	ldr	r2, [r7, #12]
 8038f24:	440a      	add	r2, r1
 8038f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038f2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8038f2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8038f30:	68bb      	ldr	r3, [r7, #8]
 8038f32:	015a      	lsls	r2, r3, #5
 8038f34:	68fb      	ldr	r3, [r7, #12]
 8038f36:	4413      	add	r3, r2
 8038f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038f3c:	681b      	ldr	r3, [r3, #0]
 8038f3e:	68ba      	ldr	r2, [r7, #8]
 8038f40:	0151      	lsls	r1, r2, #5
 8038f42:	68fa      	ldr	r2, [r7, #12]
 8038f44:	440a      	add	r2, r1
 8038f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8038f4e:	6013      	str	r3, [r2, #0]
 8038f50:	e02b      	b.n	8038faa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8038f52:	68bb      	ldr	r3, [r7, #8]
 8038f54:	015a      	lsls	r2, r3, #5
 8038f56:	68fb      	ldr	r3, [r7, #12]
 8038f58:	4413      	add	r3, r2
 8038f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038f5e:	681b      	ldr	r3, [r3, #0]
 8038f60:	2b00      	cmp	r3, #0
 8038f62:	db12      	blt.n	8038f8a <USB_EPSetStall+0xae>
 8038f64:	68bb      	ldr	r3, [r7, #8]
 8038f66:	2b00      	cmp	r3, #0
 8038f68:	d00f      	beq.n	8038f8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8038f6a:	68bb      	ldr	r3, [r7, #8]
 8038f6c:	015a      	lsls	r2, r3, #5
 8038f6e:	68fb      	ldr	r3, [r7, #12]
 8038f70:	4413      	add	r3, r2
 8038f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038f76:	681b      	ldr	r3, [r3, #0]
 8038f78:	68ba      	ldr	r2, [r7, #8]
 8038f7a:	0151      	lsls	r1, r2, #5
 8038f7c:	68fa      	ldr	r2, [r7, #12]
 8038f7e:	440a      	add	r2, r1
 8038f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038f84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8038f88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8038f8a:	68bb      	ldr	r3, [r7, #8]
 8038f8c:	015a      	lsls	r2, r3, #5
 8038f8e:	68fb      	ldr	r3, [r7, #12]
 8038f90:	4413      	add	r3, r2
 8038f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038f96:	681b      	ldr	r3, [r3, #0]
 8038f98:	68ba      	ldr	r2, [r7, #8]
 8038f9a:	0151      	lsls	r1, r2, #5
 8038f9c:	68fa      	ldr	r2, [r7, #12]
 8038f9e:	440a      	add	r2, r1
 8038fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038fa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8038fa8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038faa:	2300      	movs	r3, #0
}
 8038fac:	4618      	mov	r0, r3
 8038fae:	3714      	adds	r7, #20
 8038fb0:	46bd      	mov	sp, r7
 8038fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038fb6:	4770      	bx	lr

08038fb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038fb8:	b480      	push	{r7}
 8038fba:	b085      	sub	sp, #20
 8038fbc:	af00      	add	r7, sp, #0
 8038fbe:	6078      	str	r0, [r7, #4]
 8038fc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038fc2:	687b      	ldr	r3, [r7, #4]
 8038fc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038fc6:	683b      	ldr	r3, [r7, #0]
 8038fc8:	781b      	ldrb	r3, [r3, #0]
 8038fca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8038fcc:	683b      	ldr	r3, [r7, #0]
 8038fce:	785b      	ldrb	r3, [r3, #1]
 8038fd0:	2b01      	cmp	r3, #1
 8038fd2:	d128      	bne.n	8039026 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8038fd4:	68bb      	ldr	r3, [r7, #8]
 8038fd6:	015a      	lsls	r2, r3, #5
 8038fd8:	68fb      	ldr	r3, [r7, #12]
 8038fda:	4413      	add	r3, r2
 8038fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038fe0:	681b      	ldr	r3, [r3, #0]
 8038fe2:	68ba      	ldr	r2, [r7, #8]
 8038fe4:	0151      	lsls	r1, r2, #5
 8038fe6:	68fa      	ldr	r2, [r7, #12]
 8038fe8:	440a      	add	r2, r1
 8038fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8038ff2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8038ff4:	683b      	ldr	r3, [r7, #0]
 8038ff6:	791b      	ldrb	r3, [r3, #4]
 8038ff8:	2b03      	cmp	r3, #3
 8038ffa:	d003      	beq.n	8039004 <USB_EPClearStall+0x4c>
 8038ffc:	683b      	ldr	r3, [r7, #0]
 8038ffe:	791b      	ldrb	r3, [r3, #4]
 8039000:	2b02      	cmp	r3, #2
 8039002:	d138      	bne.n	8039076 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8039004:	68bb      	ldr	r3, [r7, #8]
 8039006:	015a      	lsls	r2, r3, #5
 8039008:	68fb      	ldr	r3, [r7, #12]
 803900a:	4413      	add	r3, r2
 803900c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039010:	681b      	ldr	r3, [r3, #0]
 8039012:	68ba      	ldr	r2, [r7, #8]
 8039014:	0151      	lsls	r1, r2, #5
 8039016:	68fa      	ldr	r2, [r7, #12]
 8039018:	440a      	add	r2, r1
 803901a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803901e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8039022:	6013      	str	r3, [r2, #0]
 8039024:	e027      	b.n	8039076 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8039026:	68bb      	ldr	r3, [r7, #8]
 8039028:	015a      	lsls	r2, r3, #5
 803902a:	68fb      	ldr	r3, [r7, #12]
 803902c:	4413      	add	r3, r2
 803902e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039032:	681b      	ldr	r3, [r3, #0]
 8039034:	68ba      	ldr	r2, [r7, #8]
 8039036:	0151      	lsls	r1, r2, #5
 8039038:	68fa      	ldr	r2, [r7, #12]
 803903a:	440a      	add	r2, r1
 803903c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039040:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8039044:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8039046:	683b      	ldr	r3, [r7, #0]
 8039048:	791b      	ldrb	r3, [r3, #4]
 803904a:	2b03      	cmp	r3, #3
 803904c:	d003      	beq.n	8039056 <USB_EPClearStall+0x9e>
 803904e:	683b      	ldr	r3, [r7, #0]
 8039050:	791b      	ldrb	r3, [r3, #4]
 8039052:	2b02      	cmp	r3, #2
 8039054:	d10f      	bne.n	8039076 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8039056:	68bb      	ldr	r3, [r7, #8]
 8039058:	015a      	lsls	r2, r3, #5
 803905a:	68fb      	ldr	r3, [r7, #12]
 803905c:	4413      	add	r3, r2
 803905e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039062:	681b      	ldr	r3, [r3, #0]
 8039064:	68ba      	ldr	r2, [r7, #8]
 8039066:	0151      	lsls	r1, r2, #5
 8039068:	68fa      	ldr	r2, [r7, #12]
 803906a:	440a      	add	r2, r1
 803906c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8039074:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8039076:	2300      	movs	r3, #0
}
 8039078:	4618      	mov	r0, r3
 803907a:	3714      	adds	r7, #20
 803907c:	46bd      	mov	sp, r7
 803907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039082:	4770      	bx	lr

08039084 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8039084:	b480      	push	{r7}
 8039086:	b085      	sub	sp, #20
 8039088:	af00      	add	r7, sp, #0
 803908a:	6078      	str	r0, [r7, #4]
 803908c:	460b      	mov	r3, r1
 803908e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039090:	687b      	ldr	r3, [r7, #4]
 8039092:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8039094:	68fb      	ldr	r3, [r7, #12]
 8039096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803909a:	681b      	ldr	r3, [r3, #0]
 803909c:	68fa      	ldr	r2, [r7, #12]
 803909e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80390a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80390a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80390a8:	68fb      	ldr	r3, [r7, #12]
 80390aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80390ae:	681a      	ldr	r2, [r3, #0]
 80390b0:	78fb      	ldrb	r3, [r7, #3]
 80390b2:	011b      	lsls	r3, r3, #4
 80390b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80390b8:	68f9      	ldr	r1, [r7, #12]
 80390ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80390be:	4313      	orrs	r3, r2
 80390c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80390c2:	2300      	movs	r3, #0
}
 80390c4:	4618      	mov	r0, r3
 80390c6:	3714      	adds	r7, #20
 80390c8:	46bd      	mov	sp, r7
 80390ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80390ce:	4770      	bx	lr

080390d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80390d0:	b480      	push	{r7}
 80390d2:	b085      	sub	sp, #20
 80390d4:	af00      	add	r7, sp, #0
 80390d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80390d8:	687b      	ldr	r3, [r7, #4]
 80390da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80390dc:	68fb      	ldr	r3, [r7, #12]
 80390de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80390e2:	681b      	ldr	r3, [r3, #0]
 80390e4:	68fa      	ldr	r2, [r7, #12]
 80390e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80390ea:	f023 0303 	bic.w	r3, r3, #3
 80390ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80390f0:	68fb      	ldr	r3, [r7, #12]
 80390f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80390f6:	685b      	ldr	r3, [r3, #4]
 80390f8:	68fa      	ldr	r2, [r7, #12]
 80390fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80390fe:	f023 0302 	bic.w	r3, r3, #2
 8039102:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8039104:	2300      	movs	r3, #0
}
 8039106:	4618      	mov	r0, r3
 8039108:	3714      	adds	r7, #20
 803910a:	46bd      	mov	sp, r7
 803910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039110:	4770      	bx	lr

08039112 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8039112:	b480      	push	{r7}
 8039114:	b085      	sub	sp, #20
 8039116:	af00      	add	r7, sp, #0
 8039118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803911a:	687b      	ldr	r3, [r7, #4]
 803911c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803911e:	68fb      	ldr	r3, [r7, #12]
 8039120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8039124:	681b      	ldr	r3, [r3, #0]
 8039126:	68fa      	ldr	r2, [r7, #12]
 8039128:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803912c:	f023 0303 	bic.w	r3, r3, #3
 8039130:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8039132:	68fb      	ldr	r3, [r7, #12]
 8039134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039138:	685b      	ldr	r3, [r3, #4]
 803913a:	68fa      	ldr	r2, [r7, #12]
 803913c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8039140:	f043 0302 	orr.w	r3, r3, #2
 8039144:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8039146:	2300      	movs	r3, #0
}
 8039148:	4618      	mov	r0, r3
 803914a:	3714      	adds	r7, #20
 803914c:	46bd      	mov	sp, r7
 803914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039152:	4770      	bx	lr

08039154 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8039154:	b480      	push	{r7}
 8039156:	b085      	sub	sp, #20
 8039158:	af00      	add	r7, sp, #0
 803915a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 803915c:	687b      	ldr	r3, [r7, #4]
 803915e:	695b      	ldr	r3, [r3, #20]
 8039160:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8039162:	687b      	ldr	r3, [r7, #4]
 8039164:	699b      	ldr	r3, [r3, #24]
 8039166:	68fa      	ldr	r2, [r7, #12]
 8039168:	4013      	ands	r3, r2
 803916a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 803916c:	68fb      	ldr	r3, [r7, #12]
}
 803916e:	4618      	mov	r0, r3
 8039170:	3714      	adds	r7, #20
 8039172:	46bd      	mov	sp, r7
 8039174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039178:	4770      	bx	lr

0803917a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803917a:	b480      	push	{r7}
 803917c:	b085      	sub	sp, #20
 803917e:	af00      	add	r7, sp, #0
 8039180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039182:	687b      	ldr	r3, [r7, #4]
 8039184:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8039186:	68fb      	ldr	r3, [r7, #12]
 8039188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803918c:	699b      	ldr	r3, [r3, #24]
 803918e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8039190:	68fb      	ldr	r3, [r7, #12]
 8039192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039196:	69db      	ldr	r3, [r3, #28]
 8039198:	68ba      	ldr	r2, [r7, #8]
 803919a:	4013      	ands	r3, r2
 803919c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 803919e:	68bb      	ldr	r3, [r7, #8]
 80391a0:	0c1b      	lsrs	r3, r3, #16
}
 80391a2:	4618      	mov	r0, r3
 80391a4:	3714      	adds	r7, #20
 80391a6:	46bd      	mov	sp, r7
 80391a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80391ac:	4770      	bx	lr

080391ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80391ae:	b480      	push	{r7}
 80391b0:	b085      	sub	sp, #20
 80391b2:	af00      	add	r7, sp, #0
 80391b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80391b6:	687b      	ldr	r3, [r7, #4]
 80391b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80391ba:	68fb      	ldr	r3, [r7, #12]
 80391bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80391c0:	699b      	ldr	r3, [r3, #24]
 80391c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80391c4:	68fb      	ldr	r3, [r7, #12]
 80391c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80391ca:	69db      	ldr	r3, [r3, #28]
 80391cc:	68ba      	ldr	r2, [r7, #8]
 80391ce:	4013      	ands	r3, r2
 80391d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80391d2:	68bb      	ldr	r3, [r7, #8]
 80391d4:	b29b      	uxth	r3, r3
}
 80391d6:	4618      	mov	r0, r3
 80391d8:	3714      	adds	r7, #20
 80391da:	46bd      	mov	sp, r7
 80391dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80391e0:	4770      	bx	lr

080391e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80391e2:	b480      	push	{r7}
 80391e4:	b085      	sub	sp, #20
 80391e6:	af00      	add	r7, sp, #0
 80391e8:	6078      	str	r0, [r7, #4]
 80391ea:	460b      	mov	r3, r1
 80391ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80391ee:	687b      	ldr	r3, [r7, #4]
 80391f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80391f2:	78fb      	ldrb	r3, [r7, #3]
 80391f4:	015a      	lsls	r2, r3, #5
 80391f6:	68fb      	ldr	r3, [r7, #12]
 80391f8:	4413      	add	r3, r2
 80391fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80391fe:	689b      	ldr	r3, [r3, #8]
 8039200:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8039202:	68fb      	ldr	r3, [r7, #12]
 8039204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039208:	695b      	ldr	r3, [r3, #20]
 803920a:	68ba      	ldr	r2, [r7, #8]
 803920c:	4013      	ands	r3, r2
 803920e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8039210:	68bb      	ldr	r3, [r7, #8]
}
 8039212:	4618      	mov	r0, r3
 8039214:	3714      	adds	r7, #20
 8039216:	46bd      	mov	sp, r7
 8039218:	f85d 7b04 	ldr.w	r7, [sp], #4
 803921c:	4770      	bx	lr

0803921e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803921e:	b480      	push	{r7}
 8039220:	b087      	sub	sp, #28
 8039222:	af00      	add	r7, sp, #0
 8039224:	6078      	str	r0, [r7, #4]
 8039226:	460b      	mov	r3, r1
 8039228:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803922a:	687b      	ldr	r3, [r7, #4]
 803922c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 803922e:	697b      	ldr	r3, [r7, #20]
 8039230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039234:	691b      	ldr	r3, [r3, #16]
 8039236:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8039238:	697b      	ldr	r3, [r7, #20]
 803923a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803923e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8039240:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8039242:	78fb      	ldrb	r3, [r7, #3]
 8039244:	f003 030f 	and.w	r3, r3, #15
 8039248:	68fa      	ldr	r2, [r7, #12]
 803924a:	fa22 f303 	lsr.w	r3, r2, r3
 803924e:	01db      	lsls	r3, r3, #7
 8039250:	b2db      	uxtb	r3, r3
 8039252:	693a      	ldr	r2, [r7, #16]
 8039254:	4313      	orrs	r3, r2
 8039256:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8039258:	78fb      	ldrb	r3, [r7, #3]
 803925a:	015a      	lsls	r2, r3, #5
 803925c:	697b      	ldr	r3, [r7, #20]
 803925e:	4413      	add	r3, r2
 8039260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039264:	689b      	ldr	r3, [r3, #8]
 8039266:	693a      	ldr	r2, [r7, #16]
 8039268:	4013      	ands	r3, r2
 803926a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803926c:	68bb      	ldr	r3, [r7, #8]
}
 803926e:	4618      	mov	r0, r3
 8039270:	371c      	adds	r7, #28
 8039272:	46bd      	mov	sp, r7
 8039274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039278:	4770      	bx	lr

0803927a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 803927a:	b480      	push	{r7}
 803927c:	b083      	sub	sp, #12
 803927e:	af00      	add	r7, sp, #0
 8039280:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8039282:	687b      	ldr	r3, [r7, #4]
 8039284:	695b      	ldr	r3, [r3, #20]
 8039286:	f003 0301 	and.w	r3, r3, #1
}
 803928a:	4618      	mov	r0, r3
 803928c:	370c      	adds	r7, #12
 803928e:	46bd      	mov	sp, r7
 8039290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039294:	4770      	bx	lr
	...

08039298 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8039298:	b480      	push	{r7}
 803929a:	b085      	sub	sp, #20
 803929c:	af00      	add	r7, sp, #0
 803929e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80392a0:	687b      	ldr	r3, [r7, #4]
 80392a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80392a4:	68fb      	ldr	r3, [r7, #12]
 80392a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80392aa:	681a      	ldr	r2, [r3, #0]
 80392ac:	68fb      	ldr	r3, [r7, #12]
 80392ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80392b2:	4619      	mov	r1, r3
 80392b4:	4b09      	ldr	r3, [pc, #36]	; (80392dc <USB_ActivateSetup+0x44>)
 80392b6:	4013      	ands	r3, r2
 80392b8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80392ba:	68fb      	ldr	r3, [r7, #12]
 80392bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80392c0:	685b      	ldr	r3, [r3, #4]
 80392c2:	68fa      	ldr	r2, [r7, #12]
 80392c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80392c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80392cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80392ce:	2300      	movs	r3, #0
}
 80392d0:	4618      	mov	r0, r3
 80392d2:	3714      	adds	r7, #20
 80392d4:	46bd      	mov	sp, r7
 80392d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80392da:	4770      	bx	lr
 80392dc:	fffff800 	.word	0xfffff800

080392e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80392e0:	b480      	push	{r7}
 80392e2:	b087      	sub	sp, #28
 80392e4:	af00      	add	r7, sp, #0
 80392e6:	60f8      	str	r0, [r7, #12]
 80392e8:	460b      	mov	r3, r1
 80392ea:	607a      	str	r2, [r7, #4]
 80392ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80392ee:	68fb      	ldr	r3, [r7, #12]
 80392f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80392f2:	68fb      	ldr	r3, [r7, #12]
 80392f4:	333c      	adds	r3, #60	; 0x3c
 80392f6:	3304      	adds	r3, #4
 80392f8:	681b      	ldr	r3, [r3, #0]
 80392fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80392fc:	693b      	ldr	r3, [r7, #16]
 80392fe:	4a26      	ldr	r2, [pc, #152]	; (8039398 <USB_EP0_OutStart+0xb8>)
 8039300:	4293      	cmp	r3, r2
 8039302:	d90a      	bls.n	803931a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8039304:	697b      	ldr	r3, [r7, #20]
 8039306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803930a:	681b      	ldr	r3, [r3, #0]
 803930c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8039310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8039314:	d101      	bne.n	803931a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8039316:	2300      	movs	r3, #0
 8039318:	e037      	b.n	803938a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 803931a:	697b      	ldr	r3, [r7, #20]
 803931c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039320:	461a      	mov	r2, r3
 8039322:	2300      	movs	r3, #0
 8039324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8039326:	697b      	ldr	r3, [r7, #20]
 8039328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803932c:	691b      	ldr	r3, [r3, #16]
 803932e:	697a      	ldr	r2, [r7, #20]
 8039330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8039338:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 803933a:	697b      	ldr	r3, [r7, #20]
 803933c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039340:	691b      	ldr	r3, [r3, #16]
 8039342:	697a      	ldr	r2, [r7, #20]
 8039344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039348:	f043 0318 	orr.w	r3, r3, #24
 803934c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 803934e:	697b      	ldr	r3, [r7, #20]
 8039350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039354:	691b      	ldr	r3, [r3, #16]
 8039356:	697a      	ldr	r2, [r7, #20]
 8039358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803935c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8039360:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8039362:	7afb      	ldrb	r3, [r7, #11]
 8039364:	2b01      	cmp	r3, #1
 8039366:	d10f      	bne.n	8039388 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8039368:	697b      	ldr	r3, [r7, #20]
 803936a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803936e:	461a      	mov	r2, r3
 8039370:	687b      	ldr	r3, [r7, #4]
 8039372:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8039374:	697b      	ldr	r3, [r7, #20]
 8039376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803937a:	681b      	ldr	r3, [r3, #0]
 803937c:	697a      	ldr	r2, [r7, #20]
 803937e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039382:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8039386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8039388:	2300      	movs	r3, #0
}
 803938a:	4618      	mov	r0, r3
 803938c:	371c      	adds	r7, #28
 803938e:	46bd      	mov	sp, r7
 8039390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039394:	4770      	bx	lr
 8039396:	bf00      	nop
 8039398:	4f54300a 	.word	0x4f54300a

0803939c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 803939c:	b480      	push	{r7}
 803939e:	b085      	sub	sp, #20
 80393a0:	af00      	add	r7, sp, #0
 80393a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80393a4:	2300      	movs	r3, #0
 80393a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80393a8:	68fb      	ldr	r3, [r7, #12]
 80393aa:	3301      	adds	r3, #1
 80393ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80393ae:	68fb      	ldr	r3, [r7, #12]
 80393b0:	4a13      	ldr	r2, [pc, #76]	; (8039400 <USB_CoreReset+0x64>)
 80393b2:	4293      	cmp	r3, r2
 80393b4:	d901      	bls.n	80393ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80393b6:	2303      	movs	r3, #3
 80393b8:	e01b      	b.n	80393f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80393ba:	687b      	ldr	r3, [r7, #4]
 80393bc:	691b      	ldr	r3, [r3, #16]
 80393be:	2b00      	cmp	r3, #0
 80393c0:	daf2      	bge.n	80393a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80393c2:	2300      	movs	r3, #0
 80393c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80393c6:	687b      	ldr	r3, [r7, #4]
 80393c8:	691b      	ldr	r3, [r3, #16]
 80393ca:	f043 0201 	orr.w	r2, r3, #1
 80393ce:	687b      	ldr	r3, [r7, #4]
 80393d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80393d2:	68fb      	ldr	r3, [r7, #12]
 80393d4:	3301      	adds	r3, #1
 80393d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80393d8:	68fb      	ldr	r3, [r7, #12]
 80393da:	4a09      	ldr	r2, [pc, #36]	; (8039400 <USB_CoreReset+0x64>)
 80393dc:	4293      	cmp	r3, r2
 80393de:	d901      	bls.n	80393e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80393e0:	2303      	movs	r3, #3
 80393e2:	e006      	b.n	80393f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80393e4:	687b      	ldr	r3, [r7, #4]
 80393e6:	691b      	ldr	r3, [r3, #16]
 80393e8:	f003 0301 	and.w	r3, r3, #1
 80393ec:	2b01      	cmp	r3, #1
 80393ee:	d0f0      	beq.n	80393d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80393f0:	2300      	movs	r3, #0
}
 80393f2:	4618      	mov	r0, r3
 80393f4:	3714      	adds	r7, #20
 80393f6:	46bd      	mov	sp, r7
 80393f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80393fc:	4770      	bx	lr
 80393fe:	bf00      	nop
 8039400:	00030d40 	.word	0x00030d40

08039404 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039404:	b580      	push	{r7, lr}
 8039406:	b084      	sub	sp, #16
 8039408:	af00      	add	r7, sp, #0
 803940a:	6078      	str	r0, [r7, #4]
 803940c:	460b      	mov	r3, r1
 803940e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8039410:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8039414:	f002 fc54 	bl	803bcc0 <USBD_static_malloc>
 8039418:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 803941a:	68fb      	ldr	r3, [r7, #12]
 803941c:	2b00      	cmp	r3, #0
 803941e:	d109      	bne.n	8039434 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8039420:	687b      	ldr	r3, [r7, #4]
 8039422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039426:	687b      	ldr	r3, [r7, #4]
 8039428:	32b0      	adds	r2, #176	; 0xb0
 803942a:	2100      	movs	r1, #0
 803942c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8039430:	2302      	movs	r3, #2
 8039432:	e0d4      	b.n	80395de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8039434:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8039438:	2100      	movs	r1, #0
 803943a:	68f8      	ldr	r0, [r7, #12]
 803943c:	f002 fd42 	bl	803bec4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8039440:	687b      	ldr	r3, [r7, #4]
 8039442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039446:	687b      	ldr	r3, [r7, #4]
 8039448:	32b0      	adds	r2, #176	; 0xb0
 803944a:	68f9      	ldr	r1, [r7, #12]
 803944c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8039450:	687b      	ldr	r3, [r7, #4]
 8039452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039456:	687b      	ldr	r3, [r7, #4]
 8039458:	32b0      	adds	r2, #176	; 0xb0
 803945a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 803945e:	687b      	ldr	r3, [r7, #4]
 8039460:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8039464:	687b      	ldr	r3, [r7, #4]
 8039466:	7c1b      	ldrb	r3, [r3, #16]
 8039468:	2b00      	cmp	r3, #0
 803946a:	d138      	bne.n	80394de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 803946c:	4b5e      	ldr	r3, [pc, #376]	; (80395e8 <USBD_CDC_Init+0x1e4>)
 803946e:	7819      	ldrb	r1, [r3, #0]
 8039470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8039474:	2202      	movs	r2, #2
 8039476:	6878      	ldr	r0, [r7, #4]
 8039478:	f002 faff 	bl	803ba7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803947c:	4b5a      	ldr	r3, [pc, #360]	; (80395e8 <USBD_CDC_Init+0x1e4>)
 803947e:	781b      	ldrb	r3, [r3, #0]
 8039480:	f003 020f 	and.w	r2, r3, #15
 8039484:	6879      	ldr	r1, [r7, #4]
 8039486:	4613      	mov	r3, r2
 8039488:	009b      	lsls	r3, r3, #2
 803948a:	4413      	add	r3, r2
 803948c:	009b      	lsls	r3, r3, #2
 803948e:	440b      	add	r3, r1
 8039490:	3324      	adds	r3, #36	; 0x24
 8039492:	2201      	movs	r2, #1
 8039494:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8039496:	4b55      	ldr	r3, [pc, #340]	; (80395ec <USBD_CDC_Init+0x1e8>)
 8039498:	7819      	ldrb	r1, [r3, #0]
 803949a:	f44f 7300 	mov.w	r3, #512	; 0x200
 803949e:	2202      	movs	r2, #2
 80394a0:	6878      	ldr	r0, [r7, #4]
 80394a2:	f002 faea 	bl	803ba7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80394a6:	4b51      	ldr	r3, [pc, #324]	; (80395ec <USBD_CDC_Init+0x1e8>)
 80394a8:	781b      	ldrb	r3, [r3, #0]
 80394aa:	f003 020f 	and.w	r2, r3, #15
 80394ae:	6879      	ldr	r1, [r7, #4]
 80394b0:	4613      	mov	r3, r2
 80394b2:	009b      	lsls	r3, r3, #2
 80394b4:	4413      	add	r3, r2
 80394b6:	009b      	lsls	r3, r3, #2
 80394b8:	440b      	add	r3, r1
 80394ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80394be:	2201      	movs	r2, #1
 80394c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80394c2:	4b4b      	ldr	r3, [pc, #300]	; (80395f0 <USBD_CDC_Init+0x1ec>)
 80394c4:	781b      	ldrb	r3, [r3, #0]
 80394c6:	f003 020f 	and.w	r2, r3, #15
 80394ca:	6879      	ldr	r1, [r7, #4]
 80394cc:	4613      	mov	r3, r2
 80394ce:	009b      	lsls	r3, r3, #2
 80394d0:	4413      	add	r3, r2
 80394d2:	009b      	lsls	r3, r3, #2
 80394d4:	440b      	add	r3, r1
 80394d6:	3326      	adds	r3, #38	; 0x26
 80394d8:	2210      	movs	r2, #16
 80394da:	801a      	strh	r2, [r3, #0]
 80394dc:	e035      	b.n	803954a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80394de:	4b42      	ldr	r3, [pc, #264]	; (80395e8 <USBD_CDC_Init+0x1e4>)
 80394e0:	7819      	ldrb	r1, [r3, #0]
 80394e2:	2340      	movs	r3, #64	; 0x40
 80394e4:	2202      	movs	r2, #2
 80394e6:	6878      	ldr	r0, [r7, #4]
 80394e8:	f002 fac7 	bl	803ba7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80394ec:	4b3e      	ldr	r3, [pc, #248]	; (80395e8 <USBD_CDC_Init+0x1e4>)
 80394ee:	781b      	ldrb	r3, [r3, #0]
 80394f0:	f003 020f 	and.w	r2, r3, #15
 80394f4:	6879      	ldr	r1, [r7, #4]
 80394f6:	4613      	mov	r3, r2
 80394f8:	009b      	lsls	r3, r3, #2
 80394fa:	4413      	add	r3, r2
 80394fc:	009b      	lsls	r3, r3, #2
 80394fe:	440b      	add	r3, r1
 8039500:	3324      	adds	r3, #36	; 0x24
 8039502:	2201      	movs	r2, #1
 8039504:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8039506:	4b39      	ldr	r3, [pc, #228]	; (80395ec <USBD_CDC_Init+0x1e8>)
 8039508:	7819      	ldrb	r1, [r3, #0]
 803950a:	2340      	movs	r3, #64	; 0x40
 803950c:	2202      	movs	r2, #2
 803950e:	6878      	ldr	r0, [r7, #4]
 8039510:	f002 fab3 	bl	803ba7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8039514:	4b35      	ldr	r3, [pc, #212]	; (80395ec <USBD_CDC_Init+0x1e8>)
 8039516:	781b      	ldrb	r3, [r3, #0]
 8039518:	f003 020f 	and.w	r2, r3, #15
 803951c:	6879      	ldr	r1, [r7, #4]
 803951e:	4613      	mov	r3, r2
 8039520:	009b      	lsls	r3, r3, #2
 8039522:	4413      	add	r3, r2
 8039524:	009b      	lsls	r3, r3, #2
 8039526:	440b      	add	r3, r1
 8039528:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803952c:	2201      	movs	r2, #1
 803952e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8039530:	4b2f      	ldr	r3, [pc, #188]	; (80395f0 <USBD_CDC_Init+0x1ec>)
 8039532:	781b      	ldrb	r3, [r3, #0]
 8039534:	f003 020f 	and.w	r2, r3, #15
 8039538:	6879      	ldr	r1, [r7, #4]
 803953a:	4613      	mov	r3, r2
 803953c:	009b      	lsls	r3, r3, #2
 803953e:	4413      	add	r3, r2
 8039540:	009b      	lsls	r3, r3, #2
 8039542:	440b      	add	r3, r1
 8039544:	3326      	adds	r3, #38	; 0x26
 8039546:	2210      	movs	r2, #16
 8039548:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 803954a:	4b29      	ldr	r3, [pc, #164]	; (80395f0 <USBD_CDC_Init+0x1ec>)
 803954c:	7819      	ldrb	r1, [r3, #0]
 803954e:	2308      	movs	r3, #8
 8039550:	2203      	movs	r2, #3
 8039552:	6878      	ldr	r0, [r7, #4]
 8039554:	f002 fa91 	bl	803ba7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8039558:	4b25      	ldr	r3, [pc, #148]	; (80395f0 <USBD_CDC_Init+0x1ec>)
 803955a:	781b      	ldrb	r3, [r3, #0]
 803955c:	f003 020f 	and.w	r2, r3, #15
 8039560:	6879      	ldr	r1, [r7, #4]
 8039562:	4613      	mov	r3, r2
 8039564:	009b      	lsls	r3, r3, #2
 8039566:	4413      	add	r3, r2
 8039568:	009b      	lsls	r3, r3, #2
 803956a:	440b      	add	r3, r1
 803956c:	3324      	adds	r3, #36	; 0x24
 803956e:	2201      	movs	r2, #1
 8039570:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8039572:	68fb      	ldr	r3, [r7, #12]
 8039574:	2200      	movs	r2, #0
 8039576:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 803957a:	687b      	ldr	r3, [r7, #4]
 803957c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039580:	687a      	ldr	r2, [r7, #4]
 8039582:	33b0      	adds	r3, #176	; 0xb0
 8039584:	009b      	lsls	r3, r3, #2
 8039586:	4413      	add	r3, r2
 8039588:	685b      	ldr	r3, [r3, #4]
 803958a:	681b      	ldr	r3, [r3, #0]
 803958c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 803958e:	68fb      	ldr	r3, [r7, #12]
 8039590:	2200      	movs	r2, #0
 8039592:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8039596:	68fb      	ldr	r3, [r7, #12]
 8039598:	2200      	movs	r2, #0
 803959a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 803959e:	68fb      	ldr	r3, [r7, #12]
 80395a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80395a4:	2b00      	cmp	r3, #0
 80395a6:	d101      	bne.n	80395ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80395a8:	2302      	movs	r3, #2
 80395aa:	e018      	b.n	80395de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80395ac:	687b      	ldr	r3, [r7, #4]
 80395ae:	7c1b      	ldrb	r3, [r3, #16]
 80395b0:	2b00      	cmp	r3, #0
 80395b2:	d10a      	bne.n	80395ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80395b4:	4b0d      	ldr	r3, [pc, #52]	; (80395ec <USBD_CDC_Init+0x1e8>)
 80395b6:	7819      	ldrb	r1, [r3, #0]
 80395b8:	68fb      	ldr	r3, [r7, #12]
 80395ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80395be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80395c2:	6878      	ldr	r0, [r7, #4]
 80395c4:	f002 fb48 	bl	803bc58 <USBD_LL_PrepareReceive>
 80395c8:	e008      	b.n	80395dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80395ca:	4b08      	ldr	r3, [pc, #32]	; (80395ec <USBD_CDC_Init+0x1e8>)
 80395cc:	7819      	ldrb	r1, [r3, #0]
 80395ce:	68fb      	ldr	r3, [r7, #12]
 80395d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80395d4:	2340      	movs	r3, #64	; 0x40
 80395d6:	6878      	ldr	r0, [r7, #4]
 80395d8:	f002 fb3e 	bl	803bc58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80395dc:	2300      	movs	r3, #0
}
 80395de:	4618      	mov	r0, r3
 80395e0:	3710      	adds	r7, #16
 80395e2:	46bd      	mov	sp, r7
 80395e4:	bd80      	pop	{r7, pc}
 80395e6:	bf00      	nop
 80395e8:	2400009b 	.word	0x2400009b
 80395ec:	2400009c 	.word	0x2400009c
 80395f0:	2400009d 	.word	0x2400009d

080395f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80395f4:	b580      	push	{r7, lr}
 80395f6:	b082      	sub	sp, #8
 80395f8:	af00      	add	r7, sp, #0
 80395fa:	6078      	str	r0, [r7, #4]
 80395fc:	460b      	mov	r3, r1
 80395fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8039600:	4b3a      	ldr	r3, [pc, #232]	; (80396ec <USBD_CDC_DeInit+0xf8>)
 8039602:	781b      	ldrb	r3, [r3, #0]
 8039604:	4619      	mov	r1, r3
 8039606:	6878      	ldr	r0, [r7, #4]
 8039608:	f002 fa5d 	bl	803bac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 803960c:	4b37      	ldr	r3, [pc, #220]	; (80396ec <USBD_CDC_DeInit+0xf8>)
 803960e:	781b      	ldrb	r3, [r3, #0]
 8039610:	f003 020f 	and.w	r2, r3, #15
 8039614:	6879      	ldr	r1, [r7, #4]
 8039616:	4613      	mov	r3, r2
 8039618:	009b      	lsls	r3, r3, #2
 803961a:	4413      	add	r3, r2
 803961c:	009b      	lsls	r3, r3, #2
 803961e:	440b      	add	r3, r1
 8039620:	3324      	adds	r3, #36	; 0x24
 8039622:	2200      	movs	r2, #0
 8039624:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8039626:	4b32      	ldr	r3, [pc, #200]	; (80396f0 <USBD_CDC_DeInit+0xfc>)
 8039628:	781b      	ldrb	r3, [r3, #0]
 803962a:	4619      	mov	r1, r3
 803962c:	6878      	ldr	r0, [r7, #4]
 803962e:	f002 fa4a 	bl	803bac6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8039632:	4b2f      	ldr	r3, [pc, #188]	; (80396f0 <USBD_CDC_DeInit+0xfc>)
 8039634:	781b      	ldrb	r3, [r3, #0]
 8039636:	f003 020f 	and.w	r2, r3, #15
 803963a:	6879      	ldr	r1, [r7, #4]
 803963c:	4613      	mov	r3, r2
 803963e:	009b      	lsls	r3, r3, #2
 8039640:	4413      	add	r3, r2
 8039642:	009b      	lsls	r3, r3, #2
 8039644:	440b      	add	r3, r1
 8039646:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803964a:	2200      	movs	r2, #0
 803964c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 803964e:	4b29      	ldr	r3, [pc, #164]	; (80396f4 <USBD_CDC_DeInit+0x100>)
 8039650:	781b      	ldrb	r3, [r3, #0]
 8039652:	4619      	mov	r1, r3
 8039654:	6878      	ldr	r0, [r7, #4]
 8039656:	f002 fa36 	bl	803bac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 803965a:	4b26      	ldr	r3, [pc, #152]	; (80396f4 <USBD_CDC_DeInit+0x100>)
 803965c:	781b      	ldrb	r3, [r3, #0]
 803965e:	f003 020f 	and.w	r2, r3, #15
 8039662:	6879      	ldr	r1, [r7, #4]
 8039664:	4613      	mov	r3, r2
 8039666:	009b      	lsls	r3, r3, #2
 8039668:	4413      	add	r3, r2
 803966a:	009b      	lsls	r3, r3, #2
 803966c:	440b      	add	r3, r1
 803966e:	3324      	adds	r3, #36	; 0x24
 8039670:	2200      	movs	r2, #0
 8039672:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8039674:	4b1f      	ldr	r3, [pc, #124]	; (80396f4 <USBD_CDC_DeInit+0x100>)
 8039676:	781b      	ldrb	r3, [r3, #0]
 8039678:	f003 020f 	and.w	r2, r3, #15
 803967c:	6879      	ldr	r1, [r7, #4]
 803967e:	4613      	mov	r3, r2
 8039680:	009b      	lsls	r3, r3, #2
 8039682:	4413      	add	r3, r2
 8039684:	009b      	lsls	r3, r3, #2
 8039686:	440b      	add	r3, r1
 8039688:	3326      	adds	r3, #38	; 0x26
 803968a:	2200      	movs	r2, #0
 803968c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 803968e:	687b      	ldr	r3, [r7, #4]
 8039690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039694:	687b      	ldr	r3, [r7, #4]
 8039696:	32b0      	adds	r2, #176	; 0xb0
 8039698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803969c:	2b00      	cmp	r3, #0
 803969e:	d01f      	beq.n	80396e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80396a0:	687b      	ldr	r3, [r7, #4]
 80396a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80396a6:	687a      	ldr	r2, [r7, #4]
 80396a8:	33b0      	adds	r3, #176	; 0xb0
 80396aa:	009b      	lsls	r3, r3, #2
 80396ac:	4413      	add	r3, r2
 80396ae:	685b      	ldr	r3, [r3, #4]
 80396b0:	685b      	ldr	r3, [r3, #4]
 80396b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80396b4:	687b      	ldr	r3, [r7, #4]
 80396b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80396ba:	687b      	ldr	r3, [r7, #4]
 80396bc:	32b0      	adds	r2, #176	; 0xb0
 80396be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80396c2:	4618      	mov	r0, r3
 80396c4:	f002 fb0a 	bl	803bcdc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80396c8:	687b      	ldr	r3, [r7, #4]
 80396ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80396ce:	687b      	ldr	r3, [r7, #4]
 80396d0:	32b0      	adds	r2, #176	; 0xb0
 80396d2:	2100      	movs	r1, #0
 80396d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80396d8:	687b      	ldr	r3, [r7, #4]
 80396da:	2200      	movs	r2, #0
 80396dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80396e0:	2300      	movs	r3, #0
}
 80396e2:	4618      	mov	r0, r3
 80396e4:	3708      	adds	r7, #8
 80396e6:	46bd      	mov	sp, r7
 80396e8:	bd80      	pop	{r7, pc}
 80396ea:	bf00      	nop
 80396ec:	2400009b 	.word	0x2400009b
 80396f0:	2400009c 	.word	0x2400009c
 80396f4:	2400009d 	.word	0x2400009d

080396f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80396f8:	b580      	push	{r7, lr}
 80396fa:	b086      	sub	sp, #24
 80396fc:	af00      	add	r7, sp, #0
 80396fe:	6078      	str	r0, [r7, #4]
 8039700:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039702:	687b      	ldr	r3, [r7, #4]
 8039704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039708:	687b      	ldr	r3, [r7, #4]
 803970a:	32b0      	adds	r2, #176	; 0xb0
 803970c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039710:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8039712:	2300      	movs	r3, #0
 8039714:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8039716:	2300      	movs	r3, #0
 8039718:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 803971a:	2300      	movs	r3, #0
 803971c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 803971e:	693b      	ldr	r3, [r7, #16]
 8039720:	2b00      	cmp	r3, #0
 8039722:	d101      	bne.n	8039728 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8039724:	2303      	movs	r3, #3
 8039726:	e0bf      	b.n	80398a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8039728:	683b      	ldr	r3, [r7, #0]
 803972a:	781b      	ldrb	r3, [r3, #0]
 803972c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8039730:	2b00      	cmp	r3, #0
 8039732:	d050      	beq.n	80397d6 <USBD_CDC_Setup+0xde>
 8039734:	2b20      	cmp	r3, #32
 8039736:	f040 80af 	bne.w	8039898 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 803973a:	683b      	ldr	r3, [r7, #0]
 803973c:	88db      	ldrh	r3, [r3, #6]
 803973e:	2b00      	cmp	r3, #0
 8039740:	d03a      	beq.n	80397b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8039742:	683b      	ldr	r3, [r7, #0]
 8039744:	781b      	ldrb	r3, [r3, #0]
 8039746:	b25b      	sxtb	r3, r3
 8039748:	2b00      	cmp	r3, #0
 803974a:	da1b      	bge.n	8039784 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803974c:	687b      	ldr	r3, [r7, #4]
 803974e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039752:	687a      	ldr	r2, [r7, #4]
 8039754:	33b0      	adds	r3, #176	; 0xb0
 8039756:	009b      	lsls	r3, r3, #2
 8039758:	4413      	add	r3, r2
 803975a:	685b      	ldr	r3, [r3, #4]
 803975c:	689b      	ldr	r3, [r3, #8]
 803975e:	683a      	ldr	r2, [r7, #0]
 8039760:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8039762:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8039764:	683a      	ldr	r2, [r7, #0]
 8039766:	88d2      	ldrh	r2, [r2, #6]
 8039768:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 803976a:	683b      	ldr	r3, [r7, #0]
 803976c:	88db      	ldrh	r3, [r3, #6]
 803976e:	2b07      	cmp	r3, #7
 8039770:	bf28      	it	cs
 8039772:	2307      	movcs	r3, #7
 8039774:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8039776:	693b      	ldr	r3, [r7, #16]
 8039778:	89fa      	ldrh	r2, [r7, #14]
 803977a:	4619      	mov	r1, r3
 803977c:	6878      	ldr	r0, [r7, #4]
 803977e:	f001 fd43 	bl	803b208 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8039782:	e090      	b.n	80398a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8039784:	683b      	ldr	r3, [r7, #0]
 8039786:	785a      	ldrb	r2, [r3, #1]
 8039788:	693b      	ldr	r3, [r7, #16]
 803978a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 803978e:	683b      	ldr	r3, [r7, #0]
 8039790:	88db      	ldrh	r3, [r3, #6]
 8039792:	2b3f      	cmp	r3, #63	; 0x3f
 8039794:	d803      	bhi.n	803979e <USBD_CDC_Setup+0xa6>
 8039796:	683b      	ldr	r3, [r7, #0]
 8039798:	88db      	ldrh	r3, [r3, #6]
 803979a:	b2da      	uxtb	r2, r3
 803979c:	e000      	b.n	80397a0 <USBD_CDC_Setup+0xa8>
 803979e:	2240      	movs	r2, #64	; 0x40
 80397a0:	693b      	ldr	r3, [r7, #16]
 80397a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80397a6:	6939      	ldr	r1, [r7, #16]
 80397a8:	693b      	ldr	r3, [r7, #16]
 80397aa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80397ae:	461a      	mov	r2, r3
 80397b0:	6878      	ldr	r0, [r7, #4]
 80397b2:	f001 fd55 	bl	803b260 <USBD_CtlPrepareRx>
      break;
 80397b6:	e076      	b.n	80398a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80397b8:	687b      	ldr	r3, [r7, #4]
 80397ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80397be:	687a      	ldr	r2, [r7, #4]
 80397c0:	33b0      	adds	r3, #176	; 0xb0
 80397c2:	009b      	lsls	r3, r3, #2
 80397c4:	4413      	add	r3, r2
 80397c6:	685b      	ldr	r3, [r3, #4]
 80397c8:	689b      	ldr	r3, [r3, #8]
 80397ca:	683a      	ldr	r2, [r7, #0]
 80397cc:	7850      	ldrb	r0, [r2, #1]
 80397ce:	2200      	movs	r2, #0
 80397d0:	6839      	ldr	r1, [r7, #0]
 80397d2:	4798      	blx	r3
      break;
 80397d4:	e067      	b.n	80398a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80397d6:	683b      	ldr	r3, [r7, #0]
 80397d8:	785b      	ldrb	r3, [r3, #1]
 80397da:	2b0b      	cmp	r3, #11
 80397dc:	d851      	bhi.n	8039882 <USBD_CDC_Setup+0x18a>
 80397de:	a201      	add	r2, pc, #4	; (adr r2, 80397e4 <USBD_CDC_Setup+0xec>)
 80397e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80397e4:	08039815 	.word	0x08039815
 80397e8:	08039891 	.word	0x08039891
 80397ec:	08039883 	.word	0x08039883
 80397f0:	08039883 	.word	0x08039883
 80397f4:	08039883 	.word	0x08039883
 80397f8:	08039883 	.word	0x08039883
 80397fc:	08039883 	.word	0x08039883
 8039800:	08039883 	.word	0x08039883
 8039804:	08039883 	.word	0x08039883
 8039808:	08039883 	.word	0x08039883
 803980c:	0803983f 	.word	0x0803983f
 8039810:	08039869 	.word	0x08039869
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8039814:	687b      	ldr	r3, [r7, #4]
 8039816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803981a:	b2db      	uxtb	r3, r3
 803981c:	2b03      	cmp	r3, #3
 803981e:	d107      	bne.n	8039830 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8039820:	f107 030a 	add.w	r3, r7, #10
 8039824:	2202      	movs	r2, #2
 8039826:	4619      	mov	r1, r3
 8039828:	6878      	ldr	r0, [r7, #4]
 803982a:	f001 fced 	bl	803b208 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803982e:	e032      	b.n	8039896 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8039830:	6839      	ldr	r1, [r7, #0]
 8039832:	6878      	ldr	r0, [r7, #4]
 8039834:	f001 fc77 	bl	803b126 <USBD_CtlError>
            ret = USBD_FAIL;
 8039838:	2303      	movs	r3, #3
 803983a:	75fb      	strb	r3, [r7, #23]
          break;
 803983c:	e02b      	b.n	8039896 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803983e:	687b      	ldr	r3, [r7, #4]
 8039840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039844:	b2db      	uxtb	r3, r3
 8039846:	2b03      	cmp	r3, #3
 8039848:	d107      	bne.n	803985a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 803984a:	f107 030d 	add.w	r3, r7, #13
 803984e:	2201      	movs	r2, #1
 8039850:	4619      	mov	r1, r3
 8039852:	6878      	ldr	r0, [r7, #4]
 8039854:	f001 fcd8 	bl	803b208 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8039858:	e01d      	b.n	8039896 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803985a:	6839      	ldr	r1, [r7, #0]
 803985c:	6878      	ldr	r0, [r7, #4]
 803985e:	f001 fc62 	bl	803b126 <USBD_CtlError>
            ret = USBD_FAIL;
 8039862:	2303      	movs	r3, #3
 8039864:	75fb      	strb	r3, [r7, #23]
          break;
 8039866:	e016      	b.n	8039896 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8039868:	687b      	ldr	r3, [r7, #4]
 803986a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803986e:	b2db      	uxtb	r3, r3
 8039870:	2b03      	cmp	r3, #3
 8039872:	d00f      	beq.n	8039894 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8039874:	6839      	ldr	r1, [r7, #0]
 8039876:	6878      	ldr	r0, [r7, #4]
 8039878:	f001 fc55 	bl	803b126 <USBD_CtlError>
            ret = USBD_FAIL;
 803987c:	2303      	movs	r3, #3
 803987e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8039880:	e008      	b.n	8039894 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8039882:	6839      	ldr	r1, [r7, #0]
 8039884:	6878      	ldr	r0, [r7, #4]
 8039886:	f001 fc4e 	bl	803b126 <USBD_CtlError>
          ret = USBD_FAIL;
 803988a:	2303      	movs	r3, #3
 803988c:	75fb      	strb	r3, [r7, #23]
          break;
 803988e:	e002      	b.n	8039896 <USBD_CDC_Setup+0x19e>
          break;
 8039890:	bf00      	nop
 8039892:	e008      	b.n	80398a6 <USBD_CDC_Setup+0x1ae>
          break;
 8039894:	bf00      	nop
      }
      break;
 8039896:	e006      	b.n	80398a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8039898:	6839      	ldr	r1, [r7, #0]
 803989a:	6878      	ldr	r0, [r7, #4]
 803989c:	f001 fc43 	bl	803b126 <USBD_CtlError>
      ret = USBD_FAIL;
 80398a0:	2303      	movs	r3, #3
 80398a2:	75fb      	strb	r3, [r7, #23]
      break;
 80398a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80398a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80398a8:	4618      	mov	r0, r3
 80398aa:	3718      	adds	r7, #24
 80398ac:	46bd      	mov	sp, r7
 80398ae:	bd80      	pop	{r7, pc}

080398b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80398b0:	b580      	push	{r7, lr}
 80398b2:	b084      	sub	sp, #16
 80398b4:	af00      	add	r7, sp, #0
 80398b6:	6078      	str	r0, [r7, #4]
 80398b8:	460b      	mov	r3, r1
 80398ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80398bc:	687b      	ldr	r3, [r7, #4]
 80398be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80398c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80398c4:	687b      	ldr	r3, [r7, #4]
 80398c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80398ca:	687b      	ldr	r3, [r7, #4]
 80398cc:	32b0      	adds	r2, #176	; 0xb0
 80398ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80398d2:	2b00      	cmp	r3, #0
 80398d4:	d101      	bne.n	80398da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80398d6:	2303      	movs	r3, #3
 80398d8:	e065      	b.n	80399a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80398da:	687b      	ldr	r3, [r7, #4]
 80398dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80398e0:	687b      	ldr	r3, [r7, #4]
 80398e2:	32b0      	adds	r2, #176	; 0xb0
 80398e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80398e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80398ea:	78fb      	ldrb	r3, [r7, #3]
 80398ec:	f003 020f 	and.w	r2, r3, #15
 80398f0:	6879      	ldr	r1, [r7, #4]
 80398f2:	4613      	mov	r3, r2
 80398f4:	009b      	lsls	r3, r3, #2
 80398f6:	4413      	add	r3, r2
 80398f8:	009b      	lsls	r3, r3, #2
 80398fa:	440b      	add	r3, r1
 80398fc:	3318      	adds	r3, #24
 80398fe:	681b      	ldr	r3, [r3, #0]
 8039900:	2b00      	cmp	r3, #0
 8039902:	d02f      	beq.n	8039964 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8039904:	78fb      	ldrb	r3, [r7, #3]
 8039906:	f003 020f 	and.w	r2, r3, #15
 803990a:	6879      	ldr	r1, [r7, #4]
 803990c:	4613      	mov	r3, r2
 803990e:	009b      	lsls	r3, r3, #2
 8039910:	4413      	add	r3, r2
 8039912:	009b      	lsls	r3, r3, #2
 8039914:	440b      	add	r3, r1
 8039916:	3318      	adds	r3, #24
 8039918:	681a      	ldr	r2, [r3, #0]
 803991a:	78fb      	ldrb	r3, [r7, #3]
 803991c:	f003 010f 	and.w	r1, r3, #15
 8039920:	68f8      	ldr	r0, [r7, #12]
 8039922:	460b      	mov	r3, r1
 8039924:	00db      	lsls	r3, r3, #3
 8039926:	440b      	add	r3, r1
 8039928:	009b      	lsls	r3, r3, #2
 803992a:	4403      	add	r3, r0
 803992c:	3348      	adds	r3, #72	; 0x48
 803992e:	681b      	ldr	r3, [r3, #0]
 8039930:	fbb2 f1f3 	udiv	r1, r2, r3
 8039934:	fb01 f303 	mul.w	r3, r1, r3
 8039938:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803993a:	2b00      	cmp	r3, #0
 803993c:	d112      	bne.n	8039964 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 803993e:	78fb      	ldrb	r3, [r7, #3]
 8039940:	f003 020f 	and.w	r2, r3, #15
 8039944:	6879      	ldr	r1, [r7, #4]
 8039946:	4613      	mov	r3, r2
 8039948:	009b      	lsls	r3, r3, #2
 803994a:	4413      	add	r3, r2
 803994c:	009b      	lsls	r3, r3, #2
 803994e:	440b      	add	r3, r1
 8039950:	3318      	adds	r3, #24
 8039952:	2200      	movs	r2, #0
 8039954:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8039956:	78f9      	ldrb	r1, [r7, #3]
 8039958:	2300      	movs	r3, #0
 803995a:	2200      	movs	r2, #0
 803995c:	6878      	ldr	r0, [r7, #4]
 803995e:	f002 f95a 	bl	803bc16 <USBD_LL_Transmit>
 8039962:	e01f      	b.n	80399a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8039964:	68bb      	ldr	r3, [r7, #8]
 8039966:	2200      	movs	r2, #0
 8039968:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 803996c:	687b      	ldr	r3, [r7, #4]
 803996e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039972:	687a      	ldr	r2, [r7, #4]
 8039974:	33b0      	adds	r3, #176	; 0xb0
 8039976:	009b      	lsls	r3, r3, #2
 8039978:	4413      	add	r3, r2
 803997a:	685b      	ldr	r3, [r3, #4]
 803997c:	691b      	ldr	r3, [r3, #16]
 803997e:	2b00      	cmp	r3, #0
 8039980:	d010      	beq.n	80399a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8039982:	687b      	ldr	r3, [r7, #4]
 8039984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039988:	687a      	ldr	r2, [r7, #4]
 803998a:	33b0      	adds	r3, #176	; 0xb0
 803998c:	009b      	lsls	r3, r3, #2
 803998e:	4413      	add	r3, r2
 8039990:	685b      	ldr	r3, [r3, #4]
 8039992:	691b      	ldr	r3, [r3, #16]
 8039994:	68ba      	ldr	r2, [r7, #8]
 8039996:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 803999a:	68ba      	ldr	r2, [r7, #8]
 803999c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80399a0:	78fa      	ldrb	r2, [r7, #3]
 80399a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80399a4:	2300      	movs	r3, #0
}
 80399a6:	4618      	mov	r0, r3
 80399a8:	3710      	adds	r7, #16
 80399aa:	46bd      	mov	sp, r7
 80399ac:	bd80      	pop	{r7, pc}

080399ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80399ae:	b580      	push	{r7, lr}
 80399b0:	b084      	sub	sp, #16
 80399b2:	af00      	add	r7, sp, #0
 80399b4:	6078      	str	r0, [r7, #4]
 80399b6:	460b      	mov	r3, r1
 80399b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80399ba:	687b      	ldr	r3, [r7, #4]
 80399bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80399c0:	687b      	ldr	r3, [r7, #4]
 80399c2:	32b0      	adds	r2, #176	; 0xb0
 80399c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80399c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80399ca:	687b      	ldr	r3, [r7, #4]
 80399cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80399d0:	687b      	ldr	r3, [r7, #4]
 80399d2:	32b0      	adds	r2, #176	; 0xb0
 80399d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80399d8:	2b00      	cmp	r3, #0
 80399da:	d101      	bne.n	80399e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80399dc:	2303      	movs	r3, #3
 80399de:	e01a      	b.n	8039a16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80399e0:	78fb      	ldrb	r3, [r7, #3]
 80399e2:	4619      	mov	r1, r3
 80399e4:	6878      	ldr	r0, [r7, #4]
 80399e6:	f002 f958 	bl	803bc9a <USBD_LL_GetRxDataSize>
 80399ea:	4602      	mov	r2, r0
 80399ec:	68fb      	ldr	r3, [r7, #12]
 80399ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80399f2:	687b      	ldr	r3, [r7, #4]
 80399f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80399f8:	687a      	ldr	r2, [r7, #4]
 80399fa:	33b0      	adds	r3, #176	; 0xb0
 80399fc:	009b      	lsls	r3, r3, #2
 80399fe:	4413      	add	r3, r2
 8039a00:	685b      	ldr	r3, [r3, #4]
 8039a02:	68db      	ldr	r3, [r3, #12]
 8039a04:	68fa      	ldr	r2, [r7, #12]
 8039a06:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8039a0a:	68fa      	ldr	r2, [r7, #12]
 8039a0c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8039a10:	4611      	mov	r1, r2
 8039a12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8039a14:	2300      	movs	r3, #0
}
 8039a16:	4618      	mov	r0, r3
 8039a18:	3710      	adds	r7, #16
 8039a1a:	46bd      	mov	sp, r7
 8039a1c:	bd80      	pop	{r7, pc}

08039a1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8039a1e:	b580      	push	{r7, lr}
 8039a20:	b084      	sub	sp, #16
 8039a22:	af00      	add	r7, sp, #0
 8039a24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039a26:	687b      	ldr	r3, [r7, #4]
 8039a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039a2c:	687b      	ldr	r3, [r7, #4]
 8039a2e:	32b0      	adds	r2, #176	; 0xb0
 8039a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039a34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8039a36:	68fb      	ldr	r3, [r7, #12]
 8039a38:	2b00      	cmp	r3, #0
 8039a3a:	d101      	bne.n	8039a40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8039a3c:	2303      	movs	r3, #3
 8039a3e:	e025      	b.n	8039a8c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8039a40:	687b      	ldr	r3, [r7, #4]
 8039a42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039a46:	687a      	ldr	r2, [r7, #4]
 8039a48:	33b0      	adds	r3, #176	; 0xb0
 8039a4a:	009b      	lsls	r3, r3, #2
 8039a4c:	4413      	add	r3, r2
 8039a4e:	685b      	ldr	r3, [r3, #4]
 8039a50:	2b00      	cmp	r3, #0
 8039a52:	d01a      	beq.n	8039a8a <USBD_CDC_EP0_RxReady+0x6c>
 8039a54:	68fb      	ldr	r3, [r7, #12]
 8039a56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8039a5a:	2bff      	cmp	r3, #255	; 0xff
 8039a5c:	d015      	beq.n	8039a8a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8039a5e:	687b      	ldr	r3, [r7, #4]
 8039a60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039a64:	687a      	ldr	r2, [r7, #4]
 8039a66:	33b0      	adds	r3, #176	; 0xb0
 8039a68:	009b      	lsls	r3, r3, #2
 8039a6a:	4413      	add	r3, r2
 8039a6c:	685b      	ldr	r3, [r3, #4]
 8039a6e:	689b      	ldr	r3, [r3, #8]
 8039a70:	68fa      	ldr	r2, [r7, #12]
 8039a72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8039a76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8039a78:	68fa      	ldr	r2, [r7, #12]
 8039a7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8039a7e:	b292      	uxth	r2, r2
 8039a80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8039a82:	68fb      	ldr	r3, [r7, #12]
 8039a84:	22ff      	movs	r2, #255	; 0xff
 8039a86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8039a8a:	2300      	movs	r3, #0
}
 8039a8c:	4618      	mov	r0, r3
 8039a8e:	3710      	adds	r7, #16
 8039a90:	46bd      	mov	sp, r7
 8039a92:	bd80      	pop	{r7, pc}

08039a94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8039a94:	b580      	push	{r7, lr}
 8039a96:	b086      	sub	sp, #24
 8039a98:	af00      	add	r7, sp, #0
 8039a9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039a9c:	2182      	movs	r1, #130	; 0x82
 8039a9e:	4818      	ldr	r0, [pc, #96]	; (8039b00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8039aa0:	f000 fd09 	bl	803a4b6 <USBD_GetEpDesc>
 8039aa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039aa6:	2101      	movs	r1, #1
 8039aa8:	4815      	ldr	r0, [pc, #84]	; (8039b00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8039aaa:	f000 fd04 	bl	803a4b6 <USBD_GetEpDesc>
 8039aae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8039ab0:	2181      	movs	r1, #129	; 0x81
 8039ab2:	4813      	ldr	r0, [pc, #76]	; (8039b00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8039ab4:	f000 fcff 	bl	803a4b6 <USBD_GetEpDesc>
 8039ab8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039aba:	697b      	ldr	r3, [r7, #20]
 8039abc:	2b00      	cmp	r3, #0
 8039abe:	d002      	beq.n	8039ac6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8039ac0:	697b      	ldr	r3, [r7, #20]
 8039ac2:	2210      	movs	r2, #16
 8039ac4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039ac6:	693b      	ldr	r3, [r7, #16]
 8039ac8:	2b00      	cmp	r3, #0
 8039aca:	d006      	beq.n	8039ada <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039acc:	693b      	ldr	r3, [r7, #16]
 8039ace:	2200      	movs	r2, #0
 8039ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039ad4:	711a      	strb	r2, [r3, #4]
 8039ad6:	2200      	movs	r2, #0
 8039ad8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039ada:	68fb      	ldr	r3, [r7, #12]
 8039adc:	2b00      	cmp	r3, #0
 8039ade:	d006      	beq.n	8039aee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039ae0:	68fb      	ldr	r3, [r7, #12]
 8039ae2:	2200      	movs	r2, #0
 8039ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039ae8:	711a      	strb	r2, [r3, #4]
 8039aea:	2200      	movs	r2, #0
 8039aec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8039aee:	687b      	ldr	r3, [r7, #4]
 8039af0:	2243      	movs	r2, #67	; 0x43
 8039af2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039af4:	4b02      	ldr	r3, [pc, #8]	; (8039b00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8039af6:	4618      	mov	r0, r3
 8039af8:	3718      	adds	r7, #24
 8039afa:	46bd      	mov	sp, r7
 8039afc:	bd80      	pop	{r7, pc}
 8039afe:	bf00      	nop
 8039b00:	24000058 	.word	0x24000058

08039b04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8039b04:	b580      	push	{r7, lr}
 8039b06:	b086      	sub	sp, #24
 8039b08:	af00      	add	r7, sp, #0
 8039b0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039b0c:	2182      	movs	r1, #130	; 0x82
 8039b0e:	4818      	ldr	r0, [pc, #96]	; (8039b70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039b10:	f000 fcd1 	bl	803a4b6 <USBD_GetEpDesc>
 8039b14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039b16:	2101      	movs	r1, #1
 8039b18:	4815      	ldr	r0, [pc, #84]	; (8039b70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039b1a:	f000 fccc 	bl	803a4b6 <USBD_GetEpDesc>
 8039b1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8039b20:	2181      	movs	r1, #129	; 0x81
 8039b22:	4813      	ldr	r0, [pc, #76]	; (8039b70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039b24:	f000 fcc7 	bl	803a4b6 <USBD_GetEpDesc>
 8039b28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039b2a:	697b      	ldr	r3, [r7, #20]
 8039b2c:	2b00      	cmp	r3, #0
 8039b2e:	d002      	beq.n	8039b36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8039b30:	697b      	ldr	r3, [r7, #20]
 8039b32:	2210      	movs	r2, #16
 8039b34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039b36:	693b      	ldr	r3, [r7, #16]
 8039b38:	2b00      	cmp	r3, #0
 8039b3a:	d006      	beq.n	8039b4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8039b3c:	693b      	ldr	r3, [r7, #16]
 8039b3e:	2200      	movs	r2, #0
 8039b40:	711a      	strb	r2, [r3, #4]
 8039b42:	2200      	movs	r2, #0
 8039b44:	f042 0202 	orr.w	r2, r2, #2
 8039b48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039b4a:	68fb      	ldr	r3, [r7, #12]
 8039b4c:	2b00      	cmp	r3, #0
 8039b4e:	d006      	beq.n	8039b5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8039b50:	68fb      	ldr	r3, [r7, #12]
 8039b52:	2200      	movs	r2, #0
 8039b54:	711a      	strb	r2, [r3, #4]
 8039b56:	2200      	movs	r2, #0
 8039b58:	f042 0202 	orr.w	r2, r2, #2
 8039b5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8039b5e:	687b      	ldr	r3, [r7, #4]
 8039b60:	2243      	movs	r2, #67	; 0x43
 8039b62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039b64:	4b02      	ldr	r3, [pc, #8]	; (8039b70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8039b66:	4618      	mov	r0, r3
 8039b68:	3718      	adds	r7, #24
 8039b6a:	46bd      	mov	sp, r7
 8039b6c:	bd80      	pop	{r7, pc}
 8039b6e:	bf00      	nop
 8039b70:	24000058 	.word	0x24000058

08039b74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8039b74:	b580      	push	{r7, lr}
 8039b76:	b086      	sub	sp, #24
 8039b78:	af00      	add	r7, sp, #0
 8039b7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039b7c:	2182      	movs	r1, #130	; 0x82
 8039b7e:	4818      	ldr	r0, [pc, #96]	; (8039be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039b80:	f000 fc99 	bl	803a4b6 <USBD_GetEpDesc>
 8039b84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039b86:	2101      	movs	r1, #1
 8039b88:	4815      	ldr	r0, [pc, #84]	; (8039be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039b8a:	f000 fc94 	bl	803a4b6 <USBD_GetEpDesc>
 8039b8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8039b90:	2181      	movs	r1, #129	; 0x81
 8039b92:	4813      	ldr	r0, [pc, #76]	; (8039be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039b94:	f000 fc8f 	bl	803a4b6 <USBD_GetEpDesc>
 8039b98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039b9a:	697b      	ldr	r3, [r7, #20]
 8039b9c:	2b00      	cmp	r3, #0
 8039b9e:	d002      	beq.n	8039ba6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8039ba0:	697b      	ldr	r3, [r7, #20]
 8039ba2:	2210      	movs	r2, #16
 8039ba4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039ba6:	693b      	ldr	r3, [r7, #16]
 8039ba8:	2b00      	cmp	r3, #0
 8039baa:	d006      	beq.n	8039bba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039bac:	693b      	ldr	r3, [r7, #16]
 8039bae:	2200      	movs	r2, #0
 8039bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039bb4:	711a      	strb	r2, [r3, #4]
 8039bb6:	2200      	movs	r2, #0
 8039bb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039bba:	68fb      	ldr	r3, [r7, #12]
 8039bbc:	2b00      	cmp	r3, #0
 8039bbe:	d006      	beq.n	8039bce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039bc0:	68fb      	ldr	r3, [r7, #12]
 8039bc2:	2200      	movs	r2, #0
 8039bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039bc8:	711a      	strb	r2, [r3, #4]
 8039bca:	2200      	movs	r2, #0
 8039bcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8039bce:	687b      	ldr	r3, [r7, #4]
 8039bd0:	2243      	movs	r2, #67	; 0x43
 8039bd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039bd4:	4b02      	ldr	r3, [pc, #8]	; (8039be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8039bd6:	4618      	mov	r0, r3
 8039bd8:	3718      	adds	r7, #24
 8039bda:	46bd      	mov	sp, r7
 8039bdc:	bd80      	pop	{r7, pc}
 8039bde:	bf00      	nop
 8039be0:	24000058 	.word	0x24000058

08039be4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8039be4:	b480      	push	{r7}
 8039be6:	b083      	sub	sp, #12
 8039be8:	af00      	add	r7, sp, #0
 8039bea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8039bec:	687b      	ldr	r3, [r7, #4]
 8039bee:	220a      	movs	r2, #10
 8039bf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8039bf2:	4b03      	ldr	r3, [pc, #12]	; (8039c00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8039bf4:	4618      	mov	r0, r3
 8039bf6:	370c      	adds	r7, #12
 8039bf8:	46bd      	mov	sp, r7
 8039bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039bfe:	4770      	bx	lr
 8039c00:	24000014 	.word	0x24000014

08039c04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8039c04:	b480      	push	{r7}
 8039c06:	b083      	sub	sp, #12
 8039c08:	af00      	add	r7, sp, #0
 8039c0a:	6078      	str	r0, [r7, #4]
 8039c0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8039c0e:	683b      	ldr	r3, [r7, #0]
 8039c10:	2b00      	cmp	r3, #0
 8039c12:	d101      	bne.n	8039c18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8039c14:	2303      	movs	r3, #3
 8039c16:	e009      	b.n	8039c2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8039c18:	687b      	ldr	r3, [r7, #4]
 8039c1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039c1e:	687a      	ldr	r2, [r7, #4]
 8039c20:	33b0      	adds	r3, #176	; 0xb0
 8039c22:	009b      	lsls	r3, r3, #2
 8039c24:	4413      	add	r3, r2
 8039c26:	683a      	ldr	r2, [r7, #0]
 8039c28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8039c2a:	2300      	movs	r3, #0
}
 8039c2c:	4618      	mov	r0, r3
 8039c2e:	370c      	adds	r7, #12
 8039c30:	46bd      	mov	sp, r7
 8039c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039c36:	4770      	bx	lr

08039c38 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8039c38:	b480      	push	{r7}
 8039c3a:	b087      	sub	sp, #28
 8039c3c:	af00      	add	r7, sp, #0
 8039c3e:	60f8      	str	r0, [r7, #12]
 8039c40:	60b9      	str	r1, [r7, #8]
 8039c42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039c44:	68fb      	ldr	r3, [r7, #12]
 8039c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039c4a:	68fb      	ldr	r3, [r7, #12]
 8039c4c:	32b0      	adds	r2, #176	; 0xb0
 8039c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039c52:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8039c54:	697b      	ldr	r3, [r7, #20]
 8039c56:	2b00      	cmp	r3, #0
 8039c58:	d101      	bne.n	8039c5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8039c5a:	2303      	movs	r3, #3
 8039c5c:	e008      	b.n	8039c70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8039c5e:	697b      	ldr	r3, [r7, #20]
 8039c60:	68ba      	ldr	r2, [r7, #8]
 8039c62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8039c66:	697b      	ldr	r3, [r7, #20]
 8039c68:	687a      	ldr	r2, [r7, #4]
 8039c6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8039c6e:	2300      	movs	r3, #0
}
 8039c70:	4618      	mov	r0, r3
 8039c72:	371c      	adds	r7, #28
 8039c74:	46bd      	mov	sp, r7
 8039c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039c7a:	4770      	bx	lr

08039c7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8039c7c:	b480      	push	{r7}
 8039c7e:	b085      	sub	sp, #20
 8039c80:	af00      	add	r7, sp, #0
 8039c82:	6078      	str	r0, [r7, #4]
 8039c84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039c86:	687b      	ldr	r3, [r7, #4]
 8039c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039c8c:	687b      	ldr	r3, [r7, #4]
 8039c8e:	32b0      	adds	r2, #176	; 0xb0
 8039c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039c94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8039c96:	68fb      	ldr	r3, [r7, #12]
 8039c98:	2b00      	cmp	r3, #0
 8039c9a:	d101      	bne.n	8039ca0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8039c9c:	2303      	movs	r3, #3
 8039c9e:	e004      	b.n	8039caa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8039ca0:	68fb      	ldr	r3, [r7, #12]
 8039ca2:	683a      	ldr	r2, [r7, #0]
 8039ca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8039ca8:	2300      	movs	r3, #0
}
 8039caa:	4618      	mov	r0, r3
 8039cac:	3714      	adds	r7, #20
 8039cae:	46bd      	mov	sp, r7
 8039cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039cb4:	4770      	bx	lr
	...

08039cb8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8039cb8:	b580      	push	{r7, lr}
 8039cba:	b084      	sub	sp, #16
 8039cbc:	af00      	add	r7, sp, #0
 8039cbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039cc0:	687b      	ldr	r3, [r7, #4]
 8039cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039cc6:	687b      	ldr	r3, [r7, #4]
 8039cc8:	32b0      	adds	r2, #176	; 0xb0
 8039cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039cce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8039cd0:	687b      	ldr	r3, [r7, #4]
 8039cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039cd6:	687b      	ldr	r3, [r7, #4]
 8039cd8:	32b0      	adds	r2, #176	; 0xb0
 8039cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039cde:	2b00      	cmp	r3, #0
 8039ce0:	d101      	bne.n	8039ce6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8039ce2:	2303      	movs	r3, #3
 8039ce4:	e018      	b.n	8039d18 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8039ce6:	687b      	ldr	r3, [r7, #4]
 8039ce8:	7c1b      	ldrb	r3, [r3, #16]
 8039cea:	2b00      	cmp	r3, #0
 8039cec:	d10a      	bne.n	8039d04 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039cee:	4b0c      	ldr	r3, [pc, #48]	; (8039d20 <USBD_CDC_ReceivePacket+0x68>)
 8039cf0:	7819      	ldrb	r1, [r3, #0]
 8039cf2:	68fb      	ldr	r3, [r7, #12]
 8039cf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8039cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8039cfc:	6878      	ldr	r0, [r7, #4]
 8039cfe:	f001 ffab 	bl	803bc58 <USBD_LL_PrepareReceive>
 8039d02:	e008      	b.n	8039d16 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039d04:	4b06      	ldr	r3, [pc, #24]	; (8039d20 <USBD_CDC_ReceivePacket+0x68>)
 8039d06:	7819      	ldrb	r1, [r3, #0]
 8039d08:	68fb      	ldr	r3, [r7, #12]
 8039d0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8039d0e:	2340      	movs	r3, #64	; 0x40
 8039d10:	6878      	ldr	r0, [r7, #4]
 8039d12:	f001 ffa1 	bl	803bc58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8039d16:	2300      	movs	r3, #0
}
 8039d18:	4618      	mov	r0, r3
 8039d1a:	3710      	adds	r7, #16
 8039d1c:	46bd      	mov	sp, r7
 8039d1e:	bd80      	pop	{r7, pc}
 8039d20:	2400009c 	.word	0x2400009c

08039d24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8039d24:	b580      	push	{r7, lr}
 8039d26:	b086      	sub	sp, #24
 8039d28:	af00      	add	r7, sp, #0
 8039d2a:	60f8      	str	r0, [r7, #12]
 8039d2c:	60b9      	str	r1, [r7, #8]
 8039d2e:	4613      	mov	r3, r2
 8039d30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8039d32:	68fb      	ldr	r3, [r7, #12]
 8039d34:	2b00      	cmp	r3, #0
 8039d36:	d101      	bne.n	8039d3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8039d38:	2303      	movs	r3, #3
 8039d3a:	e01f      	b.n	8039d7c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8039d3c:	68fb      	ldr	r3, [r7, #12]
 8039d3e:	2200      	movs	r2, #0
 8039d40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8039d44:	68fb      	ldr	r3, [r7, #12]
 8039d46:	2200      	movs	r2, #0
 8039d48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8039d4c:	68fb      	ldr	r3, [r7, #12]
 8039d4e:	2200      	movs	r2, #0
 8039d50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8039d54:	68bb      	ldr	r3, [r7, #8]
 8039d56:	2b00      	cmp	r3, #0
 8039d58:	d003      	beq.n	8039d62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8039d5a:	68fb      	ldr	r3, [r7, #12]
 8039d5c:	68ba      	ldr	r2, [r7, #8]
 8039d5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8039d62:	68fb      	ldr	r3, [r7, #12]
 8039d64:	2201      	movs	r2, #1
 8039d66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8039d6a:	68fb      	ldr	r3, [r7, #12]
 8039d6c:	79fa      	ldrb	r2, [r7, #7]
 8039d6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8039d70:	68f8      	ldr	r0, [r7, #12]
 8039d72:	f001 fe17 	bl	803b9a4 <USBD_LL_Init>
 8039d76:	4603      	mov	r3, r0
 8039d78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8039d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8039d7c:	4618      	mov	r0, r3
 8039d7e:	3718      	adds	r7, #24
 8039d80:	46bd      	mov	sp, r7
 8039d82:	bd80      	pop	{r7, pc}

08039d84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8039d84:	b580      	push	{r7, lr}
 8039d86:	b084      	sub	sp, #16
 8039d88:	af00      	add	r7, sp, #0
 8039d8a:	6078      	str	r0, [r7, #4]
 8039d8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8039d8e:	2300      	movs	r3, #0
 8039d90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8039d92:	683b      	ldr	r3, [r7, #0]
 8039d94:	2b00      	cmp	r3, #0
 8039d96:	d101      	bne.n	8039d9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8039d98:	2303      	movs	r3, #3
 8039d9a:	e025      	b.n	8039de8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8039d9c:	687b      	ldr	r3, [r7, #4]
 8039d9e:	683a      	ldr	r2, [r7, #0]
 8039da0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8039da4:	687b      	ldr	r3, [r7, #4]
 8039da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039daa:	687b      	ldr	r3, [r7, #4]
 8039dac:	32ae      	adds	r2, #174	; 0xae
 8039dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039db4:	2b00      	cmp	r3, #0
 8039db6:	d00f      	beq.n	8039dd8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8039db8:	687b      	ldr	r3, [r7, #4]
 8039dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039dbe:	687b      	ldr	r3, [r7, #4]
 8039dc0:	32ae      	adds	r2, #174	; 0xae
 8039dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039dc8:	f107 020e 	add.w	r2, r7, #14
 8039dcc:	4610      	mov	r0, r2
 8039dce:	4798      	blx	r3
 8039dd0:	4602      	mov	r2, r0
 8039dd2:	687b      	ldr	r3, [r7, #4]
 8039dd4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8039dd8:	687b      	ldr	r3, [r7, #4]
 8039dda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8039dde:	1c5a      	adds	r2, r3, #1
 8039de0:	687b      	ldr	r3, [r7, #4]
 8039de2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8039de6:	2300      	movs	r3, #0
}
 8039de8:	4618      	mov	r0, r3
 8039dea:	3710      	adds	r7, #16
 8039dec:	46bd      	mov	sp, r7
 8039dee:	bd80      	pop	{r7, pc}

08039df0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8039df0:	b580      	push	{r7, lr}
 8039df2:	b082      	sub	sp, #8
 8039df4:	af00      	add	r7, sp, #0
 8039df6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8039df8:	6878      	ldr	r0, [r7, #4]
 8039dfa:	f001 fe23 	bl	803ba44 <USBD_LL_Start>
 8039dfe:	4603      	mov	r3, r0
}
 8039e00:	4618      	mov	r0, r3
 8039e02:	3708      	adds	r7, #8
 8039e04:	46bd      	mov	sp, r7
 8039e06:	bd80      	pop	{r7, pc}

08039e08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8039e08:	b480      	push	{r7}
 8039e0a:	b083      	sub	sp, #12
 8039e0c:	af00      	add	r7, sp, #0
 8039e0e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8039e10:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8039e12:	4618      	mov	r0, r3
 8039e14:	370c      	adds	r7, #12
 8039e16:	46bd      	mov	sp, r7
 8039e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039e1c:	4770      	bx	lr

08039e1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039e1e:	b580      	push	{r7, lr}
 8039e20:	b084      	sub	sp, #16
 8039e22:	af00      	add	r7, sp, #0
 8039e24:	6078      	str	r0, [r7, #4]
 8039e26:	460b      	mov	r3, r1
 8039e28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8039e2a:	2300      	movs	r3, #0
 8039e2c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8039e2e:	687b      	ldr	r3, [r7, #4]
 8039e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039e34:	2b00      	cmp	r3, #0
 8039e36:	d009      	beq.n	8039e4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8039e38:	687b      	ldr	r3, [r7, #4]
 8039e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039e3e:	681b      	ldr	r3, [r3, #0]
 8039e40:	78fa      	ldrb	r2, [r7, #3]
 8039e42:	4611      	mov	r1, r2
 8039e44:	6878      	ldr	r0, [r7, #4]
 8039e46:	4798      	blx	r3
 8039e48:	4603      	mov	r3, r0
 8039e4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8039e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8039e4e:	4618      	mov	r0, r3
 8039e50:	3710      	adds	r7, #16
 8039e52:	46bd      	mov	sp, r7
 8039e54:	bd80      	pop	{r7, pc}

08039e56 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039e56:	b580      	push	{r7, lr}
 8039e58:	b084      	sub	sp, #16
 8039e5a:	af00      	add	r7, sp, #0
 8039e5c:	6078      	str	r0, [r7, #4]
 8039e5e:	460b      	mov	r3, r1
 8039e60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8039e62:	2300      	movs	r3, #0
 8039e64:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8039e66:	687b      	ldr	r3, [r7, #4]
 8039e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039e6c:	685b      	ldr	r3, [r3, #4]
 8039e6e:	78fa      	ldrb	r2, [r7, #3]
 8039e70:	4611      	mov	r1, r2
 8039e72:	6878      	ldr	r0, [r7, #4]
 8039e74:	4798      	blx	r3
 8039e76:	4603      	mov	r3, r0
 8039e78:	2b00      	cmp	r3, #0
 8039e7a:	d001      	beq.n	8039e80 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8039e7c:	2303      	movs	r3, #3
 8039e7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8039e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8039e82:	4618      	mov	r0, r3
 8039e84:	3710      	adds	r7, #16
 8039e86:	46bd      	mov	sp, r7
 8039e88:	bd80      	pop	{r7, pc}

08039e8a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8039e8a:	b580      	push	{r7, lr}
 8039e8c:	b084      	sub	sp, #16
 8039e8e:	af00      	add	r7, sp, #0
 8039e90:	6078      	str	r0, [r7, #4]
 8039e92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8039e94:	687b      	ldr	r3, [r7, #4]
 8039e96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039e9a:	6839      	ldr	r1, [r7, #0]
 8039e9c:	4618      	mov	r0, r3
 8039e9e:	f001 f908 	bl	803b0b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8039ea2:	687b      	ldr	r3, [r7, #4]
 8039ea4:	2201      	movs	r2, #1
 8039ea6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8039eaa:	687b      	ldr	r3, [r7, #4]
 8039eac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8039eb0:	461a      	mov	r2, r3
 8039eb2:	687b      	ldr	r3, [r7, #4]
 8039eb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8039eb8:	687b      	ldr	r3, [r7, #4]
 8039eba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039ebe:	f003 031f 	and.w	r3, r3, #31
 8039ec2:	2b02      	cmp	r3, #2
 8039ec4:	d01a      	beq.n	8039efc <USBD_LL_SetupStage+0x72>
 8039ec6:	2b02      	cmp	r3, #2
 8039ec8:	d822      	bhi.n	8039f10 <USBD_LL_SetupStage+0x86>
 8039eca:	2b00      	cmp	r3, #0
 8039ecc:	d002      	beq.n	8039ed4 <USBD_LL_SetupStage+0x4a>
 8039ece:	2b01      	cmp	r3, #1
 8039ed0:	d00a      	beq.n	8039ee8 <USBD_LL_SetupStage+0x5e>
 8039ed2:	e01d      	b.n	8039f10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8039ed4:	687b      	ldr	r3, [r7, #4]
 8039ed6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039eda:	4619      	mov	r1, r3
 8039edc:	6878      	ldr	r0, [r7, #4]
 8039ede:	f000 fb5f 	bl	803a5a0 <USBD_StdDevReq>
 8039ee2:	4603      	mov	r3, r0
 8039ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8039ee6:	e020      	b.n	8039f2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8039ee8:	687b      	ldr	r3, [r7, #4]
 8039eea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039eee:	4619      	mov	r1, r3
 8039ef0:	6878      	ldr	r0, [r7, #4]
 8039ef2:	f000 fbc7 	bl	803a684 <USBD_StdItfReq>
 8039ef6:	4603      	mov	r3, r0
 8039ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8039efa:	e016      	b.n	8039f2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8039efc:	687b      	ldr	r3, [r7, #4]
 8039efe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039f02:	4619      	mov	r1, r3
 8039f04:	6878      	ldr	r0, [r7, #4]
 8039f06:	f000 fc29 	bl	803a75c <USBD_StdEPReq>
 8039f0a:	4603      	mov	r3, r0
 8039f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8039f0e:	e00c      	b.n	8039f2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8039f10:	687b      	ldr	r3, [r7, #4]
 8039f12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039f16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8039f1a:	b2db      	uxtb	r3, r3
 8039f1c:	4619      	mov	r1, r3
 8039f1e:	6878      	ldr	r0, [r7, #4]
 8039f20:	f001 fdf0 	bl	803bb04 <USBD_LL_StallEP>
 8039f24:	4603      	mov	r3, r0
 8039f26:	73fb      	strb	r3, [r7, #15]
      break;
 8039f28:	bf00      	nop
  }

  return ret;
 8039f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8039f2c:	4618      	mov	r0, r3
 8039f2e:	3710      	adds	r7, #16
 8039f30:	46bd      	mov	sp, r7
 8039f32:	bd80      	pop	{r7, pc}

08039f34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8039f34:	b580      	push	{r7, lr}
 8039f36:	b086      	sub	sp, #24
 8039f38:	af00      	add	r7, sp, #0
 8039f3a:	60f8      	str	r0, [r7, #12]
 8039f3c:	460b      	mov	r3, r1
 8039f3e:	607a      	str	r2, [r7, #4]
 8039f40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8039f42:	2300      	movs	r3, #0
 8039f44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8039f46:	7afb      	ldrb	r3, [r7, #11]
 8039f48:	2b00      	cmp	r3, #0
 8039f4a:	d16e      	bne.n	803a02a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8039f4c:	68fb      	ldr	r3, [r7, #12]
 8039f4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8039f52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8039f54:	68fb      	ldr	r3, [r7, #12]
 8039f56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8039f5a:	2b03      	cmp	r3, #3
 8039f5c:	f040 8098 	bne.w	803a090 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8039f60:	693b      	ldr	r3, [r7, #16]
 8039f62:	689a      	ldr	r2, [r3, #8]
 8039f64:	693b      	ldr	r3, [r7, #16]
 8039f66:	68db      	ldr	r3, [r3, #12]
 8039f68:	429a      	cmp	r2, r3
 8039f6a:	d913      	bls.n	8039f94 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8039f6c:	693b      	ldr	r3, [r7, #16]
 8039f6e:	689a      	ldr	r2, [r3, #8]
 8039f70:	693b      	ldr	r3, [r7, #16]
 8039f72:	68db      	ldr	r3, [r3, #12]
 8039f74:	1ad2      	subs	r2, r2, r3
 8039f76:	693b      	ldr	r3, [r7, #16]
 8039f78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8039f7a:	693b      	ldr	r3, [r7, #16]
 8039f7c:	68da      	ldr	r2, [r3, #12]
 8039f7e:	693b      	ldr	r3, [r7, #16]
 8039f80:	689b      	ldr	r3, [r3, #8]
 8039f82:	4293      	cmp	r3, r2
 8039f84:	bf28      	it	cs
 8039f86:	4613      	movcs	r3, r2
 8039f88:	461a      	mov	r2, r3
 8039f8a:	6879      	ldr	r1, [r7, #4]
 8039f8c:	68f8      	ldr	r0, [r7, #12]
 8039f8e:	f001 f984 	bl	803b29a <USBD_CtlContinueRx>
 8039f92:	e07d      	b.n	803a090 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8039f94:	68fb      	ldr	r3, [r7, #12]
 8039f96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039f9a:	f003 031f 	and.w	r3, r3, #31
 8039f9e:	2b02      	cmp	r3, #2
 8039fa0:	d014      	beq.n	8039fcc <USBD_LL_DataOutStage+0x98>
 8039fa2:	2b02      	cmp	r3, #2
 8039fa4:	d81d      	bhi.n	8039fe2 <USBD_LL_DataOutStage+0xae>
 8039fa6:	2b00      	cmp	r3, #0
 8039fa8:	d002      	beq.n	8039fb0 <USBD_LL_DataOutStage+0x7c>
 8039faa:	2b01      	cmp	r3, #1
 8039fac:	d003      	beq.n	8039fb6 <USBD_LL_DataOutStage+0x82>
 8039fae:	e018      	b.n	8039fe2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8039fb0:	2300      	movs	r3, #0
 8039fb2:	75bb      	strb	r3, [r7, #22]
            break;
 8039fb4:	e018      	b.n	8039fe8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8039fb6:	68fb      	ldr	r3, [r7, #12]
 8039fb8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8039fbc:	b2db      	uxtb	r3, r3
 8039fbe:	4619      	mov	r1, r3
 8039fc0:	68f8      	ldr	r0, [r7, #12]
 8039fc2:	f000 fa5e 	bl	803a482 <USBD_CoreFindIF>
 8039fc6:	4603      	mov	r3, r0
 8039fc8:	75bb      	strb	r3, [r7, #22]
            break;
 8039fca:	e00d      	b.n	8039fe8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8039fcc:	68fb      	ldr	r3, [r7, #12]
 8039fce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8039fd2:	b2db      	uxtb	r3, r3
 8039fd4:	4619      	mov	r1, r3
 8039fd6:	68f8      	ldr	r0, [r7, #12]
 8039fd8:	f000 fa60 	bl	803a49c <USBD_CoreFindEP>
 8039fdc:	4603      	mov	r3, r0
 8039fde:	75bb      	strb	r3, [r7, #22]
            break;
 8039fe0:	e002      	b.n	8039fe8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8039fe2:	2300      	movs	r3, #0
 8039fe4:	75bb      	strb	r3, [r7, #22]
            break;
 8039fe6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8039fe8:	7dbb      	ldrb	r3, [r7, #22]
 8039fea:	2b00      	cmp	r3, #0
 8039fec:	d119      	bne.n	803a022 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8039fee:	68fb      	ldr	r3, [r7, #12]
 8039ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039ff4:	b2db      	uxtb	r3, r3
 8039ff6:	2b03      	cmp	r3, #3
 8039ff8:	d113      	bne.n	803a022 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8039ffa:	7dba      	ldrb	r2, [r7, #22]
 8039ffc:	68fb      	ldr	r3, [r7, #12]
 8039ffe:	32ae      	adds	r2, #174	; 0xae
 803a000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a004:	691b      	ldr	r3, [r3, #16]
 803a006:	2b00      	cmp	r3, #0
 803a008:	d00b      	beq.n	803a022 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 803a00a:	7dba      	ldrb	r2, [r7, #22]
 803a00c:	68fb      	ldr	r3, [r7, #12]
 803a00e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 803a012:	7dba      	ldrb	r2, [r7, #22]
 803a014:	68fb      	ldr	r3, [r7, #12]
 803a016:	32ae      	adds	r2, #174	; 0xae
 803a018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a01c:	691b      	ldr	r3, [r3, #16]
 803a01e:	68f8      	ldr	r0, [r7, #12]
 803a020:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 803a022:	68f8      	ldr	r0, [r7, #12]
 803a024:	f001 f94a 	bl	803b2bc <USBD_CtlSendStatus>
 803a028:	e032      	b.n	803a090 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 803a02a:	7afb      	ldrb	r3, [r7, #11]
 803a02c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803a030:	b2db      	uxtb	r3, r3
 803a032:	4619      	mov	r1, r3
 803a034:	68f8      	ldr	r0, [r7, #12]
 803a036:	f000 fa31 	bl	803a49c <USBD_CoreFindEP>
 803a03a:	4603      	mov	r3, r0
 803a03c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a03e:	7dbb      	ldrb	r3, [r7, #22]
 803a040:	2bff      	cmp	r3, #255	; 0xff
 803a042:	d025      	beq.n	803a090 <USBD_LL_DataOutStage+0x15c>
 803a044:	7dbb      	ldrb	r3, [r7, #22]
 803a046:	2b00      	cmp	r3, #0
 803a048:	d122      	bne.n	803a090 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a04a:	68fb      	ldr	r3, [r7, #12]
 803a04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a050:	b2db      	uxtb	r3, r3
 803a052:	2b03      	cmp	r3, #3
 803a054:	d117      	bne.n	803a086 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 803a056:	7dba      	ldrb	r2, [r7, #22]
 803a058:	68fb      	ldr	r3, [r7, #12]
 803a05a:	32ae      	adds	r2, #174	; 0xae
 803a05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a060:	699b      	ldr	r3, [r3, #24]
 803a062:	2b00      	cmp	r3, #0
 803a064:	d00f      	beq.n	803a086 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 803a066:	7dba      	ldrb	r2, [r7, #22]
 803a068:	68fb      	ldr	r3, [r7, #12]
 803a06a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 803a06e:	7dba      	ldrb	r2, [r7, #22]
 803a070:	68fb      	ldr	r3, [r7, #12]
 803a072:	32ae      	adds	r2, #174	; 0xae
 803a074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a078:	699b      	ldr	r3, [r3, #24]
 803a07a:	7afa      	ldrb	r2, [r7, #11]
 803a07c:	4611      	mov	r1, r2
 803a07e:	68f8      	ldr	r0, [r7, #12]
 803a080:	4798      	blx	r3
 803a082:	4603      	mov	r3, r0
 803a084:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 803a086:	7dfb      	ldrb	r3, [r7, #23]
 803a088:	2b00      	cmp	r3, #0
 803a08a:	d001      	beq.n	803a090 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 803a08c:	7dfb      	ldrb	r3, [r7, #23]
 803a08e:	e000      	b.n	803a092 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 803a090:	2300      	movs	r3, #0
}
 803a092:	4618      	mov	r0, r3
 803a094:	3718      	adds	r7, #24
 803a096:	46bd      	mov	sp, r7
 803a098:	bd80      	pop	{r7, pc}

0803a09a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 803a09a:	b580      	push	{r7, lr}
 803a09c:	b086      	sub	sp, #24
 803a09e:	af00      	add	r7, sp, #0
 803a0a0:	60f8      	str	r0, [r7, #12]
 803a0a2:	460b      	mov	r3, r1
 803a0a4:	607a      	str	r2, [r7, #4]
 803a0a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 803a0a8:	7afb      	ldrb	r3, [r7, #11]
 803a0aa:	2b00      	cmp	r3, #0
 803a0ac:	d16f      	bne.n	803a18e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 803a0ae:	68fb      	ldr	r3, [r7, #12]
 803a0b0:	3314      	adds	r3, #20
 803a0b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 803a0b4:	68fb      	ldr	r3, [r7, #12]
 803a0b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803a0ba:	2b02      	cmp	r3, #2
 803a0bc:	d15a      	bne.n	803a174 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 803a0be:	693b      	ldr	r3, [r7, #16]
 803a0c0:	689a      	ldr	r2, [r3, #8]
 803a0c2:	693b      	ldr	r3, [r7, #16]
 803a0c4:	68db      	ldr	r3, [r3, #12]
 803a0c6:	429a      	cmp	r2, r3
 803a0c8:	d914      	bls.n	803a0f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 803a0ca:	693b      	ldr	r3, [r7, #16]
 803a0cc:	689a      	ldr	r2, [r3, #8]
 803a0ce:	693b      	ldr	r3, [r7, #16]
 803a0d0:	68db      	ldr	r3, [r3, #12]
 803a0d2:	1ad2      	subs	r2, r2, r3
 803a0d4:	693b      	ldr	r3, [r7, #16]
 803a0d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 803a0d8:	693b      	ldr	r3, [r7, #16]
 803a0da:	689b      	ldr	r3, [r3, #8]
 803a0dc:	461a      	mov	r2, r3
 803a0de:	6879      	ldr	r1, [r7, #4]
 803a0e0:	68f8      	ldr	r0, [r7, #12]
 803a0e2:	f001 f8ac 	bl	803b23e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803a0e6:	2300      	movs	r3, #0
 803a0e8:	2200      	movs	r2, #0
 803a0ea:	2100      	movs	r1, #0
 803a0ec:	68f8      	ldr	r0, [r7, #12]
 803a0ee:	f001 fdb3 	bl	803bc58 <USBD_LL_PrepareReceive>
 803a0f2:	e03f      	b.n	803a174 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 803a0f4:	693b      	ldr	r3, [r7, #16]
 803a0f6:	68da      	ldr	r2, [r3, #12]
 803a0f8:	693b      	ldr	r3, [r7, #16]
 803a0fa:	689b      	ldr	r3, [r3, #8]
 803a0fc:	429a      	cmp	r2, r3
 803a0fe:	d11c      	bne.n	803a13a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 803a100:	693b      	ldr	r3, [r7, #16]
 803a102:	685a      	ldr	r2, [r3, #4]
 803a104:	693b      	ldr	r3, [r7, #16]
 803a106:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 803a108:	429a      	cmp	r2, r3
 803a10a:	d316      	bcc.n	803a13a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 803a10c:	693b      	ldr	r3, [r7, #16]
 803a10e:	685a      	ldr	r2, [r3, #4]
 803a110:	68fb      	ldr	r3, [r7, #12]
 803a112:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 803a116:	429a      	cmp	r2, r3
 803a118:	d20f      	bcs.n	803a13a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 803a11a:	2200      	movs	r2, #0
 803a11c:	2100      	movs	r1, #0
 803a11e:	68f8      	ldr	r0, [r7, #12]
 803a120:	f001 f88d 	bl	803b23e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 803a124:	68fb      	ldr	r3, [r7, #12]
 803a126:	2200      	movs	r2, #0
 803a128:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803a12c:	2300      	movs	r3, #0
 803a12e:	2200      	movs	r2, #0
 803a130:	2100      	movs	r1, #0
 803a132:	68f8      	ldr	r0, [r7, #12]
 803a134:	f001 fd90 	bl	803bc58 <USBD_LL_PrepareReceive>
 803a138:	e01c      	b.n	803a174 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a13a:	68fb      	ldr	r3, [r7, #12]
 803a13c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a140:	b2db      	uxtb	r3, r3
 803a142:	2b03      	cmp	r3, #3
 803a144:	d10f      	bne.n	803a166 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 803a146:	68fb      	ldr	r3, [r7, #12]
 803a148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a14c:	68db      	ldr	r3, [r3, #12]
 803a14e:	2b00      	cmp	r3, #0
 803a150:	d009      	beq.n	803a166 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 803a152:	68fb      	ldr	r3, [r7, #12]
 803a154:	2200      	movs	r2, #0
 803a156:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 803a15a:	68fb      	ldr	r3, [r7, #12]
 803a15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a160:	68db      	ldr	r3, [r3, #12]
 803a162:	68f8      	ldr	r0, [r7, #12]
 803a164:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 803a166:	2180      	movs	r1, #128	; 0x80
 803a168:	68f8      	ldr	r0, [r7, #12]
 803a16a:	f001 fccb 	bl	803bb04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 803a16e:	68f8      	ldr	r0, [r7, #12]
 803a170:	f001 f8b7 	bl	803b2e2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 803a174:	68fb      	ldr	r3, [r7, #12]
 803a176:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 803a17a:	2b00      	cmp	r3, #0
 803a17c:	d03a      	beq.n	803a1f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 803a17e:	68f8      	ldr	r0, [r7, #12]
 803a180:	f7ff fe42 	bl	8039e08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 803a184:	68fb      	ldr	r3, [r7, #12]
 803a186:	2200      	movs	r2, #0
 803a188:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 803a18c:	e032      	b.n	803a1f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 803a18e:	7afb      	ldrb	r3, [r7, #11]
 803a190:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803a194:	b2db      	uxtb	r3, r3
 803a196:	4619      	mov	r1, r3
 803a198:	68f8      	ldr	r0, [r7, #12]
 803a19a:	f000 f97f 	bl	803a49c <USBD_CoreFindEP>
 803a19e:	4603      	mov	r3, r0
 803a1a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a1a2:	7dfb      	ldrb	r3, [r7, #23]
 803a1a4:	2bff      	cmp	r3, #255	; 0xff
 803a1a6:	d025      	beq.n	803a1f4 <USBD_LL_DataInStage+0x15a>
 803a1a8:	7dfb      	ldrb	r3, [r7, #23]
 803a1aa:	2b00      	cmp	r3, #0
 803a1ac:	d122      	bne.n	803a1f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a1ae:	68fb      	ldr	r3, [r7, #12]
 803a1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a1b4:	b2db      	uxtb	r3, r3
 803a1b6:	2b03      	cmp	r3, #3
 803a1b8:	d11c      	bne.n	803a1f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 803a1ba:	7dfa      	ldrb	r2, [r7, #23]
 803a1bc:	68fb      	ldr	r3, [r7, #12]
 803a1be:	32ae      	adds	r2, #174	; 0xae
 803a1c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a1c4:	695b      	ldr	r3, [r3, #20]
 803a1c6:	2b00      	cmp	r3, #0
 803a1c8:	d014      	beq.n	803a1f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 803a1ca:	7dfa      	ldrb	r2, [r7, #23]
 803a1cc:	68fb      	ldr	r3, [r7, #12]
 803a1ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 803a1d2:	7dfa      	ldrb	r2, [r7, #23]
 803a1d4:	68fb      	ldr	r3, [r7, #12]
 803a1d6:	32ae      	adds	r2, #174	; 0xae
 803a1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a1dc:	695b      	ldr	r3, [r3, #20]
 803a1de:	7afa      	ldrb	r2, [r7, #11]
 803a1e0:	4611      	mov	r1, r2
 803a1e2:	68f8      	ldr	r0, [r7, #12]
 803a1e4:	4798      	blx	r3
 803a1e6:	4603      	mov	r3, r0
 803a1e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 803a1ea:	7dbb      	ldrb	r3, [r7, #22]
 803a1ec:	2b00      	cmp	r3, #0
 803a1ee:	d001      	beq.n	803a1f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 803a1f0:	7dbb      	ldrb	r3, [r7, #22]
 803a1f2:	e000      	b.n	803a1f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 803a1f4:	2300      	movs	r3, #0
}
 803a1f6:	4618      	mov	r0, r3
 803a1f8:	3718      	adds	r7, #24
 803a1fa:	46bd      	mov	sp, r7
 803a1fc:	bd80      	pop	{r7, pc}

0803a1fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 803a1fe:	b580      	push	{r7, lr}
 803a200:	b084      	sub	sp, #16
 803a202:	af00      	add	r7, sp, #0
 803a204:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 803a206:	2300      	movs	r3, #0
 803a208:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803a20a:	687b      	ldr	r3, [r7, #4]
 803a20c:	2201      	movs	r2, #1
 803a20e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 803a212:	687b      	ldr	r3, [r7, #4]
 803a214:	2200      	movs	r2, #0
 803a216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 803a21a:	687b      	ldr	r3, [r7, #4]
 803a21c:	2200      	movs	r2, #0
 803a21e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 803a220:	687b      	ldr	r3, [r7, #4]
 803a222:	2200      	movs	r2, #0
 803a224:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 803a228:	687b      	ldr	r3, [r7, #4]
 803a22a:	2200      	movs	r2, #0
 803a22c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 803a230:	687b      	ldr	r3, [r7, #4]
 803a232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a236:	2b00      	cmp	r3, #0
 803a238:	d014      	beq.n	803a264 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 803a23a:	687b      	ldr	r3, [r7, #4]
 803a23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a240:	685b      	ldr	r3, [r3, #4]
 803a242:	2b00      	cmp	r3, #0
 803a244:	d00e      	beq.n	803a264 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 803a246:	687b      	ldr	r3, [r7, #4]
 803a248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a24c:	685b      	ldr	r3, [r3, #4]
 803a24e:	687a      	ldr	r2, [r7, #4]
 803a250:	6852      	ldr	r2, [r2, #4]
 803a252:	b2d2      	uxtb	r2, r2
 803a254:	4611      	mov	r1, r2
 803a256:	6878      	ldr	r0, [r7, #4]
 803a258:	4798      	blx	r3
 803a25a:	4603      	mov	r3, r0
 803a25c:	2b00      	cmp	r3, #0
 803a25e:	d001      	beq.n	803a264 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 803a260:	2303      	movs	r3, #3
 803a262:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803a264:	2340      	movs	r3, #64	; 0x40
 803a266:	2200      	movs	r2, #0
 803a268:	2100      	movs	r1, #0
 803a26a:	6878      	ldr	r0, [r7, #4]
 803a26c:	f001 fc05 	bl	803ba7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 803a270:	687b      	ldr	r3, [r7, #4]
 803a272:	2201      	movs	r2, #1
 803a274:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 803a278:	687b      	ldr	r3, [r7, #4]
 803a27a:	2240      	movs	r2, #64	; 0x40
 803a27c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803a280:	2340      	movs	r3, #64	; 0x40
 803a282:	2200      	movs	r2, #0
 803a284:	2180      	movs	r1, #128	; 0x80
 803a286:	6878      	ldr	r0, [r7, #4]
 803a288:	f001 fbf7 	bl	803ba7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 803a28c:	687b      	ldr	r3, [r7, #4]
 803a28e:	2201      	movs	r2, #1
 803a290:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 803a292:	687b      	ldr	r3, [r7, #4]
 803a294:	2240      	movs	r2, #64	; 0x40
 803a296:	621a      	str	r2, [r3, #32]

  return ret;
 803a298:	7bfb      	ldrb	r3, [r7, #15]
}
 803a29a:	4618      	mov	r0, r3
 803a29c:	3710      	adds	r7, #16
 803a29e:	46bd      	mov	sp, r7
 803a2a0:	bd80      	pop	{r7, pc}

0803a2a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 803a2a2:	b480      	push	{r7}
 803a2a4:	b083      	sub	sp, #12
 803a2a6:	af00      	add	r7, sp, #0
 803a2a8:	6078      	str	r0, [r7, #4]
 803a2aa:	460b      	mov	r3, r1
 803a2ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 803a2ae:	687b      	ldr	r3, [r7, #4]
 803a2b0:	78fa      	ldrb	r2, [r7, #3]
 803a2b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 803a2b4:	2300      	movs	r3, #0
}
 803a2b6:	4618      	mov	r0, r3
 803a2b8:	370c      	adds	r7, #12
 803a2ba:	46bd      	mov	sp, r7
 803a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a2c0:	4770      	bx	lr

0803a2c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 803a2c2:	b480      	push	{r7}
 803a2c4:	b083      	sub	sp, #12
 803a2c6:	af00      	add	r7, sp, #0
 803a2c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 803a2ca:	687b      	ldr	r3, [r7, #4]
 803a2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a2d0:	b2da      	uxtb	r2, r3
 803a2d2:	687b      	ldr	r3, [r7, #4]
 803a2d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 803a2d8:	687b      	ldr	r3, [r7, #4]
 803a2da:	2204      	movs	r2, #4
 803a2dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 803a2e0:	2300      	movs	r3, #0
}
 803a2e2:	4618      	mov	r0, r3
 803a2e4:	370c      	adds	r7, #12
 803a2e6:	46bd      	mov	sp, r7
 803a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a2ec:	4770      	bx	lr

0803a2ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 803a2ee:	b480      	push	{r7}
 803a2f0:	b083      	sub	sp, #12
 803a2f2:	af00      	add	r7, sp, #0
 803a2f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 803a2f6:	687b      	ldr	r3, [r7, #4]
 803a2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a2fc:	b2db      	uxtb	r3, r3
 803a2fe:	2b04      	cmp	r3, #4
 803a300:	d106      	bne.n	803a310 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 803a302:	687b      	ldr	r3, [r7, #4]
 803a304:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 803a308:	b2da      	uxtb	r2, r3
 803a30a:	687b      	ldr	r3, [r7, #4]
 803a30c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 803a310:	2300      	movs	r3, #0
}
 803a312:	4618      	mov	r0, r3
 803a314:	370c      	adds	r7, #12
 803a316:	46bd      	mov	sp, r7
 803a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a31c:	4770      	bx	lr

0803a31e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 803a31e:	b580      	push	{r7, lr}
 803a320:	b082      	sub	sp, #8
 803a322:	af00      	add	r7, sp, #0
 803a324:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a326:	687b      	ldr	r3, [r7, #4]
 803a328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a32c:	b2db      	uxtb	r3, r3
 803a32e:	2b03      	cmp	r3, #3
 803a330:	d110      	bne.n	803a354 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 803a332:	687b      	ldr	r3, [r7, #4]
 803a334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a338:	2b00      	cmp	r3, #0
 803a33a:	d00b      	beq.n	803a354 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 803a33c:	687b      	ldr	r3, [r7, #4]
 803a33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a342:	69db      	ldr	r3, [r3, #28]
 803a344:	2b00      	cmp	r3, #0
 803a346:	d005      	beq.n	803a354 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 803a348:	687b      	ldr	r3, [r7, #4]
 803a34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a34e:	69db      	ldr	r3, [r3, #28]
 803a350:	6878      	ldr	r0, [r7, #4]
 803a352:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 803a354:	2300      	movs	r3, #0
}
 803a356:	4618      	mov	r0, r3
 803a358:	3708      	adds	r7, #8
 803a35a:	46bd      	mov	sp, r7
 803a35c:	bd80      	pop	{r7, pc}

0803a35e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 803a35e:	b580      	push	{r7, lr}
 803a360:	b082      	sub	sp, #8
 803a362:	af00      	add	r7, sp, #0
 803a364:	6078      	str	r0, [r7, #4]
 803a366:	460b      	mov	r3, r1
 803a368:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803a36a:	687b      	ldr	r3, [r7, #4]
 803a36c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a370:	687b      	ldr	r3, [r7, #4]
 803a372:	32ae      	adds	r2, #174	; 0xae
 803a374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a378:	2b00      	cmp	r3, #0
 803a37a:	d101      	bne.n	803a380 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 803a37c:	2303      	movs	r3, #3
 803a37e:	e01c      	b.n	803a3ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a380:	687b      	ldr	r3, [r7, #4]
 803a382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a386:	b2db      	uxtb	r3, r3
 803a388:	2b03      	cmp	r3, #3
 803a38a:	d115      	bne.n	803a3b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 803a38c:	687b      	ldr	r3, [r7, #4]
 803a38e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a392:	687b      	ldr	r3, [r7, #4]
 803a394:	32ae      	adds	r2, #174	; 0xae
 803a396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a39a:	6a1b      	ldr	r3, [r3, #32]
 803a39c:	2b00      	cmp	r3, #0
 803a39e:	d00b      	beq.n	803a3b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 803a3a0:	687b      	ldr	r3, [r7, #4]
 803a3a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a3a6:	687b      	ldr	r3, [r7, #4]
 803a3a8:	32ae      	adds	r2, #174	; 0xae
 803a3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a3ae:	6a1b      	ldr	r3, [r3, #32]
 803a3b0:	78fa      	ldrb	r2, [r7, #3]
 803a3b2:	4611      	mov	r1, r2
 803a3b4:	6878      	ldr	r0, [r7, #4]
 803a3b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803a3b8:	2300      	movs	r3, #0
}
 803a3ba:	4618      	mov	r0, r3
 803a3bc:	3708      	adds	r7, #8
 803a3be:	46bd      	mov	sp, r7
 803a3c0:	bd80      	pop	{r7, pc}

0803a3c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 803a3c2:	b580      	push	{r7, lr}
 803a3c4:	b082      	sub	sp, #8
 803a3c6:	af00      	add	r7, sp, #0
 803a3c8:	6078      	str	r0, [r7, #4]
 803a3ca:	460b      	mov	r3, r1
 803a3cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803a3ce:	687b      	ldr	r3, [r7, #4]
 803a3d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a3d4:	687b      	ldr	r3, [r7, #4]
 803a3d6:	32ae      	adds	r2, #174	; 0xae
 803a3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a3dc:	2b00      	cmp	r3, #0
 803a3de:	d101      	bne.n	803a3e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 803a3e0:	2303      	movs	r3, #3
 803a3e2:	e01c      	b.n	803a41e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a3e4:	687b      	ldr	r3, [r7, #4]
 803a3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a3ea:	b2db      	uxtb	r3, r3
 803a3ec:	2b03      	cmp	r3, #3
 803a3ee:	d115      	bne.n	803a41c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 803a3f0:	687b      	ldr	r3, [r7, #4]
 803a3f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a3f6:	687b      	ldr	r3, [r7, #4]
 803a3f8:	32ae      	adds	r2, #174	; 0xae
 803a3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a400:	2b00      	cmp	r3, #0
 803a402:	d00b      	beq.n	803a41c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 803a404:	687b      	ldr	r3, [r7, #4]
 803a406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a40a:	687b      	ldr	r3, [r7, #4]
 803a40c:	32ae      	adds	r2, #174	; 0xae
 803a40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a414:	78fa      	ldrb	r2, [r7, #3]
 803a416:	4611      	mov	r1, r2
 803a418:	6878      	ldr	r0, [r7, #4]
 803a41a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803a41c:	2300      	movs	r3, #0
}
 803a41e:	4618      	mov	r0, r3
 803a420:	3708      	adds	r7, #8
 803a422:	46bd      	mov	sp, r7
 803a424:	bd80      	pop	{r7, pc}

0803a426 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 803a426:	b480      	push	{r7}
 803a428:	b083      	sub	sp, #12
 803a42a:	af00      	add	r7, sp, #0
 803a42c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803a42e:	2300      	movs	r3, #0
}
 803a430:	4618      	mov	r0, r3
 803a432:	370c      	adds	r7, #12
 803a434:	46bd      	mov	sp, r7
 803a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a43a:	4770      	bx	lr

0803a43c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 803a43c:	b580      	push	{r7, lr}
 803a43e:	b084      	sub	sp, #16
 803a440:	af00      	add	r7, sp, #0
 803a442:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 803a444:	2300      	movs	r3, #0
 803a446:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803a448:	687b      	ldr	r3, [r7, #4]
 803a44a:	2201      	movs	r2, #1
 803a44c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803a450:	687b      	ldr	r3, [r7, #4]
 803a452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a456:	2b00      	cmp	r3, #0
 803a458:	d00e      	beq.n	803a478 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 803a45a:	687b      	ldr	r3, [r7, #4]
 803a45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a460:	685b      	ldr	r3, [r3, #4]
 803a462:	687a      	ldr	r2, [r7, #4]
 803a464:	6852      	ldr	r2, [r2, #4]
 803a466:	b2d2      	uxtb	r2, r2
 803a468:	4611      	mov	r1, r2
 803a46a:	6878      	ldr	r0, [r7, #4]
 803a46c:	4798      	blx	r3
 803a46e:	4603      	mov	r3, r0
 803a470:	2b00      	cmp	r3, #0
 803a472:	d001      	beq.n	803a478 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 803a474:	2303      	movs	r3, #3
 803a476:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803a478:	7bfb      	ldrb	r3, [r7, #15]
}
 803a47a:	4618      	mov	r0, r3
 803a47c:	3710      	adds	r7, #16
 803a47e:	46bd      	mov	sp, r7
 803a480:	bd80      	pop	{r7, pc}

0803a482 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803a482:	b480      	push	{r7}
 803a484:	b083      	sub	sp, #12
 803a486:	af00      	add	r7, sp, #0
 803a488:	6078      	str	r0, [r7, #4]
 803a48a:	460b      	mov	r3, r1
 803a48c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803a48e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803a490:	4618      	mov	r0, r3
 803a492:	370c      	adds	r7, #12
 803a494:	46bd      	mov	sp, r7
 803a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a49a:	4770      	bx	lr

0803a49c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803a49c:	b480      	push	{r7}
 803a49e:	b083      	sub	sp, #12
 803a4a0:	af00      	add	r7, sp, #0
 803a4a2:	6078      	str	r0, [r7, #4]
 803a4a4:	460b      	mov	r3, r1
 803a4a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803a4a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803a4aa:	4618      	mov	r0, r3
 803a4ac:	370c      	adds	r7, #12
 803a4ae:	46bd      	mov	sp, r7
 803a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a4b4:	4770      	bx	lr

0803a4b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 803a4b6:	b580      	push	{r7, lr}
 803a4b8:	b086      	sub	sp, #24
 803a4ba:	af00      	add	r7, sp, #0
 803a4bc:	6078      	str	r0, [r7, #4]
 803a4be:	460b      	mov	r3, r1
 803a4c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 803a4c2:	687b      	ldr	r3, [r7, #4]
 803a4c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 803a4c6:	687b      	ldr	r3, [r7, #4]
 803a4c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 803a4ca:	2300      	movs	r3, #0
 803a4cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 803a4ce:	68fb      	ldr	r3, [r7, #12]
 803a4d0:	885b      	ldrh	r3, [r3, #2]
 803a4d2:	b29a      	uxth	r2, r3
 803a4d4:	68fb      	ldr	r3, [r7, #12]
 803a4d6:	781b      	ldrb	r3, [r3, #0]
 803a4d8:	b29b      	uxth	r3, r3
 803a4da:	429a      	cmp	r2, r3
 803a4dc:	d920      	bls.n	803a520 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 803a4de:	68fb      	ldr	r3, [r7, #12]
 803a4e0:	781b      	ldrb	r3, [r3, #0]
 803a4e2:	b29b      	uxth	r3, r3
 803a4e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 803a4e6:	e013      	b.n	803a510 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 803a4e8:	f107 030a 	add.w	r3, r7, #10
 803a4ec:	4619      	mov	r1, r3
 803a4ee:	6978      	ldr	r0, [r7, #20]
 803a4f0:	f000 f81b 	bl	803a52a <USBD_GetNextDesc>
 803a4f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 803a4f6:	697b      	ldr	r3, [r7, #20]
 803a4f8:	785b      	ldrb	r3, [r3, #1]
 803a4fa:	2b05      	cmp	r3, #5
 803a4fc:	d108      	bne.n	803a510 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 803a4fe:	697b      	ldr	r3, [r7, #20]
 803a500:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 803a502:	693b      	ldr	r3, [r7, #16]
 803a504:	789b      	ldrb	r3, [r3, #2]
 803a506:	78fa      	ldrb	r2, [r7, #3]
 803a508:	429a      	cmp	r2, r3
 803a50a:	d008      	beq.n	803a51e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 803a50c:	2300      	movs	r3, #0
 803a50e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 803a510:	68fb      	ldr	r3, [r7, #12]
 803a512:	885b      	ldrh	r3, [r3, #2]
 803a514:	b29a      	uxth	r2, r3
 803a516:	897b      	ldrh	r3, [r7, #10]
 803a518:	429a      	cmp	r2, r3
 803a51a:	d8e5      	bhi.n	803a4e8 <USBD_GetEpDesc+0x32>
 803a51c:	e000      	b.n	803a520 <USBD_GetEpDesc+0x6a>
          break;
 803a51e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 803a520:	693b      	ldr	r3, [r7, #16]
}
 803a522:	4618      	mov	r0, r3
 803a524:	3718      	adds	r7, #24
 803a526:	46bd      	mov	sp, r7
 803a528:	bd80      	pop	{r7, pc}

0803a52a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 803a52a:	b480      	push	{r7}
 803a52c:	b085      	sub	sp, #20
 803a52e:	af00      	add	r7, sp, #0
 803a530:	6078      	str	r0, [r7, #4]
 803a532:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 803a534:	687b      	ldr	r3, [r7, #4]
 803a536:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 803a538:	683b      	ldr	r3, [r7, #0]
 803a53a:	881a      	ldrh	r2, [r3, #0]
 803a53c:	68fb      	ldr	r3, [r7, #12]
 803a53e:	781b      	ldrb	r3, [r3, #0]
 803a540:	b29b      	uxth	r3, r3
 803a542:	4413      	add	r3, r2
 803a544:	b29a      	uxth	r2, r3
 803a546:	683b      	ldr	r3, [r7, #0]
 803a548:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 803a54a:	68fb      	ldr	r3, [r7, #12]
 803a54c:	781b      	ldrb	r3, [r3, #0]
 803a54e:	461a      	mov	r2, r3
 803a550:	687b      	ldr	r3, [r7, #4]
 803a552:	4413      	add	r3, r2
 803a554:	60fb      	str	r3, [r7, #12]

  return (pnext);
 803a556:	68fb      	ldr	r3, [r7, #12]
}
 803a558:	4618      	mov	r0, r3
 803a55a:	3714      	adds	r7, #20
 803a55c:	46bd      	mov	sp, r7
 803a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a562:	4770      	bx	lr

0803a564 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 803a564:	b480      	push	{r7}
 803a566:	b087      	sub	sp, #28
 803a568:	af00      	add	r7, sp, #0
 803a56a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 803a56c:	687b      	ldr	r3, [r7, #4]
 803a56e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 803a570:	697b      	ldr	r3, [r7, #20]
 803a572:	781b      	ldrb	r3, [r3, #0]
 803a574:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 803a576:	697b      	ldr	r3, [r7, #20]
 803a578:	3301      	adds	r3, #1
 803a57a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 803a57c:	697b      	ldr	r3, [r7, #20]
 803a57e:	781b      	ldrb	r3, [r3, #0]
 803a580:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 803a582:	8a3b      	ldrh	r3, [r7, #16]
 803a584:	021b      	lsls	r3, r3, #8
 803a586:	b21a      	sxth	r2, r3
 803a588:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803a58c:	4313      	orrs	r3, r2
 803a58e:	b21b      	sxth	r3, r3
 803a590:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 803a592:	89fb      	ldrh	r3, [r7, #14]
}
 803a594:	4618      	mov	r0, r3
 803a596:	371c      	adds	r7, #28
 803a598:	46bd      	mov	sp, r7
 803a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a59e:	4770      	bx	lr

0803a5a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a5a0:	b580      	push	{r7, lr}
 803a5a2:	b084      	sub	sp, #16
 803a5a4:	af00      	add	r7, sp, #0
 803a5a6:	6078      	str	r0, [r7, #4]
 803a5a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803a5aa:	2300      	movs	r3, #0
 803a5ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a5ae:	683b      	ldr	r3, [r7, #0]
 803a5b0:	781b      	ldrb	r3, [r3, #0]
 803a5b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a5b6:	2b40      	cmp	r3, #64	; 0x40
 803a5b8:	d005      	beq.n	803a5c6 <USBD_StdDevReq+0x26>
 803a5ba:	2b40      	cmp	r3, #64	; 0x40
 803a5bc:	d857      	bhi.n	803a66e <USBD_StdDevReq+0xce>
 803a5be:	2b00      	cmp	r3, #0
 803a5c0:	d00f      	beq.n	803a5e2 <USBD_StdDevReq+0x42>
 803a5c2:	2b20      	cmp	r3, #32
 803a5c4:	d153      	bne.n	803a66e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 803a5c6:	687b      	ldr	r3, [r7, #4]
 803a5c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a5cc:	687b      	ldr	r3, [r7, #4]
 803a5ce:	32ae      	adds	r2, #174	; 0xae
 803a5d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a5d4:	689b      	ldr	r3, [r3, #8]
 803a5d6:	6839      	ldr	r1, [r7, #0]
 803a5d8:	6878      	ldr	r0, [r7, #4]
 803a5da:	4798      	blx	r3
 803a5dc:	4603      	mov	r3, r0
 803a5de:	73fb      	strb	r3, [r7, #15]
      break;
 803a5e0:	e04a      	b.n	803a678 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803a5e2:	683b      	ldr	r3, [r7, #0]
 803a5e4:	785b      	ldrb	r3, [r3, #1]
 803a5e6:	2b09      	cmp	r3, #9
 803a5e8:	d83b      	bhi.n	803a662 <USBD_StdDevReq+0xc2>
 803a5ea:	a201      	add	r2, pc, #4	; (adr r2, 803a5f0 <USBD_StdDevReq+0x50>)
 803a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a5f0:	0803a645 	.word	0x0803a645
 803a5f4:	0803a659 	.word	0x0803a659
 803a5f8:	0803a663 	.word	0x0803a663
 803a5fc:	0803a64f 	.word	0x0803a64f
 803a600:	0803a663 	.word	0x0803a663
 803a604:	0803a623 	.word	0x0803a623
 803a608:	0803a619 	.word	0x0803a619
 803a60c:	0803a663 	.word	0x0803a663
 803a610:	0803a63b 	.word	0x0803a63b
 803a614:	0803a62d 	.word	0x0803a62d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 803a618:	6839      	ldr	r1, [r7, #0]
 803a61a:	6878      	ldr	r0, [r7, #4]
 803a61c:	f000 fa3c 	bl	803aa98 <USBD_GetDescriptor>
          break;
 803a620:	e024      	b.n	803a66c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 803a622:	6839      	ldr	r1, [r7, #0]
 803a624:	6878      	ldr	r0, [r7, #4]
 803a626:	f000 fba1 	bl	803ad6c <USBD_SetAddress>
          break;
 803a62a:	e01f      	b.n	803a66c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 803a62c:	6839      	ldr	r1, [r7, #0]
 803a62e:	6878      	ldr	r0, [r7, #4]
 803a630:	f000 fbe0 	bl	803adf4 <USBD_SetConfig>
 803a634:	4603      	mov	r3, r0
 803a636:	73fb      	strb	r3, [r7, #15]
          break;
 803a638:	e018      	b.n	803a66c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 803a63a:	6839      	ldr	r1, [r7, #0]
 803a63c:	6878      	ldr	r0, [r7, #4]
 803a63e:	f000 fc83 	bl	803af48 <USBD_GetConfig>
          break;
 803a642:	e013      	b.n	803a66c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 803a644:	6839      	ldr	r1, [r7, #0]
 803a646:	6878      	ldr	r0, [r7, #4]
 803a648:	f000 fcb4 	bl	803afb4 <USBD_GetStatus>
          break;
 803a64c:	e00e      	b.n	803a66c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 803a64e:	6839      	ldr	r1, [r7, #0]
 803a650:	6878      	ldr	r0, [r7, #4]
 803a652:	f000 fce3 	bl	803b01c <USBD_SetFeature>
          break;
 803a656:	e009      	b.n	803a66c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 803a658:	6839      	ldr	r1, [r7, #0]
 803a65a:	6878      	ldr	r0, [r7, #4]
 803a65c:	f000 fd07 	bl	803b06e <USBD_ClrFeature>
          break;
 803a660:	e004      	b.n	803a66c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 803a662:	6839      	ldr	r1, [r7, #0]
 803a664:	6878      	ldr	r0, [r7, #4]
 803a666:	f000 fd5e 	bl	803b126 <USBD_CtlError>
          break;
 803a66a:	bf00      	nop
      }
      break;
 803a66c:	e004      	b.n	803a678 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 803a66e:	6839      	ldr	r1, [r7, #0]
 803a670:	6878      	ldr	r0, [r7, #4]
 803a672:	f000 fd58 	bl	803b126 <USBD_CtlError>
      break;
 803a676:	bf00      	nop
  }

  return ret;
 803a678:	7bfb      	ldrb	r3, [r7, #15]
}
 803a67a:	4618      	mov	r0, r3
 803a67c:	3710      	adds	r7, #16
 803a67e:	46bd      	mov	sp, r7
 803a680:	bd80      	pop	{r7, pc}
 803a682:	bf00      	nop

0803a684 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a684:	b580      	push	{r7, lr}
 803a686:	b084      	sub	sp, #16
 803a688:	af00      	add	r7, sp, #0
 803a68a:	6078      	str	r0, [r7, #4]
 803a68c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803a68e:	2300      	movs	r3, #0
 803a690:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a692:	683b      	ldr	r3, [r7, #0]
 803a694:	781b      	ldrb	r3, [r3, #0]
 803a696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a69a:	2b40      	cmp	r3, #64	; 0x40
 803a69c:	d005      	beq.n	803a6aa <USBD_StdItfReq+0x26>
 803a69e:	2b40      	cmp	r3, #64	; 0x40
 803a6a0:	d852      	bhi.n	803a748 <USBD_StdItfReq+0xc4>
 803a6a2:	2b00      	cmp	r3, #0
 803a6a4:	d001      	beq.n	803a6aa <USBD_StdItfReq+0x26>
 803a6a6:	2b20      	cmp	r3, #32
 803a6a8:	d14e      	bne.n	803a748 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 803a6aa:	687b      	ldr	r3, [r7, #4]
 803a6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a6b0:	b2db      	uxtb	r3, r3
 803a6b2:	3b01      	subs	r3, #1
 803a6b4:	2b02      	cmp	r3, #2
 803a6b6:	d840      	bhi.n	803a73a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 803a6b8:	683b      	ldr	r3, [r7, #0]
 803a6ba:	889b      	ldrh	r3, [r3, #4]
 803a6bc:	b2db      	uxtb	r3, r3
 803a6be:	2b01      	cmp	r3, #1
 803a6c0:	d836      	bhi.n	803a730 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 803a6c2:	683b      	ldr	r3, [r7, #0]
 803a6c4:	889b      	ldrh	r3, [r3, #4]
 803a6c6:	b2db      	uxtb	r3, r3
 803a6c8:	4619      	mov	r1, r3
 803a6ca:	6878      	ldr	r0, [r7, #4]
 803a6cc:	f7ff fed9 	bl	803a482 <USBD_CoreFindIF>
 803a6d0:	4603      	mov	r3, r0
 803a6d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a6d4:	7bbb      	ldrb	r3, [r7, #14]
 803a6d6:	2bff      	cmp	r3, #255	; 0xff
 803a6d8:	d01d      	beq.n	803a716 <USBD_StdItfReq+0x92>
 803a6da:	7bbb      	ldrb	r3, [r7, #14]
 803a6dc:	2b00      	cmp	r3, #0
 803a6de:	d11a      	bne.n	803a716 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 803a6e0:	7bba      	ldrb	r2, [r7, #14]
 803a6e2:	687b      	ldr	r3, [r7, #4]
 803a6e4:	32ae      	adds	r2, #174	; 0xae
 803a6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a6ea:	689b      	ldr	r3, [r3, #8]
 803a6ec:	2b00      	cmp	r3, #0
 803a6ee:	d00f      	beq.n	803a710 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 803a6f0:	7bba      	ldrb	r2, [r7, #14]
 803a6f2:	687b      	ldr	r3, [r7, #4]
 803a6f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803a6f8:	7bba      	ldrb	r2, [r7, #14]
 803a6fa:	687b      	ldr	r3, [r7, #4]
 803a6fc:	32ae      	adds	r2, #174	; 0xae
 803a6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a702:	689b      	ldr	r3, [r3, #8]
 803a704:	6839      	ldr	r1, [r7, #0]
 803a706:	6878      	ldr	r0, [r7, #4]
 803a708:	4798      	blx	r3
 803a70a:	4603      	mov	r3, r0
 803a70c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803a70e:	e004      	b.n	803a71a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 803a710:	2303      	movs	r3, #3
 803a712:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803a714:	e001      	b.n	803a71a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 803a716:	2303      	movs	r3, #3
 803a718:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 803a71a:	683b      	ldr	r3, [r7, #0]
 803a71c:	88db      	ldrh	r3, [r3, #6]
 803a71e:	2b00      	cmp	r3, #0
 803a720:	d110      	bne.n	803a744 <USBD_StdItfReq+0xc0>
 803a722:	7bfb      	ldrb	r3, [r7, #15]
 803a724:	2b00      	cmp	r3, #0
 803a726:	d10d      	bne.n	803a744 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 803a728:	6878      	ldr	r0, [r7, #4]
 803a72a:	f000 fdc7 	bl	803b2bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 803a72e:	e009      	b.n	803a744 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 803a730:	6839      	ldr	r1, [r7, #0]
 803a732:	6878      	ldr	r0, [r7, #4]
 803a734:	f000 fcf7 	bl	803b126 <USBD_CtlError>
          break;
 803a738:	e004      	b.n	803a744 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 803a73a:	6839      	ldr	r1, [r7, #0]
 803a73c:	6878      	ldr	r0, [r7, #4]
 803a73e:	f000 fcf2 	bl	803b126 <USBD_CtlError>
          break;
 803a742:	e000      	b.n	803a746 <USBD_StdItfReq+0xc2>
          break;
 803a744:	bf00      	nop
      }
      break;
 803a746:	e004      	b.n	803a752 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 803a748:	6839      	ldr	r1, [r7, #0]
 803a74a:	6878      	ldr	r0, [r7, #4]
 803a74c:	f000 fceb 	bl	803b126 <USBD_CtlError>
      break;
 803a750:	bf00      	nop
  }

  return ret;
 803a752:	7bfb      	ldrb	r3, [r7, #15]
}
 803a754:	4618      	mov	r0, r3
 803a756:	3710      	adds	r7, #16
 803a758:	46bd      	mov	sp, r7
 803a75a:	bd80      	pop	{r7, pc}

0803a75c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a75c:	b580      	push	{r7, lr}
 803a75e:	b084      	sub	sp, #16
 803a760:	af00      	add	r7, sp, #0
 803a762:	6078      	str	r0, [r7, #4]
 803a764:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 803a766:	2300      	movs	r3, #0
 803a768:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 803a76a:	683b      	ldr	r3, [r7, #0]
 803a76c:	889b      	ldrh	r3, [r3, #4]
 803a76e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a770:	683b      	ldr	r3, [r7, #0]
 803a772:	781b      	ldrb	r3, [r3, #0]
 803a774:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a778:	2b40      	cmp	r3, #64	; 0x40
 803a77a:	d007      	beq.n	803a78c <USBD_StdEPReq+0x30>
 803a77c:	2b40      	cmp	r3, #64	; 0x40
 803a77e:	f200 817f 	bhi.w	803aa80 <USBD_StdEPReq+0x324>
 803a782:	2b00      	cmp	r3, #0
 803a784:	d02a      	beq.n	803a7dc <USBD_StdEPReq+0x80>
 803a786:	2b20      	cmp	r3, #32
 803a788:	f040 817a 	bne.w	803aa80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 803a78c:	7bbb      	ldrb	r3, [r7, #14]
 803a78e:	4619      	mov	r1, r3
 803a790:	6878      	ldr	r0, [r7, #4]
 803a792:	f7ff fe83 	bl	803a49c <USBD_CoreFindEP>
 803a796:	4603      	mov	r3, r0
 803a798:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a79a:	7b7b      	ldrb	r3, [r7, #13]
 803a79c:	2bff      	cmp	r3, #255	; 0xff
 803a79e:	f000 8174 	beq.w	803aa8a <USBD_StdEPReq+0x32e>
 803a7a2:	7b7b      	ldrb	r3, [r7, #13]
 803a7a4:	2b00      	cmp	r3, #0
 803a7a6:	f040 8170 	bne.w	803aa8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 803a7aa:	7b7a      	ldrb	r2, [r7, #13]
 803a7ac:	687b      	ldr	r3, [r7, #4]
 803a7ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 803a7b2:	7b7a      	ldrb	r2, [r7, #13]
 803a7b4:	687b      	ldr	r3, [r7, #4]
 803a7b6:	32ae      	adds	r2, #174	; 0xae
 803a7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a7bc:	689b      	ldr	r3, [r3, #8]
 803a7be:	2b00      	cmp	r3, #0
 803a7c0:	f000 8163 	beq.w	803aa8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 803a7c4:	7b7a      	ldrb	r2, [r7, #13]
 803a7c6:	687b      	ldr	r3, [r7, #4]
 803a7c8:	32ae      	adds	r2, #174	; 0xae
 803a7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a7ce:	689b      	ldr	r3, [r3, #8]
 803a7d0:	6839      	ldr	r1, [r7, #0]
 803a7d2:	6878      	ldr	r0, [r7, #4]
 803a7d4:	4798      	blx	r3
 803a7d6:	4603      	mov	r3, r0
 803a7d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 803a7da:	e156      	b.n	803aa8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803a7dc:	683b      	ldr	r3, [r7, #0]
 803a7de:	785b      	ldrb	r3, [r3, #1]
 803a7e0:	2b03      	cmp	r3, #3
 803a7e2:	d008      	beq.n	803a7f6 <USBD_StdEPReq+0x9a>
 803a7e4:	2b03      	cmp	r3, #3
 803a7e6:	f300 8145 	bgt.w	803aa74 <USBD_StdEPReq+0x318>
 803a7ea:	2b00      	cmp	r3, #0
 803a7ec:	f000 809b 	beq.w	803a926 <USBD_StdEPReq+0x1ca>
 803a7f0:	2b01      	cmp	r3, #1
 803a7f2:	d03c      	beq.n	803a86e <USBD_StdEPReq+0x112>
 803a7f4:	e13e      	b.n	803aa74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 803a7f6:	687b      	ldr	r3, [r7, #4]
 803a7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a7fc:	b2db      	uxtb	r3, r3
 803a7fe:	2b02      	cmp	r3, #2
 803a800:	d002      	beq.n	803a808 <USBD_StdEPReq+0xac>
 803a802:	2b03      	cmp	r3, #3
 803a804:	d016      	beq.n	803a834 <USBD_StdEPReq+0xd8>
 803a806:	e02c      	b.n	803a862 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a808:	7bbb      	ldrb	r3, [r7, #14]
 803a80a:	2b00      	cmp	r3, #0
 803a80c:	d00d      	beq.n	803a82a <USBD_StdEPReq+0xce>
 803a80e:	7bbb      	ldrb	r3, [r7, #14]
 803a810:	2b80      	cmp	r3, #128	; 0x80
 803a812:	d00a      	beq.n	803a82a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803a814:	7bbb      	ldrb	r3, [r7, #14]
 803a816:	4619      	mov	r1, r3
 803a818:	6878      	ldr	r0, [r7, #4]
 803a81a:	f001 f973 	bl	803bb04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803a81e:	2180      	movs	r1, #128	; 0x80
 803a820:	6878      	ldr	r0, [r7, #4]
 803a822:	f001 f96f 	bl	803bb04 <USBD_LL_StallEP>
 803a826:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803a828:	e020      	b.n	803a86c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 803a82a:	6839      	ldr	r1, [r7, #0]
 803a82c:	6878      	ldr	r0, [r7, #4]
 803a82e:	f000 fc7a 	bl	803b126 <USBD_CtlError>
              break;
 803a832:	e01b      	b.n	803a86c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803a834:	683b      	ldr	r3, [r7, #0]
 803a836:	885b      	ldrh	r3, [r3, #2]
 803a838:	2b00      	cmp	r3, #0
 803a83a:	d10e      	bne.n	803a85a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 803a83c:	7bbb      	ldrb	r3, [r7, #14]
 803a83e:	2b00      	cmp	r3, #0
 803a840:	d00b      	beq.n	803a85a <USBD_StdEPReq+0xfe>
 803a842:	7bbb      	ldrb	r3, [r7, #14]
 803a844:	2b80      	cmp	r3, #128	; 0x80
 803a846:	d008      	beq.n	803a85a <USBD_StdEPReq+0xfe>
 803a848:	683b      	ldr	r3, [r7, #0]
 803a84a:	88db      	ldrh	r3, [r3, #6]
 803a84c:	2b00      	cmp	r3, #0
 803a84e:	d104      	bne.n	803a85a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 803a850:	7bbb      	ldrb	r3, [r7, #14]
 803a852:	4619      	mov	r1, r3
 803a854:	6878      	ldr	r0, [r7, #4]
 803a856:	f001 f955 	bl	803bb04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 803a85a:	6878      	ldr	r0, [r7, #4]
 803a85c:	f000 fd2e 	bl	803b2bc <USBD_CtlSendStatus>

              break;
 803a860:	e004      	b.n	803a86c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 803a862:	6839      	ldr	r1, [r7, #0]
 803a864:	6878      	ldr	r0, [r7, #4]
 803a866:	f000 fc5e 	bl	803b126 <USBD_CtlError>
              break;
 803a86a:	bf00      	nop
          }
          break;
 803a86c:	e107      	b.n	803aa7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 803a86e:	687b      	ldr	r3, [r7, #4]
 803a870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a874:	b2db      	uxtb	r3, r3
 803a876:	2b02      	cmp	r3, #2
 803a878:	d002      	beq.n	803a880 <USBD_StdEPReq+0x124>
 803a87a:	2b03      	cmp	r3, #3
 803a87c:	d016      	beq.n	803a8ac <USBD_StdEPReq+0x150>
 803a87e:	e04b      	b.n	803a918 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a880:	7bbb      	ldrb	r3, [r7, #14]
 803a882:	2b00      	cmp	r3, #0
 803a884:	d00d      	beq.n	803a8a2 <USBD_StdEPReq+0x146>
 803a886:	7bbb      	ldrb	r3, [r7, #14]
 803a888:	2b80      	cmp	r3, #128	; 0x80
 803a88a:	d00a      	beq.n	803a8a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803a88c:	7bbb      	ldrb	r3, [r7, #14]
 803a88e:	4619      	mov	r1, r3
 803a890:	6878      	ldr	r0, [r7, #4]
 803a892:	f001 f937 	bl	803bb04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803a896:	2180      	movs	r1, #128	; 0x80
 803a898:	6878      	ldr	r0, [r7, #4]
 803a89a:	f001 f933 	bl	803bb04 <USBD_LL_StallEP>
 803a89e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803a8a0:	e040      	b.n	803a924 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 803a8a2:	6839      	ldr	r1, [r7, #0]
 803a8a4:	6878      	ldr	r0, [r7, #4]
 803a8a6:	f000 fc3e 	bl	803b126 <USBD_CtlError>
              break;
 803a8aa:	e03b      	b.n	803a924 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803a8ac:	683b      	ldr	r3, [r7, #0]
 803a8ae:	885b      	ldrh	r3, [r3, #2]
 803a8b0:	2b00      	cmp	r3, #0
 803a8b2:	d136      	bne.n	803a922 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 803a8b4:	7bbb      	ldrb	r3, [r7, #14]
 803a8b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803a8ba:	2b00      	cmp	r3, #0
 803a8bc:	d004      	beq.n	803a8c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 803a8be:	7bbb      	ldrb	r3, [r7, #14]
 803a8c0:	4619      	mov	r1, r3
 803a8c2:	6878      	ldr	r0, [r7, #4]
 803a8c4:	f001 f93d 	bl	803bb42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 803a8c8:	6878      	ldr	r0, [r7, #4]
 803a8ca:	f000 fcf7 	bl	803b2bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 803a8ce:	7bbb      	ldrb	r3, [r7, #14]
 803a8d0:	4619      	mov	r1, r3
 803a8d2:	6878      	ldr	r0, [r7, #4]
 803a8d4:	f7ff fde2 	bl	803a49c <USBD_CoreFindEP>
 803a8d8:	4603      	mov	r3, r0
 803a8da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a8dc:	7b7b      	ldrb	r3, [r7, #13]
 803a8de:	2bff      	cmp	r3, #255	; 0xff
 803a8e0:	d01f      	beq.n	803a922 <USBD_StdEPReq+0x1c6>
 803a8e2:	7b7b      	ldrb	r3, [r7, #13]
 803a8e4:	2b00      	cmp	r3, #0
 803a8e6:	d11c      	bne.n	803a922 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 803a8e8:	7b7a      	ldrb	r2, [r7, #13]
 803a8ea:	687b      	ldr	r3, [r7, #4]
 803a8ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 803a8f0:	7b7a      	ldrb	r2, [r7, #13]
 803a8f2:	687b      	ldr	r3, [r7, #4]
 803a8f4:	32ae      	adds	r2, #174	; 0xae
 803a8f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a8fa:	689b      	ldr	r3, [r3, #8]
 803a8fc:	2b00      	cmp	r3, #0
 803a8fe:	d010      	beq.n	803a922 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803a900:	7b7a      	ldrb	r2, [r7, #13]
 803a902:	687b      	ldr	r3, [r7, #4]
 803a904:	32ae      	adds	r2, #174	; 0xae
 803a906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a90a:	689b      	ldr	r3, [r3, #8]
 803a90c:	6839      	ldr	r1, [r7, #0]
 803a90e:	6878      	ldr	r0, [r7, #4]
 803a910:	4798      	blx	r3
 803a912:	4603      	mov	r3, r0
 803a914:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 803a916:	e004      	b.n	803a922 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 803a918:	6839      	ldr	r1, [r7, #0]
 803a91a:	6878      	ldr	r0, [r7, #4]
 803a91c:	f000 fc03 	bl	803b126 <USBD_CtlError>
              break;
 803a920:	e000      	b.n	803a924 <USBD_StdEPReq+0x1c8>
              break;
 803a922:	bf00      	nop
          }
          break;
 803a924:	e0ab      	b.n	803aa7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 803a926:	687b      	ldr	r3, [r7, #4]
 803a928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a92c:	b2db      	uxtb	r3, r3
 803a92e:	2b02      	cmp	r3, #2
 803a930:	d002      	beq.n	803a938 <USBD_StdEPReq+0x1dc>
 803a932:	2b03      	cmp	r3, #3
 803a934:	d032      	beq.n	803a99c <USBD_StdEPReq+0x240>
 803a936:	e097      	b.n	803aa68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a938:	7bbb      	ldrb	r3, [r7, #14]
 803a93a:	2b00      	cmp	r3, #0
 803a93c:	d007      	beq.n	803a94e <USBD_StdEPReq+0x1f2>
 803a93e:	7bbb      	ldrb	r3, [r7, #14]
 803a940:	2b80      	cmp	r3, #128	; 0x80
 803a942:	d004      	beq.n	803a94e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 803a944:	6839      	ldr	r1, [r7, #0]
 803a946:	6878      	ldr	r0, [r7, #4]
 803a948:	f000 fbed 	bl	803b126 <USBD_CtlError>
                break;
 803a94c:	e091      	b.n	803aa72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a94e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a952:	2b00      	cmp	r3, #0
 803a954:	da0b      	bge.n	803a96e <USBD_StdEPReq+0x212>
 803a956:	7bbb      	ldrb	r3, [r7, #14]
 803a958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803a95c:	4613      	mov	r3, r2
 803a95e:	009b      	lsls	r3, r3, #2
 803a960:	4413      	add	r3, r2
 803a962:	009b      	lsls	r3, r3, #2
 803a964:	3310      	adds	r3, #16
 803a966:	687a      	ldr	r2, [r7, #4]
 803a968:	4413      	add	r3, r2
 803a96a:	3304      	adds	r3, #4
 803a96c:	e00b      	b.n	803a986 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803a96e:	7bbb      	ldrb	r3, [r7, #14]
 803a970:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a974:	4613      	mov	r3, r2
 803a976:	009b      	lsls	r3, r3, #2
 803a978:	4413      	add	r3, r2
 803a97a:	009b      	lsls	r3, r3, #2
 803a97c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803a980:	687a      	ldr	r2, [r7, #4]
 803a982:	4413      	add	r3, r2
 803a984:	3304      	adds	r3, #4
 803a986:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 803a988:	68bb      	ldr	r3, [r7, #8]
 803a98a:	2200      	movs	r2, #0
 803a98c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803a98e:	68bb      	ldr	r3, [r7, #8]
 803a990:	2202      	movs	r2, #2
 803a992:	4619      	mov	r1, r3
 803a994:	6878      	ldr	r0, [r7, #4]
 803a996:	f000 fc37 	bl	803b208 <USBD_CtlSendData>
              break;
 803a99a:	e06a      	b.n	803aa72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 803a99c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a9a0:	2b00      	cmp	r3, #0
 803a9a2:	da11      	bge.n	803a9c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 803a9a4:	7bbb      	ldrb	r3, [r7, #14]
 803a9a6:	f003 020f 	and.w	r2, r3, #15
 803a9aa:	6879      	ldr	r1, [r7, #4]
 803a9ac:	4613      	mov	r3, r2
 803a9ae:	009b      	lsls	r3, r3, #2
 803a9b0:	4413      	add	r3, r2
 803a9b2:	009b      	lsls	r3, r3, #2
 803a9b4:	440b      	add	r3, r1
 803a9b6:	3324      	adds	r3, #36	; 0x24
 803a9b8:	881b      	ldrh	r3, [r3, #0]
 803a9ba:	2b00      	cmp	r3, #0
 803a9bc:	d117      	bne.n	803a9ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803a9be:	6839      	ldr	r1, [r7, #0]
 803a9c0:	6878      	ldr	r0, [r7, #4]
 803a9c2:	f000 fbb0 	bl	803b126 <USBD_CtlError>
                  break;
 803a9c6:	e054      	b.n	803aa72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 803a9c8:	7bbb      	ldrb	r3, [r7, #14]
 803a9ca:	f003 020f 	and.w	r2, r3, #15
 803a9ce:	6879      	ldr	r1, [r7, #4]
 803a9d0:	4613      	mov	r3, r2
 803a9d2:	009b      	lsls	r3, r3, #2
 803a9d4:	4413      	add	r3, r2
 803a9d6:	009b      	lsls	r3, r3, #2
 803a9d8:	440b      	add	r3, r1
 803a9da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803a9de:	881b      	ldrh	r3, [r3, #0]
 803a9e0:	2b00      	cmp	r3, #0
 803a9e2:	d104      	bne.n	803a9ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803a9e4:	6839      	ldr	r1, [r7, #0]
 803a9e6:	6878      	ldr	r0, [r7, #4]
 803a9e8:	f000 fb9d 	bl	803b126 <USBD_CtlError>
                  break;
 803a9ec:	e041      	b.n	803aa72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a9ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a9f2:	2b00      	cmp	r3, #0
 803a9f4:	da0b      	bge.n	803aa0e <USBD_StdEPReq+0x2b2>
 803a9f6:	7bbb      	ldrb	r3, [r7, #14]
 803a9f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803a9fc:	4613      	mov	r3, r2
 803a9fe:	009b      	lsls	r3, r3, #2
 803aa00:	4413      	add	r3, r2
 803aa02:	009b      	lsls	r3, r3, #2
 803aa04:	3310      	adds	r3, #16
 803aa06:	687a      	ldr	r2, [r7, #4]
 803aa08:	4413      	add	r3, r2
 803aa0a:	3304      	adds	r3, #4
 803aa0c:	e00b      	b.n	803aa26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803aa0e:	7bbb      	ldrb	r3, [r7, #14]
 803aa10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803aa14:	4613      	mov	r3, r2
 803aa16:	009b      	lsls	r3, r3, #2
 803aa18:	4413      	add	r3, r2
 803aa1a:	009b      	lsls	r3, r3, #2
 803aa1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803aa20:	687a      	ldr	r2, [r7, #4]
 803aa22:	4413      	add	r3, r2
 803aa24:	3304      	adds	r3, #4
 803aa26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 803aa28:	7bbb      	ldrb	r3, [r7, #14]
 803aa2a:	2b00      	cmp	r3, #0
 803aa2c:	d002      	beq.n	803aa34 <USBD_StdEPReq+0x2d8>
 803aa2e:	7bbb      	ldrb	r3, [r7, #14]
 803aa30:	2b80      	cmp	r3, #128	; 0x80
 803aa32:	d103      	bne.n	803aa3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 803aa34:	68bb      	ldr	r3, [r7, #8]
 803aa36:	2200      	movs	r2, #0
 803aa38:	601a      	str	r2, [r3, #0]
 803aa3a:	e00e      	b.n	803aa5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 803aa3c:	7bbb      	ldrb	r3, [r7, #14]
 803aa3e:	4619      	mov	r1, r3
 803aa40:	6878      	ldr	r0, [r7, #4]
 803aa42:	f001 f89d 	bl	803bb80 <USBD_LL_IsStallEP>
 803aa46:	4603      	mov	r3, r0
 803aa48:	2b00      	cmp	r3, #0
 803aa4a:	d003      	beq.n	803aa54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 803aa4c:	68bb      	ldr	r3, [r7, #8]
 803aa4e:	2201      	movs	r2, #1
 803aa50:	601a      	str	r2, [r3, #0]
 803aa52:	e002      	b.n	803aa5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 803aa54:	68bb      	ldr	r3, [r7, #8]
 803aa56:	2200      	movs	r2, #0
 803aa58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803aa5a:	68bb      	ldr	r3, [r7, #8]
 803aa5c:	2202      	movs	r2, #2
 803aa5e:	4619      	mov	r1, r3
 803aa60:	6878      	ldr	r0, [r7, #4]
 803aa62:	f000 fbd1 	bl	803b208 <USBD_CtlSendData>
              break;
 803aa66:	e004      	b.n	803aa72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 803aa68:	6839      	ldr	r1, [r7, #0]
 803aa6a:	6878      	ldr	r0, [r7, #4]
 803aa6c:	f000 fb5b 	bl	803b126 <USBD_CtlError>
              break;
 803aa70:	bf00      	nop
          }
          break;
 803aa72:	e004      	b.n	803aa7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 803aa74:	6839      	ldr	r1, [r7, #0]
 803aa76:	6878      	ldr	r0, [r7, #4]
 803aa78:	f000 fb55 	bl	803b126 <USBD_CtlError>
          break;
 803aa7c:	bf00      	nop
      }
      break;
 803aa7e:	e005      	b.n	803aa8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 803aa80:	6839      	ldr	r1, [r7, #0]
 803aa82:	6878      	ldr	r0, [r7, #4]
 803aa84:	f000 fb4f 	bl	803b126 <USBD_CtlError>
      break;
 803aa88:	e000      	b.n	803aa8c <USBD_StdEPReq+0x330>
      break;
 803aa8a:	bf00      	nop
  }

  return ret;
 803aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 803aa8e:	4618      	mov	r0, r3
 803aa90:	3710      	adds	r7, #16
 803aa92:	46bd      	mov	sp, r7
 803aa94:	bd80      	pop	{r7, pc}
	...

0803aa98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803aa98:	b580      	push	{r7, lr}
 803aa9a:	b084      	sub	sp, #16
 803aa9c:	af00      	add	r7, sp, #0
 803aa9e:	6078      	str	r0, [r7, #4]
 803aaa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803aaa2:	2300      	movs	r3, #0
 803aaa4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 803aaa6:	2300      	movs	r3, #0
 803aaa8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 803aaaa:	2300      	movs	r3, #0
 803aaac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 803aaae:	683b      	ldr	r3, [r7, #0]
 803aab0:	885b      	ldrh	r3, [r3, #2]
 803aab2:	0a1b      	lsrs	r3, r3, #8
 803aab4:	b29b      	uxth	r3, r3
 803aab6:	3b01      	subs	r3, #1
 803aab8:	2b06      	cmp	r3, #6
 803aaba:	f200 8128 	bhi.w	803ad0e <USBD_GetDescriptor+0x276>
 803aabe:	a201      	add	r2, pc, #4	; (adr r2, 803aac4 <USBD_GetDescriptor+0x2c>)
 803aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803aac4:	0803aae1 	.word	0x0803aae1
 803aac8:	0803aaf9 	.word	0x0803aaf9
 803aacc:	0803ab39 	.word	0x0803ab39
 803aad0:	0803ad0f 	.word	0x0803ad0f
 803aad4:	0803ad0f 	.word	0x0803ad0f
 803aad8:	0803acaf 	.word	0x0803acaf
 803aadc:	0803acdb 	.word	0x0803acdb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 803aae0:	687b      	ldr	r3, [r7, #4]
 803aae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aae6:	681b      	ldr	r3, [r3, #0]
 803aae8:	687a      	ldr	r2, [r7, #4]
 803aaea:	7c12      	ldrb	r2, [r2, #16]
 803aaec:	f107 0108 	add.w	r1, r7, #8
 803aaf0:	4610      	mov	r0, r2
 803aaf2:	4798      	blx	r3
 803aaf4:	60f8      	str	r0, [r7, #12]
      break;
 803aaf6:	e112      	b.n	803ad1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803aaf8:	687b      	ldr	r3, [r7, #4]
 803aafa:	7c1b      	ldrb	r3, [r3, #16]
 803aafc:	2b00      	cmp	r3, #0
 803aafe:	d10d      	bne.n	803ab1c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 803ab00:	687b      	ldr	r3, [r7, #4]
 803ab02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803ab06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803ab08:	f107 0208 	add.w	r2, r7, #8
 803ab0c:	4610      	mov	r0, r2
 803ab0e:	4798      	blx	r3
 803ab10:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803ab12:	68fb      	ldr	r3, [r7, #12]
 803ab14:	3301      	adds	r3, #1
 803ab16:	2202      	movs	r2, #2
 803ab18:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 803ab1a:	e100      	b.n	803ad1e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 803ab1c:	687b      	ldr	r3, [r7, #4]
 803ab1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803ab22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803ab24:	f107 0208 	add.w	r2, r7, #8
 803ab28:	4610      	mov	r0, r2
 803ab2a:	4798      	blx	r3
 803ab2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803ab2e:	68fb      	ldr	r3, [r7, #12]
 803ab30:	3301      	adds	r3, #1
 803ab32:	2202      	movs	r2, #2
 803ab34:	701a      	strb	r2, [r3, #0]
      break;
 803ab36:	e0f2      	b.n	803ad1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 803ab38:	683b      	ldr	r3, [r7, #0]
 803ab3a:	885b      	ldrh	r3, [r3, #2]
 803ab3c:	b2db      	uxtb	r3, r3
 803ab3e:	2b05      	cmp	r3, #5
 803ab40:	f200 80ac 	bhi.w	803ac9c <USBD_GetDescriptor+0x204>
 803ab44:	a201      	add	r2, pc, #4	; (adr r2, 803ab4c <USBD_GetDescriptor+0xb4>)
 803ab46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803ab4a:	bf00      	nop
 803ab4c:	0803ab65 	.word	0x0803ab65
 803ab50:	0803ab99 	.word	0x0803ab99
 803ab54:	0803abcd 	.word	0x0803abcd
 803ab58:	0803ac01 	.word	0x0803ac01
 803ab5c:	0803ac35 	.word	0x0803ac35
 803ab60:	0803ac69 	.word	0x0803ac69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 803ab64:	687b      	ldr	r3, [r7, #4]
 803ab66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab6a:	685b      	ldr	r3, [r3, #4]
 803ab6c:	2b00      	cmp	r3, #0
 803ab6e:	d00b      	beq.n	803ab88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 803ab70:	687b      	ldr	r3, [r7, #4]
 803ab72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab76:	685b      	ldr	r3, [r3, #4]
 803ab78:	687a      	ldr	r2, [r7, #4]
 803ab7a:	7c12      	ldrb	r2, [r2, #16]
 803ab7c:	f107 0108 	add.w	r1, r7, #8
 803ab80:	4610      	mov	r0, r2
 803ab82:	4798      	blx	r3
 803ab84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ab86:	e091      	b.n	803acac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ab88:	6839      	ldr	r1, [r7, #0]
 803ab8a:	6878      	ldr	r0, [r7, #4]
 803ab8c:	f000 facb 	bl	803b126 <USBD_CtlError>
            err++;
 803ab90:	7afb      	ldrb	r3, [r7, #11]
 803ab92:	3301      	adds	r3, #1
 803ab94:	72fb      	strb	r3, [r7, #11]
          break;
 803ab96:	e089      	b.n	803acac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 803ab98:	687b      	ldr	r3, [r7, #4]
 803ab9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab9e:	689b      	ldr	r3, [r3, #8]
 803aba0:	2b00      	cmp	r3, #0
 803aba2:	d00b      	beq.n	803abbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 803aba4:	687b      	ldr	r3, [r7, #4]
 803aba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803abaa:	689b      	ldr	r3, [r3, #8]
 803abac:	687a      	ldr	r2, [r7, #4]
 803abae:	7c12      	ldrb	r2, [r2, #16]
 803abb0:	f107 0108 	add.w	r1, r7, #8
 803abb4:	4610      	mov	r0, r2
 803abb6:	4798      	blx	r3
 803abb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803abba:	e077      	b.n	803acac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803abbc:	6839      	ldr	r1, [r7, #0]
 803abbe:	6878      	ldr	r0, [r7, #4]
 803abc0:	f000 fab1 	bl	803b126 <USBD_CtlError>
            err++;
 803abc4:	7afb      	ldrb	r3, [r7, #11]
 803abc6:	3301      	adds	r3, #1
 803abc8:	72fb      	strb	r3, [r7, #11]
          break;
 803abca:	e06f      	b.n	803acac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 803abcc:	687b      	ldr	r3, [r7, #4]
 803abce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803abd2:	68db      	ldr	r3, [r3, #12]
 803abd4:	2b00      	cmp	r3, #0
 803abd6:	d00b      	beq.n	803abf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 803abd8:	687b      	ldr	r3, [r7, #4]
 803abda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803abde:	68db      	ldr	r3, [r3, #12]
 803abe0:	687a      	ldr	r2, [r7, #4]
 803abe2:	7c12      	ldrb	r2, [r2, #16]
 803abe4:	f107 0108 	add.w	r1, r7, #8
 803abe8:	4610      	mov	r0, r2
 803abea:	4798      	blx	r3
 803abec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803abee:	e05d      	b.n	803acac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803abf0:	6839      	ldr	r1, [r7, #0]
 803abf2:	6878      	ldr	r0, [r7, #4]
 803abf4:	f000 fa97 	bl	803b126 <USBD_CtlError>
            err++;
 803abf8:	7afb      	ldrb	r3, [r7, #11]
 803abfa:	3301      	adds	r3, #1
 803abfc:	72fb      	strb	r3, [r7, #11]
          break;
 803abfe:	e055      	b.n	803acac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 803ac00:	687b      	ldr	r3, [r7, #4]
 803ac02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ac06:	691b      	ldr	r3, [r3, #16]
 803ac08:	2b00      	cmp	r3, #0
 803ac0a:	d00b      	beq.n	803ac24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 803ac0c:	687b      	ldr	r3, [r7, #4]
 803ac0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ac12:	691b      	ldr	r3, [r3, #16]
 803ac14:	687a      	ldr	r2, [r7, #4]
 803ac16:	7c12      	ldrb	r2, [r2, #16]
 803ac18:	f107 0108 	add.w	r1, r7, #8
 803ac1c:	4610      	mov	r0, r2
 803ac1e:	4798      	blx	r3
 803ac20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ac22:	e043      	b.n	803acac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ac24:	6839      	ldr	r1, [r7, #0]
 803ac26:	6878      	ldr	r0, [r7, #4]
 803ac28:	f000 fa7d 	bl	803b126 <USBD_CtlError>
            err++;
 803ac2c:	7afb      	ldrb	r3, [r7, #11]
 803ac2e:	3301      	adds	r3, #1
 803ac30:	72fb      	strb	r3, [r7, #11]
          break;
 803ac32:	e03b      	b.n	803acac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 803ac34:	687b      	ldr	r3, [r7, #4]
 803ac36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ac3a:	695b      	ldr	r3, [r3, #20]
 803ac3c:	2b00      	cmp	r3, #0
 803ac3e:	d00b      	beq.n	803ac58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 803ac40:	687b      	ldr	r3, [r7, #4]
 803ac42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ac46:	695b      	ldr	r3, [r3, #20]
 803ac48:	687a      	ldr	r2, [r7, #4]
 803ac4a:	7c12      	ldrb	r2, [r2, #16]
 803ac4c:	f107 0108 	add.w	r1, r7, #8
 803ac50:	4610      	mov	r0, r2
 803ac52:	4798      	blx	r3
 803ac54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ac56:	e029      	b.n	803acac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ac58:	6839      	ldr	r1, [r7, #0]
 803ac5a:	6878      	ldr	r0, [r7, #4]
 803ac5c:	f000 fa63 	bl	803b126 <USBD_CtlError>
            err++;
 803ac60:	7afb      	ldrb	r3, [r7, #11]
 803ac62:	3301      	adds	r3, #1
 803ac64:	72fb      	strb	r3, [r7, #11]
          break;
 803ac66:	e021      	b.n	803acac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 803ac68:	687b      	ldr	r3, [r7, #4]
 803ac6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ac6e:	699b      	ldr	r3, [r3, #24]
 803ac70:	2b00      	cmp	r3, #0
 803ac72:	d00b      	beq.n	803ac8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 803ac74:	687b      	ldr	r3, [r7, #4]
 803ac76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ac7a:	699b      	ldr	r3, [r3, #24]
 803ac7c:	687a      	ldr	r2, [r7, #4]
 803ac7e:	7c12      	ldrb	r2, [r2, #16]
 803ac80:	f107 0108 	add.w	r1, r7, #8
 803ac84:	4610      	mov	r0, r2
 803ac86:	4798      	blx	r3
 803ac88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ac8a:	e00f      	b.n	803acac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ac8c:	6839      	ldr	r1, [r7, #0]
 803ac8e:	6878      	ldr	r0, [r7, #4]
 803ac90:	f000 fa49 	bl	803b126 <USBD_CtlError>
            err++;
 803ac94:	7afb      	ldrb	r3, [r7, #11]
 803ac96:	3301      	adds	r3, #1
 803ac98:	72fb      	strb	r3, [r7, #11]
          break;
 803ac9a:	e007      	b.n	803acac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 803ac9c:	6839      	ldr	r1, [r7, #0]
 803ac9e:	6878      	ldr	r0, [r7, #4]
 803aca0:	f000 fa41 	bl	803b126 <USBD_CtlError>
          err++;
 803aca4:	7afb      	ldrb	r3, [r7, #11]
 803aca6:	3301      	adds	r3, #1
 803aca8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 803acaa:	bf00      	nop
      }
      break;
 803acac:	e037      	b.n	803ad1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803acae:	687b      	ldr	r3, [r7, #4]
 803acb0:	7c1b      	ldrb	r3, [r3, #16]
 803acb2:	2b00      	cmp	r3, #0
 803acb4:	d109      	bne.n	803acca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 803acb6:	687b      	ldr	r3, [r7, #4]
 803acb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803acbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803acbe:	f107 0208 	add.w	r2, r7, #8
 803acc2:	4610      	mov	r0, r2
 803acc4:	4798      	blx	r3
 803acc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803acc8:	e029      	b.n	803ad1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803acca:	6839      	ldr	r1, [r7, #0]
 803accc:	6878      	ldr	r0, [r7, #4]
 803acce:	f000 fa2a 	bl	803b126 <USBD_CtlError>
        err++;
 803acd2:	7afb      	ldrb	r3, [r7, #11]
 803acd4:	3301      	adds	r3, #1
 803acd6:	72fb      	strb	r3, [r7, #11]
      break;
 803acd8:	e021      	b.n	803ad1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803acda:	687b      	ldr	r3, [r7, #4]
 803acdc:	7c1b      	ldrb	r3, [r3, #16]
 803acde:	2b00      	cmp	r3, #0
 803ace0:	d10d      	bne.n	803acfe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 803ace2:	687b      	ldr	r3, [r7, #4]
 803ace4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803ace8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803acea:	f107 0208 	add.w	r2, r7, #8
 803acee:	4610      	mov	r0, r2
 803acf0:	4798      	blx	r3
 803acf2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 803acf4:	68fb      	ldr	r3, [r7, #12]
 803acf6:	3301      	adds	r3, #1
 803acf8:	2207      	movs	r2, #7
 803acfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803acfc:	e00f      	b.n	803ad1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803acfe:	6839      	ldr	r1, [r7, #0]
 803ad00:	6878      	ldr	r0, [r7, #4]
 803ad02:	f000 fa10 	bl	803b126 <USBD_CtlError>
        err++;
 803ad06:	7afb      	ldrb	r3, [r7, #11]
 803ad08:	3301      	adds	r3, #1
 803ad0a:	72fb      	strb	r3, [r7, #11]
      break;
 803ad0c:	e007      	b.n	803ad1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 803ad0e:	6839      	ldr	r1, [r7, #0]
 803ad10:	6878      	ldr	r0, [r7, #4]
 803ad12:	f000 fa08 	bl	803b126 <USBD_CtlError>
      err++;
 803ad16:	7afb      	ldrb	r3, [r7, #11]
 803ad18:	3301      	adds	r3, #1
 803ad1a:	72fb      	strb	r3, [r7, #11]
      break;
 803ad1c:	bf00      	nop
  }

  if (err != 0U)
 803ad1e:	7afb      	ldrb	r3, [r7, #11]
 803ad20:	2b00      	cmp	r3, #0
 803ad22:	d11e      	bne.n	803ad62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 803ad24:	683b      	ldr	r3, [r7, #0]
 803ad26:	88db      	ldrh	r3, [r3, #6]
 803ad28:	2b00      	cmp	r3, #0
 803ad2a:	d016      	beq.n	803ad5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 803ad2c:	893b      	ldrh	r3, [r7, #8]
 803ad2e:	2b00      	cmp	r3, #0
 803ad30:	d00e      	beq.n	803ad50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 803ad32:	683b      	ldr	r3, [r7, #0]
 803ad34:	88da      	ldrh	r2, [r3, #6]
 803ad36:	893b      	ldrh	r3, [r7, #8]
 803ad38:	4293      	cmp	r3, r2
 803ad3a:	bf28      	it	cs
 803ad3c:	4613      	movcs	r3, r2
 803ad3e:	b29b      	uxth	r3, r3
 803ad40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 803ad42:	893b      	ldrh	r3, [r7, #8]
 803ad44:	461a      	mov	r2, r3
 803ad46:	68f9      	ldr	r1, [r7, #12]
 803ad48:	6878      	ldr	r0, [r7, #4]
 803ad4a:	f000 fa5d 	bl	803b208 <USBD_CtlSendData>
 803ad4e:	e009      	b.n	803ad64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 803ad50:	6839      	ldr	r1, [r7, #0]
 803ad52:	6878      	ldr	r0, [r7, #4]
 803ad54:	f000 f9e7 	bl	803b126 <USBD_CtlError>
 803ad58:	e004      	b.n	803ad64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 803ad5a:	6878      	ldr	r0, [r7, #4]
 803ad5c:	f000 faae 	bl	803b2bc <USBD_CtlSendStatus>
 803ad60:	e000      	b.n	803ad64 <USBD_GetDescriptor+0x2cc>
    return;
 803ad62:	bf00      	nop
  }
}
 803ad64:	3710      	adds	r7, #16
 803ad66:	46bd      	mov	sp, r7
 803ad68:	bd80      	pop	{r7, pc}
 803ad6a:	bf00      	nop

0803ad6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803ad6c:	b580      	push	{r7, lr}
 803ad6e:	b084      	sub	sp, #16
 803ad70:	af00      	add	r7, sp, #0
 803ad72:	6078      	str	r0, [r7, #4]
 803ad74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803ad76:	683b      	ldr	r3, [r7, #0]
 803ad78:	889b      	ldrh	r3, [r3, #4]
 803ad7a:	2b00      	cmp	r3, #0
 803ad7c:	d131      	bne.n	803ade2 <USBD_SetAddress+0x76>
 803ad7e:	683b      	ldr	r3, [r7, #0]
 803ad80:	88db      	ldrh	r3, [r3, #6]
 803ad82:	2b00      	cmp	r3, #0
 803ad84:	d12d      	bne.n	803ade2 <USBD_SetAddress+0x76>
 803ad86:	683b      	ldr	r3, [r7, #0]
 803ad88:	885b      	ldrh	r3, [r3, #2]
 803ad8a:	2b7f      	cmp	r3, #127	; 0x7f
 803ad8c:	d829      	bhi.n	803ade2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 803ad8e:	683b      	ldr	r3, [r7, #0]
 803ad90:	885b      	ldrh	r3, [r3, #2]
 803ad92:	b2db      	uxtb	r3, r3
 803ad94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803ad98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ad9a:	687b      	ldr	r3, [r7, #4]
 803ad9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ada0:	b2db      	uxtb	r3, r3
 803ada2:	2b03      	cmp	r3, #3
 803ada4:	d104      	bne.n	803adb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 803ada6:	6839      	ldr	r1, [r7, #0]
 803ada8:	6878      	ldr	r0, [r7, #4]
 803adaa:	f000 f9bc 	bl	803b126 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803adae:	e01d      	b.n	803adec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 803adb0:	687b      	ldr	r3, [r7, #4]
 803adb2:	7bfa      	ldrb	r2, [r7, #15]
 803adb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803adb8:	7bfb      	ldrb	r3, [r7, #15]
 803adba:	4619      	mov	r1, r3
 803adbc:	6878      	ldr	r0, [r7, #4]
 803adbe:	f000 ff0b 	bl	803bbd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 803adc2:	6878      	ldr	r0, [r7, #4]
 803adc4:	f000 fa7a 	bl	803b2bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803adc8:	7bfb      	ldrb	r3, [r7, #15]
 803adca:	2b00      	cmp	r3, #0
 803adcc:	d004      	beq.n	803add8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803adce:	687b      	ldr	r3, [r7, #4]
 803add0:	2202      	movs	r2, #2
 803add2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803add6:	e009      	b.n	803adec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803add8:	687b      	ldr	r3, [r7, #4]
 803adda:	2201      	movs	r2, #1
 803addc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ade0:	e004      	b.n	803adec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 803ade2:	6839      	ldr	r1, [r7, #0]
 803ade4:	6878      	ldr	r0, [r7, #4]
 803ade6:	f000 f99e 	bl	803b126 <USBD_CtlError>
  }
}
 803adea:	bf00      	nop
 803adec:	bf00      	nop
 803adee:	3710      	adds	r7, #16
 803adf0:	46bd      	mov	sp, r7
 803adf2:	bd80      	pop	{r7, pc}

0803adf4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803adf4:	b580      	push	{r7, lr}
 803adf6:	b084      	sub	sp, #16
 803adf8:	af00      	add	r7, sp, #0
 803adfa:	6078      	str	r0, [r7, #4]
 803adfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803adfe:	2300      	movs	r3, #0
 803ae00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 803ae02:	683b      	ldr	r3, [r7, #0]
 803ae04:	885b      	ldrh	r3, [r3, #2]
 803ae06:	b2da      	uxtb	r2, r3
 803ae08:	4b4e      	ldr	r3, [pc, #312]	; (803af44 <USBD_SetConfig+0x150>)
 803ae0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 803ae0c:	4b4d      	ldr	r3, [pc, #308]	; (803af44 <USBD_SetConfig+0x150>)
 803ae0e:	781b      	ldrb	r3, [r3, #0]
 803ae10:	2b01      	cmp	r3, #1
 803ae12:	d905      	bls.n	803ae20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 803ae14:	6839      	ldr	r1, [r7, #0]
 803ae16:	6878      	ldr	r0, [r7, #4]
 803ae18:	f000 f985 	bl	803b126 <USBD_CtlError>
    return USBD_FAIL;
 803ae1c:	2303      	movs	r3, #3
 803ae1e:	e08c      	b.n	803af3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 803ae20:	687b      	ldr	r3, [r7, #4]
 803ae22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ae26:	b2db      	uxtb	r3, r3
 803ae28:	2b02      	cmp	r3, #2
 803ae2a:	d002      	beq.n	803ae32 <USBD_SetConfig+0x3e>
 803ae2c:	2b03      	cmp	r3, #3
 803ae2e:	d029      	beq.n	803ae84 <USBD_SetConfig+0x90>
 803ae30:	e075      	b.n	803af1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 803ae32:	4b44      	ldr	r3, [pc, #272]	; (803af44 <USBD_SetConfig+0x150>)
 803ae34:	781b      	ldrb	r3, [r3, #0]
 803ae36:	2b00      	cmp	r3, #0
 803ae38:	d020      	beq.n	803ae7c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803ae3a:	4b42      	ldr	r3, [pc, #264]	; (803af44 <USBD_SetConfig+0x150>)
 803ae3c:	781b      	ldrb	r3, [r3, #0]
 803ae3e:	461a      	mov	r2, r3
 803ae40:	687b      	ldr	r3, [r7, #4]
 803ae42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 803ae44:	4b3f      	ldr	r3, [pc, #252]	; (803af44 <USBD_SetConfig+0x150>)
 803ae46:	781b      	ldrb	r3, [r3, #0]
 803ae48:	4619      	mov	r1, r3
 803ae4a:	6878      	ldr	r0, [r7, #4]
 803ae4c:	f7fe ffe7 	bl	8039e1e <USBD_SetClassConfig>
 803ae50:	4603      	mov	r3, r0
 803ae52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 803ae54:	7bfb      	ldrb	r3, [r7, #15]
 803ae56:	2b00      	cmp	r3, #0
 803ae58:	d008      	beq.n	803ae6c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 803ae5a:	6839      	ldr	r1, [r7, #0]
 803ae5c:	6878      	ldr	r0, [r7, #4]
 803ae5e:	f000 f962 	bl	803b126 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803ae62:	687b      	ldr	r3, [r7, #4]
 803ae64:	2202      	movs	r2, #2
 803ae66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803ae6a:	e065      	b.n	803af38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803ae6c:	6878      	ldr	r0, [r7, #4]
 803ae6e:	f000 fa25 	bl	803b2bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 803ae72:	687b      	ldr	r3, [r7, #4]
 803ae74:	2203      	movs	r2, #3
 803ae76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803ae7a:	e05d      	b.n	803af38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803ae7c:	6878      	ldr	r0, [r7, #4]
 803ae7e:	f000 fa1d 	bl	803b2bc <USBD_CtlSendStatus>
      break;
 803ae82:	e059      	b.n	803af38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 803ae84:	4b2f      	ldr	r3, [pc, #188]	; (803af44 <USBD_SetConfig+0x150>)
 803ae86:	781b      	ldrb	r3, [r3, #0]
 803ae88:	2b00      	cmp	r3, #0
 803ae8a:	d112      	bne.n	803aeb2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803ae8c:	687b      	ldr	r3, [r7, #4]
 803ae8e:	2202      	movs	r2, #2
 803ae90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 803ae94:	4b2b      	ldr	r3, [pc, #172]	; (803af44 <USBD_SetConfig+0x150>)
 803ae96:	781b      	ldrb	r3, [r3, #0]
 803ae98:	461a      	mov	r2, r3
 803ae9a:	687b      	ldr	r3, [r7, #4]
 803ae9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 803ae9e:	4b29      	ldr	r3, [pc, #164]	; (803af44 <USBD_SetConfig+0x150>)
 803aea0:	781b      	ldrb	r3, [r3, #0]
 803aea2:	4619      	mov	r1, r3
 803aea4:	6878      	ldr	r0, [r7, #4]
 803aea6:	f7fe ffd6 	bl	8039e56 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 803aeaa:	6878      	ldr	r0, [r7, #4]
 803aeac:	f000 fa06 	bl	803b2bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803aeb0:	e042      	b.n	803af38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 803aeb2:	4b24      	ldr	r3, [pc, #144]	; (803af44 <USBD_SetConfig+0x150>)
 803aeb4:	781b      	ldrb	r3, [r3, #0]
 803aeb6:	461a      	mov	r2, r3
 803aeb8:	687b      	ldr	r3, [r7, #4]
 803aeba:	685b      	ldr	r3, [r3, #4]
 803aebc:	429a      	cmp	r2, r3
 803aebe:	d02a      	beq.n	803af16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803aec0:	687b      	ldr	r3, [r7, #4]
 803aec2:	685b      	ldr	r3, [r3, #4]
 803aec4:	b2db      	uxtb	r3, r3
 803aec6:	4619      	mov	r1, r3
 803aec8:	6878      	ldr	r0, [r7, #4]
 803aeca:	f7fe ffc4 	bl	8039e56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 803aece:	4b1d      	ldr	r3, [pc, #116]	; (803af44 <USBD_SetConfig+0x150>)
 803aed0:	781b      	ldrb	r3, [r3, #0]
 803aed2:	461a      	mov	r2, r3
 803aed4:	687b      	ldr	r3, [r7, #4]
 803aed6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 803aed8:	4b1a      	ldr	r3, [pc, #104]	; (803af44 <USBD_SetConfig+0x150>)
 803aeda:	781b      	ldrb	r3, [r3, #0]
 803aedc:	4619      	mov	r1, r3
 803aede:	6878      	ldr	r0, [r7, #4]
 803aee0:	f7fe ff9d 	bl	8039e1e <USBD_SetClassConfig>
 803aee4:	4603      	mov	r3, r0
 803aee6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803aee8:	7bfb      	ldrb	r3, [r7, #15]
 803aeea:	2b00      	cmp	r3, #0
 803aeec:	d00f      	beq.n	803af0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 803aeee:	6839      	ldr	r1, [r7, #0]
 803aef0:	6878      	ldr	r0, [r7, #4]
 803aef2:	f000 f918 	bl	803b126 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803aef6:	687b      	ldr	r3, [r7, #4]
 803aef8:	685b      	ldr	r3, [r3, #4]
 803aefa:	b2db      	uxtb	r3, r3
 803aefc:	4619      	mov	r1, r3
 803aefe:	6878      	ldr	r0, [r7, #4]
 803af00:	f7fe ffa9 	bl	8039e56 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803af04:	687b      	ldr	r3, [r7, #4]
 803af06:	2202      	movs	r2, #2
 803af08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803af0c:	e014      	b.n	803af38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803af0e:	6878      	ldr	r0, [r7, #4]
 803af10:	f000 f9d4 	bl	803b2bc <USBD_CtlSendStatus>
      break;
 803af14:	e010      	b.n	803af38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803af16:	6878      	ldr	r0, [r7, #4]
 803af18:	f000 f9d0 	bl	803b2bc <USBD_CtlSendStatus>
      break;
 803af1c:	e00c      	b.n	803af38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 803af1e:	6839      	ldr	r1, [r7, #0]
 803af20:	6878      	ldr	r0, [r7, #4]
 803af22:	f000 f900 	bl	803b126 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803af26:	4b07      	ldr	r3, [pc, #28]	; (803af44 <USBD_SetConfig+0x150>)
 803af28:	781b      	ldrb	r3, [r3, #0]
 803af2a:	4619      	mov	r1, r3
 803af2c:	6878      	ldr	r0, [r7, #4]
 803af2e:	f7fe ff92 	bl	8039e56 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 803af32:	2303      	movs	r3, #3
 803af34:	73fb      	strb	r3, [r7, #15]
      break;
 803af36:	bf00      	nop
  }

  return ret;
 803af38:	7bfb      	ldrb	r3, [r7, #15]
}
 803af3a:	4618      	mov	r0, r3
 803af3c:	3710      	adds	r7, #16
 803af3e:	46bd      	mov	sp, r7
 803af40:	bd80      	pop	{r7, pc}
 803af42:	bf00      	nop
 803af44:	24024bd0 	.word	0x24024bd0

0803af48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803af48:	b580      	push	{r7, lr}
 803af4a:	b082      	sub	sp, #8
 803af4c:	af00      	add	r7, sp, #0
 803af4e:	6078      	str	r0, [r7, #4]
 803af50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 803af52:	683b      	ldr	r3, [r7, #0]
 803af54:	88db      	ldrh	r3, [r3, #6]
 803af56:	2b01      	cmp	r3, #1
 803af58:	d004      	beq.n	803af64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803af5a:	6839      	ldr	r1, [r7, #0]
 803af5c:	6878      	ldr	r0, [r7, #4]
 803af5e:	f000 f8e2 	bl	803b126 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 803af62:	e023      	b.n	803afac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 803af64:	687b      	ldr	r3, [r7, #4]
 803af66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803af6a:	b2db      	uxtb	r3, r3
 803af6c:	2b02      	cmp	r3, #2
 803af6e:	dc02      	bgt.n	803af76 <USBD_GetConfig+0x2e>
 803af70:	2b00      	cmp	r3, #0
 803af72:	dc03      	bgt.n	803af7c <USBD_GetConfig+0x34>
 803af74:	e015      	b.n	803afa2 <USBD_GetConfig+0x5a>
 803af76:	2b03      	cmp	r3, #3
 803af78:	d00b      	beq.n	803af92 <USBD_GetConfig+0x4a>
 803af7a:	e012      	b.n	803afa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 803af7c:	687b      	ldr	r3, [r7, #4]
 803af7e:	2200      	movs	r2, #0
 803af80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803af82:	687b      	ldr	r3, [r7, #4]
 803af84:	3308      	adds	r3, #8
 803af86:	2201      	movs	r2, #1
 803af88:	4619      	mov	r1, r3
 803af8a:	6878      	ldr	r0, [r7, #4]
 803af8c:	f000 f93c 	bl	803b208 <USBD_CtlSendData>
        break;
 803af90:	e00c      	b.n	803afac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803af92:	687b      	ldr	r3, [r7, #4]
 803af94:	3304      	adds	r3, #4
 803af96:	2201      	movs	r2, #1
 803af98:	4619      	mov	r1, r3
 803af9a:	6878      	ldr	r0, [r7, #4]
 803af9c:	f000 f934 	bl	803b208 <USBD_CtlSendData>
        break;
 803afa0:	e004      	b.n	803afac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 803afa2:	6839      	ldr	r1, [r7, #0]
 803afa4:	6878      	ldr	r0, [r7, #4]
 803afa6:	f000 f8be 	bl	803b126 <USBD_CtlError>
        break;
 803afaa:	bf00      	nop
}
 803afac:	bf00      	nop
 803afae:	3708      	adds	r7, #8
 803afb0:	46bd      	mov	sp, r7
 803afb2:	bd80      	pop	{r7, pc}

0803afb4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803afb4:	b580      	push	{r7, lr}
 803afb6:	b082      	sub	sp, #8
 803afb8:	af00      	add	r7, sp, #0
 803afba:	6078      	str	r0, [r7, #4]
 803afbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803afbe:	687b      	ldr	r3, [r7, #4]
 803afc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803afc4:	b2db      	uxtb	r3, r3
 803afc6:	3b01      	subs	r3, #1
 803afc8:	2b02      	cmp	r3, #2
 803afca:	d81e      	bhi.n	803b00a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 803afcc:	683b      	ldr	r3, [r7, #0]
 803afce:	88db      	ldrh	r3, [r3, #6]
 803afd0:	2b02      	cmp	r3, #2
 803afd2:	d004      	beq.n	803afde <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 803afd4:	6839      	ldr	r1, [r7, #0]
 803afd6:	6878      	ldr	r0, [r7, #4]
 803afd8:	f000 f8a5 	bl	803b126 <USBD_CtlError>
        break;
 803afdc:	e01a      	b.n	803b014 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 803afde:	687b      	ldr	r3, [r7, #4]
 803afe0:	2201      	movs	r2, #1
 803afe2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 803afe4:	687b      	ldr	r3, [r7, #4]
 803afe6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803afea:	2b00      	cmp	r3, #0
 803afec:	d005      	beq.n	803affa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 803afee:	687b      	ldr	r3, [r7, #4]
 803aff0:	68db      	ldr	r3, [r3, #12]
 803aff2:	f043 0202 	orr.w	r2, r3, #2
 803aff6:	687b      	ldr	r3, [r7, #4]
 803aff8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803affa:	687b      	ldr	r3, [r7, #4]
 803affc:	330c      	adds	r3, #12
 803affe:	2202      	movs	r2, #2
 803b000:	4619      	mov	r1, r3
 803b002:	6878      	ldr	r0, [r7, #4]
 803b004:	f000 f900 	bl	803b208 <USBD_CtlSendData>
      break;
 803b008:	e004      	b.n	803b014 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803b00a:	6839      	ldr	r1, [r7, #0]
 803b00c:	6878      	ldr	r0, [r7, #4]
 803b00e:	f000 f88a 	bl	803b126 <USBD_CtlError>
      break;
 803b012:	bf00      	nop
  }
}
 803b014:	bf00      	nop
 803b016:	3708      	adds	r7, #8
 803b018:	46bd      	mov	sp, r7
 803b01a:	bd80      	pop	{r7, pc}

0803b01c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803b01c:	b580      	push	{r7, lr}
 803b01e:	b082      	sub	sp, #8
 803b020:	af00      	add	r7, sp, #0
 803b022:	6078      	str	r0, [r7, #4]
 803b024:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803b026:	683b      	ldr	r3, [r7, #0]
 803b028:	885b      	ldrh	r3, [r3, #2]
 803b02a:	2b01      	cmp	r3, #1
 803b02c:	d107      	bne.n	803b03e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 803b02e:	687b      	ldr	r3, [r7, #4]
 803b030:	2201      	movs	r2, #1
 803b032:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803b036:	6878      	ldr	r0, [r7, #4]
 803b038:	f000 f940 	bl	803b2bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 803b03c:	e013      	b.n	803b066 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 803b03e:	683b      	ldr	r3, [r7, #0]
 803b040:	885b      	ldrh	r3, [r3, #2]
 803b042:	2b02      	cmp	r3, #2
 803b044:	d10b      	bne.n	803b05e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803b046:	683b      	ldr	r3, [r7, #0]
 803b048:	889b      	ldrh	r3, [r3, #4]
 803b04a:	0a1b      	lsrs	r3, r3, #8
 803b04c:	b29b      	uxth	r3, r3
 803b04e:	b2da      	uxtb	r2, r3
 803b050:	687b      	ldr	r3, [r7, #4]
 803b052:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 803b056:	6878      	ldr	r0, [r7, #4]
 803b058:	f000 f930 	bl	803b2bc <USBD_CtlSendStatus>
}
 803b05c:	e003      	b.n	803b066 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 803b05e:	6839      	ldr	r1, [r7, #0]
 803b060:	6878      	ldr	r0, [r7, #4]
 803b062:	f000 f860 	bl	803b126 <USBD_CtlError>
}
 803b066:	bf00      	nop
 803b068:	3708      	adds	r7, #8
 803b06a:	46bd      	mov	sp, r7
 803b06c:	bd80      	pop	{r7, pc}

0803b06e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803b06e:	b580      	push	{r7, lr}
 803b070:	b082      	sub	sp, #8
 803b072:	af00      	add	r7, sp, #0
 803b074:	6078      	str	r0, [r7, #4]
 803b076:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803b078:	687b      	ldr	r3, [r7, #4]
 803b07a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b07e:	b2db      	uxtb	r3, r3
 803b080:	3b01      	subs	r3, #1
 803b082:	2b02      	cmp	r3, #2
 803b084:	d80b      	bhi.n	803b09e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803b086:	683b      	ldr	r3, [r7, #0]
 803b088:	885b      	ldrh	r3, [r3, #2]
 803b08a:	2b01      	cmp	r3, #1
 803b08c:	d10c      	bne.n	803b0a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 803b08e:	687b      	ldr	r3, [r7, #4]
 803b090:	2200      	movs	r2, #0
 803b092:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 803b096:	6878      	ldr	r0, [r7, #4]
 803b098:	f000 f910 	bl	803b2bc <USBD_CtlSendStatus>
      }
      break;
 803b09c:	e004      	b.n	803b0a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 803b09e:	6839      	ldr	r1, [r7, #0]
 803b0a0:	6878      	ldr	r0, [r7, #4]
 803b0a2:	f000 f840 	bl	803b126 <USBD_CtlError>
      break;
 803b0a6:	e000      	b.n	803b0aa <USBD_ClrFeature+0x3c>
      break;
 803b0a8:	bf00      	nop
  }
}
 803b0aa:	bf00      	nop
 803b0ac:	3708      	adds	r7, #8
 803b0ae:	46bd      	mov	sp, r7
 803b0b0:	bd80      	pop	{r7, pc}

0803b0b2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803b0b2:	b580      	push	{r7, lr}
 803b0b4:	b084      	sub	sp, #16
 803b0b6:	af00      	add	r7, sp, #0
 803b0b8:	6078      	str	r0, [r7, #4]
 803b0ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 803b0bc:	683b      	ldr	r3, [r7, #0]
 803b0be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 803b0c0:	68fb      	ldr	r3, [r7, #12]
 803b0c2:	781a      	ldrb	r2, [r3, #0]
 803b0c4:	687b      	ldr	r3, [r7, #4]
 803b0c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 803b0c8:	68fb      	ldr	r3, [r7, #12]
 803b0ca:	3301      	adds	r3, #1
 803b0cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 803b0ce:	68fb      	ldr	r3, [r7, #12]
 803b0d0:	781a      	ldrb	r2, [r3, #0]
 803b0d2:	687b      	ldr	r3, [r7, #4]
 803b0d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803b0d6:	68fb      	ldr	r3, [r7, #12]
 803b0d8:	3301      	adds	r3, #1
 803b0da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 803b0dc:	68f8      	ldr	r0, [r7, #12]
 803b0de:	f7ff fa41 	bl	803a564 <SWAPBYTE>
 803b0e2:	4603      	mov	r3, r0
 803b0e4:	461a      	mov	r2, r3
 803b0e6:	687b      	ldr	r3, [r7, #4]
 803b0e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803b0ea:	68fb      	ldr	r3, [r7, #12]
 803b0ec:	3301      	adds	r3, #1
 803b0ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803b0f0:	68fb      	ldr	r3, [r7, #12]
 803b0f2:	3301      	adds	r3, #1
 803b0f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803b0f6:	68f8      	ldr	r0, [r7, #12]
 803b0f8:	f7ff fa34 	bl	803a564 <SWAPBYTE>
 803b0fc:	4603      	mov	r3, r0
 803b0fe:	461a      	mov	r2, r3
 803b100:	687b      	ldr	r3, [r7, #4]
 803b102:	809a      	strh	r2, [r3, #4]

  pbuff++;
 803b104:	68fb      	ldr	r3, [r7, #12]
 803b106:	3301      	adds	r3, #1
 803b108:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803b10a:	68fb      	ldr	r3, [r7, #12]
 803b10c:	3301      	adds	r3, #1
 803b10e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 803b110:	68f8      	ldr	r0, [r7, #12]
 803b112:	f7ff fa27 	bl	803a564 <SWAPBYTE>
 803b116:	4603      	mov	r3, r0
 803b118:	461a      	mov	r2, r3
 803b11a:	687b      	ldr	r3, [r7, #4]
 803b11c:	80da      	strh	r2, [r3, #6]
}
 803b11e:	bf00      	nop
 803b120:	3710      	adds	r7, #16
 803b122:	46bd      	mov	sp, r7
 803b124:	bd80      	pop	{r7, pc}

0803b126 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803b126:	b580      	push	{r7, lr}
 803b128:	b082      	sub	sp, #8
 803b12a:	af00      	add	r7, sp, #0
 803b12c:	6078      	str	r0, [r7, #4]
 803b12e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 803b130:	2180      	movs	r1, #128	; 0x80
 803b132:	6878      	ldr	r0, [r7, #4]
 803b134:	f000 fce6 	bl	803bb04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803b138:	2100      	movs	r1, #0
 803b13a:	6878      	ldr	r0, [r7, #4]
 803b13c:	f000 fce2 	bl	803bb04 <USBD_LL_StallEP>
}
 803b140:	bf00      	nop
 803b142:	3708      	adds	r7, #8
 803b144:	46bd      	mov	sp, r7
 803b146:	bd80      	pop	{r7, pc}

0803b148 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803b148:	b580      	push	{r7, lr}
 803b14a:	b086      	sub	sp, #24
 803b14c:	af00      	add	r7, sp, #0
 803b14e:	60f8      	str	r0, [r7, #12]
 803b150:	60b9      	str	r1, [r7, #8]
 803b152:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 803b154:	2300      	movs	r3, #0
 803b156:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803b158:	68fb      	ldr	r3, [r7, #12]
 803b15a:	2b00      	cmp	r3, #0
 803b15c:	d036      	beq.n	803b1cc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 803b15e:	68fb      	ldr	r3, [r7, #12]
 803b160:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 803b162:	6938      	ldr	r0, [r7, #16]
 803b164:	f000 f836 	bl	803b1d4 <USBD_GetLen>
 803b168:	4603      	mov	r3, r0
 803b16a:	3301      	adds	r3, #1
 803b16c:	b29b      	uxth	r3, r3
 803b16e:	005b      	lsls	r3, r3, #1
 803b170:	b29a      	uxth	r2, r3
 803b172:	687b      	ldr	r3, [r7, #4]
 803b174:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 803b176:	7dfb      	ldrb	r3, [r7, #23]
 803b178:	68ba      	ldr	r2, [r7, #8]
 803b17a:	4413      	add	r3, r2
 803b17c:	687a      	ldr	r2, [r7, #4]
 803b17e:	7812      	ldrb	r2, [r2, #0]
 803b180:	701a      	strb	r2, [r3, #0]
  idx++;
 803b182:	7dfb      	ldrb	r3, [r7, #23]
 803b184:	3301      	adds	r3, #1
 803b186:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 803b188:	7dfb      	ldrb	r3, [r7, #23]
 803b18a:	68ba      	ldr	r2, [r7, #8]
 803b18c:	4413      	add	r3, r2
 803b18e:	2203      	movs	r2, #3
 803b190:	701a      	strb	r2, [r3, #0]
  idx++;
 803b192:	7dfb      	ldrb	r3, [r7, #23]
 803b194:	3301      	adds	r3, #1
 803b196:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 803b198:	e013      	b.n	803b1c2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 803b19a:	7dfb      	ldrb	r3, [r7, #23]
 803b19c:	68ba      	ldr	r2, [r7, #8]
 803b19e:	4413      	add	r3, r2
 803b1a0:	693a      	ldr	r2, [r7, #16]
 803b1a2:	7812      	ldrb	r2, [r2, #0]
 803b1a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803b1a6:	693b      	ldr	r3, [r7, #16]
 803b1a8:	3301      	adds	r3, #1
 803b1aa:	613b      	str	r3, [r7, #16]
    idx++;
 803b1ac:	7dfb      	ldrb	r3, [r7, #23]
 803b1ae:	3301      	adds	r3, #1
 803b1b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803b1b2:	7dfb      	ldrb	r3, [r7, #23]
 803b1b4:	68ba      	ldr	r2, [r7, #8]
 803b1b6:	4413      	add	r3, r2
 803b1b8:	2200      	movs	r2, #0
 803b1ba:	701a      	strb	r2, [r3, #0]
    idx++;
 803b1bc:	7dfb      	ldrb	r3, [r7, #23]
 803b1be:	3301      	adds	r3, #1
 803b1c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803b1c2:	693b      	ldr	r3, [r7, #16]
 803b1c4:	781b      	ldrb	r3, [r3, #0]
 803b1c6:	2b00      	cmp	r3, #0
 803b1c8:	d1e7      	bne.n	803b19a <USBD_GetString+0x52>
 803b1ca:	e000      	b.n	803b1ce <USBD_GetString+0x86>
    return;
 803b1cc:	bf00      	nop
  }
}
 803b1ce:	3718      	adds	r7, #24
 803b1d0:	46bd      	mov	sp, r7
 803b1d2:	bd80      	pop	{r7, pc}

0803b1d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 803b1d4:	b480      	push	{r7}
 803b1d6:	b085      	sub	sp, #20
 803b1d8:	af00      	add	r7, sp, #0
 803b1da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 803b1dc:	2300      	movs	r3, #0
 803b1de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 803b1e0:	687b      	ldr	r3, [r7, #4]
 803b1e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 803b1e4:	e005      	b.n	803b1f2 <USBD_GetLen+0x1e>
  {
    len++;
 803b1e6:	7bfb      	ldrb	r3, [r7, #15]
 803b1e8:	3301      	adds	r3, #1
 803b1ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 803b1ec:	68bb      	ldr	r3, [r7, #8]
 803b1ee:	3301      	adds	r3, #1
 803b1f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803b1f2:	68bb      	ldr	r3, [r7, #8]
 803b1f4:	781b      	ldrb	r3, [r3, #0]
 803b1f6:	2b00      	cmp	r3, #0
 803b1f8:	d1f5      	bne.n	803b1e6 <USBD_GetLen+0x12>
  }

  return len;
 803b1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 803b1fc:	4618      	mov	r0, r3
 803b1fe:	3714      	adds	r7, #20
 803b200:	46bd      	mov	sp, r7
 803b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b206:	4770      	bx	lr

0803b208 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803b208:	b580      	push	{r7, lr}
 803b20a:	b084      	sub	sp, #16
 803b20c:	af00      	add	r7, sp, #0
 803b20e:	60f8      	str	r0, [r7, #12]
 803b210:	60b9      	str	r1, [r7, #8]
 803b212:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 803b214:	68fb      	ldr	r3, [r7, #12]
 803b216:	2202      	movs	r2, #2
 803b218:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 803b21c:	68fb      	ldr	r3, [r7, #12]
 803b21e:	687a      	ldr	r2, [r7, #4]
 803b220:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 803b222:	68fb      	ldr	r3, [r7, #12]
 803b224:	687a      	ldr	r2, [r7, #4]
 803b226:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803b228:	687b      	ldr	r3, [r7, #4]
 803b22a:	68ba      	ldr	r2, [r7, #8]
 803b22c:	2100      	movs	r1, #0
 803b22e:	68f8      	ldr	r0, [r7, #12]
 803b230:	f000 fcf1 	bl	803bc16 <USBD_LL_Transmit>

  return USBD_OK;
 803b234:	2300      	movs	r3, #0
}
 803b236:	4618      	mov	r0, r3
 803b238:	3710      	adds	r7, #16
 803b23a:	46bd      	mov	sp, r7
 803b23c:	bd80      	pop	{r7, pc}

0803b23e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 803b23e:	b580      	push	{r7, lr}
 803b240:	b084      	sub	sp, #16
 803b242:	af00      	add	r7, sp, #0
 803b244:	60f8      	str	r0, [r7, #12]
 803b246:	60b9      	str	r1, [r7, #8]
 803b248:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803b24a:	687b      	ldr	r3, [r7, #4]
 803b24c:	68ba      	ldr	r2, [r7, #8]
 803b24e:	2100      	movs	r1, #0
 803b250:	68f8      	ldr	r0, [r7, #12]
 803b252:	f000 fce0 	bl	803bc16 <USBD_LL_Transmit>

  return USBD_OK;
 803b256:	2300      	movs	r3, #0
}
 803b258:	4618      	mov	r0, r3
 803b25a:	3710      	adds	r7, #16
 803b25c:	46bd      	mov	sp, r7
 803b25e:	bd80      	pop	{r7, pc}

0803b260 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 803b260:	b580      	push	{r7, lr}
 803b262:	b084      	sub	sp, #16
 803b264:	af00      	add	r7, sp, #0
 803b266:	60f8      	str	r0, [r7, #12]
 803b268:	60b9      	str	r1, [r7, #8]
 803b26a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 803b26c:	68fb      	ldr	r3, [r7, #12]
 803b26e:	2203      	movs	r2, #3
 803b270:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 803b274:	68fb      	ldr	r3, [r7, #12]
 803b276:	687a      	ldr	r2, [r7, #4]
 803b278:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 803b27c:	68fb      	ldr	r3, [r7, #12]
 803b27e:	687a      	ldr	r2, [r7, #4]
 803b280:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803b284:	687b      	ldr	r3, [r7, #4]
 803b286:	68ba      	ldr	r2, [r7, #8]
 803b288:	2100      	movs	r1, #0
 803b28a:	68f8      	ldr	r0, [r7, #12]
 803b28c:	f000 fce4 	bl	803bc58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b290:	2300      	movs	r3, #0
}
 803b292:	4618      	mov	r0, r3
 803b294:	3710      	adds	r7, #16
 803b296:	46bd      	mov	sp, r7
 803b298:	bd80      	pop	{r7, pc}

0803b29a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 803b29a:	b580      	push	{r7, lr}
 803b29c:	b084      	sub	sp, #16
 803b29e:	af00      	add	r7, sp, #0
 803b2a0:	60f8      	str	r0, [r7, #12]
 803b2a2:	60b9      	str	r1, [r7, #8]
 803b2a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803b2a6:	687b      	ldr	r3, [r7, #4]
 803b2a8:	68ba      	ldr	r2, [r7, #8]
 803b2aa:	2100      	movs	r1, #0
 803b2ac:	68f8      	ldr	r0, [r7, #12]
 803b2ae:	f000 fcd3 	bl	803bc58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b2b2:	2300      	movs	r3, #0
}
 803b2b4:	4618      	mov	r0, r3
 803b2b6:	3710      	adds	r7, #16
 803b2b8:	46bd      	mov	sp, r7
 803b2ba:	bd80      	pop	{r7, pc}

0803b2bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 803b2bc:	b580      	push	{r7, lr}
 803b2be:	b082      	sub	sp, #8
 803b2c0:	af00      	add	r7, sp, #0
 803b2c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 803b2c4:	687b      	ldr	r3, [r7, #4]
 803b2c6:	2204      	movs	r2, #4
 803b2c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 803b2cc:	2300      	movs	r3, #0
 803b2ce:	2200      	movs	r2, #0
 803b2d0:	2100      	movs	r1, #0
 803b2d2:	6878      	ldr	r0, [r7, #4]
 803b2d4:	f000 fc9f 	bl	803bc16 <USBD_LL_Transmit>

  return USBD_OK;
 803b2d8:	2300      	movs	r3, #0
}
 803b2da:	4618      	mov	r0, r3
 803b2dc:	3708      	adds	r7, #8
 803b2de:	46bd      	mov	sp, r7
 803b2e0:	bd80      	pop	{r7, pc}

0803b2e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803b2e2:	b580      	push	{r7, lr}
 803b2e4:	b082      	sub	sp, #8
 803b2e6:	af00      	add	r7, sp, #0
 803b2e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803b2ea:	687b      	ldr	r3, [r7, #4]
 803b2ec:	2205      	movs	r2, #5
 803b2ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803b2f2:	2300      	movs	r3, #0
 803b2f4:	2200      	movs	r2, #0
 803b2f6:	2100      	movs	r1, #0
 803b2f8:	6878      	ldr	r0, [r7, #4]
 803b2fa:	f000 fcad 	bl	803bc58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b2fe:	2300      	movs	r3, #0
}
 803b300:	4618      	mov	r0, r3
 803b302:	3708      	adds	r7, #8
 803b304:	46bd      	mov	sp, r7
 803b306:	bd80      	pop	{r7, pc}

0803b308 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803b308:	b580      	push	{r7, lr}
 803b30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 803b30c:	2200      	movs	r2, #0
 803b30e:	4913      	ldr	r1, [pc, #76]	; (803b35c <MX_USB_DEVICE_Init+0x54>)
 803b310:	4813      	ldr	r0, [pc, #76]	; (803b360 <MX_USB_DEVICE_Init+0x58>)
 803b312:	f7fe fd07 	bl	8039d24 <USBD_Init>
 803b316:	4603      	mov	r3, r0
 803b318:	2b00      	cmp	r3, #0
 803b31a:	d001      	beq.n	803b320 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 803b31c:	f7ee fc10 	bl	8029b40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 803b320:	4910      	ldr	r1, [pc, #64]	; (803b364 <MX_USB_DEVICE_Init+0x5c>)
 803b322:	480f      	ldr	r0, [pc, #60]	; (803b360 <MX_USB_DEVICE_Init+0x58>)
 803b324:	f7fe fd2e 	bl	8039d84 <USBD_RegisterClass>
 803b328:	4603      	mov	r3, r0
 803b32a:	2b00      	cmp	r3, #0
 803b32c:	d001      	beq.n	803b332 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 803b32e:	f7ee fc07 	bl	8029b40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 803b332:	490d      	ldr	r1, [pc, #52]	; (803b368 <MX_USB_DEVICE_Init+0x60>)
 803b334:	480a      	ldr	r0, [pc, #40]	; (803b360 <MX_USB_DEVICE_Init+0x58>)
 803b336:	f7fe fc65 	bl	8039c04 <USBD_CDC_RegisterInterface>
 803b33a:	4603      	mov	r3, r0
 803b33c:	2b00      	cmp	r3, #0
 803b33e:	d001      	beq.n	803b344 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 803b340:	f7ee fbfe 	bl	8029b40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 803b344:	4806      	ldr	r0, [pc, #24]	; (803b360 <MX_USB_DEVICE_Init+0x58>)
 803b346:	f7fe fd53 	bl	8039df0 <USBD_Start>
 803b34a:	4603      	mov	r3, r0
 803b34c:	2b00      	cmp	r3, #0
 803b34e:	d001      	beq.n	803b354 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 803b350:	f7ee fbf6 	bl	8029b40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 803b354:	f7f5 fc82 	bl	8030c5c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 803b358:	bf00      	nop
 803b35a:	bd80      	pop	{r7, pc}
 803b35c:	240000b4 	.word	0x240000b4
 803b360:	24024bd4 	.word	0x24024bd4
 803b364:	24000020 	.word	0x24000020
 803b368:	240000a0 	.word	0x240000a0

0803b36c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 803b36c:	b580      	push	{r7, lr}
 803b36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 803b370:	2200      	movs	r2, #0
 803b372:	4905      	ldr	r1, [pc, #20]	; (803b388 <CDC_Init_FS+0x1c>)
 803b374:	4805      	ldr	r0, [pc, #20]	; (803b38c <CDC_Init_FS+0x20>)
 803b376:	f7fe fc5f 	bl	8039c38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803b37a:	4905      	ldr	r1, [pc, #20]	; (803b390 <CDC_Init_FS+0x24>)
 803b37c:	4803      	ldr	r0, [pc, #12]	; (803b38c <CDC_Init_FS+0x20>)
 803b37e:	f7fe fc7d 	bl	8039c7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 803b382:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 803b384:	4618      	mov	r0, r3
 803b386:	bd80      	pop	{r7, pc}
 803b388:	240256b0 	.word	0x240256b0
 803b38c:	24024bd4 	.word	0x24024bd4
 803b390:	24024eb0 	.word	0x24024eb0

0803b394 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 803b394:	b480      	push	{r7}
 803b396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803b398:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803b39a:	4618      	mov	r0, r3
 803b39c:	46bd      	mov	sp, r7
 803b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b3a2:	4770      	bx	lr

0803b3a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 803b3a4:	b480      	push	{r7}
 803b3a6:	b083      	sub	sp, #12
 803b3a8:	af00      	add	r7, sp, #0
 803b3aa:	4603      	mov	r3, r0
 803b3ac:	6039      	str	r1, [r7, #0]
 803b3ae:	71fb      	strb	r3, [r7, #7]
 803b3b0:	4613      	mov	r3, r2
 803b3b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 803b3b4:	79fb      	ldrb	r3, [r7, #7]
 803b3b6:	2b23      	cmp	r3, #35	; 0x23
 803b3b8:	d84a      	bhi.n	803b450 <CDC_Control_FS+0xac>
 803b3ba:	a201      	add	r2, pc, #4	; (adr r2, 803b3c0 <CDC_Control_FS+0x1c>)
 803b3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803b3c0:	0803b451 	.word	0x0803b451
 803b3c4:	0803b451 	.word	0x0803b451
 803b3c8:	0803b451 	.word	0x0803b451
 803b3cc:	0803b451 	.word	0x0803b451
 803b3d0:	0803b451 	.word	0x0803b451
 803b3d4:	0803b451 	.word	0x0803b451
 803b3d8:	0803b451 	.word	0x0803b451
 803b3dc:	0803b451 	.word	0x0803b451
 803b3e0:	0803b451 	.word	0x0803b451
 803b3e4:	0803b451 	.word	0x0803b451
 803b3e8:	0803b451 	.word	0x0803b451
 803b3ec:	0803b451 	.word	0x0803b451
 803b3f0:	0803b451 	.word	0x0803b451
 803b3f4:	0803b451 	.word	0x0803b451
 803b3f8:	0803b451 	.word	0x0803b451
 803b3fc:	0803b451 	.word	0x0803b451
 803b400:	0803b451 	.word	0x0803b451
 803b404:	0803b451 	.word	0x0803b451
 803b408:	0803b451 	.word	0x0803b451
 803b40c:	0803b451 	.word	0x0803b451
 803b410:	0803b451 	.word	0x0803b451
 803b414:	0803b451 	.word	0x0803b451
 803b418:	0803b451 	.word	0x0803b451
 803b41c:	0803b451 	.word	0x0803b451
 803b420:	0803b451 	.word	0x0803b451
 803b424:	0803b451 	.word	0x0803b451
 803b428:	0803b451 	.word	0x0803b451
 803b42c:	0803b451 	.word	0x0803b451
 803b430:	0803b451 	.word	0x0803b451
 803b434:	0803b451 	.word	0x0803b451
 803b438:	0803b451 	.word	0x0803b451
 803b43c:	0803b451 	.word	0x0803b451
 803b440:	0803b451 	.word	0x0803b451
 803b444:	0803b451 	.word	0x0803b451
 803b448:	0803b451 	.word	0x0803b451
 803b44c:	0803b451 	.word	0x0803b451
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 803b450:	bf00      	nop
  }

  return (USBD_OK);
 803b452:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 803b454:	4618      	mov	r0, r3
 803b456:	370c      	adds	r7, #12
 803b458:	46bd      	mov	sp, r7
 803b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b45e:	4770      	bx	lr

0803b460 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 803b460:	b580      	push	{r7, lr}
 803b462:	b082      	sub	sp, #8
 803b464:	af00      	add	r7, sp, #0
 803b466:	6078      	str	r0, [r7, #4]
 803b468:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803b46a:	6879      	ldr	r1, [r7, #4]
 803b46c:	4805      	ldr	r0, [pc, #20]	; (803b484 <CDC_Receive_FS+0x24>)
 803b46e:	f7fe fc05 	bl	8039c7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 803b472:	4804      	ldr	r0, [pc, #16]	; (803b484 <CDC_Receive_FS+0x24>)
 803b474:	f7fe fc20 	bl	8039cb8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803b478:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803b47a:	4618      	mov	r0, r3
 803b47c:	3708      	adds	r7, #8
 803b47e:	46bd      	mov	sp, r7
 803b480:	bd80      	pop	{r7, pc}
 803b482:	bf00      	nop
 803b484:	24024bd4 	.word	0x24024bd4

0803b488 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803b488:	b480      	push	{r7}
 803b48a:	b087      	sub	sp, #28
 803b48c:	af00      	add	r7, sp, #0
 803b48e:	60f8      	str	r0, [r7, #12]
 803b490:	60b9      	str	r1, [r7, #8]
 803b492:	4613      	mov	r3, r2
 803b494:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803b496:	2300      	movs	r3, #0
 803b498:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803b49a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803b49e:	4618      	mov	r0, r3
 803b4a0:	371c      	adds	r7, #28
 803b4a2:	46bd      	mov	sp, r7
 803b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b4a8:	4770      	bx	lr
	...

0803b4ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b4ac:	b480      	push	{r7}
 803b4ae:	b083      	sub	sp, #12
 803b4b0:	af00      	add	r7, sp, #0
 803b4b2:	4603      	mov	r3, r0
 803b4b4:	6039      	str	r1, [r7, #0]
 803b4b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 803b4b8:	683b      	ldr	r3, [r7, #0]
 803b4ba:	2212      	movs	r2, #18
 803b4bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 803b4be:	4b03      	ldr	r3, [pc, #12]	; (803b4cc <USBD_FS_DeviceDescriptor+0x20>)
}
 803b4c0:	4618      	mov	r0, r3
 803b4c2:	370c      	adds	r7, #12
 803b4c4:	46bd      	mov	sp, r7
 803b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b4ca:	4770      	bx	lr
 803b4cc:	240000d0 	.word	0x240000d0

0803b4d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b4d0:	b480      	push	{r7}
 803b4d2:	b083      	sub	sp, #12
 803b4d4:	af00      	add	r7, sp, #0
 803b4d6:	4603      	mov	r3, r0
 803b4d8:	6039      	str	r1, [r7, #0]
 803b4da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 803b4dc:	683b      	ldr	r3, [r7, #0]
 803b4de:	2204      	movs	r2, #4
 803b4e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 803b4e2:	4b03      	ldr	r3, [pc, #12]	; (803b4f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 803b4e4:	4618      	mov	r0, r3
 803b4e6:	370c      	adds	r7, #12
 803b4e8:	46bd      	mov	sp, r7
 803b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b4ee:	4770      	bx	lr
 803b4f0:	240000e4 	.word	0x240000e4

0803b4f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b4f4:	b580      	push	{r7, lr}
 803b4f6:	b082      	sub	sp, #8
 803b4f8:	af00      	add	r7, sp, #0
 803b4fa:	4603      	mov	r3, r0
 803b4fc:	6039      	str	r1, [r7, #0]
 803b4fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803b500:	79fb      	ldrb	r3, [r7, #7]
 803b502:	2b00      	cmp	r3, #0
 803b504:	d105      	bne.n	803b512 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803b506:	683a      	ldr	r2, [r7, #0]
 803b508:	4907      	ldr	r1, [pc, #28]	; (803b528 <USBD_FS_ProductStrDescriptor+0x34>)
 803b50a:	4808      	ldr	r0, [pc, #32]	; (803b52c <USBD_FS_ProductStrDescriptor+0x38>)
 803b50c:	f7ff fe1c 	bl	803b148 <USBD_GetString>
 803b510:	e004      	b.n	803b51c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803b512:	683a      	ldr	r2, [r7, #0]
 803b514:	4904      	ldr	r1, [pc, #16]	; (803b528 <USBD_FS_ProductStrDescriptor+0x34>)
 803b516:	4805      	ldr	r0, [pc, #20]	; (803b52c <USBD_FS_ProductStrDescriptor+0x38>)
 803b518:	f7ff fe16 	bl	803b148 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b51c:	4b02      	ldr	r3, [pc, #8]	; (803b528 <USBD_FS_ProductStrDescriptor+0x34>)
}
 803b51e:	4618      	mov	r0, r3
 803b520:	3708      	adds	r7, #8
 803b522:	46bd      	mov	sp, r7
 803b524:	bd80      	pop	{r7, pc}
 803b526:	bf00      	nop
 803b528:	24025eb0 	.word	0x24025eb0
 803b52c:	0803dea0 	.word	0x0803dea0

0803b530 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b530:	b580      	push	{r7, lr}
 803b532:	b082      	sub	sp, #8
 803b534:	af00      	add	r7, sp, #0
 803b536:	4603      	mov	r3, r0
 803b538:	6039      	str	r1, [r7, #0]
 803b53a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 803b53c:	683a      	ldr	r2, [r7, #0]
 803b53e:	4904      	ldr	r1, [pc, #16]	; (803b550 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 803b540:	4804      	ldr	r0, [pc, #16]	; (803b554 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 803b542:	f7ff fe01 	bl	803b148 <USBD_GetString>
  return USBD_StrDesc;
 803b546:	4b02      	ldr	r3, [pc, #8]	; (803b550 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 803b548:	4618      	mov	r0, r3
 803b54a:	3708      	adds	r7, #8
 803b54c:	46bd      	mov	sp, r7
 803b54e:	bd80      	pop	{r7, pc}
 803b550:	24025eb0 	.word	0x24025eb0
 803b554:	0803deb8 	.word	0x0803deb8

0803b558 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b558:	b580      	push	{r7, lr}
 803b55a:	b082      	sub	sp, #8
 803b55c:	af00      	add	r7, sp, #0
 803b55e:	4603      	mov	r3, r0
 803b560:	6039      	str	r1, [r7, #0]
 803b562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 803b564:	683b      	ldr	r3, [r7, #0]
 803b566:	221a      	movs	r2, #26
 803b568:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803b56a:	f000 f843 	bl	803b5f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 803b56e:	4b02      	ldr	r3, [pc, #8]	; (803b578 <USBD_FS_SerialStrDescriptor+0x20>)
}
 803b570:	4618      	mov	r0, r3
 803b572:	3708      	adds	r7, #8
 803b574:	46bd      	mov	sp, r7
 803b576:	bd80      	pop	{r7, pc}
 803b578:	240000e8 	.word	0x240000e8

0803b57c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b57c:	b580      	push	{r7, lr}
 803b57e:	b082      	sub	sp, #8
 803b580:	af00      	add	r7, sp, #0
 803b582:	4603      	mov	r3, r0
 803b584:	6039      	str	r1, [r7, #0]
 803b586:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 803b588:	79fb      	ldrb	r3, [r7, #7]
 803b58a:	2b00      	cmp	r3, #0
 803b58c:	d105      	bne.n	803b59a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803b58e:	683a      	ldr	r2, [r7, #0]
 803b590:	4907      	ldr	r1, [pc, #28]	; (803b5b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 803b592:	4808      	ldr	r0, [pc, #32]	; (803b5b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 803b594:	f7ff fdd8 	bl	803b148 <USBD_GetString>
 803b598:	e004      	b.n	803b5a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803b59a:	683a      	ldr	r2, [r7, #0]
 803b59c:	4904      	ldr	r1, [pc, #16]	; (803b5b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 803b59e:	4805      	ldr	r0, [pc, #20]	; (803b5b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 803b5a0:	f7ff fdd2 	bl	803b148 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b5a4:	4b02      	ldr	r3, [pc, #8]	; (803b5b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 803b5a6:	4618      	mov	r0, r3
 803b5a8:	3708      	adds	r7, #8
 803b5aa:	46bd      	mov	sp, r7
 803b5ac:	bd80      	pop	{r7, pc}
 803b5ae:	bf00      	nop
 803b5b0:	24025eb0 	.word	0x24025eb0
 803b5b4:	0803decc 	.word	0x0803decc

0803b5b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b5b8:	b580      	push	{r7, lr}
 803b5ba:	b082      	sub	sp, #8
 803b5bc:	af00      	add	r7, sp, #0
 803b5be:	4603      	mov	r3, r0
 803b5c0:	6039      	str	r1, [r7, #0]
 803b5c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803b5c4:	79fb      	ldrb	r3, [r7, #7]
 803b5c6:	2b00      	cmp	r3, #0
 803b5c8:	d105      	bne.n	803b5d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803b5ca:	683a      	ldr	r2, [r7, #0]
 803b5cc:	4907      	ldr	r1, [pc, #28]	; (803b5ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 803b5ce:	4808      	ldr	r0, [pc, #32]	; (803b5f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 803b5d0:	f7ff fdba 	bl	803b148 <USBD_GetString>
 803b5d4:	e004      	b.n	803b5e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803b5d6:	683a      	ldr	r2, [r7, #0]
 803b5d8:	4904      	ldr	r1, [pc, #16]	; (803b5ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 803b5da:	4805      	ldr	r0, [pc, #20]	; (803b5f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 803b5dc:	f7ff fdb4 	bl	803b148 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b5e0:	4b02      	ldr	r3, [pc, #8]	; (803b5ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 803b5e2:	4618      	mov	r0, r3
 803b5e4:	3708      	adds	r7, #8
 803b5e6:	46bd      	mov	sp, r7
 803b5e8:	bd80      	pop	{r7, pc}
 803b5ea:	bf00      	nop
 803b5ec:	24025eb0 	.word	0x24025eb0
 803b5f0:	0803ded8 	.word	0x0803ded8

0803b5f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 803b5f4:	b580      	push	{r7, lr}
 803b5f6:	b084      	sub	sp, #16
 803b5f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 803b5fa:	4b0f      	ldr	r3, [pc, #60]	; (803b638 <Get_SerialNum+0x44>)
 803b5fc:	681b      	ldr	r3, [r3, #0]
 803b5fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 803b600:	4b0e      	ldr	r3, [pc, #56]	; (803b63c <Get_SerialNum+0x48>)
 803b602:	681b      	ldr	r3, [r3, #0]
 803b604:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 803b606:	4b0e      	ldr	r3, [pc, #56]	; (803b640 <Get_SerialNum+0x4c>)
 803b608:	681b      	ldr	r3, [r3, #0]
 803b60a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 803b60c:	68fa      	ldr	r2, [r7, #12]
 803b60e:	687b      	ldr	r3, [r7, #4]
 803b610:	4413      	add	r3, r2
 803b612:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803b614:	68fb      	ldr	r3, [r7, #12]
 803b616:	2b00      	cmp	r3, #0
 803b618:	d009      	beq.n	803b62e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 803b61a:	2208      	movs	r2, #8
 803b61c:	4909      	ldr	r1, [pc, #36]	; (803b644 <Get_SerialNum+0x50>)
 803b61e:	68f8      	ldr	r0, [r7, #12]
 803b620:	f000 f814 	bl	803b64c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 803b624:	2204      	movs	r2, #4
 803b626:	4908      	ldr	r1, [pc, #32]	; (803b648 <Get_SerialNum+0x54>)
 803b628:	68b8      	ldr	r0, [r7, #8]
 803b62a:	f000 f80f 	bl	803b64c <IntToUnicode>
  }
}
 803b62e:	bf00      	nop
 803b630:	3710      	adds	r7, #16
 803b632:	46bd      	mov	sp, r7
 803b634:	bd80      	pop	{r7, pc}
 803b636:	bf00      	nop
 803b638:	1ff1e800 	.word	0x1ff1e800
 803b63c:	1ff1e804 	.word	0x1ff1e804
 803b640:	1ff1e808 	.word	0x1ff1e808
 803b644:	240000ea 	.word	0x240000ea
 803b648:	240000fa 	.word	0x240000fa

0803b64c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 803b64c:	b480      	push	{r7}
 803b64e:	b087      	sub	sp, #28
 803b650:	af00      	add	r7, sp, #0
 803b652:	60f8      	str	r0, [r7, #12]
 803b654:	60b9      	str	r1, [r7, #8]
 803b656:	4613      	mov	r3, r2
 803b658:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 803b65a:	2300      	movs	r3, #0
 803b65c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 803b65e:	2300      	movs	r3, #0
 803b660:	75fb      	strb	r3, [r7, #23]
 803b662:	e027      	b.n	803b6b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 803b664:	68fb      	ldr	r3, [r7, #12]
 803b666:	0f1b      	lsrs	r3, r3, #28
 803b668:	2b09      	cmp	r3, #9
 803b66a:	d80b      	bhi.n	803b684 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 803b66c:	68fb      	ldr	r3, [r7, #12]
 803b66e:	0f1b      	lsrs	r3, r3, #28
 803b670:	b2da      	uxtb	r2, r3
 803b672:	7dfb      	ldrb	r3, [r7, #23]
 803b674:	005b      	lsls	r3, r3, #1
 803b676:	4619      	mov	r1, r3
 803b678:	68bb      	ldr	r3, [r7, #8]
 803b67a:	440b      	add	r3, r1
 803b67c:	3230      	adds	r2, #48	; 0x30
 803b67e:	b2d2      	uxtb	r2, r2
 803b680:	701a      	strb	r2, [r3, #0]
 803b682:	e00a      	b.n	803b69a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 803b684:	68fb      	ldr	r3, [r7, #12]
 803b686:	0f1b      	lsrs	r3, r3, #28
 803b688:	b2da      	uxtb	r2, r3
 803b68a:	7dfb      	ldrb	r3, [r7, #23]
 803b68c:	005b      	lsls	r3, r3, #1
 803b68e:	4619      	mov	r1, r3
 803b690:	68bb      	ldr	r3, [r7, #8]
 803b692:	440b      	add	r3, r1
 803b694:	3237      	adds	r2, #55	; 0x37
 803b696:	b2d2      	uxtb	r2, r2
 803b698:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 803b69a:	68fb      	ldr	r3, [r7, #12]
 803b69c:	011b      	lsls	r3, r3, #4
 803b69e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 803b6a0:	7dfb      	ldrb	r3, [r7, #23]
 803b6a2:	005b      	lsls	r3, r3, #1
 803b6a4:	3301      	adds	r3, #1
 803b6a6:	68ba      	ldr	r2, [r7, #8]
 803b6a8:	4413      	add	r3, r2
 803b6aa:	2200      	movs	r2, #0
 803b6ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803b6ae:	7dfb      	ldrb	r3, [r7, #23]
 803b6b0:	3301      	adds	r3, #1
 803b6b2:	75fb      	strb	r3, [r7, #23]
 803b6b4:	7dfa      	ldrb	r2, [r7, #23]
 803b6b6:	79fb      	ldrb	r3, [r7, #7]
 803b6b8:	429a      	cmp	r2, r3
 803b6ba:	d3d3      	bcc.n	803b664 <IntToUnicode+0x18>
  }
}
 803b6bc:	bf00      	nop
 803b6be:	bf00      	nop
 803b6c0:	371c      	adds	r7, #28
 803b6c2:	46bd      	mov	sp, r7
 803b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b6c8:	4770      	bx	lr
	...

0803b6cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 803b6cc:	b580      	push	{r7, lr}
 803b6ce:	b0b8      	sub	sp, #224	; 0xe0
 803b6d0:	af00      	add	r7, sp, #0
 803b6d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803b6d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803b6d8:	2200      	movs	r2, #0
 803b6da:	601a      	str	r2, [r3, #0]
 803b6dc:	605a      	str	r2, [r3, #4]
 803b6de:	609a      	str	r2, [r3, #8]
 803b6e0:	60da      	str	r2, [r3, #12]
 803b6e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 803b6e4:	f107 0310 	add.w	r3, r7, #16
 803b6e8:	22bc      	movs	r2, #188	; 0xbc
 803b6ea:	2100      	movs	r1, #0
 803b6ec:	4618      	mov	r0, r3
 803b6ee:	f000 fbe9 	bl	803bec4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 803b6f2:	687b      	ldr	r3, [r7, #4]
 803b6f4:	681b      	ldr	r3, [r3, #0]
 803b6f6:	4a2f      	ldr	r2, [pc, #188]	; (803b7b4 <HAL_PCD_MspInit+0xe8>)
 803b6f8:	4293      	cmp	r3, r2
 803b6fa:	d156      	bne.n	803b7aa <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 803b6fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803b700:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 803b702:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 803b706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 803b70a:	f107 0310 	add.w	r3, r7, #16
 803b70e:	4618      	mov	r0, r3
 803b710:	f7f6 fa6e 	bl	8031bf0 <HAL_RCCEx_PeriphCLKConfig>
 803b714:	4603      	mov	r3, r0
 803b716:	2b00      	cmp	r3, #0
 803b718:	d001      	beq.n	803b71e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 803b71a:	f7ee fa11 	bl	8029b40 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 803b71e:	f7f5 fa9d 	bl	8030c5c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 803b722:	4b25      	ldr	r3, [pc, #148]	; (803b7b8 <HAL_PCD_MspInit+0xec>)
 803b724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803b728:	4a23      	ldr	r2, [pc, #140]	; (803b7b8 <HAL_PCD_MspInit+0xec>)
 803b72a:	f043 0301 	orr.w	r3, r3, #1
 803b72e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 803b732:	4b21      	ldr	r3, [pc, #132]	; (803b7b8 <HAL_PCD_MspInit+0xec>)
 803b734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803b738:	f003 0301 	and.w	r3, r3, #1
 803b73c:	60fb      	str	r3, [r7, #12]
 803b73e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 803b740:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 803b744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803b748:	2302      	movs	r3, #2
 803b74a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803b74e:	2300      	movs	r3, #0
 803b750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803b754:	2300      	movs	r3, #0
 803b756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 803b75a:	230a      	movs	r3, #10
 803b75c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803b760:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803b764:	4619      	mov	r1, r3
 803b766:	4815      	ldr	r0, [pc, #84]	; (803b7bc <HAL_PCD_MspInit+0xf0>)
 803b768:	f7f2 fdf2 	bl	802e350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 803b76c:	4b12      	ldr	r3, [pc, #72]	; (803b7b8 <HAL_PCD_MspInit+0xec>)
 803b76e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803b772:	4a11      	ldr	r2, [pc, #68]	; (803b7b8 <HAL_PCD_MspInit+0xec>)
 803b774:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803b778:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 803b77c:	4b0e      	ldr	r3, [pc, #56]	; (803b7b8 <HAL_PCD_MspInit+0xec>)
 803b77e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803b782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803b786:	60bb      	str	r3, [r7, #8]
 803b788:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 803b78a:	2200      	movs	r2, #0
 803b78c:	2100      	movs	r1, #0
 803b78e:	2062      	movs	r0, #98	; 0x62
 803b790:	f7ef fd8b 	bl	802b2aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 803b794:	2062      	movs	r0, #98	; 0x62
 803b796:	f7ef fda2 	bl	802b2de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 803b79a:	2200      	movs	r2, #0
 803b79c:	2100      	movs	r1, #0
 803b79e:	2065      	movs	r0, #101	; 0x65
 803b7a0:	f7ef fd83 	bl	802b2aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 803b7a4:	2065      	movs	r0, #101	; 0x65
 803b7a6:	f7ef fd9a 	bl	802b2de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 803b7aa:	bf00      	nop
 803b7ac:	37e0      	adds	r7, #224	; 0xe0
 803b7ae:	46bd      	mov	sp, r7
 803b7b0:	bd80      	pop	{r7, pc}
 803b7b2:	bf00      	nop
 803b7b4:	40080000 	.word	0x40080000
 803b7b8:	58024400 	.word	0x58024400
 803b7bc:	58020000 	.word	0x58020000

0803b7c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b7c0:	b580      	push	{r7, lr}
 803b7c2:	b082      	sub	sp, #8
 803b7c4:	af00      	add	r7, sp, #0
 803b7c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 803b7c8:	687b      	ldr	r3, [r7, #4]
 803b7ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 803b7ce:	687b      	ldr	r3, [r7, #4]
 803b7d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803b7d4:	4619      	mov	r1, r3
 803b7d6:	4610      	mov	r0, r2
 803b7d8:	f7fe fb57 	bl	8039e8a <USBD_LL_SetupStage>
}
 803b7dc:	bf00      	nop
 803b7de:	3708      	adds	r7, #8
 803b7e0:	46bd      	mov	sp, r7
 803b7e2:	bd80      	pop	{r7, pc}

0803b7e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b7e4:	b580      	push	{r7, lr}
 803b7e6:	b082      	sub	sp, #8
 803b7e8:	af00      	add	r7, sp, #0
 803b7ea:	6078      	str	r0, [r7, #4]
 803b7ec:	460b      	mov	r3, r1
 803b7ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 803b7f0:	687b      	ldr	r3, [r7, #4]
 803b7f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803b7f6:	78fa      	ldrb	r2, [r7, #3]
 803b7f8:	6879      	ldr	r1, [r7, #4]
 803b7fa:	4613      	mov	r3, r2
 803b7fc:	00db      	lsls	r3, r3, #3
 803b7fe:	4413      	add	r3, r2
 803b800:	009b      	lsls	r3, r3, #2
 803b802:	440b      	add	r3, r1
 803b804:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 803b808:	681a      	ldr	r2, [r3, #0]
 803b80a:	78fb      	ldrb	r3, [r7, #3]
 803b80c:	4619      	mov	r1, r3
 803b80e:	f7fe fb91 	bl	8039f34 <USBD_LL_DataOutStage>
}
 803b812:	bf00      	nop
 803b814:	3708      	adds	r7, #8
 803b816:	46bd      	mov	sp, r7
 803b818:	bd80      	pop	{r7, pc}

0803b81a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b81a:	b580      	push	{r7, lr}
 803b81c:	b082      	sub	sp, #8
 803b81e:	af00      	add	r7, sp, #0
 803b820:	6078      	str	r0, [r7, #4]
 803b822:	460b      	mov	r3, r1
 803b824:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 803b826:	687b      	ldr	r3, [r7, #4]
 803b828:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803b82c:	78fa      	ldrb	r2, [r7, #3]
 803b82e:	6879      	ldr	r1, [r7, #4]
 803b830:	4613      	mov	r3, r2
 803b832:	00db      	lsls	r3, r3, #3
 803b834:	4413      	add	r3, r2
 803b836:	009b      	lsls	r3, r3, #2
 803b838:	440b      	add	r3, r1
 803b83a:	334c      	adds	r3, #76	; 0x4c
 803b83c:	681a      	ldr	r2, [r3, #0]
 803b83e:	78fb      	ldrb	r3, [r7, #3]
 803b840:	4619      	mov	r1, r3
 803b842:	f7fe fc2a 	bl	803a09a <USBD_LL_DataInStage>
}
 803b846:	bf00      	nop
 803b848:	3708      	adds	r7, #8
 803b84a:	46bd      	mov	sp, r7
 803b84c:	bd80      	pop	{r7, pc}

0803b84e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b84e:	b580      	push	{r7, lr}
 803b850:	b082      	sub	sp, #8
 803b852:	af00      	add	r7, sp, #0
 803b854:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803b856:	687b      	ldr	r3, [r7, #4]
 803b858:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b85c:	4618      	mov	r0, r3
 803b85e:	f7fe fd5e 	bl	803a31e <USBD_LL_SOF>
}
 803b862:	bf00      	nop
 803b864:	3708      	adds	r7, #8
 803b866:	46bd      	mov	sp, r7
 803b868:	bd80      	pop	{r7, pc}

0803b86a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b86a:	b580      	push	{r7, lr}
 803b86c:	b084      	sub	sp, #16
 803b86e:	af00      	add	r7, sp, #0
 803b870:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 803b872:	2301      	movs	r3, #1
 803b874:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 803b876:	687b      	ldr	r3, [r7, #4]
 803b878:	68db      	ldr	r3, [r3, #12]
 803b87a:	2b00      	cmp	r3, #0
 803b87c:	d102      	bne.n	803b884 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 803b87e:	2300      	movs	r3, #0
 803b880:	73fb      	strb	r3, [r7, #15]
 803b882:	e008      	b.n	803b896 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 803b884:	687b      	ldr	r3, [r7, #4]
 803b886:	68db      	ldr	r3, [r3, #12]
 803b888:	2b02      	cmp	r3, #2
 803b88a:	d102      	bne.n	803b892 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 803b88c:	2301      	movs	r3, #1
 803b88e:	73fb      	strb	r3, [r7, #15]
 803b890:	e001      	b.n	803b896 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 803b892:	f7ee f955 	bl	8029b40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 803b896:	687b      	ldr	r3, [r7, #4]
 803b898:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b89c:	7bfa      	ldrb	r2, [r7, #15]
 803b89e:	4611      	mov	r1, r2
 803b8a0:	4618      	mov	r0, r3
 803b8a2:	f7fe fcfe 	bl	803a2a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 803b8a6:	687b      	ldr	r3, [r7, #4]
 803b8a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b8ac:	4618      	mov	r0, r3
 803b8ae:	f7fe fca6 	bl	803a1fe <USBD_LL_Reset>
}
 803b8b2:	bf00      	nop
 803b8b4:	3710      	adds	r7, #16
 803b8b6:	46bd      	mov	sp, r7
 803b8b8:	bd80      	pop	{r7, pc}
	...

0803b8bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b8bc:	b580      	push	{r7, lr}
 803b8be:	b082      	sub	sp, #8
 803b8c0:	af00      	add	r7, sp, #0
 803b8c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803b8c4:	687b      	ldr	r3, [r7, #4]
 803b8c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b8ca:	4618      	mov	r0, r3
 803b8cc:	f7fe fcf9 	bl	803a2c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 803b8d0:	687b      	ldr	r3, [r7, #4]
 803b8d2:	681b      	ldr	r3, [r3, #0]
 803b8d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803b8d8:	681b      	ldr	r3, [r3, #0]
 803b8da:	687a      	ldr	r2, [r7, #4]
 803b8dc:	6812      	ldr	r2, [r2, #0]
 803b8de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803b8e2:	f043 0301 	orr.w	r3, r3, #1
 803b8e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 803b8e8:	687b      	ldr	r3, [r7, #4]
 803b8ea:	6a1b      	ldr	r3, [r3, #32]
 803b8ec:	2b00      	cmp	r3, #0
 803b8ee:	d005      	beq.n	803b8fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803b8f0:	4b04      	ldr	r3, [pc, #16]	; (803b904 <HAL_PCD_SuspendCallback+0x48>)
 803b8f2:	691b      	ldr	r3, [r3, #16]
 803b8f4:	4a03      	ldr	r2, [pc, #12]	; (803b904 <HAL_PCD_SuspendCallback+0x48>)
 803b8f6:	f043 0306 	orr.w	r3, r3, #6
 803b8fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 803b8fc:	bf00      	nop
 803b8fe:	3708      	adds	r7, #8
 803b900:	46bd      	mov	sp, r7
 803b902:	bd80      	pop	{r7, pc}
 803b904:	e000ed00 	.word	0xe000ed00

0803b908 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b908:	b580      	push	{r7, lr}
 803b90a:	b082      	sub	sp, #8
 803b90c:	af00      	add	r7, sp, #0
 803b90e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 803b910:	687b      	ldr	r3, [r7, #4]
 803b912:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b916:	4618      	mov	r0, r3
 803b918:	f7fe fce9 	bl	803a2ee <USBD_LL_Resume>
}
 803b91c:	bf00      	nop
 803b91e:	3708      	adds	r7, #8
 803b920:	46bd      	mov	sp, r7
 803b922:	bd80      	pop	{r7, pc}

0803b924 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b924:	b580      	push	{r7, lr}
 803b926:	b082      	sub	sp, #8
 803b928:	af00      	add	r7, sp, #0
 803b92a:	6078      	str	r0, [r7, #4]
 803b92c:	460b      	mov	r3, r1
 803b92e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803b930:	687b      	ldr	r3, [r7, #4]
 803b932:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b936:	78fa      	ldrb	r2, [r7, #3]
 803b938:	4611      	mov	r1, r2
 803b93a:	4618      	mov	r0, r3
 803b93c:	f7fe fd41 	bl	803a3c2 <USBD_LL_IsoOUTIncomplete>
}
 803b940:	bf00      	nop
 803b942:	3708      	adds	r7, #8
 803b944:	46bd      	mov	sp, r7
 803b946:	bd80      	pop	{r7, pc}

0803b948 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b948:	b580      	push	{r7, lr}
 803b94a:	b082      	sub	sp, #8
 803b94c:	af00      	add	r7, sp, #0
 803b94e:	6078      	str	r0, [r7, #4]
 803b950:	460b      	mov	r3, r1
 803b952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803b954:	687b      	ldr	r3, [r7, #4]
 803b956:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b95a:	78fa      	ldrb	r2, [r7, #3]
 803b95c:	4611      	mov	r1, r2
 803b95e:	4618      	mov	r0, r3
 803b960:	f7fe fcfd 	bl	803a35e <USBD_LL_IsoINIncomplete>
}
 803b964:	bf00      	nop
 803b966:	3708      	adds	r7, #8
 803b968:	46bd      	mov	sp, r7
 803b96a:	bd80      	pop	{r7, pc}

0803b96c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b96c:	b580      	push	{r7, lr}
 803b96e:	b082      	sub	sp, #8
 803b970:	af00      	add	r7, sp, #0
 803b972:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 803b974:	687b      	ldr	r3, [r7, #4]
 803b976:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b97a:	4618      	mov	r0, r3
 803b97c:	f7fe fd53 	bl	803a426 <USBD_LL_DevConnected>
}
 803b980:	bf00      	nop
 803b982:	3708      	adds	r7, #8
 803b984:	46bd      	mov	sp, r7
 803b986:	bd80      	pop	{r7, pc}

0803b988 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b988:	b580      	push	{r7, lr}
 803b98a:	b082      	sub	sp, #8
 803b98c:	af00      	add	r7, sp, #0
 803b98e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 803b990:	687b      	ldr	r3, [r7, #4]
 803b992:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b996:	4618      	mov	r0, r3
 803b998:	f7fe fd50 	bl	803a43c <USBD_LL_DevDisconnected>
}
 803b99c:	bf00      	nop
 803b99e:	3708      	adds	r7, #8
 803b9a0:	46bd      	mov	sp, r7
 803b9a2:	bd80      	pop	{r7, pc}

0803b9a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 803b9a4:	b580      	push	{r7, lr}
 803b9a6:	b082      	sub	sp, #8
 803b9a8:	af00      	add	r7, sp, #0
 803b9aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 803b9ac:	687b      	ldr	r3, [r7, #4]
 803b9ae:	781b      	ldrb	r3, [r3, #0]
 803b9b0:	2b00      	cmp	r3, #0
 803b9b2:	d13e      	bne.n	803ba32 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 803b9b4:	4a21      	ldr	r2, [pc, #132]	; (803ba3c <USBD_LL_Init+0x98>)
 803b9b6:	687b      	ldr	r3, [r7, #4]
 803b9b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 803b9bc:	687b      	ldr	r3, [r7, #4]
 803b9be:	4a1f      	ldr	r2, [pc, #124]	; (803ba3c <USBD_LL_Init+0x98>)
 803b9c0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 803b9c4:	4b1d      	ldr	r3, [pc, #116]	; (803ba3c <USBD_LL_Init+0x98>)
 803b9c6:	4a1e      	ldr	r2, [pc, #120]	; (803ba40 <USBD_LL_Init+0x9c>)
 803b9c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 803b9ca:	4b1c      	ldr	r3, [pc, #112]	; (803ba3c <USBD_LL_Init+0x98>)
 803b9cc:	2209      	movs	r2, #9
 803b9ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803b9d0:	4b1a      	ldr	r3, [pc, #104]	; (803ba3c <USBD_LL_Init+0x98>)
 803b9d2:	2202      	movs	r2, #2
 803b9d4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 803b9d6:	4b19      	ldr	r3, [pc, #100]	; (803ba3c <USBD_LL_Init+0x98>)
 803b9d8:	2200      	movs	r2, #0
 803b9da:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803b9dc:	4b17      	ldr	r3, [pc, #92]	; (803ba3c <USBD_LL_Init+0x98>)
 803b9de:	2202      	movs	r2, #2
 803b9e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 803b9e2:	4b16      	ldr	r3, [pc, #88]	; (803ba3c <USBD_LL_Init+0x98>)
 803b9e4:	2200      	movs	r2, #0
 803b9e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 803b9e8:	4b14      	ldr	r3, [pc, #80]	; (803ba3c <USBD_LL_Init+0x98>)
 803b9ea:	2200      	movs	r2, #0
 803b9ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 803b9ee:	4b13      	ldr	r3, [pc, #76]	; (803ba3c <USBD_LL_Init+0x98>)
 803b9f0:	2200      	movs	r2, #0
 803b9f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 803b9f4:	4b11      	ldr	r3, [pc, #68]	; (803ba3c <USBD_LL_Init+0x98>)
 803b9f6:	2200      	movs	r2, #0
 803b9f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 803b9fa:	4b10      	ldr	r3, [pc, #64]	; (803ba3c <USBD_LL_Init+0x98>)
 803b9fc:	2200      	movs	r2, #0
 803b9fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 803ba00:	4b0e      	ldr	r3, [pc, #56]	; (803ba3c <USBD_LL_Init+0x98>)
 803ba02:	2200      	movs	r2, #0
 803ba04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803ba06:	480d      	ldr	r0, [pc, #52]	; (803ba3c <USBD_LL_Init+0x98>)
 803ba08:	f7f3 fe18 	bl	802f63c <HAL_PCD_Init>
 803ba0c:	4603      	mov	r3, r0
 803ba0e:	2b00      	cmp	r3, #0
 803ba10:	d001      	beq.n	803ba16 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 803ba12:	f7ee f895 	bl	8029b40 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803ba16:	2180      	movs	r1, #128	; 0x80
 803ba18:	4808      	ldr	r0, [pc, #32]	; (803ba3c <USBD_LL_Init+0x98>)
 803ba1a:	f7f5 f8a4 	bl	8030b66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 803ba1e:	2240      	movs	r2, #64	; 0x40
 803ba20:	2100      	movs	r1, #0
 803ba22:	4806      	ldr	r0, [pc, #24]	; (803ba3c <USBD_LL_Init+0x98>)
 803ba24:	f7f5 f858 	bl	8030ad8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 803ba28:	2280      	movs	r2, #128	; 0x80
 803ba2a:	2101      	movs	r1, #1
 803ba2c:	4803      	ldr	r0, [pc, #12]	; (803ba3c <USBD_LL_Init+0x98>)
 803ba2e:	f7f5 f853 	bl	8030ad8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 803ba32:	2300      	movs	r3, #0
}
 803ba34:	4618      	mov	r0, r3
 803ba36:	3708      	adds	r7, #8
 803ba38:	46bd      	mov	sp, r7
 803ba3a:	bd80      	pop	{r7, pc}
 803ba3c:	240260b0 	.word	0x240260b0
 803ba40:	40080000 	.word	0x40080000

0803ba44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 803ba44:	b580      	push	{r7, lr}
 803ba46:	b084      	sub	sp, #16
 803ba48:	af00      	add	r7, sp, #0
 803ba4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ba4c:	2300      	movs	r3, #0
 803ba4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ba50:	2300      	movs	r3, #0
 803ba52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 803ba54:	687b      	ldr	r3, [r7, #4]
 803ba56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ba5a:	4618      	mov	r0, r3
 803ba5c:	f7f3 ff12 	bl	802f884 <HAL_PCD_Start>
 803ba60:	4603      	mov	r3, r0
 803ba62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ba64:	7bfb      	ldrb	r3, [r7, #15]
 803ba66:	4618      	mov	r0, r3
 803ba68:	f000 f942 	bl	803bcf0 <USBD_Get_USB_Status>
 803ba6c:	4603      	mov	r3, r0
 803ba6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ba70:	7bbb      	ldrb	r3, [r7, #14]
}
 803ba72:	4618      	mov	r0, r3
 803ba74:	3710      	adds	r7, #16
 803ba76:	46bd      	mov	sp, r7
 803ba78:	bd80      	pop	{r7, pc}

0803ba7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 803ba7a:	b580      	push	{r7, lr}
 803ba7c:	b084      	sub	sp, #16
 803ba7e:	af00      	add	r7, sp, #0
 803ba80:	6078      	str	r0, [r7, #4]
 803ba82:	4608      	mov	r0, r1
 803ba84:	4611      	mov	r1, r2
 803ba86:	461a      	mov	r2, r3
 803ba88:	4603      	mov	r3, r0
 803ba8a:	70fb      	strb	r3, [r7, #3]
 803ba8c:	460b      	mov	r3, r1
 803ba8e:	70bb      	strb	r3, [r7, #2]
 803ba90:	4613      	mov	r3, r2
 803ba92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ba94:	2300      	movs	r3, #0
 803ba96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ba98:	2300      	movs	r3, #0
 803ba9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 803ba9c:	687b      	ldr	r3, [r7, #4]
 803ba9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803baa2:	78bb      	ldrb	r3, [r7, #2]
 803baa4:	883a      	ldrh	r2, [r7, #0]
 803baa6:	78f9      	ldrb	r1, [r7, #3]
 803baa8:	f7f4 fc10 	bl	80302cc <HAL_PCD_EP_Open>
 803baac:	4603      	mov	r3, r0
 803baae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bab0:	7bfb      	ldrb	r3, [r7, #15]
 803bab2:	4618      	mov	r0, r3
 803bab4:	f000 f91c 	bl	803bcf0 <USBD_Get_USB_Status>
 803bab8:	4603      	mov	r3, r0
 803baba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803babc:	7bbb      	ldrb	r3, [r7, #14]
}
 803babe:	4618      	mov	r0, r3
 803bac0:	3710      	adds	r7, #16
 803bac2:	46bd      	mov	sp, r7
 803bac4:	bd80      	pop	{r7, pc}

0803bac6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803bac6:	b580      	push	{r7, lr}
 803bac8:	b084      	sub	sp, #16
 803baca:	af00      	add	r7, sp, #0
 803bacc:	6078      	str	r0, [r7, #4]
 803bace:	460b      	mov	r3, r1
 803bad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bad2:	2300      	movs	r3, #0
 803bad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bad6:	2300      	movs	r3, #0
 803bad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 803bada:	687b      	ldr	r3, [r7, #4]
 803badc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bae0:	78fa      	ldrb	r2, [r7, #3]
 803bae2:	4611      	mov	r1, r2
 803bae4:	4618      	mov	r0, r3
 803bae6:	f7f4 fc59 	bl	803039c <HAL_PCD_EP_Close>
 803baea:	4603      	mov	r3, r0
 803baec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803baee:	7bfb      	ldrb	r3, [r7, #15]
 803baf0:	4618      	mov	r0, r3
 803baf2:	f000 f8fd 	bl	803bcf0 <USBD_Get_USB_Status>
 803baf6:	4603      	mov	r3, r0
 803baf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803bafa:	7bbb      	ldrb	r3, [r7, #14]
}
 803bafc:	4618      	mov	r0, r3
 803bafe:	3710      	adds	r7, #16
 803bb00:	46bd      	mov	sp, r7
 803bb02:	bd80      	pop	{r7, pc}

0803bb04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803bb04:	b580      	push	{r7, lr}
 803bb06:	b084      	sub	sp, #16
 803bb08:	af00      	add	r7, sp, #0
 803bb0a:	6078      	str	r0, [r7, #4]
 803bb0c:	460b      	mov	r3, r1
 803bb0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bb10:	2300      	movs	r3, #0
 803bb12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bb14:	2300      	movs	r3, #0
 803bb16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 803bb18:	687b      	ldr	r3, [r7, #4]
 803bb1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bb1e:	78fa      	ldrb	r2, [r7, #3]
 803bb20:	4611      	mov	r1, r2
 803bb22:	4618      	mov	r0, r3
 803bb24:	f7f4 fd31 	bl	803058a <HAL_PCD_EP_SetStall>
 803bb28:	4603      	mov	r3, r0
 803bb2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bb2c:	7bfb      	ldrb	r3, [r7, #15]
 803bb2e:	4618      	mov	r0, r3
 803bb30:	f000 f8de 	bl	803bcf0 <USBD_Get_USB_Status>
 803bb34:	4603      	mov	r3, r0
 803bb36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803bb38:	7bbb      	ldrb	r3, [r7, #14]
}
 803bb3a:	4618      	mov	r0, r3
 803bb3c:	3710      	adds	r7, #16
 803bb3e:	46bd      	mov	sp, r7
 803bb40:	bd80      	pop	{r7, pc}

0803bb42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803bb42:	b580      	push	{r7, lr}
 803bb44:	b084      	sub	sp, #16
 803bb46:	af00      	add	r7, sp, #0
 803bb48:	6078      	str	r0, [r7, #4]
 803bb4a:	460b      	mov	r3, r1
 803bb4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bb4e:	2300      	movs	r3, #0
 803bb50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bb52:	2300      	movs	r3, #0
 803bb54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803bb56:	687b      	ldr	r3, [r7, #4]
 803bb58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bb5c:	78fa      	ldrb	r2, [r7, #3]
 803bb5e:	4611      	mov	r1, r2
 803bb60:	4618      	mov	r0, r3
 803bb62:	f7f4 fd76 	bl	8030652 <HAL_PCD_EP_ClrStall>
 803bb66:	4603      	mov	r3, r0
 803bb68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bb6a:	7bfb      	ldrb	r3, [r7, #15]
 803bb6c:	4618      	mov	r0, r3
 803bb6e:	f000 f8bf 	bl	803bcf0 <USBD_Get_USB_Status>
 803bb72:	4603      	mov	r3, r0
 803bb74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803bb76:	7bbb      	ldrb	r3, [r7, #14]
}
 803bb78:	4618      	mov	r0, r3
 803bb7a:	3710      	adds	r7, #16
 803bb7c:	46bd      	mov	sp, r7
 803bb7e:	bd80      	pop	{r7, pc}

0803bb80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803bb80:	b480      	push	{r7}
 803bb82:	b085      	sub	sp, #20
 803bb84:	af00      	add	r7, sp, #0
 803bb86:	6078      	str	r0, [r7, #4]
 803bb88:	460b      	mov	r3, r1
 803bb8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 803bb8c:	687b      	ldr	r3, [r7, #4]
 803bb8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bb92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 803bb94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803bb98:	2b00      	cmp	r3, #0
 803bb9a:	da0b      	bge.n	803bbb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 803bb9c:	78fb      	ldrb	r3, [r7, #3]
 803bb9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803bba2:	68f9      	ldr	r1, [r7, #12]
 803bba4:	4613      	mov	r3, r2
 803bba6:	00db      	lsls	r3, r3, #3
 803bba8:	4413      	add	r3, r2
 803bbaa:	009b      	lsls	r3, r3, #2
 803bbac:	440b      	add	r3, r1
 803bbae:	333e      	adds	r3, #62	; 0x3e
 803bbb0:	781b      	ldrb	r3, [r3, #0]
 803bbb2:	e00b      	b.n	803bbcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 803bbb4:	78fb      	ldrb	r3, [r7, #3]
 803bbb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803bbba:	68f9      	ldr	r1, [r7, #12]
 803bbbc:	4613      	mov	r3, r2
 803bbbe:	00db      	lsls	r3, r3, #3
 803bbc0:	4413      	add	r3, r2
 803bbc2:	009b      	lsls	r3, r3, #2
 803bbc4:	440b      	add	r3, r1
 803bbc6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 803bbca:	781b      	ldrb	r3, [r3, #0]
  }
}
 803bbcc:	4618      	mov	r0, r3
 803bbce:	3714      	adds	r7, #20
 803bbd0:	46bd      	mov	sp, r7
 803bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bbd6:	4770      	bx	lr

0803bbd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 803bbd8:	b580      	push	{r7, lr}
 803bbda:	b084      	sub	sp, #16
 803bbdc:	af00      	add	r7, sp, #0
 803bbde:	6078      	str	r0, [r7, #4]
 803bbe0:	460b      	mov	r3, r1
 803bbe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bbe4:	2300      	movs	r3, #0
 803bbe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bbe8:	2300      	movs	r3, #0
 803bbea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 803bbec:	687b      	ldr	r3, [r7, #4]
 803bbee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bbf2:	78fa      	ldrb	r2, [r7, #3]
 803bbf4:	4611      	mov	r1, r2
 803bbf6:	4618      	mov	r0, r3
 803bbf8:	f7f4 fb43 	bl	8030282 <HAL_PCD_SetAddress>
 803bbfc:	4603      	mov	r3, r0
 803bbfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bc00:	7bfb      	ldrb	r3, [r7, #15]
 803bc02:	4618      	mov	r0, r3
 803bc04:	f000 f874 	bl	803bcf0 <USBD_Get_USB_Status>
 803bc08:	4603      	mov	r3, r0
 803bc0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803bc0c:	7bbb      	ldrb	r3, [r7, #14]
}
 803bc0e:	4618      	mov	r0, r3
 803bc10:	3710      	adds	r7, #16
 803bc12:	46bd      	mov	sp, r7
 803bc14:	bd80      	pop	{r7, pc}

0803bc16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803bc16:	b580      	push	{r7, lr}
 803bc18:	b086      	sub	sp, #24
 803bc1a:	af00      	add	r7, sp, #0
 803bc1c:	60f8      	str	r0, [r7, #12]
 803bc1e:	607a      	str	r2, [r7, #4]
 803bc20:	603b      	str	r3, [r7, #0]
 803bc22:	460b      	mov	r3, r1
 803bc24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bc26:	2300      	movs	r3, #0
 803bc28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bc2a:	2300      	movs	r3, #0
 803bc2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 803bc2e:	68fb      	ldr	r3, [r7, #12]
 803bc30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803bc34:	7af9      	ldrb	r1, [r7, #11]
 803bc36:	683b      	ldr	r3, [r7, #0]
 803bc38:	687a      	ldr	r2, [r7, #4]
 803bc3a:	f7f4 fc5c 	bl	80304f6 <HAL_PCD_EP_Transmit>
 803bc3e:	4603      	mov	r3, r0
 803bc40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bc42:	7dfb      	ldrb	r3, [r7, #23]
 803bc44:	4618      	mov	r0, r3
 803bc46:	f000 f853 	bl	803bcf0 <USBD_Get_USB_Status>
 803bc4a:	4603      	mov	r3, r0
 803bc4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803bc4e:	7dbb      	ldrb	r3, [r7, #22]
}
 803bc50:	4618      	mov	r0, r3
 803bc52:	3718      	adds	r7, #24
 803bc54:	46bd      	mov	sp, r7
 803bc56:	bd80      	pop	{r7, pc}

0803bc58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803bc58:	b580      	push	{r7, lr}
 803bc5a:	b086      	sub	sp, #24
 803bc5c:	af00      	add	r7, sp, #0
 803bc5e:	60f8      	str	r0, [r7, #12]
 803bc60:	607a      	str	r2, [r7, #4]
 803bc62:	603b      	str	r3, [r7, #0]
 803bc64:	460b      	mov	r3, r1
 803bc66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bc68:	2300      	movs	r3, #0
 803bc6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bc6c:	2300      	movs	r3, #0
 803bc6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 803bc70:	68fb      	ldr	r3, [r7, #12]
 803bc72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803bc76:	7af9      	ldrb	r1, [r7, #11]
 803bc78:	683b      	ldr	r3, [r7, #0]
 803bc7a:	687a      	ldr	r2, [r7, #4]
 803bc7c:	f7f4 fbd8 	bl	8030430 <HAL_PCD_EP_Receive>
 803bc80:	4603      	mov	r3, r0
 803bc82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bc84:	7dfb      	ldrb	r3, [r7, #23]
 803bc86:	4618      	mov	r0, r3
 803bc88:	f000 f832 	bl	803bcf0 <USBD_Get_USB_Status>
 803bc8c:	4603      	mov	r3, r0
 803bc8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803bc90:	7dbb      	ldrb	r3, [r7, #22]
}
 803bc92:	4618      	mov	r0, r3
 803bc94:	3718      	adds	r7, #24
 803bc96:	46bd      	mov	sp, r7
 803bc98:	bd80      	pop	{r7, pc}

0803bc9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803bc9a:	b580      	push	{r7, lr}
 803bc9c:	b082      	sub	sp, #8
 803bc9e:	af00      	add	r7, sp, #0
 803bca0:	6078      	str	r0, [r7, #4]
 803bca2:	460b      	mov	r3, r1
 803bca4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 803bca6:	687b      	ldr	r3, [r7, #4]
 803bca8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bcac:	78fa      	ldrb	r2, [r7, #3]
 803bcae:	4611      	mov	r1, r2
 803bcb0:	4618      	mov	r0, r3
 803bcb2:	f7f4 fc08 	bl	80304c6 <HAL_PCD_EP_GetRxCount>
 803bcb6:	4603      	mov	r3, r0
}
 803bcb8:	4618      	mov	r0, r3
 803bcba:	3708      	adds	r7, #8
 803bcbc:	46bd      	mov	sp, r7
 803bcbe:	bd80      	pop	{r7, pc}

0803bcc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 803bcc0:	b480      	push	{r7}
 803bcc2:	b083      	sub	sp, #12
 803bcc4:	af00      	add	r7, sp, #0
 803bcc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 803bcc8:	4b03      	ldr	r3, [pc, #12]	; (803bcd8 <USBD_static_malloc+0x18>)
}
 803bcca:	4618      	mov	r0, r3
 803bccc:	370c      	adds	r7, #12
 803bcce:	46bd      	mov	sp, r7
 803bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bcd4:	4770      	bx	lr
 803bcd6:	bf00      	nop
 803bcd8:	240265bc 	.word	0x240265bc

0803bcdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 803bcdc:	b480      	push	{r7}
 803bcde:	b083      	sub	sp, #12
 803bce0:	af00      	add	r7, sp, #0
 803bce2:	6078      	str	r0, [r7, #4]

}
 803bce4:	bf00      	nop
 803bce6:	370c      	adds	r7, #12
 803bce8:	46bd      	mov	sp, r7
 803bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bcee:	4770      	bx	lr

0803bcf0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 803bcf0:	b480      	push	{r7}
 803bcf2:	b085      	sub	sp, #20
 803bcf4:	af00      	add	r7, sp, #0
 803bcf6:	4603      	mov	r3, r0
 803bcf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bcfa:	2300      	movs	r3, #0
 803bcfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 803bcfe:	79fb      	ldrb	r3, [r7, #7]
 803bd00:	2b03      	cmp	r3, #3
 803bd02:	d817      	bhi.n	803bd34 <USBD_Get_USB_Status+0x44>
 803bd04:	a201      	add	r2, pc, #4	; (adr r2, 803bd0c <USBD_Get_USB_Status+0x1c>)
 803bd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803bd0a:	bf00      	nop
 803bd0c:	0803bd1d 	.word	0x0803bd1d
 803bd10:	0803bd23 	.word	0x0803bd23
 803bd14:	0803bd29 	.word	0x0803bd29
 803bd18:	0803bd2f 	.word	0x0803bd2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 803bd1c:	2300      	movs	r3, #0
 803bd1e:	73fb      	strb	r3, [r7, #15]
    break;
 803bd20:	e00b      	b.n	803bd3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 803bd22:	2303      	movs	r3, #3
 803bd24:	73fb      	strb	r3, [r7, #15]
    break;
 803bd26:	e008      	b.n	803bd3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 803bd28:	2301      	movs	r3, #1
 803bd2a:	73fb      	strb	r3, [r7, #15]
    break;
 803bd2c:	e005      	b.n	803bd3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 803bd2e:	2303      	movs	r3, #3
 803bd30:	73fb      	strb	r3, [r7, #15]
    break;
 803bd32:	e002      	b.n	803bd3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 803bd34:	2303      	movs	r3, #3
 803bd36:	73fb      	strb	r3, [r7, #15]
    break;
 803bd38:	bf00      	nop
  }
  return usb_status;
 803bd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 803bd3c:	4618      	mov	r0, r3
 803bd3e:	3714      	adds	r7, #20
 803bd40:	46bd      	mov	sp, r7
 803bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bd46:	4770      	bx	lr

0803bd48 <_ZdlPvj>:
 803bd48:	f000 b817 	b.w	803bd7a <_ZdlPv>

0803bd4c <_Znwj>:
 803bd4c:	2801      	cmp	r0, #1
 803bd4e:	bf38      	it	cc
 803bd50:	2001      	movcc	r0, #1
 803bd52:	b510      	push	{r4, lr}
 803bd54:	4604      	mov	r4, r0
 803bd56:	4620      	mov	r0, r4
 803bd58:	f000 f87c 	bl	803be54 <malloc>
 803bd5c:	b930      	cbnz	r0, 803bd6c <_Znwj+0x20>
 803bd5e:	f000 f80f 	bl	803bd80 <_ZSt15get_new_handlerv>
 803bd62:	b908      	cbnz	r0, 803bd68 <_Znwj+0x1c>
 803bd64:	f000 f814 	bl	803bd90 <abort>
 803bd68:	4780      	blx	r0
 803bd6a:	e7f4      	b.n	803bd56 <_Znwj+0xa>
 803bd6c:	bd10      	pop	{r4, pc}

0803bd6e <_ZSt17__throw_bad_allocv>:
 803bd6e:	b508      	push	{r3, lr}
 803bd70:	f000 f80e 	bl	803bd90 <abort>

0803bd74 <_ZSt20__throw_length_errorPKc>:
 803bd74:	b508      	push	{r3, lr}
 803bd76:	f000 f80b 	bl	803bd90 <abort>

0803bd7a <_ZdlPv>:
 803bd7a:	f000 b873 	b.w	803be64 <free>
	...

0803bd80 <_ZSt15get_new_handlerv>:
 803bd80:	4b02      	ldr	r3, [pc, #8]	; (803bd8c <_ZSt15get_new_handlerv+0xc>)
 803bd82:	6818      	ldr	r0, [r3, #0]
 803bd84:	f3bf 8f5b 	dmb	ish
 803bd88:	4770      	bx	lr
 803bd8a:	bf00      	nop
 803bd8c:	240267dc 	.word	0x240267dc

0803bd90 <abort>:
 803bd90:	b508      	push	{r3, lr}
 803bd92:	2006      	movs	r0, #6
 803bd94:	f000 fca4 	bl	803c6e0 <raise>
 803bd98:	2001      	movs	r0, #1
 803bd9a:	f7ee f90f 	bl	8029fbc <_exit>
	...

0803bda0 <__assert_func>:
 803bda0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803bda2:	4614      	mov	r4, r2
 803bda4:	461a      	mov	r2, r3
 803bda6:	4b09      	ldr	r3, [pc, #36]	; (803bdcc <__assert_func+0x2c>)
 803bda8:	681b      	ldr	r3, [r3, #0]
 803bdaa:	4605      	mov	r5, r0
 803bdac:	68d8      	ldr	r0, [r3, #12]
 803bdae:	b14c      	cbz	r4, 803bdc4 <__assert_func+0x24>
 803bdb0:	4b07      	ldr	r3, [pc, #28]	; (803bdd0 <__assert_func+0x30>)
 803bdb2:	9100      	str	r1, [sp, #0]
 803bdb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803bdb8:	4906      	ldr	r1, [pc, #24]	; (803bdd4 <__assert_func+0x34>)
 803bdba:	462b      	mov	r3, r5
 803bdbc:	f000 f814 	bl	803bde8 <fiprintf>
 803bdc0:	f7ff ffe6 	bl	803bd90 <abort>
 803bdc4:	4b04      	ldr	r3, [pc, #16]	; (803bdd8 <__assert_func+0x38>)
 803bdc6:	461c      	mov	r4, r3
 803bdc8:	e7f3      	b.n	803bdb2 <__assert_func+0x12>
 803bdca:	bf00      	nop
 803bdcc:	24000104 	.word	0x24000104
 803bdd0:	080585a0 	.word	0x080585a0
 803bdd4:	080585ad 	.word	0x080585ad
 803bdd8:	080585db 	.word	0x080585db

0803bddc <__errno>:
 803bddc:	4b01      	ldr	r3, [pc, #4]	; (803bde4 <__errno+0x8>)
 803bdde:	6818      	ldr	r0, [r3, #0]
 803bde0:	4770      	bx	lr
 803bde2:	bf00      	nop
 803bde4:	24000104 	.word	0x24000104

0803bde8 <fiprintf>:
 803bde8:	b40e      	push	{r1, r2, r3}
 803bdea:	b503      	push	{r0, r1, lr}
 803bdec:	4601      	mov	r1, r0
 803bdee:	ab03      	add	r3, sp, #12
 803bdf0:	4805      	ldr	r0, [pc, #20]	; (803be08 <fiprintf+0x20>)
 803bdf2:	f853 2b04 	ldr.w	r2, [r3], #4
 803bdf6:	6800      	ldr	r0, [r0, #0]
 803bdf8:	9301      	str	r3, [sp, #4]
 803bdfa:	f000 f975 	bl	803c0e8 <_vfiprintf_r>
 803bdfe:	b002      	add	sp, #8
 803be00:	f85d eb04 	ldr.w	lr, [sp], #4
 803be04:	b003      	add	sp, #12
 803be06:	4770      	bx	lr
 803be08:	24000104 	.word	0x24000104

0803be0c <__libc_init_array>:
 803be0c:	b570      	push	{r4, r5, r6, lr}
 803be0e:	4d0d      	ldr	r5, [pc, #52]	; (803be44 <__libc_init_array+0x38>)
 803be10:	4c0d      	ldr	r4, [pc, #52]	; (803be48 <__libc_init_array+0x3c>)
 803be12:	1b64      	subs	r4, r4, r5
 803be14:	10a4      	asrs	r4, r4, #2
 803be16:	2600      	movs	r6, #0
 803be18:	42a6      	cmp	r6, r4
 803be1a:	d109      	bne.n	803be30 <__libc_init_array+0x24>
 803be1c:	4d0b      	ldr	r5, [pc, #44]	; (803be4c <__libc_init_array+0x40>)
 803be1e:	4c0c      	ldr	r4, [pc, #48]	; (803be50 <__libc_init_array+0x44>)
 803be20:	f001 f812 	bl	803ce48 <_init>
 803be24:	1b64      	subs	r4, r4, r5
 803be26:	10a4      	asrs	r4, r4, #2
 803be28:	2600      	movs	r6, #0
 803be2a:	42a6      	cmp	r6, r4
 803be2c:	d105      	bne.n	803be3a <__libc_init_array+0x2e>
 803be2e:	bd70      	pop	{r4, r5, r6, pc}
 803be30:	f855 3b04 	ldr.w	r3, [r5], #4
 803be34:	4798      	blx	r3
 803be36:	3601      	adds	r6, #1
 803be38:	e7ee      	b.n	803be18 <__libc_init_array+0xc>
 803be3a:	f855 3b04 	ldr.w	r3, [r5], #4
 803be3e:	4798      	blx	r3
 803be40:	3601      	adds	r6, #1
 803be42:	e7f2      	b.n	803be2a <__libc_init_array+0x1e>
 803be44:	0805867c 	.word	0x0805867c
 803be48:	0805867c 	.word	0x0805867c
 803be4c:	0805867c 	.word	0x0805867c
 803be50:	08058684 	.word	0x08058684

0803be54 <malloc>:
 803be54:	4b02      	ldr	r3, [pc, #8]	; (803be60 <malloc+0xc>)
 803be56:	4601      	mov	r1, r0
 803be58:	6818      	ldr	r0, [r3, #0]
 803be5a:	f000 b8a7 	b.w	803bfac <_malloc_r>
 803be5e:	bf00      	nop
 803be60:	24000104 	.word	0x24000104

0803be64 <free>:
 803be64:	4b02      	ldr	r3, [pc, #8]	; (803be70 <free+0xc>)
 803be66:	4601      	mov	r1, r0
 803be68:	6818      	ldr	r0, [r3, #0]
 803be6a:	f000 b833 	b.w	803bed4 <_free_r>
 803be6e:	bf00      	nop
 803be70:	24000104 	.word	0x24000104

0803be74 <memcpy>:
 803be74:	440a      	add	r2, r1
 803be76:	4291      	cmp	r1, r2
 803be78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 803be7c:	d100      	bne.n	803be80 <memcpy+0xc>
 803be7e:	4770      	bx	lr
 803be80:	b510      	push	{r4, lr}
 803be82:	f811 4b01 	ldrb.w	r4, [r1], #1
 803be86:	f803 4f01 	strb.w	r4, [r3, #1]!
 803be8a:	4291      	cmp	r1, r2
 803be8c:	d1f9      	bne.n	803be82 <memcpy+0xe>
 803be8e:	bd10      	pop	{r4, pc}

0803be90 <memmove>:
 803be90:	4288      	cmp	r0, r1
 803be92:	b510      	push	{r4, lr}
 803be94:	eb01 0402 	add.w	r4, r1, r2
 803be98:	d902      	bls.n	803bea0 <memmove+0x10>
 803be9a:	4284      	cmp	r4, r0
 803be9c:	4623      	mov	r3, r4
 803be9e:	d807      	bhi.n	803beb0 <memmove+0x20>
 803bea0:	1e43      	subs	r3, r0, #1
 803bea2:	42a1      	cmp	r1, r4
 803bea4:	d008      	beq.n	803beb8 <memmove+0x28>
 803bea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 803beaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 803beae:	e7f8      	b.n	803bea2 <memmove+0x12>
 803beb0:	4402      	add	r2, r0
 803beb2:	4601      	mov	r1, r0
 803beb4:	428a      	cmp	r2, r1
 803beb6:	d100      	bne.n	803beba <memmove+0x2a>
 803beb8:	bd10      	pop	{r4, pc}
 803beba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803bebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803bec2:	e7f7      	b.n	803beb4 <memmove+0x24>

0803bec4 <memset>:
 803bec4:	4402      	add	r2, r0
 803bec6:	4603      	mov	r3, r0
 803bec8:	4293      	cmp	r3, r2
 803beca:	d100      	bne.n	803bece <memset+0xa>
 803becc:	4770      	bx	lr
 803bece:	f803 1b01 	strb.w	r1, [r3], #1
 803bed2:	e7f9      	b.n	803bec8 <memset+0x4>

0803bed4 <_free_r>:
 803bed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803bed6:	2900      	cmp	r1, #0
 803bed8:	d044      	beq.n	803bf64 <_free_r+0x90>
 803beda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803bede:	9001      	str	r0, [sp, #4]
 803bee0:	2b00      	cmp	r3, #0
 803bee2:	f1a1 0404 	sub.w	r4, r1, #4
 803bee6:	bfb8      	it	lt
 803bee8:	18e4      	addlt	r4, r4, r3
 803beea:	f000 fef5 	bl	803ccd8 <__malloc_lock>
 803beee:	4a1e      	ldr	r2, [pc, #120]	; (803bf68 <_free_r+0x94>)
 803bef0:	9801      	ldr	r0, [sp, #4]
 803bef2:	6813      	ldr	r3, [r2, #0]
 803bef4:	b933      	cbnz	r3, 803bf04 <_free_r+0x30>
 803bef6:	6063      	str	r3, [r4, #4]
 803bef8:	6014      	str	r4, [r2, #0]
 803befa:	b003      	add	sp, #12
 803befc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803bf00:	f000 bef0 	b.w	803cce4 <__malloc_unlock>
 803bf04:	42a3      	cmp	r3, r4
 803bf06:	d908      	bls.n	803bf1a <_free_r+0x46>
 803bf08:	6825      	ldr	r5, [r4, #0]
 803bf0a:	1961      	adds	r1, r4, r5
 803bf0c:	428b      	cmp	r3, r1
 803bf0e:	bf01      	itttt	eq
 803bf10:	6819      	ldreq	r1, [r3, #0]
 803bf12:	685b      	ldreq	r3, [r3, #4]
 803bf14:	1949      	addeq	r1, r1, r5
 803bf16:	6021      	streq	r1, [r4, #0]
 803bf18:	e7ed      	b.n	803bef6 <_free_r+0x22>
 803bf1a:	461a      	mov	r2, r3
 803bf1c:	685b      	ldr	r3, [r3, #4]
 803bf1e:	b10b      	cbz	r3, 803bf24 <_free_r+0x50>
 803bf20:	42a3      	cmp	r3, r4
 803bf22:	d9fa      	bls.n	803bf1a <_free_r+0x46>
 803bf24:	6811      	ldr	r1, [r2, #0]
 803bf26:	1855      	adds	r5, r2, r1
 803bf28:	42a5      	cmp	r5, r4
 803bf2a:	d10b      	bne.n	803bf44 <_free_r+0x70>
 803bf2c:	6824      	ldr	r4, [r4, #0]
 803bf2e:	4421      	add	r1, r4
 803bf30:	1854      	adds	r4, r2, r1
 803bf32:	42a3      	cmp	r3, r4
 803bf34:	6011      	str	r1, [r2, #0]
 803bf36:	d1e0      	bne.n	803befa <_free_r+0x26>
 803bf38:	681c      	ldr	r4, [r3, #0]
 803bf3a:	685b      	ldr	r3, [r3, #4]
 803bf3c:	6053      	str	r3, [r2, #4]
 803bf3e:	4421      	add	r1, r4
 803bf40:	6011      	str	r1, [r2, #0]
 803bf42:	e7da      	b.n	803befa <_free_r+0x26>
 803bf44:	d902      	bls.n	803bf4c <_free_r+0x78>
 803bf46:	230c      	movs	r3, #12
 803bf48:	6003      	str	r3, [r0, #0]
 803bf4a:	e7d6      	b.n	803befa <_free_r+0x26>
 803bf4c:	6825      	ldr	r5, [r4, #0]
 803bf4e:	1961      	adds	r1, r4, r5
 803bf50:	428b      	cmp	r3, r1
 803bf52:	bf04      	itt	eq
 803bf54:	6819      	ldreq	r1, [r3, #0]
 803bf56:	685b      	ldreq	r3, [r3, #4]
 803bf58:	6063      	str	r3, [r4, #4]
 803bf5a:	bf04      	itt	eq
 803bf5c:	1949      	addeq	r1, r1, r5
 803bf5e:	6021      	streq	r1, [r4, #0]
 803bf60:	6054      	str	r4, [r2, #4]
 803bf62:	e7ca      	b.n	803befa <_free_r+0x26>
 803bf64:	b003      	add	sp, #12
 803bf66:	bd30      	pop	{r4, r5, pc}
 803bf68:	240267e0 	.word	0x240267e0

0803bf6c <sbrk_aligned>:
 803bf6c:	b570      	push	{r4, r5, r6, lr}
 803bf6e:	4e0e      	ldr	r6, [pc, #56]	; (803bfa8 <sbrk_aligned+0x3c>)
 803bf70:	460c      	mov	r4, r1
 803bf72:	6831      	ldr	r1, [r6, #0]
 803bf74:	4605      	mov	r5, r0
 803bf76:	b911      	cbnz	r1, 803bf7e <sbrk_aligned+0x12>
 803bf78:	f000 fb7a 	bl	803c670 <_sbrk_r>
 803bf7c:	6030      	str	r0, [r6, #0]
 803bf7e:	4621      	mov	r1, r4
 803bf80:	4628      	mov	r0, r5
 803bf82:	f000 fb75 	bl	803c670 <_sbrk_r>
 803bf86:	1c43      	adds	r3, r0, #1
 803bf88:	d00a      	beq.n	803bfa0 <sbrk_aligned+0x34>
 803bf8a:	1cc4      	adds	r4, r0, #3
 803bf8c:	f024 0403 	bic.w	r4, r4, #3
 803bf90:	42a0      	cmp	r0, r4
 803bf92:	d007      	beq.n	803bfa4 <sbrk_aligned+0x38>
 803bf94:	1a21      	subs	r1, r4, r0
 803bf96:	4628      	mov	r0, r5
 803bf98:	f000 fb6a 	bl	803c670 <_sbrk_r>
 803bf9c:	3001      	adds	r0, #1
 803bf9e:	d101      	bne.n	803bfa4 <sbrk_aligned+0x38>
 803bfa0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803bfa4:	4620      	mov	r0, r4
 803bfa6:	bd70      	pop	{r4, r5, r6, pc}
 803bfa8:	240267e4 	.word	0x240267e4

0803bfac <_malloc_r>:
 803bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803bfb0:	1ccd      	adds	r5, r1, #3
 803bfb2:	f025 0503 	bic.w	r5, r5, #3
 803bfb6:	3508      	adds	r5, #8
 803bfb8:	2d0c      	cmp	r5, #12
 803bfba:	bf38      	it	cc
 803bfbc:	250c      	movcc	r5, #12
 803bfbe:	2d00      	cmp	r5, #0
 803bfc0:	4607      	mov	r7, r0
 803bfc2:	db01      	blt.n	803bfc8 <_malloc_r+0x1c>
 803bfc4:	42a9      	cmp	r1, r5
 803bfc6:	d905      	bls.n	803bfd4 <_malloc_r+0x28>
 803bfc8:	230c      	movs	r3, #12
 803bfca:	603b      	str	r3, [r7, #0]
 803bfcc:	2600      	movs	r6, #0
 803bfce:	4630      	mov	r0, r6
 803bfd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803bfd4:	4e2e      	ldr	r6, [pc, #184]	; (803c090 <_malloc_r+0xe4>)
 803bfd6:	f000 fe7f 	bl	803ccd8 <__malloc_lock>
 803bfda:	6833      	ldr	r3, [r6, #0]
 803bfdc:	461c      	mov	r4, r3
 803bfde:	bb34      	cbnz	r4, 803c02e <_malloc_r+0x82>
 803bfe0:	4629      	mov	r1, r5
 803bfe2:	4638      	mov	r0, r7
 803bfe4:	f7ff ffc2 	bl	803bf6c <sbrk_aligned>
 803bfe8:	1c43      	adds	r3, r0, #1
 803bfea:	4604      	mov	r4, r0
 803bfec:	d14d      	bne.n	803c08a <_malloc_r+0xde>
 803bfee:	6834      	ldr	r4, [r6, #0]
 803bff0:	4626      	mov	r6, r4
 803bff2:	2e00      	cmp	r6, #0
 803bff4:	d140      	bne.n	803c078 <_malloc_r+0xcc>
 803bff6:	6823      	ldr	r3, [r4, #0]
 803bff8:	4631      	mov	r1, r6
 803bffa:	4638      	mov	r0, r7
 803bffc:	eb04 0803 	add.w	r8, r4, r3
 803c000:	f000 fb36 	bl	803c670 <_sbrk_r>
 803c004:	4580      	cmp	r8, r0
 803c006:	d13a      	bne.n	803c07e <_malloc_r+0xd2>
 803c008:	6821      	ldr	r1, [r4, #0]
 803c00a:	3503      	adds	r5, #3
 803c00c:	1a6d      	subs	r5, r5, r1
 803c00e:	f025 0503 	bic.w	r5, r5, #3
 803c012:	3508      	adds	r5, #8
 803c014:	2d0c      	cmp	r5, #12
 803c016:	bf38      	it	cc
 803c018:	250c      	movcc	r5, #12
 803c01a:	4629      	mov	r1, r5
 803c01c:	4638      	mov	r0, r7
 803c01e:	f7ff ffa5 	bl	803bf6c <sbrk_aligned>
 803c022:	3001      	adds	r0, #1
 803c024:	d02b      	beq.n	803c07e <_malloc_r+0xd2>
 803c026:	6823      	ldr	r3, [r4, #0]
 803c028:	442b      	add	r3, r5
 803c02a:	6023      	str	r3, [r4, #0]
 803c02c:	e00e      	b.n	803c04c <_malloc_r+0xa0>
 803c02e:	6822      	ldr	r2, [r4, #0]
 803c030:	1b52      	subs	r2, r2, r5
 803c032:	d41e      	bmi.n	803c072 <_malloc_r+0xc6>
 803c034:	2a0b      	cmp	r2, #11
 803c036:	d916      	bls.n	803c066 <_malloc_r+0xba>
 803c038:	1961      	adds	r1, r4, r5
 803c03a:	42a3      	cmp	r3, r4
 803c03c:	6025      	str	r5, [r4, #0]
 803c03e:	bf18      	it	ne
 803c040:	6059      	strne	r1, [r3, #4]
 803c042:	6863      	ldr	r3, [r4, #4]
 803c044:	bf08      	it	eq
 803c046:	6031      	streq	r1, [r6, #0]
 803c048:	5162      	str	r2, [r4, r5]
 803c04a:	604b      	str	r3, [r1, #4]
 803c04c:	4638      	mov	r0, r7
 803c04e:	f104 060b 	add.w	r6, r4, #11
 803c052:	f000 fe47 	bl	803cce4 <__malloc_unlock>
 803c056:	f026 0607 	bic.w	r6, r6, #7
 803c05a:	1d23      	adds	r3, r4, #4
 803c05c:	1af2      	subs	r2, r6, r3
 803c05e:	d0b6      	beq.n	803bfce <_malloc_r+0x22>
 803c060:	1b9b      	subs	r3, r3, r6
 803c062:	50a3      	str	r3, [r4, r2]
 803c064:	e7b3      	b.n	803bfce <_malloc_r+0x22>
 803c066:	6862      	ldr	r2, [r4, #4]
 803c068:	42a3      	cmp	r3, r4
 803c06a:	bf0c      	ite	eq
 803c06c:	6032      	streq	r2, [r6, #0]
 803c06e:	605a      	strne	r2, [r3, #4]
 803c070:	e7ec      	b.n	803c04c <_malloc_r+0xa0>
 803c072:	4623      	mov	r3, r4
 803c074:	6864      	ldr	r4, [r4, #4]
 803c076:	e7b2      	b.n	803bfde <_malloc_r+0x32>
 803c078:	4634      	mov	r4, r6
 803c07a:	6876      	ldr	r6, [r6, #4]
 803c07c:	e7b9      	b.n	803bff2 <_malloc_r+0x46>
 803c07e:	230c      	movs	r3, #12
 803c080:	603b      	str	r3, [r7, #0]
 803c082:	4638      	mov	r0, r7
 803c084:	f000 fe2e 	bl	803cce4 <__malloc_unlock>
 803c088:	e7a1      	b.n	803bfce <_malloc_r+0x22>
 803c08a:	6025      	str	r5, [r4, #0]
 803c08c:	e7de      	b.n	803c04c <_malloc_r+0xa0>
 803c08e:	bf00      	nop
 803c090:	240267e0 	.word	0x240267e0

0803c094 <__sfputc_r>:
 803c094:	6893      	ldr	r3, [r2, #8]
 803c096:	3b01      	subs	r3, #1
 803c098:	2b00      	cmp	r3, #0
 803c09a:	b410      	push	{r4}
 803c09c:	6093      	str	r3, [r2, #8]
 803c09e:	da08      	bge.n	803c0b2 <__sfputc_r+0x1e>
 803c0a0:	6994      	ldr	r4, [r2, #24]
 803c0a2:	42a3      	cmp	r3, r4
 803c0a4:	db01      	blt.n	803c0aa <__sfputc_r+0x16>
 803c0a6:	290a      	cmp	r1, #10
 803c0a8:	d103      	bne.n	803c0b2 <__sfputc_r+0x1e>
 803c0aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 803c0ae:	f000 bb33 	b.w	803c718 <__swbuf_r>
 803c0b2:	6813      	ldr	r3, [r2, #0]
 803c0b4:	1c58      	adds	r0, r3, #1
 803c0b6:	6010      	str	r0, [r2, #0]
 803c0b8:	7019      	strb	r1, [r3, #0]
 803c0ba:	4608      	mov	r0, r1
 803c0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 803c0c0:	4770      	bx	lr

0803c0c2 <__sfputs_r>:
 803c0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803c0c4:	4606      	mov	r6, r0
 803c0c6:	460f      	mov	r7, r1
 803c0c8:	4614      	mov	r4, r2
 803c0ca:	18d5      	adds	r5, r2, r3
 803c0cc:	42ac      	cmp	r4, r5
 803c0ce:	d101      	bne.n	803c0d4 <__sfputs_r+0x12>
 803c0d0:	2000      	movs	r0, #0
 803c0d2:	e007      	b.n	803c0e4 <__sfputs_r+0x22>
 803c0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c0d8:	463a      	mov	r2, r7
 803c0da:	4630      	mov	r0, r6
 803c0dc:	f7ff ffda 	bl	803c094 <__sfputc_r>
 803c0e0:	1c43      	adds	r3, r0, #1
 803c0e2:	d1f3      	bne.n	803c0cc <__sfputs_r+0xa>
 803c0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803c0e8 <_vfiprintf_r>:
 803c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803c0ec:	460d      	mov	r5, r1
 803c0ee:	b09d      	sub	sp, #116	; 0x74
 803c0f0:	4614      	mov	r4, r2
 803c0f2:	4698      	mov	r8, r3
 803c0f4:	4606      	mov	r6, r0
 803c0f6:	b118      	cbz	r0, 803c100 <_vfiprintf_r+0x18>
 803c0f8:	6983      	ldr	r3, [r0, #24]
 803c0fa:	b90b      	cbnz	r3, 803c100 <_vfiprintf_r+0x18>
 803c0fc:	f000 fce6 	bl	803cacc <__sinit>
 803c100:	4b89      	ldr	r3, [pc, #548]	; (803c328 <_vfiprintf_r+0x240>)
 803c102:	429d      	cmp	r5, r3
 803c104:	d11b      	bne.n	803c13e <_vfiprintf_r+0x56>
 803c106:	6875      	ldr	r5, [r6, #4]
 803c108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c10a:	07d9      	lsls	r1, r3, #31
 803c10c:	d405      	bmi.n	803c11a <_vfiprintf_r+0x32>
 803c10e:	89ab      	ldrh	r3, [r5, #12]
 803c110:	059a      	lsls	r2, r3, #22
 803c112:	d402      	bmi.n	803c11a <_vfiprintf_r+0x32>
 803c114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c116:	f000 fd77 	bl	803cc08 <__retarget_lock_acquire_recursive>
 803c11a:	89ab      	ldrh	r3, [r5, #12]
 803c11c:	071b      	lsls	r3, r3, #28
 803c11e:	d501      	bpl.n	803c124 <_vfiprintf_r+0x3c>
 803c120:	692b      	ldr	r3, [r5, #16]
 803c122:	b9eb      	cbnz	r3, 803c160 <_vfiprintf_r+0x78>
 803c124:	4629      	mov	r1, r5
 803c126:	4630      	mov	r0, r6
 803c128:	f000 fb48 	bl	803c7bc <__swsetup_r>
 803c12c:	b1c0      	cbz	r0, 803c160 <_vfiprintf_r+0x78>
 803c12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c130:	07dc      	lsls	r4, r3, #31
 803c132:	d50e      	bpl.n	803c152 <_vfiprintf_r+0x6a>
 803c134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c138:	b01d      	add	sp, #116	; 0x74
 803c13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803c13e:	4b7b      	ldr	r3, [pc, #492]	; (803c32c <_vfiprintf_r+0x244>)
 803c140:	429d      	cmp	r5, r3
 803c142:	d101      	bne.n	803c148 <_vfiprintf_r+0x60>
 803c144:	68b5      	ldr	r5, [r6, #8]
 803c146:	e7df      	b.n	803c108 <_vfiprintf_r+0x20>
 803c148:	4b79      	ldr	r3, [pc, #484]	; (803c330 <_vfiprintf_r+0x248>)
 803c14a:	429d      	cmp	r5, r3
 803c14c:	bf08      	it	eq
 803c14e:	68f5      	ldreq	r5, [r6, #12]
 803c150:	e7da      	b.n	803c108 <_vfiprintf_r+0x20>
 803c152:	89ab      	ldrh	r3, [r5, #12]
 803c154:	0598      	lsls	r0, r3, #22
 803c156:	d4ed      	bmi.n	803c134 <_vfiprintf_r+0x4c>
 803c158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c15a:	f000 fd56 	bl	803cc0a <__retarget_lock_release_recursive>
 803c15e:	e7e9      	b.n	803c134 <_vfiprintf_r+0x4c>
 803c160:	2300      	movs	r3, #0
 803c162:	9309      	str	r3, [sp, #36]	; 0x24
 803c164:	2320      	movs	r3, #32
 803c166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803c16a:	f8cd 800c 	str.w	r8, [sp, #12]
 803c16e:	2330      	movs	r3, #48	; 0x30
 803c170:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803c334 <_vfiprintf_r+0x24c>
 803c174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803c178:	f04f 0901 	mov.w	r9, #1
 803c17c:	4623      	mov	r3, r4
 803c17e:	469a      	mov	sl, r3
 803c180:	f813 2b01 	ldrb.w	r2, [r3], #1
 803c184:	b10a      	cbz	r2, 803c18a <_vfiprintf_r+0xa2>
 803c186:	2a25      	cmp	r2, #37	; 0x25
 803c188:	d1f9      	bne.n	803c17e <_vfiprintf_r+0x96>
 803c18a:	ebba 0b04 	subs.w	fp, sl, r4
 803c18e:	d00b      	beq.n	803c1a8 <_vfiprintf_r+0xc0>
 803c190:	465b      	mov	r3, fp
 803c192:	4622      	mov	r2, r4
 803c194:	4629      	mov	r1, r5
 803c196:	4630      	mov	r0, r6
 803c198:	f7ff ff93 	bl	803c0c2 <__sfputs_r>
 803c19c:	3001      	adds	r0, #1
 803c19e:	f000 80aa 	beq.w	803c2f6 <_vfiprintf_r+0x20e>
 803c1a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803c1a4:	445a      	add	r2, fp
 803c1a6:	9209      	str	r2, [sp, #36]	; 0x24
 803c1a8:	f89a 3000 	ldrb.w	r3, [sl]
 803c1ac:	2b00      	cmp	r3, #0
 803c1ae:	f000 80a2 	beq.w	803c2f6 <_vfiprintf_r+0x20e>
 803c1b2:	2300      	movs	r3, #0
 803c1b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803c1b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803c1bc:	f10a 0a01 	add.w	sl, sl, #1
 803c1c0:	9304      	str	r3, [sp, #16]
 803c1c2:	9307      	str	r3, [sp, #28]
 803c1c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803c1c8:	931a      	str	r3, [sp, #104]	; 0x68
 803c1ca:	4654      	mov	r4, sl
 803c1cc:	2205      	movs	r2, #5
 803c1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c1d2:	4858      	ldr	r0, [pc, #352]	; (803c334 <_vfiprintf_r+0x24c>)
 803c1d4:	f7e4 f884 	bl	80202e0 <memchr>
 803c1d8:	9a04      	ldr	r2, [sp, #16]
 803c1da:	b9d8      	cbnz	r0, 803c214 <_vfiprintf_r+0x12c>
 803c1dc:	06d1      	lsls	r1, r2, #27
 803c1de:	bf44      	itt	mi
 803c1e0:	2320      	movmi	r3, #32
 803c1e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803c1e6:	0713      	lsls	r3, r2, #28
 803c1e8:	bf44      	itt	mi
 803c1ea:	232b      	movmi	r3, #43	; 0x2b
 803c1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803c1f0:	f89a 3000 	ldrb.w	r3, [sl]
 803c1f4:	2b2a      	cmp	r3, #42	; 0x2a
 803c1f6:	d015      	beq.n	803c224 <_vfiprintf_r+0x13c>
 803c1f8:	9a07      	ldr	r2, [sp, #28]
 803c1fa:	4654      	mov	r4, sl
 803c1fc:	2000      	movs	r0, #0
 803c1fe:	f04f 0c0a 	mov.w	ip, #10
 803c202:	4621      	mov	r1, r4
 803c204:	f811 3b01 	ldrb.w	r3, [r1], #1
 803c208:	3b30      	subs	r3, #48	; 0x30
 803c20a:	2b09      	cmp	r3, #9
 803c20c:	d94e      	bls.n	803c2ac <_vfiprintf_r+0x1c4>
 803c20e:	b1b0      	cbz	r0, 803c23e <_vfiprintf_r+0x156>
 803c210:	9207      	str	r2, [sp, #28]
 803c212:	e014      	b.n	803c23e <_vfiprintf_r+0x156>
 803c214:	eba0 0308 	sub.w	r3, r0, r8
 803c218:	fa09 f303 	lsl.w	r3, r9, r3
 803c21c:	4313      	orrs	r3, r2
 803c21e:	9304      	str	r3, [sp, #16]
 803c220:	46a2      	mov	sl, r4
 803c222:	e7d2      	b.n	803c1ca <_vfiprintf_r+0xe2>
 803c224:	9b03      	ldr	r3, [sp, #12]
 803c226:	1d19      	adds	r1, r3, #4
 803c228:	681b      	ldr	r3, [r3, #0]
 803c22a:	9103      	str	r1, [sp, #12]
 803c22c:	2b00      	cmp	r3, #0
 803c22e:	bfbb      	ittet	lt
 803c230:	425b      	neglt	r3, r3
 803c232:	f042 0202 	orrlt.w	r2, r2, #2
 803c236:	9307      	strge	r3, [sp, #28]
 803c238:	9307      	strlt	r3, [sp, #28]
 803c23a:	bfb8      	it	lt
 803c23c:	9204      	strlt	r2, [sp, #16]
 803c23e:	7823      	ldrb	r3, [r4, #0]
 803c240:	2b2e      	cmp	r3, #46	; 0x2e
 803c242:	d10c      	bne.n	803c25e <_vfiprintf_r+0x176>
 803c244:	7863      	ldrb	r3, [r4, #1]
 803c246:	2b2a      	cmp	r3, #42	; 0x2a
 803c248:	d135      	bne.n	803c2b6 <_vfiprintf_r+0x1ce>
 803c24a:	9b03      	ldr	r3, [sp, #12]
 803c24c:	1d1a      	adds	r2, r3, #4
 803c24e:	681b      	ldr	r3, [r3, #0]
 803c250:	9203      	str	r2, [sp, #12]
 803c252:	2b00      	cmp	r3, #0
 803c254:	bfb8      	it	lt
 803c256:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803c25a:	3402      	adds	r4, #2
 803c25c:	9305      	str	r3, [sp, #20]
 803c25e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803c344 <_vfiprintf_r+0x25c>
 803c262:	7821      	ldrb	r1, [r4, #0]
 803c264:	2203      	movs	r2, #3
 803c266:	4650      	mov	r0, sl
 803c268:	f7e4 f83a 	bl	80202e0 <memchr>
 803c26c:	b140      	cbz	r0, 803c280 <_vfiprintf_r+0x198>
 803c26e:	2340      	movs	r3, #64	; 0x40
 803c270:	eba0 000a 	sub.w	r0, r0, sl
 803c274:	fa03 f000 	lsl.w	r0, r3, r0
 803c278:	9b04      	ldr	r3, [sp, #16]
 803c27a:	4303      	orrs	r3, r0
 803c27c:	3401      	adds	r4, #1
 803c27e:	9304      	str	r3, [sp, #16]
 803c280:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c284:	482c      	ldr	r0, [pc, #176]	; (803c338 <_vfiprintf_r+0x250>)
 803c286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803c28a:	2206      	movs	r2, #6
 803c28c:	f7e4 f828 	bl	80202e0 <memchr>
 803c290:	2800      	cmp	r0, #0
 803c292:	d03f      	beq.n	803c314 <_vfiprintf_r+0x22c>
 803c294:	4b29      	ldr	r3, [pc, #164]	; (803c33c <_vfiprintf_r+0x254>)
 803c296:	bb1b      	cbnz	r3, 803c2e0 <_vfiprintf_r+0x1f8>
 803c298:	9b03      	ldr	r3, [sp, #12]
 803c29a:	3307      	adds	r3, #7
 803c29c:	f023 0307 	bic.w	r3, r3, #7
 803c2a0:	3308      	adds	r3, #8
 803c2a2:	9303      	str	r3, [sp, #12]
 803c2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803c2a6:	443b      	add	r3, r7
 803c2a8:	9309      	str	r3, [sp, #36]	; 0x24
 803c2aa:	e767      	b.n	803c17c <_vfiprintf_r+0x94>
 803c2ac:	fb0c 3202 	mla	r2, ip, r2, r3
 803c2b0:	460c      	mov	r4, r1
 803c2b2:	2001      	movs	r0, #1
 803c2b4:	e7a5      	b.n	803c202 <_vfiprintf_r+0x11a>
 803c2b6:	2300      	movs	r3, #0
 803c2b8:	3401      	adds	r4, #1
 803c2ba:	9305      	str	r3, [sp, #20]
 803c2bc:	4619      	mov	r1, r3
 803c2be:	f04f 0c0a 	mov.w	ip, #10
 803c2c2:	4620      	mov	r0, r4
 803c2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 803c2c8:	3a30      	subs	r2, #48	; 0x30
 803c2ca:	2a09      	cmp	r2, #9
 803c2cc:	d903      	bls.n	803c2d6 <_vfiprintf_r+0x1ee>
 803c2ce:	2b00      	cmp	r3, #0
 803c2d0:	d0c5      	beq.n	803c25e <_vfiprintf_r+0x176>
 803c2d2:	9105      	str	r1, [sp, #20]
 803c2d4:	e7c3      	b.n	803c25e <_vfiprintf_r+0x176>
 803c2d6:	fb0c 2101 	mla	r1, ip, r1, r2
 803c2da:	4604      	mov	r4, r0
 803c2dc:	2301      	movs	r3, #1
 803c2de:	e7f0      	b.n	803c2c2 <_vfiprintf_r+0x1da>
 803c2e0:	ab03      	add	r3, sp, #12
 803c2e2:	9300      	str	r3, [sp, #0]
 803c2e4:	462a      	mov	r2, r5
 803c2e6:	4b16      	ldr	r3, [pc, #88]	; (803c340 <_vfiprintf_r+0x258>)
 803c2e8:	a904      	add	r1, sp, #16
 803c2ea:	4630      	mov	r0, r6
 803c2ec:	f3af 8000 	nop.w
 803c2f0:	4607      	mov	r7, r0
 803c2f2:	1c78      	adds	r0, r7, #1
 803c2f4:	d1d6      	bne.n	803c2a4 <_vfiprintf_r+0x1bc>
 803c2f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c2f8:	07d9      	lsls	r1, r3, #31
 803c2fa:	d405      	bmi.n	803c308 <_vfiprintf_r+0x220>
 803c2fc:	89ab      	ldrh	r3, [r5, #12]
 803c2fe:	059a      	lsls	r2, r3, #22
 803c300:	d402      	bmi.n	803c308 <_vfiprintf_r+0x220>
 803c302:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c304:	f000 fc81 	bl	803cc0a <__retarget_lock_release_recursive>
 803c308:	89ab      	ldrh	r3, [r5, #12]
 803c30a:	065b      	lsls	r3, r3, #25
 803c30c:	f53f af12 	bmi.w	803c134 <_vfiprintf_r+0x4c>
 803c310:	9809      	ldr	r0, [sp, #36]	; 0x24
 803c312:	e711      	b.n	803c138 <_vfiprintf_r+0x50>
 803c314:	ab03      	add	r3, sp, #12
 803c316:	9300      	str	r3, [sp, #0]
 803c318:	462a      	mov	r2, r5
 803c31a:	4b09      	ldr	r3, [pc, #36]	; (803c340 <_vfiprintf_r+0x258>)
 803c31c:	a904      	add	r1, sp, #16
 803c31e:	4630      	mov	r0, r6
 803c320:	f000 f880 	bl	803c424 <_printf_i>
 803c324:	e7e4      	b.n	803c2f0 <_vfiprintf_r+0x208>
 803c326:	bf00      	nop
 803c328:	08058634 	.word	0x08058634
 803c32c:	08058654 	.word	0x08058654
 803c330:	08058614 	.word	0x08058614
 803c334:	080585e0 	.word	0x080585e0
 803c338:	080585ea 	.word	0x080585ea
 803c33c:	00000000 	.word	0x00000000
 803c340:	0803c0c3 	.word	0x0803c0c3
 803c344:	080585e6 	.word	0x080585e6

0803c348 <_printf_common>:
 803c348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803c34c:	4616      	mov	r6, r2
 803c34e:	4699      	mov	r9, r3
 803c350:	688a      	ldr	r2, [r1, #8]
 803c352:	690b      	ldr	r3, [r1, #16]
 803c354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803c358:	4293      	cmp	r3, r2
 803c35a:	bfb8      	it	lt
 803c35c:	4613      	movlt	r3, r2
 803c35e:	6033      	str	r3, [r6, #0]
 803c360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803c364:	4607      	mov	r7, r0
 803c366:	460c      	mov	r4, r1
 803c368:	b10a      	cbz	r2, 803c36e <_printf_common+0x26>
 803c36a:	3301      	adds	r3, #1
 803c36c:	6033      	str	r3, [r6, #0]
 803c36e:	6823      	ldr	r3, [r4, #0]
 803c370:	0699      	lsls	r1, r3, #26
 803c372:	bf42      	ittt	mi
 803c374:	6833      	ldrmi	r3, [r6, #0]
 803c376:	3302      	addmi	r3, #2
 803c378:	6033      	strmi	r3, [r6, #0]
 803c37a:	6825      	ldr	r5, [r4, #0]
 803c37c:	f015 0506 	ands.w	r5, r5, #6
 803c380:	d106      	bne.n	803c390 <_printf_common+0x48>
 803c382:	f104 0a19 	add.w	sl, r4, #25
 803c386:	68e3      	ldr	r3, [r4, #12]
 803c388:	6832      	ldr	r2, [r6, #0]
 803c38a:	1a9b      	subs	r3, r3, r2
 803c38c:	42ab      	cmp	r3, r5
 803c38e:	dc26      	bgt.n	803c3de <_printf_common+0x96>
 803c390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803c394:	1e13      	subs	r3, r2, #0
 803c396:	6822      	ldr	r2, [r4, #0]
 803c398:	bf18      	it	ne
 803c39a:	2301      	movne	r3, #1
 803c39c:	0692      	lsls	r2, r2, #26
 803c39e:	d42b      	bmi.n	803c3f8 <_printf_common+0xb0>
 803c3a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803c3a4:	4649      	mov	r1, r9
 803c3a6:	4638      	mov	r0, r7
 803c3a8:	47c0      	blx	r8
 803c3aa:	3001      	adds	r0, #1
 803c3ac:	d01e      	beq.n	803c3ec <_printf_common+0xa4>
 803c3ae:	6823      	ldr	r3, [r4, #0]
 803c3b0:	68e5      	ldr	r5, [r4, #12]
 803c3b2:	6832      	ldr	r2, [r6, #0]
 803c3b4:	f003 0306 	and.w	r3, r3, #6
 803c3b8:	2b04      	cmp	r3, #4
 803c3ba:	bf08      	it	eq
 803c3bc:	1aad      	subeq	r5, r5, r2
 803c3be:	68a3      	ldr	r3, [r4, #8]
 803c3c0:	6922      	ldr	r2, [r4, #16]
 803c3c2:	bf0c      	ite	eq
 803c3c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803c3c8:	2500      	movne	r5, #0
 803c3ca:	4293      	cmp	r3, r2
 803c3cc:	bfc4      	itt	gt
 803c3ce:	1a9b      	subgt	r3, r3, r2
 803c3d0:	18ed      	addgt	r5, r5, r3
 803c3d2:	2600      	movs	r6, #0
 803c3d4:	341a      	adds	r4, #26
 803c3d6:	42b5      	cmp	r5, r6
 803c3d8:	d11a      	bne.n	803c410 <_printf_common+0xc8>
 803c3da:	2000      	movs	r0, #0
 803c3dc:	e008      	b.n	803c3f0 <_printf_common+0xa8>
 803c3de:	2301      	movs	r3, #1
 803c3e0:	4652      	mov	r2, sl
 803c3e2:	4649      	mov	r1, r9
 803c3e4:	4638      	mov	r0, r7
 803c3e6:	47c0      	blx	r8
 803c3e8:	3001      	adds	r0, #1
 803c3ea:	d103      	bne.n	803c3f4 <_printf_common+0xac>
 803c3ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c3f4:	3501      	adds	r5, #1
 803c3f6:	e7c6      	b.n	803c386 <_printf_common+0x3e>
 803c3f8:	18e1      	adds	r1, r4, r3
 803c3fa:	1c5a      	adds	r2, r3, #1
 803c3fc:	2030      	movs	r0, #48	; 0x30
 803c3fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803c402:	4422      	add	r2, r4
 803c404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803c408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803c40c:	3302      	adds	r3, #2
 803c40e:	e7c7      	b.n	803c3a0 <_printf_common+0x58>
 803c410:	2301      	movs	r3, #1
 803c412:	4622      	mov	r2, r4
 803c414:	4649      	mov	r1, r9
 803c416:	4638      	mov	r0, r7
 803c418:	47c0      	blx	r8
 803c41a:	3001      	adds	r0, #1
 803c41c:	d0e6      	beq.n	803c3ec <_printf_common+0xa4>
 803c41e:	3601      	adds	r6, #1
 803c420:	e7d9      	b.n	803c3d6 <_printf_common+0x8e>
	...

0803c424 <_printf_i>:
 803c424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803c428:	7e0f      	ldrb	r7, [r1, #24]
 803c42a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803c42c:	2f78      	cmp	r7, #120	; 0x78
 803c42e:	4691      	mov	r9, r2
 803c430:	4680      	mov	r8, r0
 803c432:	460c      	mov	r4, r1
 803c434:	469a      	mov	sl, r3
 803c436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803c43a:	d807      	bhi.n	803c44c <_printf_i+0x28>
 803c43c:	2f62      	cmp	r7, #98	; 0x62
 803c43e:	d80a      	bhi.n	803c456 <_printf_i+0x32>
 803c440:	2f00      	cmp	r7, #0
 803c442:	f000 80d8 	beq.w	803c5f6 <_printf_i+0x1d2>
 803c446:	2f58      	cmp	r7, #88	; 0x58
 803c448:	f000 80a3 	beq.w	803c592 <_printf_i+0x16e>
 803c44c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803c450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803c454:	e03a      	b.n	803c4cc <_printf_i+0xa8>
 803c456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803c45a:	2b15      	cmp	r3, #21
 803c45c:	d8f6      	bhi.n	803c44c <_printf_i+0x28>
 803c45e:	a101      	add	r1, pc, #4	; (adr r1, 803c464 <_printf_i+0x40>)
 803c460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803c464:	0803c4bd 	.word	0x0803c4bd
 803c468:	0803c4d1 	.word	0x0803c4d1
 803c46c:	0803c44d 	.word	0x0803c44d
 803c470:	0803c44d 	.word	0x0803c44d
 803c474:	0803c44d 	.word	0x0803c44d
 803c478:	0803c44d 	.word	0x0803c44d
 803c47c:	0803c4d1 	.word	0x0803c4d1
 803c480:	0803c44d 	.word	0x0803c44d
 803c484:	0803c44d 	.word	0x0803c44d
 803c488:	0803c44d 	.word	0x0803c44d
 803c48c:	0803c44d 	.word	0x0803c44d
 803c490:	0803c5dd 	.word	0x0803c5dd
 803c494:	0803c501 	.word	0x0803c501
 803c498:	0803c5bf 	.word	0x0803c5bf
 803c49c:	0803c44d 	.word	0x0803c44d
 803c4a0:	0803c44d 	.word	0x0803c44d
 803c4a4:	0803c5ff 	.word	0x0803c5ff
 803c4a8:	0803c44d 	.word	0x0803c44d
 803c4ac:	0803c501 	.word	0x0803c501
 803c4b0:	0803c44d 	.word	0x0803c44d
 803c4b4:	0803c44d 	.word	0x0803c44d
 803c4b8:	0803c5c7 	.word	0x0803c5c7
 803c4bc:	682b      	ldr	r3, [r5, #0]
 803c4be:	1d1a      	adds	r2, r3, #4
 803c4c0:	681b      	ldr	r3, [r3, #0]
 803c4c2:	602a      	str	r2, [r5, #0]
 803c4c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803c4c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803c4cc:	2301      	movs	r3, #1
 803c4ce:	e0a3      	b.n	803c618 <_printf_i+0x1f4>
 803c4d0:	6820      	ldr	r0, [r4, #0]
 803c4d2:	6829      	ldr	r1, [r5, #0]
 803c4d4:	0606      	lsls	r6, r0, #24
 803c4d6:	f101 0304 	add.w	r3, r1, #4
 803c4da:	d50a      	bpl.n	803c4f2 <_printf_i+0xce>
 803c4dc:	680e      	ldr	r6, [r1, #0]
 803c4de:	602b      	str	r3, [r5, #0]
 803c4e0:	2e00      	cmp	r6, #0
 803c4e2:	da03      	bge.n	803c4ec <_printf_i+0xc8>
 803c4e4:	232d      	movs	r3, #45	; 0x2d
 803c4e6:	4276      	negs	r6, r6
 803c4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803c4ec:	485e      	ldr	r0, [pc, #376]	; (803c668 <_printf_i+0x244>)
 803c4ee:	230a      	movs	r3, #10
 803c4f0:	e019      	b.n	803c526 <_printf_i+0x102>
 803c4f2:	680e      	ldr	r6, [r1, #0]
 803c4f4:	602b      	str	r3, [r5, #0]
 803c4f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 803c4fa:	bf18      	it	ne
 803c4fc:	b236      	sxthne	r6, r6
 803c4fe:	e7ef      	b.n	803c4e0 <_printf_i+0xbc>
 803c500:	682b      	ldr	r3, [r5, #0]
 803c502:	6820      	ldr	r0, [r4, #0]
 803c504:	1d19      	adds	r1, r3, #4
 803c506:	6029      	str	r1, [r5, #0]
 803c508:	0601      	lsls	r1, r0, #24
 803c50a:	d501      	bpl.n	803c510 <_printf_i+0xec>
 803c50c:	681e      	ldr	r6, [r3, #0]
 803c50e:	e002      	b.n	803c516 <_printf_i+0xf2>
 803c510:	0646      	lsls	r6, r0, #25
 803c512:	d5fb      	bpl.n	803c50c <_printf_i+0xe8>
 803c514:	881e      	ldrh	r6, [r3, #0]
 803c516:	4854      	ldr	r0, [pc, #336]	; (803c668 <_printf_i+0x244>)
 803c518:	2f6f      	cmp	r7, #111	; 0x6f
 803c51a:	bf0c      	ite	eq
 803c51c:	2308      	moveq	r3, #8
 803c51e:	230a      	movne	r3, #10
 803c520:	2100      	movs	r1, #0
 803c522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803c526:	6865      	ldr	r5, [r4, #4]
 803c528:	60a5      	str	r5, [r4, #8]
 803c52a:	2d00      	cmp	r5, #0
 803c52c:	bfa2      	ittt	ge
 803c52e:	6821      	ldrge	r1, [r4, #0]
 803c530:	f021 0104 	bicge.w	r1, r1, #4
 803c534:	6021      	strge	r1, [r4, #0]
 803c536:	b90e      	cbnz	r6, 803c53c <_printf_i+0x118>
 803c538:	2d00      	cmp	r5, #0
 803c53a:	d04d      	beq.n	803c5d8 <_printf_i+0x1b4>
 803c53c:	4615      	mov	r5, r2
 803c53e:	fbb6 f1f3 	udiv	r1, r6, r3
 803c542:	fb03 6711 	mls	r7, r3, r1, r6
 803c546:	5dc7      	ldrb	r7, [r0, r7]
 803c548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803c54c:	4637      	mov	r7, r6
 803c54e:	42bb      	cmp	r3, r7
 803c550:	460e      	mov	r6, r1
 803c552:	d9f4      	bls.n	803c53e <_printf_i+0x11a>
 803c554:	2b08      	cmp	r3, #8
 803c556:	d10b      	bne.n	803c570 <_printf_i+0x14c>
 803c558:	6823      	ldr	r3, [r4, #0]
 803c55a:	07de      	lsls	r6, r3, #31
 803c55c:	d508      	bpl.n	803c570 <_printf_i+0x14c>
 803c55e:	6923      	ldr	r3, [r4, #16]
 803c560:	6861      	ldr	r1, [r4, #4]
 803c562:	4299      	cmp	r1, r3
 803c564:	bfde      	ittt	le
 803c566:	2330      	movle	r3, #48	; 0x30
 803c568:	f805 3c01 	strble.w	r3, [r5, #-1]
 803c56c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 803c570:	1b52      	subs	r2, r2, r5
 803c572:	6122      	str	r2, [r4, #16]
 803c574:	f8cd a000 	str.w	sl, [sp]
 803c578:	464b      	mov	r3, r9
 803c57a:	aa03      	add	r2, sp, #12
 803c57c:	4621      	mov	r1, r4
 803c57e:	4640      	mov	r0, r8
 803c580:	f7ff fee2 	bl	803c348 <_printf_common>
 803c584:	3001      	adds	r0, #1
 803c586:	d14c      	bne.n	803c622 <_printf_i+0x1fe>
 803c588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c58c:	b004      	add	sp, #16
 803c58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c592:	4835      	ldr	r0, [pc, #212]	; (803c668 <_printf_i+0x244>)
 803c594:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 803c598:	6829      	ldr	r1, [r5, #0]
 803c59a:	6823      	ldr	r3, [r4, #0]
 803c59c:	f851 6b04 	ldr.w	r6, [r1], #4
 803c5a0:	6029      	str	r1, [r5, #0]
 803c5a2:	061d      	lsls	r5, r3, #24
 803c5a4:	d514      	bpl.n	803c5d0 <_printf_i+0x1ac>
 803c5a6:	07df      	lsls	r7, r3, #31
 803c5a8:	bf44      	itt	mi
 803c5aa:	f043 0320 	orrmi.w	r3, r3, #32
 803c5ae:	6023      	strmi	r3, [r4, #0]
 803c5b0:	b91e      	cbnz	r6, 803c5ba <_printf_i+0x196>
 803c5b2:	6823      	ldr	r3, [r4, #0]
 803c5b4:	f023 0320 	bic.w	r3, r3, #32
 803c5b8:	6023      	str	r3, [r4, #0]
 803c5ba:	2310      	movs	r3, #16
 803c5bc:	e7b0      	b.n	803c520 <_printf_i+0xfc>
 803c5be:	6823      	ldr	r3, [r4, #0]
 803c5c0:	f043 0320 	orr.w	r3, r3, #32
 803c5c4:	6023      	str	r3, [r4, #0]
 803c5c6:	2378      	movs	r3, #120	; 0x78
 803c5c8:	4828      	ldr	r0, [pc, #160]	; (803c66c <_printf_i+0x248>)
 803c5ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803c5ce:	e7e3      	b.n	803c598 <_printf_i+0x174>
 803c5d0:	0659      	lsls	r1, r3, #25
 803c5d2:	bf48      	it	mi
 803c5d4:	b2b6      	uxthmi	r6, r6
 803c5d6:	e7e6      	b.n	803c5a6 <_printf_i+0x182>
 803c5d8:	4615      	mov	r5, r2
 803c5da:	e7bb      	b.n	803c554 <_printf_i+0x130>
 803c5dc:	682b      	ldr	r3, [r5, #0]
 803c5de:	6826      	ldr	r6, [r4, #0]
 803c5e0:	6961      	ldr	r1, [r4, #20]
 803c5e2:	1d18      	adds	r0, r3, #4
 803c5e4:	6028      	str	r0, [r5, #0]
 803c5e6:	0635      	lsls	r5, r6, #24
 803c5e8:	681b      	ldr	r3, [r3, #0]
 803c5ea:	d501      	bpl.n	803c5f0 <_printf_i+0x1cc>
 803c5ec:	6019      	str	r1, [r3, #0]
 803c5ee:	e002      	b.n	803c5f6 <_printf_i+0x1d2>
 803c5f0:	0670      	lsls	r0, r6, #25
 803c5f2:	d5fb      	bpl.n	803c5ec <_printf_i+0x1c8>
 803c5f4:	8019      	strh	r1, [r3, #0]
 803c5f6:	2300      	movs	r3, #0
 803c5f8:	6123      	str	r3, [r4, #16]
 803c5fa:	4615      	mov	r5, r2
 803c5fc:	e7ba      	b.n	803c574 <_printf_i+0x150>
 803c5fe:	682b      	ldr	r3, [r5, #0]
 803c600:	1d1a      	adds	r2, r3, #4
 803c602:	602a      	str	r2, [r5, #0]
 803c604:	681d      	ldr	r5, [r3, #0]
 803c606:	6862      	ldr	r2, [r4, #4]
 803c608:	2100      	movs	r1, #0
 803c60a:	4628      	mov	r0, r5
 803c60c:	f7e3 fe68 	bl	80202e0 <memchr>
 803c610:	b108      	cbz	r0, 803c616 <_printf_i+0x1f2>
 803c612:	1b40      	subs	r0, r0, r5
 803c614:	6060      	str	r0, [r4, #4]
 803c616:	6863      	ldr	r3, [r4, #4]
 803c618:	6123      	str	r3, [r4, #16]
 803c61a:	2300      	movs	r3, #0
 803c61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803c620:	e7a8      	b.n	803c574 <_printf_i+0x150>
 803c622:	6923      	ldr	r3, [r4, #16]
 803c624:	462a      	mov	r2, r5
 803c626:	4649      	mov	r1, r9
 803c628:	4640      	mov	r0, r8
 803c62a:	47d0      	blx	sl
 803c62c:	3001      	adds	r0, #1
 803c62e:	d0ab      	beq.n	803c588 <_printf_i+0x164>
 803c630:	6823      	ldr	r3, [r4, #0]
 803c632:	079b      	lsls	r3, r3, #30
 803c634:	d413      	bmi.n	803c65e <_printf_i+0x23a>
 803c636:	68e0      	ldr	r0, [r4, #12]
 803c638:	9b03      	ldr	r3, [sp, #12]
 803c63a:	4298      	cmp	r0, r3
 803c63c:	bfb8      	it	lt
 803c63e:	4618      	movlt	r0, r3
 803c640:	e7a4      	b.n	803c58c <_printf_i+0x168>
 803c642:	2301      	movs	r3, #1
 803c644:	4632      	mov	r2, r6
 803c646:	4649      	mov	r1, r9
 803c648:	4640      	mov	r0, r8
 803c64a:	47d0      	blx	sl
 803c64c:	3001      	adds	r0, #1
 803c64e:	d09b      	beq.n	803c588 <_printf_i+0x164>
 803c650:	3501      	adds	r5, #1
 803c652:	68e3      	ldr	r3, [r4, #12]
 803c654:	9903      	ldr	r1, [sp, #12]
 803c656:	1a5b      	subs	r3, r3, r1
 803c658:	42ab      	cmp	r3, r5
 803c65a:	dcf2      	bgt.n	803c642 <_printf_i+0x21e>
 803c65c:	e7eb      	b.n	803c636 <_printf_i+0x212>
 803c65e:	2500      	movs	r5, #0
 803c660:	f104 0619 	add.w	r6, r4, #25
 803c664:	e7f5      	b.n	803c652 <_printf_i+0x22e>
 803c666:	bf00      	nop
 803c668:	080585f1 	.word	0x080585f1
 803c66c:	08058602 	.word	0x08058602

0803c670 <_sbrk_r>:
 803c670:	b538      	push	{r3, r4, r5, lr}
 803c672:	4d06      	ldr	r5, [pc, #24]	; (803c68c <_sbrk_r+0x1c>)
 803c674:	2300      	movs	r3, #0
 803c676:	4604      	mov	r4, r0
 803c678:	4608      	mov	r0, r1
 803c67a:	602b      	str	r3, [r5, #0]
 803c67c:	f7ed fd16 	bl	802a0ac <_sbrk>
 803c680:	1c43      	adds	r3, r0, #1
 803c682:	d102      	bne.n	803c68a <_sbrk_r+0x1a>
 803c684:	682b      	ldr	r3, [r5, #0]
 803c686:	b103      	cbz	r3, 803c68a <_sbrk_r+0x1a>
 803c688:	6023      	str	r3, [r4, #0]
 803c68a:	bd38      	pop	{r3, r4, r5, pc}
 803c68c:	240267ec 	.word	0x240267ec

0803c690 <_raise_r>:
 803c690:	291f      	cmp	r1, #31
 803c692:	b538      	push	{r3, r4, r5, lr}
 803c694:	4604      	mov	r4, r0
 803c696:	460d      	mov	r5, r1
 803c698:	d904      	bls.n	803c6a4 <_raise_r+0x14>
 803c69a:	2316      	movs	r3, #22
 803c69c:	6003      	str	r3, [r0, #0]
 803c69e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c6a2:	bd38      	pop	{r3, r4, r5, pc}
 803c6a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803c6a6:	b112      	cbz	r2, 803c6ae <_raise_r+0x1e>
 803c6a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803c6ac:	b94b      	cbnz	r3, 803c6c2 <_raise_r+0x32>
 803c6ae:	4620      	mov	r0, r4
 803c6b0:	f000 f830 	bl	803c714 <_getpid_r>
 803c6b4:	462a      	mov	r2, r5
 803c6b6:	4601      	mov	r1, r0
 803c6b8:	4620      	mov	r0, r4
 803c6ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803c6be:	f000 b817 	b.w	803c6f0 <_kill_r>
 803c6c2:	2b01      	cmp	r3, #1
 803c6c4:	d00a      	beq.n	803c6dc <_raise_r+0x4c>
 803c6c6:	1c59      	adds	r1, r3, #1
 803c6c8:	d103      	bne.n	803c6d2 <_raise_r+0x42>
 803c6ca:	2316      	movs	r3, #22
 803c6cc:	6003      	str	r3, [r0, #0]
 803c6ce:	2001      	movs	r0, #1
 803c6d0:	e7e7      	b.n	803c6a2 <_raise_r+0x12>
 803c6d2:	2400      	movs	r4, #0
 803c6d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803c6d8:	4628      	mov	r0, r5
 803c6da:	4798      	blx	r3
 803c6dc:	2000      	movs	r0, #0
 803c6de:	e7e0      	b.n	803c6a2 <_raise_r+0x12>

0803c6e0 <raise>:
 803c6e0:	4b02      	ldr	r3, [pc, #8]	; (803c6ec <raise+0xc>)
 803c6e2:	4601      	mov	r1, r0
 803c6e4:	6818      	ldr	r0, [r3, #0]
 803c6e6:	f7ff bfd3 	b.w	803c690 <_raise_r>
 803c6ea:	bf00      	nop
 803c6ec:	24000104 	.word	0x24000104

0803c6f0 <_kill_r>:
 803c6f0:	b538      	push	{r3, r4, r5, lr}
 803c6f2:	4d07      	ldr	r5, [pc, #28]	; (803c710 <_kill_r+0x20>)
 803c6f4:	2300      	movs	r3, #0
 803c6f6:	4604      	mov	r4, r0
 803c6f8:	4608      	mov	r0, r1
 803c6fa:	4611      	mov	r1, r2
 803c6fc:	602b      	str	r3, [r5, #0]
 803c6fe:	f7ed fc4d 	bl	8029f9c <_kill>
 803c702:	1c43      	adds	r3, r0, #1
 803c704:	d102      	bne.n	803c70c <_kill_r+0x1c>
 803c706:	682b      	ldr	r3, [r5, #0]
 803c708:	b103      	cbz	r3, 803c70c <_kill_r+0x1c>
 803c70a:	6023      	str	r3, [r4, #0]
 803c70c:	bd38      	pop	{r3, r4, r5, pc}
 803c70e:	bf00      	nop
 803c710:	240267ec 	.word	0x240267ec

0803c714 <_getpid_r>:
 803c714:	f7ed bc3a 	b.w	8029f8c <_getpid>

0803c718 <__swbuf_r>:
 803c718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803c71a:	460e      	mov	r6, r1
 803c71c:	4614      	mov	r4, r2
 803c71e:	4605      	mov	r5, r0
 803c720:	b118      	cbz	r0, 803c72a <__swbuf_r+0x12>
 803c722:	6983      	ldr	r3, [r0, #24]
 803c724:	b90b      	cbnz	r3, 803c72a <__swbuf_r+0x12>
 803c726:	f000 f9d1 	bl	803cacc <__sinit>
 803c72a:	4b21      	ldr	r3, [pc, #132]	; (803c7b0 <__swbuf_r+0x98>)
 803c72c:	429c      	cmp	r4, r3
 803c72e:	d12b      	bne.n	803c788 <__swbuf_r+0x70>
 803c730:	686c      	ldr	r4, [r5, #4]
 803c732:	69a3      	ldr	r3, [r4, #24]
 803c734:	60a3      	str	r3, [r4, #8]
 803c736:	89a3      	ldrh	r3, [r4, #12]
 803c738:	071a      	lsls	r2, r3, #28
 803c73a:	d52f      	bpl.n	803c79c <__swbuf_r+0x84>
 803c73c:	6923      	ldr	r3, [r4, #16]
 803c73e:	b36b      	cbz	r3, 803c79c <__swbuf_r+0x84>
 803c740:	6923      	ldr	r3, [r4, #16]
 803c742:	6820      	ldr	r0, [r4, #0]
 803c744:	1ac0      	subs	r0, r0, r3
 803c746:	6963      	ldr	r3, [r4, #20]
 803c748:	b2f6      	uxtb	r6, r6
 803c74a:	4283      	cmp	r3, r0
 803c74c:	4637      	mov	r7, r6
 803c74e:	dc04      	bgt.n	803c75a <__swbuf_r+0x42>
 803c750:	4621      	mov	r1, r4
 803c752:	4628      	mov	r0, r5
 803c754:	f000 f926 	bl	803c9a4 <_fflush_r>
 803c758:	bb30      	cbnz	r0, 803c7a8 <__swbuf_r+0x90>
 803c75a:	68a3      	ldr	r3, [r4, #8]
 803c75c:	3b01      	subs	r3, #1
 803c75e:	60a3      	str	r3, [r4, #8]
 803c760:	6823      	ldr	r3, [r4, #0]
 803c762:	1c5a      	adds	r2, r3, #1
 803c764:	6022      	str	r2, [r4, #0]
 803c766:	701e      	strb	r6, [r3, #0]
 803c768:	6963      	ldr	r3, [r4, #20]
 803c76a:	3001      	adds	r0, #1
 803c76c:	4283      	cmp	r3, r0
 803c76e:	d004      	beq.n	803c77a <__swbuf_r+0x62>
 803c770:	89a3      	ldrh	r3, [r4, #12]
 803c772:	07db      	lsls	r3, r3, #31
 803c774:	d506      	bpl.n	803c784 <__swbuf_r+0x6c>
 803c776:	2e0a      	cmp	r6, #10
 803c778:	d104      	bne.n	803c784 <__swbuf_r+0x6c>
 803c77a:	4621      	mov	r1, r4
 803c77c:	4628      	mov	r0, r5
 803c77e:	f000 f911 	bl	803c9a4 <_fflush_r>
 803c782:	b988      	cbnz	r0, 803c7a8 <__swbuf_r+0x90>
 803c784:	4638      	mov	r0, r7
 803c786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803c788:	4b0a      	ldr	r3, [pc, #40]	; (803c7b4 <__swbuf_r+0x9c>)
 803c78a:	429c      	cmp	r4, r3
 803c78c:	d101      	bne.n	803c792 <__swbuf_r+0x7a>
 803c78e:	68ac      	ldr	r4, [r5, #8]
 803c790:	e7cf      	b.n	803c732 <__swbuf_r+0x1a>
 803c792:	4b09      	ldr	r3, [pc, #36]	; (803c7b8 <__swbuf_r+0xa0>)
 803c794:	429c      	cmp	r4, r3
 803c796:	bf08      	it	eq
 803c798:	68ec      	ldreq	r4, [r5, #12]
 803c79a:	e7ca      	b.n	803c732 <__swbuf_r+0x1a>
 803c79c:	4621      	mov	r1, r4
 803c79e:	4628      	mov	r0, r5
 803c7a0:	f000 f80c 	bl	803c7bc <__swsetup_r>
 803c7a4:	2800      	cmp	r0, #0
 803c7a6:	d0cb      	beq.n	803c740 <__swbuf_r+0x28>
 803c7a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 803c7ac:	e7ea      	b.n	803c784 <__swbuf_r+0x6c>
 803c7ae:	bf00      	nop
 803c7b0:	08058634 	.word	0x08058634
 803c7b4:	08058654 	.word	0x08058654
 803c7b8:	08058614 	.word	0x08058614

0803c7bc <__swsetup_r>:
 803c7bc:	4b32      	ldr	r3, [pc, #200]	; (803c888 <__swsetup_r+0xcc>)
 803c7be:	b570      	push	{r4, r5, r6, lr}
 803c7c0:	681d      	ldr	r5, [r3, #0]
 803c7c2:	4606      	mov	r6, r0
 803c7c4:	460c      	mov	r4, r1
 803c7c6:	b125      	cbz	r5, 803c7d2 <__swsetup_r+0x16>
 803c7c8:	69ab      	ldr	r3, [r5, #24]
 803c7ca:	b913      	cbnz	r3, 803c7d2 <__swsetup_r+0x16>
 803c7cc:	4628      	mov	r0, r5
 803c7ce:	f000 f97d 	bl	803cacc <__sinit>
 803c7d2:	4b2e      	ldr	r3, [pc, #184]	; (803c88c <__swsetup_r+0xd0>)
 803c7d4:	429c      	cmp	r4, r3
 803c7d6:	d10f      	bne.n	803c7f8 <__swsetup_r+0x3c>
 803c7d8:	686c      	ldr	r4, [r5, #4]
 803c7da:	89a3      	ldrh	r3, [r4, #12]
 803c7dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c7e0:	0719      	lsls	r1, r3, #28
 803c7e2:	d42c      	bmi.n	803c83e <__swsetup_r+0x82>
 803c7e4:	06dd      	lsls	r5, r3, #27
 803c7e6:	d411      	bmi.n	803c80c <__swsetup_r+0x50>
 803c7e8:	2309      	movs	r3, #9
 803c7ea:	6033      	str	r3, [r6, #0]
 803c7ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803c7f0:	81a3      	strh	r3, [r4, #12]
 803c7f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c7f6:	e03e      	b.n	803c876 <__swsetup_r+0xba>
 803c7f8:	4b25      	ldr	r3, [pc, #148]	; (803c890 <__swsetup_r+0xd4>)
 803c7fa:	429c      	cmp	r4, r3
 803c7fc:	d101      	bne.n	803c802 <__swsetup_r+0x46>
 803c7fe:	68ac      	ldr	r4, [r5, #8]
 803c800:	e7eb      	b.n	803c7da <__swsetup_r+0x1e>
 803c802:	4b24      	ldr	r3, [pc, #144]	; (803c894 <__swsetup_r+0xd8>)
 803c804:	429c      	cmp	r4, r3
 803c806:	bf08      	it	eq
 803c808:	68ec      	ldreq	r4, [r5, #12]
 803c80a:	e7e6      	b.n	803c7da <__swsetup_r+0x1e>
 803c80c:	0758      	lsls	r0, r3, #29
 803c80e:	d512      	bpl.n	803c836 <__swsetup_r+0x7a>
 803c810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803c812:	b141      	cbz	r1, 803c826 <__swsetup_r+0x6a>
 803c814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803c818:	4299      	cmp	r1, r3
 803c81a:	d002      	beq.n	803c822 <__swsetup_r+0x66>
 803c81c:	4630      	mov	r0, r6
 803c81e:	f7ff fb59 	bl	803bed4 <_free_r>
 803c822:	2300      	movs	r3, #0
 803c824:	6363      	str	r3, [r4, #52]	; 0x34
 803c826:	89a3      	ldrh	r3, [r4, #12]
 803c828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803c82c:	81a3      	strh	r3, [r4, #12]
 803c82e:	2300      	movs	r3, #0
 803c830:	6063      	str	r3, [r4, #4]
 803c832:	6923      	ldr	r3, [r4, #16]
 803c834:	6023      	str	r3, [r4, #0]
 803c836:	89a3      	ldrh	r3, [r4, #12]
 803c838:	f043 0308 	orr.w	r3, r3, #8
 803c83c:	81a3      	strh	r3, [r4, #12]
 803c83e:	6923      	ldr	r3, [r4, #16]
 803c840:	b94b      	cbnz	r3, 803c856 <__swsetup_r+0x9a>
 803c842:	89a3      	ldrh	r3, [r4, #12]
 803c844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803c848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803c84c:	d003      	beq.n	803c856 <__swsetup_r+0x9a>
 803c84e:	4621      	mov	r1, r4
 803c850:	4630      	mov	r0, r6
 803c852:	f000 fa01 	bl	803cc58 <__smakebuf_r>
 803c856:	89a0      	ldrh	r0, [r4, #12]
 803c858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c85c:	f010 0301 	ands.w	r3, r0, #1
 803c860:	d00a      	beq.n	803c878 <__swsetup_r+0xbc>
 803c862:	2300      	movs	r3, #0
 803c864:	60a3      	str	r3, [r4, #8]
 803c866:	6963      	ldr	r3, [r4, #20]
 803c868:	425b      	negs	r3, r3
 803c86a:	61a3      	str	r3, [r4, #24]
 803c86c:	6923      	ldr	r3, [r4, #16]
 803c86e:	b943      	cbnz	r3, 803c882 <__swsetup_r+0xc6>
 803c870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803c874:	d1ba      	bne.n	803c7ec <__swsetup_r+0x30>
 803c876:	bd70      	pop	{r4, r5, r6, pc}
 803c878:	0781      	lsls	r1, r0, #30
 803c87a:	bf58      	it	pl
 803c87c:	6963      	ldrpl	r3, [r4, #20]
 803c87e:	60a3      	str	r3, [r4, #8]
 803c880:	e7f4      	b.n	803c86c <__swsetup_r+0xb0>
 803c882:	2000      	movs	r0, #0
 803c884:	e7f7      	b.n	803c876 <__swsetup_r+0xba>
 803c886:	bf00      	nop
 803c888:	24000104 	.word	0x24000104
 803c88c:	08058634 	.word	0x08058634
 803c890:	08058654 	.word	0x08058654
 803c894:	08058614 	.word	0x08058614

0803c898 <__sflush_r>:
 803c898:	898a      	ldrh	r2, [r1, #12]
 803c89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803c89e:	4605      	mov	r5, r0
 803c8a0:	0710      	lsls	r0, r2, #28
 803c8a2:	460c      	mov	r4, r1
 803c8a4:	d458      	bmi.n	803c958 <__sflush_r+0xc0>
 803c8a6:	684b      	ldr	r3, [r1, #4]
 803c8a8:	2b00      	cmp	r3, #0
 803c8aa:	dc05      	bgt.n	803c8b8 <__sflush_r+0x20>
 803c8ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803c8ae:	2b00      	cmp	r3, #0
 803c8b0:	dc02      	bgt.n	803c8b8 <__sflush_r+0x20>
 803c8b2:	2000      	movs	r0, #0
 803c8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803c8b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803c8ba:	2e00      	cmp	r6, #0
 803c8bc:	d0f9      	beq.n	803c8b2 <__sflush_r+0x1a>
 803c8be:	2300      	movs	r3, #0
 803c8c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803c8c4:	682f      	ldr	r7, [r5, #0]
 803c8c6:	602b      	str	r3, [r5, #0]
 803c8c8:	d032      	beq.n	803c930 <__sflush_r+0x98>
 803c8ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803c8cc:	89a3      	ldrh	r3, [r4, #12]
 803c8ce:	075a      	lsls	r2, r3, #29
 803c8d0:	d505      	bpl.n	803c8de <__sflush_r+0x46>
 803c8d2:	6863      	ldr	r3, [r4, #4]
 803c8d4:	1ac0      	subs	r0, r0, r3
 803c8d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803c8d8:	b10b      	cbz	r3, 803c8de <__sflush_r+0x46>
 803c8da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803c8dc:	1ac0      	subs	r0, r0, r3
 803c8de:	2300      	movs	r3, #0
 803c8e0:	4602      	mov	r2, r0
 803c8e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803c8e4:	6a21      	ldr	r1, [r4, #32]
 803c8e6:	4628      	mov	r0, r5
 803c8e8:	47b0      	blx	r6
 803c8ea:	1c43      	adds	r3, r0, #1
 803c8ec:	89a3      	ldrh	r3, [r4, #12]
 803c8ee:	d106      	bne.n	803c8fe <__sflush_r+0x66>
 803c8f0:	6829      	ldr	r1, [r5, #0]
 803c8f2:	291d      	cmp	r1, #29
 803c8f4:	d82c      	bhi.n	803c950 <__sflush_r+0xb8>
 803c8f6:	4a2a      	ldr	r2, [pc, #168]	; (803c9a0 <__sflush_r+0x108>)
 803c8f8:	40ca      	lsrs	r2, r1
 803c8fa:	07d6      	lsls	r6, r2, #31
 803c8fc:	d528      	bpl.n	803c950 <__sflush_r+0xb8>
 803c8fe:	2200      	movs	r2, #0
 803c900:	6062      	str	r2, [r4, #4]
 803c902:	04d9      	lsls	r1, r3, #19
 803c904:	6922      	ldr	r2, [r4, #16]
 803c906:	6022      	str	r2, [r4, #0]
 803c908:	d504      	bpl.n	803c914 <__sflush_r+0x7c>
 803c90a:	1c42      	adds	r2, r0, #1
 803c90c:	d101      	bne.n	803c912 <__sflush_r+0x7a>
 803c90e:	682b      	ldr	r3, [r5, #0]
 803c910:	b903      	cbnz	r3, 803c914 <__sflush_r+0x7c>
 803c912:	6560      	str	r0, [r4, #84]	; 0x54
 803c914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803c916:	602f      	str	r7, [r5, #0]
 803c918:	2900      	cmp	r1, #0
 803c91a:	d0ca      	beq.n	803c8b2 <__sflush_r+0x1a>
 803c91c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803c920:	4299      	cmp	r1, r3
 803c922:	d002      	beq.n	803c92a <__sflush_r+0x92>
 803c924:	4628      	mov	r0, r5
 803c926:	f7ff fad5 	bl	803bed4 <_free_r>
 803c92a:	2000      	movs	r0, #0
 803c92c:	6360      	str	r0, [r4, #52]	; 0x34
 803c92e:	e7c1      	b.n	803c8b4 <__sflush_r+0x1c>
 803c930:	6a21      	ldr	r1, [r4, #32]
 803c932:	2301      	movs	r3, #1
 803c934:	4628      	mov	r0, r5
 803c936:	47b0      	blx	r6
 803c938:	1c41      	adds	r1, r0, #1
 803c93a:	d1c7      	bne.n	803c8cc <__sflush_r+0x34>
 803c93c:	682b      	ldr	r3, [r5, #0]
 803c93e:	2b00      	cmp	r3, #0
 803c940:	d0c4      	beq.n	803c8cc <__sflush_r+0x34>
 803c942:	2b1d      	cmp	r3, #29
 803c944:	d001      	beq.n	803c94a <__sflush_r+0xb2>
 803c946:	2b16      	cmp	r3, #22
 803c948:	d101      	bne.n	803c94e <__sflush_r+0xb6>
 803c94a:	602f      	str	r7, [r5, #0]
 803c94c:	e7b1      	b.n	803c8b2 <__sflush_r+0x1a>
 803c94e:	89a3      	ldrh	r3, [r4, #12]
 803c950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803c954:	81a3      	strh	r3, [r4, #12]
 803c956:	e7ad      	b.n	803c8b4 <__sflush_r+0x1c>
 803c958:	690f      	ldr	r7, [r1, #16]
 803c95a:	2f00      	cmp	r7, #0
 803c95c:	d0a9      	beq.n	803c8b2 <__sflush_r+0x1a>
 803c95e:	0793      	lsls	r3, r2, #30
 803c960:	680e      	ldr	r6, [r1, #0]
 803c962:	bf08      	it	eq
 803c964:	694b      	ldreq	r3, [r1, #20]
 803c966:	600f      	str	r7, [r1, #0]
 803c968:	bf18      	it	ne
 803c96a:	2300      	movne	r3, #0
 803c96c:	eba6 0807 	sub.w	r8, r6, r7
 803c970:	608b      	str	r3, [r1, #8]
 803c972:	f1b8 0f00 	cmp.w	r8, #0
 803c976:	dd9c      	ble.n	803c8b2 <__sflush_r+0x1a>
 803c978:	6a21      	ldr	r1, [r4, #32]
 803c97a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803c97c:	4643      	mov	r3, r8
 803c97e:	463a      	mov	r2, r7
 803c980:	4628      	mov	r0, r5
 803c982:	47b0      	blx	r6
 803c984:	2800      	cmp	r0, #0
 803c986:	dc06      	bgt.n	803c996 <__sflush_r+0xfe>
 803c988:	89a3      	ldrh	r3, [r4, #12]
 803c98a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803c98e:	81a3      	strh	r3, [r4, #12]
 803c990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c994:	e78e      	b.n	803c8b4 <__sflush_r+0x1c>
 803c996:	4407      	add	r7, r0
 803c998:	eba8 0800 	sub.w	r8, r8, r0
 803c99c:	e7e9      	b.n	803c972 <__sflush_r+0xda>
 803c99e:	bf00      	nop
 803c9a0:	20400001 	.word	0x20400001

0803c9a4 <_fflush_r>:
 803c9a4:	b538      	push	{r3, r4, r5, lr}
 803c9a6:	690b      	ldr	r3, [r1, #16]
 803c9a8:	4605      	mov	r5, r0
 803c9aa:	460c      	mov	r4, r1
 803c9ac:	b913      	cbnz	r3, 803c9b4 <_fflush_r+0x10>
 803c9ae:	2500      	movs	r5, #0
 803c9b0:	4628      	mov	r0, r5
 803c9b2:	bd38      	pop	{r3, r4, r5, pc}
 803c9b4:	b118      	cbz	r0, 803c9be <_fflush_r+0x1a>
 803c9b6:	6983      	ldr	r3, [r0, #24]
 803c9b8:	b90b      	cbnz	r3, 803c9be <_fflush_r+0x1a>
 803c9ba:	f000 f887 	bl	803cacc <__sinit>
 803c9be:	4b14      	ldr	r3, [pc, #80]	; (803ca10 <_fflush_r+0x6c>)
 803c9c0:	429c      	cmp	r4, r3
 803c9c2:	d11b      	bne.n	803c9fc <_fflush_r+0x58>
 803c9c4:	686c      	ldr	r4, [r5, #4]
 803c9c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803c9ca:	2b00      	cmp	r3, #0
 803c9cc:	d0ef      	beq.n	803c9ae <_fflush_r+0xa>
 803c9ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803c9d0:	07d0      	lsls	r0, r2, #31
 803c9d2:	d404      	bmi.n	803c9de <_fflush_r+0x3a>
 803c9d4:	0599      	lsls	r1, r3, #22
 803c9d6:	d402      	bmi.n	803c9de <_fflush_r+0x3a>
 803c9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803c9da:	f000 f915 	bl	803cc08 <__retarget_lock_acquire_recursive>
 803c9de:	4628      	mov	r0, r5
 803c9e0:	4621      	mov	r1, r4
 803c9e2:	f7ff ff59 	bl	803c898 <__sflush_r>
 803c9e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803c9e8:	07da      	lsls	r2, r3, #31
 803c9ea:	4605      	mov	r5, r0
 803c9ec:	d4e0      	bmi.n	803c9b0 <_fflush_r+0xc>
 803c9ee:	89a3      	ldrh	r3, [r4, #12]
 803c9f0:	059b      	lsls	r3, r3, #22
 803c9f2:	d4dd      	bmi.n	803c9b0 <_fflush_r+0xc>
 803c9f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803c9f6:	f000 f908 	bl	803cc0a <__retarget_lock_release_recursive>
 803c9fa:	e7d9      	b.n	803c9b0 <_fflush_r+0xc>
 803c9fc:	4b05      	ldr	r3, [pc, #20]	; (803ca14 <_fflush_r+0x70>)
 803c9fe:	429c      	cmp	r4, r3
 803ca00:	d101      	bne.n	803ca06 <_fflush_r+0x62>
 803ca02:	68ac      	ldr	r4, [r5, #8]
 803ca04:	e7df      	b.n	803c9c6 <_fflush_r+0x22>
 803ca06:	4b04      	ldr	r3, [pc, #16]	; (803ca18 <_fflush_r+0x74>)
 803ca08:	429c      	cmp	r4, r3
 803ca0a:	bf08      	it	eq
 803ca0c:	68ec      	ldreq	r4, [r5, #12]
 803ca0e:	e7da      	b.n	803c9c6 <_fflush_r+0x22>
 803ca10:	08058634 	.word	0x08058634
 803ca14:	08058654 	.word	0x08058654
 803ca18:	08058614 	.word	0x08058614

0803ca1c <std>:
 803ca1c:	2300      	movs	r3, #0
 803ca1e:	b510      	push	{r4, lr}
 803ca20:	4604      	mov	r4, r0
 803ca22:	e9c0 3300 	strd	r3, r3, [r0]
 803ca26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803ca2a:	6083      	str	r3, [r0, #8]
 803ca2c:	8181      	strh	r1, [r0, #12]
 803ca2e:	6643      	str	r3, [r0, #100]	; 0x64
 803ca30:	81c2      	strh	r2, [r0, #14]
 803ca32:	6183      	str	r3, [r0, #24]
 803ca34:	4619      	mov	r1, r3
 803ca36:	2208      	movs	r2, #8
 803ca38:	305c      	adds	r0, #92	; 0x5c
 803ca3a:	f7ff fa43 	bl	803bec4 <memset>
 803ca3e:	4b05      	ldr	r3, [pc, #20]	; (803ca54 <std+0x38>)
 803ca40:	6263      	str	r3, [r4, #36]	; 0x24
 803ca42:	4b05      	ldr	r3, [pc, #20]	; (803ca58 <std+0x3c>)
 803ca44:	62a3      	str	r3, [r4, #40]	; 0x28
 803ca46:	4b05      	ldr	r3, [pc, #20]	; (803ca5c <std+0x40>)
 803ca48:	62e3      	str	r3, [r4, #44]	; 0x2c
 803ca4a:	4b05      	ldr	r3, [pc, #20]	; (803ca60 <std+0x44>)
 803ca4c:	6224      	str	r4, [r4, #32]
 803ca4e:	6323      	str	r3, [r4, #48]	; 0x30
 803ca50:	bd10      	pop	{r4, pc}
 803ca52:	bf00      	nop
 803ca54:	0803ccf1 	.word	0x0803ccf1
 803ca58:	0803cd13 	.word	0x0803cd13
 803ca5c:	0803cd4b 	.word	0x0803cd4b
 803ca60:	0803cd6f 	.word	0x0803cd6f

0803ca64 <_cleanup_r>:
 803ca64:	4901      	ldr	r1, [pc, #4]	; (803ca6c <_cleanup_r+0x8>)
 803ca66:	f000 b8af 	b.w	803cbc8 <_fwalk_reent>
 803ca6a:	bf00      	nop
 803ca6c:	0803c9a5 	.word	0x0803c9a5

0803ca70 <__sfmoreglue>:
 803ca70:	b570      	push	{r4, r5, r6, lr}
 803ca72:	2268      	movs	r2, #104	; 0x68
 803ca74:	1e4d      	subs	r5, r1, #1
 803ca76:	4355      	muls	r5, r2
 803ca78:	460e      	mov	r6, r1
 803ca7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803ca7e:	f7ff fa95 	bl	803bfac <_malloc_r>
 803ca82:	4604      	mov	r4, r0
 803ca84:	b140      	cbz	r0, 803ca98 <__sfmoreglue+0x28>
 803ca86:	2100      	movs	r1, #0
 803ca88:	e9c0 1600 	strd	r1, r6, [r0]
 803ca8c:	300c      	adds	r0, #12
 803ca8e:	60a0      	str	r0, [r4, #8]
 803ca90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803ca94:	f7ff fa16 	bl	803bec4 <memset>
 803ca98:	4620      	mov	r0, r4
 803ca9a:	bd70      	pop	{r4, r5, r6, pc}

0803ca9c <__sfp_lock_acquire>:
 803ca9c:	4801      	ldr	r0, [pc, #4]	; (803caa4 <__sfp_lock_acquire+0x8>)
 803ca9e:	f000 b8b3 	b.w	803cc08 <__retarget_lock_acquire_recursive>
 803caa2:	bf00      	nop
 803caa4:	240267e9 	.word	0x240267e9

0803caa8 <__sfp_lock_release>:
 803caa8:	4801      	ldr	r0, [pc, #4]	; (803cab0 <__sfp_lock_release+0x8>)
 803caaa:	f000 b8ae 	b.w	803cc0a <__retarget_lock_release_recursive>
 803caae:	bf00      	nop
 803cab0:	240267e9 	.word	0x240267e9

0803cab4 <__sinit_lock_acquire>:
 803cab4:	4801      	ldr	r0, [pc, #4]	; (803cabc <__sinit_lock_acquire+0x8>)
 803cab6:	f000 b8a7 	b.w	803cc08 <__retarget_lock_acquire_recursive>
 803caba:	bf00      	nop
 803cabc:	240267ea 	.word	0x240267ea

0803cac0 <__sinit_lock_release>:
 803cac0:	4801      	ldr	r0, [pc, #4]	; (803cac8 <__sinit_lock_release+0x8>)
 803cac2:	f000 b8a2 	b.w	803cc0a <__retarget_lock_release_recursive>
 803cac6:	bf00      	nop
 803cac8:	240267ea 	.word	0x240267ea

0803cacc <__sinit>:
 803cacc:	b510      	push	{r4, lr}
 803cace:	4604      	mov	r4, r0
 803cad0:	f7ff fff0 	bl	803cab4 <__sinit_lock_acquire>
 803cad4:	69a3      	ldr	r3, [r4, #24]
 803cad6:	b11b      	cbz	r3, 803cae0 <__sinit+0x14>
 803cad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803cadc:	f7ff bff0 	b.w	803cac0 <__sinit_lock_release>
 803cae0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803cae4:	6523      	str	r3, [r4, #80]	; 0x50
 803cae6:	4b13      	ldr	r3, [pc, #76]	; (803cb34 <__sinit+0x68>)
 803cae8:	4a13      	ldr	r2, [pc, #76]	; (803cb38 <__sinit+0x6c>)
 803caea:	681b      	ldr	r3, [r3, #0]
 803caec:	62a2      	str	r2, [r4, #40]	; 0x28
 803caee:	42a3      	cmp	r3, r4
 803caf0:	bf04      	itt	eq
 803caf2:	2301      	moveq	r3, #1
 803caf4:	61a3      	streq	r3, [r4, #24]
 803caf6:	4620      	mov	r0, r4
 803caf8:	f000 f820 	bl	803cb3c <__sfp>
 803cafc:	6060      	str	r0, [r4, #4]
 803cafe:	4620      	mov	r0, r4
 803cb00:	f000 f81c 	bl	803cb3c <__sfp>
 803cb04:	60a0      	str	r0, [r4, #8]
 803cb06:	4620      	mov	r0, r4
 803cb08:	f000 f818 	bl	803cb3c <__sfp>
 803cb0c:	2200      	movs	r2, #0
 803cb0e:	60e0      	str	r0, [r4, #12]
 803cb10:	2104      	movs	r1, #4
 803cb12:	6860      	ldr	r0, [r4, #4]
 803cb14:	f7ff ff82 	bl	803ca1c <std>
 803cb18:	68a0      	ldr	r0, [r4, #8]
 803cb1a:	2201      	movs	r2, #1
 803cb1c:	2109      	movs	r1, #9
 803cb1e:	f7ff ff7d 	bl	803ca1c <std>
 803cb22:	68e0      	ldr	r0, [r4, #12]
 803cb24:	2202      	movs	r2, #2
 803cb26:	2112      	movs	r1, #18
 803cb28:	f7ff ff78 	bl	803ca1c <std>
 803cb2c:	2301      	movs	r3, #1
 803cb2e:	61a3      	str	r3, [r4, #24]
 803cb30:	e7d2      	b.n	803cad8 <__sinit+0xc>
 803cb32:	bf00      	nop
 803cb34:	080585dc 	.word	0x080585dc
 803cb38:	0803ca65 	.word	0x0803ca65

0803cb3c <__sfp>:
 803cb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803cb3e:	4607      	mov	r7, r0
 803cb40:	f7ff ffac 	bl	803ca9c <__sfp_lock_acquire>
 803cb44:	4b1e      	ldr	r3, [pc, #120]	; (803cbc0 <__sfp+0x84>)
 803cb46:	681e      	ldr	r6, [r3, #0]
 803cb48:	69b3      	ldr	r3, [r6, #24]
 803cb4a:	b913      	cbnz	r3, 803cb52 <__sfp+0x16>
 803cb4c:	4630      	mov	r0, r6
 803cb4e:	f7ff ffbd 	bl	803cacc <__sinit>
 803cb52:	3648      	adds	r6, #72	; 0x48
 803cb54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803cb58:	3b01      	subs	r3, #1
 803cb5a:	d503      	bpl.n	803cb64 <__sfp+0x28>
 803cb5c:	6833      	ldr	r3, [r6, #0]
 803cb5e:	b30b      	cbz	r3, 803cba4 <__sfp+0x68>
 803cb60:	6836      	ldr	r6, [r6, #0]
 803cb62:	e7f7      	b.n	803cb54 <__sfp+0x18>
 803cb64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803cb68:	b9d5      	cbnz	r5, 803cba0 <__sfp+0x64>
 803cb6a:	4b16      	ldr	r3, [pc, #88]	; (803cbc4 <__sfp+0x88>)
 803cb6c:	60e3      	str	r3, [r4, #12]
 803cb6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803cb72:	6665      	str	r5, [r4, #100]	; 0x64
 803cb74:	f000 f847 	bl	803cc06 <__retarget_lock_init_recursive>
 803cb78:	f7ff ff96 	bl	803caa8 <__sfp_lock_release>
 803cb7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 803cb80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803cb84:	6025      	str	r5, [r4, #0]
 803cb86:	61a5      	str	r5, [r4, #24]
 803cb88:	2208      	movs	r2, #8
 803cb8a:	4629      	mov	r1, r5
 803cb8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 803cb90:	f7ff f998 	bl	803bec4 <memset>
 803cb94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803cb98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 803cb9c:	4620      	mov	r0, r4
 803cb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803cba0:	3468      	adds	r4, #104	; 0x68
 803cba2:	e7d9      	b.n	803cb58 <__sfp+0x1c>
 803cba4:	2104      	movs	r1, #4
 803cba6:	4638      	mov	r0, r7
 803cba8:	f7ff ff62 	bl	803ca70 <__sfmoreglue>
 803cbac:	4604      	mov	r4, r0
 803cbae:	6030      	str	r0, [r6, #0]
 803cbb0:	2800      	cmp	r0, #0
 803cbb2:	d1d5      	bne.n	803cb60 <__sfp+0x24>
 803cbb4:	f7ff ff78 	bl	803caa8 <__sfp_lock_release>
 803cbb8:	230c      	movs	r3, #12
 803cbba:	603b      	str	r3, [r7, #0]
 803cbbc:	e7ee      	b.n	803cb9c <__sfp+0x60>
 803cbbe:	bf00      	nop
 803cbc0:	080585dc 	.word	0x080585dc
 803cbc4:	ffff0001 	.word	0xffff0001

0803cbc8 <_fwalk_reent>:
 803cbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803cbcc:	4606      	mov	r6, r0
 803cbce:	4688      	mov	r8, r1
 803cbd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803cbd4:	2700      	movs	r7, #0
 803cbd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803cbda:	f1b9 0901 	subs.w	r9, r9, #1
 803cbde:	d505      	bpl.n	803cbec <_fwalk_reent+0x24>
 803cbe0:	6824      	ldr	r4, [r4, #0]
 803cbe2:	2c00      	cmp	r4, #0
 803cbe4:	d1f7      	bne.n	803cbd6 <_fwalk_reent+0xe>
 803cbe6:	4638      	mov	r0, r7
 803cbe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803cbec:	89ab      	ldrh	r3, [r5, #12]
 803cbee:	2b01      	cmp	r3, #1
 803cbf0:	d907      	bls.n	803cc02 <_fwalk_reent+0x3a>
 803cbf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803cbf6:	3301      	adds	r3, #1
 803cbf8:	d003      	beq.n	803cc02 <_fwalk_reent+0x3a>
 803cbfa:	4629      	mov	r1, r5
 803cbfc:	4630      	mov	r0, r6
 803cbfe:	47c0      	blx	r8
 803cc00:	4307      	orrs	r7, r0
 803cc02:	3568      	adds	r5, #104	; 0x68
 803cc04:	e7e9      	b.n	803cbda <_fwalk_reent+0x12>

0803cc06 <__retarget_lock_init_recursive>:
 803cc06:	4770      	bx	lr

0803cc08 <__retarget_lock_acquire_recursive>:
 803cc08:	4770      	bx	lr

0803cc0a <__retarget_lock_release_recursive>:
 803cc0a:	4770      	bx	lr

0803cc0c <__swhatbuf_r>:
 803cc0c:	b570      	push	{r4, r5, r6, lr}
 803cc0e:	460e      	mov	r6, r1
 803cc10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cc14:	2900      	cmp	r1, #0
 803cc16:	b096      	sub	sp, #88	; 0x58
 803cc18:	4614      	mov	r4, r2
 803cc1a:	461d      	mov	r5, r3
 803cc1c:	da08      	bge.n	803cc30 <__swhatbuf_r+0x24>
 803cc1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803cc22:	2200      	movs	r2, #0
 803cc24:	602a      	str	r2, [r5, #0]
 803cc26:	061a      	lsls	r2, r3, #24
 803cc28:	d410      	bmi.n	803cc4c <__swhatbuf_r+0x40>
 803cc2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803cc2e:	e00e      	b.n	803cc4e <__swhatbuf_r+0x42>
 803cc30:	466a      	mov	r2, sp
 803cc32:	f000 f8c3 	bl	803cdbc <_fstat_r>
 803cc36:	2800      	cmp	r0, #0
 803cc38:	dbf1      	blt.n	803cc1e <__swhatbuf_r+0x12>
 803cc3a:	9a01      	ldr	r2, [sp, #4]
 803cc3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803cc40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803cc44:	425a      	negs	r2, r3
 803cc46:	415a      	adcs	r2, r3
 803cc48:	602a      	str	r2, [r5, #0]
 803cc4a:	e7ee      	b.n	803cc2a <__swhatbuf_r+0x1e>
 803cc4c:	2340      	movs	r3, #64	; 0x40
 803cc4e:	2000      	movs	r0, #0
 803cc50:	6023      	str	r3, [r4, #0]
 803cc52:	b016      	add	sp, #88	; 0x58
 803cc54:	bd70      	pop	{r4, r5, r6, pc}
	...

0803cc58 <__smakebuf_r>:
 803cc58:	898b      	ldrh	r3, [r1, #12]
 803cc5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803cc5c:	079d      	lsls	r5, r3, #30
 803cc5e:	4606      	mov	r6, r0
 803cc60:	460c      	mov	r4, r1
 803cc62:	d507      	bpl.n	803cc74 <__smakebuf_r+0x1c>
 803cc64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803cc68:	6023      	str	r3, [r4, #0]
 803cc6a:	6123      	str	r3, [r4, #16]
 803cc6c:	2301      	movs	r3, #1
 803cc6e:	6163      	str	r3, [r4, #20]
 803cc70:	b002      	add	sp, #8
 803cc72:	bd70      	pop	{r4, r5, r6, pc}
 803cc74:	ab01      	add	r3, sp, #4
 803cc76:	466a      	mov	r2, sp
 803cc78:	f7ff ffc8 	bl	803cc0c <__swhatbuf_r>
 803cc7c:	9900      	ldr	r1, [sp, #0]
 803cc7e:	4605      	mov	r5, r0
 803cc80:	4630      	mov	r0, r6
 803cc82:	f7ff f993 	bl	803bfac <_malloc_r>
 803cc86:	b948      	cbnz	r0, 803cc9c <__smakebuf_r+0x44>
 803cc88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803cc8c:	059a      	lsls	r2, r3, #22
 803cc8e:	d4ef      	bmi.n	803cc70 <__smakebuf_r+0x18>
 803cc90:	f023 0303 	bic.w	r3, r3, #3
 803cc94:	f043 0302 	orr.w	r3, r3, #2
 803cc98:	81a3      	strh	r3, [r4, #12]
 803cc9a:	e7e3      	b.n	803cc64 <__smakebuf_r+0xc>
 803cc9c:	4b0d      	ldr	r3, [pc, #52]	; (803ccd4 <__smakebuf_r+0x7c>)
 803cc9e:	62b3      	str	r3, [r6, #40]	; 0x28
 803cca0:	89a3      	ldrh	r3, [r4, #12]
 803cca2:	6020      	str	r0, [r4, #0]
 803cca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803cca8:	81a3      	strh	r3, [r4, #12]
 803ccaa:	9b00      	ldr	r3, [sp, #0]
 803ccac:	6163      	str	r3, [r4, #20]
 803ccae:	9b01      	ldr	r3, [sp, #4]
 803ccb0:	6120      	str	r0, [r4, #16]
 803ccb2:	b15b      	cbz	r3, 803cccc <__smakebuf_r+0x74>
 803ccb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803ccb8:	4630      	mov	r0, r6
 803ccba:	f000 f891 	bl	803cde0 <_isatty_r>
 803ccbe:	b128      	cbz	r0, 803cccc <__smakebuf_r+0x74>
 803ccc0:	89a3      	ldrh	r3, [r4, #12]
 803ccc2:	f023 0303 	bic.w	r3, r3, #3
 803ccc6:	f043 0301 	orr.w	r3, r3, #1
 803ccca:	81a3      	strh	r3, [r4, #12]
 803cccc:	89a0      	ldrh	r0, [r4, #12]
 803ccce:	4305      	orrs	r5, r0
 803ccd0:	81a5      	strh	r5, [r4, #12]
 803ccd2:	e7cd      	b.n	803cc70 <__smakebuf_r+0x18>
 803ccd4:	0803ca65 	.word	0x0803ca65

0803ccd8 <__malloc_lock>:
 803ccd8:	4801      	ldr	r0, [pc, #4]	; (803cce0 <__malloc_lock+0x8>)
 803ccda:	f7ff bf95 	b.w	803cc08 <__retarget_lock_acquire_recursive>
 803ccde:	bf00      	nop
 803cce0:	240267e8 	.word	0x240267e8

0803cce4 <__malloc_unlock>:
 803cce4:	4801      	ldr	r0, [pc, #4]	; (803ccec <__malloc_unlock+0x8>)
 803cce6:	f7ff bf90 	b.w	803cc0a <__retarget_lock_release_recursive>
 803ccea:	bf00      	nop
 803ccec:	240267e8 	.word	0x240267e8

0803ccf0 <__sread>:
 803ccf0:	b510      	push	{r4, lr}
 803ccf2:	460c      	mov	r4, r1
 803ccf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803ccf8:	f000 f894 	bl	803ce24 <_read_r>
 803ccfc:	2800      	cmp	r0, #0
 803ccfe:	bfab      	itete	ge
 803cd00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803cd02:	89a3      	ldrhlt	r3, [r4, #12]
 803cd04:	181b      	addge	r3, r3, r0
 803cd06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803cd0a:	bfac      	ite	ge
 803cd0c:	6563      	strge	r3, [r4, #84]	; 0x54
 803cd0e:	81a3      	strhlt	r3, [r4, #12]
 803cd10:	bd10      	pop	{r4, pc}

0803cd12 <__swrite>:
 803cd12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803cd16:	461f      	mov	r7, r3
 803cd18:	898b      	ldrh	r3, [r1, #12]
 803cd1a:	05db      	lsls	r3, r3, #23
 803cd1c:	4605      	mov	r5, r0
 803cd1e:	460c      	mov	r4, r1
 803cd20:	4616      	mov	r6, r2
 803cd22:	d505      	bpl.n	803cd30 <__swrite+0x1e>
 803cd24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cd28:	2302      	movs	r3, #2
 803cd2a:	2200      	movs	r2, #0
 803cd2c:	f000 f868 	bl	803ce00 <_lseek_r>
 803cd30:	89a3      	ldrh	r3, [r4, #12]
 803cd32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803cd36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803cd3a:	81a3      	strh	r3, [r4, #12]
 803cd3c:	4632      	mov	r2, r6
 803cd3e:	463b      	mov	r3, r7
 803cd40:	4628      	mov	r0, r5
 803cd42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803cd46:	f000 b817 	b.w	803cd78 <_write_r>

0803cd4a <__sseek>:
 803cd4a:	b510      	push	{r4, lr}
 803cd4c:	460c      	mov	r4, r1
 803cd4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cd52:	f000 f855 	bl	803ce00 <_lseek_r>
 803cd56:	1c43      	adds	r3, r0, #1
 803cd58:	89a3      	ldrh	r3, [r4, #12]
 803cd5a:	bf15      	itete	ne
 803cd5c:	6560      	strne	r0, [r4, #84]	; 0x54
 803cd5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803cd62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803cd66:	81a3      	strheq	r3, [r4, #12]
 803cd68:	bf18      	it	ne
 803cd6a:	81a3      	strhne	r3, [r4, #12]
 803cd6c:	bd10      	pop	{r4, pc}

0803cd6e <__sclose>:
 803cd6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cd72:	f000 b813 	b.w	803cd9c <_close_r>
	...

0803cd78 <_write_r>:
 803cd78:	b538      	push	{r3, r4, r5, lr}
 803cd7a:	4d07      	ldr	r5, [pc, #28]	; (803cd98 <_write_r+0x20>)
 803cd7c:	4604      	mov	r4, r0
 803cd7e:	4608      	mov	r0, r1
 803cd80:	4611      	mov	r1, r2
 803cd82:	2200      	movs	r2, #0
 803cd84:	602a      	str	r2, [r5, #0]
 803cd86:	461a      	mov	r2, r3
 803cd88:	f7ed f93f 	bl	802a00a <_write>
 803cd8c:	1c43      	adds	r3, r0, #1
 803cd8e:	d102      	bne.n	803cd96 <_write_r+0x1e>
 803cd90:	682b      	ldr	r3, [r5, #0]
 803cd92:	b103      	cbz	r3, 803cd96 <_write_r+0x1e>
 803cd94:	6023      	str	r3, [r4, #0]
 803cd96:	bd38      	pop	{r3, r4, r5, pc}
 803cd98:	240267ec 	.word	0x240267ec

0803cd9c <_close_r>:
 803cd9c:	b538      	push	{r3, r4, r5, lr}
 803cd9e:	4d06      	ldr	r5, [pc, #24]	; (803cdb8 <_close_r+0x1c>)
 803cda0:	2300      	movs	r3, #0
 803cda2:	4604      	mov	r4, r0
 803cda4:	4608      	mov	r0, r1
 803cda6:	602b      	str	r3, [r5, #0]
 803cda8:	f7ed f94b 	bl	802a042 <_close>
 803cdac:	1c43      	adds	r3, r0, #1
 803cdae:	d102      	bne.n	803cdb6 <_close_r+0x1a>
 803cdb0:	682b      	ldr	r3, [r5, #0]
 803cdb2:	b103      	cbz	r3, 803cdb6 <_close_r+0x1a>
 803cdb4:	6023      	str	r3, [r4, #0]
 803cdb6:	bd38      	pop	{r3, r4, r5, pc}
 803cdb8:	240267ec 	.word	0x240267ec

0803cdbc <_fstat_r>:
 803cdbc:	b538      	push	{r3, r4, r5, lr}
 803cdbe:	4d07      	ldr	r5, [pc, #28]	; (803cddc <_fstat_r+0x20>)
 803cdc0:	2300      	movs	r3, #0
 803cdc2:	4604      	mov	r4, r0
 803cdc4:	4608      	mov	r0, r1
 803cdc6:	4611      	mov	r1, r2
 803cdc8:	602b      	str	r3, [r5, #0]
 803cdca:	f7ed f946 	bl	802a05a <_fstat>
 803cdce:	1c43      	adds	r3, r0, #1
 803cdd0:	d102      	bne.n	803cdd8 <_fstat_r+0x1c>
 803cdd2:	682b      	ldr	r3, [r5, #0]
 803cdd4:	b103      	cbz	r3, 803cdd8 <_fstat_r+0x1c>
 803cdd6:	6023      	str	r3, [r4, #0]
 803cdd8:	bd38      	pop	{r3, r4, r5, pc}
 803cdda:	bf00      	nop
 803cddc:	240267ec 	.word	0x240267ec

0803cde0 <_isatty_r>:
 803cde0:	b538      	push	{r3, r4, r5, lr}
 803cde2:	4d06      	ldr	r5, [pc, #24]	; (803cdfc <_isatty_r+0x1c>)
 803cde4:	2300      	movs	r3, #0
 803cde6:	4604      	mov	r4, r0
 803cde8:	4608      	mov	r0, r1
 803cdea:	602b      	str	r3, [r5, #0]
 803cdec:	f7ed f945 	bl	802a07a <_isatty>
 803cdf0:	1c43      	adds	r3, r0, #1
 803cdf2:	d102      	bne.n	803cdfa <_isatty_r+0x1a>
 803cdf4:	682b      	ldr	r3, [r5, #0]
 803cdf6:	b103      	cbz	r3, 803cdfa <_isatty_r+0x1a>
 803cdf8:	6023      	str	r3, [r4, #0]
 803cdfa:	bd38      	pop	{r3, r4, r5, pc}
 803cdfc:	240267ec 	.word	0x240267ec

0803ce00 <_lseek_r>:
 803ce00:	b538      	push	{r3, r4, r5, lr}
 803ce02:	4d07      	ldr	r5, [pc, #28]	; (803ce20 <_lseek_r+0x20>)
 803ce04:	4604      	mov	r4, r0
 803ce06:	4608      	mov	r0, r1
 803ce08:	4611      	mov	r1, r2
 803ce0a:	2200      	movs	r2, #0
 803ce0c:	602a      	str	r2, [r5, #0]
 803ce0e:	461a      	mov	r2, r3
 803ce10:	f7ed f93e 	bl	802a090 <_lseek>
 803ce14:	1c43      	adds	r3, r0, #1
 803ce16:	d102      	bne.n	803ce1e <_lseek_r+0x1e>
 803ce18:	682b      	ldr	r3, [r5, #0]
 803ce1a:	b103      	cbz	r3, 803ce1e <_lseek_r+0x1e>
 803ce1c:	6023      	str	r3, [r4, #0]
 803ce1e:	bd38      	pop	{r3, r4, r5, pc}
 803ce20:	240267ec 	.word	0x240267ec

0803ce24 <_read_r>:
 803ce24:	b538      	push	{r3, r4, r5, lr}
 803ce26:	4d07      	ldr	r5, [pc, #28]	; (803ce44 <_read_r+0x20>)
 803ce28:	4604      	mov	r4, r0
 803ce2a:	4608      	mov	r0, r1
 803ce2c:	4611      	mov	r1, r2
 803ce2e:	2200      	movs	r2, #0
 803ce30:	602a      	str	r2, [r5, #0]
 803ce32:	461a      	mov	r2, r3
 803ce34:	f7ed f8cc 	bl	8029fd0 <_read>
 803ce38:	1c43      	adds	r3, r0, #1
 803ce3a:	d102      	bne.n	803ce42 <_read_r+0x1e>
 803ce3c:	682b      	ldr	r3, [r5, #0]
 803ce3e:	b103      	cbz	r3, 803ce42 <_read_r+0x1e>
 803ce40:	6023      	str	r3, [r4, #0]
 803ce42:	bd38      	pop	{r3, r4, r5, pc}
 803ce44:	240267ec 	.word	0x240267ec

0803ce48 <_init>:
 803ce48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803ce4a:	bf00      	nop
 803ce4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803ce4e:	bc08      	pop	{r3}
 803ce50:	469e      	mov	lr, r3
 803ce52:	4770      	bx	lr

0803ce54 <_fini>:
 803ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803ce56:	bf00      	nop
 803ce58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803ce5a:	bc08      	pop	{r3}
 803ce5c:	469e      	mov	lr, r3
 803ce5e:	4770      	bx	lr
