
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c9d4  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c020  0803cc74  0803cc74  0002cc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08058c94  08058c94  00048c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08058c9c  08058c9c  00048c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08058ca0  08058ca0  00048ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  24000000  08058ca4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00038644  24000168  08058e0c  00050168  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240387ac  08058e0c  000587ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004b1f4  00000000  00000000  00050196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000747e  00000000  00000000  0009b38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003168  00000000  00000000  000a2808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002ea8  00000000  00000000  000a5970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044b38  00000000  00000000  000a8818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a239  00000000  00000000  000ed350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001894d6  00000000  00000000  00127589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002b0a5f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e158  00000000  00000000  002b0ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000168 	.word	0x24000168
 80202bc:	00000000 	.word	0x00000000
 80202c0:	0803cc5c 	.word	0x0803cc5c

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	2400016c 	.word	0x2400016c
 80202dc:	0803cc5c 	.word	0x0803cc5c

080202e0 <strlen>:
 80202e0:	4603      	mov	r3, r0
 80202e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80202e6:	2a00      	cmp	r2, #0
 80202e8:	d1fb      	bne.n	80202e2 <strlen+0x2>
 80202ea:	1a18      	subs	r0, r3, r0
 80202ec:	3801      	subs	r0, #1
 80202ee:	4770      	bx	lr

080202f0 <memchr>:
 80202f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202f4:	2a10      	cmp	r2, #16
 80202f6:	db2b      	blt.n	8020350 <memchr+0x60>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	d008      	beq.n	8020310 <memchr+0x20>
 80202fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020302:	3a01      	subs	r2, #1
 8020304:	428b      	cmp	r3, r1
 8020306:	d02d      	beq.n	8020364 <memchr+0x74>
 8020308:	f010 0f07 	tst.w	r0, #7
 802030c:	b342      	cbz	r2, 8020360 <memchr+0x70>
 802030e:	d1f6      	bne.n	80202fe <memchr+0xe>
 8020310:	b4f0      	push	{r4, r5, r6, r7}
 8020312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802031a:	f022 0407 	bic.w	r4, r2, #7
 802031e:	f07f 0700 	mvns.w	r7, #0
 8020322:	2300      	movs	r3, #0
 8020324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020328:	3c08      	subs	r4, #8
 802032a:	ea85 0501 	eor.w	r5, r5, r1
 802032e:	ea86 0601 	eor.w	r6, r6, r1
 8020332:	fa85 f547 	uadd8	r5, r5, r7
 8020336:	faa3 f587 	sel	r5, r3, r7
 802033a:	fa86 f647 	uadd8	r6, r6, r7
 802033e:	faa5 f687 	sel	r6, r5, r7
 8020342:	b98e      	cbnz	r6, 8020368 <memchr+0x78>
 8020344:	d1ee      	bne.n	8020324 <memchr+0x34>
 8020346:	bcf0      	pop	{r4, r5, r6, r7}
 8020348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802034c:	f002 0207 	and.w	r2, r2, #7
 8020350:	b132      	cbz	r2, 8020360 <memchr+0x70>
 8020352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020356:	3a01      	subs	r2, #1
 8020358:	ea83 0301 	eor.w	r3, r3, r1
 802035c:	b113      	cbz	r3, 8020364 <memchr+0x74>
 802035e:	d1f8      	bne.n	8020352 <memchr+0x62>
 8020360:	2000      	movs	r0, #0
 8020362:	4770      	bx	lr
 8020364:	3801      	subs	r0, #1
 8020366:	4770      	bx	lr
 8020368:	2d00      	cmp	r5, #0
 802036a:	bf06      	itte	eq
 802036c:	4635      	moveq	r5, r6
 802036e:	3803      	subeq	r0, #3
 8020370:	3807      	subne	r0, #7
 8020372:	f015 0f01 	tst.w	r5, #1
 8020376:	d107      	bne.n	8020388 <memchr+0x98>
 8020378:	3001      	adds	r0, #1
 802037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802037e:	bf02      	ittt	eq
 8020380:	3001      	addeq	r0, #1
 8020382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020386:	3001      	addeq	r0, #1
 8020388:	bcf0      	pop	{r4, r5, r6, r7}
 802038a:	3801      	subs	r0, #1
 802038c:	4770      	bx	lr
 802038e:	bf00      	nop

08020390 <__aeabi_uldivmod>:
 8020390:	b953      	cbnz	r3, 80203a8 <__aeabi_uldivmod+0x18>
 8020392:	b94a      	cbnz	r2, 80203a8 <__aeabi_uldivmod+0x18>
 8020394:	2900      	cmp	r1, #0
 8020396:	bf08      	it	eq
 8020398:	2800      	cmpeq	r0, #0
 802039a:	bf1c      	itt	ne
 802039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80203a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80203a4:	f000 b974 	b.w	8020690 <__aeabi_idiv0>
 80203a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80203ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203b0:	f000 f806 	bl	80203c0 <__udivmoddi4>
 80203b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203bc:	b004      	add	sp, #16
 80203be:	4770      	bx	lr

080203c0 <__udivmoddi4>:
 80203c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203c4:	9d08      	ldr	r5, [sp, #32]
 80203c6:	4604      	mov	r4, r0
 80203c8:	468e      	mov	lr, r1
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	d14d      	bne.n	802046a <__udivmoddi4+0xaa>
 80203ce:	428a      	cmp	r2, r1
 80203d0:	4694      	mov	ip, r2
 80203d2:	d969      	bls.n	80204a8 <__udivmoddi4+0xe8>
 80203d4:	fab2 f282 	clz	r2, r2
 80203d8:	b152      	cbz	r2, 80203f0 <__udivmoddi4+0x30>
 80203da:	fa01 f302 	lsl.w	r3, r1, r2
 80203de:	f1c2 0120 	rsb	r1, r2, #32
 80203e2:	fa20 f101 	lsr.w	r1, r0, r1
 80203e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203ea:	ea41 0e03 	orr.w	lr, r1, r3
 80203ee:	4094      	lsls	r4, r2
 80203f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203f4:	0c21      	lsrs	r1, r4, #16
 80203f6:	fbbe f6f8 	udiv	r6, lr, r8
 80203fa:	fa1f f78c 	uxth.w	r7, ip
 80203fe:	fb08 e316 	mls	r3, r8, r6, lr
 8020402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020406:	fb06 f107 	mul.w	r1, r6, r7
 802040a:	4299      	cmp	r1, r3
 802040c:	d90a      	bls.n	8020424 <__udivmoddi4+0x64>
 802040e:	eb1c 0303 	adds.w	r3, ip, r3
 8020412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020416:	f080 811f 	bcs.w	8020658 <__udivmoddi4+0x298>
 802041a:	4299      	cmp	r1, r3
 802041c:	f240 811c 	bls.w	8020658 <__udivmoddi4+0x298>
 8020420:	3e02      	subs	r6, #2
 8020422:	4463      	add	r3, ip
 8020424:	1a5b      	subs	r3, r3, r1
 8020426:	b2a4      	uxth	r4, r4
 8020428:	fbb3 f0f8 	udiv	r0, r3, r8
 802042c:	fb08 3310 	mls	r3, r8, r0, r3
 8020430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020434:	fb00 f707 	mul.w	r7, r0, r7
 8020438:	42a7      	cmp	r7, r4
 802043a:	d90a      	bls.n	8020452 <__udivmoddi4+0x92>
 802043c:	eb1c 0404 	adds.w	r4, ip, r4
 8020440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020444:	f080 810a 	bcs.w	802065c <__udivmoddi4+0x29c>
 8020448:	42a7      	cmp	r7, r4
 802044a:	f240 8107 	bls.w	802065c <__udivmoddi4+0x29c>
 802044e:	4464      	add	r4, ip
 8020450:	3802      	subs	r0, #2
 8020452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020456:	1be4      	subs	r4, r4, r7
 8020458:	2600      	movs	r6, #0
 802045a:	b11d      	cbz	r5, 8020464 <__udivmoddi4+0xa4>
 802045c:	40d4      	lsrs	r4, r2
 802045e:	2300      	movs	r3, #0
 8020460:	e9c5 4300 	strd	r4, r3, [r5]
 8020464:	4631      	mov	r1, r6
 8020466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802046a:	428b      	cmp	r3, r1
 802046c:	d909      	bls.n	8020482 <__udivmoddi4+0xc2>
 802046e:	2d00      	cmp	r5, #0
 8020470:	f000 80ef 	beq.w	8020652 <__udivmoddi4+0x292>
 8020474:	2600      	movs	r6, #0
 8020476:	e9c5 0100 	strd	r0, r1, [r5]
 802047a:	4630      	mov	r0, r6
 802047c:	4631      	mov	r1, r6
 802047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020482:	fab3 f683 	clz	r6, r3
 8020486:	2e00      	cmp	r6, #0
 8020488:	d14a      	bne.n	8020520 <__udivmoddi4+0x160>
 802048a:	428b      	cmp	r3, r1
 802048c:	d302      	bcc.n	8020494 <__udivmoddi4+0xd4>
 802048e:	4282      	cmp	r2, r0
 8020490:	f200 80f9 	bhi.w	8020686 <__udivmoddi4+0x2c6>
 8020494:	1a84      	subs	r4, r0, r2
 8020496:	eb61 0303 	sbc.w	r3, r1, r3
 802049a:	2001      	movs	r0, #1
 802049c:	469e      	mov	lr, r3
 802049e:	2d00      	cmp	r5, #0
 80204a0:	d0e0      	beq.n	8020464 <__udivmoddi4+0xa4>
 80204a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80204a6:	e7dd      	b.n	8020464 <__udivmoddi4+0xa4>
 80204a8:	b902      	cbnz	r2, 80204ac <__udivmoddi4+0xec>
 80204aa:	deff      	udf	#255	; 0xff
 80204ac:	fab2 f282 	clz	r2, r2
 80204b0:	2a00      	cmp	r2, #0
 80204b2:	f040 8092 	bne.w	80205da <__udivmoddi4+0x21a>
 80204b6:	eba1 010c 	sub.w	r1, r1, ip
 80204ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204be:	fa1f fe8c 	uxth.w	lr, ip
 80204c2:	2601      	movs	r6, #1
 80204c4:	0c20      	lsrs	r0, r4, #16
 80204c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ca:	fb07 1113 	mls	r1, r7, r3, r1
 80204ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204d2:	fb0e f003 	mul.w	r0, lr, r3
 80204d6:	4288      	cmp	r0, r1
 80204d8:	d908      	bls.n	80204ec <__udivmoddi4+0x12c>
 80204da:	eb1c 0101 	adds.w	r1, ip, r1
 80204de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80204e2:	d202      	bcs.n	80204ea <__udivmoddi4+0x12a>
 80204e4:	4288      	cmp	r0, r1
 80204e6:	f200 80cb 	bhi.w	8020680 <__udivmoddi4+0x2c0>
 80204ea:	4643      	mov	r3, r8
 80204ec:	1a09      	subs	r1, r1, r0
 80204ee:	b2a4      	uxth	r4, r4
 80204f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204f4:	fb07 1110 	mls	r1, r7, r0, r1
 80204f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204fc:	fb0e fe00 	mul.w	lr, lr, r0
 8020500:	45a6      	cmp	lr, r4
 8020502:	d908      	bls.n	8020516 <__udivmoddi4+0x156>
 8020504:	eb1c 0404 	adds.w	r4, ip, r4
 8020508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 802050c:	d202      	bcs.n	8020514 <__udivmoddi4+0x154>
 802050e:	45a6      	cmp	lr, r4
 8020510:	f200 80bb 	bhi.w	802068a <__udivmoddi4+0x2ca>
 8020514:	4608      	mov	r0, r1
 8020516:	eba4 040e 	sub.w	r4, r4, lr
 802051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802051e:	e79c      	b.n	802045a <__udivmoddi4+0x9a>
 8020520:	f1c6 0720 	rsb	r7, r6, #32
 8020524:	40b3      	lsls	r3, r6
 8020526:	fa22 fc07 	lsr.w	ip, r2, r7
 802052a:	ea4c 0c03 	orr.w	ip, ip, r3
 802052e:	fa20 f407 	lsr.w	r4, r0, r7
 8020532:	fa01 f306 	lsl.w	r3, r1, r6
 8020536:	431c      	orrs	r4, r3
 8020538:	40f9      	lsrs	r1, r7
 802053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802053e:	fa00 f306 	lsl.w	r3, r0, r6
 8020542:	fbb1 f8f9 	udiv	r8, r1, r9
 8020546:	0c20      	lsrs	r0, r4, #16
 8020548:	fa1f fe8c 	uxth.w	lr, ip
 802054c:	fb09 1118 	mls	r1, r9, r8, r1
 8020550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020554:	fb08 f00e 	mul.w	r0, r8, lr
 8020558:	4288      	cmp	r0, r1
 802055a:	fa02 f206 	lsl.w	r2, r2, r6
 802055e:	d90b      	bls.n	8020578 <__udivmoddi4+0x1b8>
 8020560:	eb1c 0101 	adds.w	r1, ip, r1
 8020564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020568:	f080 8088 	bcs.w	802067c <__udivmoddi4+0x2bc>
 802056c:	4288      	cmp	r0, r1
 802056e:	f240 8085 	bls.w	802067c <__udivmoddi4+0x2bc>
 8020572:	f1a8 0802 	sub.w	r8, r8, #2
 8020576:	4461      	add	r1, ip
 8020578:	1a09      	subs	r1, r1, r0
 802057a:	b2a4      	uxth	r4, r4
 802057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020580:	fb09 1110 	mls	r1, r9, r0, r1
 8020584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020588:	fb00 fe0e 	mul.w	lr, r0, lr
 802058c:	458e      	cmp	lr, r1
 802058e:	d908      	bls.n	80205a2 <__udivmoddi4+0x1e2>
 8020590:	eb1c 0101 	adds.w	r1, ip, r1
 8020594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020598:	d26c      	bcs.n	8020674 <__udivmoddi4+0x2b4>
 802059a:	458e      	cmp	lr, r1
 802059c:	d96a      	bls.n	8020674 <__udivmoddi4+0x2b4>
 802059e:	3802      	subs	r0, #2
 80205a0:	4461      	add	r1, ip
 80205a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80205a6:	fba0 9402 	umull	r9, r4, r0, r2
 80205aa:	eba1 010e 	sub.w	r1, r1, lr
 80205ae:	42a1      	cmp	r1, r4
 80205b0:	46c8      	mov	r8, r9
 80205b2:	46a6      	mov	lr, r4
 80205b4:	d356      	bcc.n	8020664 <__udivmoddi4+0x2a4>
 80205b6:	d053      	beq.n	8020660 <__udivmoddi4+0x2a0>
 80205b8:	b15d      	cbz	r5, 80205d2 <__udivmoddi4+0x212>
 80205ba:	ebb3 0208 	subs.w	r2, r3, r8
 80205be:	eb61 010e 	sbc.w	r1, r1, lr
 80205c2:	fa01 f707 	lsl.w	r7, r1, r7
 80205c6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ca:	40f1      	lsrs	r1, r6
 80205cc:	431f      	orrs	r7, r3
 80205ce:	e9c5 7100 	strd	r7, r1, [r5]
 80205d2:	2600      	movs	r6, #0
 80205d4:	4631      	mov	r1, r6
 80205d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205da:	f1c2 0320 	rsb	r3, r2, #32
 80205de:	40d8      	lsrs	r0, r3
 80205e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205e4:	fa21 f303 	lsr.w	r3, r1, r3
 80205e8:	4091      	lsls	r1, r2
 80205ea:	4301      	orrs	r1, r0
 80205ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205f0:	fa1f fe8c 	uxth.w	lr, ip
 80205f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205f8:	fb07 3610 	mls	r6, r7, r0, r3
 80205fc:	0c0b      	lsrs	r3, r1, #16
 80205fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020602:	fb00 f60e 	mul.w	r6, r0, lr
 8020606:	429e      	cmp	r6, r3
 8020608:	fa04 f402 	lsl.w	r4, r4, r2
 802060c:	d908      	bls.n	8020620 <__udivmoddi4+0x260>
 802060e:	eb1c 0303 	adds.w	r3, ip, r3
 8020612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020616:	d22f      	bcs.n	8020678 <__udivmoddi4+0x2b8>
 8020618:	429e      	cmp	r6, r3
 802061a:	d92d      	bls.n	8020678 <__udivmoddi4+0x2b8>
 802061c:	3802      	subs	r0, #2
 802061e:	4463      	add	r3, ip
 8020620:	1b9b      	subs	r3, r3, r6
 8020622:	b289      	uxth	r1, r1
 8020624:	fbb3 f6f7 	udiv	r6, r3, r7
 8020628:	fb07 3316 	mls	r3, r7, r6, r3
 802062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020630:	fb06 f30e 	mul.w	r3, r6, lr
 8020634:	428b      	cmp	r3, r1
 8020636:	d908      	bls.n	802064a <__udivmoddi4+0x28a>
 8020638:	eb1c 0101 	adds.w	r1, ip, r1
 802063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020640:	d216      	bcs.n	8020670 <__udivmoddi4+0x2b0>
 8020642:	428b      	cmp	r3, r1
 8020644:	d914      	bls.n	8020670 <__udivmoddi4+0x2b0>
 8020646:	3e02      	subs	r6, #2
 8020648:	4461      	add	r1, ip
 802064a:	1ac9      	subs	r1, r1, r3
 802064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020650:	e738      	b.n	80204c4 <__udivmoddi4+0x104>
 8020652:	462e      	mov	r6, r5
 8020654:	4628      	mov	r0, r5
 8020656:	e705      	b.n	8020464 <__udivmoddi4+0xa4>
 8020658:	4606      	mov	r6, r0
 802065a:	e6e3      	b.n	8020424 <__udivmoddi4+0x64>
 802065c:	4618      	mov	r0, r3
 802065e:	e6f8      	b.n	8020452 <__udivmoddi4+0x92>
 8020660:	454b      	cmp	r3, r9
 8020662:	d2a9      	bcs.n	80205b8 <__udivmoddi4+0x1f8>
 8020664:	ebb9 0802 	subs.w	r8, r9, r2
 8020668:	eb64 0e0c 	sbc.w	lr, r4, ip
 802066c:	3801      	subs	r0, #1
 802066e:	e7a3      	b.n	80205b8 <__udivmoddi4+0x1f8>
 8020670:	4646      	mov	r6, r8
 8020672:	e7ea      	b.n	802064a <__udivmoddi4+0x28a>
 8020674:	4620      	mov	r0, r4
 8020676:	e794      	b.n	80205a2 <__udivmoddi4+0x1e2>
 8020678:	4640      	mov	r0, r8
 802067a:	e7d1      	b.n	8020620 <__udivmoddi4+0x260>
 802067c:	46d0      	mov	r8, sl
 802067e:	e77b      	b.n	8020578 <__udivmoddi4+0x1b8>
 8020680:	3b02      	subs	r3, #2
 8020682:	4461      	add	r1, ip
 8020684:	e732      	b.n	80204ec <__udivmoddi4+0x12c>
 8020686:	4630      	mov	r0, r6
 8020688:	e709      	b.n	802049e <__udivmoddi4+0xde>
 802068a:	4464      	add	r4, ip
 802068c:	3802      	subs	r0, #2
 802068e:	e742      	b.n	8020516 <__udivmoddi4+0x156>

08020690 <__aeabi_idiv0>:
 8020690:	4770      	bx	lr
 8020692:	bf00      	nop

08020694 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 8020694:	b580      	push	{r7, lr}
 8020696:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8020698:	4b12      	ldr	r3, [pc, #72]	; (80206e4 <MX_COMP2_Init+0x50>)
 802069a:	4a13      	ldr	r2, [pc, #76]	; (80206e8 <MX_COMP2_Init+0x54>)
 802069c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 802069e:	4b11      	ldr	r3, [pc, #68]	; (80206e4 <MX_COMP2_Init+0x50>)
 80206a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80206a4:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 80206a6:	4b0f      	ldr	r3, [pc, #60]	; (80206e4 <MX_COMP2_Init+0x50>)
 80206a8:	2200      	movs	r2, #0
 80206aa:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80206ac:	4b0d      	ldr	r3, [pc, #52]	; (80206e4 <MX_COMP2_Init+0x50>)
 80206ae:	2200      	movs	r2, #0
 80206b0:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80206b2:	4b0c      	ldr	r3, [pc, #48]	; (80206e4 <MX_COMP2_Init+0x50>)
 80206b4:	2200      	movs	r2, #0
 80206b6:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80206b8:	4b0a      	ldr	r3, [pc, #40]	; (80206e4 <MX_COMP2_Init+0x50>)
 80206ba:	2200      	movs	r2, #0
 80206bc:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80206be:	4b09      	ldr	r3, [pc, #36]	; (80206e4 <MX_COMP2_Init+0x50>)
 80206c0:	2200      	movs	r2, #0
 80206c2:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80206c4:	4b07      	ldr	r3, [pc, #28]	; (80206e4 <MX_COMP2_Init+0x50>)
 80206c6:	2200      	movs	r2, #0
 80206c8:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80206ca:	4b06      	ldr	r3, [pc, #24]	; (80206e4 <MX_COMP2_Init+0x50>)
 80206cc:	2231      	movs	r2, #49	; 0x31
 80206ce:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80206d0:	4804      	ldr	r0, [pc, #16]	; (80206e4 <MX_COMP2_Init+0x50>)
 80206d2:	f001 fcf1 	bl	80220b8 <HAL_COMP_Init>
 80206d6:	4603      	mov	r3, r0
 80206d8:	2b00      	cmp	r3, #0
 80206da:	d001      	beq.n	80206e0 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 80206dc:	f000 fbfa 	bl	8020ed4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80206e0:	bf00      	nop
 80206e2:	bd80      	pop	{r7, pc}
 80206e4:	24000184 	.word	0x24000184
 80206e8:	58003810 	.word	0x58003810

080206ec <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80206ec:	b580      	push	{r7, lr}
 80206ee:	b08a      	sub	sp, #40	; 0x28
 80206f0:	af00      	add	r7, sp, #0
 80206f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80206f4:	f107 0314 	add.w	r3, r7, #20
 80206f8:	2200      	movs	r2, #0
 80206fa:	601a      	str	r2, [r3, #0]
 80206fc:	605a      	str	r2, [r3, #4]
 80206fe:	609a      	str	r2, [r3, #8]
 8020700:	60da      	str	r2, [r3, #12]
 8020702:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 8020704:	687b      	ldr	r3, [r7, #4]
 8020706:	681b      	ldr	r3, [r3, #0]
 8020708:	4a1c      	ldr	r2, [pc, #112]	; (802077c <HAL_COMP_MspInit+0x90>)
 802070a:	4293      	cmp	r3, r2
 802070c:	d132      	bne.n	8020774 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 802070e:	4b1c      	ldr	r3, [pc, #112]	; (8020780 <HAL_COMP_MspInit+0x94>)
 8020710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8020714:	4a1a      	ldr	r2, [pc, #104]	; (8020780 <HAL_COMP_MspInit+0x94>)
 8020716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802071a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802071e:	4b18      	ldr	r3, [pc, #96]	; (8020780 <HAL_COMP_MspInit+0x94>)
 8020720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8020724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020728:	613b      	str	r3, [r7, #16]
 802072a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 802072c:	4b14      	ldr	r3, [pc, #80]	; (8020780 <HAL_COMP_MspInit+0x94>)
 802072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020732:	4a13      	ldr	r2, [pc, #76]	; (8020780 <HAL_COMP_MspInit+0x94>)
 8020734:	f043 0310 	orr.w	r3, r3, #16
 8020738:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802073c:	4b10      	ldr	r3, [pc, #64]	; (8020780 <HAL_COMP_MspInit+0x94>)
 802073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020742:	f003 0310 	and.w	r3, r3, #16
 8020746:	60fb      	str	r3, [r7, #12]
 8020748:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 802074a:	f44f 7300 	mov.w	r3, #512	; 0x200
 802074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8020750:	2303      	movs	r3, #3
 8020752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020754:	2300      	movs	r3, #0
 8020756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8020758:	f107 0314 	add.w	r3, r7, #20
 802075c:	4619      	mov	r1, r3
 802075e:	4809      	ldr	r0, [pc, #36]	; (8020784 <HAL_COMP_MspInit+0x98>)
 8020760:	f004 ffc0 	bl	80256e4 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 4, 0);
 8020764:	2200      	movs	r2, #0
 8020766:	2104      	movs	r1, #4
 8020768:	2089      	movs	r0, #137	; 0x89
 802076a:	f001 ff68 	bl	802263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 802076e:	2089      	movs	r0, #137	; 0x89
 8020770:	f001 ff7f 	bl	8022672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 8020774:	bf00      	nop
 8020776:	3728      	adds	r7, #40	; 0x28
 8020778:	46bd      	mov	sp, r7
 802077a:	bd80      	pop	{r7, pc}
 802077c:	58003810 	.word	0x58003810
 8020780:	58024400 	.word	0x58024400
 8020784:	58021000 	.word	0x58021000

08020788 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8020788:	b580      	push	{r7, lr}
 802078a:	b08a      	sub	sp, #40	; 0x28
 802078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 802078e:	1d3b      	adds	r3, r7, #4
 8020790:	2224      	movs	r2, #36	; 0x24
 8020792:	2100      	movs	r1, #0
 8020794:	4618      	mov	r0, r3
 8020796:	f01b fa9f 	bl	803bcd8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 802079a:	4b12      	ldr	r3, [pc, #72]	; (80207e4 <MX_DAC1_Init+0x5c>)
 802079c:	4a12      	ldr	r2, [pc, #72]	; (80207e8 <MX_DAC1_Init+0x60>)
 802079e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80207a0:	4810      	ldr	r0, [pc, #64]	; (80207e4 <MX_DAC1_Init+0x5c>)
 80207a2:	f001 ff80 	bl	80226a6 <HAL_DAC_Init>
 80207a6:	4603      	mov	r3, r0
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	d001      	beq.n	80207b0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80207ac:	f000 fb92 	bl	8020ed4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80207b0:	2300      	movs	r3, #0
 80207b2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80207b4:	2300      	movs	r3, #0
 80207b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80207b8:	2302      	movs	r3, #2
 80207ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80207bc:	2302      	movs	r3, #2
 80207be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80207c0:	2300      	movs	r3, #0
 80207c2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80207c4:	1d3b      	adds	r3, r7, #4
 80207c6:	2200      	movs	r2, #0
 80207c8:	4619      	mov	r1, r3
 80207ca:	4806      	ldr	r0, [pc, #24]	; (80207e4 <MX_DAC1_Init+0x5c>)
 80207cc:	f002 f804 	bl	80227d8 <HAL_DAC_ConfigChannel>
 80207d0:	4603      	mov	r3, r0
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d001      	beq.n	80207da <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80207d6:	f000 fb7d 	bl	8020ed4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80207da:	bf00      	nop
 80207dc:	3728      	adds	r7, #40	; 0x28
 80207de:	46bd      	mov	sp, r7
 80207e0:	bd80      	pop	{r7, pc}
 80207e2:	bf00      	nop
 80207e4:	240001b0 	.word	0x240001b0
 80207e8:	40007400 	.word	0x40007400

080207ec <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80207ec:	b480      	push	{r7}
 80207ee:	b085      	sub	sp, #20
 80207f0:	af00      	add	r7, sp, #0
 80207f2:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 80207f4:	687b      	ldr	r3, [r7, #4]
 80207f6:	681b      	ldr	r3, [r3, #0]
 80207f8:	4a0b      	ldr	r2, [pc, #44]	; (8020828 <HAL_DAC_MspInit+0x3c>)
 80207fa:	4293      	cmp	r3, r2
 80207fc:	d10e      	bne.n	802081c <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80207fe:	4b0b      	ldr	r3, [pc, #44]	; (802082c <HAL_DAC_MspInit+0x40>)
 8020800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8020804:	4a09      	ldr	r2, [pc, #36]	; (802082c <HAL_DAC_MspInit+0x40>)
 8020806:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802080a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802080e:	4b07      	ldr	r3, [pc, #28]	; (802082c <HAL_DAC_MspInit+0x40>)
 8020810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8020814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8020818:	60fb      	str	r3, [r7, #12]
 802081a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 802081c:	bf00      	nop
 802081e:	3714      	adds	r7, #20
 8020820:	46bd      	mov	sp, r7
 8020822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020826:	4770      	bx	lr
 8020828:	40007400 	.word	0x40007400
 802082c:	58024400 	.word	0x58024400

08020830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8020830:	b580      	push	{r7, lr}
 8020832:	b082      	sub	sp, #8
 8020834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020836:	4b19      	ldr	r3, [pc, #100]	; (802089c <MX_DMA_Init+0x6c>)
 8020838:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802083c:	4a17      	ldr	r2, [pc, #92]	; (802089c <MX_DMA_Init+0x6c>)
 802083e:	f043 0301 	orr.w	r3, r3, #1
 8020842:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8020846:	4b15      	ldr	r3, [pc, #84]	; (802089c <MX_DMA_Init+0x6c>)
 8020848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802084c:	f003 0301 	and.w	r3, r3, #1
 8020850:	607b      	str	r3, [r7, #4]
 8020852:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8020854:	2200      	movs	r2, #0
 8020856:	2100      	movs	r1, #0
 8020858:	200b      	movs	r0, #11
 802085a:	f001 fef0 	bl	802263e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 802085e:	200b      	movs	r0, #11
 8020860:	f001 ff07 	bl	8022672 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8020864:	2200      	movs	r2, #0
 8020866:	2100      	movs	r1, #0
 8020868:	200c      	movs	r0, #12
 802086a:	f001 fee8 	bl	802263e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 802086e:	200c      	movs	r0, #12
 8020870:	f001 feff 	bl	8022672 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8020874:	2200      	movs	r2, #0
 8020876:	2100      	movs	r1, #0
 8020878:	200f      	movs	r0, #15
 802087a:	f001 fee0 	bl	802263e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 802087e:	200f      	movs	r0, #15
 8020880:	f001 fef7 	bl	8022672 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8020884:	2200      	movs	r2, #0
 8020886:	2100      	movs	r1, #0
 8020888:	2010      	movs	r0, #16
 802088a:	f001 fed8 	bl	802263e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 802088e:	2010      	movs	r0, #16
 8020890:	f001 feef 	bl	8022672 <HAL_NVIC_EnableIRQ>

}
 8020894:	bf00      	nop
 8020896:	3708      	adds	r7, #8
 8020898:	46bd      	mov	sp, r7
 802089a:	bd80      	pop	{r7, pc}
 802089c:	58024400 	.word	0x58024400

080208a0 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80208a0:	b580      	push	{r7, lr}
 80208a2:	b08a      	sub	sp, #40	; 0x28
 80208a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80208a6:	f107 0314 	add.w	r3, r7, #20
 80208aa:	2200      	movs	r2, #0
 80208ac:	601a      	str	r2, [r3, #0]
 80208ae:	605a      	str	r2, [r3, #4]
 80208b0:	609a      	str	r2, [r3, #8]
 80208b2:	60da      	str	r2, [r3, #12]
 80208b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80208b6:	4b3b      	ldr	r3, [pc, #236]	; (80209a4 <MX_GPIO_Init+0x104>)
 80208b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80208bc:	4a39      	ldr	r2, [pc, #228]	; (80209a4 <MX_GPIO_Init+0x104>)
 80208be:	f043 0304 	orr.w	r3, r3, #4
 80208c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80208c6:	4b37      	ldr	r3, [pc, #220]	; (80209a4 <MX_GPIO_Init+0x104>)
 80208c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80208cc:	f003 0304 	and.w	r3, r3, #4
 80208d0:	613b      	str	r3, [r7, #16]
 80208d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80208d4:	4b33      	ldr	r3, [pc, #204]	; (80209a4 <MX_GPIO_Init+0x104>)
 80208d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80208da:	4a32      	ldr	r2, [pc, #200]	; (80209a4 <MX_GPIO_Init+0x104>)
 80208dc:	f043 0301 	orr.w	r3, r3, #1
 80208e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80208e4:	4b2f      	ldr	r3, [pc, #188]	; (80209a4 <MX_GPIO_Init+0x104>)
 80208e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80208ea:	f003 0301 	and.w	r3, r3, #1
 80208ee:	60fb      	str	r3, [r7, #12]
 80208f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80208f2:	4b2c      	ldr	r3, [pc, #176]	; (80209a4 <MX_GPIO_Init+0x104>)
 80208f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80208f8:	4a2a      	ldr	r2, [pc, #168]	; (80209a4 <MX_GPIO_Init+0x104>)
 80208fa:	f043 0310 	orr.w	r3, r3, #16
 80208fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020902:	4b28      	ldr	r3, [pc, #160]	; (80209a4 <MX_GPIO_Init+0x104>)
 8020904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020908:	f003 0310 	and.w	r3, r3, #16
 802090c:	60bb      	str	r3, [r7, #8]
 802090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020910:	4b24      	ldr	r3, [pc, #144]	; (80209a4 <MX_GPIO_Init+0x104>)
 8020912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020916:	4a23      	ldr	r2, [pc, #140]	; (80209a4 <MX_GPIO_Init+0x104>)
 8020918:	f043 0302 	orr.w	r3, r3, #2
 802091c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020920:	4b20      	ldr	r3, [pc, #128]	; (80209a4 <MX_GPIO_Init+0x104>)
 8020922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020926:	f003 0302 	and.w	r3, r3, #2
 802092a:	607b      	str	r3, [r7, #4]
 802092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802092e:	4b1d      	ldr	r3, [pc, #116]	; (80209a4 <MX_GPIO_Init+0x104>)
 8020930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020934:	4a1b      	ldr	r2, [pc, #108]	; (80209a4 <MX_GPIO_Init+0x104>)
 8020936:	f043 0308 	orr.w	r3, r3, #8
 802093a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802093e:	4b19      	ldr	r3, [pc, #100]	; (80209a4 <MX_GPIO_Init+0x104>)
 8020940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020944:	f003 0308 	and.w	r3, r3, #8
 8020948:	603b      	str	r3, [r7, #0]
 802094a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 802094c:	2200      	movs	r2, #0
 802094e:	2101      	movs	r1, #1
 8020950:	4815      	ldr	r0, [pc, #84]	; (80209a8 <MX_GPIO_Init+0x108>)
 8020952:	f005 f877 	bl	8025a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8020956:	2200      	movs	r2, #0
 8020958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802095c:	4813      	ldr	r0, [pc, #76]	; (80209ac <MX_GPIO_Init+0x10c>)
 802095e:	f005 f871 	bl	8025a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 8020962:	2301      	movs	r3, #1
 8020964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020966:	2301      	movs	r3, #1
 8020968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802096a:	2302      	movs	r3, #2
 802096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802096e:	2303      	movs	r3, #3
 8020970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 8020972:	f107 0314 	add.w	r3, r7, #20
 8020976:	4619      	mov	r1, r3
 8020978:	480b      	ldr	r0, [pc, #44]	; (80209a8 <MX_GPIO_Init+0x108>)
 802097a:	f004 feb3 	bl	80256e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 802097e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020984:	2301      	movs	r3, #1
 8020986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8020988:	2302      	movs	r3, #2
 802098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802098c:	2303      	movs	r3, #3
 802098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8020990:	f107 0314 	add.w	r3, r7, #20
 8020994:	4619      	mov	r1, r3
 8020996:	4805      	ldr	r0, [pc, #20]	; (80209ac <MX_GPIO_Init+0x10c>)
 8020998:	f004 fea4 	bl	80256e4 <HAL_GPIO_Init>

}
 802099c:	bf00      	nop
 802099e:	3728      	adds	r7, #40	; 0x28
 80209a0:	46bd      	mov	sp, r7
 80209a2:	bd80      	pop	{r7, pc}
 80209a4:	58024400 	.word	0x58024400
 80209a8:	58020800 	.word	0x58020800
 80209ac:	58021000 	.word	0x58021000

080209b0 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80209b0:	b580      	push	{r7, lr}
 80209b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80209b4:	4b1b      	ldr	r3, [pc, #108]	; (8020a24 <MX_I2C2_Init+0x74>)
 80209b6:	4a1c      	ldr	r2, [pc, #112]	; (8020a28 <MX_I2C2_Init+0x78>)
 80209b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 80209ba:	4b1a      	ldr	r3, [pc, #104]	; (8020a24 <MX_I2C2_Init+0x74>)
 80209bc:	4a1b      	ldr	r2, [pc, #108]	; (8020a2c <MX_I2C2_Init+0x7c>)
 80209be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80209c0:	4b18      	ldr	r3, [pc, #96]	; (8020a24 <MX_I2C2_Init+0x74>)
 80209c2:	2200      	movs	r2, #0
 80209c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80209c6:	4b17      	ldr	r3, [pc, #92]	; (8020a24 <MX_I2C2_Init+0x74>)
 80209c8:	2201      	movs	r2, #1
 80209ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80209cc:	4b15      	ldr	r3, [pc, #84]	; (8020a24 <MX_I2C2_Init+0x74>)
 80209ce:	2200      	movs	r2, #0
 80209d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80209d2:	4b14      	ldr	r3, [pc, #80]	; (8020a24 <MX_I2C2_Init+0x74>)
 80209d4:	2200      	movs	r2, #0
 80209d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80209d8:	4b12      	ldr	r3, [pc, #72]	; (8020a24 <MX_I2C2_Init+0x74>)
 80209da:	2200      	movs	r2, #0
 80209dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80209de:	4b11      	ldr	r3, [pc, #68]	; (8020a24 <MX_I2C2_Init+0x74>)
 80209e0:	2200      	movs	r2, #0
 80209e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80209e4:	4b0f      	ldr	r3, [pc, #60]	; (8020a24 <MX_I2C2_Init+0x74>)
 80209e6:	2200      	movs	r2, #0
 80209e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80209ea:	480e      	ldr	r0, [pc, #56]	; (8020a24 <MX_I2C2_Init+0x74>)
 80209ec:	f005 f844 	bl	8025a78 <HAL_I2C_Init>
 80209f0:	4603      	mov	r3, r0
 80209f2:	2b00      	cmp	r3, #0
 80209f4:	d001      	beq.n	80209fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80209f6:	f000 fa6d 	bl	8020ed4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80209fa:	2100      	movs	r1, #0
 80209fc:	4809      	ldr	r0, [pc, #36]	; (8020a24 <MX_I2C2_Init+0x74>)
 80209fe:	f005 ff50 	bl	80268a2 <HAL_I2CEx_ConfigAnalogFilter>
 8020a02:	4603      	mov	r3, r0
 8020a04:	2b00      	cmp	r3, #0
 8020a06:	d001      	beq.n	8020a0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8020a08:	f000 fa64 	bl	8020ed4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8020a0c:	2100      	movs	r1, #0
 8020a0e:	4805      	ldr	r0, [pc, #20]	; (8020a24 <MX_I2C2_Init+0x74>)
 8020a10:	f005 ff92 	bl	8026938 <HAL_I2CEx_ConfigDigitalFilter>
 8020a14:	4603      	mov	r3, r0
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	d001      	beq.n	8020a1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8020a1a:	f000 fa5b 	bl	8020ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8020a1e:	bf00      	nop
 8020a20:	bd80      	pop	{r7, pc}
 8020a22:	bf00      	nop
 8020a24:	240001c4 	.word	0x240001c4
 8020a28:	40005800 	.word	0x40005800
 8020a2c:	00b03fdb 	.word	0x00b03fdb

08020a30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8020a30:	b580      	push	{r7, lr}
 8020a32:	b0b8      	sub	sp, #224	; 0xe0
 8020a34:	af00      	add	r7, sp, #0
 8020a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020a38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8020a3c:	2200      	movs	r2, #0
 8020a3e:	601a      	str	r2, [r3, #0]
 8020a40:	605a      	str	r2, [r3, #4]
 8020a42:	609a      	str	r2, [r3, #8]
 8020a44:	60da      	str	r2, [r3, #12]
 8020a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020a48:	f107 0310 	add.w	r3, r7, #16
 8020a4c:	22bc      	movs	r2, #188	; 0xbc
 8020a4e:	2100      	movs	r1, #0
 8020a50:	4618      	mov	r0, r3
 8020a52:	f01b f941 	bl	803bcd8 <memset>
  if(i2cHandle->Instance==I2C2)
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	681b      	ldr	r3, [r3, #0]
 8020a5a:	4a5a      	ldr	r2, [pc, #360]	; (8020bc4 <HAL_I2C_MspInit+0x194>)
 8020a5c:	4293      	cmp	r3, r2
 8020a5e:	f040 80ad 	bne.w	8020bbc <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8020a62:	2308      	movs	r3, #8
 8020a64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8020a66:	2300      	movs	r3, #0
 8020a68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020a6c:	f107 0310 	add.w	r3, r7, #16
 8020a70:	4618      	mov	r0, r3
 8020a72:	f008 fa87 	bl	8028f84 <HAL_RCCEx_PeriphCLKConfig>
 8020a76:	4603      	mov	r3, r0
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	d001      	beq.n	8020a80 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8020a7c:	f000 fa2a 	bl	8020ed4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020a80:	4b51      	ldr	r3, [pc, #324]	; (8020bc8 <HAL_I2C_MspInit+0x198>)
 8020a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020a86:	4a50      	ldr	r2, [pc, #320]	; (8020bc8 <HAL_I2C_MspInit+0x198>)
 8020a88:	f043 0302 	orr.w	r3, r3, #2
 8020a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020a90:	4b4d      	ldr	r3, [pc, #308]	; (8020bc8 <HAL_I2C_MspInit+0x198>)
 8020a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020a96:	f003 0302 	and.w	r3, r3, #2
 8020a9a:	60fb      	str	r3, [r7, #12]
 8020a9c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8020a9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8020aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8020aa6:	2312      	movs	r3, #18
 8020aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020aac:	2300      	movs	r3, #0
 8020aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020ab2:	2300      	movs	r3, #0
 8020ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8020ab8:	2304      	movs	r3, #4
 8020aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020abe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8020ac2:	4619      	mov	r1, r3
 8020ac4:	4841      	ldr	r0, [pc, #260]	; (8020bcc <HAL_I2C_MspInit+0x19c>)
 8020ac6:	f004 fe0d 	bl	80256e4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8020aca:	4b3f      	ldr	r3, [pc, #252]	; (8020bc8 <HAL_I2C_MspInit+0x198>)
 8020acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8020ad0:	4a3d      	ldr	r2, [pc, #244]	; (8020bc8 <HAL_I2C_MspInit+0x198>)
 8020ad2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8020ad6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8020ada:	4b3b      	ldr	r3, [pc, #236]	; (8020bc8 <HAL_I2C_MspInit+0x198>)
 8020adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8020ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020ae4:	60bb      	str	r3, [r7, #8]
 8020ae6:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 8020ae8:	4b39      	ldr	r3, [pc, #228]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020aea:	4a3a      	ldr	r2, [pc, #232]	; (8020bd4 <HAL_I2C_MspInit+0x1a4>)
 8020aec:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8020aee:	4b38      	ldr	r3, [pc, #224]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020af0:	2223      	movs	r2, #35	; 0x23
 8020af2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8020af4:	4b36      	ldr	r3, [pc, #216]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020af6:	2200      	movs	r2, #0
 8020af8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8020afa:	4b35      	ldr	r3, [pc, #212]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020afc:	2200      	movs	r2, #0
 8020afe:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8020b00:	4b33      	ldr	r3, [pc, #204]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020b06:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8020b08:	4b31      	ldr	r3, [pc, #196]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020b0a:	2200      	movs	r2, #0
 8020b0c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8020b0e:	4b30      	ldr	r3, [pc, #192]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020b10:	2200      	movs	r2, #0
 8020b12:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8020b14:	4b2e      	ldr	r3, [pc, #184]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020b16:	2200      	movs	r2, #0
 8020b18:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8020b1a:	4b2d      	ldr	r3, [pc, #180]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8020b20:	4b2b      	ldr	r3, [pc, #172]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020b22:	2200      	movs	r2, #0
 8020b24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8020b26:	482a      	ldr	r0, [pc, #168]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020b28:	f001 ff86 	bl	8022a38 <HAL_DMA_Init>
 8020b2c:	4603      	mov	r3, r0
 8020b2e:	2b00      	cmp	r3, #0
 8020b30:	d001      	beq.n	8020b36 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 8020b32:	f000 f9cf 	bl	8020ed4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8020b36:	687b      	ldr	r3, [r7, #4]
 8020b38:	4a25      	ldr	r2, [pc, #148]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020b3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8020b3c:	4a24      	ldr	r2, [pc, #144]	; (8020bd0 <HAL_I2C_MspInit+0x1a0>)
 8020b3e:	687b      	ldr	r3, [r7, #4]
 8020b40:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8020b42:	4b25      	ldr	r3, [pc, #148]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b44:	4a25      	ldr	r2, [pc, #148]	; (8020bdc <HAL_I2C_MspInit+0x1ac>)
 8020b46:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8020b48:	4b23      	ldr	r3, [pc, #140]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b4a:	2224      	movs	r2, #36	; 0x24
 8020b4c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8020b4e:	4b22      	ldr	r3, [pc, #136]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b50:	2240      	movs	r2, #64	; 0x40
 8020b52:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8020b54:	4b20      	ldr	r3, [pc, #128]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b56:	2200      	movs	r2, #0
 8020b58:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8020b5a:	4b1f      	ldr	r3, [pc, #124]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020b60:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8020b62:	4b1d      	ldr	r3, [pc, #116]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b64:	2200      	movs	r2, #0
 8020b66:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8020b68:	4b1b      	ldr	r3, [pc, #108]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b6a:	2200      	movs	r2, #0
 8020b6c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8020b6e:	4b1a      	ldr	r3, [pc, #104]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b70:	2200      	movs	r2, #0
 8020b72:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8020b74:	4b18      	ldr	r3, [pc, #96]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b76:	2200      	movs	r2, #0
 8020b78:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8020b7a:	4b17      	ldr	r3, [pc, #92]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b7c:	2200      	movs	r2, #0
 8020b7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8020b80:	4815      	ldr	r0, [pc, #84]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b82:	f001 ff59 	bl	8022a38 <HAL_DMA_Init>
 8020b86:	4603      	mov	r3, r0
 8020b88:	2b00      	cmp	r3, #0
 8020b8a:	d001      	beq.n	8020b90 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 8020b8c:	f000 f9a2 	bl	8020ed4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8020b90:	687b      	ldr	r3, [r7, #4]
 8020b92:	4a11      	ldr	r2, [pc, #68]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b94:	639a      	str	r2, [r3, #56]	; 0x38
 8020b96:	4a10      	ldr	r2, [pc, #64]	; (8020bd8 <HAL_I2C_MspInit+0x1a8>)
 8020b98:	687b      	ldr	r3, [r7, #4]
 8020b9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8020b9c:	2200      	movs	r2, #0
 8020b9e:	2100      	movs	r1, #0
 8020ba0:	2021      	movs	r0, #33	; 0x21
 8020ba2:	f001 fd4c 	bl	802263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8020ba6:	2021      	movs	r0, #33	; 0x21
 8020ba8:	f001 fd63 	bl	8022672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8020bac:	2200      	movs	r2, #0
 8020bae:	2100      	movs	r1, #0
 8020bb0:	2022      	movs	r0, #34	; 0x22
 8020bb2:	f001 fd44 	bl	802263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8020bb6:	2022      	movs	r0, #34	; 0x22
 8020bb8:	f001 fd5b 	bl	8022672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8020bbc:	bf00      	nop
 8020bbe:	37e0      	adds	r7, #224	; 0xe0
 8020bc0:	46bd      	mov	sp, r7
 8020bc2:	bd80      	pop	{r7, pc}
 8020bc4:	40005800 	.word	0x40005800
 8020bc8:	58024400 	.word	0x58024400
 8020bcc:	58020400 	.word	0x58020400
 8020bd0:	24000210 	.word	0x24000210
 8020bd4:	40020010 	.word	0x40020010
 8020bd8:	24000288 	.word	0x24000288
 8020bdc:	40020028 	.word	0x40020028

08020be0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8020be0:	b5b0      	push	{r4, r5, r7, lr}
 8020be2:	b090      	sub	sp, #64	; 0x40
 8020be4:	af06      	add	r7, sp, #24
	/* USER CODE BEGIN 1 */
	SCB->VTOR = (FLASH_BASE | 0x20000);
 8020be6:	4b2e      	ldr	r3, [pc, #184]	; (8020ca0 <main+0xc0>)
 8020be8:	4a2e      	ldr	r2, [pc, #184]	; (8020ca4 <main+0xc4>)
 8020bea:	609a      	str	r2, [r3, #8]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8020bec:	f001 f9a2 	bl	8021f34 <HAL_Init>

	/* USER CODE BEGIN Init */
	struct MotherboardConfig config;
	config.HeadIO.Uart = &huart3;
 8020bf0:	4b2d      	ldr	r3, [pc, #180]	; (8020ca8 <main+0xc8>)
 8020bf2:	607b      	str	r3, [r7, #4]

	config.BodyClient.Uart = &huart8;
 8020bf4:	4b2d      	ldr	r3, [pc, #180]	; (8020cac <main+0xcc>)
 8020bf6:	60bb      	str	r3, [r7, #8]
	config.BodyClient.NAttempts = 5;
 8020bf8:	2305      	movs	r3, #5
 8020bfa:	613b      	str	r3, [r7, #16]
	config.BodyClient.TimeoutMs = 2;
 8020bfc:	2302      	movs	r3, #2
 8020bfe:	60fb      	str	r3, [r7, #12]

	config.IMUDevice.SampleRate = 800.0;
 8020c00:	4b2b      	ldr	r3, [pc, #172]	; (8020cb0 <main+0xd0>)
 8020c02:	61fb      	str	r3, [r7, #28]
	config.IMUDevice.ReportLatency = 0;
 8020c04:	2300      	movs	r3, #0
 8020c06:	623b      	str	r3, [r7, #32]
	config.IMUDevice.Spi = &hspi1;
 8020c08:	4b2a      	ldr	r3, [pc, #168]	; (8020cb4 <main+0xd4>)
 8020c0a:	61bb      	str	r3, [r7, #24]

	config.BodyQueue.Period = 20;
 8020c0c:	2314      	movs	r3, #20
 8020c0e:	753b      	strb	r3, [r7, #20]

	config.StrobeFilter.TargetDuration = 10;
 8020c10:	230a      	movs	r3, #10
 8020c12:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	config.StrobeFilter.DurationThreshold = 0;
 8020c16:	2300      	movs	r3, #0
 8020c18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	MotherboardInit(config);
 8020c1c:	466d      	mov	r5, sp
 8020c1e:	f107 0414 	add.w	r4, r7, #20
 8020c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020c26:	6823      	ldr	r3, [r4, #0]
 8020c28:	602b      	str	r3, [r5, #0]
 8020c2a:	1d3b      	adds	r3, r7, #4
 8020c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020c2e:	f016 fa5d 	bl	80370ec <MotherboardInit>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8020c32:	f000 f849 	bl	8020cc8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8020c36:	f7ff fe33 	bl	80208a0 <MX_GPIO_Init>
	MX_DMA_Init();
 8020c3a:	f7ff fdf9 	bl	8020830 <MX_DMA_Init>
	MX_I2C2_Init();
 8020c3e:	f7ff feb7 	bl	80209b0 <MX_I2C2_Init>
	MX_SPI1_Init();
 8020c42:	f000 f94d 	bl	8020ee0 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8020c46:	f013 fc23 	bl	8034490 <MX_USB_DEVICE_Init>
	MX_USART2_UART_Init();
 8020c4a:	f000 fefb 	bl	8021a44 <MX_USART2_UART_Init>
	MX_UART4_Init();
 8020c4e:	f000 fe03 	bl	8021858 <MX_UART4_Init>
	MX_UART7_Init();
 8020c52:	f000 fe53 	bl	80218fc <MX_UART7_Init>
	MX_USART3_UART_Init();
 8020c56:	f000 ff41 	bl	8021adc <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8020c5a:	f000 fcfd 	bl	8021658 <MX_TIM3_Init>
	MX_TIM2_Init();
 8020c5e:	f000 fcad 	bl	80215bc <MX_TIM2_Init>
	MX_TIM4_Init();
 8020c62:	f000 fd47 	bl	80216f4 <MX_TIM4_Init>
	MX_COMP2_Init();
 8020c66:	f7ff fd15 	bl	8020694 <MX_COMP2_Init>
	MX_DAC1_Init();
 8020c6a:	f7ff fd8d 	bl	8020788 <MX_DAC1_Init>
	MX_UART8_Init();
 8020c6e:	f000 fe93 	bl	8021998 <MX_UART8_Init>
	/* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8020c72:	2100      	movs	r1, #0
 8020c74:	4810      	ldr	r0, [pc, #64]	; (8020cb8 <main+0xd8>)
 8020c76:	f001 fd38 	bl	80226ea <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 8020c7a:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 8020c7e:	2200      	movs	r2, #0
 8020c80:	2100      	movs	r1, #0
 8020c82:	480d      	ldr	r0, [pc, #52]	; (8020cb8 <main+0xd8>)
 8020c84:	f001 fd83 	bl	802278e <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 8020c88:	480c      	ldr	r0, [pc, #48]	; (8020cbc <main+0xdc>)
 8020c8a:	f00a fe67 	bl	802b95c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8020c8e:	480c      	ldr	r0, [pc, #48]	; (8020cc0 <main+0xe0>)
 8020c90:	f00a fe64 	bl	802b95c <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 8020c94:	480b      	ldr	r0, [pc, #44]	; (8020cc4 <main+0xe4>)
 8020c96:	f001 fb39 	bl	802230c <HAL_COMP_Start>

	MotherboardRun();
 8020c9a:	f016 fa4f 	bl	803713c <MotherboardRun>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8020c9e:	e7fe      	b.n	8020c9e <main+0xbe>
 8020ca0:	e000ed00 	.word	0xe000ed00
 8020ca4:	08020000 	.word	0x08020000
 8020ca8:	240007a0 	.word	0x240007a0
 8020cac:	24000680 	.word	0x24000680
 8020cb0:	44480000 	.word	0x44480000
 8020cb4:	24000300 	.word	0x24000300
 8020cb8:	240001b0 	.word	0x240001b0
 8020cbc:	240004c8 	.word	0x240004c8
 8020cc0:	2400047c 	.word	0x2400047c
 8020cc4:	24000184 	.word	0x24000184

08020cc8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8020cc8:	b580      	push	{r7, lr}
 8020cca:	b09e      	sub	sp, #120	; 0x78
 8020ccc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8020cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8020cd2:	224c      	movs	r2, #76	; 0x4c
 8020cd4:	2100      	movs	r1, #0
 8020cd6:	4618      	mov	r0, r3
 8020cd8:	f01a fffe 	bl	803bcd8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8020cdc:	f107 030c 	add.w	r3, r7, #12
 8020ce0:	2220      	movs	r2, #32
 8020ce2:	2100      	movs	r1, #0
 8020ce4:	4618      	mov	r0, r3
 8020ce6:	f01a fff7 	bl	803bcd8 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8020cea:	2002      	movs	r0, #2
 8020cec:	f007 f946 	bl	8027f7c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020cf0:	2300      	movs	r3, #0
 8020cf2:	60bb      	str	r3, [r7, #8]
 8020cf4:	4b4d      	ldr	r3, [pc, #308]	; (8020e2c <SystemClock_Config+0x164>)
 8020cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020cf8:	4a4c      	ldr	r2, [pc, #304]	; (8020e2c <SystemClock_Config+0x164>)
 8020cfa:	f023 0301 	bic.w	r3, r3, #1
 8020cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8020d00:	4b4a      	ldr	r3, [pc, #296]	; (8020e2c <SystemClock_Config+0x164>)
 8020d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d04:	f003 0301 	and.w	r3, r3, #1
 8020d08:	60bb      	str	r3, [r7, #8]
 8020d0a:	4b49      	ldr	r3, [pc, #292]	; (8020e30 <SystemClock_Config+0x168>)
 8020d0c:	699b      	ldr	r3, [r3, #24]
 8020d0e:	4a48      	ldr	r2, [pc, #288]	; (8020e30 <SystemClock_Config+0x168>)
 8020d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8020d14:	6193      	str	r3, [r2, #24]
 8020d16:	4b46      	ldr	r3, [pc, #280]	; (8020e30 <SystemClock_Config+0x168>)
 8020d18:	699b      	ldr	r3, [r3, #24]
 8020d1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020d1e:	60bb      	str	r3, [r7, #8]
 8020d20:	68bb      	ldr	r3, [r7, #8]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8020d22:	bf00      	nop
 8020d24:	4b42      	ldr	r3, [pc, #264]	; (8020e30 <SystemClock_Config+0x168>)
 8020d26:	699b      	ldr	r3, [r3, #24]
 8020d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8020d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020d30:	d1f8      	bne.n	8020d24 <SystemClock_Config+0x5c>
	}

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8020d32:	4b40      	ldr	r3, [pc, #256]	; (8020e34 <SystemClock_Config+0x16c>)
 8020d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8020d38:	4a3e      	ldr	r2, [pc, #248]	; (8020e34 <SystemClock_Config+0x16c>)
 8020d3a:	f043 0302 	orr.w	r3, r3, #2
 8020d3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8020d42:	4b3c      	ldr	r3, [pc, #240]	; (8020e34 <SystemClock_Config+0x16c>)
 8020d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8020d48:	f003 0302 	and.w	r3, r3, #2
 8020d4c:	607b      	str	r3, [r7, #4]
 8020d4e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8020d50:	2300      	movs	r3, #0
 8020d52:	603b      	str	r3, [r7, #0]
 8020d54:	4b36      	ldr	r3, [pc, #216]	; (8020e30 <SystemClock_Config+0x168>)
 8020d56:	699b      	ldr	r3, [r3, #24]
 8020d58:	4a35      	ldr	r2, [pc, #212]	; (8020e30 <SystemClock_Config+0x168>)
 8020d5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8020d5e:	6193      	str	r3, [r2, #24]
 8020d60:	4b33      	ldr	r3, [pc, #204]	; (8020e30 <SystemClock_Config+0x168>)
 8020d62:	699b      	ldr	r3, [r3, #24]
 8020d64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020d68:	603b      	str	r3, [r7, #0]
 8020d6a:	4b30      	ldr	r3, [pc, #192]	; (8020e2c <SystemClock_Config+0x164>)
 8020d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d6e:	4a2f      	ldr	r2, [pc, #188]	; (8020e2c <SystemClock_Config+0x164>)
 8020d70:	f043 0301 	orr.w	r3, r3, #1
 8020d74:	62d3      	str	r3, [r2, #44]	; 0x2c
 8020d76:	4b2d      	ldr	r3, [pc, #180]	; (8020e2c <SystemClock_Config+0x164>)
 8020d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d7a:	f003 0301 	and.w	r3, r3, #1
 8020d7e:	603b      	str	r3, [r7, #0]
 8020d80:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8020d82:	bf00      	nop
 8020d84:	4b2a      	ldr	r3, [pc, #168]	; (8020e30 <SystemClock_Config+0x168>)
 8020d86:	699b      	ldr	r3, [r3, #24]
 8020d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8020d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020d90:	d1f8      	bne.n	8020d84 <SystemClock_Config+0xbc>
	}

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8020d92:	4b28      	ldr	r3, [pc, #160]	; (8020e34 <SystemClock_Config+0x16c>)
 8020d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020d96:	4a27      	ldr	r2, [pc, #156]	; (8020e34 <SystemClock_Config+0x16c>)
 8020d98:	f023 0303 	bic.w	r3, r3, #3
 8020d9c:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8020d9e:	2322      	movs	r3, #34	; 0x22
 8020da0:	62fb      	str	r3, [r7, #44]	; 0x2c
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8020da2:	2301      	movs	r3, #1
 8020da4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8020da6:	2340      	movs	r3, #64	; 0x40
 8020da8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8020daa:	2301      	movs	r3, #1
 8020dac:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020dae:	2302      	movs	r3, #2
 8020db0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8020db2:	2300      	movs	r3, #0
 8020db4:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 4;
 8020db6:	2304      	movs	r3, #4
 8020db8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 60;
 8020dba:	233c      	movs	r3, #60	; 0x3c
 8020dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = 2;
 8020dbe:	2302      	movs	r3, #2
 8020dc0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8020dc2:	2305      	movs	r3, #5
 8020dc4:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLR = 2;
 8020dc6:	2302      	movs	r3, #2
 8020dc8:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8020dca:	230c      	movs	r3, #12
 8020dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8020dce:	2300      	movs	r3, #0
 8020dd0:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8020dd2:	2300      	movs	r3, #0
 8020dd4:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8020dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8020dda:	4618      	mov	r0, r3
 8020ddc:	f007 f918 	bl	8028010 <HAL_RCC_OscConfig>
 8020de0:	4603      	mov	r3, r0
 8020de2:	2b00      	cmp	r3, #0
 8020de4:	d001      	beq.n	8020dea <SystemClock_Config+0x122>
		Error_Handler();
 8020de6:	f000 f875 	bl	8020ed4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8020dea:	233f      	movs	r3, #63	; 0x3f
 8020dec:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020dee:	2303      	movs	r3, #3
 8020df0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8020df2:	2300      	movs	r3, #0
 8020df4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8020df6:	2308      	movs	r3, #8
 8020df8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8020dfa:	2340      	movs	r3, #64	; 0x40
 8020dfc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8020dfe:	2340      	movs	r3, #64	; 0x40
 8020e00:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8020e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020e06:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8020e08:	2340      	movs	r3, #64	; 0x40
 8020e0a:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8020e0c:	f107 030c 	add.w	r3, r7, #12
 8020e10:	2104      	movs	r1, #4
 8020e12:	4618      	mov	r0, r3
 8020e14:	f007 fd2a 	bl	802886c <HAL_RCC_ClockConfig>
 8020e18:	4603      	mov	r3, r0
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d001      	beq.n	8020e22 <SystemClock_Config+0x15a>
		Error_Handler();
 8020e1e:	f000 f859 	bl	8020ed4 <Error_Handler>
	}
}
 8020e22:	bf00      	nop
 8020e24:	3778      	adds	r7, #120	; 0x78
 8020e26:	46bd      	mov	sp, r7
 8020e28:	bd80      	pop	{r7, pc}
 8020e2a:	bf00      	nop
 8020e2c:	58000400 	.word	0x58000400
 8020e30:	58024800 	.word	0x58024800
 8020e34:	58024400 	.word	0x58024400

08020e38 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8020e38:	b580      	push	{r7, lr}
 8020e3a:	b082      	sub	sp, #8
 8020e3c:	af00      	add	r7, sp, #0
 8020e3e:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2)
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	681b      	ldr	r3, [r3, #0]
 8020e44:	4a04      	ldr	r2, [pc, #16]	; (8020e58 <HAL_COMP_TriggerCallback+0x20>)
 8020e46:	4293      	cmp	r3, r2
 8020e48:	d101      	bne.n	8020e4e <HAL_COMP_TriggerCallback+0x16>
		SFCompCallback();
 8020e4a:	f016 fa0d 	bl	8037268 <SFCompCallback>
}
 8020e4e:	bf00      	nop
 8020e50:	3708      	adds	r7, #8
 8020e52:	46bd      	mov	sp, r7
 8020e54:	bd80      	pop	{r7, pc}
 8020e56:	bf00      	nop
 8020e58:	58003810 	.word	0x58003810

08020e5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8020e5c:	b580      	push	{r7, lr}
 8020e5e:	b082      	sub	sp, #8
 8020e60:	af00      	add	r7, sp, #0
 8020e62:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	681b      	ldr	r3, [r3, #0]
 8020e68:	4a04      	ldr	r2, [pc, #16]	; (8020e7c <HAL_UART_RxCpltCallback+0x20>)
 8020e6a:	4293      	cmp	r3, r2
 8020e6c:	d101      	bne.n	8020e72 <HAL_UART_RxCpltCallback+0x16>
		HeadRxCallback();
 8020e6e:	f016 f983 	bl	8037178 <HeadRxCallback>
}
 8020e72:	bf00      	nop
 8020e74:	3708      	adds	r7, #8
 8020e76:	46bd      	mov	sp, r7
 8020e78:	bd80      	pop	{r7, pc}
 8020e7a:	bf00      	nop
 8020e7c:	40004800 	.word	0x40004800

08020e80 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8020e80:	b580      	push	{r7, lr}
 8020e82:	b082      	sub	sp, #8
 8020e84:	af00      	add	r7, sp, #0
 8020e86:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8020e88:	687b      	ldr	r3, [r7, #4]
 8020e8a:	681b      	ldr	r3, [r3, #0]
 8020e8c:	4a04      	ldr	r2, [pc, #16]	; (8020ea0 <HAL_UART_TxCpltCallback+0x20>)
 8020e8e:	4293      	cmp	r3, r2
 8020e90:	d101      	bne.n	8020e96 <HAL_UART_TxCpltCallback+0x16>
		HeadTxCallback();
 8020e92:	f016 f98f 	bl	80371b4 <HeadTxCallback>
}
 8020e96:	bf00      	nop
 8020e98:	3708      	adds	r7, #8
 8020e9a:	46bd      	mov	sp, r7
 8020e9c:	bd80      	pop	{r7, pc}
 8020e9e:	bf00      	nop
 8020ea0:	40004800 	.word	0x40004800

08020ea4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8020ea4:	b580      	push	{r7, lr}
 8020ea6:	b082      	sub	sp, #8
 8020ea8:	af00      	add	r7, sp, #0
 8020eaa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8020eac:	687b      	ldr	r3, [r7, #4]
 8020eae:	681b      	ldr	r3, [r3, #0]
 8020eb0:	4a07      	ldr	r2, [pc, #28]	; (8020ed0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8020eb2:	4293      	cmp	r3, r2
 8020eb4:	d101      	bne.n	8020eba <HAL_TIM_PeriodElapsedCallback+0x16>
		BQueueTimCallback();
 8020eb6:	f016 f99b 	bl	80371f0 <BQueueTimCallback>

	if (htim->Instance == TIM2)
 8020eba:	687b      	ldr	r3, [r7, #4]
 8020ebc:	681b      	ldr	r3, [r3, #0]
 8020ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020ec2:	d101      	bne.n	8020ec8 <HAL_TIM_PeriodElapsedCallback+0x24>
		IMUTimCallback();
 8020ec4:	f016 f9b2 	bl	803722c <IMUTimCallback>
}
 8020ec8:	bf00      	nop
 8020eca:	3708      	adds	r7, #8
 8020ecc:	46bd      	mov	sp, r7
 8020ece:	bd80      	pop	{r7, pc}
 8020ed0:	40000400 	.word	0x40000400

08020ed4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8020ed4:	b480      	push	{r7}
 8020ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020ed8:	b672      	cpsid	i
}
 8020eda:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8020edc:	e7fe      	b.n	8020edc <Error_Handler+0x8>
	...

08020ee0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8020ee0:	b580      	push	{r7, lr}
 8020ee2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8020ee4:	4b28      	ldr	r3, [pc, #160]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020ee6:	4a29      	ldr	r2, [pc, #164]	; (8020f8c <MX_SPI1_Init+0xac>)
 8020ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8020eea:	4b27      	ldr	r3, [pc, #156]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020eec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8020ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8020ef2:	4b25      	ldr	r3, [pc, #148]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020ef4:	2200      	movs	r2, #0
 8020ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8020ef8:	4b23      	ldr	r3, [pc, #140]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020efa:	2207      	movs	r2, #7
 8020efc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8020efe:	4b22      	ldr	r3, [pc, #136]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8020f04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8020f06:	4b20      	ldr	r3, [pc, #128]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8020f0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8020f0e:	4b1e      	ldr	r3, [pc, #120]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8020f14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8020f16:	4b1c      	ldr	r3, [pc, #112]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020f1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020f1e:	4b1a      	ldr	r3, [pc, #104]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f20:	2200      	movs	r2, #0
 8020f22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8020f24:	4b18      	ldr	r3, [pc, #96]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f26:	2200      	movs	r2, #0
 8020f28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020f2a:	4b17      	ldr	r3, [pc, #92]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f2c:	2200      	movs	r2, #0
 8020f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8020f30:	4b15      	ldr	r3, [pc, #84]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f32:	2200      	movs	r2, #0
 8020f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8020f36:	4b14      	ldr	r3, [pc, #80]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020f3c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8020f3e:	4b12      	ldr	r3, [pc, #72]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f40:	2200      	movs	r2, #0
 8020f42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8020f44:	4b10      	ldr	r3, [pc, #64]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f46:	2200      	movs	r2, #0
 8020f48:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8020f4a:	4b0f      	ldr	r3, [pc, #60]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f4c:	2200      	movs	r2, #0
 8020f4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8020f50:	4b0d      	ldr	r3, [pc, #52]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f52:	2200      	movs	r2, #0
 8020f54:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8020f56:	4b0c      	ldr	r3, [pc, #48]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f58:	2200      	movs	r2, #0
 8020f5a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8020f5c:	4b0a      	ldr	r3, [pc, #40]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f5e:	2200      	movs	r2, #0
 8020f60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8020f62:	4b09      	ldr	r3, [pc, #36]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f64:	2200      	movs	r2, #0
 8020f66:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8020f68:	4b07      	ldr	r3, [pc, #28]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f6a:	2200      	movs	r2, #0
 8020f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8020f6e:	4b06      	ldr	r3, [pc, #24]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f70:	2200      	movs	r2, #0
 8020f72:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8020f74:	4804      	ldr	r0, [pc, #16]	; (8020f88 <MX_SPI1_Init+0xa8>)
 8020f76:	f009 fb6d 	bl	802a654 <HAL_SPI_Init>
 8020f7a:	4603      	mov	r3, r0
 8020f7c:	2b00      	cmp	r3, #0
 8020f7e:	d001      	beq.n	8020f84 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8020f80:	f7ff ffa8 	bl	8020ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8020f84:	bf00      	nop
 8020f86:	bd80      	pop	{r7, pc}
 8020f88:	24000300 	.word	0x24000300
 8020f8c:	40013000 	.word	0x40013000

08020f90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8020f90:	b580      	push	{r7, lr}
 8020f92:	b0b8      	sub	sp, #224	; 0xe0
 8020f94:	af00      	add	r7, sp, #0
 8020f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020f98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8020f9c:	2200      	movs	r2, #0
 8020f9e:	601a      	str	r2, [r3, #0]
 8020fa0:	605a      	str	r2, [r3, #4]
 8020fa2:	609a      	str	r2, [r3, #8]
 8020fa4:	60da      	str	r2, [r3, #12]
 8020fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020fa8:	f107 0310 	add.w	r3, r7, #16
 8020fac:	22bc      	movs	r2, #188	; 0xbc
 8020fae:	2100      	movs	r1, #0
 8020fb0:	4618      	mov	r0, r3
 8020fb2:	f01a fe91 	bl	803bcd8 <memset>
  if(spiHandle->Instance==SPI1)
 8020fb6:	687b      	ldr	r3, [r7, #4]
 8020fb8:	681b      	ldr	r3, [r3, #0]
 8020fba:	4a60      	ldr	r2, [pc, #384]	; (802113c <HAL_SPI_MspInit+0x1ac>)
 8020fbc:	4293      	cmp	r3, r2
 8020fbe:	f040 80b8 	bne.w	8021132 <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8020fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020fc6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8020fc8:	2320      	movs	r3, #32
 8020fca:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8020fcc:	2381      	movs	r3, #129	; 0x81
 8020fce:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8020fd0:	2302      	movs	r3, #2
 8020fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8020fd4:	2302      	movs	r3, #2
 8020fd6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8020fd8:	2302      	movs	r3, #2
 8020fda:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8020fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020fe0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8020fe2:	2300      	movs	r3, #0
 8020fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8020fe6:	2300      	movs	r3, #0
 8020fe8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8020fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8020fee:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020ff0:	f107 0310 	add.w	r3, r7, #16
 8020ff4:	4618      	mov	r0, r3
 8020ff6:	f007 ffc5 	bl	8028f84 <HAL_RCCEx_PeriphCLKConfig>
 8020ffa:	4603      	mov	r3, r0
 8020ffc:	2b00      	cmp	r3, #0
 8020ffe:	d001      	beq.n	8021004 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8021000:	f7ff ff68 	bl	8020ed4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8021004:	4b4e      	ldr	r3, [pc, #312]	; (8021140 <HAL_SPI_MspInit+0x1b0>)
 8021006:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802100a:	4a4d      	ldr	r2, [pc, #308]	; (8021140 <HAL_SPI_MspInit+0x1b0>)
 802100c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8021010:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8021014:	4b4a      	ldr	r3, [pc, #296]	; (8021140 <HAL_SPI_MspInit+0x1b0>)
 8021016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802101a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802101e:	60fb      	str	r3, [r7, #12]
 8021020:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021022:	4b47      	ldr	r3, [pc, #284]	; (8021140 <HAL_SPI_MspInit+0x1b0>)
 8021024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021028:	4a45      	ldr	r2, [pc, #276]	; (8021140 <HAL_SPI_MspInit+0x1b0>)
 802102a:	f043 0301 	orr.w	r3, r3, #1
 802102e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8021032:	4b43      	ldr	r3, [pc, #268]	; (8021140 <HAL_SPI_MspInit+0x1b0>)
 8021034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021038:	f003 0301 	and.w	r3, r3, #1
 802103c:	60bb      	str	r3, [r7, #8]
 802103e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8021040:	23e0      	movs	r3, #224	; 0xe0
 8021042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021046:	2302      	movs	r3, #2
 8021048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802104c:	2300      	movs	r3, #0
 802104e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021052:	2300      	movs	r3, #0
 8021054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8021058:	2305      	movs	r3, #5
 802105a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802105e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8021062:	4619      	mov	r1, r3
 8021064:	4837      	ldr	r0, [pc, #220]	; (8021144 <HAL_SPI_MspInit+0x1b4>)
 8021066:	f004 fb3d 	bl	80256e4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 802106a:	4b37      	ldr	r3, [pc, #220]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 802106c:	4a37      	ldr	r2, [pc, #220]	; (802114c <HAL_SPI_MspInit+0x1bc>)
 802106e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8021070:	4b35      	ldr	r3, [pc, #212]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 8021072:	2226      	movs	r2, #38	; 0x26
 8021074:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8021076:	4b34      	ldr	r3, [pc, #208]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 8021078:	2240      	movs	r2, #64	; 0x40
 802107a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802107c:	4b32      	ldr	r3, [pc, #200]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 802107e:	2200      	movs	r2, #0
 8021080:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8021082:	4b31      	ldr	r3, [pc, #196]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 8021084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021088:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802108a:	4b2f      	ldr	r3, [pc, #188]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 802108c:	2200      	movs	r2, #0
 802108e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8021090:	4b2d      	ldr	r3, [pc, #180]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 8021092:	2200      	movs	r2, #0
 8021094:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8021096:	4b2c      	ldr	r3, [pc, #176]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 8021098:	2200      	movs	r2, #0
 802109a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 802109c:	4b2a      	ldr	r3, [pc, #168]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 802109e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80210a2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80210a4:	4b28      	ldr	r3, [pc, #160]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 80210a6:	2200      	movs	r2, #0
 80210a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80210aa:	4827      	ldr	r0, [pc, #156]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 80210ac:	f001 fcc4 	bl	8022a38 <HAL_DMA_Init>
 80210b0:	4603      	mov	r3, r0
 80210b2:	2b00      	cmp	r3, #0
 80210b4:	d001      	beq.n	80210ba <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 80210b6:	f7ff ff0d 	bl	8020ed4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80210ba:	687b      	ldr	r3, [r7, #4]
 80210bc:	4a22      	ldr	r2, [pc, #136]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 80210be:	679a      	str	r2, [r3, #120]	; 0x78
 80210c0:	4a21      	ldr	r2, [pc, #132]	; (8021148 <HAL_SPI_MspInit+0x1b8>)
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 80210c6:	4b22      	ldr	r3, [pc, #136]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 80210c8:	4a22      	ldr	r2, [pc, #136]	; (8021154 <HAL_SPI_MspInit+0x1c4>)
 80210ca:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80210cc:	4b20      	ldr	r3, [pc, #128]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 80210ce:	2225      	movs	r2, #37	; 0x25
 80210d0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80210d2:	4b1f      	ldr	r3, [pc, #124]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 80210d4:	2200      	movs	r2, #0
 80210d6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80210d8:	4b1d      	ldr	r3, [pc, #116]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 80210da:	2200      	movs	r2, #0
 80210dc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80210de:	4b1c      	ldr	r3, [pc, #112]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 80210e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80210e4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80210e6:	4b1a      	ldr	r3, [pc, #104]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 80210e8:	2200      	movs	r2, #0
 80210ea:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80210ec:	4b18      	ldr	r3, [pc, #96]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 80210ee:	2200      	movs	r2, #0
 80210f0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80210f2:	4b17      	ldr	r3, [pc, #92]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 80210f4:	2200      	movs	r2, #0
 80210f6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80210f8:	4b15      	ldr	r3, [pc, #84]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 80210fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80210fe:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8021100:	4b13      	ldr	r3, [pc, #76]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 8021102:	2200      	movs	r2, #0
 8021104:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8021106:	4812      	ldr	r0, [pc, #72]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 8021108:	f001 fc96 	bl	8022a38 <HAL_DMA_Init>
 802110c:	4603      	mov	r3, r0
 802110e:	2b00      	cmp	r3, #0
 8021110:	d001      	beq.n	8021116 <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 8021112:	f7ff fedf 	bl	8020ed4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	4a0d      	ldr	r2, [pc, #52]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 802111a:	67da      	str	r2, [r3, #124]	; 0x7c
 802111c:	4a0c      	ldr	r2, [pc, #48]	; (8021150 <HAL_SPI_MspInit+0x1c0>)
 802111e:	687b      	ldr	r3, [r7, #4]
 8021120:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8021122:	2200      	movs	r2, #0
 8021124:	2102      	movs	r1, #2
 8021126:	2023      	movs	r0, #35	; 0x23
 8021128:	f001 fa89 	bl	802263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 802112c:	2023      	movs	r0, #35	; 0x23
 802112e:	f001 faa0 	bl	8022672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8021132:	bf00      	nop
 8021134:	37e0      	adds	r7, #224	; 0xe0
 8021136:	46bd      	mov	sp, r7
 8021138:	bd80      	pop	{r7, pc}
 802113a:	bf00      	nop
 802113c:	40013000 	.word	0x40013000
 8021140:	58024400 	.word	0x58024400
 8021144:	58020000 	.word	0x58020000
 8021148:	24000388 	.word	0x24000388
 802114c:	40020070 	.word	0x40020070
 8021150:	24000400 	.word	0x24000400
 8021154:	40020088 	.word	0x40020088

08021158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021158:	b480      	push	{r7}
 802115a:	b083      	sub	sp, #12
 802115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802115e:	4b0a      	ldr	r3, [pc, #40]	; (8021188 <HAL_MspInit+0x30>)
 8021160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8021164:	4a08      	ldr	r2, [pc, #32]	; (8021188 <HAL_MspInit+0x30>)
 8021166:	f043 0302 	orr.w	r3, r3, #2
 802116a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802116e:	4b06      	ldr	r3, [pc, #24]	; (8021188 <HAL_MspInit+0x30>)
 8021170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8021174:	f003 0302 	and.w	r3, r3, #2
 8021178:	607b      	str	r3, [r7, #4]
 802117a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802117c:	bf00      	nop
 802117e:	370c      	adds	r7, #12
 8021180:	46bd      	mov	sp, r7
 8021182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021186:	4770      	bx	lr
 8021188:	58024400 	.word	0x58024400

0802118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802118c:	b480      	push	{r7}
 802118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021190:	e7fe      	b.n	8021190 <NMI_Handler+0x4>

08021192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021192:	b480      	push	{r7}
 8021194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021196:	e7fe      	b.n	8021196 <HardFault_Handler+0x4>

08021198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021198:	b480      	push	{r7}
 802119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802119c:	e7fe      	b.n	802119c <MemManage_Handler+0x4>

0802119e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802119e:	b480      	push	{r7}
 80211a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80211a2:	e7fe      	b.n	80211a2 <BusFault_Handler+0x4>

080211a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80211a4:	b480      	push	{r7}
 80211a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80211a8:	e7fe      	b.n	80211a8 <UsageFault_Handler+0x4>

080211aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80211aa:	b480      	push	{r7}
 80211ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80211ae:	bf00      	nop
 80211b0:	46bd      	mov	sp, r7
 80211b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211b6:	4770      	bx	lr

080211b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80211b8:	b480      	push	{r7}
 80211ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80211bc:	bf00      	nop
 80211be:	46bd      	mov	sp, r7
 80211c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211c4:	4770      	bx	lr

080211c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80211c6:	b480      	push	{r7}
 80211c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80211ca:	bf00      	nop
 80211cc:	46bd      	mov	sp, r7
 80211ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211d2:	4770      	bx	lr

080211d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80211d4:	b580      	push	{r7, lr}
 80211d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80211d8:	f000 ff1e 	bl	8022018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80211dc:	bf00      	nop
 80211de:	bd80      	pop	{r7, pc}

080211e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80211e0:	b580      	push	{r7, lr}
 80211e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80211e4:	4802      	ldr	r0, [pc, #8]	; (80211f0 <DMA1_Stream0_IRQHandler+0x10>)
 80211e6:	f002 ff51 	bl	802408c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80211ea:	bf00      	nop
 80211ec:	bd80      	pop	{r7, pc}
 80211ee:	bf00      	nop
 80211f0:	24000210 	.word	0x24000210

080211f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80211f4:	b580      	push	{r7, lr}
 80211f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80211f8:	4802      	ldr	r0, [pc, #8]	; (8021204 <DMA1_Stream1_IRQHandler+0x10>)
 80211fa:	f002 ff47 	bl	802408c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80211fe:	bf00      	nop
 8021200:	bd80      	pop	{r7, pc}
 8021202:	bf00      	nop
 8021204:	24000288 	.word	0x24000288

08021208 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8021208:	b580      	push	{r7, lr}
 802120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 802120c:	4802      	ldr	r0, [pc, #8]	; (8021218 <DMA1_Stream4_IRQHandler+0x10>)
 802120e:	f002 ff3d 	bl	802408c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8021212:	bf00      	nop
 8021214:	bd80      	pop	{r7, pc}
 8021216:	bf00      	nop
 8021218:	24000388 	.word	0x24000388

0802121c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 802121c:	b580      	push	{r7, lr}
 802121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8021220:	4802      	ldr	r0, [pc, #8]	; (802122c <DMA1_Stream5_IRQHandler+0x10>)
 8021222:	f002 ff33 	bl	802408c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8021226:	bf00      	nop
 8021228:	bd80      	pop	{r7, pc}
 802122a:	bf00      	nop
 802122c:	24000400 	.word	0x24000400

08021230 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8021230:	b580      	push	{r7, lr}
 8021232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8021234:	4802      	ldr	r0, [pc, #8]	; (8021240 <TIM2_IRQHandler+0x10>)
 8021236:	f00a fc09 	bl	802ba4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 802123a:	bf00      	nop
 802123c:	bd80      	pop	{r7, pc}
 802123e:	bf00      	nop
 8021240:	2400047c 	.word	0x2400047c

08021244 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8021244:	b580      	push	{r7, lr}
 8021246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8021248:	4802      	ldr	r0, [pc, #8]	; (8021254 <TIM3_IRQHandler+0x10>)
 802124a:	f00a fbff 	bl	802ba4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 802124e:	bf00      	nop
 8021250:	bd80      	pop	{r7, pc}
 8021252:	bf00      	nop
 8021254:	240004c8 	.word	0x240004c8

08021258 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8021258:	b580      	push	{r7, lr}
 802125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 802125c:	4802      	ldr	r0, [pc, #8]	; (8021268 <TIM4_IRQHandler+0x10>)
 802125e:	f00a fbf5 	bl	802ba4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8021262:	bf00      	nop
 8021264:	bd80      	pop	{r7, pc}
 8021266:	bf00      	nop
 8021268:	24000514 	.word	0x24000514

0802126c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 802126c:	b580      	push	{r7, lr}
 802126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8021270:	4802      	ldr	r0, [pc, #8]	; (802127c <I2C2_EV_IRQHandler+0x10>)
 8021272:	f004 fc91 	bl	8025b98 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8021276:	bf00      	nop
 8021278:	bd80      	pop	{r7, pc}
 802127a:	bf00      	nop
 802127c:	240001c4 	.word	0x240001c4

08021280 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8021280:	b580      	push	{r7, lr}
 8021282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8021284:	4802      	ldr	r0, [pc, #8]	; (8021290 <I2C2_ER_IRQHandler+0x10>)
 8021286:	f004 fca1 	bl	8025bcc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 802128a:	bf00      	nop
 802128c:	bd80      	pop	{r7, pc}
 802128e:	bf00      	nop
 8021290:	240001c4 	.word	0x240001c4

08021294 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8021294:	b580      	push	{r7, lr}
 8021296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8021298:	4802      	ldr	r0, [pc, #8]	; (80212a4 <SPI1_IRQHandler+0x10>)
 802129a:	f009 ff5d 	bl	802b158 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 802129e:	bf00      	nop
 80212a0:	bd80      	pop	{r7, pc}
 80212a2:	bf00      	nop
 80212a4:	24000300 	.word	0x24000300

080212a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80212a8:	b580      	push	{r7, lr}
 80212aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80212ac:	4802      	ldr	r0, [pc, #8]	; (80212b8 <USART3_IRQHandler+0x10>)
 80212ae:	f00b faa9 	bl	802c804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80212b2:	bf00      	nop
 80212b4:	bd80      	pop	{r7, pc}
 80212b6:	bf00      	nop
 80212b8:	240007a0 	.word	0x240007a0

080212bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80212bc:	b580      	push	{r7, lr}
 80212be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80212c0:	4802      	ldr	r0, [pc, #8]	; (80212cc <UART4_IRQHandler+0x10>)
 80212c2:	f00b fa9f 	bl	802c804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80212c6:	bf00      	nop
 80212c8:	bd80      	pop	{r7, pc}
 80212ca:	bf00      	nop
 80212cc:	24000560 	.word	0x24000560

080212d0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80212d0:	b580      	push	{r7, lr}
 80212d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80212d4:	4802      	ldr	r0, [pc, #8]	; (80212e0 <UART8_IRQHandler+0x10>)
 80212d6:	f00b fa95 	bl	802c804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80212da:	bf00      	nop
 80212dc:	bd80      	pop	{r7, pc}
 80212de:	bf00      	nop
 80212e0:	24000680 	.word	0x24000680

080212e4 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 80212e4:	b580      	push	{r7, lr}
 80212e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80212e8:	4802      	ldr	r0, [pc, #8]	; (80212f4 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 80212ea:	f005 fcc8 	bl	8026c7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 80212ee:	bf00      	nop
 80212f0:	bd80      	pop	{r7, pc}
 80212f2:	bf00      	nop
 80212f4:	24001d58 	.word	0x24001d58

080212f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80212f8:	b580      	push	{r7, lr}
 80212fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80212fc:	4802      	ldr	r0, [pc, #8]	; (8021308 <OTG_FS_IRQHandler+0x10>)
 80212fe:	f005 fcbe 	bl	8026c7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8021302:	bf00      	nop
 8021304:	bd80      	pop	{r7, pc}
 8021306:	bf00      	nop
 8021308:	24001d58 	.word	0x24001d58

0802130c <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 802130c:	b580      	push	{r7, lr}
 802130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8021310:	4802      	ldr	r0, [pc, #8]	; (802131c <COMP1_IRQHandler+0x10>)
 8021312:	f001 f845 	bl	80223a0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8021316:	bf00      	nop
 8021318:	bd80      	pop	{r7, pc}
 802131a:	bf00      	nop
 802131c:	24000184 	.word	0x24000184

08021320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8021320:	b480      	push	{r7}
 8021322:	af00      	add	r7, sp, #0
	return 1;
 8021324:	2301      	movs	r3, #1
}
 8021326:	4618      	mov	r0, r3
 8021328:	46bd      	mov	sp, r7
 802132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802132e:	4770      	bx	lr

08021330 <_kill>:

int _kill(int pid, int sig)
{
 8021330:	b580      	push	{r7, lr}
 8021332:	b082      	sub	sp, #8
 8021334:	af00      	add	r7, sp, #0
 8021336:	6078      	str	r0, [r7, #4]
 8021338:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 802133a:	f01a fc49 	bl	803bbd0 <__errno>
 802133e:	4603      	mov	r3, r0
 8021340:	2216      	movs	r2, #22
 8021342:	601a      	str	r2, [r3, #0]
	return -1;
 8021344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8021348:	4618      	mov	r0, r3
 802134a:	3708      	adds	r7, #8
 802134c:	46bd      	mov	sp, r7
 802134e:	bd80      	pop	{r7, pc}

08021350 <_exit>:

void _exit (int status)
{
 8021350:	b580      	push	{r7, lr}
 8021352:	b082      	sub	sp, #8
 8021354:	af00      	add	r7, sp, #0
 8021356:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8021358:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802135c:	6878      	ldr	r0, [r7, #4]
 802135e:	f7ff ffe7 	bl	8021330 <_kill>
	while (1) {}		/* Make sure we hang here */
 8021362:	e7fe      	b.n	8021362 <_exit+0x12>

08021364 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021364:	b580      	push	{r7, lr}
 8021366:	b086      	sub	sp, #24
 8021368:	af00      	add	r7, sp, #0
 802136a:	60f8      	str	r0, [r7, #12]
 802136c:	60b9      	str	r1, [r7, #8]
 802136e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021370:	2300      	movs	r3, #0
 8021372:	617b      	str	r3, [r7, #20]
 8021374:	e00a      	b.n	802138c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8021376:	f3af 8000 	nop.w
 802137a:	4601      	mov	r1, r0
 802137c:	68bb      	ldr	r3, [r7, #8]
 802137e:	1c5a      	adds	r2, r3, #1
 8021380:	60ba      	str	r2, [r7, #8]
 8021382:	b2ca      	uxtb	r2, r1
 8021384:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021386:	697b      	ldr	r3, [r7, #20]
 8021388:	3301      	adds	r3, #1
 802138a:	617b      	str	r3, [r7, #20]
 802138c:	697a      	ldr	r2, [r7, #20]
 802138e:	687b      	ldr	r3, [r7, #4]
 8021390:	429a      	cmp	r2, r3
 8021392:	dbf0      	blt.n	8021376 <_read+0x12>
	}

return len;
 8021394:	687b      	ldr	r3, [r7, #4]
}
 8021396:	4618      	mov	r0, r3
 8021398:	3718      	adds	r7, #24
 802139a:	46bd      	mov	sp, r7
 802139c:	bd80      	pop	{r7, pc}

0802139e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802139e:	b580      	push	{r7, lr}
 80213a0:	b086      	sub	sp, #24
 80213a2:	af00      	add	r7, sp, #0
 80213a4:	60f8      	str	r0, [r7, #12]
 80213a6:	60b9      	str	r1, [r7, #8]
 80213a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80213aa:	2300      	movs	r3, #0
 80213ac:	617b      	str	r3, [r7, #20]
 80213ae:	e009      	b.n	80213c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80213b0:	68bb      	ldr	r3, [r7, #8]
 80213b2:	1c5a      	adds	r2, r3, #1
 80213b4:	60ba      	str	r2, [r7, #8]
 80213b6:	781b      	ldrb	r3, [r3, #0]
 80213b8:	4618      	mov	r0, r3
 80213ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80213be:	697b      	ldr	r3, [r7, #20]
 80213c0:	3301      	adds	r3, #1
 80213c2:	617b      	str	r3, [r7, #20]
 80213c4:	697a      	ldr	r2, [r7, #20]
 80213c6:	687b      	ldr	r3, [r7, #4]
 80213c8:	429a      	cmp	r2, r3
 80213ca:	dbf1      	blt.n	80213b0 <_write+0x12>
	}
	return len;
 80213cc:	687b      	ldr	r3, [r7, #4]
}
 80213ce:	4618      	mov	r0, r3
 80213d0:	3718      	adds	r7, #24
 80213d2:	46bd      	mov	sp, r7
 80213d4:	bd80      	pop	{r7, pc}

080213d6 <_close>:

int _close(int file)
{
 80213d6:	b480      	push	{r7}
 80213d8:	b083      	sub	sp, #12
 80213da:	af00      	add	r7, sp, #0
 80213dc:	6078      	str	r0, [r7, #4]
	return -1;
 80213de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80213e2:	4618      	mov	r0, r3
 80213e4:	370c      	adds	r7, #12
 80213e6:	46bd      	mov	sp, r7
 80213e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213ec:	4770      	bx	lr

080213ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80213ee:	b480      	push	{r7}
 80213f0:	b083      	sub	sp, #12
 80213f2:	af00      	add	r7, sp, #0
 80213f4:	6078      	str	r0, [r7, #4]
 80213f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80213f8:	683b      	ldr	r3, [r7, #0]
 80213fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80213fe:	605a      	str	r2, [r3, #4]
	return 0;
 8021400:	2300      	movs	r3, #0
}
 8021402:	4618      	mov	r0, r3
 8021404:	370c      	adds	r7, #12
 8021406:	46bd      	mov	sp, r7
 8021408:	f85d 7b04 	ldr.w	r7, [sp], #4
 802140c:	4770      	bx	lr

0802140e <_isatty>:

int _isatty(int file)
{
 802140e:	b480      	push	{r7}
 8021410:	b083      	sub	sp, #12
 8021412:	af00      	add	r7, sp, #0
 8021414:	6078      	str	r0, [r7, #4]
	return 1;
 8021416:	2301      	movs	r3, #1
}
 8021418:	4618      	mov	r0, r3
 802141a:	370c      	adds	r7, #12
 802141c:	46bd      	mov	sp, r7
 802141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021422:	4770      	bx	lr

08021424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021424:	b480      	push	{r7}
 8021426:	b085      	sub	sp, #20
 8021428:	af00      	add	r7, sp, #0
 802142a:	60f8      	str	r0, [r7, #12]
 802142c:	60b9      	str	r1, [r7, #8]
 802142e:	607a      	str	r2, [r7, #4]
	return 0;
 8021430:	2300      	movs	r3, #0
}
 8021432:	4618      	mov	r0, r3
 8021434:	3714      	adds	r7, #20
 8021436:	46bd      	mov	sp, r7
 8021438:	f85d 7b04 	ldr.w	r7, [sp], #4
 802143c:	4770      	bx	lr
	...

08021440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8021440:	b580      	push	{r7, lr}
 8021442:	b086      	sub	sp, #24
 8021444:	af00      	add	r7, sp, #0
 8021446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021448:	4a14      	ldr	r2, [pc, #80]	; (802149c <_sbrk+0x5c>)
 802144a:	4b15      	ldr	r3, [pc, #84]	; (80214a0 <_sbrk+0x60>)
 802144c:	1ad3      	subs	r3, r2, r3
 802144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8021450:	697b      	ldr	r3, [r7, #20]
 8021452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8021454:	4b13      	ldr	r3, [pc, #76]	; (80214a4 <_sbrk+0x64>)
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	2b00      	cmp	r3, #0
 802145a:	d102      	bne.n	8021462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802145c:	4b11      	ldr	r3, [pc, #68]	; (80214a4 <_sbrk+0x64>)
 802145e:	4a12      	ldr	r2, [pc, #72]	; (80214a8 <_sbrk+0x68>)
 8021460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8021462:	4b10      	ldr	r3, [pc, #64]	; (80214a4 <_sbrk+0x64>)
 8021464:	681a      	ldr	r2, [r3, #0]
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	4413      	add	r3, r2
 802146a:	693a      	ldr	r2, [r7, #16]
 802146c:	429a      	cmp	r2, r3
 802146e:	d207      	bcs.n	8021480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8021470:	f01a fbae 	bl	803bbd0 <__errno>
 8021474:	4603      	mov	r3, r0
 8021476:	220c      	movs	r2, #12
 8021478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802147a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802147e:	e009      	b.n	8021494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8021480:	4b08      	ldr	r3, [pc, #32]	; (80214a4 <_sbrk+0x64>)
 8021482:	681b      	ldr	r3, [r3, #0]
 8021484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8021486:	4b07      	ldr	r3, [pc, #28]	; (80214a4 <_sbrk+0x64>)
 8021488:	681a      	ldr	r2, [r3, #0]
 802148a:	687b      	ldr	r3, [r7, #4]
 802148c:	4413      	add	r3, r2
 802148e:	4a05      	ldr	r2, [pc, #20]	; (80214a4 <_sbrk+0x64>)
 8021490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8021492:	68fb      	ldr	r3, [r7, #12]
}
 8021494:	4618      	mov	r0, r3
 8021496:	3718      	adds	r7, #24
 8021498:	46bd      	mov	sp, r7
 802149a:	bd80      	pop	{r7, pc}
 802149c:	24080000 	.word	0x24080000
 80214a0:	00000400 	.word	0x00000400
 80214a4:	24000478 	.word	0x24000478
 80214a8:	240387b0 	.word	0x240387b0

080214ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80214ac:	b480      	push	{r7}
 80214ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80214b0:	4b37      	ldr	r3, [pc, #220]	; (8021590 <SystemInit+0xe4>)
 80214b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80214b6:	4a36      	ldr	r2, [pc, #216]	; (8021590 <SystemInit+0xe4>)
 80214b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80214bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80214c0:	4b34      	ldr	r3, [pc, #208]	; (8021594 <SystemInit+0xe8>)
 80214c2:	681b      	ldr	r3, [r3, #0]
 80214c4:	f003 030f 	and.w	r3, r3, #15
 80214c8:	2b06      	cmp	r3, #6
 80214ca:	d807      	bhi.n	80214dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80214cc:	4b31      	ldr	r3, [pc, #196]	; (8021594 <SystemInit+0xe8>)
 80214ce:	681b      	ldr	r3, [r3, #0]
 80214d0:	f023 030f 	bic.w	r3, r3, #15
 80214d4:	4a2f      	ldr	r2, [pc, #188]	; (8021594 <SystemInit+0xe8>)
 80214d6:	f043 0307 	orr.w	r3, r3, #7
 80214da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80214dc:	4b2e      	ldr	r3, [pc, #184]	; (8021598 <SystemInit+0xec>)
 80214de:	681b      	ldr	r3, [r3, #0]
 80214e0:	4a2d      	ldr	r2, [pc, #180]	; (8021598 <SystemInit+0xec>)
 80214e2:	f043 0301 	orr.w	r3, r3, #1
 80214e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80214e8:	4b2b      	ldr	r3, [pc, #172]	; (8021598 <SystemInit+0xec>)
 80214ea:	2200      	movs	r2, #0
 80214ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80214ee:	4b2a      	ldr	r3, [pc, #168]	; (8021598 <SystemInit+0xec>)
 80214f0:	681a      	ldr	r2, [r3, #0]
 80214f2:	4929      	ldr	r1, [pc, #164]	; (8021598 <SystemInit+0xec>)
 80214f4:	4b29      	ldr	r3, [pc, #164]	; (802159c <SystemInit+0xf0>)
 80214f6:	4013      	ands	r3, r2
 80214f8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80214fa:	4b26      	ldr	r3, [pc, #152]	; (8021594 <SystemInit+0xe8>)
 80214fc:	681b      	ldr	r3, [r3, #0]
 80214fe:	f003 0308 	and.w	r3, r3, #8
 8021502:	2b00      	cmp	r3, #0
 8021504:	d007      	beq.n	8021516 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8021506:	4b23      	ldr	r3, [pc, #140]	; (8021594 <SystemInit+0xe8>)
 8021508:	681b      	ldr	r3, [r3, #0]
 802150a:	f023 030f 	bic.w	r3, r3, #15
 802150e:	4a21      	ldr	r2, [pc, #132]	; (8021594 <SystemInit+0xe8>)
 8021510:	f043 0307 	orr.w	r3, r3, #7
 8021514:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8021516:	4b20      	ldr	r3, [pc, #128]	; (8021598 <SystemInit+0xec>)
 8021518:	2200      	movs	r2, #0
 802151a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 802151c:	4b1e      	ldr	r3, [pc, #120]	; (8021598 <SystemInit+0xec>)
 802151e:	2200      	movs	r2, #0
 8021520:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8021522:	4b1d      	ldr	r3, [pc, #116]	; (8021598 <SystemInit+0xec>)
 8021524:	2200      	movs	r2, #0
 8021526:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8021528:	4b1b      	ldr	r3, [pc, #108]	; (8021598 <SystemInit+0xec>)
 802152a:	4a1d      	ldr	r2, [pc, #116]	; (80215a0 <SystemInit+0xf4>)
 802152c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802152e:	4b1a      	ldr	r3, [pc, #104]	; (8021598 <SystemInit+0xec>)
 8021530:	4a1c      	ldr	r2, [pc, #112]	; (80215a4 <SystemInit+0xf8>)
 8021532:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8021534:	4b18      	ldr	r3, [pc, #96]	; (8021598 <SystemInit+0xec>)
 8021536:	4a1c      	ldr	r2, [pc, #112]	; (80215a8 <SystemInit+0xfc>)
 8021538:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802153a:	4b17      	ldr	r3, [pc, #92]	; (8021598 <SystemInit+0xec>)
 802153c:	2200      	movs	r2, #0
 802153e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8021540:	4b15      	ldr	r3, [pc, #84]	; (8021598 <SystemInit+0xec>)
 8021542:	4a19      	ldr	r2, [pc, #100]	; (80215a8 <SystemInit+0xfc>)
 8021544:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8021546:	4b14      	ldr	r3, [pc, #80]	; (8021598 <SystemInit+0xec>)
 8021548:	2200      	movs	r2, #0
 802154a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 802154c:	4b12      	ldr	r3, [pc, #72]	; (8021598 <SystemInit+0xec>)
 802154e:	4a16      	ldr	r2, [pc, #88]	; (80215a8 <SystemInit+0xfc>)
 8021550:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8021552:	4b11      	ldr	r3, [pc, #68]	; (8021598 <SystemInit+0xec>)
 8021554:	2200      	movs	r2, #0
 8021556:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8021558:	4b0f      	ldr	r3, [pc, #60]	; (8021598 <SystemInit+0xec>)
 802155a:	681b      	ldr	r3, [r3, #0]
 802155c:	4a0e      	ldr	r2, [pc, #56]	; (8021598 <SystemInit+0xec>)
 802155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021562:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8021564:	4b0c      	ldr	r3, [pc, #48]	; (8021598 <SystemInit+0xec>)
 8021566:	2200      	movs	r2, #0
 8021568:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 802156a:	4b10      	ldr	r3, [pc, #64]	; (80215ac <SystemInit+0x100>)
 802156c:	681a      	ldr	r2, [r3, #0]
 802156e:	4b10      	ldr	r3, [pc, #64]	; (80215b0 <SystemInit+0x104>)
 8021570:	4013      	ands	r3, r2
 8021572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8021576:	d202      	bcs.n	802157e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8021578:	4b0e      	ldr	r3, [pc, #56]	; (80215b4 <SystemInit+0x108>)
 802157a:	2201      	movs	r2, #1
 802157c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 802157e:	4b0e      	ldr	r3, [pc, #56]	; (80215b8 <SystemInit+0x10c>)
 8021580:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8021584:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8021586:	bf00      	nop
 8021588:	46bd      	mov	sp, r7
 802158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802158e:	4770      	bx	lr
 8021590:	e000ed00 	.word	0xe000ed00
 8021594:	52002000 	.word	0x52002000
 8021598:	58024400 	.word	0x58024400
 802159c:	eaf6ed7f 	.word	0xeaf6ed7f
 80215a0:	02020200 	.word	0x02020200
 80215a4:	01ff0000 	.word	0x01ff0000
 80215a8:	01010280 	.word	0x01010280
 80215ac:	5c001000 	.word	0x5c001000
 80215b0:	ffff0000 	.word	0xffff0000
 80215b4:	51008108 	.word	0x51008108
 80215b8:	52004000 	.word	0x52004000

080215bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80215bc:	b580      	push	{r7, lr}
 80215be:	b088      	sub	sp, #32
 80215c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80215c2:	f107 0310 	add.w	r3, r7, #16
 80215c6:	2200      	movs	r2, #0
 80215c8:	601a      	str	r2, [r3, #0]
 80215ca:	605a      	str	r2, [r3, #4]
 80215cc:	609a      	str	r2, [r3, #8]
 80215ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80215d0:	1d3b      	adds	r3, r7, #4
 80215d2:	2200      	movs	r2, #0
 80215d4:	601a      	str	r2, [r3, #0]
 80215d6:	605a      	str	r2, [r3, #4]
 80215d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80215da:	4b1e      	ldr	r3, [pc, #120]	; (8021654 <MX_TIM2_Init+0x98>)
 80215dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80215e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 80215e2:	4b1c      	ldr	r3, [pc, #112]	; (8021654 <MX_TIM2_Init+0x98>)
 80215e4:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80215e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80215ea:	4b1a      	ldr	r3, [pc, #104]	; (8021654 <MX_TIM2_Init+0x98>)
 80215ec:	2200      	movs	r2, #0
 80215ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80215f0:	4b18      	ldr	r3, [pc, #96]	; (8021654 <MX_TIM2_Init+0x98>)
 80215f2:	2264      	movs	r2, #100	; 0x64
 80215f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80215f6:	4b17      	ldr	r3, [pc, #92]	; (8021654 <MX_TIM2_Init+0x98>)
 80215f8:	2200      	movs	r2, #0
 80215fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80215fc:	4b15      	ldr	r3, [pc, #84]	; (8021654 <MX_TIM2_Init+0x98>)
 80215fe:	2200      	movs	r2, #0
 8021600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8021602:	4814      	ldr	r0, [pc, #80]	; (8021654 <MX_TIM2_Init+0x98>)
 8021604:	f00a f953 	bl	802b8ae <HAL_TIM_Base_Init>
 8021608:	4603      	mov	r3, r0
 802160a:	2b00      	cmp	r3, #0
 802160c:	d001      	beq.n	8021612 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 802160e:	f7ff fc61 	bl	8020ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021616:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8021618:	f107 0310 	add.w	r3, r7, #16
 802161c:	4619      	mov	r1, r3
 802161e:	480d      	ldr	r0, [pc, #52]	; (8021654 <MX_TIM2_Init+0x98>)
 8021620:	f00a fb34 	bl	802bc8c <HAL_TIM_ConfigClockSource>
 8021624:	4603      	mov	r3, r0
 8021626:	2b00      	cmp	r3, #0
 8021628:	d001      	beq.n	802162e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 802162a:	f7ff fc53 	bl	8020ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802162e:	2300      	movs	r3, #0
 8021630:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021632:	2300      	movs	r3, #0
 8021634:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8021636:	1d3b      	adds	r3, r7, #4
 8021638:	4619      	mov	r1, r3
 802163a:	4806      	ldr	r0, [pc, #24]	; (8021654 <MX_TIM2_Init+0x98>)
 802163c:	f00a fd7e 	bl	802c13c <HAL_TIMEx_MasterConfigSynchronization>
 8021640:	4603      	mov	r3, r0
 8021642:	2b00      	cmp	r3, #0
 8021644:	d001      	beq.n	802164a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8021646:	f7ff fc45 	bl	8020ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802164a:	bf00      	nop
 802164c:	3720      	adds	r7, #32
 802164e:	46bd      	mov	sp, r7
 8021650:	bd80      	pop	{r7, pc}
 8021652:	bf00      	nop
 8021654:	2400047c 	.word	0x2400047c

08021658 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8021658:	b580      	push	{r7, lr}
 802165a:	b088      	sub	sp, #32
 802165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802165e:	f107 0310 	add.w	r3, r7, #16
 8021662:	2200      	movs	r2, #0
 8021664:	601a      	str	r2, [r3, #0]
 8021666:	605a      	str	r2, [r3, #4]
 8021668:	609a      	str	r2, [r3, #8]
 802166a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802166c:	1d3b      	adds	r3, r7, #4
 802166e:	2200      	movs	r2, #0
 8021670:	601a      	str	r2, [r3, #0]
 8021672:	605a      	str	r2, [r3, #4]
 8021674:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8021676:	4b1d      	ldr	r3, [pc, #116]	; (80216ec <MX_TIM3_Init+0x94>)
 8021678:	4a1d      	ldr	r2, [pc, #116]	; (80216f0 <MX_TIM3_Init+0x98>)
 802167a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 802167c:	4b1b      	ldr	r3, [pc, #108]	; (80216ec <MX_TIM3_Init+0x94>)
 802167e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8021682:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021684:	4b19      	ldr	r3, [pc, #100]	; (80216ec <MX_TIM3_Init+0x94>)
 8021686:	2200      	movs	r2, #0
 8021688:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 802168a:	4b18      	ldr	r3, [pc, #96]	; (80216ec <MX_TIM3_Init+0x94>)
 802168c:	220a      	movs	r2, #10
 802168e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021690:	4b16      	ldr	r3, [pc, #88]	; (80216ec <MX_TIM3_Init+0x94>)
 8021692:	2200      	movs	r2, #0
 8021694:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021696:	4b15      	ldr	r3, [pc, #84]	; (80216ec <MX_TIM3_Init+0x94>)
 8021698:	2200      	movs	r2, #0
 802169a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 802169c:	4813      	ldr	r0, [pc, #76]	; (80216ec <MX_TIM3_Init+0x94>)
 802169e:	f00a f906 	bl	802b8ae <HAL_TIM_Base_Init>
 80216a2:	4603      	mov	r3, r0
 80216a4:	2b00      	cmp	r3, #0
 80216a6:	d001      	beq.n	80216ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80216a8:	f7ff fc14 	bl	8020ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80216ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80216b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80216b2:	f107 0310 	add.w	r3, r7, #16
 80216b6:	4619      	mov	r1, r3
 80216b8:	480c      	ldr	r0, [pc, #48]	; (80216ec <MX_TIM3_Init+0x94>)
 80216ba:	f00a fae7 	bl	802bc8c <HAL_TIM_ConfigClockSource>
 80216be:	4603      	mov	r3, r0
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	d001      	beq.n	80216c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80216c4:	f7ff fc06 	bl	8020ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80216c8:	2300      	movs	r3, #0
 80216ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80216cc:	2300      	movs	r3, #0
 80216ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80216d0:	1d3b      	adds	r3, r7, #4
 80216d2:	4619      	mov	r1, r3
 80216d4:	4805      	ldr	r0, [pc, #20]	; (80216ec <MX_TIM3_Init+0x94>)
 80216d6:	f00a fd31 	bl	802c13c <HAL_TIMEx_MasterConfigSynchronization>
 80216da:	4603      	mov	r3, r0
 80216dc:	2b00      	cmp	r3, #0
 80216de:	d001      	beq.n	80216e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80216e0:	f7ff fbf8 	bl	8020ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80216e4:	bf00      	nop
 80216e6:	3720      	adds	r7, #32
 80216e8:	46bd      	mov	sp, r7
 80216ea:	bd80      	pop	{r7, pc}
 80216ec:	240004c8 	.word	0x240004c8
 80216f0:	40000400 	.word	0x40000400

080216f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80216f4:	b580      	push	{r7, lr}
 80216f6:	b088      	sub	sp, #32
 80216f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80216fa:	f107 0310 	add.w	r3, r7, #16
 80216fe:	2200      	movs	r2, #0
 8021700:	601a      	str	r2, [r3, #0]
 8021702:	605a      	str	r2, [r3, #4]
 8021704:	609a      	str	r2, [r3, #8]
 8021706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021708:	1d3b      	adds	r3, r7, #4
 802170a:	2200      	movs	r2, #0
 802170c:	601a      	str	r2, [r3, #0]
 802170e:	605a      	str	r2, [r3, #4]
 8021710:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8021712:	4b1d      	ldr	r3, [pc, #116]	; (8021788 <MX_TIM4_Init+0x94>)
 8021714:	4a1d      	ldr	r2, [pc, #116]	; (802178c <MX_TIM4_Init+0x98>)
 8021716:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 8021718:	4b1b      	ldr	r3, [pc, #108]	; (8021788 <MX_TIM4_Init+0x94>)
 802171a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802171e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021720:	4b19      	ldr	r3, [pc, #100]	; (8021788 <MX_TIM4_Init+0x94>)
 8021722:	2200      	movs	r2, #0
 8021724:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8021726:	4b18      	ldr	r3, [pc, #96]	; (8021788 <MX_TIM4_Init+0x94>)
 8021728:	2264      	movs	r2, #100	; 0x64
 802172a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802172c:	4b16      	ldr	r3, [pc, #88]	; (8021788 <MX_TIM4_Init+0x94>)
 802172e:	2200      	movs	r2, #0
 8021730:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021732:	4b15      	ldr	r3, [pc, #84]	; (8021788 <MX_TIM4_Init+0x94>)
 8021734:	2200      	movs	r2, #0
 8021736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8021738:	4813      	ldr	r0, [pc, #76]	; (8021788 <MX_TIM4_Init+0x94>)
 802173a:	f00a f8b8 	bl	802b8ae <HAL_TIM_Base_Init>
 802173e:	4603      	mov	r3, r0
 8021740:	2b00      	cmp	r3, #0
 8021742:	d001      	beq.n	8021748 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8021744:	f7ff fbc6 	bl	8020ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802174c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 802174e:	f107 0310 	add.w	r3, r7, #16
 8021752:	4619      	mov	r1, r3
 8021754:	480c      	ldr	r0, [pc, #48]	; (8021788 <MX_TIM4_Init+0x94>)
 8021756:	f00a fa99 	bl	802bc8c <HAL_TIM_ConfigClockSource>
 802175a:	4603      	mov	r3, r0
 802175c:	2b00      	cmp	r3, #0
 802175e:	d001      	beq.n	8021764 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8021760:	f7ff fbb8 	bl	8020ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021764:	2300      	movs	r3, #0
 8021766:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021768:	2300      	movs	r3, #0
 802176a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802176c:	1d3b      	adds	r3, r7, #4
 802176e:	4619      	mov	r1, r3
 8021770:	4805      	ldr	r0, [pc, #20]	; (8021788 <MX_TIM4_Init+0x94>)
 8021772:	f00a fce3 	bl	802c13c <HAL_TIMEx_MasterConfigSynchronization>
 8021776:	4603      	mov	r3, r0
 8021778:	2b00      	cmp	r3, #0
 802177a:	d001      	beq.n	8021780 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 802177c:	f7ff fbaa 	bl	8020ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8021780:	bf00      	nop
 8021782:	3720      	adds	r7, #32
 8021784:	46bd      	mov	sp, r7
 8021786:	bd80      	pop	{r7, pc}
 8021788:	24000514 	.word	0x24000514
 802178c:	40000800 	.word	0x40000800

08021790 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8021790:	b580      	push	{r7, lr}
 8021792:	b086      	sub	sp, #24
 8021794:	af00      	add	r7, sp, #0
 8021796:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8021798:	687b      	ldr	r3, [r7, #4]
 802179a:	681b      	ldr	r3, [r3, #0]
 802179c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80217a0:	d117      	bne.n	80217d2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80217a2:	4b2a      	ldr	r3, [pc, #168]	; (802184c <HAL_TIM_Base_MspInit+0xbc>)
 80217a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80217a8:	4a28      	ldr	r2, [pc, #160]	; (802184c <HAL_TIM_Base_MspInit+0xbc>)
 80217aa:	f043 0301 	orr.w	r3, r3, #1
 80217ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80217b2:	4b26      	ldr	r3, [pc, #152]	; (802184c <HAL_TIM_Base_MspInit+0xbc>)
 80217b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80217b8:	f003 0301 	and.w	r3, r3, #1
 80217bc:	617b      	str	r3, [r7, #20]
 80217be:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80217c0:	2200      	movs	r2, #0
 80217c2:	2101      	movs	r1, #1
 80217c4:	201c      	movs	r0, #28
 80217c6:	f000 ff3a 	bl	802263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80217ca:	201c      	movs	r0, #28
 80217cc:	f000 ff51 	bl	8022672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80217d0:	e038      	b.n	8021844 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 80217d2:	687b      	ldr	r3, [r7, #4]
 80217d4:	681b      	ldr	r3, [r3, #0]
 80217d6:	4a1e      	ldr	r2, [pc, #120]	; (8021850 <HAL_TIM_Base_MspInit+0xc0>)
 80217d8:	4293      	cmp	r3, r2
 80217da:	d117      	bne.n	802180c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80217dc:	4b1b      	ldr	r3, [pc, #108]	; (802184c <HAL_TIM_Base_MspInit+0xbc>)
 80217de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80217e2:	4a1a      	ldr	r2, [pc, #104]	; (802184c <HAL_TIM_Base_MspInit+0xbc>)
 80217e4:	f043 0302 	orr.w	r3, r3, #2
 80217e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80217ec:	4b17      	ldr	r3, [pc, #92]	; (802184c <HAL_TIM_Base_MspInit+0xbc>)
 80217ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80217f2:	f003 0302 	and.w	r3, r3, #2
 80217f6:	613b      	str	r3, [r7, #16]
 80217f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80217fa:	2200      	movs	r2, #0
 80217fc:	2101      	movs	r1, #1
 80217fe:	201d      	movs	r0, #29
 8021800:	f000 ff1d 	bl	802263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8021804:	201d      	movs	r0, #29
 8021806:	f000 ff34 	bl	8022672 <HAL_NVIC_EnableIRQ>
}
 802180a:	e01b      	b.n	8021844 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	681b      	ldr	r3, [r3, #0]
 8021810:	4a10      	ldr	r2, [pc, #64]	; (8021854 <HAL_TIM_Base_MspInit+0xc4>)
 8021812:	4293      	cmp	r3, r2
 8021814:	d116      	bne.n	8021844 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8021816:	4b0d      	ldr	r3, [pc, #52]	; (802184c <HAL_TIM_Base_MspInit+0xbc>)
 8021818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802181c:	4a0b      	ldr	r2, [pc, #44]	; (802184c <HAL_TIM_Base_MspInit+0xbc>)
 802181e:	f043 0304 	orr.w	r3, r3, #4
 8021822:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8021826:	4b09      	ldr	r3, [pc, #36]	; (802184c <HAL_TIM_Base_MspInit+0xbc>)
 8021828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802182c:	f003 0304 	and.w	r3, r3, #4
 8021830:	60fb      	str	r3, [r7, #12]
 8021832:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8021834:	2200      	movs	r2, #0
 8021836:	2100      	movs	r1, #0
 8021838:	201e      	movs	r0, #30
 802183a:	f000 ff00 	bl	802263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 802183e:	201e      	movs	r0, #30
 8021840:	f000 ff17 	bl	8022672 <HAL_NVIC_EnableIRQ>
}
 8021844:	bf00      	nop
 8021846:	3718      	adds	r7, #24
 8021848:	46bd      	mov	sp, r7
 802184a:	bd80      	pop	{r7, pc}
 802184c:	58024400 	.word	0x58024400
 8021850:	40000400 	.word	0x40000400
 8021854:	40000800 	.word	0x40000800

08021858 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8021858:	b580      	push	{r7, lr}
 802185a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 802185c:	4b25      	ldr	r3, [pc, #148]	; (80218f4 <MX_UART4_Init+0x9c>)
 802185e:	4a26      	ldr	r2, [pc, #152]	; (80218f8 <MX_UART4_Init+0xa0>)
 8021860:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8021862:	4b24      	ldr	r3, [pc, #144]	; (80218f4 <MX_UART4_Init+0x9c>)
 8021864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8021868:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 802186a:	4b22      	ldr	r3, [pc, #136]	; (80218f4 <MX_UART4_Init+0x9c>)
 802186c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8021870:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8021872:	4b20      	ldr	r3, [pc, #128]	; (80218f4 <MX_UART4_Init+0x9c>)
 8021874:	2200      	movs	r2, #0
 8021876:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8021878:	4b1e      	ldr	r3, [pc, #120]	; (80218f4 <MX_UART4_Init+0x9c>)
 802187a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802187e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8021880:	4b1c      	ldr	r3, [pc, #112]	; (80218f4 <MX_UART4_Init+0x9c>)
 8021882:	220c      	movs	r2, #12
 8021884:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8021886:	4b1b      	ldr	r3, [pc, #108]	; (80218f4 <MX_UART4_Init+0x9c>)
 8021888:	2200      	movs	r2, #0
 802188a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802188c:	4b19      	ldr	r3, [pc, #100]	; (80218f4 <MX_UART4_Init+0x9c>)
 802188e:	2200      	movs	r2, #0
 8021890:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8021892:	4b18      	ldr	r3, [pc, #96]	; (80218f4 <MX_UART4_Init+0x9c>)
 8021894:	2200      	movs	r2, #0
 8021896:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8021898:	4b16      	ldr	r3, [pc, #88]	; (80218f4 <MX_UART4_Init+0x9c>)
 802189a:	2200      	movs	r2, #0
 802189c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802189e:	4b15      	ldr	r3, [pc, #84]	; (80218f4 <MX_UART4_Init+0x9c>)
 80218a0:	2220      	movs	r2, #32
 80218a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80218a4:	4b13      	ldr	r3, [pc, #76]	; (80218f4 <MX_UART4_Init+0x9c>)
 80218a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80218aa:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80218ac:	4811      	ldr	r0, [pc, #68]	; (80218f4 <MX_UART4_Init+0x9c>)
 80218ae:	f00a fcf1 	bl	802c294 <HAL_UART_Init>
 80218b2:	4603      	mov	r3, r0
 80218b4:	2b00      	cmp	r3, #0
 80218b6:	d001      	beq.n	80218bc <MX_UART4_Init+0x64>
  {
    Error_Handler();
 80218b8:	f7ff fb0c 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80218bc:	2100      	movs	r1, #0
 80218be:	480d      	ldr	r0, [pc, #52]	; (80218f4 <MX_UART4_Init+0x9c>)
 80218c0:	f00d fad4 	bl	802ee6c <HAL_UARTEx_SetTxFifoThreshold>
 80218c4:	4603      	mov	r3, r0
 80218c6:	2b00      	cmp	r3, #0
 80218c8:	d001      	beq.n	80218ce <MX_UART4_Init+0x76>
  {
    Error_Handler();
 80218ca:	f7ff fb03 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80218ce:	2100      	movs	r1, #0
 80218d0:	4808      	ldr	r0, [pc, #32]	; (80218f4 <MX_UART4_Init+0x9c>)
 80218d2:	f00d fb09 	bl	802eee8 <HAL_UARTEx_SetRxFifoThreshold>
 80218d6:	4603      	mov	r3, r0
 80218d8:	2b00      	cmp	r3, #0
 80218da:	d001      	beq.n	80218e0 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 80218dc:	f7ff fafa 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80218e0:	4804      	ldr	r0, [pc, #16]	; (80218f4 <MX_UART4_Init+0x9c>)
 80218e2:	f00d fa8a 	bl	802edfa <HAL_UARTEx_DisableFifoMode>
 80218e6:	4603      	mov	r3, r0
 80218e8:	2b00      	cmp	r3, #0
 80218ea:	d001      	beq.n	80218f0 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 80218ec:	f7ff faf2 	bl	8020ed4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80218f0:	bf00      	nop
 80218f2:	bd80      	pop	{r7, pc}
 80218f4:	24000560 	.word	0x24000560
 80218f8:	40004c00 	.word	0x40004c00

080218fc <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80218fc:	b580      	push	{r7, lr}
 80218fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8021900:	4b22      	ldr	r3, [pc, #136]	; (802198c <MX_UART7_Init+0x90>)
 8021902:	4a23      	ldr	r2, [pc, #140]	; (8021990 <MX_UART7_Init+0x94>)
 8021904:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 8021906:	4b21      	ldr	r3, [pc, #132]	; (802198c <MX_UART7_Init+0x90>)
 8021908:	4a22      	ldr	r2, [pc, #136]	; (8021994 <MX_UART7_Init+0x98>)
 802190a:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 802190c:	4b1f      	ldr	r3, [pc, #124]	; (802198c <MX_UART7_Init+0x90>)
 802190e:	2200      	movs	r2, #0
 8021910:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8021912:	4b1e      	ldr	r3, [pc, #120]	; (802198c <MX_UART7_Init+0x90>)
 8021914:	2200      	movs	r2, #0
 8021916:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8021918:	4b1c      	ldr	r3, [pc, #112]	; (802198c <MX_UART7_Init+0x90>)
 802191a:	2200      	movs	r2, #0
 802191c:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 802191e:	4b1b      	ldr	r3, [pc, #108]	; (802198c <MX_UART7_Init+0x90>)
 8021920:	220c      	movs	r2, #12
 8021922:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8021924:	4b19      	ldr	r3, [pc, #100]	; (802198c <MX_UART7_Init+0x90>)
 8021926:	2200      	movs	r2, #0
 8021928:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 802192a:	4b18      	ldr	r3, [pc, #96]	; (802198c <MX_UART7_Init+0x90>)
 802192c:	2200      	movs	r2, #0
 802192e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8021930:	4b16      	ldr	r3, [pc, #88]	; (802198c <MX_UART7_Init+0x90>)
 8021932:	2200      	movs	r2, #0
 8021934:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8021936:	4b15      	ldr	r3, [pc, #84]	; (802198c <MX_UART7_Init+0x90>)
 8021938:	2200      	movs	r2, #0
 802193a:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802193c:	4b13      	ldr	r3, [pc, #76]	; (802198c <MX_UART7_Init+0x90>)
 802193e:	2200      	movs	r2, #0
 8021940:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8021942:	4812      	ldr	r0, [pc, #72]	; (802198c <MX_UART7_Init+0x90>)
 8021944:	f00a fca6 	bl	802c294 <HAL_UART_Init>
 8021948:	4603      	mov	r3, r0
 802194a:	2b00      	cmp	r3, #0
 802194c:	d001      	beq.n	8021952 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 802194e:	f7ff fac1 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8021952:	2100      	movs	r1, #0
 8021954:	480d      	ldr	r0, [pc, #52]	; (802198c <MX_UART7_Init+0x90>)
 8021956:	f00d fa89 	bl	802ee6c <HAL_UARTEx_SetTxFifoThreshold>
 802195a:	4603      	mov	r3, r0
 802195c:	2b00      	cmp	r3, #0
 802195e:	d001      	beq.n	8021964 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8021960:	f7ff fab8 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8021964:	2100      	movs	r1, #0
 8021966:	4809      	ldr	r0, [pc, #36]	; (802198c <MX_UART7_Init+0x90>)
 8021968:	f00d fabe 	bl	802eee8 <HAL_UARTEx_SetRxFifoThreshold>
 802196c:	4603      	mov	r3, r0
 802196e:	2b00      	cmp	r3, #0
 8021970:	d001      	beq.n	8021976 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8021972:	f7ff faaf 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8021976:	4805      	ldr	r0, [pc, #20]	; (802198c <MX_UART7_Init+0x90>)
 8021978:	f00d fa3f 	bl	802edfa <HAL_UARTEx_DisableFifoMode>
 802197c:	4603      	mov	r3, r0
 802197e:	2b00      	cmp	r3, #0
 8021980:	d001      	beq.n	8021986 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8021982:	f7ff faa7 	bl	8020ed4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8021986:	bf00      	nop
 8021988:	bd80      	pop	{r7, pc}
 802198a:	bf00      	nop
 802198c:	240005f0 	.word	0x240005f0
 8021990:	40007800 	.word	0x40007800
 8021994:	001312d0 	.word	0x001312d0

08021998 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8021998:	b580      	push	{r7, lr}
 802199a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 802199c:	4b26      	ldr	r3, [pc, #152]	; (8021a38 <MX_UART8_Init+0xa0>)
 802199e:	4a27      	ldr	r2, [pc, #156]	; (8021a3c <MX_UART8_Init+0xa4>)
 80219a0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 80219a2:	4b25      	ldr	r3, [pc, #148]	; (8021a38 <MX_UART8_Init+0xa0>)
 80219a4:	4a26      	ldr	r2, [pc, #152]	; (8021a40 <MX_UART8_Init+0xa8>)
 80219a6:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 80219a8:	4b23      	ldr	r3, [pc, #140]	; (8021a38 <MX_UART8_Init+0xa0>)
 80219aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80219ae:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80219b0:	4b21      	ldr	r3, [pc, #132]	; (8021a38 <MX_UART8_Init+0xa0>)
 80219b2:	2200      	movs	r2, #0
 80219b4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 80219b6:	4b20      	ldr	r3, [pc, #128]	; (8021a38 <MX_UART8_Init+0xa0>)
 80219b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80219bc:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80219be:	4b1e      	ldr	r3, [pc, #120]	; (8021a38 <MX_UART8_Init+0xa0>)
 80219c0:	220c      	movs	r2, #12
 80219c2:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80219c4:	4b1c      	ldr	r3, [pc, #112]	; (8021a38 <MX_UART8_Init+0xa0>)
 80219c6:	2200      	movs	r2, #0
 80219c8:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80219ca:	4b1b      	ldr	r3, [pc, #108]	; (8021a38 <MX_UART8_Init+0xa0>)
 80219cc:	2200      	movs	r2, #0
 80219ce:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80219d0:	4b19      	ldr	r3, [pc, #100]	; (8021a38 <MX_UART8_Init+0xa0>)
 80219d2:	2200      	movs	r2, #0
 80219d4:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80219d6:	4b18      	ldr	r3, [pc, #96]	; (8021a38 <MX_UART8_Init+0xa0>)
 80219d8:	2200      	movs	r2, #0
 80219da:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80219dc:	4b16      	ldr	r3, [pc, #88]	; (8021a38 <MX_UART8_Init+0xa0>)
 80219de:	2220      	movs	r2, #32
 80219e0:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80219e2:	4b15      	ldr	r3, [pc, #84]	; (8021a38 <MX_UART8_Init+0xa0>)
 80219e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80219e8:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80219ea:	4813      	ldr	r0, [pc, #76]	; (8021a38 <MX_UART8_Init+0xa0>)
 80219ec:	f00a fc52 	bl	802c294 <HAL_UART_Init>
 80219f0:	4603      	mov	r3, r0
 80219f2:	2b00      	cmp	r3, #0
 80219f4:	d001      	beq.n	80219fa <MX_UART8_Init+0x62>
  {
    Error_Handler();
 80219f6:	f7ff fa6d 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80219fa:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80219fe:	480e      	ldr	r0, [pc, #56]	; (8021a38 <MX_UART8_Init+0xa0>)
 8021a00:	f00d fa34 	bl	802ee6c <HAL_UARTEx_SetTxFifoThreshold>
 8021a04:	4603      	mov	r3, r0
 8021a06:	2b00      	cmp	r3, #0
 8021a08:	d001      	beq.n	8021a0e <MX_UART8_Init+0x76>
  {
    Error_Handler();
 8021a0a:	f7ff fa63 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8021a0e:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8021a12:	4809      	ldr	r0, [pc, #36]	; (8021a38 <MX_UART8_Init+0xa0>)
 8021a14:	f00d fa68 	bl	802eee8 <HAL_UARTEx_SetRxFifoThreshold>
 8021a18:	4603      	mov	r3, r0
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	d001      	beq.n	8021a22 <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 8021a1e:	f7ff fa59 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 8021a22:	4805      	ldr	r0, [pc, #20]	; (8021a38 <MX_UART8_Init+0xa0>)
 8021a24:	f00d f9ae 	bl	802ed84 <HAL_UARTEx_EnableFifoMode>
 8021a28:	4603      	mov	r3, r0
 8021a2a:	2b00      	cmp	r3, #0
 8021a2c:	d001      	beq.n	8021a32 <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 8021a2e:	f7ff fa51 	bl	8020ed4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8021a32:	bf00      	nop
 8021a34:	bd80      	pop	{r7, pc}
 8021a36:	bf00      	nop
 8021a38:	24000680 	.word	0x24000680
 8021a3c:	40007c00 	.word	0x40007c00
 8021a40:	001312d0 	.word	0x001312d0

08021a44 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8021a44:	b580      	push	{r7, lr}
 8021a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8021a48:	4b22      	ldr	r3, [pc, #136]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021a4a:	4a23      	ldr	r2, [pc, #140]	; (8021ad8 <MX_USART2_UART_Init+0x94>)
 8021a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8021a4e:	4b21      	ldr	r3, [pc, #132]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8021a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8021a56:	4b1f      	ldr	r3, [pc, #124]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021a58:	2200      	movs	r2, #0
 8021a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8021a5c:	4b1d      	ldr	r3, [pc, #116]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021a5e:	2200      	movs	r2, #0
 8021a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8021a62:	4b1c      	ldr	r3, [pc, #112]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021a64:	2200      	movs	r2, #0
 8021a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8021a68:	4b1a      	ldr	r3, [pc, #104]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021a6a:	220c      	movs	r2, #12
 8021a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8021a6e:	4b19      	ldr	r3, [pc, #100]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021a70:	2200      	movs	r2, #0
 8021a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8021a74:	4b17      	ldr	r3, [pc, #92]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021a76:	2200      	movs	r2, #0
 8021a78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8021a7a:	4b16      	ldr	r3, [pc, #88]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021a7c:	2200      	movs	r2, #0
 8021a7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8021a80:	4b14      	ldr	r3, [pc, #80]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021a82:	2200      	movs	r2, #0
 8021a84:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8021a86:	4b13      	ldr	r3, [pc, #76]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021a88:	2200      	movs	r2, #0
 8021a8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8021a8c:	4811      	ldr	r0, [pc, #68]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021a8e:	f00a fc01 	bl	802c294 <HAL_UART_Init>
 8021a92:	4603      	mov	r3, r0
 8021a94:	2b00      	cmp	r3, #0
 8021a96:	d001      	beq.n	8021a9c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8021a98:	f7ff fa1c 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8021a9c:	2100      	movs	r1, #0
 8021a9e:	480d      	ldr	r0, [pc, #52]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021aa0:	f00d f9e4 	bl	802ee6c <HAL_UARTEx_SetTxFifoThreshold>
 8021aa4:	4603      	mov	r3, r0
 8021aa6:	2b00      	cmp	r3, #0
 8021aa8:	d001      	beq.n	8021aae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8021aaa:	f7ff fa13 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8021aae:	2100      	movs	r1, #0
 8021ab0:	4808      	ldr	r0, [pc, #32]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021ab2:	f00d fa19 	bl	802eee8 <HAL_UARTEx_SetRxFifoThreshold>
 8021ab6:	4603      	mov	r3, r0
 8021ab8:	2b00      	cmp	r3, #0
 8021aba:	d001      	beq.n	8021ac0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8021abc:	f7ff fa0a 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8021ac0:	4804      	ldr	r0, [pc, #16]	; (8021ad4 <MX_USART2_UART_Init+0x90>)
 8021ac2:	f00d f99a 	bl	802edfa <HAL_UARTEx_DisableFifoMode>
 8021ac6:	4603      	mov	r3, r0
 8021ac8:	2b00      	cmp	r3, #0
 8021aca:	d001      	beq.n	8021ad0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8021acc:	f7ff fa02 	bl	8020ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8021ad0:	bf00      	nop
 8021ad2:	bd80      	pop	{r7, pc}
 8021ad4:	24000710 	.word	0x24000710
 8021ad8:	40004400 	.word	0x40004400

08021adc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8021adc:	b580      	push	{r7, lr}
 8021ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8021ae0:	4b26      	ldr	r3, [pc, #152]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021ae2:	4a27      	ldr	r2, [pc, #156]	; (8021b80 <MX_USART3_UART_Init+0xa4>)
 8021ae4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 8021ae6:	4b25      	ldr	r3, [pc, #148]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021ae8:	4a26      	ldr	r2, [pc, #152]	; (8021b84 <MX_USART3_UART_Init+0xa8>)
 8021aea:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8021aec:	4b23      	ldr	r3, [pc, #140]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021aee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8021af2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8021af4:	4b21      	ldr	r3, [pc, #132]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021af6:	2200      	movs	r2, #0
 8021af8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8021afa:	4b20      	ldr	r3, [pc, #128]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021b00:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8021b02:	4b1e      	ldr	r3, [pc, #120]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021b04:	220c      	movs	r2, #12
 8021b06:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8021b08:	4b1c      	ldr	r3, [pc, #112]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021b0a:	2200      	movs	r2, #0
 8021b0c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8021b0e:	4b1b      	ldr	r3, [pc, #108]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021b10:	2200      	movs	r2, #0
 8021b12:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8021b14:	4b19      	ldr	r3, [pc, #100]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021b16:	2200      	movs	r2, #0
 8021b18:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8021b1a:	4b18      	ldr	r3, [pc, #96]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021b1c:	2200      	movs	r2, #0
 8021b1e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8021b20:	4b16      	ldr	r3, [pc, #88]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021b22:	2220      	movs	r2, #32
 8021b24:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8021b26:	4b15      	ldr	r3, [pc, #84]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021b28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8021b2c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8021b2e:	4813      	ldr	r0, [pc, #76]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021b30:	f00a fbb0 	bl	802c294 <HAL_UART_Init>
 8021b34:	4603      	mov	r3, r0
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	d001      	beq.n	8021b3e <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 8021b3a:	f7ff f9cb 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8021b3e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8021b42:	480e      	ldr	r0, [pc, #56]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021b44:	f00d f992 	bl	802ee6c <HAL_UARTEx_SetTxFifoThreshold>
 8021b48:	4603      	mov	r3, r0
 8021b4a:	2b00      	cmp	r3, #0
 8021b4c:	d001      	beq.n	8021b52 <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 8021b4e:	f7ff f9c1 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8021b52:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8021b56:	4809      	ldr	r0, [pc, #36]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021b58:	f00d f9c6 	bl	802eee8 <HAL_UARTEx_SetRxFifoThreshold>
 8021b5c:	4603      	mov	r3, r0
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	d001      	beq.n	8021b66 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8021b62:	f7ff f9b7 	bl	8020ed4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8021b66:	4805      	ldr	r0, [pc, #20]	; (8021b7c <MX_USART3_UART_Init+0xa0>)
 8021b68:	f00d f90c 	bl	802ed84 <HAL_UARTEx_EnableFifoMode>
 8021b6c:	4603      	mov	r3, r0
 8021b6e:	2b00      	cmp	r3, #0
 8021b70:	d001      	beq.n	8021b76 <MX_USART3_UART_Init+0x9a>
  {
    Error_Handler();
 8021b72:	f7ff f9af 	bl	8020ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8021b76:	bf00      	nop
 8021b78:	bd80      	pop	{r7, pc}
 8021b7a:	bf00      	nop
 8021b7c:	240007a0 	.word	0x240007a0
 8021b80:	40004800 	.word	0x40004800
 8021b84:	001312d0 	.word	0x001312d0

08021b88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8021b88:	b580      	push	{r7, lr}
 8021b8a:	b0c0      	sub	sp, #256	; 0x100
 8021b8c:	af00      	add	r7, sp, #0
 8021b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021b90:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8021b94:	2200      	movs	r2, #0
 8021b96:	601a      	str	r2, [r3, #0]
 8021b98:	605a      	str	r2, [r3, #4]
 8021b9a:	609a      	str	r2, [r3, #8]
 8021b9c:	60da      	str	r2, [r3, #12]
 8021b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8021ba0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8021ba4:	22bc      	movs	r2, #188	; 0xbc
 8021ba6:	2100      	movs	r1, #0
 8021ba8:	4618      	mov	r0, r3
 8021baa:	f01a f895 	bl	803bcd8 <memset>
  if(uartHandle->Instance==UART4)
 8021bae:	687b      	ldr	r3, [r7, #4]
 8021bb0:	681b      	ldr	r3, [r3, #0]
 8021bb2:	4ac2      	ldr	r2, [pc, #776]	; (8021ebc <HAL_UART_MspInit+0x334>)
 8021bb4:	4293      	cmp	r3, r2
 8021bb6:	d14a      	bne.n	8021c4e <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8021bb8:	2302      	movs	r3, #2
 8021bba:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8021bbc:	2300      	movs	r3, #0
 8021bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021bc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8021bc6:	4618      	mov	r0, r3
 8021bc8:	f007 f9dc 	bl	8028f84 <HAL_RCCEx_PeriphCLKConfig>
 8021bcc:	4603      	mov	r3, r0
 8021bce:	2b00      	cmp	r3, #0
 8021bd0:	d001      	beq.n	8021bd6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8021bd2:	f7ff f97f 	bl	8020ed4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8021bd6:	4bba      	ldr	r3, [pc, #744]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021bdc:	4ab8      	ldr	r2, [pc, #736]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021bde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8021be2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8021be6:	4bb6      	ldr	r3, [pc, #728]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8021bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021bf4:	4bb2      	ldr	r3, [pc, #712]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021bfa:	4ab1      	ldr	r2, [pc, #708]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021bfc:	f043 0301 	orr.w	r3, r3, #1
 8021c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8021c04:	4bae      	ldr	r3, [pc, #696]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021c0a:	f003 0301 	and.w	r3, r3, #1
 8021c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8021c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8021c12:	2303      	movs	r3, #3
 8021c14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021c18:	2302      	movs	r3, #2
 8021c1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021c1e:	2300      	movs	r3, #0
 8021c20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021c24:	2300      	movs	r3, #0
 8021c26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8021c2a:	2308      	movs	r3, #8
 8021c2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021c30:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8021c34:	4619      	mov	r1, r3
 8021c36:	48a3      	ldr	r0, [pc, #652]	; (8021ec4 <HAL_UART_MspInit+0x33c>)
 8021c38:	f003 fd54 	bl	80256e4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8021c3c:	2200      	movs	r2, #0
 8021c3e:	2100      	movs	r1, #0
 8021c40:	2034      	movs	r0, #52	; 0x34
 8021c42:	f000 fcfc 	bl	802263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8021c46:	2034      	movs	r0, #52	; 0x34
 8021c48:	f000 fd13 	bl	8022672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8021c4c:	e130      	b.n	8021eb0 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 8021c4e:	687b      	ldr	r3, [r7, #4]
 8021c50:	681b      	ldr	r3, [r3, #0]
 8021c52:	4a9d      	ldr	r2, [pc, #628]	; (8021ec8 <HAL_UART_MspInit+0x340>)
 8021c54:	4293      	cmp	r3, r2
 8021c56:	d143      	bne.n	8021ce0 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8021c58:	2302      	movs	r3, #2
 8021c5a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8021c5c:	2300      	movs	r3, #0
 8021c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021c62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8021c66:	4618      	mov	r0, r3
 8021c68:	f007 f98c 	bl	8028f84 <HAL_RCCEx_PeriphCLKConfig>
 8021c6c:	4603      	mov	r3, r0
 8021c6e:	2b00      	cmp	r3, #0
 8021c70:	d001      	beq.n	8021c76 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8021c72:	f7ff f92f 	bl	8020ed4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8021c76:	4b92      	ldr	r3, [pc, #584]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021c7c:	4a90      	ldr	r2, [pc, #576]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8021c82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8021c86:	4b8e      	ldr	r3, [pc, #568]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021c8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8021c90:	627b      	str	r3, [r7, #36]	; 0x24
 8021c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8021c94:	4b8a      	ldr	r3, [pc, #552]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021c9a:	4a89      	ldr	r2, [pc, #548]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021c9c:	f043 0310 	orr.w	r3, r3, #16
 8021ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8021ca4:	4b86      	ldr	r3, [pc, #536]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021caa:	f003 0310 	and.w	r3, r3, #16
 8021cae:	623b      	str	r3, [r7, #32]
 8021cb0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8021cb2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8021cb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021cba:	2302      	movs	r3, #2
 8021cbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021cc0:	2300      	movs	r3, #0
 8021cc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021cc6:	2300      	movs	r3, #0
 8021cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8021ccc:	2307      	movs	r3, #7
 8021cce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021cd2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8021cd6:	4619      	mov	r1, r3
 8021cd8:	487c      	ldr	r0, [pc, #496]	; (8021ecc <HAL_UART_MspInit+0x344>)
 8021cda:	f003 fd03 	bl	80256e4 <HAL_GPIO_Init>
}
 8021cde:	e0e7      	b.n	8021eb0 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 8021ce0:	687b      	ldr	r3, [r7, #4]
 8021ce2:	681b      	ldr	r3, [r3, #0]
 8021ce4:	4a7a      	ldr	r2, [pc, #488]	; (8021ed0 <HAL_UART_MspInit+0x348>)
 8021ce6:	4293      	cmp	r3, r2
 8021ce8:	d14a      	bne.n	8021d80 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8021cea:	2302      	movs	r3, #2
 8021cec:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8021cee:	2300      	movs	r3, #0
 8021cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021cf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8021cf8:	4618      	mov	r0, r3
 8021cfa:	f007 f943 	bl	8028f84 <HAL_RCCEx_PeriphCLKConfig>
 8021cfe:	4603      	mov	r3, r0
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	d001      	beq.n	8021d08 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8021d04:	f7ff f8e6 	bl	8020ed4 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8021d08:	4b6d      	ldr	r3, [pc, #436]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021d0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021d0e:	4a6c      	ldr	r2, [pc, #432]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8021d14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8021d18:	4b69      	ldr	r3, [pc, #420]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021d1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8021d22:	61fb      	str	r3, [r7, #28]
 8021d24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8021d26:	4b66      	ldr	r3, [pc, #408]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021d2c:	4a64      	ldr	r2, [pc, #400]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021d2e:	f043 0310 	orr.w	r3, r3, #16
 8021d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8021d36:	4b62      	ldr	r3, [pc, #392]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021d3c:	f003 0310 	and.w	r3, r3, #16
 8021d40:	61bb      	str	r3, [r7, #24]
 8021d42:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8021d44:	2303      	movs	r3, #3
 8021d46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d4a:	2302      	movs	r3, #2
 8021d4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d50:	2300      	movs	r3, #0
 8021d52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021d56:	2300      	movs	r3, #0
 8021d58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8021d5c:	2308      	movs	r3, #8
 8021d5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021d62:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8021d66:	4619      	mov	r1, r3
 8021d68:	4858      	ldr	r0, [pc, #352]	; (8021ecc <HAL_UART_MspInit+0x344>)
 8021d6a:	f003 fcbb 	bl	80256e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 8021d6e:	2200      	movs	r2, #0
 8021d70:	2102      	movs	r1, #2
 8021d72:	2053      	movs	r0, #83	; 0x53
 8021d74:	f000 fc63 	bl	802263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8021d78:	2053      	movs	r0, #83	; 0x53
 8021d7a:	f000 fc7a 	bl	8022672 <HAL_NVIC_EnableIRQ>
}
 8021d7e:	e097      	b.n	8021eb0 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	681b      	ldr	r3, [r3, #0]
 8021d84:	4a53      	ldr	r2, [pc, #332]	; (8021ed4 <HAL_UART_MspInit+0x34c>)
 8021d86:	4293      	cmp	r3, r2
 8021d88:	d142      	bne.n	8021e10 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8021d8a:	2302      	movs	r3, #2
 8021d8c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8021d8e:	2300      	movs	r3, #0
 8021d90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021d94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8021d98:	4618      	mov	r0, r3
 8021d9a:	f007 f8f3 	bl	8028f84 <HAL_RCCEx_PeriphCLKConfig>
 8021d9e:	4603      	mov	r3, r0
 8021da0:	2b00      	cmp	r3, #0
 8021da2:	d001      	beq.n	8021da8 <HAL_UART_MspInit+0x220>
      Error_Handler();
 8021da4:	f7ff f896 	bl	8020ed4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8021da8:	4b45      	ldr	r3, [pc, #276]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021daa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021dae:	4a44      	ldr	r2, [pc, #272]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021db4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8021db8:	4b41      	ldr	r3, [pc, #260]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021dba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021dc2:	617b      	str	r3, [r7, #20]
 8021dc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021dc6:	4b3e      	ldr	r3, [pc, #248]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021dcc:	4a3c      	ldr	r2, [pc, #240]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021dce:	f043 0301 	orr.w	r3, r3, #1
 8021dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8021dd6:	4b3a      	ldr	r3, [pc, #232]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021ddc:	f003 0301 	and.w	r3, r3, #1
 8021de0:	613b      	str	r3, [r7, #16]
 8021de2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8021de4:	230c      	movs	r3, #12
 8021de6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021dea:	2302      	movs	r3, #2
 8021dec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021df0:	2300      	movs	r3, #0
 8021df2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021df6:	2300      	movs	r3, #0
 8021df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8021dfc:	2307      	movs	r3, #7
 8021dfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021e02:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8021e06:	4619      	mov	r1, r3
 8021e08:	482e      	ldr	r0, [pc, #184]	; (8021ec4 <HAL_UART_MspInit+0x33c>)
 8021e0a:	f003 fc6b 	bl	80256e4 <HAL_GPIO_Init>
}
 8021e0e:	e04f      	b.n	8021eb0 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 8021e10:	687b      	ldr	r3, [r7, #4]
 8021e12:	681b      	ldr	r3, [r3, #0]
 8021e14:	4a30      	ldr	r2, [pc, #192]	; (8021ed8 <HAL_UART_MspInit+0x350>)
 8021e16:	4293      	cmp	r3, r2
 8021e18:	d14a      	bne.n	8021eb0 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8021e1a:	2302      	movs	r3, #2
 8021e1c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8021e1e:	2300      	movs	r3, #0
 8021e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021e24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8021e28:	4618      	mov	r0, r3
 8021e2a:	f007 f8ab 	bl	8028f84 <HAL_RCCEx_PeriphCLKConfig>
 8021e2e:	4603      	mov	r3, r0
 8021e30:	2b00      	cmp	r3, #0
 8021e32:	d001      	beq.n	8021e38 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 8021e34:	f7ff f84e 	bl	8020ed4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8021e38:	4b21      	ldr	r3, [pc, #132]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021e3e:	4a20      	ldr	r2, [pc, #128]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021e44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8021e48:	4b1d      	ldr	r3, [pc, #116]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8021e52:	60fb      	str	r3, [r7, #12]
 8021e54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021e56:	4b1a      	ldr	r3, [pc, #104]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021e5c:	4a18      	ldr	r2, [pc, #96]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021e5e:	f043 0308 	orr.w	r3, r3, #8
 8021e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8021e66:	4b16      	ldr	r3, [pc, #88]	; (8021ec0 <HAL_UART_MspInit+0x338>)
 8021e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021e6c:	f003 0308 	and.w	r3, r3, #8
 8021e70:	60bb      	str	r3, [r7, #8]
 8021e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8021e74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8021e78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e7c:	2302      	movs	r3, #2
 8021e7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e82:	2300      	movs	r3, #0
 8021e84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021e88:	2300      	movs	r3, #0
 8021e8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8021e8e:	2307      	movs	r3, #7
 8021e90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021e94:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8021e98:	4619      	mov	r1, r3
 8021e9a:	4810      	ldr	r0, [pc, #64]	; (8021edc <HAL_UART_MspInit+0x354>)
 8021e9c:	f003 fc22 	bl	80256e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8021ea0:	2200      	movs	r2, #0
 8021ea2:	2100      	movs	r1, #0
 8021ea4:	2027      	movs	r0, #39	; 0x27
 8021ea6:	f000 fbca 	bl	802263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8021eaa:	2027      	movs	r0, #39	; 0x27
 8021eac:	f000 fbe1 	bl	8022672 <HAL_NVIC_EnableIRQ>
}
 8021eb0:	bf00      	nop
 8021eb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8021eb6:	46bd      	mov	sp, r7
 8021eb8:	bd80      	pop	{r7, pc}
 8021eba:	bf00      	nop
 8021ebc:	40004c00 	.word	0x40004c00
 8021ec0:	58024400 	.word	0x58024400
 8021ec4:	58020000 	.word	0x58020000
 8021ec8:	40007800 	.word	0x40007800
 8021ecc:	58021000 	.word	0x58021000
 8021ed0:	40007c00 	.word	0x40007c00
 8021ed4:	40004400 	.word	0x40004400
 8021ed8:	40004800 	.word	0x40004800
 8021edc:	58020c00 	.word	0x58020c00

08021ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8021ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021f18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8021ee4:	f7ff fae2 	bl	80214ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8021ee8:	480c      	ldr	r0, [pc, #48]	; (8021f1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8021eea:	490d      	ldr	r1, [pc, #52]	; (8021f20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8021eec:	4a0d      	ldr	r2, [pc, #52]	; (8021f24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8021eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021ef0:	e002      	b.n	8021ef8 <LoopCopyDataInit>

08021ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021ef6:	3304      	adds	r3, #4

08021ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021efc:	d3f9      	bcc.n	8021ef2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8021efe:	4a0a      	ldr	r2, [pc, #40]	; (8021f28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8021f00:	4c0a      	ldr	r4, [pc, #40]	; (8021f2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8021f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021f04:	e001      	b.n	8021f0a <LoopFillZerobss>

08021f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8021f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021f08:	3204      	adds	r2, #4

08021f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021f0c:	d3fb      	bcc.n	8021f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8021f0e:	f019 fe77 	bl	803bc00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021f12:	f7fe fe65 	bl	8020be0 <main>
  bx  lr
 8021f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8021f18:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8021f1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8021f20:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 8021f24:	08058ca4 	.word	0x08058ca4
  ldr r2, =_sbss
 8021f28:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 8021f2c:	240387ac 	.word	0x240387ac

08021f30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021f30:	e7fe      	b.n	8021f30 <ADC3_IRQHandler>
	...

08021f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8021f34:	b580      	push	{r7, lr}
 8021f36:	b082      	sub	sp, #8
 8021f38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021f3a:	2003      	movs	r0, #3
 8021f3c:	f000 fb74 	bl	8022628 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8021f40:	f006 fe4a 	bl	8028bd8 <HAL_RCC_GetSysClockFreq>
 8021f44:	4602      	mov	r2, r0
 8021f46:	4b15      	ldr	r3, [pc, #84]	; (8021f9c <HAL_Init+0x68>)
 8021f48:	699b      	ldr	r3, [r3, #24]
 8021f4a:	0a1b      	lsrs	r3, r3, #8
 8021f4c:	f003 030f 	and.w	r3, r3, #15
 8021f50:	4913      	ldr	r1, [pc, #76]	; (8021fa0 <HAL_Init+0x6c>)
 8021f52:	5ccb      	ldrb	r3, [r1, r3]
 8021f54:	f003 031f 	and.w	r3, r3, #31
 8021f58:	fa22 f303 	lsr.w	r3, r2, r3
 8021f5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8021f5e:	4b0f      	ldr	r3, [pc, #60]	; (8021f9c <HAL_Init+0x68>)
 8021f60:	699b      	ldr	r3, [r3, #24]
 8021f62:	f003 030f 	and.w	r3, r3, #15
 8021f66:	4a0e      	ldr	r2, [pc, #56]	; (8021fa0 <HAL_Init+0x6c>)
 8021f68:	5cd3      	ldrb	r3, [r2, r3]
 8021f6a:	f003 031f 	and.w	r3, r3, #31
 8021f6e:	687a      	ldr	r2, [r7, #4]
 8021f70:	fa22 f303 	lsr.w	r3, r2, r3
 8021f74:	4a0b      	ldr	r2, [pc, #44]	; (8021fa4 <HAL_Init+0x70>)
 8021f76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8021f78:	4a0b      	ldr	r2, [pc, #44]	; (8021fa8 <HAL_Init+0x74>)
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8021f7e:	200f      	movs	r0, #15
 8021f80:	f000 f814 	bl	8021fac <HAL_InitTick>
 8021f84:	4603      	mov	r3, r0
 8021f86:	2b00      	cmp	r3, #0
 8021f88:	d001      	beq.n	8021f8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8021f8a:	2301      	movs	r3, #1
 8021f8c:	e002      	b.n	8021f94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8021f8e:	f7ff f8e3 	bl	8021158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8021f92:	2300      	movs	r3, #0
}
 8021f94:	4618      	mov	r0, r3
 8021f96:	3708      	adds	r7, #8
 8021f98:	46bd      	mov	sp, r7
 8021f9a:	bd80      	pop	{r7, pc}
 8021f9c:	58024400 	.word	0x58024400
 8021fa0:	0803e494 	.word	0x0803e494
 8021fa4:	24000004 	.word	0x24000004
 8021fa8:	24000000 	.word	0x24000000

08021fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021fac:	b580      	push	{r7, lr}
 8021fae:	b082      	sub	sp, #8
 8021fb0:	af00      	add	r7, sp, #0
 8021fb2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8021fb4:	4b15      	ldr	r3, [pc, #84]	; (802200c <HAL_InitTick+0x60>)
 8021fb6:	781b      	ldrb	r3, [r3, #0]
 8021fb8:	2b00      	cmp	r3, #0
 8021fba:	d101      	bne.n	8021fc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8021fbc:	2301      	movs	r3, #1
 8021fbe:	e021      	b.n	8022004 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8021fc0:	4b13      	ldr	r3, [pc, #76]	; (8022010 <HAL_InitTick+0x64>)
 8021fc2:	681a      	ldr	r2, [r3, #0]
 8021fc4:	4b11      	ldr	r3, [pc, #68]	; (802200c <HAL_InitTick+0x60>)
 8021fc6:	781b      	ldrb	r3, [r3, #0]
 8021fc8:	4619      	mov	r1, r3
 8021fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8021fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8021fd6:	4618      	mov	r0, r3
 8021fd8:	f000 fb59 	bl	802268e <HAL_SYSTICK_Config>
 8021fdc:	4603      	mov	r3, r0
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d001      	beq.n	8021fe6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8021fe2:	2301      	movs	r3, #1
 8021fe4:	e00e      	b.n	8022004 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021fe6:	687b      	ldr	r3, [r7, #4]
 8021fe8:	2b0f      	cmp	r3, #15
 8021fea:	d80a      	bhi.n	8022002 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021fec:	2200      	movs	r2, #0
 8021fee:	6879      	ldr	r1, [r7, #4]
 8021ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021ff4:	f000 fb23 	bl	802263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8021ff8:	4a06      	ldr	r2, [pc, #24]	; (8022014 <HAL_InitTick+0x68>)
 8021ffa:	687b      	ldr	r3, [r7, #4]
 8021ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8021ffe:	2300      	movs	r3, #0
 8022000:	e000      	b.n	8022004 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8022002:	2301      	movs	r3, #1
}
 8022004:	4618      	mov	r0, r3
 8022006:	3708      	adds	r7, #8
 8022008:	46bd      	mov	sp, r7
 802200a:	bd80      	pop	{r7, pc}
 802200c:	2400000c 	.word	0x2400000c
 8022010:	24000000 	.word	0x24000000
 8022014:	24000008 	.word	0x24000008

08022018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8022018:	b480      	push	{r7}
 802201a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802201c:	4b06      	ldr	r3, [pc, #24]	; (8022038 <HAL_IncTick+0x20>)
 802201e:	781b      	ldrb	r3, [r3, #0]
 8022020:	461a      	mov	r2, r3
 8022022:	4b06      	ldr	r3, [pc, #24]	; (802203c <HAL_IncTick+0x24>)
 8022024:	681b      	ldr	r3, [r3, #0]
 8022026:	4413      	add	r3, r2
 8022028:	4a04      	ldr	r2, [pc, #16]	; (802203c <HAL_IncTick+0x24>)
 802202a:	6013      	str	r3, [r2, #0]
}
 802202c:	bf00      	nop
 802202e:	46bd      	mov	sp, r7
 8022030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022034:	4770      	bx	lr
 8022036:	bf00      	nop
 8022038:	2400000c 	.word	0x2400000c
 802203c:	24000830 	.word	0x24000830

08022040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8022040:	b480      	push	{r7}
 8022042:	af00      	add	r7, sp, #0
  return uwTick;
 8022044:	4b03      	ldr	r3, [pc, #12]	; (8022054 <HAL_GetTick+0x14>)
 8022046:	681b      	ldr	r3, [r3, #0]
}
 8022048:	4618      	mov	r0, r3
 802204a:	46bd      	mov	sp, r7
 802204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022050:	4770      	bx	lr
 8022052:	bf00      	nop
 8022054:	24000830 	.word	0x24000830

08022058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8022058:	b580      	push	{r7, lr}
 802205a:	b084      	sub	sp, #16
 802205c:	af00      	add	r7, sp, #0
 802205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8022060:	f7ff ffee 	bl	8022040 <HAL_GetTick>
 8022064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802206a:	68fb      	ldr	r3, [r7, #12]
 802206c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8022070:	d005      	beq.n	802207e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8022072:	4b0a      	ldr	r3, [pc, #40]	; (802209c <HAL_Delay+0x44>)
 8022074:	781b      	ldrb	r3, [r3, #0]
 8022076:	461a      	mov	r2, r3
 8022078:	68fb      	ldr	r3, [r7, #12]
 802207a:	4413      	add	r3, r2
 802207c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802207e:	bf00      	nop
 8022080:	f7ff ffde 	bl	8022040 <HAL_GetTick>
 8022084:	4602      	mov	r2, r0
 8022086:	68bb      	ldr	r3, [r7, #8]
 8022088:	1ad3      	subs	r3, r2, r3
 802208a:	68fa      	ldr	r2, [r7, #12]
 802208c:	429a      	cmp	r2, r3
 802208e:	d8f7      	bhi.n	8022080 <HAL_Delay+0x28>
  {
  }
}
 8022090:	bf00      	nop
 8022092:	bf00      	nop
 8022094:	3710      	adds	r7, #16
 8022096:	46bd      	mov	sp, r7
 8022098:	bd80      	pop	{r7, pc}
 802209a:	bf00      	nop
 802209c:	2400000c 	.word	0x2400000c

080220a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80220a0:	b480      	push	{r7}
 80220a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80220a4:	4b03      	ldr	r3, [pc, #12]	; (80220b4 <HAL_GetREVID+0x14>)
 80220a6:	681b      	ldr	r3, [r3, #0]
 80220a8:	0c1b      	lsrs	r3, r3, #16
}
 80220aa:	4618      	mov	r0, r3
 80220ac:	46bd      	mov	sp, r7
 80220ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220b2:	4770      	bx	lr
 80220b4:	5c001000 	.word	0x5c001000

080220b8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80220b8:	b580      	push	{r7, lr}
 80220ba:	b088      	sub	sp, #32
 80220bc:	af00      	add	r7, sp, #0
 80220be:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80220c0:	2300      	movs	r3, #0
 80220c2:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 80220c4:	2300      	movs	r3, #0
 80220c6:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80220c8:	687b      	ldr	r3, [r7, #4]
 80220ca:	2b00      	cmp	r3, #0
 80220cc:	d102      	bne.n	80220d4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80220ce:	2301      	movs	r3, #1
 80220d0:	77fb      	strb	r3, [r7, #31]
 80220d2:	e10e      	b.n	80222f2 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80220d4:	687b      	ldr	r3, [r7, #4]
 80220d6:	681b      	ldr	r3, [r3, #0]
 80220d8:	681b      	ldr	r3, [r3, #0]
 80220da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80220de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80220e2:	d102      	bne.n	80220ea <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80220e4:	2301      	movs	r3, #1
 80220e6:	77fb      	strb	r3, [r7, #31]
 80220e8:	e103      	b.n	80222f2 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80220ea:	687b      	ldr	r3, [r7, #4]
 80220ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80220f0:	b2db      	uxtb	r3, r3
 80220f2:	2b00      	cmp	r3, #0
 80220f4:	d109      	bne.n	802210a <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80220f6:	687b      	ldr	r3, [r7, #4]
 80220f8:	2200      	movs	r2, #0
 80220fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80220fe:	687b      	ldr	r3, [r7, #4]
 8022100:	2200      	movs	r2, #0
 8022102:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8022104:	6878      	ldr	r0, [r7, #4]
 8022106:	f7fe faf1 	bl	80206ec <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 802210a:	687b      	ldr	r3, [r7, #4]
 802210c:	681b      	ldr	r3, [r3, #0]
 802210e:	681b      	ldr	r3, [r3, #0]
 8022110:	f003 0304 	and.w	r3, r3, #4
 8022114:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8022116:	687b      	ldr	r3, [r7, #4]
 8022118:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 802211a:	687b      	ldr	r3, [r7, #4]
 802211c:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802211e:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8022120:	687b      	ldr	r3, [r7, #4]
 8022122:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8022124:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8022126:	687b      	ldr	r3, [r7, #4]
 8022128:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 802212a:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8022130:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8022132:	687b      	ldr	r3, [r7, #4]
 8022134:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8022136:	4313      	orrs	r3, r2
 8022138:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	681b      	ldr	r3, [r3, #0]
 802213e:	681a      	ldr	r2, [r3, #0]
 8022140:	4b6e      	ldr	r3, [pc, #440]	; (80222fc <HAL_COMP_Init+0x244>)
 8022142:	4013      	ands	r3, r2
 8022144:	687a      	ldr	r2, [r7, #4]
 8022146:	6812      	ldr	r2, [r2, #0]
 8022148:	6979      	ldr	r1, [r7, #20]
 802214a:	430b      	orrs	r3, r1
 802214c:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 802214e:	687b      	ldr	r3, [r7, #4]
 8022150:	685b      	ldr	r3, [r3, #4]
 8022152:	2b10      	cmp	r3, #16
 8022154:	d108      	bne.n	8022168 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8022156:	687b      	ldr	r3, [r7, #4]
 8022158:	681b      	ldr	r3, [r3, #0]
 802215a:	681a      	ldr	r2, [r3, #0]
 802215c:	687b      	ldr	r3, [r7, #4]
 802215e:	681b      	ldr	r3, [r3, #0]
 8022160:	f042 0210 	orr.w	r2, r2, #16
 8022164:	601a      	str	r2, [r3, #0]
 8022166:	e007      	b.n	8022178 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8022168:	687b      	ldr	r3, [r7, #4]
 802216a:	681b      	ldr	r3, [r3, #0]
 802216c:	681a      	ldr	r2, [r3, #0]
 802216e:	687b      	ldr	r3, [r7, #4]
 8022170:	681b      	ldr	r3, [r3, #0]
 8022172:	f022 0210 	bic.w	r2, r2, #16
 8022176:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8022178:	687b      	ldr	r3, [r7, #4]
 802217a:	681b      	ldr	r3, [r3, #0]
 802217c:	681b      	ldr	r3, [r3, #0]
 802217e:	f003 0304 	and.w	r3, r3, #4
 8022182:	2b00      	cmp	r3, #0
 8022184:	d016      	beq.n	80221b4 <HAL_COMP_Init+0xfc>
 8022186:	69bb      	ldr	r3, [r7, #24]
 8022188:	2b00      	cmp	r3, #0
 802218a:	d013      	beq.n	80221b4 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802218c:	4b5c      	ldr	r3, [pc, #368]	; (8022300 <HAL_COMP_Init+0x248>)
 802218e:	681b      	ldr	r3, [r3, #0]
 8022190:	099b      	lsrs	r3, r3, #6
 8022192:	4a5c      	ldr	r2, [pc, #368]	; (8022304 <HAL_COMP_Init+0x24c>)
 8022194:	fba2 2303 	umull	r2, r3, r2, r3
 8022198:	099b      	lsrs	r3, r3, #6
 802219a:	1c5a      	adds	r2, r3, #1
 802219c:	4613      	mov	r3, r2
 802219e:	009b      	lsls	r3, r3, #2
 80221a0:	4413      	add	r3, r2
 80221a2:	009b      	lsls	r3, r3, #2
 80221a4:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 80221a6:	e002      	b.n	80221ae <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 80221a8:	68fb      	ldr	r3, [r7, #12]
 80221aa:	3b01      	subs	r3, #1
 80221ac:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 80221ae:	68fb      	ldr	r3, [r7, #12]
 80221b0:	2b00      	cmp	r3, #0
 80221b2:	d1f9      	bne.n	80221a8 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80221b4:	687b      	ldr	r3, [r7, #4]
 80221b6:	681b      	ldr	r3, [r3, #0]
 80221b8:	4a53      	ldr	r2, [pc, #332]	; (8022308 <HAL_COMP_Init+0x250>)
 80221ba:	4293      	cmp	r3, r2
 80221bc:	d102      	bne.n	80221c4 <HAL_COMP_Init+0x10c>
 80221be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80221c2:	e001      	b.n	80221c8 <HAL_COMP_Init+0x110>
 80221c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80221c8:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 80221ca:	687b      	ldr	r3, [r7, #4]
 80221cc:	6a1b      	ldr	r3, [r3, #32]
 80221ce:	f003 0303 	and.w	r3, r3, #3
 80221d2:	2b00      	cmp	r3, #0
 80221d4:	d06d      	beq.n	80222b2 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80221d6:	687b      	ldr	r3, [r7, #4]
 80221d8:	6a1b      	ldr	r3, [r3, #32]
 80221da:	f003 0310 	and.w	r3, r3, #16
 80221de:	2b00      	cmp	r3, #0
 80221e0:	d008      	beq.n	80221f4 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 80221e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80221e6:	681a      	ldr	r2, [r3, #0]
 80221e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80221ec:	693b      	ldr	r3, [r7, #16]
 80221ee:	4313      	orrs	r3, r2
 80221f0:	600b      	str	r3, [r1, #0]
 80221f2:	e008      	b.n	8022206 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 80221f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80221f8:	681a      	ldr	r2, [r3, #0]
 80221fa:	693b      	ldr	r3, [r7, #16]
 80221fc:	43db      	mvns	r3, r3
 80221fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8022202:	4013      	ands	r3, r2
 8022204:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	6a1b      	ldr	r3, [r3, #32]
 802220a:	f003 0320 	and.w	r3, r3, #32
 802220e:	2b00      	cmp	r3, #0
 8022210:	d008      	beq.n	8022224 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8022212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8022216:	685a      	ldr	r2, [r3, #4]
 8022218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802221c:	693b      	ldr	r3, [r7, #16]
 802221e:	4313      	orrs	r3, r2
 8022220:	604b      	str	r3, [r1, #4]
 8022222:	e008      	b.n	8022236 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8022224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8022228:	685a      	ldr	r2, [r3, #4]
 802222a:	693b      	ldr	r3, [r7, #16]
 802222c:	43db      	mvns	r3, r3
 802222e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8022232:	4013      	ands	r3, r2
 8022234:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8022236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802223a:	693b      	ldr	r3, [r7, #16]
 802223c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8022240:	687b      	ldr	r3, [r7, #4]
 8022242:	6a1b      	ldr	r3, [r3, #32]
 8022244:	f003 0302 	and.w	r3, r3, #2
 8022248:	2b00      	cmp	r3, #0
 802224a:	d00a      	beq.n	8022262 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 802224c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8022250:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8022254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8022258:	693b      	ldr	r3, [r7, #16]
 802225a:	4313      	orrs	r3, r2
 802225c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8022260:	e00a      	b.n	8022278 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8022262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8022266:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802226a:	693b      	ldr	r3, [r7, #16]
 802226c:	43db      	mvns	r3, r3
 802226e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8022272:	4013      	ands	r3, r2
 8022274:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8022278:	687b      	ldr	r3, [r7, #4]
 802227a:	6a1b      	ldr	r3, [r3, #32]
 802227c:	f003 0301 	and.w	r3, r3, #1
 8022280:	2b00      	cmp	r3, #0
 8022282:	d00a      	beq.n	802229a <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8022284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8022288:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802228c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8022290:	693b      	ldr	r3, [r7, #16]
 8022292:	4313      	orrs	r3, r2
 8022294:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8022298:	e021      	b.n	80222de <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 802229a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802229e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80222a2:	693b      	ldr	r3, [r7, #16]
 80222a4:	43db      	mvns	r3, r3
 80222a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80222aa:	4013      	ands	r3, r2
 80222ac:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 80222b0:	e015      	b.n	80222de <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 80222b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80222b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80222ba:	693b      	ldr	r3, [r7, #16]
 80222bc:	43db      	mvns	r3, r3
 80222be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80222c2:	4013      	ands	r3, r2
 80222c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 80222c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80222cc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80222d0:	693b      	ldr	r3, [r7, #16]
 80222d2:	43db      	mvns	r3, r3
 80222d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80222d8:	4013      	ands	r3, r2
 80222da:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80222e4:	b2db      	uxtb	r3, r3
 80222e6:	2b00      	cmp	r3, #0
 80222e8:	d103      	bne.n	80222f2 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 80222ea:	687b      	ldr	r3, [r7, #4]
 80222ec:	2201      	movs	r2, #1
 80222ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 80222f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80222f4:	4618      	mov	r0, r3
 80222f6:	3720      	adds	r7, #32
 80222f8:	46bd      	mov	sp, r7
 80222fa:	bd80      	pop	{r7, pc}
 80222fc:	f0e8cce1 	.word	0xf0e8cce1
 8022300:	24000000 	.word	0x24000000
 8022304:	053e2d63 	.word	0x053e2d63
 8022308:	5800380c 	.word	0x5800380c

0802230c <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 802230c:	b480      	push	{r7}
 802230e:	b085      	sub	sp, #20
 8022310:	af00      	add	r7, sp, #0
 8022312:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8022314:	2300      	movs	r3, #0
 8022316:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 8022318:	2300      	movs	r3, #0
 802231a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802231c:	687b      	ldr	r3, [r7, #4]
 802231e:	2b00      	cmp	r3, #0
 8022320:	d102      	bne.n	8022328 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8022322:	2301      	movs	r3, #1
 8022324:	73fb      	strb	r3, [r7, #15]
 8022326:	e030      	b.n	802238a <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	681b      	ldr	r3, [r3, #0]
 802232c:	681b      	ldr	r3, [r3, #0]
 802232e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8022332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022336:	d102      	bne.n	802233e <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8022338:	2301      	movs	r3, #1
 802233a:	73fb      	strb	r3, [r7, #15]
 802233c:	e025      	b.n	802238a <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 802233e:	687b      	ldr	r3, [r7, #4]
 8022340:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8022344:	b2db      	uxtb	r3, r3
 8022346:	2b01      	cmp	r3, #1
 8022348:	d11d      	bne.n	8022386 <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 802234a:	687b      	ldr	r3, [r7, #4]
 802234c:	681b      	ldr	r3, [r3, #0]
 802234e:	681a      	ldr	r2, [r3, #0]
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	681b      	ldr	r3, [r3, #0]
 8022354:	f042 0201 	orr.w	r2, r2, #1
 8022358:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 802235a:	687b      	ldr	r3, [r7, #4]
 802235c:	2202      	movs	r2, #2
 802235e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8022362:	4b0d      	ldr	r3, [pc, #52]	; (8022398 <HAL_COMP_Start+0x8c>)
 8022364:	681b      	ldr	r3, [r3, #0]
 8022366:	099b      	lsrs	r3, r3, #6
 8022368:	4a0c      	ldr	r2, [pc, #48]	; (802239c <HAL_COMP_Start+0x90>)
 802236a:	fba2 2303 	umull	r2, r3, r2, r3
 802236e:	099b      	lsrs	r3, r3, #6
 8022370:	3301      	adds	r3, #1
 8022372:	00db      	lsls	r3, r3, #3
 8022374:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 8022376:	e002      	b.n	802237e <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 8022378:	68bb      	ldr	r3, [r7, #8]
 802237a:	3b01      	subs	r3, #1
 802237c:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802237e:	68bb      	ldr	r3, [r7, #8]
 8022380:	2b00      	cmp	r3, #0
 8022382:	d1f9      	bne.n	8022378 <HAL_COMP_Start+0x6c>
 8022384:	e001      	b.n	802238a <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 8022386:	2301      	movs	r3, #1
 8022388:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802238a:	7bfb      	ldrb	r3, [r7, #15]
}
 802238c:	4618      	mov	r0, r3
 802238e:	3714      	adds	r7, #20
 8022390:	46bd      	mov	sp, r7
 8022392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022396:	4770      	bx	lr
 8022398:	24000000 	.word	0x24000000
 802239c:	053e2d63 	.word	0x053e2d63

080223a0 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80223a0:	b580      	push	{r7, lr}
 80223a2:	b084      	sub	sp, #16
 80223a4:	af00      	add	r7, sp, #0
 80223a6:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80223a8:	687b      	ldr	r3, [r7, #4]
 80223aa:	681b      	ldr	r3, [r3, #0]
 80223ac:	4a33      	ldr	r2, [pc, #204]	; (802247c <HAL_COMP_IRQHandler+0xdc>)
 80223ae:	4293      	cmp	r3, r2
 80223b0:	d102      	bne.n	80223b8 <HAL_COMP_IRQHandler+0x18>
 80223b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80223b6:	e001      	b.n	80223bc <HAL_COMP_IRQHandler+0x1c>
 80223b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80223bc:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 80223be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80223c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80223c6:	68fb      	ldr	r3, [r7, #12]
 80223c8:	4013      	ands	r3, r2
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d014      	beq.n	80223f8 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 80223ce:	4b2c      	ldr	r3, [pc, #176]	; (8022480 <HAL_COMP_IRQHandler+0xe0>)
 80223d0:	681b      	ldr	r3, [r3, #0]
 80223d2:	f003 0310 	and.w	r3, r3, #16
 80223d6:	2b00      	cmp	r3, #0
 80223d8:	d006      	beq.n	80223e8 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 80223da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80223de:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80223e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80223e6:	e004      	b.n	80223f2 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 80223e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80223ec:	68fb      	ldr	r3, [r7, #12]
 80223ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80223f2:	6878      	ldr	r0, [r7, #4]
 80223f4:	f7fe fd20 	bl	8020e38 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 80223f8:	687b      	ldr	r3, [r7, #4]
 80223fa:	681b      	ldr	r3, [r3, #0]
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022402:	2b40      	cmp	r3, #64	; 0x40
 8022404:	d136      	bne.n	8022474 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 8022406:	4b1f      	ldr	r3, [pc, #124]	; (8022484 <HAL_COMP_IRQHandler+0xe4>)
 8022408:	681b      	ldr	r3, [r3, #0]
 802240a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802240e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022412:	d101      	bne.n	8022418 <HAL_COMP_IRQHandler+0x78>
 8022414:	2301      	movs	r3, #1
 8022416:	e000      	b.n	802241a <HAL_COMP_IRQHandler+0x7a>
 8022418:	2300      	movs	r3, #0
 802241a:	2b00      	cmp	r3, #0
 802241c:	d00b      	beq.n	8022436 <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 802241e:	4b19      	ldr	r3, [pc, #100]	; (8022484 <HAL_COMP_IRQHandler+0xe4>)
 8022420:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8022424:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8022426:	687b      	ldr	r3, [r7, #4]
 8022428:	681b      	ldr	r3, [r3, #0]
 802242a:	681a      	ldr	r2, [r3, #0]
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	681b      	ldr	r3, [r3, #0]
 8022430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022434:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 8022436:	4b13      	ldr	r3, [pc, #76]	; (8022484 <HAL_COMP_IRQHandler+0xe4>)
 8022438:	681b      	ldr	r3, [r3, #0]
 802243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802243e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8022442:	d101      	bne.n	8022448 <HAL_COMP_IRQHandler+0xa8>
 8022444:	2301      	movs	r3, #1
 8022446:	e000      	b.n	802244a <HAL_COMP_IRQHandler+0xaa>
 8022448:	2300      	movs	r3, #0
 802244a:	2b00      	cmp	r3, #0
 802244c:	d00b      	beq.n	8022466 <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 802244e:	4b0d      	ldr	r3, [pc, #52]	; (8022484 <HAL_COMP_IRQHandler+0xe4>)
 8022450:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8022454:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	681b      	ldr	r3, [r3, #0]
 802245a:	681a      	ldr	r2, [r3, #0]
 802245c:	687b      	ldr	r3, [r7, #4]
 802245e:	681b      	ldr	r3, [r3, #0]
 8022460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022464:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	2201      	movs	r2, #1
 802246a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802246e:	6878      	ldr	r0, [r7, #4]
 8022470:	f7fe fce2 	bl	8020e38 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 8022474:	bf00      	nop
 8022476:	3710      	adds	r7, #16
 8022478:	46bd      	mov	sp, r7
 802247a:	bd80      	pop	{r7, pc}
 802247c:	5800380c 	.word	0x5800380c
 8022480:	58003810 	.word	0x58003810
 8022484:	58003800 	.word	0x58003800

08022488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022488:	b480      	push	{r7}
 802248a:	b085      	sub	sp, #20
 802248c:	af00      	add	r7, sp, #0
 802248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8022490:	687b      	ldr	r3, [r7, #4]
 8022492:	f003 0307 	and.w	r3, r3, #7
 8022496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8022498:	4b0b      	ldr	r3, [pc, #44]	; (80224c8 <__NVIC_SetPriorityGrouping+0x40>)
 802249a:	68db      	ldr	r3, [r3, #12]
 802249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802249e:	68ba      	ldr	r2, [r7, #8]
 80224a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80224a4:	4013      	ands	r3, r2
 80224a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80224a8:	68fb      	ldr	r3, [r7, #12]
 80224aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80224ac:	68bb      	ldr	r3, [r7, #8]
 80224ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80224b0:	4b06      	ldr	r3, [pc, #24]	; (80224cc <__NVIC_SetPriorityGrouping+0x44>)
 80224b2:	4313      	orrs	r3, r2
 80224b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80224b6:	4a04      	ldr	r2, [pc, #16]	; (80224c8 <__NVIC_SetPriorityGrouping+0x40>)
 80224b8:	68bb      	ldr	r3, [r7, #8]
 80224ba:	60d3      	str	r3, [r2, #12]
}
 80224bc:	bf00      	nop
 80224be:	3714      	adds	r7, #20
 80224c0:	46bd      	mov	sp, r7
 80224c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224c6:	4770      	bx	lr
 80224c8:	e000ed00 	.word	0xe000ed00
 80224cc:	05fa0000 	.word	0x05fa0000

080224d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80224d0:	b480      	push	{r7}
 80224d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80224d4:	4b04      	ldr	r3, [pc, #16]	; (80224e8 <__NVIC_GetPriorityGrouping+0x18>)
 80224d6:	68db      	ldr	r3, [r3, #12]
 80224d8:	0a1b      	lsrs	r3, r3, #8
 80224da:	f003 0307 	and.w	r3, r3, #7
}
 80224de:	4618      	mov	r0, r3
 80224e0:	46bd      	mov	sp, r7
 80224e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224e6:	4770      	bx	lr
 80224e8:	e000ed00 	.word	0xe000ed00

080224ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80224ec:	b480      	push	{r7}
 80224ee:	b083      	sub	sp, #12
 80224f0:	af00      	add	r7, sp, #0
 80224f2:	4603      	mov	r3, r0
 80224f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80224f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	db0b      	blt.n	8022516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80224fe:	88fb      	ldrh	r3, [r7, #6]
 8022500:	f003 021f 	and.w	r2, r3, #31
 8022504:	4907      	ldr	r1, [pc, #28]	; (8022524 <__NVIC_EnableIRQ+0x38>)
 8022506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802250a:	095b      	lsrs	r3, r3, #5
 802250c:	2001      	movs	r0, #1
 802250e:	fa00 f202 	lsl.w	r2, r0, r2
 8022512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8022516:	bf00      	nop
 8022518:	370c      	adds	r7, #12
 802251a:	46bd      	mov	sp, r7
 802251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022520:	4770      	bx	lr
 8022522:	bf00      	nop
 8022524:	e000e100 	.word	0xe000e100

08022528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8022528:	b480      	push	{r7}
 802252a:	b083      	sub	sp, #12
 802252c:	af00      	add	r7, sp, #0
 802252e:	4603      	mov	r3, r0
 8022530:	6039      	str	r1, [r7, #0]
 8022532:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8022534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8022538:	2b00      	cmp	r3, #0
 802253a:	db0a      	blt.n	8022552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802253c:	683b      	ldr	r3, [r7, #0]
 802253e:	b2da      	uxtb	r2, r3
 8022540:	490c      	ldr	r1, [pc, #48]	; (8022574 <__NVIC_SetPriority+0x4c>)
 8022542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8022546:	0112      	lsls	r2, r2, #4
 8022548:	b2d2      	uxtb	r2, r2
 802254a:	440b      	add	r3, r1
 802254c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8022550:	e00a      	b.n	8022568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022552:	683b      	ldr	r3, [r7, #0]
 8022554:	b2da      	uxtb	r2, r3
 8022556:	4908      	ldr	r1, [pc, #32]	; (8022578 <__NVIC_SetPriority+0x50>)
 8022558:	88fb      	ldrh	r3, [r7, #6]
 802255a:	f003 030f 	and.w	r3, r3, #15
 802255e:	3b04      	subs	r3, #4
 8022560:	0112      	lsls	r2, r2, #4
 8022562:	b2d2      	uxtb	r2, r2
 8022564:	440b      	add	r3, r1
 8022566:	761a      	strb	r2, [r3, #24]
}
 8022568:	bf00      	nop
 802256a:	370c      	adds	r7, #12
 802256c:	46bd      	mov	sp, r7
 802256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022572:	4770      	bx	lr
 8022574:	e000e100 	.word	0xe000e100
 8022578:	e000ed00 	.word	0xe000ed00

0802257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802257c:	b480      	push	{r7}
 802257e:	b089      	sub	sp, #36	; 0x24
 8022580:	af00      	add	r7, sp, #0
 8022582:	60f8      	str	r0, [r7, #12]
 8022584:	60b9      	str	r1, [r7, #8]
 8022586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8022588:	68fb      	ldr	r3, [r7, #12]
 802258a:	f003 0307 	and.w	r3, r3, #7
 802258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022590:	69fb      	ldr	r3, [r7, #28]
 8022592:	f1c3 0307 	rsb	r3, r3, #7
 8022596:	2b04      	cmp	r3, #4
 8022598:	bf28      	it	cs
 802259a:	2304      	movcs	r3, #4
 802259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802259e:	69fb      	ldr	r3, [r7, #28]
 80225a0:	3304      	adds	r3, #4
 80225a2:	2b06      	cmp	r3, #6
 80225a4:	d902      	bls.n	80225ac <NVIC_EncodePriority+0x30>
 80225a6:	69fb      	ldr	r3, [r7, #28]
 80225a8:	3b03      	subs	r3, #3
 80225aa:	e000      	b.n	80225ae <NVIC_EncodePriority+0x32>
 80225ac:	2300      	movs	r3, #0
 80225ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80225b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80225b4:	69bb      	ldr	r3, [r7, #24]
 80225b6:	fa02 f303 	lsl.w	r3, r2, r3
 80225ba:	43da      	mvns	r2, r3
 80225bc:	68bb      	ldr	r3, [r7, #8]
 80225be:	401a      	ands	r2, r3
 80225c0:	697b      	ldr	r3, [r7, #20]
 80225c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80225c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80225c8:	697b      	ldr	r3, [r7, #20]
 80225ca:	fa01 f303 	lsl.w	r3, r1, r3
 80225ce:	43d9      	mvns	r1, r3
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80225d4:	4313      	orrs	r3, r2
         );
}
 80225d6:	4618      	mov	r0, r3
 80225d8:	3724      	adds	r7, #36	; 0x24
 80225da:	46bd      	mov	sp, r7
 80225dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225e0:	4770      	bx	lr
	...

080225e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80225e4:	b580      	push	{r7, lr}
 80225e6:	b082      	sub	sp, #8
 80225e8:	af00      	add	r7, sp, #0
 80225ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80225ec:	687b      	ldr	r3, [r7, #4]
 80225ee:	3b01      	subs	r3, #1
 80225f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80225f4:	d301      	bcc.n	80225fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80225f6:	2301      	movs	r3, #1
 80225f8:	e00f      	b.n	802261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80225fa:	4a0a      	ldr	r2, [pc, #40]	; (8022624 <SysTick_Config+0x40>)
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	3b01      	subs	r3, #1
 8022600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8022602:	210f      	movs	r1, #15
 8022604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022608:	f7ff ff8e 	bl	8022528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802260c:	4b05      	ldr	r3, [pc, #20]	; (8022624 <SysTick_Config+0x40>)
 802260e:	2200      	movs	r2, #0
 8022610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8022612:	4b04      	ldr	r3, [pc, #16]	; (8022624 <SysTick_Config+0x40>)
 8022614:	2207      	movs	r2, #7
 8022616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8022618:	2300      	movs	r3, #0
}
 802261a:	4618      	mov	r0, r3
 802261c:	3708      	adds	r7, #8
 802261e:	46bd      	mov	sp, r7
 8022620:	bd80      	pop	{r7, pc}
 8022622:	bf00      	nop
 8022624:	e000e010 	.word	0xe000e010

08022628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022628:	b580      	push	{r7, lr}
 802262a:	b082      	sub	sp, #8
 802262c:	af00      	add	r7, sp, #0
 802262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8022630:	6878      	ldr	r0, [r7, #4]
 8022632:	f7ff ff29 	bl	8022488 <__NVIC_SetPriorityGrouping>
}
 8022636:	bf00      	nop
 8022638:	3708      	adds	r7, #8
 802263a:	46bd      	mov	sp, r7
 802263c:	bd80      	pop	{r7, pc}

0802263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802263e:	b580      	push	{r7, lr}
 8022640:	b086      	sub	sp, #24
 8022642:	af00      	add	r7, sp, #0
 8022644:	4603      	mov	r3, r0
 8022646:	60b9      	str	r1, [r7, #8]
 8022648:	607a      	str	r2, [r7, #4]
 802264a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802264c:	f7ff ff40 	bl	80224d0 <__NVIC_GetPriorityGrouping>
 8022650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8022652:	687a      	ldr	r2, [r7, #4]
 8022654:	68b9      	ldr	r1, [r7, #8]
 8022656:	6978      	ldr	r0, [r7, #20]
 8022658:	f7ff ff90 	bl	802257c <NVIC_EncodePriority>
 802265c:	4602      	mov	r2, r0
 802265e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8022662:	4611      	mov	r1, r2
 8022664:	4618      	mov	r0, r3
 8022666:	f7ff ff5f 	bl	8022528 <__NVIC_SetPriority>
}
 802266a:	bf00      	nop
 802266c:	3718      	adds	r7, #24
 802266e:	46bd      	mov	sp, r7
 8022670:	bd80      	pop	{r7, pc}

08022672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022672:	b580      	push	{r7, lr}
 8022674:	b082      	sub	sp, #8
 8022676:	af00      	add	r7, sp, #0
 8022678:	4603      	mov	r3, r0
 802267a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802267c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8022680:	4618      	mov	r0, r3
 8022682:	f7ff ff33 	bl	80224ec <__NVIC_EnableIRQ>
}
 8022686:	bf00      	nop
 8022688:	3708      	adds	r7, #8
 802268a:	46bd      	mov	sp, r7
 802268c:	bd80      	pop	{r7, pc}

0802268e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802268e:	b580      	push	{r7, lr}
 8022690:	b082      	sub	sp, #8
 8022692:	af00      	add	r7, sp, #0
 8022694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8022696:	6878      	ldr	r0, [r7, #4]
 8022698:	f7ff ffa4 	bl	80225e4 <SysTick_Config>
 802269c:	4603      	mov	r3, r0
}
 802269e:	4618      	mov	r0, r3
 80226a0:	3708      	adds	r7, #8
 80226a2:	46bd      	mov	sp, r7
 80226a4:	bd80      	pop	{r7, pc}

080226a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80226a6:	b580      	push	{r7, lr}
 80226a8:	b082      	sub	sp, #8
 80226aa:	af00      	add	r7, sp, #0
 80226ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80226ae:	687b      	ldr	r3, [r7, #4]
 80226b0:	2b00      	cmp	r3, #0
 80226b2:	d101      	bne.n	80226b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80226b4:	2301      	movs	r3, #1
 80226b6:	e014      	b.n	80226e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80226b8:	687b      	ldr	r3, [r7, #4]
 80226ba:	791b      	ldrb	r3, [r3, #4]
 80226bc:	b2db      	uxtb	r3, r3
 80226be:	2b00      	cmp	r3, #0
 80226c0:	d105      	bne.n	80226ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	2200      	movs	r2, #0
 80226c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80226c8:	6878      	ldr	r0, [r7, #4]
 80226ca:	f7fe f88f 	bl	80207ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80226ce:	687b      	ldr	r3, [r7, #4]
 80226d0:	2202      	movs	r2, #2
 80226d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	2200      	movs	r2, #0
 80226d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80226da:	687b      	ldr	r3, [r7, #4]
 80226dc:	2201      	movs	r2, #1
 80226de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80226e0:	2300      	movs	r3, #0
}
 80226e2:	4618      	mov	r0, r3
 80226e4:	3708      	adds	r7, #8
 80226e6:	46bd      	mov	sp, r7
 80226e8:	bd80      	pop	{r7, pc}

080226ea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80226ea:	b480      	push	{r7}
 80226ec:	b083      	sub	sp, #12
 80226ee:	af00      	add	r7, sp, #0
 80226f0:	6078      	str	r0, [r7, #4]
 80226f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	795b      	ldrb	r3, [r3, #5]
 80226f8:	2b01      	cmp	r3, #1
 80226fa:	d101      	bne.n	8022700 <HAL_DAC_Start+0x16>
 80226fc:	2302      	movs	r3, #2
 80226fe:	e040      	b.n	8022782 <HAL_DAC_Start+0x98>
 8022700:	687b      	ldr	r3, [r7, #4]
 8022702:	2201      	movs	r2, #1
 8022704:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8022706:	687b      	ldr	r3, [r7, #4]
 8022708:	2202      	movs	r2, #2
 802270a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 802270c:	687b      	ldr	r3, [r7, #4]
 802270e:	681b      	ldr	r3, [r3, #0]
 8022710:	6819      	ldr	r1, [r3, #0]
 8022712:	683b      	ldr	r3, [r7, #0]
 8022714:	f003 0310 	and.w	r3, r3, #16
 8022718:	2201      	movs	r2, #1
 802271a:	409a      	lsls	r2, r3
 802271c:	687b      	ldr	r3, [r7, #4]
 802271e:	681b      	ldr	r3, [r3, #0]
 8022720:	430a      	orrs	r2, r1
 8022722:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8022724:	683b      	ldr	r3, [r7, #0]
 8022726:	2b00      	cmp	r3, #0
 8022728:	d10f      	bne.n	802274a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 802272a:	687b      	ldr	r3, [r7, #4]
 802272c:	681b      	ldr	r3, [r3, #0]
 802272e:	681b      	ldr	r3, [r3, #0]
 8022730:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8022734:	2b02      	cmp	r3, #2
 8022736:	d11d      	bne.n	8022774 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8022738:	687b      	ldr	r3, [r7, #4]
 802273a:	681b      	ldr	r3, [r3, #0]
 802273c:	685a      	ldr	r2, [r3, #4]
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	681b      	ldr	r3, [r3, #0]
 8022742:	f042 0201 	orr.w	r2, r2, #1
 8022746:	605a      	str	r2, [r3, #4]
 8022748:	e014      	b.n	8022774 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 802274a:	687b      	ldr	r3, [r7, #4]
 802274c:	681b      	ldr	r3, [r3, #0]
 802274e:	681b      	ldr	r3, [r3, #0]
 8022750:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8022754:	683b      	ldr	r3, [r7, #0]
 8022756:	f003 0310 	and.w	r3, r3, #16
 802275a:	2102      	movs	r1, #2
 802275c:	fa01 f303 	lsl.w	r3, r1, r3
 8022760:	429a      	cmp	r2, r3
 8022762:	d107      	bne.n	8022774 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8022764:	687b      	ldr	r3, [r7, #4]
 8022766:	681b      	ldr	r3, [r3, #0]
 8022768:	685a      	ldr	r2, [r3, #4]
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	681b      	ldr	r3, [r3, #0]
 802276e:	f042 0202 	orr.w	r2, r2, #2
 8022772:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8022774:	687b      	ldr	r3, [r7, #4]
 8022776:	2201      	movs	r2, #1
 8022778:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802277a:	687b      	ldr	r3, [r7, #4]
 802277c:	2200      	movs	r2, #0
 802277e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8022780:	2300      	movs	r3, #0
}
 8022782:	4618      	mov	r0, r3
 8022784:	370c      	adds	r7, #12
 8022786:	46bd      	mov	sp, r7
 8022788:	f85d 7b04 	ldr.w	r7, [sp], #4
 802278c:	4770      	bx	lr

0802278e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 802278e:	b480      	push	{r7}
 8022790:	b087      	sub	sp, #28
 8022792:	af00      	add	r7, sp, #0
 8022794:	60f8      	str	r0, [r7, #12]
 8022796:	60b9      	str	r1, [r7, #8]
 8022798:	607a      	str	r2, [r7, #4]
 802279a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 802279c:	2300      	movs	r3, #0
 802279e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80227a0:	68fb      	ldr	r3, [r7, #12]
 80227a2:	681b      	ldr	r3, [r3, #0]
 80227a4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80227a6:	68bb      	ldr	r3, [r7, #8]
 80227a8:	2b00      	cmp	r3, #0
 80227aa:	d105      	bne.n	80227b8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80227ac:	697a      	ldr	r2, [r7, #20]
 80227ae:	687b      	ldr	r3, [r7, #4]
 80227b0:	4413      	add	r3, r2
 80227b2:	3308      	adds	r3, #8
 80227b4:	617b      	str	r3, [r7, #20]
 80227b6:	e004      	b.n	80227c2 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80227b8:	697a      	ldr	r2, [r7, #20]
 80227ba:	687b      	ldr	r3, [r7, #4]
 80227bc:	4413      	add	r3, r2
 80227be:	3314      	adds	r3, #20
 80227c0:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80227c2:	697b      	ldr	r3, [r7, #20]
 80227c4:	461a      	mov	r2, r3
 80227c6:	683b      	ldr	r3, [r7, #0]
 80227c8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80227ca:	2300      	movs	r3, #0
}
 80227cc:	4618      	mov	r0, r3
 80227ce:	371c      	adds	r7, #28
 80227d0:	46bd      	mov	sp, r7
 80227d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227d6:	4770      	bx	lr

080227d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80227d8:	b580      	push	{r7, lr}
 80227da:	b088      	sub	sp, #32
 80227dc:	af00      	add	r7, sp, #0
 80227de:	60f8      	str	r0, [r7, #12]
 80227e0:	60b9      	str	r1, [r7, #8]
 80227e2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80227e4:	68fb      	ldr	r3, [r7, #12]
 80227e6:	795b      	ldrb	r3, [r3, #5]
 80227e8:	2b01      	cmp	r3, #1
 80227ea:	d101      	bne.n	80227f0 <HAL_DAC_ConfigChannel+0x18>
 80227ec:	2302      	movs	r3, #2
 80227ee:	e11d      	b.n	8022a2c <HAL_DAC_ConfigChannel+0x254>
 80227f0:	68fb      	ldr	r3, [r7, #12]
 80227f2:	2201      	movs	r2, #1
 80227f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80227f6:	68fb      	ldr	r3, [r7, #12]
 80227f8:	2202      	movs	r2, #2
 80227fa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80227fc:	68bb      	ldr	r3, [r7, #8]
 80227fe:	681b      	ldr	r3, [r3, #0]
 8022800:	2b04      	cmp	r3, #4
 8022802:	d174      	bne.n	80228ee <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8022804:	f7ff fc1c 	bl	8022040 <HAL_GetTick>
 8022808:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 802280a:	687b      	ldr	r3, [r7, #4]
 802280c:	2b00      	cmp	r3, #0
 802280e:	d134      	bne.n	802287a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8022810:	e011      	b.n	8022836 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8022812:	f7ff fc15 	bl	8022040 <HAL_GetTick>
 8022816:	4602      	mov	r2, r0
 8022818:	69bb      	ldr	r3, [r7, #24]
 802281a:	1ad3      	subs	r3, r2, r3
 802281c:	2b01      	cmp	r3, #1
 802281e:	d90a      	bls.n	8022836 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8022820:	68fb      	ldr	r3, [r7, #12]
 8022822:	691b      	ldr	r3, [r3, #16]
 8022824:	f043 0208 	orr.w	r2, r3, #8
 8022828:	68fb      	ldr	r3, [r7, #12]
 802282a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802282c:	68fb      	ldr	r3, [r7, #12]
 802282e:	2203      	movs	r2, #3
 8022830:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8022832:	2303      	movs	r3, #3
 8022834:	e0fa      	b.n	8022a2c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8022836:	68fb      	ldr	r3, [r7, #12]
 8022838:	681b      	ldr	r3, [r3, #0]
 802283a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802283c:	4b7d      	ldr	r3, [pc, #500]	; (8022a34 <HAL_DAC_ConfigChannel+0x25c>)
 802283e:	4013      	ands	r3, r2
 8022840:	2b00      	cmp	r3, #0
 8022842:	d1e6      	bne.n	8022812 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8022844:	2001      	movs	r0, #1
 8022846:	f7ff fc07 	bl	8022058 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802284a:	68fb      	ldr	r3, [r7, #12]
 802284c:	681b      	ldr	r3, [r3, #0]
 802284e:	68ba      	ldr	r2, [r7, #8]
 8022850:	6992      	ldr	r2, [r2, #24]
 8022852:	641a      	str	r2, [r3, #64]	; 0x40
 8022854:	e01e      	b.n	8022894 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8022856:	f7ff fbf3 	bl	8022040 <HAL_GetTick>
 802285a:	4602      	mov	r2, r0
 802285c:	69bb      	ldr	r3, [r7, #24]
 802285e:	1ad3      	subs	r3, r2, r3
 8022860:	2b01      	cmp	r3, #1
 8022862:	d90a      	bls.n	802287a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8022864:	68fb      	ldr	r3, [r7, #12]
 8022866:	691b      	ldr	r3, [r3, #16]
 8022868:	f043 0208 	orr.w	r2, r3, #8
 802286c:	68fb      	ldr	r3, [r7, #12]
 802286e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8022870:	68fb      	ldr	r3, [r7, #12]
 8022872:	2203      	movs	r2, #3
 8022874:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8022876:	2303      	movs	r3, #3
 8022878:	e0d8      	b.n	8022a2c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 802287a:	68fb      	ldr	r3, [r7, #12]
 802287c:	681b      	ldr	r3, [r3, #0]
 802287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022880:	2b00      	cmp	r3, #0
 8022882:	dbe8      	blt.n	8022856 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8022884:	2001      	movs	r0, #1
 8022886:	f7ff fbe7 	bl	8022058 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802288a:	68fb      	ldr	r3, [r7, #12]
 802288c:	681b      	ldr	r3, [r3, #0]
 802288e:	68ba      	ldr	r2, [r7, #8]
 8022890:	6992      	ldr	r2, [r2, #24]
 8022892:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8022894:	68fb      	ldr	r3, [r7, #12]
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802289a:	687b      	ldr	r3, [r7, #4]
 802289c:	f003 0310 	and.w	r3, r3, #16
 80228a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80228a4:	fa01 f303 	lsl.w	r3, r1, r3
 80228a8:	43db      	mvns	r3, r3
 80228aa:	ea02 0103 	and.w	r1, r2, r3
 80228ae:	68bb      	ldr	r3, [r7, #8]
 80228b0:	69da      	ldr	r2, [r3, #28]
 80228b2:	687b      	ldr	r3, [r7, #4]
 80228b4:	f003 0310 	and.w	r3, r3, #16
 80228b8:	409a      	lsls	r2, r3
 80228ba:	68fb      	ldr	r3, [r7, #12]
 80228bc:	681b      	ldr	r3, [r3, #0]
 80228be:	430a      	orrs	r2, r1
 80228c0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80228c2:	68fb      	ldr	r3, [r7, #12]
 80228c4:	681b      	ldr	r3, [r3, #0]
 80228c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80228c8:	687b      	ldr	r3, [r7, #4]
 80228ca:	f003 0310 	and.w	r3, r3, #16
 80228ce:	21ff      	movs	r1, #255	; 0xff
 80228d0:	fa01 f303 	lsl.w	r3, r1, r3
 80228d4:	43db      	mvns	r3, r3
 80228d6:	ea02 0103 	and.w	r1, r2, r3
 80228da:	68bb      	ldr	r3, [r7, #8]
 80228dc:	6a1a      	ldr	r2, [r3, #32]
 80228de:	687b      	ldr	r3, [r7, #4]
 80228e0:	f003 0310 	and.w	r3, r3, #16
 80228e4:	409a      	lsls	r2, r3
 80228e6:	68fb      	ldr	r3, [r7, #12]
 80228e8:	681b      	ldr	r3, [r3, #0]
 80228ea:	430a      	orrs	r2, r1
 80228ec:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80228ee:	68bb      	ldr	r3, [r7, #8]
 80228f0:	691b      	ldr	r3, [r3, #16]
 80228f2:	2b01      	cmp	r3, #1
 80228f4:	d11d      	bne.n	8022932 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80228f6:	68fb      	ldr	r3, [r7, #12]
 80228f8:	681b      	ldr	r3, [r3, #0]
 80228fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80228fc:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80228fe:	687b      	ldr	r3, [r7, #4]
 8022900:	f003 0310 	and.w	r3, r3, #16
 8022904:	221f      	movs	r2, #31
 8022906:	fa02 f303 	lsl.w	r3, r2, r3
 802290a:	43db      	mvns	r3, r3
 802290c:	697a      	ldr	r2, [r7, #20]
 802290e:	4013      	ands	r3, r2
 8022910:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8022912:	68bb      	ldr	r3, [r7, #8]
 8022914:	695b      	ldr	r3, [r3, #20]
 8022916:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8022918:	687b      	ldr	r3, [r7, #4]
 802291a:	f003 0310 	and.w	r3, r3, #16
 802291e:	693a      	ldr	r2, [r7, #16]
 8022920:	fa02 f303 	lsl.w	r3, r2, r3
 8022924:	697a      	ldr	r2, [r7, #20]
 8022926:	4313      	orrs	r3, r2
 8022928:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 802292a:	68fb      	ldr	r3, [r7, #12]
 802292c:	681b      	ldr	r3, [r3, #0]
 802292e:	697a      	ldr	r2, [r7, #20]
 8022930:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8022932:	68fb      	ldr	r3, [r7, #12]
 8022934:	681b      	ldr	r3, [r3, #0]
 8022936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022938:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 802293a:	687b      	ldr	r3, [r7, #4]
 802293c:	f003 0310 	and.w	r3, r3, #16
 8022940:	2207      	movs	r2, #7
 8022942:	fa02 f303 	lsl.w	r3, r2, r3
 8022946:	43db      	mvns	r3, r3
 8022948:	697a      	ldr	r2, [r7, #20]
 802294a:	4013      	ands	r3, r2
 802294c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 802294e:	68bb      	ldr	r3, [r7, #8]
 8022950:	68db      	ldr	r3, [r3, #12]
 8022952:	2b01      	cmp	r3, #1
 8022954:	d102      	bne.n	802295c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8022956:	2300      	movs	r3, #0
 8022958:	61fb      	str	r3, [r7, #28]
 802295a:	e00f      	b.n	802297c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 802295c:	68bb      	ldr	r3, [r7, #8]
 802295e:	68db      	ldr	r3, [r3, #12]
 8022960:	2b02      	cmp	r3, #2
 8022962:	d102      	bne.n	802296a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8022964:	2301      	movs	r3, #1
 8022966:	61fb      	str	r3, [r7, #28]
 8022968:	e008      	b.n	802297c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 802296a:	68bb      	ldr	r3, [r7, #8]
 802296c:	689b      	ldr	r3, [r3, #8]
 802296e:	2b00      	cmp	r3, #0
 8022970:	d102      	bne.n	8022978 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8022972:	2301      	movs	r3, #1
 8022974:	61fb      	str	r3, [r7, #28]
 8022976:	e001      	b.n	802297c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8022978:	2300      	movs	r3, #0
 802297a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 802297c:	68bb      	ldr	r3, [r7, #8]
 802297e:	681a      	ldr	r2, [r3, #0]
 8022980:	68bb      	ldr	r3, [r7, #8]
 8022982:	689b      	ldr	r3, [r3, #8]
 8022984:	4313      	orrs	r3, r2
 8022986:	69fa      	ldr	r2, [r7, #28]
 8022988:	4313      	orrs	r3, r2
 802298a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802298c:	687b      	ldr	r3, [r7, #4]
 802298e:	f003 0310 	and.w	r3, r3, #16
 8022992:	693a      	ldr	r2, [r7, #16]
 8022994:	fa02 f303 	lsl.w	r3, r2, r3
 8022998:	697a      	ldr	r2, [r7, #20]
 802299a:	4313      	orrs	r3, r2
 802299c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 802299e:	68fb      	ldr	r3, [r7, #12]
 80229a0:	681b      	ldr	r3, [r3, #0]
 80229a2:	697a      	ldr	r2, [r7, #20]
 80229a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80229a6:	68fb      	ldr	r3, [r7, #12]
 80229a8:	681b      	ldr	r3, [r3, #0]
 80229aa:	6819      	ldr	r1, [r3, #0]
 80229ac:	687b      	ldr	r3, [r7, #4]
 80229ae:	f003 0310 	and.w	r3, r3, #16
 80229b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80229b6:	fa02 f303 	lsl.w	r3, r2, r3
 80229ba:	43da      	mvns	r2, r3
 80229bc:	68fb      	ldr	r3, [r7, #12]
 80229be:	681b      	ldr	r3, [r3, #0]
 80229c0:	400a      	ands	r2, r1
 80229c2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80229c4:	68fb      	ldr	r3, [r7, #12]
 80229c6:	681b      	ldr	r3, [r3, #0]
 80229c8:	681b      	ldr	r3, [r3, #0]
 80229ca:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80229cc:	687b      	ldr	r3, [r7, #4]
 80229ce:	f003 0310 	and.w	r3, r3, #16
 80229d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80229d6:	fa02 f303 	lsl.w	r3, r2, r3
 80229da:	43db      	mvns	r3, r3
 80229dc:	697a      	ldr	r2, [r7, #20]
 80229de:	4013      	ands	r3, r2
 80229e0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80229e2:	68bb      	ldr	r3, [r7, #8]
 80229e4:	685b      	ldr	r3, [r3, #4]
 80229e6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	f003 0310 	and.w	r3, r3, #16
 80229ee:	693a      	ldr	r2, [r7, #16]
 80229f0:	fa02 f303 	lsl.w	r3, r2, r3
 80229f4:	697a      	ldr	r2, [r7, #20]
 80229f6:	4313      	orrs	r3, r2
 80229f8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80229fa:	68fb      	ldr	r3, [r7, #12]
 80229fc:	681b      	ldr	r3, [r3, #0]
 80229fe:	697a      	ldr	r2, [r7, #20]
 8022a00:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8022a02:	68fb      	ldr	r3, [r7, #12]
 8022a04:	681b      	ldr	r3, [r3, #0]
 8022a06:	6819      	ldr	r1, [r3, #0]
 8022a08:	687b      	ldr	r3, [r7, #4]
 8022a0a:	f003 0310 	and.w	r3, r3, #16
 8022a0e:	22c0      	movs	r2, #192	; 0xc0
 8022a10:	fa02 f303 	lsl.w	r3, r2, r3
 8022a14:	43da      	mvns	r2, r3
 8022a16:	68fb      	ldr	r3, [r7, #12]
 8022a18:	681b      	ldr	r3, [r3, #0]
 8022a1a:	400a      	ands	r2, r1
 8022a1c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8022a1e:	68fb      	ldr	r3, [r7, #12]
 8022a20:	2201      	movs	r2, #1
 8022a22:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8022a24:	68fb      	ldr	r3, [r7, #12]
 8022a26:	2200      	movs	r2, #0
 8022a28:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8022a2a:	2300      	movs	r3, #0
}
 8022a2c:	4618      	mov	r0, r3
 8022a2e:	3720      	adds	r7, #32
 8022a30:	46bd      	mov	sp, r7
 8022a32:	bd80      	pop	{r7, pc}
 8022a34:	20008000 	.word	0x20008000

08022a38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8022a38:	b580      	push	{r7, lr}
 8022a3a:	b086      	sub	sp, #24
 8022a3c:	af00      	add	r7, sp, #0
 8022a3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8022a40:	f7ff fafe 	bl	8022040 <HAL_GetTick>
 8022a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	2b00      	cmp	r3, #0
 8022a4a:	d101      	bne.n	8022a50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8022a4c:	2301      	movs	r3, #1
 8022a4e:	e316      	b.n	802307e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8022a50:	687b      	ldr	r3, [r7, #4]
 8022a52:	681b      	ldr	r3, [r3, #0]
 8022a54:	4a66      	ldr	r2, [pc, #408]	; (8022bf0 <HAL_DMA_Init+0x1b8>)
 8022a56:	4293      	cmp	r3, r2
 8022a58:	d04a      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	681b      	ldr	r3, [r3, #0]
 8022a5e:	4a65      	ldr	r2, [pc, #404]	; (8022bf4 <HAL_DMA_Init+0x1bc>)
 8022a60:	4293      	cmp	r3, r2
 8022a62:	d045      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022a64:	687b      	ldr	r3, [r7, #4]
 8022a66:	681b      	ldr	r3, [r3, #0]
 8022a68:	4a63      	ldr	r2, [pc, #396]	; (8022bf8 <HAL_DMA_Init+0x1c0>)
 8022a6a:	4293      	cmp	r3, r2
 8022a6c:	d040      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022a6e:	687b      	ldr	r3, [r7, #4]
 8022a70:	681b      	ldr	r3, [r3, #0]
 8022a72:	4a62      	ldr	r2, [pc, #392]	; (8022bfc <HAL_DMA_Init+0x1c4>)
 8022a74:	4293      	cmp	r3, r2
 8022a76:	d03b      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022a78:	687b      	ldr	r3, [r7, #4]
 8022a7a:	681b      	ldr	r3, [r3, #0]
 8022a7c:	4a60      	ldr	r2, [pc, #384]	; (8022c00 <HAL_DMA_Init+0x1c8>)
 8022a7e:	4293      	cmp	r3, r2
 8022a80:	d036      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	681b      	ldr	r3, [r3, #0]
 8022a86:	4a5f      	ldr	r2, [pc, #380]	; (8022c04 <HAL_DMA_Init+0x1cc>)
 8022a88:	4293      	cmp	r3, r2
 8022a8a:	d031      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	681b      	ldr	r3, [r3, #0]
 8022a90:	4a5d      	ldr	r2, [pc, #372]	; (8022c08 <HAL_DMA_Init+0x1d0>)
 8022a92:	4293      	cmp	r3, r2
 8022a94:	d02c      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022a96:	687b      	ldr	r3, [r7, #4]
 8022a98:	681b      	ldr	r3, [r3, #0]
 8022a9a:	4a5c      	ldr	r2, [pc, #368]	; (8022c0c <HAL_DMA_Init+0x1d4>)
 8022a9c:	4293      	cmp	r3, r2
 8022a9e:	d027      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022aa0:	687b      	ldr	r3, [r7, #4]
 8022aa2:	681b      	ldr	r3, [r3, #0]
 8022aa4:	4a5a      	ldr	r2, [pc, #360]	; (8022c10 <HAL_DMA_Init+0x1d8>)
 8022aa6:	4293      	cmp	r3, r2
 8022aa8:	d022      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022aaa:	687b      	ldr	r3, [r7, #4]
 8022aac:	681b      	ldr	r3, [r3, #0]
 8022aae:	4a59      	ldr	r2, [pc, #356]	; (8022c14 <HAL_DMA_Init+0x1dc>)
 8022ab0:	4293      	cmp	r3, r2
 8022ab2:	d01d      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022ab4:	687b      	ldr	r3, [r7, #4]
 8022ab6:	681b      	ldr	r3, [r3, #0]
 8022ab8:	4a57      	ldr	r2, [pc, #348]	; (8022c18 <HAL_DMA_Init+0x1e0>)
 8022aba:	4293      	cmp	r3, r2
 8022abc:	d018      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022abe:	687b      	ldr	r3, [r7, #4]
 8022ac0:	681b      	ldr	r3, [r3, #0]
 8022ac2:	4a56      	ldr	r2, [pc, #344]	; (8022c1c <HAL_DMA_Init+0x1e4>)
 8022ac4:	4293      	cmp	r3, r2
 8022ac6:	d013      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022ac8:	687b      	ldr	r3, [r7, #4]
 8022aca:	681b      	ldr	r3, [r3, #0]
 8022acc:	4a54      	ldr	r2, [pc, #336]	; (8022c20 <HAL_DMA_Init+0x1e8>)
 8022ace:	4293      	cmp	r3, r2
 8022ad0:	d00e      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022ad2:	687b      	ldr	r3, [r7, #4]
 8022ad4:	681b      	ldr	r3, [r3, #0]
 8022ad6:	4a53      	ldr	r2, [pc, #332]	; (8022c24 <HAL_DMA_Init+0x1ec>)
 8022ad8:	4293      	cmp	r3, r2
 8022ada:	d009      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022adc:	687b      	ldr	r3, [r7, #4]
 8022ade:	681b      	ldr	r3, [r3, #0]
 8022ae0:	4a51      	ldr	r2, [pc, #324]	; (8022c28 <HAL_DMA_Init+0x1f0>)
 8022ae2:	4293      	cmp	r3, r2
 8022ae4:	d004      	beq.n	8022af0 <HAL_DMA_Init+0xb8>
 8022ae6:	687b      	ldr	r3, [r7, #4]
 8022ae8:	681b      	ldr	r3, [r3, #0]
 8022aea:	4a50      	ldr	r2, [pc, #320]	; (8022c2c <HAL_DMA_Init+0x1f4>)
 8022aec:	4293      	cmp	r3, r2
 8022aee:	d101      	bne.n	8022af4 <HAL_DMA_Init+0xbc>
 8022af0:	2301      	movs	r3, #1
 8022af2:	e000      	b.n	8022af6 <HAL_DMA_Init+0xbe>
 8022af4:	2300      	movs	r3, #0
 8022af6:	2b00      	cmp	r3, #0
 8022af8:	f000 813b 	beq.w	8022d72 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8022afc:	687b      	ldr	r3, [r7, #4]
 8022afe:	2202      	movs	r2, #2
 8022b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8022b04:	687b      	ldr	r3, [r7, #4]
 8022b06:	2200      	movs	r2, #0
 8022b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8022b0c:	687b      	ldr	r3, [r7, #4]
 8022b0e:	681b      	ldr	r3, [r3, #0]
 8022b10:	4a37      	ldr	r2, [pc, #220]	; (8022bf0 <HAL_DMA_Init+0x1b8>)
 8022b12:	4293      	cmp	r3, r2
 8022b14:	d04a      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b16:	687b      	ldr	r3, [r7, #4]
 8022b18:	681b      	ldr	r3, [r3, #0]
 8022b1a:	4a36      	ldr	r2, [pc, #216]	; (8022bf4 <HAL_DMA_Init+0x1bc>)
 8022b1c:	4293      	cmp	r3, r2
 8022b1e:	d045      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b20:	687b      	ldr	r3, [r7, #4]
 8022b22:	681b      	ldr	r3, [r3, #0]
 8022b24:	4a34      	ldr	r2, [pc, #208]	; (8022bf8 <HAL_DMA_Init+0x1c0>)
 8022b26:	4293      	cmp	r3, r2
 8022b28:	d040      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b2a:	687b      	ldr	r3, [r7, #4]
 8022b2c:	681b      	ldr	r3, [r3, #0]
 8022b2e:	4a33      	ldr	r2, [pc, #204]	; (8022bfc <HAL_DMA_Init+0x1c4>)
 8022b30:	4293      	cmp	r3, r2
 8022b32:	d03b      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	681b      	ldr	r3, [r3, #0]
 8022b38:	4a31      	ldr	r2, [pc, #196]	; (8022c00 <HAL_DMA_Init+0x1c8>)
 8022b3a:	4293      	cmp	r3, r2
 8022b3c:	d036      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b3e:	687b      	ldr	r3, [r7, #4]
 8022b40:	681b      	ldr	r3, [r3, #0]
 8022b42:	4a30      	ldr	r2, [pc, #192]	; (8022c04 <HAL_DMA_Init+0x1cc>)
 8022b44:	4293      	cmp	r3, r2
 8022b46:	d031      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b48:	687b      	ldr	r3, [r7, #4]
 8022b4a:	681b      	ldr	r3, [r3, #0]
 8022b4c:	4a2e      	ldr	r2, [pc, #184]	; (8022c08 <HAL_DMA_Init+0x1d0>)
 8022b4e:	4293      	cmp	r3, r2
 8022b50:	d02c      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b52:	687b      	ldr	r3, [r7, #4]
 8022b54:	681b      	ldr	r3, [r3, #0]
 8022b56:	4a2d      	ldr	r2, [pc, #180]	; (8022c0c <HAL_DMA_Init+0x1d4>)
 8022b58:	4293      	cmp	r3, r2
 8022b5a:	d027      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b5c:	687b      	ldr	r3, [r7, #4]
 8022b5e:	681b      	ldr	r3, [r3, #0]
 8022b60:	4a2b      	ldr	r2, [pc, #172]	; (8022c10 <HAL_DMA_Init+0x1d8>)
 8022b62:	4293      	cmp	r3, r2
 8022b64:	d022      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b66:	687b      	ldr	r3, [r7, #4]
 8022b68:	681b      	ldr	r3, [r3, #0]
 8022b6a:	4a2a      	ldr	r2, [pc, #168]	; (8022c14 <HAL_DMA_Init+0x1dc>)
 8022b6c:	4293      	cmp	r3, r2
 8022b6e:	d01d      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b70:	687b      	ldr	r3, [r7, #4]
 8022b72:	681b      	ldr	r3, [r3, #0]
 8022b74:	4a28      	ldr	r2, [pc, #160]	; (8022c18 <HAL_DMA_Init+0x1e0>)
 8022b76:	4293      	cmp	r3, r2
 8022b78:	d018      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b7a:	687b      	ldr	r3, [r7, #4]
 8022b7c:	681b      	ldr	r3, [r3, #0]
 8022b7e:	4a27      	ldr	r2, [pc, #156]	; (8022c1c <HAL_DMA_Init+0x1e4>)
 8022b80:	4293      	cmp	r3, r2
 8022b82:	d013      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b84:	687b      	ldr	r3, [r7, #4]
 8022b86:	681b      	ldr	r3, [r3, #0]
 8022b88:	4a25      	ldr	r2, [pc, #148]	; (8022c20 <HAL_DMA_Init+0x1e8>)
 8022b8a:	4293      	cmp	r3, r2
 8022b8c:	d00e      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b8e:	687b      	ldr	r3, [r7, #4]
 8022b90:	681b      	ldr	r3, [r3, #0]
 8022b92:	4a24      	ldr	r2, [pc, #144]	; (8022c24 <HAL_DMA_Init+0x1ec>)
 8022b94:	4293      	cmp	r3, r2
 8022b96:	d009      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022b98:	687b      	ldr	r3, [r7, #4]
 8022b9a:	681b      	ldr	r3, [r3, #0]
 8022b9c:	4a22      	ldr	r2, [pc, #136]	; (8022c28 <HAL_DMA_Init+0x1f0>)
 8022b9e:	4293      	cmp	r3, r2
 8022ba0:	d004      	beq.n	8022bac <HAL_DMA_Init+0x174>
 8022ba2:	687b      	ldr	r3, [r7, #4]
 8022ba4:	681b      	ldr	r3, [r3, #0]
 8022ba6:	4a21      	ldr	r2, [pc, #132]	; (8022c2c <HAL_DMA_Init+0x1f4>)
 8022ba8:	4293      	cmp	r3, r2
 8022baa:	d108      	bne.n	8022bbe <HAL_DMA_Init+0x186>
 8022bac:	687b      	ldr	r3, [r7, #4]
 8022bae:	681b      	ldr	r3, [r3, #0]
 8022bb0:	681a      	ldr	r2, [r3, #0]
 8022bb2:	687b      	ldr	r3, [r7, #4]
 8022bb4:	681b      	ldr	r3, [r3, #0]
 8022bb6:	f022 0201 	bic.w	r2, r2, #1
 8022bba:	601a      	str	r2, [r3, #0]
 8022bbc:	e007      	b.n	8022bce <HAL_DMA_Init+0x196>
 8022bbe:	687b      	ldr	r3, [r7, #4]
 8022bc0:	681b      	ldr	r3, [r3, #0]
 8022bc2:	681a      	ldr	r2, [r3, #0]
 8022bc4:	687b      	ldr	r3, [r7, #4]
 8022bc6:	681b      	ldr	r3, [r3, #0]
 8022bc8:	f022 0201 	bic.w	r2, r2, #1
 8022bcc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8022bce:	e02f      	b.n	8022c30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8022bd0:	f7ff fa36 	bl	8022040 <HAL_GetTick>
 8022bd4:	4602      	mov	r2, r0
 8022bd6:	693b      	ldr	r3, [r7, #16]
 8022bd8:	1ad3      	subs	r3, r2, r3
 8022bda:	2b05      	cmp	r3, #5
 8022bdc:	d928      	bls.n	8022c30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8022bde:	687b      	ldr	r3, [r7, #4]
 8022be0:	2220      	movs	r2, #32
 8022be2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	2203      	movs	r2, #3
 8022be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8022bec:	2301      	movs	r3, #1
 8022bee:	e246      	b.n	802307e <HAL_DMA_Init+0x646>
 8022bf0:	40020010 	.word	0x40020010
 8022bf4:	40020028 	.word	0x40020028
 8022bf8:	40020040 	.word	0x40020040
 8022bfc:	40020058 	.word	0x40020058
 8022c00:	40020070 	.word	0x40020070
 8022c04:	40020088 	.word	0x40020088
 8022c08:	400200a0 	.word	0x400200a0
 8022c0c:	400200b8 	.word	0x400200b8
 8022c10:	40020410 	.word	0x40020410
 8022c14:	40020428 	.word	0x40020428
 8022c18:	40020440 	.word	0x40020440
 8022c1c:	40020458 	.word	0x40020458
 8022c20:	40020470 	.word	0x40020470
 8022c24:	40020488 	.word	0x40020488
 8022c28:	400204a0 	.word	0x400204a0
 8022c2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8022c30:	687b      	ldr	r3, [r7, #4]
 8022c32:	681b      	ldr	r3, [r3, #0]
 8022c34:	681b      	ldr	r3, [r3, #0]
 8022c36:	f003 0301 	and.w	r3, r3, #1
 8022c3a:	2b00      	cmp	r3, #0
 8022c3c:	d1c8      	bne.n	8022bd0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8022c3e:	687b      	ldr	r3, [r7, #4]
 8022c40:	681b      	ldr	r3, [r3, #0]
 8022c42:	681b      	ldr	r3, [r3, #0]
 8022c44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8022c46:	697a      	ldr	r2, [r7, #20]
 8022c48:	4b83      	ldr	r3, [pc, #524]	; (8022e58 <HAL_DMA_Init+0x420>)
 8022c4a:	4013      	ands	r3, r2
 8022c4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8022c4e:	687b      	ldr	r3, [r7, #4]
 8022c50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022c52:	687b      	ldr	r3, [r7, #4]
 8022c54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8022c56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022c58:	687b      	ldr	r3, [r7, #4]
 8022c5a:	691b      	ldr	r3, [r3, #16]
 8022c5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022c5e:	687b      	ldr	r3, [r7, #4]
 8022c60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022c62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022c64:	687b      	ldr	r3, [r7, #4]
 8022c66:	699b      	ldr	r3, [r3, #24]
 8022c68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8022c6a:	687b      	ldr	r3, [r7, #4]
 8022c6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022c6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8022c70:	687b      	ldr	r3, [r7, #4]
 8022c72:	6a1b      	ldr	r3, [r3, #32]
 8022c74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8022c76:	697a      	ldr	r2, [r7, #20]
 8022c78:	4313      	orrs	r3, r2
 8022c7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8022c7c:	687b      	ldr	r3, [r7, #4]
 8022c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022c80:	2b04      	cmp	r3, #4
 8022c82:	d107      	bne.n	8022c94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8022c84:	687b      	ldr	r3, [r7, #4]
 8022c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022c88:	687b      	ldr	r3, [r7, #4]
 8022c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c8c:	4313      	orrs	r3, r2
 8022c8e:	697a      	ldr	r2, [r7, #20]
 8022c90:	4313      	orrs	r3, r2
 8022c92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8022c94:	4b71      	ldr	r3, [pc, #452]	; (8022e5c <HAL_DMA_Init+0x424>)
 8022c96:	681a      	ldr	r2, [r3, #0]
 8022c98:	4b71      	ldr	r3, [pc, #452]	; (8022e60 <HAL_DMA_Init+0x428>)
 8022c9a:	4013      	ands	r3, r2
 8022c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8022ca0:	d328      	bcc.n	8022cf4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8022ca2:	687b      	ldr	r3, [r7, #4]
 8022ca4:	685b      	ldr	r3, [r3, #4]
 8022ca6:	2b28      	cmp	r3, #40	; 0x28
 8022ca8:	d903      	bls.n	8022cb2 <HAL_DMA_Init+0x27a>
 8022caa:	687b      	ldr	r3, [r7, #4]
 8022cac:	685b      	ldr	r3, [r3, #4]
 8022cae:	2b2e      	cmp	r3, #46	; 0x2e
 8022cb0:	d917      	bls.n	8022ce2 <HAL_DMA_Init+0x2aa>
 8022cb2:	687b      	ldr	r3, [r7, #4]
 8022cb4:	685b      	ldr	r3, [r3, #4]
 8022cb6:	2b3e      	cmp	r3, #62	; 0x3e
 8022cb8:	d903      	bls.n	8022cc2 <HAL_DMA_Init+0x28a>
 8022cba:	687b      	ldr	r3, [r7, #4]
 8022cbc:	685b      	ldr	r3, [r3, #4]
 8022cbe:	2b42      	cmp	r3, #66	; 0x42
 8022cc0:	d90f      	bls.n	8022ce2 <HAL_DMA_Init+0x2aa>
 8022cc2:	687b      	ldr	r3, [r7, #4]
 8022cc4:	685b      	ldr	r3, [r3, #4]
 8022cc6:	2b46      	cmp	r3, #70	; 0x46
 8022cc8:	d903      	bls.n	8022cd2 <HAL_DMA_Init+0x29a>
 8022cca:	687b      	ldr	r3, [r7, #4]
 8022ccc:	685b      	ldr	r3, [r3, #4]
 8022cce:	2b48      	cmp	r3, #72	; 0x48
 8022cd0:	d907      	bls.n	8022ce2 <HAL_DMA_Init+0x2aa>
 8022cd2:	687b      	ldr	r3, [r7, #4]
 8022cd4:	685b      	ldr	r3, [r3, #4]
 8022cd6:	2b4e      	cmp	r3, #78	; 0x4e
 8022cd8:	d905      	bls.n	8022ce6 <HAL_DMA_Init+0x2ae>
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	685b      	ldr	r3, [r3, #4]
 8022cde:	2b52      	cmp	r3, #82	; 0x52
 8022ce0:	d801      	bhi.n	8022ce6 <HAL_DMA_Init+0x2ae>
 8022ce2:	2301      	movs	r3, #1
 8022ce4:	e000      	b.n	8022ce8 <HAL_DMA_Init+0x2b0>
 8022ce6:	2300      	movs	r3, #0
 8022ce8:	2b00      	cmp	r3, #0
 8022cea:	d003      	beq.n	8022cf4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8022cec:	697b      	ldr	r3, [r7, #20]
 8022cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022cf2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	681b      	ldr	r3, [r3, #0]
 8022cf8:	697a      	ldr	r2, [r7, #20]
 8022cfa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8022cfc:	687b      	ldr	r3, [r7, #4]
 8022cfe:	681b      	ldr	r3, [r3, #0]
 8022d00:	695b      	ldr	r3, [r3, #20]
 8022d02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8022d04:	697b      	ldr	r3, [r7, #20]
 8022d06:	f023 0307 	bic.w	r3, r3, #7
 8022d0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8022d0c:	687b      	ldr	r3, [r7, #4]
 8022d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d10:	697a      	ldr	r2, [r7, #20]
 8022d12:	4313      	orrs	r3, r2
 8022d14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8022d16:	687b      	ldr	r3, [r7, #4]
 8022d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d1a:	2b04      	cmp	r3, #4
 8022d1c:	d117      	bne.n	8022d4e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8022d1e:	687b      	ldr	r3, [r7, #4]
 8022d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022d22:	697a      	ldr	r2, [r7, #20]
 8022d24:	4313      	orrs	r3, r2
 8022d26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8022d28:	687b      	ldr	r3, [r7, #4]
 8022d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022d2c:	2b00      	cmp	r3, #0
 8022d2e:	d00e      	beq.n	8022d4e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8022d30:	6878      	ldr	r0, [r7, #4]
 8022d32:	f002 fb4d 	bl	80253d0 <DMA_CheckFifoParam>
 8022d36:	4603      	mov	r3, r0
 8022d38:	2b00      	cmp	r3, #0
 8022d3a:	d008      	beq.n	8022d4e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8022d3c:	687b      	ldr	r3, [r7, #4]
 8022d3e:	2240      	movs	r2, #64	; 0x40
 8022d40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8022d42:	687b      	ldr	r3, [r7, #4]
 8022d44:	2201      	movs	r2, #1
 8022d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8022d4a:	2301      	movs	r3, #1
 8022d4c:	e197      	b.n	802307e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8022d4e:	687b      	ldr	r3, [r7, #4]
 8022d50:	681b      	ldr	r3, [r3, #0]
 8022d52:	697a      	ldr	r2, [r7, #20]
 8022d54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8022d56:	6878      	ldr	r0, [r7, #4]
 8022d58:	f002 fa88 	bl	802526c <DMA_CalcBaseAndBitshift>
 8022d5c:	4603      	mov	r3, r0
 8022d5e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8022d60:	687b      	ldr	r3, [r7, #4]
 8022d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022d64:	f003 031f 	and.w	r3, r3, #31
 8022d68:	223f      	movs	r2, #63	; 0x3f
 8022d6a:	409a      	lsls	r2, r3
 8022d6c:	68bb      	ldr	r3, [r7, #8]
 8022d6e:	609a      	str	r2, [r3, #8]
 8022d70:	e0cd      	b.n	8022f0e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8022d72:	687b      	ldr	r3, [r7, #4]
 8022d74:	681b      	ldr	r3, [r3, #0]
 8022d76:	4a3b      	ldr	r2, [pc, #236]	; (8022e64 <HAL_DMA_Init+0x42c>)
 8022d78:	4293      	cmp	r3, r2
 8022d7a:	d022      	beq.n	8022dc2 <HAL_DMA_Init+0x38a>
 8022d7c:	687b      	ldr	r3, [r7, #4]
 8022d7e:	681b      	ldr	r3, [r3, #0]
 8022d80:	4a39      	ldr	r2, [pc, #228]	; (8022e68 <HAL_DMA_Init+0x430>)
 8022d82:	4293      	cmp	r3, r2
 8022d84:	d01d      	beq.n	8022dc2 <HAL_DMA_Init+0x38a>
 8022d86:	687b      	ldr	r3, [r7, #4]
 8022d88:	681b      	ldr	r3, [r3, #0]
 8022d8a:	4a38      	ldr	r2, [pc, #224]	; (8022e6c <HAL_DMA_Init+0x434>)
 8022d8c:	4293      	cmp	r3, r2
 8022d8e:	d018      	beq.n	8022dc2 <HAL_DMA_Init+0x38a>
 8022d90:	687b      	ldr	r3, [r7, #4]
 8022d92:	681b      	ldr	r3, [r3, #0]
 8022d94:	4a36      	ldr	r2, [pc, #216]	; (8022e70 <HAL_DMA_Init+0x438>)
 8022d96:	4293      	cmp	r3, r2
 8022d98:	d013      	beq.n	8022dc2 <HAL_DMA_Init+0x38a>
 8022d9a:	687b      	ldr	r3, [r7, #4]
 8022d9c:	681b      	ldr	r3, [r3, #0]
 8022d9e:	4a35      	ldr	r2, [pc, #212]	; (8022e74 <HAL_DMA_Init+0x43c>)
 8022da0:	4293      	cmp	r3, r2
 8022da2:	d00e      	beq.n	8022dc2 <HAL_DMA_Init+0x38a>
 8022da4:	687b      	ldr	r3, [r7, #4]
 8022da6:	681b      	ldr	r3, [r3, #0]
 8022da8:	4a33      	ldr	r2, [pc, #204]	; (8022e78 <HAL_DMA_Init+0x440>)
 8022daa:	4293      	cmp	r3, r2
 8022dac:	d009      	beq.n	8022dc2 <HAL_DMA_Init+0x38a>
 8022dae:	687b      	ldr	r3, [r7, #4]
 8022db0:	681b      	ldr	r3, [r3, #0]
 8022db2:	4a32      	ldr	r2, [pc, #200]	; (8022e7c <HAL_DMA_Init+0x444>)
 8022db4:	4293      	cmp	r3, r2
 8022db6:	d004      	beq.n	8022dc2 <HAL_DMA_Init+0x38a>
 8022db8:	687b      	ldr	r3, [r7, #4]
 8022dba:	681b      	ldr	r3, [r3, #0]
 8022dbc:	4a30      	ldr	r2, [pc, #192]	; (8022e80 <HAL_DMA_Init+0x448>)
 8022dbe:	4293      	cmp	r3, r2
 8022dc0:	d101      	bne.n	8022dc6 <HAL_DMA_Init+0x38e>
 8022dc2:	2301      	movs	r3, #1
 8022dc4:	e000      	b.n	8022dc8 <HAL_DMA_Init+0x390>
 8022dc6:	2300      	movs	r3, #0
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	f000 8097 	beq.w	8022efc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8022dce:	687b      	ldr	r3, [r7, #4]
 8022dd0:	681b      	ldr	r3, [r3, #0]
 8022dd2:	4a24      	ldr	r2, [pc, #144]	; (8022e64 <HAL_DMA_Init+0x42c>)
 8022dd4:	4293      	cmp	r3, r2
 8022dd6:	d021      	beq.n	8022e1c <HAL_DMA_Init+0x3e4>
 8022dd8:	687b      	ldr	r3, [r7, #4]
 8022dda:	681b      	ldr	r3, [r3, #0]
 8022ddc:	4a22      	ldr	r2, [pc, #136]	; (8022e68 <HAL_DMA_Init+0x430>)
 8022dde:	4293      	cmp	r3, r2
 8022de0:	d01c      	beq.n	8022e1c <HAL_DMA_Init+0x3e4>
 8022de2:	687b      	ldr	r3, [r7, #4]
 8022de4:	681b      	ldr	r3, [r3, #0]
 8022de6:	4a21      	ldr	r2, [pc, #132]	; (8022e6c <HAL_DMA_Init+0x434>)
 8022de8:	4293      	cmp	r3, r2
 8022dea:	d017      	beq.n	8022e1c <HAL_DMA_Init+0x3e4>
 8022dec:	687b      	ldr	r3, [r7, #4]
 8022dee:	681b      	ldr	r3, [r3, #0]
 8022df0:	4a1f      	ldr	r2, [pc, #124]	; (8022e70 <HAL_DMA_Init+0x438>)
 8022df2:	4293      	cmp	r3, r2
 8022df4:	d012      	beq.n	8022e1c <HAL_DMA_Init+0x3e4>
 8022df6:	687b      	ldr	r3, [r7, #4]
 8022df8:	681b      	ldr	r3, [r3, #0]
 8022dfa:	4a1e      	ldr	r2, [pc, #120]	; (8022e74 <HAL_DMA_Init+0x43c>)
 8022dfc:	4293      	cmp	r3, r2
 8022dfe:	d00d      	beq.n	8022e1c <HAL_DMA_Init+0x3e4>
 8022e00:	687b      	ldr	r3, [r7, #4]
 8022e02:	681b      	ldr	r3, [r3, #0]
 8022e04:	4a1c      	ldr	r2, [pc, #112]	; (8022e78 <HAL_DMA_Init+0x440>)
 8022e06:	4293      	cmp	r3, r2
 8022e08:	d008      	beq.n	8022e1c <HAL_DMA_Init+0x3e4>
 8022e0a:	687b      	ldr	r3, [r7, #4]
 8022e0c:	681b      	ldr	r3, [r3, #0]
 8022e0e:	4a1b      	ldr	r2, [pc, #108]	; (8022e7c <HAL_DMA_Init+0x444>)
 8022e10:	4293      	cmp	r3, r2
 8022e12:	d003      	beq.n	8022e1c <HAL_DMA_Init+0x3e4>
 8022e14:	687b      	ldr	r3, [r7, #4]
 8022e16:	681b      	ldr	r3, [r3, #0]
 8022e18:	4a19      	ldr	r2, [pc, #100]	; (8022e80 <HAL_DMA_Init+0x448>)
 8022e1a:	4293      	cmp	r3, r2
 8022e1c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8022e1e:	687b      	ldr	r3, [r7, #4]
 8022e20:	2202      	movs	r2, #2
 8022e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8022e26:	687b      	ldr	r3, [r7, #4]
 8022e28:	2200      	movs	r2, #0
 8022e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8022e2e:	687b      	ldr	r3, [r7, #4]
 8022e30:	681b      	ldr	r3, [r3, #0]
 8022e32:	681b      	ldr	r3, [r3, #0]
 8022e34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8022e36:	697a      	ldr	r2, [r7, #20]
 8022e38:	4b12      	ldr	r3, [pc, #72]	; (8022e84 <HAL_DMA_Init+0x44c>)
 8022e3a:	4013      	ands	r3, r2
 8022e3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8022e3e:	687b      	ldr	r3, [r7, #4]
 8022e40:	689b      	ldr	r3, [r3, #8]
 8022e42:	2b40      	cmp	r3, #64	; 0x40
 8022e44:	d020      	beq.n	8022e88 <HAL_DMA_Init+0x450>
 8022e46:	687b      	ldr	r3, [r7, #4]
 8022e48:	689b      	ldr	r3, [r3, #8]
 8022e4a:	2b80      	cmp	r3, #128	; 0x80
 8022e4c:	d102      	bne.n	8022e54 <HAL_DMA_Init+0x41c>
 8022e4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8022e52:	e01a      	b.n	8022e8a <HAL_DMA_Init+0x452>
 8022e54:	2300      	movs	r3, #0
 8022e56:	e018      	b.n	8022e8a <HAL_DMA_Init+0x452>
 8022e58:	fe10803f 	.word	0xfe10803f
 8022e5c:	5c001000 	.word	0x5c001000
 8022e60:	ffff0000 	.word	0xffff0000
 8022e64:	58025408 	.word	0x58025408
 8022e68:	5802541c 	.word	0x5802541c
 8022e6c:	58025430 	.word	0x58025430
 8022e70:	58025444 	.word	0x58025444
 8022e74:	58025458 	.word	0x58025458
 8022e78:	5802546c 	.word	0x5802546c
 8022e7c:	58025480 	.word	0x58025480
 8022e80:	58025494 	.word	0x58025494
 8022e84:	fffe000f 	.word	0xfffe000f
 8022e88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8022e8a:	687a      	ldr	r2, [r7, #4]
 8022e8c:	68d2      	ldr	r2, [r2, #12]
 8022e8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8022e90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8022e92:	687b      	ldr	r3, [r7, #4]
 8022e94:	691b      	ldr	r3, [r3, #16]
 8022e96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8022e98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8022e9a:	687b      	ldr	r3, [r7, #4]
 8022e9c:	695b      	ldr	r3, [r3, #20]
 8022e9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8022ea0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8022ea2:	687b      	ldr	r3, [r7, #4]
 8022ea4:	699b      	ldr	r3, [r3, #24]
 8022ea6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8022ea8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8022eaa:	687b      	ldr	r3, [r7, #4]
 8022eac:	69db      	ldr	r3, [r3, #28]
 8022eae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8022eb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8022eb2:	687b      	ldr	r3, [r7, #4]
 8022eb4:	6a1b      	ldr	r3, [r3, #32]
 8022eb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8022eb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8022eba:	697a      	ldr	r2, [r7, #20]
 8022ebc:	4313      	orrs	r3, r2
 8022ebe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8022ec0:	687b      	ldr	r3, [r7, #4]
 8022ec2:	681b      	ldr	r3, [r3, #0]
 8022ec4:	697a      	ldr	r2, [r7, #20]
 8022ec6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8022ec8:	687b      	ldr	r3, [r7, #4]
 8022eca:	681b      	ldr	r3, [r3, #0]
 8022ecc:	461a      	mov	r2, r3
 8022ece:	4b6e      	ldr	r3, [pc, #440]	; (8023088 <HAL_DMA_Init+0x650>)
 8022ed0:	4413      	add	r3, r2
 8022ed2:	4a6e      	ldr	r2, [pc, #440]	; (802308c <HAL_DMA_Init+0x654>)
 8022ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8022ed8:	091b      	lsrs	r3, r3, #4
 8022eda:	009a      	lsls	r2, r3, #2
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8022ee0:	6878      	ldr	r0, [r7, #4]
 8022ee2:	f002 f9c3 	bl	802526c <DMA_CalcBaseAndBitshift>
 8022ee6:	4603      	mov	r3, r0
 8022ee8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8022eea:	687b      	ldr	r3, [r7, #4]
 8022eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022eee:	f003 031f 	and.w	r3, r3, #31
 8022ef2:	2201      	movs	r2, #1
 8022ef4:	409a      	lsls	r2, r3
 8022ef6:	68fb      	ldr	r3, [r7, #12]
 8022ef8:	605a      	str	r2, [r3, #4]
 8022efa:	e008      	b.n	8022f0e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8022efc:	687b      	ldr	r3, [r7, #4]
 8022efe:	2240      	movs	r2, #64	; 0x40
 8022f00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8022f02:	687b      	ldr	r3, [r7, #4]
 8022f04:	2203      	movs	r2, #3
 8022f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8022f0a:	2301      	movs	r3, #1
 8022f0c:	e0b7      	b.n	802307e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8022f0e:	687b      	ldr	r3, [r7, #4]
 8022f10:	681b      	ldr	r3, [r3, #0]
 8022f12:	4a5f      	ldr	r2, [pc, #380]	; (8023090 <HAL_DMA_Init+0x658>)
 8022f14:	4293      	cmp	r3, r2
 8022f16:	d072      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f18:	687b      	ldr	r3, [r7, #4]
 8022f1a:	681b      	ldr	r3, [r3, #0]
 8022f1c:	4a5d      	ldr	r2, [pc, #372]	; (8023094 <HAL_DMA_Init+0x65c>)
 8022f1e:	4293      	cmp	r3, r2
 8022f20:	d06d      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f22:	687b      	ldr	r3, [r7, #4]
 8022f24:	681b      	ldr	r3, [r3, #0]
 8022f26:	4a5c      	ldr	r2, [pc, #368]	; (8023098 <HAL_DMA_Init+0x660>)
 8022f28:	4293      	cmp	r3, r2
 8022f2a:	d068      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	681b      	ldr	r3, [r3, #0]
 8022f30:	4a5a      	ldr	r2, [pc, #360]	; (802309c <HAL_DMA_Init+0x664>)
 8022f32:	4293      	cmp	r3, r2
 8022f34:	d063      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f36:	687b      	ldr	r3, [r7, #4]
 8022f38:	681b      	ldr	r3, [r3, #0]
 8022f3a:	4a59      	ldr	r2, [pc, #356]	; (80230a0 <HAL_DMA_Init+0x668>)
 8022f3c:	4293      	cmp	r3, r2
 8022f3e:	d05e      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f40:	687b      	ldr	r3, [r7, #4]
 8022f42:	681b      	ldr	r3, [r3, #0]
 8022f44:	4a57      	ldr	r2, [pc, #348]	; (80230a4 <HAL_DMA_Init+0x66c>)
 8022f46:	4293      	cmp	r3, r2
 8022f48:	d059      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f4a:	687b      	ldr	r3, [r7, #4]
 8022f4c:	681b      	ldr	r3, [r3, #0]
 8022f4e:	4a56      	ldr	r2, [pc, #344]	; (80230a8 <HAL_DMA_Init+0x670>)
 8022f50:	4293      	cmp	r3, r2
 8022f52:	d054      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f54:	687b      	ldr	r3, [r7, #4]
 8022f56:	681b      	ldr	r3, [r3, #0]
 8022f58:	4a54      	ldr	r2, [pc, #336]	; (80230ac <HAL_DMA_Init+0x674>)
 8022f5a:	4293      	cmp	r3, r2
 8022f5c:	d04f      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f5e:	687b      	ldr	r3, [r7, #4]
 8022f60:	681b      	ldr	r3, [r3, #0]
 8022f62:	4a53      	ldr	r2, [pc, #332]	; (80230b0 <HAL_DMA_Init+0x678>)
 8022f64:	4293      	cmp	r3, r2
 8022f66:	d04a      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f68:	687b      	ldr	r3, [r7, #4]
 8022f6a:	681b      	ldr	r3, [r3, #0]
 8022f6c:	4a51      	ldr	r2, [pc, #324]	; (80230b4 <HAL_DMA_Init+0x67c>)
 8022f6e:	4293      	cmp	r3, r2
 8022f70:	d045      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f72:	687b      	ldr	r3, [r7, #4]
 8022f74:	681b      	ldr	r3, [r3, #0]
 8022f76:	4a50      	ldr	r2, [pc, #320]	; (80230b8 <HAL_DMA_Init+0x680>)
 8022f78:	4293      	cmp	r3, r2
 8022f7a:	d040      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f7c:	687b      	ldr	r3, [r7, #4]
 8022f7e:	681b      	ldr	r3, [r3, #0]
 8022f80:	4a4e      	ldr	r2, [pc, #312]	; (80230bc <HAL_DMA_Init+0x684>)
 8022f82:	4293      	cmp	r3, r2
 8022f84:	d03b      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f86:	687b      	ldr	r3, [r7, #4]
 8022f88:	681b      	ldr	r3, [r3, #0]
 8022f8a:	4a4d      	ldr	r2, [pc, #308]	; (80230c0 <HAL_DMA_Init+0x688>)
 8022f8c:	4293      	cmp	r3, r2
 8022f8e:	d036      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f90:	687b      	ldr	r3, [r7, #4]
 8022f92:	681b      	ldr	r3, [r3, #0]
 8022f94:	4a4b      	ldr	r2, [pc, #300]	; (80230c4 <HAL_DMA_Init+0x68c>)
 8022f96:	4293      	cmp	r3, r2
 8022f98:	d031      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022f9a:	687b      	ldr	r3, [r7, #4]
 8022f9c:	681b      	ldr	r3, [r3, #0]
 8022f9e:	4a4a      	ldr	r2, [pc, #296]	; (80230c8 <HAL_DMA_Init+0x690>)
 8022fa0:	4293      	cmp	r3, r2
 8022fa2:	d02c      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022fa4:	687b      	ldr	r3, [r7, #4]
 8022fa6:	681b      	ldr	r3, [r3, #0]
 8022fa8:	4a48      	ldr	r2, [pc, #288]	; (80230cc <HAL_DMA_Init+0x694>)
 8022faa:	4293      	cmp	r3, r2
 8022fac:	d027      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022fae:	687b      	ldr	r3, [r7, #4]
 8022fb0:	681b      	ldr	r3, [r3, #0]
 8022fb2:	4a47      	ldr	r2, [pc, #284]	; (80230d0 <HAL_DMA_Init+0x698>)
 8022fb4:	4293      	cmp	r3, r2
 8022fb6:	d022      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022fb8:	687b      	ldr	r3, [r7, #4]
 8022fba:	681b      	ldr	r3, [r3, #0]
 8022fbc:	4a45      	ldr	r2, [pc, #276]	; (80230d4 <HAL_DMA_Init+0x69c>)
 8022fbe:	4293      	cmp	r3, r2
 8022fc0:	d01d      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022fc2:	687b      	ldr	r3, [r7, #4]
 8022fc4:	681b      	ldr	r3, [r3, #0]
 8022fc6:	4a44      	ldr	r2, [pc, #272]	; (80230d8 <HAL_DMA_Init+0x6a0>)
 8022fc8:	4293      	cmp	r3, r2
 8022fca:	d018      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022fcc:	687b      	ldr	r3, [r7, #4]
 8022fce:	681b      	ldr	r3, [r3, #0]
 8022fd0:	4a42      	ldr	r2, [pc, #264]	; (80230dc <HAL_DMA_Init+0x6a4>)
 8022fd2:	4293      	cmp	r3, r2
 8022fd4:	d013      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022fd6:	687b      	ldr	r3, [r7, #4]
 8022fd8:	681b      	ldr	r3, [r3, #0]
 8022fda:	4a41      	ldr	r2, [pc, #260]	; (80230e0 <HAL_DMA_Init+0x6a8>)
 8022fdc:	4293      	cmp	r3, r2
 8022fde:	d00e      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022fe0:	687b      	ldr	r3, [r7, #4]
 8022fe2:	681b      	ldr	r3, [r3, #0]
 8022fe4:	4a3f      	ldr	r2, [pc, #252]	; (80230e4 <HAL_DMA_Init+0x6ac>)
 8022fe6:	4293      	cmp	r3, r2
 8022fe8:	d009      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022fea:	687b      	ldr	r3, [r7, #4]
 8022fec:	681b      	ldr	r3, [r3, #0]
 8022fee:	4a3e      	ldr	r2, [pc, #248]	; (80230e8 <HAL_DMA_Init+0x6b0>)
 8022ff0:	4293      	cmp	r3, r2
 8022ff2:	d004      	beq.n	8022ffe <HAL_DMA_Init+0x5c6>
 8022ff4:	687b      	ldr	r3, [r7, #4]
 8022ff6:	681b      	ldr	r3, [r3, #0]
 8022ff8:	4a3c      	ldr	r2, [pc, #240]	; (80230ec <HAL_DMA_Init+0x6b4>)
 8022ffa:	4293      	cmp	r3, r2
 8022ffc:	d101      	bne.n	8023002 <HAL_DMA_Init+0x5ca>
 8022ffe:	2301      	movs	r3, #1
 8023000:	e000      	b.n	8023004 <HAL_DMA_Init+0x5cc>
 8023002:	2300      	movs	r3, #0
 8023004:	2b00      	cmp	r3, #0
 8023006:	d032      	beq.n	802306e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8023008:	6878      	ldr	r0, [r7, #4]
 802300a:	f002 fa5d 	bl	80254c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 802300e:	687b      	ldr	r3, [r7, #4]
 8023010:	689b      	ldr	r3, [r3, #8]
 8023012:	2b80      	cmp	r3, #128	; 0x80
 8023014:	d102      	bne.n	802301c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8023016:	687b      	ldr	r3, [r7, #4]
 8023018:	2200      	movs	r2, #0
 802301a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 802301c:	687b      	ldr	r3, [r7, #4]
 802301e:	685a      	ldr	r2, [r3, #4]
 8023020:	687b      	ldr	r3, [r7, #4]
 8023022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023024:	b2d2      	uxtb	r2, r2
 8023026:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8023028:	687b      	ldr	r3, [r7, #4]
 802302a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802302c:	687a      	ldr	r2, [r7, #4]
 802302e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023030:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8023032:	687b      	ldr	r3, [r7, #4]
 8023034:	685b      	ldr	r3, [r3, #4]
 8023036:	2b00      	cmp	r3, #0
 8023038:	d010      	beq.n	802305c <HAL_DMA_Init+0x624>
 802303a:	687b      	ldr	r3, [r7, #4]
 802303c:	685b      	ldr	r3, [r3, #4]
 802303e:	2b08      	cmp	r3, #8
 8023040:	d80c      	bhi.n	802305c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8023042:	6878      	ldr	r0, [r7, #4]
 8023044:	f002 fada 	bl	80255fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8023048:	687b      	ldr	r3, [r7, #4]
 802304a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802304c:	2200      	movs	r2, #0
 802304e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8023050:	687b      	ldr	r3, [r7, #4]
 8023052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023054:	687a      	ldr	r2, [r7, #4]
 8023056:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8023058:	605a      	str	r2, [r3, #4]
 802305a:	e008      	b.n	802306e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 802305c:	687b      	ldr	r3, [r7, #4]
 802305e:	2200      	movs	r2, #0
 8023060:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8023062:	687b      	ldr	r3, [r7, #4]
 8023064:	2200      	movs	r2, #0
 8023066:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8023068:	687b      	ldr	r3, [r7, #4]
 802306a:	2200      	movs	r2, #0
 802306c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	2200      	movs	r2, #0
 8023072:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8023074:	687b      	ldr	r3, [r7, #4]
 8023076:	2201      	movs	r2, #1
 8023078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802307c:	2300      	movs	r3, #0
}
 802307e:	4618      	mov	r0, r3
 8023080:	3718      	adds	r7, #24
 8023082:	46bd      	mov	sp, r7
 8023084:	bd80      	pop	{r7, pc}
 8023086:	bf00      	nop
 8023088:	a7fdabf8 	.word	0xa7fdabf8
 802308c:	cccccccd 	.word	0xcccccccd
 8023090:	40020010 	.word	0x40020010
 8023094:	40020028 	.word	0x40020028
 8023098:	40020040 	.word	0x40020040
 802309c:	40020058 	.word	0x40020058
 80230a0:	40020070 	.word	0x40020070
 80230a4:	40020088 	.word	0x40020088
 80230a8:	400200a0 	.word	0x400200a0
 80230ac:	400200b8 	.word	0x400200b8
 80230b0:	40020410 	.word	0x40020410
 80230b4:	40020428 	.word	0x40020428
 80230b8:	40020440 	.word	0x40020440
 80230bc:	40020458 	.word	0x40020458
 80230c0:	40020470 	.word	0x40020470
 80230c4:	40020488 	.word	0x40020488
 80230c8:	400204a0 	.word	0x400204a0
 80230cc:	400204b8 	.word	0x400204b8
 80230d0:	58025408 	.word	0x58025408
 80230d4:	5802541c 	.word	0x5802541c
 80230d8:	58025430 	.word	0x58025430
 80230dc:	58025444 	.word	0x58025444
 80230e0:	58025458 	.word	0x58025458
 80230e4:	5802546c 	.word	0x5802546c
 80230e8:	58025480 	.word	0x58025480
 80230ec:	58025494 	.word	0x58025494

080230f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80230f0:	b580      	push	{r7, lr}
 80230f2:	b086      	sub	sp, #24
 80230f4:	af00      	add	r7, sp, #0
 80230f6:	60f8      	str	r0, [r7, #12]
 80230f8:	60b9      	str	r1, [r7, #8]
 80230fa:	607a      	str	r2, [r7, #4]
 80230fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80230fe:	2300      	movs	r3, #0
 8023100:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8023102:	68fb      	ldr	r3, [r7, #12]
 8023104:	2b00      	cmp	r3, #0
 8023106:	d101      	bne.n	802310c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8023108:	2301      	movs	r3, #1
 802310a:	e226      	b.n	802355a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 802310c:	68fb      	ldr	r3, [r7, #12]
 802310e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8023112:	2b01      	cmp	r3, #1
 8023114:	d101      	bne.n	802311a <HAL_DMA_Start_IT+0x2a>
 8023116:	2302      	movs	r3, #2
 8023118:	e21f      	b.n	802355a <HAL_DMA_Start_IT+0x46a>
 802311a:	68fb      	ldr	r3, [r7, #12]
 802311c:	2201      	movs	r2, #1
 802311e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8023122:	68fb      	ldr	r3, [r7, #12]
 8023124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023128:	b2db      	uxtb	r3, r3
 802312a:	2b01      	cmp	r3, #1
 802312c:	f040 820a 	bne.w	8023544 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8023130:	68fb      	ldr	r3, [r7, #12]
 8023132:	2202      	movs	r2, #2
 8023134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023138:	68fb      	ldr	r3, [r7, #12]
 802313a:	2200      	movs	r2, #0
 802313c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802313e:	68fb      	ldr	r3, [r7, #12]
 8023140:	681b      	ldr	r3, [r3, #0]
 8023142:	4a68      	ldr	r2, [pc, #416]	; (80232e4 <HAL_DMA_Start_IT+0x1f4>)
 8023144:	4293      	cmp	r3, r2
 8023146:	d04a      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 8023148:	68fb      	ldr	r3, [r7, #12]
 802314a:	681b      	ldr	r3, [r3, #0]
 802314c:	4a66      	ldr	r2, [pc, #408]	; (80232e8 <HAL_DMA_Start_IT+0x1f8>)
 802314e:	4293      	cmp	r3, r2
 8023150:	d045      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 8023152:	68fb      	ldr	r3, [r7, #12]
 8023154:	681b      	ldr	r3, [r3, #0]
 8023156:	4a65      	ldr	r2, [pc, #404]	; (80232ec <HAL_DMA_Start_IT+0x1fc>)
 8023158:	4293      	cmp	r3, r2
 802315a:	d040      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 802315c:	68fb      	ldr	r3, [r7, #12]
 802315e:	681b      	ldr	r3, [r3, #0]
 8023160:	4a63      	ldr	r2, [pc, #396]	; (80232f0 <HAL_DMA_Start_IT+0x200>)
 8023162:	4293      	cmp	r3, r2
 8023164:	d03b      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 8023166:	68fb      	ldr	r3, [r7, #12]
 8023168:	681b      	ldr	r3, [r3, #0]
 802316a:	4a62      	ldr	r2, [pc, #392]	; (80232f4 <HAL_DMA_Start_IT+0x204>)
 802316c:	4293      	cmp	r3, r2
 802316e:	d036      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 8023170:	68fb      	ldr	r3, [r7, #12]
 8023172:	681b      	ldr	r3, [r3, #0]
 8023174:	4a60      	ldr	r2, [pc, #384]	; (80232f8 <HAL_DMA_Start_IT+0x208>)
 8023176:	4293      	cmp	r3, r2
 8023178:	d031      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 802317a:	68fb      	ldr	r3, [r7, #12]
 802317c:	681b      	ldr	r3, [r3, #0]
 802317e:	4a5f      	ldr	r2, [pc, #380]	; (80232fc <HAL_DMA_Start_IT+0x20c>)
 8023180:	4293      	cmp	r3, r2
 8023182:	d02c      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 8023184:	68fb      	ldr	r3, [r7, #12]
 8023186:	681b      	ldr	r3, [r3, #0]
 8023188:	4a5d      	ldr	r2, [pc, #372]	; (8023300 <HAL_DMA_Start_IT+0x210>)
 802318a:	4293      	cmp	r3, r2
 802318c:	d027      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 802318e:	68fb      	ldr	r3, [r7, #12]
 8023190:	681b      	ldr	r3, [r3, #0]
 8023192:	4a5c      	ldr	r2, [pc, #368]	; (8023304 <HAL_DMA_Start_IT+0x214>)
 8023194:	4293      	cmp	r3, r2
 8023196:	d022      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 8023198:	68fb      	ldr	r3, [r7, #12]
 802319a:	681b      	ldr	r3, [r3, #0]
 802319c:	4a5a      	ldr	r2, [pc, #360]	; (8023308 <HAL_DMA_Start_IT+0x218>)
 802319e:	4293      	cmp	r3, r2
 80231a0:	d01d      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 80231a2:	68fb      	ldr	r3, [r7, #12]
 80231a4:	681b      	ldr	r3, [r3, #0]
 80231a6:	4a59      	ldr	r2, [pc, #356]	; (802330c <HAL_DMA_Start_IT+0x21c>)
 80231a8:	4293      	cmp	r3, r2
 80231aa:	d018      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 80231ac:	68fb      	ldr	r3, [r7, #12]
 80231ae:	681b      	ldr	r3, [r3, #0]
 80231b0:	4a57      	ldr	r2, [pc, #348]	; (8023310 <HAL_DMA_Start_IT+0x220>)
 80231b2:	4293      	cmp	r3, r2
 80231b4:	d013      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 80231b6:	68fb      	ldr	r3, [r7, #12]
 80231b8:	681b      	ldr	r3, [r3, #0]
 80231ba:	4a56      	ldr	r2, [pc, #344]	; (8023314 <HAL_DMA_Start_IT+0x224>)
 80231bc:	4293      	cmp	r3, r2
 80231be:	d00e      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 80231c0:	68fb      	ldr	r3, [r7, #12]
 80231c2:	681b      	ldr	r3, [r3, #0]
 80231c4:	4a54      	ldr	r2, [pc, #336]	; (8023318 <HAL_DMA_Start_IT+0x228>)
 80231c6:	4293      	cmp	r3, r2
 80231c8:	d009      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 80231ca:	68fb      	ldr	r3, [r7, #12]
 80231cc:	681b      	ldr	r3, [r3, #0]
 80231ce:	4a53      	ldr	r2, [pc, #332]	; (802331c <HAL_DMA_Start_IT+0x22c>)
 80231d0:	4293      	cmp	r3, r2
 80231d2:	d004      	beq.n	80231de <HAL_DMA_Start_IT+0xee>
 80231d4:	68fb      	ldr	r3, [r7, #12]
 80231d6:	681b      	ldr	r3, [r3, #0]
 80231d8:	4a51      	ldr	r2, [pc, #324]	; (8023320 <HAL_DMA_Start_IT+0x230>)
 80231da:	4293      	cmp	r3, r2
 80231dc:	d108      	bne.n	80231f0 <HAL_DMA_Start_IT+0x100>
 80231de:	68fb      	ldr	r3, [r7, #12]
 80231e0:	681b      	ldr	r3, [r3, #0]
 80231e2:	681a      	ldr	r2, [r3, #0]
 80231e4:	68fb      	ldr	r3, [r7, #12]
 80231e6:	681b      	ldr	r3, [r3, #0]
 80231e8:	f022 0201 	bic.w	r2, r2, #1
 80231ec:	601a      	str	r2, [r3, #0]
 80231ee:	e007      	b.n	8023200 <HAL_DMA_Start_IT+0x110>
 80231f0:	68fb      	ldr	r3, [r7, #12]
 80231f2:	681b      	ldr	r3, [r3, #0]
 80231f4:	681a      	ldr	r2, [r3, #0]
 80231f6:	68fb      	ldr	r3, [r7, #12]
 80231f8:	681b      	ldr	r3, [r3, #0]
 80231fa:	f022 0201 	bic.w	r2, r2, #1
 80231fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8023200:	683b      	ldr	r3, [r7, #0]
 8023202:	687a      	ldr	r2, [r7, #4]
 8023204:	68b9      	ldr	r1, [r7, #8]
 8023206:	68f8      	ldr	r0, [r7, #12]
 8023208:	f001 fe84 	bl	8024f14 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802320c:	68fb      	ldr	r3, [r7, #12]
 802320e:	681b      	ldr	r3, [r3, #0]
 8023210:	4a34      	ldr	r2, [pc, #208]	; (80232e4 <HAL_DMA_Start_IT+0x1f4>)
 8023212:	4293      	cmp	r3, r2
 8023214:	d04a      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 8023216:	68fb      	ldr	r3, [r7, #12]
 8023218:	681b      	ldr	r3, [r3, #0]
 802321a:	4a33      	ldr	r2, [pc, #204]	; (80232e8 <HAL_DMA_Start_IT+0x1f8>)
 802321c:	4293      	cmp	r3, r2
 802321e:	d045      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 8023220:	68fb      	ldr	r3, [r7, #12]
 8023222:	681b      	ldr	r3, [r3, #0]
 8023224:	4a31      	ldr	r2, [pc, #196]	; (80232ec <HAL_DMA_Start_IT+0x1fc>)
 8023226:	4293      	cmp	r3, r2
 8023228:	d040      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 802322a:	68fb      	ldr	r3, [r7, #12]
 802322c:	681b      	ldr	r3, [r3, #0]
 802322e:	4a30      	ldr	r2, [pc, #192]	; (80232f0 <HAL_DMA_Start_IT+0x200>)
 8023230:	4293      	cmp	r3, r2
 8023232:	d03b      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 8023234:	68fb      	ldr	r3, [r7, #12]
 8023236:	681b      	ldr	r3, [r3, #0]
 8023238:	4a2e      	ldr	r2, [pc, #184]	; (80232f4 <HAL_DMA_Start_IT+0x204>)
 802323a:	4293      	cmp	r3, r2
 802323c:	d036      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 802323e:	68fb      	ldr	r3, [r7, #12]
 8023240:	681b      	ldr	r3, [r3, #0]
 8023242:	4a2d      	ldr	r2, [pc, #180]	; (80232f8 <HAL_DMA_Start_IT+0x208>)
 8023244:	4293      	cmp	r3, r2
 8023246:	d031      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 8023248:	68fb      	ldr	r3, [r7, #12]
 802324a:	681b      	ldr	r3, [r3, #0]
 802324c:	4a2b      	ldr	r2, [pc, #172]	; (80232fc <HAL_DMA_Start_IT+0x20c>)
 802324e:	4293      	cmp	r3, r2
 8023250:	d02c      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 8023252:	68fb      	ldr	r3, [r7, #12]
 8023254:	681b      	ldr	r3, [r3, #0]
 8023256:	4a2a      	ldr	r2, [pc, #168]	; (8023300 <HAL_DMA_Start_IT+0x210>)
 8023258:	4293      	cmp	r3, r2
 802325a:	d027      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 802325c:	68fb      	ldr	r3, [r7, #12]
 802325e:	681b      	ldr	r3, [r3, #0]
 8023260:	4a28      	ldr	r2, [pc, #160]	; (8023304 <HAL_DMA_Start_IT+0x214>)
 8023262:	4293      	cmp	r3, r2
 8023264:	d022      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 8023266:	68fb      	ldr	r3, [r7, #12]
 8023268:	681b      	ldr	r3, [r3, #0]
 802326a:	4a27      	ldr	r2, [pc, #156]	; (8023308 <HAL_DMA_Start_IT+0x218>)
 802326c:	4293      	cmp	r3, r2
 802326e:	d01d      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 8023270:	68fb      	ldr	r3, [r7, #12]
 8023272:	681b      	ldr	r3, [r3, #0]
 8023274:	4a25      	ldr	r2, [pc, #148]	; (802330c <HAL_DMA_Start_IT+0x21c>)
 8023276:	4293      	cmp	r3, r2
 8023278:	d018      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 802327a:	68fb      	ldr	r3, [r7, #12]
 802327c:	681b      	ldr	r3, [r3, #0]
 802327e:	4a24      	ldr	r2, [pc, #144]	; (8023310 <HAL_DMA_Start_IT+0x220>)
 8023280:	4293      	cmp	r3, r2
 8023282:	d013      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 8023284:	68fb      	ldr	r3, [r7, #12]
 8023286:	681b      	ldr	r3, [r3, #0]
 8023288:	4a22      	ldr	r2, [pc, #136]	; (8023314 <HAL_DMA_Start_IT+0x224>)
 802328a:	4293      	cmp	r3, r2
 802328c:	d00e      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 802328e:	68fb      	ldr	r3, [r7, #12]
 8023290:	681b      	ldr	r3, [r3, #0]
 8023292:	4a21      	ldr	r2, [pc, #132]	; (8023318 <HAL_DMA_Start_IT+0x228>)
 8023294:	4293      	cmp	r3, r2
 8023296:	d009      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 8023298:	68fb      	ldr	r3, [r7, #12]
 802329a:	681b      	ldr	r3, [r3, #0]
 802329c:	4a1f      	ldr	r2, [pc, #124]	; (802331c <HAL_DMA_Start_IT+0x22c>)
 802329e:	4293      	cmp	r3, r2
 80232a0:	d004      	beq.n	80232ac <HAL_DMA_Start_IT+0x1bc>
 80232a2:	68fb      	ldr	r3, [r7, #12]
 80232a4:	681b      	ldr	r3, [r3, #0]
 80232a6:	4a1e      	ldr	r2, [pc, #120]	; (8023320 <HAL_DMA_Start_IT+0x230>)
 80232a8:	4293      	cmp	r3, r2
 80232aa:	d101      	bne.n	80232b0 <HAL_DMA_Start_IT+0x1c0>
 80232ac:	2301      	movs	r3, #1
 80232ae:	e000      	b.n	80232b2 <HAL_DMA_Start_IT+0x1c2>
 80232b0:	2300      	movs	r3, #0
 80232b2:	2b00      	cmp	r3, #0
 80232b4:	d036      	beq.n	8023324 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80232b6:	68fb      	ldr	r3, [r7, #12]
 80232b8:	681b      	ldr	r3, [r3, #0]
 80232ba:	681b      	ldr	r3, [r3, #0]
 80232bc:	f023 021e 	bic.w	r2, r3, #30
 80232c0:	68fb      	ldr	r3, [r7, #12]
 80232c2:	681b      	ldr	r3, [r3, #0]
 80232c4:	f042 0216 	orr.w	r2, r2, #22
 80232c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80232ca:	68fb      	ldr	r3, [r7, #12]
 80232cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80232ce:	2b00      	cmp	r3, #0
 80232d0:	d03e      	beq.n	8023350 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80232d2:	68fb      	ldr	r3, [r7, #12]
 80232d4:	681b      	ldr	r3, [r3, #0]
 80232d6:	681a      	ldr	r2, [r3, #0]
 80232d8:	68fb      	ldr	r3, [r7, #12]
 80232da:	681b      	ldr	r3, [r3, #0]
 80232dc:	f042 0208 	orr.w	r2, r2, #8
 80232e0:	601a      	str	r2, [r3, #0]
 80232e2:	e035      	b.n	8023350 <HAL_DMA_Start_IT+0x260>
 80232e4:	40020010 	.word	0x40020010
 80232e8:	40020028 	.word	0x40020028
 80232ec:	40020040 	.word	0x40020040
 80232f0:	40020058 	.word	0x40020058
 80232f4:	40020070 	.word	0x40020070
 80232f8:	40020088 	.word	0x40020088
 80232fc:	400200a0 	.word	0x400200a0
 8023300:	400200b8 	.word	0x400200b8
 8023304:	40020410 	.word	0x40020410
 8023308:	40020428 	.word	0x40020428
 802330c:	40020440 	.word	0x40020440
 8023310:	40020458 	.word	0x40020458
 8023314:	40020470 	.word	0x40020470
 8023318:	40020488 	.word	0x40020488
 802331c:	400204a0 	.word	0x400204a0
 8023320:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8023324:	68fb      	ldr	r3, [r7, #12]
 8023326:	681b      	ldr	r3, [r3, #0]
 8023328:	681b      	ldr	r3, [r3, #0]
 802332a:	f023 020e 	bic.w	r2, r3, #14
 802332e:	68fb      	ldr	r3, [r7, #12]
 8023330:	681b      	ldr	r3, [r3, #0]
 8023332:	f042 020a 	orr.w	r2, r2, #10
 8023336:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8023338:	68fb      	ldr	r3, [r7, #12]
 802333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802333c:	2b00      	cmp	r3, #0
 802333e:	d007      	beq.n	8023350 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8023340:	68fb      	ldr	r3, [r7, #12]
 8023342:	681b      	ldr	r3, [r3, #0]
 8023344:	681a      	ldr	r2, [r3, #0]
 8023346:	68fb      	ldr	r3, [r7, #12]
 8023348:	681b      	ldr	r3, [r3, #0]
 802334a:	f042 0204 	orr.w	r2, r2, #4
 802334e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8023350:	68fb      	ldr	r3, [r7, #12]
 8023352:	681b      	ldr	r3, [r3, #0]
 8023354:	4a83      	ldr	r2, [pc, #524]	; (8023564 <HAL_DMA_Start_IT+0x474>)
 8023356:	4293      	cmp	r3, r2
 8023358:	d072      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 802335a:	68fb      	ldr	r3, [r7, #12]
 802335c:	681b      	ldr	r3, [r3, #0]
 802335e:	4a82      	ldr	r2, [pc, #520]	; (8023568 <HAL_DMA_Start_IT+0x478>)
 8023360:	4293      	cmp	r3, r2
 8023362:	d06d      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 8023364:	68fb      	ldr	r3, [r7, #12]
 8023366:	681b      	ldr	r3, [r3, #0]
 8023368:	4a80      	ldr	r2, [pc, #512]	; (802356c <HAL_DMA_Start_IT+0x47c>)
 802336a:	4293      	cmp	r3, r2
 802336c:	d068      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 802336e:	68fb      	ldr	r3, [r7, #12]
 8023370:	681b      	ldr	r3, [r3, #0]
 8023372:	4a7f      	ldr	r2, [pc, #508]	; (8023570 <HAL_DMA_Start_IT+0x480>)
 8023374:	4293      	cmp	r3, r2
 8023376:	d063      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 8023378:	68fb      	ldr	r3, [r7, #12]
 802337a:	681b      	ldr	r3, [r3, #0]
 802337c:	4a7d      	ldr	r2, [pc, #500]	; (8023574 <HAL_DMA_Start_IT+0x484>)
 802337e:	4293      	cmp	r3, r2
 8023380:	d05e      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 8023382:	68fb      	ldr	r3, [r7, #12]
 8023384:	681b      	ldr	r3, [r3, #0]
 8023386:	4a7c      	ldr	r2, [pc, #496]	; (8023578 <HAL_DMA_Start_IT+0x488>)
 8023388:	4293      	cmp	r3, r2
 802338a:	d059      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 802338c:	68fb      	ldr	r3, [r7, #12]
 802338e:	681b      	ldr	r3, [r3, #0]
 8023390:	4a7a      	ldr	r2, [pc, #488]	; (802357c <HAL_DMA_Start_IT+0x48c>)
 8023392:	4293      	cmp	r3, r2
 8023394:	d054      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 8023396:	68fb      	ldr	r3, [r7, #12]
 8023398:	681b      	ldr	r3, [r3, #0]
 802339a:	4a79      	ldr	r2, [pc, #484]	; (8023580 <HAL_DMA_Start_IT+0x490>)
 802339c:	4293      	cmp	r3, r2
 802339e:	d04f      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 80233a0:	68fb      	ldr	r3, [r7, #12]
 80233a2:	681b      	ldr	r3, [r3, #0]
 80233a4:	4a77      	ldr	r2, [pc, #476]	; (8023584 <HAL_DMA_Start_IT+0x494>)
 80233a6:	4293      	cmp	r3, r2
 80233a8:	d04a      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 80233aa:	68fb      	ldr	r3, [r7, #12]
 80233ac:	681b      	ldr	r3, [r3, #0]
 80233ae:	4a76      	ldr	r2, [pc, #472]	; (8023588 <HAL_DMA_Start_IT+0x498>)
 80233b0:	4293      	cmp	r3, r2
 80233b2:	d045      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 80233b4:	68fb      	ldr	r3, [r7, #12]
 80233b6:	681b      	ldr	r3, [r3, #0]
 80233b8:	4a74      	ldr	r2, [pc, #464]	; (802358c <HAL_DMA_Start_IT+0x49c>)
 80233ba:	4293      	cmp	r3, r2
 80233bc:	d040      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 80233be:	68fb      	ldr	r3, [r7, #12]
 80233c0:	681b      	ldr	r3, [r3, #0]
 80233c2:	4a73      	ldr	r2, [pc, #460]	; (8023590 <HAL_DMA_Start_IT+0x4a0>)
 80233c4:	4293      	cmp	r3, r2
 80233c6:	d03b      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 80233c8:	68fb      	ldr	r3, [r7, #12]
 80233ca:	681b      	ldr	r3, [r3, #0]
 80233cc:	4a71      	ldr	r2, [pc, #452]	; (8023594 <HAL_DMA_Start_IT+0x4a4>)
 80233ce:	4293      	cmp	r3, r2
 80233d0:	d036      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 80233d2:	68fb      	ldr	r3, [r7, #12]
 80233d4:	681b      	ldr	r3, [r3, #0]
 80233d6:	4a70      	ldr	r2, [pc, #448]	; (8023598 <HAL_DMA_Start_IT+0x4a8>)
 80233d8:	4293      	cmp	r3, r2
 80233da:	d031      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 80233dc:	68fb      	ldr	r3, [r7, #12]
 80233de:	681b      	ldr	r3, [r3, #0]
 80233e0:	4a6e      	ldr	r2, [pc, #440]	; (802359c <HAL_DMA_Start_IT+0x4ac>)
 80233e2:	4293      	cmp	r3, r2
 80233e4:	d02c      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 80233e6:	68fb      	ldr	r3, [r7, #12]
 80233e8:	681b      	ldr	r3, [r3, #0]
 80233ea:	4a6d      	ldr	r2, [pc, #436]	; (80235a0 <HAL_DMA_Start_IT+0x4b0>)
 80233ec:	4293      	cmp	r3, r2
 80233ee:	d027      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 80233f0:	68fb      	ldr	r3, [r7, #12]
 80233f2:	681b      	ldr	r3, [r3, #0]
 80233f4:	4a6b      	ldr	r2, [pc, #428]	; (80235a4 <HAL_DMA_Start_IT+0x4b4>)
 80233f6:	4293      	cmp	r3, r2
 80233f8:	d022      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 80233fa:	68fb      	ldr	r3, [r7, #12]
 80233fc:	681b      	ldr	r3, [r3, #0]
 80233fe:	4a6a      	ldr	r2, [pc, #424]	; (80235a8 <HAL_DMA_Start_IT+0x4b8>)
 8023400:	4293      	cmp	r3, r2
 8023402:	d01d      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 8023404:	68fb      	ldr	r3, [r7, #12]
 8023406:	681b      	ldr	r3, [r3, #0]
 8023408:	4a68      	ldr	r2, [pc, #416]	; (80235ac <HAL_DMA_Start_IT+0x4bc>)
 802340a:	4293      	cmp	r3, r2
 802340c:	d018      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 802340e:	68fb      	ldr	r3, [r7, #12]
 8023410:	681b      	ldr	r3, [r3, #0]
 8023412:	4a67      	ldr	r2, [pc, #412]	; (80235b0 <HAL_DMA_Start_IT+0x4c0>)
 8023414:	4293      	cmp	r3, r2
 8023416:	d013      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 8023418:	68fb      	ldr	r3, [r7, #12]
 802341a:	681b      	ldr	r3, [r3, #0]
 802341c:	4a65      	ldr	r2, [pc, #404]	; (80235b4 <HAL_DMA_Start_IT+0x4c4>)
 802341e:	4293      	cmp	r3, r2
 8023420:	d00e      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 8023422:	68fb      	ldr	r3, [r7, #12]
 8023424:	681b      	ldr	r3, [r3, #0]
 8023426:	4a64      	ldr	r2, [pc, #400]	; (80235b8 <HAL_DMA_Start_IT+0x4c8>)
 8023428:	4293      	cmp	r3, r2
 802342a:	d009      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 802342c:	68fb      	ldr	r3, [r7, #12]
 802342e:	681b      	ldr	r3, [r3, #0]
 8023430:	4a62      	ldr	r2, [pc, #392]	; (80235bc <HAL_DMA_Start_IT+0x4cc>)
 8023432:	4293      	cmp	r3, r2
 8023434:	d004      	beq.n	8023440 <HAL_DMA_Start_IT+0x350>
 8023436:	68fb      	ldr	r3, [r7, #12]
 8023438:	681b      	ldr	r3, [r3, #0]
 802343a:	4a61      	ldr	r2, [pc, #388]	; (80235c0 <HAL_DMA_Start_IT+0x4d0>)
 802343c:	4293      	cmp	r3, r2
 802343e:	d101      	bne.n	8023444 <HAL_DMA_Start_IT+0x354>
 8023440:	2301      	movs	r3, #1
 8023442:	e000      	b.n	8023446 <HAL_DMA_Start_IT+0x356>
 8023444:	2300      	movs	r3, #0
 8023446:	2b00      	cmp	r3, #0
 8023448:	d01a      	beq.n	8023480 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 802344a:	68fb      	ldr	r3, [r7, #12]
 802344c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802344e:	681b      	ldr	r3, [r3, #0]
 8023450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023454:	2b00      	cmp	r3, #0
 8023456:	d007      	beq.n	8023468 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8023458:	68fb      	ldr	r3, [r7, #12]
 802345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802345c:	681a      	ldr	r2, [r3, #0]
 802345e:	68fb      	ldr	r3, [r7, #12]
 8023460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023466:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8023468:	68fb      	ldr	r3, [r7, #12]
 802346a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802346c:	2b00      	cmp	r3, #0
 802346e:	d007      	beq.n	8023480 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8023470:	68fb      	ldr	r3, [r7, #12]
 8023472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023474:	681a      	ldr	r2, [r3, #0]
 8023476:	68fb      	ldr	r3, [r7, #12]
 8023478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802347a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802347e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8023480:	68fb      	ldr	r3, [r7, #12]
 8023482:	681b      	ldr	r3, [r3, #0]
 8023484:	4a37      	ldr	r2, [pc, #220]	; (8023564 <HAL_DMA_Start_IT+0x474>)
 8023486:	4293      	cmp	r3, r2
 8023488:	d04a      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 802348a:	68fb      	ldr	r3, [r7, #12]
 802348c:	681b      	ldr	r3, [r3, #0]
 802348e:	4a36      	ldr	r2, [pc, #216]	; (8023568 <HAL_DMA_Start_IT+0x478>)
 8023490:	4293      	cmp	r3, r2
 8023492:	d045      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 8023494:	68fb      	ldr	r3, [r7, #12]
 8023496:	681b      	ldr	r3, [r3, #0]
 8023498:	4a34      	ldr	r2, [pc, #208]	; (802356c <HAL_DMA_Start_IT+0x47c>)
 802349a:	4293      	cmp	r3, r2
 802349c:	d040      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 802349e:	68fb      	ldr	r3, [r7, #12]
 80234a0:	681b      	ldr	r3, [r3, #0]
 80234a2:	4a33      	ldr	r2, [pc, #204]	; (8023570 <HAL_DMA_Start_IT+0x480>)
 80234a4:	4293      	cmp	r3, r2
 80234a6:	d03b      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 80234a8:	68fb      	ldr	r3, [r7, #12]
 80234aa:	681b      	ldr	r3, [r3, #0]
 80234ac:	4a31      	ldr	r2, [pc, #196]	; (8023574 <HAL_DMA_Start_IT+0x484>)
 80234ae:	4293      	cmp	r3, r2
 80234b0:	d036      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 80234b2:	68fb      	ldr	r3, [r7, #12]
 80234b4:	681b      	ldr	r3, [r3, #0]
 80234b6:	4a30      	ldr	r2, [pc, #192]	; (8023578 <HAL_DMA_Start_IT+0x488>)
 80234b8:	4293      	cmp	r3, r2
 80234ba:	d031      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 80234bc:	68fb      	ldr	r3, [r7, #12]
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	4a2e      	ldr	r2, [pc, #184]	; (802357c <HAL_DMA_Start_IT+0x48c>)
 80234c2:	4293      	cmp	r3, r2
 80234c4:	d02c      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 80234c6:	68fb      	ldr	r3, [r7, #12]
 80234c8:	681b      	ldr	r3, [r3, #0]
 80234ca:	4a2d      	ldr	r2, [pc, #180]	; (8023580 <HAL_DMA_Start_IT+0x490>)
 80234cc:	4293      	cmp	r3, r2
 80234ce:	d027      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 80234d0:	68fb      	ldr	r3, [r7, #12]
 80234d2:	681b      	ldr	r3, [r3, #0]
 80234d4:	4a2b      	ldr	r2, [pc, #172]	; (8023584 <HAL_DMA_Start_IT+0x494>)
 80234d6:	4293      	cmp	r3, r2
 80234d8:	d022      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 80234da:	68fb      	ldr	r3, [r7, #12]
 80234dc:	681b      	ldr	r3, [r3, #0]
 80234de:	4a2a      	ldr	r2, [pc, #168]	; (8023588 <HAL_DMA_Start_IT+0x498>)
 80234e0:	4293      	cmp	r3, r2
 80234e2:	d01d      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 80234e4:	68fb      	ldr	r3, [r7, #12]
 80234e6:	681b      	ldr	r3, [r3, #0]
 80234e8:	4a28      	ldr	r2, [pc, #160]	; (802358c <HAL_DMA_Start_IT+0x49c>)
 80234ea:	4293      	cmp	r3, r2
 80234ec:	d018      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 80234ee:	68fb      	ldr	r3, [r7, #12]
 80234f0:	681b      	ldr	r3, [r3, #0]
 80234f2:	4a27      	ldr	r2, [pc, #156]	; (8023590 <HAL_DMA_Start_IT+0x4a0>)
 80234f4:	4293      	cmp	r3, r2
 80234f6:	d013      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 80234f8:	68fb      	ldr	r3, [r7, #12]
 80234fa:	681b      	ldr	r3, [r3, #0]
 80234fc:	4a25      	ldr	r2, [pc, #148]	; (8023594 <HAL_DMA_Start_IT+0x4a4>)
 80234fe:	4293      	cmp	r3, r2
 8023500:	d00e      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 8023502:	68fb      	ldr	r3, [r7, #12]
 8023504:	681b      	ldr	r3, [r3, #0]
 8023506:	4a24      	ldr	r2, [pc, #144]	; (8023598 <HAL_DMA_Start_IT+0x4a8>)
 8023508:	4293      	cmp	r3, r2
 802350a:	d009      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 802350c:	68fb      	ldr	r3, [r7, #12]
 802350e:	681b      	ldr	r3, [r3, #0]
 8023510:	4a22      	ldr	r2, [pc, #136]	; (802359c <HAL_DMA_Start_IT+0x4ac>)
 8023512:	4293      	cmp	r3, r2
 8023514:	d004      	beq.n	8023520 <HAL_DMA_Start_IT+0x430>
 8023516:	68fb      	ldr	r3, [r7, #12]
 8023518:	681b      	ldr	r3, [r3, #0]
 802351a:	4a21      	ldr	r2, [pc, #132]	; (80235a0 <HAL_DMA_Start_IT+0x4b0>)
 802351c:	4293      	cmp	r3, r2
 802351e:	d108      	bne.n	8023532 <HAL_DMA_Start_IT+0x442>
 8023520:	68fb      	ldr	r3, [r7, #12]
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	681a      	ldr	r2, [r3, #0]
 8023526:	68fb      	ldr	r3, [r7, #12]
 8023528:	681b      	ldr	r3, [r3, #0]
 802352a:	f042 0201 	orr.w	r2, r2, #1
 802352e:	601a      	str	r2, [r3, #0]
 8023530:	e012      	b.n	8023558 <HAL_DMA_Start_IT+0x468>
 8023532:	68fb      	ldr	r3, [r7, #12]
 8023534:	681b      	ldr	r3, [r3, #0]
 8023536:	681a      	ldr	r2, [r3, #0]
 8023538:	68fb      	ldr	r3, [r7, #12]
 802353a:	681b      	ldr	r3, [r3, #0]
 802353c:	f042 0201 	orr.w	r2, r2, #1
 8023540:	601a      	str	r2, [r3, #0]
 8023542:	e009      	b.n	8023558 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8023544:	68fb      	ldr	r3, [r7, #12]
 8023546:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802354a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 802354c:	68fb      	ldr	r3, [r7, #12]
 802354e:	2200      	movs	r2, #0
 8023550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8023554:	2301      	movs	r3, #1
 8023556:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8023558:	7dfb      	ldrb	r3, [r7, #23]
}
 802355a:	4618      	mov	r0, r3
 802355c:	3718      	adds	r7, #24
 802355e:	46bd      	mov	sp, r7
 8023560:	bd80      	pop	{r7, pc}
 8023562:	bf00      	nop
 8023564:	40020010 	.word	0x40020010
 8023568:	40020028 	.word	0x40020028
 802356c:	40020040 	.word	0x40020040
 8023570:	40020058 	.word	0x40020058
 8023574:	40020070 	.word	0x40020070
 8023578:	40020088 	.word	0x40020088
 802357c:	400200a0 	.word	0x400200a0
 8023580:	400200b8 	.word	0x400200b8
 8023584:	40020410 	.word	0x40020410
 8023588:	40020428 	.word	0x40020428
 802358c:	40020440 	.word	0x40020440
 8023590:	40020458 	.word	0x40020458
 8023594:	40020470 	.word	0x40020470
 8023598:	40020488 	.word	0x40020488
 802359c:	400204a0 	.word	0x400204a0
 80235a0:	400204b8 	.word	0x400204b8
 80235a4:	58025408 	.word	0x58025408
 80235a8:	5802541c 	.word	0x5802541c
 80235ac:	58025430 	.word	0x58025430
 80235b0:	58025444 	.word	0x58025444
 80235b4:	58025458 	.word	0x58025458
 80235b8:	5802546c 	.word	0x5802546c
 80235bc:	58025480 	.word	0x58025480
 80235c0:	58025494 	.word	0x58025494

080235c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80235c4:	b580      	push	{r7, lr}
 80235c6:	b086      	sub	sp, #24
 80235c8:	af00      	add	r7, sp, #0
 80235ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80235cc:	f7fe fd38 	bl	8022040 <HAL_GetTick>
 80235d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80235d2:	687b      	ldr	r3, [r7, #4]
 80235d4:	2b00      	cmp	r3, #0
 80235d6:	d101      	bne.n	80235dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80235d8:	2301      	movs	r3, #1
 80235da:	e2dc      	b.n	8023b96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80235dc:	687b      	ldr	r3, [r7, #4]
 80235de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80235e2:	b2db      	uxtb	r3, r3
 80235e4:	2b02      	cmp	r3, #2
 80235e6:	d008      	beq.n	80235fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80235e8:	687b      	ldr	r3, [r7, #4]
 80235ea:	2280      	movs	r2, #128	; 0x80
 80235ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	2200      	movs	r2, #0
 80235f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80235f6:	2301      	movs	r3, #1
 80235f8:	e2cd      	b.n	8023b96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80235fa:	687b      	ldr	r3, [r7, #4]
 80235fc:	681b      	ldr	r3, [r3, #0]
 80235fe:	4a76      	ldr	r2, [pc, #472]	; (80237d8 <HAL_DMA_Abort+0x214>)
 8023600:	4293      	cmp	r3, r2
 8023602:	d04a      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 8023604:	687b      	ldr	r3, [r7, #4]
 8023606:	681b      	ldr	r3, [r3, #0]
 8023608:	4a74      	ldr	r2, [pc, #464]	; (80237dc <HAL_DMA_Abort+0x218>)
 802360a:	4293      	cmp	r3, r2
 802360c:	d045      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 802360e:	687b      	ldr	r3, [r7, #4]
 8023610:	681b      	ldr	r3, [r3, #0]
 8023612:	4a73      	ldr	r2, [pc, #460]	; (80237e0 <HAL_DMA_Abort+0x21c>)
 8023614:	4293      	cmp	r3, r2
 8023616:	d040      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 8023618:	687b      	ldr	r3, [r7, #4]
 802361a:	681b      	ldr	r3, [r3, #0]
 802361c:	4a71      	ldr	r2, [pc, #452]	; (80237e4 <HAL_DMA_Abort+0x220>)
 802361e:	4293      	cmp	r3, r2
 8023620:	d03b      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 8023622:	687b      	ldr	r3, [r7, #4]
 8023624:	681b      	ldr	r3, [r3, #0]
 8023626:	4a70      	ldr	r2, [pc, #448]	; (80237e8 <HAL_DMA_Abort+0x224>)
 8023628:	4293      	cmp	r3, r2
 802362a:	d036      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 802362c:	687b      	ldr	r3, [r7, #4]
 802362e:	681b      	ldr	r3, [r3, #0]
 8023630:	4a6e      	ldr	r2, [pc, #440]	; (80237ec <HAL_DMA_Abort+0x228>)
 8023632:	4293      	cmp	r3, r2
 8023634:	d031      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 8023636:	687b      	ldr	r3, [r7, #4]
 8023638:	681b      	ldr	r3, [r3, #0]
 802363a:	4a6d      	ldr	r2, [pc, #436]	; (80237f0 <HAL_DMA_Abort+0x22c>)
 802363c:	4293      	cmp	r3, r2
 802363e:	d02c      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 8023640:	687b      	ldr	r3, [r7, #4]
 8023642:	681b      	ldr	r3, [r3, #0]
 8023644:	4a6b      	ldr	r2, [pc, #428]	; (80237f4 <HAL_DMA_Abort+0x230>)
 8023646:	4293      	cmp	r3, r2
 8023648:	d027      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 802364a:	687b      	ldr	r3, [r7, #4]
 802364c:	681b      	ldr	r3, [r3, #0]
 802364e:	4a6a      	ldr	r2, [pc, #424]	; (80237f8 <HAL_DMA_Abort+0x234>)
 8023650:	4293      	cmp	r3, r2
 8023652:	d022      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	681b      	ldr	r3, [r3, #0]
 8023658:	4a68      	ldr	r2, [pc, #416]	; (80237fc <HAL_DMA_Abort+0x238>)
 802365a:	4293      	cmp	r3, r2
 802365c:	d01d      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	681b      	ldr	r3, [r3, #0]
 8023662:	4a67      	ldr	r2, [pc, #412]	; (8023800 <HAL_DMA_Abort+0x23c>)
 8023664:	4293      	cmp	r3, r2
 8023666:	d018      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 8023668:	687b      	ldr	r3, [r7, #4]
 802366a:	681b      	ldr	r3, [r3, #0]
 802366c:	4a65      	ldr	r2, [pc, #404]	; (8023804 <HAL_DMA_Abort+0x240>)
 802366e:	4293      	cmp	r3, r2
 8023670:	d013      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 8023672:	687b      	ldr	r3, [r7, #4]
 8023674:	681b      	ldr	r3, [r3, #0]
 8023676:	4a64      	ldr	r2, [pc, #400]	; (8023808 <HAL_DMA_Abort+0x244>)
 8023678:	4293      	cmp	r3, r2
 802367a:	d00e      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 802367c:	687b      	ldr	r3, [r7, #4]
 802367e:	681b      	ldr	r3, [r3, #0]
 8023680:	4a62      	ldr	r2, [pc, #392]	; (802380c <HAL_DMA_Abort+0x248>)
 8023682:	4293      	cmp	r3, r2
 8023684:	d009      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 8023686:	687b      	ldr	r3, [r7, #4]
 8023688:	681b      	ldr	r3, [r3, #0]
 802368a:	4a61      	ldr	r2, [pc, #388]	; (8023810 <HAL_DMA_Abort+0x24c>)
 802368c:	4293      	cmp	r3, r2
 802368e:	d004      	beq.n	802369a <HAL_DMA_Abort+0xd6>
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	681b      	ldr	r3, [r3, #0]
 8023694:	4a5f      	ldr	r2, [pc, #380]	; (8023814 <HAL_DMA_Abort+0x250>)
 8023696:	4293      	cmp	r3, r2
 8023698:	d101      	bne.n	802369e <HAL_DMA_Abort+0xda>
 802369a:	2301      	movs	r3, #1
 802369c:	e000      	b.n	80236a0 <HAL_DMA_Abort+0xdc>
 802369e:	2300      	movs	r3, #0
 80236a0:	2b00      	cmp	r3, #0
 80236a2:	d013      	beq.n	80236cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80236a4:	687b      	ldr	r3, [r7, #4]
 80236a6:	681b      	ldr	r3, [r3, #0]
 80236a8:	681a      	ldr	r2, [r3, #0]
 80236aa:	687b      	ldr	r3, [r7, #4]
 80236ac:	681b      	ldr	r3, [r3, #0]
 80236ae:	f022 021e 	bic.w	r2, r2, #30
 80236b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80236b4:	687b      	ldr	r3, [r7, #4]
 80236b6:	681b      	ldr	r3, [r3, #0]
 80236b8:	695a      	ldr	r2, [r3, #20]
 80236ba:	687b      	ldr	r3, [r7, #4]
 80236bc:	681b      	ldr	r3, [r3, #0]
 80236be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80236c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	681b      	ldr	r3, [r3, #0]
 80236c8:	617b      	str	r3, [r7, #20]
 80236ca:	e00a      	b.n	80236e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80236cc:	687b      	ldr	r3, [r7, #4]
 80236ce:	681b      	ldr	r3, [r3, #0]
 80236d0:	681a      	ldr	r2, [r3, #0]
 80236d2:	687b      	ldr	r3, [r7, #4]
 80236d4:	681b      	ldr	r3, [r3, #0]
 80236d6:	f022 020e 	bic.w	r2, r2, #14
 80236da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80236dc:	687b      	ldr	r3, [r7, #4]
 80236de:	681b      	ldr	r3, [r3, #0]
 80236e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80236e2:	687b      	ldr	r3, [r7, #4]
 80236e4:	681b      	ldr	r3, [r3, #0]
 80236e6:	4a3c      	ldr	r2, [pc, #240]	; (80237d8 <HAL_DMA_Abort+0x214>)
 80236e8:	4293      	cmp	r3, r2
 80236ea:	d072      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 80236ec:	687b      	ldr	r3, [r7, #4]
 80236ee:	681b      	ldr	r3, [r3, #0]
 80236f0:	4a3a      	ldr	r2, [pc, #232]	; (80237dc <HAL_DMA_Abort+0x218>)
 80236f2:	4293      	cmp	r3, r2
 80236f4:	d06d      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 80236f6:	687b      	ldr	r3, [r7, #4]
 80236f8:	681b      	ldr	r3, [r3, #0]
 80236fa:	4a39      	ldr	r2, [pc, #228]	; (80237e0 <HAL_DMA_Abort+0x21c>)
 80236fc:	4293      	cmp	r3, r2
 80236fe:	d068      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 8023700:	687b      	ldr	r3, [r7, #4]
 8023702:	681b      	ldr	r3, [r3, #0]
 8023704:	4a37      	ldr	r2, [pc, #220]	; (80237e4 <HAL_DMA_Abort+0x220>)
 8023706:	4293      	cmp	r3, r2
 8023708:	d063      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 802370a:	687b      	ldr	r3, [r7, #4]
 802370c:	681b      	ldr	r3, [r3, #0]
 802370e:	4a36      	ldr	r2, [pc, #216]	; (80237e8 <HAL_DMA_Abort+0x224>)
 8023710:	4293      	cmp	r3, r2
 8023712:	d05e      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 8023714:	687b      	ldr	r3, [r7, #4]
 8023716:	681b      	ldr	r3, [r3, #0]
 8023718:	4a34      	ldr	r2, [pc, #208]	; (80237ec <HAL_DMA_Abort+0x228>)
 802371a:	4293      	cmp	r3, r2
 802371c:	d059      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 802371e:	687b      	ldr	r3, [r7, #4]
 8023720:	681b      	ldr	r3, [r3, #0]
 8023722:	4a33      	ldr	r2, [pc, #204]	; (80237f0 <HAL_DMA_Abort+0x22c>)
 8023724:	4293      	cmp	r3, r2
 8023726:	d054      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 8023728:	687b      	ldr	r3, [r7, #4]
 802372a:	681b      	ldr	r3, [r3, #0]
 802372c:	4a31      	ldr	r2, [pc, #196]	; (80237f4 <HAL_DMA_Abort+0x230>)
 802372e:	4293      	cmp	r3, r2
 8023730:	d04f      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 8023732:	687b      	ldr	r3, [r7, #4]
 8023734:	681b      	ldr	r3, [r3, #0]
 8023736:	4a30      	ldr	r2, [pc, #192]	; (80237f8 <HAL_DMA_Abort+0x234>)
 8023738:	4293      	cmp	r3, r2
 802373a:	d04a      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 802373c:	687b      	ldr	r3, [r7, #4]
 802373e:	681b      	ldr	r3, [r3, #0]
 8023740:	4a2e      	ldr	r2, [pc, #184]	; (80237fc <HAL_DMA_Abort+0x238>)
 8023742:	4293      	cmp	r3, r2
 8023744:	d045      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 8023746:	687b      	ldr	r3, [r7, #4]
 8023748:	681b      	ldr	r3, [r3, #0]
 802374a:	4a2d      	ldr	r2, [pc, #180]	; (8023800 <HAL_DMA_Abort+0x23c>)
 802374c:	4293      	cmp	r3, r2
 802374e:	d040      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 8023750:	687b      	ldr	r3, [r7, #4]
 8023752:	681b      	ldr	r3, [r3, #0]
 8023754:	4a2b      	ldr	r2, [pc, #172]	; (8023804 <HAL_DMA_Abort+0x240>)
 8023756:	4293      	cmp	r3, r2
 8023758:	d03b      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 802375a:	687b      	ldr	r3, [r7, #4]
 802375c:	681b      	ldr	r3, [r3, #0]
 802375e:	4a2a      	ldr	r2, [pc, #168]	; (8023808 <HAL_DMA_Abort+0x244>)
 8023760:	4293      	cmp	r3, r2
 8023762:	d036      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 8023764:	687b      	ldr	r3, [r7, #4]
 8023766:	681b      	ldr	r3, [r3, #0]
 8023768:	4a28      	ldr	r2, [pc, #160]	; (802380c <HAL_DMA_Abort+0x248>)
 802376a:	4293      	cmp	r3, r2
 802376c:	d031      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 802376e:	687b      	ldr	r3, [r7, #4]
 8023770:	681b      	ldr	r3, [r3, #0]
 8023772:	4a27      	ldr	r2, [pc, #156]	; (8023810 <HAL_DMA_Abort+0x24c>)
 8023774:	4293      	cmp	r3, r2
 8023776:	d02c      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 8023778:	687b      	ldr	r3, [r7, #4]
 802377a:	681b      	ldr	r3, [r3, #0]
 802377c:	4a25      	ldr	r2, [pc, #148]	; (8023814 <HAL_DMA_Abort+0x250>)
 802377e:	4293      	cmp	r3, r2
 8023780:	d027      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 8023782:	687b      	ldr	r3, [r7, #4]
 8023784:	681b      	ldr	r3, [r3, #0]
 8023786:	4a24      	ldr	r2, [pc, #144]	; (8023818 <HAL_DMA_Abort+0x254>)
 8023788:	4293      	cmp	r3, r2
 802378a:	d022      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 802378c:	687b      	ldr	r3, [r7, #4]
 802378e:	681b      	ldr	r3, [r3, #0]
 8023790:	4a22      	ldr	r2, [pc, #136]	; (802381c <HAL_DMA_Abort+0x258>)
 8023792:	4293      	cmp	r3, r2
 8023794:	d01d      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 8023796:	687b      	ldr	r3, [r7, #4]
 8023798:	681b      	ldr	r3, [r3, #0]
 802379a:	4a21      	ldr	r2, [pc, #132]	; (8023820 <HAL_DMA_Abort+0x25c>)
 802379c:	4293      	cmp	r3, r2
 802379e:	d018      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 80237a0:	687b      	ldr	r3, [r7, #4]
 80237a2:	681b      	ldr	r3, [r3, #0]
 80237a4:	4a1f      	ldr	r2, [pc, #124]	; (8023824 <HAL_DMA_Abort+0x260>)
 80237a6:	4293      	cmp	r3, r2
 80237a8:	d013      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 80237aa:	687b      	ldr	r3, [r7, #4]
 80237ac:	681b      	ldr	r3, [r3, #0]
 80237ae:	4a1e      	ldr	r2, [pc, #120]	; (8023828 <HAL_DMA_Abort+0x264>)
 80237b0:	4293      	cmp	r3, r2
 80237b2:	d00e      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 80237b4:	687b      	ldr	r3, [r7, #4]
 80237b6:	681b      	ldr	r3, [r3, #0]
 80237b8:	4a1c      	ldr	r2, [pc, #112]	; (802382c <HAL_DMA_Abort+0x268>)
 80237ba:	4293      	cmp	r3, r2
 80237bc:	d009      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	681b      	ldr	r3, [r3, #0]
 80237c2:	4a1b      	ldr	r2, [pc, #108]	; (8023830 <HAL_DMA_Abort+0x26c>)
 80237c4:	4293      	cmp	r3, r2
 80237c6:	d004      	beq.n	80237d2 <HAL_DMA_Abort+0x20e>
 80237c8:	687b      	ldr	r3, [r7, #4]
 80237ca:	681b      	ldr	r3, [r3, #0]
 80237cc:	4a19      	ldr	r2, [pc, #100]	; (8023834 <HAL_DMA_Abort+0x270>)
 80237ce:	4293      	cmp	r3, r2
 80237d0:	d132      	bne.n	8023838 <HAL_DMA_Abort+0x274>
 80237d2:	2301      	movs	r3, #1
 80237d4:	e031      	b.n	802383a <HAL_DMA_Abort+0x276>
 80237d6:	bf00      	nop
 80237d8:	40020010 	.word	0x40020010
 80237dc:	40020028 	.word	0x40020028
 80237e0:	40020040 	.word	0x40020040
 80237e4:	40020058 	.word	0x40020058
 80237e8:	40020070 	.word	0x40020070
 80237ec:	40020088 	.word	0x40020088
 80237f0:	400200a0 	.word	0x400200a0
 80237f4:	400200b8 	.word	0x400200b8
 80237f8:	40020410 	.word	0x40020410
 80237fc:	40020428 	.word	0x40020428
 8023800:	40020440 	.word	0x40020440
 8023804:	40020458 	.word	0x40020458
 8023808:	40020470 	.word	0x40020470
 802380c:	40020488 	.word	0x40020488
 8023810:	400204a0 	.word	0x400204a0
 8023814:	400204b8 	.word	0x400204b8
 8023818:	58025408 	.word	0x58025408
 802381c:	5802541c 	.word	0x5802541c
 8023820:	58025430 	.word	0x58025430
 8023824:	58025444 	.word	0x58025444
 8023828:	58025458 	.word	0x58025458
 802382c:	5802546c 	.word	0x5802546c
 8023830:	58025480 	.word	0x58025480
 8023834:	58025494 	.word	0x58025494
 8023838:	2300      	movs	r3, #0
 802383a:	2b00      	cmp	r3, #0
 802383c:	d007      	beq.n	802384e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802383e:	687b      	ldr	r3, [r7, #4]
 8023840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023842:	681a      	ldr	r2, [r3, #0]
 8023844:	687b      	ldr	r3, [r7, #4]
 8023846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802384c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802384e:	687b      	ldr	r3, [r7, #4]
 8023850:	681b      	ldr	r3, [r3, #0]
 8023852:	4a6d      	ldr	r2, [pc, #436]	; (8023a08 <HAL_DMA_Abort+0x444>)
 8023854:	4293      	cmp	r3, r2
 8023856:	d04a      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 8023858:	687b      	ldr	r3, [r7, #4]
 802385a:	681b      	ldr	r3, [r3, #0]
 802385c:	4a6b      	ldr	r2, [pc, #428]	; (8023a0c <HAL_DMA_Abort+0x448>)
 802385e:	4293      	cmp	r3, r2
 8023860:	d045      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 8023862:	687b      	ldr	r3, [r7, #4]
 8023864:	681b      	ldr	r3, [r3, #0]
 8023866:	4a6a      	ldr	r2, [pc, #424]	; (8023a10 <HAL_DMA_Abort+0x44c>)
 8023868:	4293      	cmp	r3, r2
 802386a:	d040      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 802386c:	687b      	ldr	r3, [r7, #4]
 802386e:	681b      	ldr	r3, [r3, #0]
 8023870:	4a68      	ldr	r2, [pc, #416]	; (8023a14 <HAL_DMA_Abort+0x450>)
 8023872:	4293      	cmp	r3, r2
 8023874:	d03b      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 8023876:	687b      	ldr	r3, [r7, #4]
 8023878:	681b      	ldr	r3, [r3, #0]
 802387a:	4a67      	ldr	r2, [pc, #412]	; (8023a18 <HAL_DMA_Abort+0x454>)
 802387c:	4293      	cmp	r3, r2
 802387e:	d036      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 8023880:	687b      	ldr	r3, [r7, #4]
 8023882:	681b      	ldr	r3, [r3, #0]
 8023884:	4a65      	ldr	r2, [pc, #404]	; (8023a1c <HAL_DMA_Abort+0x458>)
 8023886:	4293      	cmp	r3, r2
 8023888:	d031      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 802388a:	687b      	ldr	r3, [r7, #4]
 802388c:	681b      	ldr	r3, [r3, #0]
 802388e:	4a64      	ldr	r2, [pc, #400]	; (8023a20 <HAL_DMA_Abort+0x45c>)
 8023890:	4293      	cmp	r3, r2
 8023892:	d02c      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 8023894:	687b      	ldr	r3, [r7, #4]
 8023896:	681b      	ldr	r3, [r3, #0]
 8023898:	4a62      	ldr	r2, [pc, #392]	; (8023a24 <HAL_DMA_Abort+0x460>)
 802389a:	4293      	cmp	r3, r2
 802389c:	d027      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 802389e:	687b      	ldr	r3, [r7, #4]
 80238a0:	681b      	ldr	r3, [r3, #0]
 80238a2:	4a61      	ldr	r2, [pc, #388]	; (8023a28 <HAL_DMA_Abort+0x464>)
 80238a4:	4293      	cmp	r3, r2
 80238a6:	d022      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 80238a8:	687b      	ldr	r3, [r7, #4]
 80238aa:	681b      	ldr	r3, [r3, #0]
 80238ac:	4a5f      	ldr	r2, [pc, #380]	; (8023a2c <HAL_DMA_Abort+0x468>)
 80238ae:	4293      	cmp	r3, r2
 80238b0:	d01d      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 80238b2:	687b      	ldr	r3, [r7, #4]
 80238b4:	681b      	ldr	r3, [r3, #0]
 80238b6:	4a5e      	ldr	r2, [pc, #376]	; (8023a30 <HAL_DMA_Abort+0x46c>)
 80238b8:	4293      	cmp	r3, r2
 80238ba:	d018      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 80238bc:	687b      	ldr	r3, [r7, #4]
 80238be:	681b      	ldr	r3, [r3, #0]
 80238c0:	4a5c      	ldr	r2, [pc, #368]	; (8023a34 <HAL_DMA_Abort+0x470>)
 80238c2:	4293      	cmp	r3, r2
 80238c4:	d013      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 80238c6:	687b      	ldr	r3, [r7, #4]
 80238c8:	681b      	ldr	r3, [r3, #0]
 80238ca:	4a5b      	ldr	r2, [pc, #364]	; (8023a38 <HAL_DMA_Abort+0x474>)
 80238cc:	4293      	cmp	r3, r2
 80238ce:	d00e      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 80238d0:	687b      	ldr	r3, [r7, #4]
 80238d2:	681b      	ldr	r3, [r3, #0]
 80238d4:	4a59      	ldr	r2, [pc, #356]	; (8023a3c <HAL_DMA_Abort+0x478>)
 80238d6:	4293      	cmp	r3, r2
 80238d8:	d009      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 80238da:	687b      	ldr	r3, [r7, #4]
 80238dc:	681b      	ldr	r3, [r3, #0]
 80238de:	4a58      	ldr	r2, [pc, #352]	; (8023a40 <HAL_DMA_Abort+0x47c>)
 80238e0:	4293      	cmp	r3, r2
 80238e2:	d004      	beq.n	80238ee <HAL_DMA_Abort+0x32a>
 80238e4:	687b      	ldr	r3, [r7, #4]
 80238e6:	681b      	ldr	r3, [r3, #0]
 80238e8:	4a56      	ldr	r2, [pc, #344]	; (8023a44 <HAL_DMA_Abort+0x480>)
 80238ea:	4293      	cmp	r3, r2
 80238ec:	d108      	bne.n	8023900 <HAL_DMA_Abort+0x33c>
 80238ee:	687b      	ldr	r3, [r7, #4]
 80238f0:	681b      	ldr	r3, [r3, #0]
 80238f2:	681a      	ldr	r2, [r3, #0]
 80238f4:	687b      	ldr	r3, [r7, #4]
 80238f6:	681b      	ldr	r3, [r3, #0]
 80238f8:	f022 0201 	bic.w	r2, r2, #1
 80238fc:	601a      	str	r2, [r3, #0]
 80238fe:	e007      	b.n	8023910 <HAL_DMA_Abort+0x34c>
 8023900:	687b      	ldr	r3, [r7, #4]
 8023902:	681b      	ldr	r3, [r3, #0]
 8023904:	681a      	ldr	r2, [r3, #0]
 8023906:	687b      	ldr	r3, [r7, #4]
 8023908:	681b      	ldr	r3, [r3, #0]
 802390a:	f022 0201 	bic.w	r2, r2, #1
 802390e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8023910:	e013      	b.n	802393a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023912:	f7fe fb95 	bl	8022040 <HAL_GetTick>
 8023916:	4602      	mov	r2, r0
 8023918:	693b      	ldr	r3, [r7, #16]
 802391a:	1ad3      	subs	r3, r2, r3
 802391c:	2b05      	cmp	r3, #5
 802391e:	d90c      	bls.n	802393a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023920:	687b      	ldr	r3, [r7, #4]
 8023922:	2220      	movs	r2, #32
 8023924:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8023926:	687b      	ldr	r3, [r7, #4]
 8023928:	2203      	movs	r2, #3
 802392a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802392e:	687b      	ldr	r3, [r7, #4]
 8023930:	2200      	movs	r2, #0
 8023932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8023936:	2301      	movs	r3, #1
 8023938:	e12d      	b.n	8023b96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802393a:	697b      	ldr	r3, [r7, #20]
 802393c:	681b      	ldr	r3, [r3, #0]
 802393e:	f003 0301 	and.w	r3, r3, #1
 8023942:	2b00      	cmp	r3, #0
 8023944:	d1e5      	bne.n	8023912 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8023946:	687b      	ldr	r3, [r7, #4]
 8023948:	681b      	ldr	r3, [r3, #0]
 802394a:	4a2f      	ldr	r2, [pc, #188]	; (8023a08 <HAL_DMA_Abort+0x444>)
 802394c:	4293      	cmp	r3, r2
 802394e:	d04a      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 8023950:	687b      	ldr	r3, [r7, #4]
 8023952:	681b      	ldr	r3, [r3, #0]
 8023954:	4a2d      	ldr	r2, [pc, #180]	; (8023a0c <HAL_DMA_Abort+0x448>)
 8023956:	4293      	cmp	r3, r2
 8023958:	d045      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	681b      	ldr	r3, [r3, #0]
 802395e:	4a2c      	ldr	r2, [pc, #176]	; (8023a10 <HAL_DMA_Abort+0x44c>)
 8023960:	4293      	cmp	r3, r2
 8023962:	d040      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 8023964:	687b      	ldr	r3, [r7, #4]
 8023966:	681b      	ldr	r3, [r3, #0]
 8023968:	4a2a      	ldr	r2, [pc, #168]	; (8023a14 <HAL_DMA_Abort+0x450>)
 802396a:	4293      	cmp	r3, r2
 802396c:	d03b      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 802396e:	687b      	ldr	r3, [r7, #4]
 8023970:	681b      	ldr	r3, [r3, #0]
 8023972:	4a29      	ldr	r2, [pc, #164]	; (8023a18 <HAL_DMA_Abort+0x454>)
 8023974:	4293      	cmp	r3, r2
 8023976:	d036      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 8023978:	687b      	ldr	r3, [r7, #4]
 802397a:	681b      	ldr	r3, [r3, #0]
 802397c:	4a27      	ldr	r2, [pc, #156]	; (8023a1c <HAL_DMA_Abort+0x458>)
 802397e:	4293      	cmp	r3, r2
 8023980:	d031      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 8023982:	687b      	ldr	r3, [r7, #4]
 8023984:	681b      	ldr	r3, [r3, #0]
 8023986:	4a26      	ldr	r2, [pc, #152]	; (8023a20 <HAL_DMA_Abort+0x45c>)
 8023988:	4293      	cmp	r3, r2
 802398a:	d02c      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 802398c:	687b      	ldr	r3, [r7, #4]
 802398e:	681b      	ldr	r3, [r3, #0]
 8023990:	4a24      	ldr	r2, [pc, #144]	; (8023a24 <HAL_DMA_Abort+0x460>)
 8023992:	4293      	cmp	r3, r2
 8023994:	d027      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 8023996:	687b      	ldr	r3, [r7, #4]
 8023998:	681b      	ldr	r3, [r3, #0]
 802399a:	4a23      	ldr	r2, [pc, #140]	; (8023a28 <HAL_DMA_Abort+0x464>)
 802399c:	4293      	cmp	r3, r2
 802399e:	d022      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 80239a0:	687b      	ldr	r3, [r7, #4]
 80239a2:	681b      	ldr	r3, [r3, #0]
 80239a4:	4a21      	ldr	r2, [pc, #132]	; (8023a2c <HAL_DMA_Abort+0x468>)
 80239a6:	4293      	cmp	r3, r2
 80239a8:	d01d      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 80239aa:	687b      	ldr	r3, [r7, #4]
 80239ac:	681b      	ldr	r3, [r3, #0]
 80239ae:	4a20      	ldr	r2, [pc, #128]	; (8023a30 <HAL_DMA_Abort+0x46c>)
 80239b0:	4293      	cmp	r3, r2
 80239b2:	d018      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 80239b4:	687b      	ldr	r3, [r7, #4]
 80239b6:	681b      	ldr	r3, [r3, #0]
 80239b8:	4a1e      	ldr	r2, [pc, #120]	; (8023a34 <HAL_DMA_Abort+0x470>)
 80239ba:	4293      	cmp	r3, r2
 80239bc:	d013      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 80239be:	687b      	ldr	r3, [r7, #4]
 80239c0:	681b      	ldr	r3, [r3, #0]
 80239c2:	4a1d      	ldr	r2, [pc, #116]	; (8023a38 <HAL_DMA_Abort+0x474>)
 80239c4:	4293      	cmp	r3, r2
 80239c6:	d00e      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 80239c8:	687b      	ldr	r3, [r7, #4]
 80239ca:	681b      	ldr	r3, [r3, #0]
 80239cc:	4a1b      	ldr	r2, [pc, #108]	; (8023a3c <HAL_DMA_Abort+0x478>)
 80239ce:	4293      	cmp	r3, r2
 80239d0:	d009      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 80239d2:	687b      	ldr	r3, [r7, #4]
 80239d4:	681b      	ldr	r3, [r3, #0]
 80239d6:	4a1a      	ldr	r2, [pc, #104]	; (8023a40 <HAL_DMA_Abort+0x47c>)
 80239d8:	4293      	cmp	r3, r2
 80239da:	d004      	beq.n	80239e6 <HAL_DMA_Abort+0x422>
 80239dc:	687b      	ldr	r3, [r7, #4]
 80239de:	681b      	ldr	r3, [r3, #0]
 80239e0:	4a18      	ldr	r2, [pc, #96]	; (8023a44 <HAL_DMA_Abort+0x480>)
 80239e2:	4293      	cmp	r3, r2
 80239e4:	d101      	bne.n	80239ea <HAL_DMA_Abort+0x426>
 80239e6:	2301      	movs	r3, #1
 80239e8:	e000      	b.n	80239ec <HAL_DMA_Abort+0x428>
 80239ea:	2300      	movs	r3, #0
 80239ec:	2b00      	cmp	r3, #0
 80239ee:	d02b      	beq.n	8023a48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80239f0:	687b      	ldr	r3, [r7, #4]
 80239f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80239f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80239f6:	687b      	ldr	r3, [r7, #4]
 80239f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80239fa:	f003 031f 	and.w	r3, r3, #31
 80239fe:	223f      	movs	r2, #63	; 0x3f
 8023a00:	409a      	lsls	r2, r3
 8023a02:	68bb      	ldr	r3, [r7, #8]
 8023a04:	609a      	str	r2, [r3, #8]
 8023a06:	e02a      	b.n	8023a5e <HAL_DMA_Abort+0x49a>
 8023a08:	40020010 	.word	0x40020010
 8023a0c:	40020028 	.word	0x40020028
 8023a10:	40020040 	.word	0x40020040
 8023a14:	40020058 	.word	0x40020058
 8023a18:	40020070 	.word	0x40020070
 8023a1c:	40020088 	.word	0x40020088
 8023a20:	400200a0 	.word	0x400200a0
 8023a24:	400200b8 	.word	0x400200b8
 8023a28:	40020410 	.word	0x40020410
 8023a2c:	40020428 	.word	0x40020428
 8023a30:	40020440 	.word	0x40020440
 8023a34:	40020458 	.word	0x40020458
 8023a38:	40020470 	.word	0x40020470
 8023a3c:	40020488 	.word	0x40020488
 8023a40:	400204a0 	.word	0x400204a0
 8023a44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8023a48:	687b      	ldr	r3, [r7, #4]
 8023a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023a4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8023a4e:	687b      	ldr	r3, [r7, #4]
 8023a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a52:	f003 031f 	and.w	r3, r3, #31
 8023a56:	2201      	movs	r2, #1
 8023a58:	409a      	lsls	r2, r3
 8023a5a:	68fb      	ldr	r3, [r7, #12]
 8023a5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	681b      	ldr	r3, [r3, #0]
 8023a62:	4a4f      	ldr	r2, [pc, #316]	; (8023ba0 <HAL_DMA_Abort+0x5dc>)
 8023a64:	4293      	cmp	r3, r2
 8023a66:	d072      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023a68:	687b      	ldr	r3, [r7, #4]
 8023a6a:	681b      	ldr	r3, [r3, #0]
 8023a6c:	4a4d      	ldr	r2, [pc, #308]	; (8023ba4 <HAL_DMA_Abort+0x5e0>)
 8023a6e:	4293      	cmp	r3, r2
 8023a70:	d06d      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023a72:	687b      	ldr	r3, [r7, #4]
 8023a74:	681b      	ldr	r3, [r3, #0]
 8023a76:	4a4c      	ldr	r2, [pc, #304]	; (8023ba8 <HAL_DMA_Abort+0x5e4>)
 8023a78:	4293      	cmp	r3, r2
 8023a7a:	d068      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023a7c:	687b      	ldr	r3, [r7, #4]
 8023a7e:	681b      	ldr	r3, [r3, #0]
 8023a80:	4a4a      	ldr	r2, [pc, #296]	; (8023bac <HAL_DMA_Abort+0x5e8>)
 8023a82:	4293      	cmp	r3, r2
 8023a84:	d063      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023a86:	687b      	ldr	r3, [r7, #4]
 8023a88:	681b      	ldr	r3, [r3, #0]
 8023a8a:	4a49      	ldr	r2, [pc, #292]	; (8023bb0 <HAL_DMA_Abort+0x5ec>)
 8023a8c:	4293      	cmp	r3, r2
 8023a8e:	d05e      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023a90:	687b      	ldr	r3, [r7, #4]
 8023a92:	681b      	ldr	r3, [r3, #0]
 8023a94:	4a47      	ldr	r2, [pc, #284]	; (8023bb4 <HAL_DMA_Abort+0x5f0>)
 8023a96:	4293      	cmp	r3, r2
 8023a98:	d059      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023a9a:	687b      	ldr	r3, [r7, #4]
 8023a9c:	681b      	ldr	r3, [r3, #0]
 8023a9e:	4a46      	ldr	r2, [pc, #280]	; (8023bb8 <HAL_DMA_Abort+0x5f4>)
 8023aa0:	4293      	cmp	r3, r2
 8023aa2:	d054      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	681b      	ldr	r3, [r3, #0]
 8023aa8:	4a44      	ldr	r2, [pc, #272]	; (8023bbc <HAL_DMA_Abort+0x5f8>)
 8023aaa:	4293      	cmp	r3, r2
 8023aac:	d04f      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023aae:	687b      	ldr	r3, [r7, #4]
 8023ab0:	681b      	ldr	r3, [r3, #0]
 8023ab2:	4a43      	ldr	r2, [pc, #268]	; (8023bc0 <HAL_DMA_Abort+0x5fc>)
 8023ab4:	4293      	cmp	r3, r2
 8023ab6:	d04a      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023ab8:	687b      	ldr	r3, [r7, #4]
 8023aba:	681b      	ldr	r3, [r3, #0]
 8023abc:	4a41      	ldr	r2, [pc, #260]	; (8023bc4 <HAL_DMA_Abort+0x600>)
 8023abe:	4293      	cmp	r3, r2
 8023ac0:	d045      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023ac2:	687b      	ldr	r3, [r7, #4]
 8023ac4:	681b      	ldr	r3, [r3, #0]
 8023ac6:	4a40      	ldr	r2, [pc, #256]	; (8023bc8 <HAL_DMA_Abort+0x604>)
 8023ac8:	4293      	cmp	r3, r2
 8023aca:	d040      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023acc:	687b      	ldr	r3, [r7, #4]
 8023ace:	681b      	ldr	r3, [r3, #0]
 8023ad0:	4a3e      	ldr	r2, [pc, #248]	; (8023bcc <HAL_DMA_Abort+0x608>)
 8023ad2:	4293      	cmp	r3, r2
 8023ad4:	d03b      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023ad6:	687b      	ldr	r3, [r7, #4]
 8023ad8:	681b      	ldr	r3, [r3, #0]
 8023ada:	4a3d      	ldr	r2, [pc, #244]	; (8023bd0 <HAL_DMA_Abort+0x60c>)
 8023adc:	4293      	cmp	r3, r2
 8023ade:	d036      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023ae0:	687b      	ldr	r3, [r7, #4]
 8023ae2:	681b      	ldr	r3, [r3, #0]
 8023ae4:	4a3b      	ldr	r2, [pc, #236]	; (8023bd4 <HAL_DMA_Abort+0x610>)
 8023ae6:	4293      	cmp	r3, r2
 8023ae8:	d031      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023aea:	687b      	ldr	r3, [r7, #4]
 8023aec:	681b      	ldr	r3, [r3, #0]
 8023aee:	4a3a      	ldr	r2, [pc, #232]	; (8023bd8 <HAL_DMA_Abort+0x614>)
 8023af0:	4293      	cmp	r3, r2
 8023af2:	d02c      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023af4:	687b      	ldr	r3, [r7, #4]
 8023af6:	681b      	ldr	r3, [r3, #0]
 8023af8:	4a38      	ldr	r2, [pc, #224]	; (8023bdc <HAL_DMA_Abort+0x618>)
 8023afa:	4293      	cmp	r3, r2
 8023afc:	d027      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023afe:	687b      	ldr	r3, [r7, #4]
 8023b00:	681b      	ldr	r3, [r3, #0]
 8023b02:	4a37      	ldr	r2, [pc, #220]	; (8023be0 <HAL_DMA_Abort+0x61c>)
 8023b04:	4293      	cmp	r3, r2
 8023b06:	d022      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023b08:	687b      	ldr	r3, [r7, #4]
 8023b0a:	681b      	ldr	r3, [r3, #0]
 8023b0c:	4a35      	ldr	r2, [pc, #212]	; (8023be4 <HAL_DMA_Abort+0x620>)
 8023b0e:	4293      	cmp	r3, r2
 8023b10:	d01d      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023b12:	687b      	ldr	r3, [r7, #4]
 8023b14:	681b      	ldr	r3, [r3, #0]
 8023b16:	4a34      	ldr	r2, [pc, #208]	; (8023be8 <HAL_DMA_Abort+0x624>)
 8023b18:	4293      	cmp	r3, r2
 8023b1a:	d018      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	681b      	ldr	r3, [r3, #0]
 8023b20:	4a32      	ldr	r2, [pc, #200]	; (8023bec <HAL_DMA_Abort+0x628>)
 8023b22:	4293      	cmp	r3, r2
 8023b24:	d013      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023b26:	687b      	ldr	r3, [r7, #4]
 8023b28:	681b      	ldr	r3, [r3, #0]
 8023b2a:	4a31      	ldr	r2, [pc, #196]	; (8023bf0 <HAL_DMA_Abort+0x62c>)
 8023b2c:	4293      	cmp	r3, r2
 8023b2e:	d00e      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023b30:	687b      	ldr	r3, [r7, #4]
 8023b32:	681b      	ldr	r3, [r3, #0]
 8023b34:	4a2f      	ldr	r2, [pc, #188]	; (8023bf4 <HAL_DMA_Abort+0x630>)
 8023b36:	4293      	cmp	r3, r2
 8023b38:	d009      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023b3a:	687b      	ldr	r3, [r7, #4]
 8023b3c:	681b      	ldr	r3, [r3, #0]
 8023b3e:	4a2e      	ldr	r2, [pc, #184]	; (8023bf8 <HAL_DMA_Abort+0x634>)
 8023b40:	4293      	cmp	r3, r2
 8023b42:	d004      	beq.n	8023b4e <HAL_DMA_Abort+0x58a>
 8023b44:	687b      	ldr	r3, [r7, #4]
 8023b46:	681b      	ldr	r3, [r3, #0]
 8023b48:	4a2c      	ldr	r2, [pc, #176]	; (8023bfc <HAL_DMA_Abort+0x638>)
 8023b4a:	4293      	cmp	r3, r2
 8023b4c:	d101      	bne.n	8023b52 <HAL_DMA_Abort+0x58e>
 8023b4e:	2301      	movs	r3, #1
 8023b50:	e000      	b.n	8023b54 <HAL_DMA_Abort+0x590>
 8023b52:	2300      	movs	r3, #0
 8023b54:	2b00      	cmp	r3, #0
 8023b56:	d015      	beq.n	8023b84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023b5c:	687a      	ldr	r2, [r7, #4]
 8023b5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023b60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8023b62:	687b      	ldr	r3, [r7, #4]
 8023b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023b66:	2b00      	cmp	r3, #0
 8023b68:	d00c      	beq.n	8023b84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8023b6a:	687b      	ldr	r3, [r7, #4]
 8023b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023b6e:	681a      	ldr	r2, [r3, #0]
 8023b70:	687b      	ldr	r3, [r7, #4]
 8023b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023b78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8023b7a:	687b      	ldr	r3, [r7, #4]
 8023b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023b7e:	687a      	ldr	r2, [r7, #4]
 8023b80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8023b82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8023b84:	687b      	ldr	r3, [r7, #4]
 8023b86:	2201      	movs	r2, #1
 8023b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023b8c:	687b      	ldr	r3, [r7, #4]
 8023b8e:	2200      	movs	r2, #0
 8023b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8023b94:	2300      	movs	r3, #0
}
 8023b96:	4618      	mov	r0, r3
 8023b98:	3718      	adds	r7, #24
 8023b9a:	46bd      	mov	sp, r7
 8023b9c:	bd80      	pop	{r7, pc}
 8023b9e:	bf00      	nop
 8023ba0:	40020010 	.word	0x40020010
 8023ba4:	40020028 	.word	0x40020028
 8023ba8:	40020040 	.word	0x40020040
 8023bac:	40020058 	.word	0x40020058
 8023bb0:	40020070 	.word	0x40020070
 8023bb4:	40020088 	.word	0x40020088
 8023bb8:	400200a0 	.word	0x400200a0
 8023bbc:	400200b8 	.word	0x400200b8
 8023bc0:	40020410 	.word	0x40020410
 8023bc4:	40020428 	.word	0x40020428
 8023bc8:	40020440 	.word	0x40020440
 8023bcc:	40020458 	.word	0x40020458
 8023bd0:	40020470 	.word	0x40020470
 8023bd4:	40020488 	.word	0x40020488
 8023bd8:	400204a0 	.word	0x400204a0
 8023bdc:	400204b8 	.word	0x400204b8
 8023be0:	58025408 	.word	0x58025408
 8023be4:	5802541c 	.word	0x5802541c
 8023be8:	58025430 	.word	0x58025430
 8023bec:	58025444 	.word	0x58025444
 8023bf0:	58025458 	.word	0x58025458
 8023bf4:	5802546c 	.word	0x5802546c
 8023bf8:	58025480 	.word	0x58025480
 8023bfc:	58025494 	.word	0x58025494

08023c00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8023c00:	b580      	push	{r7, lr}
 8023c02:	b084      	sub	sp, #16
 8023c04:	af00      	add	r7, sp, #0
 8023c06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8023c08:	687b      	ldr	r3, [r7, #4]
 8023c0a:	2b00      	cmp	r3, #0
 8023c0c:	d101      	bne.n	8023c12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8023c0e:	2301      	movs	r3, #1
 8023c10:	e237      	b.n	8024082 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023c12:	687b      	ldr	r3, [r7, #4]
 8023c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023c18:	b2db      	uxtb	r3, r3
 8023c1a:	2b02      	cmp	r3, #2
 8023c1c:	d004      	beq.n	8023c28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023c1e:	687b      	ldr	r3, [r7, #4]
 8023c20:	2280      	movs	r2, #128	; 0x80
 8023c22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8023c24:	2301      	movs	r3, #1
 8023c26:	e22c      	b.n	8024082 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8023c28:	687b      	ldr	r3, [r7, #4]
 8023c2a:	681b      	ldr	r3, [r3, #0]
 8023c2c:	4a5c      	ldr	r2, [pc, #368]	; (8023da0 <HAL_DMA_Abort_IT+0x1a0>)
 8023c2e:	4293      	cmp	r3, r2
 8023c30:	d04a      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023c32:	687b      	ldr	r3, [r7, #4]
 8023c34:	681b      	ldr	r3, [r3, #0]
 8023c36:	4a5b      	ldr	r2, [pc, #364]	; (8023da4 <HAL_DMA_Abort_IT+0x1a4>)
 8023c38:	4293      	cmp	r3, r2
 8023c3a:	d045      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023c3c:	687b      	ldr	r3, [r7, #4]
 8023c3e:	681b      	ldr	r3, [r3, #0]
 8023c40:	4a59      	ldr	r2, [pc, #356]	; (8023da8 <HAL_DMA_Abort_IT+0x1a8>)
 8023c42:	4293      	cmp	r3, r2
 8023c44:	d040      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023c46:	687b      	ldr	r3, [r7, #4]
 8023c48:	681b      	ldr	r3, [r3, #0]
 8023c4a:	4a58      	ldr	r2, [pc, #352]	; (8023dac <HAL_DMA_Abort_IT+0x1ac>)
 8023c4c:	4293      	cmp	r3, r2
 8023c4e:	d03b      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023c50:	687b      	ldr	r3, [r7, #4]
 8023c52:	681b      	ldr	r3, [r3, #0]
 8023c54:	4a56      	ldr	r2, [pc, #344]	; (8023db0 <HAL_DMA_Abort_IT+0x1b0>)
 8023c56:	4293      	cmp	r3, r2
 8023c58:	d036      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023c5a:	687b      	ldr	r3, [r7, #4]
 8023c5c:	681b      	ldr	r3, [r3, #0]
 8023c5e:	4a55      	ldr	r2, [pc, #340]	; (8023db4 <HAL_DMA_Abort_IT+0x1b4>)
 8023c60:	4293      	cmp	r3, r2
 8023c62:	d031      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023c64:	687b      	ldr	r3, [r7, #4]
 8023c66:	681b      	ldr	r3, [r3, #0]
 8023c68:	4a53      	ldr	r2, [pc, #332]	; (8023db8 <HAL_DMA_Abort_IT+0x1b8>)
 8023c6a:	4293      	cmp	r3, r2
 8023c6c:	d02c      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023c6e:	687b      	ldr	r3, [r7, #4]
 8023c70:	681b      	ldr	r3, [r3, #0]
 8023c72:	4a52      	ldr	r2, [pc, #328]	; (8023dbc <HAL_DMA_Abort_IT+0x1bc>)
 8023c74:	4293      	cmp	r3, r2
 8023c76:	d027      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023c78:	687b      	ldr	r3, [r7, #4]
 8023c7a:	681b      	ldr	r3, [r3, #0]
 8023c7c:	4a50      	ldr	r2, [pc, #320]	; (8023dc0 <HAL_DMA_Abort_IT+0x1c0>)
 8023c7e:	4293      	cmp	r3, r2
 8023c80:	d022      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023c82:	687b      	ldr	r3, [r7, #4]
 8023c84:	681b      	ldr	r3, [r3, #0]
 8023c86:	4a4f      	ldr	r2, [pc, #316]	; (8023dc4 <HAL_DMA_Abort_IT+0x1c4>)
 8023c88:	4293      	cmp	r3, r2
 8023c8a:	d01d      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023c8c:	687b      	ldr	r3, [r7, #4]
 8023c8e:	681b      	ldr	r3, [r3, #0]
 8023c90:	4a4d      	ldr	r2, [pc, #308]	; (8023dc8 <HAL_DMA_Abort_IT+0x1c8>)
 8023c92:	4293      	cmp	r3, r2
 8023c94:	d018      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023c96:	687b      	ldr	r3, [r7, #4]
 8023c98:	681b      	ldr	r3, [r3, #0]
 8023c9a:	4a4c      	ldr	r2, [pc, #304]	; (8023dcc <HAL_DMA_Abort_IT+0x1cc>)
 8023c9c:	4293      	cmp	r3, r2
 8023c9e:	d013      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023ca0:	687b      	ldr	r3, [r7, #4]
 8023ca2:	681b      	ldr	r3, [r3, #0]
 8023ca4:	4a4a      	ldr	r2, [pc, #296]	; (8023dd0 <HAL_DMA_Abort_IT+0x1d0>)
 8023ca6:	4293      	cmp	r3, r2
 8023ca8:	d00e      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023caa:	687b      	ldr	r3, [r7, #4]
 8023cac:	681b      	ldr	r3, [r3, #0]
 8023cae:	4a49      	ldr	r2, [pc, #292]	; (8023dd4 <HAL_DMA_Abort_IT+0x1d4>)
 8023cb0:	4293      	cmp	r3, r2
 8023cb2:	d009      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023cb4:	687b      	ldr	r3, [r7, #4]
 8023cb6:	681b      	ldr	r3, [r3, #0]
 8023cb8:	4a47      	ldr	r2, [pc, #284]	; (8023dd8 <HAL_DMA_Abort_IT+0x1d8>)
 8023cba:	4293      	cmp	r3, r2
 8023cbc:	d004      	beq.n	8023cc8 <HAL_DMA_Abort_IT+0xc8>
 8023cbe:	687b      	ldr	r3, [r7, #4]
 8023cc0:	681b      	ldr	r3, [r3, #0]
 8023cc2:	4a46      	ldr	r2, [pc, #280]	; (8023ddc <HAL_DMA_Abort_IT+0x1dc>)
 8023cc4:	4293      	cmp	r3, r2
 8023cc6:	d101      	bne.n	8023ccc <HAL_DMA_Abort_IT+0xcc>
 8023cc8:	2301      	movs	r3, #1
 8023cca:	e000      	b.n	8023cce <HAL_DMA_Abort_IT+0xce>
 8023ccc:	2300      	movs	r3, #0
 8023cce:	2b00      	cmp	r3, #0
 8023cd0:	f000 8086 	beq.w	8023de0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8023cd4:	687b      	ldr	r3, [r7, #4]
 8023cd6:	2204      	movs	r2, #4
 8023cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8023cdc:	687b      	ldr	r3, [r7, #4]
 8023cde:	681b      	ldr	r3, [r3, #0]
 8023ce0:	4a2f      	ldr	r2, [pc, #188]	; (8023da0 <HAL_DMA_Abort_IT+0x1a0>)
 8023ce2:	4293      	cmp	r3, r2
 8023ce4:	d04a      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023ce6:	687b      	ldr	r3, [r7, #4]
 8023ce8:	681b      	ldr	r3, [r3, #0]
 8023cea:	4a2e      	ldr	r2, [pc, #184]	; (8023da4 <HAL_DMA_Abort_IT+0x1a4>)
 8023cec:	4293      	cmp	r3, r2
 8023cee:	d045      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023cf0:	687b      	ldr	r3, [r7, #4]
 8023cf2:	681b      	ldr	r3, [r3, #0]
 8023cf4:	4a2c      	ldr	r2, [pc, #176]	; (8023da8 <HAL_DMA_Abort_IT+0x1a8>)
 8023cf6:	4293      	cmp	r3, r2
 8023cf8:	d040      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023cfa:	687b      	ldr	r3, [r7, #4]
 8023cfc:	681b      	ldr	r3, [r3, #0]
 8023cfe:	4a2b      	ldr	r2, [pc, #172]	; (8023dac <HAL_DMA_Abort_IT+0x1ac>)
 8023d00:	4293      	cmp	r3, r2
 8023d02:	d03b      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023d04:	687b      	ldr	r3, [r7, #4]
 8023d06:	681b      	ldr	r3, [r3, #0]
 8023d08:	4a29      	ldr	r2, [pc, #164]	; (8023db0 <HAL_DMA_Abort_IT+0x1b0>)
 8023d0a:	4293      	cmp	r3, r2
 8023d0c:	d036      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023d0e:	687b      	ldr	r3, [r7, #4]
 8023d10:	681b      	ldr	r3, [r3, #0]
 8023d12:	4a28      	ldr	r2, [pc, #160]	; (8023db4 <HAL_DMA_Abort_IT+0x1b4>)
 8023d14:	4293      	cmp	r3, r2
 8023d16:	d031      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023d18:	687b      	ldr	r3, [r7, #4]
 8023d1a:	681b      	ldr	r3, [r3, #0]
 8023d1c:	4a26      	ldr	r2, [pc, #152]	; (8023db8 <HAL_DMA_Abort_IT+0x1b8>)
 8023d1e:	4293      	cmp	r3, r2
 8023d20:	d02c      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023d22:	687b      	ldr	r3, [r7, #4]
 8023d24:	681b      	ldr	r3, [r3, #0]
 8023d26:	4a25      	ldr	r2, [pc, #148]	; (8023dbc <HAL_DMA_Abort_IT+0x1bc>)
 8023d28:	4293      	cmp	r3, r2
 8023d2a:	d027      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023d2c:	687b      	ldr	r3, [r7, #4]
 8023d2e:	681b      	ldr	r3, [r3, #0]
 8023d30:	4a23      	ldr	r2, [pc, #140]	; (8023dc0 <HAL_DMA_Abort_IT+0x1c0>)
 8023d32:	4293      	cmp	r3, r2
 8023d34:	d022      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023d36:	687b      	ldr	r3, [r7, #4]
 8023d38:	681b      	ldr	r3, [r3, #0]
 8023d3a:	4a22      	ldr	r2, [pc, #136]	; (8023dc4 <HAL_DMA_Abort_IT+0x1c4>)
 8023d3c:	4293      	cmp	r3, r2
 8023d3e:	d01d      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023d40:	687b      	ldr	r3, [r7, #4]
 8023d42:	681b      	ldr	r3, [r3, #0]
 8023d44:	4a20      	ldr	r2, [pc, #128]	; (8023dc8 <HAL_DMA_Abort_IT+0x1c8>)
 8023d46:	4293      	cmp	r3, r2
 8023d48:	d018      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023d4a:	687b      	ldr	r3, [r7, #4]
 8023d4c:	681b      	ldr	r3, [r3, #0]
 8023d4e:	4a1f      	ldr	r2, [pc, #124]	; (8023dcc <HAL_DMA_Abort_IT+0x1cc>)
 8023d50:	4293      	cmp	r3, r2
 8023d52:	d013      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023d54:	687b      	ldr	r3, [r7, #4]
 8023d56:	681b      	ldr	r3, [r3, #0]
 8023d58:	4a1d      	ldr	r2, [pc, #116]	; (8023dd0 <HAL_DMA_Abort_IT+0x1d0>)
 8023d5a:	4293      	cmp	r3, r2
 8023d5c:	d00e      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023d5e:	687b      	ldr	r3, [r7, #4]
 8023d60:	681b      	ldr	r3, [r3, #0]
 8023d62:	4a1c      	ldr	r2, [pc, #112]	; (8023dd4 <HAL_DMA_Abort_IT+0x1d4>)
 8023d64:	4293      	cmp	r3, r2
 8023d66:	d009      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023d68:	687b      	ldr	r3, [r7, #4]
 8023d6a:	681b      	ldr	r3, [r3, #0]
 8023d6c:	4a1a      	ldr	r2, [pc, #104]	; (8023dd8 <HAL_DMA_Abort_IT+0x1d8>)
 8023d6e:	4293      	cmp	r3, r2
 8023d70:	d004      	beq.n	8023d7c <HAL_DMA_Abort_IT+0x17c>
 8023d72:	687b      	ldr	r3, [r7, #4]
 8023d74:	681b      	ldr	r3, [r3, #0]
 8023d76:	4a19      	ldr	r2, [pc, #100]	; (8023ddc <HAL_DMA_Abort_IT+0x1dc>)
 8023d78:	4293      	cmp	r3, r2
 8023d7a:	d108      	bne.n	8023d8e <HAL_DMA_Abort_IT+0x18e>
 8023d7c:	687b      	ldr	r3, [r7, #4]
 8023d7e:	681b      	ldr	r3, [r3, #0]
 8023d80:	681a      	ldr	r2, [r3, #0]
 8023d82:	687b      	ldr	r3, [r7, #4]
 8023d84:	681b      	ldr	r3, [r3, #0]
 8023d86:	f022 0201 	bic.w	r2, r2, #1
 8023d8a:	601a      	str	r2, [r3, #0]
 8023d8c:	e178      	b.n	8024080 <HAL_DMA_Abort_IT+0x480>
 8023d8e:	687b      	ldr	r3, [r7, #4]
 8023d90:	681b      	ldr	r3, [r3, #0]
 8023d92:	681a      	ldr	r2, [r3, #0]
 8023d94:	687b      	ldr	r3, [r7, #4]
 8023d96:	681b      	ldr	r3, [r3, #0]
 8023d98:	f022 0201 	bic.w	r2, r2, #1
 8023d9c:	601a      	str	r2, [r3, #0]
 8023d9e:	e16f      	b.n	8024080 <HAL_DMA_Abort_IT+0x480>
 8023da0:	40020010 	.word	0x40020010
 8023da4:	40020028 	.word	0x40020028
 8023da8:	40020040 	.word	0x40020040
 8023dac:	40020058 	.word	0x40020058
 8023db0:	40020070 	.word	0x40020070
 8023db4:	40020088 	.word	0x40020088
 8023db8:	400200a0 	.word	0x400200a0
 8023dbc:	400200b8 	.word	0x400200b8
 8023dc0:	40020410 	.word	0x40020410
 8023dc4:	40020428 	.word	0x40020428
 8023dc8:	40020440 	.word	0x40020440
 8023dcc:	40020458 	.word	0x40020458
 8023dd0:	40020470 	.word	0x40020470
 8023dd4:	40020488 	.word	0x40020488
 8023dd8:	400204a0 	.word	0x400204a0
 8023ddc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8023de0:	687b      	ldr	r3, [r7, #4]
 8023de2:	681b      	ldr	r3, [r3, #0]
 8023de4:	681a      	ldr	r2, [r3, #0]
 8023de6:	687b      	ldr	r3, [r7, #4]
 8023de8:	681b      	ldr	r3, [r3, #0]
 8023dea:	f022 020e 	bic.w	r2, r2, #14
 8023dee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8023df0:	687b      	ldr	r3, [r7, #4]
 8023df2:	681b      	ldr	r3, [r3, #0]
 8023df4:	4a6c      	ldr	r2, [pc, #432]	; (8023fa8 <HAL_DMA_Abort_IT+0x3a8>)
 8023df6:	4293      	cmp	r3, r2
 8023df8:	d04a      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023dfa:	687b      	ldr	r3, [r7, #4]
 8023dfc:	681b      	ldr	r3, [r3, #0]
 8023dfe:	4a6b      	ldr	r2, [pc, #428]	; (8023fac <HAL_DMA_Abort_IT+0x3ac>)
 8023e00:	4293      	cmp	r3, r2
 8023e02:	d045      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e04:	687b      	ldr	r3, [r7, #4]
 8023e06:	681b      	ldr	r3, [r3, #0]
 8023e08:	4a69      	ldr	r2, [pc, #420]	; (8023fb0 <HAL_DMA_Abort_IT+0x3b0>)
 8023e0a:	4293      	cmp	r3, r2
 8023e0c:	d040      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e0e:	687b      	ldr	r3, [r7, #4]
 8023e10:	681b      	ldr	r3, [r3, #0]
 8023e12:	4a68      	ldr	r2, [pc, #416]	; (8023fb4 <HAL_DMA_Abort_IT+0x3b4>)
 8023e14:	4293      	cmp	r3, r2
 8023e16:	d03b      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e18:	687b      	ldr	r3, [r7, #4]
 8023e1a:	681b      	ldr	r3, [r3, #0]
 8023e1c:	4a66      	ldr	r2, [pc, #408]	; (8023fb8 <HAL_DMA_Abort_IT+0x3b8>)
 8023e1e:	4293      	cmp	r3, r2
 8023e20:	d036      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e22:	687b      	ldr	r3, [r7, #4]
 8023e24:	681b      	ldr	r3, [r3, #0]
 8023e26:	4a65      	ldr	r2, [pc, #404]	; (8023fbc <HAL_DMA_Abort_IT+0x3bc>)
 8023e28:	4293      	cmp	r3, r2
 8023e2a:	d031      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e2c:	687b      	ldr	r3, [r7, #4]
 8023e2e:	681b      	ldr	r3, [r3, #0]
 8023e30:	4a63      	ldr	r2, [pc, #396]	; (8023fc0 <HAL_DMA_Abort_IT+0x3c0>)
 8023e32:	4293      	cmp	r3, r2
 8023e34:	d02c      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e36:	687b      	ldr	r3, [r7, #4]
 8023e38:	681b      	ldr	r3, [r3, #0]
 8023e3a:	4a62      	ldr	r2, [pc, #392]	; (8023fc4 <HAL_DMA_Abort_IT+0x3c4>)
 8023e3c:	4293      	cmp	r3, r2
 8023e3e:	d027      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e40:	687b      	ldr	r3, [r7, #4]
 8023e42:	681b      	ldr	r3, [r3, #0]
 8023e44:	4a60      	ldr	r2, [pc, #384]	; (8023fc8 <HAL_DMA_Abort_IT+0x3c8>)
 8023e46:	4293      	cmp	r3, r2
 8023e48:	d022      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e4a:	687b      	ldr	r3, [r7, #4]
 8023e4c:	681b      	ldr	r3, [r3, #0]
 8023e4e:	4a5f      	ldr	r2, [pc, #380]	; (8023fcc <HAL_DMA_Abort_IT+0x3cc>)
 8023e50:	4293      	cmp	r3, r2
 8023e52:	d01d      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e54:	687b      	ldr	r3, [r7, #4]
 8023e56:	681b      	ldr	r3, [r3, #0]
 8023e58:	4a5d      	ldr	r2, [pc, #372]	; (8023fd0 <HAL_DMA_Abort_IT+0x3d0>)
 8023e5a:	4293      	cmp	r3, r2
 8023e5c:	d018      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e5e:	687b      	ldr	r3, [r7, #4]
 8023e60:	681b      	ldr	r3, [r3, #0]
 8023e62:	4a5c      	ldr	r2, [pc, #368]	; (8023fd4 <HAL_DMA_Abort_IT+0x3d4>)
 8023e64:	4293      	cmp	r3, r2
 8023e66:	d013      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e68:	687b      	ldr	r3, [r7, #4]
 8023e6a:	681b      	ldr	r3, [r3, #0]
 8023e6c:	4a5a      	ldr	r2, [pc, #360]	; (8023fd8 <HAL_DMA_Abort_IT+0x3d8>)
 8023e6e:	4293      	cmp	r3, r2
 8023e70:	d00e      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e72:	687b      	ldr	r3, [r7, #4]
 8023e74:	681b      	ldr	r3, [r3, #0]
 8023e76:	4a59      	ldr	r2, [pc, #356]	; (8023fdc <HAL_DMA_Abort_IT+0x3dc>)
 8023e78:	4293      	cmp	r3, r2
 8023e7a:	d009      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e7c:	687b      	ldr	r3, [r7, #4]
 8023e7e:	681b      	ldr	r3, [r3, #0]
 8023e80:	4a57      	ldr	r2, [pc, #348]	; (8023fe0 <HAL_DMA_Abort_IT+0x3e0>)
 8023e82:	4293      	cmp	r3, r2
 8023e84:	d004      	beq.n	8023e90 <HAL_DMA_Abort_IT+0x290>
 8023e86:	687b      	ldr	r3, [r7, #4]
 8023e88:	681b      	ldr	r3, [r3, #0]
 8023e8a:	4a56      	ldr	r2, [pc, #344]	; (8023fe4 <HAL_DMA_Abort_IT+0x3e4>)
 8023e8c:	4293      	cmp	r3, r2
 8023e8e:	d108      	bne.n	8023ea2 <HAL_DMA_Abort_IT+0x2a2>
 8023e90:	687b      	ldr	r3, [r7, #4]
 8023e92:	681b      	ldr	r3, [r3, #0]
 8023e94:	681a      	ldr	r2, [r3, #0]
 8023e96:	687b      	ldr	r3, [r7, #4]
 8023e98:	681b      	ldr	r3, [r3, #0]
 8023e9a:	f022 0201 	bic.w	r2, r2, #1
 8023e9e:	601a      	str	r2, [r3, #0]
 8023ea0:	e007      	b.n	8023eb2 <HAL_DMA_Abort_IT+0x2b2>
 8023ea2:	687b      	ldr	r3, [r7, #4]
 8023ea4:	681b      	ldr	r3, [r3, #0]
 8023ea6:	681a      	ldr	r2, [r3, #0]
 8023ea8:	687b      	ldr	r3, [r7, #4]
 8023eaa:	681b      	ldr	r3, [r3, #0]
 8023eac:	f022 0201 	bic.w	r2, r2, #1
 8023eb0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8023eb2:	687b      	ldr	r3, [r7, #4]
 8023eb4:	681b      	ldr	r3, [r3, #0]
 8023eb6:	4a3c      	ldr	r2, [pc, #240]	; (8023fa8 <HAL_DMA_Abort_IT+0x3a8>)
 8023eb8:	4293      	cmp	r3, r2
 8023eba:	d072      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023ebc:	687b      	ldr	r3, [r7, #4]
 8023ebe:	681b      	ldr	r3, [r3, #0]
 8023ec0:	4a3a      	ldr	r2, [pc, #232]	; (8023fac <HAL_DMA_Abort_IT+0x3ac>)
 8023ec2:	4293      	cmp	r3, r2
 8023ec4:	d06d      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023ec6:	687b      	ldr	r3, [r7, #4]
 8023ec8:	681b      	ldr	r3, [r3, #0]
 8023eca:	4a39      	ldr	r2, [pc, #228]	; (8023fb0 <HAL_DMA_Abort_IT+0x3b0>)
 8023ecc:	4293      	cmp	r3, r2
 8023ece:	d068      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023ed0:	687b      	ldr	r3, [r7, #4]
 8023ed2:	681b      	ldr	r3, [r3, #0]
 8023ed4:	4a37      	ldr	r2, [pc, #220]	; (8023fb4 <HAL_DMA_Abort_IT+0x3b4>)
 8023ed6:	4293      	cmp	r3, r2
 8023ed8:	d063      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023eda:	687b      	ldr	r3, [r7, #4]
 8023edc:	681b      	ldr	r3, [r3, #0]
 8023ede:	4a36      	ldr	r2, [pc, #216]	; (8023fb8 <HAL_DMA_Abort_IT+0x3b8>)
 8023ee0:	4293      	cmp	r3, r2
 8023ee2:	d05e      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023ee4:	687b      	ldr	r3, [r7, #4]
 8023ee6:	681b      	ldr	r3, [r3, #0]
 8023ee8:	4a34      	ldr	r2, [pc, #208]	; (8023fbc <HAL_DMA_Abort_IT+0x3bc>)
 8023eea:	4293      	cmp	r3, r2
 8023eec:	d059      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023eee:	687b      	ldr	r3, [r7, #4]
 8023ef0:	681b      	ldr	r3, [r3, #0]
 8023ef2:	4a33      	ldr	r2, [pc, #204]	; (8023fc0 <HAL_DMA_Abort_IT+0x3c0>)
 8023ef4:	4293      	cmp	r3, r2
 8023ef6:	d054      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023ef8:	687b      	ldr	r3, [r7, #4]
 8023efa:	681b      	ldr	r3, [r3, #0]
 8023efc:	4a31      	ldr	r2, [pc, #196]	; (8023fc4 <HAL_DMA_Abort_IT+0x3c4>)
 8023efe:	4293      	cmp	r3, r2
 8023f00:	d04f      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f02:	687b      	ldr	r3, [r7, #4]
 8023f04:	681b      	ldr	r3, [r3, #0]
 8023f06:	4a30      	ldr	r2, [pc, #192]	; (8023fc8 <HAL_DMA_Abort_IT+0x3c8>)
 8023f08:	4293      	cmp	r3, r2
 8023f0a:	d04a      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f0c:	687b      	ldr	r3, [r7, #4]
 8023f0e:	681b      	ldr	r3, [r3, #0]
 8023f10:	4a2e      	ldr	r2, [pc, #184]	; (8023fcc <HAL_DMA_Abort_IT+0x3cc>)
 8023f12:	4293      	cmp	r3, r2
 8023f14:	d045      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f16:	687b      	ldr	r3, [r7, #4]
 8023f18:	681b      	ldr	r3, [r3, #0]
 8023f1a:	4a2d      	ldr	r2, [pc, #180]	; (8023fd0 <HAL_DMA_Abort_IT+0x3d0>)
 8023f1c:	4293      	cmp	r3, r2
 8023f1e:	d040      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f20:	687b      	ldr	r3, [r7, #4]
 8023f22:	681b      	ldr	r3, [r3, #0]
 8023f24:	4a2b      	ldr	r2, [pc, #172]	; (8023fd4 <HAL_DMA_Abort_IT+0x3d4>)
 8023f26:	4293      	cmp	r3, r2
 8023f28:	d03b      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f2a:	687b      	ldr	r3, [r7, #4]
 8023f2c:	681b      	ldr	r3, [r3, #0]
 8023f2e:	4a2a      	ldr	r2, [pc, #168]	; (8023fd8 <HAL_DMA_Abort_IT+0x3d8>)
 8023f30:	4293      	cmp	r3, r2
 8023f32:	d036      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f34:	687b      	ldr	r3, [r7, #4]
 8023f36:	681b      	ldr	r3, [r3, #0]
 8023f38:	4a28      	ldr	r2, [pc, #160]	; (8023fdc <HAL_DMA_Abort_IT+0x3dc>)
 8023f3a:	4293      	cmp	r3, r2
 8023f3c:	d031      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f3e:	687b      	ldr	r3, [r7, #4]
 8023f40:	681b      	ldr	r3, [r3, #0]
 8023f42:	4a27      	ldr	r2, [pc, #156]	; (8023fe0 <HAL_DMA_Abort_IT+0x3e0>)
 8023f44:	4293      	cmp	r3, r2
 8023f46:	d02c      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f48:	687b      	ldr	r3, [r7, #4]
 8023f4a:	681b      	ldr	r3, [r3, #0]
 8023f4c:	4a25      	ldr	r2, [pc, #148]	; (8023fe4 <HAL_DMA_Abort_IT+0x3e4>)
 8023f4e:	4293      	cmp	r3, r2
 8023f50:	d027      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f52:	687b      	ldr	r3, [r7, #4]
 8023f54:	681b      	ldr	r3, [r3, #0]
 8023f56:	4a24      	ldr	r2, [pc, #144]	; (8023fe8 <HAL_DMA_Abort_IT+0x3e8>)
 8023f58:	4293      	cmp	r3, r2
 8023f5a:	d022      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f5c:	687b      	ldr	r3, [r7, #4]
 8023f5e:	681b      	ldr	r3, [r3, #0]
 8023f60:	4a22      	ldr	r2, [pc, #136]	; (8023fec <HAL_DMA_Abort_IT+0x3ec>)
 8023f62:	4293      	cmp	r3, r2
 8023f64:	d01d      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f66:	687b      	ldr	r3, [r7, #4]
 8023f68:	681b      	ldr	r3, [r3, #0]
 8023f6a:	4a21      	ldr	r2, [pc, #132]	; (8023ff0 <HAL_DMA_Abort_IT+0x3f0>)
 8023f6c:	4293      	cmp	r3, r2
 8023f6e:	d018      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f70:	687b      	ldr	r3, [r7, #4]
 8023f72:	681b      	ldr	r3, [r3, #0]
 8023f74:	4a1f      	ldr	r2, [pc, #124]	; (8023ff4 <HAL_DMA_Abort_IT+0x3f4>)
 8023f76:	4293      	cmp	r3, r2
 8023f78:	d013      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f7a:	687b      	ldr	r3, [r7, #4]
 8023f7c:	681b      	ldr	r3, [r3, #0]
 8023f7e:	4a1e      	ldr	r2, [pc, #120]	; (8023ff8 <HAL_DMA_Abort_IT+0x3f8>)
 8023f80:	4293      	cmp	r3, r2
 8023f82:	d00e      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f84:	687b      	ldr	r3, [r7, #4]
 8023f86:	681b      	ldr	r3, [r3, #0]
 8023f88:	4a1c      	ldr	r2, [pc, #112]	; (8023ffc <HAL_DMA_Abort_IT+0x3fc>)
 8023f8a:	4293      	cmp	r3, r2
 8023f8c:	d009      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f8e:	687b      	ldr	r3, [r7, #4]
 8023f90:	681b      	ldr	r3, [r3, #0]
 8023f92:	4a1b      	ldr	r2, [pc, #108]	; (8024000 <HAL_DMA_Abort_IT+0x400>)
 8023f94:	4293      	cmp	r3, r2
 8023f96:	d004      	beq.n	8023fa2 <HAL_DMA_Abort_IT+0x3a2>
 8023f98:	687b      	ldr	r3, [r7, #4]
 8023f9a:	681b      	ldr	r3, [r3, #0]
 8023f9c:	4a19      	ldr	r2, [pc, #100]	; (8024004 <HAL_DMA_Abort_IT+0x404>)
 8023f9e:	4293      	cmp	r3, r2
 8023fa0:	d132      	bne.n	8024008 <HAL_DMA_Abort_IT+0x408>
 8023fa2:	2301      	movs	r3, #1
 8023fa4:	e031      	b.n	802400a <HAL_DMA_Abort_IT+0x40a>
 8023fa6:	bf00      	nop
 8023fa8:	40020010 	.word	0x40020010
 8023fac:	40020028 	.word	0x40020028
 8023fb0:	40020040 	.word	0x40020040
 8023fb4:	40020058 	.word	0x40020058
 8023fb8:	40020070 	.word	0x40020070
 8023fbc:	40020088 	.word	0x40020088
 8023fc0:	400200a0 	.word	0x400200a0
 8023fc4:	400200b8 	.word	0x400200b8
 8023fc8:	40020410 	.word	0x40020410
 8023fcc:	40020428 	.word	0x40020428
 8023fd0:	40020440 	.word	0x40020440
 8023fd4:	40020458 	.word	0x40020458
 8023fd8:	40020470 	.word	0x40020470
 8023fdc:	40020488 	.word	0x40020488
 8023fe0:	400204a0 	.word	0x400204a0
 8023fe4:	400204b8 	.word	0x400204b8
 8023fe8:	58025408 	.word	0x58025408
 8023fec:	5802541c 	.word	0x5802541c
 8023ff0:	58025430 	.word	0x58025430
 8023ff4:	58025444 	.word	0x58025444
 8023ff8:	58025458 	.word	0x58025458
 8023ffc:	5802546c 	.word	0x5802546c
 8024000:	58025480 	.word	0x58025480
 8024004:	58025494 	.word	0x58025494
 8024008:	2300      	movs	r3, #0
 802400a:	2b00      	cmp	r3, #0
 802400c:	d028      	beq.n	8024060 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802400e:	687b      	ldr	r3, [r7, #4]
 8024010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024012:	681a      	ldr	r2, [r3, #0]
 8024014:	687b      	ldr	r3, [r7, #4]
 8024016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802401c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802401e:	687b      	ldr	r3, [r7, #4]
 8024020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024022:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8024024:	687b      	ldr	r3, [r7, #4]
 8024026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024028:	f003 031f 	and.w	r3, r3, #31
 802402c:	2201      	movs	r2, #1
 802402e:	409a      	lsls	r2, r3
 8024030:	68fb      	ldr	r3, [r7, #12]
 8024032:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8024034:	687b      	ldr	r3, [r7, #4]
 8024036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024038:	687a      	ldr	r2, [r7, #4]
 802403a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802403c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 802403e:	687b      	ldr	r3, [r7, #4]
 8024040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024042:	2b00      	cmp	r3, #0
 8024044:	d00c      	beq.n	8024060 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8024046:	687b      	ldr	r3, [r7, #4]
 8024048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802404a:	681a      	ldr	r2, [r3, #0]
 802404c:	687b      	ldr	r3, [r7, #4]
 802404e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024054:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8024056:	687b      	ldr	r3, [r7, #4]
 8024058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802405a:	687a      	ldr	r2, [r7, #4]
 802405c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802405e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8024060:	687b      	ldr	r3, [r7, #4]
 8024062:	2201      	movs	r2, #1
 8024064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8024068:	687b      	ldr	r3, [r7, #4]
 802406a:	2200      	movs	r2, #0
 802406c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8024070:	687b      	ldr	r3, [r7, #4]
 8024072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024074:	2b00      	cmp	r3, #0
 8024076:	d003      	beq.n	8024080 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8024078:	687b      	ldr	r3, [r7, #4]
 802407a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802407c:	6878      	ldr	r0, [r7, #4]
 802407e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8024080:	2300      	movs	r3, #0
}
 8024082:	4618      	mov	r0, r3
 8024084:	3710      	adds	r7, #16
 8024086:	46bd      	mov	sp, r7
 8024088:	bd80      	pop	{r7, pc}
 802408a:	bf00      	nop

0802408c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802408c:	b580      	push	{r7, lr}
 802408e:	b08a      	sub	sp, #40	; 0x28
 8024090:	af00      	add	r7, sp, #0
 8024092:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8024094:	2300      	movs	r3, #0
 8024096:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8024098:	4b67      	ldr	r3, [pc, #412]	; (8024238 <HAL_DMA_IRQHandler+0x1ac>)
 802409a:	681b      	ldr	r3, [r3, #0]
 802409c:	4a67      	ldr	r2, [pc, #412]	; (802423c <HAL_DMA_IRQHandler+0x1b0>)
 802409e:	fba2 2303 	umull	r2, r3, r2, r3
 80240a2:	0a9b      	lsrs	r3, r3, #10
 80240a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80240a6:	687b      	ldr	r3, [r7, #4]
 80240a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80240aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80240ac:	687b      	ldr	r3, [r7, #4]
 80240ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80240b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80240b2:	6a3b      	ldr	r3, [r7, #32]
 80240b4:	681b      	ldr	r3, [r3, #0]
 80240b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80240b8:	69fb      	ldr	r3, [r7, #28]
 80240ba:	681b      	ldr	r3, [r3, #0]
 80240bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80240be:	687b      	ldr	r3, [r7, #4]
 80240c0:	681b      	ldr	r3, [r3, #0]
 80240c2:	4a5f      	ldr	r2, [pc, #380]	; (8024240 <HAL_DMA_IRQHandler+0x1b4>)
 80240c4:	4293      	cmp	r3, r2
 80240c6:	d04a      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 80240c8:	687b      	ldr	r3, [r7, #4]
 80240ca:	681b      	ldr	r3, [r3, #0]
 80240cc:	4a5d      	ldr	r2, [pc, #372]	; (8024244 <HAL_DMA_IRQHandler+0x1b8>)
 80240ce:	4293      	cmp	r3, r2
 80240d0:	d045      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 80240d2:	687b      	ldr	r3, [r7, #4]
 80240d4:	681b      	ldr	r3, [r3, #0]
 80240d6:	4a5c      	ldr	r2, [pc, #368]	; (8024248 <HAL_DMA_IRQHandler+0x1bc>)
 80240d8:	4293      	cmp	r3, r2
 80240da:	d040      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 80240dc:	687b      	ldr	r3, [r7, #4]
 80240de:	681b      	ldr	r3, [r3, #0]
 80240e0:	4a5a      	ldr	r2, [pc, #360]	; (802424c <HAL_DMA_IRQHandler+0x1c0>)
 80240e2:	4293      	cmp	r3, r2
 80240e4:	d03b      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 80240e6:	687b      	ldr	r3, [r7, #4]
 80240e8:	681b      	ldr	r3, [r3, #0]
 80240ea:	4a59      	ldr	r2, [pc, #356]	; (8024250 <HAL_DMA_IRQHandler+0x1c4>)
 80240ec:	4293      	cmp	r3, r2
 80240ee:	d036      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 80240f0:	687b      	ldr	r3, [r7, #4]
 80240f2:	681b      	ldr	r3, [r3, #0]
 80240f4:	4a57      	ldr	r2, [pc, #348]	; (8024254 <HAL_DMA_IRQHandler+0x1c8>)
 80240f6:	4293      	cmp	r3, r2
 80240f8:	d031      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 80240fa:	687b      	ldr	r3, [r7, #4]
 80240fc:	681b      	ldr	r3, [r3, #0]
 80240fe:	4a56      	ldr	r2, [pc, #344]	; (8024258 <HAL_DMA_IRQHandler+0x1cc>)
 8024100:	4293      	cmp	r3, r2
 8024102:	d02c      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 8024104:	687b      	ldr	r3, [r7, #4]
 8024106:	681b      	ldr	r3, [r3, #0]
 8024108:	4a54      	ldr	r2, [pc, #336]	; (802425c <HAL_DMA_IRQHandler+0x1d0>)
 802410a:	4293      	cmp	r3, r2
 802410c:	d027      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 802410e:	687b      	ldr	r3, [r7, #4]
 8024110:	681b      	ldr	r3, [r3, #0]
 8024112:	4a53      	ldr	r2, [pc, #332]	; (8024260 <HAL_DMA_IRQHandler+0x1d4>)
 8024114:	4293      	cmp	r3, r2
 8024116:	d022      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 8024118:	687b      	ldr	r3, [r7, #4]
 802411a:	681b      	ldr	r3, [r3, #0]
 802411c:	4a51      	ldr	r2, [pc, #324]	; (8024264 <HAL_DMA_IRQHandler+0x1d8>)
 802411e:	4293      	cmp	r3, r2
 8024120:	d01d      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 8024122:	687b      	ldr	r3, [r7, #4]
 8024124:	681b      	ldr	r3, [r3, #0]
 8024126:	4a50      	ldr	r2, [pc, #320]	; (8024268 <HAL_DMA_IRQHandler+0x1dc>)
 8024128:	4293      	cmp	r3, r2
 802412a:	d018      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 802412c:	687b      	ldr	r3, [r7, #4]
 802412e:	681b      	ldr	r3, [r3, #0]
 8024130:	4a4e      	ldr	r2, [pc, #312]	; (802426c <HAL_DMA_IRQHandler+0x1e0>)
 8024132:	4293      	cmp	r3, r2
 8024134:	d013      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 8024136:	687b      	ldr	r3, [r7, #4]
 8024138:	681b      	ldr	r3, [r3, #0]
 802413a:	4a4d      	ldr	r2, [pc, #308]	; (8024270 <HAL_DMA_IRQHandler+0x1e4>)
 802413c:	4293      	cmp	r3, r2
 802413e:	d00e      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 8024140:	687b      	ldr	r3, [r7, #4]
 8024142:	681b      	ldr	r3, [r3, #0]
 8024144:	4a4b      	ldr	r2, [pc, #300]	; (8024274 <HAL_DMA_IRQHandler+0x1e8>)
 8024146:	4293      	cmp	r3, r2
 8024148:	d009      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 802414a:	687b      	ldr	r3, [r7, #4]
 802414c:	681b      	ldr	r3, [r3, #0]
 802414e:	4a4a      	ldr	r2, [pc, #296]	; (8024278 <HAL_DMA_IRQHandler+0x1ec>)
 8024150:	4293      	cmp	r3, r2
 8024152:	d004      	beq.n	802415e <HAL_DMA_IRQHandler+0xd2>
 8024154:	687b      	ldr	r3, [r7, #4]
 8024156:	681b      	ldr	r3, [r3, #0]
 8024158:	4a48      	ldr	r2, [pc, #288]	; (802427c <HAL_DMA_IRQHandler+0x1f0>)
 802415a:	4293      	cmp	r3, r2
 802415c:	d101      	bne.n	8024162 <HAL_DMA_IRQHandler+0xd6>
 802415e:	2301      	movs	r3, #1
 8024160:	e000      	b.n	8024164 <HAL_DMA_IRQHandler+0xd8>
 8024162:	2300      	movs	r3, #0
 8024164:	2b00      	cmp	r3, #0
 8024166:	f000 842b 	beq.w	80249c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802416a:	687b      	ldr	r3, [r7, #4]
 802416c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802416e:	f003 031f 	and.w	r3, r3, #31
 8024172:	2208      	movs	r2, #8
 8024174:	409a      	lsls	r2, r3
 8024176:	69bb      	ldr	r3, [r7, #24]
 8024178:	4013      	ands	r3, r2
 802417a:	2b00      	cmp	r3, #0
 802417c:	f000 80a2 	beq.w	80242c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8024180:	687b      	ldr	r3, [r7, #4]
 8024182:	681b      	ldr	r3, [r3, #0]
 8024184:	4a2e      	ldr	r2, [pc, #184]	; (8024240 <HAL_DMA_IRQHandler+0x1b4>)
 8024186:	4293      	cmp	r3, r2
 8024188:	d04a      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 802418a:	687b      	ldr	r3, [r7, #4]
 802418c:	681b      	ldr	r3, [r3, #0]
 802418e:	4a2d      	ldr	r2, [pc, #180]	; (8024244 <HAL_DMA_IRQHandler+0x1b8>)
 8024190:	4293      	cmp	r3, r2
 8024192:	d045      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 8024194:	687b      	ldr	r3, [r7, #4]
 8024196:	681b      	ldr	r3, [r3, #0]
 8024198:	4a2b      	ldr	r2, [pc, #172]	; (8024248 <HAL_DMA_IRQHandler+0x1bc>)
 802419a:	4293      	cmp	r3, r2
 802419c:	d040      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 802419e:	687b      	ldr	r3, [r7, #4]
 80241a0:	681b      	ldr	r3, [r3, #0]
 80241a2:	4a2a      	ldr	r2, [pc, #168]	; (802424c <HAL_DMA_IRQHandler+0x1c0>)
 80241a4:	4293      	cmp	r3, r2
 80241a6:	d03b      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 80241a8:	687b      	ldr	r3, [r7, #4]
 80241aa:	681b      	ldr	r3, [r3, #0]
 80241ac:	4a28      	ldr	r2, [pc, #160]	; (8024250 <HAL_DMA_IRQHandler+0x1c4>)
 80241ae:	4293      	cmp	r3, r2
 80241b0:	d036      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 80241b2:	687b      	ldr	r3, [r7, #4]
 80241b4:	681b      	ldr	r3, [r3, #0]
 80241b6:	4a27      	ldr	r2, [pc, #156]	; (8024254 <HAL_DMA_IRQHandler+0x1c8>)
 80241b8:	4293      	cmp	r3, r2
 80241ba:	d031      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 80241bc:	687b      	ldr	r3, [r7, #4]
 80241be:	681b      	ldr	r3, [r3, #0]
 80241c0:	4a25      	ldr	r2, [pc, #148]	; (8024258 <HAL_DMA_IRQHandler+0x1cc>)
 80241c2:	4293      	cmp	r3, r2
 80241c4:	d02c      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 80241c6:	687b      	ldr	r3, [r7, #4]
 80241c8:	681b      	ldr	r3, [r3, #0]
 80241ca:	4a24      	ldr	r2, [pc, #144]	; (802425c <HAL_DMA_IRQHandler+0x1d0>)
 80241cc:	4293      	cmp	r3, r2
 80241ce:	d027      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 80241d0:	687b      	ldr	r3, [r7, #4]
 80241d2:	681b      	ldr	r3, [r3, #0]
 80241d4:	4a22      	ldr	r2, [pc, #136]	; (8024260 <HAL_DMA_IRQHandler+0x1d4>)
 80241d6:	4293      	cmp	r3, r2
 80241d8:	d022      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 80241da:	687b      	ldr	r3, [r7, #4]
 80241dc:	681b      	ldr	r3, [r3, #0]
 80241de:	4a21      	ldr	r2, [pc, #132]	; (8024264 <HAL_DMA_IRQHandler+0x1d8>)
 80241e0:	4293      	cmp	r3, r2
 80241e2:	d01d      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 80241e4:	687b      	ldr	r3, [r7, #4]
 80241e6:	681b      	ldr	r3, [r3, #0]
 80241e8:	4a1f      	ldr	r2, [pc, #124]	; (8024268 <HAL_DMA_IRQHandler+0x1dc>)
 80241ea:	4293      	cmp	r3, r2
 80241ec:	d018      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 80241ee:	687b      	ldr	r3, [r7, #4]
 80241f0:	681b      	ldr	r3, [r3, #0]
 80241f2:	4a1e      	ldr	r2, [pc, #120]	; (802426c <HAL_DMA_IRQHandler+0x1e0>)
 80241f4:	4293      	cmp	r3, r2
 80241f6:	d013      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 80241f8:	687b      	ldr	r3, [r7, #4]
 80241fa:	681b      	ldr	r3, [r3, #0]
 80241fc:	4a1c      	ldr	r2, [pc, #112]	; (8024270 <HAL_DMA_IRQHandler+0x1e4>)
 80241fe:	4293      	cmp	r3, r2
 8024200:	d00e      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 8024202:	687b      	ldr	r3, [r7, #4]
 8024204:	681b      	ldr	r3, [r3, #0]
 8024206:	4a1b      	ldr	r2, [pc, #108]	; (8024274 <HAL_DMA_IRQHandler+0x1e8>)
 8024208:	4293      	cmp	r3, r2
 802420a:	d009      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 802420c:	687b      	ldr	r3, [r7, #4]
 802420e:	681b      	ldr	r3, [r3, #0]
 8024210:	4a19      	ldr	r2, [pc, #100]	; (8024278 <HAL_DMA_IRQHandler+0x1ec>)
 8024212:	4293      	cmp	r3, r2
 8024214:	d004      	beq.n	8024220 <HAL_DMA_IRQHandler+0x194>
 8024216:	687b      	ldr	r3, [r7, #4]
 8024218:	681b      	ldr	r3, [r3, #0]
 802421a:	4a18      	ldr	r2, [pc, #96]	; (802427c <HAL_DMA_IRQHandler+0x1f0>)
 802421c:	4293      	cmp	r3, r2
 802421e:	d12f      	bne.n	8024280 <HAL_DMA_IRQHandler+0x1f4>
 8024220:	687b      	ldr	r3, [r7, #4]
 8024222:	681b      	ldr	r3, [r3, #0]
 8024224:	681b      	ldr	r3, [r3, #0]
 8024226:	f003 0304 	and.w	r3, r3, #4
 802422a:	2b00      	cmp	r3, #0
 802422c:	bf14      	ite	ne
 802422e:	2301      	movne	r3, #1
 8024230:	2300      	moveq	r3, #0
 8024232:	b2db      	uxtb	r3, r3
 8024234:	e02e      	b.n	8024294 <HAL_DMA_IRQHandler+0x208>
 8024236:	bf00      	nop
 8024238:	24000000 	.word	0x24000000
 802423c:	1b4e81b5 	.word	0x1b4e81b5
 8024240:	40020010 	.word	0x40020010
 8024244:	40020028 	.word	0x40020028
 8024248:	40020040 	.word	0x40020040
 802424c:	40020058 	.word	0x40020058
 8024250:	40020070 	.word	0x40020070
 8024254:	40020088 	.word	0x40020088
 8024258:	400200a0 	.word	0x400200a0
 802425c:	400200b8 	.word	0x400200b8
 8024260:	40020410 	.word	0x40020410
 8024264:	40020428 	.word	0x40020428
 8024268:	40020440 	.word	0x40020440
 802426c:	40020458 	.word	0x40020458
 8024270:	40020470 	.word	0x40020470
 8024274:	40020488 	.word	0x40020488
 8024278:	400204a0 	.word	0x400204a0
 802427c:	400204b8 	.word	0x400204b8
 8024280:	687b      	ldr	r3, [r7, #4]
 8024282:	681b      	ldr	r3, [r3, #0]
 8024284:	681b      	ldr	r3, [r3, #0]
 8024286:	f003 0308 	and.w	r3, r3, #8
 802428a:	2b00      	cmp	r3, #0
 802428c:	bf14      	ite	ne
 802428e:	2301      	movne	r3, #1
 8024290:	2300      	moveq	r3, #0
 8024292:	b2db      	uxtb	r3, r3
 8024294:	2b00      	cmp	r3, #0
 8024296:	d015      	beq.n	80242c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8024298:	687b      	ldr	r3, [r7, #4]
 802429a:	681b      	ldr	r3, [r3, #0]
 802429c:	681a      	ldr	r2, [r3, #0]
 802429e:	687b      	ldr	r3, [r7, #4]
 80242a0:	681b      	ldr	r3, [r3, #0]
 80242a2:	f022 0204 	bic.w	r2, r2, #4
 80242a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80242a8:	687b      	ldr	r3, [r7, #4]
 80242aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80242ac:	f003 031f 	and.w	r3, r3, #31
 80242b0:	2208      	movs	r2, #8
 80242b2:	409a      	lsls	r2, r3
 80242b4:	6a3b      	ldr	r3, [r7, #32]
 80242b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80242b8:	687b      	ldr	r3, [r7, #4]
 80242ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80242bc:	f043 0201 	orr.w	r2, r3, #1
 80242c0:	687b      	ldr	r3, [r7, #4]
 80242c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80242c4:	687b      	ldr	r3, [r7, #4]
 80242c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80242c8:	f003 031f 	and.w	r3, r3, #31
 80242cc:	69ba      	ldr	r2, [r7, #24]
 80242ce:	fa22 f303 	lsr.w	r3, r2, r3
 80242d2:	f003 0301 	and.w	r3, r3, #1
 80242d6:	2b00      	cmp	r3, #0
 80242d8:	d06e      	beq.n	80243b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80242da:	687b      	ldr	r3, [r7, #4]
 80242dc:	681b      	ldr	r3, [r3, #0]
 80242de:	4a69      	ldr	r2, [pc, #420]	; (8024484 <HAL_DMA_IRQHandler+0x3f8>)
 80242e0:	4293      	cmp	r3, r2
 80242e2:	d04a      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 80242e4:	687b      	ldr	r3, [r7, #4]
 80242e6:	681b      	ldr	r3, [r3, #0]
 80242e8:	4a67      	ldr	r2, [pc, #412]	; (8024488 <HAL_DMA_IRQHandler+0x3fc>)
 80242ea:	4293      	cmp	r3, r2
 80242ec:	d045      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 80242ee:	687b      	ldr	r3, [r7, #4]
 80242f0:	681b      	ldr	r3, [r3, #0]
 80242f2:	4a66      	ldr	r2, [pc, #408]	; (802448c <HAL_DMA_IRQHandler+0x400>)
 80242f4:	4293      	cmp	r3, r2
 80242f6:	d040      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 80242f8:	687b      	ldr	r3, [r7, #4]
 80242fa:	681b      	ldr	r3, [r3, #0]
 80242fc:	4a64      	ldr	r2, [pc, #400]	; (8024490 <HAL_DMA_IRQHandler+0x404>)
 80242fe:	4293      	cmp	r3, r2
 8024300:	d03b      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 8024302:	687b      	ldr	r3, [r7, #4]
 8024304:	681b      	ldr	r3, [r3, #0]
 8024306:	4a63      	ldr	r2, [pc, #396]	; (8024494 <HAL_DMA_IRQHandler+0x408>)
 8024308:	4293      	cmp	r3, r2
 802430a:	d036      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 802430c:	687b      	ldr	r3, [r7, #4]
 802430e:	681b      	ldr	r3, [r3, #0]
 8024310:	4a61      	ldr	r2, [pc, #388]	; (8024498 <HAL_DMA_IRQHandler+0x40c>)
 8024312:	4293      	cmp	r3, r2
 8024314:	d031      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 8024316:	687b      	ldr	r3, [r7, #4]
 8024318:	681b      	ldr	r3, [r3, #0]
 802431a:	4a60      	ldr	r2, [pc, #384]	; (802449c <HAL_DMA_IRQHandler+0x410>)
 802431c:	4293      	cmp	r3, r2
 802431e:	d02c      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 8024320:	687b      	ldr	r3, [r7, #4]
 8024322:	681b      	ldr	r3, [r3, #0]
 8024324:	4a5e      	ldr	r2, [pc, #376]	; (80244a0 <HAL_DMA_IRQHandler+0x414>)
 8024326:	4293      	cmp	r3, r2
 8024328:	d027      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 802432a:	687b      	ldr	r3, [r7, #4]
 802432c:	681b      	ldr	r3, [r3, #0]
 802432e:	4a5d      	ldr	r2, [pc, #372]	; (80244a4 <HAL_DMA_IRQHandler+0x418>)
 8024330:	4293      	cmp	r3, r2
 8024332:	d022      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 8024334:	687b      	ldr	r3, [r7, #4]
 8024336:	681b      	ldr	r3, [r3, #0]
 8024338:	4a5b      	ldr	r2, [pc, #364]	; (80244a8 <HAL_DMA_IRQHandler+0x41c>)
 802433a:	4293      	cmp	r3, r2
 802433c:	d01d      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 802433e:	687b      	ldr	r3, [r7, #4]
 8024340:	681b      	ldr	r3, [r3, #0]
 8024342:	4a5a      	ldr	r2, [pc, #360]	; (80244ac <HAL_DMA_IRQHandler+0x420>)
 8024344:	4293      	cmp	r3, r2
 8024346:	d018      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 8024348:	687b      	ldr	r3, [r7, #4]
 802434a:	681b      	ldr	r3, [r3, #0]
 802434c:	4a58      	ldr	r2, [pc, #352]	; (80244b0 <HAL_DMA_IRQHandler+0x424>)
 802434e:	4293      	cmp	r3, r2
 8024350:	d013      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	681b      	ldr	r3, [r3, #0]
 8024356:	4a57      	ldr	r2, [pc, #348]	; (80244b4 <HAL_DMA_IRQHandler+0x428>)
 8024358:	4293      	cmp	r3, r2
 802435a:	d00e      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 802435c:	687b      	ldr	r3, [r7, #4]
 802435e:	681b      	ldr	r3, [r3, #0]
 8024360:	4a55      	ldr	r2, [pc, #340]	; (80244b8 <HAL_DMA_IRQHandler+0x42c>)
 8024362:	4293      	cmp	r3, r2
 8024364:	d009      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 8024366:	687b      	ldr	r3, [r7, #4]
 8024368:	681b      	ldr	r3, [r3, #0]
 802436a:	4a54      	ldr	r2, [pc, #336]	; (80244bc <HAL_DMA_IRQHandler+0x430>)
 802436c:	4293      	cmp	r3, r2
 802436e:	d004      	beq.n	802437a <HAL_DMA_IRQHandler+0x2ee>
 8024370:	687b      	ldr	r3, [r7, #4]
 8024372:	681b      	ldr	r3, [r3, #0]
 8024374:	4a52      	ldr	r2, [pc, #328]	; (80244c0 <HAL_DMA_IRQHandler+0x434>)
 8024376:	4293      	cmp	r3, r2
 8024378:	d10a      	bne.n	8024390 <HAL_DMA_IRQHandler+0x304>
 802437a:	687b      	ldr	r3, [r7, #4]
 802437c:	681b      	ldr	r3, [r3, #0]
 802437e:	695b      	ldr	r3, [r3, #20]
 8024380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024384:	2b00      	cmp	r3, #0
 8024386:	bf14      	ite	ne
 8024388:	2301      	movne	r3, #1
 802438a:	2300      	moveq	r3, #0
 802438c:	b2db      	uxtb	r3, r3
 802438e:	e003      	b.n	8024398 <HAL_DMA_IRQHandler+0x30c>
 8024390:	687b      	ldr	r3, [r7, #4]
 8024392:	681b      	ldr	r3, [r3, #0]
 8024394:	681b      	ldr	r3, [r3, #0]
 8024396:	2300      	movs	r3, #0
 8024398:	2b00      	cmp	r3, #0
 802439a:	d00d      	beq.n	80243b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802439c:	687b      	ldr	r3, [r7, #4]
 802439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80243a0:	f003 031f 	and.w	r3, r3, #31
 80243a4:	2201      	movs	r2, #1
 80243a6:	409a      	lsls	r2, r3
 80243a8:	6a3b      	ldr	r3, [r7, #32]
 80243aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80243ac:	687b      	ldr	r3, [r7, #4]
 80243ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80243b0:	f043 0202 	orr.w	r2, r3, #2
 80243b4:	687b      	ldr	r3, [r7, #4]
 80243b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80243b8:	687b      	ldr	r3, [r7, #4]
 80243ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80243bc:	f003 031f 	and.w	r3, r3, #31
 80243c0:	2204      	movs	r2, #4
 80243c2:	409a      	lsls	r2, r3
 80243c4:	69bb      	ldr	r3, [r7, #24]
 80243c6:	4013      	ands	r3, r2
 80243c8:	2b00      	cmp	r3, #0
 80243ca:	f000 808f 	beq.w	80244ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80243ce:	687b      	ldr	r3, [r7, #4]
 80243d0:	681b      	ldr	r3, [r3, #0]
 80243d2:	4a2c      	ldr	r2, [pc, #176]	; (8024484 <HAL_DMA_IRQHandler+0x3f8>)
 80243d4:	4293      	cmp	r3, r2
 80243d6:	d04a      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 80243d8:	687b      	ldr	r3, [r7, #4]
 80243da:	681b      	ldr	r3, [r3, #0]
 80243dc:	4a2a      	ldr	r2, [pc, #168]	; (8024488 <HAL_DMA_IRQHandler+0x3fc>)
 80243de:	4293      	cmp	r3, r2
 80243e0:	d045      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 80243e2:	687b      	ldr	r3, [r7, #4]
 80243e4:	681b      	ldr	r3, [r3, #0]
 80243e6:	4a29      	ldr	r2, [pc, #164]	; (802448c <HAL_DMA_IRQHandler+0x400>)
 80243e8:	4293      	cmp	r3, r2
 80243ea:	d040      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 80243ec:	687b      	ldr	r3, [r7, #4]
 80243ee:	681b      	ldr	r3, [r3, #0]
 80243f0:	4a27      	ldr	r2, [pc, #156]	; (8024490 <HAL_DMA_IRQHandler+0x404>)
 80243f2:	4293      	cmp	r3, r2
 80243f4:	d03b      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 80243f6:	687b      	ldr	r3, [r7, #4]
 80243f8:	681b      	ldr	r3, [r3, #0]
 80243fa:	4a26      	ldr	r2, [pc, #152]	; (8024494 <HAL_DMA_IRQHandler+0x408>)
 80243fc:	4293      	cmp	r3, r2
 80243fe:	d036      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 8024400:	687b      	ldr	r3, [r7, #4]
 8024402:	681b      	ldr	r3, [r3, #0]
 8024404:	4a24      	ldr	r2, [pc, #144]	; (8024498 <HAL_DMA_IRQHandler+0x40c>)
 8024406:	4293      	cmp	r3, r2
 8024408:	d031      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 802440a:	687b      	ldr	r3, [r7, #4]
 802440c:	681b      	ldr	r3, [r3, #0]
 802440e:	4a23      	ldr	r2, [pc, #140]	; (802449c <HAL_DMA_IRQHandler+0x410>)
 8024410:	4293      	cmp	r3, r2
 8024412:	d02c      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 8024414:	687b      	ldr	r3, [r7, #4]
 8024416:	681b      	ldr	r3, [r3, #0]
 8024418:	4a21      	ldr	r2, [pc, #132]	; (80244a0 <HAL_DMA_IRQHandler+0x414>)
 802441a:	4293      	cmp	r3, r2
 802441c:	d027      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 802441e:	687b      	ldr	r3, [r7, #4]
 8024420:	681b      	ldr	r3, [r3, #0]
 8024422:	4a20      	ldr	r2, [pc, #128]	; (80244a4 <HAL_DMA_IRQHandler+0x418>)
 8024424:	4293      	cmp	r3, r2
 8024426:	d022      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	681b      	ldr	r3, [r3, #0]
 802442c:	4a1e      	ldr	r2, [pc, #120]	; (80244a8 <HAL_DMA_IRQHandler+0x41c>)
 802442e:	4293      	cmp	r3, r2
 8024430:	d01d      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 8024432:	687b      	ldr	r3, [r7, #4]
 8024434:	681b      	ldr	r3, [r3, #0]
 8024436:	4a1d      	ldr	r2, [pc, #116]	; (80244ac <HAL_DMA_IRQHandler+0x420>)
 8024438:	4293      	cmp	r3, r2
 802443a:	d018      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 802443c:	687b      	ldr	r3, [r7, #4]
 802443e:	681b      	ldr	r3, [r3, #0]
 8024440:	4a1b      	ldr	r2, [pc, #108]	; (80244b0 <HAL_DMA_IRQHandler+0x424>)
 8024442:	4293      	cmp	r3, r2
 8024444:	d013      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 8024446:	687b      	ldr	r3, [r7, #4]
 8024448:	681b      	ldr	r3, [r3, #0]
 802444a:	4a1a      	ldr	r2, [pc, #104]	; (80244b4 <HAL_DMA_IRQHandler+0x428>)
 802444c:	4293      	cmp	r3, r2
 802444e:	d00e      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 8024450:	687b      	ldr	r3, [r7, #4]
 8024452:	681b      	ldr	r3, [r3, #0]
 8024454:	4a18      	ldr	r2, [pc, #96]	; (80244b8 <HAL_DMA_IRQHandler+0x42c>)
 8024456:	4293      	cmp	r3, r2
 8024458:	d009      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 802445a:	687b      	ldr	r3, [r7, #4]
 802445c:	681b      	ldr	r3, [r3, #0]
 802445e:	4a17      	ldr	r2, [pc, #92]	; (80244bc <HAL_DMA_IRQHandler+0x430>)
 8024460:	4293      	cmp	r3, r2
 8024462:	d004      	beq.n	802446e <HAL_DMA_IRQHandler+0x3e2>
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	681b      	ldr	r3, [r3, #0]
 8024468:	4a15      	ldr	r2, [pc, #84]	; (80244c0 <HAL_DMA_IRQHandler+0x434>)
 802446a:	4293      	cmp	r3, r2
 802446c:	d12a      	bne.n	80244c4 <HAL_DMA_IRQHandler+0x438>
 802446e:	687b      	ldr	r3, [r7, #4]
 8024470:	681b      	ldr	r3, [r3, #0]
 8024472:	681b      	ldr	r3, [r3, #0]
 8024474:	f003 0302 	and.w	r3, r3, #2
 8024478:	2b00      	cmp	r3, #0
 802447a:	bf14      	ite	ne
 802447c:	2301      	movne	r3, #1
 802447e:	2300      	moveq	r3, #0
 8024480:	b2db      	uxtb	r3, r3
 8024482:	e023      	b.n	80244cc <HAL_DMA_IRQHandler+0x440>
 8024484:	40020010 	.word	0x40020010
 8024488:	40020028 	.word	0x40020028
 802448c:	40020040 	.word	0x40020040
 8024490:	40020058 	.word	0x40020058
 8024494:	40020070 	.word	0x40020070
 8024498:	40020088 	.word	0x40020088
 802449c:	400200a0 	.word	0x400200a0
 80244a0:	400200b8 	.word	0x400200b8
 80244a4:	40020410 	.word	0x40020410
 80244a8:	40020428 	.word	0x40020428
 80244ac:	40020440 	.word	0x40020440
 80244b0:	40020458 	.word	0x40020458
 80244b4:	40020470 	.word	0x40020470
 80244b8:	40020488 	.word	0x40020488
 80244bc:	400204a0 	.word	0x400204a0
 80244c0:	400204b8 	.word	0x400204b8
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	681b      	ldr	r3, [r3, #0]
 80244c8:	681b      	ldr	r3, [r3, #0]
 80244ca:	2300      	movs	r3, #0
 80244cc:	2b00      	cmp	r3, #0
 80244ce:	d00d      	beq.n	80244ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80244d0:	687b      	ldr	r3, [r7, #4]
 80244d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80244d4:	f003 031f 	and.w	r3, r3, #31
 80244d8:	2204      	movs	r2, #4
 80244da:	409a      	lsls	r2, r3
 80244dc:	6a3b      	ldr	r3, [r7, #32]
 80244de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80244e0:	687b      	ldr	r3, [r7, #4]
 80244e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80244e4:	f043 0204 	orr.w	r2, r3, #4
 80244e8:	687b      	ldr	r3, [r7, #4]
 80244ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80244ec:	687b      	ldr	r3, [r7, #4]
 80244ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80244f0:	f003 031f 	and.w	r3, r3, #31
 80244f4:	2210      	movs	r2, #16
 80244f6:	409a      	lsls	r2, r3
 80244f8:	69bb      	ldr	r3, [r7, #24]
 80244fa:	4013      	ands	r3, r2
 80244fc:	2b00      	cmp	r3, #0
 80244fe:	f000 80a6 	beq.w	802464e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8024502:	687b      	ldr	r3, [r7, #4]
 8024504:	681b      	ldr	r3, [r3, #0]
 8024506:	4a85      	ldr	r2, [pc, #532]	; (802471c <HAL_DMA_IRQHandler+0x690>)
 8024508:	4293      	cmp	r3, r2
 802450a:	d04a      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 802450c:	687b      	ldr	r3, [r7, #4]
 802450e:	681b      	ldr	r3, [r3, #0]
 8024510:	4a83      	ldr	r2, [pc, #524]	; (8024720 <HAL_DMA_IRQHandler+0x694>)
 8024512:	4293      	cmp	r3, r2
 8024514:	d045      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 8024516:	687b      	ldr	r3, [r7, #4]
 8024518:	681b      	ldr	r3, [r3, #0]
 802451a:	4a82      	ldr	r2, [pc, #520]	; (8024724 <HAL_DMA_IRQHandler+0x698>)
 802451c:	4293      	cmp	r3, r2
 802451e:	d040      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 8024520:	687b      	ldr	r3, [r7, #4]
 8024522:	681b      	ldr	r3, [r3, #0]
 8024524:	4a80      	ldr	r2, [pc, #512]	; (8024728 <HAL_DMA_IRQHandler+0x69c>)
 8024526:	4293      	cmp	r3, r2
 8024528:	d03b      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 802452a:	687b      	ldr	r3, [r7, #4]
 802452c:	681b      	ldr	r3, [r3, #0]
 802452e:	4a7f      	ldr	r2, [pc, #508]	; (802472c <HAL_DMA_IRQHandler+0x6a0>)
 8024530:	4293      	cmp	r3, r2
 8024532:	d036      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 8024534:	687b      	ldr	r3, [r7, #4]
 8024536:	681b      	ldr	r3, [r3, #0]
 8024538:	4a7d      	ldr	r2, [pc, #500]	; (8024730 <HAL_DMA_IRQHandler+0x6a4>)
 802453a:	4293      	cmp	r3, r2
 802453c:	d031      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 802453e:	687b      	ldr	r3, [r7, #4]
 8024540:	681b      	ldr	r3, [r3, #0]
 8024542:	4a7c      	ldr	r2, [pc, #496]	; (8024734 <HAL_DMA_IRQHandler+0x6a8>)
 8024544:	4293      	cmp	r3, r2
 8024546:	d02c      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 8024548:	687b      	ldr	r3, [r7, #4]
 802454a:	681b      	ldr	r3, [r3, #0]
 802454c:	4a7a      	ldr	r2, [pc, #488]	; (8024738 <HAL_DMA_IRQHandler+0x6ac>)
 802454e:	4293      	cmp	r3, r2
 8024550:	d027      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 8024552:	687b      	ldr	r3, [r7, #4]
 8024554:	681b      	ldr	r3, [r3, #0]
 8024556:	4a79      	ldr	r2, [pc, #484]	; (802473c <HAL_DMA_IRQHandler+0x6b0>)
 8024558:	4293      	cmp	r3, r2
 802455a:	d022      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 802455c:	687b      	ldr	r3, [r7, #4]
 802455e:	681b      	ldr	r3, [r3, #0]
 8024560:	4a77      	ldr	r2, [pc, #476]	; (8024740 <HAL_DMA_IRQHandler+0x6b4>)
 8024562:	4293      	cmp	r3, r2
 8024564:	d01d      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 8024566:	687b      	ldr	r3, [r7, #4]
 8024568:	681b      	ldr	r3, [r3, #0]
 802456a:	4a76      	ldr	r2, [pc, #472]	; (8024744 <HAL_DMA_IRQHandler+0x6b8>)
 802456c:	4293      	cmp	r3, r2
 802456e:	d018      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 8024570:	687b      	ldr	r3, [r7, #4]
 8024572:	681b      	ldr	r3, [r3, #0]
 8024574:	4a74      	ldr	r2, [pc, #464]	; (8024748 <HAL_DMA_IRQHandler+0x6bc>)
 8024576:	4293      	cmp	r3, r2
 8024578:	d013      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 802457a:	687b      	ldr	r3, [r7, #4]
 802457c:	681b      	ldr	r3, [r3, #0]
 802457e:	4a73      	ldr	r2, [pc, #460]	; (802474c <HAL_DMA_IRQHandler+0x6c0>)
 8024580:	4293      	cmp	r3, r2
 8024582:	d00e      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 8024584:	687b      	ldr	r3, [r7, #4]
 8024586:	681b      	ldr	r3, [r3, #0]
 8024588:	4a71      	ldr	r2, [pc, #452]	; (8024750 <HAL_DMA_IRQHandler+0x6c4>)
 802458a:	4293      	cmp	r3, r2
 802458c:	d009      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 802458e:	687b      	ldr	r3, [r7, #4]
 8024590:	681b      	ldr	r3, [r3, #0]
 8024592:	4a70      	ldr	r2, [pc, #448]	; (8024754 <HAL_DMA_IRQHandler+0x6c8>)
 8024594:	4293      	cmp	r3, r2
 8024596:	d004      	beq.n	80245a2 <HAL_DMA_IRQHandler+0x516>
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	681b      	ldr	r3, [r3, #0]
 802459c:	4a6e      	ldr	r2, [pc, #440]	; (8024758 <HAL_DMA_IRQHandler+0x6cc>)
 802459e:	4293      	cmp	r3, r2
 80245a0:	d10a      	bne.n	80245b8 <HAL_DMA_IRQHandler+0x52c>
 80245a2:	687b      	ldr	r3, [r7, #4]
 80245a4:	681b      	ldr	r3, [r3, #0]
 80245a6:	681b      	ldr	r3, [r3, #0]
 80245a8:	f003 0308 	and.w	r3, r3, #8
 80245ac:	2b00      	cmp	r3, #0
 80245ae:	bf14      	ite	ne
 80245b0:	2301      	movne	r3, #1
 80245b2:	2300      	moveq	r3, #0
 80245b4:	b2db      	uxtb	r3, r3
 80245b6:	e009      	b.n	80245cc <HAL_DMA_IRQHandler+0x540>
 80245b8:	687b      	ldr	r3, [r7, #4]
 80245ba:	681b      	ldr	r3, [r3, #0]
 80245bc:	681b      	ldr	r3, [r3, #0]
 80245be:	f003 0304 	and.w	r3, r3, #4
 80245c2:	2b00      	cmp	r3, #0
 80245c4:	bf14      	ite	ne
 80245c6:	2301      	movne	r3, #1
 80245c8:	2300      	moveq	r3, #0
 80245ca:	b2db      	uxtb	r3, r3
 80245cc:	2b00      	cmp	r3, #0
 80245ce:	d03e      	beq.n	802464e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80245d0:	687b      	ldr	r3, [r7, #4]
 80245d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80245d4:	f003 031f 	and.w	r3, r3, #31
 80245d8:	2210      	movs	r2, #16
 80245da:	409a      	lsls	r2, r3
 80245dc:	6a3b      	ldr	r3, [r7, #32]
 80245de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80245e0:	687b      	ldr	r3, [r7, #4]
 80245e2:	681b      	ldr	r3, [r3, #0]
 80245e4:	681b      	ldr	r3, [r3, #0]
 80245e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80245ea:	2b00      	cmp	r3, #0
 80245ec:	d018      	beq.n	8024620 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80245ee:	687b      	ldr	r3, [r7, #4]
 80245f0:	681b      	ldr	r3, [r3, #0]
 80245f2:	681b      	ldr	r3, [r3, #0]
 80245f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80245f8:	2b00      	cmp	r3, #0
 80245fa:	d108      	bne.n	802460e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80245fc:	687b      	ldr	r3, [r7, #4]
 80245fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024600:	2b00      	cmp	r3, #0
 8024602:	d024      	beq.n	802464e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8024604:	687b      	ldr	r3, [r7, #4]
 8024606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024608:	6878      	ldr	r0, [r7, #4]
 802460a:	4798      	blx	r3
 802460c:	e01f      	b.n	802464e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 802460e:	687b      	ldr	r3, [r7, #4]
 8024610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024612:	2b00      	cmp	r3, #0
 8024614:	d01b      	beq.n	802464e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8024616:	687b      	ldr	r3, [r7, #4]
 8024618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802461a:	6878      	ldr	r0, [r7, #4]
 802461c:	4798      	blx	r3
 802461e:	e016      	b.n	802464e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8024620:	687b      	ldr	r3, [r7, #4]
 8024622:	681b      	ldr	r3, [r3, #0]
 8024624:	681b      	ldr	r3, [r3, #0]
 8024626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802462a:	2b00      	cmp	r3, #0
 802462c:	d107      	bne.n	802463e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802462e:	687b      	ldr	r3, [r7, #4]
 8024630:	681b      	ldr	r3, [r3, #0]
 8024632:	681a      	ldr	r2, [r3, #0]
 8024634:	687b      	ldr	r3, [r7, #4]
 8024636:	681b      	ldr	r3, [r3, #0]
 8024638:	f022 0208 	bic.w	r2, r2, #8
 802463c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 802463e:	687b      	ldr	r3, [r7, #4]
 8024640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024642:	2b00      	cmp	r3, #0
 8024644:	d003      	beq.n	802464e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8024646:	687b      	ldr	r3, [r7, #4]
 8024648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802464a:	6878      	ldr	r0, [r7, #4]
 802464c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802464e:	687b      	ldr	r3, [r7, #4]
 8024650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024652:	f003 031f 	and.w	r3, r3, #31
 8024656:	2220      	movs	r2, #32
 8024658:	409a      	lsls	r2, r3
 802465a:	69bb      	ldr	r3, [r7, #24]
 802465c:	4013      	ands	r3, r2
 802465e:	2b00      	cmp	r3, #0
 8024660:	f000 8110 	beq.w	8024884 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8024664:	687b      	ldr	r3, [r7, #4]
 8024666:	681b      	ldr	r3, [r3, #0]
 8024668:	4a2c      	ldr	r2, [pc, #176]	; (802471c <HAL_DMA_IRQHandler+0x690>)
 802466a:	4293      	cmp	r3, r2
 802466c:	d04a      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 802466e:	687b      	ldr	r3, [r7, #4]
 8024670:	681b      	ldr	r3, [r3, #0]
 8024672:	4a2b      	ldr	r2, [pc, #172]	; (8024720 <HAL_DMA_IRQHandler+0x694>)
 8024674:	4293      	cmp	r3, r2
 8024676:	d045      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 8024678:	687b      	ldr	r3, [r7, #4]
 802467a:	681b      	ldr	r3, [r3, #0]
 802467c:	4a29      	ldr	r2, [pc, #164]	; (8024724 <HAL_DMA_IRQHandler+0x698>)
 802467e:	4293      	cmp	r3, r2
 8024680:	d040      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 8024682:	687b      	ldr	r3, [r7, #4]
 8024684:	681b      	ldr	r3, [r3, #0]
 8024686:	4a28      	ldr	r2, [pc, #160]	; (8024728 <HAL_DMA_IRQHandler+0x69c>)
 8024688:	4293      	cmp	r3, r2
 802468a:	d03b      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 802468c:	687b      	ldr	r3, [r7, #4]
 802468e:	681b      	ldr	r3, [r3, #0]
 8024690:	4a26      	ldr	r2, [pc, #152]	; (802472c <HAL_DMA_IRQHandler+0x6a0>)
 8024692:	4293      	cmp	r3, r2
 8024694:	d036      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 8024696:	687b      	ldr	r3, [r7, #4]
 8024698:	681b      	ldr	r3, [r3, #0]
 802469a:	4a25      	ldr	r2, [pc, #148]	; (8024730 <HAL_DMA_IRQHandler+0x6a4>)
 802469c:	4293      	cmp	r3, r2
 802469e:	d031      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 80246a0:	687b      	ldr	r3, [r7, #4]
 80246a2:	681b      	ldr	r3, [r3, #0]
 80246a4:	4a23      	ldr	r2, [pc, #140]	; (8024734 <HAL_DMA_IRQHandler+0x6a8>)
 80246a6:	4293      	cmp	r3, r2
 80246a8:	d02c      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 80246aa:	687b      	ldr	r3, [r7, #4]
 80246ac:	681b      	ldr	r3, [r3, #0]
 80246ae:	4a22      	ldr	r2, [pc, #136]	; (8024738 <HAL_DMA_IRQHandler+0x6ac>)
 80246b0:	4293      	cmp	r3, r2
 80246b2:	d027      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 80246b4:	687b      	ldr	r3, [r7, #4]
 80246b6:	681b      	ldr	r3, [r3, #0]
 80246b8:	4a20      	ldr	r2, [pc, #128]	; (802473c <HAL_DMA_IRQHandler+0x6b0>)
 80246ba:	4293      	cmp	r3, r2
 80246bc:	d022      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 80246be:	687b      	ldr	r3, [r7, #4]
 80246c0:	681b      	ldr	r3, [r3, #0]
 80246c2:	4a1f      	ldr	r2, [pc, #124]	; (8024740 <HAL_DMA_IRQHandler+0x6b4>)
 80246c4:	4293      	cmp	r3, r2
 80246c6:	d01d      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 80246c8:	687b      	ldr	r3, [r7, #4]
 80246ca:	681b      	ldr	r3, [r3, #0]
 80246cc:	4a1d      	ldr	r2, [pc, #116]	; (8024744 <HAL_DMA_IRQHandler+0x6b8>)
 80246ce:	4293      	cmp	r3, r2
 80246d0:	d018      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 80246d2:	687b      	ldr	r3, [r7, #4]
 80246d4:	681b      	ldr	r3, [r3, #0]
 80246d6:	4a1c      	ldr	r2, [pc, #112]	; (8024748 <HAL_DMA_IRQHandler+0x6bc>)
 80246d8:	4293      	cmp	r3, r2
 80246da:	d013      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 80246dc:	687b      	ldr	r3, [r7, #4]
 80246de:	681b      	ldr	r3, [r3, #0]
 80246e0:	4a1a      	ldr	r2, [pc, #104]	; (802474c <HAL_DMA_IRQHandler+0x6c0>)
 80246e2:	4293      	cmp	r3, r2
 80246e4:	d00e      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 80246e6:	687b      	ldr	r3, [r7, #4]
 80246e8:	681b      	ldr	r3, [r3, #0]
 80246ea:	4a19      	ldr	r2, [pc, #100]	; (8024750 <HAL_DMA_IRQHandler+0x6c4>)
 80246ec:	4293      	cmp	r3, r2
 80246ee:	d009      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 80246f0:	687b      	ldr	r3, [r7, #4]
 80246f2:	681b      	ldr	r3, [r3, #0]
 80246f4:	4a17      	ldr	r2, [pc, #92]	; (8024754 <HAL_DMA_IRQHandler+0x6c8>)
 80246f6:	4293      	cmp	r3, r2
 80246f8:	d004      	beq.n	8024704 <HAL_DMA_IRQHandler+0x678>
 80246fa:	687b      	ldr	r3, [r7, #4]
 80246fc:	681b      	ldr	r3, [r3, #0]
 80246fe:	4a16      	ldr	r2, [pc, #88]	; (8024758 <HAL_DMA_IRQHandler+0x6cc>)
 8024700:	4293      	cmp	r3, r2
 8024702:	d12b      	bne.n	802475c <HAL_DMA_IRQHandler+0x6d0>
 8024704:	687b      	ldr	r3, [r7, #4]
 8024706:	681b      	ldr	r3, [r3, #0]
 8024708:	681b      	ldr	r3, [r3, #0]
 802470a:	f003 0310 	and.w	r3, r3, #16
 802470e:	2b00      	cmp	r3, #0
 8024710:	bf14      	ite	ne
 8024712:	2301      	movne	r3, #1
 8024714:	2300      	moveq	r3, #0
 8024716:	b2db      	uxtb	r3, r3
 8024718:	e02a      	b.n	8024770 <HAL_DMA_IRQHandler+0x6e4>
 802471a:	bf00      	nop
 802471c:	40020010 	.word	0x40020010
 8024720:	40020028 	.word	0x40020028
 8024724:	40020040 	.word	0x40020040
 8024728:	40020058 	.word	0x40020058
 802472c:	40020070 	.word	0x40020070
 8024730:	40020088 	.word	0x40020088
 8024734:	400200a0 	.word	0x400200a0
 8024738:	400200b8 	.word	0x400200b8
 802473c:	40020410 	.word	0x40020410
 8024740:	40020428 	.word	0x40020428
 8024744:	40020440 	.word	0x40020440
 8024748:	40020458 	.word	0x40020458
 802474c:	40020470 	.word	0x40020470
 8024750:	40020488 	.word	0x40020488
 8024754:	400204a0 	.word	0x400204a0
 8024758:	400204b8 	.word	0x400204b8
 802475c:	687b      	ldr	r3, [r7, #4]
 802475e:	681b      	ldr	r3, [r3, #0]
 8024760:	681b      	ldr	r3, [r3, #0]
 8024762:	f003 0302 	and.w	r3, r3, #2
 8024766:	2b00      	cmp	r3, #0
 8024768:	bf14      	ite	ne
 802476a:	2301      	movne	r3, #1
 802476c:	2300      	moveq	r3, #0
 802476e:	b2db      	uxtb	r3, r3
 8024770:	2b00      	cmp	r3, #0
 8024772:	f000 8087 	beq.w	8024884 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8024776:	687b      	ldr	r3, [r7, #4]
 8024778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802477a:	f003 031f 	and.w	r3, r3, #31
 802477e:	2220      	movs	r2, #32
 8024780:	409a      	lsls	r2, r3
 8024782:	6a3b      	ldr	r3, [r7, #32]
 8024784:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8024786:	687b      	ldr	r3, [r7, #4]
 8024788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802478c:	b2db      	uxtb	r3, r3
 802478e:	2b04      	cmp	r3, #4
 8024790:	d139      	bne.n	8024806 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8024792:	687b      	ldr	r3, [r7, #4]
 8024794:	681b      	ldr	r3, [r3, #0]
 8024796:	681a      	ldr	r2, [r3, #0]
 8024798:	687b      	ldr	r3, [r7, #4]
 802479a:	681b      	ldr	r3, [r3, #0]
 802479c:	f022 0216 	bic.w	r2, r2, #22
 80247a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80247a2:	687b      	ldr	r3, [r7, #4]
 80247a4:	681b      	ldr	r3, [r3, #0]
 80247a6:	695a      	ldr	r2, [r3, #20]
 80247a8:	687b      	ldr	r3, [r7, #4]
 80247aa:	681b      	ldr	r3, [r3, #0]
 80247ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80247b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80247b2:	687b      	ldr	r3, [r7, #4]
 80247b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80247b6:	2b00      	cmp	r3, #0
 80247b8:	d103      	bne.n	80247c2 <HAL_DMA_IRQHandler+0x736>
 80247ba:	687b      	ldr	r3, [r7, #4]
 80247bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80247be:	2b00      	cmp	r3, #0
 80247c0:	d007      	beq.n	80247d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80247c2:	687b      	ldr	r3, [r7, #4]
 80247c4:	681b      	ldr	r3, [r3, #0]
 80247c6:	681a      	ldr	r2, [r3, #0]
 80247c8:	687b      	ldr	r3, [r7, #4]
 80247ca:	681b      	ldr	r3, [r3, #0]
 80247cc:	f022 0208 	bic.w	r2, r2, #8
 80247d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80247d2:	687b      	ldr	r3, [r7, #4]
 80247d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80247d6:	f003 031f 	and.w	r3, r3, #31
 80247da:	223f      	movs	r2, #63	; 0x3f
 80247dc:	409a      	lsls	r2, r3
 80247de:	6a3b      	ldr	r3, [r7, #32]
 80247e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80247e2:	687b      	ldr	r3, [r7, #4]
 80247e4:	2201      	movs	r2, #1
 80247e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80247ea:	687b      	ldr	r3, [r7, #4]
 80247ec:	2200      	movs	r2, #0
 80247ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80247f2:	687b      	ldr	r3, [r7, #4]
 80247f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80247f6:	2b00      	cmp	r3, #0
 80247f8:	f000 834a 	beq.w	8024e90 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80247fc:	687b      	ldr	r3, [r7, #4]
 80247fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024800:	6878      	ldr	r0, [r7, #4]
 8024802:	4798      	blx	r3
          }
          return;
 8024804:	e344      	b.n	8024e90 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8024806:	687b      	ldr	r3, [r7, #4]
 8024808:	681b      	ldr	r3, [r3, #0]
 802480a:	681b      	ldr	r3, [r3, #0]
 802480c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8024810:	2b00      	cmp	r3, #0
 8024812:	d018      	beq.n	8024846 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8024814:	687b      	ldr	r3, [r7, #4]
 8024816:	681b      	ldr	r3, [r3, #0]
 8024818:	681b      	ldr	r3, [r3, #0]
 802481a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802481e:	2b00      	cmp	r3, #0
 8024820:	d108      	bne.n	8024834 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8024822:	687b      	ldr	r3, [r7, #4]
 8024824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024826:	2b00      	cmp	r3, #0
 8024828:	d02c      	beq.n	8024884 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 802482a:	687b      	ldr	r3, [r7, #4]
 802482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802482e:	6878      	ldr	r0, [r7, #4]
 8024830:	4798      	blx	r3
 8024832:	e027      	b.n	8024884 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8024834:	687b      	ldr	r3, [r7, #4]
 8024836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024838:	2b00      	cmp	r3, #0
 802483a:	d023      	beq.n	8024884 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024840:	6878      	ldr	r0, [r7, #4]
 8024842:	4798      	blx	r3
 8024844:	e01e      	b.n	8024884 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8024846:	687b      	ldr	r3, [r7, #4]
 8024848:	681b      	ldr	r3, [r3, #0]
 802484a:	681b      	ldr	r3, [r3, #0]
 802484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024850:	2b00      	cmp	r3, #0
 8024852:	d10f      	bne.n	8024874 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8024854:	687b      	ldr	r3, [r7, #4]
 8024856:	681b      	ldr	r3, [r3, #0]
 8024858:	681a      	ldr	r2, [r3, #0]
 802485a:	687b      	ldr	r3, [r7, #4]
 802485c:	681b      	ldr	r3, [r3, #0]
 802485e:	f022 0210 	bic.w	r2, r2, #16
 8024862:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8024864:	687b      	ldr	r3, [r7, #4]
 8024866:	2201      	movs	r2, #1
 8024868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 802486c:	687b      	ldr	r3, [r7, #4]
 802486e:	2200      	movs	r2, #0
 8024870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8024874:	687b      	ldr	r3, [r7, #4]
 8024876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024878:	2b00      	cmp	r3, #0
 802487a:	d003      	beq.n	8024884 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 802487c:	687b      	ldr	r3, [r7, #4]
 802487e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024880:	6878      	ldr	r0, [r7, #4]
 8024882:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024888:	2b00      	cmp	r3, #0
 802488a:	f000 8306 	beq.w	8024e9a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 802488e:	687b      	ldr	r3, [r7, #4]
 8024890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024892:	f003 0301 	and.w	r3, r3, #1
 8024896:	2b00      	cmp	r3, #0
 8024898:	f000 8088 	beq.w	80249ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 802489c:	687b      	ldr	r3, [r7, #4]
 802489e:	2204      	movs	r2, #4
 80248a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	681b      	ldr	r3, [r3, #0]
 80248a8:	4a7a      	ldr	r2, [pc, #488]	; (8024a94 <HAL_DMA_IRQHandler+0xa08>)
 80248aa:	4293      	cmp	r3, r2
 80248ac:	d04a      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 80248ae:	687b      	ldr	r3, [r7, #4]
 80248b0:	681b      	ldr	r3, [r3, #0]
 80248b2:	4a79      	ldr	r2, [pc, #484]	; (8024a98 <HAL_DMA_IRQHandler+0xa0c>)
 80248b4:	4293      	cmp	r3, r2
 80248b6:	d045      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 80248b8:	687b      	ldr	r3, [r7, #4]
 80248ba:	681b      	ldr	r3, [r3, #0]
 80248bc:	4a77      	ldr	r2, [pc, #476]	; (8024a9c <HAL_DMA_IRQHandler+0xa10>)
 80248be:	4293      	cmp	r3, r2
 80248c0:	d040      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 80248c2:	687b      	ldr	r3, [r7, #4]
 80248c4:	681b      	ldr	r3, [r3, #0]
 80248c6:	4a76      	ldr	r2, [pc, #472]	; (8024aa0 <HAL_DMA_IRQHandler+0xa14>)
 80248c8:	4293      	cmp	r3, r2
 80248ca:	d03b      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 80248cc:	687b      	ldr	r3, [r7, #4]
 80248ce:	681b      	ldr	r3, [r3, #0]
 80248d0:	4a74      	ldr	r2, [pc, #464]	; (8024aa4 <HAL_DMA_IRQHandler+0xa18>)
 80248d2:	4293      	cmp	r3, r2
 80248d4:	d036      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 80248d6:	687b      	ldr	r3, [r7, #4]
 80248d8:	681b      	ldr	r3, [r3, #0]
 80248da:	4a73      	ldr	r2, [pc, #460]	; (8024aa8 <HAL_DMA_IRQHandler+0xa1c>)
 80248dc:	4293      	cmp	r3, r2
 80248de:	d031      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 80248e0:	687b      	ldr	r3, [r7, #4]
 80248e2:	681b      	ldr	r3, [r3, #0]
 80248e4:	4a71      	ldr	r2, [pc, #452]	; (8024aac <HAL_DMA_IRQHandler+0xa20>)
 80248e6:	4293      	cmp	r3, r2
 80248e8:	d02c      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 80248ea:	687b      	ldr	r3, [r7, #4]
 80248ec:	681b      	ldr	r3, [r3, #0]
 80248ee:	4a70      	ldr	r2, [pc, #448]	; (8024ab0 <HAL_DMA_IRQHandler+0xa24>)
 80248f0:	4293      	cmp	r3, r2
 80248f2:	d027      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 80248f4:	687b      	ldr	r3, [r7, #4]
 80248f6:	681b      	ldr	r3, [r3, #0]
 80248f8:	4a6e      	ldr	r2, [pc, #440]	; (8024ab4 <HAL_DMA_IRQHandler+0xa28>)
 80248fa:	4293      	cmp	r3, r2
 80248fc:	d022      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 80248fe:	687b      	ldr	r3, [r7, #4]
 8024900:	681b      	ldr	r3, [r3, #0]
 8024902:	4a6d      	ldr	r2, [pc, #436]	; (8024ab8 <HAL_DMA_IRQHandler+0xa2c>)
 8024904:	4293      	cmp	r3, r2
 8024906:	d01d      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 8024908:	687b      	ldr	r3, [r7, #4]
 802490a:	681b      	ldr	r3, [r3, #0]
 802490c:	4a6b      	ldr	r2, [pc, #428]	; (8024abc <HAL_DMA_IRQHandler+0xa30>)
 802490e:	4293      	cmp	r3, r2
 8024910:	d018      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 8024912:	687b      	ldr	r3, [r7, #4]
 8024914:	681b      	ldr	r3, [r3, #0]
 8024916:	4a6a      	ldr	r2, [pc, #424]	; (8024ac0 <HAL_DMA_IRQHandler+0xa34>)
 8024918:	4293      	cmp	r3, r2
 802491a:	d013      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 802491c:	687b      	ldr	r3, [r7, #4]
 802491e:	681b      	ldr	r3, [r3, #0]
 8024920:	4a68      	ldr	r2, [pc, #416]	; (8024ac4 <HAL_DMA_IRQHandler+0xa38>)
 8024922:	4293      	cmp	r3, r2
 8024924:	d00e      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 8024926:	687b      	ldr	r3, [r7, #4]
 8024928:	681b      	ldr	r3, [r3, #0]
 802492a:	4a67      	ldr	r2, [pc, #412]	; (8024ac8 <HAL_DMA_IRQHandler+0xa3c>)
 802492c:	4293      	cmp	r3, r2
 802492e:	d009      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 8024930:	687b      	ldr	r3, [r7, #4]
 8024932:	681b      	ldr	r3, [r3, #0]
 8024934:	4a65      	ldr	r2, [pc, #404]	; (8024acc <HAL_DMA_IRQHandler+0xa40>)
 8024936:	4293      	cmp	r3, r2
 8024938:	d004      	beq.n	8024944 <HAL_DMA_IRQHandler+0x8b8>
 802493a:	687b      	ldr	r3, [r7, #4]
 802493c:	681b      	ldr	r3, [r3, #0]
 802493e:	4a64      	ldr	r2, [pc, #400]	; (8024ad0 <HAL_DMA_IRQHandler+0xa44>)
 8024940:	4293      	cmp	r3, r2
 8024942:	d108      	bne.n	8024956 <HAL_DMA_IRQHandler+0x8ca>
 8024944:	687b      	ldr	r3, [r7, #4]
 8024946:	681b      	ldr	r3, [r3, #0]
 8024948:	681a      	ldr	r2, [r3, #0]
 802494a:	687b      	ldr	r3, [r7, #4]
 802494c:	681b      	ldr	r3, [r3, #0]
 802494e:	f022 0201 	bic.w	r2, r2, #1
 8024952:	601a      	str	r2, [r3, #0]
 8024954:	e007      	b.n	8024966 <HAL_DMA_IRQHandler+0x8da>
 8024956:	687b      	ldr	r3, [r7, #4]
 8024958:	681b      	ldr	r3, [r3, #0]
 802495a:	681a      	ldr	r2, [r3, #0]
 802495c:	687b      	ldr	r3, [r7, #4]
 802495e:	681b      	ldr	r3, [r3, #0]
 8024960:	f022 0201 	bic.w	r2, r2, #1
 8024964:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8024966:	68fb      	ldr	r3, [r7, #12]
 8024968:	3301      	adds	r3, #1
 802496a:	60fb      	str	r3, [r7, #12]
 802496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802496e:	429a      	cmp	r2, r3
 8024970:	d307      	bcc.n	8024982 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8024972:	687b      	ldr	r3, [r7, #4]
 8024974:	681b      	ldr	r3, [r3, #0]
 8024976:	681b      	ldr	r3, [r3, #0]
 8024978:	f003 0301 	and.w	r3, r3, #1
 802497c:	2b00      	cmp	r3, #0
 802497e:	d1f2      	bne.n	8024966 <HAL_DMA_IRQHandler+0x8da>
 8024980:	e000      	b.n	8024984 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8024982:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8024984:	687b      	ldr	r3, [r7, #4]
 8024986:	681b      	ldr	r3, [r3, #0]
 8024988:	681b      	ldr	r3, [r3, #0]
 802498a:	f003 0301 	and.w	r3, r3, #1
 802498e:	2b00      	cmp	r3, #0
 8024990:	d004      	beq.n	802499c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8024992:	687b      	ldr	r3, [r7, #4]
 8024994:	2203      	movs	r2, #3
 8024996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802499a:	e003      	b.n	80249a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 802499c:	687b      	ldr	r3, [r7, #4]
 802499e:	2201      	movs	r2, #1
 80249a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80249a4:	687b      	ldr	r3, [r7, #4]
 80249a6:	2200      	movs	r2, #0
 80249a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80249ac:	687b      	ldr	r3, [r7, #4]
 80249ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80249b0:	2b00      	cmp	r3, #0
 80249b2:	f000 8272 	beq.w	8024e9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80249b6:	687b      	ldr	r3, [r7, #4]
 80249b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80249ba:	6878      	ldr	r0, [r7, #4]
 80249bc:	4798      	blx	r3
 80249be:	e26c      	b.n	8024e9a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80249c0:	687b      	ldr	r3, [r7, #4]
 80249c2:	681b      	ldr	r3, [r3, #0]
 80249c4:	4a43      	ldr	r2, [pc, #268]	; (8024ad4 <HAL_DMA_IRQHandler+0xa48>)
 80249c6:	4293      	cmp	r3, r2
 80249c8:	d022      	beq.n	8024a10 <HAL_DMA_IRQHandler+0x984>
 80249ca:	687b      	ldr	r3, [r7, #4]
 80249cc:	681b      	ldr	r3, [r3, #0]
 80249ce:	4a42      	ldr	r2, [pc, #264]	; (8024ad8 <HAL_DMA_IRQHandler+0xa4c>)
 80249d0:	4293      	cmp	r3, r2
 80249d2:	d01d      	beq.n	8024a10 <HAL_DMA_IRQHandler+0x984>
 80249d4:	687b      	ldr	r3, [r7, #4]
 80249d6:	681b      	ldr	r3, [r3, #0]
 80249d8:	4a40      	ldr	r2, [pc, #256]	; (8024adc <HAL_DMA_IRQHandler+0xa50>)
 80249da:	4293      	cmp	r3, r2
 80249dc:	d018      	beq.n	8024a10 <HAL_DMA_IRQHandler+0x984>
 80249de:	687b      	ldr	r3, [r7, #4]
 80249e0:	681b      	ldr	r3, [r3, #0]
 80249e2:	4a3f      	ldr	r2, [pc, #252]	; (8024ae0 <HAL_DMA_IRQHandler+0xa54>)
 80249e4:	4293      	cmp	r3, r2
 80249e6:	d013      	beq.n	8024a10 <HAL_DMA_IRQHandler+0x984>
 80249e8:	687b      	ldr	r3, [r7, #4]
 80249ea:	681b      	ldr	r3, [r3, #0]
 80249ec:	4a3d      	ldr	r2, [pc, #244]	; (8024ae4 <HAL_DMA_IRQHandler+0xa58>)
 80249ee:	4293      	cmp	r3, r2
 80249f0:	d00e      	beq.n	8024a10 <HAL_DMA_IRQHandler+0x984>
 80249f2:	687b      	ldr	r3, [r7, #4]
 80249f4:	681b      	ldr	r3, [r3, #0]
 80249f6:	4a3c      	ldr	r2, [pc, #240]	; (8024ae8 <HAL_DMA_IRQHandler+0xa5c>)
 80249f8:	4293      	cmp	r3, r2
 80249fa:	d009      	beq.n	8024a10 <HAL_DMA_IRQHandler+0x984>
 80249fc:	687b      	ldr	r3, [r7, #4]
 80249fe:	681b      	ldr	r3, [r3, #0]
 8024a00:	4a3a      	ldr	r2, [pc, #232]	; (8024aec <HAL_DMA_IRQHandler+0xa60>)
 8024a02:	4293      	cmp	r3, r2
 8024a04:	d004      	beq.n	8024a10 <HAL_DMA_IRQHandler+0x984>
 8024a06:	687b      	ldr	r3, [r7, #4]
 8024a08:	681b      	ldr	r3, [r3, #0]
 8024a0a:	4a39      	ldr	r2, [pc, #228]	; (8024af0 <HAL_DMA_IRQHandler+0xa64>)
 8024a0c:	4293      	cmp	r3, r2
 8024a0e:	d101      	bne.n	8024a14 <HAL_DMA_IRQHandler+0x988>
 8024a10:	2301      	movs	r3, #1
 8024a12:	e000      	b.n	8024a16 <HAL_DMA_IRQHandler+0x98a>
 8024a14:	2300      	movs	r3, #0
 8024a16:	2b00      	cmp	r3, #0
 8024a18:	f000 823f 	beq.w	8024e9a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8024a1c:	687b      	ldr	r3, [r7, #4]
 8024a1e:	681b      	ldr	r3, [r3, #0]
 8024a20:	681b      	ldr	r3, [r3, #0]
 8024a22:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8024a24:	687b      	ldr	r3, [r7, #4]
 8024a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024a28:	f003 031f 	and.w	r3, r3, #31
 8024a2c:	2204      	movs	r2, #4
 8024a2e:	409a      	lsls	r2, r3
 8024a30:	697b      	ldr	r3, [r7, #20]
 8024a32:	4013      	ands	r3, r2
 8024a34:	2b00      	cmp	r3, #0
 8024a36:	f000 80cd 	beq.w	8024bd4 <HAL_DMA_IRQHandler+0xb48>
 8024a3a:	693b      	ldr	r3, [r7, #16]
 8024a3c:	f003 0304 	and.w	r3, r3, #4
 8024a40:	2b00      	cmp	r3, #0
 8024a42:	f000 80c7 	beq.w	8024bd4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8024a46:	687b      	ldr	r3, [r7, #4]
 8024a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024a4a:	f003 031f 	and.w	r3, r3, #31
 8024a4e:	2204      	movs	r2, #4
 8024a50:	409a      	lsls	r2, r3
 8024a52:	69fb      	ldr	r3, [r7, #28]
 8024a54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024a56:	693b      	ldr	r3, [r7, #16]
 8024a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024a5c:	2b00      	cmp	r3, #0
 8024a5e:	d049      	beq.n	8024af4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8024a60:	693b      	ldr	r3, [r7, #16]
 8024a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024a66:	2b00      	cmp	r3, #0
 8024a68:	d109      	bne.n	8024a7e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8024a6a:	687b      	ldr	r3, [r7, #4]
 8024a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024a6e:	2b00      	cmp	r3, #0
 8024a70:	f000 8210 	beq.w	8024e94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8024a74:	687b      	ldr	r3, [r7, #4]
 8024a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024a78:	6878      	ldr	r0, [r7, #4]
 8024a7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024a7c:	e20a      	b.n	8024e94 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8024a7e:	687b      	ldr	r3, [r7, #4]
 8024a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a82:	2b00      	cmp	r3, #0
 8024a84:	f000 8206 	beq.w	8024e94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8024a88:	687b      	ldr	r3, [r7, #4]
 8024a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a8c:	6878      	ldr	r0, [r7, #4]
 8024a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024a90:	e200      	b.n	8024e94 <HAL_DMA_IRQHandler+0xe08>
 8024a92:	bf00      	nop
 8024a94:	40020010 	.word	0x40020010
 8024a98:	40020028 	.word	0x40020028
 8024a9c:	40020040 	.word	0x40020040
 8024aa0:	40020058 	.word	0x40020058
 8024aa4:	40020070 	.word	0x40020070
 8024aa8:	40020088 	.word	0x40020088
 8024aac:	400200a0 	.word	0x400200a0
 8024ab0:	400200b8 	.word	0x400200b8
 8024ab4:	40020410 	.word	0x40020410
 8024ab8:	40020428 	.word	0x40020428
 8024abc:	40020440 	.word	0x40020440
 8024ac0:	40020458 	.word	0x40020458
 8024ac4:	40020470 	.word	0x40020470
 8024ac8:	40020488 	.word	0x40020488
 8024acc:	400204a0 	.word	0x400204a0
 8024ad0:	400204b8 	.word	0x400204b8
 8024ad4:	58025408 	.word	0x58025408
 8024ad8:	5802541c 	.word	0x5802541c
 8024adc:	58025430 	.word	0x58025430
 8024ae0:	58025444 	.word	0x58025444
 8024ae4:	58025458 	.word	0x58025458
 8024ae8:	5802546c 	.word	0x5802546c
 8024aec:	58025480 	.word	0x58025480
 8024af0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8024af4:	693b      	ldr	r3, [r7, #16]
 8024af6:	f003 0320 	and.w	r3, r3, #32
 8024afa:	2b00      	cmp	r3, #0
 8024afc:	d160      	bne.n	8024bc0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8024afe:	687b      	ldr	r3, [r7, #4]
 8024b00:	681b      	ldr	r3, [r3, #0]
 8024b02:	4a7f      	ldr	r2, [pc, #508]	; (8024d00 <HAL_DMA_IRQHandler+0xc74>)
 8024b04:	4293      	cmp	r3, r2
 8024b06:	d04a      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b08:	687b      	ldr	r3, [r7, #4]
 8024b0a:	681b      	ldr	r3, [r3, #0]
 8024b0c:	4a7d      	ldr	r2, [pc, #500]	; (8024d04 <HAL_DMA_IRQHandler+0xc78>)
 8024b0e:	4293      	cmp	r3, r2
 8024b10:	d045      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b12:	687b      	ldr	r3, [r7, #4]
 8024b14:	681b      	ldr	r3, [r3, #0]
 8024b16:	4a7c      	ldr	r2, [pc, #496]	; (8024d08 <HAL_DMA_IRQHandler+0xc7c>)
 8024b18:	4293      	cmp	r3, r2
 8024b1a:	d040      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b1c:	687b      	ldr	r3, [r7, #4]
 8024b1e:	681b      	ldr	r3, [r3, #0]
 8024b20:	4a7a      	ldr	r2, [pc, #488]	; (8024d0c <HAL_DMA_IRQHandler+0xc80>)
 8024b22:	4293      	cmp	r3, r2
 8024b24:	d03b      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b26:	687b      	ldr	r3, [r7, #4]
 8024b28:	681b      	ldr	r3, [r3, #0]
 8024b2a:	4a79      	ldr	r2, [pc, #484]	; (8024d10 <HAL_DMA_IRQHandler+0xc84>)
 8024b2c:	4293      	cmp	r3, r2
 8024b2e:	d036      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b30:	687b      	ldr	r3, [r7, #4]
 8024b32:	681b      	ldr	r3, [r3, #0]
 8024b34:	4a77      	ldr	r2, [pc, #476]	; (8024d14 <HAL_DMA_IRQHandler+0xc88>)
 8024b36:	4293      	cmp	r3, r2
 8024b38:	d031      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b3a:	687b      	ldr	r3, [r7, #4]
 8024b3c:	681b      	ldr	r3, [r3, #0]
 8024b3e:	4a76      	ldr	r2, [pc, #472]	; (8024d18 <HAL_DMA_IRQHandler+0xc8c>)
 8024b40:	4293      	cmp	r3, r2
 8024b42:	d02c      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b44:	687b      	ldr	r3, [r7, #4]
 8024b46:	681b      	ldr	r3, [r3, #0]
 8024b48:	4a74      	ldr	r2, [pc, #464]	; (8024d1c <HAL_DMA_IRQHandler+0xc90>)
 8024b4a:	4293      	cmp	r3, r2
 8024b4c:	d027      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b4e:	687b      	ldr	r3, [r7, #4]
 8024b50:	681b      	ldr	r3, [r3, #0]
 8024b52:	4a73      	ldr	r2, [pc, #460]	; (8024d20 <HAL_DMA_IRQHandler+0xc94>)
 8024b54:	4293      	cmp	r3, r2
 8024b56:	d022      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b58:	687b      	ldr	r3, [r7, #4]
 8024b5a:	681b      	ldr	r3, [r3, #0]
 8024b5c:	4a71      	ldr	r2, [pc, #452]	; (8024d24 <HAL_DMA_IRQHandler+0xc98>)
 8024b5e:	4293      	cmp	r3, r2
 8024b60:	d01d      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b62:	687b      	ldr	r3, [r7, #4]
 8024b64:	681b      	ldr	r3, [r3, #0]
 8024b66:	4a70      	ldr	r2, [pc, #448]	; (8024d28 <HAL_DMA_IRQHandler+0xc9c>)
 8024b68:	4293      	cmp	r3, r2
 8024b6a:	d018      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b6c:	687b      	ldr	r3, [r7, #4]
 8024b6e:	681b      	ldr	r3, [r3, #0]
 8024b70:	4a6e      	ldr	r2, [pc, #440]	; (8024d2c <HAL_DMA_IRQHandler+0xca0>)
 8024b72:	4293      	cmp	r3, r2
 8024b74:	d013      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b76:	687b      	ldr	r3, [r7, #4]
 8024b78:	681b      	ldr	r3, [r3, #0]
 8024b7a:	4a6d      	ldr	r2, [pc, #436]	; (8024d30 <HAL_DMA_IRQHandler+0xca4>)
 8024b7c:	4293      	cmp	r3, r2
 8024b7e:	d00e      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b80:	687b      	ldr	r3, [r7, #4]
 8024b82:	681b      	ldr	r3, [r3, #0]
 8024b84:	4a6b      	ldr	r2, [pc, #428]	; (8024d34 <HAL_DMA_IRQHandler+0xca8>)
 8024b86:	4293      	cmp	r3, r2
 8024b88:	d009      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b8a:	687b      	ldr	r3, [r7, #4]
 8024b8c:	681b      	ldr	r3, [r3, #0]
 8024b8e:	4a6a      	ldr	r2, [pc, #424]	; (8024d38 <HAL_DMA_IRQHandler+0xcac>)
 8024b90:	4293      	cmp	r3, r2
 8024b92:	d004      	beq.n	8024b9e <HAL_DMA_IRQHandler+0xb12>
 8024b94:	687b      	ldr	r3, [r7, #4]
 8024b96:	681b      	ldr	r3, [r3, #0]
 8024b98:	4a68      	ldr	r2, [pc, #416]	; (8024d3c <HAL_DMA_IRQHandler+0xcb0>)
 8024b9a:	4293      	cmp	r3, r2
 8024b9c:	d108      	bne.n	8024bb0 <HAL_DMA_IRQHandler+0xb24>
 8024b9e:	687b      	ldr	r3, [r7, #4]
 8024ba0:	681b      	ldr	r3, [r3, #0]
 8024ba2:	681a      	ldr	r2, [r3, #0]
 8024ba4:	687b      	ldr	r3, [r7, #4]
 8024ba6:	681b      	ldr	r3, [r3, #0]
 8024ba8:	f022 0208 	bic.w	r2, r2, #8
 8024bac:	601a      	str	r2, [r3, #0]
 8024bae:	e007      	b.n	8024bc0 <HAL_DMA_IRQHandler+0xb34>
 8024bb0:	687b      	ldr	r3, [r7, #4]
 8024bb2:	681b      	ldr	r3, [r3, #0]
 8024bb4:	681a      	ldr	r2, [r3, #0]
 8024bb6:	687b      	ldr	r3, [r7, #4]
 8024bb8:	681b      	ldr	r3, [r3, #0]
 8024bba:	f022 0204 	bic.w	r2, r2, #4
 8024bbe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8024bc0:	687b      	ldr	r3, [r7, #4]
 8024bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024bc4:	2b00      	cmp	r3, #0
 8024bc6:	f000 8165 	beq.w	8024e94 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8024bca:	687b      	ldr	r3, [r7, #4]
 8024bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024bce:	6878      	ldr	r0, [r7, #4]
 8024bd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024bd2:	e15f      	b.n	8024e94 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8024bd4:	687b      	ldr	r3, [r7, #4]
 8024bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024bd8:	f003 031f 	and.w	r3, r3, #31
 8024bdc:	2202      	movs	r2, #2
 8024bde:	409a      	lsls	r2, r3
 8024be0:	697b      	ldr	r3, [r7, #20]
 8024be2:	4013      	ands	r3, r2
 8024be4:	2b00      	cmp	r3, #0
 8024be6:	f000 80c5 	beq.w	8024d74 <HAL_DMA_IRQHandler+0xce8>
 8024bea:	693b      	ldr	r3, [r7, #16]
 8024bec:	f003 0302 	and.w	r3, r3, #2
 8024bf0:	2b00      	cmp	r3, #0
 8024bf2:	f000 80bf 	beq.w	8024d74 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8024bf6:	687b      	ldr	r3, [r7, #4]
 8024bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024bfa:	f003 031f 	and.w	r3, r3, #31
 8024bfe:	2202      	movs	r2, #2
 8024c00:	409a      	lsls	r2, r3
 8024c02:	69fb      	ldr	r3, [r7, #28]
 8024c04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024c06:	693b      	ldr	r3, [r7, #16]
 8024c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024c0c:	2b00      	cmp	r3, #0
 8024c0e:	d018      	beq.n	8024c42 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8024c10:	693b      	ldr	r3, [r7, #16]
 8024c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024c16:	2b00      	cmp	r3, #0
 8024c18:	d109      	bne.n	8024c2e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8024c1a:	687b      	ldr	r3, [r7, #4]
 8024c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024c1e:	2b00      	cmp	r3, #0
 8024c20:	f000 813a 	beq.w	8024e98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8024c24:	687b      	ldr	r3, [r7, #4]
 8024c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024c28:	6878      	ldr	r0, [r7, #4]
 8024c2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024c2c:	e134      	b.n	8024e98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8024c2e:	687b      	ldr	r3, [r7, #4]
 8024c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024c32:	2b00      	cmp	r3, #0
 8024c34:	f000 8130 	beq.w	8024e98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8024c38:	687b      	ldr	r3, [r7, #4]
 8024c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024c3c:	6878      	ldr	r0, [r7, #4]
 8024c3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024c40:	e12a      	b.n	8024e98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8024c42:	693b      	ldr	r3, [r7, #16]
 8024c44:	f003 0320 	and.w	r3, r3, #32
 8024c48:	2b00      	cmp	r3, #0
 8024c4a:	f040 8089 	bne.w	8024d60 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8024c4e:	687b      	ldr	r3, [r7, #4]
 8024c50:	681b      	ldr	r3, [r3, #0]
 8024c52:	4a2b      	ldr	r2, [pc, #172]	; (8024d00 <HAL_DMA_IRQHandler+0xc74>)
 8024c54:	4293      	cmp	r3, r2
 8024c56:	d04a      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024c58:	687b      	ldr	r3, [r7, #4]
 8024c5a:	681b      	ldr	r3, [r3, #0]
 8024c5c:	4a29      	ldr	r2, [pc, #164]	; (8024d04 <HAL_DMA_IRQHandler+0xc78>)
 8024c5e:	4293      	cmp	r3, r2
 8024c60:	d045      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024c62:	687b      	ldr	r3, [r7, #4]
 8024c64:	681b      	ldr	r3, [r3, #0]
 8024c66:	4a28      	ldr	r2, [pc, #160]	; (8024d08 <HAL_DMA_IRQHandler+0xc7c>)
 8024c68:	4293      	cmp	r3, r2
 8024c6a:	d040      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024c6c:	687b      	ldr	r3, [r7, #4]
 8024c6e:	681b      	ldr	r3, [r3, #0]
 8024c70:	4a26      	ldr	r2, [pc, #152]	; (8024d0c <HAL_DMA_IRQHandler+0xc80>)
 8024c72:	4293      	cmp	r3, r2
 8024c74:	d03b      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024c76:	687b      	ldr	r3, [r7, #4]
 8024c78:	681b      	ldr	r3, [r3, #0]
 8024c7a:	4a25      	ldr	r2, [pc, #148]	; (8024d10 <HAL_DMA_IRQHandler+0xc84>)
 8024c7c:	4293      	cmp	r3, r2
 8024c7e:	d036      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024c80:	687b      	ldr	r3, [r7, #4]
 8024c82:	681b      	ldr	r3, [r3, #0]
 8024c84:	4a23      	ldr	r2, [pc, #140]	; (8024d14 <HAL_DMA_IRQHandler+0xc88>)
 8024c86:	4293      	cmp	r3, r2
 8024c88:	d031      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024c8a:	687b      	ldr	r3, [r7, #4]
 8024c8c:	681b      	ldr	r3, [r3, #0]
 8024c8e:	4a22      	ldr	r2, [pc, #136]	; (8024d18 <HAL_DMA_IRQHandler+0xc8c>)
 8024c90:	4293      	cmp	r3, r2
 8024c92:	d02c      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024c94:	687b      	ldr	r3, [r7, #4]
 8024c96:	681b      	ldr	r3, [r3, #0]
 8024c98:	4a20      	ldr	r2, [pc, #128]	; (8024d1c <HAL_DMA_IRQHandler+0xc90>)
 8024c9a:	4293      	cmp	r3, r2
 8024c9c:	d027      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024c9e:	687b      	ldr	r3, [r7, #4]
 8024ca0:	681b      	ldr	r3, [r3, #0]
 8024ca2:	4a1f      	ldr	r2, [pc, #124]	; (8024d20 <HAL_DMA_IRQHandler+0xc94>)
 8024ca4:	4293      	cmp	r3, r2
 8024ca6:	d022      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024ca8:	687b      	ldr	r3, [r7, #4]
 8024caa:	681b      	ldr	r3, [r3, #0]
 8024cac:	4a1d      	ldr	r2, [pc, #116]	; (8024d24 <HAL_DMA_IRQHandler+0xc98>)
 8024cae:	4293      	cmp	r3, r2
 8024cb0:	d01d      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024cb2:	687b      	ldr	r3, [r7, #4]
 8024cb4:	681b      	ldr	r3, [r3, #0]
 8024cb6:	4a1c      	ldr	r2, [pc, #112]	; (8024d28 <HAL_DMA_IRQHandler+0xc9c>)
 8024cb8:	4293      	cmp	r3, r2
 8024cba:	d018      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024cbc:	687b      	ldr	r3, [r7, #4]
 8024cbe:	681b      	ldr	r3, [r3, #0]
 8024cc0:	4a1a      	ldr	r2, [pc, #104]	; (8024d2c <HAL_DMA_IRQHandler+0xca0>)
 8024cc2:	4293      	cmp	r3, r2
 8024cc4:	d013      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024cc6:	687b      	ldr	r3, [r7, #4]
 8024cc8:	681b      	ldr	r3, [r3, #0]
 8024cca:	4a19      	ldr	r2, [pc, #100]	; (8024d30 <HAL_DMA_IRQHandler+0xca4>)
 8024ccc:	4293      	cmp	r3, r2
 8024cce:	d00e      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024cd0:	687b      	ldr	r3, [r7, #4]
 8024cd2:	681b      	ldr	r3, [r3, #0]
 8024cd4:	4a17      	ldr	r2, [pc, #92]	; (8024d34 <HAL_DMA_IRQHandler+0xca8>)
 8024cd6:	4293      	cmp	r3, r2
 8024cd8:	d009      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024cda:	687b      	ldr	r3, [r7, #4]
 8024cdc:	681b      	ldr	r3, [r3, #0]
 8024cde:	4a16      	ldr	r2, [pc, #88]	; (8024d38 <HAL_DMA_IRQHandler+0xcac>)
 8024ce0:	4293      	cmp	r3, r2
 8024ce2:	d004      	beq.n	8024cee <HAL_DMA_IRQHandler+0xc62>
 8024ce4:	687b      	ldr	r3, [r7, #4]
 8024ce6:	681b      	ldr	r3, [r3, #0]
 8024ce8:	4a14      	ldr	r2, [pc, #80]	; (8024d3c <HAL_DMA_IRQHandler+0xcb0>)
 8024cea:	4293      	cmp	r3, r2
 8024cec:	d128      	bne.n	8024d40 <HAL_DMA_IRQHandler+0xcb4>
 8024cee:	687b      	ldr	r3, [r7, #4]
 8024cf0:	681b      	ldr	r3, [r3, #0]
 8024cf2:	681a      	ldr	r2, [r3, #0]
 8024cf4:	687b      	ldr	r3, [r7, #4]
 8024cf6:	681b      	ldr	r3, [r3, #0]
 8024cf8:	f022 0214 	bic.w	r2, r2, #20
 8024cfc:	601a      	str	r2, [r3, #0]
 8024cfe:	e027      	b.n	8024d50 <HAL_DMA_IRQHandler+0xcc4>
 8024d00:	40020010 	.word	0x40020010
 8024d04:	40020028 	.word	0x40020028
 8024d08:	40020040 	.word	0x40020040
 8024d0c:	40020058 	.word	0x40020058
 8024d10:	40020070 	.word	0x40020070
 8024d14:	40020088 	.word	0x40020088
 8024d18:	400200a0 	.word	0x400200a0
 8024d1c:	400200b8 	.word	0x400200b8
 8024d20:	40020410 	.word	0x40020410
 8024d24:	40020428 	.word	0x40020428
 8024d28:	40020440 	.word	0x40020440
 8024d2c:	40020458 	.word	0x40020458
 8024d30:	40020470 	.word	0x40020470
 8024d34:	40020488 	.word	0x40020488
 8024d38:	400204a0 	.word	0x400204a0
 8024d3c:	400204b8 	.word	0x400204b8
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	681b      	ldr	r3, [r3, #0]
 8024d44:	681a      	ldr	r2, [r3, #0]
 8024d46:	687b      	ldr	r3, [r7, #4]
 8024d48:	681b      	ldr	r3, [r3, #0]
 8024d4a:	f022 020a 	bic.w	r2, r2, #10
 8024d4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8024d50:	687b      	ldr	r3, [r7, #4]
 8024d52:	2201      	movs	r2, #1
 8024d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8024d58:	687b      	ldr	r3, [r7, #4]
 8024d5a:	2200      	movs	r2, #0
 8024d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8024d60:	687b      	ldr	r3, [r7, #4]
 8024d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024d64:	2b00      	cmp	r3, #0
 8024d66:	f000 8097 	beq.w	8024e98 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024d6e:	6878      	ldr	r0, [r7, #4]
 8024d70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024d72:	e091      	b.n	8024e98 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8024d74:	687b      	ldr	r3, [r7, #4]
 8024d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024d78:	f003 031f 	and.w	r3, r3, #31
 8024d7c:	2208      	movs	r2, #8
 8024d7e:	409a      	lsls	r2, r3
 8024d80:	697b      	ldr	r3, [r7, #20]
 8024d82:	4013      	ands	r3, r2
 8024d84:	2b00      	cmp	r3, #0
 8024d86:	f000 8088 	beq.w	8024e9a <HAL_DMA_IRQHandler+0xe0e>
 8024d8a:	693b      	ldr	r3, [r7, #16]
 8024d8c:	f003 0308 	and.w	r3, r3, #8
 8024d90:	2b00      	cmp	r3, #0
 8024d92:	f000 8082 	beq.w	8024e9a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8024d96:	687b      	ldr	r3, [r7, #4]
 8024d98:	681b      	ldr	r3, [r3, #0]
 8024d9a:	4a41      	ldr	r2, [pc, #260]	; (8024ea0 <HAL_DMA_IRQHandler+0xe14>)
 8024d9c:	4293      	cmp	r3, r2
 8024d9e:	d04a      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024da0:	687b      	ldr	r3, [r7, #4]
 8024da2:	681b      	ldr	r3, [r3, #0]
 8024da4:	4a3f      	ldr	r2, [pc, #252]	; (8024ea4 <HAL_DMA_IRQHandler+0xe18>)
 8024da6:	4293      	cmp	r3, r2
 8024da8:	d045      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024daa:	687b      	ldr	r3, [r7, #4]
 8024dac:	681b      	ldr	r3, [r3, #0]
 8024dae:	4a3e      	ldr	r2, [pc, #248]	; (8024ea8 <HAL_DMA_IRQHandler+0xe1c>)
 8024db0:	4293      	cmp	r3, r2
 8024db2:	d040      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024db4:	687b      	ldr	r3, [r7, #4]
 8024db6:	681b      	ldr	r3, [r3, #0]
 8024db8:	4a3c      	ldr	r2, [pc, #240]	; (8024eac <HAL_DMA_IRQHandler+0xe20>)
 8024dba:	4293      	cmp	r3, r2
 8024dbc:	d03b      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024dbe:	687b      	ldr	r3, [r7, #4]
 8024dc0:	681b      	ldr	r3, [r3, #0]
 8024dc2:	4a3b      	ldr	r2, [pc, #236]	; (8024eb0 <HAL_DMA_IRQHandler+0xe24>)
 8024dc4:	4293      	cmp	r3, r2
 8024dc6:	d036      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024dc8:	687b      	ldr	r3, [r7, #4]
 8024dca:	681b      	ldr	r3, [r3, #0]
 8024dcc:	4a39      	ldr	r2, [pc, #228]	; (8024eb4 <HAL_DMA_IRQHandler+0xe28>)
 8024dce:	4293      	cmp	r3, r2
 8024dd0:	d031      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024dd2:	687b      	ldr	r3, [r7, #4]
 8024dd4:	681b      	ldr	r3, [r3, #0]
 8024dd6:	4a38      	ldr	r2, [pc, #224]	; (8024eb8 <HAL_DMA_IRQHandler+0xe2c>)
 8024dd8:	4293      	cmp	r3, r2
 8024dda:	d02c      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024ddc:	687b      	ldr	r3, [r7, #4]
 8024dde:	681b      	ldr	r3, [r3, #0]
 8024de0:	4a36      	ldr	r2, [pc, #216]	; (8024ebc <HAL_DMA_IRQHandler+0xe30>)
 8024de2:	4293      	cmp	r3, r2
 8024de4:	d027      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024de6:	687b      	ldr	r3, [r7, #4]
 8024de8:	681b      	ldr	r3, [r3, #0]
 8024dea:	4a35      	ldr	r2, [pc, #212]	; (8024ec0 <HAL_DMA_IRQHandler+0xe34>)
 8024dec:	4293      	cmp	r3, r2
 8024dee:	d022      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024df0:	687b      	ldr	r3, [r7, #4]
 8024df2:	681b      	ldr	r3, [r3, #0]
 8024df4:	4a33      	ldr	r2, [pc, #204]	; (8024ec4 <HAL_DMA_IRQHandler+0xe38>)
 8024df6:	4293      	cmp	r3, r2
 8024df8:	d01d      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024dfa:	687b      	ldr	r3, [r7, #4]
 8024dfc:	681b      	ldr	r3, [r3, #0]
 8024dfe:	4a32      	ldr	r2, [pc, #200]	; (8024ec8 <HAL_DMA_IRQHandler+0xe3c>)
 8024e00:	4293      	cmp	r3, r2
 8024e02:	d018      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024e04:	687b      	ldr	r3, [r7, #4]
 8024e06:	681b      	ldr	r3, [r3, #0]
 8024e08:	4a30      	ldr	r2, [pc, #192]	; (8024ecc <HAL_DMA_IRQHandler+0xe40>)
 8024e0a:	4293      	cmp	r3, r2
 8024e0c:	d013      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024e0e:	687b      	ldr	r3, [r7, #4]
 8024e10:	681b      	ldr	r3, [r3, #0]
 8024e12:	4a2f      	ldr	r2, [pc, #188]	; (8024ed0 <HAL_DMA_IRQHandler+0xe44>)
 8024e14:	4293      	cmp	r3, r2
 8024e16:	d00e      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024e18:	687b      	ldr	r3, [r7, #4]
 8024e1a:	681b      	ldr	r3, [r3, #0]
 8024e1c:	4a2d      	ldr	r2, [pc, #180]	; (8024ed4 <HAL_DMA_IRQHandler+0xe48>)
 8024e1e:	4293      	cmp	r3, r2
 8024e20:	d009      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024e22:	687b      	ldr	r3, [r7, #4]
 8024e24:	681b      	ldr	r3, [r3, #0]
 8024e26:	4a2c      	ldr	r2, [pc, #176]	; (8024ed8 <HAL_DMA_IRQHandler+0xe4c>)
 8024e28:	4293      	cmp	r3, r2
 8024e2a:	d004      	beq.n	8024e36 <HAL_DMA_IRQHandler+0xdaa>
 8024e2c:	687b      	ldr	r3, [r7, #4]
 8024e2e:	681b      	ldr	r3, [r3, #0]
 8024e30:	4a2a      	ldr	r2, [pc, #168]	; (8024edc <HAL_DMA_IRQHandler+0xe50>)
 8024e32:	4293      	cmp	r3, r2
 8024e34:	d108      	bne.n	8024e48 <HAL_DMA_IRQHandler+0xdbc>
 8024e36:	687b      	ldr	r3, [r7, #4]
 8024e38:	681b      	ldr	r3, [r3, #0]
 8024e3a:	681a      	ldr	r2, [r3, #0]
 8024e3c:	687b      	ldr	r3, [r7, #4]
 8024e3e:	681b      	ldr	r3, [r3, #0]
 8024e40:	f022 021c 	bic.w	r2, r2, #28
 8024e44:	601a      	str	r2, [r3, #0]
 8024e46:	e007      	b.n	8024e58 <HAL_DMA_IRQHandler+0xdcc>
 8024e48:	687b      	ldr	r3, [r7, #4]
 8024e4a:	681b      	ldr	r3, [r3, #0]
 8024e4c:	681a      	ldr	r2, [r3, #0]
 8024e4e:	687b      	ldr	r3, [r7, #4]
 8024e50:	681b      	ldr	r3, [r3, #0]
 8024e52:	f022 020e 	bic.w	r2, r2, #14
 8024e56:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8024e58:	687b      	ldr	r3, [r7, #4]
 8024e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024e5c:	f003 031f 	and.w	r3, r3, #31
 8024e60:	2201      	movs	r2, #1
 8024e62:	409a      	lsls	r2, r3
 8024e64:	69fb      	ldr	r3, [r7, #28]
 8024e66:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8024e68:	687b      	ldr	r3, [r7, #4]
 8024e6a:	2201      	movs	r2, #1
 8024e6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8024e6e:	687b      	ldr	r3, [r7, #4]
 8024e70:	2201      	movs	r2, #1
 8024e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8024e76:	687b      	ldr	r3, [r7, #4]
 8024e78:	2200      	movs	r2, #0
 8024e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8024e7e:	687b      	ldr	r3, [r7, #4]
 8024e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024e82:	2b00      	cmp	r3, #0
 8024e84:	d009      	beq.n	8024e9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8024e86:	687b      	ldr	r3, [r7, #4]
 8024e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024e8a:	6878      	ldr	r0, [r7, #4]
 8024e8c:	4798      	blx	r3
 8024e8e:	e004      	b.n	8024e9a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8024e90:	bf00      	nop
 8024e92:	e002      	b.n	8024e9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024e94:	bf00      	nop
 8024e96:	e000      	b.n	8024e9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8024e98:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8024e9a:	3728      	adds	r7, #40	; 0x28
 8024e9c:	46bd      	mov	sp, r7
 8024e9e:	bd80      	pop	{r7, pc}
 8024ea0:	40020010 	.word	0x40020010
 8024ea4:	40020028 	.word	0x40020028
 8024ea8:	40020040 	.word	0x40020040
 8024eac:	40020058 	.word	0x40020058
 8024eb0:	40020070 	.word	0x40020070
 8024eb4:	40020088 	.word	0x40020088
 8024eb8:	400200a0 	.word	0x400200a0
 8024ebc:	400200b8 	.word	0x400200b8
 8024ec0:	40020410 	.word	0x40020410
 8024ec4:	40020428 	.word	0x40020428
 8024ec8:	40020440 	.word	0x40020440
 8024ecc:	40020458 	.word	0x40020458
 8024ed0:	40020470 	.word	0x40020470
 8024ed4:	40020488 	.word	0x40020488
 8024ed8:	400204a0 	.word	0x400204a0
 8024edc:	400204b8 	.word	0x400204b8

08024ee0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8024ee0:	b480      	push	{r7}
 8024ee2:	b083      	sub	sp, #12
 8024ee4:	af00      	add	r7, sp, #0
 8024ee6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8024ee8:	687b      	ldr	r3, [r7, #4]
 8024eea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8024eee:	b2db      	uxtb	r3, r3
}
 8024ef0:	4618      	mov	r0, r3
 8024ef2:	370c      	adds	r7, #12
 8024ef4:	46bd      	mov	sp, r7
 8024ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024efa:	4770      	bx	lr

08024efc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8024efc:	b480      	push	{r7}
 8024efe:	b083      	sub	sp, #12
 8024f00:	af00      	add	r7, sp, #0
 8024f02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8024f04:	687b      	ldr	r3, [r7, #4]
 8024f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8024f08:	4618      	mov	r0, r3
 8024f0a:	370c      	adds	r7, #12
 8024f0c:	46bd      	mov	sp, r7
 8024f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f12:	4770      	bx	lr

08024f14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8024f14:	b480      	push	{r7}
 8024f16:	b087      	sub	sp, #28
 8024f18:	af00      	add	r7, sp, #0
 8024f1a:	60f8      	str	r0, [r7, #12]
 8024f1c:	60b9      	str	r1, [r7, #8]
 8024f1e:	607a      	str	r2, [r7, #4]
 8024f20:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8024f22:	68fb      	ldr	r3, [r7, #12]
 8024f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024f26:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8024f28:	68fb      	ldr	r3, [r7, #12]
 8024f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024f2c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8024f2e:	68fb      	ldr	r3, [r7, #12]
 8024f30:	681b      	ldr	r3, [r3, #0]
 8024f32:	4a7f      	ldr	r2, [pc, #508]	; (8025130 <DMA_SetConfig+0x21c>)
 8024f34:	4293      	cmp	r3, r2
 8024f36:	d072      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024f38:	68fb      	ldr	r3, [r7, #12]
 8024f3a:	681b      	ldr	r3, [r3, #0]
 8024f3c:	4a7d      	ldr	r2, [pc, #500]	; (8025134 <DMA_SetConfig+0x220>)
 8024f3e:	4293      	cmp	r3, r2
 8024f40:	d06d      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024f42:	68fb      	ldr	r3, [r7, #12]
 8024f44:	681b      	ldr	r3, [r3, #0]
 8024f46:	4a7c      	ldr	r2, [pc, #496]	; (8025138 <DMA_SetConfig+0x224>)
 8024f48:	4293      	cmp	r3, r2
 8024f4a:	d068      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024f4c:	68fb      	ldr	r3, [r7, #12]
 8024f4e:	681b      	ldr	r3, [r3, #0]
 8024f50:	4a7a      	ldr	r2, [pc, #488]	; (802513c <DMA_SetConfig+0x228>)
 8024f52:	4293      	cmp	r3, r2
 8024f54:	d063      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024f56:	68fb      	ldr	r3, [r7, #12]
 8024f58:	681b      	ldr	r3, [r3, #0]
 8024f5a:	4a79      	ldr	r2, [pc, #484]	; (8025140 <DMA_SetConfig+0x22c>)
 8024f5c:	4293      	cmp	r3, r2
 8024f5e:	d05e      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024f60:	68fb      	ldr	r3, [r7, #12]
 8024f62:	681b      	ldr	r3, [r3, #0]
 8024f64:	4a77      	ldr	r2, [pc, #476]	; (8025144 <DMA_SetConfig+0x230>)
 8024f66:	4293      	cmp	r3, r2
 8024f68:	d059      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024f6a:	68fb      	ldr	r3, [r7, #12]
 8024f6c:	681b      	ldr	r3, [r3, #0]
 8024f6e:	4a76      	ldr	r2, [pc, #472]	; (8025148 <DMA_SetConfig+0x234>)
 8024f70:	4293      	cmp	r3, r2
 8024f72:	d054      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024f74:	68fb      	ldr	r3, [r7, #12]
 8024f76:	681b      	ldr	r3, [r3, #0]
 8024f78:	4a74      	ldr	r2, [pc, #464]	; (802514c <DMA_SetConfig+0x238>)
 8024f7a:	4293      	cmp	r3, r2
 8024f7c:	d04f      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024f7e:	68fb      	ldr	r3, [r7, #12]
 8024f80:	681b      	ldr	r3, [r3, #0]
 8024f82:	4a73      	ldr	r2, [pc, #460]	; (8025150 <DMA_SetConfig+0x23c>)
 8024f84:	4293      	cmp	r3, r2
 8024f86:	d04a      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024f88:	68fb      	ldr	r3, [r7, #12]
 8024f8a:	681b      	ldr	r3, [r3, #0]
 8024f8c:	4a71      	ldr	r2, [pc, #452]	; (8025154 <DMA_SetConfig+0x240>)
 8024f8e:	4293      	cmp	r3, r2
 8024f90:	d045      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024f92:	68fb      	ldr	r3, [r7, #12]
 8024f94:	681b      	ldr	r3, [r3, #0]
 8024f96:	4a70      	ldr	r2, [pc, #448]	; (8025158 <DMA_SetConfig+0x244>)
 8024f98:	4293      	cmp	r3, r2
 8024f9a:	d040      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024f9c:	68fb      	ldr	r3, [r7, #12]
 8024f9e:	681b      	ldr	r3, [r3, #0]
 8024fa0:	4a6e      	ldr	r2, [pc, #440]	; (802515c <DMA_SetConfig+0x248>)
 8024fa2:	4293      	cmp	r3, r2
 8024fa4:	d03b      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024fa6:	68fb      	ldr	r3, [r7, #12]
 8024fa8:	681b      	ldr	r3, [r3, #0]
 8024faa:	4a6d      	ldr	r2, [pc, #436]	; (8025160 <DMA_SetConfig+0x24c>)
 8024fac:	4293      	cmp	r3, r2
 8024fae:	d036      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024fb0:	68fb      	ldr	r3, [r7, #12]
 8024fb2:	681b      	ldr	r3, [r3, #0]
 8024fb4:	4a6b      	ldr	r2, [pc, #428]	; (8025164 <DMA_SetConfig+0x250>)
 8024fb6:	4293      	cmp	r3, r2
 8024fb8:	d031      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024fba:	68fb      	ldr	r3, [r7, #12]
 8024fbc:	681b      	ldr	r3, [r3, #0]
 8024fbe:	4a6a      	ldr	r2, [pc, #424]	; (8025168 <DMA_SetConfig+0x254>)
 8024fc0:	4293      	cmp	r3, r2
 8024fc2:	d02c      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024fc4:	68fb      	ldr	r3, [r7, #12]
 8024fc6:	681b      	ldr	r3, [r3, #0]
 8024fc8:	4a68      	ldr	r2, [pc, #416]	; (802516c <DMA_SetConfig+0x258>)
 8024fca:	4293      	cmp	r3, r2
 8024fcc:	d027      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024fce:	68fb      	ldr	r3, [r7, #12]
 8024fd0:	681b      	ldr	r3, [r3, #0]
 8024fd2:	4a67      	ldr	r2, [pc, #412]	; (8025170 <DMA_SetConfig+0x25c>)
 8024fd4:	4293      	cmp	r3, r2
 8024fd6:	d022      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024fd8:	68fb      	ldr	r3, [r7, #12]
 8024fda:	681b      	ldr	r3, [r3, #0]
 8024fdc:	4a65      	ldr	r2, [pc, #404]	; (8025174 <DMA_SetConfig+0x260>)
 8024fde:	4293      	cmp	r3, r2
 8024fe0:	d01d      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024fe2:	68fb      	ldr	r3, [r7, #12]
 8024fe4:	681b      	ldr	r3, [r3, #0]
 8024fe6:	4a64      	ldr	r2, [pc, #400]	; (8025178 <DMA_SetConfig+0x264>)
 8024fe8:	4293      	cmp	r3, r2
 8024fea:	d018      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024fec:	68fb      	ldr	r3, [r7, #12]
 8024fee:	681b      	ldr	r3, [r3, #0]
 8024ff0:	4a62      	ldr	r2, [pc, #392]	; (802517c <DMA_SetConfig+0x268>)
 8024ff2:	4293      	cmp	r3, r2
 8024ff4:	d013      	beq.n	802501e <DMA_SetConfig+0x10a>
 8024ff6:	68fb      	ldr	r3, [r7, #12]
 8024ff8:	681b      	ldr	r3, [r3, #0]
 8024ffa:	4a61      	ldr	r2, [pc, #388]	; (8025180 <DMA_SetConfig+0x26c>)
 8024ffc:	4293      	cmp	r3, r2
 8024ffe:	d00e      	beq.n	802501e <DMA_SetConfig+0x10a>
 8025000:	68fb      	ldr	r3, [r7, #12]
 8025002:	681b      	ldr	r3, [r3, #0]
 8025004:	4a5f      	ldr	r2, [pc, #380]	; (8025184 <DMA_SetConfig+0x270>)
 8025006:	4293      	cmp	r3, r2
 8025008:	d009      	beq.n	802501e <DMA_SetConfig+0x10a>
 802500a:	68fb      	ldr	r3, [r7, #12]
 802500c:	681b      	ldr	r3, [r3, #0]
 802500e:	4a5e      	ldr	r2, [pc, #376]	; (8025188 <DMA_SetConfig+0x274>)
 8025010:	4293      	cmp	r3, r2
 8025012:	d004      	beq.n	802501e <DMA_SetConfig+0x10a>
 8025014:	68fb      	ldr	r3, [r7, #12]
 8025016:	681b      	ldr	r3, [r3, #0]
 8025018:	4a5c      	ldr	r2, [pc, #368]	; (802518c <DMA_SetConfig+0x278>)
 802501a:	4293      	cmp	r3, r2
 802501c:	d101      	bne.n	8025022 <DMA_SetConfig+0x10e>
 802501e:	2301      	movs	r3, #1
 8025020:	e000      	b.n	8025024 <DMA_SetConfig+0x110>
 8025022:	2300      	movs	r3, #0
 8025024:	2b00      	cmp	r3, #0
 8025026:	d00d      	beq.n	8025044 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8025028:	68fb      	ldr	r3, [r7, #12]
 802502a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802502c:	68fa      	ldr	r2, [r7, #12]
 802502e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8025030:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8025032:	68fb      	ldr	r3, [r7, #12]
 8025034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8025036:	2b00      	cmp	r3, #0
 8025038:	d004      	beq.n	8025044 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802503a:	68fb      	ldr	r3, [r7, #12]
 802503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802503e:	68fa      	ldr	r2, [r7, #12]
 8025040:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8025042:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8025044:	68fb      	ldr	r3, [r7, #12]
 8025046:	681b      	ldr	r3, [r3, #0]
 8025048:	4a39      	ldr	r2, [pc, #228]	; (8025130 <DMA_SetConfig+0x21c>)
 802504a:	4293      	cmp	r3, r2
 802504c:	d04a      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 802504e:	68fb      	ldr	r3, [r7, #12]
 8025050:	681b      	ldr	r3, [r3, #0]
 8025052:	4a38      	ldr	r2, [pc, #224]	; (8025134 <DMA_SetConfig+0x220>)
 8025054:	4293      	cmp	r3, r2
 8025056:	d045      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 8025058:	68fb      	ldr	r3, [r7, #12]
 802505a:	681b      	ldr	r3, [r3, #0]
 802505c:	4a36      	ldr	r2, [pc, #216]	; (8025138 <DMA_SetConfig+0x224>)
 802505e:	4293      	cmp	r3, r2
 8025060:	d040      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 8025062:	68fb      	ldr	r3, [r7, #12]
 8025064:	681b      	ldr	r3, [r3, #0]
 8025066:	4a35      	ldr	r2, [pc, #212]	; (802513c <DMA_SetConfig+0x228>)
 8025068:	4293      	cmp	r3, r2
 802506a:	d03b      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 802506c:	68fb      	ldr	r3, [r7, #12]
 802506e:	681b      	ldr	r3, [r3, #0]
 8025070:	4a33      	ldr	r2, [pc, #204]	; (8025140 <DMA_SetConfig+0x22c>)
 8025072:	4293      	cmp	r3, r2
 8025074:	d036      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 8025076:	68fb      	ldr	r3, [r7, #12]
 8025078:	681b      	ldr	r3, [r3, #0]
 802507a:	4a32      	ldr	r2, [pc, #200]	; (8025144 <DMA_SetConfig+0x230>)
 802507c:	4293      	cmp	r3, r2
 802507e:	d031      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 8025080:	68fb      	ldr	r3, [r7, #12]
 8025082:	681b      	ldr	r3, [r3, #0]
 8025084:	4a30      	ldr	r2, [pc, #192]	; (8025148 <DMA_SetConfig+0x234>)
 8025086:	4293      	cmp	r3, r2
 8025088:	d02c      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 802508a:	68fb      	ldr	r3, [r7, #12]
 802508c:	681b      	ldr	r3, [r3, #0]
 802508e:	4a2f      	ldr	r2, [pc, #188]	; (802514c <DMA_SetConfig+0x238>)
 8025090:	4293      	cmp	r3, r2
 8025092:	d027      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 8025094:	68fb      	ldr	r3, [r7, #12]
 8025096:	681b      	ldr	r3, [r3, #0]
 8025098:	4a2d      	ldr	r2, [pc, #180]	; (8025150 <DMA_SetConfig+0x23c>)
 802509a:	4293      	cmp	r3, r2
 802509c:	d022      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 802509e:	68fb      	ldr	r3, [r7, #12]
 80250a0:	681b      	ldr	r3, [r3, #0]
 80250a2:	4a2c      	ldr	r2, [pc, #176]	; (8025154 <DMA_SetConfig+0x240>)
 80250a4:	4293      	cmp	r3, r2
 80250a6:	d01d      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 80250a8:	68fb      	ldr	r3, [r7, #12]
 80250aa:	681b      	ldr	r3, [r3, #0]
 80250ac:	4a2a      	ldr	r2, [pc, #168]	; (8025158 <DMA_SetConfig+0x244>)
 80250ae:	4293      	cmp	r3, r2
 80250b0:	d018      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 80250b2:	68fb      	ldr	r3, [r7, #12]
 80250b4:	681b      	ldr	r3, [r3, #0]
 80250b6:	4a29      	ldr	r2, [pc, #164]	; (802515c <DMA_SetConfig+0x248>)
 80250b8:	4293      	cmp	r3, r2
 80250ba:	d013      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 80250bc:	68fb      	ldr	r3, [r7, #12]
 80250be:	681b      	ldr	r3, [r3, #0]
 80250c0:	4a27      	ldr	r2, [pc, #156]	; (8025160 <DMA_SetConfig+0x24c>)
 80250c2:	4293      	cmp	r3, r2
 80250c4:	d00e      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 80250c6:	68fb      	ldr	r3, [r7, #12]
 80250c8:	681b      	ldr	r3, [r3, #0]
 80250ca:	4a26      	ldr	r2, [pc, #152]	; (8025164 <DMA_SetConfig+0x250>)
 80250cc:	4293      	cmp	r3, r2
 80250ce:	d009      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 80250d0:	68fb      	ldr	r3, [r7, #12]
 80250d2:	681b      	ldr	r3, [r3, #0]
 80250d4:	4a24      	ldr	r2, [pc, #144]	; (8025168 <DMA_SetConfig+0x254>)
 80250d6:	4293      	cmp	r3, r2
 80250d8:	d004      	beq.n	80250e4 <DMA_SetConfig+0x1d0>
 80250da:	68fb      	ldr	r3, [r7, #12]
 80250dc:	681b      	ldr	r3, [r3, #0]
 80250de:	4a23      	ldr	r2, [pc, #140]	; (802516c <DMA_SetConfig+0x258>)
 80250e0:	4293      	cmp	r3, r2
 80250e2:	d101      	bne.n	80250e8 <DMA_SetConfig+0x1d4>
 80250e4:	2301      	movs	r3, #1
 80250e6:	e000      	b.n	80250ea <DMA_SetConfig+0x1d6>
 80250e8:	2300      	movs	r3, #0
 80250ea:	2b00      	cmp	r3, #0
 80250ec:	d059      	beq.n	80251a2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80250ee:	68fb      	ldr	r3, [r7, #12]
 80250f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80250f2:	f003 031f 	and.w	r3, r3, #31
 80250f6:	223f      	movs	r2, #63	; 0x3f
 80250f8:	409a      	lsls	r2, r3
 80250fa:	697b      	ldr	r3, [r7, #20]
 80250fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80250fe:	68fb      	ldr	r3, [r7, #12]
 8025100:	681b      	ldr	r3, [r3, #0]
 8025102:	681a      	ldr	r2, [r3, #0]
 8025104:	68fb      	ldr	r3, [r7, #12]
 8025106:	681b      	ldr	r3, [r3, #0]
 8025108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802510c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 802510e:	68fb      	ldr	r3, [r7, #12]
 8025110:	681b      	ldr	r3, [r3, #0]
 8025112:	683a      	ldr	r2, [r7, #0]
 8025114:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8025116:	68fb      	ldr	r3, [r7, #12]
 8025118:	689b      	ldr	r3, [r3, #8]
 802511a:	2b40      	cmp	r3, #64	; 0x40
 802511c:	d138      	bne.n	8025190 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 802511e:	68fb      	ldr	r3, [r7, #12]
 8025120:	681b      	ldr	r3, [r3, #0]
 8025122:	687a      	ldr	r2, [r7, #4]
 8025124:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8025126:	68fb      	ldr	r3, [r7, #12]
 8025128:	681b      	ldr	r3, [r3, #0]
 802512a:	68ba      	ldr	r2, [r7, #8]
 802512c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 802512e:	e086      	b.n	802523e <DMA_SetConfig+0x32a>
 8025130:	40020010 	.word	0x40020010
 8025134:	40020028 	.word	0x40020028
 8025138:	40020040 	.word	0x40020040
 802513c:	40020058 	.word	0x40020058
 8025140:	40020070 	.word	0x40020070
 8025144:	40020088 	.word	0x40020088
 8025148:	400200a0 	.word	0x400200a0
 802514c:	400200b8 	.word	0x400200b8
 8025150:	40020410 	.word	0x40020410
 8025154:	40020428 	.word	0x40020428
 8025158:	40020440 	.word	0x40020440
 802515c:	40020458 	.word	0x40020458
 8025160:	40020470 	.word	0x40020470
 8025164:	40020488 	.word	0x40020488
 8025168:	400204a0 	.word	0x400204a0
 802516c:	400204b8 	.word	0x400204b8
 8025170:	58025408 	.word	0x58025408
 8025174:	5802541c 	.word	0x5802541c
 8025178:	58025430 	.word	0x58025430
 802517c:	58025444 	.word	0x58025444
 8025180:	58025458 	.word	0x58025458
 8025184:	5802546c 	.word	0x5802546c
 8025188:	58025480 	.word	0x58025480
 802518c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8025190:	68fb      	ldr	r3, [r7, #12]
 8025192:	681b      	ldr	r3, [r3, #0]
 8025194:	68ba      	ldr	r2, [r7, #8]
 8025196:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8025198:	68fb      	ldr	r3, [r7, #12]
 802519a:	681b      	ldr	r3, [r3, #0]
 802519c:	687a      	ldr	r2, [r7, #4]
 802519e:	60da      	str	r2, [r3, #12]
}
 80251a0:	e04d      	b.n	802523e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80251a2:	68fb      	ldr	r3, [r7, #12]
 80251a4:	681b      	ldr	r3, [r3, #0]
 80251a6:	4a29      	ldr	r2, [pc, #164]	; (802524c <DMA_SetConfig+0x338>)
 80251a8:	4293      	cmp	r3, r2
 80251aa:	d022      	beq.n	80251f2 <DMA_SetConfig+0x2de>
 80251ac:	68fb      	ldr	r3, [r7, #12]
 80251ae:	681b      	ldr	r3, [r3, #0]
 80251b0:	4a27      	ldr	r2, [pc, #156]	; (8025250 <DMA_SetConfig+0x33c>)
 80251b2:	4293      	cmp	r3, r2
 80251b4:	d01d      	beq.n	80251f2 <DMA_SetConfig+0x2de>
 80251b6:	68fb      	ldr	r3, [r7, #12]
 80251b8:	681b      	ldr	r3, [r3, #0]
 80251ba:	4a26      	ldr	r2, [pc, #152]	; (8025254 <DMA_SetConfig+0x340>)
 80251bc:	4293      	cmp	r3, r2
 80251be:	d018      	beq.n	80251f2 <DMA_SetConfig+0x2de>
 80251c0:	68fb      	ldr	r3, [r7, #12]
 80251c2:	681b      	ldr	r3, [r3, #0]
 80251c4:	4a24      	ldr	r2, [pc, #144]	; (8025258 <DMA_SetConfig+0x344>)
 80251c6:	4293      	cmp	r3, r2
 80251c8:	d013      	beq.n	80251f2 <DMA_SetConfig+0x2de>
 80251ca:	68fb      	ldr	r3, [r7, #12]
 80251cc:	681b      	ldr	r3, [r3, #0]
 80251ce:	4a23      	ldr	r2, [pc, #140]	; (802525c <DMA_SetConfig+0x348>)
 80251d0:	4293      	cmp	r3, r2
 80251d2:	d00e      	beq.n	80251f2 <DMA_SetConfig+0x2de>
 80251d4:	68fb      	ldr	r3, [r7, #12]
 80251d6:	681b      	ldr	r3, [r3, #0]
 80251d8:	4a21      	ldr	r2, [pc, #132]	; (8025260 <DMA_SetConfig+0x34c>)
 80251da:	4293      	cmp	r3, r2
 80251dc:	d009      	beq.n	80251f2 <DMA_SetConfig+0x2de>
 80251de:	68fb      	ldr	r3, [r7, #12]
 80251e0:	681b      	ldr	r3, [r3, #0]
 80251e2:	4a20      	ldr	r2, [pc, #128]	; (8025264 <DMA_SetConfig+0x350>)
 80251e4:	4293      	cmp	r3, r2
 80251e6:	d004      	beq.n	80251f2 <DMA_SetConfig+0x2de>
 80251e8:	68fb      	ldr	r3, [r7, #12]
 80251ea:	681b      	ldr	r3, [r3, #0]
 80251ec:	4a1e      	ldr	r2, [pc, #120]	; (8025268 <DMA_SetConfig+0x354>)
 80251ee:	4293      	cmp	r3, r2
 80251f0:	d101      	bne.n	80251f6 <DMA_SetConfig+0x2e2>
 80251f2:	2301      	movs	r3, #1
 80251f4:	e000      	b.n	80251f8 <DMA_SetConfig+0x2e4>
 80251f6:	2300      	movs	r3, #0
 80251f8:	2b00      	cmp	r3, #0
 80251fa:	d020      	beq.n	802523e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80251fc:	68fb      	ldr	r3, [r7, #12]
 80251fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025200:	f003 031f 	and.w	r3, r3, #31
 8025204:	2201      	movs	r2, #1
 8025206:	409a      	lsls	r2, r3
 8025208:	693b      	ldr	r3, [r7, #16]
 802520a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 802520c:	68fb      	ldr	r3, [r7, #12]
 802520e:	681b      	ldr	r3, [r3, #0]
 8025210:	683a      	ldr	r2, [r7, #0]
 8025212:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8025214:	68fb      	ldr	r3, [r7, #12]
 8025216:	689b      	ldr	r3, [r3, #8]
 8025218:	2b40      	cmp	r3, #64	; 0x40
 802521a:	d108      	bne.n	802522e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 802521c:	68fb      	ldr	r3, [r7, #12]
 802521e:	681b      	ldr	r3, [r3, #0]
 8025220:	687a      	ldr	r2, [r7, #4]
 8025222:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8025224:	68fb      	ldr	r3, [r7, #12]
 8025226:	681b      	ldr	r3, [r3, #0]
 8025228:	68ba      	ldr	r2, [r7, #8]
 802522a:	60da      	str	r2, [r3, #12]
}
 802522c:	e007      	b.n	802523e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 802522e:	68fb      	ldr	r3, [r7, #12]
 8025230:	681b      	ldr	r3, [r3, #0]
 8025232:	68ba      	ldr	r2, [r7, #8]
 8025234:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8025236:	68fb      	ldr	r3, [r7, #12]
 8025238:	681b      	ldr	r3, [r3, #0]
 802523a:	687a      	ldr	r2, [r7, #4]
 802523c:	60da      	str	r2, [r3, #12]
}
 802523e:	bf00      	nop
 8025240:	371c      	adds	r7, #28
 8025242:	46bd      	mov	sp, r7
 8025244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025248:	4770      	bx	lr
 802524a:	bf00      	nop
 802524c:	58025408 	.word	0x58025408
 8025250:	5802541c 	.word	0x5802541c
 8025254:	58025430 	.word	0x58025430
 8025258:	58025444 	.word	0x58025444
 802525c:	58025458 	.word	0x58025458
 8025260:	5802546c 	.word	0x5802546c
 8025264:	58025480 	.word	0x58025480
 8025268:	58025494 	.word	0x58025494

0802526c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802526c:	b480      	push	{r7}
 802526e:	b085      	sub	sp, #20
 8025270:	af00      	add	r7, sp, #0
 8025272:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8025274:	687b      	ldr	r3, [r7, #4]
 8025276:	681b      	ldr	r3, [r3, #0]
 8025278:	4a42      	ldr	r2, [pc, #264]	; (8025384 <DMA_CalcBaseAndBitshift+0x118>)
 802527a:	4293      	cmp	r3, r2
 802527c:	d04a      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 802527e:	687b      	ldr	r3, [r7, #4]
 8025280:	681b      	ldr	r3, [r3, #0]
 8025282:	4a41      	ldr	r2, [pc, #260]	; (8025388 <DMA_CalcBaseAndBitshift+0x11c>)
 8025284:	4293      	cmp	r3, r2
 8025286:	d045      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 8025288:	687b      	ldr	r3, [r7, #4]
 802528a:	681b      	ldr	r3, [r3, #0]
 802528c:	4a3f      	ldr	r2, [pc, #252]	; (802538c <DMA_CalcBaseAndBitshift+0x120>)
 802528e:	4293      	cmp	r3, r2
 8025290:	d040      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 8025292:	687b      	ldr	r3, [r7, #4]
 8025294:	681b      	ldr	r3, [r3, #0]
 8025296:	4a3e      	ldr	r2, [pc, #248]	; (8025390 <DMA_CalcBaseAndBitshift+0x124>)
 8025298:	4293      	cmp	r3, r2
 802529a:	d03b      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 802529c:	687b      	ldr	r3, [r7, #4]
 802529e:	681b      	ldr	r3, [r3, #0]
 80252a0:	4a3c      	ldr	r2, [pc, #240]	; (8025394 <DMA_CalcBaseAndBitshift+0x128>)
 80252a2:	4293      	cmp	r3, r2
 80252a4:	d036      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 80252a6:	687b      	ldr	r3, [r7, #4]
 80252a8:	681b      	ldr	r3, [r3, #0]
 80252aa:	4a3b      	ldr	r2, [pc, #236]	; (8025398 <DMA_CalcBaseAndBitshift+0x12c>)
 80252ac:	4293      	cmp	r3, r2
 80252ae:	d031      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 80252b0:	687b      	ldr	r3, [r7, #4]
 80252b2:	681b      	ldr	r3, [r3, #0]
 80252b4:	4a39      	ldr	r2, [pc, #228]	; (802539c <DMA_CalcBaseAndBitshift+0x130>)
 80252b6:	4293      	cmp	r3, r2
 80252b8:	d02c      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 80252ba:	687b      	ldr	r3, [r7, #4]
 80252bc:	681b      	ldr	r3, [r3, #0]
 80252be:	4a38      	ldr	r2, [pc, #224]	; (80253a0 <DMA_CalcBaseAndBitshift+0x134>)
 80252c0:	4293      	cmp	r3, r2
 80252c2:	d027      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 80252c4:	687b      	ldr	r3, [r7, #4]
 80252c6:	681b      	ldr	r3, [r3, #0]
 80252c8:	4a36      	ldr	r2, [pc, #216]	; (80253a4 <DMA_CalcBaseAndBitshift+0x138>)
 80252ca:	4293      	cmp	r3, r2
 80252cc:	d022      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 80252ce:	687b      	ldr	r3, [r7, #4]
 80252d0:	681b      	ldr	r3, [r3, #0]
 80252d2:	4a35      	ldr	r2, [pc, #212]	; (80253a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80252d4:	4293      	cmp	r3, r2
 80252d6:	d01d      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 80252d8:	687b      	ldr	r3, [r7, #4]
 80252da:	681b      	ldr	r3, [r3, #0]
 80252dc:	4a33      	ldr	r2, [pc, #204]	; (80253ac <DMA_CalcBaseAndBitshift+0x140>)
 80252de:	4293      	cmp	r3, r2
 80252e0:	d018      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 80252e2:	687b      	ldr	r3, [r7, #4]
 80252e4:	681b      	ldr	r3, [r3, #0]
 80252e6:	4a32      	ldr	r2, [pc, #200]	; (80253b0 <DMA_CalcBaseAndBitshift+0x144>)
 80252e8:	4293      	cmp	r3, r2
 80252ea:	d013      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 80252ec:	687b      	ldr	r3, [r7, #4]
 80252ee:	681b      	ldr	r3, [r3, #0]
 80252f0:	4a30      	ldr	r2, [pc, #192]	; (80253b4 <DMA_CalcBaseAndBitshift+0x148>)
 80252f2:	4293      	cmp	r3, r2
 80252f4:	d00e      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 80252f6:	687b      	ldr	r3, [r7, #4]
 80252f8:	681b      	ldr	r3, [r3, #0]
 80252fa:	4a2f      	ldr	r2, [pc, #188]	; (80253b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80252fc:	4293      	cmp	r3, r2
 80252fe:	d009      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 8025300:	687b      	ldr	r3, [r7, #4]
 8025302:	681b      	ldr	r3, [r3, #0]
 8025304:	4a2d      	ldr	r2, [pc, #180]	; (80253bc <DMA_CalcBaseAndBitshift+0x150>)
 8025306:	4293      	cmp	r3, r2
 8025308:	d004      	beq.n	8025314 <DMA_CalcBaseAndBitshift+0xa8>
 802530a:	687b      	ldr	r3, [r7, #4]
 802530c:	681b      	ldr	r3, [r3, #0]
 802530e:	4a2c      	ldr	r2, [pc, #176]	; (80253c0 <DMA_CalcBaseAndBitshift+0x154>)
 8025310:	4293      	cmp	r3, r2
 8025312:	d101      	bne.n	8025318 <DMA_CalcBaseAndBitshift+0xac>
 8025314:	2301      	movs	r3, #1
 8025316:	e000      	b.n	802531a <DMA_CalcBaseAndBitshift+0xae>
 8025318:	2300      	movs	r3, #0
 802531a:	2b00      	cmp	r3, #0
 802531c:	d024      	beq.n	8025368 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802531e:	687b      	ldr	r3, [r7, #4]
 8025320:	681b      	ldr	r3, [r3, #0]
 8025322:	b2db      	uxtb	r3, r3
 8025324:	3b10      	subs	r3, #16
 8025326:	4a27      	ldr	r2, [pc, #156]	; (80253c4 <DMA_CalcBaseAndBitshift+0x158>)
 8025328:	fba2 2303 	umull	r2, r3, r2, r3
 802532c:	091b      	lsrs	r3, r3, #4
 802532e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8025330:	68fb      	ldr	r3, [r7, #12]
 8025332:	f003 0307 	and.w	r3, r3, #7
 8025336:	4a24      	ldr	r2, [pc, #144]	; (80253c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8025338:	5cd3      	ldrb	r3, [r2, r3]
 802533a:	461a      	mov	r2, r3
 802533c:	687b      	ldr	r3, [r7, #4]
 802533e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8025340:	68fb      	ldr	r3, [r7, #12]
 8025342:	2b03      	cmp	r3, #3
 8025344:	d908      	bls.n	8025358 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8025346:	687b      	ldr	r3, [r7, #4]
 8025348:	681b      	ldr	r3, [r3, #0]
 802534a:	461a      	mov	r2, r3
 802534c:	4b1f      	ldr	r3, [pc, #124]	; (80253cc <DMA_CalcBaseAndBitshift+0x160>)
 802534e:	4013      	ands	r3, r2
 8025350:	1d1a      	adds	r2, r3, #4
 8025352:	687b      	ldr	r3, [r7, #4]
 8025354:	659a      	str	r2, [r3, #88]	; 0x58
 8025356:	e00d      	b.n	8025374 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8025358:	687b      	ldr	r3, [r7, #4]
 802535a:	681b      	ldr	r3, [r3, #0]
 802535c:	461a      	mov	r2, r3
 802535e:	4b1b      	ldr	r3, [pc, #108]	; (80253cc <DMA_CalcBaseAndBitshift+0x160>)
 8025360:	4013      	ands	r3, r2
 8025362:	687a      	ldr	r2, [r7, #4]
 8025364:	6593      	str	r3, [r2, #88]	; 0x58
 8025366:	e005      	b.n	8025374 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8025368:	687b      	ldr	r3, [r7, #4]
 802536a:	681b      	ldr	r3, [r3, #0]
 802536c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8025370:	687b      	ldr	r3, [r7, #4]
 8025372:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8025374:	687b      	ldr	r3, [r7, #4]
 8025376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8025378:	4618      	mov	r0, r3
 802537a:	3714      	adds	r7, #20
 802537c:	46bd      	mov	sp, r7
 802537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025382:	4770      	bx	lr
 8025384:	40020010 	.word	0x40020010
 8025388:	40020028 	.word	0x40020028
 802538c:	40020040 	.word	0x40020040
 8025390:	40020058 	.word	0x40020058
 8025394:	40020070 	.word	0x40020070
 8025398:	40020088 	.word	0x40020088
 802539c:	400200a0 	.word	0x400200a0
 80253a0:	400200b8 	.word	0x400200b8
 80253a4:	40020410 	.word	0x40020410
 80253a8:	40020428 	.word	0x40020428
 80253ac:	40020440 	.word	0x40020440
 80253b0:	40020458 	.word	0x40020458
 80253b4:	40020470 	.word	0x40020470
 80253b8:	40020488 	.word	0x40020488
 80253bc:	400204a0 	.word	0x400204a0
 80253c0:	400204b8 	.word	0x400204b8
 80253c4:	aaaaaaab 	.word	0xaaaaaaab
 80253c8:	0803e4a4 	.word	0x0803e4a4
 80253cc:	fffffc00 	.word	0xfffffc00

080253d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80253d0:	b480      	push	{r7}
 80253d2:	b085      	sub	sp, #20
 80253d4:	af00      	add	r7, sp, #0
 80253d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80253d8:	2300      	movs	r3, #0
 80253da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80253dc:	687b      	ldr	r3, [r7, #4]
 80253de:	699b      	ldr	r3, [r3, #24]
 80253e0:	2b00      	cmp	r3, #0
 80253e2:	d120      	bne.n	8025426 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80253e4:	687b      	ldr	r3, [r7, #4]
 80253e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80253e8:	2b03      	cmp	r3, #3
 80253ea:	d858      	bhi.n	802549e <DMA_CheckFifoParam+0xce>
 80253ec:	a201      	add	r2, pc, #4	; (adr r2, 80253f4 <DMA_CheckFifoParam+0x24>)
 80253ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80253f2:	bf00      	nop
 80253f4:	08025405 	.word	0x08025405
 80253f8:	08025417 	.word	0x08025417
 80253fc:	08025405 	.word	0x08025405
 8025400:	0802549f 	.word	0x0802549f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025404:	687b      	ldr	r3, [r7, #4]
 8025406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802540c:	2b00      	cmp	r3, #0
 802540e:	d048      	beq.n	80254a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8025410:	2301      	movs	r3, #1
 8025412:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8025414:	e045      	b.n	80254a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8025416:	687b      	ldr	r3, [r7, #4]
 8025418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802541a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802541e:	d142      	bne.n	80254a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8025420:	2301      	movs	r3, #1
 8025422:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8025424:	e03f      	b.n	80254a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8025426:	687b      	ldr	r3, [r7, #4]
 8025428:	699b      	ldr	r3, [r3, #24]
 802542a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802542e:	d123      	bne.n	8025478 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8025430:	687b      	ldr	r3, [r7, #4]
 8025432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025434:	2b03      	cmp	r3, #3
 8025436:	d838      	bhi.n	80254aa <DMA_CheckFifoParam+0xda>
 8025438:	a201      	add	r2, pc, #4	; (adr r2, 8025440 <DMA_CheckFifoParam+0x70>)
 802543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802543e:	bf00      	nop
 8025440:	08025451 	.word	0x08025451
 8025444:	08025457 	.word	0x08025457
 8025448:	08025451 	.word	0x08025451
 802544c:	08025469 	.word	0x08025469
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8025450:	2301      	movs	r3, #1
 8025452:	73fb      	strb	r3, [r7, #15]
        break;
 8025454:	e030      	b.n	80254b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025456:	687b      	ldr	r3, [r7, #4]
 8025458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802545a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802545e:	2b00      	cmp	r3, #0
 8025460:	d025      	beq.n	80254ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8025462:	2301      	movs	r3, #1
 8025464:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8025466:	e022      	b.n	80254ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8025468:	687b      	ldr	r3, [r7, #4]
 802546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802546c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8025470:	d11f      	bne.n	80254b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8025472:	2301      	movs	r3, #1
 8025474:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8025476:	e01c      	b.n	80254b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8025478:	687b      	ldr	r3, [r7, #4]
 802547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802547c:	2b02      	cmp	r3, #2
 802547e:	d902      	bls.n	8025486 <DMA_CheckFifoParam+0xb6>
 8025480:	2b03      	cmp	r3, #3
 8025482:	d003      	beq.n	802548c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8025484:	e018      	b.n	80254b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8025486:	2301      	movs	r3, #1
 8025488:	73fb      	strb	r3, [r7, #15]
        break;
 802548a:	e015      	b.n	80254b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802548c:	687b      	ldr	r3, [r7, #4]
 802548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8025494:	2b00      	cmp	r3, #0
 8025496:	d00e      	beq.n	80254b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8025498:	2301      	movs	r3, #1
 802549a:	73fb      	strb	r3, [r7, #15]
    break;
 802549c:	e00b      	b.n	80254b6 <DMA_CheckFifoParam+0xe6>
        break;
 802549e:	bf00      	nop
 80254a0:	e00a      	b.n	80254b8 <DMA_CheckFifoParam+0xe8>
        break;
 80254a2:	bf00      	nop
 80254a4:	e008      	b.n	80254b8 <DMA_CheckFifoParam+0xe8>
        break;
 80254a6:	bf00      	nop
 80254a8:	e006      	b.n	80254b8 <DMA_CheckFifoParam+0xe8>
        break;
 80254aa:	bf00      	nop
 80254ac:	e004      	b.n	80254b8 <DMA_CheckFifoParam+0xe8>
        break;
 80254ae:	bf00      	nop
 80254b0:	e002      	b.n	80254b8 <DMA_CheckFifoParam+0xe8>
        break;
 80254b2:	bf00      	nop
 80254b4:	e000      	b.n	80254b8 <DMA_CheckFifoParam+0xe8>
    break;
 80254b6:	bf00      	nop
    }
  }

  return status;
 80254b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80254ba:	4618      	mov	r0, r3
 80254bc:	3714      	adds	r7, #20
 80254be:	46bd      	mov	sp, r7
 80254c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254c4:	4770      	bx	lr
 80254c6:	bf00      	nop

080254c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80254c8:	b480      	push	{r7}
 80254ca:	b085      	sub	sp, #20
 80254cc:	af00      	add	r7, sp, #0
 80254ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80254d0:	687b      	ldr	r3, [r7, #4]
 80254d2:	681b      	ldr	r3, [r3, #0]
 80254d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80254d6:	687b      	ldr	r3, [r7, #4]
 80254d8:	681b      	ldr	r3, [r3, #0]
 80254da:	4a38      	ldr	r2, [pc, #224]	; (80255bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80254dc:	4293      	cmp	r3, r2
 80254de:	d022      	beq.n	8025526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80254e0:	687b      	ldr	r3, [r7, #4]
 80254e2:	681b      	ldr	r3, [r3, #0]
 80254e4:	4a36      	ldr	r2, [pc, #216]	; (80255c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80254e6:	4293      	cmp	r3, r2
 80254e8:	d01d      	beq.n	8025526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80254ea:	687b      	ldr	r3, [r7, #4]
 80254ec:	681b      	ldr	r3, [r3, #0]
 80254ee:	4a35      	ldr	r2, [pc, #212]	; (80255c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80254f0:	4293      	cmp	r3, r2
 80254f2:	d018      	beq.n	8025526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80254f4:	687b      	ldr	r3, [r7, #4]
 80254f6:	681b      	ldr	r3, [r3, #0]
 80254f8:	4a33      	ldr	r2, [pc, #204]	; (80255c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80254fa:	4293      	cmp	r3, r2
 80254fc:	d013      	beq.n	8025526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80254fe:	687b      	ldr	r3, [r7, #4]
 8025500:	681b      	ldr	r3, [r3, #0]
 8025502:	4a32      	ldr	r2, [pc, #200]	; (80255cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8025504:	4293      	cmp	r3, r2
 8025506:	d00e      	beq.n	8025526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8025508:	687b      	ldr	r3, [r7, #4]
 802550a:	681b      	ldr	r3, [r3, #0]
 802550c:	4a30      	ldr	r2, [pc, #192]	; (80255d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 802550e:	4293      	cmp	r3, r2
 8025510:	d009      	beq.n	8025526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8025512:	687b      	ldr	r3, [r7, #4]
 8025514:	681b      	ldr	r3, [r3, #0]
 8025516:	4a2f      	ldr	r2, [pc, #188]	; (80255d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8025518:	4293      	cmp	r3, r2
 802551a:	d004      	beq.n	8025526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802551c:	687b      	ldr	r3, [r7, #4]
 802551e:	681b      	ldr	r3, [r3, #0]
 8025520:	4a2d      	ldr	r2, [pc, #180]	; (80255d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8025522:	4293      	cmp	r3, r2
 8025524:	d101      	bne.n	802552a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8025526:	2301      	movs	r3, #1
 8025528:	e000      	b.n	802552c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 802552a:	2300      	movs	r3, #0
 802552c:	2b00      	cmp	r3, #0
 802552e:	d01a      	beq.n	8025566 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8025530:	687b      	ldr	r3, [r7, #4]
 8025532:	681b      	ldr	r3, [r3, #0]
 8025534:	b2db      	uxtb	r3, r3
 8025536:	3b08      	subs	r3, #8
 8025538:	4a28      	ldr	r2, [pc, #160]	; (80255dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 802553a:	fba2 2303 	umull	r2, r3, r2, r3
 802553e:	091b      	lsrs	r3, r3, #4
 8025540:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8025542:	68fa      	ldr	r2, [r7, #12]
 8025544:	4b26      	ldr	r3, [pc, #152]	; (80255e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8025546:	4413      	add	r3, r2
 8025548:	009b      	lsls	r3, r3, #2
 802554a:	461a      	mov	r2, r3
 802554c:	687b      	ldr	r3, [r7, #4]
 802554e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8025550:	687b      	ldr	r3, [r7, #4]
 8025552:	4a24      	ldr	r2, [pc, #144]	; (80255e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8025554:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8025556:	68fb      	ldr	r3, [r7, #12]
 8025558:	f003 031f 	and.w	r3, r3, #31
 802555c:	2201      	movs	r2, #1
 802555e:	409a      	lsls	r2, r3
 8025560:	687b      	ldr	r3, [r7, #4]
 8025562:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8025564:	e024      	b.n	80255b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8025566:	687b      	ldr	r3, [r7, #4]
 8025568:	681b      	ldr	r3, [r3, #0]
 802556a:	b2db      	uxtb	r3, r3
 802556c:	3b10      	subs	r3, #16
 802556e:	4a1e      	ldr	r2, [pc, #120]	; (80255e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8025570:	fba2 2303 	umull	r2, r3, r2, r3
 8025574:	091b      	lsrs	r3, r3, #4
 8025576:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8025578:	68bb      	ldr	r3, [r7, #8]
 802557a:	4a1c      	ldr	r2, [pc, #112]	; (80255ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 802557c:	4293      	cmp	r3, r2
 802557e:	d806      	bhi.n	802558e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8025580:	68bb      	ldr	r3, [r7, #8]
 8025582:	4a1b      	ldr	r2, [pc, #108]	; (80255f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8025584:	4293      	cmp	r3, r2
 8025586:	d902      	bls.n	802558e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8025588:	68fb      	ldr	r3, [r7, #12]
 802558a:	3308      	adds	r3, #8
 802558c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 802558e:	68fa      	ldr	r2, [r7, #12]
 8025590:	4b18      	ldr	r3, [pc, #96]	; (80255f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8025592:	4413      	add	r3, r2
 8025594:	009b      	lsls	r3, r3, #2
 8025596:	461a      	mov	r2, r3
 8025598:	687b      	ldr	r3, [r7, #4]
 802559a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 802559c:	687b      	ldr	r3, [r7, #4]
 802559e:	4a16      	ldr	r2, [pc, #88]	; (80255f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80255a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80255a2:	68fb      	ldr	r3, [r7, #12]
 80255a4:	f003 031f 	and.w	r3, r3, #31
 80255a8:	2201      	movs	r2, #1
 80255aa:	409a      	lsls	r2, r3
 80255ac:	687b      	ldr	r3, [r7, #4]
 80255ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80255b0:	bf00      	nop
 80255b2:	3714      	adds	r7, #20
 80255b4:	46bd      	mov	sp, r7
 80255b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255ba:	4770      	bx	lr
 80255bc:	58025408 	.word	0x58025408
 80255c0:	5802541c 	.word	0x5802541c
 80255c4:	58025430 	.word	0x58025430
 80255c8:	58025444 	.word	0x58025444
 80255cc:	58025458 	.word	0x58025458
 80255d0:	5802546c 	.word	0x5802546c
 80255d4:	58025480 	.word	0x58025480
 80255d8:	58025494 	.word	0x58025494
 80255dc:	cccccccd 	.word	0xcccccccd
 80255e0:	16009600 	.word	0x16009600
 80255e4:	58025880 	.word	0x58025880
 80255e8:	aaaaaaab 	.word	0xaaaaaaab
 80255ec:	400204b8 	.word	0x400204b8
 80255f0:	4002040f 	.word	0x4002040f
 80255f4:	10008200 	.word	0x10008200
 80255f8:	40020880 	.word	0x40020880

080255fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80255fc:	b480      	push	{r7}
 80255fe:	b085      	sub	sp, #20
 8025600:	af00      	add	r7, sp, #0
 8025602:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8025604:	687b      	ldr	r3, [r7, #4]
 8025606:	685b      	ldr	r3, [r3, #4]
 8025608:	b2db      	uxtb	r3, r3
 802560a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 802560c:	68fb      	ldr	r3, [r7, #12]
 802560e:	2b00      	cmp	r3, #0
 8025610:	d04a      	beq.n	80256a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8025612:	68fb      	ldr	r3, [r7, #12]
 8025614:	2b08      	cmp	r3, #8
 8025616:	d847      	bhi.n	80256a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8025618:	687b      	ldr	r3, [r7, #4]
 802561a:	681b      	ldr	r3, [r3, #0]
 802561c:	4a25      	ldr	r2, [pc, #148]	; (80256b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 802561e:	4293      	cmp	r3, r2
 8025620:	d022      	beq.n	8025668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8025622:	687b      	ldr	r3, [r7, #4]
 8025624:	681b      	ldr	r3, [r3, #0]
 8025626:	4a24      	ldr	r2, [pc, #144]	; (80256b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8025628:	4293      	cmp	r3, r2
 802562a:	d01d      	beq.n	8025668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802562c:	687b      	ldr	r3, [r7, #4]
 802562e:	681b      	ldr	r3, [r3, #0]
 8025630:	4a22      	ldr	r2, [pc, #136]	; (80256bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8025632:	4293      	cmp	r3, r2
 8025634:	d018      	beq.n	8025668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8025636:	687b      	ldr	r3, [r7, #4]
 8025638:	681b      	ldr	r3, [r3, #0]
 802563a:	4a21      	ldr	r2, [pc, #132]	; (80256c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 802563c:	4293      	cmp	r3, r2
 802563e:	d013      	beq.n	8025668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8025640:	687b      	ldr	r3, [r7, #4]
 8025642:	681b      	ldr	r3, [r3, #0]
 8025644:	4a1f      	ldr	r2, [pc, #124]	; (80256c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8025646:	4293      	cmp	r3, r2
 8025648:	d00e      	beq.n	8025668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802564a:	687b      	ldr	r3, [r7, #4]
 802564c:	681b      	ldr	r3, [r3, #0]
 802564e:	4a1e      	ldr	r2, [pc, #120]	; (80256c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8025650:	4293      	cmp	r3, r2
 8025652:	d009      	beq.n	8025668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8025654:	687b      	ldr	r3, [r7, #4]
 8025656:	681b      	ldr	r3, [r3, #0]
 8025658:	4a1c      	ldr	r2, [pc, #112]	; (80256cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 802565a:	4293      	cmp	r3, r2
 802565c:	d004      	beq.n	8025668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802565e:	687b      	ldr	r3, [r7, #4]
 8025660:	681b      	ldr	r3, [r3, #0]
 8025662:	4a1b      	ldr	r2, [pc, #108]	; (80256d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8025664:	4293      	cmp	r3, r2
 8025666:	d101      	bne.n	802566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8025668:	2301      	movs	r3, #1
 802566a:	e000      	b.n	802566e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 802566c:	2300      	movs	r3, #0
 802566e:	2b00      	cmp	r3, #0
 8025670:	d00a      	beq.n	8025688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8025672:	68fa      	ldr	r2, [r7, #12]
 8025674:	4b17      	ldr	r3, [pc, #92]	; (80256d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8025676:	4413      	add	r3, r2
 8025678:	009b      	lsls	r3, r3, #2
 802567a:	461a      	mov	r2, r3
 802567c:	687b      	ldr	r3, [r7, #4]
 802567e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8025680:	687b      	ldr	r3, [r7, #4]
 8025682:	4a15      	ldr	r2, [pc, #84]	; (80256d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8025684:	671a      	str	r2, [r3, #112]	; 0x70
 8025686:	e009      	b.n	802569c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8025688:	68fa      	ldr	r2, [r7, #12]
 802568a:	4b14      	ldr	r3, [pc, #80]	; (80256dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 802568c:	4413      	add	r3, r2
 802568e:	009b      	lsls	r3, r3, #2
 8025690:	461a      	mov	r2, r3
 8025692:	687b      	ldr	r3, [r7, #4]
 8025694:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8025696:	687b      	ldr	r3, [r7, #4]
 8025698:	4a11      	ldr	r2, [pc, #68]	; (80256e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 802569a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 802569c:	68fb      	ldr	r3, [r7, #12]
 802569e:	3b01      	subs	r3, #1
 80256a0:	2201      	movs	r2, #1
 80256a2:	409a      	lsls	r2, r3
 80256a4:	687b      	ldr	r3, [r7, #4]
 80256a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80256a8:	bf00      	nop
 80256aa:	3714      	adds	r7, #20
 80256ac:	46bd      	mov	sp, r7
 80256ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256b2:	4770      	bx	lr
 80256b4:	58025408 	.word	0x58025408
 80256b8:	5802541c 	.word	0x5802541c
 80256bc:	58025430 	.word	0x58025430
 80256c0:	58025444 	.word	0x58025444
 80256c4:	58025458 	.word	0x58025458
 80256c8:	5802546c 	.word	0x5802546c
 80256cc:	58025480 	.word	0x58025480
 80256d0:	58025494 	.word	0x58025494
 80256d4:	1600963f 	.word	0x1600963f
 80256d8:	58025940 	.word	0x58025940
 80256dc:	1000823f 	.word	0x1000823f
 80256e0:	40020940 	.word	0x40020940

080256e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80256e4:	b480      	push	{r7}
 80256e6:	b089      	sub	sp, #36	; 0x24
 80256e8:	af00      	add	r7, sp, #0
 80256ea:	6078      	str	r0, [r7, #4]
 80256ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80256ee:	2300      	movs	r3, #0
 80256f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80256f2:	4b89      	ldr	r3, [pc, #548]	; (8025918 <HAL_GPIO_Init+0x234>)
 80256f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80256f6:	e194      	b.n	8025a22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80256f8:	683b      	ldr	r3, [r7, #0]
 80256fa:	681a      	ldr	r2, [r3, #0]
 80256fc:	2101      	movs	r1, #1
 80256fe:	69fb      	ldr	r3, [r7, #28]
 8025700:	fa01 f303 	lsl.w	r3, r1, r3
 8025704:	4013      	ands	r3, r2
 8025706:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8025708:	693b      	ldr	r3, [r7, #16]
 802570a:	2b00      	cmp	r3, #0
 802570c:	f000 8186 	beq.w	8025a1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8025710:	683b      	ldr	r3, [r7, #0]
 8025712:	685b      	ldr	r3, [r3, #4]
 8025714:	f003 0303 	and.w	r3, r3, #3
 8025718:	2b01      	cmp	r3, #1
 802571a:	d005      	beq.n	8025728 <HAL_GPIO_Init+0x44>
 802571c:	683b      	ldr	r3, [r7, #0]
 802571e:	685b      	ldr	r3, [r3, #4]
 8025720:	f003 0303 	and.w	r3, r3, #3
 8025724:	2b02      	cmp	r3, #2
 8025726:	d130      	bne.n	802578a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8025728:	687b      	ldr	r3, [r7, #4]
 802572a:	689b      	ldr	r3, [r3, #8]
 802572c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 802572e:	69fb      	ldr	r3, [r7, #28]
 8025730:	005b      	lsls	r3, r3, #1
 8025732:	2203      	movs	r2, #3
 8025734:	fa02 f303 	lsl.w	r3, r2, r3
 8025738:	43db      	mvns	r3, r3
 802573a:	69ba      	ldr	r2, [r7, #24]
 802573c:	4013      	ands	r3, r2
 802573e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8025740:	683b      	ldr	r3, [r7, #0]
 8025742:	68da      	ldr	r2, [r3, #12]
 8025744:	69fb      	ldr	r3, [r7, #28]
 8025746:	005b      	lsls	r3, r3, #1
 8025748:	fa02 f303 	lsl.w	r3, r2, r3
 802574c:	69ba      	ldr	r2, [r7, #24]
 802574e:	4313      	orrs	r3, r2
 8025750:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8025752:	687b      	ldr	r3, [r7, #4]
 8025754:	69ba      	ldr	r2, [r7, #24]
 8025756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8025758:	687b      	ldr	r3, [r7, #4]
 802575a:	685b      	ldr	r3, [r3, #4]
 802575c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 802575e:	2201      	movs	r2, #1
 8025760:	69fb      	ldr	r3, [r7, #28]
 8025762:	fa02 f303 	lsl.w	r3, r2, r3
 8025766:	43db      	mvns	r3, r3
 8025768:	69ba      	ldr	r2, [r7, #24]
 802576a:	4013      	ands	r3, r2
 802576c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802576e:	683b      	ldr	r3, [r7, #0]
 8025770:	685b      	ldr	r3, [r3, #4]
 8025772:	091b      	lsrs	r3, r3, #4
 8025774:	f003 0201 	and.w	r2, r3, #1
 8025778:	69fb      	ldr	r3, [r7, #28]
 802577a:	fa02 f303 	lsl.w	r3, r2, r3
 802577e:	69ba      	ldr	r2, [r7, #24]
 8025780:	4313      	orrs	r3, r2
 8025782:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8025784:	687b      	ldr	r3, [r7, #4]
 8025786:	69ba      	ldr	r2, [r7, #24]
 8025788:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802578a:	683b      	ldr	r3, [r7, #0]
 802578c:	685b      	ldr	r3, [r3, #4]
 802578e:	f003 0303 	and.w	r3, r3, #3
 8025792:	2b03      	cmp	r3, #3
 8025794:	d017      	beq.n	80257c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8025796:	687b      	ldr	r3, [r7, #4]
 8025798:	68db      	ldr	r3, [r3, #12]
 802579a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 802579c:	69fb      	ldr	r3, [r7, #28]
 802579e:	005b      	lsls	r3, r3, #1
 80257a0:	2203      	movs	r2, #3
 80257a2:	fa02 f303 	lsl.w	r3, r2, r3
 80257a6:	43db      	mvns	r3, r3
 80257a8:	69ba      	ldr	r2, [r7, #24]
 80257aa:	4013      	ands	r3, r2
 80257ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80257ae:	683b      	ldr	r3, [r7, #0]
 80257b0:	689a      	ldr	r2, [r3, #8]
 80257b2:	69fb      	ldr	r3, [r7, #28]
 80257b4:	005b      	lsls	r3, r3, #1
 80257b6:	fa02 f303 	lsl.w	r3, r2, r3
 80257ba:	69ba      	ldr	r2, [r7, #24]
 80257bc:	4313      	orrs	r3, r2
 80257be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80257c0:	687b      	ldr	r3, [r7, #4]
 80257c2:	69ba      	ldr	r2, [r7, #24]
 80257c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80257c6:	683b      	ldr	r3, [r7, #0]
 80257c8:	685b      	ldr	r3, [r3, #4]
 80257ca:	f003 0303 	and.w	r3, r3, #3
 80257ce:	2b02      	cmp	r3, #2
 80257d0:	d123      	bne.n	802581a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80257d2:	69fb      	ldr	r3, [r7, #28]
 80257d4:	08da      	lsrs	r2, r3, #3
 80257d6:	687b      	ldr	r3, [r7, #4]
 80257d8:	3208      	adds	r2, #8
 80257da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80257de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80257e0:	69fb      	ldr	r3, [r7, #28]
 80257e2:	f003 0307 	and.w	r3, r3, #7
 80257e6:	009b      	lsls	r3, r3, #2
 80257e8:	220f      	movs	r2, #15
 80257ea:	fa02 f303 	lsl.w	r3, r2, r3
 80257ee:	43db      	mvns	r3, r3
 80257f0:	69ba      	ldr	r2, [r7, #24]
 80257f2:	4013      	ands	r3, r2
 80257f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80257f6:	683b      	ldr	r3, [r7, #0]
 80257f8:	691a      	ldr	r2, [r3, #16]
 80257fa:	69fb      	ldr	r3, [r7, #28]
 80257fc:	f003 0307 	and.w	r3, r3, #7
 8025800:	009b      	lsls	r3, r3, #2
 8025802:	fa02 f303 	lsl.w	r3, r2, r3
 8025806:	69ba      	ldr	r2, [r7, #24]
 8025808:	4313      	orrs	r3, r2
 802580a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802580c:	69fb      	ldr	r3, [r7, #28]
 802580e:	08da      	lsrs	r2, r3, #3
 8025810:	687b      	ldr	r3, [r7, #4]
 8025812:	3208      	adds	r2, #8
 8025814:	69b9      	ldr	r1, [r7, #24]
 8025816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802581a:	687b      	ldr	r3, [r7, #4]
 802581c:	681b      	ldr	r3, [r3, #0]
 802581e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8025820:	69fb      	ldr	r3, [r7, #28]
 8025822:	005b      	lsls	r3, r3, #1
 8025824:	2203      	movs	r2, #3
 8025826:	fa02 f303 	lsl.w	r3, r2, r3
 802582a:	43db      	mvns	r3, r3
 802582c:	69ba      	ldr	r2, [r7, #24]
 802582e:	4013      	ands	r3, r2
 8025830:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8025832:	683b      	ldr	r3, [r7, #0]
 8025834:	685b      	ldr	r3, [r3, #4]
 8025836:	f003 0203 	and.w	r2, r3, #3
 802583a:	69fb      	ldr	r3, [r7, #28]
 802583c:	005b      	lsls	r3, r3, #1
 802583e:	fa02 f303 	lsl.w	r3, r2, r3
 8025842:	69ba      	ldr	r2, [r7, #24]
 8025844:	4313      	orrs	r3, r2
 8025846:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8025848:	687b      	ldr	r3, [r7, #4]
 802584a:	69ba      	ldr	r2, [r7, #24]
 802584c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802584e:	683b      	ldr	r3, [r7, #0]
 8025850:	685b      	ldr	r3, [r3, #4]
 8025852:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8025856:	2b00      	cmp	r3, #0
 8025858:	f000 80e0 	beq.w	8025a1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802585c:	4b2f      	ldr	r3, [pc, #188]	; (802591c <HAL_GPIO_Init+0x238>)
 802585e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8025862:	4a2e      	ldr	r2, [pc, #184]	; (802591c <HAL_GPIO_Init+0x238>)
 8025864:	f043 0302 	orr.w	r3, r3, #2
 8025868:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802586c:	4b2b      	ldr	r3, [pc, #172]	; (802591c <HAL_GPIO_Init+0x238>)
 802586e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8025872:	f003 0302 	and.w	r3, r3, #2
 8025876:	60fb      	str	r3, [r7, #12]
 8025878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802587a:	4a29      	ldr	r2, [pc, #164]	; (8025920 <HAL_GPIO_Init+0x23c>)
 802587c:	69fb      	ldr	r3, [r7, #28]
 802587e:	089b      	lsrs	r3, r3, #2
 8025880:	3302      	adds	r3, #2
 8025882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8025888:	69fb      	ldr	r3, [r7, #28]
 802588a:	f003 0303 	and.w	r3, r3, #3
 802588e:	009b      	lsls	r3, r3, #2
 8025890:	220f      	movs	r2, #15
 8025892:	fa02 f303 	lsl.w	r3, r2, r3
 8025896:	43db      	mvns	r3, r3
 8025898:	69ba      	ldr	r2, [r7, #24]
 802589a:	4013      	ands	r3, r2
 802589c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 802589e:	687b      	ldr	r3, [r7, #4]
 80258a0:	4a20      	ldr	r2, [pc, #128]	; (8025924 <HAL_GPIO_Init+0x240>)
 80258a2:	4293      	cmp	r3, r2
 80258a4:	d052      	beq.n	802594c <HAL_GPIO_Init+0x268>
 80258a6:	687b      	ldr	r3, [r7, #4]
 80258a8:	4a1f      	ldr	r2, [pc, #124]	; (8025928 <HAL_GPIO_Init+0x244>)
 80258aa:	4293      	cmp	r3, r2
 80258ac:	d031      	beq.n	8025912 <HAL_GPIO_Init+0x22e>
 80258ae:	687b      	ldr	r3, [r7, #4]
 80258b0:	4a1e      	ldr	r2, [pc, #120]	; (802592c <HAL_GPIO_Init+0x248>)
 80258b2:	4293      	cmp	r3, r2
 80258b4:	d02b      	beq.n	802590e <HAL_GPIO_Init+0x22a>
 80258b6:	687b      	ldr	r3, [r7, #4]
 80258b8:	4a1d      	ldr	r2, [pc, #116]	; (8025930 <HAL_GPIO_Init+0x24c>)
 80258ba:	4293      	cmp	r3, r2
 80258bc:	d025      	beq.n	802590a <HAL_GPIO_Init+0x226>
 80258be:	687b      	ldr	r3, [r7, #4]
 80258c0:	4a1c      	ldr	r2, [pc, #112]	; (8025934 <HAL_GPIO_Init+0x250>)
 80258c2:	4293      	cmp	r3, r2
 80258c4:	d01f      	beq.n	8025906 <HAL_GPIO_Init+0x222>
 80258c6:	687b      	ldr	r3, [r7, #4]
 80258c8:	4a1b      	ldr	r2, [pc, #108]	; (8025938 <HAL_GPIO_Init+0x254>)
 80258ca:	4293      	cmp	r3, r2
 80258cc:	d019      	beq.n	8025902 <HAL_GPIO_Init+0x21e>
 80258ce:	687b      	ldr	r3, [r7, #4]
 80258d0:	4a1a      	ldr	r2, [pc, #104]	; (802593c <HAL_GPIO_Init+0x258>)
 80258d2:	4293      	cmp	r3, r2
 80258d4:	d013      	beq.n	80258fe <HAL_GPIO_Init+0x21a>
 80258d6:	687b      	ldr	r3, [r7, #4]
 80258d8:	4a19      	ldr	r2, [pc, #100]	; (8025940 <HAL_GPIO_Init+0x25c>)
 80258da:	4293      	cmp	r3, r2
 80258dc:	d00d      	beq.n	80258fa <HAL_GPIO_Init+0x216>
 80258de:	687b      	ldr	r3, [r7, #4]
 80258e0:	4a18      	ldr	r2, [pc, #96]	; (8025944 <HAL_GPIO_Init+0x260>)
 80258e2:	4293      	cmp	r3, r2
 80258e4:	d007      	beq.n	80258f6 <HAL_GPIO_Init+0x212>
 80258e6:	687b      	ldr	r3, [r7, #4]
 80258e8:	4a17      	ldr	r2, [pc, #92]	; (8025948 <HAL_GPIO_Init+0x264>)
 80258ea:	4293      	cmp	r3, r2
 80258ec:	d101      	bne.n	80258f2 <HAL_GPIO_Init+0x20e>
 80258ee:	2309      	movs	r3, #9
 80258f0:	e02d      	b.n	802594e <HAL_GPIO_Init+0x26a>
 80258f2:	230a      	movs	r3, #10
 80258f4:	e02b      	b.n	802594e <HAL_GPIO_Init+0x26a>
 80258f6:	2308      	movs	r3, #8
 80258f8:	e029      	b.n	802594e <HAL_GPIO_Init+0x26a>
 80258fa:	2307      	movs	r3, #7
 80258fc:	e027      	b.n	802594e <HAL_GPIO_Init+0x26a>
 80258fe:	2306      	movs	r3, #6
 8025900:	e025      	b.n	802594e <HAL_GPIO_Init+0x26a>
 8025902:	2305      	movs	r3, #5
 8025904:	e023      	b.n	802594e <HAL_GPIO_Init+0x26a>
 8025906:	2304      	movs	r3, #4
 8025908:	e021      	b.n	802594e <HAL_GPIO_Init+0x26a>
 802590a:	2303      	movs	r3, #3
 802590c:	e01f      	b.n	802594e <HAL_GPIO_Init+0x26a>
 802590e:	2302      	movs	r3, #2
 8025910:	e01d      	b.n	802594e <HAL_GPIO_Init+0x26a>
 8025912:	2301      	movs	r3, #1
 8025914:	e01b      	b.n	802594e <HAL_GPIO_Init+0x26a>
 8025916:	bf00      	nop
 8025918:	58000080 	.word	0x58000080
 802591c:	58024400 	.word	0x58024400
 8025920:	58000400 	.word	0x58000400
 8025924:	58020000 	.word	0x58020000
 8025928:	58020400 	.word	0x58020400
 802592c:	58020800 	.word	0x58020800
 8025930:	58020c00 	.word	0x58020c00
 8025934:	58021000 	.word	0x58021000
 8025938:	58021400 	.word	0x58021400
 802593c:	58021800 	.word	0x58021800
 8025940:	58021c00 	.word	0x58021c00
 8025944:	58022000 	.word	0x58022000
 8025948:	58022400 	.word	0x58022400
 802594c:	2300      	movs	r3, #0
 802594e:	69fa      	ldr	r2, [r7, #28]
 8025950:	f002 0203 	and.w	r2, r2, #3
 8025954:	0092      	lsls	r2, r2, #2
 8025956:	4093      	lsls	r3, r2
 8025958:	69ba      	ldr	r2, [r7, #24]
 802595a:	4313      	orrs	r3, r2
 802595c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802595e:	4938      	ldr	r1, [pc, #224]	; (8025a40 <HAL_GPIO_Init+0x35c>)
 8025960:	69fb      	ldr	r3, [r7, #28]
 8025962:	089b      	lsrs	r3, r3, #2
 8025964:	3302      	adds	r3, #2
 8025966:	69ba      	ldr	r2, [r7, #24]
 8025968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 802596c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8025970:	681b      	ldr	r3, [r3, #0]
 8025972:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8025974:	693b      	ldr	r3, [r7, #16]
 8025976:	43db      	mvns	r3, r3
 8025978:	69ba      	ldr	r2, [r7, #24]
 802597a:	4013      	ands	r3, r2
 802597c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802597e:	683b      	ldr	r3, [r7, #0]
 8025980:	685b      	ldr	r3, [r3, #4]
 8025982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025986:	2b00      	cmp	r3, #0
 8025988:	d003      	beq.n	8025992 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 802598a:	69ba      	ldr	r2, [r7, #24]
 802598c:	693b      	ldr	r3, [r7, #16]
 802598e:	4313      	orrs	r3, r2
 8025990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8025992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8025996:	69bb      	ldr	r3, [r7, #24]
 8025998:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 802599a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802599e:	685b      	ldr	r3, [r3, #4]
 80259a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80259a2:	693b      	ldr	r3, [r7, #16]
 80259a4:	43db      	mvns	r3, r3
 80259a6:	69ba      	ldr	r2, [r7, #24]
 80259a8:	4013      	ands	r3, r2
 80259aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80259ac:	683b      	ldr	r3, [r7, #0]
 80259ae:	685b      	ldr	r3, [r3, #4]
 80259b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80259b4:	2b00      	cmp	r3, #0
 80259b6:	d003      	beq.n	80259c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80259b8:	69ba      	ldr	r2, [r7, #24]
 80259ba:	693b      	ldr	r3, [r7, #16]
 80259bc:	4313      	orrs	r3, r2
 80259be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80259c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80259c4:	69bb      	ldr	r3, [r7, #24]
 80259c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80259c8:	697b      	ldr	r3, [r7, #20]
 80259ca:	685b      	ldr	r3, [r3, #4]
 80259cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80259ce:	693b      	ldr	r3, [r7, #16]
 80259d0:	43db      	mvns	r3, r3
 80259d2:	69ba      	ldr	r2, [r7, #24]
 80259d4:	4013      	ands	r3, r2
 80259d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80259d8:	683b      	ldr	r3, [r7, #0]
 80259da:	685b      	ldr	r3, [r3, #4]
 80259dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80259e0:	2b00      	cmp	r3, #0
 80259e2:	d003      	beq.n	80259ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80259e4:	69ba      	ldr	r2, [r7, #24]
 80259e6:	693b      	ldr	r3, [r7, #16]
 80259e8:	4313      	orrs	r3, r2
 80259ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80259ec:	697b      	ldr	r3, [r7, #20]
 80259ee:	69ba      	ldr	r2, [r7, #24]
 80259f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80259f2:	697b      	ldr	r3, [r7, #20]
 80259f4:	681b      	ldr	r3, [r3, #0]
 80259f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80259f8:	693b      	ldr	r3, [r7, #16]
 80259fa:	43db      	mvns	r3, r3
 80259fc:	69ba      	ldr	r2, [r7, #24]
 80259fe:	4013      	ands	r3, r2
 8025a00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8025a02:	683b      	ldr	r3, [r7, #0]
 8025a04:	685b      	ldr	r3, [r3, #4]
 8025a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025a0a:	2b00      	cmp	r3, #0
 8025a0c:	d003      	beq.n	8025a16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8025a0e:	69ba      	ldr	r2, [r7, #24]
 8025a10:	693b      	ldr	r3, [r7, #16]
 8025a12:	4313      	orrs	r3, r2
 8025a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8025a16:	697b      	ldr	r3, [r7, #20]
 8025a18:	69ba      	ldr	r2, [r7, #24]
 8025a1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8025a1c:	69fb      	ldr	r3, [r7, #28]
 8025a1e:	3301      	adds	r3, #1
 8025a20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8025a22:	683b      	ldr	r3, [r7, #0]
 8025a24:	681a      	ldr	r2, [r3, #0]
 8025a26:	69fb      	ldr	r3, [r7, #28]
 8025a28:	fa22 f303 	lsr.w	r3, r2, r3
 8025a2c:	2b00      	cmp	r3, #0
 8025a2e:	f47f ae63 	bne.w	80256f8 <HAL_GPIO_Init+0x14>
  }
}
 8025a32:	bf00      	nop
 8025a34:	bf00      	nop
 8025a36:	3724      	adds	r7, #36	; 0x24
 8025a38:	46bd      	mov	sp, r7
 8025a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a3e:	4770      	bx	lr
 8025a40:	58000400 	.word	0x58000400

08025a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8025a44:	b480      	push	{r7}
 8025a46:	b083      	sub	sp, #12
 8025a48:	af00      	add	r7, sp, #0
 8025a4a:	6078      	str	r0, [r7, #4]
 8025a4c:	460b      	mov	r3, r1
 8025a4e:	807b      	strh	r3, [r7, #2]
 8025a50:	4613      	mov	r3, r2
 8025a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8025a54:	787b      	ldrb	r3, [r7, #1]
 8025a56:	2b00      	cmp	r3, #0
 8025a58:	d003      	beq.n	8025a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8025a5a:	887a      	ldrh	r2, [r7, #2]
 8025a5c:	687b      	ldr	r3, [r7, #4]
 8025a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8025a60:	e003      	b.n	8025a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8025a62:	887b      	ldrh	r3, [r7, #2]
 8025a64:	041a      	lsls	r2, r3, #16
 8025a66:	687b      	ldr	r3, [r7, #4]
 8025a68:	619a      	str	r2, [r3, #24]
}
 8025a6a:	bf00      	nop
 8025a6c:	370c      	adds	r7, #12
 8025a6e:	46bd      	mov	sp, r7
 8025a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a74:	4770      	bx	lr
	...

08025a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8025a78:	b580      	push	{r7, lr}
 8025a7a:	b082      	sub	sp, #8
 8025a7c:	af00      	add	r7, sp, #0
 8025a7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8025a80:	687b      	ldr	r3, [r7, #4]
 8025a82:	2b00      	cmp	r3, #0
 8025a84:	d101      	bne.n	8025a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8025a86:	2301      	movs	r3, #1
 8025a88:	e07f      	b.n	8025b8a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8025a8a:	687b      	ldr	r3, [r7, #4]
 8025a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8025a90:	b2db      	uxtb	r3, r3
 8025a92:	2b00      	cmp	r3, #0
 8025a94:	d106      	bne.n	8025aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8025a96:	687b      	ldr	r3, [r7, #4]
 8025a98:	2200      	movs	r2, #0
 8025a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8025a9e:	6878      	ldr	r0, [r7, #4]
 8025aa0:	f7fa ffc6 	bl	8020a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8025aa4:	687b      	ldr	r3, [r7, #4]
 8025aa6:	2224      	movs	r2, #36	; 0x24
 8025aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8025aac:	687b      	ldr	r3, [r7, #4]
 8025aae:	681b      	ldr	r3, [r3, #0]
 8025ab0:	681a      	ldr	r2, [r3, #0]
 8025ab2:	687b      	ldr	r3, [r7, #4]
 8025ab4:	681b      	ldr	r3, [r3, #0]
 8025ab6:	f022 0201 	bic.w	r2, r2, #1
 8025aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8025abc:	687b      	ldr	r3, [r7, #4]
 8025abe:	685a      	ldr	r2, [r3, #4]
 8025ac0:	687b      	ldr	r3, [r7, #4]
 8025ac2:	681b      	ldr	r3, [r3, #0]
 8025ac4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8025ac8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8025aca:	687b      	ldr	r3, [r7, #4]
 8025acc:	681b      	ldr	r3, [r3, #0]
 8025ace:	689a      	ldr	r2, [r3, #8]
 8025ad0:	687b      	ldr	r3, [r7, #4]
 8025ad2:	681b      	ldr	r3, [r3, #0]
 8025ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025ad8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8025ada:	687b      	ldr	r3, [r7, #4]
 8025adc:	68db      	ldr	r3, [r3, #12]
 8025ade:	2b01      	cmp	r3, #1
 8025ae0:	d107      	bne.n	8025af2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8025ae2:	687b      	ldr	r3, [r7, #4]
 8025ae4:	689a      	ldr	r2, [r3, #8]
 8025ae6:	687b      	ldr	r3, [r7, #4]
 8025ae8:	681b      	ldr	r3, [r3, #0]
 8025aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8025aee:	609a      	str	r2, [r3, #8]
 8025af0:	e006      	b.n	8025b00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8025af2:	687b      	ldr	r3, [r7, #4]
 8025af4:	689a      	ldr	r2, [r3, #8]
 8025af6:	687b      	ldr	r3, [r7, #4]
 8025af8:	681b      	ldr	r3, [r3, #0]
 8025afa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8025afe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8025b00:	687b      	ldr	r3, [r7, #4]
 8025b02:	68db      	ldr	r3, [r3, #12]
 8025b04:	2b02      	cmp	r3, #2
 8025b06:	d104      	bne.n	8025b12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8025b08:	687b      	ldr	r3, [r7, #4]
 8025b0a:	681b      	ldr	r3, [r3, #0]
 8025b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8025b10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8025b12:	687b      	ldr	r3, [r7, #4]
 8025b14:	681b      	ldr	r3, [r3, #0]
 8025b16:	6859      	ldr	r1, [r3, #4]
 8025b18:	687b      	ldr	r3, [r7, #4]
 8025b1a:	681a      	ldr	r2, [r3, #0]
 8025b1c:	4b1d      	ldr	r3, [pc, #116]	; (8025b94 <HAL_I2C_Init+0x11c>)
 8025b1e:	430b      	orrs	r3, r1
 8025b20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8025b22:	687b      	ldr	r3, [r7, #4]
 8025b24:	681b      	ldr	r3, [r3, #0]
 8025b26:	68da      	ldr	r2, [r3, #12]
 8025b28:	687b      	ldr	r3, [r7, #4]
 8025b2a:	681b      	ldr	r3, [r3, #0]
 8025b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025b30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8025b32:	687b      	ldr	r3, [r7, #4]
 8025b34:	691a      	ldr	r2, [r3, #16]
 8025b36:	687b      	ldr	r3, [r7, #4]
 8025b38:	695b      	ldr	r3, [r3, #20]
 8025b3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8025b3e:	687b      	ldr	r3, [r7, #4]
 8025b40:	699b      	ldr	r3, [r3, #24]
 8025b42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8025b44:	687b      	ldr	r3, [r7, #4]
 8025b46:	681b      	ldr	r3, [r3, #0]
 8025b48:	430a      	orrs	r2, r1
 8025b4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8025b4c:	687b      	ldr	r3, [r7, #4]
 8025b4e:	69d9      	ldr	r1, [r3, #28]
 8025b50:	687b      	ldr	r3, [r7, #4]
 8025b52:	6a1a      	ldr	r2, [r3, #32]
 8025b54:	687b      	ldr	r3, [r7, #4]
 8025b56:	681b      	ldr	r3, [r3, #0]
 8025b58:	430a      	orrs	r2, r1
 8025b5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8025b5c:	687b      	ldr	r3, [r7, #4]
 8025b5e:	681b      	ldr	r3, [r3, #0]
 8025b60:	681a      	ldr	r2, [r3, #0]
 8025b62:	687b      	ldr	r3, [r7, #4]
 8025b64:	681b      	ldr	r3, [r3, #0]
 8025b66:	f042 0201 	orr.w	r2, r2, #1
 8025b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025b6c:	687b      	ldr	r3, [r7, #4]
 8025b6e:	2200      	movs	r2, #0
 8025b70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8025b72:	687b      	ldr	r3, [r7, #4]
 8025b74:	2220      	movs	r2, #32
 8025b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8025b7a:	687b      	ldr	r3, [r7, #4]
 8025b7c:	2200      	movs	r2, #0
 8025b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8025b80:	687b      	ldr	r3, [r7, #4]
 8025b82:	2200      	movs	r2, #0
 8025b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8025b88:	2300      	movs	r3, #0
}
 8025b8a:	4618      	mov	r0, r3
 8025b8c:	3708      	adds	r7, #8
 8025b8e:	46bd      	mov	sp, r7
 8025b90:	bd80      	pop	{r7, pc}
 8025b92:	bf00      	nop
 8025b94:	02008000 	.word	0x02008000

08025b98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8025b98:	b580      	push	{r7, lr}
 8025b9a:	b084      	sub	sp, #16
 8025b9c:	af00      	add	r7, sp, #0
 8025b9e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8025ba0:	687b      	ldr	r3, [r7, #4]
 8025ba2:	681b      	ldr	r3, [r3, #0]
 8025ba4:	699b      	ldr	r3, [r3, #24]
 8025ba6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8025ba8:	687b      	ldr	r3, [r7, #4]
 8025baa:	681b      	ldr	r3, [r3, #0]
 8025bac:	681b      	ldr	r3, [r3, #0]
 8025bae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8025bb0:	687b      	ldr	r3, [r7, #4]
 8025bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025bb4:	2b00      	cmp	r3, #0
 8025bb6:	d005      	beq.n	8025bc4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8025bb8:	687b      	ldr	r3, [r7, #4]
 8025bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025bbc:	68ba      	ldr	r2, [r7, #8]
 8025bbe:	68f9      	ldr	r1, [r7, #12]
 8025bc0:	6878      	ldr	r0, [r7, #4]
 8025bc2:	4798      	blx	r3
  }
}
 8025bc4:	bf00      	nop
 8025bc6:	3710      	adds	r7, #16
 8025bc8:	46bd      	mov	sp, r7
 8025bca:	bd80      	pop	{r7, pc}

08025bcc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8025bcc:	b580      	push	{r7, lr}
 8025bce:	b086      	sub	sp, #24
 8025bd0:	af00      	add	r7, sp, #0
 8025bd2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8025bd4:	687b      	ldr	r3, [r7, #4]
 8025bd6:	681b      	ldr	r3, [r3, #0]
 8025bd8:	699b      	ldr	r3, [r3, #24]
 8025bda:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8025bdc:	687b      	ldr	r3, [r7, #4]
 8025bde:	681b      	ldr	r3, [r3, #0]
 8025be0:	681b      	ldr	r3, [r3, #0]
 8025be2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8025be4:	697b      	ldr	r3, [r7, #20]
 8025be6:	0a1b      	lsrs	r3, r3, #8
 8025be8:	f003 0301 	and.w	r3, r3, #1
 8025bec:	2b00      	cmp	r3, #0
 8025bee:	d010      	beq.n	8025c12 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8025bf0:	693b      	ldr	r3, [r7, #16]
 8025bf2:	09db      	lsrs	r3, r3, #7
 8025bf4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8025bf8:	2b00      	cmp	r3, #0
 8025bfa:	d00a      	beq.n	8025c12 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8025bfc:	687b      	ldr	r3, [r7, #4]
 8025bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025c00:	f043 0201 	orr.w	r2, r3, #1
 8025c04:	687b      	ldr	r3, [r7, #4]
 8025c06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8025c08:	687b      	ldr	r3, [r7, #4]
 8025c0a:	681b      	ldr	r3, [r3, #0]
 8025c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8025c10:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8025c12:	697b      	ldr	r3, [r7, #20]
 8025c14:	0a9b      	lsrs	r3, r3, #10
 8025c16:	f003 0301 	and.w	r3, r3, #1
 8025c1a:	2b00      	cmp	r3, #0
 8025c1c:	d010      	beq.n	8025c40 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8025c1e:	693b      	ldr	r3, [r7, #16]
 8025c20:	09db      	lsrs	r3, r3, #7
 8025c22:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8025c26:	2b00      	cmp	r3, #0
 8025c28:	d00a      	beq.n	8025c40 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8025c2a:	687b      	ldr	r3, [r7, #4]
 8025c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025c2e:	f043 0208 	orr.w	r2, r3, #8
 8025c32:	687b      	ldr	r3, [r7, #4]
 8025c34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8025c36:	687b      	ldr	r3, [r7, #4]
 8025c38:	681b      	ldr	r3, [r3, #0]
 8025c3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025c3e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8025c40:	697b      	ldr	r3, [r7, #20]
 8025c42:	0a5b      	lsrs	r3, r3, #9
 8025c44:	f003 0301 	and.w	r3, r3, #1
 8025c48:	2b00      	cmp	r3, #0
 8025c4a:	d010      	beq.n	8025c6e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8025c4c:	693b      	ldr	r3, [r7, #16]
 8025c4e:	09db      	lsrs	r3, r3, #7
 8025c50:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8025c54:	2b00      	cmp	r3, #0
 8025c56:	d00a      	beq.n	8025c6e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8025c58:	687b      	ldr	r3, [r7, #4]
 8025c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025c5c:	f043 0202 	orr.w	r2, r3, #2
 8025c60:	687b      	ldr	r3, [r7, #4]
 8025c62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8025c64:	687b      	ldr	r3, [r7, #4]
 8025c66:	681b      	ldr	r3, [r3, #0]
 8025c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8025c6c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8025c6e:	687b      	ldr	r3, [r7, #4]
 8025c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025c72:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8025c74:	68fb      	ldr	r3, [r7, #12]
 8025c76:	f003 030b 	and.w	r3, r3, #11
 8025c7a:	2b00      	cmp	r3, #0
 8025c7c:	d003      	beq.n	8025c86 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8025c7e:	68f9      	ldr	r1, [r7, #12]
 8025c80:	6878      	ldr	r0, [r7, #4]
 8025c82:	f000 fc77 	bl	8026574 <I2C_ITError>
  }
}
 8025c86:	bf00      	nop
 8025c88:	3718      	adds	r7, #24
 8025c8a:	46bd      	mov	sp, r7
 8025c8c:	bd80      	pop	{r7, pc}

08025c8e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8025c8e:	b480      	push	{r7}
 8025c90:	b083      	sub	sp, #12
 8025c92:	af00      	add	r7, sp, #0
 8025c94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8025c96:	bf00      	nop
 8025c98:	370c      	adds	r7, #12
 8025c9a:	46bd      	mov	sp, r7
 8025c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ca0:	4770      	bx	lr

08025ca2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8025ca2:	b480      	push	{r7}
 8025ca4:	b083      	sub	sp, #12
 8025ca6:	af00      	add	r7, sp, #0
 8025ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8025caa:	bf00      	nop
 8025cac:	370c      	adds	r7, #12
 8025cae:	46bd      	mov	sp, r7
 8025cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cb4:	4770      	bx	lr

08025cb6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8025cb6:	b480      	push	{r7}
 8025cb8:	b083      	sub	sp, #12
 8025cba:	af00      	add	r7, sp, #0
 8025cbc:	6078      	str	r0, [r7, #4]
 8025cbe:	460b      	mov	r3, r1
 8025cc0:	70fb      	strb	r3, [r7, #3]
 8025cc2:	4613      	mov	r3, r2
 8025cc4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8025cc6:	bf00      	nop
 8025cc8:	370c      	adds	r7, #12
 8025cca:	46bd      	mov	sp, r7
 8025ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cd0:	4770      	bx	lr

08025cd2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8025cd2:	b480      	push	{r7}
 8025cd4:	b083      	sub	sp, #12
 8025cd6:	af00      	add	r7, sp, #0
 8025cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8025cda:	bf00      	nop
 8025cdc:	370c      	adds	r7, #12
 8025cde:	46bd      	mov	sp, r7
 8025ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ce4:	4770      	bx	lr

08025ce6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8025ce6:	b480      	push	{r7}
 8025ce8:	b083      	sub	sp, #12
 8025cea:	af00      	add	r7, sp, #0
 8025cec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8025cee:	bf00      	nop
 8025cf0:	370c      	adds	r7, #12
 8025cf2:	46bd      	mov	sp, r7
 8025cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cf8:	4770      	bx	lr

08025cfa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8025cfa:	b480      	push	{r7}
 8025cfc:	b083      	sub	sp, #12
 8025cfe:	af00      	add	r7, sp, #0
 8025d00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8025d02:	bf00      	nop
 8025d04:	370c      	adds	r7, #12
 8025d06:	46bd      	mov	sp, r7
 8025d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d0c:	4770      	bx	lr

08025d0e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8025d0e:	b580      	push	{r7, lr}
 8025d10:	b086      	sub	sp, #24
 8025d12:	af00      	add	r7, sp, #0
 8025d14:	60f8      	str	r0, [r7, #12]
 8025d16:	60b9      	str	r1, [r7, #8]
 8025d18:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8025d1a:	68fb      	ldr	r3, [r7, #12]
 8025d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8025d20:	68bb      	ldr	r3, [r7, #8]
 8025d22:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8025d24:	68fb      	ldr	r3, [r7, #12]
 8025d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8025d2a:	2b01      	cmp	r3, #1
 8025d2c:	d101      	bne.n	8025d32 <I2C_Slave_ISR_IT+0x24>
 8025d2e:	2302      	movs	r3, #2
 8025d30:	e0ec      	b.n	8025f0c <I2C_Slave_ISR_IT+0x1fe>
 8025d32:	68fb      	ldr	r3, [r7, #12]
 8025d34:	2201      	movs	r2, #1
 8025d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8025d3a:	693b      	ldr	r3, [r7, #16]
 8025d3c:	095b      	lsrs	r3, r3, #5
 8025d3e:	f003 0301 	and.w	r3, r3, #1
 8025d42:	2b00      	cmp	r3, #0
 8025d44:	d009      	beq.n	8025d5a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8025d46:	687b      	ldr	r3, [r7, #4]
 8025d48:	095b      	lsrs	r3, r3, #5
 8025d4a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8025d4e:	2b00      	cmp	r3, #0
 8025d50:	d003      	beq.n	8025d5a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8025d52:	6939      	ldr	r1, [r7, #16]
 8025d54:	68f8      	ldr	r0, [r7, #12]
 8025d56:	f000 f9bf 	bl	80260d8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8025d5a:	693b      	ldr	r3, [r7, #16]
 8025d5c:	091b      	lsrs	r3, r3, #4
 8025d5e:	f003 0301 	and.w	r3, r3, #1
 8025d62:	2b00      	cmp	r3, #0
 8025d64:	d04d      	beq.n	8025e02 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8025d66:	687b      	ldr	r3, [r7, #4]
 8025d68:	091b      	lsrs	r3, r3, #4
 8025d6a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8025d6e:	2b00      	cmp	r3, #0
 8025d70:	d047      	beq.n	8025e02 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8025d72:	68fb      	ldr	r3, [r7, #12]
 8025d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025d76:	b29b      	uxth	r3, r3
 8025d78:	2b00      	cmp	r3, #0
 8025d7a:	d128      	bne.n	8025dce <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8025d7c:	68fb      	ldr	r3, [r7, #12]
 8025d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8025d82:	b2db      	uxtb	r3, r3
 8025d84:	2b28      	cmp	r3, #40	; 0x28
 8025d86:	d108      	bne.n	8025d9a <I2C_Slave_ISR_IT+0x8c>
 8025d88:	697b      	ldr	r3, [r7, #20]
 8025d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8025d8e:	d104      	bne.n	8025d9a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8025d90:	6939      	ldr	r1, [r7, #16]
 8025d92:	68f8      	ldr	r0, [r7, #12]
 8025d94:	f000 fb98 	bl	80264c8 <I2C_ITListenCplt>
 8025d98:	e032      	b.n	8025e00 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8025d9a:	68fb      	ldr	r3, [r7, #12]
 8025d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8025da0:	b2db      	uxtb	r3, r3
 8025da2:	2b29      	cmp	r3, #41	; 0x29
 8025da4:	d10e      	bne.n	8025dc4 <I2C_Slave_ISR_IT+0xb6>
 8025da6:	697b      	ldr	r3, [r7, #20]
 8025da8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8025dac:	d00a      	beq.n	8025dc4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8025dae:	68fb      	ldr	r3, [r7, #12]
 8025db0:	681b      	ldr	r3, [r3, #0]
 8025db2:	2210      	movs	r2, #16
 8025db4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8025db6:	68f8      	ldr	r0, [r7, #12]
 8025db8:	f000 fcd3 	bl	8026762 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8025dbc:	68f8      	ldr	r0, [r7, #12]
 8025dbe:	f000 f92d 	bl	802601c <I2C_ITSlaveSeqCplt>
 8025dc2:	e01d      	b.n	8025e00 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8025dc4:	68fb      	ldr	r3, [r7, #12]
 8025dc6:	681b      	ldr	r3, [r3, #0]
 8025dc8:	2210      	movs	r2, #16
 8025dca:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8025dcc:	e096      	b.n	8025efc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8025dce:	68fb      	ldr	r3, [r7, #12]
 8025dd0:	681b      	ldr	r3, [r3, #0]
 8025dd2:	2210      	movs	r2, #16
 8025dd4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8025dd6:	68fb      	ldr	r3, [r7, #12]
 8025dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025dda:	f043 0204 	orr.w	r2, r3, #4
 8025dde:	68fb      	ldr	r3, [r7, #12]
 8025de0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8025de2:	697b      	ldr	r3, [r7, #20]
 8025de4:	2b00      	cmp	r3, #0
 8025de6:	d004      	beq.n	8025df2 <I2C_Slave_ISR_IT+0xe4>
 8025de8:	697b      	ldr	r3, [r7, #20]
 8025dea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8025dee:	f040 8085 	bne.w	8025efc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8025df2:	68fb      	ldr	r3, [r7, #12]
 8025df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025df6:	4619      	mov	r1, r3
 8025df8:	68f8      	ldr	r0, [r7, #12]
 8025dfa:	f000 fbbb 	bl	8026574 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8025dfe:	e07d      	b.n	8025efc <I2C_Slave_ISR_IT+0x1ee>
 8025e00:	e07c      	b.n	8025efc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8025e02:	693b      	ldr	r3, [r7, #16]
 8025e04:	089b      	lsrs	r3, r3, #2
 8025e06:	f003 0301 	and.w	r3, r3, #1
 8025e0a:	2b00      	cmp	r3, #0
 8025e0c:	d030      	beq.n	8025e70 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8025e0e:	687b      	ldr	r3, [r7, #4]
 8025e10:	089b      	lsrs	r3, r3, #2
 8025e12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8025e16:	2b00      	cmp	r3, #0
 8025e18:	d02a      	beq.n	8025e70 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8025e1a:	68fb      	ldr	r3, [r7, #12]
 8025e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025e1e:	b29b      	uxth	r3, r3
 8025e20:	2b00      	cmp	r3, #0
 8025e22:	d018      	beq.n	8025e56 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8025e24:	68fb      	ldr	r3, [r7, #12]
 8025e26:	681b      	ldr	r3, [r3, #0]
 8025e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025e2a:	68fb      	ldr	r3, [r7, #12]
 8025e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025e2e:	b2d2      	uxtb	r2, r2
 8025e30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8025e32:	68fb      	ldr	r3, [r7, #12]
 8025e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025e36:	1c5a      	adds	r2, r3, #1
 8025e38:	68fb      	ldr	r3, [r7, #12]
 8025e3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8025e3c:	68fb      	ldr	r3, [r7, #12]
 8025e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025e40:	3b01      	subs	r3, #1
 8025e42:	b29a      	uxth	r2, r3
 8025e44:	68fb      	ldr	r3, [r7, #12]
 8025e46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8025e48:	68fb      	ldr	r3, [r7, #12]
 8025e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025e4c:	b29b      	uxth	r3, r3
 8025e4e:	3b01      	subs	r3, #1
 8025e50:	b29a      	uxth	r2, r3
 8025e52:	68fb      	ldr	r3, [r7, #12]
 8025e54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8025e56:	68fb      	ldr	r3, [r7, #12]
 8025e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025e5a:	b29b      	uxth	r3, r3
 8025e5c:	2b00      	cmp	r3, #0
 8025e5e:	d14f      	bne.n	8025f00 <I2C_Slave_ISR_IT+0x1f2>
 8025e60:	697b      	ldr	r3, [r7, #20]
 8025e62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8025e66:	d04b      	beq.n	8025f00 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8025e68:	68f8      	ldr	r0, [r7, #12]
 8025e6a:	f000 f8d7 	bl	802601c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8025e6e:	e047      	b.n	8025f00 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8025e70:	693b      	ldr	r3, [r7, #16]
 8025e72:	08db      	lsrs	r3, r3, #3
 8025e74:	f003 0301 	and.w	r3, r3, #1
 8025e78:	2b00      	cmp	r3, #0
 8025e7a:	d00a      	beq.n	8025e92 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8025e7c:	687b      	ldr	r3, [r7, #4]
 8025e7e:	08db      	lsrs	r3, r3, #3
 8025e80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8025e84:	2b00      	cmp	r3, #0
 8025e86:	d004      	beq.n	8025e92 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8025e88:	6939      	ldr	r1, [r7, #16]
 8025e8a:	68f8      	ldr	r0, [r7, #12]
 8025e8c:	f000 f842 	bl	8025f14 <I2C_ITAddrCplt>
 8025e90:	e037      	b.n	8025f02 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8025e92:	693b      	ldr	r3, [r7, #16]
 8025e94:	085b      	lsrs	r3, r3, #1
 8025e96:	f003 0301 	and.w	r3, r3, #1
 8025e9a:	2b00      	cmp	r3, #0
 8025e9c:	d031      	beq.n	8025f02 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8025e9e:	687b      	ldr	r3, [r7, #4]
 8025ea0:	085b      	lsrs	r3, r3, #1
 8025ea2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8025ea6:	2b00      	cmp	r3, #0
 8025ea8:	d02b      	beq.n	8025f02 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8025eaa:	68fb      	ldr	r3, [r7, #12]
 8025eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025eae:	b29b      	uxth	r3, r3
 8025eb0:	2b00      	cmp	r3, #0
 8025eb2:	d018      	beq.n	8025ee6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8025eb4:	68fb      	ldr	r3, [r7, #12]
 8025eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025eb8:	781a      	ldrb	r2, [r3, #0]
 8025eba:	68fb      	ldr	r3, [r7, #12]
 8025ebc:	681b      	ldr	r3, [r3, #0]
 8025ebe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8025ec0:	68fb      	ldr	r3, [r7, #12]
 8025ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025ec4:	1c5a      	adds	r2, r3, #1
 8025ec6:	68fb      	ldr	r3, [r7, #12]
 8025ec8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8025eca:	68fb      	ldr	r3, [r7, #12]
 8025ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025ece:	b29b      	uxth	r3, r3
 8025ed0:	3b01      	subs	r3, #1
 8025ed2:	b29a      	uxth	r2, r3
 8025ed4:	68fb      	ldr	r3, [r7, #12]
 8025ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8025ed8:	68fb      	ldr	r3, [r7, #12]
 8025eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025edc:	3b01      	subs	r3, #1
 8025ede:	b29a      	uxth	r2, r3
 8025ee0:	68fb      	ldr	r3, [r7, #12]
 8025ee2:	851a      	strh	r2, [r3, #40]	; 0x28
 8025ee4:	e00d      	b.n	8025f02 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8025ee6:	697b      	ldr	r3, [r7, #20]
 8025ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8025eec:	d002      	beq.n	8025ef4 <I2C_Slave_ISR_IT+0x1e6>
 8025eee:	697b      	ldr	r3, [r7, #20]
 8025ef0:	2b00      	cmp	r3, #0
 8025ef2:	d106      	bne.n	8025f02 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8025ef4:	68f8      	ldr	r0, [r7, #12]
 8025ef6:	f000 f891 	bl	802601c <I2C_ITSlaveSeqCplt>
 8025efa:	e002      	b.n	8025f02 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8025efc:	bf00      	nop
 8025efe:	e000      	b.n	8025f02 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8025f00:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8025f02:	68fb      	ldr	r3, [r7, #12]
 8025f04:	2200      	movs	r2, #0
 8025f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8025f0a:	2300      	movs	r3, #0
}
 8025f0c:	4618      	mov	r0, r3
 8025f0e:	3718      	adds	r7, #24
 8025f10:	46bd      	mov	sp, r7
 8025f12:	bd80      	pop	{r7, pc}

08025f14 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8025f14:	b580      	push	{r7, lr}
 8025f16:	b084      	sub	sp, #16
 8025f18:	af00      	add	r7, sp, #0
 8025f1a:	6078      	str	r0, [r7, #4]
 8025f1c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8025f1e:	687b      	ldr	r3, [r7, #4]
 8025f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8025f24:	b2db      	uxtb	r3, r3
 8025f26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8025f2a:	2b28      	cmp	r3, #40	; 0x28
 8025f2c:	d16a      	bne.n	8026004 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8025f2e:	687b      	ldr	r3, [r7, #4]
 8025f30:	681b      	ldr	r3, [r3, #0]
 8025f32:	699b      	ldr	r3, [r3, #24]
 8025f34:	0c1b      	lsrs	r3, r3, #16
 8025f36:	b2db      	uxtb	r3, r3
 8025f38:	f003 0301 	and.w	r3, r3, #1
 8025f3c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8025f3e:	687b      	ldr	r3, [r7, #4]
 8025f40:	681b      	ldr	r3, [r3, #0]
 8025f42:	699b      	ldr	r3, [r3, #24]
 8025f44:	0c1b      	lsrs	r3, r3, #16
 8025f46:	b29b      	uxth	r3, r3
 8025f48:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8025f4c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8025f4e:	687b      	ldr	r3, [r7, #4]
 8025f50:	681b      	ldr	r3, [r3, #0]
 8025f52:	689b      	ldr	r3, [r3, #8]
 8025f54:	b29b      	uxth	r3, r3
 8025f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8025f5a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8025f5c:	687b      	ldr	r3, [r7, #4]
 8025f5e:	681b      	ldr	r3, [r3, #0]
 8025f60:	68db      	ldr	r3, [r3, #12]
 8025f62:	b29b      	uxth	r3, r3
 8025f64:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8025f68:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8025f6a:	687b      	ldr	r3, [r7, #4]
 8025f6c:	68db      	ldr	r3, [r3, #12]
 8025f6e:	2b02      	cmp	r3, #2
 8025f70:	d138      	bne.n	8025fe4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8025f72:	897b      	ldrh	r3, [r7, #10]
 8025f74:	09db      	lsrs	r3, r3, #7
 8025f76:	b29a      	uxth	r2, r3
 8025f78:	89bb      	ldrh	r3, [r7, #12]
 8025f7a:	4053      	eors	r3, r2
 8025f7c:	b29b      	uxth	r3, r3
 8025f7e:	f003 0306 	and.w	r3, r3, #6
 8025f82:	2b00      	cmp	r3, #0
 8025f84:	d11c      	bne.n	8025fc0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8025f86:	897b      	ldrh	r3, [r7, #10]
 8025f88:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8025f8a:	687b      	ldr	r3, [r7, #4]
 8025f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025f8e:	1c5a      	adds	r2, r3, #1
 8025f90:	687b      	ldr	r3, [r7, #4]
 8025f92:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8025f94:	687b      	ldr	r3, [r7, #4]
 8025f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025f98:	2b02      	cmp	r3, #2
 8025f9a:	d13b      	bne.n	8026014 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8025f9c:	687b      	ldr	r3, [r7, #4]
 8025f9e:	2200      	movs	r2, #0
 8025fa0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8025fa2:	687b      	ldr	r3, [r7, #4]
 8025fa4:	681b      	ldr	r3, [r3, #0]
 8025fa6:	2208      	movs	r2, #8
 8025fa8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8025faa:	687b      	ldr	r3, [r7, #4]
 8025fac:	2200      	movs	r2, #0
 8025fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8025fb2:	89ba      	ldrh	r2, [r7, #12]
 8025fb4:	7bfb      	ldrb	r3, [r7, #15]
 8025fb6:	4619      	mov	r1, r3
 8025fb8:	6878      	ldr	r0, [r7, #4]
 8025fba:	f7ff fe7c 	bl	8025cb6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8025fbe:	e029      	b.n	8026014 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8025fc0:	893b      	ldrh	r3, [r7, #8]
 8025fc2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8025fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8025fc8:	6878      	ldr	r0, [r7, #4]
 8025fca:	f000 fc0c 	bl	80267e6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8025fce:	687b      	ldr	r3, [r7, #4]
 8025fd0:	2200      	movs	r2, #0
 8025fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8025fd6:	89ba      	ldrh	r2, [r7, #12]
 8025fd8:	7bfb      	ldrb	r3, [r7, #15]
 8025fda:	4619      	mov	r1, r3
 8025fdc:	6878      	ldr	r0, [r7, #4]
 8025fde:	f7ff fe6a 	bl	8025cb6 <HAL_I2C_AddrCallback>
}
 8025fe2:	e017      	b.n	8026014 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8025fe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8025fe8:	6878      	ldr	r0, [r7, #4]
 8025fea:	f000 fbfc 	bl	80267e6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8025fee:	687b      	ldr	r3, [r7, #4]
 8025ff0:	2200      	movs	r2, #0
 8025ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8025ff6:	89ba      	ldrh	r2, [r7, #12]
 8025ff8:	7bfb      	ldrb	r3, [r7, #15]
 8025ffa:	4619      	mov	r1, r3
 8025ffc:	6878      	ldr	r0, [r7, #4]
 8025ffe:	f7ff fe5a 	bl	8025cb6 <HAL_I2C_AddrCallback>
}
 8026002:	e007      	b.n	8026014 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8026004:	687b      	ldr	r3, [r7, #4]
 8026006:	681b      	ldr	r3, [r3, #0]
 8026008:	2208      	movs	r2, #8
 802600a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 802600c:	687b      	ldr	r3, [r7, #4]
 802600e:	2200      	movs	r2, #0
 8026010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8026014:	bf00      	nop
 8026016:	3710      	adds	r7, #16
 8026018:	46bd      	mov	sp, r7
 802601a:	bd80      	pop	{r7, pc}

0802601c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 802601c:	b580      	push	{r7, lr}
 802601e:	b084      	sub	sp, #16
 8026020:	af00      	add	r7, sp, #0
 8026022:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8026024:	687b      	ldr	r3, [r7, #4]
 8026026:	681b      	ldr	r3, [r3, #0]
 8026028:	681b      	ldr	r3, [r3, #0]
 802602a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802602c:	687b      	ldr	r3, [r7, #4]
 802602e:	2200      	movs	r2, #0
 8026030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8026034:	68fb      	ldr	r3, [r7, #12]
 8026036:	0b9b      	lsrs	r3, r3, #14
 8026038:	f003 0301 	and.w	r3, r3, #1
 802603c:	2b00      	cmp	r3, #0
 802603e:	d008      	beq.n	8026052 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8026040:	687b      	ldr	r3, [r7, #4]
 8026042:	681b      	ldr	r3, [r3, #0]
 8026044:	681a      	ldr	r2, [r3, #0]
 8026046:	687b      	ldr	r3, [r7, #4]
 8026048:	681b      	ldr	r3, [r3, #0]
 802604a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802604e:	601a      	str	r2, [r3, #0]
 8026050:	e00d      	b.n	802606e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8026052:	68fb      	ldr	r3, [r7, #12]
 8026054:	0bdb      	lsrs	r3, r3, #15
 8026056:	f003 0301 	and.w	r3, r3, #1
 802605a:	2b00      	cmp	r3, #0
 802605c:	d007      	beq.n	802606e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802605e:	687b      	ldr	r3, [r7, #4]
 8026060:	681b      	ldr	r3, [r3, #0]
 8026062:	681a      	ldr	r2, [r3, #0]
 8026064:	687b      	ldr	r3, [r7, #4]
 8026066:	681b      	ldr	r3, [r3, #0]
 8026068:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802606c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 802606e:	687b      	ldr	r3, [r7, #4]
 8026070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026074:	b2db      	uxtb	r3, r3
 8026076:	2b29      	cmp	r3, #41	; 0x29
 8026078:	d112      	bne.n	80260a0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802607a:	687b      	ldr	r3, [r7, #4]
 802607c:	2228      	movs	r2, #40	; 0x28
 802607e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8026082:	687b      	ldr	r3, [r7, #4]
 8026084:	2221      	movs	r2, #33	; 0x21
 8026086:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8026088:	2101      	movs	r1, #1
 802608a:	6878      	ldr	r0, [r7, #4]
 802608c:	f000 fbab 	bl	80267e6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8026090:	687b      	ldr	r3, [r7, #4]
 8026092:	2200      	movs	r2, #0
 8026094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8026098:	6878      	ldr	r0, [r7, #4]
 802609a:	f7ff fdf8 	bl	8025c8e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 802609e:	e017      	b.n	80260d0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80260a0:	687b      	ldr	r3, [r7, #4]
 80260a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80260a6:	b2db      	uxtb	r3, r3
 80260a8:	2b2a      	cmp	r3, #42	; 0x2a
 80260aa:	d111      	bne.n	80260d0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80260ac:	687b      	ldr	r3, [r7, #4]
 80260ae:	2228      	movs	r2, #40	; 0x28
 80260b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80260b4:	687b      	ldr	r3, [r7, #4]
 80260b6:	2222      	movs	r2, #34	; 0x22
 80260b8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80260ba:	2102      	movs	r1, #2
 80260bc:	6878      	ldr	r0, [r7, #4]
 80260be:	f000 fb92 	bl	80267e6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80260c2:	687b      	ldr	r3, [r7, #4]
 80260c4:	2200      	movs	r2, #0
 80260c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80260ca:	6878      	ldr	r0, [r7, #4]
 80260cc:	f7ff fde9 	bl	8025ca2 <HAL_I2C_SlaveRxCpltCallback>
}
 80260d0:	bf00      	nop
 80260d2:	3710      	adds	r7, #16
 80260d4:	46bd      	mov	sp, r7
 80260d6:	bd80      	pop	{r7, pc}

080260d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80260d8:	b580      	push	{r7, lr}
 80260da:	b086      	sub	sp, #24
 80260dc:	af00      	add	r7, sp, #0
 80260de:	6078      	str	r0, [r7, #4]
 80260e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80260e2:	687b      	ldr	r3, [r7, #4]
 80260e4:	681b      	ldr	r3, [r3, #0]
 80260e6:	681b      	ldr	r3, [r3, #0]
 80260e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80260ea:	683b      	ldr	r3, [r7, #0]
 80260ec:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80260ee:	687b      	ldr	r3, [r7, #4]
 80260f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80260f4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80260f6:	687b      	ldr	r3, [r7, #4]
 80260f8:	681b      	ldr	r3, [r3, #0]
 80260fa:	2220      	movs	r2, #32
 80260fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80260fe:	7bfb      	ldrb	r3, [r7, #15]
 8026100:	2b21      	cmp	r3, #33	; 0x21
 8026102:	d002      	beq.n	802610a <I2C_ITSlaveCplt+0x32>
 8026104:	7bfb      	ldrb	r3, [r7, #15]
 8026106:	2b29      	cmp	r3, #41	; 0x29
 8026108:	d108      	bne.n	802611c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 802610a:	f248 0101 	movw	r1, #32769	; 0x8001
 802610e:	6878      	ldr	r0, [r7, #4]
 8026110:	f000 fb69 	bl	80267e6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8026114:	687b      	ldr	r3, [r7, #4]
 8026116:	2221      	movs	r2, #33	; 0x21
 8026118:	631a      	str	r2, [r3, #48]	; 0x30
 802611a:	e00d      	b.n	8026138 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802611c:	7bfb      	ldrb	r3, [r7, #15]
 802611e:	2b22      	cmp	r3, #34	; 0x22
 8026120:	d002      	beq.n	8026128 <I2C_ITSlaveCplt+0x50>
 8026122:	7bfb      	ldrb	r3, [r7, #15]
 8026124:	2b2a      	cmp	r3, #42	; 0x2a
 8026126:	d107      	bne.n	8026138 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8026128:	f248 0102 	movw	r1, #32770	; 0x8002
 802612c:	6878      	ldr	r0, [r7, #4]
 802612e:	f000 fb5a 	bl	80267e6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8026132:	687b      	ldr	r3, [r7, #4]
 8026134:	2222      	movs	r2, #34	; 0x22
 8026136:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8026138:	687b      	ldr	r3, [r7, #4]
 802613a:	681b      	ldr	r3, [r3, #0]
 802613c:	685a      	ldr	r2, [r3, #4]
 802613e:	687b      	ldr	r3, [r7, #4]
 8026140:	681b      	ldr	r3, [r3, #0]
 8026142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8026146:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8026148:	687b      	ldr	r3, [r7, #4]
 802614a:	681b      	ldr	r3, [r3, #0]
 802614c:	6859      	ldr	r1, [r3, #4]
 802614e:	687b      	ldr	r3, [r7, #4]
 8026150:	681a      	ldr	r2, [r3, #0]
 8026152:	4b80      	ldr	r3, [pc, #512]	; (8026354 <I2C_ITSlaveCplt+0x27c>)
 8026154:	400b      	ands	r3, r1
 8026156:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8026158:	6878      	ldr	r0, [r7, #4]
 802615a:	f000 fb02 	bl	8026762 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 802615e:	693b      	ldr	r3, [r7, #16]
 8026160:	0b9b      	lsrs	r3, r3, #14
 8026162:	f003 0301 	and.w	r3, r3, #1
 8026166:	2b00      	cmp	r3, #0
 8026168:	d07a      	beq.n	8026260 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802616a:	687b      	ldr	r3, [r7, #4]
 802616c:	681b      	ldr	r3, [r3, #0]
 802616e:	681a      	ldr	r2, [r3, #0]
 8026170:	687b      	ldr	r3, [r7, #4]
 8026172:	681b      	ldr	r3, [r3, #0]
 8026174:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8026178:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 802617a:	687b      	ldr	r3, [r7, #4]
 802617c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802617e:	2b00      	cmp	r3, #0
 8026180:	f000 8111 	beq.w	80263a6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8026184:	687b      	ldr	r3, [r7, #4]
 8026186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026188:	681b      	ldr	r3, [r3, #0]
 802618a:	4a73      	ldr	r2, [pc, #460]	; (8026358 <I2C_ITSlaveCplt+0x280>)
 802618c:	4293      	cmp	r3, r2
 802618e:	d059      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 8026190:	687b      	ldr	r3, [r7, #4]
 8026192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026194:	681b      	ldr	r3, [r3, #0]
 8026196:	4a71      	ldr	r2, [pc, #452]	; (802635c <I2C_ITSlaveCplt+0x284>)
 8026198:	4293      	cmp	r3, r2
 802619a:	d053      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 802619c:	687b      	ldr	r3, [r7, #4]
 802619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261a0:	681b      	ldr	r3, [r3, #0]
 80261a2:	4a6f      	ldr	r2, [pc, #444]	; (8026360 <I2C_ITSlaveCplt+0x288>)
 80261a4:	4293      	cmp	r3, r2
 80261a6:	d04d      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 80261a8:	687b      	ldr	r3, [r7, #4]
 80261aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261ac:	681b      	ldr	r3, [r3, #0]
 80261ae:	4a6d      	ldr	r2, [pc, #436]	; (8026364 <I2C_ITSlaveCplt+0x28c>)
 80261b0:	4293      	cmp	r3, r2
 80261b2:	d047      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 80261b4:	687b      	ldr	r3, [r7, #4]
 80261b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261b8:	681b      	ldr	r3, [r3, #0]
 80261ba:	4a6b      	ldr	r2, [pc, #428]	; (8026368 <I2C_ITSlaveCplt+0x290>)
 80261bc:	4293      	cmp	r3, r2
 80261be:	d041      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 80261c0:	687b      	ldr	r3, [r7, #4]
 80261c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261c4:	681b      	ldr	r3, [r3, #0]
 80261c6:	4a69      	ldr	r2, [pc, #420]	; (802636c <I2C_ITSlaveCplt+0x294>)
 80261c8:	4293      	cmp	r3, r2
 80261ca:	d03b      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 80261cc:	687b      	ldr	r3, [r7, #4]
 80261ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261d0:	681b      	ldr	r3, [r3, #0]
 80261d2:	4a67      	ldr	r2, [pc, #412]	; (8026370 <I2C_ITSlaveCplt+0x298>)
 80261d4:	4293      	cmp	r3, r2
 80261d6:	d035      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 80261d8:	687b      	ldr	r3, [r7, #4]
 80261da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261dc:	681b      	ldr	r3, [r3, #0]
 80261de:	4a65      	ldr	r2, [pc, #404]	; (8026374 <I2C_ITSlaveCplt+0x29c>)
 80261e0:	4293      	cmp	r3, r2
 80261e2:	d02f      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 80261e4:	687b      	ldr	r3, [r7, #4]
 80261e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261e8:	681b      	ldr	r3, [r3, #0]
 80261ea:	4a63      	ldr	r2, [pc, #396]	; (8026378 <I2C_ITSlaveCplt+0x2a0>)
 80261ec:	4293      	cmp	r3, r2
 80261ee:	d029      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 80261f0:	687b      	ldr	r3, [r7, #4]
 80261f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261f4:	681b      	ldr	r3, [r3, #0]
 80261f6:	4a61      	ldr	r2, [pc, #388]	; (802637c <I2C_ITSlaveCplt+0x2a4>)
 80261f8:	4293      	cmp	r3, r2
 80261fa:	d023      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 80261fc:	687b      	ldr	r3, [r7, #4]
 80261fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026200:	681b      	ldr	r3, [r3, #0]
 8026202:	4a5f      	ldr	r2, [pc, #380]	; (8026380 <I2C_ITSlaveCplt+0x2a8>)
 8026204:	4293      	cmp	r3, r2
 8026206:	d01d      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 8026208:	687b      	ldr	r3, [r7, #4]
 802620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802620c:	681b      	ldr	r3, [r3, #0]
 802620e:	4a5d      	ldr	r2, [pc, #372]	; (8026384 <I2C_ITSlaveCplt+0x2ac>)
 8026210:	4293      	cmp	r3, r2
 8026212:	d017      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 8026214:	687b      	ldr	r3, [r7, #4]
 8026216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026218:	681b      	ldr	r3, [r3, #0]
 802621a:	4a5b      	ldr	r2, [pc, #364]	; (8026388 <I2C_ITSlaveCplt+0x2b0>)
 802621c:	4293      	cmp	r3, r2
 802621e:	d011      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 8026220:	687b      	ldr	r3, [r7, #4]
 8026222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026224:	681b      	ldr	r3, [r3, #0]
 8026226:	4a59      	ldr	r2, [pc, #356]	; (802638c <I2C_ITSlaveCplt+0x2b4>)
 8026228:	4293      	cmp	r3, r2
 802622a:	d00b      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 802622c:	687b      	ldr	r3, [r7, #4]
 802622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026230:	681b      	ldr	r3, [r3, #0]
 8026232:	4a57      	ldr	r2, [pc, #348]	; (8026390 <I2C_ITSlaveCplt+0x2b8>)
 8026234:	4293      	cmp	r3, r2
 8026236:	d005      	beq.n	8026244 <I2C_ITSlaveCplt+0x16c>
 8026238:	687b      	ldr	r3, [r7, #4]
 802623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802623c:	681b      	ldr	r3, [r3, #0]
 802623e:	4a55      	ldr	r2, [pc, #340]	; (8026394 <I2C_ITSlaveCplt+0x2bc>)
 8026240:	4293      	cmp	r3, r2
 8026242:	d105      	bne.n	8026250 <I2C_ITSlaveCplt+0x178>
 8026244:	687b      	ldr	r3, [r7, #4]
 8026246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026248:	681b      	ldr	r3, [r3, #0]
 802624a:	685b      	ldr	r3, [r3, #4]
 802624c:	b29b      	uxth	r3, r3
 802624e:	e004      	b.n	802625a <I2C_ITSlaveCplt+0x182>
 8026250:	687b      	ldr	r3, [r7, #4]
 8026252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026254:	681b      	ldr	r3, [r3, #0]
 8026256:	685b      	ldr	r3, [r3, #4]
 8026258:	b29b      	uxth	r3, r3
 802625a:	687a      	ldr	r2, [r7, #4]
 802625c:	8553      	strh	r3, [r2, #42]	; 0x2a
 802625e:	e0a2      	b.n	80263a6 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8026260:	693b      	ldr	r3, [r7, #16]
 8026262:	0bdb      	lsrs	r3, r3, #15
 8026264:	f003 0301 	and.w	r3, r3, #1
 8026268:	2b00      	cmp	r3, #0
 802626a:	f000 809c 	beq.w	80263a6 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802626e:	687b      	ldr	r3, [r7, #4]
 8026270:	681b      	ldr	r3, [r3, #0]
 8026272:	681a      	ldr	r2, [r3, #0]
 8026274:	687b      	ldr	r3, [r7, #4]
 8026276:	681b      	ldr	r3, [r3, #0]
 8026278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802627c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 802627e:	687b      	ldr	r3, [r7, #4]
 8026280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026282:	2b00      	cmp	r3, #0
 8026284:	f000 808f 	beq.w	80263a6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8026288:	687b      	ldr	r3, [r7, #4]
 802628a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802628c:	681b      	ldr	r3, [r3, #0]
 802628e:	4a32      	ldr	r2, [pc, #200]	; (8026358 <I2C_ITSlaveCplt+0x280>)
 8026290:	4293      	cmp	r3, r2
 8026292:	d059      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 8026294:	687b      	ldr	r3, [r7, #4]
 8026296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026298:	681b      	ldr	r3, [r3, #0]
 802629a:	4a30      	ldr	r2, [pc, #192]	; (802635c <I2C_ITSlaveCplt+0x284>)
 802629c:	4293      	cmp	r3, r2
 802629e:	d053      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 80262a0:	687b      	ldr	r3, [r7, #4]
 80262a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80262a4:	681b      	ldr	r3, [r3, #0]
 80262a6:	4a2e      	ldr	r2, [pc, #184]	; (8026360 <I2C_ITSlaveCplt+0x288>)
 80262a8:	4293      	cmp	r3, r2
 80262aa:	d04d      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 80262ac:	687b      	ldr	r3, [r7, #4]
 80262ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80262b0:	681b      	ldr	r3, [r3, #0]
 80262b2:	4a2c      	ldr	r2, [pc, #176]	; (8026364 <I2C_ITSlaveCplt+0x28c>)
 80262b4:	4293      	cmp	r3, r2
 80262b6:	d047      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 80262b8:	687b      	ldr	r3, [r7, #4]
 80262ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80262bc:	681b      	ldr	r3, [r3, #0]
 80262be:	4a2a      	ldr	r2, [pc, #168]	; (8026368 <I2C_ITSlaveCplt+0x290>)
 80262c0:	4293      	cmp	r3, r2
 80262c2:	d041      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 80262c4:	687b      	ldr	r3, [r7, #4]
 80262c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80262c8:	681b      	ldr	r3, [r3, #0]
 80262ca:	4a28      	ldr	r2, [pc, #160]	; (802636c <I2C_ITSlaveCplt+0x294>)
 80262cc:	4293      	cmp	r3, r2
 80262ce:	d03b      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 80262d0:	687b      	ldr	r3, [r7, #4]
 80262d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80262d4:	681b      	ldr	r3, [r3, #0]
 80262d6:	4a26      	ldr	r2, [pc, #152]	; (8026370 <I2C_ITSlaveCplt+0x298>)
 80262d8:	4293      	cmp	r3, r2
 80262da:	d035      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 80262dc:	687b      	ldr	r3, [r7, #4]
 80262de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80262e0:	681b      	ldr	r3, [r3, #0]
 80262e2:	4a24      	ldr	r2, [pc, #144]	; (8026374 <I2C_ITSlaveCplt+0x29c>)
 80262e4:	4293      	cmp	r3, r2
 80262e6:	d02f      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 80262e8:	687b      	ldr	r3, [r7, #4]
 80262ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80262ec:	681b      	ldr	r3, [r3, #0]
 80262ee:	4a22      	ldr	r2, [pc, #136]	; (8026378 <I2C_ITSlaveCplt+0x2a0>)
 80262f0:	4293      	cmp	r3, r2
 80262f2:	d029      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 80262f4:	687b      	ldr	r3, [r7, #4]
 80262f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80262f8:	681b      	ldr	r3, [r3, #0]
 80262fa:	4a20      	ldr	r2, [pc, #128]	; (802637c <I2C_ITSlaveCplt+0x2a4>)
 80262fc:	4293      	cmp	r3, r2
 80262fe:	d023      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 8026300:	687b      	ldr	r3, [r7, #4]
 8026302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026304:	681b      	ldr	r3, [r3, #0]
 8026306:	4a1e      	ldr	r2, [pc, #120]	; (8026380 <I2C_ITSlaveCplt+0x2a8>)
 8026308:	4293      	cmp	r3, r2
 802630a:	d01d      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 802630c:	687b      	ldr	r3, [r7, #4]
 802630e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026310:	681b      	ldr	r3, [r3, #0]
 8026312:	4a1c      	ldr	r2, [pc, #112]	; (8026384 <I2C_ITSlaveCplt+0x2ac>)
 8026314:	4293      	cmp	r3, r2
 8026316:	d017      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 8026318:	687b      	ldr	r3, [r7, #4]
 802631a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802631c:	681b      	ldr	r3, [r3, #0]
 802631e:	4a1a      	ldr	r2, [pc, #104]	; (8026388 <I2C_ITSlaveCplt+0x2b0>)
 8026320:	4293      	cmp	r3, r2
 8026322:	d011      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 8026324:	687b      	ldr	r3, [r7, #4]
 8026326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026328:	681b      	ldr	r3, [r3, #0]
 802632a:	4a18      	ldr	r2, [pc, #96]	; (802638c <I2C_ITSlaveCplt+0x2b4>)
 802632c:	4293      	cmp	r3, r2
 802632e:	d00b      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 8026330:	687b      	ldr	r3, [r7, #4]
 8026332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026334:	681b      	ldr	r3, [r3, #0]
 8026336:	4a16      	ldr	r2, [pc, #88]	; (8026390 <I2C_ITSlaveCplt+0x2b8>)
 8026338:	4293      	cmp	r3, r2
 802633a:	d005      	beq.n	8026348 <I2C_ITSlaveCplt+0x270>
 802633c:	687b      	ldr	r3, [r7, #4]
 802633e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026340:	681b      	ldr	r3, [r3, #0]
 8026342:	4a14      	ldr	r2, [pc, #80]	; (8026394 <I2C_ITSlaveCplt+0x2bc>)
 8026344:	4293      	cmp	r3, r2
 8026346:	d127      	bne.n	8026398 <I2C_ITSlaveCplt+0x2c0>
 8026348:	687b      	ldr	r3, [r7, #4]
 802634a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802634c:	681b      	ldr	r3, [r3, #0]
 802634e:	685b      	ldr	r3, [r3, #4]
 8026350:	b29b      	uxth	r3, r3
 8026352:	e026      	b.n	80263a2 <I2C_ITSlaveCplt+0x2ca>
 8026354:	fe00e800 	.word	0xfe00e800
 8026358:	40020010 	.word	0x40020010
 802635c:	40020028 	.word	0x40020028
 8026360:	40020040 	.word	0x40020040
 8026364:	40020058 	.word	0x40020058
 8026368:	40020070 	.word	0x40020070
 802636c:	40020088 	.word	0x40020088
 8026370:	400200a0 	.word	0x400200a0
 8026374:	400200b8 	.word	0x400200b8
 8026378:	40020410 	.word	0x40020410
 802637c:	40020428 	.word	0x40020428
 8026380:	40020440 	.word	0x40020440
 8026384:	40020458 	.word	0x40020458
 8026388:	40020470 	.word	0x40020470
 802638c:	40020488 	.word	0x40020488
 8026390:	400204a0 	.word	0x400204a0
 8026394:	400204b8 	.word	0x400204b8
 8026398:	687b      	ldr	r3, [r7, #4]
 802639a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802639c:	681b      	ldr	r3, [r3, #0]
 802639e:	685b      	ldr	r3, [r3, #4]
 80263a0:	b29b      	uxth	r3, r3
 80263a2:	687a      	ldr	r2, [r7, #4]
 80263a4:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80263a6:	697b      	ldr	r3, [r7, #20]
 80263a8:	089b      	lsrs	r3, r3, #2
 80263aa:	f003 0301 	and.w	r3, r3, #1
 80263ae:	2b00      	cmp	r3, #0
 80263b0:	d020      	beq.n	80263f4 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80263b2:	697b      	ldr	r3, [r7, #20]
 80263b4:	f023 0304 	bic.w	r3, r3, #4
 80263b8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80263ba:	687b      	ldr	r3, [r7, #4]
 80263bc:	681b      	ldr	r3, [r3, #0]
 80263be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80263c0:	687b      	ldr	r3, [r7, #4]
 80263c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80263c4:	b2d2      	uxtb	r2, r2
 80263c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80263c8:	687b      	ldr	r3, [r7, #4]
 80263ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80263cc:	1c5a      	adds	r2, r3, #1
 80263ce:	687b      	ldr	r3, [r7, #4]
 80263d0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80263d2:	687b      	ldr	r3, [r7, #4]
 80263d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80263d6:	2b00      	cmp	r3, #0
 80263d8:	d00c      	beq.n	80263f4 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80263da:	687b      	ldr	r3, [r7, #4]
 80263dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80263de:	3b01      	subs	r3, #1
 80263e0:	b29a      	uxth	r2, r3
 80263e2:	687b      	ldr	r3, [r7, #4]
 80263e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80263e6:	687b      	ldr	r3, [r7, #4]
 80263e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80263ea:	b29b      	uxth	r3, r3
 80263ec:	3b01      	subs	r3, #1
 80263ee:	b29a      	uxth	r2, r3
 80263f0:	687b      	ldr	r3, [r7, #4]
 80263f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80263f4:	687b      	ldr	r3, [r7, #4]
 80263f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80263f8:	b29b      	uxth	r3, r3
 80263fa:	2b00      	cmp	r3, #0
 80263fc:	d005      	beq.n	802640a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80263fe:	687b      	ldr	r3, [r7, #4]
 8026400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026402:	f043 0204 	orr.w	r2, r3, #4
 8026406:	687b      	ldr	r3, [r7, #4]
 8026408:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 802640a:	687b      	ldr	r3, [r7, #4]
 802640c:	2200      	movs	r2, #0
 802640e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8026412:	687b      	ldr	r3, [r7, #4]
 8026414:	2200      	movs	r2, #0
 8026416:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8026418:	687b      	ldr	r3, [r7, #4]
 802641a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802641c:	2b00      	cmp	r3, #0
 802641e:	d010      	beq.n	8026442 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8026420:	687b      	ldr	r3, [r7, #4]
 8026422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026424:	4619      	mov	r1, r3
 8026426:	6878      	ldr	r0, [r7, #4]
 8026428:	f000 f8a4 	bl	8026574 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 802642c:	687b      	ldr	r3, [r7, #4]
 802642e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026432:	b2db      	uxtb	r3, r3
 8026434:	2b28      	cmp	r3, #40	; 0x28
 8026436:	d141      	bne.n	80264bc <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8026438:	6979      	ldr	r1, [r7, #20]
 802643a:	6878      	ldr	r0, [r7, #4]
 802643c:	f000 f844 	bl	80264c8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8026440:	e03c      	b.n	80264bc <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8026442:	687b      	ldr	r3, [r7, #4]
 8026444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026446:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802644a:	d014      	beq.n	8026476 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 802644c:	6878      	ldr	r0, [r7, #4]
 802644e:	f7ff fde5 	bl	802601c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8026452:	687b      	ldr	r3, [r7, #4]
 8026454:	4a1b      	ldr	r2, [pc, #108]	; (80264c4 <I2C_ITSlaveCplt+0x3ec>)
 8026456:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8026458:	687b      	ldr	r3, [r7, #4]
 802645a:	2220      	movs	r2, #32
 802645c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8026460:	687b      	ldr	r3, [r7, #4]
 8026462:	2200      	movs	r2, #0
 8026464:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8026466:	687b      	ldr	r3, [r7, #4]
 8026468:	2200      	movs	r2, #0
 802646a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 802646e:	6878      	ldr	r0, [r7, #4]
 8026470:	f7ff fc2f 	bl	8025cd2 <HAL_I2C_ListenCpltCallback>
}
 8026474:	e022      	b.n	80264bc <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8026476:	687b      	ldr	r3, [r7, #4]
 8026478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802647c:	b2db      	uxtb	r3, r3
 802647e:	2b22      	cmp	r3, #34	; 0x22
 8026480:	d10e      	bne.n	80264a0 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8026482:	687b      	ldr	r3, [r7, #4]
 8026484:	2220      	movs	r2, #32
 8026486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802648a:	687b      	ldr	r3, [r7, #4]
 802648c:	2200      	movs	r2, #0
 802648e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8026490:	687b      	ldr	r3, [r7, #4]
 8026492:	2200      	movs	r2, #0
 8026494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8026498:	6878      	ldr	r0, [r7, #4]
 802649a:	f7ff fc02 	bl	8025ca2 <HAL_I2C_SlaveRxCpltCallback>
}
 802649e:	e00d      	b.n	80264bc <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80264a0:	687b      	ldr	r3, [r7, #4]
 80264a2:	2220      	movs	r2, #32
 80264a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80264a8:	687b      	ldr	r3, [r7, #4]
 80264aa:	2200      	movs	r2, #0
 80264ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80264ae:	687b      	ldr	r3, [r7, #4]
 80264b0:	2200      	movs	r2, #0
 80264b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80264b6:	6878      	ldr	r0, [r7, #4]
 80264b8:	f7ff fbe9 	bl	8025c8e <HAL_I2C_SlaveTxCpltCallback>
}
 80264bc:	bf00      	nop
 80264be:	3718      	adds	r7, #24
 80264c0:	46bd      	mov	sp, r7
 80264c2:	bd80      	pop	{r7, pc}
 80264c4:	ffff0000 	.word	0xffff0000

080264c8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80264c8:	b580      	push	{r7, lr}
 80264ca:	b082      	sub	sp, #8
 80264cc:	af00      	add	r7, sp, #0
 80264ce:	6078      	str	r0, [r7, #4]
 80264d0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80264d2:	687b      	ldr	r3, [r7, #4]
 80264d4:	4a26      	ldr	r2, [pc, #152]	; (8026570 <I2C_ITListenCplt+0xa8>)
 80264d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80264d8:	687b      	ldr	r3, [r7, #4]
 80264da:	2200      	movs	r2, #0
 80264dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80264de:	687b      	ldr	r3, [r7, #4]
 80264e0:	2220      	movs	r2, #32
 80264e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80264e6:	687b      	ldr	r3, [r7, #4]
 80264e8:	2200      	movs	r2, #0
 80264ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80264ee:	687b      	ldr	r3, [r7, #4]
 80264f0:	2200      	movs	r2, #0
 80264f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80264f4:	683b      	ldr	r3, [r7, #0]
 80264f6:	089b      	lsrs	r3, r3, #2
 80264f8:	f003 0301 	and.w	r3, r3, #1
 80264fc:	2b00      	cmp	r3, #0
 80264fe:	d022      	beq.n	8026546 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8026500:	687b      	ldr	r3, [r7, #4]
 8026502:	681b      	ldr	r3, [r3, #0]
 8026504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026506:	687b      	ldr	r3, [r7, #4]
 8026508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802650a:	b2d2      	uxtb	r2, r2
 802650c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802650e:	687b      	ldr	r3, [r7, #4]
 8026510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026512:	1c5a      	adds	r2, r3, #1
 8026514:	687b      	ldr	r3, [r7, #4]
 8026516:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8026518:	687b      	ldr	r3, [r7, #4]
 802651a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802651c:	2b00      	cmp	r3, #0
 802651e:	d012      	beq.n	8026546 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8026520:	687b      	ldr	r3, [r7, #4]
 8026522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8026524:	3b01      	subs	r3, #1
 8026526:	b29a      	uxth	r2, r3
 8026528:	687b      	ldr	r3, [r7, #4]
 802652a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802652c:	687b      	ldr	r3, [r7, #4]
 802652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8026530:	b29b      	uxth	r3, r3
 8026532:	3b01      	subs	r3, #1
 8026534:	b29a      	uxth	r2, r3
 8026536:	687b      	ldr	r3, [r7, #4]
 8026538:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802653a:	687b      	ldr	r3, [r7, #4]
 802653c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802653e:	f043 0204 	orr.w	r2, r3, #4
 8026542:	687b      	ldr	r3, [r7, #4]
 8026544:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8026546:	f248 0103 	movw	r1, #32771	; 0x8003
 802654a:	6878      	ldr	r0, [r7, #4]
 802654c:	f000 f94b 	bl	80267e6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8026550:	687b      	ldr	r3, [r7, #4]
 8026552:	681b      	ldr	r3, [r3, #0]
 8026554:	2210      	movs	r2, #16
 8026556:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8026558:	687b      	ldr	r3, [r7, #4]
 802655a:	2200      	movs	r2, #0
 802655c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8026560:	6878      	ldr	r0, [r7, #4]
 8026562:	f7ff fbb6 	bl	8025cd2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8026566:	bf00      	nop
 8026568:	3708      	adds	r7, #8
 802656a:	46bd      	mov	sp, r7
 802656c:	bd80      	pop	{r7, pc}
 802656e:	bf00      	nop
 8026570:	ffff0000 	.word	0xffff0000

08026574 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8026574:	b580      	push	{r7, lr}
 8026576:	b084      	sub	sp, #16
 8026578:	af00      	add	r7, sp, #0
 802657a:	6078      	str	r0, [r7, #4]
 802657c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 802657e:	687b      	ldr	r3, [r7, #4]
 8026580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8026586:	687b      	ldr	r3, [r7, #4]
 8026588:	2200      	movs	r2, #0
 802658a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 802658e:	687b      	ldr	r3, [r7, #4]
 8026590:	4a5d      	ldr	r2, [pc, #372]	; (8026708 <I2C_ITError+0x194>)
 8026592:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8026594:	687b      	ldr	r3, [r7, #4]
 8026596:	2200      	movs	r2, #0
 8026598:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 802659a:	687b      	ldr	r3, [r7, #4]
 802659c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802659e:	683b      	ldr	r3, [r7, #0]
 80265a0:	431a      	orrs	r2, r3
 80265a2:	687b      	ldr	r3, [r7, #4]
 80265a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80265a6:	7bfb      	ldrb	r3, [r7, #15]
 80265a8:	2b28      	cmp	r3, #40	; 0x28
 80265aa:	d005      	beq.n	80265b8 <I2C_ITError+0x44>
 80265ac:	7bfb      	ldrb	r3, [r7, #15]
 80265ae:	2b29      	cmp	r3, #41	; 0x29
 80265b0:	d002      	beq.n	80265b8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80265b2:	7bfb      	ldrb	r3, [r7, #15]
 80265b4:	2b2a      	cmp	r3, #42	; 0x2a
 80265b6:	d10b      	bne.n	80265d0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80265b8:	2103      	movs	r1, #3
 80265ba:	6878      	ldr	r0, [r7, #4]
 80265bc:	f000 f913 	bl	80267e6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80265c0:	687b      	ldr	r3, [r7, #4]
 80265c2:	2228      	movs	r2, #40	; 0x28
 80265c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80265c8:	687b      	ldr	r3, [r7, #4]
 80265ca:	4a50      	ldr	r2, [pc, #320]	; (802670c <I2C_ITError+0x198>)
 80265cc:	635a      	str	r2, [r3, #52]	; 0x34
 80265ce:	e011      	b.n	80265f4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80265d0:	f248 0103 	movw	r1, #32771	; 0x8003
 80265d4:	6878      	ldr	r0, [r7, #4]
 80265d6:	f000 f906 	bl	80267e6 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80265da:	687b      	ldr	r3, [r7, #4]
 80265dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80265e0:	b2db      	uxtb	r3, r3
 80265e2:	2b60      	cmp	r3, #96	; 0x60
 80265e4:	d003      	beq.n	80265ee <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80265e6:	687b      	ldr	r3, [r7, #4]
 80265e8:	2220      	movs	r2, #32
 80265ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80265ee:	687b      	ldr	r3, [r7, #4]
 80265f0:	2200      	movs	r2, #0
 80265f2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80265f4:	687b      	ldr	r3, [r7, #4]
 80265f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80265f8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80265fa:	687b      	ldr	r3, [r7, #4]
 80265fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80265fe:	2b00      	cmp	r3, #0
 8026600:	d039      	beq.n	8026676 <I2C_ITError+0x102>
 8026602:	68bb      	ldr	r3, [r7, #8]
 8026604:	2b11      	cmp	r3, #17
 8026606:	d002      	beq.n	802660e <I2C_ITError+0x9a>
 8026608:	68bb      	ldr	r3, [r7, #8]
 802660a:	2b21      	cmp	r3, #33	; 0x21
 802660c:	d133      	bne.n	8026676 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 802660e:	687b      	ldr	r3, [r7, #4]
 8026610:	681b      	ldr	r3, [r3, #0]
 8026612:	681b      	ldr	r3, [r3, #0]
 8026614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8026618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802661c:	d107      	bne.n	802662e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802661e:	687b      	ldr	r3, [r7, #4]
 8026620:	681b      	ldr	r3, [r3, #0]
 8026622:	681a      	ldr	r2, [r3, #0]
 8026624:	687b      	ldr	r3, [r7, #4]
 8026626:	681b      	ldr	r3, [r3, #0]
 8026628:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802662c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802662e:	687b      	ldr	r3, [r7, #4]
 8026630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026632:	4618      	mov	r0, r3
 8026634:	f7fe fc54 	bl	8024ee0 <HAL_DMA_GetState>
 8026638:	4603      	mov	r3, r0
 802663a:	2b01      	cmp	r3, #1
 802663c:	d017      	beq.n	802666e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 802663e:	687b      	ldr	r3, [r7, #4]
 8026640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026642:	4a33      	ldr	r2, [pc, #204]	; (8026710 <I2C_ITError+0x19c>)
 8026644:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8026646:	687b      	ldr	r3, [r7, #4]
 8026648:	2200      	movs	r2, #0
 802664a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 802664e:	687b      	ldr	r3, [r7, #4]
 8026650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026652:	4618      	mov	r0, r3
 8026654:	f7fd fad4 	bl	8023c00 <HAL_DMA_Abort_IT>
 8026658:	4603      	mov	r3, r0
 802665a:	2b00      	cmp	r3, #0
 802665c:	d04d      	beq.n	80266fa <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 802665e:	687b      	ldr	r3, [r7, #4]
 8026660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8026664:	687a      	ldr	r2, [r7, #4]
 8026666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8026668:	4610      	mov	r0, r2
 802666a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802666c:	e045      	b.n	80266fa <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 802666e:	6878      	ldr	r0, [r7, #4]
 8026670:	f000 f850 	bl	8026714 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8026674:	e041      	b.n	80266fa <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8026676:	687b      	ldr	r3, [r7, #4]
 8026678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802667a:	2b00      	cmp	r3, #0
 802667c:	d039      	beq.n	80266f2 <I2C_ITError+0x17e>
 802667e:	68bb      	ldr	r3, [r7, #8]
 8026680:	2b12      	cmp	r3, #18
 8026682:	d002      	beq.n	802668a <I2C_ITError+0x116>
 8026684:	68bb      	ldr	r3, [r7, #8]
 8026686:	2b22      	cmp	r3, #34	; 0x22
 8026688:	d133      	bne.n	80266f2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 802668a:	687b      	ldr	r3, [r7, #4]
 802668c:	681b      	ldr	r3, [r3, #0]
 802668e:	681b      	ldr	r3, [r3, #0]
 8026690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8026694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8026698:	d107      	bne.n	80266aa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802669a:	687b      	ldr	r3, [r7, #4]
 802669c:	681b      	ldr	r3, [r3, #0]
 802669e:	681a      	ldr	r2, [r3, #0]
 80266a0:	687b      	ldr	r3, [r7, #4]
 80266a2:	681b      	ldr	r3, [r3, #0]
 80266a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80266a8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80266aa:	687b      	ldr	r3, [r7, #4]
 80266ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80266ae:	4618      	mov	r0, r3
 80266b0:	f7fe fc16 	bl	8024ee0 <HAL_DMA_GetState>
 80266b4:	4603      	mov	r3, r0
 80266b6:	2b01      	cmp	r3, #1
 80266b8:	d017      	beq.n	80266ea <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80266ba:	687b      	ldr	r3, [r7, #4]
 80266bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80266be:	4a14      	ldr	r2, [pc, #80]	; (8026710 <I2C_ITError+0x19c>)
 80266c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80266c2:	687b      	ldr	r3, [r7, #4]
 80266c4:	2200      	movs	r2, #0
 80266c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80266ca:	687b      	ldr	r3, [r7, #4]
 80266cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80266ce:	4618      	mov	r0, r3
 80266d0:	f7fd fa96 	bl	8023c00 <HAL_DMA_Abort_IT>
 80266d4:	4603      	mov	r3, r0
 80266d6:	2b00      	cmp	r3, #0
 80266d8:	d011      	beq.n	80266fe <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80266da:	687b      	ldr	r3, [r7, #4]
 80266dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80266de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80266e0:	687a      	ldr	r2, [r7, #4]
 80266e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80266e4:	4610      	mov	r0, r2
 80266e6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80266e8:	e009      	b.n	80266fe <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80266ea:	6878      	ldr	r0, [r7, #4]
 80266ec:	f000 f812 	bl	8026714 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80266f0:	e005      	b.n	80266fe <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80266f2:	6878      	ldr	r0, [r7, #4]
 80266f4:	f000 f80e 	bl	8026714 <I2C_TreatErrorCallback>
  }
}
 80266f8:	e002      	b.n	8026700 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80266fa:	bf00      	nop
 80266fc:	e000      	b.n	8026700 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80266fe:	bf00      	nop
}
 8026700:	bf00      	nop
 8026702:	3710      	adds	r7, #16
 8026704:	46bd      	mov	sp, r7
 8026706:	bd80      	pop	{r7, pc}
 8026708:	ffff0000 	.word	0xffff0000
 802670c:	08025d0f 	.word	0x08025d0f
 8026710:	080267ab 	.word	0x080267ab

08026714 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8026714:	b580      	push	{r7, lr}
 8026716:	b082      	sub	sp, #8
 8026718:	af00      	add	r7, sp, #0
 802671a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 802671c:	687b      	ldr	r3, [r7, #4]
 802671e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026722:	b2db      	uxtb	r3, r3
 8026724:	2b60      	cmp	r3, #96	; 0x60
 8026726:	d10e      	bne.n	8026746 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8026728:	687b      	ldr	r3, [r7, #4]
 802672a:	2220      	movs	r2, #32
 802672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8026730:	687b      	ldr	r3, [r7, #4]
 8026732:	2200      	movs	r2, #0
 8026734:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8026736:	687b      	ldr	r3, [r7, #4]
 8026738:	2200      	movs	r2, #0
 802673a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 802673e:	6878      	ldr	r0, [r7, #4]
 8026740:	f7ff fadb 	bl	8025cfa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8026744:	e009      	b.n	802675a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8026746:	687b      	ldr	r3, [r7, #4]
 8026748:	2200      	movs	r2, #0
 802674a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802674c:	687b      	ldr	r3, [r7, #4]
 802674e:	2200      	movs	r2, #0
 8026750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8026754:	6878      	ldr	r0, [r7, #4]
 8026756:	f7ff fac6 	bl	8025ce6 <HAL_I2C_ErrorCallback>
}
 802675a:	bf00      	nop
 802675c:	3708      	adds	r7, #8
 802675e:	46bd      	mov	sp, r7
 8026760:	bd80      	pop	{r7, pc}

08026762 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8026762:	b480      	push	{r7}
 8026764:	b083      	sub	sp, #12
 8026766:	af00      	add	r7, sp, #0
 8026768:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 802676a:	687b      	ldr	r3, [r7, #4]
 802676c:	681b      	ldr	r3, [r3, #0]
 802676e:	699b      	ldr	r3, [r3, #24]
 8026770:	f003 0302 	and.w	r3, r3, #2
 8026774:	2b02      	cmp	r3, #2
 8026776:	d103      	bne.n	8026780 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8026778:	687b      	ldr	r3, [r7, #4]
 802677a:	681b      	ldr	r3, [r3, #0]
 802677c:	2200      	movs	r2, #0
 802677e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8026780:	687b      	ldr	r3, [r7, #4]
 8026782:	681b      	ldr	r3, [r3, #0]
 8026784:	699b      	ldr	r3, [r3, #24]
 8026786:	f003 0301 	and.w	r3, r3, #1
 802678a:	2b01      	cmp	r3, #1
 802678c:	d007      	beq.n	802679e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 802678e:	687b      	ldr	r3, [r7, #4]
 8026790:	681b      	ldr	r3, [r3, #0]
 8026792:	699a      	ldr	r2, [r3, #24]
 8026794:	687b      	ldr	r3, [r7, #4]
 8026796:	681b      	ldr	r3, [r3, #0]
 8026798:	f042 0201 	orr.w	r2, r2, #1
 802679c:	619a      	str	r2, [r3, #24]
  }
}
 802679e:	bf00      	nop
 80267a0:	370c      	adds	r7, #12
 80267a2:	46bd      	mov	sp, r7
 80267a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267a8:	4770      	bx	lr

080267aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80267aa:	b580      	push	{r7, lr}
 80267ac:	b084      	sub	sp, #16
 80267ae:	af00      	add	r7, sp, #0
 80267b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80267b2:	687b      	ldr	r3, [r7, #4]
 80267b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80267b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80267b8:	68fb      	ldr	r3, [r7, #12]
 80267ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80267bc:	2b00      	cmp	r3, #0
 80267be:	d003      	beq.n	80267c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80267c0:	68fb      	ldr	r3, [r7, #12]
 80267c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80267c4:	2200      	movs	r2, #0
 80267c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80267c8:	68fb      	ldr	r3, [r7, #12]
 80267ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80267cc:	2b00      	cmp	r3, #0
 80267ce:	d003      	beq.n	80267d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80267d0:	68fb      	ldr	r3, [r7, #12]
 80267d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80267d4:	2200      	movs	r2, #0
 80267d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80267d8:	68f8      	ldr	r0, [r7, #12]
 80267da:	f7ff ff9b 	bl	8026714 <I2C_TreatErrorCallback>
}
 80267de:	bf00      	nop
 80267e0:	3710      	adds	r7, #16
 80267e2:	46bd      	mov	sp, r7
 80267e4:	bd80      	pop	{r7, pc}

080267e6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80267e6:	b480      	push	{r7}
 80267e8:	b085      	sub	sp, #20
 80267ea:	af00      	add	r7, sp, #0
 80267ec:	6078      	str	r0, [r7, #4]
 80267ee:	460b      	mov	r3, r1
 80267f0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80267f2:	2300      	movs	r3, #0
 80267f4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80267f6:	887b      	ldrh	r3, [r7, #2]
 80267f8:	f003 0301 	and.w	r3, r3, #1
 80267fc:	2b00      	cmp	r3, #0
 80267fe:	d00f      	beq.n	8026820 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8026800:	68fb      	ldr	r3, [r7, #12]
 8026802:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8026806:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8026808:	687b      	ldr	r3, [r7, #4]
 802680a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802680e:	b2db      	uxtb	r3, r3
 8026810:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8026814:	2b28      	cmp	r3, #40	; 0x28
 8026816:	d003      	beq.n	8026820 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8026818:	68fb      	ldr	r3, [r7, #12]
 802681a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802681e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8026820:	887b      	ldrh	r3, [r7, #2]
 8026822:	f003 0302 	and.w	r3, r3, #2
 8026826:	2b00      	cmp	r3, #0
 8026828:	d00f      	beq.n	802684a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 802682a:	68fb      	ldr	r3, [r7, #12]
 802682c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8026830:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8026832:	687b      	ldr	r3, [r7, #4]
 8026834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026838:	b2db      	uxtb	r3, r3
 802683a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802683e:	2b28      	cmp	r3, #40	; 0x28
 8026840:	d003      	beq.n	802684a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8026842:	68fb      	ldr	r3, [r7, #12]
 8026844:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8026848:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 802684a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802684e:	2b00      	cmp	r3, #0
 8026850:	da03      	bge.n	802685a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8026852:	68fb      	ldr	r3, [r7, #12]
 8026854:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8026858:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 802685a:	887b      	ldrh	r3, [r7, #2]
 802685c:	2b10      	cmp	r3, #16
 802685e:	d103      	bne.n	8026868 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8026860:	68fb      	ldr	r3, [r7, #12]
 8026862:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8026866:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8026868:	887b      	ldrh	r3, [r7, #2]
 802686a:	2b20      	cmp	r3, #32
 802686c:	d103      	bne.n	8026876 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 802686e:	68fb      	ldr	r3, [r7, #12]
 8026870:	f043 0320 	orr.w	r3, r3, #32
 8026874:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8026876:	887b      	ldrh	r3, [r7, #2]
 8026878:	2b40      	cmp	r3, #64	; 0x40
 802687a:	d103      	bne.n	8026884 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 802687c:	68fb      	ldr	r3, [r7, #12]
 802687e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026882:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8026884:	687b      	ldr	r3, [r7, #4]
 8026886:	681b      	ldr	r3, [r3, #0]
 8026888:	6819      	ldr	r1, [r3, #0]
 802688a:	68fb      	ldr	r3, [r7, #12]
 802688c:	43da      	mvns	r2, r3
 802688e:	687b      	ldr	r3, [r7, #4]
 8026890:	681b      	ldr	r3, [r3, #0]
 8026892:	400a      	ands	r2, r1
 8026894:	601a      	str	r2, [r3, #0]
}
 8026896:	bf00      	nop
 8026898:	3714      	adds	r7, #20
 802689a:	46bd      	mov	sp, r7
 802689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268a0:	4770      	bx	lr

080268a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80268a2:	b480      	push	{r7}
 80268a4:	b083      	sub	sp, #12
 80268a6:	af00      	add	r7, sp, #0
 80268a8:	6078      	str	r0, [r7, #4]
 80268aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80268ac:	687b      	ldr	r3, [r7, #4]
 80268ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80268b2:	b2db      	uxtb	r3, r3
 80268b4:	2b20      	cmp	r3, #32
 80268b6:	d138      	bne.n	802692a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80268b8:	687b      	ldr	r3, [r7, #4]
 80268ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80268be:	2b01      	cmp	r3, #1
 80268c0:	d101      	bne.n	80268c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80268c2:	2302      	movs	r3, #2
 80268c4:	e032      	b.n	802692c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80268c6:	687b      	ldr	r3, [r7, #4]
 80268c8:	2201      	movs	r2, #1
 80268ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80268ce:	687b      	ldr	r3, [r7, #4]
 80268d0:	2224      	movs	r2, #36	; 0x24
 80268d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80268d6:	687b      	ldr	r3, [r7, #4]
 80268d8:	681b      	ldr	r3, [r3, #0]
 80268da:	681a      	ldr	r2, [r3, #0]
 80268dc:	687b      	ldr	r3, [r7, #4]
 80268de:	681b      	ldr	r3, [r3, #0]
 80268e0:	f022 0201 	bic.w	r2, r2, #1
 80268e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80268e6:	687b      	ldr	r3, [r7, #4]
 80268e8:	681b      	ldr	r3, [r3, #0]
 80268ea:	681a      	ldr	r2, [r3, #0]
 80268ec:	687b      	ldr	r3, [r7, #4]
 80268ee:	681b      	ldr	r3, [r3, #0]
 80268f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80268f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80268f6:	687b      	ldr	r3, [r7, #4]
 80268f8:	681b      	ldr	r3, [r3, #0]
 80268fa:	6819      	ldr	r1, [r3, #0]
 80268fc:	687b      	ldr	r3, [r7, #4]
 80268fe:	681b      	ldr	r3, [r3, #0]
 8026900:	683a      	ldr	r2, [r7, #0]
 8026902:	430a      	orrs	r2, r1
 8026904:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8026906:	687b      	ldr	r3, [r7, #4]
 8026908:	681b      	ldr	r3, [r3, #0]
 802690a:	681a      	ldr	r2, [r3, #0]
 802690c:	687b      	ldr	r3, [r7, #4]
 802690e:	681b      	ldr	r3, [r3, #0]
 8026910:	f042 0201 	orr.w	r2, r2, #1
 8026914:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026916:	687b      	ldr	r3, [r7, #4]
 8026918:	2220      	movs	r2, #32
 802691a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802691e:	687b      	ldr	r3, [r7, #4]
 8026920:	2200      	movs	r2, #0
 8026922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8026926:	2300      	movs	r3, #0
 8026928:	e000      	b.n	802692c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 802692a:	2302      	movs	r3, #2
  }
}
 802692c:	4618      	mov	r0, r3
 802692e:	370c      	adds	r7, #12
 8026930:	46bd      	mov	sp, r7
 8026932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026936:	4770      	bx	lr

08026938 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8026938:	b480      	push	{r7}
 802693a:	b085      	sub	sp, #20
 802693c:	af00      	add	r7, sp, #0
 802693e:	6078      	str	r0, [r7, #4]
 8026940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026942:	687b      	ldr	r3, [r7, #4]
 8026944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026948:	b2db      	uxtb	r3, r3
 802694a:	2b20      	cmp	r3, #32
 802694c:	d139      	bne.n	80269c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802694e:	687b      	ldr	r3, [r7, #4]
 8026950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8026954:	2b01      	cmp	r3, #1
 8026956:	d101      	bne.n	802695c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8026958:	2302      	movs	r3, #2
 802695a:	e033      	b.n	80269c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 802695c:	687b      	ldr	r3, [r7, #4]
 802695e:	2201      	movs	r2, #1
 8026960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8026964:	687b      	ldr	r3, [r7, #4]
 8026966:	2224      	movs	r2, #36	; 0x24
 8026968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802696c:	687b      	ldr	r3, [r7, #4]
 802696e:	681b      	ldr	r3, [r3, #0]
 8026970:	681a      	ldr	r2, [r3, #0]
 8026972:	687b      	ldr	r3, [r7, #4]
 8026974:	681b      	ldr	r3, [r3, #0]
 8026976:	f022 0201 	bic.w	r2, r2, #1
 802697a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 802697c:	687b      	ldr	r3, [r7, #4]
 802697e:	681b      	ldr	r3, [r3, #0]
 8026980:	681b      	ldr	r3, [r3, #0]
 8026982:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8026984:	68fb      	ldr	r3, [r7, #12]
 8026986:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 802698a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 802698c:	683b      	ldr	r3, [r7, #0]
 802698e:	021b      	lsls	r3, r3, #8
 8026990:	68fa      	ldr	r2, [r7, #12]
 8026992:	4313      	orrs	r3, r2
 8026994:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8026996:	687b      	ldr	r3, [r7, #4]
 8026998:	681b      	ldr	r3, [r3, #0]
 802699a:	68fa      	ldr	r2, [r7, #12]
 802699c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802699e:	687b      	ldr	r3, [r7, #4]
 80269a0:	681b      	ldr	r3, [r3, #0]
 80269a2:	681a      	ldr	r2, [r3, #0]
 80269a4:	687b      	ldr	r3, [r7, #4]
 80269a6:	681b      	ldr	r3, [r3, #0]
 80269a8:	f042 0201 	orr.w	r2, r2, #1
 80269ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80269ae:	687b      	ldr	r3, [r7, #4]
 80269b0:	2220      	movs	r2, #32
 80269b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80269b6:	687b      	ldr	r3, [r7, #4]
 80269b8:	2200      	movs	r2, #0
 80269ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80269be:	2300      	movs	r3, #0
 80269c0:	e000      	b.n	80269c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80269c2:	2302      	movs	r3, #2
  }
}
 80269c4:	4618      	mov	r0, r3
 80269c6:	3714      	adds	r7, #20
 80269c8:	46bd      	mov	sp, r7
 80269ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269ce:	4770      	bx	lr

080269d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80269d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80269d2:	b08f      	sub	sp, #60	; 0x3c
 80269d4:	af0a      	add	r7, sp, #40	; 0x28
 80269d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80269d8:	687b      	ldr	r3, [r7, #4]
 80269da:	2b00      	cmp	r3, #0
 80269dc:	d101      	bne.n	80269e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80269de:	2301      	movs	r3, #1
 80269e0:	e116      	b.n	8026c10 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80269e2:	687b      	ldr	r3, [r7, #4]
 80269e4:	681b      	ldr	r3, [r3, #0]
 80269e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80269e8:	687b      	ldr	r3, [r7, #4]
 80269ea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80269ee:	b2db      	uxtb	r3, r3
 80269f0:	2b00      	cmp	r3, #0
 80269f2:	d106      	bne.n	8026a02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80269f4:	687b      	ldr	r3, [r7, #4]
 80269f6:	2200      	movs	r2, #0
 80269f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80269fc:	6878      	ldr	r0, [r7, #4]
 80269fe:	f00d ff29 	bl	8034854 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8026a02:	687b      	ldr	r3, [r7, #4]
 8026a04:	2203      	movs	r2, #3
 8026a06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8026a0a:	68bb      	ldr	r3, [r7, #8]
 8026a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026a12:	2b00      	cmp	r3, #0
 8026a14:	d102      	bne.n	8026a1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8026a16:	687b      	ldr	r3, [r7, #4]
 8026a18:	2200      	movs	r2, #0
 8026a1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8026a1c:	687b      	ldr	r3, [r7, #4]
 8026a1e:	681b      	ldr	r3, [r3, #0]
 8026a20:	4618      	mov	r0, r3
 8026a22:	f008 fc0e 	bl	802f242 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8026a26:	687b      	ldr	r3, [r7, #4]
 8026a28:	681b      	ldr	r3, [r3, #0]
 8026a2a:	603b      	str	r3, [r7, #0]
 8026a2c:	687e      	ldr	r6, [r7, #4]
 8026a2e:	466d      	mov	r5, sp
 8026a30:	f106 0410 	add.w	r4, r6, #16
 8026a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026a3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026a40:	e885 0003 	stmia.w	r5, {r0, r1}
 8026a44:	1d33      	adds	r3, r6, #4
 8026a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8026a48:	6838      	ldr	r0, [r7, #0]
 8026a4a:	f008 fad9 	bl	802f000 <USB_CoreInit>
 8026a4e:	4603      	mov	r3, r0
 8026a50:	2b00      	cmp	r3, #0
 8026a52:	d005      	beq.n	8026a60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8026a54:	687b      	ldr	r3, [r7, #4]
 8026a56:	2202      	movs	r2, #2
 8026a58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8026a5c:	2301      	movs	r3, #1
 8026a5e:	e0d7      	b.n	8026c10 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8026a60:	687b      	ldr	r3, [r7, #4]
 8026a62:	681b      	ldr	r3, [r3, #0]
 8026a64:	2100      	movs	r1, #0
 8026a66:	4618      	mov	r0, r3
 8026a68:	f008 fbfc 	bl	802f264 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026a6c:	2300      	movs	r3, #0
 8026a6e:	73fb      	strb	r3, [r7, #15]
 8026a70:	e04a      	b.n	8026b08 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8026a72:	7bfa      	ldrb	r2, [r7, #15]
 8026a74:	6879      	ldr	r1, [r7, #4]
 8026a76:	4613      	mov	r3, r2
 8026a78:	00db      	lsls	r3, r3, #3
 8026a7a:	4413      	add	r3, r2
 8026a7c:	009b      	lsls	r3, r3, #2
 8026a7e:	440b      	add	r3, r1
 8026a80:	333d      	adds	r3, #61	; 0x3d
 8026a82:	2201      	movs	r2, #1
 8026a84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8026a86:	7bfa      	ldrb	r2, [r7, #15]
 8026a88:	6879      	ldr	r1, [r7, #4]
 8026a8a:	4613      	mov	r3, r2
 8026a8c:	00db      	lsls	r3, r3, #3
 8026a8e:	4413      	add	r3, r2
 8026a90:	009b      	lsls	r3, r3, #2
 8026a92:	440b      	add	r3, r1
 8026a94:	333c      	adds	r3, #60	; 0x3c
 8026a96:	7bfa      	ldrb	r2, [r7, #15]
 8026a98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8026a9a:	7bfa      	ldrb	r2, [r7, #15]
 8026a9c:	7bfb      	ldrb	r3, [r7, #15]
 8026a9e:	b298      	uxth	r0, r3
 8026aa0:	6879      	ldr	r1, [r7, #4]
 8026aa2:	4613      	mov	r3, r2
 8026aa4:	00db      	lsls	r3, r3, #3
 8026aa6:	4413      	add	r3, r2
 8026aa8:	009b      	lsls	r3, r3, #2
 8026aaa:	440b      	add	r3, r1
 8026aac:	3344      	adds	r3, #68	; 0x44
 8026aae:	4602      	mov	r2, r0
 8026ab0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8026ab2:	7bfa      	ldrb	r2, [r7, #15]
 8026ab4:	6879      	ldr	r1, [r7, #4]
 8026ab6:	4613      	mov	r3, r2
 8026ab8:	00db      	lsls	r3, r3, #3
 8026aba:	4413      	add	r3, r2
 8026abc:	009b      	lsls	r3, r3, #2
 8026abe:	440b      	add	r3, r1
 8026ac0:	3340      	adds	r3, #64	; 0x40
 8026ac2:	2200      	movs	r2, #0
 8026ac4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8026ac6:	7bfa      	ldrb	r2, [r7, #15]
 8026ac8:	6879      	ldr	r1, [r7, #4]
 8026aca:	4613      	mov	r3, r2
 8026acc:	00db      	lsls	r3, r3, #3
 8026ace:	4413      	add	r3, r2
 8026ad0:	009b      	lsls	r3, r3, #2
 8026ad2:	440b      	add	r3, r1
 8026ad4:	3348      	adds	r3, #72	; 0x48
 8026ad6:	2200      	movs	r2, #0
 8026ad8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8026ada:	7bfa      	ldrb	r2, [r7, #15]
 8026adc:	6879      	ldr	r1, [r7, #4]
 8026ade:	4613      	mov	r3, r2
 8026ae0:	00db      	lsls	r3, r3, #3
 8026ae2:	4413      	add	r3, r2
 8026ae4:	009b      	lsls	r3, r3, #2
 8026ae6:	440b      	add	r3, r1
 8026ae8:	334c      	adds	r3, #76	; 0x4c
 8026aea:	2200      	movs	r2, #0
 8026aec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8026aee:	7bfa      	ldrb	r2, [r7, #15]
 8026af0:	6879      	ldr	r1, [r7, #4]
 8026af2:	4613      	mov	r3, r2
 8026af4:	00db      	lsls	r3, r3, #3
 8026af6:	4413      	add	r3, r2
 8026af8:	009b      	lsls	r3, r3, #2
 8026afa:	440b      	add	r3, r1
 8026afc:	3354      	adds	r3, #84	; 0x54
 8026afe:	2200      	movs	r2, #0
 8026b00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026b02:	7bfb      	ldrb	r3, [r7, #15]
 8026b04:	3301      	adds	r3, #1
 8026b06:	73fb      	strb	r3, [r7, #15]
 8026b08:	7bfa      	ldrb	r2, [r7, #15]
 8026b0a:	687b      	ldr	r3, [r7, #4]
 8026b0c:	685b      	ldr	r3, [r3, #4]
 8026b0e:	429a      	cmp	r2, r3
 8026b10:	d3af      	bcc.n	8026a72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026b12:	2300      	movs	r3, #0
 8026b14:	73fb      	strb	r3, [r7, #15]
 8026b16:	e044      	b.n	8026ba2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8026b18:	7bfa      	ldrb	r2, [r7, #15]
 8026b1a:	6879      	ldr	r1, [r7, #4]
 8026b1c:	4613      	mov	r3, r2
 8026b1e:	00db      	lsls	r3, r3, #3
 8026b20:	4413      	add	r3, r2
 8026b22:	009b      	lsls	r3, r3, #2
 8026b24:	440b      	add	r3, r1
 8026b26:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8026b2a:	2200      	movs	r2, #0
 8026b2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8026b2e:	7bfa      	ldrb	r2, [r7, #15]
 8026b30:	6879      	ldr	r1, [r7, #4]
 8026b32:	4613      	mov	r3, r2
 8026b34:	00db      	lsls	r3, r3, #3
 8026b36:	4413      	add	r3, r2
 8026b38:	009b      	lsls	r3, r3, #2
 8026b3a:	440b      	add	r3, r1
 8026b3c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8026b40:	7bfa      	ldrb	r2, [r7, #15]
 8026b42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8026b44:	7bfa      	ldrb	r2, [r7, #15]
 8026b46:	6879      	ldr	r1, [r7, #4]
 8026b48:	4613      	mov	r3, r2
 8026b4a:	00db      	lsls	r3, r3, #3
 8026b4c:	4413      	add	r3, r2
 8026b4e:	009b      	lsls	r3, r3, #2
 8026b50:	440b      	add	r3, r1
 8026b52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8026b56:	2200      	movs	r2, #0
 8026b58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8026b5a:	7bfa      	ldrb	r2, [r7, #15]
 8026b5c:	6879      	ldr	r1, [r7, #4]
 8026b5e:	4613      	mov	r3, r2
 8026b60:	00db      	lsls	r3, r3, #3
 8026b62:	4413      	add	r3, r2
 8026b64:	009b      	lsls	r3, r3, #2
 8026b66:	440b      	add	r3, r1
 8026b68:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8026b6c:	2200      	movs	r2, #0
 8026b6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8026b70:	7bfa      	ldrb	r2, [r7, #15]
 8026b72:	6879      	ldr	r1, [r7, #4]
 8026b74:	4613      	mov	r3, r2
 8026b76:	00db      	lsls	r3, r3, #3
 8026b78:	4413      	add	r3, r2
 8026b7a:	009b      	lsls	r3, r3, #2
 8026b7c:	440b      	add	r3, r1
 8026b7e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8026b82:	2200      	movs	r2, #0
 8026b84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8026b86:	7bfa      	ldrb	r2, [r7, #15]
 8026b88:	6879      	ldr	r1, [r7, #4]
 8026b8a:	4613      	mov	r3, r2
 8026b8c:	00db      	lsls	r3, r3, #3
 8026b8e:	4413      	add	r3, r2
 8026b90:	009b      	lsls	r3, r3, #2
 8026b92:	440b      	add	r3, r1
 8026b94:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8026b98:	2200      	movs	r2, #0
 8026b9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026b9c:	7bfb      	ldrb	r3, [r7, #15]
 8026b9e:	3301      	adds	r3, #1
 8026ba0:	73fb      	strb	r3, [r7, #15]
 8026ba2:	7bfa      	ldrb	r2, [r7, #15]
 8026ba4:	687b      	ldr	r3, [r7, #4]
 8026ba6:	685b      	ldr	r3, [r3, #4]
 8026ba8:	429a      	cmp	r2, r3
 8026baa:	d3b5      	bcc.n	8026b18 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8026bac:	687b      	ldr	r3, [r7, #4]
 8026bae:	681b      	ldr	r3, [r3, #0]
 8026bb0:	603b      	str	r3, [r7, #0]
 8026bb2:	687e      	ldr	r6, [r7, #4]
 8026bb4:	466d      	mov	r5, sp
 8026bb6:	f106 0410 	add.w	r4, r6, #16
 8026bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026bc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026bc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8026bca:	1d33      	adds	r3, r6, #4
 8026bcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8026bce:	6838      	ldr	r0, [r7, #0]
 8026bd0:	f008 fb94 	bl	802f2fc <USB_DevInit>
 8026bd4:	4603      	mov	r3, r0
 8026bd6:	2b00      	cmp	r3, #0
 8026bd8:	d005      	beq.n	8026be6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8026bda:	687b      	ldr	r3, [r7, #4]
 8026bdc:	2202      	movs	r2, #2
 8026bde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8026be2:	2301      	movs	r3, #1
 8026be4:	e014      	b.n	8026c10 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8026be6:	687b      	ldr	r3, [r7, #4]
 8026be8:	2200      	movs	r2, #0
 8026bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8026bee:	687b      	ldr	r3, [r7, #4]
 8026bf0:	2201      	movs	r2, #1
 8026bf2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8026bf6:	687b      	ldr	r3, [r7, #4]
 8026bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026bfa:	2b01      	cmp	r3, #1
 8026bfc:	d102      	bne.n	8026c04 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8026bfe:	6878      	ldr	r0, [r7, #4]
 8026c00:	f001 f98c 	bl	8027f1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8026c04:	687b      	ldr	r3, [r7, #4]
 8026c06:	681b      	ldr	r3, [r3, #0]
 8026c08:	4618      	mov	r0, r3
 8026c0a:	f009 fce2 	bl	80305d2 <USB_DevDisconnect>

  return HAL_OK;
 8026c0e:	2300      	movs	r3, #0
}
 8026c10:	4618      	mov	r0, r3
 8026c12:	3714      	adds	r7, #20
 8026c14:	46bd      	mov	sp, r7
 8026c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08026c18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8026c18:	b580      	push	{r7, lr}
 8026c1a:	b084      	sub	sp, #16
 8026c1c:	af00      	add	r7, sp, #0
 8026c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8026c20:	687b      	ldr	r3, [r7, #4]
 8026c22:	681b      	ldr	r3, [r3, #0]
 8026c24:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8026c26:	687b      	ldr	r3, [r7, #4]
 8026c28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8026c2c:	2b01      	cmp	r3, #1
 8026c2e:	d101      	bne.n	8026c34 <HAL_PCD_Start+0x1c>
 8026c30:	2302      	movs	r3, #2
 8026c32:	e020      	b.n	8026c76 <HAL_PCD_Start+0x5e>
 8026c34:	687b      	ldr	r3, [r7, #4]
 8026c36:	2201      	movs	r2, #1
 8026c38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8026c3c:	687b      	ldr	r3, [r7, #4]
 8026c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026c40:	2b01      	cmp	r3, #1
 8026c42:	d109      	bne.n	8026c58 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8026c44:	687b      	ldr	r3, [r7, #4]
 8026c46:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8026c48:	2b01      	cmp	r3, #1
 8026c4a:	d005      	beq.n	8026c58 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8026c4c:	68fb      	ldr	r3, [r7, #12]
 8026c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026c50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8026c54:	68fb      	ldr	r3, [r7, #12]
 8026c56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8026c58:	687b      	ldr	r3, [r7, #4]
 8026c5a:	681b      	ldr	r3, [r3, #0]
 8026c5c:	4618      	mov	r0, r3
 8026c5e:	f008 fadf 	bl	802f220 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8026c62:	687b      	ldr	r3, [r7, #4]
 8026c64:	681b      	ldr	r3, [r3, #0]
 8026c66:	4618      	mov	r0, r3
 8026c68:	f009 fc92 	bl	8030590 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8026c6c:	687b      	ldr	r3, [r7, #4]
 8026c6e:	2200      	movs	r2, #0
 8026c70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8026c74:	2300      	movs	r3, #0
}
 8026c76:	4618      	mov	r0, r3
 8026c78:	3710      	adds	r7, #16
 8026c7a:	46bd      	mov	sp, r7
 8026c7c:	bd80      	pop	{r7, pc}

08026c7e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8026c7e:	b590      	push	{r4, r7, lr}
 8026c80:	b08d      	sub	sp, #52	; 0x34
 8026c82:	af00      	add	r7, sp, #0
 8026c84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8026c86:	687b      	ldr	r3, [r7, #4]
 8026c88:	681b      	ldr	r3, [r3, #0]
 8026c8a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026c8c:	6a3b      	ldr	r3, [r7, #32]
 8026c8e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8026c90:	687b      	ldr	r3, [r7, #4]
 8026c92:	681b      	ldr	r3, [r3, #0]
 8026c94:	4618      	mov	r0, r3
 8026c96:	f009 fd50 	bl	803073a <USB_GetMode>
 8026c9a:	4603      	mov	r3, r0
 8026c9c:	2b00      	cmp	r3, #0
 8026c9e:	f040 84b7 	bne.w	8027610 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8026ca2:	687b      	ldr	r3, [r7, #4]
 8026ca4:	681b      	ldr	r3, [r3, #0]
 8026ca6:	4618      	mov	r0, r3
 8026ca8:	f009 fcb4 	bl	8030614 <USB_ReadInterrupts>
 8026cac:	4603      	mov	r3, r0
 8026cae:	2b00      	cmp	r3, #0
 8026cb0:	f000 84ad 	beq.w	802760e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8026cb4:	69fb      	ldr	r3, [r7, #28]
 8026cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026cba:	689b      	ldr	r3, [r3, #8]
 8026cbc:	0a1b      	lsrs	r3, r3, #8
 8026cbe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8026cc2:	687b      	ldr	r3, [r7, #4]
 8026cc4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8026cc8:	687b      	ldr	r3, [r7, #4]
 8026cca:	681b      	ldr	r3, [r3, #0]
 8026ccc:	4618      	mov	r0, r3
 8026cce:	f009 fca1 	bl	8030614 <USB_ReadInterrupts>
 8026cd2:	4603      	mov	r3, r0
 8026cd4:	f003 0302 	and.w	r3, r3, #2
 8026cd8:	2b02      	cmp	r3, #2
 8026cda:	d107      	bne.n	8026cec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8026cdc:	687b      	ldr	r3, [r7, #4]
 8026cde:	681b      	ldr	r3, [r3, #0]
 8026ce0:	695a      	ldr	r2, [r3, #20]
 8026ce2:	687b      	ldr	r3, [r7, #4]
 8026ce4:	681b      	ldr	r3, [r3, #0]
 8026ce6:	f002 0202 	and.w	r2, r2, #2
 8026cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8026cec:	687b      	ldr	r3, [r7, #4]
 8026cee:	681b      	ldr	r3, [r3, #0]
 8026cf0:	4618      	mov	r0, r3
 8026cf2:	f009 fc8f 	bl	8030614 <USB_ReadInterrupts>
 8026cf6:	4603      	mov	r3, r0
 8026cf8:	f003 0310 	and.w	r3, r3, #16
 8026cfc:	2b10      	cmp	r3, #16
 8026cfe:	d161      	bne.n	8026dc4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8026d00:	687b      	ldr	r3, [r7, #4]
 8026d02:	681b      	ldr	r3, [r3, #0]
 8026d04:	699a      	ldr	r2, [r3, #24]
 8026d06:	687b      	ldr	r3, [r7, #4]
 8026d08:	681b      	ldr	r3, [r3, #0]
 8026d0a:	f022 0210 	bic.w	r2, r2, #16
 8026d0e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8026d10:	6a3b      	ldr	r3, [r7, #32]
 8026d12:	6a1b      	ldr	r3, [r3, #32]
 8026d14:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8026d16:	69bb      	ldr	r3, [r7, #24]
 8026d18:	f003 020f 	and.w	r2, r3, #15
 8026d1c:	4613      	mov	r3, r2
 8026d1e:	00db      	lsls	r3, r3, #3
 8026d20:	4413      	add	r3, r2
 8026d22:	009b      	lsls	r3, r3, #2
 8026d24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8026d28:	687a      	ldr	r2, [r7, #4]
 8026d2a:	4413      	add	r3, r2
 8026d2c:	3304      	adds	r3, #4
 8026d2e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8026d30:	69bb      	ldr	r3, [r7, #24]
 8026d32:	0c5b      	lsrs	r3, r3, #17
 8026d34:	f003 030f 	and.w	r3, r3, #15
 8026d38:	2b02      	cmp	r3, #2
 8026d3a:	d124      	bne.n	8026d86 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8026d3c:	69ba      	ldr	r2, [r7, #24]
 8026d3e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8026d42:	4013      	ands	r3, r2
 8026d44:	2b00      	cmp	r3, #0
 8026d46:	d035      	beq.n	8026db4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8026d48:	697b      	ldr	r3, [r7, #20]
 8026d4a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8026d4c:	69bb      	ldr	r3, [r7, #24]
 8026d4e:	091b      	lsrs	r3, r3, #4
 8026d50:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8026d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026d56:	b29b      	uxth	r3, r3
 8026d58:	461a      	mov	r2, r3
 8026d5a:	6a38      	ldr	r0, [r7, #32]
 8026d5c:	f009 fac6 	bl	80302ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8026d60:	697b      	ldr	r3, [r7, #20]
 8026d62:	691a      	ldr	r2, [r3, #16]
 8026d64:	69bb      	ldr	r3, [r7, #24]
 8026d66:	091b      	lsrs	r3, r3, #4
 8026d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026d6c:	441a      	add	r2, r3
 8026d6e:	697b      	ldr	r3, [r7, #20]
 8026d70:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8026d72:	697b      	ldr	r3, [r7, #20]
 8026d74:	6a1a      	ldr	r2, [r3, #32]
 8026d76:	69bb      	ldr	r3, [r7, #24]
 8026d78:	091b      	lsrs	r3, r3, #4
 8026d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026d7e:	441a      	add	r2, r3
 8026d80:	697b      	ldr	r3, [r7, #20]
 8026d82:	621a      	str	r2, [r3, #32]
 8026d84:	e016      	b.n	8026db4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8026d86:	69bb      	ldr	r3, [r7, #24]
 8026d88:	0c5b      	lsrs	r3, r3, #17
 8026d8a:	f003 030f 	and.w	r3, r3, #15
 8026d8e:	2b06      	cmp	r3, #6
 8026d90:	d110      	bne.n	8026db4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8026d92:	687b      	ldr	r3, [r7, #4]
 8026d94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8026d98:	2208      	movs	r2, #8
 8026d9a:	4619      	mov	r1, r3
 8026d9c:	6a38      	ldr	r0, [r7, #32]
 8026d9e:	f009 faa5 	bl	80302ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8026da2:	697b      	ldr	r3, [r7, #20]
 8026da4:	6a1a      	ldr	r2, [r3, #32]
 8026da6:	69bb      	ldr	r3, [r7, #24]
 8026da8:	091b      	lsrs	r3, r3, #4
 8026daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026dae:	441a      	add	r2, r3
 8026db0:	697b      	ldr	r3, [r7, #20]
 8026db2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8026db4:	687b      	ldr	r3, [r7, #4]
 8026db6:	681b      	ldr	r3, [r3, #0]
 8026db8:	699a      	ldr	r2, [r3, #24]
 8026dba:	687b      	ldr	r3, [r7, #4]
 8026dbc:	681b      	ldr	r3, [r3, #0]
 8026dbe:	f042 0210 	orr.w	r2, r2, #16
 8026dc2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8026dc4:	687b      	ldr	r3, [r7, #4]
 8026dc6:	681b      	ldr	r3, [r3, #0]
 8026dc8:	4618      	mov	r0, r3
 8026dca:	f009 fc23 	bl	8030614 <USB_ReadInterrupts>
 8026dce:	4603      	mov	r3, r0
 8026dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8026dd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8026dd8:	f040 80a7 	bne.w	8026f2a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8026ddc:	2300      	movs	r3, #0
 8026dde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8026de0:	687b      	ldr	r3, [r7, #4]
 8026de2:	681b      	ldr	r3, [r3, #0]
 8026de4:	4618      	mov	r0, r3
 8026de6:	f009 fc28 	bl	803063a <USB_ReadDevAllOutEpInterrupt>
 8026dea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8026dec:	e099      	b.n	8026f22 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8026dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026df0:	f003 0301 	and.w	r3, r3, #1
 8026df4:	2b00      	cmp	r3, #0
 8026df6:	f000 808e 	beq.w	8026f16 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8026dfa:	687b      	ldr	r3, [r7, #4]
 8026dfc:	681b      	ldr	r3, [r3, #0]
 8026dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026e00:	b2d2      	uxtb	r2, r2
 8026e02:	4611      	mov	r1, r2
 8026e04:	4618      	mov	r0, r3
 8026e06:	f009 fc4c 	bl	80306a2 <USB_ReadDevOutEPInterrupt>
 8026e0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8026e0c:	693b      	ldr	r3, [r7, #16]
 8026e0e:	f003 0301 	and.w	r3, r3, #1
 8026e12:	2b00      	cmp	r3, #0
 8026e14:	d00c      	beq.n	8026e30 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8026e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026e18:	015a      	lsls	r2, r3, #5
 8026e1a:	69fb      	ldr	r3, [r7, #28]
 8026e1c:	4413      	add	r3, r2
 8026e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026e22:	461a      	mov	r2, r3
 8026e24:	2301      	movs	r3, #1
 8026e26:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8026e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026e2a:	6878      	ldr	r0, [r7, #4]
 8026e2c:	f000 fef0 	bl	8027c10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8026e30:	693b      	ldr	r3, [r7, #16]
 8026e32:	f003 0308 	and.w	r3, r3, #8
 8026e36:	2b00      	cmp	r3, #0
 8026e38:	d00c      	beq.n	8026e54 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8026e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026e3c:	015a      	lsls	r2, r3, #5
 8026e3e:	69fb      	ldr	r3, [r7, #28]
 8026e40:	4413      	add	r3, r2
 8026e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026e46:	461a      	mov	r2, r3
 8026e48:	2308      	movs	r3, #8
 8026e4a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8026e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026e4e:	6878      	ldr	r0, [r7, #4]
 8026e50:	f000 ffc6 	bl	8027de0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8026e54:	693b      	ldr	r3, [r7, #16]
 8026e56:	f003 0310 	and.w	r3, r3, #16
 8026e5a:	2b00      	cmp	r3, #0
 8026e5c:	d008      	beq.n	8026e70 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8026e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026e60:	015a      	lsls	r2, r3, #5
 8026e62:	69fb      	ldr	r3, [r7, #28]
 8026e64:	4413      	add	r3, r2
 8026e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026e6a:	461a      	mov	r2, r3
 8026e6c:	2310      	movs	r3, #16
 8026e6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8026e70:	693b      	ldr	r3, [r7, #16]
 8026e72:	f003 0302 	and.w	r3, r3, #2
 8026e76:	2b00      	cmp	r3, #0
 8026e78:	d030      	beq.n	8026edc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8026e7a:	6a3b      	ldr	r3, [r7, #32]
 8026e7c:	695b      	ldr	r3, [r3, #20]
 8026e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026e82:	2b80      	cmp	r3, #128	; 0x80
 8026e84:	d109      	bne.n	8026e9a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8026e86:	69fb      	ldr	r3, [r7, #28]
 8026e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026e8c:	685b      	ldr	r3, [r3, #4]
 8026e8e:	69fa      	ldr	r2, [r7, #28]
 8026e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026e94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8026e98:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8026e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026e9c:	4613      	mov	r3, r2
 8026e9e:	00db      	lsls	r3, r3, #3
 8026ea0:	4413      	add	r3, r2
 8026ea2:	009b      	lsls	r3, r3, #2
 8026ea4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8026ea8:	687a      	ldr	r2, [r7, #4]
 8026eaa:	4413      	add	r3, r2
 8026eac:	3304      	adds	r3, #4
 8026eae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8026eb0:	697b      	ldr	r3, [r7, #20]
 8026eb2:	78db      	ldrb	r3, [r3, #3]
 8026eb4:	2b01      	cmp	r3, #1
 8026eb6:	d108      	bne.n	8026eca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8026eb8:	697b      	ldr	r3, [r7, #20]
 8026eba:	2200      	movs	r2, #0
 8026ebc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8026ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026ec0:	b2db      	uxtb	r3, r3
 8026ec2:	4619      	mov	r1, r3
 8026ec4:	6878      	ldr	r0, [r7, #4]
 8026ec6:	f00d fdf1 	bl	8034aac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8026eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026ecc:	015a      	lsls	r2, r3, #5
 8026ece:	69fb      	ldr	r3, [r7, #28]
 8026ed0:	4413      	add	r3, r2
 8026ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026ed6:	461a      	mov	r2, r3
 8026ed8:	2302      	movs	r3, #2
 8026eda:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8026edc:	693b      	ldr	r3, [r7, #16]
 8026ede:	f003 0320 	and.w	r3, r3, #32
 8026ee2:	2b00      	cmp	r3, #0
 8026ee4:	d008      	beq.n	8026ef8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8026ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026ee8:	015a      	lsls	r2, r3, #5
 8026eea:	69fb      	ldr	r3, [r7, #28]
 8026eec:	4413      	add	r3, r2
 8026eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026ef2:	461a      	mov	r2, r3
 8026ef4:	2320      	movs	r3, #32
 8026ef6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8026ef8:	693b      	ldr	r3, [r7, #16]
 8026efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026efe:	2b00      	cmp	r3, #0
 8026f00:	d009      	beq.n	8026f16 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8026f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026f04:	015a      	lsls	r2, r3, #5
 8026f06:	69fb      	ldr	r3, [r7, #28]
 8026f08:	4413      	add	r3, r2
 8026f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026f0e:	461a      	mov	r2, r3
 8026f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8026f14:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8026f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026f18:	3301      	adds	r3, #1
 8026f1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8026f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026f1e:	085b      	lsrs	r3, r3, #1
 8026f20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8026f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026f24:	2b00      	cmp	r3, #0
 8026f26:	f47f af62 	bne.w	8026dee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8026f2a:	687b      	ldr	r3, [r7, #4]
 8026f2c:	681b      	ldr	r3, [r3, #0]
 8026f2e:	4618      	mov	r0, r3
 8026f30:	f009 fb70 	bl	8030614 <USB_ReadInterrupts>
 8026f34:	4603      	mov	r3, r0
 8026f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8026f3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8026f3e:	f040 80db 	bne.w	80270f8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8026f42:	687b      	ldr	r3, [r7, #4]
 8026f44:	681b      	ldr	r3, [r3, #0]
 8026f46:	4618      	mov	r0, r3
 8026f48:	f009 fb91 	bl	803066e <USB_ReadDevAllInEpInterrupt>
 8026f4c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8026f4e:	2300      	movs	r3, #0
 8026f50:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8026f52:	e0cd      	b.n	80270f0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8026f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026f56:	f003 0301 	and.w	r3, r3, #1
 8026f5a:	2b00      	cmp	r3, #0
 8026f5c:	f000 80c2 	beq.w	80270e4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8026f60:	687b      	ldr	r3, [r7, #4]
 8026f62:	681b      	ldr	r3, [r3, #0]
 8026f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026f66:	b2d2      	uxtb	r2, r2
 8026f68:	4611      	mov	r1, r2
 8026f6a:	4618      	mov	r0, r3
 8026f6c:	f009 fbb7 	bl	80306de <USB_ReadDevInEPInterrupt>
 8026f70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8026f72:	693b      	ldr	r3, [r7, #16]
 8026f74:	f003 0301 	and.w	r3, r3, #1
 8026f78:	2b00      	cmp	r3, #0
 8026f7a:	d057      	beq.n	802702c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8026f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026f7e:	f003 030f 	and.w	r3, r3, #15
 8026f82:	2201      	movs	r2, #1
 8026f84:	fa02 f303 	lsl.w	r3, r2, r3
 8026f88:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8026f8a:	69fb      	ldr	r3, [r7, #28]
 8026f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026f92:	68fb      	ldr	r3, [r7, #12]
 8026f94:	43db      	mvns	r3, r3
 8026f96:	69f9      	ldr	r1, [r7, #28]
 8026f98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8026f9c:	4013      	ands	r3, r2
 8026f9e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8026fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026fa2:	015a      	lsls	r2, r3, #5
 8026fa4:	69fb      	ldr	r3, [r7, #28]
 8026fa6:	4413      	add	r3, r2
 8026fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026fac:	461a      	mov	r2, r3
 8026fae:	2301      	movs	r3, #1
 8026fb0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8026fb2:	687b      	ldr	r3, [r7, #4]
 8026fb4:	691b      	ldr	r3, [r3, #16]
 8026fb6:	2b01      	cmp	r3, #1
 8026fb8:	d132      	bne.n	8027020 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8026fba:	6879      	ldr	r1, [r7, #4]
 8026fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026fbe:	4613      	mov	r3, r2
 8026fc0:	00db      	lsls	r3, r3, #3
 8026fc2:	4413      	add	r3, r2
 8026fc4:	009b      	lsls	r3, r3, #2
 8026fc6:	440b      	add	r3, r1
 8026fc8:	334c      	adds	r3, #76	; 0x4c
 8026fca:	6819      	ldr	r1, [r3, #0]
 8026fcc:	6878      	ldr	r0, [r7, #4]
 8026fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026fd0:	4613      	mov	r3, r2
 8026fd2:	00db      	lsls	r3, r3, #3
 8026fd4:	4413      	add	r3, r2
 8026fd6:	009b      	lsls	r3, r3, #2
 8026fd8:	4403      	add	r3, r0
 8026fda:	3348      	adds	r3, #72	; 0x48
 8026fdc:	681b      	ldr	r3, [r3, #0]
 8026fde:	4419      	add	r1, r3
 8026fe0:	6878      	ldr	r0, [r7, #4]
 8026fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026fe4:	4613      	mov	r3, r2
 8026fe6:	00db      	lsls	r3, r3, #3
 8026fe8:	4413      	add	r3, r2
 8026fea:	009b      	lsls	r3, r3, #2
 8026fec:	4403      	add	r3, r0
 8026fee:	334c      	adds	r3, #76	; 0x4c
 8026ff0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8026ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026ff4:	2b00      	cmp	r3, #0
 8026ff6:	d113      	bne.n	8027020 <HAL_PCD_IRQHandler+0x3a2>
 8026ff8:	6879      	ldr	r1, [r7, #4]
 8026ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026ffc:	4613      	mov	r3, r2
 8026ffe:	00db      	lsls	r3, r3, #3
 8027000:	4413      	add	r3, r2
 8027002:	009b      	lsls	r3, r3, #2
 8027004:	440b      	add	r3, r1
 8027006:	3354      	adds	r3, #84	; 0x54
 8027008:	681b      	ldr	r3, [r3, #0]
 802700a:	2b00      	cmp	r3, #0
 802700c:	d108      	bne.n	8027020 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 802700e:	687b      	ldr	r3, [r7, #4]
 8027010:	6818      	ldr	r0, [r3, #0]
 8027012:	687b      	ldr	r3, [r7, #4]
 8027014:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8027018:	461a      	mov	r2, r3
 802701a:	2101      	movs	r1, #1
 802701c:	f009 fbc0 	bl	80307a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8027020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027022:	b2db      	uxtb	r3, r3
 8027024:	4619      	mov	r1, r3
 8027026:	6878      	ldr	r0, [r7, #4]
 8027028:	f00d fcbb 	bl	80349a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 802702c:	693b      	ldr	r3, [r7, #16]
 802702e:	f003 0308 	and.w	r3, r3, #8
 8027032:	2b00      	cmp	r3, #0
 8027034:	d008      	beq.n	8027048 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8027036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027038:	015a      	lsls	r2, r3, #5
 802703a:	69fb      	ldr	r3, [r7, #28]
 802703c:	4413      	add	r3, r2
 802703e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027042:	461a      	mov	r2, r3
 8027044:	2308      	movs	r3, #8
 8027046:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8027048:	693b      	ldr	r3, [r7, #16]
 802704a:	f003 0310 	and.w	r3, r3, #16
 802704e:	2b00      	cmp	r3, #0
 8027050:	d008      	beq.n	8027064 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8027052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027054:	015a      	lsls	r2, r3, #5
 8027056:	69fb      	ldr	r3, [r7, #28]
 8027058:	4413      	add	r3, r2
 802705a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802705e:	461a      	mov	r2, r3
 8027060:	2310      	movs	r3, #16
 8027062:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8027064:	693b      	ldr	r3, [r7, #16]
 8027066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802706a:	2b00      	cmp	r3, #0
 802706c:	d008      	beq.n	8027080 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 802706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027070:	015a      	lsls	r2, r3, #5
 8027072:	69fb      	ldr	r3, [r7, #28]
 8027074:	4413      	add	r3, r2
 8027076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802707a:	461a      	mov	r2, r3
 802707c:	2340      	movs	r3, #64	; 0x40
 802707e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8027080:	693b      	ldr	r3, [r7, #16]
 8027082:	f003 0302 	and.w	r3, r3, #2
 8027086:	2b00      	cmp	r3, #0
 8027088:	d023      	beq.n	80270d2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 802708a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802708c:	6a38      	ldr	r0, [r7, #32]
 802708e:	f008 fa93 	bl	802f5b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8027092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027094:	4613      	mov	r3, r2
 8027096:	00db      	lsls	r3, r3, #3
 8027098:	4413      	add	r3, r2
 802709a:	009b      	lsls	r3, r3, #2
 802709c:	3338      	adds	r3, #56	; 0x38
 802709e:	687a      	ldr	r2, [r7, #4]
 80270a0:	4413      	add	r3, r2
 80270a2:	3304      	adds	r3, #4
 80270a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80270a6:	697b      	ldr	r3, [r7, #20]
 80270a8:	78db      	ldrb	r3, [r3, #3]
 80270aa:	2b01      	cmp	r3, #1
 80270ac:	d108      	bne.n	80270c0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80270ae:	697b      	ldr	r3, [r7, #20]
 80270b0:	2200      	movs	r2, #0
 80270b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80270b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80270b6:	b2db      	uxtb	r3, r3
 80270b8:	4619      	mov	r1, r3
 80270ba:	6878      	ldr	r0, [r7, #4]
 80270bc:	f00d fd08 	bl	8034ad0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80270c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80270c2:	015a      	lsls	r2, r3, #5
 80270c4:	69fb      	ldr	r3, [r7, #28]
 80270c6:	4413      	add	r3, r2
 80270c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80270cc:	461a      	mov	r2, r3
 80270ce:	2302      	movs	r3, #2
 80270d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80270d2:	693b      	ldr	r3, [r7, #16]
 80270d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80270d8:	2b00      	cmp	r3, #0
 80270da:	d003      	beq.n	80270e4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80270dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80270de:	6878      	ldr	r0, [r7, #4]
 80270e0:	f000 fd08 	bl	8027af4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80270e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80270e6:	3301      	adds	r3, #1
 80270e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80270ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80270ec:	085b      	lsrs	r3, r3, #1
 80270ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80270f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80270f2:	2b00      	cmp	r3, #0
 80270f4:	f47f af2e 	bne.w	8026f54 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80270f8:	687b      	ldr	r3, [r7, #4]
 80270fa:	681b      	ldr	r3, [r3, #0]
 80270fc:	4618      	mov	r0, r3
 80270fe:	f009 fa89 	bl	8030614 <USB_ReadInterrupts>
 8027102:	4603      	mov	r3, r0
 8027104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8027108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802710c:	d122      	bne.n	8027154 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802710e:	69fb      	ldr	r3, [r7, #28]
 8027110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027114:	685b      	ldr	r3, [r3, #4]
 8027116:	69fa      	ldr	r2, [r7, #28]
 8027118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802711c:	f023 0301 	bic.w	r3, r3, #1
 8027120:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8027122:	687b      	ldr	r3, [r7, #4]
 8027124:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8027128:	2b01      	cmp	r3, #1
 802712a:	d108      	bne.n	802713e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 802712c:	687b      	ldr	r3, [r7, #4]
 802712e:	2200      	movs	r2, #0
 8027130:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8027134:	2100      	movs	r1, #0
 8027136:	6878      	ldr	r0, [r7, #4]
 8027138:	f000 ff14 	bl	8027f64 <HAL_PCDEx_LPM_Callback>
 802713c:	e002      	b.n	8027144 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 802713e:	6878      	ldr	r0, [r7, #4]
 8027140:	f00d fca6 	bl	8034a90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8027144:	687b      	ldr	r3, [r7, #4]
 8027146:	681b      	ldr	r3, [r3, #0]
 8027148:	695a      	ldr	r2, [r3, #20]
 802714a:	687b      	ldr	r3, [r7, #4]
 802714c:	681b      	ldr	r3, [r3, #0]
 802714e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8027152:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8027154:	687b      	ldr	r3, [r7, #4]
 8027156:	681b      	ldr	r3, [r3, #0]
 8027158:	4618      	mov	r0, r3
 802715a:	f009 fa5b 	bl	8030614 <USB_ReadInterrupts>
 802715e:	4603      	mov	r3, r0
 8027160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8027164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027168:	d112      	bne.n	8027190 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 802716a:	69fb      	ldr	r3, [r7, #28]
 802716c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027170:	689b      	ldr	r3, [r3, #8]
 8027172:	f003 0301 	and.w	r3, r3, #1
 8027176:	2b01      	cmp	r3, #1
 8027178:	d102      	bne.n	8027180 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802717a:	6878      	ldr	r0, [r7, #4]
 802717c:	f00d fc62 	bl	8034a44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8027180:	687b      	ldr	r3, [r7, #4]
 8027182:	681b      	ldr	r3, [r3, #0]
 8027184:	695a      	ldr	r2, [r3, #20]
 8027186:	687b      	ldr	r3, [r7, #4]
 8027188:	681b      	ldr	r3, [r3, #0]
 802718a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 802718e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8027190:	687b      	ldr	r3, [r7, #4]
 8027192:	681b      	ldr	r3, [r3, #0]
 8027194:	4618      	mov	r0, r3
 8027196:	f009 fa3d 	bl	8030614 <USB_ReadInterrupts>
 802719a:	4603      	mov	r3, r0
 802719c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80271a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80271a4:	d121      	bne.n	80271ea <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80271a6:	687b      	ldr	r3, [r7, #4]
 80271a8:	681b      	ldr	r3, [r3, #0]
 80271aa:	695a      	ldr	r2, [r3, #20]
 80271ac:	687b      	ldr	r3, [r7, #4]
 80271ae:	681b      	ldr	r3, [r3, #0]
 80271b0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80271b4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80271b6:	687b      	ldr	r3, [r7, #4]
 80271b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80271bc:	2b00      	cmp	r3, #0
 80271be:	d111      	bne.n	80271e4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80271c0:	687b      	ldr	r3, [r7, #4]
 80271c2:	2201      	movs	r2, #1
 80271c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80271c8:	687b      	ldr	r3, [r7, #4]
 80271ca:	681b      	ldr	r3, [r3, #0]
 80271cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80271ce:	089b      	lsrs	r3, r3, #2
 80271d0:	f003 020f 	and.w	r2, r3, #15
 80271d4:	687b      	ldr	r3, [r7, #4]
 80271d6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80271da:	2101      	movs	r1, #1
 80271dc:	6878      	ldr	r0, [r7, #4]
 80271de:	f000 fec1 	bl	8027f64 <HAL_PCDEx_LPM_Callback>
 80271e2:	e002      	b.n	80271ea <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80271e4:	6878      	ldr	r0, [r7, #4]
 80271e6:	f00d fc2d 	bl	8034a44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80271ea:	687b      	ldr	r3, [r7, #4]
 80271ec:	681b      	ldr	r3, [r3, #0]
 80271ee:	4618      	mov	r0, r3
 80271f0:	f009 fa10 	bl	8030614 <USB_ReadInterrupts>
 80271f4:	4603      	mov	r3, r0
 80271f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80271fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80271fe:	f040 80b7 	bne.w	8027370 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8027202:	69fb      	ldr	r3, [r7, #28]
 8027204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027208:	685b      	ldr	r3, [r3, #4]
 802720a:	69fa      	ldr	r2, [r7, #28]
 802720c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8027210:	f023 0301 	bic.w	r3, r3, #1
 8027214:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8027216:	687b      	ldr	r3, [r7, #4]
 8027218:	681b      	ldr	r3, [r3, #0]
 802721a:	2110      	movs	r1, #16
 802721c:	4618      	mov	r0, r3
 802721e:	f008 f9cb 	bl	802f5b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8027222:	2300      	movs	r3, #0
 8027224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027226:	e046      	b.n	80272b6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8027228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802722a:	015a      	lsls	r2, r3, #5
 802722c:	69fb      	ldr	r3, [r7, #28]
 802722e:	4413      	add	r3, r2
 8027230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027234:	461a      	mov	r2, r3
 8027236:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802723a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802723e:	015a      	lsls	r2, r3, #5
 8027240:	69fb      	ldr	r3, [r7, #28]
 8027242:	4413      	add	r3, r2
 8027244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027248:	681b      	ldr	r3, [r3, #0]
 802724a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802724c:	0151      	lsls	r1, r2, #5
 802724e:	69fa      	ldr	r2, [r7, #28]
 8027250:	440a      	add	r2, r1
 8027252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8027256:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802725a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 802725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802725e:	015a      	lsls	r2, r3, #5
 8027260:	69fb      	ldr	r3, [r7, #28]
 8027262:	4413      	add	r3, r2
 8027264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027268:	461a      	mov	r2, r3
 802726a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802726e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8027270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027272:	015a      	lsls	r2, r3, #5
 8027274:	69fb      	ldr	r3, [r7, #28]
 8027276:	4413      	add	r3, r2
 8027278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802727c:	681b      	ldr	r3, [r3, #0]
 802727e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027280:	0151      	lsls	r1, r2, #5
 8027282:	69fa      	ldr	r2, [r7, #28]
 8027284:	440a      	add	r2, r1
 8027286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802728a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802728e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8027290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027292:	015a      	lsls	r2, r3, #5
 8027294:	69fb      	ldr	r3, [r7, #28]
 8027296:	4413      	add	r3, r2
 8027298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802729c:	681b      	ldr	r3, [r3, #0]
 802729e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80272a0:	0151      	lsls	r1, r2, #5
 80272a2:	69fa      	ldr	r2, [r7, #28]
 80272a4:	440a      	add	r2, r1
 80272a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80272aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80272ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80272b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80272b2:	3301      	adds	r3, #1
 80272b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80272b6:	687b      	ldr	r3, [r7, #4]
 80272b8:	685b      	ldr	r3, [r3, #4]
 80272ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80272bc:	429a      	cmp	r2, r3
 80272be:	d3b3      	bcc.n	8027228 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80272c0:	69fb      	ldr	r3, [r7, #28]
 80272c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80272c6:	69db      	ldr	r3, [r3, #28]
 80272c8:	69fa      	ldr	r2, [r7, #28]
 80272ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80272ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80272d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80272d4:	687b      	ldr	r3, [r7, #4]
 80272d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80272d8:	2b00      	cmp	r3, #0
 80272da:	d016      	beq.n	802730a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80272dc:	69fb      	ldr	r3, [r7, #28]
 80272de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80272e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80272e6:	69fa      	ldr	r2, [r7, #28]
 80272e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80272ec:	f043 030b 	orr.w	r3, r3, #11
 80272f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80272f4:	69fb      	ldr	r3, [r7, #28]
 80272f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80272fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80272fc:	69fa      	ldr	r2, [r7, #28]
 80272fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8027302:	f043 030b 	orr.w	r3, r3, #11
 8027306:	6453      	str	r3, [r2, #68]	; 0x44
 8027308:	e015      	b.n	8027336 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 802730a:	69fb      	ldr	r3, [r7, #28]
 802730c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027310:	695a      	ldr	r2, [r3, #20]
 8027312:	69fb      	ldr	r3, [r7, #28]
 8027314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027318:	4619      	mov	r1, r3
 802731a:	f242 032b 	movw	r3, #8235	; 0x202b
 802731e:	4313      	orrs	r3, r2
 8027320:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8027322:	69fb      	ldr	r3, [r7, #28]
 8027324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027328:	691b      	ldr	r3, [r3, #16]
 802732a:	69fa      	ldr	r2, [r7, #28]
 802732c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8027330:	f043 030b 	orr.w	r3, r3, #11
 8027334:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8027336:	69fb      	ldr	r3, [r7, #28]
 8027338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802733c:	681b      	ldr	r3, [r3, #0]
 802733e:	69fa      	ldr	r2, [r7, #28]
 8027340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8027344:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8027348:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 802734a:	687b      	ldr	r3, [r7, #4]
 802734c:	6818      	ldr	r0, [r3, #0]
 802734e:	687b      	ldr	r3, [r7, #4]
 8027350:	691b      	ldr	r3, [r3, #16]
 8027352:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8027354:	687b      	ldr	r3, [r7, #4]
 8027356:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 802735a:	461a      	mov	r2, r3
 802735c:	f009 fa20 	bl	80307a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8027360:	687b      	ldr	r3, [r7, #4]
 8027362:	681b      	ldr	r3, [r3, #0]
 8027364:	695a      	ldr	r2, [r3, #20]
 8027366:	687b      	ldr	r3, [r7, #4]
 8027368:	681b      	ldr	r3, [r3, #0]
 802736a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 802736e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8027370:	687b      	ldr	r3, [r7, #4]
 8027372:	681b      	ldr	r3, [r3, #0]
 8027374:	4618      	mov	r0, r3
 8027376:	f009 f94d 	bl	8030614 <USB_ReadInterrupts>
 802737a:	4603      	mov	r3, r0
 802737c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8027380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027384:	d124      	bne.n	80273d0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8027386:	687b      	ldr	r3, [r7, #4]
 8027388:	681b      	ldr	r3, [r3, #0]
 802738a:	4618      	mov	r0, r3
 802738c:	f009 f9e4 	bl	8030758 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8027390:	687b      	ldr	r3, [r7, #4]
 8027392:	681b      	ldr	r3, [r3, #0]
 8027394:	4618      	mov	r0, r3
 8027396:	f008 f98c 	bl	802f6b2 <USB_GetDevSpeed>
 802739a:	4603      	mov	r3, r0
 802739c:	461a      	mov	r2, r3
 802739e:	687b      	ldr	r3, [r7, #4]
 80273a0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80273a2:	687b      	ldr	r3, [r7, #4]
 80273a4:	681c      	ldr	r4, [r3, #0]
 80273a6:	f001 fd91 	bl	8028ecc <HAL_RCC_GetHCLKFreq>
 80273aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80273ac:	687b      	ldr	r3, [r7, #4]
 80273ae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80273b0:	b2db      	uxtb	r3, r3
 80273b2:	461a      	mov	r2, r3
 80273b4:	4620      	mov	r0, r4
 80273b6:	f007 fe91 	bl	802f0dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80273ba:	6878      	ldr	r0, [r7, #4]
 80273bc:	f00d fb19 	bl	80349f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80273c0:	687b      	ldr	r3, [r7, #4]
 80273c2:	681b      	ldr	r3, [r3, #0]
 80273c4:	695a      	ldr	r2, [r3, #20]
 80273c6:	687b      	ldr	r3, [r7, #4]
 80273c8:	681b      	ldr	r3, [r3, #0]
 80273ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80273ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80273d0:	687b      	ldr	r3, [r7, #4]
 80273d2:	681b      	ldr	r3, [r3, #0]
 80273d4:	4618      	mov	r0, r3
 80273d6:	f009 f91d 	bl	8030614 <USB_ReadInterrupts>
 80273da:	4603      	mov	r3, r0
 80273dc:	f003 0308 	and.w	r3, r3, #8
 80273e0:	2b08      	cmp	r3, #8
 80273e2:	d10a      	bne.n	80273fa <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80273e4:	6878      	ldr	r0, [r7, #4]
 80273e6:	f00d faf6 	bl	80349d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80273ea:	687b      	ldr	r3, [r7, #4]
 80273ec:	681b      	ldr	r3, [r3, #0]
 80273ee:	695a      	ldr	r2, [r3, #20]
 80273f0:	687b      	ldr	r3, [r7, #4]
 80273f2:	681b      	ldr	r3, [r3, #0]
 80273f4:	f002 0208 	and.w	r2, r2, #8
 80273f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80273fa:	687b      	ldr	r3, [r7, #4]
 80273fc:	681b      	ldr	r3, [r3, #0]
 80273fe:	4618      	mov	r0, r3
 8027400:	f009 f908 	bl	8030614 <USB_ReadInterrupts>
 8027404:	4603      	mov	r3, r0
 8027406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802740a:	2b80      	cmp	r3, #128	; 0x80
 802740c:	d122      	bne.n	8027454 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 802740e:	6a3b      	ldr	r3, [r7, #32]
 8027410:	699b      	ldr	r3, [r3, #24]
 8027412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8027416:	6a3b      	ldr	r3, [r7, #32]
 8027418:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802741a:	2301      	movs	r3, #1
 802741c:	627b      	str	r3, [r7, #36]	; 0x24
 802741e:	e014      	b.n	802744a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8027420:	6879      	ldr	r1, [r7, #4]
 8027422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027424:	4613      	mov	r3, r2
 8027426:	00db      	lsls	r3, r3, #3
 8027428:	4413      	add	r3, r2
 802742a:	009b      	lsls	r3, r3, #2
 802742c:	440b      	add	r3, r1
 802742e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8027432:	781b      	ldrb	r3, [r3, #0]
 8027434:	2b01      	cmp	r3, #1
 8027436:	d105      	bne.n	8027444 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8027438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802743a:	b2db      	uxtb	r3, r3
 802743c:	4619      	mov	r1, r3
 802743e:	6878      	ldr	r0, [r7, #4]
 8027440:	f000 fb27 	bl	8027a92 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8027444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027446:	3301      	adds	r3, #1
 8027448:	627b      	str	r3, [r7, #36]	; 0x24
 802744a:	687b      	ldr	r3, [r7, #4]
 802744c:	685b      	ldr	r3, [r3, #4]
 802744e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027450:	429a      	cmp	r2, r3
 8027452:	d3e5      	bcc.n	8027420 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8027454:	687b      	ldr	r3, [r7, #4]
 8027456:	681b      	ldr	r3, [r3, #0]
 8027458:	4618      	mov	r0, r3
 802745a:	f009 f8db 	bl	8030614 <USB_ReadInterrupts>
 802745e:	4603      	mov	r3, r0
 8027460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8027468:	d13b      	bne.n	80274e2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802746a:	2301      	movs	r3, #1
 802746c:	627b      	str	r3, [r7, #36]	; 0x24
 802746e:	e02b      	b.n	80274c8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8027470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027472:	015a      	lsls	r2, r3, #5
 8027474:	69fb      	ldr	r3, [r7, #28]
 8027476:	4413      	add	r3, r2
 8027478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802747c:	681b      	ldr	r3, [r3, #0]
 802747e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8027480:	6879      	ldr	r1, [r7, #4]
 8027482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027484:	4613      	mov	r3, r2
 8027486:	00db      	lsls	r3, r3, #3
 8027488:	4413      	add	r3, r2
 802748a:	009b      	lsls	r3, r3, #2
 802748c:	440b      	add	r3, r1
 802748e:	3340      	adds	r3, #64	; 0x40
 8027490:	781b      	ldrb	r3, [r3, #0]
 8027492:	2b01      	cmp	r3, #1
 8027494:	d115      	bne.n	80274c2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8027496:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8027498:	2b00      	cmp	r3, #0
 802749a:	da12      	bge.n	80274c2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 802749c:	6879      	ldr	r1, [r7, #4]
 802749e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80274a0:	4613      	mov	r3, r2
 80274a2:	00db      	lsls	r3, r3, #3
 80274a4:	4413      	add	r3, r2
 80274a6:	009b      	lsls	r3, r3, #2
 80274a8:	440b      	add	r3, r1
 80274aa:	333f      	adds	r3, #63	; 0x3f
 80274ac:	2201      	movs	r2, #1
 80274ae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80274b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80274b2:	b2db      	uxtb	r3, r3
 80274b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80274b8:	b2db      	uxtb	r3, r3
 80274ba:	4619      	mov	r1, r3
 80274bc:	6878      	ldr	r0, [r7, #4]
 80274be:	f000 fae8 	bl	8027a92 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80274c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80274c4:	3301      	adds	r3, #1
 80274c6:	627b      	str	r3, [r7, #36]	; 0x24
 80274c8:	687b      	ldr	r3, [r7, #4]
 80274ca:	685b      	ldr	r3, [r3, #4]
 80274cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80274ce:	429a      	cmp	r2, r3
 80274d0:	d3ce      	bcc.n	8027470 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80274d2:	687b      	ldr	r3, [r7, #4]
 80274d4:	681b      	ldr	r3, [r3, #0]
 80274d6:	695a      	ldr	r2, [r3, #20]
 80274d8:	687b      	ldr	r3, [r7, #4]
 80274da:	681b      	ldr	r3, [r3, #0]
 80274dc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80274e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80274e2:	687b      	ldr	r3, [r7, #4]
 80274e4:	681b      	ldr	r3, [r3, #0]
 80274e6:	4618      	mov	r0, r3
 80274e8:	f009 f894 	bl	8030614 <USB_ReadInterrupts>
 80274ec:	4603      	mov	r3, r0
 80274ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80274f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80274f6:	d155      	bne.n	80275a4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80274f8:	2301      	movs	r3, #1
 80274fa:	627b      	str	r3, [r7, #36]	; 0x24
 80274fc:	e045      	b.n	802758a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80274fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027500:	015a      	lsls	r2, r3, #5
 8027502:	69fb      	ldr	r3, [r7, #28]
 8027504:	4413      	add	r3, r2
 8027506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802750a:	681b      	ldr	r3, [r3, #0]
 802750c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 802750e:	6879      	ldr	r1, [r7, #4]
 8027510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027512:	4613      	mov	r3, r2
 8027514:	00db      	lsls	r3, r3, #3
 8027516:	4413      	add	r3, r2
 8027518:	009b      	lsls	r3, r3, #2
 802751a:	440b      	add	r3, r1
 802751c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8027520:	781b      	ldrb	r3, [r3, #0]
 8027522:	2b01      	cmp	r3, #1
 8027524:	d12e      	bne.n	8027584 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8027526:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8027528:	2b00      	cmp	r3, #0
 802752a:	da2b      	bge.n	8027584 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 802752c:	69bb      	ldr	r3, [r7, #24]
 802752e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8027532:	687b      	ldr	r3, [r7, #4]
 8027534:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8027538:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 802753c:	429a      	cmp	r2, r3
 802753e:	d121      	bne.n	8027584 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8027540:	6879      	ldr	r1, [r7, #4]
 8027542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027544:	4613      	mov	r3, r2
 8027546:	00db      	lsls	r3, r3, #3
 8027548:	4413      	add	r3, r2
 802754a:	009b      	lsls	r3, r3, #2
 802754c:	440b      	add	r3, r1
 802754e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8027552:	2201      	movs	r2, #1
 8027554:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8027556:	6a3b      	ldr	r3, [r7, #32]
 8027558:	699b      	ldr	r3, [r3, #24]
 802755a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 802755e:	6a3b      	ldr	r3, [r7, #32]
 8027560:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8027562:	6a3b      	ldr	r3, [r7, #32]
 8027564:	695b      	ldr	r3, [r3, #20]
 8027566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802756a:	2b00      	cmp	r3, #0
 802756c:	d10a      	bne.n	8027584 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 802756e:	69fb      	ldr	r3, [r7, #28]
 8027570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027574:	685b      	ldr	r3, [r3, #4]
 8027576:	69fa      	ldr	r2, [r7, #28]
 8027578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802757c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027580:	6053      	str	r3, [r2, #4]
            break;
 8027582:	e007      	b.n	8027594 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8027584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027586:	3301      	adds	r3, #1
 8027588:	627b      	str	r3, [r7, #36]	; 0x24
 802758a:	687b      	ldr	r3, [r7, #4]
 802758c:	685b      	ldr	r3, [r3, #4]
 802758e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027590:	429a      	cmp	r2, r3
 8027592:	d3b4      	bcc.n	80274fe <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8027594:	687b      	ldr	r3, [r7, #4]
 8027596:	681b      	ldr	r3, [r3, #0]
 8027598:	695a      	ldr	r2, [r3, #20]
 802759a:	687b      	ldr	r3, [r7, #4]
 802759c:	681b      	ldr	r3, [r3, #0]
 802759e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80275a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80275a4:	687b      	ldr	r3, [r7, #4]
 80275a6:	681b      	ldr	r3, [r3, #0]
 80275a8:	4618      	mov	r0, r3
 80275aa:	f009 f833 	bl	8030614 <USB_ReadInterrupts>
 80275ae:	4603      	mov	r3, r0
 80275b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80275b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80275b8:	d10a      	bne.n	80275d0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80275ba:	6878      	ldr	r0, [r7, #4]
 80275bc:	f00d fa9a 	bl	8034af4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80275c0:	687b      	ldr	r3, [r7, #4]
 80275c2:	681b      	ldr	r3, [r3, #0]
 80275c4:	695a      	ldr	r2, [r3, #20]
 80275c6:	687b      	ldr	r3, [r7, #4]
 80275c8:	681b      	ldr	r3, [r3, #0]
 80275ca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80275ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80275d0:	687b      	ldr	r3, [r7, #4]
 80275d2:	681b      	ldr	r3, [r3, #0]
 80275d4:	4618      	mov	r0, r3
 80275d6:	f009 f81d 	bl	8030614 <USB_ReadInterrupts>
 80275da:	4603      	mov	r3, r0
 80275dc:	f003 0304 	and.w	r3, r3, #4
 80275e0:	2b04      	cmp	r3, #4
 80275e2:	d115      	bne.n	8027610 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80275e4:	687b      	ldr	r3, [r7, #4]
 80275e6:	681b      	ldr	r3, [r3, #0]
 80275e8:	685b      	ldr	r3, [r3, #4]
 80275ea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80275ec:	69bb      	ldr	r3, [r7, #24]
 80275ee:	f003 0304 	and.w	r3, r3, #4
 80275f2:	2b00      	cmp	r3, #0
 80275f4:	d002      	beq.n	80275fc <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80275f6:	6878      	ldr	r0, [r7, #4]
 80275f8:	f00d fa8a 	bl	8034b10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80275fc:	687b      	ldr	r3, [r7, #4]
 80275fe:	681b      	ldr	r3, [r3, #0]
 8027600:	6859      	ldr	r1, [r3, #4]
 8027602:	687b      	ldr	r3, [r7, #4]
 8027604:	681b      	ldr	r3, [r3, #0]
 8027606:	69ba      	ldr	r2, [r7, #24]
 8027608:	430a      	orrs	r2, r1
 802760a:	605a      	str	r2, [r3, #4]
 802760c:	e000      	b.n	8027610 <HAL_PCD_IRQHandler+0x992>
      return;
 802760e:	bf00      	nop
    }
  }
}
 8027610:	3734      	adds	r7, #52	; 0x34
 8027612:	46bd      	mov	sp, r7
 8027614:	bd90      	pop	{r4, r7, pc}

08027616 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8027616:	b580      	push	{r7, lr}
 8027618:	b082      	sub	sp, #8
 802761a:	af00      	add	r7, sp, #0
 802761c:	6078      	str	r0, [r7, #4]
 802761e:	460b      	mov	r3, r1
 8027620:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8027622:	687b      	ldr	r3, [r7, #4]
 8027624:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8027628:	2b01      	cmp	r3, #1
 802762a:	d101      	bne.n	8027630 <HAL_PCD_SetAddress+0x1a>
 802762c:	2302      	movs	r3, #2
 802762e:	e013      	b.n	8027658 <HAL_PCD_SetAddress+0x42>
 8027630:	687b      	ldr	r3, [r7, #4]
 8027632:	2201      	movs	r2, #1
 8027634:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8027638:	687b      	ldr	r3, [r7, #4]
 802763a:	78fa      	ldrb	r2, [r7, #3]
 802763c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8027640:	687b      	ldr	r3, [r7, #4]
 8027642:	681b      	ldr	r3, [r3, #0]
 8027644:	78fa      	ldrb	r2, [r7, #3]
 8027646:	4611      	mov	r1, r2
 8027648:	4618      	mov	r0, r3
 802764a:	f008 ff7b 	bl	8030544 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 802764e:	687b      	ldr	r3, [r7, #4]
 8027650:	2200      	movs	r2, #0
 8027652:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8027656:	2300      	movs	r3, #0
}
 8027658:	4618      	mov	r0, r3
 802765a:	3708      	adds	r7, #8
 802765c:	46bd      	mov	sp, r7
 802765e:	bd80      	pop	{r7, pc}

08027660 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8027660:	b580      	push	{r7, lr}
 8027662:	b084      	sub	sp, #16
 8027664:	af00      	add	r7, sp, #0
 8027666:	6078      	str	r0, [r7, #4]
 8027668:	4608      	mov	r0, r1
 802766a:	4611      	mov	r1, r2
 802766c:	461a      	mov	r2, r3
 802766e:	4603      	mov	r3, r0
 8027670:	70fb      	strb	r3, [r7, #3]
 8027672:	460b      	mov	r3, r1
 8027674:	803b      	strh	r3, [r7, #0]
 8027676:	4613      	mov	r3, r2
 8027678:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 802767a:	2300      	movs	r3, #0
 802767c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 802767e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8027682:	2b00      	cmp	r3, #0
 8027684:	da0f      	bge.n	80276a6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8027686:	78fb      	ldrb	r3, [r7, #3]
 8027688:	f003 020f 	and.w	r2, r3, #15
 802768c:	4613      	mov	r3, r2
 802768e:	00db      	lsls	r3, r3, #3
 8027690:	4413      	add	r3, r2
 8027692:	009b      	lsls	r3, r3, #2
 8027694:	3338      	adds	r3, #56	; 0x38
 8027696:	687a      	ldr	r2, [r7, #4]
 8027698:	4413      	add	r3, r2
 802769a:	3304      	adds	r3, #4
 802769c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802769e:	68fb      	ldr	r3, [r7, #12]
 80276a0:	2201      	movs	r2, #1
 80276a2:	705a      	strb	r2, [r3, #1]
 80276a4:	e00f      	b.n	80276c6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80276a6:	78fb      	ldrb	r3, [r7, #3]
 80276a8:	f003 020f 	and.w	r2, r3, #15
 80276ac:	4613      	mov	r3, r2
 80276ae:	00db      	lsls	r3, r3, #3
 80276b0:	4413      	add	r3, r2
 80276b2:	009b      	lsls	r3, r3, #2
 80276b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80276b8:	687a      	ldr	r2, [r7, #4]
 80276ba:	4413      	add	r3, r2
 80276bc:	3304      	adds	r3, #4
 80276be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80276c0:	68fb      	ldr	r3, [r7, #12]
 80276c2:	2200      	movs	r2, #0
 80276c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80276c6:	78fb      	ldrb	r3, [r7, #3]
 80276c8:	f003 030f 	and.w	r3, r3, #15
 80276cc:	b2da      	uxtb	r2, r3
 80276ce:	68fb      	ldr	r3, [r7, #12]
 80276d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80276d2:	883a      	ldrh	r2, [r7, #0]
 80276d4:	68fb      	ldr	r3, [r7, #12]
 80276d6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80276d8:	68fb      	ldr	r3, [r7, #12]
 80276da:	78ba      	ldrb	r2, [r7, #2]
 80276dc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80276de:	68fb      	ldr	r3, [r7, #12]
 80276e0:	785b      	ldrb	r3, [r3, #1]
 80276e2:	2b00      	cmp	r3, #0
 80276e4:	d004      	beq.n	80276f0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80276e6:	68fb      	ldr	r3, [r7, #12]
 80276e8:	781b      	ldrb	r3, [r3, #0]
 80276ea:	b29a      	uxth	r2, r3
 80276ec:	68fb      	ldr	r3, [r7, #12]
 80276ee:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80276f0:	78bb      	ldrb	r3, [r7, #2]
 80276f2:	2b02      	cmp	r3, #2
 80276f4:	d102      	bne.n	80276fc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80276f6:	68fb      	ldr	r3, [r7, #12]
 80276f8:	2200      	movs	r2, #0
 80276fa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80276fc:	687b      	ldr	r3, [r7, #4]
 80276fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8027702:	2b01      	cmp	r3, #1
 8027704:	d101      	bne.n	802770a <HAL_PCD_EP_Open+0xaa>
 8027706:	2302      	movs	r3, #2
 8027708:	e00e      	b.n	8027728 <HAL_PCD_EP_Open+0xc8>
 802770a:	687b      	ldr	r3, [r7, #4]
 802770c:	2201      	movs	r2, #1
 802770e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8027712:	687b      	ldr	r3, [r7, #4]
 8027714:	681b      	ldr	r3, [r3, #0]
 8027716:	68f9      	ldr	r1, [r7, #12]
 8027718:	4618      	mov	r0, r3
 802771a:	f007 ffef 	bl	802f6fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 802771e:	687b      	ldr	r3, [r7, #4]
 8027720:	2200      	movs	r2, #0
 8027722:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8027726:	7afb      	ldrb	r3, [r7, #11]
}
 8027728:	4618      	mov	r0, r3
 802772a:	3710      	adds	r7, #16
 802772c:	46bd      	mov	sp, r7
 802772e:	bd80      	pop	{r7, pc}

08027730 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8027730:	b580      	push	{r7, lr}
 8027732:	b084      	sub	sp, #16
 8027734:	af00      	add	r7, sp, #0
 8027736:	6078      	str	r0, [r7, #4]
 8027738:	460b      	mov	r3, r1
 802773a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 802773c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8027740:	2b00      	cmp	r3, #0
 8027742:	da0f      	bge.n	8027764 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8027744:	78fb      	ldrb	r3, [r7, #3]
 8027746:	f003 020f 	and.w	r2, r3, #15
 802774a:	4613      	mov	r3, r2
 802774c:	00db      	lsls	r3, r3, #3
 802774e:	4413      	add	r3, r2
 8027750:	009b      	lsls	r3, r3, #2
 8027752:	3338      	adds	r3, #56	; 0x38
 8027754:	687a      	ldr	r2, [r7, #4]
 8027756:	4413      	add	r3, r2
 8027758:	3304      	adds	r3, #4
 802775a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802775c:	68fb      	ldr	r3, [r7, #12]
 802775e:	2201      	movs	r2, #1
 8027760:	705a      	strb	r2, [r3, #1]
 8027762:	e00f      	b.n	8027784 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8027764:	78fb      	ldrb	r3, [r7, #3]
 8027766:	f003 020f 	and.w	r2, r3, #15
 802776a:	4613      	mov	r3, r2
 802776c:	00db      	lsls	r3, r3, #3
 802776e:	4413      	add	r3, r2
 8027770:	009b      	lsls	r3, r3, #2
 8027772:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8027776:	687a      	ldr	r2, [r7, #4]
 8027778:	4413      	add	r3, r2
 802777a:	3304      	adds	r3, #4
 802777c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 802777e:	68fb      	ldr	r3, [r7, #12]
 8027780:	2200      	movs	r2, #0
 8027782:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8027784:	78fb      	ldrb	r3, [r7, #3]
 8027786:	f003 030f 	and.w	r3, r3, #15
 802778a:	b2da      	uxtb	r2, r3
 802778c:	68fb      	ldr	r3, [r7, #12]
 802778e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8027790:	687b      	ldr	r3, [r7, #4]
 8027792:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8027796:	2b01      	cmp	r3, #1
 8027798:	d101      	bne.n	802779e <HAL_PCD_EP_Close+0x6e>
 802779a:	2302      	movs	r3, #2
 802779c:	e00e      	b.n	80277bc <HAL_PCD_EP_Close+0x8c>
 802779e:	687b      	ldr	r3, [r7, #4]
 80277a0:	2201      	movs	r2, #1
 80277a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80277a6:	687b      	ldr	r3, [r7, #4]
 80277a8:	681b      	ldr	r3, [r3, #0]
 80277aa:	68f9      	ldr	r1, [r7, #12]
 80277ac:	4618      	mov	r0, r3
 80277ae:	f008 f82d 	bl	802f80c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80277b2:	687b      	ldr	r3, [r7, #4]
 80277b4:	2200      	movs	r2, #0
 80277b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80277ba:	2300      	movs	r3, #0
}
 80277bc:	4618      	mov	r0, r3
 80277be:	3710      	adds	r7, #16
 80277c0:	46bd      	mov	sp, r7
 80277c2:	bd80      	pop	{r7, pc}

080277c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80277c4:	b580      	push	{r7, lr}
 80277c6:	b086      	sub	sp, #24
 80277c8:	af00      	add	r7, sp, #0
 80277ca:	60f8      	str	r0, [r7, #12]
 80277cc:	607a      	str	r2, [r7, #4]
 80277ce:	603b      	str	r3, [r7, #0]
 80277d0:	460b      	mov	r3, r1
 80277d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80277d4:	7afb      	ldrb	r3, [r7, #11]
 80277d6:	f003 020f 	and.w	r2, r3, #15
 80277da:	4613      	mov	r3, r2
 80277dc:	00db      	lsls	r3, r3, #3
 80277de:	4413      	add	r3, r2
 80277e0:	009b      	lsls	r3, r3, #2
 80277e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80277e6:	68fa      	ldr	r2, [r7, #12]
 80277e8:	4413      	add	r3, r2
 80277ea:	3304      	adds	r3, #4
 80277ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80277ee:	697b      	ldr	r3, [r7, #20]
 80277f0:	687a      	ldr	r2, [r7, #4]
 80277f2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80277f4:	697b      	ldr	r3, [r7, #20]
 80277f6:	683a      	ldr	r2, [r7, #0]
 80277f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80277fa:	697b      	ldr	r3, [r7, #20]
 80277fc:	2200      	movs	r2, #0
 80277fe:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8027800:	697b      	ldr	r3, [r7, #20]
 8027802:	2200      	movs	r2, #0
 8027804:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8027806:	7afb      	ldrb	r3, [r7, #11]
 8027808:	f003 030f 	and.w	r3, r3, #15
 802780c:	b2da      	uxtb	r2, r3
 802780e:	697b      	ldr	r3, [r7, #20]
 8027810:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8027812:	68fb      	ldr	r3, [r7, #12]
 8027814:	691b      	ldr	r3, [r3, #16]
 8027816:	2b01      	cmp	r3, #1
 8027818:	d102      	bne.n	8027820 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 802781a:	687a      	ldr	r2, [r7, #4]
 802781c:	697b      	ldr	r3, [r7, #20]
 802781e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8027820:	7afb      	ldrb	r3, [r7, #11]
 8027822:	f003 030f 	and.w	r3, r3, #15
 8027826:	2b00      	cmp	r3, #0
 8027828:	d109      	bne.n	802783e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 802782a:	68fb      	ldr	r3, [r7, #12]
 802782c:	6818      	ldr	r0, [r3, #0]
 802782e:	68fb      	ldr	r3, [r7, #12]
 8027830:	691b      	ldr	r3, [r3, #16]
 8027832:	b2db      	uxtb	r3, r3
 8027834:	461a      	mov	r2, r3
 8027836:	6979      	ldr	r1, [r7, #20]
 8027838:	f008 fb14 	bl	802fe64 <USB_EP0StartXfer>
 802783c:	e008      	b.n	8027850 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 802783e:	68fb      	ldr	r3, [r7, #12]
 8027840:	6818      	ldr	r0, [r3, #0]
 8027842:	68fb      	ldr	r3, [r7, #12]
 8027844:	691b      	ldr	r3, [r3, #16]
 8027846:	b2db      	uxtb	r3, r3
 8027848:	461a      	mov	r2, r3
 802784a:	6979      	ldr	r1, [r7, #20]
 802784c:	f008 f8ba 	bl	802f9c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8027850:	2300      	movs	r3, #0
}
 8027852:	4618      	mov	r0, r3
 8027854:	3718      	adds	r7, #24
 8027856:	46bd      	mov	sp, r7
 8027858:	bd80      	pop	{r7, pc}

0802785a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802785a:	b480      	push	{r7}
 802785c:	b083      	sub	sp, #12
 802785e:	af00      	add	r7, sp, #0
 8027860:	6078      	str	r0, [r7, #4]
 8027862:	460b      	mov	r3, r1
 8027864:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8027866:	78fb      	ldrb	r3, [r7, #3]
 8027868:	f003 020f 	and.w	r2, r3, #15
 802786c:	6879      	ldr	r1, [r7, #4]
 802786e:	4613      	mov	r3, r2
 8027870:	00db      	lsls	r3, r3, #3
 8027872:	4413      	add	r3, r2
 8027874:	009b      	lsls	r3, r3, #2
 8027876:	440b      	add	r3, r1
 8027878:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 802787c:	681b      	ldr	r3, [r3, #0]
}
 802787e:	4618      	mov	r0, r3
 8027880:	370c      	adds	r7, #12
 8027882:	46bd      	mov	sp, r7
 8027884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027888:	4770      	bx	lr

0802788a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 802788a:	b580      	push	{r7, lr}
 802788c:	b086      	sub	sp, #24
 802788e:	af00      	add	r7, sp, #0
 8027890:	60f8      	str	r0, [r7, #12]
 8027892:	607a      	str	r2, [r7, #4]
 8027894:	603b      	str	r3, [r7, #0]
 8027896:	460b      	mov	r3, r1
 8027898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802789a:	7afb      	ldrb	r3, [r7, #11]
 802789c:	f003 020f 	and.w	r2, r3, #15
 80278a0:	4613      	mov	r3, r2
 80278a2:	00db      	lsls	r3, r3, #3
 80278a4:	4413      	add	r3, r2
 80278a6:	009b      	lsls	r3, r3, #2
 80278a8:	3338      	adds	r3, #56	; 0x38
 80278aa:	68fa      	ldr	r2, [r7, #12]
 80278ac:	4413      	add	r3, r2
 80278ae:	3304      	adds	r3, #4
 80278b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80278b2:	697b      	ldr	r3, [r7, #20]
 80278b4:	687a      	ldr	r2, [r7, #4]
 80278b6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80278b8:	697b      	ldr	r3, [r7, #20]
 80278ba:	683a      	ldr	r2, [r7, #0]
 80278bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80278be:	697b      	ldr	r3, [r7, #20]
 80278c0:	2200      	movs	r2, #0
 80278c2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80278c4:	697b      	ldr	r3, [r7, #20]
 80278c6:	2201      	movs	r2, #1
 80278c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80278ca:	7afb      	ldrb	r3, [r7, #11]
 80278cc:	f003 030f 	and.w	r3, r3, #15
 80278d0:	b2da      	uxtb	r2, r3
 80278d2:	697b      	ldr	r3, [r7, #20]
 80278d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80278d6:	68fb      	ldr	r3, [r7, #12]
 80278d8:	691b      	ldr	r3, [r3, #16]
 80278da:	2b01      	cmp	r3, #1
 80278dc:	d102      	bne.n	80278e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80278de:	687a      	ldr	r2, [r7, #4]
 80278e0:	697b      	ldr	r3, [r7, #20]
 80278e2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80278e4:	7afb      	ldrb	r3, [r7, #11]
 80278e6:	f003 030f 	and.w	r3, r3, #15
 80278ea:	2b00      	cmp	r3, #0
 80278ec:	d109      	bne.n	8027902 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80278ee:	68fb      	ldr	r3, [r7, #12]
 80278f0:	6818      	ldr	r0, [r3, #0]
 80278f2:	68fb      	ldr	r3, [r7, #12]
 80278f4:	691b      	ldr	r3, [r3, #16]
 80278f6:	b2db      	uxtb	r3, r3
 80278f8:	461a      	mov	r2, r3
 80278fa:	6979      	ldr	r1, [r7, #20]
 80278fc:	f008 fab2 	bl	802fe64 <USB_EP0StartXfer>
 8027900:	e008      	b.n	8027914 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8027902:	68fb      	ldr	r3, [r7, #12]
 8027904:	6818      	ldr	r0, [r3, #0]
 8027906:	68fb      	ldr	r3, [r7, #12]
 8027908:	691b      	ldr	r3, [r3, #16]
 802790a:	b2db      	uxtb	r3, r3
 802790c:	461a      	mov	r2, r3
 802790e:	6979      	ldr	r1, [r7, #20]
 8027910:	f008 f858 	bl	802f9c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8027914:	2300      	movs	r3, #0
}
 8027916:	4618      	mov	r0, r3
 8027918:	3718      	adds	r7, #24
 802791a:	46bd      	mov	sp, r7
 802791c:	bd80      	pop	{r7, pc}

0802791e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802791e:	b580      	push	{r7, lr}
 8027920:	b084      	sub	sp, #16
 8027922:	af00      	add	r7, sp, #0
 8027924:	6078      	str	r0, [r7, #4]
 8027926:	460b      	mov	r3, r1
 8027928:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 802792a:	78fb      	ldrb	r3, [r7, #3]
 802792c:	f003 020f 	and.w	r2, r3, #15
 8027930:	687b      	ldr	r3, [r7, #4]
 8027932:	685b      	ldr	r3, [r3, #4]
 8027934:	429a      	cmp	r2, r3
 8027936:	d901      	bls.n	802793c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8027938:	2301      	movs	r3, #1
 802793a:	e050      	b.n	80279de <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 802793c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8027940:	2b00      	cmp	r3, #0
 8027942:	da0f      	bge.n	8027964 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8027944:	78fb      	ldrb	r3, [r7, #3]
 8027946:	f003 020f 	and.w	r2, r3, #15
 802794a:	4613      	mov	r3, r2
 802794c:	00db      	lsls	r3, r3, #3
 802794e:	4413      	add	r3, r2
 8027950:	009b      	lsls	r3, r3, #2
 8027952:	3338      	adds	r3, #56	; 0x38
 8027954:	687a      	ldr	r2, [r7, #4]
 8027956:	4413      	add	r3, r2
 8027958:	3304      	adds	r3, #4
 802795a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802795c:	68fb      	ldr	r3, [r7, #12]
 802795e:	2201      	movs	r2, #1
 8027960:	705a      	strb	r2, [r3, #1]
 8027962:	e00d      	b.n	8027980 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8027964:	78fa      	ldrb	r2, [r7, #3]
 8027966:	4613      	mov	r3, r2
 8027968:	00db      	lsls	r3, r3, #3
 802796a:	4413      	add	r3, r2
 802796c:	009b      	lsls	r3, r3, #2
 802796e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8027972:	687a      	ldr	r2, [r7, #4]
 8027974:	4413      	add	r3, r2
 8027976:	3304      	adds	r3, #4
 8027978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 802797a:	68fb      	ldr	r3, [r7, #12]
 802797c:	2200      	movs	r2, #0
 802797e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8027980:	68fb      	ldr	r3, [r7, #12]
 8027982:	2201      	movs	r2, #1
 8027984:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8027986:	78fb      	ldrb	r3, [r7, #3]
 8027988:	f003 030f 	and.w	r3, r3, #15
 802798c:	b2da      	uxtb	r2, r3
 802798e:	68fb      	ldr	r3, [r7, #12]
 8027990:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8027992:	687b      	ldr	r3, [r7, #4]
 8027994:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8027998:	2b01      	cmp	r3, #1
 802799a:	d101      	bne.n	80279a0 <HAL_PCD_EP_SetStall+0x82>
 802799c:	2302      	movs	r3, #2
 802799e:	e01e      	b.n	80279de <HAL_PCD_EP_SetStall+0xc0>
 80279a0:	687b      	ldr	r3, [r7, #4]
 80279a2:	2201      	movs	r2, #1
 80279a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80279a8:	687b      	ldr	r3, [r7, #4]
 80279aa:	681b      	ldr	r3, [r3, #0]
 80279ac:	68f9      	ldr	r1, [r7, #12]
 80279ae:	4618      	mov	r0, r3
 80279b0:	f008 fcf4 	bl	803039c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80279b4:	78fb      	ldrb	r3, [r7, #3]
 80279b6:	f003 030f 	and.w	r3, r3, #15
 80279ba:	2b00      	cmp	r3, #0
 80279bc:	d10a      	bne.n	80279d4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80279be:	687b      	ldr	r3, [r7, #4]
 80279c0:	6818      	ldr	r0, [r3, #0]
 80279c2:	687b      	ldr	r3, [r7, #4]
 80279c4:	691b      	ldr	r3, [r3, #16]
 80279c6:	b2d9      	uxtb	r1, r3
 80279c8:	687b      	ldr	r3, [r7, #4]
 80279ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80279ce:	461a      	mov	r2, r3
 80279d0:	f008 fee6 	bl	80307a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80279d4:	687b      	ldr	r3, [r7, #4]
 80279d6:	2200      	movs	r2, #0
 80279d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80279dc:	2300      	movs	r3, #0
}
 80279de:	4618      	mov	r0, r3
 80279e0:	3710      	adds	r7, #16
 80279e2:	46bd      	mov	sp, r7
 80279e4:	bd80      	pop	{r7, pc}

080279e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80279e6:	b580      	push	{r7, lr}
 80279e8:	b084      	sub	sp, #16
 80279ea:	af00      	add	r7, sp, #0
 80279ec:	6078      	str	r0, [r7, #4]
 80279ee:	460b      	mov	r3, r1
 80279f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80279f2:	78fb      	ldrb	r3, [r7, #3]
 80279f4:	f003 020f 	and.w	r2, r3, #15
 80279f8:	687b      	ldr	r3, [r7, #4]
 80279fa:	685b      	ldr	r3, [r3, #4]
 80279fc:	429a      	cmp	r2, r3
 80279fe:	d901      	bls.n	8027a04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8027a00:	2301      	movs	r3, #1
 8027a02:	e042      	b.n	8027a8a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8027a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8027a08:	2b00      	cmp	r3, #0
 8027a0a:	da0f      	bge.n	8027a2c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8027a0c:	78fb      	ldrb	r3, [r7, #3]
 8027a0e:	f003 020f 	and.w	r2, r3, #15
 8027a12:	4613      	mov	r3, r2
 8027a14:	00db      	lsls	r3, r3, #3
 8027a16:	4413      	add	r3, r2
 8027a18:	009b      	lsls	r3, r3, #2
 8027a1a:	3338      	adds	r3, #56	; 0x38
 8027a1c:	687a      	ldr	r2, [r7, #4]
 8027a1e:	4413      	add	r3, r2
 8027a20:	3304      	adds	r3, #4
 8027a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8027a24:	68fb      	ldr	r3, [r7, #12]
 8027a26:	2201      	movs	r2, #1
 8027a28:	705a      	strb	r2, [r3, #1]
 8027a2a:	e00f      	b.n	8027a4c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8027a2c:	78fb      	ldrb	r3, [r7, #3]
 8027a2e:	f003 020f 	and.w	r2, r3, #15
 8027a32:	4613      	mov	r3, r2
 8027a34:	00db      	lsls	r3, r3, #3
 8027a36:	4413      	add	r3, r2
 8027a38:	009b      	lsls	r3, r3, #2
 8027a3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8027a3e:	687a      	ldr	r2, [r7, #4]
 8027a40:	4413      	add	r3, r2
 8027a42:	3304      	adds	r3, #4
 8027a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8027a46:	68fb      	ldr	r3, [r7, #12]
 8027a48:	2200      	movs	r2, #0
 8027a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8027a4c:	68fb      	ldr	r3, [r7, #12]
 8027a4e:	2200      	movs	r2, #0
 8027a50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8027a52:	78fb      	ldrb	r3, [r7, #3]
 8027a54:	f003 030f 	and.w	r3, r3, #15
 8027a58:	b2da      	uxtb	r2, r3
 8027a5a:	68fb      	ldr	r3, [r7, #12]
 8027a5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8027a5e:	687b      	ldr	r3, [r7, #4]
 8027a60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8027a64:	2b01      	cmp	r3, #1
 8027a66:	d101      	bne.n	8027a6c <HAL_PCD_EP_ClrStall+0x86>
 8027a68:	2302      	movs	r3, #2
 8027a6a:	e00e      	b.n	8027a8a <HAL_PCD_EP_ClrStall+0xa4>
 8027a6c:	687b      	ldr	r3, [r7, #4]
 8027a6e:	2201      	movs	r2, #1
 8027a70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8027a74:	687b      	ldr	r3, [r7, #4]
 8027a76:	681b      	ldr	r3, [r3, #0]
 8027a78:	68f9      	ldr	r1, [r7, #12]
 8027a7a:	4618      	mov	r0, r3
 8027a7c:	f008 fcfc 	bl	8030478 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8027a80:	687b      	ldr	r3, [r7, #4]
 8027a82:	2200      	movs	r2, #0
 8027a84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8027a88:	2300      	movs	r3, #0
}
 8027a8a:	4618      	mov	r0, r3
 8027a8c:	3710      	adds	r7, #16
 8027a8e:	46bd      	mov	sp, r7
 8027a90:	bd80      	pop	{r7, pc}

08027a92 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8027a92:	b580      	push	{r7, lr}
 8027a94:	b084      	sub	sp, #16
 8027a96:	af00      	add	r7, sp, #0
 8027a98:	6078      	str	r0, [r7, #4]
 8027a9a:	460b      	mov	r3, r1
 8027a9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8027a9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8027aa2:	2b00      	cmp	r3, #0
 8027aa4:	da0c      	bge.n	8027ac0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8027aa6:	78fb      	ldrb	r3, [r7, #3]
 8027aa8:	f003 020f 	and.w	r2, r3, #15
 8027aac:	4613      	mov	r3, r2
 8027aae:	00db      	lsls	r3, r3, #3
 8027ab0:	4413      	add	r3, r2
 8027ab2:	009b      	lsls	r3, r3, #2
 8027ab4:	3338      	adds	r3, #56	; 0x38
 8027ab6:	687a      	ldr	r2, [r7, #4]
 8027ab8:	4413      	add	r3, r2
 8027aba:	3304      	adds	r3, #4
 8027abc:	60fb      	str	r3, [r7, #12]
 8027abe:	e00c      	b.n	8027ada <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8027ac0:	78fb      	ldrb	r3, [r7, #3]
 8027ac2:	f003 020f 	and.w	r2, r3, #15
 8027ac6:	4613      	mov	r3, r2
 8027ac8:	00db      	lsls	r3, r3, #3
 8027aca:	4413      	add	r3, r2
 8027acc:	009b      	lsls	r3, r3, #2
 8027ace:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8027ad2:	687a      	ldr	r2, [r7, #4]
 8027ad4:	4413      	add	r3, r2
 8027ad6:	3304      	adds	r3, #4
 8027ad8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8027ada:	687b      	ldr	r3, [r7, #4]
 8027adc:	681b      	ldr	r3, [r3, #0]
 8027ade:	68f9      	ldr	r1, [r7, #12]
 8027ae0:	4618      	mov	r0, r3
 8027ae2:	f008 fb1b 	bl	803011c <USB_EPStopXfer>
 8027ae6:	4603      	mov	r3, r0
 8027ae8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8027aea:	7afb      	ldrb	r3, [r7, #11]
}
 8027aec:	4618      	mov	r0, r3
 8027aee:	3710      	adds	r7, #16
 8027af0:	46bd      	mov	sp, r7
 8027af2:	bd80      	pop	{r7, pc}

08027af4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8027af4:	b580      	push	{r7, lr}
 8027af6:	b08a      	sub	sp, #40	; 0x28
 8027af8:	af02      	add	r7, sp, #8
 8027afa:	6078      	str	r0, [r7, #4]
 8027afc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8027afe:	687b      	ldr	r3, [r7, #4]
 8027b00:	681b      	ldr	r3, [r3, #0]
 8027b02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8027b04:	697b      	ldr	r3, [r7, #20]
 8027b06:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8027b08:	683a      	ldr	r2, [r7, #0]
 8027b0a:	4613      	mov	r3, r2
 8027b0c:	00db      	lsls	r3, r3, #3
 8027b0e:	4413      	add	r3, r2
 8027b10:	009b      	lsls	r3, r3, #2
 8027b12:	3338      	adds	r3, #56	; 0x38
 8027b14:	687a      	ldr	r2, [r7, #4]
 8027b16:	4413      	add	r3, r2
 8027b18:	3304      	adds	r3, #4
 8027b1a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8027b1c:	68fb      	ldr	r3, [r7, #12]
 8027b1e:	6a1a      	ldr	r2, [r3, #32]
 8027b20:	68fb      	ldr	r3, [r7, #12]
 8027b22:	699b      	ldr	r3, [r3, #24]
 8027b24:	429a      	cmp	r2, r3
 8027b26:	d901      	bls.n	8027b2c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8027b28:	2301      	movs	r3, #1
 8027b2a:	e06c      	b.n	8027c06 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8027b2c:	68fb      	ldr	r3, [r7, #12]
 8027b2e:	699a      	ldr	r2, [r3, #24]
 8027b30:	68fb      	ldr	r3, [r7, #12]
 8027b32:	6a1b      	ldr	r3, [r3, #32]
 8027b34:	1ad3      	subs	r3, r2, r3
 8027b36:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8027b38:	68fb      	ldr	r3, [r7, #12]
 8027b3a:	68db      	ldr	r3, [r3, #12]
 8027b3c:	69fa      	ldr	r2, [r7, #28]
 8027b3e:	429a      	cmp	r2, r3
 8027b40:	d902      	bls.n	8027b48 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8027b42:	68fb      	ldr	r3, [r7, #12]
 8027b44:	68db      	ldr	r3, [r3, #12]
 8027b46:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8027b48:	69fb      	ldr	r3, [r7, #28]
 8027b4a:	3303      	adds	r3, #3
 8027b4c:	089b      	lsrs	r3, r3, #2
 8027b4e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8027b50:	e02b      	b.n	8027baa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8027b52:	68fb      	ldr	r3, [r7, #12]
 8027b54:	699a      	ldr	r2, [r3, #24]
 8027b56:	68fb      	ldr	r3, [r7, #12]
 8027b58:	6a1b      	ldr	r3, [r3, #32]
 8027b5a:	1ad3      	subs	r3, r2, r3
 8027b5c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8027b5e:	68fb      	ldr	r3, [r7, #12]
 8027b60:	68db      	ldr	r3, [r3, #12]
 8027b62:	69fa      	ldr	r2, [r7, #28]
 8027b64:	429a      	cmp	r2, r3
 8027b66:	d902      	bls.n	8027b6e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8027b68:	68fb      	ldr	r3, [r7, #12]
 8027b6a:	68db      	ldr	r3, [r3, #12]
 8027b6c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8027b6e:	69fb      	ldr	r3, [r7, #28]
 8027b70:	3303      	adds	r3, #3
 8027b72:	089b      	lsrs	r3, r3, #2
 8027b74:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8027b76:	68fb      	ldr	r3, [r7, #12]
 8027b78:	6919      	ldr	r1, [r3, #16]
 8027b7a:	683b      	ldr	r3, [r7, #0]
 8027b7c:	b2da      	uxtb	r2, r3
 8027b7e:	69fb      	ldr	r3, [r7, #28]
 8027b80:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8027b82:	687b      	ldr	r3, [r7, #4]
 8027b84:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8027b86:	b2db      	uxtb	r3, r3
 8027b88:	9300      	str	r3, [sp, #0]
 8027b8a:	4603      	mov	r3, r0
 8027b8c:	6978      	ldr	r0, [r7, #20]
 8027b8e:	f008 fb6f 	bl	8030270 <USB_WritePacket>

    ep->xfer_buff  += len;
 8027b92:	68fb      	ldr	r3, [r7, #12]
 8027b94:	691a      	ldr	r2, [r3, #16]
 8027b96:	69fb      	ldr	r3, [r7, #28]
 8027b98:	441a      	add	r2, r3
 8027b9a:	68fb      	ldr	r3, [r7, #12]
 8027b9c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8027b9e:	68fb      	ldr	r3, [r7, #12]
 8027ba0:	6a1a      	ldr	r2, [r3, #32]
 8027ba2:	69fb      	ldr	r3, [r7, #28]
 8027ba4:	441a      	add	r2, r3
 8027ba6:	68fb      	ldr	r3, [r7, #12]
 8027ba8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8027baa:	683b      	ldr	r3, [r7, #0]
 8027bac:	015a      	lsls	r2, r3, #5
 8027bae:	693b      	ldr	r3, [r7, #16]
 8027bb0:	4413      	add	r3, r2
 8027bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027bb6:	699b      	ldr	r3, [r3, #24]
 8027bb8:	b29b      	uxth	r3, r3
 8027bba:	69ba      	ldr	r2, [r7, #24]
 8027bbc:	429a      	cmp	r2, r3
 8027bbe:	d809      	bhi.n	8027bd4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8027bc0:	68fb      	ldr	r3, [r7, #12]
 8027bc2:	6a1a      	ldr	r2, [r3, #32]
 8027bc4:	68fb      	ldr	r3, [r7, #12]
 8027bc6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8027bc8:	429a      	cmp	r2, r3
 8027bca:	d203      	bcs.n	8027bd4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8027bcc:	68fb      	ldr	r3, [r7, #12]
 8027bce:	699b      	ldr	r3, [r3, #24]
 8027bd0:	2b00      	cmp	r3, #0
 8027bd2:	d1be      	bne.n	8027b52 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8027bd4:	68fb      	ldr	r3, [r7, #12]
 8027bd6:	699a      	ldr	r2, [r3, #24]
 8027bd8:	68fb      	ldr	r3, [r7, #12]
 8027bda:	6a1b      	ldr	r3, [r3, #32]
 8027bdc:	429a      	cmp	r2, r3
 8027bde:	d811      	bhi.n	8027c04 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8027be0:	683b      	ldr	r3, [r7, #0]
 8027be2:	f003 030f 	and.w	r3, r3, #15
 8027be6:	2201      	movs	r2, #1
 8027be8:	fa02 f303 	lsl.w	r3, r2, r3
 8027bec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8027bee:	693b      	ldr	r3, [r7, #16]
 8027bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8027bf6:	68bb      	ldr	r3, [r7, #8]
 8027bf8:	43db      	mvns	r3, r3
 8027bfa:	6939      	ldr	r1, [r7, #16]
 8027bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8027c00:	4013      	ands	r3, r2
 8027c02:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8027c04:	2300      	movs	r3, #0
}
 8027c06:	4618      	mov	r0, r3
 8027c08:	3720      	adds	r7, #32
 8027c0a:	46bd      	mov	sp, r7
 8027c0c:	bd80      	pop	{r7, pc}
	...

08027c10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8027c10:	b580      	push	{r7, lr}
 8027c12:	b088      	sub	sp, #32
 8027c14:	af00      	add	r7, sp, #0
 8027c16:	6078      	str	r0, [r7, #4]
 8027c18:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8027c1a:	687b      	ldr	r3, [r7, #4]
 8027c1c:	681b      	ldr	r3, [r3, #0]
 8027c1e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8027c20:	69fb      	ldr	r3, [r7, #28]
 8027c22:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8027c24:	69fb      	ldr	r3, [r7, #28]
 8027c26:	333c      	adds	r3, #60	; 0x3c
 8027c28:	3304      	adds	r3, #4
 8027c2a:	681b      	ldr	r3, [r3, #0]
 8027c2c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8027c2e:	683b      	ldr	r3, [r7, #0]
 8027c30:	015a      	lsls	r2, r3, #5
 8027c32:	69bb      	ldr	r3, [r7, #24]
 8027c34:	4413      	add	r3, r2
 8027c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027c3a:	689b      	ldr	r3, [r3, #8]
 8027c3c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8027c3e:	687b      	ldr	r3, [r7, #4]
 8027c40:	691b      	ldr	r3, [r3, #16]
 8027c42:	2b01      	cmp	r3, #1
 8027c44:	d17b      	bne.n	8027d3e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8027c46:	693b      	ldr	r3, [r7, #16]
 8027c48:	f003 0308 	and.w	r3, r3, #8
 8027c4c:	2b00      	cmp	r3, #0
 8027c4e:	d015      	beq.n	8027c7c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8027c50:	697b      	ldr	r3, [r7, #20]
 8027c52:	4a61      	ldr	r2, [pc, #388]	; (8027dd8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8027c54:	4293      	cmp	r3, r2
 8027c56:	f240 80b9 	bls.w	8027dcc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8027c5a:	693b      	ldr	r3, [r7, #16]
 8027c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8027c60:	2b00      	cmp	r3, #0
 8027c62:	f000 80b3 	beq.w	8027dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8027c66:	683b      	ldr	r3, [r7, #0]
 8027c68:	015a      	lsls	r2, r3, #5
 8027c6a:	69bb      	ldr	r3, [r7, #24]
 8027c6c:	4413      	add	r3, r2
 8027c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027c72:	461a      	mov	r2, r3
 8027c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8027c78:	6093      	str	r3, [r2, #8]
 8027c7a:	e0a7      	b.n	8027dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8027c7c:	693b      	ldr	r3, [r7, #16]
 8027c7e:	f003 0320 	and.w	r3, r3, #32
 8027c82:	2b00      	cmp	r3, #0
 8027c84:	d009      	beq.n	8027c9a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8027c86:	683b      	ldr	r3, [r7, #0]
 8027c88:	015a      	lsls	r2, r3, #5
 8027c8a:	69bb      	ldr	r3, [r7, #24]
 8027c8c:	4413      	add	r3, r2
 8027c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027c92:	461a      	mov	r2, r3
 8027c94:	2320      	movs	r3, #32
 8027c96:	6093      	str	r3, [r2, #8]
 8027c98:	e098      	b.n	8027dcc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8027c9a:	693b      	ldr	r3, [r7, #16]
 8027c9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8027ca0:	2b00      	cmp	r3, #0
 8027ca2:	f040 8093 	bne.w	8027dcc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8027ca6:	697b      	ldr	r3, [r7, #20]
 8027ca8:	4a4b      	ldr	r2, [pc, #300]	; (8027dd8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8027caa:	4293      	cmp	r3, r2
 8027cac:	d90f      	bls.n	8027cce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8027cae:	693b      	ldr	r3, [r7, #16]
 8027cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8027cb4:	2b00      	cmp	r3, #0
 8027cb6:	d00a      	beq.n	8027cce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8027cb8:	683b      	ldr	r3, [r7, #0]
 8027cba:	015a      	lsls	r2, r3, #5
 8027cbc:	69bb      	ldr	r3, [r7, #24]
 8027cbe:	4413      	add	r3, r2
 8027cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027cc4:	461a      	mov	r2, r3
 8027cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8027cca:	6093      	str	r3, [r2, #8]
 8027ccc:	e07e      	b.n	8027dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8027cce:	683a      	ldr	r2, [r7, #0]
 8027cd0:	4613      	mov	r3, r2
 8027cd2:	00db      	lsls	r3, r3, #3
 8027cd4:	4413      	add	r3, r2
 8027cd6:	009b      	lsls	r3, r3, #2
 8027cd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8027cdc:	687a      	ldr	r2, [r7, #4]
 8027cde:	4413      	add	r3, r2
 8027ce0:	3304      	adds	r3, #4
 8027ce2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8027ce4:	68fb      	ldr	r3, [r7, #12]
 8027ce6:	69da      	ldr	r2, [r3, #28]
 8027ce8:	683b      	ldr	r3, [r7, #0]
 8027cea:	0159      	lsls	r1, r3, #5
 8027cec:	69bb      	ldr	r3, [r7, #24]
 8027cee:	440b      	add	r3, r1
 8027cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027cf4:	691b      	ldr	r3, [r3, #16]
 8027cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8027cfa:	1ad2      	subs	r2, r2, r3
 8027cfc:	68fb      	ldr	r3, [r7, #12]
 8027cfe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8027d00:	683b      	ldr	r3, [r7, #0]
 8027d02:	2b00      	cmp	r3, #0
 8027d04:	d114      	bne.n	8027d30 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8027d06:	68fb      	ldr	r3, [r7, #12]
 8027d08:	699b      	ldr	r3, [r3, #24]
 8027d0a:	2b00      	cmp	r3, #0
 8027d0c:	d109      	bne.n	8027d22 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8027d0e:	687b      	ldr	r3, [r7, #4]
 8027d10:	6818      	ldr	r0, [r3, #0]
 8027d12:	687b      	ldr	r3, [r7, #4]
 8027d14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8027d18:	461a      	mov	r2, r3
 8027d1a:	2101      	movs	r1, #1
 8027d1c:	f008 fd40 	bl	80307a0 <USB_EP0_OutStart>
 8027d20:	e006      	b.n	8027d30 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8027d22:	68fb      	ldr	r3, [r7, #12]
 8027d24:	691a      	ldr	r2, [r3, #16]
 8027d26:	68fb      	ldr	r3, [r7, #12]
 8027d28:	6a1b      	ldr	r3, [r3, #32]
 8027d2a:	441a      	add	r2, r3
 8027d2c:	68fb      	ldr	r3, [r7, #12]
 8027d2e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8027d30:	683b      	ldr	r3, [r7, #0]
 8027d32:	b2db      	uxtb	r3, r3
 8027d34:	4619      	mov	r1, r3
 8027d36:	6878      	ldr	r0, [r7, #4]
 8027d38:	f00c fe18 	bl	803496c <HAL_PCD_DataOutStageCallback>
 8027d3c:	e046      	b.n	8027dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8027d3e:	697b      	ldr	r3, [r7, #20]
 8027d40:	4a26      	ldr	r2, [pc, #152]	; (8027ddc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8027d42:	4293      	cmp	r3, r2
 8027d44:	d124      	bne.n	8027d90 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8027d46:	693b      	ldr	r3, [r7, #16]
 8027d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8027d4c:	2b00      	cmp	r3, #0
 8027d4e:	d00a      	beq.n	8027d66 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8027d50:	683b      	ldr	r3, [r7, #0]
 8027d52:	015a      	lsls	r2, r3, #5
 8027d54:	69bb      	ldr	r3, [r7, #24]
 8027d56:	4413      	add	r3, r2
 8027d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027d5c:	461a      	mov	r2, r3
 8027d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8027d62:	6093      	str	r3, [r2, #8]
 8027d64:	e032      	b.n	8027dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8027d66:	693b      	ldr	r3, [r7, #16]
 8027d68:	f003 0320 	and.w	r3, r3, #32
 8027d6c:	2b00      	cmp	r3, #0
 8027d6e:	d008      	beq.n	8027d82 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8027d70:	683b      	ldr	r3, [r7, #0]
 8027d72:	015a      	lsls	r2, r3, #5
 8027d74:	69bb      	ldr	r3, [r7, #24]
 8027d76:	4413      	add	r3, r2
 8027d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027d7c:	461a      	mov	r2, r3
 8027d7e:	2320      	movs	r3, #32
 8027d80:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8027d82:	683b      	ldr	r3, [r7, #0]
 8027d84:	b2db      	uxtb	r3, r3
 8027d86:	4619      	mov	r1, r3
 8027d88:	6878      	ldr	r0, [r7, #4]
 8027d8a:	f00c fdef 	bl	803496c <HAL_PCD_DataOutStageCallback>
 8027d8e:	e01d      	b.n	8027dcc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8027d90:	683b      	ldr	r3, [r7, #0]
 8027d92:	2b00      	cmp	r3, #0
 8027d94:	d114      	bne.n	8027dc0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8027d96:	6879      	ldr	r1, [r7, #4]
 8027d98:	683a      	ldr	r2, [r7, #0]
 8027d9a:	4613      	mov	r3, r2
 8027d9c:	00db      	lsls	r3, r3, #3
 8027d9e:	4413      	add	r3, r2
 8027da0:	009b      	lsls	r3, r3, #2
 8027da2:	440b      	add	r3, r1
 8027da4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8027da8:	681b      	ldr	r3, [r3, #0]
 8027daa:	2b00      	cmp	r3, #0
 8027dac:	d108      	bne.n	8027dc0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8027dae:	687b      	ldr	r3, [r7, #4]
 8027db0:	6818      	ldr	r0, [r3, #0]
 8027db2:	687b      	ldr	r3, [r7, #4]
 8027db4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8027db8:	461a      	mov	r2, r3
 8027dba:	2100      	movs	r1, #0
 8027dbc:	f008 fcf0 	bl	80307a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8027dc0:	683b      	ldr	r3, [r7, #0]
 8027dc2:	b2db      	uxtb	r3, r3
 8027dc4:	4619      	mov	r1, r3
 8027dc6:	6878      	ldr	r0, [r7, #4]
 8027dc8:	f00c fdd0 	bl	803496c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8027dcc:	2300      	movs	r3, #0
}
 8027dce:	4618      	mov	r0, r3
 8027dd0:	3720      	adds	r7, #32
 8027dd2:	46bd      	mov	sp, r7
 8027dd4:	bd80      	pop	{r7, pc}
 8027dd6:	bf00      	nop
 8027dd8:	4f54300a 	.word	0x4f54300a
 8027ddc:	4f54310a 	.word	0x4f54310a

08027de0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8027de0:	b580      	push	{r7, lr}
 8027de2:	b086      	sub	sp, #24
 8027de4:	af00      	add	r7, sp, #0
 8027de6:	6078      	str	r0, [r7, #4]
 8027de8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8027dea:	687b      	ldr	r3, [r7, #4]
 8027dec:	681b      	ldr	r3, [r3, #0]
 8027dee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8027df0:	697b      	ldr	r3, [r7, #20]
 8027df2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8027df4:	697b      	ldr	r3, [r7, #20]
 8027df6:	333c      	adds	r3, #60	; 0x3c
 8027df8:	3304      	adds	r3, #4
 8027dfa:	681b      	ldr	r3, [r3, #0]
 8027dfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8027dfe:	683b      	ldr	r3, [r7, #0]
 8027e00:	015a      	lsls	r2, r3, #5
 8027e02:	693b      	ldr	r3, [r7, #16]
 8027e04:	4413      	add	r3, r2
 8027e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027e0a:	689b      	ldr	r3, [r3, #8]
 8027e0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8027e0e:	68fb      	ldr	r3, [r7, #12]
 8027e10:	4a15      	ldr	r2, [pc, #84]	; (8027e68 <PCD_EP_OutSetupPacket_int+0x88>)
 8027e12:	4293      	cmp	r3, r2
 8027e14:	d90e      	bls.n	8027e34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8027e16:	68bb      	ldr	r3, [r7, #8]
 8027e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8027e1c:	2b00      	cmp	r3, #0
 8027e1e:	d009      	beq.n	8027e34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8027e20:	683b      	ldr	r3, [r7, #0]
 8027e22:	015a      	lsls	r2, r3, #5
 8027e24:	693b      	ldr	r3, [r7, #16]
 8027e26:	4413      	add	r3, r2
 8027e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027e2c:	461a      	mov	r2, r3
 8027e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8027e32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8027e34:	6878      	ldr	r0, [r7, #4]
 8027e36:	f00c fd87 	bl	8034948 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8027e3a:	68fb      	ldr	r3, [r7, #12]
 8027e3c:	4a0a      	ldr	r2, [pc, #40]	; (8027e68 <PCD_EP_OutSetupPacket_int+0x88>)
 8027e3e:	4293      	cmp	r3, r2
 8027e40:	d90c      	bls.n	8027e5c <PCD_EP_OutSetupPacket_int+0x7c>
 8027e42:	687b      	ldr	r3, [r7, #4]
 8027e44:	691b      	ldr	r3, [r3, #16]
 8027e46:	2b01      	cmp	r3, #1
 8027e48:	d108      	bne.n	8027e5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8027e4a:	687b      	ldr	r3, [r7, #4]
 8027e4c:	6818      	ldr	r0, [r3, #0]
 8027e4e:	687b      	ldr	r3, [r7, #4]
 8027e50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8027e54:	461a      	mov	r2, r3
 8027e56:	2101      	movs	r1, #1
 8027e58:	f008 fca2 	bl	80307a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8027e5c:	2300      	movs	r3, #0
}
 8027e5e:	4618      	mov	r0, r3
 8027e60:	3718      	adds	r7, #24
 8027e62:	46bd      	mov	sp, r7
 8027e64:	bd80      	pop	{r7, pc}
 8027e66:	bf00      	nop
 8027e68:	4f54300a 	.word	0x4f54300a

08027e6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8027e6c:	b480      	push	{r7}
 8027e6e:	b085      	sub	sp, #20
 8027e70:	af00      	add	r7, sp, #0
 8027e72:	6078      	str	r0, [r7, #4]
 8027e74:	460b      	mov	r3, r1
 8027e76:	70fb      	strb	r3, [r7, #3]
 8027e78:	4613      	mov	r3, r2
 8027e7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8027e7c:	687b      	ldr	r3, [r7, #4]
 8027e7e:	681b      	ldr	r3, [r3, #0]
 8027e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027e82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8027e84:	78fb      	ldrb	r3, [r7, #3]
 8027e86:	2b00      	cmp	r3, #0
 8027e88:	d107      	bne.n	8027e9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8027e8a:	883b      	ldrh	r3, [r7, #0]
 8027e8c:	0419      	lsls	r1, r3, #16
 8027e8e:	687b      	ldr	r3, [r7, #4]
 8027e90:	681b      	ldr	r3, [r3, #0]
 8027e92:	68ba      	ldr	r2, [r7, #8]
 8027e94:	430a      	orrs	r2, r1
 8027e96:	629a      	str	r2, [r3, #40]	; 0x28
 8027e98:	e028      	b.n	8027eec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8027e9a:	687b      	ldr	r3, [r7, #4]
 8027e9c:	681b      	ldr	r3, [r3, #0]
 8027e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027ea0:	0c1b      	lsrs	r3, r3, #16
 8027ea2:	68ba      	ldr	r2, [r7, #8]
 8027ea4:	4413      	add	r3, r2
 8027ea6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8027ea8:	2300      	movs	r3, #0
 8027eaa:	73fb      	strb	r3, [r7, #15]
 8027eac:	e00d      	b.n	8027eca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8027eae:	687b      	ldr	r3, [r7, #4]
 8027eb0:	681a      	ldr	r2, [r3, #0]
 8027eb2:	7bfb      	ldrb	r3, [r7, #15]
 8027eb4:	3340      	adds	r3, #64	; 0x40
 8027eb6:	009b      	lsls	r3, r3, #2
 8027eb8:	4413      	add	r3, r2
 8027eba:	685b      	ldr	r3, [r3, #4]
 8027ebc:	0c1b      	lsrs	r3, r3, #16
 8027ebe:	68ba      	ldr	r2, [r7, #8]
 8027ec0:	4413      	add	r3, r2
 8027ec2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8027ec4:	7bfb      	ldrb	r3, [r7, #15]
 8027ec6:	3301      	adds	r3, #1
 8027ec8:	73fb      	strb	r3, [r7, #15]
 8027eca:	7bfa      	ldrb	r2, [r7, #15]
 8027ecc:	78fb      	ldrb	r3, [r7, #3]
 8027ece:	3b01      	subs	r3, #1
 8027ed0:	429a      	cmp	r2, r3
 8027ed2:	d3ec      	bcc.n	8027eae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8027ed4:	883b      	ldrh	r3, [r7, #0]
 8027ed6:	0418      	lsls	r0, r3, #16
 8027ed8:	687b      	ldr	r3, [r7, #4]
 8027eda:	6819      	ldr	r1, [r3, #0]
 8027edc:	78fb      	ldrb	r3, [r7, #3]
 8027ede:	3b01      	subs	r3, #1
 8027ee0:	68ba      	ldr	r2, [r7, #8]
 8027ee2:	4302      	orrs	r2, r0
 8027ee4:	3340      	adds	r3, #64	; 0x40
 8027ee6:	009b      	lsls	r3, r3, #2
 8027ee8:	440b      	add	r3, r1
 8027eea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8027eec:	2300      	movs	r3, #0
}
 8027eee:	4618      	mov	r0, r3
 8027ef0:	3714      	adds	r7, #20
 8027ef2:	46bd      	mov	sp, r7
 8027ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ef8:	4770      	bx	lr

08027efa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8027efa:	b480      	push	{r7}
 8027efc:	b083      	sub	sp, #12
 8027efe:	af00      	add	r7, sp, #0
 8027f00:	6078      	str	r0, [r7, #4]
 8027f02:	460b      	mov	r3, r1
 8027f04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8027f06:	687b      	ldr	r3, [r7, #4]
 8027f08:	681b      	ldr	r3, [r3, #0]
 8027f0a:	887a      	ldrh	r2, [r7, #2]
 8027f0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8027f0e:	2300      	movs	r3, #0
}
 8027f10:	4618      	mov	r0, r3
 8027f12:	370c      	adds	r7, #12
 8027f14:	46bd      	mov	sp, r7
 8027f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f1a:	4770      	bx	lr

08027f1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8027f1c:	b480      	push	{r7}
 8027f1e:	b085      	sub	sp, #20
 8027f20:	af00      	add	r7, sp, #0
 8027f22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8027f24:	687b      	ldr	r3, [r7, #4]
 8027f26:	681b      	ldr	r3, [r3, #0]
 8027f28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8027f2a:	687b      	ldr	r3, [r7, #4]
 8027f2c:	2201      	movs	r2, #1
 8027f2e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8027f32:	687b      	ldr	r3, [r7, #4]
 8027f34:	2200      	movs	r2, #0
 8027f36:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8027f3a:	68fb      	ldr	r3, [r7, #12]
 8027f3c:	699b      	ldr	r3, [r3, #24]
 8027f3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8027f42:	68fb      	ldr	r3, [r7, #12]
 8027f44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8027f46:	68fb      	ldr	r3, [r7, #12]
 8027f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8027f4a:	4b05      	ldr	r3, [pc, #20]	; (8027f60 <HAL_PCDEx_ActivateLPM+0x44>)
 8027f4c:	4313      	orrs	r3, r2
 8027f4e:	68fa      	ldr	r2, [r7, #12]
 8027f50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8027f52:	2300      	movs	r3, #0
}
 8027f54:	4618      	mov	r0, r3
 8027f56:	3714      	adds	r7, #20
 8027f58:	46bd      	mov	sp, r7
 8027f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f5e:	4770      	bx	lr
 8027f60:	10000003 	.word	0x10000003

08027f64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8027f64:	b480      	push	{r7}
 8027f66:	b083      	sub	sp, #12
 8027f68:	af00      	add	r7, sp, #0
 8027f6a:	6078      	str	r0, [r7, #4]
 8027f6c:	460b      	mov	r3, r1
 8027f6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8027f70:	bf00      	nop
 8027f72:	370c      	adds	r7, #12
 8027f74:	46bd      	mov	sp, r7
 8027f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f7a:	4770      	bx	lr

08027f7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8027f7c:	b580      	push	{r7, lr}
 8027f7e:	b084      	sub	sp, #16
 8027f80:	af00      	add	r7, sp, #0
 8027f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8027f84:	4b19      	ldr	r3, [pc, #100]	; (8027fec <HAL_PWREx_ConfigSupply+0x70>)
 8027f86:	68db      	ldr	r3, [r3, #12]
 8027f88:	f003 0304 	and.w	r3, r3, #4
 8027f8c:	2b04      	cmp	r3, #4
 8027f8e:	d00a      	beq.n	8027fa6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8027f90:	4b16      	ldr	r3, [pc, #88]	; (8027fec <HAL_PWREx_ConfigSupply+0x70>)
 8027f92:	68db      	ldr	r3, [r3, #12]
 8027f94:	f003 0307 	and.w	r3, r3, #7
 8027f98:	687a      	ldr	r2, [r7, #4]
 8027f9a:	429a      	cmp	r2, r3
 8027f9c:	d001      	beq.n	8027fa2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8027f9e:	2301      	movs	r3, #1
 8027fa0:	e01f      	b.n	8027fe2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8027fa2:	2300      	movs	r3, #0
 8027fa4:	e01d      	b.n	8027fe2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8027fa6:	4b11      	ldr	r3, [pc, #68]	; (8027fec <HAL_PWREx_ConfigSupply+0x70>)
 8027fa8:	68db      	ldr	r3, [r3, #12]
 8027faa:	f023 0207 	bic.w	r2, r3, #7
 8027fae:	490f      	ldr	r1, [pc, #60]	; (8027fec <HAL_PWREx_ConfigSupply+0x70>)
 8027fb0:	687b      	ldr	r3, [r7, #4]
 8027fb2:	4313      	orrs	r3, r2
 8027fb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8027fb6:	f7fa f843 	bl	8022040 <HAL_GetTick>
 8027fba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8027fbc:	e009      	b.n	8027fd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8027fbe:	f7fa f83f 	bl	8022040 <HAL_GetTick>
 8027fc2:	4602      	mov	r2, r0
 8027fc4:	68fb      	ldr	r3, [r7, #12]
 8027fc6:	1ad3      	subs	r3, r2, r3
 8027fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8027fcc:	d901      	bls.n	8027fd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8027fce:	2301      	movs	r3, #1
 8027fd0:	e007      	b.n	8027fe2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8027fd2:	4b06      	ldr	r3, [pc, #24]	; (8027fec <HAL_PWREx_ConfigSupply+0x70>)
 8027fd4:	685b      	ldr	r3, [r3, #4]
 8027fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8027fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027fde:	d1ee      	bne.n	8027fbe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8027fe0:	2300      	movs	r3, #0
}
 8027fe2:	4618      	mov	r0, r3
 8027fe4:	3710      	adds	r7, #16
 8027fe6:	46bd      	mov	sp, r7
 8027fe8:	bd80      	pop	{r7, pc}
 8027fea:	bf00      	nop
 8027fec:	58024800 	.word	0x58024800

08027ff0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8027ff0:	b480      	push	{r7}
 8027ff2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8027ff4:	4b05      	ldr	r3, [pc, #20]	; (802800c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8027ff6:	68db      	ldr	r3, [r3, #12]
 8027ff8:	4a04      	ldr	r2, [pc, #16]	; (802800c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8027ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027ffe:	60d3      	str	r3, [r2, #12]
}
 8028000:	bf00      	nop
 8028002:	46bd      	mov	sp, r7
 8028004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028008:	4770      	bx	lr
 802800a:	bf00      	nop
 802800c:	58024800 	.word	0x58024800

08028010 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8028010:	b580      	push	{r7, lr}
 8028012:	b08c      	sub	sp, #48	; 0x30
 8028014:	af00      	add	r7, sp, #0
 8028016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8028018:	687b      	ldr	r3, [r7, #4]
 802801a:	2b00      	cmp	r3, #0
 802801c:	d102      	bne.n	8028024 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 802801e:	2301      	movs	r3, #1
 8028020:	f000 bc1d 	b.w	802885e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8028024:	687b      	ldr	r3, [r7, #4]
 8028026:	681b      	ldr	r3, [r3, #0]
 8028028:	f003 0301 	and.w	r3, r3, #1
 802802c:	2b00      	cmp	r3, #0
 802802e:	f000 8087 	beq.w	8028140 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8028032:	4b99      	ldr	r3, [pc, #612]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028034:	691b      	ldr	r3, [r3, #16]
 8028036:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802803a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 802803c:	4b96      	ldr	r3, [pc, #600]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 802803e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028040:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8028042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028044:	2b10      	cmp	r3, #16
 8028046:	d007      	beq.n	8028058 <HAL_RCC_OscConfig+0x48>
 8028048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802804a:	2b18      	cmp	r3, #24
 802804c:	d110      	bne.n	8028070 <HAL_RCC_OscConfig+0x60>
 802804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028050:	f003 0303 	and.w	r3, r3, #3
 8028054:	2b02      	cmp	r3, #2
 8028056:	d10b      	bne.n	8028070 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8028058:	4b8f      	ldr	r3, [pc, #572]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 802805a:	681b      	ldr	r3, [r3, #0]
 802805c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028060:	2b00      	cmp	r3, #0
 8028062:	d06c      	beq.n	802813e <HAL_RCC_OscConfig+0x12e>
 8028064:	687b      	ldr	r3, [r7, #4]
 8028066:	685b      	ldr	r3, [r3, #4]
 8028068:	2b00      	cmp	r3, #0
 802806a:	d168      	bne.n	802813e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 802806c:	2301      	movs	r3, #1
 802806e:	e3f6      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8028070:	687b      	ldr	r3, [r7, #4]
 8028072:	685b      	ldr	r3, [r3, #4]
 8028074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8028078:	d106      	bne.n	8028088 <HAL_RCC_OscConfig+0x78>
 802807a:	4b87      	ldr	r3, [pc, #540]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 802807c:	681b      	ldr	r3, [r3, #0]
 802807e:	4a86      	ldr	r2, [pc, #536]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028084:	6013      	str	r3, [r2, #0]
 8028086:	e02e      	b.n	80280e6 <HAL_RCC_OscConfig+0xd6>
 8028088:	687b      	ldr	r3, [r7, #4]
 802808a:	685b      	ldr	r3, [r3, #4]
 802808c:	2b00      	cmp	r3, #0
 802808e:	d10c      	bne.n	80280aa <HAL_RCC_OscConfig+0x9a>
 8028090:	4b81      	ldr	r3, [pc, #516]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028092:	681b      	ldr	r3, [r3, #0]
 8028094:	4a80      	ldr	r2, [pc, #512]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802809a:	6013      	str	r3, [r2, #0]
 802809c:	4b7e      	ldr	r3, [pc, #504]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 802809e:	681b      	ldr	r3, [r3, #0]
 80280a0:	4a7d      	ldr	r2, [pc, #500]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80280a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80280a6:	6013      	str	r3, [r2, #0]
 80280a8:	e01d      	b.n	80280e6 <HAL_RCC_OscConfig+0xd6>
 80280aa:	687b      	ldr	r3, [r7, #4]
 80280ac:	685b      	ldr	r3, [r3, #4]
 80280ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80280b2:	d10c      	bne.n	80280ce <HAL_RCC_OscConfig+0xbe>
 80280b4:	4b78      	ldr	r3, [pc, #480]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80280b6:	681b      	ldr	r3, [r3, #0]
 80280b8:	4a77      	ldr	r2, [pc, #476]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80280ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80280be:	6013      	str	r3, [r2, #0]
 80280c0:	4b75      	ldr	r3, [pc, #468]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80280c2:	681b      	ldr	r3, [r3, #0]
 80280c4:	4a74      	ldr	r2, [pc, #464]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80280c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80280ca:	6013      	str	r3, [r2, #0]
 80280cc:	e00b      	b.n	80280e6 <HAL_RCC_OscConfig+0xd6>
 80280ce:	4b72      	ldr	r3, [pc, #456]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80280d0:	681b      	ldr	r3, [r3, #0]
 80280d2:	4a71      	ldr	r2, [pc, #452]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80280d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80280d8:	6013      	str	r3, [r2, #0]
 80280da:	4b6f      	ldr	r3, [pc, #444]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80280dc:	681b      	ldr	r3, [r3, #0]
 80280de:	4a6e      	ldr	r2, [pc, #440]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80280e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80280e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80280e6:	687b      	ldr	r3, [r7, #4]
 80280e8:	685b      	ldr	r3, [r3, #4]
 80280ea:	2b00      	cmp	r3, #0
 80280ec:	d013      	beq.n	8028116 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80280ee:	f7f9 ffa7 	bl	8022040 <HAL_GetTick>
 80280f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80280f4:	e008      	b.n	8028108 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80280f6:	f7f9 ffa3 	bl	8022040 <HAL_GetTick>
 80280fa:	4602      	mov	r2, r0
 80280fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80280fe:	1ad3      	subs	r3, r2, r3
 8028100:	2b64      	cmp	r3, #100	; 0x64
 8028102:	d901      	bls.n	8028108 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8028104:	2303      	movs	r3, #3
 8028106:	e3aa      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8028108:	4b63      	ldr	r3, [pc, #396]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 802810a:	681b      	ldr	r3, [r3, #0]
 802810c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028110:	2b00      	cmp	r3, #0
 8028112:	d0f0      	beq.n	80280f6 <HAL_RCC_OscConfig+0xe6>
 8028114:	e014      	b.n	8028140 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028116:	f7f9 ff93 	bl	8022040 <HAL_GetTick>
 802811a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 802811c:	e008      	b.n	8028130 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802811e:	f7f9 ff8f 	bl	8022040 <HAL_GetTick>
 8028122:	4602      	mov	r2, r0
 8028124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028126:	1ad3      	subs	r3, r2, r3
 8028128:	2b64      	cmp	r3, #100	; 0x64
 802812a:	d901      	bls.n	8028130 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 802812c:	2303      	movs	r3, #3
 802812e:	e396      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8028130:	4b59      	ldr	r3, [pc, #356]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028132:	681b      	ldr	r3, [r3, #0]
 8028134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028138:	2b00      	cmp	r3, #0
 802813a:	d1f0      	bne.n	802811e <HAL_RCC_OscConfig+0x10e>
 802813c:	e000      	b.n	8028140 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802813e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8028140:	687b      	ldr	r3, [r7, #4]
 8028142:	681b      	ldr	r3, [r3, #0]
 8028144:	f003 0302 	and.w	r3, r3, #2
 8028148:	2b00      	cmp	r3, #0
 802814a:	f000 80cb 	beq.w	80282e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802814e:	4b52      	ldr	r3, [pc, #328]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028150:	691b      	ldr	r3, [r3, #16]
 8028152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8028156:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8028158:	4b4f      	ldr	r3, [pc, #316]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 802815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802815c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 802815e:	6a3b      	ldr	r3, [r7, #32]
 8028160:	2b00      	cmp	r3, #0
 8028162:	d007      	beq.n	8028174 <HAL_RCC_OscConfig+0x164>
 8028164:	6a3b      	ldr	r3, [r7, #32]
 8028166:	2b18      	cmp	r3, #24
 8028168:	d156      	bne.n	8028218 <HAL_RCC_OscConfig+0x208>
 802816a:	69fb      	ldr	r3, [r7, #28]
 802816c:	f003 0303 	and.w	r3, r3, #3
 8028170:	2b00      	cmp	r3, #0
 8028172:	d151      	bne.n	8028218 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8028174:	4b48      	ldr	r3, [pc, #288]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028176:	681b      	ldr	r3, [r3, #0]
 8028178:	f003 0304 	and.w	r3, r3, #4
 802817c:	2b00      	cmp	r3, #0
 802817e:	d005      	beq.n	802818c <HAL_RCC_OscConfig+0x17c>
 8028180:	687b      	ldr	r3, [r7, #4]
 8028182:	68db      	ldr	r3, [r3, #12]
 8028184:	2b00      	cmp	r3, #0
 8028186:	d101      	bne.n	802818c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8028188:	2301      	movs	r3, #1
 802818a:	e368      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 802818c:	4b42      	ldr	r3, [pc, #264]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 802818e:	681b      	ldr	r3, [r3, #0]
 8028190:	f023 0219 	bic.w	r2, r3, #25
 8028194:	687b      	ldr	r3, [r7, #4]
 8028196:	68db      	ldr	r3, [r3, #12]
 8028198:	493f      	ldr	r1, [pc, #252]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 802819a:	4313      	orrs	r3, r2
 802819c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 802819e:	f7f9 ff4f 	bl	8022040 <HAL_GetTick>
 80281a2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80281a4:	e008      	b.n	80281b8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80281a6:	f7f9 ff4b 	bl	8022040 <HAL_GetTick>
 80281aa:	4602      	mov	r2, r0
 80281ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80281ae:	1ad3      	subs	r3, r2, r3
 80281b0:	2b02      	cmp	r3, #2
 80281b2:	d901      	bls.n	80281b8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80281b4:	2303      	movs	r3, #3
 80281b6:	e352      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80281b8:	4b37      	ldr	r3, [pc, #220]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80281ba:	681b      	ldr	r3, [r3, #0]
 80281bc:	f003 0304 	and.w	r3, r3, #4
 80281c0:	2b00      	cmp	r3, #0
 80281c2:	d0f0      	beq.n	80281a6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80281c4:	f7f9 ff6c 	bl	80220a0 <HAL_GetREVID>
 80281c8:	4603      	mov	r3, r0
 80281ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80281ce:	4293      	cmp	r3, r2
 80281d0:	d817      	bhi.n	8028202 <HAL_RCC_OscConfig+0x1f2>
 80281d2:	687b      	ldr	r3, [r7, #4]
 80281d4:	691b      	ldr	r3, [r3, #16]
 80281d6:	2b40      	cmp	r3, #64	; 0x40
 80281d8:	d108      	bne.n	80281ec <HAL_RCC_OscConfig+0x1dc>
 80281da:	4b2f      	ldr	r3, [pc, #188]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80281dc:	685b      	ldr	r3, [r3, #4]
 80281de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80281e2:	4a2d      	ldr	r2, [pc, #180]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80281e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80281e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80281ea:	e07b      	b.n	80282e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80281ec:	4b2a      	ldr	r3, [pc, #168]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80281ee:	685b      	ldr	r3, [r3, #4]
 80281f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80281f4:	687b      	ldr	r3, [r7, #4]
 80281f6:	691b      	ldr	r3, [r3, #16]
 80281f8:	031b      	lsls	r3, r3, #12
 80281fa:	4927      	ldr	r1, [pc, #156]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 80281fc:	4313      	orrs	r3, r2
 80281fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8028200:	e070      	b.n	80282e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8028202:	4b25      	ldr	r3, [pc, #148]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028204:	685b      	ldr	r3, [r3, #4]
 8028206:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 802820a:	687b      	ldr	r3, [r7, #4]
 802820c:	691b      	ldr	r3, [r3, #16]
 802820e:	061b      	lsls	r3, r3, #24
 8028210:	4921      	ldr	r1, [pc, #132]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028212:	4313      	orrs	r3, r2
 8028214:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8028216:	e065      	b.n	80282e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8028218:	687b      	ldr	r3, [r7, #4]
 802821a:	68db      	ldr	r3, [r3, #12]
 802821c:	2b00      	cmp	r3, #0
 802821e:	d048      	beq.n	80282b2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8028220:	4b1d      	ldr	r3, [pc, #116]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028222:	681b      	ldr	r3, [r3, #0]
 8028224:	f023 0219 	bic.w	r2, r3, #25
 8028228:	687b      	ldr	r3, [r7, #4]
 802822a:	68db      	ldr	r3, [r3, #12]
 802822c:	491a      	ldr	r1, [pc, #104]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 802822e:	4313      	orrs	r3, r2
 8028230:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028232:	f7f9 ff05 	bl	8022040 <HAL_GetTick>
 8028236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8028238:	e008      	b.n	802824c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802823a:	f7f9 ff01 	bl	8022040 <HAL_GetTick>
 802823e:	4602      	mov	r2, r0
 8028240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028242:	1ad3      	subs	r3, r2, r3
 8028244:	2b02      	cmp	r3, #2
 8028246:	d901      	bls.n	802824c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8028248:	2303      	movs	r3, #3
 802824a:	e308      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802824c:	4b12      	ldr	r3, [pc, #72]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 802824e:	681b      	ldr	r3, [r3, #0]
 8028250:	f003 0304 	and.w	r3, r3, #4
 8028254:	2b00      	cmp	r3, #0
 8028256:	d0f0      	beq.n	802823a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8028258:	f7f9 ff22 	bl	80220a0 <HAL_GetREVID>
 802825c:	4603      	mov	r3, r0
 802825e:	f241 0203 	movw	r2, #4099	; 0x1003
 8028262:	4293      	cmp	r3, r2
 8028264:	d81a      	bhi.n	802829c <HAL_RCC_OscConfig+0x28c>
 8028266:	687b      	ldr	r3, [r7, #4]
 8028268:	691b      	ldr	r3, [r3, #16]
 802826a:	2b40      	cmp	r3, #64	; 0x40
 802826c:	d108      	bne.n	8028280 <HAL_RCC_OscConfig+0x270>
 802826e:	4b0a      	ldr	r3, [pc, #40]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028270:	685b      	ldr	r3, [r3, #4]
 8028272:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8028276:	4a08      	ldr	r2, [pc, #32]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802827c:	6053      	str	r3, [r2, #4]
 802827e:	e031      	b.n	80282e4 <HAL_RCC_OscConfig+0x2d4>
 8028280:	4b05      	ldr	r3, [pc, #20]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028282:	685b      	ldr	r3, [r3, #4]
 8028284:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8028288:	687b      	ldr	r3, [r7, #4]
 802828a:	691b      	ldr	r3, [r3, #16]
 802828c:	031b      	lsls	r3, r3, #12
 802828e:	4902      	ldr	r1, [pc, #8]	; (8028298 <HAL_RCC_OscConfig+0x288>)
 8028290:	4313      	orrs	r3, r2
 8028292:	604b      	str	r3, [r1, #4]
 8028294:	e026      	b.n	80282e4 <HAL_RCC_OscConfig+0x2d4>
 8028296:	bf00      	nop
 8028298:	58024400 	.word	0x58024400
 802829c:	4b9a      	ldr	r3, [pc, #616]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 802829e:	685b      	ldr	r3, [r3, #4]
 80282a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80282a4:	687b      	ldr	r3, [r7, #4]
 80282a6:	691b      	ldr	r3, [r3, #16]
 80282a8:	061b      	lsls	r3, r3, #24
 80282aa:	4997      	ldr	r1, [pc, #604]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80282ac:	4313      	orrs	r3, r2
 80282ae:	604b      	str	r3, [r1, #4]
 80282b0:	e018      	b.n	80282e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80282b2:	4b95      	ldr	r3, [pc, #596]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80282b4:	681b      	ldr	r3, [r3, #0]
 80282b6:	4a94      	ldr	r2, [pc, #592]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80282b8:	f023 0301 	bic.w	r3, r3, #1
 80282bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80282be:	f7f9 febf 	bl	8022040 <HAL_GetTick>
 80282c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80282c4:	e008      	b.n	80282d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80282c6:	f7f9 febb 	bl	8022040 <HAL_GetTick>
 80282ca:	4602      	mov	r2, r0
 80282cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80282ce:	1ad3      	subs	r3, r2, r3
 80282d0:	2b02      	cmp	r3, #2
 80282d2:	d901      	bls.n	80282d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80282d4:	2303      	movs	r3, #3
 80282d6:	e2c2      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80282d8:	4b8b      	ldr	r3, [pc, #556]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80282da:	681b      	ldr	r3, [r3, #0]
 80282dc:	f003 0304 	and.w	r3, r3, #4
 80282e0:	2b00      	cmp	r3, #0
 80282e2:	d1f0      	bne.n	80282c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80282e4:	687b      	ldr	r3, [r7, #4]
 80282e6:	681b      	ldr	r3, [r3, #0]
 80282e8:	f003 0310 	and.w	r3, r3, #16
 80282ec:	2b00      	cmp	r3, #0
 80282ee:	f000 80a9 	beq.w	8028444 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80282f2:	4b85      	ldr	r3, [pc, #532]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80282f4:	691b      	ldr	r3, [r3, #16]
 80282f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80282fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80282fc:	4b82      	ldr	r3, [pc, #520]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80282fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028300:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8028302:	69bb      	ldr	r3, [r7, #24]
 8028304:	2b08      	cmp	r3, #8
 8028306:	d007      	beq.n	8028318 <HAL_RCC_OscConfig+0x308>
 8028308:	69bb      	ldr	r3, [r7, #24]
 802830a:	2b18      	cmp	r3, #24
 802830c:	d13a      	bne.n	8028384 <HAL_RCC_OscConfig+0x374>
 802830e:	697b      	ldr	r3, [r7, #20]
 8028310:	f003 0303 	and.w	r3, r3, #3
 8028314:	2b01      	cmp	r3, #1
 8028316:	d135      	bne.n	8028384 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8028318:	4b7b      	ldr	r3, [pc, #492]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 802831a:	681b      	ldr	r3, [r3, #0]
 802831c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028320:	2b00      	cmp	r3, #0
 8028322:	d005      	beq.n	8028330 <HAL_RCC_OscConfig+0x320>
 8028324:	687b      	ldr	r3, [r7, #4]
 8028326:	69db      	ldr	r3, [r3, #28]
 8028328:	2b80      	cmp	r3, #128	; 0x80
 802832a:	d001      	beq.n	8028330 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 802832c:	2301      	movs	r3, #1
 802832e:	e296      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8028330:	f7f9 feb6 	bl	80220a0 <HAL_GetREVID>
 8028334:	4603      	mov	r3, r0
 8028336:	f241 0203 	movw	r2, #4099	; 0x1003
 802833a:	4293      	cmp	r3, r2
 802833c:	d817      	bhi.n	802836e <HAL_RCC_OscConfig+0x35e>
 802833e:	687b      	ldr	r3, [r7, #4]
 8028340:	6a1b      	ldr	r3, [r3, #32]
 8028342:	2b20      	cmp	r3, #32
 8028344:	d108      	bne.n	8028358 <HAL_RCC_OscConfig+0x348>
 8028346:	4b70      	ldr	r3, [pc, #448]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 8028348:	685b      	ldr	r3, [r3, #4]
 802834a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 802834e:	4a6e      	ldr	r2, [pc, #440]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 8028350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8028354:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8028356:	e075      	b.n	8028444 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8028358:	4b6b      	ldr	r3, [pc, #428]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 802835a:	685b      	ldr	r3, [r3, #4]
 802835c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8028360:	687b      	ldr	r3, [r7, #4]
 8028362:	6a1b      	ldr	r3, [r3, #32]
 8028364:	069b      	lsls	r3, r3, #26
 8028366:	4968      	ldr	r1, [pc, #416]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 8028368:	4313      	orrs	r3, r2
 802836a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802836c:	e06a      	b.n	8028444 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802836e:	4b66      	ldr	r3, [pc, #408]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 8028370:	68db      	ldr	r3, [r3, #12]
 8028372:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8028376:	687b      	ldr	r3, [r7, #4]
 8028378:	6a1b      	ldr	r3, [r3, #32]
 802837a:	061b      	lsls	r3, r3, #24
 802837c:	4962      	ldr	r1, [pc, #392]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 802837e:	4313      	orrs	r3, r2
 8028380:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8028382:	e05f      	b.n	8028444 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8028384:	687b      	ldr	r3, [r7, #4]
 8028386:	69db      	ldr	r3, [r3, #28]
 8028388:	2b00      	cmp	r3, #0
 802838a:	d042      	beq.n	8028412 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 802838c:	4b5e      	ldr	r3, [pc, #376]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 802838e:	681b      	ldr	r3, [r3, #0]
 8028390:	4a5d      	ldr	r2, [pc, #372]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 8028392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028398:	f7f9 fe52 	bl	8022040 <HAL_GetTick>
 802839c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802839e:	e008      	b.n	80283b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80283a0:	f7f9 fe4e 	bl	8022040 <HAL_GetTick>
 80283a4:	4602      	mov	r2, r0
 80283a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80283a8:	1ad3      	subs	r3, r2, r3
 80283aa:	2b02      	cmp	r3, #2
 80283ac:	d901      	bls.n	80283b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80283ae:	2303      	movs	r3, #3
 80283b0:	e255      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80283b2:	4b55      	ldr	r3, [pc, #340]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80283b4:	681b      	ldr	r3, [r3, #0]
 80283b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80283ba:	2b00      	cmp	r3, #0
 80283bc:	d0f0      	beq.n	80283a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80283be:	f7f9 fe6f 	bl	80220a0 <HAL_GetREVID>
 80283c2:	4603      	mov	r3, r0
 80283c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80283c8:	4293      	cmp	r3, r2
 80283ca:	d817      	bhi.n	80283fc <HAL_RCC_OscConfig+0x3ec>
 80283cc:	687b      	ldr	r3, [r7, #4]
 80283ce:	6a1b      	ldr	r3, [r3, #32]
 80283d0:	2b20      	cmp	r3, #32
 80283d2:	d108      	bne.n	80283e6 <HAL_RCC_OscConfig+0x3d6>
 80283d4:	4b4c      	ldr	r3, [pc, #304]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80283d6:	685b      	ldr	r3, [r3, #4]
 80283d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80283dc:	4a4a      	ldr	r2, [pc, #296]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80283de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80283e2:	6053      	str	r3, [r2, #4]
 80283e4:	e02e      	b.n	8028444 <HAL_RCC_OscConfig+0x434>
 80283e6:	4b48      	ldr	r3, [pc, #288]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80283e8:	685b      	ldr	r3, [r3, #4]
 80283ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80283ee:	687b      	ldr	r3, [r7, #4]
 80283f0:	6a1b      	ldr	r3, [r3, #32]
 80283f2:	069b      	lsls	r3, r3, #26
 80283f4:	4944      	ldr	r1, [pc, #272]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80283f6:	4313      	orrs	r3, r2
 80283f8:	604b      	str	r3, [r1, #4]
 80283fa:	e023      	b.n	8028444 <HAL_RCC_OscConfig+0x434>
 80283fc:	4b42      	ldr	r3, [pc, #264]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80283fe:	68db      	ldr	r3, [r3, #12]
 8028400:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8028404:	687b      	ldr	r3, [r7, #4]
 8028406:	6a1b      	ldr	r3, [r3, #32]
 8028408:	061b      	lsls	r3, r3, #24
 802840a:	493f      	ldr	r1, [pc, #252]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 802840c:	4313      	orrs	r3, r2
 802840e:	60cb      	str	r3, [r1, #12]
 8028410:	e018      	b.n	8028444 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8028412:	4b3d      	ldr	r3, [pc, #244]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 8028414:	681b      	ldr	r3, [r3, #0]
 8028416:	4a3c      	ldr	r2, [pc, #240]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 8028418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802841c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802841e:	f7f9 fe0f 	bl	8022040 <HAL_GetTick>
 8028422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8028424:	e008      	b.n	8028438 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8028426:	f7f9 fe0b 	bl	8022040 <HAL_GetTick>
 802842a:	4602      	mov	r2, r0
 802842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802842e:	1ad3      	subs	r3, r2, r3
 8028430:	2b02      	cmp	r3, #2
 8028432:	d901      	bls.n	8028438 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8028434:	2303      	movs	r3, #3
 8028436:	e212      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8028438:	4b33      	ldr	r3, [pc, #204]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 802843a:	681b      	ldr	r3, [r3, #0]
 802843c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028440:	2b00      	cmp	r3, #0
 8028442:	d1f0      	bne.n	8028426 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8028444:	687b      	ldr	r3, [r7, #4]
 8028446:	681b      	ldr	r3, [r3, #0]
 8028448:	f003 0308 	and.w	r3, r3, #8
 802844c:	2b00      	cmp	r3, #0
 802844e:	d036      	beq.n	80284be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8028450:	687b      	ldr	r3, [r7, #4]
 8028452:	695b      	ldr	r3, [r3, #20]
 8028454:	2b00      	cmp	r3, #0
 8028456:	d019      	beq.n	802848c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8028458:	4b2b      	ldr	r3, [pc, #172]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 802845a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802845c:	4a2a      	ldr	r2, [pc, #168]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 802845e:	f043 0301 	orr.w	r3, r3, #1
 8028462:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028464:	f7f9 fdec 	bl	8022040 <HAL_GetTick>
 8028468:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 802846a:	e008      	b.n	802847e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802846c:	f7f9 fde8 	bl	8022040 <HAL_GetTick>
 8028470:	4602      	mov	r2, r0
 8028472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028474:	1ad3      	subs	r3, r2, r3
 8028476:	2b02      	cmp	r3, #2
 8028478:	d901      	bls.n	802847e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 802847a:	2303      	movs	r3, #3
 802847c:	e1ef      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 802847e:	4b22      	ldr	r3, [pc, #136]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 8028480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028482:	f003 0302 	and.w	r3, r3, #2
 8028486:	2b00      	cmp	r3, #0
 8028488:	d0f0      	beq.n	802846c <HAL_RCC_OscConfig+0x45c>
 802848a:	e018      	b.n	80284be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802848c:	4b1e      	ldr	r3, [pc, #120]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 802848e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028490:	4a1d      	ldr	r2, [pc, #116]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 8028492:	f023 0301 	bic.w	r3, r3, #1
 8028496:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028498:	f7f9 fdd2 	bl	8022040 <HAL_GetTick>
 802849c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 802849e:	e008      	b.n	80284b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80284a0:	f7f9 fdce 	bl	8022040 <HAL_GetTick>
 80284a4:	4602      	mov	r2, r0
 80284a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80284a8:	1ad3      	subs	r3, r2, r3
 80284aa:	2b02      	cmp	r3, #2
 80284ac:	d901      	bls.n	80284b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80284ae:	2303      	movs	r3, #3
 80284b0:	e1d5      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80284b2:	4b15      	ldr	r3, [pc, #84]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80284b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80284b6:	f003 0302 	and.w	r3, r3, #2
 80284ba:	2b00      	cmp	r3, #0
 80284bc:	d1f0      	bne.n	80284a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80284be:	687b      	ldr	r3, [r7, #4]
 80284c0:	681b      	ldr	r3, [r3, #0]
 80284c2:	f003 0320 	and.w	r3, r3, #32
 80284c6:	2b00      	cmp	r3, #0
 80284c8:	d039      	beq.n	802853e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80284ca:	687b      	ldr	r3, [r7, #4]
 80284cc:	699b      	ldr	r3, [r3, #24]
 80284ce:	2b00      	cmp	r3, #0
 80284d0:	d01c      	beq.n	802850c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80284d2:	4b0d      	ldr	r3, [pc, #52]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80284d4:	681b      	ldr	r3, [r3, #0]
 80284d6:	4a0c      	ldr	r2, [pc, #48]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80284d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80284dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80284de:	f7f9 fdaf 	bl	8022040 <HAL_GetTick>
 80284e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80284e4:	e008      	b.n	80284f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80284e6:	f7f9 fdab 	bl	8022040 <HAL_GetTick>
 80284ea:	4602      	mov	r2, r0
 80284ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80284ee:	1ad3      	subs	r3, r2, r3
 80284f0:	2b02      	cmp	r3, #2
 80284f2:	d901      	bls.n	80284f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80284f4:	2303      	movs	r3, #3
 80284f6:	e1b2      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80284f8:	4b03      	ldr	r3, [pc, #12]	; (8028508 <HAL_RCC_OscConfig+0x4f8>)
 80284fa:	681b      	ldr	r3, [r3, #0]
 80284fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8028500:	2b00      	cmp	r3, #0
 8028502:	d0f0      	beq.n	80284e6 <HAL_RCC_OscConfig+0x4d6>
 8028504:	e01b      	b.n	802853e <HAL_RCC_OscConfig+0x52e>
 8028506:	bf00      	nop
 8028508:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 802850c:	4b9b      	ldr	r3, [pc, #620]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 802850e:	681b      	ldr	r3, [r3, #0]
 8028510:	4a9a      	ldr	r2, [pc, #616]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028516:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8028518:	f7f9 fd92 	bl	8022040 <HAL_GetTick>
 802851c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 802851e:	e008      	b.n	8028532 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8028520:	f7f9 fd8e 	bl	8022040 <HAL_GetTick>
 8028524:	4602      	mov	r2, r0
 8028526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028528:	1ad3      	subs	r3, r2, r3
 802852a:	2b02      	cmp	r3, #2
 802852c:	d901      	bls.n	8028532 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 802852e:	2303      	movs	r3, #3
 8028530:	e195      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8028532:	4b92      	ldr	r3, [pc, #584]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028534:	681b      	ldr	r3, [r3, #0]
 8028536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802853a:	2b00      	cmp	r3, #0
 802853c:	d1f0      	bne.n	8028520 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802853e:	687b      	ldr	r3, [r7, #4]
 8028540:	681b      	ldr	r3, [r3, #0]
 8028542:	f003 0304 	and.w	r3, r3, #4
 8028546:	2b00      	cmp	r3, #0
 8028548:	f000 8081 	beq.w	802864e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 802854c:	4b8c      	ldr	r3, [pc, #560]	; (8028780 <HAL_RCC_OscConfig+0x770>)
 802854e:	681b      	ldr	r3, [r3, #0]
 8028550:	4a8b      	ldr	r2, [pc, #556]	; (8028780 <HAL_RCC_OscConfig+0x770>)
 8028552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028556:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8028558:	f7f9 fd72 	bl	8022040 <HAL_GetTick>
 802855c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802855e:	e008      	b.n	8028572 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8028560:	f7f9 fd6e 	bl	8022040 <HAL_GetTick>
 8028564:	4602      	mov	r2, r0
 8028566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028568:	1ad3      	subs	r3, r2, r3
 802856a:	2b64      	cmp	r3, #100	; 0x64
 802856c:	d901      	bls.n	8028572 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 802856e:	2303      	movs	r3, #3
 8028570:	e175      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8028572:	4b83      	ldr	r3, [pc, #524]	; (8028780 <HAL_RCC_OscConfig+0x770>)
 8028574:	681b      	ldr	r3, [r3, #0]
 8028576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802857a:	2b00      	cmp	r3, #0
 802857c:	d0f0      	beq.n	8028560 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802857e:	687b      	ldr	r3, [r7, #4]
 8028580:	689b      	ldr	r3, [r3, #8]
 8028582:	2b01      	cmp	r3, #1
 8028584:	d106      	bne.n	8028594 <HAL_RCC_OscConfig+0x584>
 8028586:	4b7d      	ldr	r3, [pc, #500]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802858a:	4a7c      	ldr	r2, [pc, #496]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 802858c:	f043 0301 	orr.w	r3, r3, #1
 8028590:	6713      	str	r3, [r2, #112]	; 0x70
 8028592:	e02d      	b.n	80285f0 <HAL_RCC_OscConfig+0x5e0>
 8028594:	687b      	ldr	r3, [r7, #4]
 8028596:	689b      	ldr	r3, [r3, #8]
 8028598:	2b00      	cmp	r3, #0
 802859a:	d10c      	bne.n	80285b6 <HAL_RCC_OscConfig+0x5a6>
 802859c:	4b77      	ldr	r3, [pc, #476]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 802859e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80285a0:	4a76      	ldr	r2, [pc, #472]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80285a2:	f023 0301 	bic.w	r3, r3, #1
 80285a6:	6713      	str	r3, [r2, #112]	; 0x70
 80285a8:	4b74      	ldr	r3, [pc, #464]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80285aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80285ac:	4a73      	ldr	r2, [pc, #460]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80285ae:	f023 0304 	bic.w	r3, r3, #4
 80285b2:	6713      	str	r3, [r2, #112]	; 0x70
 80285b4:	e01c      	b.n	80285f0 <HAL_RCC_OscConfig+0x5e0>
 80285b6:	687b      	ldr	r3, [r7, #4]
 80285b8:	689b      	ldr	r3, [r3, #8]
 80285ba:	2b05      	cmp	r3, #5
 80285bc:	d10c      	bne.n	80285d8 <HAL_RCC_OscConfig+0x5c8>
 80285be:	4b6f      	ldr	r3, [pc, #444]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80285c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80285c2:	4a6e      	ldr	r2, [pc, #440]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80285c4:	f043 0304 	orr.w	r3, r3, #4
 80285c8:	6713      	str	r3, [r2, #112]	; 0x70
 80285ca:	4b6c      	ldr	r3, [pc, #432]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80285cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80285ce:	4a6b      	ldr	r2, [pc, #428]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80285d0:	f043 0301 	orr.w	r3, r3, #1
 80285d4:	6713      	str	r3, [r2, #112]	; 0x70
 80285d6:	e00b      	b.n	80285f0 <HAL_RCC_OscConfig+0x5e0>
 80285d8:	4b68      	ldr	r3, [pc, #416]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80285da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80285dc:	4a67      	ldr	r2, [pc, #412]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80285de:	f023 0301 	bic.w	r3, r3, #1
 80285e2:	6713      	str	r3, [r2, #112]	; 0x70
 80285e4:	4b65      	ldr	r3, [pc, #404]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80285e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80285e8:	4a64      	ldr	r2, [pc, #400]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80285ea:	f023 0304 	bic.w	r3, r3, #4
 80285ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80285f0:	687b      	ldr	r3, [r7, #4]
 80285f2:	689b      	ldr	r3, [r3, #8]
 80285f4:	2b00      	cmp	r3, #0
 80285f6:	d015      	beq.n	8028624 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80285f8:	f7f9 fd22 	bl	8022040 <HAL_GetTick>
 80285fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80285fe:	e00a      	b.n	8028616 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028600:	f7f9 fd1e 	bl	8022040 <HAL_GetTick>
 8028604:	4602      	mov	r2, r0
 8028606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028608:	1ad3      	subs	r3, r2, r3
 802860a:	f241 3288 	movw	r2, #5000	; 0x1388
 802860e:	4293      	cmp	r3, r2
 8028610:	d901      	bls.n	8028616 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8028612:	2303      	movs	r3, #3
 8028614:	e123      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8028616:	4b59      	ldr	r3, [pc, #356]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802861a:	f003 0302 	and.w	r3, r3, #2
 802861e:	2b00      	cmp	r3, #0
 8028620:	d0ee      	beq.n	8028600 <HAL_RCC_OscConfig+0x5f0>
 8028622:	e014      	b.n	802864e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028624:	f7f9 fd0c 	bl	8022040 <HAL_GetTick>
 8028628:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 802862a:	e00a      	b.n	8028642 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802862c:	f7f9 fd08 	bl	8022040 <HAL_GetTick>
 8028630:	4602      	mov	r2, r0
 8028632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028634:	1ad3      	subs	r3, r2, r3
 8028636:	f241 3288 	movw	r2, #5000	; 0x1388
 802863a:	4293      	cmp	r3, r2
 802863c:	d901      	bls.n	8028642 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 802863e:	2303      	movs	r3, #3
 8028640:	e10d      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8028642:	4b4e      	ldr	r3, [pc, #312]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028646:	f003 0302 	and.w	r3, r3, #2
 802864a:	2b00      	cmp	r3, #0
 802864c:	d1ee      	bne.n	802862c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802864e:	687b      	ldr	r3, [r7, #4]
 8028650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028652:	2b00      	cmp	r3, #0
 8028654:	f000 8102 	beq.w	802885c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8028658:	4b48      	ldr	r3, [pc, #288]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 802865a:	691b      	ldr	r3, [r3, #16]
 802865c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8028660:	2b18      	cmp	r3, #24
 8028662:	f000 80bd 	beq.w	80287e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8028666:	687b      	ldr	r3, [r7, #4]
 8028668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802866a:	2b02      	cmp	r3, #2
 802866c:	f040 809e 	bne.w	80287ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028670:	4b42      	ldr	r3, [pc, #264]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028672:	681b      	ldr	r3, [r3, #0]
 8028674:	4a41      	ldr	r2, [pc, #260]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802867a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802867c:	f7f9 fce0 	bl	8022040 <HAL_GetTick>
 8028680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8028682:	e008      	b.n	8028696 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028684:	f7f9 fcdc 	bl	8022040 <HAL_GetTick>
 8028688:	4602      	mov	r2, r0
 802868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802868c:	1ad3      	subs	r3, r2, r3
 802868e:	2b02      	cmp	r3, #2
 8028690:	d901      	bls.n	8028696 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8028692:	2303      	movs	r3, #3
 8028694:	e0e3      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8028696:	4b39      	ldr	r3, [pc, #228]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028698:	681b      	ldr	r3, [r3, #0]
 802869a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802869e:	2b00      	cmp	r3, #0
 80286a0:	d1f0      	bne.n	8028684 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80286a2:	4b36      	ldr	r3, [pc, #216]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80286a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80286a6:	4b37      	ldr	r3, [pc, #220]	; (8028784 <HAL_RCC_OscConfig+0x774>)
 80286a8:	4013      	ands	r3, r2
 80286aa:	687a      	ldr	r2, [r7, #4]
 80286ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80286ae:	687a      	ldr	r2, [r7, #4]
 80286b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80286b2:	0112      	lsls	r2, r2, #4
 80286b4:	430a      	orrs	r2, r1
 80286b6:	4931      	ldr	r1, [pc, #196]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80286b8:	4313      	orrs	r3, r2
 80286ba:	628b      	str	r3, [r1, #40]	; 0x28
 80286bc:	687b      	ldr	r3, [r7, #4]
 80286be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80286c0:	3b01      	subs	r3, #1
 80286c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80286c6:	687b      	ldr	r3, [r7, #4]
 80286c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80286ca:	3b01      	subs	r3, #1
 80286cc:	025b      	lsls	r3, r3, #9
 80286ce:	b29b      	uxth	r3, r3
 80286d0:	431a      	orrs	r2, r3
 80286d2:	687b      	ldr	r3, [r7, #4]
 80286d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80286d6:	3b01      	subs	r3, #1
 80286d8:	041b      	lsls	r3, r3, #16
 80286da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80286de:	431a      	orrs	r2, r3
 80286e0:	687b      	ldr	r3, [r7, #4]
 80286e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80286e4:	3b01      	subs	r3, #1
 80286e6:	061b      	lsls	r3, r3, #24
 80286e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80286ec:	4923      	ldr	r1, [pc, #140]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80286ee:	4313      	orrs	r3, r2
 80286f0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80286f2:	4b22      	ldr	r3, [pc, #136]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80286f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80286f6:	4a21      	ldr	r2, [pc, #132]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 80286f8:	f023 0301 	bic.w	r3, r3, #1
 80286fc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80286fe:	4b1f      	ldr	r3, [pc, #124]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028702:	4b21      	ldr	r3, [pc, #132]	; (8028788 <HAL_RCC_OscConfig+0x778>)
 8028704:	4013      	ands	r3, r2
 8028706:	687a      	ldr	r2, [r7, #4]
 8028708:	6c92      	ldr	r2, [r2, #72]	; 0x48
 802870a:	00d2      	lsls	r2, r2, #3
 802870c:	491b      	ldr	r1, [pc, #108]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 802870e:	4313      	orrs	r3, r2
 8028710:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8028712:	4b1a      	ldr	r3, [pc, #104]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028716:	f023 020c 	bic.w	r2, r3, #12
 802871a:	687b      	ldr	r3, [r7, #4]
 802871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802871e:	4917      	ldr	r1, [pc, #92]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028720:	4313      	orrs	r3, r2
 8028722:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8028724:	4b15      	ldr	r3, [pc, #84]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028728:	f023 0202 	bic.w	r2, r3, #2
 802872c:	687b      	ldr	r3, [r7, #4]
 802872e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028730:	4912      	ldr	r1, [pc, #72]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028732:	4313      	orrs	r3, r2
 8028734:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8028736:	4b11      	ldr	r3, [pc, #68]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802873a:	4a10      	ldr	r2, [pc, #64]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 802873c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028740:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8028742:	4b0e      	ldr	r3, [pc, #56]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028746:	4a0d      	ldr	r2, [pc, #52]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802874c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 802874e:	4b0b      	ldr	r3, [pc, #44]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028752:	4a0a      	ldr	r2, [pc, #40]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8028758:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 802875a:	4b08      	ldr	r3, [pc, #32]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 802875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802875e:	4a07      	ldr	r2, [pc, #28]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028760:	f043 0301 	orr.w	r3, r3, #1
 8028764:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8028766:	4b05      	ldr	r3, [pc, #20]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 8028768:	681b      	ldr	r3, [r3, #0]
 802876a:	4a04      	ldr	r2, [pc, #16]	; (802877c <HAL_RCC_OscConfig+0x76c>)
 802876c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8028770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028772:	f7f9 fc65 	bl	8022040 <HAL_GetTick>
 8028776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8028778:	e011      	b.n	802879e <HAL_RCC_OscConfig+0x78e>
 802877a:	bf00      	nop
 802877c:	58024400 	.word	0x58024400
 8028780:	58024800 	.word	0x58024800
 8028784:	fffffc0c 	.word	0xfffffc0c
 8028788:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802878c:	f7f9 fc58 	bl	8022040 <HAL_GetTick>
 8028790:	4602      	mov	r2, r0
 8028792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028794:	1ad3      	subs	r3, r2, r3
 8028796:	2b02      	cmp	r3, #2
 8028798:	d901      	bls.n	802879e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 802879a:	2303      	movs	r3, #3
 802879c:	e05f      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802879e:	4b32      	ldr	r3, [pc, #200]	; (8028868 <HAL_RCC_OscConfig+0x858>)
 80287a0:	681b      	ldr	r3, [r3, #0]
 80287a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80287a6:	2b00      	cmp	r3, #0
 80287a8:	d0f0      	beq.n	802878c <HAL_RCC_OscConfig+0x77c>
 80287aa:	e057      	b.n	802885c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80287ac:	4b2e      	ldr	r3, [pc, #184]	; (8028868 <HAL_RCC_OscConfig+0x858>)
 80287ae:	681b      	ldr	r3, [r3, #0]
 80287b0:	4a2d      	ldr	r2, [pc, #180]	; (8028868 <HAL_RCC_OscConfig+0x858>)
 80287b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80287b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80287b8:	f7f9 fc42 	bl	8022040 <HAL_GetTick>
 80287bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80287be:	e008      	b.n	80287d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80287c0:	f7f9 fc3e 	bl	8022040 <HAL_GetTick>
 80287c4:	4602      	mov	r2, r0
 80287c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80287c8:	1ad3      	subs	r3, r2, r3
 80287ca:	2b02      	cmp	r3, #2
 80287cc:	d901      	bls.n	80287d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80287ce:	2303      	movs	r3, #3
 80287d0:	e045      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80287d2:	4b25      	ldr	r3, [pc, #148]	; (8028868 <HAL_RCC_OscConfig+0x858>)
 80287d4:	681b      	ldr	r3, [r3, #0]
 80287d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80287da:	2b00      	cmp	r3, #0
 80287dc:	d1f0      	bne.n	80287c0 <HAL_RCC_OscConfig+0x7b0>
 80287de:	e03d      	b.n	802885c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80287e0:	4b21      	ldr	r3, [pc, #132]	; (8028868 <HAL_RCC_OscConfig+0x858>)
 80287e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80287e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80287e6:	4b20      	ldr	r3, [pc, #128]	; (8028868 <HAL_RCC_OscConfig+0x858>)
 80287e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80287ea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80287ec:	687b      	ldr	r3, [r7, #4]
 80287ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80287f0:	2b01      	cmp	r3, #1
 80287f2:	d031      	beq.n	8028858 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80287f4:	693b      	ldr	r3, [r7, #16]
 80287f6:	f003 0203 	and.w	r2, r3, #3
 80287fa:	687b      	ldr	r3, [r7, #4]
 80287fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80287fe:	429a      	cmp	r2, r3
 8028800:	d12a      	bne.n	8028858 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8028802:	693b      	ldr	r3, [r7, #16]
 8028804:	091b      	lsrs	r3, r3, #4
 8028806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802880a:	687b      	ldr	r3, [r7, #4]
 802880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802880e:	429a      	cmp	r2, r3
 8028810:	d122      	bne.n	8028858 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8028812:	68fb      	ldr	r3, [r7, #12]
 8028814:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8028818:	687b      	ldr	r3, [r7, #4]
 802881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802881c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 802881e:	429a      	cmp	r2, r3
 8028820:	d11a      	bne.n	8028858 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8028822:	68fb      	ldr	r3, [r7, #12]
 8028824:	0a5b      	lsrs	r3, r3, #9
 8028826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802882a:	687b      	ldr	r3, [r7, #4]
 802882c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802882e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8028830:	429a      	cmp	r2, r3
 8028832:	d111      	bne.n	8028858 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8028834:	68fb      	ldr	r3, [r7, #12]
 8028836:	0c1b      	lsrs	r3, r3, #16
 8028838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802883c:	687b      	ldr	r3, [r7, #4]
 802883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028840:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8028842:	429a      	cmp	r2, r3
 8028844:	d108      	bne.n	8028858 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8028846:	68fb      	ldr	r3, [r7, #12]
 8028848:	0e1b      	lsrs	r3, r3, #24
 802884a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802884e:	687b      	ldr	r3, [r7, #4]
 8028850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028852:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8028854:	429a      	cmp	r2, r3
 8028856:	d001      	beq.n	802885c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8028858:	2301      	movs	r3, #1
 802885a:	e000      	b.n	802885e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 802885c:	2300      	movs	r3, #0
}
 802885e:	4618      	mov	r0, r3
 8028860:	3730      	adds	r7, #48	; 0x30
 8028862:	46bd      	mov	sp, r7
 8028864:	bd80      	pop	{r7, pc}
 8028866:	bf00      	nop
 8028868:	58024400 	.word	0x58024400

0802886c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802886c:	b580      	push	{r7, lr}
 802886e:	b086      	sub	sp, #24
 8028870:	af00      	add	r7, sp, #0
 8028872:	6078      	str	r0, [r7, #4]
 8028874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8028876:	687b      	ldr	r3, [r7, #4]
 8028878:	2b00      	cmp	r3, #0
 802887a:	d101      	bne.n	8028880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802887c:	2301      	movs	r3, #1
 802887e:	e19c      	b.n	8028bba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8028880:	4b8a      	ldr	r3, [pc, #552]	; (8028aac <HAL_RCC_ClockConfig+0x240>)
 8028882:	681b      	ldr	r3, [r3, #0]
 8028884:	f003 030f 	and.w	r3, r3, #15
 8028888:	683a      	ldr	r2, [r7, #0]
 802888a:	429a      	cmp	r2, r3
 802888c:	d910      	bls.n	80288b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802888e:	4b87      	ldr	r3, [pc, #540]	; (8028aac <HAL_RCC_ClockConfig+0x240>)
 8028890:	681b      	ldr	r3, [r3, #0]
 8028892:	f023 020f 	bic.w	r2, r3, #15
 8028896:	4985      	ldr	r1, [pc, #532]	; (8028aac <HAL_RCC_ClockConfig+0x240>)
 8028898:	683b      	ldr	r3, [r7, #0]
 802889a:	4313      	orrs	r3, r2
 802889c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802889e:	4b83      	ldr	r3, [pc, #524]	; (8028aac <HAL_RCC_ClockConfig+0x240>)
 80288a0:	681b      	ldr	r3, [r3, #0]
 80288a2:	f003 030f 	and.w	r3, r3, #15
 80288a6:	683a      	ldr	r2, [r7, #0]
 80288a8:	429a      	cmp	r2, r3
 80288aa:	d001      	beq.n	80288b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80288ac:	2301      	movs	r3, #1
 80288ae:	e184      	b.n	8028bba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80288b0:	687b      	ldr	r3, [r7, #4]
 80288b2:	681b      	ldr	r3, [r3, #0]
 80288b4:	f003 0304 	and.w	r3, r3, #4
 80288b8:	2b00      	cmp	r3, #0
 80288ba:	d010      	beq.n	80288de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80288bc:	687b      	ldr	r3, [r7, #4]
 80288be:	691a      	ldr	r2, [r3, #16]
 80288c0:	4b7b      	ldr	r3, [pc, #492]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 80288c2:	699b      	ldr	r3, [r3, #24]
 80288c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80288c8:	429a      	cmp	r2, r3
 80288ca:	d908      	bls.n	80288de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80288cc:	4b78      	ldr	r3, [pc, #480]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 80288ce:	699b      	ldr	r3, [r3, #24]
 80288d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80288d4:	687b      	ldr	r3, [r7, #4]
 80288d6:	691b      	ldr	r3, [r3, #16]
 80288d8:	4975      	ldr	r1, [pc, #468]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 80288da:	4313      	orrs	r3, r2
 80288dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80288de:	687b      	ldr	r3, [r7, #4]
 80288e0:	681b      	ldr	r3, [r3, #0]
 80288e2:	f003 0308 	and.w	r3, r3, #8
 80288e6:	2b00      	cmp	r3, #0
 80288e8:	d010      	beq.n	802890c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80288ea:	687b      	ldr	r3, [r7, #4]
 80288ec:	695a      	ldr	r2, [r3, #20]
 80288ee:	4b70      	ldr	r3, [pc, #448]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 80288f0:	69db      	ldr	r3, [r3, #28]
 80288f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80288f6:	429a      	cmp	r2, r3
 80288f8:	d908      	bls.n	802890c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80288fa:	4b6d      	ldr	r3, [pc, #436]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 80288fc:	69db      	ldr	r3, [r3, #28]
 80288fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8028902:	687b      	ldr	r3, [r7, #4]
 8028904:	695b      	ldr	r3, [r3, #20]
 8028906:	496a      	ldr	r1, [pc, #424]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 8028908:	4313      	orrs	r3, r2
 802890a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802890c:	687b      	ldr	r3, [r7, #4]
 802890e:	681b      	ldr	r3, [r3, #0]
 8028910:	f003 0310 	and.w	r3, r3, #16
 8028914:	2b00      	cmp	r3, #0
 8028916:	d010      	beq.n	802893a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8028918:	687b      	ldr	r3, [r7, #4]
 802891a:	699a      	ldr	r2, [r3, #24]
 802891c:	4b64      	ldr	r3, [pc, #400]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 802891e:	69db      	ldr	r3, [r3, #28]
 8028920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8028924:	429a      	cmp	r2, r3
 8028926:	d908      	bls.n	802893a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8028928:	4b61      	ldr	r3, [pc, #388]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 802892a:	69db      	ldr	r3, [r3, #28]
 802892c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8028930:	687b      	ldr	r3, [r7, #4]
 8028932:	699b      	ldr	r3, [r3, #24]
 8028934:	495e      	ldr	r1, [pc, #376]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 8028936:	4313      	orrs	r3, r2
 8028938:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 802893a:	687b      	ldr	r3, [r7, #4]
 802893c:	681b      	ldr	r3, [r3, #0]
 802893e:	f003 0320 	and.w	r3, r3, #32
 8028942:	2b00      	cmp	r3, #0
 8028944:	d010      	beq.n	8028968 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8028946:	687b      	ldr	r3, [r7, #4]
 8028948:	69da      	ldr	r2, [r3, #28]
 802894a:	4b59      	ldr	r3, [pc, #356]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 802894c:	6a1b      	ldr	r3, [r3, #32]
 802894e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8028952:	429a      	cmp	r2, r3
 8028954:	d908      	bls.n	8028968 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8028956:	4b56      	ldr	r3, [pc, #344]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 8028958:	6a1b      	ldr	r3, [r3, #32]
 802895a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802895e:	687b      	ldr	r3, [r7, #4]
 8028960:	69db      	ldr	r3, [r3, #28]
 8028962:	4953      	ldr	r1, [pc, #332]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 8028964:	4313      	orrs	r3, r2
 8028966:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8028968:	687b      	ldr	r3, [r7, #4]
 802896a:	681b      	ldr	r3, [r3, #0]
 802896c:	f003 0302 	and.w	r3, r3, #2
 8028970:	2b00      	cmp	r3, #0
 8028972:	d010      	beq.n	8028996 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8028974:	687b      	ldr	r3, [r7, #4]
 8028976:	68da      	ldr	r2, [r3, #12]
 8028978:	4b4d      	ldr	r3, [pc, #308]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 802897a:	699b      	ldr	r3, [r3, #24]
 802897c:	f003 030f 	and.w	r3, r3, #15
 8028980:	429a      	cmp	r2, r3
 8028982:	d908      	bls.n	8028996 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8028984:	4b4a      	ldr	r3, [pc, #296]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 8028986:	699b      	ldr	r3, [r3, #24]
 8028988:	f023 020f 	bic.w	r2, r3, #15
 802898c:	687b      	ldr	r3, [r7, #4]
 802898e:	68db      	ldr	r3, [r3, #12]
 8028990:	4947      	ldr	r1, [pc, #284]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 8028992:	4313      	orrs	r3, r2
 8028994:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8028996:	687b      	ldr	r3, [r7, #4]
 8028998:	681b      	ldr	r3, [r3, #0]
 802899a:	f003 0301 	and.w	r3, r3, #1
 802899e:	2b00      	cmp	r3, #0
 80289a0:	d055      	beq.n	8028a4e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80289a2:	4b43      	ldr	r3, [pc, #268]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 80289a4:	699b      	ldr	r3, [r3, #24]
 80289a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80289aa:	687b      	ldr	r3, [r7, #4]
 80289ac:	689b      	ldr	r3, [r3, #8]
 80289ae:	4940      	ldr	r1, [pc, #256]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 80289b0:	4313      	orrs	r3, r2
 80289b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80289b4:	687b      	ldr	r3, [r7, #4]
 80289b6:	685b      	ldr	r3, [r3, #4]
 80289b8:	2b02      	cmp	r3, #2
 80289ba:	d107      	bne.n	80289cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80289bc:	4b3c      	ldr	r3, [pc, #240]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 80289be:	681b      	ldr	r3, [r3, #0]
 80289c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80289c4:	2b00      	cmp	r3, #0
 80289c6:	d121      	bne.n	8028a0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80289c8:	2301      	movs	r3, #1
 80289ca:	e0f6      	b.n	8028bba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80289cc:	687b      	ldr	r3, [r7, #4]
 80289ce:	685b      	ldr	r3, [r3, #4]
 80289d0:	2b03      	cmp	r3, #3
 80289d2:	d107      	bne.n	80289e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80289d4:	4b36      	ldr	r3, [pc, #216]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 80289d6:	681b      	ldr	r3, [r3, #0]
 80289d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80289dc:	2b00      	cmp	r3, #0
 80289de:	d115      	bne.n	8028a0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80289e0:	2301      	movs	r3, #1
 80289e2:	e0ea      	b.n	8028bba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80289e4:	687b      	ldr	r3, [r7, #4]
 80289e6:	685b      	ldr	r3, [r3, #4]
 80289e8:	2b01      	cmp	r3, #1
 80289ea:	d107      	bne.n	80289fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80289ec:	4b30      	ldr	r3, [pc, #192]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 80289ee:	681b      	ldr	r3, [r3, #0]
 80289f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80289f4:	2b00      	cmp	r3, #0
 80289f6:	d109      	bne.n	8028a0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80289f8:	2301      	movs	r3, #1
 80289fa:	e0de      	b.n	8028bba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80289fc:	4b2c      	ldr	r3, [pc, #176]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 80289fe:	681b      	ldr	r3, [r3, #0]
 8028a00:	f003 0304 	and.w	r3, r3, #4
 8028a04:	2b00      	cmp	r3, #0
 8028a06:	d101      	bne.n	8028a0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8028a08:	2301      	movs	r3, #1
 8028a0a:	e0d6      	b.n	8028bba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8028a0c:	4b28      	ldr	r3, [pc, #160]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 8028a0e:	691b      	ldr	r3, [r3, #16]
 8028a10:	f023 0207 	bic.w	r2, r3, #7
 8028a14:	687b      	ldr	r3, [r7, #4]
 8028a16:	685b      	ldr	r3, [r3, #4]
 8028a18:	4925      	ldr	r1, [pc, #148]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 8028a1a:	4313      	orrs	r3, r2
 8028a1c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028a1e:	f7f9 fb0f 	bl	8022040 <HAL_GetTick>
 8028a22:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028a24:	e00a      	b.n	8028a3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8028a26:	f7f9 fb0b 	bl	8022040 <HAL_GetTick>
 8028a2a:	4602      	mov	r2, r0
 8028a2c:	697b      	ldr	r3, [r7, #20]
 8028a2e:	1ad3      	subs	r3, r2, r3
 8028a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8028a34:	4293      	cmp	r3, r2
 8028a36:	d901      	bls.n	8028a3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8028a38:	2303      	movs	r3, #3
 8028a3a:	e0be      	b.n	8028bba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028a3c:	4b1c      	ldr	r3, [pc, #112]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 8028a3e:	691b      	ldr	r3, [r3, #16]
 8028a40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8028a44:	687b      	ldr	r3, [r7, #4]
 8028a46:	685b      	ldr	r3, [r3, #4]
 8028a48:	00db      	lsls	r3, r3, #3
 8028a4a:	429a      	cmp	r2, r3
 8028a4c:	d1eb      	bne.n	8028a26 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8028a4e:	687b      	ldr	r3, [r7, #4]
 8028a50:	681b      	ldr	r3, [r3, #0]
 8028a52:	f003 0302 	and.w	r3, r3, #2
 8028a56:	2b00      	cmp	r3, #0
 8028a58:	d010      	beq.n	8028a7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8028a5a:	687b      	ldr	r3, [r7, #4]
 8028a5c:	68da      	ldr	r2, [r3, #12]
 8028a5e:	4b14      	ldr	r3, [pc, #80]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 8028a60:	699b      	ldr	r3, [r3, #24]
 8028a62:	f003 030f 	and.w	r3, r3, #15
 8028a66:	429a      	cmp	r2, r3
 8028a68:	d208      	bcs.n	8028a7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8028a6a:	4b11      	ldr	r3, [pc, #68]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 8028a6c:	699b      	ldr	r3, [r3, #24]
 8028a6e:	f023 020f 	bic.w	r2, r3, #15
 8028a72:	687b      	ldr	r3, [r7, #4]
 8028a74:	68db      	ldr	r3, [r3, #12]
 8028a76:	490e      	ldr	r1, [pc, #56]	; (8028ab0 <HAL_RCC_ClockConfig+0x244>)
 8028a78:	4313      	orrs	r3, r2
 8028a7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8028a7c:	4b0b      	ldr	r3, [pc, #44]	; (8028aac <HAL_RCC_ClockConfig+0x240>)
 8028a7e:	681b      	ldr	r3, [r3, #0]
 8028a80:	f003 030f 	and.w	r3, r3, #15
 8028a84:	683a      	ldr	r2, [r7, #0]
 8028a86:	429a      	cmp	r2, r3
 8028a88:	d214      	bcs.n	8028ab4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028a8a:	4b08      	ldr	r3, [pc, #32]	; (8028aac <HAL_RCC_ClockConfig+0x240>)
 8028a8c:	681b      	ldr	r3, [r3, #0]
 8028a8e:	f023 020f 	bic.w	r2, r3, #15
 8028a92:	4906      	ldr	r1, [pc, #24]	; (8028aac <HAL_RCC_ClockConfig+0x240>)
 8028a94:	683b      	ldr	r3, [r7, #0]
 8028a96:	4313      	orrs	r3, r2
 8028a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8028a9a:	4b04      	ldr	r3, [pc, #16]	; (8028aac <HAL_RCC_ClockConfig+0x240>)
 8028a9c:	681b      	ldr	r3, [r3, #0]
 8028a9e:	f003 030f 	and.w	r3, r3, #15
 8028aa2:	683a      	ldr	r2, [r7, #0]
 8028aa4:	429a      	cmp	r2, r3
 8028aa6:	d005      	beq.n	8028ab4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8028aa8:	2301      	movs	r3, #1
 8028aaa:	e086      	b.n	8028bba <HAL_RCC_ClockConfig+0x34e>
 8028aac:	52002000 	.word	0x52002000
 8028ab0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8028ab4:	687b      	ldr	r3, [r7, #4]
 8028ab6:	681b      	ldr	r3, [r3, #0]
 8028ab8:	f003 0304 	and.w	r3, r3, #4
 8028abc:	2b00      	cmp	r3, #0
 8028abe:	d010      	beq.n	8028ae2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8028ac0:	687b      	ldr	r3, [r7, #4]
 8028ac2:	691a      	ldr	r2, [r3, #16]
 8028ac4:	4b3f      	ldr	r3, [pc, #252]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028ac6:	699b      	ldr	r3, [r3, #24]
 8028ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8028acc:	429a      	cmp	r2, r3
 8028ace:	d208      	bcs.n	8028ae2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8028ad0:	4b3c      	ldr	r3, [pc, #240]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028ad2:	699b      	ldr	r3, [r3, #24]
 8028ad4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8028ad8:	687b      	ldr	r3, [r7, #4]
 8028ada:	691b      	ldr	r3, [r3, #16]
 8028adc:	4939      	ldr	r1, [pc, #228]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028ade:	4313      	orrs	r3, r2
 8028ae0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028ae2:	687b      	ldr	r3, [r7, #4]
 8028ae4:	681b      	ldr	r3, [r3, #0]
 8028ae6:	f003 0308 	and.w	r3, r3, #8
 8028aea:	2b00      	cmp	r3, #0
 8028aec:	d010      	beq.n	8028b10 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8028aee:	687b      	ldr	r3, [r7, #4]
 8028af0:	695a      	ldr	r2, [r3, #20]
 8028af2:	4b34      	ldr	r3, [pc, #208]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028af4:	69db      	ldr	r3, [r3, #28]
 8028af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8028afa:	429a      	cmp	r2, r3
 8028afc:	d208      	bcs.n	8028b10 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8028afe:	4b31      	ldr	r3, [pc, #196]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028b00:	69db      	ldr	r3, [r3, #28]
 8028b02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8028b06:	687b      	ldr	r3, [r7, #4]
 8028b08:	695b      	ldr	r3, [r3, #20]
 8028b0a:	492e      	ldr	r1, [pc, #184]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028b0c:	4313      	orrs	r3, r2
 8028b0e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028b10:	687b      	ldr	r3, [r7, #4]
 8028b12:	681b      	ldr	r3, [r3, #0]
 8028b14:	f003 0310 	and.w	r3, r3, #16
 8028b18:	2b00      	cmp	r3, #0
 8028b1a:	d010      	beq.n	8028b3e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8028b1c:	687b      	ldr	r3, [r7, #4]
 8028b1e:	699a      	ldr	r2, [r3, #24]
 8028b20:	4b28      	ldr	r3, [pc, #160]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028b22:	69db      	ldr	r3, [r3, #28]
 8028b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8028b28:	429a      	cmp	r2, r3
 8028b2a:	d208      	bcs.n	8028b3e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8028b2c:	4b25      	ldr	r3, [pc, #148]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028b2e:	69db      	ldr	r3, [r3, #28]
 8028b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8028b34:	687b      	ldr	r3, [r7, #4]
 8028b36:	699b      	ldr	r3, [r3, #24]
 8028b38:	4922      	ldr	r1, [pc, #136]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028b3a:	4313      	orrs	r3, r2
 8028b3c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8028b3e:	687b      	ldr	r3, [r7, #4]
 8028b40:	681b      	ldr	r3, [r3, #0]
 8028b42:	f003 0320 	and.w	r3, r3, #32
 8028b46:	2b00      	cmp	r3, #0
 8028b48:	d010      	beq.n	8028b6c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8028b4a:	687b      	ldr	r3, [r7, #4]
 8028b4c:	69da      	ldr	r2, [r3, #28]
 8028b4e:	4b1d      	ldr	r3, [pc, #116]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028b50:	6a1b      	ldr	r3, [r3, #32]
 8028b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8028b56:	429a      	cmp	r2, r3
 8028b58:	d208      	bcs.n	8028b6c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8028b5a:	4b1a      	ldr	r3, [pc, #104]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028b5c:	6a1b      	ldr	r3, [r3, #32]
 8028b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8028b62:	687b      	ldr	r3, [r7, #4]
 8028b64:	69db      	ldr	r3, [r3, #28]
 8028b66:	4917      	ldr	r1, [pc, #92]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028b68:	4313      	orrs	r3, r2
 8028b6a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8028b6c:	f000 f834 	bl	8028bd8 <HAL_RCC_GetSysClockFreq>
 8028b70:	4602      	mov	r2, r0
 8028b72:	4b14      	ldr	r3, [pc, #80]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028b74:	699b      	ldr	r3, [r3, #24]
 8028b76:	0a1b      	lsrs	r3, r3, #8
 8028b78:	f003 030f 	and.w	r3, r3, #15
 8028b7c:	4912      	ldr	r1, [pc, #72]	; (8028bc8 <HAL_RCC_ClockConfig+0x35c>)
 8028b7e:	5ccb      	ldrb	r3, [r1, r3]
 8028b80:	f003 031f 	and.w	r3, r3, #31
 8028b84:	fa22 f303 	lsr.w	r3, r2, r3
 8028b88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8028b8a:	4b0e      	ldr	r3, [pc, #56]	; (8028bc4 <HAL_RCC_ClockConfig+0x358>)
 8028b8c:	699b      	ldr	r3, [r3, #24]
 8028b8e:	f003 030f 	and.w	r3, r3, #15
 8028b92:	4a0d      	ldr	r2, [pc, #52]	; (8028bc8 <HAL_RCC_ClockConfig+0x35c>)
 8028b94:	5cd3      	ldrb	r3, [r2, r3]
 8028b96:	f003 031f 	and.w	r3, r3, #31
 8028b9a:	693a      	ldr	r2, [r7, #16]
 8028b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8028ba0:	4a0a      	ldr	r2, [pc, #40]	; (8028bcc <HAL_RCC_ClockConfig+0x360>)
 8028ba2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8028ba4:	4a0a      	ldr	r2, [pc, #40]	; (8028bd0 <HAL_RCC_ClockConfig+0x364>)
 8028ba6:	693b      	ldr	r3, [r7, #16]
 8028ba8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8028baa:	4b0a      	ldr	r3, [pc, #40]	; (8028bd4 <HAL_RCC_ClockConfig+0x368>)
 8028bac:	681b      	ldr	r3, [r3, #0]
 8028bae:	4618      	mov	r0, r3
 8028bb0:	f7f9 f9fc 	bl	8021fac <HAL_InitTick>
 8028bb4:	4603      	mov	r3, r0
 8028bb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8028bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8028bba:	4618      	mov	r0, r3
 8028bbc:	3718      	adds	r7, #24
 8028bbe:	46bd      	mov	sp, r7
 8028bc0:	bd80      	pop	{r7, pc}
 8028bc2:	bf00      	nop
 8028bc4:	58024400 	.word	0x58024400
 8028bc8:	0803e494 	.word	0x0803e494
 8028bcc:	24000004 	.word	0x24000004
 8028bd0:	24000000 	.word	0x24000000
 8028bd4:	24000008 	.word	0x24000008

08028bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8028bd8:	b480      	push	{r7}
 8028bda:	b089      	sub	sp, #36	; 0x24
 8028bdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8028bde:	4bb3      	ldr	r3, [pc, #716]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028be0:	691b      	ldr	r3, [r3, #16]
 8028be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8028be6:	2b18      	cmp	r3, #24
 8028be8:	f200 8155 	bhi.w	8028e96 <HAL_RCC_GetSysClockFreq+0x2be>
 8028bec:	a201      	add	r2, pc, #4	; (adr r2, 8028bf4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8028bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028bf2:	bf00      	nop
 8028bf4:	08028c59 	.word	0x08028c59
 8028bf8:	08028e97 	.word	0x08028e97
 8028bfc:	08028e97 	.word	0x08028e97
 8028c00:	08028e97 	.word	0x08028e97
 8028c04:	08028e97 	.word	0x08028e97
 8028c08:	08028e97 	.word	0x08028e97
 8028c0c:	08028e97 	.word	0x08028e97
 8028c10:	08028e97 	.word	0x08028e97
 8028c14:	08028c7f 	.word	0x08028c7f
 8028c18:	08028e97 	.word	0x08028e97
 8028c1c:	08028e97 	.word	0x08028e97
 8028c20:	08028e97 	.word	0x08028e97
 8028c24:	08028e97 	.word	0x08028e97
 8028c28:	08028e97 	.word	0x08028e97
 8028c2c:	08028e97 	.word	0x08028e97
 8028c30:	08028e97 	.word	0x08028e97
 8028c34:	08028c85 	.word	0x08028c85
 8028c38:	08028e97 	.word	0x08028e97
 8028c3c:	08028e97 	.word	0x08028e97
 8028c40:	08028e97 	.word	0x08028e97
 8028c44:	08028e97 	.word	0x08028e97
 8028c48:	08028e97 	.word	0x08028e97
 8028c4c:	08028e97 	.word	0x08028e97
 8028c50:	08028e97 	.word	0x08028e97
 8028c54:	08028c8b 	.word	0x08028c8b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8028c58:	4b94      	ldr	r3, [pc, #592]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028c5a:	681b      	ldr	r3, [r3, #0]
 8028c5c:	f003 0320 	and.w	r3, r3, #32
 8028c60:	2b00      	cmp	r3, #0
 8028c62:	d009      	beq.n	8028c78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8028c64:	4b91      	ldr	r3, [pc, #580]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028c66:	681b      	ldr	r3, [r3, #0]
 8028c68:	08db      	lsrs	r3, r3, #3
 8028c6a:	f003 0303 	and.w	r3, r3, #3
 8028c6e:	4a90      	ldr	r2, [pc, #576]	; (8028eb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8028c70:	fa22 f303 	lsr.w	r3, r2, r3
 8028c74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8028c76:	e111      	b.n	8028e9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8028c78:	4b8d      	ldr	r3, [pc, #564]	; (8028eb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8028c7a:	61bb      	str	r3, [r7, #24]
    break;
 8028c7c:	e10e      	b.n	8028e9c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8028c7e:	4b8d      	ldr	r3, [pc, #564]	; (8028eb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8028c80:	61bb      	str	r3, [r7, #24]
    break;
 8028c82:	e10b      	b.n	8028e9c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8028c84:	4b8c      	ldr	r3, [pc, #560]	; (8028eb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8028c86:	61bb      	str	r3, [r7, #24]
    break;
 8028c88:	e108      	b.n	8028e9c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8028c8a:	4b88      	ldr	r3, [pc, #544]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028c8e:	f003 0303 	and.w	r3, r3, #3
 8028c92:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8028c94:	4b85      	ldr	r3, [pc, #532]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028c98:	091b      	lsrs	r3, r3, #4
 8028c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8028c9e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8028ca0:	4b82      	ldr	r3, [pc, #520]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ca4:	f003 0301 	and.w	r3, r3, #1
 8028ca8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8028caa:	4b80      	ldr	r3, [pc, #512]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028cae:	08db      	lsrs	r3, r3, #3
 8028cb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8028cb4:	68fa      	ldr	r2, [r7, #12]
 8028cb6:	fb02 f303 	mul.w	r3, r2, r3
 8028cba:	ee07 3a90 	vmov	s15, r3
 8028cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028cc2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8028cc6:	693b      	ldr	r3, [r7, #16]
 8028cc8:	2b00      	cmp	r3, #0
 8028cca:	f000 80e1 	beq.w	8028e90 <HAL_RCC_GetSysClockFreq+0x2b8>
 8028cce:	697b      	ldr	r3, [r7, #20]
 8028cd0:	2b02      	cmp	r3, #2
 8028cd2:	f000 8083 	beq.w	8028ddc <HAL_RCC_GetSysClockFreq+0x204>
 8028cd6:	697b      	ldr	r3, [r7, #20]
 8028cd8:	2b02      	cmp	r3, #2
 8028cda:	f200 80a1 	bhi.w	8028e20 <HAL_RCC_GetSysClockFreq+0x248>
 8028cde:	697b      	ldr	r3, [r7, #20]
 8028ce0:	2b00      	cmp	r3, #0
 8028ce2:	d003      	beq.n	8028cec <HAL_RCC_GetSysClockFreq+0x114>
 8028ce4:	697b      	ldr	r3, [r7, #20]
 8028ce6:	2b01      	cmp	r3, #1
 8028ce8:	d056      	beq.n	8028d98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8028cea:	e099      	b.n	8028e20 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8028cec:	4b6f      	ldr	r3, [pc, #444]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028cee:	681b      	ldr	r3, [r3, #0]
 8028cf0:	f003 0320 	and.w	r3, r3, #32
 8028cf4:	2b00      	cmp	r3, #0
 8028cf6:	d02d      	beq.n	8028d54 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8028cf8:	4b6c      	ldr	r3, [pc, #432]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028cfa:	681b      	ldr	r3, [r3, #0]
 8028cfc:	08db      	lsrs	r3, r3, #3
 8028cfe:	f003 0303 	and.w	r3, r3, #3
 8028d02:	4a6b      	ldr	r2, [pc, #428]	; (8028eb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8028d04:	fa22 f303 	lsr.w	r3, r2, r3
 8028d08:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8028d0a:	687b      	ldr	r3, [r7, #4]
 8028d0c:	ee07 3a90 	vmov	s15, r3
 8028d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028d14:	693b      	ldr	r3, [r7, #16]
 8028d16:	ee07 3a90 	vmov	s15, r3
 8028d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028d22:	4b62      	ldr	r3, [pc, #392]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028d2a:	ee07 3a90 	vmov	s15, r3
 8028d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028d32:	ed97 6a02 	vldr	s12, [r7, #8]
 8028d36:	eddf 5a61 	vldr	s11, [pc, #388]	; 8028ebc <HAL_RCC_GetSysClockFreq+0x2e4>
 8028d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8028d52:	e087      	b.n	8028e64 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8028d54:	693b      	ldr	r3, [r7, #16]
 8028d56:	ee07 3a90 	vmov	s15, r3
 8028d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028d5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8028ec0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8028d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028d66:	4b51      	ldr	r3, [pc, #324]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028d6e:	ee07 3a90 	vmov	s15, r3
 8028d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028d76:	ed97 6a02 	vldr	s12, [r7, #8]
 8028d7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8028ebc <HAL_RCC_GetSysClockFreq+0x2e4>
 8028d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8028d96:	e065      	b.n	8028e64 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8028d98:	693b      	ldr	r3, [r7, #16]
 8028d9a:	ee07 3a90 	vmov	s15, r3
 8028d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028da2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8028ec4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8028da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028daa:	4b40      	ldr	r3, [pc, #256]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028db2:	ee07 3a90 	vmov	s15, r3
 8028db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8028dbe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8028ebc <HAL_RCC_GetSysClockFreq+0x2e4>
 8028dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8028dda:	e043      	b.n	8028e64 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8028ddc:	693b      	ldr	r3, [r7, #16]
 8028dde:	ee07 3a90 	vmov	s15, r3
 8028de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028de6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8028ec8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8028dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028dee:	4b2f      	ldr	r3, [pc, #188]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028df6:	ee07 3a90 	vmov	s15, r3
 8028dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8028e02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8028ebc <HAL_RCC_GetSysClockFreq+0x2e4>
 8028e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8028e1e:	e021      	b.n	8028e64 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8028e20:	693b      	ldr	r3, [r7, #16]
 8028e22:	ee07 3a90 	vmov	s15, r3
 8028e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028e2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8028ec4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8028e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028e32:	4b1e      	ldr	r3, [pc, #120]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028e3a:	ee07 3a90 	vmov	s15, r3
 8028e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8028e46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8028ebc <HAL_RCC_GetSysClockFreq+0x2e4>
 8028e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8028e62:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8028e64:	4b11      	ldr	r3, [pc, #68]	; (8028eac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8028e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e68:	0a5b      	lsrs	r3, r3, #9
 8028e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028e6e:	3301      	adds	r3, #1
 8028e70:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8028e72:	683b      	ldr	r3, [r7, #0]
 8028e74:	ee07 3a90 	vmov	s15, r3
 8028e78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8028e7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8028e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028e88:	ee17 3a90 	vmov	r3, s15
 8028e8c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8028e8e:	e005      	b.n	8028e9c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8028e90:	2300      	movs	r3, #0
 8028e92:	61bb      	str	r3, [r7, #24]
    break;
 8028e94:	e002      	b.n	8028e9c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8028e96:	4b07      	ldr	r3, [pc, #28]	; (8028eb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8028e98:	61bb      	str	r3, [r7, #24]
    break;
 8028e9a:	bf00      	nop
  }

  return sysclockfreq;
 8028e9c:	69bb      	ldr	r3, [r7, #24]
}
 8028e9e:	4618      	mov	r0, r3
 8028ea0:	3724      	adds	r7, #36	; 0x24
 8028ea2:	46bd      	mov	sp, r7
 8028ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ea8:	4770      	bx	lr
 8028eaa:	bf00      	nop
 8028eac:	58024400 	.word	0x58024400
 8028eb0:	03d09000 	.word	0x03d09000
 8028eb4:	003d0900 	.word	0x003d0900
 8028eb8:	017d7840 	.word	0x017d7840
 8028ebc:	46000000 	.word	0x46000000
 8028ec0:	4c742400 	.word	0x4c742400
 8028ec4:	4a742400 	.word	0x4a742400
 8028ec8:	4bbebc20 	.word	0x4bbebc20

08028ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8028ecc:	b580      	push	{r7, lr}
 8028ece:	b082      	sub	sp, #8
 8028ed0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8028ed2:	f7ff fe81 	bl	8028bd8 <HAL_RCC_GetSysClockFreq>
 8028ed6:	4602      	mov	r2, r0
 8028ed8:	4b10      	ldr	r3, [pc, #64]	; (8028f1c <HAL_RCC_GetHCLKFreq+0x50>)
 8028eda:	699b      	ldr	r3, [r3, #24]
 8028edc:	0a1b      	lsrs	r3, r3, #8
 8028ede:	f003 030f 	and.w	r3, r3, #15
 8028ee2:	490f      	ldr	r1, [pc, #60]	; (8028f20 <HAL_RCC_GetHCLKFreq+0x54>)
 8028ee4:	5ccb      	ldrb	r3, [r1, r3]
 8028ee6:	f003 031f 	and.w	r3, r3, #31
 8028eea:	fa22 f303 	lsr.w	r3, r2, r3
 8028eee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8028ef0:	4b0a      	ldr	r3, [pc, #40]	; (8028f1c <HAL_RCC_GetHCLKFreq+0x50>)
 8028ef2:	699b      	ldr	r3, [r3, #24]
 8028ef4:	f003 030f 	and.w	r3, r3, #15
 8028ef8:	4a09      	ldr	r2, [pc, #36]	; (8028f20 <HAL_RCC_GetHCLKFreq+0x54>)
 8028efa:	5cd3      	ldrb	r3, [r2, r3]
 8028efc:	f003 031f 	and.w	r3, r3, #31
 8028f00:	687a      	ldr	r2, [r7, #4]
 8028f02:	fa22 f303 	lsr.w	r3, r2, r3
 8028f06:	4a07      	ldr	r2, [pc, #28]	; (8028f24 <HAL_RCC_GetHCLKFreq+0x58>)
 8028f08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8028f0a:	4a07      	ldr	r2, [pc, #28]	; (8028f28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8028f0c:	687b      	ldr	r3, [r7, #4]
 8028f0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8028f10:	4b04      	ldr	r3, [pc, #16]	; (8028f24 <HAL_RCC_GetHCLKFreq+0x58>)
 8028f12:	681b      	ldr	r3, [r3, #0]
}
 8028f14:	4618      	mov	r0, r3
 8028f16:	3708      	adds	r7, #8
 8028f18:	46bd      	mov	sp, r7
 8028f1a:	bd80      	pop	{r7, pc}
 8028f1c:	58024400 	.word	0x58024400
 8028f20:	0803e494 	.word	0x0803e494
 8028f24:	24000004 	.word	0x24000004
 8028f28:	24000000 	.word	0x24000000

08028f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8028f2c:	b580      	push	{r7, lr}
 8028f2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8028f30:	f7ff ffcc 	bl	8028ecc <HAL_RCC_GetHCLKFreq>
 8028f34:	4602      	mov	r2, r0
 8028f36:	4b06      	ldr	r3, [pc, #24]	; (8028f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8028f38:	69db      	ldr	r3, [r3, #28]
 8028f3a:	091b      	lsrs	r3, r3, #4
 8028f3c:	f003 0307 	and.w	r3, r3, #7
 8028f40:	4904      	ldr	r1, [pc, #16]	; (8028f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8028f42:	5ccb      	ldrb	r3, [r1, r3]
 8028f44:	f003 031f 	and.w	r3, r3, #31
 8028f48:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8028f4c:	4618      	mov	r0, r3
 8028f4e:	bd80      	pop	{r7, pc}
 8028f50:	58024400 	.word	0x58024400
 8028f54:	0803e494 	.word	0x0803e494

08028f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8028f58:	b580      	push	{r7, lr}
 8028f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8028f5c:	f7ff ffb6 	bl	8028ecc <HAL_RCC_GetHCLKFreq>
 8028f60:	4602      	mov	r2, r0
 8028f62:	4b06      	ldr	r3, [pc, #24]	; (8028f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8028f64:	69db      	ldr	r3, [r3, #28]
 8028f66:	0a1b      	lsrs	r3, r3, #8
 8028f68:	f003 0307 	and.w	r3, r3, #7
 8028f6c:	4904      	ldr	r1, [pc, #16]	; (8028f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8028f6e:	5ccb      	ldrb	r3, [r1, r3]
 8028f70:	f003 031f 	and.w	r3, r3, #31
 8028f74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8028f78:	4618      	mov	r0, r3
 8028f7a:	bd80      	pop	{r7, pc}
 8028f7c:	58024400 	.word	0x58024400
 8028f80:	0803e494 	.word	0x0803e494

08028f84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8028f84:	b580      	push	{r7, lr}
 8028f86:	b086      	sub	sp, #24
 8028f88:	af00      	add	r7, sp, #0
 8028f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8028f8c:	2300      	movs	r3, #0
 8028f8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8028f90:	2300      	movs	r3, #0
 8028f92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8028f94:	687b      	ldr	r3, [r7, #4]
 8028f96:	681b      	ldr	r3, [r3, #0]
 8028f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8028f9c:	2b00      	cmp	r3, #0
 8028f9e:	d03f      	beq.n	8029020 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8028fa0:	687b      	ldr	r3, [r7, #4]
 8028fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8028fa4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8028fa8:	d02a      	beq.n	8029000 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8028faa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8028fae:	d824      	bhi.n	8028ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8028fb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8028fb4:	d018      	beq.n	8028fe8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8028fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8028fba:	d81e      	bhi.n	8028ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8028fbc:	2b00      	cmp	r3, #0
 8028fbe:	d003      	beq.n	8028fc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8028fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8028fc4:	d007      	beq.n	8028fd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8028fc6:	e018      	b.n	8028ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8028fc8:	4ba3      	ldr	r3, [pc, #652]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8028fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028fcc:	4aa2      	ldr	r2, [pc, #648]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8028fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8028fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8028fd4:	e015      	b.n	8029002 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8028fd6:	687b      	ldr	r3, [r7, #4]
 8028fd8:	3304      	adds	r3, #4
 8028fda:	2102      	movs	r1, #2
 8028fdc:	4618      	mov	r0, r3
 8028fde:	f001 f9d5 	bl	802a38c <RCCEx_PLL2_Config>
 8028fe2:	4603      	mov	r3, r0
 8028fe4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8028fe6:	e00c      	b.n	8029002 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8028fe8:	687b      	ldr	r3, [r7, #4]
 8028fea:	3324      	adds	r3, #36	; 0x24
 8028fec:	2102      	movs	r1, #2
 8028fee:	4618      	mov	r0, r3
 8028ff0:	f001 fa7e 	bl	802a4f0 <RCCEx_PLL3_Config>
 8028ff4:	4603      	mov	r3, r0
 8028ff6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8028ff8:	e003      	b.n	8029002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8028ffa:	2301      	movs	r3, #1
 8028ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8028ffe:	e000      	b.n	8029002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8029000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8029002:	7dfb      	ldrb	r3, [r7, #23]
 8029004:	2b00      	cmp	r3, #0
 8029006:	d109      	bne.n	802901c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8029008:	4b93      	ldr	r3, [pc, #588]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 802900a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802900c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8029010:	687b      	ldr	r3, [r7, #4]
 8029012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029014:	4990      	ldr	r1, [pc, #576]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8029016:	4313      	orrs	r3, r2
 8029018:	650b      	str	r3, [r1, #80]	; 0x50
 802901a:	e001      	b.n	8029020 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802901c:	7dfb      	ldrb	r3, [r7, #23]
 802901e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8029020:	687b      	ldr	r3, [r7, #4]
 8029022:	681b      	ldr	r3, [r3, #0]
 8029024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029028:	2b00      	cmp	r3, #0
 802902a:	d03d      	beq.n	80290a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 802902c:	687b      	ldr	r3, [r7, #4]
 802902e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029030:	2b04      	cmp	r3, #4
 8029032:	d826      	bhi.n	8029082 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8029034:	a201      	add	r2, pc, #4	; (adr r2, 802903c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8029036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802903a:	bf00      	nop
 802903c:	08029051 	.word	0x08029051
 8029040:	0802905f 	.word	0x0802905f
 8029044:	08029071 	.word	0x08029071
 8029048:	08029089 	.word	0x08029089
 802904c:	08029089 	.word	0x08029089
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8029050:	4b81      	ldr	r3, [pc, #516]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8029052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029054:	4a80      	ldr	r2, [pc, #512]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8029056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802905a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 802905c:	e015      	b.n	802908a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 802905e:	687b      	ldr	r3, [r7, #4]
 8029060:	3304      	adds	r3, #4
 8029062:	2100      	movs	r1, #0
 8029064:	4618      	mov	r0, r3
 8029066:	f001 f991 	bl	802a38c <RCCEx_PLL2_Config>
 802906a:	4603      	mov	r3, r0
 802906c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 802906e:	e00c      	b.n	802908a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8029070:	687b      	ldr	r3, [r7, #4]
 8029072:	3324      	adds	r3, #36	; 0x24
 8029074:	2100      	movs	r1, #0
 8029076:	4618      	mov	r0, r3
 8029078:	f001 fa3a 	bl	802a4f0 <RCCEx_PLL3_Config>
 802907c:	4603      	mov	r3, r0
 802907e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8029080:	e003      	b.n	802908a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8029082:	2301      	movs	r3, #1
 8029084:	75fb      	strb	r3, [r7, #23]
      break;
 8029086:	e000      	b.n	802908a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8029088:	bf00      	nop
    }

    if(ret == HAL_OK)
 802908a:	7dfb      	ldrb	r3, [r7, #23]
 802908c:	2b00      	cmp	r3, #0
 802908e:	d109      	bne.n	80290a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8029090:	4b71      	ldr	r3, [pc, #452]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8029092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029094:	f023 0207 	bic.w	r2, r3, #7
 8029098:	687b      	ldr	r3, [r7, #4]
 802909a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802909c:	496e      	ldr	r1, [pc, #440]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 802909e:	4313      	orrs	r3, r2
 80290a0:	650b      	str	r3, [r1, #80]	; 0x50
 80290a2:	e001      	b.n	80290a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80290a4:	7dfb      	ldrb	r3, [r7, #23]
 80290a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80290a8:	687b      	ldr	r3, [r7, #4]
 80290aa:	681b      	ldr	r3, [r3, #0]
 80290ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80290b0:	2b00      	cmp	r3, #0
 80290b2:	d042      	beq.n	802913a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80290b4:	687b      	ldr	r3, [r7, #4]
 80290b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80290b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80290bc:	d02b      	beq.n	8029116 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80290be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80290c2:	d825      	bhi.n	8029110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80290c4:	2bc0      	cmp	r3, #192	; 0xc0
 80290c6:	d028      	beq.n	802911a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80290c8:	2bc0      	cmp	r3, #192	; 0xc0
 80290ca:	d821      	bhi.n	8029110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80290cc:	2b80      	cmp	r3, #128	; 0x80
 80290ce:	d016      	beq.n	80290fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80290d0:	2b80      	cmp	r3, #128	; 0x80
 80290d2:	d81d      	bhi.n	8029110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80290d4:	2b00      	cmp	r3, #0
 80290d6:	d002      	beq.n	80290de <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80290d8:	2b40      	cmp	r3, #64	; 0x40
 80290da:	d007      	beq.n	80290ec <HAL_RCCEx_PeriphCLKConfig+0x168>
 80290dc:	e018      	b.n	8029110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80290de:	4b5e      	ldr	r3, [pc, #376]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80290e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80290e2:	4a5d      	ldr	r2, [pc, #372]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80290e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80290e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80290ea:	e017      	b.n	802911c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80290ec:	687b      	ldr	r3, [r7, #4]
 80290ee:	3304      	adds	r3, #4
 80290f0:	2100      	movs	r1, #0
 80290f2:	4618      	mov	r0, r3
 80290f4:	f001 f94a 	bl	802a38c <RCCEx_PLL2_Config>
 80290f8:	4603      	mov	r3, r0
 80290fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80290fc:	e00e      	b.n	802911c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80290fe:	687b      	ldr	r3, [r7, #4]
 8029100:	3324      	adds	r3, #36	; 0x24
 8029102:	2100      	movs	r1, #0
 8029104:	4618      	mov	r0, r3
 8029106:	f001 f9f3 	bl	802a4f0 <RCCEx_PLL3_Config>
 802910a:	4603      	mov	r3, r0
 802910c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 802910e:	e005      	b.n	802911c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8029110:	2301      	movs	r3, #1
 8029112:	75fb      	strb	r3, [r7, #23]
      break;
 8029114:	e002      	b.n	802911c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8029116:	bf00      	nop
 8029118:	e000      	b.n	802911c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 802911a:	bf00      	nop
    }

    if(ret == HAL_OK)
 802911c:	7dfb      	ldrb	r3, [r7, #23]
 802911e:	2b00      	cmp	r3, #0
 8029120:	d109      	bne.n	8029136 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8029122:	4b4d      	ldr	r3, [pc, #308]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8029124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029126:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 802912a:	687b      	ldr	r3, [r7, #4]
 802912c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802912e:	494a      	ldr	r1, [pc, #296]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8029130:	4313      	orrs	r3, r2
 8029132:	650b      	str	r3, [r1, #80]	; 0x50
 8029134:	e001      	b.n	802913a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8029136:	7dfb      	ldrb	r3, [r7, #23]
 8029138:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 802913a:	687b      	ldr	r3, [r7, #4]
 802913c:	681b      	ldr	r3, [r3, #0]
 802913e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8029142:	2b00      	cmp	r3, #0
 8029144:	d049      	beq.n	80291da <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8029146:	687b      	ldr	r3, [r7, #4]
 8029148:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 802914c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8029150:	d030      	beq.n	80291b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8029152:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8029156:	d82a      	bhi.n	80291ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8029158:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 802915c:	d02c      	beq.n	80291b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 802915e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8029162:	d824      	bhi.n	80291ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8029164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8029168:	d018      	beq.n	802919c <HAL_RCCEx_PeriphCLKConfig+0x218>
 802916a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802916e:	d81e      	bhi.n	80291ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8029170:	2b00      	cmp	r3, #0
 8029172:	d003      	beq.n	802917c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8029174:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8029178:	d007      	beq.n	802918a <HAL_RCCEx_PeriphCLKConfig+0x206>
 802917a:	e018      	b.n	80291ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802917c:	4b36      	ldr	r3, [pc, #216]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 802917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029180:	4a35      	ldr	r2, [pc, #212]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8029182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8029186:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8029188:	e017      	b.n	80291ba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 802918a:	687b      	ldr	r3, [r7, #4]
 802918c:	3304      	adds	r3, #4
 802918e:	2100      	movs	r1, #0
 8029190:	4618      	mov	r0, r3
 8029192:	f001 f8fb 	bl	802a38c <RCCEx_PLL2_Config>
 8029196:	4603      	mov	r3, r0
 8029198:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 802919a:	e00e      	b.n	80291ba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 802919c:	687b      	ldr	r3, [r7, #4]
 802919e:	3324      	adds	r3, #36	; 0x24
 80291a0:	2100      	movs	r1, #0
 80291a2:	4618      	mov	r0, r3
 80291a4:	f001 f9a4 	bl	802a4f0 <RCCEx_PLL3_Config>
 80291a8:	4603      	mov	r3, r0
 80291aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80291ac:	e005      	b.n	80291ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80291ae:	2301      	movs	r3, #1
 80291b0:	75fb      	strb	r3, [r7, #23]
      break;
 80291b2:	e002      	b.n	80291ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80291b4:	bf00      	nop
 80291b6:	e000      	b.n	80291ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80291b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80291ba:	7dfb      	ldrb	r3, [r7, #23]
 80291bc:	2b00      	cmp	r3, #0
 80291be:	d10a      	bne.n	80291d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80291c0:	4b25      	ldr	r3, [pc, #148]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80291c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80291c4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80291c8:	687b      	ldr	r3, [r7, #4]
 80291ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80291ce:	4922      	ldr	r1, [pc, #136]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80291d0:	4313      	orrs	r3, r2
 80291d2:	658b      	str	r3, [r1, #88]	; 0x58
 80291d4:	e001      	b.n	80291da <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80291d6:	7dfb      	ldrb	r3, [r7, #23]
 80291d8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80291da:	687b      	ldr	r3, [r7, #4]
 80291dc:	681b      	ldr	r3, [r3, #0]
 80291de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80291e2:	2b00      	cmp	r3, #0
 80291e4:	d04b      	beq.n	802927e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80291e6:	687b      	ldr	r3, [r7, #4]
 80291e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80291ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80291f0:	d030      	beq.n	8029254 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80291f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80291f6:	d82a      	bhi.n	802924e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80291f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80291fc:	d02e      	beq.n	802925c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80291fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8029202:	d824      	bhi.n	802924e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8029204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8029208:	d018      	beq.n	802923c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 802920a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802920e:	d81e      	bhi.n	802924e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8029210:	2b00      	cmp	r3, #0
 8029212:	d003      	beq.n	802921c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8029214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8029218:	d007      	beq.n	802922a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 802921a:	e018      	b.n	802924e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802921c:	4b0e      	ldr	r3, [pc, #56]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 802921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029220:	4a0d      	ldr	r2, [pc, #52]	; (8029258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8029222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8029226:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8029228:	e019      	b.n	802925e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 802922a:	687b      	ldr	r3, [r7, #4]
 802922c:	3304      	adds	r3, #4
 802922e:	2100      	movs	r1, #0
 8029230:	4618      	mov	r0, r3
 8029232:	f001 f8ab 	bl	802a38c <RCCEx_PLL2_Config>
 8029236:	4603      	mov	r3, r0
 8029238:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 802923a:	e010      	b.n	802925e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802923c:	687b      	ldr	r3, [r7, #4]
 802923e:	3324      	adds	r3, #36	; 0x24
 8029240:	2100      	movs	r1, #0
 8029242:	4618      	mov	r0, r3
 8029244:	f001 f954 	bl	802a4f0 <RCCEx_PLL3_Config>
 8029248:	4603      	mov	r3, r0
 802924a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 802924c:	e007      	b.n	802925e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 802924e:	2301      	movs	r3, #1
 8029250:	75fb      	strb	r3, [r7, #23]
      break;
 8029252:	e004      	b.n	802925e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8029254:	bf00      	nop
 8029256:	e002      	b.n	802925e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8029258:	58024400 	.word	0x58024400
      break;
 802925c:	bf00      	nop
    }

    if(ret == HAL_OK)
 802925e:	7dfb      	ldrb	r3, [r7, #23]
 8029260:	2b00      	cmp	r3, #0
 8029262:	d10a      	bne.n	802927a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8029264:	4b99      	ldr	r3, [pc, #612]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8029266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8029268:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 802926c:	687b      	ldr	r3, [r7, #4]
 802926e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8029272:	4996      	ldr	r1, [pc, #600]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8029274:	4313      	orrs	r3, r2
 8029276:	658b      	str	r3, [r1, #88]	; 0x58
 8029278:	e001      	b.n	802927e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802927a:	7dfb      	ldrb	r3, [r7, #23]
 802927c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 802927e:	687b      	ldr	r3, [r7, #4]
 8029280:	681b      	ldr	r3, [r3, #0]
 8029282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8029286:	2b00      	cmp	r3, #0
 8029288:	d032      	beq.n	80292f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 802928a:	687b      	ldr	r3, [r7, #4]
 802928c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802928e:	2b30      	cmp	r3, #48	; 0x30
 8029290:	d01c      	beq.n	80292cc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8029292:	2b30      	cmp	r3, #48	; 0x30
 8029294:	d817      	bhi.n	80292c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8029296:	2b20      	cmp	r3, #32
 8029298:	d00c      	beq.n	80292b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 802929a:	2b20      	cmp	r3, #32
 802929c:	d813      	bhi.n	80292c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 802929e:	2b00      	cmp	r3, #0
 80292a0:	d016      	beq.n	80292d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80292a2:	2b10      	cmp	r3, #16
 80292a4:	d10f      	bne.n	80292c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80292a6:	4b89      	ldr	r3, [pc, #548]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80292a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80292aa:	4a88      	ldr	r2, [pc, #544]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80292ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80292b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80292b2:	e00e      	b.n	80292d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80292b4:	687b      	ldr	r3, [r7, #4]
 80292b6:	3304      	adds	r3, #4
 80292b8:	2102      	movs	r1, #2
 80292ba:	4618      	mov	r0, r3
 80292bc:	f001 f866 	bl	802a38c <RCCEx_PLL2_Config>
 80292c0:	4603      	mov	r3, r0
 80292c2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80292c4:	e005      	b.n	80292d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80292c6:	2301      	movs	r3, #1
 80292c8:	75fb      	strb	r3, [r7, #23]
      break;
 80292ca:	e002      	b.n	80292d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80292cc:	bf00      	nop
 80292ce:	e000      	b.n	80292d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80292d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80292d2:	7dfb      	ldrb	r3, [r7, #23]
 80292d4:	2b00      	cmp	r3, #0
 80292d6:	d109      	bne.n	80292ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80292d8:	4b7c      	ldr	r3, [pc, #496]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80292da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80292dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80292e0:	687b      	ldr	r3, [r7, #4]
 80292e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80292e4:	4979      	ldr	r1, [pc, #484]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80292e6:	4313      	orrs	r3, r2
 80292e8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80292ea:	e001      	b.n	80292f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80292ec:	7dfb      	ldrb	r3, [r7, #23]
 80292ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80292f0:	687b      	ldr	r3, [r7, #4]
 80292f2:	681b      	ldr	r3, [r3, #0]
 80292f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80292f8:	2b00      	cmp	r3, #0
 80292fa:	d047      	beq.n	802938c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80292fc:	687b      	ldr	r3, [r7, #4]
 80292fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8029304:	d030      	beq.n	8029368 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8029306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802930a:	d82a      	bhi.n	8029362 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 802930c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8029310:	d02c      	beq.n	802936c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8029312:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8029316:	d824      	bhi.n	8029362 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8029318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802931c:	d018      	beq.n	8029350 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 802931e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029322:	d81e      	bhi.n	8029362 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8029324:	2b00      	cmp	r3, #0
 8029326:	d003      	beq.n	8029330 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8029328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802932c:	d007      	beq.n	802933e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 802932e:	e018      	b.n	8029362 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8029330:	4b66      	ldr	r3, [pc, #408]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8029332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029334:	4a65      	ldr	r2, [pc, #404]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8029336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802933a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 802933c:	e017      	b.n	802936e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 802933e:	687b      	ldr	r3, [r7, #4]
 8029340:	3304      	adds	r3, #4
 8029342:	2100      	movs	r1, #0
 8029344:	4618      	mov	r0, r3
 8029346:	f001 f821 	bl	802a38c <RCCEx_PLL2_Config>
 802934a:	4603      	mov	r3, r0
 802934c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 802934e:	e00e      	b.n	802936e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8029350:	687b      	ldr	r3, [r7, #4]
 8029352:	3324      	adds	r3, #36	; 0x24
 8029354:	2100      	movs	r1, #0
 8029356:	4618      	mov	r0, r3
 8029358:	f001 f8ca 	bl	802a4f0 <RCCEx_PLL3_Config>
 802935c:	4603      	mov	r3, r0
 802935e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8029360:	e005      	b.n	802936e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8029362:	2301      	movs	r3, #1
 8029364:	75fb      	strb	r3, [r7, #23]
      break;
 8029366:	e002      	b.n	802936e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8029368:	bf00      	nop
 802936a:	e000      	b.n	802936e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 802936c:	bf00      	nop
    }

    if(ret == HAL_OK)
 802936e:	7dfb      	ldrb	r3, [r7, #23]
 8029370:	2b00      	cmp	r3, #0
 8029372:	d109      	bne.n	8029388 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8029374:	4b55      	ldr	r3, [pc, #340]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8029376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029378:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 802937c:	687b      	ldr	r3, [r7, #4]
 802937e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029380:	4952      	ldr	r1, [pc, #328]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8029382:	4313      	orrs	r3, r2
 8029384:	650b      	str	r3, [r1, #80]	; 0x50
 8029386:	e001      	b.n	802938c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8029388:	7dfb      	ldrb	r3, [r7, #23]
 802938a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 802938c:	687b      	ldr	r3, [r7, #4]
 802938e:	681b      	ldr	r3, [r3, #0]
 8029390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8029394:	2b00      	cmp	r3, #0
 8029396:	d049      	beq.n	802942c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8029398:	687b      	ldr	r3, [r7, #4]
 802939a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802939c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80293a0:	d02e      	beq.n	8029400 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80293a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80293a6:	d828      	bhi.n	80293fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80293a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80293ac:	d02a      	beq.n	8029404 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80293ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80293b2:	d822      	bhi.n	80293fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80293b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80293b8:	d026      	beq.n	8029408 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80293ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80293be:	d81c      	bhi.n	80293fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80293c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80293c4:	d010      	beq.n	80293e8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80293c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80293ca:	d816      	bhi.n	80293fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80293cc:	2b00      	cmp	r3, #0
 80293ce:	d01d      	beq.n	802940c <HAL_RCCEx_PeriphCLKConfig+0x488>
 80293d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80293d4:	d111      	bne.n	80293fa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80293d6:	687b      	ldr	r3, [r7, #4]
 80293d8:	3304      	adds	r3, #4
 80293da:	2101      	movs	r1, #1
 80293dc:	4618      	mov	r0, r3
 80293de:	f000 ffd5 	bl	802a38c <RCCEx_PLL2_Config>
 80293e2:	4603      	mov	r3, r0
 80293e4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80293e6:	e012      	b.n	802940e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80293e8:	687b      	ldr	r3, [r7, #4]
 80293ea:	3324      	adds	r3, #36	; 0x24
 80293ec:	2101      	movs	r1, #1
 80293ee:	4618      	mov	r0, r3
 80293f0:	f001 f87e 	bl	802a4f0 <RCCEx_PLL3_Config>
 80293f4:	4603      	mov	r3, r0
 80293f6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80293f8:	e009      	b.n	802940e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80293fa:	2301      	movs	r3, #1
 80293fc:	75fb      	strb	r3, [r7, #23]
      break;
 80293fe:	e006      	b.n	802940e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8029400:	bf00      	nop
 8029402:	e004      	b.n	802940e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8029404:	bf00      	nop
 8029406:	e002      	b.n	802940e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8029408:	bf00      	nop
 802940a:	e000      	b.n	802940e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 802940c:	bf00      	nop
    }

    if(ret == HAL_OK)
 802940e:	7dfb      	ldrb	r3, [r7, #23]
 8029410:	2b00      	cmp	r3, #0
 8029412:	d109      	bne.n	8029428 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8029414:	4b2d      	ldr	r3, [pc, #180]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8029416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029418:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 802941c:	687b      	ldr	r3, [r7, #4]
 802941e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8029420:	492a      	ldr	r1, [pc, #168]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8029422:	4313      	orrs	r3, r2
 8029424:	650b      	str	r3, [r1, #80]	; 0x50
 8029426:	e001      	b.n	802942c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8029428:	7dfb      	ldrb	r3, [r7, #23]
 802942a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 802942c:	687b      	ldr	r3, [r7, #4]
 802942e:	681b      	ldr	r3, [r3, #0]
 8029430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8029434:	2b00      	cmp	r3, #0
 8029436:	d04d      	beq.n	80294d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8029438:	687b      	ldr	r3, [r7, #4]
 802943a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 802943e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8029442:	d02e      	beq.n	80294a2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8029444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8029448:	d828      	bhi.n	802949c <HAL_RCCEx_PeriphCLKConfig+0x518>
 802944a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802944e:	d02a      	beq.n	80294a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8029450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029454:	d822      	bhi.n	802949c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8029456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802945a:	d026      	beq.n	80294aa <HAL_RCCEx_PeriphCLKConfig+0x526>
 802945c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8029460:	d81c      	bhi.n	802949c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8029462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8029466:	d010      	beq.n	802948a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8029468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802946c:	d816      	bhi.n	802949c <HAL_RCCEx_PeriphCLKConfig+0x518>
 802946e:	2b00      	cmp	r3, #0
 8029470:	d01d      	beq.n	80294ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8029472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8029476:	d111      	bne.n	802949c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8029478:	687b      	ldr	r3, [r7, #4]
 802947a:	3304      	adds	r3, #4
 802947c:	2101      	movs	r1, #1
 802947e:	4618      	mov	r0, r3
 8029480:	f000 ff84 	bl	802a38c <RCCEx_PLL2_Config>
 8029484:	4603      	mov	r3, r0
 8029486:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8029488:	e012      	b.n	80294b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 802948a:	687b      	ldr	r3, [r7, #4]
 802948c:	3324      	adds	r3, #36	; 0x24
 802948e:	2101      	movs	r1, #1
 8029490:	4618      	mov	r0, r3
 8029492:	f001 f82d 	bl	802a4f0 <RCCEx_PLL3_Config>
 8029496:	4603      	mov	r3, r0
 8029498:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 802949a:	e009      	b.n	80294b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 802949c:	2301      	movs	r3, #1
 802949e:	75fb      	strb	r3, [r7, #23]
      break;
 80294a0:	e006      	b.n	80294b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80294a2:	bf00      	nop
 80294a4:	e004      	b.n	80294b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80294a6:	bf00      	nop
 80294a8:	e002      	b.n	80294b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80294aa:	bf00      	nop
 80294ac:	e000      	b.n	80294b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80294ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80294b0:	7dfb      	ldrb	r3, [r7, #23]
 80294b2:	2b00      	cmp	r3, #0
 80294b4:	d10c      	bne.n	80294d0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80294b6:	4b05      	ldr	r3, [pc, #20]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80294b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80294ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80294be:	687b      	ldr	r3, [r7, #4]
 80294c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80294c4:	4901      	ldr	r1, [pc, #4]	; (80294cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80294c6:	4313      	orrs	r3, r2
 80294c8:	658b      	str	r3, [r1, #88]	; 0x58
 80294ca:	e003      	b.n	80294d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80294cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80294d0:	7dfb      	ldrb	r3, [r7, #23]
 80294d2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80294d4:	687b      	ldr	r3, [r7, #4]
 80294d6:	681b      	ldr	r3, [r3, #0]
 80294d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80294dc:	2b00      	cmp	r3, #0
 80294de:	d02f      	beq.n	8029540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80294e0:	687b      	ldr	r3, [r7, #4]
 80294e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80294e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80294e8:	d00e      	beq.n	8029508 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80294ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80294ee:	d814      	bhi.n	802951a <HAL_RCCEx_PeriphCLKConfig+0x596>
 80294f0:	2b00      	cmp	r3, #0
 80294f2:	d015      	beq.n	8029520 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80294f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80294f8:	d10f      	bne.n	802951a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80294fa:	4baf      	ldr	r3, [pc, #700]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80294fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80294fe:	4aae      	ldr	r2, [pc, #696]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8029500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8029504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8029506:	e00c      	b.n	8029522 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8029508:	687b      	ldr	r3, [r7, #4]
 802950a:	3304      	adds	r3, #4
 802950c:	2101      	movs	r1, #1
 802950e:	4618      	mov	r0, r3
 8029510:	f000 ff3c 	bl	802a38c <RCCEx_PLL2_Config>
 8029514:	4603      	mov	r3, r0
 8029516:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8029518:	e003      	b.n	8029522 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 802951a:	2301      	movs	r3, #1
 802951c:	75fb      	strb	r3, [r7, #23]
      break;
 802951e:	e000      	b.n	8029522 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8029520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8029522:	7dfb      	ldrb	r3, [r7, #23]
 8029524:	2b00      	cmp	r3, #0
 8029526:	d109      	bne.n	802953c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8029528:	4ba3      	ldr	r3, [pc, #652]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 802952a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802952c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8029530:	687b      	ldr	r3, [r7, #4]
 8029532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029534:	49a0      	ldr	r1, [pc, #640]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8029536:	4313      	orrs	r3, r2
 8029538:	650b      	str	r3, [r1, #80]	; 0x50
 802953a:	e001      	b.n	8029540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802953c:	7dfb      	ldrb	r3, [r7, #23]
 802953e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8029540:	687b      	ldr	r3, [r7, #4]
 8029542:	681b      	ldr	r3, [r3, #0]
 8029544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8029548:	2b00      	cmp	r3, #0
 802954a:	d032      	beq.n	80295b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 802954c:	687b      	ldr	r3, [r7, #4]
 802954e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029550:	2b03      	cmp	r3, #3
 8029552:	d81b      	bhi.n	802958c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8029554:	a201      	add	r2, pc, #4	; (adr r2, 802955c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8029556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802955a:	bf00      	nop
 802955c:	08029593 	.word	0x08029593
 8029560:	0802956d 	.word	0x0802956d
 8029564:	0802957b 	.word	0x0802957b
 8029568:	08029593 	.word	0x08029593
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802956c:	4b92      	ldr	r3, [pc, #584]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 802956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029570:	4a91      	ldr	r2, [pc, #580]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8029572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8029576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8029578:	e00c      	b.n	8029594 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 802957a:	687b      	ldr	r3, [r7, #4]
 802957c:	3304      	adds	r3, #4
 802957e:	2102      	movs	r1, #2
 8029580:	4618      	mov	r0, r3
 8029582:	f000 ff03 	bl	802a38c <RCCEx_PLL2_Config>
 8029586:	4603      	mov	r3, r0
 8029588:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 802958a:	e003      	b.n	8029594 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 802958c:	2301      	movs	r3, #1
 802958e:	75fb      	strb	r3, [r7, #23]
      break;
 8029590:	e000      	b.n	8029594 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8029592:	bf00      	nop
    }

    if(ret == HAL_OK)
 8029594:	7dfb      	ldrb	r3, [r7, #23]
 8029596:	2b00      	cmp	r3, #0
 8029598:	d109      	bne.n	80295ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 802959a:	4b87      	ldr	r3, [pc, #540]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 802959c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802959e:	f023 0203 	bic.w	r2, r3, #3
 80295a2:	687b      	ldr	r3, [r7, #4]
 80295a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80295a6:	4984      	ldr	r1, [pc, #528]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80295a8:	4313      	orrs	r3, r2
 80295aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80295ac:	e001      	b.n	80295b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80295ae:	7dfb      	ldrb	r3, [r7, #23]
 80295b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80295b2:	687b      	ldr	r3, [r7, #4]
 80295b4:	681b      	ldr	r3, [r3, #0]
 80295b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80295ba:	2b00      	cmp	r3, #0
 80295bc:	f000 8086 	beq.w	80296cc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80295c0:	4b7e      	ldr	r3, [pc, #504]	; (80297bc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80295c2:	681b      	ldr	r3, [r3, #0]
 80295c4:	4a7d      	ldr	r2, [pc, #500]	; (80297bc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80295c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80295ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80295cc:	f7f8 fd38 	bl	8022040 <HAL_GetTick>
 80295d0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80295d2:	e009      	b.n	80295e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80295d4:	f7f8 fd34 	bl	8022040 <HAL_GetTick>
 80295d8:	4602      	mov	r2, r0
 80295da:	693b      	ldr	r3, [r7, #16]
 80295dc:	1ad3      	subs	r3, r2, r3
 80295de:	2b64      	cmp	r3, #100	; 0x64
 80295e0:	d902      	bls.n	80295e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80295e2:	2303      	movs	r3, #3
 80295e4:	75fb      	strb	r3, [r7, #23]
        break;
 80295e6:	e005      	b.n	80295f4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80295e8:	4b74      	ldr	r3, [pc, #464]	; (80297bc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80295ea:	681b      	ldr	r3, [r3, #0]
 80295ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80295f0:	2b00      	cmp	r3, #0
 80295f2:	d0ef      	beq.n	80295d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80295f4:	7dfb      	ldrb	r3, [r7, #23]
 80295f6:	2b00      	cmp	r3, #0
 80295f8:	d166      	bne.n	80296c8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80295fa:	4b6f      	ldr	r3, [pc, #444]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80295fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80295fe:	687b      	ldr	r3, [r7, #4]
 8029600:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8029604:	4053      	eors	r3, r2
 8029606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802960a:	2b00      	cmp	r3, #0
 802960c:	d013      	beq.n	8029636 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802960e:	4b6a      	ldr	r3, [pc, #424]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8029610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029616:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8029618:	4b67      	ldr	r3, [pc, #412]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 802961a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802961c:	4a66      	ldr	r2, [pc, #408]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 802961e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8029622:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8029624:	4b64      	ldr	r3, [pc, #400]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8029626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029628:	4a63      	ldr	r2, [pc, #396]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 802962a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802962e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8029630:	4a61      	ldr	r2, [pc, #388]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8029632:	68fb      	ldr	r3, [r7, #12]
 8029634:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8029636:	687b      	ldr	r3, [r7, #4]
 8029638:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 802963c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029640:	d115      	bne.n	802966e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8029642:	f7f8 fcfd 	bl	8022040 <HAL_GetTick>
 8029646:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8029648:	e00b      	b.n	8029662 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802964a:	f7f8 fcf9 	bl	8022040 <HAL_GetTick>
 802964e:	4602      	mov	r2, r0
 8029650:	693b      	ldr	r3, [r7, #16]
 8029652:	1ad3      	subs	r3, r2, r3
 8029654:	f241 3288 	movw	r2, #5000	; 0x1388
 8029658:	4293      	cmp	r3, r2
 802965a:	d902      	bls.n	8029662 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 802965c:	2303      	movs	r3, #3
 802965e:	75fb      	strb	r3, [r7, #23]
            break;
 8029660:	e005      	b.n	802966e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8029662:	4b55      	ldr	r3, [pc, #340]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8029664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029666:	f003 0302 	and.w	r3, r3, #2
 802966a:	2b00      	cmp	r3, #0
 802966c:	d0ed      	beq.n	802964a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 802966e:	7dfb      	ldrb	r3, [r7, #23]
 8029670:	2b00      	cmp	r3, #0
 8029672:	d126      	bne.n	80296c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8029674:	687b      	ldr	r3, [r7, #4]
 8029676:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 802967a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802967e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8029682:	d10d      	bne.n	80296a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8029684:	4b4c      	ldr	r3, [pc, #304]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8029686:	691b      	ldr	r3, [r3, #16]
 8029688:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 802968c:	687b      	ldr	r3, [r7, #4]
 802968e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8029692:	0919      	lsrs	r1, r3, #4
 8029694:	4b4a      	ldr	r3, [pc, #296]	; (80297c0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8029696:	400b      	ands	r3, r1
 8029698:	4947      	ldr	r1, [pc, #284]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 802969a:	4313      	orrs	r3, r2
 802969c:	610b      	str	r3, [r1, #16]
 802969e:	e005      	b.n	80296ac <HAL_RCCEx_PeriphCLKConfig+0x728>
 80296a0:	4b45      	ldr	r3, [pc, #276]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80296a2:	691b      	ldr	r3, [r3, #16]
 80296a4:	4a44      	ldr	r2, [pc, #272]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80296a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80296aa:	6113      	str	r3, [r2, #16]
 80296ac:	4b42      	ldr	r3, [pc, #264]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80296ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80296b0:	687b      	ldr	r3, [r7, #4]
 80296b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80296b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80296ba:	493f      	ldr	r1, [pc, #252]	; (80297b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80296bc:	4313      	orrs	r3, r2
 80296be:	670b      	str	r3, [r1, #112]	; 0x70
 80296c0:	e004      	b.n	80296cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80296c2:	7dfb      	ldrb	r3, [r7, #23]
 80296c4:	75bb      	strb	r3, [r7, #22]
 80296c6:	e001      	b.n	80296cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80296c8:	7dfb      	ldrb	r3, [r7, #23]
 80296ca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80296cc:	687b      	ldr	r3, [r7, #4]
 80296ce:	681b      	ldr	r3, [r3, #0]
 80296d0:	f003 0301 	and.w	r3, r3, #1
 80296d4:	2b00      	cmp	r3, #0
 80296d6:	f000 8085 	beq.w	80297e4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80296da:	687b      	ldr	r3, [r7, #4]
 80296dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80296de:	2b28      	cmp	r3, #40	; 0x28
 80296e0:	d866      	bhi.n	80297b0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80296e2:	a201      	add	r2, pc, #4	; (adr r2, 80296e8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80296e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80296e8:	080297c5 	.word	0x080297c5
 80296ec:	080297b1 	.word	0x080297b1
 80296f0:	080297b1 	.word	0x080297b1
 80296f4:	080297b1 	.word	0x080297b1
 80296f8:	080297b1 	.word	0x080297b1
 80296fc:	080297b1 	.word	0x080297b1
 8029700:	080297b1 	.word	0x080297b1
 8029704:	080297b1 	.word	0x080297b1
 8029708:	0802978d 	.word	0x0802978d
 802970c:	080297b1 	.word	0x080297b1
 8029710:	080297b1 	.word	0x080297b1
 8029714:	080297b1 	.word	0x080297b1
 8029718:	080297b1 	.word	0x080297b1
 802971c:	080297b1 	.word	0x080297b1
 8029720:	080297b1 	.word	0x080297b1
 8029724:	080297b1 	.word	0x080297b1
 8029728:	0802979f 	.word	0x0802979f
 802972c:	080297b1 	.word	0x080297b1
 8029730:	080297b1 	.word	0x080297b1
 8029734:	080297b1 	.word	0x080297b1
 8029738:	080297b1 	.word	0x080297b1
 802973c:	080297b1 	.word	0x080297b1
 8029740:	080297b1 	.word	0x080297b1
 8029744:	080297b1 	.word	0x080297b1
 8029748:	080297c5 	.word	0x080297c5
 802974c:	080297b1 	.word	0x080297b1
 8029750:	080297b1 	.word	0x080297b1
 8029754:	080297b1 	.word	0x080297b1
 8029758:	080297b1 	.word	0x080297b1
 802975c:	080297b1 	.word	0x080297b1
 8029760:	080297b1 	.word	0x080297b1
 8029764:	080297b1 	.word	0x080297b1
 8029768:	080297c5 	.word	0x080297c5
 802976c:	080297b1 	.word	0x080297b1
 8029770:	080297b1 	.word	0x080297b1
 8029774:	080297b1 	.word	0x080297b1
 8029778:	080297b1 	.word	0x080297b1
 802977c:	080297b1 	.word	0x080297b1
 8029780:	080297b1 	.word	0x080297b1
 8029784:	080297b1 	.word	0x080297b1
 8029788:	080297c5 	.word	0x080297c5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 802978c:	687b      	ldr	r3, [r7, #4]
 802978e:	3304      	adds	r3, #4
 8029790:	2101      	movs	r1, #1
 8029792:	4618      	mov	r0, r3
 8029794:	f000 fdfa 	bl	802a38c <RCCEx_PLL2_Config>
 8029798:	4603      	mov	r3, r0
 802979a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 802979c:	e013      	b.n	80297c6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 802979e:	687b      	ldr	r3, [r7, #4]
 80297a0:	3324      	adds	r3, #36	; 0x24
 80297a2:	2101      	movs	r1, #1
 80297a4:	4618      	mov	r0, r3
 80297a6:	f000 fea3 	bl	802a4f0 <RCCEx_PLL3_Config>
 80297aa:	4603      	mov	r3, r0
 80297ac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80297ae:	e00a      	b.n	80297c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80297b0:	2301      	movs	r3, #1
 80297b2:	75fb      	strb	r3, [r7, #23]
      break;
 80297b4:	e007      	b.n	80297c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80297b6:	bf00      	nop
 80297b8:	58024400 	.word	0x58024400
 80297bc:	58024800 	.word	0x58024800
 80297c0:	00ffffcf 	.word	0x00ffffcf
      break;
 80297c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80297c6:	7dfb      	ldrb	r3, [r7, #23]
 80297c8:	2b00      	cmp	r3, #0
 80297ca:	d109      	bne.n	80297e0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80297cc:	4b96      	ldr	r3, [pc, #600]	; (8029a28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80297ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80297d0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80297d4:	687b      	ldr	r3, [r7, #4]
 80297d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80297d8:	4993      	ldr	r1, [pc, #588]	; (8029a28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80297da:	4313      	orrs	r3, r2
 80297dc:	654b      	str	r3, [r1, #84]	; 0x54
 80297de:	e001      	b.n	80297e4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80297e0:	7dfb      	ldrb	r3, [r7, #23]
 80297e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80297e4:	687b      	ldr	r3, [r7, #4]
 80297e6:	681b      	ldr	r3, [r3, #0]
 80297e8:	f003 0302 	and.w	r3, r3, #2
 80297ec:	2b00      	cmp	r3, #0
 80297ee:	d038      	beq.n	8029862 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80297f0:	687b      	ldr	r3, [r7, #4]
 80297f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80297f4:	2b05      	cmp	r3, #5
 80297f6:	d821      	bhi.n	802983c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80297f8:	a201      	add	r2, pc, #4	; (adr r2, 8029800 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80297fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80297fe:	bf00      	nop
 8029800:	08029843 	.word	0x08029843
 8029804:	08029819 	.word	0x08029819
 8029808:	0802982b 	.word	0x0802982b
 802980c:	08029843 	.word	0x08029843
 8029810:	08029843 	.word	0x08029843
 8029814:	08029843 	.word	0x08029843
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8029818:	687b      	ldr	r3, [r7, #4]
 802981a:	3304      	adds	r3, #4
 802981c:	2101      	movs	r1, #1
 802981e:	4618      	mov	r0, r3
 8029820:	f000 fdb4 	bl	802a38c <RCCEx_PLL2_Config>
 8029824:	4603      	mov	r3, r0
 8029826:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8029828:	e00c      	b.n	8029844 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 802982a:	687b      	ldr	r3, [r7, #4]
 802982c:	3324      	adds	r3, #36	; 0x24
 802982e:	2101      	movs	r1, #1
 8029830:	4618      	mov	r0, r3
 8029832:	f000 fe5d 	bl	802a4f0 <RCCEx_PLL3_Config>
 8029836:	4603      	mov	r3, r0
 8029838:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 802983a:	e003      	b.n	8029844 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 802983c:	2301      	movs	r3, #1
 802983e:	75fb      	strb	r3, [r7, #23]
      break;
 8029840:	e000      	b.n	8029844 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8029842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8029844:	7dfb      	ldrb	r3, [r7, #23]
 8029846:	2b00      	cmp	r3, #0
 8029848:	d109      	bne.n	802985e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 802984a:	4b77      	ldr	r3, [pc, #476]	; (8029a28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 802984c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802984e:	f023 0207 	bic.w	r2, r3, #7
 8029852:	687b      	ldr	r3, [r7, #4]
 8029854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029856:	4974      	ldr	r1, [pc, #464]	; (8029a28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8029858:	4313      	orrs	r3, r2
 802985a:	654b      	str	r3, [r1, #84]	; 0x54
 802985c:	e001      	b.n	8029862 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802985e:	7dfb      	ldrb	r3, [r7, #23]
 8029860:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8029862:	687b      	ldr	r3, [r7, #4]
 8029864:	681b      	ldr	r3, [r3, #0]
 8029866:	f003 0304 	and.w	r3, r3, #4
 802986a:	2b00      	cmp	r3, #0
 802986c:	d03a      	beq.n	80298e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 802986e:	687b      	ldr	r3, [r7, #4]
 8029870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8029874:	2b05      	cmp	r3, #5
 8029876:	d821      	bhi.n	80298bc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8029878:	a201      	add	r2, pc, #4	; (adr r2, 8029880 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 802987a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802987e:	bf00      	nop
 8029880:	080298c3 	.word	0x080298c3
 8029884:	08029899 	.word	0x08029899
 8029888:	080298ab 	.word	0x080298ab
 802988c:	080298c3 	.word	0x080298c3
 8029890:	080298c3 	.word	0x080298c3
 8029894:	080298c3 	.word	0x080298c3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8029898:	687b      	ldr	r3, [r7, #4]
 802989a:	3304      	adds	r3, #4
 802989c:	2101      	movs	r1, #1
 802989e:	4618      	mov	r0, r3
 80298a0:	f000 fd74 	bl	802a38c <RCCEx_PLL2_Config>
 80298a4:	4603      	mov	r3, r0
 80298a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80298a8:	e00c      	b.n	80298c4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80298aa:	687b      	ldr	r3, [r7, #4]
 80298ac:	3324      	adds	r3, #36	; 0x24
 80298ae:	2101      	movs	r1, #1
 80298b0:	4618      	mov	r0, r3
 80298b2:	f000 fe1d 	bl	802a4f0 <RCCEx_PLL3_Config>
 80298b6:	4603      	mov	r3, r0
 80298b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80298ba:	e003      	b.n	80298c4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80298bc:	2301      	movs	r3, #1
 80298be:	75fb      	strb	r3, [r7, #23]
      break;
 80298c0:	e000      	b.n	80298c4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80298c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80298c4:	7dfb      	ldrb	r3, [r7, #23]
 80298c6:	2b00      	cmp	r3, #0
 80298c8:	d10a      	bne.n	80298e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80298ca:	4b57      	ldr	r3, [pc, #348]	; (8029a28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80298cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80298ce:	f023 0207 	bic.w	r2, r3, #7
 80298d2:	687b      	ldr	r3, [r7, #4]
 80298d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80298d8:	4953      	ldr	r1, [pc, #332]	; (8029a28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80298da:	4313      	orrs	r3, r2
 80298dc:	658b      	str	r3, [r1, #88]	; 0x58
 80298de:	e001      	b.n	80298e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80298e0:	7dfb      	ldrb	r3, [r7, #23]
 80298e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80298e4:	687b      	ldr	r3, [r7, #4]
 80298e6:	681b      	ldr	r3, [r3, #0]
 80298e8:	f003 0320 	and.w	r3, r3, #32
 80298ec:	2b00      	cmp	r3, #0
 80298ee:	d04b      	beq.n	8029988 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80298f0:	687b      	ldr	r3, [r7, #4]
 80298f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80298f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80298fa:	d02e      	beq.n	802995a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80298fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8029900:	d828      	bhi.n	8029954 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8029902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029906:	d02a      	beq.n	802995e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8029908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802990c:	d822      	bhi.n	8029954 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 802990e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8029912:	d026      	beq.n	8029962 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8029914:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8029918:	d81c      	bhi.n	8029954 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 802991a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802991e:	d010      	beq.n	8029942 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8029920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8029924:	d816      	bhi.n	8029954 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8029926:	2b00      	cmp	r3, #0
 8029928:	d01d      	beq.n	8029966 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 802992a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802992e:	d111      	bne.n	8029954 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8029930:	687b      	ldr	r3, [r7, #4]
 8029932:	3304      	adds	r3, #4
 8029934:	2100      	movs	r1, #0
 8029936:	4618      	mov	r0, r3
 8029938:	f000 fd28 	bl	802a38c <RCCEx_PLL2_Config>
 802993c:	4603      	mov	r3, r0
 802993e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8029940:	e012      	b.n	8029968 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8029942:	687b      	ldr	r3, [r7, #4]
 8029944:	3324      	adds	r3, #36	; 0x24
 8029946:	2102      	movs	r1, #2
 8029948:	4618      	mov	r0, r3
 802994a:	f000 fdd1 	bl	802a4f0 <RCCEx_PLL3_Config>
 802994e:	4603      	mov	r3, r0
 8029950:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8029952:	e009      	b.n	8029968 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8029954:	2301      	movs	r3, #1
 8029956:	75fb      	strb	r3, [r7, #23]
      break;
 8029958:	e006      	b.n	8029968 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 802995a:	bf00      	nop
 802995c:	e004      	b.n	8029968 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 802995e:	bf00      	nop
 8029960:	e002      	b.n	8029968 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8029962:	bf00      	nop
 8029964:	e000      	b.n	8029968 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8029966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8029968:	7dfb      	ldrb	r3, [r7, #23]
 802996a:	2b00      	cmp	r3, #0
 802996c:	d10a      	bne.n	8029984 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 802996e:	4b2e      	ldr	r3, [pc, #184]	; (8029a28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8029970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029972:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8029976:	687b      	ldr	r3, [r7, #4]
 8029978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802997c:	492a      	ldr	r1, [pc, #168]	; (8029a28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 802997e:	4313      	orrs	r3, r2
 8029980:	654b      	str	r3, [r1, #84]	; 0x54
 8029982:	e001      	b.n	8029988 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8029984:	7dfb      	ldrb	r3, [r7, #23]
 8029986:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8029988:	687b      	ldr	r3, [r7, #4]
 802998a:	681b      	ldr	r3, [r3, #0]
 802998c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029990:	2b00      	cmp	r3, #0
 8029992:	d04d      	beq.n	8029a30 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8029994:	687b      	ldr	r3, [r7, #4]
 8029996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802999a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 802999e:	d02e      	beq.n	80299fe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80299a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80299a4:	d828      	bhi.n	80299f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80299a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80299aa:	d02a      	beq.n	8029a02 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80299ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80299b0:	d822      	bhi.n	80299f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80299b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80299b6:	d026      	beq.n	8029a06 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80299b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80299bc:	d81c      	bhi.n	80299f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80299be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80299c2:	d010      	beq.n	80299e6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80299c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80299c8:	d816      	bhi.n	80299f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80299ca:	2b00      	cmp	r3, #0
 80299cc:	d01d      	beq.n	8029a0a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80299ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80299d2:	d111      	bne.n	80299f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80299d4:	687b      	ldr	r3, [r7, #4]
 80299d6:	3304      	adds	r3, #4
 80299d8:	2100      	movs	r1, #0
 80299da:	4618      	mov	r0, r3
 80299dc:	f000 fcd6 	bl	802a38c <RCCEx_PLL2_Config>
 80299e0:	4603      	mov	r3, r0
 80299e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80299e4:	e012      	b.n	8029a0c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80299e6:	687b      	ldr	r3, [r7, #4]
 80299e8:	3324      	adds	r3, #36	; 0x24
 80299ea:	2102      	movs	r1, #2
 80299ec:	4618      	mov	r0, r3
 80299ee:	f000 fd7f 	bl	802a4f0 <RCCEx_PLL3_Config>
 80299f2:	4603      	mov	r3, r0
 80299f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80299f6:	e009      	b.n	8029a0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80299f8:	2301      	movs	r3, #1
 80299fa:	75fb      	strb	r3, [r7, #23]
      break;
 80299fc:	e006      	b.n	8029a0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80299fe:	bf00      	nop
 8029a00:	e004      	b.n	8029a0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8029a02:	bf00      	nop
 8029a04:	e002      	b.n	8029a0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8029a06:	bf00      	nop
 8029a08:	e000      	b.n	8029a0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8029a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8029a0c:	7dfb      	ldrb	r3, [r7, #23]
 8029a0e:	2b00      	cmp	r3, #0
 8029a10:	d10c      	bne.n	8029a2c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8029a12:	4b05      	ldr	r3, [pc, #20]	; (8029a28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8029a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8029a16:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8029a1a:	687b      	ldr	r3, [r7, #4]
 8029a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8029a20:	4901      	ldr	r1, [pc, #4]	; (8029a28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8029a22:	4313      	orrs	r3, r2
 8029a24:	658b      	str	r3, [r1, #88]	; 0x58
 8029a26:	e003      	b.n	8029a30 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8029a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8029a2c:	7dfb      	ldrb	r3, [r7, #23]
 8029a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8029a30:	687b      	ldr	r3, [r7, #4]
 8029a32:	681b      	ldr	r3, [r3, #0]
 8029a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029a38:	2b00      	cmp	r3, #0
 8029a3a:	d04b      	beq.n	8029ad4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8029a3c:	687b      	ldr	r3, [r7, #4]
 8029a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8029a42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8029a46:	d02e      	beq.n	8029aa6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8029a48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8029a4c:	d828      	bhi.n	8029aa0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8029a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029a52:	d02a      	beq.n	8029aaa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8029a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029a58:	d822      	bhi.n	8029aa0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8029a5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8029a5e:	d026      	beq.n	8029aae <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8029a60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8029a64:	d81c      	bhi.n	8029aa0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8029a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8029a6a:	d010      	beq.n	8029a8e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8029a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8029a70:	d816      	bhi.n	8029aa0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8029a72:	2b00      	cmp	r3, #0
 8029a74:	d01d      	beq.n	8029ab2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8029a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029a7a:	d111      	bne.n	8029aa0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8029a7c:	687b      	ldr	r3, [r7, #4]
 8029a7e:	3304      	adds	r3, #4
 8029a80:	2100      	movs	r1, #0
 8029a82:	4618      	mov	r0, r3
 8029a84:	f000 fc82 	bl	802a38c <RCCEx_PLL2_Config>
 8029a88:	4603      	mov	r3, r0
 8029a8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8029a8c:	e012      	b.n	8029ab4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8029a8e:	687b      	ldr	r3, [r7, #4]
 8029a90:	3324      	adds	r3, #36	; 0x24
 8029a92:	2102      	movs	r1, #2
 8029a94:	4618      	mov	r0, r3
 8029a96:	f000 fd2b 	bl	802a4f0 <RCCEx_PLL3_Config>
 8029a9a:	4603      	mov	r3, r0
 8029a9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8029a9e:	e009      	b.n	8029ab4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8029aa0:	2301      	movs	r3, #1
 8029aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8029aa4:	e006      	b.n	8029ab4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8029aa6:	bf00      	nop
 8029aa8:	e004      	b.n	8029ab4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8029aaa:	bf00      	nop
 8029aac:	e002      	b.n	8029ab4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8029aae:	bf00      	nop
 8029ab0:	e000      	b.n	8029ab4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8029ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8029ab4:	7dfb      	ldrb	r3, [r7, #23]
 8029ab6:	2b00      	cmp	r3, #0
 8029ab8:	d10a      	bne.n	8029ad0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8029aba:	4b9d      	ldr	r3, [pc, #628]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8029abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8029ac2:	687b      	ldr	r3, [r7, #4]
 8029ac4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8029ac8:	4999      	ldr	r1, [pc, #612]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029aca:	4313      	orrs	r3, r2
 8029acc:	658b      	str	r3, [r1, #88]	; 0x58
 8029ace:	e001      	b.n	8029ad4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8029ad0:	7dfb      	ldrb	r3, [r7, #23]
 8029ad2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8029ad4:	687b      	ldr	r3, [r7, #4]
 8029ad6:	681b      	ldr	r3, [r3, #0]
 8029ad8:	f003 0308 	and.w	r3, r3, #8
 8029adc:	2b00      	cmp	r3, #0
 8029ade:	d01a      	beq.n	8029b16 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8029ae0:	687b      	ldr	r3, [r7, #4]
 8029ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8029ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029aea:	d10a      	bne.n	8029b02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8029aec:	687b      	ldr	r3, [r7, #4]
 8029aee:	3324      	adds	r3, #36	; 0x24
 8029af0:	2102      	movs	r1, #2
 8029af2:	4618      	mov	r0, r3
 8029af4:	f000 fcfc 	bl	802a4f0 <RCCEx_PLL3_Config>
 8029af8:	4603      	mov	r3, r0
 8029afa:	2b00      	cmp	r3, #0
 8029afc:	d001      	beq.n	8029b02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8029afe:	2301      	movs	r3, #1
 8029b00:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8029b02:	4b8b      	ldr	r3, [pc, #556]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029b06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8029b0a:	687b      	ldr	r3, [r7, #4]
 8029b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8029b10:	4987      	ldr	r1, [pc, #540]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029b12:	4313      	orrs	r3, r2
 8029b14:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8029b16:	687b      	ldr	r3, [r7, #4]
 8029b18:	681b      	ldr	r3, [r3, #0]
 8029b1a:	f003 0310 	and.w	r3, r3, #16
 8029b1e:	2b00      	cmp	r3, #0
 8029b20:	d01a      	beq.n	8029b58 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8029b22:	687b      	ldr	r3, [r7, #4]
 8029b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8029b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029b2c:	d10a      	bne.n	8029b44 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8029b2e:	687b      	ldr	r3, [r7, #4]
 8029b30:	3324      	adds	r3, #36	; 0x24
 8029b32:	2102      	movs	r1, #2
 8029b34:	4618      	mov	r0, r3
 8029b36:	f000 fcdb 	bl	802a4f0 <RCCEx_PLL3_Config>
 8029b3a:	4603      	mov	r3, r0
 8029b3c:	2b00      	cmp	r3, #0
 8029b3e:	d001      	beq.n	8029b44 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8029b40:	2301      	movs	r3, #1
 8029b42:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8029b44:	4b7a      	ldr	r3, [pc, #488]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8029b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8029b4c:	687b      	ldr	r3, [r7, #4]
 8029b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8029b52:	4977      	ldr	r1, [pc, #476]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029b54:	4313      	orrs	r3, r2
 8029b56:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8029b58:	687b      	ldr	r3, [r7, #4]
 8029b5a:	681b      	ldr	r3, [r3, #0]
 8029b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8029b60:	2b00      	cmp	r3, #0
 8029b62:	d034      	beq.n	8029bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8029b64:	687b      	ldr	r3, [r7, #4]
 8029b66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8029b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8029b6e:	d01d      	beq.n	8029bac <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8029b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8029b74:	d817      	bhi.n	8029ba6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8029b76:	2b00      	cmp	r3, #0
 8029b78:	d003      	beq.n	8029b82 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8029b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029b7e:	d009      	beq.n	8029b94 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8029b80:	e011      	b.n	8029ba6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8029b82:	687b      	ldr	r3, [r7, #4]
 8029b84:	3304      	adds	r3, #4
 8029b86:	2100      	movs	r1, #0
 8029b88:	4618      	mov	r0, r3
 8029b8a:	f000 fbff 	bl	802a38c <RCCEx_PLL2_Config>
 8029b8e:	4603      	mov	r3, r0
 8029b90:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8029b92:	e00c      	b.n	8029bae <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8029b94:	687b      	ldr	r3, [r7, #4]
 8029b96:	3324      	adds	r3, #36	; 0x24
 8029b98:	2102      	movs	r1, #2
 8029b9a:	4618      	mov	r0, r3
 8029b9c:	f000 fca8 	bl	802a4f0 <RCCEx_PLL3_Config>
 8029ba0:	4603      	mov	r3, r0
 8029ba2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8029ba4:	e003      	b.n	8029bae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8029ba6:	2301      	movs	r3, #1
 8029ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8029baa:	e000      	b.n	8029bae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8029bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8029bae:	7dfb      	ldrb	r3, [r7, #23]
 8029bb0:	2b00      	cmp	r3, #0
 8029bb2:	d10a      	bne.n	8029bca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8029bb4:	4b5e      	ldr	r3, [pc, #376]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8029bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8029bbc:	687b      	ldr	r3, [r7, #4]
 8029bbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8029bc2:	495b      	ldr	r1, [pc, #364]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029bc4:	4313      	orrs	r3, r2
 8029bc6:	658b      	str	r3, [r1, #88]	; 0x58
 8029bc8:	e001      	b.n	8029bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8029bca:	7dfb      	ldrb	r3, [r7, #23]
 8029bcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8029bce:	687b      	ldr	r3, [r7, #4]
 8029bd0:	681b      	ldr	r3, [r3, #0]
 8029bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8029bd6:	2b00      	cmp	r3, #0
 8029bd8:	d033      	beq.n	8029c42 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8029bda:	687b      	ldr	r3, [r7, #4]
 8029bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8029be0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8029be4:	d01c      	beq.n	8029c20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8029be6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8029bea:	d816      	bhi.n	8029c1a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8029bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8029bf0:	d003      	beq.n	8029bfa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8029bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8029bf6:	d007      	beq.n	8029c08 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8029bf8:	e00f      	b.n	8029c1a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8029bfa:	4b4d      	ldr	r3, [pc, #308]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029bfe:	4a4c      	ldr	r2, [pc, #304]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8029c04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8029c06:	e00c      	b.n	8029c22 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8029c08:	687b      	ldr	r3, [r7, #4]
 8029c0a:	3324      	adds	r3, #36	; 0x24
 8029c0c:	2101      	movs	r1, #1
 8029c0e:	4618      	mov	r0, r3
 8029c10:	f000 fc6e 	bl	802a4f0 <RCCEx_PLL3_Config>
 8029c14:	4603      	mov	r3, r0
 8029c16:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8029c18:	e003      	b.n	8029c22 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8029c1a:	2301      	movs	r3, #1
 8029c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8029c1e:	e000      	b.n	8029c22 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8029c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8029c22:	7dfb      	ldrb	r3, [r7, #23]
 8029c24:	2b00      	cmp	r3, #0
 8029c26:	d10a      	bne.n	8029c3e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8029c28:	4b41      	ldr	r3, [pc, #260]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029c2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8029c30:	687b      	ldr	r3, [r7, #4]
 8029c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8029c36:	493e      	ldr	r1, [pc, #248]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029c38:	4313      	orrs	r3, r2
 8029c3a:	654b      	str	r3, [r1, #84]	; 0x54
 8029c3c:	e001      	b.n	8029c42 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8029c3e:	7dfb      	ldrb	r3, [r7, #23]
 8029c40:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8029c42:	687b      	ldr	r3, [r7, #4]
 8029c44:	681b      	ldr	r3, [r3, #0]
 8029c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8029c4a:	2b00      	cmp	r3, #0
 8029c4c:	d029      	beq.n	8029ca2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8029c4e:	687b      	ldr	r3, [r7, #4]
 8029c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8029c52:	2b00      	cmp	r3, #0
 8029c54:	d003      	beq.n	8029c5e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8029c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029c5a:	d007      	beq.n	8029c6c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8029c5c:	e00f      	b.n	8029c7e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8029c5e:	4b34      	ldr	r3, [pc, #208]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029c62:	4a33      	ldr	r2, [pc, #204]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8029c68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8029c6a:	e00b      	b.n	8029c84 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8029c6c:	687b      	ldr	r3, [r7, #4]
 8029c6e:	3304      	adds	r3, #4
 8029c70:	2102      	movs	r1, #2
 8029c72:	4618      	mov	r0, r3
 8029c74:	f000 fb8a 	bl	802a38c <RCCEx_PLL2_Config>
 8029c78:	4603      	mov	r3, r0
 8029c7a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8029c7c:	e002      	b.n	8029c84 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8029c7e:	2301      	movs	r3, #1
 8029c80:	75fb      	strb	r3, [r7, #23]
      break;
 8029c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8029c84:	7dfb      	ldrb	r3, [r7, #23]
 8029c86:	2b00      	cmp	r3, #0
 8029c88:	d109      	bne.n	8029c9e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8029c8a:	4b29      	ldr	r3, [pc, #164]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8029c8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029c92:	687b      	ldr	r3, [r7, #4]
 8029c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8029c96:	4926      	ldr	r1, [pc, #152]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029c98:	4313      	orrs	r3, r2
 8029c9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8029c9c:	e001      	b.n	8029ca2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8029c9e:	7dfb      	ldrb	r3, [r7, #23]
 8029ca0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8029ca2:	687b      	ldr	r3, [r7, #4]
 8029ca4:	681b      	ldr	r3, [r3, #0]
 8029ca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8029caa:	2b00      	cmp	r3, #0
 8029cac:	d00a      	beq.n	8029cc4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8029cae:	687b      	ldr	r3, [r7, #4]
 8029cb0:	3324      	adds	r3, #36	; 0x24
 8029cb2:	2102      	movs	r1, #2
 8029cb4:	4618      	mov	r0, r3
 8029cb6:	f000 fc1b 	bl	802a4f0 <RCCEx_PLL3_Config>
 8029cba:	4603      	mov	r3, r0
 8029cbc:	2b00      	cmp	r3, #0
 8029cbe:	d001      	beq.n	8029cc4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8029cc0:	2301      	movs	r3, #1
 8029cc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8029cc4:	687b      	ldr	r3, [r7, #4]
 8029cc6:	681b      	ldr	r3, [r3, #0]
 8029cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8029ccc:	2b00      	cmp	r3, #0
 8029cce:	d033      	beq.n	8029d38 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8029cd0:	687b      	ldr	r3, [r7, #4]
 8029cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8029cd8:	d017      	beq.n	8029d0a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8029cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8029cde:	d811      	bhi.n	8029d04 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8029ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029ce4:	d013      	beq.n	8029d0e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8029ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029cea:	d80b      	bhi.n	8029d04 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8029cec:	2b00      	cmp	r3, #0
 8029cee:	d010      	beq.n	8029d12 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8029cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029cf4:	d106      	bne.n	8029d04 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8029cf6:	4b0e      	ldr	r3, [pc, #56]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029cfa:	4a0d      	ldr	r2, [pc, #52]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8029d00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8029d02:	e007      	b.n	8029d14 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8029d04:	2301      	movs	r3, #1
 8029d06:	75fb      	strb	r3, [r7, #23]
      break;
 8029d08:	e004      	b.n	8029d14 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8029d0a:	bf00      	nop
 8029d0c:	e002      	b.n	8029d14 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8029d0e:	bf00      	nop
 8029d10:	e000      	b.n	8029d14 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8029d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8029d14:	7dfb      	ldrb	r3, [r7, #23]
 8029d16:	2b00      	cmp	r3, #0
 8029d18:	d10c      	bne.n	8029d34 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8029d1a:	4b05      	ldr	r3, [pc, #20]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029d1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8029d22:	687b      	ldr	r3, [r7, #4]
 8029d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8029d26:	4902      	ldr	r1, [pc, #8]	; (8029d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8029d28:	4313      	orrs	r3, r2
 8029d2a:	654b      	str	r3, [r1, #84]	; 0x54
 8029d2c:	e004      	b.n	8029d38 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8029d2e:	bf00      	nop
 8029d30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8029d34:	7dfb      	ldrb	r3, [r7, #23]
 8029d36:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8029d38:	687b      	ldr	r3, [r7, #4]
 8029d3a:	681b      	ldr	r3, [r3, #0]
 8029d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029d40:	2b00      	cmp	r3, #0
 8029d42:	d008      	beq.n	8029d56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8029d44:	4b31      	ldr	r3, [pc, #196]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029d48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8029d4c:	687b      	ldr	r3, [r7, #4]
 8029d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029d50:	492e      	ldr	r1, [pc, #184]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029d52:	4313      	orrs	r3, r2
 8029d54:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8029d56:	687b      	ldr	r3, [r7, #4]
 8029d58:	681b      	ldr	r3, [r3, #0]
 8029d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8029d5e:	2b00      	cmp	r3, #0
 8029d60:	d009      	beq.n	8029d76 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8029d62:	4b2a      	ldr	r3, [pc, #168]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029d64:	691b      	ldr	r3, [r3, #16]
 8029d66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8029d6a:	687b      	ldr	r3, [r7, #4]
 8029d6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8029d70:	4926      	ldr	r1, [pc, #152]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029d72:	4313      	orrs	r3, r2
 8029d74:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8029d76:	687b      	ldr	r3, [r7, #4]
 8029d78:	681b      	ldr	r3, [r3, #0]
 8029d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8029d7e:	2b00      	cmp	r3, #0
 8029d80:	d008      	beq.n	8029d94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8029d82:	4b22      	ldr	r3, [pc, #136]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029d86:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8029d8a:	687b      	ldr	r3, [r7, #4]
 8029d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029d8e:	491f      	ldr	r1, [pc, #124]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029d90:	4313      	orrs	r3, r2
 8029d92:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8029d94:	687b      	ldr	r3, [r7, #4]
 8029d96:	681b      	ldr	r3, [r3, #0]
 8029d98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8029d9c:	2b00      	cmp	r3, #0
 8029d9e:	d00d      	beq.n	8029dbc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8029da0:	4b1a      	ldr	r3, [pc, #104]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029da2:	691b      	ldr	r3, [r3, #16]
 8029da4:	4a19      	ldr	r2, [pc, #100]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029da6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8029daa:	6113      	str	r3, [r2, #16]
 8029dac:	4b17      	ldr	r3, [pc, #92]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029dae:	691a      	ldr	r2, [r3, #16]
 8029db0:	687b      	ldr	r3, [r7, #4]
 8029db2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8029db6:	4915      	ldr	r1, [pc, #84]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029db8:	4313      	orrs	r3, r2
 8029dba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8029dbc:	687b      	ldr	r3, [r7, #4]
 8029dbe:	681b      	ldr	r3, [r3, #0]
 8029dc0:	2b00      	cmp	r3, #0
 8029dc2:	da08      	bge.n	8029dd6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8029dc4:	4b11      	ldr	r3, [pc, #68]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8029dc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8029dcc:	687b      	ldr	r3, [r7, #4]
 8029dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029dd0:	490e      	ldr	r1, [pc, #56]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029dd2:	4313      	orrs	r3, r2
 8029dd4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8029dd6:	687b      	ldr	r3, [r7, #4]
 8029dd8:	681b      	ldr	r3, [r3, #0]
 8029dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8029dde:	2b00      	cmp	r3, #0
 8029de0:	d009      	beq.n	8029df6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8029de2:	4b0a      	ldr	r3, [pc, #40]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029de6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8029dea:	687b      	ldr	r3, [r7, #4]
 8029dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8029df0:	4906      	ldr	r1, [pc, #24]	; (8029e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8029df2:	4313      	orrs	r3, r2
 8029df4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8029df6:	7dbb      	ldrb	r3, [r7, #22]
 8029df8:	2b00      	cmp	r3, #0
 8029dfa:	d101      	bne.n	8029e00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8029dfc:	2300      	movs	r3, #0
 8029dfe:	e000      	b.n	8029e02 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8029e00:	2301      	movs	r3, #1
}
 8029e02:	4618      	mov	r0, r3
 8029e04:	3718      	adds	r7, #24
 8029e06:	46bd      	mov	sp, r7
 8029e08:	bd80      	pop	{r7, pc}
 8029e0a:	bf00      	nop
 8029e0c:	58024400 	.word	0x58024400

08029e10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8029e10:	b580      	push	{r7, lr}
 8029e12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8029e14:	f7ff f85a 	bl	8028ecc <HAL_RCC_GetHCLKFreq>
 8029e18:	4602      	mov	r2, r0
 8029e1a:	4b06      	ldr	r3, [pc, #24]	; (8029e34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8029e1c:	6a1b      	ldr	r3, [r3, #32]
 8029e1e:	091b      	lsrs	r3, r3, #4
 8029e20:	f003 0307 	and.w	r3, r3, #7
 8029e24:	4904      	ldr	r1, [pc, #16]	; (8029e38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8029e26:	5ccb      	ldrb	r3, [r1, r3]
 8029e28:	f003 031f 	and.w	r3, r3, #31
 8029e2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8029e30:	4618      	mov	r0, r3
 8029e32:	bd80      	pop	{r7, pc}
 8029e34:	58024400 	.word	0x58024400
 8029e38:	0803e494 	.word	0x0803e494

08029e3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8029e3c:	b480      	push	{r7}
 8029e3e:	b089      	sub	sp, #36	; 0x24
 8029e40:	af00      	add	r7, sp, #0
 8029e42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8029e44:	4ba1      	ldr	r3, [pc, #644]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8029e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e48:	f003 0303 	and.w	r3, r3, #3
 8029e4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8029e4e:	4b9f      	ldr	r3, [pc, #636]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8029e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e52:	0b1b      	lsrs	r3, r3, #12
 8029e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8029e58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8029e5a:	4b9c      	ldr	r3, [pc, #624]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8029e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029e5e:	091b      	lsrs	r3, r3, #4
 8029e60:	f003 0301 	and.w	r3, r3, #1
 8029e64:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8029e66:	4b99      	ldr	r3, [pc, #612]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8029e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029e6a:	08db      	lsrs	r3, r3, #3
 8029e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8029e70:	693a      	ldr	r2, [r7, #16]
 8029e72:	fb02 f303 	mul.w	r3, r2, r3
 8029e76:	ee07 3a90 	vmov	s15, r3
 8029e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8029e7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8029e82:	697b      	ldr	r3, [r7, #20]
 8029e84:	2b00      	cmp	r3, #0
 8029e86:	f000 8111 	beq.w	802a0ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8029e8a:	69bb      	ldr	r3, [r7, #24]
 8029e8c:	2b02      	cmp	r3, #2
 8029e8e:	f000 8083 	beq.w	8029f98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8029e92:	69bb      	ldr	r3, [r7, #24]
 8029e94:	2b02      	cmp	r3, #2
 8029e96:	f200 80a1 	bhi.w	8029fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8029e9a:	69bb      	ldr	r3, [r7, #24]
 8029e9c:	2b00      	cmp	r3, #0
 8029e9e:	d003      	beq.n	8029ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8029ea0:	69bb      	ldr	r3, [r7, #24]
 8029ea2:	2b01      	cmp	r3, #1
 8029ea4:	d056      	beq.n	8029f54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8029ea6:	e099      	b.n	8029fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8029ea8:	4b88      	ldr	r3, [pc, #544]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8029eaa:	681b      	ldr	r3, [r3, #0]
 8029eac:	f003 0320 	and.w	r3, r3, #32
 8029eb0:	2b00      	cmp	r3, #0
 8029eb2:	d02d      	beq.n	8029f10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8029eb4:	4b85      	ldr	r3, [pc, #532]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8029eb6:	681b      	ldr	r3, [r3, #0]
 8029eb8:	08db      	lsrs	r3, r3, #3
 8029eba:	f003 0303 	and.w	r3, r3, #3
 8029ebe:	4a84      	ldr	r2, [pc, #528]	; (802a0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8029ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8029ec4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8029ec6:	68bb      	ldr	r3, [r7, #8]
 8029ec8:	ee07 3a90 	vmov	s15, r3
 8029ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8029ed0:	697b      	ldr	r3, [r7, #20]
 8029ed2:	ee07 3a90 	vmov	s15, r3
 8029ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8029eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8029ede:	4b7b      	ldr	r3, [pc, #492]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8029ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8029ee6:	ee07 3a90 	vmov	s15, r3
 8029eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8029eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8029ef2:	eddf 5a78 	vldr	s11, [pc, #480]	; 802a0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8029ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8029efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8029efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8029f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8029f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8029f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8029f0e:	e087      	b.n	802a020 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8029f10:	697b      	ldr	r3, [r7, #20]
 8029f12:	ee07 3a90 	vmov	s15, r3
 8029f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8029f1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 802a0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8029f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8029f22:	4b6a      	ldr	r3, [pc, #424]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8029f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8029f2a:	ee07 3a90 	vmov	s15, r3
 8029f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8029f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8029f36:	eddf 5a67 	vldr	s11, [pc, #412]	; 802a0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8029f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8029f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8029f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8029f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8029f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8029f4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8029f52:	e065      	b.n	802a020 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8029f54:	697b      	ldr	r3, [r7, #20]
 8029f56:	ee07 3a90 	vmov	s15, r3
 8029f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8029f5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 802a0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8029f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8029f66:	4b59      	ldr	r3, [pc, #356]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8029f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8029f6e:	ee07 3a90 	vmov	s15, r3
 8029f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8029f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8029f7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 802a0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8029f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8029f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8029f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8029f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8029f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8029f92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8029f96:	e043      	b.n	802a020 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8029f98:	697b      	ldr	r3, [r7, #20]
 8029f9a:	ee07 3a90 	vmov	s15, r3
 8029f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8029fa2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 802a0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8029fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8029faa:	4b48      	ldr	r3, [pc, #288]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8029fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8029fb2:	ee07 3a90 	vmov	s15, r3
 8029fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8029fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8029fbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 802a0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8029fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8029fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8029fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8029fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8029fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8029fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8029fda:	e021      	b.n	802a020 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8029fdc:	697b      	ldr	r3, [r7, #20]
 8029fde:	ee07 3a90 	vmov	s15, r3
 8029fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8029fe6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 802a0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8029fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8029fee:	4b37      	ldr	r3, [pc, #220]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8029ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8029ff6:	ee07 3a90 	vmov	s15, r3
 8029ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8029ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 802a002:	eddf 5a34 	vldr	s11, [pc, #208]	; 802a0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802a006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802a00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802a00e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802a012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802a016:	ee67 7a27 	vmul.f32	s15, s14, s15
 802a01a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 802a01e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 802a020:	4b2a      	ldr	r3, [pc, #168]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802a022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a024:	0a5b      	lsrs	r3, r3, #9
 802a026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a02a:	ee07 3a90 	vmov	s15, r3
 802a02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a036:	ee37 7a87 	vadd.f32	s14, s15, s14
 802a03a:	edd7 6a07 	vldr	s13, [r7, #28]
 802a03e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802a042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802a046:	ee17 2a90 	vmov	r2, s15
 802a04a:	687b      	ldr	r3, [r7, #4]
 802a04c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 802a04e:	4b1f      	ldr	r3, [pc, #124]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802a050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a052:	0c1b      	lsrs	r3, r3, #16
 802a054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a058:	ee07 3a90 	vmov	s15, r3
 802a05c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a064:	ee37 7a87 	vadd.f32	s14, s15, s14
 802a068:	edd7 6a07 	vldr	s13, [r7, #28]
 802a06c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802a070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802a074:	ee17 2a90 	vmov	r2, s15
 802a078:	687b      	ldr	r3, [r7, #4]
 802a07a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 802a07c:	4b13      	ldr	r3, [pc, #76]	; (802a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802a07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a080:	0e1b      	lsrs	r3, r3, #24
 802a082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a086:	ee07 3a90 	vmov	s15, r3
 802a08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a08e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a092:	ee37 7a87 	vadd.f32	s14, s15, s14
 802a096:	edd7 6a07 	vldr	s13, [r7, #28]
 802a09a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802a09e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802a0a2:	ee17 2a90 	vmov	r2, s15
 802a0a6:	687b      	ldr	r3, [r7, #4]
 802a0a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 802a0aa:	e008      	b.n	802a0be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 802a0ac:	687b      	ldr	r3, [r7, #4]
 802a0ae:	2200      	movs	r2, #0
 802a0b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 802a0b2:	687b      	ldr	r3, [r7, #4]
 802a0b4:	2200      	movs	r2, #0
 802a0b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 802a0b8:	687b      	ldr	r3, [r7, #4]
 802a0ba:	2200      	movs	r2, #0
 802a0bc:	609a      	str	r2, [r3, #8]
}
 802a0be:	bf00      	nop
 802a0c0:	3724      	adds	r7, #36	; 0x24
 802a0c2:	46bd      	mov	sp, r7
 802a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0c8:	4770      	bx	lr
 802a0ca:	bf00      	nop
 802a0cc:	58024400 	.word	0x58024400
 802a0d0:	03d09000 	.word	0x03d09000
 802a0d4:	46000000 	.word	0x46000000
 802a0d8:	4c742400 	.word	0x4c742400
 802a0dc:	4a742400 	.word	0x4a742400
 802a0e0:	4bbebc20 	.word	0x4bbebc20

0802a0e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 802a0e4:	b480      	push	{r7}
 802a0e6:	b089      	sub	sp, #36	; 0x24
 802a0e8:	af00      	add	r7, sp, #0
 802a0ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 802a0ec:	4ba1      	ldr	r3, [pc, #644]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a0f0:	f003 0303 	and.w	r3, r3, #3
 802a0f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 802a0f6:	4b9f      	ldr	r3, [pc, #636]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a0fa:	0d1b      	lsrs	r3, r3, #20
 802a0fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802a100:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 802a102:	4b9c      	ldr	r3, [pc, #624]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a106:	0a1b      	lsrs	r3, r3, #8
 802a108:	f003 0301 	and.w	r3, r3, #1
 802a10c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 802a10e:	4b99      	ldr	r3, [pc, #612]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802a112:	08db      	lsrs	r3, r3, #3
 802a114:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802a118:	693a      	ldr	r2, [r7, #16]
 802a11a:	fb02 f303 	mul.w	r3, r2, r3
 802a11e:	ee07 3a90 	vmov	s15, r3
 802a122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a126:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 802a12a:	697b      	ldr	r3, [r7, #20]
 802a12c:	2b00      	cmp	r3, #0
 802a12e:	f000 8111 	beq.w	802a354 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 802a132:	69bb      	ldr	r3, [r7, #24]
 802a134:	2b02      	cmp	r3, #2
 802a136:	f000 8083 	beq.w	802a240 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 802a13a:	69bb      	ldr	r3, [r7, #24]
 802a13c:	2b02      	cmp	r3, #2
 802a13e:	f200 80a1 	bhi.w	802a284 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 802a142:	69bb      	ldr	r3, [r7, #24]
 802a144:	2b00      	cmp	r3, #0
 802a146:	d003      	beq.n	802a150 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 802a148:	69bb      	ldr	r3, [r7, #24]
 802a14a:	2b01      	cmp	r3, #1
 802a14c:	d056      	beq.n	802a1fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 802a14e:	e099      	b.n	802a284 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802a150:	4b88      	ldr	r3, [pc, #544]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a152:	681b      	ldr	r3, [r3, #0]
 802a154:	f003 0320 	and.w	r3, r3, #32
 802a158:	2b00      	cmp	r3, #0
 802a15a:	d02d      	beq.n	802a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 802a15c:	4b85      	ldr	r3, [pc, #532]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a15e:	681b      	ldr	r3, [r3, #0]
 802a160:	08db      	lsrs	r3, r3, #3
 802a162:	f003 0303 	and.w	r3, r3, #3
 802a166:	4a84      	ldr	r2, [pc, #528]	; (802a378 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 802a168:	fa22 f303 	lsr.w	r3, r2, r3
 802a16c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 802a16e:	68bb      	ldr	r3, [r7, #8]
 802a170:	ee07 3a90 	vmov	s15, r3
 802a174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802a178:	697b      	ldr	r3, [r7, #20]
 802a17a:	ee07 3a90 	vmov	s15, r3
 802a17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802a186:	4b7b      	ldr	r3, [pc, #492]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802a18e:	ee07 3a90 	vmov	s15, r3
 802a192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802a196:	ed97 6a03 	vldr	s12, [r7, #12]
 802a19a:	eddf 5a78 	vldr	s11, [pc, #480]	; 802a37c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802a19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802a1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802a1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802a1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802a1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 802a1b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 802a1b6:	e087      	b.n	802a2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 802a1b8:	697b      	ldr	r3, [r7, #20]
 802a1ba:	ee07 3a90 	vmov	s15, r3
 802a1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a1c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 802a380 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 802a1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802a1ca:	4b6a      	ldr	r3, [pc, #424]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802a1d2:	ee07 3a90 	vmov	s15, r3
 802a1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802a1da:	ed97 6a03 	vldr	s12, [r7, #12]
 802a1de:	eddf 5a67 	vldr	s11, [pc, #412]	; 802a37c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802a1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802a1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802a1ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802a1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802a1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 802a1f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 802a1fa:	e065      	b.n	802a2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 802a1fc:	697b      	ldr	r3, [r7, #20]
 802a1fe:	ee07 3a90 	vmov	s15, r3
 802a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a206:	eddf 6a5f 	vldr	s13, [pc, #380]	; 802a384 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 802a20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802a20e:	4b59      	ldr	r3, [pc, #356]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802a216:	ee07 3a90 	vmov	s15, r3
 802a21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802a21e:	ed97 6a03 	vldr	s12, [r7, #12]
 802a222:	eddf 5a56 	vldr	s11, [pc, #344]	; 802a37c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802a226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802a22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802a22e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802a232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802a236:	ee67 7a27 	vmul.f32	s15, s14, s15
 802a23a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 802a23e:	e043      	b.n	802a2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 802a240:	697b      	ldr	r3, [r7, #20]
 802a242:	ee07 3a90 	vmov	s15, r3
 802a246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a24a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 802a388 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 802a24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802a252:	4b48      	ldr	r3, [pc, #288]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802a25a:	ee07 3a90 	vmov	s15, r3
 802a25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802a262:	ed97 6a03 	vldr	s12, [r7, #12]
 802a266:	eddf 5a45 	vldr	s11, [pc, #276]	; 802a37c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802a26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802a26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802a272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802a276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802a27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802a27e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 802a282:	e021      	b.n	802a2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 802a284:	697b      	ldr	r3, [r7, #20]
 802a286:	ee07 3a90 	vmov	s15, r3
 802a28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a28e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 802a384 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 802a292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802a296:	4b37      	ldr	r3, [pc, #220]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802a29e:	ee07 3a90 	vmov	s15, r3
 802a2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802a2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 802a2aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 802a37c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802a2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802a2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802a2b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802a2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802a2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 802a2c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 802a2c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 802a2c8:	4b2a      	ldr	r3, [pc, #168]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a2cc:	0a5b      	lsrs	r3, r3, #9
 802a2ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a2d2:	ee07 3a90 	vmov	s15, r3
 802a2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a2da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a2de:	ee37 7a87 	vadd.f32	s14, s15, s14
 802a2e2:	edd7 6a07 	vldr	s13, [r7, #28]
 802a2e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802a2ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802a2ee:	ee17 2a90 	vmov	r2, s15
 802a2f2:	687b      	ldr	r3, [r7, #4]
 802a2f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 802a2f6:	4b1f      	ldr	r3, [pc, #124]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a2fa:	0c1b      	lsrs	r3, r3, #16
 802a2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a300:	ee07 3a90 	vmov	s15, r3
 802a304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a308:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a30c:	ee37 7a87 	vadd.f32	s14, s15, s14
 802a310:	edd7 6a07 	vldr	s13, [r7, #28]
 802a314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802a318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802a31c:	ee17 2a90 	vmov	r2, s15
 802a320:	687b      	ldr	r3, [r7, #4]
 802a322:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 802a324:	4b13      	ldr	r3, [pc, #76]	; (802a374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a328:	0e1b      	lsrs	r3, r3, #24
 802a32a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a32e:	ee07 3a90 	vmov	s15, r3
 802a332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a33a:	ee37 7a87 	vadd.f32	s14, s15, s14
 802a33e:	edd7 6a07 	vldr	s13, [r7, #28]
 802a342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802a346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802a34a:	ee17 2a90 	vmov	r2, s15
 802a34e:	687b      	ldr	r3, [r7, #4]
 802a350:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 802a352:	e008      	b.n	802a366 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 802a354:	687b      	ldr	r3, [r7, #4]
 802a356:	2200      	movs	r2, #0
 802a358:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 802a35a:	687b      	ldr	r3, [r7, #4]
 802a35c:	2200      	movs	r2, #0
 802a35e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 802a360:	687b      	ldr	r3, [r7, #4]
 802a362:	2200      	movs	r2, #0
 802a364:	609a      	str	r2, [r3, #8]
}
 802a366:	bf00      	nop
 802a368:	3724      	adds	r7, #36	; 0x24
 802a36a:	46bd      	mov	sp, r7
 802a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a370:	4770      	bx	lr
 802a372:	bf00      	nop
 802a374:	58024400 	.word	0x58024400
 802a378:	03d09000 	.word	0x03d09000
 802a37c:	46000000 	.word	0x46000000
 802a380:	4c742400 	.word	0x4c742400
 802a384:	4a742400 	.word	0x4a742400
 802a388:	4bbebc20 	.word	0x4bbebc20

0802a38c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 802a38c:	b580      	push	{r7, lr}
 802a38e:	b084      	sub	sp, #16
 802a390:	af00      	add	r7, sp, #0
 802a392:	6078      	str	r0, [r7, #4]
 802a394:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802a396:	2300      	movs	r3, #0
 802a398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802a39a:	4b53      	ldr	r3, [pc, #332]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a39e:	f003 0303 	and.w	r3, r3, #3
 802a3a2:	2b03      	cmp	r3, #3
 802a3a4:	d101      	bne.n	802a3aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 802a3a6:	2301      	movs	r3, #1
 802a3a8:	e099      	b.n	802a4de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 802a3aa:	4b4f      	ldr	r3, [pc, #316]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a3ac:	681b      	ldr	r3, [r3, #0]
 802a3ae:	4a4e      	ldr	r2, [pc, #312]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a3b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 802a3b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802a3b6:	f7f7 fe43 	bl	8022040 <HAL_GetTick>
 802a3ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 802a3bc:	e008      	b.n	802a3d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 802a3be:	f7f7 fe3f 	bl	8022040 <HAL_GetTick>
 802a3c2:	4602      	mov	r2, r0
 802a3c4:	68bb      	ldr	r3, [r7, #8]
 802a3c6:	1ad3      	subs	r3, r2, r3
 802a3c8:	2b02      	cmp	r3, #2
 802a3ca:	d901      	bls.n	802a3d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 802a3cc:	2303      	movs	r3, #3
 802a3ce:	e086      	b.n	802a4de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 802a3d0:	4b45      	ldr	r3, [pc, #276]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a3d2:	681b      	ldr	r3, [r3, #0]
 802a3d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802a3d8:	2b00      	cmp	r3, #0
 802a3da:	d1f0      	bne.n	802a3be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 802a3dc:	4b42      	ldr	r3, [pc, #264]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a3e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 802a3e4:	687b      	ldr	r3, [r7, #4]
 802a3e6:	681b      	ldr	r3, [r3, #0]
 802a3e8:	031b      	lsls	r3, r3, #12
 802a3ea:	493f      	ldr	r1, [pc, #252]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a3ec:	4313      	orrs	r3, r2
 802a3ee:	628b      	str	r3, [r1, #40]	; 0x28
 802a3f0:	687b      	ldr	r3, [r7, #4]
 802a3f2:	685b      	ldr	r3, [r3, #4]
 802a3f4:	3b01      	subs	r3, #1
 802a3f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802a3fa:	687b      	ldr	r3, [r7, #4]
 802a3fc:	689b      	ldr	r3, [r3, #8]
 802a3fe:	3b01      	subs	r3, #1
 802a400:	025b      	lsls	r3, r3, #9
 802a402:	b29b      	uxth	r3, r3
 802a404:	431a      	orrs	r2, r3
 802a406:	687b      	ldr	r3, [r7, #4]
 802a408:	68db      	ldr	r3, [r3, #12]
 802a40a:	3b01      	subs	r3, #1
 802a40c:	041b      	lsls	r3, r3, #16
 802a40e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802a412:	431a      	orrs	r2, r3
 802a414:	687b      	ldr	r3, [r7, #4]
 802a416:	691b      	ldr	r3, [r3, #16]
 802a418:	3b01      	subs	r3, #1
 802a41a:	061b      	lsls	r3, r3, #24
 802a41c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 802a420:	4931      	ldr	r1, [pc, #196]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a422:	4313      	orrs	r3, r2
 802a424:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 802a426:	4b30      	ldr	r3, [pc, #192]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a42a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 802a42e:	687b      	ldr	r3, [r7, #4]
 802a430:	695b      	ldr	r3, [r3, #20]
 802a432:	492d      	ldr	r1, [pc, #180]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a434:	4313      	orrs	r3, r2
 802a436:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 802a438:	4b2b      	ldr	r3, [pc, #172]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a43c:	f023 0220 	bic.w	r2, r3, #32
 802a440:	687b      	ldr	r3, [r7, #4]
 802a442:	699b      	ldr	r3, [r3, #24]
 802a444:	4928      	ldr	r1, [pc, #160]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a446:	4313      	orrs	r3, r2
 802a448:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 802a44a:	4b27      	ldr	r3, [pc, #156]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a44e:	4a26      	ldr	r2, [pc, #152]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a450:	f023 0310 	bic.w	r3, r3, #16
 802a454:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 802a456:	4b24      	ldr	r3, [pc, #144]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802a45a:	4b24      	ldr	r3, [pc, #144]	; (802a4ec <RCCEx_PLL2_Config+0x160>)
 802a45c:	4013      	ands	r3, r2
 802a45e:	687a      	ldr	r2, [r7, #4]
 802a460:	69d2      	ldr	r2, [r2, #28]
 802a462:	00d2      	lsls	r2, r2, #3
 802a464:	4920      	ldr	r1, [pc, #128]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a466:	4313      	orrs	r3, r2
 802a468:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 802a46a:	4b1f      	ldr	r3, [pc, #124]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a46e:	4a1e      	ldr	r2, [pc, #120]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a470:	f043 0310 	orr.w	r3, r3, #16
 802a474:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 802a476:	683b      	ldr	r3, [r7, #0]
 802a478:	2b00      	cmp	r3, #0
 802a47a:	d106      	bne.n	802a48a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 802a47c:	4b1a      	ldr	r3, [pc, #104]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a480:	4a19      	ldr	r2, [pc, #100]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802a486:	62d3      	str	r3, [r2, #44]	; 0x2c
 802a488:	e00f      	b.n	802a4aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 802a48a:	683b      	ldr	r3, [r7, #0]
 802a48c:	2b01      	cmp	r3, #1
 802a48e:	d106      	bne.n	802a49e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 802a490:	4b15      	ldr	r3, [pc, #84]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a494:	4a14      	ldr	r2, [pc, #80]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802a49a:	62d3      	str	r3, [r2, #44]	; 0x2c
 802a49c:	e005      	b.n	802a4aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 802a49e:	4b12      	ldr	r3, [pc, #72]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a4a2:	4a11      	ldr	r2, [pc, #68]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a4a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802a4a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 802a4aa:	4b0f      	ldr	r3, [pc, #60]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a4ac:	681b      	ldr	r3, [r3, #0]
 802a4ae:	4a0e      	ldr	r2, [pc, #56]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a4b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 802a4b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802a4b6:	f7f7 fdc3 	bl	8022040 <HAL_GetTick>
 802a4ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 802a4bc:	e008      	b.n	802a4d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 802a4be:	f7f7 fdbf 	bl	8022040 <HAL_GetTick>
 802a4c2:	4602      	mov	r2, r0
 802a4c4:	68bb      	ldr	r3, [r7, #8]
 802a4c6:	1ad3      	subs	r3, r2, r3
 802a4c8:	2b02      	cmp	r3, #2
 802a4ca:	d901      	bls.n	802a4d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 802a4cc:	2303      	movs	r3, #3
 802a4ce:	e006      	b.n	802a4de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 802a4d0:	4b05      	ldr	r3, [pc, #20]	; (802a4e8 <RCCEx_PLL2_Config+0x15c>)
 802a4d2:	681b      	ldr	r3, [r3, #0]
 802a4d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802a4d8:	2b00      	cmp	r3, #0
 802a4da:	d0f0      	beq.n	802a4be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 802a4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 802a4de:	4618      	mov	r0, r3
 802a4e0:	3710      	adds	r7, #16
 802a4e2:	46bd      	mov	sp, r7
 802a4e4:	bd80      	pop	{r7, pc}
 802a4e6:	bf00      	nop
 802a4e8:	58024400 	.word	0x58024400
 802a4ec:	ffff0007 	.word	0xffff0007

0802a4f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 802a4f0:	b580      	push	{r7, lr}
 802a4f2:	b084      	sub	sp, #16
 802a4f4:	af00      	add	r7, sp, #0
 802a4f6:	6078      	str	r0, [r7, #4]
 802a4f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802a4fa:	2300      	movs	r3, #0
 802a4fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802a4fe:	4b53      	ldr	r3, [pc, #332]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a502:	f003 0303 	and.w	r3, r3, #3
 802a506:	2b03      	cmp	r3, #3
 802a508:	d101      	bne.n	802a50e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 802a50a:	2301      	movs	r3, #1
 802a50c:	e099      	b.n	802a642 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 802a50e:	4b4f      	ldr	r3, [pc, #316]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a510:	681b      	ldr	r3, [r3, #0]
 802a512:	4a4e      	ldr	r2, [pc, #312]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802a518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802a51a:	f7f7 fd91 	bl	8022040 <HAL_GetTick>
 802a51e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 802a520:	e008      	b.n	802a534 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 802a522:	f7f7 fd8d 	bl	8022040 <HAL_GetTick>
 802a526:	4602      	mov	r2, r0
 802a528:	68bb      	ldr	r3, [r7, #8]
 802a52a:	1ad3      	subs	r3, r2, r3
 802a52c:	2b02      	cmp	r3, #2
 802a52e:	d901      	bls.n	802a534 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 802a530:	2303      	movs	r3, #3
 802a532:	e086      	b.n	802a642 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 802a534:	4b45      	ldr	r3, [pc, #276]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a536:	681b      	ldr	r3, [r3, #0]
 802a538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802a53c:	2b00      	cmp	r3, #0
 802a53e:	d1f0      	bne.n	802a522 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 802a540:	4b42      	ldr	r3, [pc, #264]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a544:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 802a548:	687b      	ldr	r3, [r7, #4]
 802a54a:	681b      	ldr	r3, [r3, #0]
 802a54c:	051b      	lsls	r3, r3, #20
 802a54e:	493f      	ldr	r1, [pc, #252]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a550:	4313      	orrs	r3, r2
 802a552:	628b      	str	r3, [r1, #40]	; 0x28
 802a554:	687b      	ldr	r3, [r7, #4]
 802a556:	685b      	ldr	r3, [r3, #4]
 802a558:	3b01      	subs	r3, #1
 802a55a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802a55e:	687b      	ldr	r3, [r7, #4]
 802a560:	689b      	ldr	r3, [r3, #8]
 802a562:	3b01      	subs	r3, #1
 802a564:	025b      	lsls	r3, r3, #9
 802a566:	b29b      	uxth	r3, r3
 802a568:	431a      	orrs	r2, r3
 802a56a:	687b      	ldr	r3, [r7, #4]
 802a56c:	68db      	ldr	r3, [r3, #12]
 802a56e:	3b01      	subs	r3, #1
 802a570:	041b      	lsls	r3, r3, #16
 802a572:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802a576:	431a      	orrs	r2, r3
 802a578:	687b      	ldr	r3, [r7, #4]
 802a57a:	691b      	ldr	r3, [r3, #16]
 802a57c:	3b01      	subs	r3, #1
 802a57e:	061b      	lsls	r3, r3, #24
 802a580:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 802a584:	4931      	ldr	r1, [pc, #196]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a586:	4313      	orrs	r3, r2
 802a588:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 802a58a:	4b30      	ldr	r3, [pc, #192]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a58e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 802a592:	687b      	ldr	r3, [r7, #4]
 802a594:	695b      	ldr	r3, [r3, #20]
 802a596:	492d      	ldr	r1, [pc, #180]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a598:	4313      	orrs	r3, r2
 802a59a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 802a59c:	4b2b      	ldr	r3, [pc, #172]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a5a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 802a5a4:	687b      	ldr	r3, [r7, #4]
 802a5a6:	699b      	ldr	r3, [r3, #24]
 802a5a8:	4928      	ldr	r1, [pc, #160]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a5aa:	4313      	orrs	r3, r2
 802a5ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 802a5ae:	4b27      	ldr	r3, [pc, #156]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a5b2:	4a26      	ldr	r2, [pc, #152]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a5b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802a5b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 802a5ba:	4b24      	ldr	r3, [pc, #144]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a5bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802a5be:	4b24      	ldr	r3, [pc, #144]	; (802a650 <RCCEx_PLL3_Config+0x160>)
 802a5c0:	4013      	ands	r3, r2
 802a5c2:	687a      	ldr	r2, [r7, #4]
 802a5c4:	69d2      	ldr	r2, [r2, #28]
 802a5c6:	00d2      	lsls	r2, r2, #3
 802a5c8:	4920      	ldr	r1, [pc, #128]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a5ca:	4313      	orrs	r3, r2
 802a5cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 802a5ce:	4b1f      	ldr	r3, [pc, #124]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a5d2:	4a1e      	ldr	r2, [pc, #120]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a5d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a5d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 802a5da:	683b      	ldr	r3, [r7, #0]
 802a5dc:	2b00      	cmp	r3, #0
 802a5de:	d106      	bne.n	802a5ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 802a5e0:	4b1a      	ldr	r3, [pc, #104]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a5e4:	4a19      	ldr	r2, [pc, #100]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a5e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802a5ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 802a5ec:	e00f      	b.n	802a60e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 802a5ee:	683b      	ldr	r3, [r7, #0]
 802a5f0:	2b01      	cmp	r3, #1
 802a5f2:	d106      	bne.n	802a602 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 802a5f4:	4b15      	ldr	r3, [pc, #84]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a5f8:	4a14      	ldr	r2, [pc, #80]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a5fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802a5fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 802a600:	e005      	b.n	802a60e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 802a602:	4b12      	ldr	r3, [pc, #72]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a606:	4a11      	ldr	r2, [pc, #68]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802a60c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 802a60e:	4b0f      	ldr	r3, [pc, #60]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a610:	681b      	ldr	r3, [r3, #0]
 802a612:	4a0e      	ldr	r2, [pc, #56]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802a61a:	f7f7 fd11 	bl	8022040 <HAL_GetTick>
 802a61e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 802a620:	e008      	b.n	802a634 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 802a622:	f7f7 fd0d 	bl	8022040 <HAL_GetTick>
 802a626:	4602      	mov	r2, r0
 802a628:	68bb      	ldr	r3, [r7, #8]
 802a62a:	1ad3      	subs	r3, r2, r3
 802a62c:	2b02      	cmp	r3, #2
 802a62e:	d901      	bls.n	802a634 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 802a630:	2303      	movs	r3, #3
 802a632:	e006      	b.n	802a642 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 802a634:	4b05      	ldr	r3, [pc, #20]	; (802a64c <RCCEx_PLL3_Config+0x15c>)
 802a636:	681b      	ldr	r3, [r3, #0]
 802a638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802a63c:	2b00      	cmp	r3, #0
 802a63e:	d0f0      	beq.n	802a622 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 802a640:	7bfb      	ldrb	r3, [r7, #15]
}
 802a642:	4618      	mov	r0, r3
 802a644:	3710      	adds	r7, #16
 802a646:	46bd      	mov	sp, r7
 802a648:	bd80      	pop	{r7, pc}
 802a64a:	bf00      	nop
 802a64c:	58024400 	.word	0x58024400
 802a650:	ffff0007 	.word	0xffff0007

0802a654 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802a654:	b580      	push	{r7, lr}
 802a656:	b084      	sub	sp, #16
 802a658:	af00      	add	r7, sp, #0
 802a65a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802a65c:	687b      	ldr	r3, [r7, #4]
 802a65e:	2b00      	cmp	r3, #0
 802a660:	d101      	bne.n	802a666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802a662:	2301      	movs	r3, #1
 802a664:	e0f1      	b.n	802a84a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802a666:	687b      	ldr	r3, [r7, #4]
 802a668:	2200      	movs	r2, #0
 802a66a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 802a66c:	687b      	ldr	r3, [r7, #4]
 802a66e:	681b      	ldr	r3, [r3, #0]
 802a670:	4a78      	ldr	r2, [pc, #480]	; (802a854 <HAL_SPI_Init+0x200>)
 802a672:	4293      	cmp	r3, r2
 802a674:	d00f      	beq.n	802a696 <HAL_SPI_Init+0x42>
 802a676:	687b      	ldr	r3, [r7, #4]
 802a678:	681b      	ldr	r3, [r3, #0]
 802a67a:	4a77      	ldr	r2, [pc, #476]	; (802a858 <HAL_SPI_Init+0x204>)
 802a67c:	4293      	cmp	r3, r2
 802a67e:	d00a      	beq.n	802a696 <HAL_SPI_Init+0x42>
 802a680:	687b      	ldr	r3, [r7, #4]
 802a682:	681b      	ldr	r3, [r3, #0]
 802a684:	4a75      	ldr	r2, [pc, #468]	; (802a85c <HAL_SPI_Init+0x208>)
 802a686:	4293      	cmp	r3, r2
 802a688:	d005      	beq.n	802a696 <HAL_SPI_Init+0x42>
 802a68a:	687b      	ldr	r3, [r7, #4]
 802a68c:	68db      	ldr	r3, [r3, #12]
 802a68e:	2b0f      	cmp	r3, #15
 802a690:	d901      	bls.n	802a696 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 802a692:	2301      	movs	r3, #1
 802a694:	e0d9      	b.n	802a84a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 802a696:	6878      	ldr	r0, [r7, #4]
 802a698:	f001 f8ee 	bl	802b878 <SPI_GetPacketSize>
 802a69c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 802a69e:	687b      	ldr	r3, [r7, #4]
 802a6a0:	681b      	ldr	r3, [r3, #0]
 802a6a2:	4a6c      	ldr	r2, [pc, #432]	; (802a854 <HAL_SPI_Init+0x200>)
 802a6a4:	4293      	cmp	r3, r2
 802a6a6:	d00c      	beq.n	802a6c2 <HAL_SPI_Init+0x6e>
 802a6a8:	687b      	ldr	r3, [r7, #4]
 802a6aa:	681b      	ldr	r3, [r3, #0]
 802a6ac:	4a6a      	ldr	r2, [pc, #424]	; (802a858 <HAL_SPI_Init+0x204>)
 802a6ae:	4293      	cmp	r3, r2
 802a6b0:	d007      	beq.n	802a6c2 <HAL_SPI_Init+0x6e>
 802a6b2:	687b      	ldr	r3, [r7, #4]
 802a6b4:	681b      	ldr	r3, [r3, #0]
 802a6b6:	4a69      	ldr	r2, [pc, #420]	; (802a85c <HAL_SPI_Init+0x208>)
 802a6b8:	4293      	cmp	r3, r2
 802a6ba:	d002      	beq.n	802a6c2 <HAL_SPI_Init+0x6e>
 802a6bc:	68fb      	ldr	r3, [r7, #12]
 802a6be:	2b08      	cmp	r3, #8
 802a6c0:	d811      	bhi.n	802a6e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 802a6c2:	687b      	ldr	r3, [r7, #4]
 802a6c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 802a6c6:	4a63      	ldr	r2, [pc, #396]	; (802a854 <HAL_SPI_Init+0x200>)
 802a6c8:	4293      	cmp	r3, r2
 802a6ca:	d009      	beq.n	802a6e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 802a6cc:	687b      	ldr	r3, [r7, #4]
 802a6ce:	681b      	ldr	r3, [r3, #0]
 802a6d0:	4a61      	ldr	r2, [pc, #388]	; (802a858 <HAL_SPI_Init+0x204>)
 802a6d2:	4293      	cmp	r3, r2
 802a6d4:	d004      	beq.n	802a6e0 <HAL_SPI_Init+0x8c>
 802a6d6:	687b      	ldr	r3, [r7, #4]
 802a6d8:	681b      	ldr	r3, [r3, #0]
 802a6da:	4a60      	ldr	r2, [pc, #384]	; (802a85c <HAL_SPI_Init+0x208>)
 802a6dc:	4293      	cmp	r3, r2
 802a6de:	d104      	bne.n	802a6ea <HAL_SPI_Init+0x96>
 802a6e0:	68fb      	ldr	r3, [r7, #12]
 802a6e2:	2b10      	cmp	r3, #16
 802a6e4:	d901      	bls.n	802a6ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 802a6e6:	2301      	movs	r3, #1
 802a6e8:	e0af      	b.n	802a84a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802a6ea:	687b      	ldr	r3, [r7, #4]
 802a6ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802a6f0:	b2db      	uxtb	r3, r3
 802a6f2:	2b00      	cmp	r3, #0
 802a6f4:	d106      	bne.n	802a704 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802a6f6:	687b      	ldr	r3, [r7, #4]
 802a6f8:	2200      	movs	r2, #0
 802a6fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802a6fe:	6878      	ldr	r0, [r7, #4]
 802a700:	f7f6 fc46 	bl	8020f90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802a704:	687b      	ldr	r3, [r7, #4]
 802a706:	2202      	movs	r2, #2
 802a708:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802a70c:	687b      	ldr	r3, [r7, #4]
 802a70e:	681b      	ldr	r3, [r3, #0]
 802a710:	681a      	ldr	r2, [r3, #0]
 802a712:	687b      	ldr	r3, [r7, #4]
 802a714:	681b      	ldr	r3, [r3, #0]
 802a716:	f022 0201 	bic.w	r2, r2, #1
 802a71a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 802a71c:	687b      	ldr	r3, [r7, #4]
 802a71e:	681b      	ldr	r3, [r3, #0]
 802a720:	689b      	ldr	r3, [r3, #8]
 802a722:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 802a726:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 802a728:	687b      	ldr	r3, [r7, #4]
 802a72a:	699b      	ldr	r3, [r3, #24]
 802a72c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802a730:	d119      	bne.n	802a766 <HAL_SPI_Init+0x112>
 802a732:	687b      	ldr	r3, [r7, #4]
 802a734:	685b      	ldr	r3, [r3, #4]
 802a736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802a73a:	d103      	bne.n	802a744 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 802a73c:	687b      	ldr	r3, [r7, #4]
 802a73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 802a740:	2b00      	cmp	r3, #0
 802a742:	d008      	beq.n	802a756 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 802a744:	687b      	ldr	r3, [r7, #4]
 802a746:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 802a748:	2b00      	cmp	r3, #0
 802a74a:	d10c      	bne.n	802a766 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 802a74c:	687b      	ldr	r3, [r7, #4]
 802a74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 802a750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802a754:	d107      	bne.n	802a766 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 802a756:	687b      	ldr	r3, [r7, #4]
 802a758:	681b      	ldr	r3, [r3, #0]
 802a75a:	681a      	ldr	r2, [r3, #0]
 802a75c:	687b      	ldr	r3, [r7, #4]
 802a75e:	681b      	ldr	r3, [r3, #0]
 802a760:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802a764:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 802a766:	687b      	ldr	r3, [r7, #4]
 802a768:	69da      	ldr	r2, [r3, #28]
 802a76a:	687b      	ldr	r3, [r7, #4]
 802a76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a76e:	431a      	orrs	r2, r3
 802a770:	68bb      	ldr	r3, [r7, #8]
 802a772:	431a      	orrs	r2, r3
 802a774:	687b      	ldr	r3, [r7, #4]
 802a776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a778:	ea42 0103 	orr.w	r1, r2, r3
 802a77c:	687b      	ldr	r3, [r7, #4]
 802a77e:	68da      	ldr	r2, [r3, #12]
 802a780:	687b      	ldr	r3, [r7, #4]
 802a782:	681b      	ldr	r3, [r3, #0]
 802a784:	430a      	orrs	r2, r1
 802a786:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 802a788:	687b      	ldr	r3, [r7, #4]
 802a78a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802a78c:	687b      	ldr	r3, [r7, #4]
 802a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a790:	431a      	orrs	r2, r3
 802a792:	687b      	ldr	r3, [r7, #4]
 802a794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a796:	431a      	orrs	r2, r3
 802a798:	687b      	ldr	r3, [r7, #4]
 802a79a:	699b      	ldr	r3, [r3, #24]
 802a79c:	431a      	orrs	r2, r3
 802a79e:	687b      	ldr	r3, [r7, #4]
 802a7a0:	691b      	ldr	r3, [r3, #16]
 802a7a2:	431a      	orrs	r2, r3
 802a7a4:	687b      	ldr	r3, [r7, #4]
 802a7a6:	695b      	ldr	r3, [r3, #20]
 802a7a8:	431a      	orrs	r2, r3
 802a7aa:	687b      	ldr	r3, [r7, #4]
 802a7ac:	6a1b      	ldr	r3, [r3, #32]
 802a7ae:	431a      	orrs	r2, r3
 802a7b0:	687b      	ldr	r3, [r7, #4]
 802a7b2:	685b      	ldr	r3, [r3, #4]
 802a7b4:	431a      	orrs	r2, r3
 802a7b6:	687b      	ldr	r3, [r7, #4]
 802a7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802a7ba:	431a      	orrs	r2, r3
 802a7bc:	687b      	ldr	r3, [r7, #4]
 802a7be:	689b      	ldr	r3, [r3, #8]
 802a7c0:	431a      	orrs	r2, r3
 802a7c2:	687b      	ldr	r3, [r7, #4]
 802a7c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802a7c6:	ea42 0103 	orr.w	r1, r2, r3
 802a7ca:	687b      	ldr	r3, [r7, #4]
 802a7cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802a7ce:	687b      	ldr	r3, [r7, #4]
 802a7d0:	681b      	ldr	r3, [r3, #0]
 802a7d2:	430a      	orrs	r2, r1
 802a7d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 802a7d6:	687b      	ldr	r3, [r7, #4]
 802a7d8:	685b      	ldr	r3, [r3, #4]
 802a7da:	2b00      	cmp	r3, #0
 802a7dc:	d113      	bne.n	802a806 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 802a7de:	687b      	ldr	r3, [r7, #4]
 802a7e0:	681b      	ldr	r3, [r3, #0]
 802a7e2:	689b      	ldr	r3, [r3, #8]
 802a7e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 802a7e8:	687b      	ldr	r3, [r7, #4]
 802a7ea:	681b      	ldr	r3, [r3, #0]
 802a7ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802a7f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 802a7f2:	687b      	ldr	r3, [r7, #4]
 802a7f4:	681b      	ldr	r3, [r3, #0]
 802a7f6:	689b      	ldr	r3, [r3, #8]
 802a7f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 802a7fc:	687b      	ldr	r3, [r7, #4]
 802a7fe:	681b      	ldr	r3, [r3, #0]
 802a800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802a804:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802a806:	687b      	ldr	r3, [r7, #4]
 802a808:	681b      	ldr	r3, [r3, #0]
 802a80a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802a80c:	687b      	ldr	r3, [r7, #4]
 802a80e:	681b      	ldr	r3, [r3, #0]
 802a810:	f022 0201 	bic.w	r2, r2, #1
 802a814:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 802a816:	687b      	ldr	r3, [r7, #4]
 802a818:	685b      	ldr	r3, [r3, #4]
 802a81a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a81e:	2b00      	cmp	r3, #0
 802a820:	d00a      	beq.n	802a838 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 802a822:	687b      	ldr	r3, [r7, #4]
 802a824:	681b      	ldr	r3, [r3, #0]
 802a826:	68db      	ldr	r3, [r3, #12]
 802a828:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802a82c:	687b      	ldr	r3, [r7, #4]
 802a82e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802a830:	687b      	ldr	r3, [r7, #4]
 802a832:	681b      	ldr	r3, [r3, #0]
 802a834:	430a      	orrs	r2, r1
 802a836:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802a838:	687b      	ldr	r3, [r7, #4]
 802a83a:	2200      	movs	r2, #0
 802a83c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 802a840:	687b      	ldr	r3, [r7, #4]
 802a842:	2201      	movs	r2, #1
 802a844:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 802a848:	2300      	movs	r3, #0
}
 802a84a:	4618      	mov	r0, r3
 802a84c:	3710      	adds	r7, #16
 802a84e:	46bd      	mov	sp, r7
 802a850:	bd80      	pop	{r7, pc}
 802a852:	bf00      	nop
 802a854:	40013000 	.word	0x40013000
 802a858:	40003800 	.word	0x40003800
 802a85c:	40003c00 	.word	0x40003c00

0802a860 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 802a860:	b580      	push	{r7, lr}
 802a862:	b086      	sub	sp, #24
 802a864:	af00      	add	r7, sp, #0
 802a866:	60f8      	str	r0, [r7, #12]
 802a868:	60b9      	str	r1, [r7, #8]
 802a86a:	4613      	mov	r3, r2
 802a86c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 802a86e:	2300      	movs	r3, #0
 802a870:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 802a872:	68fb      	ldr	r3, [r7, #12]
 802a874:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802a878:	2b01      	cmp	r3, #1
 802a87a:	d101      	bne.n	802a880 <HAL_SPI_Transmit_DMA+0x20>
 802a87c:	2302      	movs	r3, #2
 802a87e:	e12c      	b.n	802aada <HAL_SPI_Transmit_DMA+0x27a>
 802a880:	68fb      	ldr	r3, [r7, #12]
 802a882:	2201      	movs	r2, #1
 802a884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 802a888:	68fb      	ldr	r3, [r7, #12]
 802a88a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802a88e:	b2db      	uxtb	r3, r3
 802a890:	2b01      	cmp	r3, #1
 802a892:	d007      	beq.n	802a8a4 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 802a894:	2302      	movs	r3, #2
 802a896:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 802a898:	68fb      	ldr	r3, [r7, #12]
 802a89a:	2200      	movs	r2, #0
 802a89c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802a8a0:	7dfb      	ldrb	r3, [r7, #23]
 802a8a2:	e11a      	b.n	802aada <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 802a8a4:	68bb      	ldr	r3, [r7, #8]
 802a8a6:	2b00      	cmp	r3, #0
 802a8a8:	d002      	beq.n	802a8b0 <HAL_SPI_Transmit_DMA+0x50>
 802a8aa:	88fb      	ldrh	r3, [r7, #6]
 802a8ac:	2b00      	cmp	r3, #0
 802a8ae:	d107      	bne.n	802a8c0 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 802a8b0:	2301      	movs	r3, #1
 802a8b2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 802a8b4:	68fb      	ldr	r3, [r7, #12]
 802a8b6:	2200      	movs	r2, #0
 802a8b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802a8bc:	7dfb      	ldrb	r3, [r7, #23]
 802a8be:	e10c      	b.n	802aada <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 802a8c0:	68fb      	ldr	r3, [r7, #12]
 802a8c2:	2203      	movs	r2, #3
 802a8c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802a8c8:	68fb      	ldr	r3, [r7, #12]
 802a8ca:	2200      	movs	r2, #0
 802a8cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802a8d0:	68fb      	ldr	r3, [r7, #12]
 802a8d2:	68ba      	ldr	r2, [r7, #8]
 802a8d4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 802a8d6:	68fb      	ldr	r3, [r7, #12]
 802a8d8:	88fa      	ldrh	r2, [r7, #6]
 802a8da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 802a8de:	68fb      	ldr	r3, [r7, #12]
 802a8e0:	88fa      	ldrh	r2, [r7, #6]
 802a8e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 802a8e6:	68fb      	ldr	r3, [r7, #12]
 802a8e8:	2200      	movs	r2, #0
 802a8ea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 802a8ec:	68fb      	ldr	r3, [r7, #12]
 802a8ee:	2200      	movs	r2, #0
 802a8f0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 802a8f2:	68fb      	ldr	r3, [r7, #12]
 802a8f4:	2200      	movs	r2, #0
 802a8f6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 802a8f8:	68fb      	ldr	r3, [r7, #12]
 802a8fa:	2200      	movs	r2, #0
 802a8fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 802a900:	68fb      	ldr	r3, [r7, #12]
 802a902:	2200      	movs	r2, #0
 802a904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802a908:	68fb      	ldr	r3, [r7, #12]
 802a90a:	689b      	ldr	r3, [r3, #8]
 802a90c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 802a910:	d107      	bne.n	802a922 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 802a912:	68fb      	ldr	r3, [r7, #12]
 802a914:	681b      	ldr	r3, [r3, #0]
 802a916:	681a      	ldr	r2, [r3, #0]
 802a918:	68fb      	ldr	r3, [r7, #12]
 802a91a:	681b      	ldr	r3, [r3, #0]
 802a91c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802a920:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 802a922:	68fb      	ldr	r3, [r7, #12]
 802a924:	68db      	ldr	r3, [r3, #12]
 802a926:	2b0f      	cmp	r3, #15
 802a928:	d905      	bls.n	802a936 <HAL_SPI_Transmit_DMA+0xd6>
 802a92a:	68fb      	ldr	r3, [r7, #12]
 802a92c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802a92e:	699b      	ldr	r3, [r3, #24]
 802a930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802a934:	d10f      	bne.n	802a956 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 802a936:	68fb      	ldr	r3, [r7, #12]
 802a938:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 802a93a:	2b07      	cmp	r3, #7
 802a93c:	d913      	bls.n	802a966 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 802a93e:	68fb      	ldr	r3, [r7, #12]
 802a940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802a942:	699b      	ldr	r3, [r3, #24]
 802a944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802a948:	d00d      	beq.n	802a966 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 802a94a:	68fb      	ldr	r3, [r7, #12]
 802a94c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802a94e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 802a950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802a954:	d007      	beq.n	802a966 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 802a956:	2301      	movs	r3, #1
 802a958:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 802a95a:	68fb      	ldr	r3, [r7, #12]
 802a95c:	2200      	movs	r2, #0
 802a95e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802a962:	7dfb      	ldrb	r3, [r7, #23]
 802a964:	e0b9      	b.n	802aada <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 802a966:	68fb      	ldr	r3, [r7, #12]
 802a968:	68db      	ldr	r3, [r3, #12]
 802a96a:	2b07      	cmp	r3, #7
 802a96c:	d820      	bhi.n	802a9b0 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802a96e:	68fb      	ldr	r3, [r7, #12]
 802a970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802a972:	699b      	ldr	r3, [r3, #24]
 802a974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802a978:	d109      	bne.n	802a98e <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 802a97a:	68fb      	ldr	r3, [r7, #12]
 802a97c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802a980:	b29b      	uxth	r3, r3
 802a982:	3301      	adds	r3, #1
 802a984:	105b      	asrs	r3, r3, #1
 802a986:	b29a      	uxth	r2, r3
 802a988:	68fb      	ldr	r3, [r7, #12]
 802a98a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 802a98e:	68fb      	ldr	r3, [r7, #12]
 802a990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802a992:	699b      	ldr	r3, [r3, #24]
 802a994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802a998:	d11e      	bne.n	802a9d8 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 802a99a:	68fb      	ldr	r3, [r7, #12]
 802a99c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802a9a0:	b29b      	uxth	r3, r3
 802a9a2:	3303      	adds	r3, #3
 802a9a4:	109b      	asrs	r3, r3, #2
 802a9a6:	b29a      	uxth	r2, r3
 802a9a8:	68fb      	ldr	r3, [r7, #12]
 802a9aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 802a9ae:	e013      	b.n	802a9d8 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 802a9b0:	68fb      	ldr	r3, [r7, #12]
 802a9b2:	68db      	ldr	r3, [r3, #12]
 802a9b4:	2b0f      	cmp	r3, #15
 802a9b6:	d80f      	bhi.n	802a9d8 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 802a9b8:	68fb      	ldr	r3, [r7, #12]
 802a9ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802a9bc:	699b      	ldr	r3, [r3, #24]
 802a9be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802a9c2:	d109      	bne.n	802a9d8 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 802a9c4:	68fb      	ldr	r3, [r7, #12]
 802a9c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802a9ca:	b29b      	uxth	r3, r3
 802a9cc:	3301      	adds	r3, #1
 802a9ce:	105b      	asrs	r3, r3, #1
 802a9d0:	b29a      	uxth	r2, r3
 802a9d2:	68fb      	ldr	r3, [r7, #12]
 802a9d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 802a9d8:	68fb      	ldr	r3, [r7, #12]
 802a9da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802a9dc:	4a41      	ldr	r2, [pc, #260]	; (802aae4 <HAL_SPI_Transmit_DMA+0x284>)
 802a9de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 802a9e0:	68fb      	ldr	r3, [r7, #12]
 802a9e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802a9e4:	4a40      	ldr	r2, [pc, #256]	; (802aae8 <HAL_SPI_Transmit_DMA+0x288>)
 802a9e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 802a9e8:	68fb      	ldr	r3, [r7, #12]
 802a9ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802a9ec:	4a3f      	ldr	r2, [pc, #252]	; (802aaec <HAL_SPI_Transmit_DMA+0x28c>)
 802a9ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 802a9f0:	68fb      	ldr	r3, [r7, #12]
 802a9f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802a9f4:	2200      	movs	r2, #0
 802a9f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 802a9f8:	68fb      	ldr	r3, [r7, #12]
 802a9fa:	681b      	ldr	r3, [r3, #0]
 802a9fc:	689a      	ldr	r2, [r3, #8]
 802a9fe:	68fb      	ldr	r3, [r7, #12]
 802aa00:	681b      	ldr	r3, [r3, #0]
 802aa02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802aa06:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 802aa08:	68fb      	ldr	r3, [r7, #12]
 802aa0a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 802aa0c:	68fb      	ldr	r3, [r7, #12]
 802aa0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802aa10:	4619      	mov	r1, r3
 802aa12:	68fb      	ldr	r3, [r7, #12]
 802aa14:	681b      	ldr	r3, [r3, #0]
 802aa16:	3320      	adds	r3, #32
 802aa18:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 802aa1a:	68fb      	ldr	r3, [r7, #12]
 802aa1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802aa20:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 802aa22:	f7f8 fb65 	bl	80230f0 <HAL_DMA_Start_IT>
 802aa26:	4603      	mov	r3, r0
 802aa28:	2b00      	cmp	r3, #0
 802aa2a:	d013      	beq.n	802aa54 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 802aa2c:	68fb      	ldr	r3, [r7, #12]
 802aa2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802aa32:	f043 0210 	orr.w	r2, r3, #16
 802aa36:	68fb      	ldr	r3, [r7, #12]
 802aa38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 802aa3c:	68fb      	ldr	r3, [r7, #12]
 802aa3e:	2200      	movs	r2, #0
 802aa40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 802aa44:	68fb      	ldr	r3, [r7, #12]
 802aa46:	2201      	movs	r2, #1
 802aa48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 802aa4c:	2301      	movs	r3, #1
 802aa4e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 802aa50:	7dfb      	ldrb	r3, [r7, #23]
 802aa52:	e042      	b.n	802aada <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 802aa54:	68fb      	ldr	r3, [r7, #12]
 802aa56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802aa58:	69db      	ldr	r3, [r3, #28]
 802aa5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802aa5e:	d108      	bne.n	802aa72 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 802aa60:	68fb      	ldr	r3, [r7, #12]
 802aa62:	681b      	ldr	r3, [r3, #0]
 802aa64:	6859      	ldr	r1, [r3, #4]
 802aa66:	68fb      	ldr	r3, [r7, #12]
 802aa68:	681a      	ldr	r2, [r3, #0]
 802aa6a:	4b21      	ldr	r3, [pc, #132]	; (802aaf0 <HAL_SPI_Transmit_DMA+0x290>)
 802aa6c:	400b      	ands	r3, r1
 802aa6e:	6053      	str	r3, [r2, #4]
 802aa70:	e009      	b.n	802aa86 <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 802aa72:	68fb      	ldr	r3, [r7, #12]
 802aa74:	681b      	ldr	r3, [r3, #0]
 802aa76:	685a      	ldr	r2, [r3, #4]
 802aa78:	4b1d      	ldr	r3, [pc, #116]	; (802aaf0 <HAL_SPI_Transmit_DMA+0x290>)
 802aa7a:	4013      	ands	r3, r2
 802aa7c:	88f9      	ldrh	r1, [r7, #6]
 802aa7e:	68fa      	ldr	r2, [r7, #12]
 802aa80:	6812      	ldr	r2, [r2, #0]
 802aa82:	430b      	orrs	r3, r1
 802aa84:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 802aa86:	68fb      	ldr	r3, [r7, #12]
 802aa88:	681b      	ldr	r3, [r3, #0]
 802aa8a:	689a      	ldr	r2, [r3, #8]
 802aa8c:	68fb      	ldr	r3, [r7, #12]
 802aa8e:	681b      	ldr	r3, [r3, #0]
 802aa90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802aa94:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 802aa96:	68fb      	ldr	r3, [r7, #12]
 802aa98:	681b      	ldr	r3, [r3, #0]
 802aa9a:	691a      	ldr	r2, [r3, #16]
 802aa9c:	68fb      	ldr	r3, [r7, #12]
 802aa9e:	681b      	ldr	r3, [r3, #0]
 802aaa0:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 802aaa4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 802aaa6:	68fb      	ldr	r3, [r7, #12]
 802aaa8:	681b      	ldr	r3, [r3, #0]
 802aaaa:	681a      	ldr	r2, [r3, #0]
 802aaac:	68fb      	ldr	r3, [r7, #12]
 802aaae:	681b      	ldr	r3, [r3, #0]
 802aab0:	f042 0201 	orr.w	r2, r2, #1
 802aab4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802aab6:	68fb      	ldr	r3, [r7, #12]
 802aab8:	685b      	ldr	r3, [r3, #4]
 802aaba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802aabe:	d107      	bne.n	802aad0 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 802aac0:	68fb      	ldr	r3, [r7, #12]
 802aac2:	681b      	ldr	r3, [r3, #0]
 802aac4:	681a      	ldr	r2, [r3, #0]
 802aac6:	68fb      	ldr	r3, [r7, #12]
 802aac8:	681b      	ldr	r3, [r3, #0]
 802aaca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802aace:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 802aad0:	68fb      	ldr	r3, [r7, #12]
 802aad2:	2200      	movs	r2, #0
 802aad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 802aad8:	7dfb      	ldrb	r3, [r7, #23]
}
 802aada:	4618      	mov	r0, r3
 802aadc:	3718      	adds	r7, #24
 802aade:	46bd      	mov	sp, r7
 802aae0:	bd80      	pop	{r7, pc}
 802aae2:	bf00      	nop
 802aae4:	0802b66b 	.word	0x0802b66b
 802aae8:	0802b599 	.word	0x0802b599
 802aaec:	0802b6bf 	.word	0x0802b6bf
 802aaf0:	ffff0000 	.word	0xffff0000

0802aaf4 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 802aaf4:	b580      	push	{r7, lr}
 802aaf6:	b086      	sub	sp, #24
 802aaf8:	af00      	add	r7, sp, #0
 802aafa:	60f8      	str	r0, [r7, #12]
 802aafc:	60b9      	str	r1, [r7, #8]
 802aafe:	4613      	mov	r3, r2
 802ab00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 802ab02:	2300      	movs	r3, #0
 802ab04:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 802ab06:	68fb      	ldr	r3, [r7, #12]
 802ab08:	689b      	ldr	r3, [r3, #8]
 802ab0a:	2b00      	cmp	r3, #0
 802ab0c:	d110      	bne.n	802ab30 <HAL_SPI_Receive_DMA+0x3c>
 802ab0e:	68fb      	ldr	r3, [r7, #12]
 802ab10:	685b      	ldr	r3, [r3, #4]
 802ab12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802ab16:	d10b      	bne.n	802ab30 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 802ab18:	68fb      	ldr	r3, [r7, #12]
 802ab1a:	2204      	movs	r2, #4
 802ab1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 802ab20:	88fb      	ldrh	r3, [r7, #6]
 802ab22:	68ba      	ldr	r2, [r7, #8]
 802ab24:	68b9      	ldr	r1, [r7, #8]
 802ab26:	68f8      	ldr	r0, [r7, #12]
 802ab28:	f000 f940 	bl	802adac <HAL_SPI_TransmitReceive_DMA>
 802ab2c:	4603      	mov	r3, r0
 802ab2e:	e130      	b.n	802ad92 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 802ab30:	68fb      	ldr	r3, [r7, #12]
 802ab32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802ab36:	2b01      	cmp	r3, #1
 802ab38:	d101      	bne.n	802ab3e <HAL_SPI_Receive_DMA+0x4a>
 802ab3a:	2302      	movs	r3, #2
 802ab3c:	e129      	b.n	802ad92 <HAL_SPI_Receive_DMA+0x29e>
 802ab3e:	68fb      	ldr	r3, [r7, #12]
 802ab40:	2201      	movs	r2, #1
 802ab42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 802ab46:	68fb      	ldr	r3, [r7, #12]
 802ab48:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802ab4c:	b2db      	uxtb	r3, r3
 802ab4e:	2b01      	cmp	r3, #1
 802ab50:	d007      	beq.n	802ab62 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 802ab52:	2302      	movs	r3, #2
 802ab54:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 802ab56:	68fb      	ldr	r3, [r7, #12]
 802ab58:	2200      	movs	r2, #0
 802ab5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802ab5e:	7dfb      	ldrb	r3, [r7, #23]
 802ab60:	e117      	b.n	802ad92 <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 802ab62:	68bb      	ldr	r3, [r7, #8]
 802ab64:	2b00      	cmp	r3, #0
 802ab66:	d002      	beq.n	802ab6e <HAL_SPI_Receive_DMA+0x7a>
 802ab68:	88fb      	ldrh	r3, [r7, #6]
 802ab6a:	2b00      	cmp	r3, #0
 802ab6c:	d107      	bne.n	802ab7e <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 802ab6e:	2301      	movs	r3, #1
 802ab70:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 802ab72:	68fb      	ldr	r3, [r7, #12]
 802ab74:	2200      	movs	r2, #0
 802ab76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802ab7a:	7dfb      	ldrb	r3, [r7, #23]
 802ab7c:	e109      	b.n	802ad92 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 802ab7e:	68fb      	ldr	r3, [r7, #12]
 802ab80:	2204      	movs	r2, #4
 802ab82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802ab86:	68fb      	ldr	r3, [r7, #12]
 802ab88:	2200      	movs	r2, #0
 802ab8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 802ab8e:	68fb      	ldr	r3, [r7, #12]
 802ab90:	68ba      	ldr	r2, [r7, #8]
 802ab92:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 802ab94:	68fb      	ldr	r3, [r7, #12]
 802ab96:	88fa      	ldrh	r2, [r7, #6]
 802ab98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 802ab9c:	68fb      	ldr	r3, [r7, #12]
 802ab9e:	88fa      	ldrh	r2, [r7, #6]
 802aba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802aba4:	68fb      	ldr	r3, [r7, #12]
 802aba6:	2200      	movs	r2, #0
 802aba8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 802abaa:	68fb      	ldr	r3, [r7, #12]
 802abac:	2200      	movs	r2, #0
 802abae:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 802abb0:	68fb      	ldr	r3, [r7, #12]
 802abb2:	2200      	movs	r2, #0
 802abb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 802abb8:	68fb      	ldr	r3, [r7, #12]
 802abba:	2200      	movs	r2, #0
 802abbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802abc0:	68fb      	ldr	r3, [r7, #12]
 802abc2:	689b      	ldr	r3, [r3, #8]
 802abc4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 802abc8:	d107      	bne.n	802abda <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 802abca:	68fb      	ldr	r3, [r7, #12]
 802abcc:	681b      	ldr	r3, [r3, #0]
 802abce:	681a      	ldr	r2, [r3, #0]
 802abd0:	68fb      	ldr	r3, [r7, #12]
 802abd2:	681b      	ldr	r3, [r3, #0]
 802abd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802abd8:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 802abda:	68fb      	ldr	r3, [r7, #12]
 802abdc:	68db      	ldr	r3, [r3, #12]
 802abde:	2b0f      	cmp	r3, #15
 802abe0:	d905      	bls.n	802abee <HAL_SPI_Receive_DMA+0xfa>
 802abe2:	68fb      	ldr	r3, [r7, #12]
 802abe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802abe6:	699b      	ldr	r3, [r3, #24]
 802abe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802abec:	d10f      	bne.n	802ac0e <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 802abee:	68fb      	ldr	r3, [r7, #12]
 802abf0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 802abf2:	2b07      	cmp	r3, #7
 802abf4:	d913      	bls.n	802ac1e <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 802abf6:	68fb      	ldr	r3, [r7, #12]
 802abf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802abfa:	699b      	ldr	r3, [r3, #24]
 802abfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802ac00:	d00d      	beq.n	802ac1e <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 802ac02:	68fb      	ldr	r3, [r7, #12]
 802ac04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802ac06:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 802ac08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802ac0c:	d007      	beq.n	802ac1e <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 802ac0e:	2301      	movs	r3, #1
 802ac10:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 802ac12:	68fb      	ldr	r3, [r7, #12]
 802ac14:	2200      	movs	r2, #0
 802ac16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802ac1a:	7dfb      	ldrb	r3, [r7, #23]
 802ac1c:	e0b9      	b.n	802ad92 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 802ac1e:	68fb      	ldr	r3, [r7, #12]
 802ac20:	681b      	ldr	r3, [r3, #0]
 802ac22:	689a      	ldr	r2, [r3, #8]
 802ac24:	68fb      	ldr	r3, [r7, #12]
 802ac26:	681b      	ldr	r3, [r3, #0]
 802ac28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802ac2c:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 802ac2e:	68fb      	ldr	r3, [r7, #12]
 802ac30:	68db      	ldr	r3, [r3, #12]
 802ac32:	2b07      	cmp	r3, #7
 802ac34:	d820      	bhi.n	802ac78 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802ac36:	68fb      	ldr	r3, [r7, #12]
 802ac38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802ac3a:	699b      	ldr	r3, [r3, #24]
 802ac3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802ac40:	d109      	bne.n	802ac56 <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 802ac42:	68fb      	ldr	r3, [r7, #12]
 802ac44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802ac48:	b29b      	uxth	r3, r3
 802ac4a:	3301      	adds	r3, #1
 802ac4c:	105b      	asrs	r3, r3, #1
 802ac4e:	b29a      	uxth	r2, r3
 802ac50:	68fb      	ldr	r3, [r7, #12]
 802ac52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 802ac56:	68fb      	ldr	r3, [r7, #12]
 802ac58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802ac5a:	699b      	ldr	r3, [r3, #24]
 802ac5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802ac60:	d11e      	bne.n	802aca0 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 802ac62:	68fb      	ldr	r3, [r7, #12]
 802ac64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802ac68:	b29b      	uxth	r3, r3
 802ac6a:	3303      	adds	r3, #3
 802ac6c:	109b      	asrs	r3, r3, #2
 802ac6e:	b29a      	uxth	r2, r3
 802ac70:	68fb      	ldr	r3, [r7, #12]
 802ac72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 802ac76:	e013      	b.n	802aca0 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 802ac78:	68fb      	ldr	r3, [r7, #12]
 802ac7a:	68db      	ldr	r3, [r3, #12]
 802ac7c:	2b0f      	cmp	r3, #15
 802ac7e:	d80f      	bhi.n	802aca0 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 802ac80:	68fb      	ldr	r3, [r7, #12]
 802ac82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802ac84:	699b      	ldr	r3, [r3, #24]
 802ac86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802ac8a:	d109      	bne.n	802aca0 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 802ac8c:	68fb      	ldr	r3, [r7, #12]
 802ac8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802ac92:	b29b      	uxth	r3, r3
 802ac94:	3301      	adds	r3, #1
 802ac96:	105b      	asrs	r3, r3, #1
 802ac98:	b29a      	uxth	r2, r3
 802ac9a:	68fb      	ldr	r3, [r7, #12]
 802ac9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 802aca0:	68fb      	ldr	r3, [r7, #12]
 802aca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802aca4:	4a3d      	ldr	r2, [pc, #244]	; (802ad9c <HAL_SPI_Receive_DMA+0x2a8>)
 802aca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 802aca8:	68fb      	ldr	r3, [r7, #12]
 802acaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802acac:	4a3c      	ldr	r2, [pc, #240]	; (802ada0 <HAL_SPI_Receive_DMA+0x2ac>)
 802acae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 802acb0:	68fb      	ldr	r3, [r7, #12]
 802acb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802acb4:	4a3b      	ldr	r2, [pc, #236]	; (802ada4 <HAL_SPI_Receive_DMA+0x2b0>)
 802acb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 802acb8:	68fb      	ldr	r3, [r7, #12]
 802acba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802acbc:	2200      	movs	r2, #0
 802acbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 802acc0:	68fb      	ldr	r3, [r7, #12]
 802acc2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 802acc4:	68fb      	ldr	r3, [r7, #12]
 802acc6:	681b      	ldr	r3, [r3, #0]
 802acc8:	3330      	adds	r3, #48	; 0x30
 802acca:	4619      	mov	r1, r3
 802accc:	68fb      	ldr	r3, [r7, #12]
 802acce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802acd0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 802acd2:	68fb      	ldr	r3, [r7, #12]
 802acd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802acd8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 802acda:	f7f8 fa09 	bl	80230f0 <HAL_DMA_Start_IT>
 802acde:	4603      	mov	r3, r0
 802ace0:	2b00      	cmp	r3, #0
 802ace2:	d013      	beq.n	802ad0c <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 802ace4:	68fb      	ldr	r3, [r7, #12]
 802ace6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802acea:	f043 0210 	orr.w	r2, r3, #16
 802acee:	68fb      	ldr	r3, [r7, #12]
 802acf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 802acf4:	68fb      	ldr	r3, [r7, #12]
 802acf6:	2200      	movs	r2, #0
 802acf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 802acfc:	68fb      	ldr	r3, [r7, #12]
 802acfe:	2201      	movs	r2, #1
 802ad00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 802ad04:	2301      	movs	r3, #1
 802ad06:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 802ad08:	7dfb      	ldrb	r3, [r7, #23]
 802ad0a:	e042      	b.n	802ad92 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 802ad0c:	68fb      	ldr	r3, [r7, #12]
 802ad0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802ad10:	69db      	ldr	r3, [r3, #28]
 802ad12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802ad16:	d108      	bne.n	802ad2a <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 802ad18:	68fb      	ldr	r3, [r7, #12]
 802ad1a:	681b      	ldr	r3, [r3, #0]
 802ad1c:	6859      	ldr	r1, [r3, #4]
 802ad1e:	68fb      	ldr	r3, [r7, #12]
 802ad20:	681a      	ldr	r2, [r3, #0]
 802ad22:	4b21      	ldr	r3, [pc, #132]	; (802ada8 <HAL_SPI_Receive_DMA+0x2b4>)
 802ad24:	400b      	ands	r3, r1
 802ad26:	6053      	str	r3, [r2, #4]
 802ad28:	e009      	b.n	802ad3e <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 802ad2a:	68fb      	ldr	r3, [r7, #12]
 802ad2c:	681b      	ldr	r3, [r3, #0]
 802ad2e:	685a      	ldr	r2, [r3, #4]
 802ad30:	4b1d      	ldr	r3, [pc, #116]	; (802ada8 <HAL_SPI_Receive_DMA+0x2b4>)
 802ad32:	4013      	ands	r3, r2
 802ad34:	88f9      	ldrh	r1, [r7, #6]
 802ad36:	68fa      	ldr	r2, [r7, #12]
 802ad38:	6812      	ldr	r2, [r2, #0]
 802ad3a:	430b      	orrs	r3, r1
 802ad3c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 802ad3e:	68fb      	ldr	r3, [r7, #12]
 802ad40:	681b      	ldr	r3, [r3, #0]
 802ad42:	689a      	ldr	r2, [r3, #8]
 802ad44:	68fb      	ldr	r3, [r7, #12]
 802ad46:	681b      	ldr	r3, [r3, #0]
 802ad48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802ad4c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 802ad4e:	68fb      	ldr	r3, [r7, #12]
 802ad50:	681b      	ldr	r3, [r3, #0]
 802ad52:	691a      	ldr	r2, [r3, #16]
 802ad54:	68fb      	ldr	r3, [r7, #12]
 802ad56:	681b      	ldr	r3, [r3, #0]
 802ad58:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 802ad5c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 802ad5e:	68fb      	ldr	r3, [r7, #12]
 802ad60:	681b      	ldr	r3, [r3, #0]
 802ad62:	681a      	ldr	r2, [r3, #0]
 802ad64:	68fb      	ldr	r3, [r7, #12]
 802ad66:	681b      	ldr	r3, [r3, #0]
 802ad68:	f042 0201 	orr.w	r2, r2, #1
 802ad6c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802ad6e:	68fb      	ldr	r3, [r7, #12]
 802ad70:	685b      	ldr	r3, [r3, #4]
 802ad72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802ad76:	d107      	bne.n	802ad88 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 802ad78:	68fb      	ldr	r3, [r7, #12]
 802ad7a:	681b      	ldr	r3, [r3, #0]
 802ad7c:	681a      	ldr	r2, [r3, #0]
 802ad7e:	68fb      	ldr	r3, [r7, #12]
 802ad80:	681b      	ldr	r3, [r3, #0]
 802ad82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802ad86:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 802ad88:	68fb      	ldr	r3, [r7, #12]
 802ad8a:	2200      	movs	r2, #0
 802ad8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 802ad90:	7dfb      	ldrb	r3, [r7, #23]
}
 802ad92:	4618      	mov	r0, r3
 802ad94:	3718      	adds	r7, #24
 802ad96:	46bd      	mov	sp, r7
 802ad98:	bd80      	pop	{r7, pc}
 802ad9a:	bf00      	nop
 802ad9c:	0802b687 	.word	0x0802b687
 802ada0:	0802b5df 	.word	0x0802b5df
 802ada4:	0802b6bf 	.word	0x0802b6bf
 802ada8:	ffff0000 	.word	0xffff0000

0802adac <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 802adac:	b580      	push	{r7, lr}
 802adae:	b086      	sub	sp, #24
 802adb0:	af00      	add	r7, sp, #0
 802adb2:	60f8      	str	r0, [r7, #12]
 802adb4:	60b9      	str	r1, [r7, #8]
 802adb6:	607a      	str	r2, [r7, #4]
 802adb8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802adba:	2300      	movs	r3, #0
 802adbc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 802adbe:	68fb      	ldr	r3, [r7, #12]
 802adc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802adc4:	2b01      	cmp	r3, #1
 802adc6:	d101      	bne.n	802adcc <HAL_SPI_TransmitReceive_DMA+0x20>
 802adc8:	2302      	movs	r3, #2
 802adca:	e1b4      	b.n	802b136 <HAL_SPI_TransmitReceive_DMA+0x38a>
 802adcc:	68fb      	ldr	r3, [r7, #12]
 802adce:	2201      	movs	r2, #1
 802add0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 802add4:	68fb      	ldr	r3, [r7, #12]
 802add6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802adda:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 802addc:	68fb      	ldr	r3, [r7, #12]
 802adde:	685b      	ldr	r3, [r3, #4]
 802ade0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802ade2:	7dbb      	ldrb	r3, [r7, #22]
 802ade4:	2b01      	cmp	r3, #1
 802ade6:	d012      	beq.n	802ae0e <HAL_SPI_TransmitReceive_DMA+0x62>
 802ade8:	693b      	ldr	r3, [r7, #16]
 802adea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802adee:	d106      	bne.n	802adfe <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 802adf0:	68fb      	ldr	r3, [r7, #12]
 802adf2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 802adf4:	2b00      	cmp	r3, #0
 802adf6:	d102      	bne.n	802adfe <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 802adf8:	7dbb      	ldrb	r3, [r7, #22]
 802adfa:	2b04      	cmp	r3, #4
 802adfc:	d007      	beq.n	802ae0e <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 802adfe:	2302      	movs	r3, #2
 802ae00:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 802ae02:	68fb      	ldr	r3, [r7, #12]
 802ae04:	2200      	movs	r2, #0
 802ae06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802ae0a:	7dfb      	ldrb	r3, [r7, #23]
 802ae0c:	e193      	b.n	802b136 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 802ae0e:	68bb      	ldr	r3, [r7, #8]
 802ae10:	2b00      	cmp	r3, #0
 802ae12:	d005      	beq.n	802ae20 <HAL_SPI_TransmitReceive_DMA+0x74>
 802ae14:	687b      	ldr	r3, [r7, #4]
 802ae16:	2b00      	cmp	r3, #0
 802ae18:	d002      	beq.n	802ae20 <HAL_SPI_TransmitReceive_DMA+0x74>
 802ae1a:	887b      	ldrh	r3, [r7, #2]
 802ae1c:	2b00      	cmp	r3, #0
 802ae1e:	d107      	bne.n	802ae30 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 802ae20:	2301      	movs	r3, #1
 802ae22:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 802ae24:	68fb      	ldr	r3, [r7, #12]
 802ae26:	2200      	movs	r2, #0
 802ae28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802ae2c:	7dfb      	ldrb	r3, [r7, #23]
 802ae2e:	e182      	b.n	802b136 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802ae30:	68fb      	ldr	r3, [r7, #12]
 802ae32:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802ae36:	b2db      	uxtb	r3, r3
 802ae38:	2b04      	cmp	r3, #4
 802ae3a:	d003      	beq.n	802ae44 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802ae3c:	68fb      	ldr	r3, [r7, #12]
 802ae3e:	2205      	movs	r2, #5
 802ae40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802ae44:	68fb      	ldr	r3, [r7, #12]
 802ae46:	2200      	movs	r2, #0
 802ae48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 802ae4c:	68fb      	ldr	r3, [r7, #12]
 802ae4e:	68ba      	ldr	r2, [r7, #8]
 802ae50:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 802ae52:	68fb      	ldr	r3, [r7, #12]
 802ae54:	887a      	ldrh	r2, [r7, #2]
 802ae56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 802ae5a:	68fb      	ldr	r3, [r7, #12]
 802ae5c:	887a      	ldrh	r2, [r7, #2]
 802ae5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802ae62:	68fb      	ldr	r3, [r7, #12]
 802ae64:	687a      	ldr	r2, [r7, #4]
 802ae66:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 802ae68:	68fb      	ldr	r3, [r7, #12]
 802ae6a:	887a      	ldrh	r2, [r7, #2]
 802ae6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 802ae70:	68fb      	ldr	r3, [r7, #12]
 802ae72:	887a      	ldrh	r2, [r7, #2]
 802ae74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802ae78:	68fb      	ldr	r3, [r7, #12]
 802ae7a:	2200      	movs	r2, #0
 802ae7c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 802ae7e:	68fb      	ldr	r3, [r7, #12]
 802ae80:	2200      	movs	r2, #0
 802ae82:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 802ae84:	68fb      	ldr	r3, [r7, #12]
 802ae86:	681b      	ldr	r3, [r3, #0]
 802ae88:	689a      	ldr	r2, [r3, #8]
 802ae8a:	68fb      	ldr	r3, [r7, #12]
 802ae8c:	681b      	ldr	r3, [r3, #0]
 802ae8e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 802ae92:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 802ae94:	68fb      	ldr	r3, [r7, #12]
 802ae96:	68db      	ldr	r3, [r3, #12]
 802ae98:	2b0f      	cmp	r3, #15
 802ae9a:	d905      	bls.n	802aea8 <HAL_SPI_TransmitReceive_DMA+0xfc>
 802ae9c:	68fb      	ldr	r3, [r7, #12]
 802ae9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802aea0:	699b      	ldr	r3, [r3, #24]
 802aea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802aea6:	d10f      	bne.n	802aec8 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 802aea8:	68fb      	ldr	r3, [r7, #12]
 802aeaa:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 802aeac:	2b07      	cmp	r3, #7
 802aeae:	d913      	bls.n	802aed8 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 802aeb0:	68fb      	ldr	r3, [r7, #12]
 802aeb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802aeb4:	699b      	ldr	r3, [r3, #24]
 802aeb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802aeba:	d00d      	beq.n	802aed8 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 802aebc:	68fb      	ldr	r3, [r7, #12]
 802aebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802aec0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 802aec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802aec6:	d007      	beq.n	802aed8 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 802aec8:	2301      	movs	r3, #1
 802aeca:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 802aecc:	68fb      	ldr	r3, [r7, #12]
 802aece:	2200      	movs	r2, #0
 802aed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802aed4:	7dfb      	ldrb	r3, [r7, #23]
 802aed6:	e12e      	b.n	802b136 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 802aed8:	68fb      	ldr	r3, [r7, #12]
 802aeda:	68db      	ldr	r3, [r3, #12]
 802aedc:	2b07      	cmp	r3, #7
 802aede:	d840      	bhi.n	802af62 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802aee0:	68fb      	ldr	r3, [r7, #12]
 802aee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802aee4:	699b      	ldr	r3, [r3, #24]
 802aee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802aeea:	d109      	bne.n	802af00 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 802aeec:	68fb      	ldr	r3, [r7, #12]
 802aeee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802aef2:	b29b      	uxth	r3, r3
 802aef4:	3301      	adds	r3, #1
 802aef6:	105b      	asrs	r3, r3, #1
 802aef8:	b29a      	uxth	r2, r3
 802aefa:	68fb      	ldr	r3, [r7, #12]
 802aefc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 802af00:	68fb      	ldr	r3, [r7, #12]
 802af02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802af04:	699b      	ldr	r3, [r3, #24]
 802af06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802af0a:	d109      	bne.n	802af20 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 802af0c:	68fb      	ldr	r3, [r7, #12]
 802af0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802af12:	b29b      	uxth	r3, r3
 802af14:	3303      	adds	r3, #3
 802af16:	109b      	asrs	r3, r3, #2
 802af18:	b29a      	uxth	r2, r3
 802af1a:	68fb      	ldr	r3, [r7, #12]
 802af1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802af20:	68fb      	ldr	r3, [r7, #12]
 802af22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802af24:	699b      	ldr	r3, [r3, #24]
 802af26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802af2a:	d109      	bne.n	802af40 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 802af2c:	68fb      	ldr	r3, [r7, #12]
 802af2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802af32:	b29b      	uxth	r3, r3
 802af34:	3301      	adds	r3, #1
 802af36:	105b      	asrs	r3, r3, #1
 802af38:	b29a      	uxth	r2, r3
 802af3a:	68fb      	ldr	r3, [r7, #12]
 802af3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 802af40:	68fb      	ldr	r3, [r7, #12]
 802af42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802af44:	699b      	ldr	r3, [r3, #24]
 802af46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802af4a:	d12e      	bne.n	802afaa <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 802af4c:	68fb      	ldr	r3, [r7, #12]
 802af4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802af52:	b29b      	uxth	r3, r3
 802af54:	3303      	adds	r3, #3
 802af56:	109b      	asrs	r3, r3, #2
 802af58:	b29a      	uxth	r2, r3
 802af5a:	68fb      	ldr	r3, [r7, #12]
 802af5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 802af60:	e023      	b.n	802afaa <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 802af62:	68fb      	ldr	r3, [r7, #12]
 802af64:	68db      	ldr	r3, [r3, #12]
 802af66:	2b0f      	cmp	r3, #15
 802af68:	d81f      	bhi.n	802afaa <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 802af6a:	68fb      	ldr	r3, [r7, #12]
 802af6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802af6e:	699b      	ldr	r3, [r3, #24]
 802af70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802af74:	d109      	bne.n	802af8a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 802af76:	68fb      	ldr	r3, [r7, #12]
 802af78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802af7c:	b29b      	uxth	r3, r3
 802af7e:	3301      	adds	r3, #1
 802af80:	105b      	asrs	r3, r3, #1
 802af82:	b29a      	uxth	r2, r3
 802af84:	68fb      	ldr	r3, [r7, #12]
 802af86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 802af8a:	68fb      	ldr	r3, [r7, #12]
 802af8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802af8e:	699b      	ldr	r3, [r3, #24]
 802af90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802af94:	d109      	bne.n	802afaa <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 802af96:	68fb      	ldr	r3, [r7, #12]
 802af98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802af9c:	b29b      	uxth	r3, r3
 802af9e:	3301      	adds	r3, #1
 802afa0:	105b      	asrs	r3, r3, #1
 802afa2:	b29a      	uxth	r2, r3
 802afa4:	68fb      	ldr	r3, [r7, #12]
 802afa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 802afaa:	68fb      	ldr	r3, [r7, #12]
 802afac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802afb0:	b2db      	uxtb	r3, r3
 802afb2:	2b04      	cmp	r3, #4
 802afb4:	d108      	bne.n	802afc8 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 802afb6:	68fb      	ldr	r3, [r7, #12]
 802afb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802afba:	4a61      	ldr	r2, [pc, #388]	; (802b140 <HAL_SPI_TransmitReceive_DMA+0x394>)
 802afbc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 802afbe:	68fb      	ldr	r3, [r7, #12]
 802afc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802afc2:	4a60      	ldr	r2, [pc, #384]	; (802b144 <HAL_SPI_TransmitReceive_DMA+0x398>)
 802afc4:	63da      	str	r2, [r3, #60]	; 0x3c
 802afc6:	e007      	b.n	802afd8 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 802afc8:	68fb      	ldr	r3, [r7, #12]
 802afca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802afcc:	4a5e      	ldr	r2, [pc, #376]	; (802b148 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 802afce:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 802afd0:	68fb      	ldr	r3, [r7, #12]
 802afd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802afd4:	4a5d      	ldr	r2, [pc, #372]	; (802b14c <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 802afd6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 802afd8:	68fb      	ldr	r3, [r7, #12]
 802afda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802afdc:	4a5c      	ldr	r2, [pc, #368]	; (802b150 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 802afde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 802afe0:	68fb      	ldr	r3, [r7, #12]
 802afe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802afe4:	2200      	movs	r2, #0
 802afe6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 802afe8:	68fb      	ldr	r3, [r7, #12]
 802afea:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 802afec:	68fb      	ldr	r3, [r7, #12]
 802afee:	681b      	ldr	r3, [r3, #0]
 802aff0:	3330      	adds	r3, #48	; 0x30
 802aff2:	4619      	mov	r1, r3
 802aff4:	68fb      	ldr	r3, [r7, #12]
 802aff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802aff8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 802affa:	68fb      	ldr	r3, [r7, #12]
 802affc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802b000:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 802b002:	f7f8 f875 	bl	80230f0 <HAL_DMA_Start_IT>
 802b006:	4603      	mov	r3, r0
 802b008:	2b00      	cmp	r3, #0
 802b00a:	d013      	beq.n	802b034 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 802b00c:	68fb      	ldr	r3, [r7, #12]
 802b00e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b012:	f043 0210 	orr.w	r2, r3, #16
 802b016:	68fb      	ldr	r3, [r7, #12]
 802b018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 802b01c:	68fb      	ldr	r3, [r7, #12]
 802b01e:	2200      	movs	r2, #0
 802b020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 802b024:	68fb      	ldr	r3, [r7, #12]
 802b026:	2201      	movs	r2, #1
 802b028:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 802b02c:	2301      	movs	r3, #1
 802b02e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 802b030:	7dfb      	ldrb	r3, [r7, #23]
 802b032:	e080      	b.n	802b136 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 802b034:	68fb      	ldr	r3, [r7, #12]
 802b036:	681b      	ldr	r3, [r3, #0]
 802b038:	689a      	ldr	r2, [r3, #8]
 802b03a:	68fb      	ldr	r3, [r7, #12]
 802b03c:	681b      	ldr	r3, [r3, #0]
 802b03e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802b042:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 802b044:	68fb      	ldr	r3, [r7, #12]
 802b046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802b048:	2200      	movs	r2, #0
 802b04a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 802b04c:	68fb      	ldr	r3, [r7, #12]
 802b04e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802b050:	2200      	movs	r2, #0
 802b052:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 802b054:	68fb      	ldr	r3, [r7, #12]
 802b056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802b058:	2200      	movs	r2, #0
 802b05a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 802b05c:	68fb      	ldr	r3, [r7, #12]
 802b05e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802b060:	2200      	movs	r2, #0
 802b062:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 802b064:	68fb      	ldr	r3, [r7, #12]
 802b066:	6f98      	ldr	r0, [r3, #120]	; 0x78
 802b068:	68fb      	ldr	r3, [r7, #12]
 802b06a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802b06c:	4619      	mov	r1, r3
 802b06e:	68fb      	ldr	r3, [r7, #12]
 802b070:	681b      	ldr	r3, [r3, #0]
 802b072:	3320      	adds	r3, #32
 802b074:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 802b076:	68fb      	ldr	r3, [r7, #12]
 802b078:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802b07c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 802b07e:	f7f8 f837 	bl	80230f0 <HAL_DMA_Start_IT>
 802b082:	4603      	mov	r3, r0
 802b084:	2b00      	cmp	r3, #0
 802b086:	d013      	beq.n	802b0b0 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 802b088:	68fb      	ldr	r3, [r7, #12]
 802b08a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b08e:	f043 0210 	orr.w	r2, r3, #16
 802b092:	68fb      	ldr	r3, [r7, #12]
 802b094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 802b098:	68fb      	ldr	r3, [r7, #12]
 802b09a:	2200      	movs	r2, #0
 802b09c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 802b0a0:	68fb      	ldr	r3, [r7, #12]
 802b0a2:	2201      	movs	r2, #1
 802b0a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 802b0a8:	2301      	movs	r3, #1
 802b0aa:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 802b0ac:	7dfb      	ldrb	r3, [r7, #23]
 802b0ae:	e042      	b.n	802b136 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 802b0b0:	68fb      	ldr	r3, [r7, #12]
 802b0b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802b0b4:	69db      	ldr	r3, [r3, #28]
 802b0b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b0ba:	d108      	bne.n	802b0ce <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 802b0bc:	68fb      	ldr	r3, [r7, #12]
 802b0be:	681b      	ldr	r3, [r3, #0]
 802b0c0:	6859      	ldr	r1, [r3, #4]
 802b0c2:	68fb      	ldr	r3, [r7, #12]
 802b0c4:	681a      	ldr	r2, [r3, #0]
 802b0c6:	4b23      	ldr	r3, [pc, #140]	; (802b154 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 802b0c8:	400b      	ands	r3, r1
 802b0ca:	6053      	str	r3, [r2, #4]
 802b0cc:	e009      	b.n	802b0e2 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 802b0ce:	68fb      	ldr	r3, [r7, #12]
 802b0d0:	681b      	ldr	r3, [r3, #0]
 802b0d2:	685a      	ldr	r2, [r3, #4]
 802b0d4:	4b1f      	ldr	r3, [pc, #124]	; (802b154 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 802b0d6:	4013      	ands	r3, r2
 802b0d8:	8879      	ldrh	r1, [r7, #2]
 802b0da:	68fa      	ldr	r2, [r7, #12]
 802b0dc:	6812      	ldr	r2, [r2, #0]
 802b0de:	430b      	orrs	r3, r1
 802b0e0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 802b0e2:	68fb      	ldr	r3, [r7, #12]
 802b0e4:	681b      	ldr	r3, [r3, #0]
 802b0e6:	689a      	ldr	r2, [r3, #8]
 802b0e8:	68fb      	ldr	r3, [r7, #12]
 802b0ea:	681b      	ldr	r3, [r3, #0]
 802b0ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802b0f0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 802b0f2:	68fb      	ldr	r3, [r7, #12]
 802b0f4:	681b      	ldr	r3, [r3, #0]
 802b0f6:	691a      	ldr	r2, [r3, #16]
 802b0f8:	68fb      	ldr	r3, [r7, #12]
 802b0fa:	681b      	ldr	r3, [r3, #0]
 802b0fc:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 802b100:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 802b102:	68fb      	ldr	r3, [r7, #12]
 802b104:	681b      	ldr	r3, [r3, #0]
 802b106:	681a      	ldr	r2, [r3, #0]
 802b108:	68fb      	ldr	r3, [r7, #12]
 802b10a:	681b      	ldr	r3, [r3, #0]
 802b10c:	f042 0201 	orr.w	r2, r2, #1
 802b110:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802b112:	68fb      	ldr	r3, [r7, #12]
 802b114:	685b      	ldr	r3, [r3, #4]
 802b116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802b11a:	d107      	bne.n	802b12c <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 802b11c:	68fb      	ldr	r3, [r7, #12]
 802b11e:	681b      	ldr	r3, [r3, #0]
 802b120:	681a      	ldr	r2, [r3, #0]
 802b122:	68fb      	ldr	r3, [r7, #12]
 802b124:	681b      	ldr	r3, [r3, #0]
 802b126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802b12a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 802b12c:	68fb      	ldr	r3, [r7, #12]
 802b12e:	2200      	movs	r2, #0
 802b130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 802b134:	7dfb      	ldrb	r3, [r7, #23]
}
 802b136:	4618      	mov	r0, r3
 802b138:	3718      	adds	r7, #24
 802b13a:	46bd      	mov	sp, r7
 802b13c:	bd80      	pop	{r7, pc}
 802b13e:	bf00      	nop
 802b140:	0802b687 	.word	0x0802b687
 802b144:	0802b5df 	.word	0x0802b5df
 802b148:	0802b6a3 	.word	0x0802b6a3
 802b14c:	0802b625 	.word	0x0802b625
 802b150:	0802b6bf 	.word	0x0802b6bf
 802b154:	ffff0000 	.word	0xffff0000

0802b158 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 802b158:	b580      	push	{r7, lr}
 802b15a:	b08a      	sub	sp, #40	; 0x28
 802b15c:	af00      	add	r7, sp, #0
 802b15e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 802b160:	687b      	ldr	r3, [r7, #4]
 802b162:	681b      	ldr	r3, [r3, #0]
 802b164:	691b      	ldr	r3, [r3, #16]
 802b166:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 802b168:	687b      	ldr	r3, [r7, #4]
 802b16a:	681b      	ldr	r3, [r3, #0]
 802b16c:	695b      	ldr	r3, [r3, #20]
 802b16e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 802b170:	6a3a      	ldr	r2, [r7, #32]
 802b172:	69fb      	ldr	r3, [r7, #28]
 802b174:	4013      	ands	r3, r2
 802b176:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 802b178:	687b      	ldr	r3, [r7, #4]
 802b17a:	681b      	ldr	r3, [r3, #0]
 802b17c:	689b      	ldr	r3, [r3, #8]
 802b17e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 802b180:	2300      	movs	r3, #0
 802b182:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 802b184:	687b      	ldr	r3, [r7, #4]
 802b186:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802b18a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 802b18c:	687b      	ldr	r3, [r7, #4]
 802b18e:	681b      	ldr	r3, [r3, #0]
 802b190:	3330      	adds	r3, #48	; 0x30
 802b192:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 802b194:	69bb      	ldr	r3, [r7, #24]
 802b196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b19a:	2b00      	cmp	r3, #0
 802b19c:	d113      	bne.n	802b1c6 <HAL_SPI_IRQHandler+0x6e>
 802b19e:	69bb      	ldr	r3, [r7, #24]
 802b1a0:	f003 0320 	and.w	r3, r3, #32
 802b1a4:	2b00      	cmp	r3, #0
 802b1a6:	d10e      	bne.n	802b1c6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 802b1a8:	69bb      	ldr	r3, [r7, #24]
 802b1aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 802b1ae:	2b00      	cmp	r3, #0
 802b1b0:	d009      	beq.n	802b1c6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 802b1b2:	687b      	ldr	r3, [r7, #4]
 802b1b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b1b6:	6878      	ldr	r0, [r7, #4]
 802b1b8:	4798      	blx	r3
    hspi->RxISR(hspi);
 802b1ba:	687b      	ldr	r3, [r7, #4]
 802b1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b1be:	6878      	ldr	r0, [r7, #4]
 802b1c0:	4798      	blx	r3
    handled = 1UL;
 802b1c2:	2301      	movs	r3, #1
 802b1c4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 802b1c6:	69bb      	ldr	r3, [r7, #24]
 802b1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b1cc:	2b00      	cmp	r3, #0
 802b1ce:	d10f      	bne.n	802b1f0 <HAL_SPI_IRQHandler+0x98>
 802b1d0:	69bb      	ldr	r3, [r7, #24]
 802b1d2:	f003 0301 	and.w	r3, r3, #1
 802b1d6:	2b00      	cmp	r3, #0
 802b1d8:	d00a      	beq.n	802b1f0 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 802b1da:	69bb      	ldr	r3, [r7, #24]
 802b1dc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 802b1e0:	2b00      	cmp	r3, #0
 802b1e2:	d105      	bne.n	802b1f0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 802b1e4:	687b      	ldr	r3, [r7, #4]
 802b1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b1e8:	6878      	ldr	r0, [r7, #4]
 802b1ea:	4798      	blx	r3
    handled = 1UL;
 802b1ec:	2301      	movs	r3, #1
 802b1ee:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 802b1f0:	69bb      	ldr	r3, [r7, #24]
 802b1f2:	f003 0320 	and.w	r3, r3, #32
 802b1f6:	2b00      	cmp	r3, #0
 802b1f8:	d10f      	bne.n	802b21a <HAL_SPI_IRQHandler+0xc2>
 802b1fa:	69bb      	ldr	r3, [r7, #24]
 802b1fc:	f003 0302 	and.w	r3, r3, #2
 802b200:	2b00      	cmp	r3, #0
 802b202:	d00a      	beq.n	802b21a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 802b204:	69bb      	ldr	r3, [r7, #24]
 802b206:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 802b20a:	2b00      	cmp	r3, #0
 802b20c:	d105      	bne.n	802b21a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 802b20e:	687b      	ldr	r3, [r7, #4]
 802b210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b212:	6878      	ldr	r0, [r7, #4]
 802b214:	4798      	blx	r3
    handled = 1UL;
 802b216:	2301      	movs	r3, #1
 802b218:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 802b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b21c:	2b00      	cmp	r3, #0
 802b21e:	f040 815a 	bne.w	802b4d6 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 802b222:	69bb      	ldr	r3, [r7, #24]
 802b224:	f003 0308 	and.w	r3, r3, #8
 802b228:	2b00      	cmp	r3, #0
 802b22a:	f000 808b 	beq.w	802b344 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 802b22e:	687b      	ldr	r3, [r7, #4]
 802b230:	681b      	ldr	r3, [r3, #0]
 802b232:	699a      	ldr	r2, [r3, #24]
 802b234:	687b      	ldr	r3, [r7, #4]
 802b236:	681b      	ldr	r3, [r3, #0]
 802b238:	f042 0208 	orr.w	r2, r2, #8
 802b23c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 802b23e:	687b      	ldr	r3, [r7, #4]
 802b240:	681b      	ldr	r3, [r3, #0]
 802b242:	699a      	ldr	r2, [r3, #24]
 802b244:	687b      	ldr	r3, [r7, #4]
 802b246:	681b      	ldr	r3, [r3, #0]
 802b248:	f042 0210 	orr.w	r2, r2, #16
 802b24c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 802b24e:	687b      	ldr	r3, [r7, #4]
 802b250:	681b      	ldr	r3, [r3, #0]
 802b252:	699a      	ldr	r2, [r3, #24]
 802b254:	687b      	ldr	r3, [r7, #4]
 802b256:	681b      	ldr	r3, [r3, #0]
 802b258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802b25c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 802b25e:	687b      	ldr	r3, [r7, #4]
 802b260:	681b      	ldr	r3, [r3, #0]
 802b262:	691a      	ldr	r2, [r3, #16]
 802b264:	687b      	ldr	r3, [r7, #4]
 802b266:	681b      	ldr	r3, [r3, #0]
 802b268:	f022 0208 	bic.w	r2, r2, #8
 802b26c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 802b26e:	687b      	ldr	r3, [r7, #4]
 802b270:	681b      	ldr	r3, [r3, #0]
 802b272:	689b      	ldr	r3, [r3, #8]
 802b274:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802b278:	2b00      	cmp	r3, #0
 802b27a:	d13d      	bne.n	802b2f8 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 802b27c:	e036      	b.n	802b2ec <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 802b27e:	687b      	ldr	r3, [r7, #4]
 802b280:	68db      	ldr	r3, [r3, #12]
 802b282:	2b0f      	cmp	r3, #15
 802b284:	d90b      	bls.n	802b29e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 802b286:	687b      	ldr	r3, [r7, #4]
 802b288:	681a      	ldr	r2, [r3, #0]
 802b28a:	687b      	ldr	r3, [r7, #4]
 802b28c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b28e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 802b290:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 802b292:	687b      	ldr	r3, [r7, #4]
 802b294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b296:	1d1a      	adds	r2, r3, #4
 802b298:	687b      	ldr	r3, [r7, #4]
 802b29a:	665a      	str	r2, [r3, #100]	; 0x64
 802b29c:	e01d      	b.n	802b2da <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802b29e:	687b      	ldr	r3, [r7, #4]
 802b2a0:	68db      	ldr	r3, [r3, #12]
 802b2a2:	2b07      	cmp	r3, #7
 802b2a4:	d90b      	bls.n	802b2be <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 802b2a6:	687b      	ldr	r3, [r7, #4]
 802b2a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b2aa:	68fa      	ldr	r2, [r7, #12]
 802b2ac:	8812      	ldrh	r2, [r2, #0]
 802b2ae:	b292      	uxth	r2, r2
 802b2b0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 802b2b2:	687b      	ldr	r3, [r7, #4]
 802b2b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b2b6:	1c9a      	adds	r2, r3, #2
 802b2b8:	687b      	ldr	r3, [r7, #4]
 802b2ba:	665a      	str	r2, [r3, #100]	; 0x64
 802b2bc:	e00d      	b.n	802b2da <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 802b2be:	687b      	ldr	r3, [r7, #4]
 802b2c0:	681b      	ldr	r3, [r3, #0]
 802b2c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802b2c6:	687b      	ldr	r3, [r7, #4]
 802b2c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b2ca:	7812      	ldrb	r2, [r2, #0]
 802b2cc:	b2d2      	uxtb	r2, r2
 802b2ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 802b2d0:	687b      	ldr	r3, [r7, #4]
 802b2d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b2d4:	1c5a      	adds	r2, r3, #1
 802b2d6:	687b      	ldr	r3, [r7, #4]
 802b2d8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 802b2da:	687b      	ldr	r3, [r7, #4]
 802b2dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802b2e0:	b29b      	uxth	r3, r3
 802b2e2:	3b01      	subs	r3, #1
 802b2e4:	b29a      	uxth	r2, r3
 802b2e6:	687b      	ldr	r3, [r7, #4]
 802b2e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 802b2ec:	687b      	ldr	r3, [r7, #4]
 802b2ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802b2f2:	b29b      	uxth	r3, r3
 802b2f4:	2b00      	cmp	r3, #0
 802b2f6:	d1c2      	bne.n	802b27e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 802b2f8:	6878      	ldr	r0, [r7, #4]
 802b2fa:	f000 fa1d 	bl	802b738 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 802b2fe:	687b      	ldr	r3, [r7, #4]
 802b300:	2201      	movs	r2, #1
 802b302:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802b306:	687b      	ldr	r3, [r7, #4]
 802b308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b30c:	2b00      	cmp	r3, #0
 802b30e:	d003      	beq.n	802b318 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 802b310:	6878      	ldr	r0, [r7, #4]
 802b312:	f000 f929 	bl	802b568 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 802b316:	e0e3      	b.n	802b4e0 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 802b318:	7cfb      	ldrb	r3, [r7, #19]
 802b31a:	2b05      	cmp	r3, #5
 802b31c:	d103      	bne.n	802b326 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 802b31e:	6878      	ldr	r0, [r7, #4]
 802b320:	f000 f8fa 	bl	802b518 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 802b324:	e0d9      	b.n	802b4da <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 802b326:	7cfb      	ldrb	r3, [r7, #19]
 802b328:	2b04      	cmp	r3, #4
 802b32a:	d103      	bne.n	802b334 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 802b32c:	6878      	ldr	r0, [r7, #4]
 802b32e:	f000 f8e9 	bl	802b504 <HAL_SPI_RxCpltCallback>
    return;
 802b332:	e0d2      	b.n	802b4da <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 802b334:	7cfb      	ldrb	r3, [r7, #19]
 802b336:	2b03      	cmp	r3, #3
 802b338:	f040 80cf 	bne.w	802b4da <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 802b33c:	6878      	ldr	r0, [r7, #4]
 802b33e:	f000 f8d7 	bl	802b4f0 <HAL_SPI_TxCpltCallback>
    return;
 802b342:	e0ca      	b.n	802b4da <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 802b344:	69fb      	ldr	r3, [r7, #28]
 802b346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802b34a:	2b00      	cmp	r3, #0
 802b34c:	d00d      	beq.n	802b36a <HAL_SPI_IRQHandler+0x212>
 802b34e:	6a3b      	ldr	r3, [r7, #32]
 802b350:	f003 0308 	and.w	r3, r3, #8
 802b354:	2b00      	cmp	r3, #0
 802b356:	d008      	beq.n	802b36a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 802b358:	687b      	ldr	r3, [r7, #4]
 802b35a:	681b      	ldr	r3, [r3, #0]
 802b35c:	699a      	ldr	r2, [r3, #24]
 802b35e:	687b      	ldr	r3, [r7, #4]
 802b360:	681b      	ldr	r3, [r3, #0]
 802b362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802b366:	619a      	str	r2, [r3, #24]

    return;
 802b368:	e0ba      	b.n	802b4e0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 802b36a:	69bb      	ldr	r3, [r7, #24]
 802b36c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 802b370:	2b00      	cmp	r3, #0
 802b372:	f000 80b5 	beq.w	802b4e0 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 802b376:	69bb      	ldr	r3, [r7, #24]
 802b378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b37c:	2b00      	cmp	r3, #0
 802b37e:	d00f      	beq.n	802b3a0 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802b380:	687b      	ldr	r3, [r7, #4]
 802b382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b386:	f043 0204 	orr.w	r2, r3, #4
 802b38a:	687b      	ldr	r3, [r7, #4]
 802b38c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b390:	687b      	ldr	r3, [r7, #4]
 802b392:	681b      	ldr	r3, [r3, #0]
 802b394:	699a      	ldr	r2, [r3, #24]
 802b396:	687b      	ldr	r3, [r7, #4]
 802b398:	681b      	ldr	r3, [r3, #0]
 802b39a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802b39e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 802b3a0:	69bb      	ldr	r3, [r7, #24]
 802b3a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b3a6:	2b00      	cmp	r3, #0
 802b3a8:	d00f      	beq.n	802b3ca <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802b3aa:	687b      	ldr	r3, [r7, #4]
 802b3ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b3b0:	f043 0201 	orr.w	r2, r3, #1
 802b3b4:	687b      	ldr	r3, [r7, #4]
 802b3b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802b3ba:	687b      	ldr	r3, [r7, #4]
 802b3bc:	681b      	ldr	r3, [r3, #0]
 802b3be:	699a      	ldr	r2, [r3, #24]
 802b3c0:	687b      	ldr	r3, [r7, #4]
 802b3c2:	681b      	ldr	r3, [r3, #0]
 802b3c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802b3c8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 802b3ca:	69bb      	ldr	r3, [r7, #24]
 802b3cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b3d0:	2b00      	cmp	r3, #0
 802b3d2:	d00f      	beq.n	802b3f4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802b3d4:	687b      	ldr	r3, [r7, #4]
 802b3d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b3da:	f043 0208 	orr.w	r2, r3, #8
 802b3de:	687b      	ldr	r3, [r7, #4]
 802b3e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 802b3e4:	687b      	ldr	r3, [r7, #4]
 802b3e6:	681b      	ldr	r3, [r3, #0]
 802b3e8:	699a      	ldr	r2, [r3, #24]
 802b3ea:	687b      	ldr	r3, [r7, #4]
 802b3ec:	681b      	ldr	r3, [r3, #0]
 802b3ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802b3f2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 802b3f4:	69bb      	ldr	r3, [r7, #24]
 802b3f6:	f003 0320 	and.w	r3, r3, #32
 802b3fa:	2b00      	cmp	r3, #0
 802b3fc:	d00f      	beq.n	802b41e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 802b3fe:	687b      	ldr	r3, [r7, #4]
 802b400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b404:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 802b408:	687b      	ldr	r3, [r7, #4]
 802b40a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 802b40e:	687b      	ldr	r3, [r7, #4]
 802b410:	681b      	ldr	r3, [r3, #0]
 802b412:	699a      	ldr	r2, [r3, #24]
 802b414:	687b      	ldr	r3, [r7, #4]
 802b416:	681b      	ldr	r3, [r3, #0]
 802b418:	f042 0220 	orr.w	r2, r2, #32
 802b41c:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802b41e:	687b      	ldr	r3, [r7, #4]
 802b420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b424:	2b00      	cmp	r3, #0
 802b426:	d05a      	beq.n	802b4de <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 802b428:	687b      	ldr	r3, [r7, #4]
 802b42a:	681b      	ldr	r3, [r3, #0]
 802b42c:	681a      	ldr	r2, [r3, #0]
 802b42e:	687b      	ldr	r3, [r7, #4]
 802b430:	681b      	ldr	r3, [r3, #0]
 802b432:	f022 0201 	bic.w	r2, r2, #1
 802b436:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 802b438:	687b      	ldr	r3, [r7, #4]
 802b43a:	681b      	ldr	r3, [r3, #0]
 802b43c:	6919      	ldr	r1, [r3, #16]
 802b43e:	687b      	ldr	r3, [r7, #4]
 802b440:	681a      	ldr	r2, [r3, #0]
 802b442:	4b29      	ldr	r3, [pc, #164]	; (802b4e8 <HAL_SPI_IRQHandler+0x390>)
 802b444:	400b      	ands	r3, r1
 802b446:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 802b448:	697b      	ldr	r3, [r7, #20]
 802b44a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802b44e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 802b452:	d138      	bne.n	802b4c6 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 802b454:	687b      	ldr	r3, [r7, #4]
 802b456:	681b      	ldr	r3, [r3, #0]
 802b458:	689a      	ldr	r2, [r3, #8]
 802b45a:	687b      	ldr	r3, [r7, #4]
 802b45c:	681b      	ldr	r3, [r3, #0]
 802b45e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 802b462:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 802b464:	687b      	ldr	r3, [r7, #4]
 802b466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b468:	2b00      	cmp	r3, #0
 802b46a:	d013      	beq.n	802b494 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802b46c:	687b      	ldr	r3, [r7, #4]
 802b46e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b470:	4a1e      	ldr	r2, [pc, #120]	; (802b4ec <HAL_SPI_IRQHandler+0x394>)
 802b472:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 802b474:	687b      	ldr	r3, [r7, #4]
 802b476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b478:	4618      	mov	r0, r3
 802b47a:	f7f8 fbc1 	bl	8023c00 <HAL_DMA_Abort_IT>
 802b47e:	4603      	mov	r3, r0
 802b480:	2b00      	cmp	r3, #0
 802b482:	d007      	beq.n	802b494 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802b484:	687b      	ldr	r3, [r7, #4]
 802b486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b48a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802b48e:	687b      	ldr	r3, [r7, #4]
 802b490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 802b494:	687b      	ldr	r3, [r7, #4]
 802b496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802b498:	2b00      	cmp	r3, #0
 802b49a:	d020      	beq.n	802b4de <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802b49c:	687b      	ldr	r3, [r7, #4]
 802b49e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802b4a0:	4a12      	ldr	r2, [pc, #72]	; (802b4ec <HAL_SPI_IRQHandler+0x394>)
 802b4a2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 802b4a4:	687b      	ldr	r3, [r7, #4]
 802b4a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802b4a8:	4618      	mov	r0, r3
 802b4aa:	f7f8 fba9 	bl	8023c00 <HAL_DMA_Abort_IT>
 802b4ae:	4603      	mov	r3, r0
 802b4b0:	2b00      	cmp	r3, #0
 802b4b2:	d014      	beq.n	802b4de <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802b4b4:	687b      	ldr	r3, [r7, #4]
 802b4b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b4ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802b4be:	687b      	ldr	r3, [r7, #4]
 802b4c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 802b4c4:	e00b      	b.n	802b4de <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 802b4c6:	687b      	ldr	r3, [r7, #4]
 802b4c8:	2201      	movs	r2, #1
 802b4ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 802b4ce:	6878      	ldr	r0, [r7, #4]
 802b4d0:	f000 f84a 	bl	802b568 <HAL_SPI_ErrorCallback>
    return;
 802b4d4:	e003      	b.n	802b4de <HAL_SPI_IRQHandler+0x386>
    return;
 802b4d6:	bf00      	nop
 802b4d8:	e002      	b.n	802b4e0 <HAL_SPI_IRQHandler+0x388>
    return;
 802b4da:	bf00      	nop
 802b4dc:	e000      	b.n	802b4e0 <HAL_SPI_IRQHandler+0x388>
    return;
 802b4de:	bf00      	nop
  }
}
 802b4e0:	3728      	adds	r7, #40	; 0x28
 802b4e2:	46bd      	mov	sp, r7
 802b4e4:	bd80      	pop	{r7, pc}
 802b4e6:	bf00      	nop
 802b4e8:	fffffc94 	.word	0xfffffc94
 802b4ec:	0802b705 	.word	0x0802b705

0802b4f0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802b4f0:	b480      	push	{r7}
 802b4f2:	b083      	sub	sp, #12
 802b4f4:	af00      	add	r7, sp, #0
 802b4f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 802b4f8:	bf00      	nop
 802b4fa:	370c      	adds	r7, #12
 802b4fc:	46bd      	mov	sp, r7
 802b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b502:	4770      	bx	lr

0802b504 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802b504:	b480      	push	{r7}
 802b506:	b083      	sub	sp, #12
 802b508:	af00      	add	r7, sp, #0
 802b50a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 802b50c:	bf00      	nop
 802b50e:	370c      	adds	r7, #12
 802b510:	46bd      	mov	sp, r7
 802b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b516:	4770      	bx	lr

0802b518 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802b518:	b480      	push	{r7}
 802b51a:	b083      	sub	sp, #12
 802b51c:	af00      	add	r7, sp, #0
 802b51e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 802b520:	bf00      	nop
 802b522:	370c      	adds	r7, #12
 802b524:	46bd      	mov	sp, r7
 802b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b52a:	4770      	bx	lr

0802b52c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 802b52c:	b480      	push	{r7}
 802b52e:	b083      	sub	sp, #12
 802b530:	af00      	add	r7, sp, #0
 802b532:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 802b534:	bf00      	nop
 802b536:	370c      	adds	r7, #12
 802b538:	46bd      	mov	sp, r7
 802b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b53e:	4770      	bx	lr

0802b540 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 802b540:	b480      	push	{r7}
 802b542:	b083      	sub	sp, #12
 802b544:	af00      	add	r7, sp, #0
 802b546:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 802b548:	bf00      	nop
 802b54a:	370c      	adds	r7, #12
 802b54c:	46bd      	mov	sp, r7
 802b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b552:	4770      	bx	lr

0802b554 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 802b554:	b480      	push	{r7}
 802b556:	b083      	sub	sp, #12
 802b558:	af00      	add	r7, sp, #0
 802b55a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 802b55c:	bf00      	nop
 802b55e:	370c      	adds	r7, #12
 802b560:	46bd      	mov	sp, r7
 802b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b566:	4770      	bx	lr

0802b568 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 802b568:	b480      	push	{r7}
 802b56a:	b083      	sub	sp, #12
 802b56c:	af00      	add	r7, sp, #0
 802b56e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 802b570:	bf00      	nop
 802b572:	370c      	adds	r7, #12
 802b574:	46bd      	mov	sp, r7
 802b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b57a:	4770      	bx	lr

0802b57c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 802b57c:	b480      	push	{r7}
 802b57e:	b083      	sub	sp, #12
 802b580:	af00      	add	r7, sp, #0
 802b582:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 802b584:	687b      	ldr	r3, [r7, #4]
 802b586:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802b58a:	b2db      	uxtb	r3, r3
}
 802b58c:	4618      	mov	r0, r3
 802b58e:	370c      	adds	r7, #12
 802b590:	46bd      	mov	sp, r7
 802b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b596:	4770      	bx	lr

0802b598 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 802b598:	b580      	push	{r7, lr}
 802b59a:	b084      	sub	sp, #16
 802b59c:	af00      	add	r7, sp, #0
 802b59e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802b5a0:	687b      	ldr	r3, [r7, #4]
 802b5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b5a4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 802b5a6:	68fb      	ldr	r3, [r7, #12]
 802b5a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802b5ac:	b2db      	uxtb	r3, r3
 802b5ae:	2b07      	cmp	r3, #7
 802b5b0:	d011      	beq.n	802b5d6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 802b5b2:	68fb      	ldr	r3, [r7, #12]
 802b5b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802b5b6:	69db      	ldr	r3, [r3, #28]
 802b5b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b5bc:	d103      	bne.n	802b5c6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 802b5be:	68f8      	ldr	r0, [r7, #12]
 802b5c0:	f7ff ff96 	bl	802b4f0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 802b5c4:	e007      	b.n	802b5d6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 802b5c6:	68fb      	ldr	r3, [r7, #12]
 802b5c8:	681b      	ldr	r3, [r3, #0]
 802b5ca:	691a      	ldr	r2, [r3, #16]
 802b5cc:	68fb      	ldr	r3, [r7, #12]
 802b5ce:	681b      	ldr	r3, [r3, #0]
 802b5d0:	f042 0208 	orr.w	r2, r2, #8
 802b5d4:	611a      	str	r2, [r3, #16]
}
 802b5d6:	bf00      	nop
 802b5d8:	3710      	adds	r7, #16
 802b5da:	46bd      	mov	sp, r7
 802b5dc:	bd80      	pop	{r7, pc}

0802b5de <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 802b5de:	b580      	push	{r7, lr}
 802b5e0:	b084      	sub	sp, #16
 802b5e2:	af00      	add	r7, sp, #0
 802b5e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802b5e6:	687b      	ldr	r3, [r7, #4]
 802b5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b5ea:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 802b5ec:	68fb      	ldr	r3, [r7, #12]
 802b5ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802b5f2:	b2db      	uxtb	r3, r3
 802b5f4:	2b07      	cmp	r3, #7
 802b5f6:	d011      	beq.n	802b61c <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 802b5f8:	68fb      	ldr	r3, [r7, #12]
 802b5fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b5fc:	69db      	ldr	r3, [r3, #28]
 802b5fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b602:	d103      	bne.n	802b60c <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 802b604:	68f8      	ldr	r0, [r7, #12]
 802b606:	f7ff ff7d 	bl	802b504 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 802b60a:	e007      	b.n	802b61c <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 802b60c:	68fb      	ldr	r3, [r7, #12]
 802b60e:	681b      	ldr	r3, [r3, #0]
 802b610:	691a      	ldr	r2, [r3, #16]
 802b612:	68fb      	ldr	r3, [r7, #12]
 802b614:	681b      	ldr	r3, [r3, #0]
 802b616:	f042 0208 	orr.w	r2, r2, #8
 802b61a:	611a      	str	r2, [r3, #16]
}
 802b61c:	bf00      	nop
 802b61e:	3710      	adds	r7, #16
 802b620:	46bd      	mov	sp, r7
 802b622:	bd80      	pop	{r7, pc}

0802b624 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 802b624:	b580      	push	{r7, lr}
 802b626:	b084      	sub	sp, #16
 802b628:	af00      	add	r7, sp, #0
 802b62a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802b62c:	687b      	ldr	r3, [r7, #4]
 802b62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b630:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 802b632:	68fb      	ldr	r3, [r7, #12]
 802b634:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802b638:	b2db      	uxtb	r3, r3
 802b63a:	2b07      	cmp	r3, #7
 802b63c:	d011      	beq.n	802b662 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 802b63e:	68fb      	ldr	r3, [r7, #12]
 802b640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802b642:	69db      	ldr	r3, [r3, #28]
 802b644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b648:	d103      	bne.n	802b652 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 802b64a:	68f8      	ldr	r0, [r7, #12]
 802b64c:	f7ff ff64 	bl	802b518 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 802b650:	e007      	b.n	802b662 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 802b652:	68fb      	ldr	r3, [r7, #12]
 802b654:	681b      	ldr	r3, [r3, #0]
 802b656:	691a      	ldr	r2, [r3, #16]
 802b658:	68fb      	ldr	r3, [r7, #12]
 802b65a:	681b      	ldr	r3, [r3, #0]
 802b65c:	f042 0208 	orr.w	r2, r2, #8
 802b660:	611a      	str	r2, [r3, #16]
}
 802b662:	bf00      	nop
 802b664:	3710      	adds	r7, #16
 802b666:	46bd      	mov	sp, r7
 802b668:	bd80      	pop	{r7, pc}

0802b66a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 802b66a:	b580      	push	{r7, lr}
 802b66c:	b084      	sub	sp, #16
 802b66e:	af00      	add	r7, sp, #0
 802b670:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802b672:	687b      	ldr	r3, [r7, #4]
 802b674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b676:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 802b678:	68f8      	ldr	r0, [r7, #12]
 802b67a:	f7ff ff57 	bl	802b52c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802b67e:	bf00      	nop
 802b680:	3710      	adds	r7, #16
 802b682:	46bd      	mov	sp, r7
 802b684:	bd80      	pop	{r7, pc}

0802b686 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 802b686:	b580      	push	{r7, lr}
 802b688:	b084      	sub	sp, #16
 802b68a:	af00      	add	r7, sp, #0
 802b68c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802b68e:	687b      	ldr	r3, [r7, #4]
 802b690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b692:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 802b694:	68f8      	ldr	r0, [r7, #12]
 802b696:	f7ff ff53 	bl	802b540 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802b69a:	bf00      	nop
 802b69c:	3710      	adds	r7, #16
 802b69e:	46bd      	mov	sp, r7
 802b6a0:	bd80      	pop	{r7, pc}

0802b6a2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 802b6a2:	b580      	push	{r7, lr}
 802b6a4:	b084      	sub	sp, #16
 802b6a6:	af00      	add	r7, sp, #0
 802b6a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802b6aa:	687b      	ldr	r3, [r7, #4]
 802b6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b6ae:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 802b6b0:	68f8      	ldr	r0, [r7, #12]
 802b6b2:	f7ff ff4f 	bl	802b554 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802b6b6:	bf00      	nop
 802b6b8:	3710      	adds	r7, #16
 802b6ba:	46bd      	mov	sp, r7
 802b6bc:	bd80      	pop	{r7, pc}

0802b6be <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 802b6be:	b580      	push	{r7, lr}
 802b6c0:	b084      	sub	sp, #16
 802b6c2:	af00      	add	r7, sp, #0
 802b6c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802b6c6:	687b      	ldr	r3, [r7, #4]
 802b6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b6ca:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 802b6cc:	6878      	ldr	r0, [r7, #4]
 802b6ce:	f7f9 fc15 	bl	8024efc <HAL_DMA_GetError>
 802b6d2:	4603      	mov	r3, r0
 802b6d4:	2b02      	cmp	r3, #2
 802b6d6:	d011      	beq.n	802b6fc <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 802b6d8:	68f8      	ldr	r0, [r7, #12]
 802b6da:	f000 f82d 	bl	802b738 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 802b6de:	68fb      	ldr	r3, [r7, #12]
 802b6e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b6e4:	f043 0210 	orr.w	r2, r3, #16
 802b6e8:	68fb      	ldr	r3, [r7, #12]
 802b6ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 802b6ee:	68fb      	ldr	r3, [r7, #12]
 802b6f0:	2201      	movs	r2, #1
 802b6f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 802b6f6:	68f8      	ldr	r0, [r7, #12]
 802b6f8:	f7ff ff36 	bl	802b568 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 802b6fc:	bf00      	nop
 802b6fe:	3710      	adds	r7, #16
 802b700:	46bd      	mov	sp, r7
 802b702:	bd80      	pop	{r7, pc}

0802b704 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802b704:	b580      	push	{r7, lr}
 802b706:	b084      	sub	sp, #16
 802b708:	af00      	add	r7, sp, #0
 802b70a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802b70c:	687b      	ldr	r3, [r7, #4]
 802b70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b710:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 802b712:	68fb      	ldr	r3, [r7, #12]
 802b714:	2200      	movs	r2, #0
 802b716:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 802b71a:	68fb      	ldr	r3, [r7, #12]
 802b71c:	2200      	movs	r2, #0
 802b71e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 802b722:	68fb      	ldr	r3, [r7, #12]
 802b724:	2201      	movs	r2, #1
 802b726:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802b72a:	68f8      	ldr	r0, [r7, #12]
 802b72c:	f7ff ff1c 	bl	802b568 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802b730:	bf00      	nop
 802b732:	3710      	adds	r7, #16
 802b734:	46bd      	mov	sp, r7
 802b736:	bd80      	pop	{r7, pc}

0802b738 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 802b738:	b480      	push	{r7}
 802b73a:	b085      	sub	sp, #20
 802b73c:	af00      	add	r7, sp, #0
 802b73e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 802b740:	687b      	ldr	r3, [r7, #4]
 802b742:	681b      	ldr	r3, [r3, #0]
 802b744:	695b      	ldr	r3, [r3, #20]
 802b746:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 802b748:	687b      	ldr	r3, [r7, #4]
 802b74a:	681b      	ldr	r3, [r3, #0]
 802b74c:	699a      	ldr	r2, [r3, #24]
 802b74e:	687b      	ldr	r3, [r7, #4]
 802b750:	681b      	ldr	r3, [r3, #0]
 802b752:	f042 0208 	orr.w	r2, r2, #8
 802b756:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 802b758:	687b      	ldr	r3, [r7, #4]
 802b75a:	681b      	ldr	r3, [r3, #0]
 802b75c:	699a      	ldr	r2, [r3, #24]
 802b75e:	687b      	ldr	r3, [r7, #4]
 802b760:	681b      	ldr	r3, [r3, #0]
 802b762:	f042 0210 	orr.w	r2, r2, #16
 802b766:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802b768:	687b      	ldr	r3, [r7, #4]
 802b76a:	681b      	ldr	r3, [r3, #0]
 802b76c:	681a      	ldr	r2, [r3, #0]
 802b76e:	687b      	ldr	r3, [r7, #4]
 802b770:	681b      	ldr	r3, [r3, #0]
 802b772:	f022 0201 	bic.w	r2, r2, #1
 802b776:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 802b778:	687b      	ldr	r3, [r7, #4]
 802b77a:	681b      	ldr	r3, [r3, #0]
 802b77c:	6919      	ldr	r1, [r3, #16]
 802b77e:	687b      	ldr	r3, [r7, #4]
 802b780:	681a      	ldr	r2, [r3, #0]
 802b782:	4b3c      	ldr	r3, [pc, #240]	; (802b874 <SPI_CloseTransfer+0x13c>)
 802b784:	400b      	ands	r3, r1
 802b786:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 802b788:	687b      	ldr	r3, [r7, #4]
 802b78a:	681b      	ldr	r3, [r3, #0]
 802b78c:	689a      	ldr	r2, [r3, #8]
 802b78e:	687b      	ldr	r3, [r7, #4]
 802b790:	681b      	ldr	r3, [r3, #0]
 802b792:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 802b796:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802b798:	687b      	ldr	r3, [r7, #4]
 802b79a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802b79e:	b2db      	uxtb	r3, r3
 802b7a0:	2b04      	cmp	r3, #4
 802b7a2:	d014      	beq.n	802b7ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 802b7a4:	68fb      	ldr	r3, [r7, #12]
 802b7a6:	f003 0320 	and.w	r3, r3, #32
 802b7aa:	2b00      	cmp	r3, #0
 802b7ac:	d00f      	beq.n	802b7ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 802b7ae:	687b      	ldr	r3, [r7, #4]
 802b7b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b7b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 802b7b8:	687b      	ldr	r3, [r7, #4]
 802b7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 802b7be:	687b      	ldr	r3, [r7, #4]
 802b7c0:	681b      	ldr	r3, [r3, #0]
 802b7c2:	699a      	ldr	r2, [r3, #24]
 802b7c4:	687b      	ldr	r3, [r7, #4]
 802b7c6:	681b      	ldr	r3, [r3, #0]
 802b7c8:	f042 0220 	orr.w	r2, r2, #32
 802b7cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802b7ce:	687b      	ldr	r3, [r7, #4]
 802b7d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802b7d4:	b2db      	uxtb	r3, r3
 802b7d6:	2b03      	cmp	r3, #3
 802b7d8:	d014      	beq.n	802b804 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 802b7da:	68fb      	ldr	r3, [r7, #12]
 802b7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b7e0:	2b00      	cmp	r3, #0
 802b7e2:	d00f      	beq.n	802b804 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802b7e4:	687b      	ldr	r3, [r7, #4]
 802b7e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b7ea:	f043 0204 	orr.w	r2, r3, #4
 802b7ee:	687b      	ldr	r3, [r7, #4]
 802b7f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b7f4:	687b      	ldr	r3, [r7, #4]
 802b7f6:	681b      	ldr	r3, [r3, #0]
 802b7f8:	699a      	ldr	r2, [r3, #24]
 802b7fa:	687b      	ldr	r3, [r7, #4]
 802b7fc:	681b      	ldr	r3, [r3, #0]
 802b7fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802b802:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 802b804:	68fb      	ldr	r3, [r7, #12]
 802b806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b80a:	2b00      	cmp	r3, #0
 802b80c:	d00f      	beq.n	802b82e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802b80e:	687b      	ldr	r3, [r7, #4]
 802b810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b814:	f043 0201 	orr.w	r2, r3, #1
 802b818:	687b      	ldr	r3, [r7, #4]
 802b81a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802b81e:	687b      	ldr	r3, [r7, #4]
 802b820:	681b      	ldr	r3, [r3, #0]
 802b822:	699a      	ldr	r2, [r3, #24]
 802b824:	687b      	ldr	r3, [r7, #4]
 802b826:	681b      	ldr	r3, [r3, #0]
 802b828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802b82c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 802b82e:	68fb      	ldr	r3, [r7, #12]
 802b830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b834:	2b00      	cmp	r3, #0
 802b836:	d00f      	beq.n	802b858 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802b838:	687b      	ldr	r3, [r7, #4]
 802b83a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802b83e:	f043 0208 	orr.w	r2, r3, #8
 802b842:	687b      	ldr	r3, [r7, #4]
 802b844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 802b848:	687b      	ldr	r3, [r7, #4]
 802b84a:	681b      	ldr	r3, [r3, #0]
 802b84c:	699a      	ldr	r2, [r3, #24]
 802b84e:	687b      	ldr	r3, [r7, #4]
 802b850:	681b      	ldr	r3, [r3, #0]
 802b852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802b856:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 802b858:	687b      	ldr	r3, [r7, #4]
 802b85a:	2200      	movs	r2, #0
 802b85c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 802b860:	687b      	ldr	r3, [r7, #4]
 802b862:	2200      	movs	r2, #0
 802b864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 802b868:	bf00      	nop
 802b86a:	3714      	adds	r7, #20
 802b86c:	46bd      	mov	sp, r7
 802b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b872:	4770      	bx	lr
 802b874:	fffffc90 	.word	0xfffffc90

0802b878 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 802b878:	b480      	push	{r7}
 802b87a:	b085      	sub	sp, #20
 802b87c:	af00      	add	r7, sp, #0
 802b87e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 802b880:	687b      	ldr	r3, [r7, #4]
 802b882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b884:	095b      	lsrs	r3, r3, #5
 802b886:	3301      	adds	r3, #1
 802b888:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 802b88a:	687b      	ldr	r3, [r7, #4]
 802b88c:	68db      	ldr	r3, [r3, #12]
 802b88e:	3301      	adds	r3, #1
 802b890:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 802b892:	68bb      	ldr	r3, [r7, #8]
 802b894:	3307      	adds	r3, #7
 802b896:	08db      	lsrs	r3, r3, #3
 802b898:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 802b89a:	68bb      	ldr	r3, [r7, #8]
 802b89c:	68fa      	ldr	r2, [r7, #12]
 802b89e:	fb02 f303 	mul.w	r3, r2, r3
}
 802b8a2:	4618      	mov	r0, r3
 802b8a4:	3714      	adds	r7, #20
 802b8a6:	46bd      	mov	sp, r7
 802b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8ac:	4770      	bx	lr

0802b8ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802b8ae:	b580      	push	{r7, lr}
 802b8b0:	b082      	sub	sp, #8
 802b8b2:	af00      	add	r7, sp, #0
 802b8b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802b8b6:	687b      	ldr	r3, [r7, #4]
 802b8b8:	2b00      	cmp	r3, #0
 802b8ba:	d101      	bne.n	802b8c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802b8bc:	2301      	movs	r3, #1
 802b8be:	e049      	b.n	802b954 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802b8c0:	687b      	ldr	r3, [r7, #4]
 802b8c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802b8c6:	b2db      	uxtb	r3, r3
 802b8c8:	2b00      	cmp	r3, #0
 802b8ca:	d106      	bne.n	802b8da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802b8cc:	687b      	ldr	r3, [r7, #4]
 802b8ce:	2200      	movs	r2, #0
 802b8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802b8d4:	6878      	ldr	r0, [r7, #4]
 802b8d6:	f7f5 ff5b 	bl	8021790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802b8da:	687b      	ldr	r3, [r7, #4]
 802b8dc:	2202      	movs	r2, #2
 802b8de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802b8e2:	687b      	ldr	r3, [r7, #4]
 802b8e4:	681a      	ldr	r2, [r3, #0]
 802b8e6:	687b      	ldr	r3, [r7, #4]
 802b8e8:	3304      	adds	r3, #4
 802b8ea:	4619      	mov	r1, r3
 802b8ec:	4610      	mov	r0, r2
 802b8ee:	f000 faed 	bl	802becc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802b8f2:	687b      	ldr	r3, [r7, #4]
 802b8f4:	2201      	movs	r2, #1
 802b8f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802b8fa:	687b      	ldr	r3, [r7, #4]
 802b8fc:	2201      	movs	r2, #1
 802b8fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802b902:	687b      	ldr	r3, [r7, #4]
 802b904:	2201      	movs	r2, #1
 802b906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 802b90a:	687b      	ldr	r3, [r7, #4]
 802b90c:	2201      	movs	r2, #1
 802b90e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802b912:	687b      	ldr	r3, [r7, #4]
 802b914:	2201      	movs	r2, #1
 802b916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802b91a:	687b      	ldr	r3, [r7, #4]
 802b91c:	2201      	movs	r2, #1
 802b91e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802b922:	687b      	ldr	r3, [r7, #4]
 802b924:	2201      	movs	r2, #1
 802b926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802b92a:	687b      	ldr	r3, [r7, #4]
 802b92c:	2201      	movs	r2, #1
 802b92e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802b932:	687b      	ldr	r3, [r7, #4]
 802b934:	2201      	movs	r2, #1
 802b936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802b93a:	687b      	ldr	r3, [r7, #4]
 802b93c:	2201      	movs	r2, #1
 802b93e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 802b942:	687b      	ldr	r3, [r7, #4]
 802b944:	2201      	movs	r2, #1
 802b946:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802b94a:	687b      	ldr	r3, [r7, #4]
 802b94c:	2201      	movs	r2, #1
 802b94e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802b952:	2300      	movs	r3, #0
}
 802b954:	4618      	mov	r0, r3
 802b956:	3708      	adds	r7, #8
 802b958:	46bd      	mov	sp, r7
 802b95a:	bd80      	pop	{r7, pc}

0802b95c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 802b95c:	b480      	push	{r7}
 802b95e:	b085      	sub	sp, #20
 802b960:	af00      	add	r7, sp, #0
 802b962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 802b964:	687b      	ldr	r3, [r7, #4]
 802b966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802b96a:	b2db      	uxtb	r3, r3
 802b96c:	2b01      	cmp	r3, #1
 802b96e:	d001      	beq.n	802b974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802b970:	2301      	movs	r3, #1
 802b972:	e054      	b.n	802ba1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802b974:	687b      	ldr	r3, [r7, #4]
 802b976:	2202      	movs	r2, #2
 802b978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 802b97c:	687b      	ldr	r3, [r7, #4]
 802b97e:	681b      	ldr	r3, [r3, #0]
 802b980:	68da      	ldr	r2, [r3, #12]
 802b982:	687b      	ldr	r3, [r7, #4]
 802b984:	681b      	ldr	r3, [r3, #0]
 802b986:	f042 0201 	orr.w	r2, r2, #1
 802b98a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802b98c:	687b      	ldr	r3, [r7, #4]
 802b98e:	681b      	ldr	r3, [r3, #0]
 802b990:	4a26      	ldr	r2, [pc, #152]	; (802ba2c <HAL_TIM_Base_Start_IT+0xd0>)
 802b992:	4293      	cmp	r3, r2
 802b994:	d022      	beq.n	802b9dc <HAL_TIM_Base_Start_IT+0x80>
 802b996:	687b      	ldr	r3, [r7, #4]
 802b998:	681b      	ldr	r3, [r3, #0]
 802b99a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802b99e:	d01d      	beq.n	802b9dc <HAL_TIM_Base_Start_IT+0x80>
 802b9a0:	687b      	ldr	r3, [r7, #4]
 802b9a2:	681b      	ldr	r3, [r3, #0]
 802b9a4:	4a22      	ldr	r2, [pc, #136]	; (802ba30 <HAL_TIM_Base_Start_IT+0xd4>)
 802b9a6:	4293      	cmp	r3, r2
 802b9a8:	d018      	beq.n	802b9dc <HAL_TIM_Base_Start_IT+0x80>
 802b9aa:	687b      	ldr	r3, [r7, #4]
 802b9ac:	681b      	ldr	r3, [r3, #0]
 802b9ae:	4a21      	ldr	r2, [pc, #132]	; (802ba34 <HAL_TIM_Base_Start_IT+0xd8>)
 802b9b0:	4293      	cmp	r3, r2
 802b9b2:	d013      	beq.n	802b9dc <HAL_TIM_Base_Start_IT+0x80>
 802b9b4:	687b      	ldr	r3, [r7, #4]
 802b9b6:	681b      	ldr	r3, [r3, #0]
 802b9b8:	4a1f      	ldr	r2, [pc, #124]	; (802ba38 <HAL_TIM_Base_Start_IT+0xdc>)
 802b9ba:	4293      	cmp	r3, r2
 802b9bc:	d00e      	beq.n	802b9dc <HAL_TIM_Base_Start_IT+0x80>
 802b9be:	687b      	ldr	r3, [r7, #4]
 802b9c0:	681b      	ldr	r3, [r3, #0]
 802b9c2:	4a1e      	ldr	r2, [pc, #120]	; (802ba3c <HAL_TIM_Base_Start_IT+0xe0>)
 802b9c4:	4293      	cmp	r3, r2
 802b9c6:	d009      	beq.n	802b9dc <HAL_TIM_Base_Start_IT+0x80>
 802b9c8:	687b      	ldr	r3, [r7, #4]
 802b9ca:	681b      	ldr	r3, [r3, #0]
 802b9cc:	4a1c      	ldr	r2, [pc, #112]	; (802ba40 <HAL_TIM_Base_Start_IT+0xe4>)
 802b9ce:	4293      	cmp	r3, r2
 802b9d0:	d004      	beq.n	802b9dc <HAL_TIM_Base_Start_IT+0x80>
 802b9d2:	687b      	ldr	r3, [r7, #4]
 802b9d4:	681b      	ldr	r3, [r3, #0]
 802b9d6:	4a1b      	ldr	r2, [pc, #108]	; (802ba44 <HAL_TIM_Base_Start_IT+0xe8>)
 802b9d8:	4293      	cmp	r3, r2
 802b9da:	d115      	bne.n	802ba08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802b9dc:	687b      	ldr	r3, [r7, #4]
 802b9de:	681b      	ldr	r3, [r3, #0]
 802b9e0:	689a      	ldr	r2, [r3, #8]
 802b9e2:	4b19      	ldr	r3, [pc, #100]	; (802ba48 <HAL_TIM_Base_Start_IT+0xec>)
 802b9e4:	4013      	ands	r3, r2
 802b9e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802b9e8:	68fb      	ldr	r3, [r7, #12]
 802b9ea:	2b06      	cmp	r3, #6
 802b9ec:	d015      	beq.n	802ba1a <HAL_TIM_Base_Start_IT+0xbe>
 802b9ee:	68fb      	ldr	r3, [r7, #12]
 802b9f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802b9f4:	d011      	beq.n	802ba1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 802b9f6:	687b      	ldr	r3, [r7, #4]
 802b9f8:	681b      	ldr	r3, [r3, #0]
 802b9fa:	681a      	ldr	r2, [r3, #0]
 802b9fc:	687b      	ldr	r3, [r7, #4]
 802b9fe:	681b      	ldr	r3, [r3, #0]
 802ba00:	f042 0201 	orr.w	r2, r2, #1
 802ba04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802ba06:	e008      	b.n	802ba1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802ba08:	687b      	ldr	r3, [r7, #4]
 802ba0a:	681b      	ldr	r3, [r3, #0]
 802ba0c:	681a      	ldr	r2, [r3, #0]
 802ba0e:	687b      	ldr	r3, [r7, #4]
 802ba10:	681b      	ldr	r3, [r3, #0]
 802ba12:	f042 0201 	orr.w	r2, r2, #1
 802ba16:	601a      	str	r2, [r3, #0]
 802ba18:	e000      	b.n	802ba1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802ba1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 802ba1c:	2300      	movs	r3, #0
}
 802ba1e:	4618      	mov	r0, r3
 802ba20:	3714      	adds	r7, #20
 802ba22:	46bd      	mov	sp, r7
 802ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba28:	4770      	bx	lr
 802ba2a:	bf00      	nop
 802ba2c:	40010000 	.word	0x40010000
 802ba30:	40000400 	.word	0x40000400
 802ba34:	40000800 	.word	0x40000800
 802ba38:	40000c00 	.word	0x40000c00
 802ba3c:	40010400 	.word	0x40010400
 802ba40:	40001800 	.word	0x40001800
 802ba44:	40014000 	.word	0x40014000
 802ba48:	00010007 	.word	0x00010007

0802ba4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802ba4c:	b580      	push	{r7, lr}
 802ba4e:	b082      	sub	sp, #8
 802ba50:	af00      	add	r7, sp, #0
 802ba52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802ba54:	687b      	ldr	r3, [r7, #4]
 802ba56:	681b      	ldr	r3, [r3, #0]
 802ba58:	691b      	ldr	r3, [r3, #16]
 802ba5a:	f003 0302 	and.w	r3, r3, #2
 802ba5e:	2b02      	cmp	r3, #2
 802ba60:	d122      	bne.n	802baa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802ba62:	687b      	ldr	r3, [r7, #4]
 802ba64:	681b      	ldr	r3, [r3, #0]
 802ba66:	68db      	ldr	r3, [r3, #12]
 802ba68:	f003 0302 	and.w	r3, r3, #2
 802ba6c:	2b02      	cmp	r3, #2
 802ba6e:	d11b      	bne.n	802baa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802ba70:	687b      	ldr	r3, [r7, #4]
 802ba72:	681b      	ldr	r3, [r3, #0]
 802ba74:	f06f 0202 	mvn.w	r2, #2
 802ba78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802ba7a:	687b      	ldr	r3, [r7, #4]
 802ba7c:	2201      	movs	r2, #1
 802ba7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802ba80:	687b      	ldr	r3, [r7, #4]
 802ba82:	681b      	ldr	r3, [r3, #0]
 802ba84:	699b      	ldr	r3, [r3, #24]
 802ba86:	f003 0303 	and.w	r3, r3, #3
 802ba8a:	2b00      	cmp	r3, #0
 802ba8c:	d003      	beq.n	802ba96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802ba8e:	6878      	ldr	r0, [r7, #4]
 802ba90:	f000 f9fe 	bl	802be90 <HAL_TIM_IC_CaptureCallback>
 802ba94:	e005      	b.n	802baa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802ba96:	6878      	ldr	r0, [r7, #4]
 802ba98:	f000 f9f0 	bl	802be7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802ba9c:	6878      	ldr	r0, [r7, #4]
 802ba9e:	f000 fa01 	bl	802bea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802baa2:	687b      	ldr	r3, [r7, #4]
 802baa4:	2200      	movs	r2, #0
 802baa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802baa8:	687b      	ldr	r3, [r7, #4]
 802baaa:	681b      	ldr	r3, [r3, #0]
 802baac:	691b      	ldr	r3, [r3, #16]
 802baae:	f003 0304 	and.w	r3, r3, #4
 802bab2:	2b04      	cmp	r3, #4
 802bab4:	d122      	bne.n	802bafc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802bab6:	687b      	ldr	r3, [r7, #4]
 802bab8:	681b      	ldr	r3, [r3, #0]
 802baba:	68db      	ldr	r3, [r3, #12]
 802babc:	f003 0304 	and.w	r3, r3, #4
 802bac0:	2b04      	cmp	r3, #4
 802bac2:	d11b      	bne.n	802bafc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802bac4:	687b      	ldr	r3, [r7, #4]
 802bac6:	681b      	ldr	r3, [r3, #0]
 802bac8:	f06f 0204 	mvn.w	r2, #4
 802bacc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802bace:	687b      	ldr	r3, [r7, #4]
 802bad0:	2202      	movs	r2, #2
 802bad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802bad4:	687b      	ldr	r3, [r7, #4]
 802bad6:	681b      	ldr	r3, [r3, #0]
 802bad8:	699b      	ldr	r3, [r3, #24]
 802bada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802bade:	2b00      	cmp	r3, #0
 802bae0:	d003      	beq.n	802baea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802bae2:	6878      	ldr	r0, [r7, #4]
 802bae4:	f000 f9d4 	bl	802be90 <HAL_TIM_IC_CaptureCallback>
 802bae8:	e005      	b.n	802baf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802baea:	6878      	ldr	r0, [r7, #4]
 802baec:	f000 f9c6 	bl	802be7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802baf0:	6878      	ldr	r0, [r7, #4]
 802baf2:	f000 f9d7 	bl	802bea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802baf6:	687b      	ldr	r3, [r7, #4]
 802baf8:	2200      	movs	r2, #0
 802bafa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802bafc:	687b      	ldr	r3, [r7, #4]
 802bafe:	681b      	ldr	r3, [r3, #0]
 802bb00:	691b      	ldr	r3, [r3, #16]
 802bb02:	f003 0308 	and.w	r3, r3, #8
 802bb06:	2b08      	cmp	r3, #8
 802bb08:	d122      	bne.n	802bb50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802bb0a:	687b      	ldr	r3, [r7, #4]
 802bb0c:	681b      	ldr	r3, [r3, #0]
 802bb0e:	68db      	ldr	r3, [r3, #12]
 802bb10:	f003 0308 	and.w	r3, r3, #8
 802bb14:	2b08      	cmp	r3, #8
 802bb16:	d11b      	bne.n	802bb50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802bb18:	687b      	ldr	r3, [r7, #4]
 802bb1a:	681b      	ldr	r3, [r3, #0]
 802bb1c:	f06f 0208 	mvn.w	r2, #8
 802bb20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802bb22:	687b      	ldr	r3, [r7, #4]
 802bb24:	2204      	movs	r2, #4
 802bb26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802bb28:	687b      	ldr	r3, [r7, #4]
 802bb2a:	681b      	ldr	r3, [r3, #0]
 802bb2c:	69db      	ldr	r3, [r3, #28]
 802bb2e:	f003 0303 	and.w	r3, r3, #3
 802bb32:	2b00      	cmp	r3, #0
 802bb34:	d003      	beq.n	802bb3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802bb36:	6878      	ldr	r0, [r7, #4]
 802bb38:	f000 f9aa 	bl	802be90 <HAL_TIM_IC_CaptureCallback>
 802bb3c:	e005      	b.n	802bb4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802bb3e:	6878      	ldr	r0, [r7, #4]
 802bb40:	f000 f99c 	bl	802be7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802bb44:	6878      	ldr	r0, [r7, #4]
 802bb46:	f000 f9ad 	bl	802bea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802bb4a:	687b      	ldr	r3, [r7, #4]
 802bb4c:	2200      	movs	r2, #0
 802bb4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802bb50:	687b      	ldr	r3, [r7, #4]
 802bb52:	681b      	ldr	r3, [r3, #0]
 802bb54:	691b      	ldr	r3, [r3, #16]
 802bb56:	f003 0310 	and.w	r3, r3, #16
 802bb5a:	2b10      	cmp	r3, #16
 802bb5c:	d122      	bne.n	802bba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802bb5e:	687b      	ldr	r3, [r7, #4]
 802bb60:	681b      	ldr	r3, [r3, #0]
 802bb62:	68db      	ldr	r3, [r3, #12]
 802bb64:	f003 0310 	and.w	r3, r3, #16
 802bb68:	2b10      	cmp	r3, #16
 802bb6a:	d11b      	bne.n	802bba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802bb6c:	687b      	ldr	r3, [r7, #4]
 802bb6e:	681b      	ldr	r3, [r3, #0]
 802bb70:	f06f 0210 	mvn.w	r2, #16
 802bb74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802bb76:	687b      	ldr	r3, [r7, #4]
 802bb78:	2208      	movs	r2, #8
 802bb7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802bb7c:	687b      	ldr	r3, [r7, #4]
 802bb7e:	681b      	ldr	r3, [r3, #0]
 802bb80:	69db      	ldr	r3, [r3, #28]
 802bb82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802bb86:	2b00      	cmp	r3, #0
 802bb88:	d003      	beq.n	802bb92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802bb8a:	6878      	ldr	r0, [r7, #4]
 802bb8c:	f000 f980 	bl	802be90 <HAL_TIM_IC_CaptureCallback>
 802bb90:	e005      	b.n	802bb9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802bb92:	6878      	ldr	r0, [r7, #4]
 802bb94:	f000 f972 	bl	802be7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802bb98:	6878      	ldr	r0, [r7, #4]
 802bb9a:	f000 f983 	bl	802bea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802bb9e:	687b      	ldr	r3, [r7, #4]
 802bba0:	2200      	movs	r2, #0
 802bba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802bba4:	687b      	ldr	r3, [r7, #4]
 802bba6:	681b      	ldr	r3, [r3, #0]
 802bba8:	691b      	ldr	r3, [r3, #16]
 802bbaa:	f003 0301 	and.w	r3, r3, #1
 802bbae:	2b01      	cmp	r3, #1
 802bbb0:	d10e      	bne.n	802bbd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802bbb2:	687b      	ldr	r3, [r7, #4]
 802bbb4:	681b      	ldr	r3, [r3, #0]
 802bbb6:	68db      	ldr	r3, [r3, #12]
 802bbb8:	f003 0301 	and.w	r3, r3, #1
 802bbbc:	2b01      	cmp	r3, #1
 802bbbe:	d107      	bne.n	802bbd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802bbc0:	687b      	ldr	r3, [r7, #4]
 802bbc2:	681b      	ldr	r3, [r3, #0]
 802bbc4:	f06f 0201 	mvn.w	r2, #1
 802bbc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802bbca:	6878      	ldr	r0, [r7, #4]
 802bbcc:	f7f5 f96a 	bl	8020ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802bbd0:	687b      	ldr	r3, [r7, #4]
 802bbd2:	681b      	ldr	r3, [r3, #0]
 802bbd4:	691b      	ldr	r3, [r3, #16]
 802bbd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bbda:	2b80      	cmp	r3, #128	; 0x80
 802bbdc:	d10e      	bne.n	802bbfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802bbde:	687b      	ldr	r3, [r7, #4]
 802bbe0:	681b      	ldr	r3, [r3, #0]
 802bbe2:	68db      	ldr	r3, [r3, #12]
 802bbe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bbe8:	2b80      	cmp	r3, #128	; 0x80
 802bbea:	d107      	bne.n	802bbfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802bbec:	687b      	ldr	r3, [r7, #4]
 802bbee:	681b      	ldr	r3, [r3, #0]
 802bbf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802bbf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802bbf6:	6878      	ldr	r0, [r7, #4]
 802bbf8:	f000 fb38 	bl	802c26c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 802bbfc:	687b      	ldr	r3, [r7, #4]
 802bbfe:	681b      	ldr	r3, [r3, #0]
 802bc00:	691b      	ldr	r3, [r3, #16]
 802bc02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802bc06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802bc0a:	d10e      	bne.n	802bc2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802bc0c:	687b      	ldr	r3, [r7, #4]
 802bc0e:	681b      	ldr	r3, [r3, #0]
 802bc10:	68db      	ldr	r3, [r3, #12]
 802bc12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bc16:	2b80      	cmp	r3, #128	; 0x80
 802bc18:	d107      	bne.n	802bc2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 802bc1a:	687b      	ldr	r3, [r7, #4]
 802bc1c:	681b      	ldr	r3, [r3, #0]
 802bc1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 802bc22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 802bc24:	6878      	ldr	r0, [r7, #4]
 802bc26:	f000 fb2b 	bl	802c280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802bc2a:	687b      	ldr	r3, [r7, #4]
 802bc2c:	681b      	ldr	r3, [r3, #0]
 802bc2e:	691b      	ldr	r3, [r3, #16]
 802bc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802bc34:	2b40      	cmp	r3, #64	; 0x40
 802bc36:	d10e      	bne.n	802bc56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802bc38:	687b      	ldr	r3, [r7, #4]
 802bc3a:	681b      	ldr	r3, [r3, #0]
 802bc3c:	68db      	ldr	r3, [r3, #12]
 802bc3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802bc42:	2b40      	cmp	r3, #64	; 0x40
 802bc44:	d107      	bne.n	802bc56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802bc46:	687b      	ldr	r3, [r7, #4]
 802bc48:	681b      	ldr	r3, [r3, #0]
 802bc4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802bc4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802bc50:	6878      	ldr	r0, [r7, #4]
 802bc52:	f000 f931 	bl	802beb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802bc56:	687b      	ldr	r3, [r7, #4]
 802bc58:	681b      	ldr	r3, [r3, #0]
 802bc5a:	691b      	ldr	r3, [r3, #16]
 802bc5c:	f003 0320 	and.w	r3, r3, #32
 802bc60:	2b20      	cmp	r3, #32
 802bc62:	d10e      	bne.n	802bc82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802bc64:	687b      	ldr	r3, [r7, #4]
 802bc66:	681b      	ldr	r3, [r3, #0]
 802bc68:	68db      	ldr	r3, [r3, #12]
 802bc6a:	f003 0320 	and.w	r3, r3, #32
 802bc6e:	2b20      	cmp	r3, #32
 802bc70:	d107      	bne.n	802bc82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802bc72:	687b      	ldr	r3, [r7, #4]
 802bc74:	681b      	ldr	r3, [r3, #0]
 802bc76:	f06f 0220 	mvn.w	r2, #32
 802bc7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802bc7c:	6878      	ldr	r0, [r7, #4]
 802bc7e:	f000 faeb 	bl	802c258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802bc82:	bf00      	nop
 802bc84:	3708      	adds	r7, #8
 802bc86:	46bd      	mov	sp, r7
 802bc88:	bd80      	pop	{r7, pc}
	...

0802bc8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 802bc8c:	b580      	push	{r7, lr}
 802bc8e:	b084      	sub	sp, #16
 802bc90:	af00      	add	r7, sp, #0
 802bc92:	6078      	str	r0, [r7, #4]
 802bc94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802bc96:	2300      	movs	r3, #0
 802bc98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802bc9a:	687b      	ldr	r3, [r7, #4]
 802bc9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802bca0:	2b01      	cmp	r3, #1
 802bca2:	d101      	bne.n	802bca8 <HAL_TIM_ConfigClockSource+0x1c>
 802bca4:	2302      	movs	r3, #2
 802bca6:	e0dc      	b.n	802be62 <HAL_TIM_ConfigClockSource+0x1d6>
 802bca8:	687b      	ldr	r3, [r7, #4]
 802bcaa:	2201      	movs	r2, #1
 802bcac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802bcb0:	687b      	ldr	r3, [r7, #4]
 802bcb2:	2202      	movs	r2, #2
 802bcb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802bcb8:	687b      	ldr	r3, [r7, #4]
 802bcba:	681b      	ldr	r3, [r3, #0]
 802bcbc:	689b      	ldr	r3, [r3, #8]
 802bcbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802bcc0:	68ba      	ldr	r2, [r7, #8]
 802bcc2:	4b6a      	ldr	r3, [pc, #424]	; (802be6c <HAL_TIM_ConfigClockSource+0x1e0>)
 802bcc4:	4013      	ands	r3, r2
 802bcc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802bcc8:	68bb      	ldr	r3, [r7, #8]
 802bcca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802bcce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 802bcd0:	687b      	ldr	r3, [r7, #4]
 802bcd2:	681b      	ldr	r3, [r3, #0]
 802bcd4:	68ba      	ldr	r2, [r7, #8]
 802bcd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802bcd8:	683b      	ldr	r3, [r7, #0]
 802bcda:	681b      	ldr	r3, [r3, #0]
 802bcdc:	4a64      	ldr	r2, [pc, #400]	; (802be70 <HAL_TIM_ConfigClockSource+0x1e4>)
 802bcde:	4293      	cmp	r3, r2
 802bce0:	f000 80a9 	beq.w	802be36 <HAL_TIM_ConfigClockSource+0x1aa>
 802bce4:	4a62      	ldr	r2, [pc, #392]	; (802be70 <HAL_TIM_ConfigClockSource+0x1e4>)
 802bce6:	4293      	cmp	r3, r2
 802bce8:	f200 80ae 	bhi.w	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bcec:	4a61      	ldr	r2, [pc, #388]	; (802be74 <HAL_TIM_ConfigClockSource+0x1e8>)
 802bcee:	4293      	cmp	r3, r2
 802bcf0:	f000 80a1 	beq.w	802be36 <HAL_TIM_ConfigClockSource+0x1aa>
 802bcf4:	4a5f      	ldr	r2, [pc, #380]	; (802be74 <HAL_TIM_ConfigClockSource+0x1e8>)
 802bcf6:	4293      	cmp	r3, r2
 802bcf8:	f200 80a6 	bhi.w	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bcfc:	4a5e      	ldr	r2, [pc, #376]	; (802be78 <HAL_TIM_ConfigClockSource+0x1ec>)
 802bcfe:	4293      	cmp	r3, r2
 802bd00:	f000 8099 	beq.w	802be36 <HAL_TIM_ConfigClockSource+0x1aa>
 802bd04:	4a5c      	ldr	r2, [pc, #368]	; (802be78 <HAL_TIM_ConfigClockSource+0x1ec>)
 802bd06:	4293      	cmp	r3, r2
 802bd08:	f200 809e 	bhi.w	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bd0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 802bd10:	f000 8091 	beq.w	802be36 <HAL_TIM_ConfigClockSource+0x1aa>
 802bd14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 802bd18:	f200 8096 	bhi.w	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bd1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802bd20:	f000 8089 	beq.w	802be36 <HAL_TIM_ConfigClockSource+0x1aa>
 802bd24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802bd28:	f200 808e 	bhi.w	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bd2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802bd30:	d03e      	beq.n	802bdb0 <HAL_TIM_ConfigClockSource+0x124>
 802bd32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802bd36:	f200 8087 	bhi.w	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bd3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802bd3e:	f000 8086 	beq.w	802be4e <HAL_TIM_ConfigClockSource+0x1c2>
 802bd42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802bd46:	d87f      	bhi.n	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bd48:	2b70      	cmp	r3, #112	; 0x70
 802bd4a:	d01a      	beq.n	802bd82 <HAL_TIM_ConfigClockSource+0xf6>
 802bd4c:	2b70      	cmp	r3, #112	; 0x70
 802bd4e:	d87b      	bhi.n	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bd50:	2b60      	cmp	r3, #96	; 0x60
 802bd52:	d050      	beq.n	802bdf6 <HAL_TIM_ConfigClockSource+0x16a>
 802bd54:	2b60      	cmp	r3, #96	; 0x60
 802bd56:	d877      	bhi.n	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bd58:	2b50      	cmp	r3, #80	; 0x50
 802bd5a:	d03c      	beq.n	802bdd6 <HAL_TIM_ConfigClockSource+0x14a>
 802bd5c:	2b50      	cmp	r3, #80	; 0x50
 802bd5e:	d873      	bhi.n	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bd60:	2b40      	cmp	r3, #64	; 0x40
 802bd62:	d058      	beq.n	802be16 <HAL_TIM_ConfigClockSource+0x18a>
 802bd64:	2b40      	cmp	r3, #64	; 0x40
 802bd66:	d86f      	bhi.n	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bd68:	2b30      	cmp	r3, #48	; 0x30
 802bd6a:	d064      	beq.n	802be36 <HAL_TIM_ConfigClockSource+0x1aa>
 802bd6c:	2b30      	cmp	r3, #48	; 0x30
 802bd6e:	d86b      	bhi.n	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bd70:	2b20      	cmp	r3, #32
 802bd72:	d060      	beq.n	802be36 <HAL_TIM_ConfigClockSource+0x1aa>
 802bd74:	2b20      	cmp	r3, #32
 802bd76:	d867      	bhi.n	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
 802bd78:	2b00      	cmp	r3, #0
 802bd7a:	d05c      	beq.n	802be36 <HAL_TIM_ConfigClockSource+0x1aa>
 802bd7c:	2b10      	cmp	r3, #16
 802bd7e:	d05a      	beq.n	802be36 <HAL_TIM_ConfigClockSource+0x1aa>
 802bd80:	e062      	b.n	802be48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802bd82:	687b      	ldr	r3, [r7, #4]
 802bd84:	6818      	ldr	r0, [r3, #0]
 802bd86:	683b      	ldr	r3, [r7, #0]
 802bd88:	6899      	ldr	r1, [r3, #8]
 802bd8a:	683b      	ldr	r3, [r7, #0]
 802bd8c:	685a      	ldr	r2, [r3, #4]
 802bd8e:	683b      	ldr	r3, [r7, #0]
 802bd90:	68db      	ldr	r3, [r3, #12]
 802bd92:	f000 f9b3 	bl	802c0fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 802bd96:	687b      	ldr	r3, [r7, #4]
 802bd98:	681b      	ldr	r3, [r3, #0]
 802bd9a:	689b      	ldr	r3, [r3, #8]
 802bd9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802bd9e:	68bb      	ldr	r3, [r7, #8]
 802bda0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802bda4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 802bda6:	687b      	ldr	r3, [r7, #4]
 802bda8:	681b      	ldr	r3, [r3, #0]
 802bdaa:	68ba      	ldr	r2, [r7, #8]
 802bdac:	609a      	str	r2, [r3, #8]
      break;
 802bdae:	e04f      	b.n	802be50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802bdb0:	687b      	ldr	r3, [r7, #4]
 802bdb2:	6818      	ldr	r0, [r3, #0]
 802bdb4:	683b      	ldr	r3, [r7, #0]
 802bdb6:	6899      	ldr	r1, [r3, #8]
 802bdb8:	683b      	ldr	r3, [r7, #0]
 802bdba:	685a      	ldr	r2, [r3, #4]
 802bdbc:	683b      	ldr	r3, [r7, #0]
 802bdbe:	68db      	ldr	r3, [r3, #12]
 802bdc0:	f000 f99c 	bl	802c0fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802bdc4:	687b      	ldr	r3, [r7, #4]
 802bdc6:	681b      	ldr	r3, [r3, #0]
 802bdc8:	689a      	ldr	r2, [r3, #8]
 802bdca:	687b      	ldr	r3, [r7, #4]
 802bdcc:	681b      	ldr	r3, [r3, #0]
 802bdce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802bdd2:	609a      	str	r2, [r3, #8]
      break;
 802bdd4:	e03c      	b.n	802be50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802bdd6:	687b      	ldr	r3, [r7, #4]
 802bdd8:	6818      	ldr	r0, [r3, #0]
 802bdda:	683b      	ldr	r3, [r7, #0]
 802bddc:	6859      	ldr	r1, [r3, #4]
 802bdde:	683b      	ldr	r3, [r7, #0]
 802bde0:	68db      	ldr	r3, [r3, #12]
 802bde2:	461a      	mov	r2, r3
 802bde4:	f000 f90c 	bl	802c000 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802bde8:	687b      	ldr	r3, [r7, #4]
 802bdea:	681b      	ldr	r3, [r3, #0]
 802bdec:	2150      	movs	r1, #80	; 0x50
 802bdee:	4618      	mov	r0, r3
 802bdf0:	f000 f966 	bl	802c0c0 <TIM_ITRx_SetConfig>
      break;
 802bdf4:	e02c      	b.n	802be50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802bdf6:	687b      	ldr	r3, [r7, #4]
 802bdf8:	6818      	ldr	r0, [r3, #0]
 802bdfa:	683b      	ldr	r3, [r7, #0]
 802bdfc:	6859      	ldr	r1, [r3, #4]
 802bdfe:	683b      	ldr	r3, [r7, #0]
 802be00:	68db      	ldr	r3, [r3, #12]
 802be02:	461a      	mov	r2, r3
 802be04:	f000 f92b 	bl	802c05e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802be08:	687b      	ldr	r3, [r7, #4]
 802be0a:	681b      	ldr	r3, [r3, #0]
 802be0c:	2160      	movs	r1, #96	; 0x60
 802be0e:	4618      	mov	r0, r3
 802be10:	f000 f956 	bl	802c0c0 <TIM_ITRx_SetConfig>
      break;
 802be14:	e01c      	b.n	802be50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802be16:	687b      	ldr	r3, [r7, #4]
 802be18:	6818      	ldr	r0, [r3, #0]
 802be1a:	683b      	ldr	r3, [r7, #0]
 802be1c:	6859      	ldr	r1, [r3, #4]
 802be1e:	683b      	ldr	r3, [r7, #0]
 802be20:	68db      	ldr	r3, [r3, #12]
 802be22:	461a      	mov	r2, r3
 802be24:	f000 f8ec 	bl	802c000 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802be28:	687b      	ldr	r3, [r7, #4]
 802be2a:	681b      	ldr	r3, [r3, #0]
 802be2c:	2140      	movs	r1, #64	; 0x40
 802be2e:	4618      	mov	r0, r3
 802be30:	f000 f946 	bl	802c0c0 <TIM_ITRx_SetConfig>
      break;
 802be34:	e00c      	b.n	802be50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802be36:	687b      	ldr	r3, [r7, #4]
 802be38:	681a      	ldr	r2, [r3, #0]
 802be3a:	683b      	ldr	r3, [r7, #0]
 802be3c:	681b      	ldr	r3, [r3, #0]
 802be3e:	4619      	mov	r1, r3
 802be40:	4610      	mov	r0, r2
 802be42:	f000 f93d 	bl	802c0c0 <TIM_ITRx_SetConfig>
      break;
 802be46:	e003      	b.n	802be50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 802be48:	2301      	movs	r3, #1
 802be4a:	73fb      	strb	r3, [r7, #15]
      break;
 802be4c:	e000      	b.n	802be50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 802be4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802be50:	687b      	ldr	r3, [r7, #4]
 802be52:	2201      	movs	r2, #1
 802be54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802be58:	687b      	ldr	r3, [r7, #4]
 802be5a:	2200      	movs	r2, #0
 802be5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 802be60:	7bfb      	ldrb	r3, [r7, #15]
}
 802be62:	4618      	mov	r0, r3
 802be64:	3710      	adds	r7, #16
 802be66:	46bd      	mov	sp, r7
 802be68:	bd80      	pop	{r7, pc}
 802be6a:	bf00      	nop
 802be6c:	ffceff88 	.word	0xffceff88
 802be70:	00100040 	.word	0x00100040
 802be74:	00100030 	.word	0x00100030
 802be78:	00100020 	.word	0x00100020

0802be7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802be7c:	b480      	push	{r7}
 802be7e:	b083      	sub	sp, #12
 802be80:	af00      	add	r7, sp, #0
 802be82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802be84:	bf00      	nop
 802be86:	370c      	adds	r7, #12
 802be88:	46bd      	mov	sp, r7
 802be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802be8e:	4770      	bx	lr

0802be90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802be90:	b480      	push	{r7}
 802be92:	b083      	sub	sp, #12
 802be94:	af00      	add	r7, sp, #0
 802be96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802be98:	bf00      	nop
 802be9a:	370c      	adds	r7, #12
 802be9c:	46bd      	mov	sp, r7
 802be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bea2:	4770      	bx	lr

0802bea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802bea4:	b480      	push	{r7}
 802bea6:	b083      	sub	sp, #12
 802bea8:	af00      	add	r7, sp, #0
 802beaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802beac:	bf00      	nop
 802beae:	370c      	adds	r7, #12
 802beb0:	46bd      	mov	sp, r7
 802beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802beb6:	4770      	bx	lr

0802beb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802beb8:	b480      	push	{r7}
 802beba:	b083      	sub	sp, #12
 802bebc:	af00      	add	r7, sp, #0
 802bebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802bec0:	bf00      	nop
 802bec2:	370c      	adds	r7, #12
 802bec4:	46bd      	mov	sp, r7
 802bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802beca:	4770      	bx	lr

0802becc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802becc:	b480      	push	{r7}
 802bece:	b085      	sub	sp, #20
 802bed0:	af00      	add	r7, sp, #0
 802bed2:	6078      	str	r0, [r7, #4]
 802bed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802bed6:	687b      	ldr	r3, [r7, #4]
 802bed8:	681b      	ldr	r3, [r3, #0]
 802beda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802bedc:	687b      	ldr	r3, [r7, #4]
 802bede:	4a40      	ldr	r2, [pc, #256]	; (802bfe0 <TIM_Base_SetConfig+0x114>)
 802bee0:	4293      	cmp	r3, r2
 802bee2:	d013      	beq.n	802bf0c <TIM_Base_SetConfig+0x40>
 802bee4:	687b      	ldr	r3, [r7, #4]
 802bee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802beea:	d00f      	beq.n	802bf0c <TIM_Base_SetConfig+0x40>
 802beec:	687b      	ldr	r3, [r7, #4]
 802beee:	4a3d      	ldr	r2, [pc, #244]	; (802bfe4 <TIM_Base_SetConfig+0x118>)
 802bef0:	4293      	cmp	r3, r2
 802bef2:	d00b      	beq.n	802bf0c <TIM_Base_SetConfig+0x40>
 802bef4:	687b      	ldr	r3, [r7, #4]
 802bef6:	4a3c      	ldr	r2, [pc, #240]	; (802bfe8 <TIM_Base_SetConfig+0x11c>)
 802bef8:	4293      	cmp	r3, r2
 802befa:	d007      	beq.n	802bf0c <TIM_Base_SetConfig+0x40>
 802befc:	687b      	ldr	r3, [r7, #4]
 802befe:	4a3b      	ldr	r2, [pc, #236]	; (802bfec <TIM_Base_SetConfig+0x120>)
 802bf00:	4293      	cmp	r3, r2
 802bf02:	d003      	beq.n	802bf0c <TIM_Base_SetConfig+0x40>
 802bf04:	687b      	ldr	r3, [r7, #4]
 802bf06:	4a3a      	ldr	r2, [pc, #232]	; (802bff0 <TIM_Base_SetConfig+0x124>)
 802bf08:	4293      	cmp	r3, r2
 802bf0a:	d108      	bne.n	802bf1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802bf0c:	68fb      	ldr	r3, [r7, #12]
 802bf0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802bf12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802bf14:	683b      	ldr	r3, [r7, #0]
 802bf16:	685b      	ldr	r3, [r3, #4]
 802bf18:	68fa      	ldr	r2, [r7, #12]
 802bf1a:	4313      	orrs	r3, r2
 802bf1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802bf1e:	687b      	ldr	r3, [r7, #4]
 802bf20:	4a2f      	ldr	r2, [pc, #188]	; (802bfe0 <TIM_Base_SetConfig+0x114>)
 802bf22:	4293      	cmp	r3, r2
 802bf24:	d01f      	beq.n	802bf66 <TIM_Base_SetConfig+0x9a>
 802bf26:	687b      	ldr	r3, [r7, #4]
 802bf28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802bf2c:	d01b      	beq.n	802bf66 <TIM_Base_SetConfig+0x9a>
 802bf2e:	687b      	ldr	r3, [r7, #4]
 802bf30:	4a2c      	ldr	r2, [pc, #176]	; (802bfe4 <TIM_Base_SetConfig+0x118>)
 802bf32:	4293      	cmp	r3, r2
 802bf34:	d017      	beq.n	802bf66 <TIM_Base_SetConfig+0x9a>
 802bf36:	687b      	ldr	r3, [r7, #4]
 802bf38:	4a2b      	ldr	r2, [pc, #172]	; (802bfe8 <TIM_Base_SetConfig+0x11c>)
 802bf3a:	4293      	cmp	r3, r2
 802bf3c:	d013      	beq.n	802bf66 <TIM_Base_SetConfig+0x9a>
 802bf3e:	687b      	ldr	r3, [r7, #4]
 802bf40:	4a2a      	ldr	r2, [pc, #168]	; (802bfec <TIM_Base_SetConfig+0x120>)
 802bf42:	4293      	cmp	r3, r2
 802bf44:	d00f      	beq.n	802bf66 <TIM_Base_SetConfig+0x9a>
 802bf46:	687b      	ldr	r3, [r7, #4]
 802bf48:	4a29      	ldr	r2, [pc, #164]	; (802bff0 <TIM_Base_SetConfig+0x124>)
 802bf4a:	4293      	cmp	r3, r2
 802bf4c:	d00b      	beq.n	802bf66 <TIM_Base_SetConfig+0x9a>
 802bf4e:	687b      	ldr	r3, [r7, #4]
 802bf50:	4a28      	ldr	r2, [pc, #160]	; (802bff4 <TIM_Base_SetConfig+0x128>)
 802bf52:	4293      	cmp	r3, r2
 802bf54:	d007      	beq.n	802bf66 <TIM_Base_SetConfig+0x9a>
 802bf56:	687b      	ldr	r3, [r7, #4]
 802bf58:	4a27      	ldr	r2, [pc, #156]	; (802bff8 <TIM_Base_SetConfig+0x12c>)
 802bf5a:	4293      	cmp	r3, r2
 802bf5c:	d003      	beq.n	802bf66 <TIM_Base_SetConfig+0x9a>
 802bf5e:	687b      	ldr	r3, [r7, #4]
 802bf60:	4a26      	ldr	r2, [pc, #152]	; (802bffc <TIM_Base_SetConfig+0x130>)
 802bf62:	4293      	cmp	r3, r2
 802bf64:	d108      	bne.n	802bf78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802bf66:	68fb      	ldr	r3, [r7, #12]
 802bf68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802bf6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802bf6e:	683b      	ldr	r3, [r7, #0]
 802bf70:	68db      	ldr	r3, [r3, #12]
 802bf72:	68fa      	ldr	r2, [r7, #12]
 802bf74:	4313      	orrs	r3, r2
 802bf76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802bf78:	68fb      	ldr	r3, [r7, #12]
 802bf7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802bf7e:	683b      	ldr	r3, [r7, #0]
 802bf80:	695b      	ldr	r3, [r3, #20]
 802bf82:	4313      	orrs	r3, r2
 802bf84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802bf86:	687b      	ldr	r3, [r7, #4]
 802bf88:	68fa      	ldr	r2, [r7, #12]
 802bf8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802bf8c:	683b      	ldr	r3, [r7, #0]
 802bf8e:	689a      	ldr	r2, [r3, #8]
 802bf90:	687b      	ldr	r3, [r7, #4]
 802bf92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802bf94:	683b      	ldr	r3, [r7, #0]
 802bf96:	681a      	ldr	r2, [r3, #0]
 802bf98:	687b      	ldr	r3, [r7, #4]
 802bf9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802bf9c:	687b      	ldr	r3, [r7, #4]
 802bf9e:	4a10      	ldr	r2, [pc, #64]	; (802bfe0 <TIM_Base_SetConfig+0x114>)
 802bfa0:	4293      	cmp	r3, r2
 802bfa2:	d00f      	beq.n	802bfc4 <TIM_Base_SetConfig+0xf8>
 802bfa4:	687b      	ldr	r3, [r7, #4]
 802bfa6:	4a12      	ldr	r2, [pc, #72]	; (802bff0 <TIM_Base_SetConfig+0x124>)
 802bfa8:	4293      	cmp	r3, r2
 802bfaa:	d00b      	beq.n	802bfc4 <TIM_Base_SetConfig+0xf8>
 802bfac:	687b      	ldr	r3, [r7, #4]
 802bfae:	4a11      	ldr	r2, [pc, #68]	; (802bff4 <TIM_Base_SetConfig+0x128>)
 802bfb0:	4293      	cmp	r3, r2
 802bfb2:	d007      	beq.n	802bfc4 <TIM_Base_SetConfig+0xf8>
 802bfb4:	687b      	ldr	r3, [r7, #4]
 802bfb6:	4a10      	ldr	r2, [pc, #64]	; (802bff8 <TIM_Base_SetConfig+0x12c>)
 802bfb8:	4293      	cmp	r3, r2
 802bfba:	d003      	beq.n	802bfc4 <TIM_Base_SetConfig+0xf8>
 802bfbc:	687b      	ldr	r3, [r7, #4]
 802bfbe:	4a0f      	ldr	r2, [pc, #60]	; (802bffc <TIM_Base_SetConfig+0x130>)
 802bfc0:	4293      	cmp	r3, r2
 802bfc2:	d103      	bne.n	802bfcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802bfc4:	683b      	ldr	r3, [r7, #0]
 802bfc6:	691a      	ldr	r2, [r3, #16]
 802bfc8:	687b      	ldr	r3, [r7, #4]
 802bfca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802bfcc:	687b      	ldr	r3, [r7, #4]
 802bfce:	2201      	movs	r2, #1
 802bfd0:	615a      	str	r2, [r3, #20]
}
 802bfd2:	bf00      	nop
 802bfd4:	3714      	adds	r7, #20
 802bfd6:	46bd      	mov	sp, r7
 802bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bfdc:	4770      	bx	lr
 802bfde:	bf00      	nop
 802bfe0:	40010000 	.word	0x40010000
 802bfe4:	40000400 	.word	0x40000400
 802bfe8:	40000800 	.word	0x40000800
 802bfec:	40000c00 	.word	0x40000c00
 802bff0:	40010400 	.word	0x40010400
 802bff4:	40014000 	.word	0x40014000
 802bff8:	40014400 	.word	0x40014400
 802bffc:	40014800 	.word	0x40014800

0802c000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802c000:	b480      	push	{r7}
 802c002:	b087      	sub	sp, #28
 802c004:	af00      	add	r7, sp, #0
 802c006:	60f8      	str	r0, [r7, #12]
 802c008:	60b9      	str	r1, [r7, #8]
 802c00a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802c00c:	68fb      	ldr	r3, [r7, #12]
 802c00e:	6a1b      	ldr	r3, [r3, #32]
 802c010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802c012:	68fb      	ldr	r3, [r7, #12]
 802c014:	6a1b      	ldr	r3, [r3, #32]
 802c016:	f023 0201 	bic.w	r2, r3, #1
 802c01a:	68fb      	ldr	r3, [r7, #12]
 802c01c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802c01e:	68fb      	ldr	r3, [r7, #12]
 802c020:	699b      	ldr	r3, [r3, #24]
 802c022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802c024:	693b      	ldr	r3, [r7, #16]
 802c026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802c02a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802c02c:	687b      	ldr	r3, [r7, #4]
 802c02e:	011b      	lsls	r3, r3, #4
 802c030:	693a      	ldr	r2, [r7, #16]
 802c032:	4313      	orrs	r3, r2
 802c034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802c036:	697b      	ldr	r3, [r7, #20]
 802c038:	f023 030a 	bic.w	r3, r3, #10
 802c03c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802c03e:	697a      	ldr	r2, [r7, #20]
 802c040:	68bb      	ldr	r3, [r7, #8]
 802c042:	4313      	orrs	r3, r2
 802c044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802c046:	68fb      	ldr	r3, [r7, #12]
 802c048:	693a      	ldr	r2, [r7, #16]
 802c04a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802c04c:	68fb      	ldr	r3, [r7, #12]
 802c04e:	697a      	ldr	r2, [r7, #20]
 802c050:	621a      	str	r2, [r3, #32]
}
 802c052:	bf00      	nop
 802c054:	371c      	adds	r7, #28
 802c056:	46bd      	mov	sp, r7
 802c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c05c:	4770      	bx	lr

0802c05e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802c05e:	b480      	push	{r7}
 802c060:	b087      	sub	sp, #28
 802c062:	af00      	add	r7, sp, #0
 802c064:	60f8      	str	r0, [r7, #12]
 802c066:	60b9      	str	r1, [r7, #8]
 802c068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802c06a:	68fb      	ldr	r3, [r7, #12]
 802c06c:	6a1b      	ldr	r3, [r3, #32]
 802c06e:	f023 0210 	bic.w	r2, r3, #16
 802c072:	68fb      	ldr	r3, [r7, #12]
 802c074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802c076:	68fb      	ldr	r3, [r7, #12]
 802c078:	699b      	ldr	r3, [r3, #24]
 802c07a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802c07c:	68fb      	ldr	r3, [r7, #12]
 802c07e:	6a1b      	ldr	r3, [r3, #32]
 802c080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802c082:	697b      	ldr	r3, [r7, #20]
 802c084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802c088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802c08a:	687b      	ldr	r3, [r7, #4]
 802c08c:	031b      	lsls	r3, r3, #12
 802c08e:	697a      	ldr	r2, [r7, #20]
 802c090:	4313      	orrs	r3, r2
 802c092:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802c094:	693b      	ldr	r3, [r7, #16]
 802c096:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802c09a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802c09c:	68bb      	ldr	r3, [r7, #8]
 802c09e:	011b      	lsls	r3, r3, #4
 802c0a0:	693a      	ldr	r2, [r7, #16]
 802c0a2:	4313      	orrs	r3, r2
 802c0a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802c0a6:	68fb      	ldr	r3, [r7, #12]
 802c0a8:	697a      	ldr	r2, [r7, #20]
 802c0aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802c0ac:	68fb      	ldr	r3, [r7, #12]
 802c0ae:	693a      	ldr	r2, [r7, #16]
 802c0b0:	621a      	str	r2, [r3, #32]
}
 802c0b2:	bf00      	nop
 802c0b4:	371c      	adds	r7, #28
 802c0b6:	46bd      	mov	sp, r7
 802c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c0bc:	4770      	bx	lr
	...

0802c0c0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802c0c0:	b480      	push	{r7}
 802c0c2:	b085      	sub	sp, #20
 802c0c4:	af00      	add	r7, sp, #0
 802c0c6:	6078      	str	r0, [r7, #4]
 802c0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802c0ca:	687b      	ldr	r3, [r7, #4]
 802c0cc:	689b      	ldr	r3, [r3, #8]
 802c0ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802c0d0:	68fa      	ldr	r2, [r7, #12]
 802c0d2:	4b09      	ldr	r3, [pc, #36]	; (802c0f8 <TIM_ITRx_SetConfig+0x38>)
 802c0d4:	4013      	ands	r3, r2
 802c0d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802c0d8:	683a      	ldr	r2, [r7, #0]
 802c0da:	68fb      	ldr	r3, [r7, #12]
 802c0dc:	4313      	orrs	r3, r2
 802c0de:	f043 0307 	orr.w	r3, r3, #7
 802c0e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802c0e4:	687b      	ldr	r3, [r7, #4]
 802c0e6:	68fa      	ldr	r2, [r7, #12]
 802c0e8:	609a      	str	r2, [r3, #8]
}
 802c0ea:	bf00      	nop
 802c0ec:	3714      	adds	r7, #20
 802c0ee:	46bd      	mov	sp, r7
 802c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c0f4:	4770      	bx	lr
 802c0f6:	bf00      	nop
 802c0f8:	ffcfff8f 	.word	0xffcfff8f

0802c0fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802c0fc:	b480      	push	{r7}
 802c0fe:	b087      	sub	sp, #28
 802c100:	af00      	add	r7, sp, #0
 802c102:	60f8      	str	r0, [r7, #12]
 802c104:	60b9      	str	r1, [r7, #8]
 802c106:	607a      	str	r2, [r7, #4]
 802c108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802c10a:	68fb      	ldr	r3, [r7, #12]
 802c10c:	689b      	ldr	r3, [r3, #8]
 802c10e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802c110:	697b      	ldr	r3, [r7, #20]
 802c112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802c116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802c118:	683b      	ldr	r3, [r7, #0]
 802c11a:	021a      	lsls	r2, r3, #8
 802c11c:	687b      	ldr	r3, [r7, #4]
 802c11e:	431a      	orrs	r2, r3
 802c120:	68bb      	ldr	r3, [r7, #8]
 802c122:	4313      	orrs	r3, r2
 802c124:	697a      	ldr	r2, [r7, #20]
 802c126:	4313      	orrs	r3, r2
 802c128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802c12a:	68fb      	ldr	r3, [r7, #12]
 802c12c:	697a      	ldr	r2, [r7, #20]
 802c12e:	609a      	str	r2, [r3, #8]
}
 802c130:	bf00      	nop
 802c132:	371c      	adds	r7, #28
 802c134:	46bd      	mov	sp, r7
 802c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c13a:	4770      	bx	lr

0802c13c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802c13c:	b480      	push	{r7}
 802c13e:	b085      	sub	sp, #20
 802c140:	af00      	add	r7, sp, #0
 802c142:	6078      	str	r0, [r7, #4]
 802c144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802c146:	687b      	ldr	r3, [r7, #4]
 802c148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802c14c:	2b01      	cmp	r3, #1
 802c14e:	d101      	bne.n	802c154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802c150:	2302      	movs	r3, #2
 802c152:	e06d      	b.n	802c230 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 802c154:	687b      	ldr	r3, [r7, #4]
 802c156:	2201      	movs	r2, #1
 802c158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802c15c:	687b      	ldr	r3, [r7, #4]
 802c15e:	2202      	movs	r2, #2
 802c160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802c164:	687b      	ldr	r3, [r7, #4]
 802c166:	681b      	ldr	r3, [r3, #0]
 802c168:	685b      	ldr	r3, [r3, #4]
 802c16a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802c16c:	687b      	ldr	r3, [r7, #4]
 802c16e:	681b      	ldr	r3, [r3, #0]
 802c170:	689b      	ldr	r3, [r3, #8]
 802c172:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 802c174:	687b      	ldr	r3, [r7, #4]
 802c176:	681b      	ldr	r3, [r3, #0]
 802c178:	4a30      	ldr	r2, [pc, #192]	; (802c23c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802c17a:	4293      	cmp	r3, r2
 802c17c:	d004      	beq.n	802c188 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 802c17e:	687b      	ldr	r3, [r7, #4]
 802c180:	681b      	ldr	r3, [r3, #0]
 802c182:	4a2f      	ldr	r2, [pc, #188]	; (802c240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802c184:	4293      	cmp	r3, r2
 802c186:	d108      	bne.n	802c19a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 802c188:	68fb      	ldr	r3, [r7, #12]
 802c18a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802c18e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 802c190:	683b      	ldr	r3, [r7, #0]
 802c192:	685b      	ldr	r3, [r3, #4]
 802c194:	68fa      	ldr	r2, [r7, #12]
 802c196:	4313      	orrs	r3, r2
 802c198:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802c19a:	68fb      	ldr	r3, [r7, #12]
 802c19c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802c1a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802c1a2:	683b      	ldr	r3, [r7, #0]
 802c1a4:	681b      	ldr	r3, [r3, #0]
 802c1a6:	68fa      	ldr	r2, [r7, #12]
 802c1a8:	4313      	orrs	r3, r2
 802c1aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802c1ac:	687b      	ldr	r3, [r7, #4]
 802c1ae:	681b      	ldr	r3, [r3, #0]
 802c1b0:	68fa      	ldr	r2, [r7, #12]
 802c1b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802c1b4:	687b      	ldr	r3, [r7, #4]
 802c1b6:	681b      	ldr	r3, [r3, #0]
 802c1b8:	4a20      	ldr	r2, [pc, #128]	; (802c23c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802c1ba:	4293      	cmp	r3, r2
 802c1bc:	d022      	beq.n	802c204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802c1be:	687b      	ldr	r3, [r7, #4]
 802c1c0:	681b      	ldr	r3, [r3, #0]
 802c1c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802c1c6:	d01d      	beq.n	802c204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802c1c8:	687b      	ldr	r3, [r7, #4]
 802c1ca:	681b      	ldr	r3, [r3, #0]
 802c1cc:	4a1d      	ldr	r2, [pc, #116]	; (802c244 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802c1ce:	4293      	cmp	r3, r2
 802c1d0:	d018      	beq.n	802c204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802c1d2:	687b      	ldr	r3, [r7, #4]
 802c1d4:	681b      	ldr	r3, [r3, #0]
 802c1d6:	4a1c      	ldr	r2, [pc, #112]	; (802c248 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 802c1d8:	4293      	cmp	r3, r2
 802c1da:	d013      	beq.n	802c204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802c1dc:	687b      	ldr	r3, [r7, #4]
 802c1de:	681b      	ldr	r3, [r3, #0]
 802c1e0:	4a1a      	ldr	r2, [pc, #104]	; (802c24c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 802c1e2:	4293      	cmp	r3, r2
 802c1e4:	d00e      	beq.n	802c204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802c1e6:	687b      	ldr	r3, [r7, #4]
 802c1e8:	681b      	ldr	r3, [r3, #0]
 802c1ea:	4a15      	ldr	r2, [pc, #84]	; (802c240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802c1ec:	4293      	cmp	r3, r2
 802c1ee:	d009      	beq.n	802c204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802c1f0:	687b      	ldr	r3, [r7, #4]
 802c1f2:	681b      	ldr	r3, [r3, #0]
 802c1f4:	4a16      	ldr	r2, [pc, #88]	; (802c250 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 802c1f6:	4293      	cmp	r3, r2
 802c1f8:	d004      	beq.n	802c204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802c1fa:	687b      	ldr	r3, [r7, #4]
 802c1fc:	681b      	ldr	r3, [r3, #0]
 802c1fe:	4a15      	ldr	r2, [pc, #84]	; (802c254 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 802c200:	4293      	cmp	r3, r2
 802c202:	d10c      	bne.n	802c21e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802c204:	68bb      	ldr	r3, [r7, #8]
 802c206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802c20a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802c20c:	683b      	ldr	r3, [r7, #0]
 802c20e:	689b      	ldr	r3, [r3, #8]
 802c210:	68ba      	ldr	r2, [r7, #8]
 802c212:	4313      	orrs	r3, r2
 802c214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802c216:	687b      	ldr	r3, [r7, #4]
 802c218:	681b      	ldr	r3, [r3, #0]
 802c21a:	68ba      	ldr	r2, [r7, #8]
 802c21c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802c21e:	687b      	ldr	r3, [r7, #4]
 802c220:	2201      	movs	r2, #1
 802c222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802c226:	687b      	ldr	r3, [r7, #4]
 802c228:	2200      	movs	r2, #0
 802c22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802c22e:	2300      	movs	r3, #0
}
 802c230:	4618      	mov	r0, r3
 802c232:	3714      	adds	r7, #20
 802c234:	46bd      	mov	sp, r7
 802c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c23a:	4770      	bx	lr
 802c23c:	40010000 	.word	0x40010000
 802c240:	40010400 	.word	0x40010400
 802c244:	40000400 	.word	0x40000400
 802c248:	40000800 	.word	0x40000800
 802c24c:	40000c00 	.word	0x40000c00
 802c250:	40001800 	.word	0x40001800
 802c254:	40014000 	.word	0x40014000

0802c258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802c258:	b480      	push	{r7}
 802c25a:	b083      	sub	sp, #12
 802c25c:	af00      	add	r7, sp, #0
 802c25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802c260:	bf00      	nop
 802c262:	370c      	adds	r7, #12
 802c264:	46bd      	mov	sp, r7
 802c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c26a:	4770      	bx	lr

0802c26c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802c26c:	b480      	push	{r7}
 802c26e:	b083      	sub	sp, #12
 802c270:	af00      	add	r7, sp, #0
 802c272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802c274:	bf00      	nop
 802c276:	370c      	adds	r7, #12
 802c278:	46bd      	mov	sp, r7
 802c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c27e:	4770      	bx	lr

0802c280 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 802c280:	b480      	push	{r7}
 802c282:	b083      	sub	sp, #12
 802c284:	af00      	add	r7, sp, #0
 802c286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 802c288:	bf00      	nop
 802c28a:	370c      	adds	r7, #12
 802c28c:	46bd      	mov	sp, r7
 802c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c292:	4770      	bx	lr

0802c294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802c294:	b580      	push	{r7, lr}
 802c296:	b082      	sub	sp, #8
 802c298:	af00      	add	r7, sp, #0
 802c29a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802c29c:	687b      	ldr	r3, [r7, #4]
 802c29e:	2b00      	cmp	r3, #0
 802c2a0:	d101      	bne.n	802c2a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802c2a2:	2301      	movs	r3, #1
 802c2a4:	e042      	b.n	802c32c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 802c2a6:	687b      	ldr	r3, [r7, #4]
 802c2a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802c2ac:	2b00      	cmp	r3, #0
 802c2ae:	d106      	bne.n	802c2be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802c2b0:	687b      	ldr	r3, [r7, #4]
 802c2b2:	2200      	movs	r2, #0
 802c2b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802c2b8:	6878      	ldr	r0, [r7, #4]
 802c2ba:	f7f5 fc65 	bl	8021b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802c2be:	687b      	ldr	r3, [r7, #4]
 802c2c0:	2224      	movs	r2, #36	; 0x24
 802c2c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 802c2c6:	687b      	ldr	r3, [r7, #4]
 802c2c8:	681b      	ldr	r3, [r3, #0]
 802c2ca:	681a      	ldr	r2, [r3, #0]
 802c2cc:	687b      	ldr	r3, [r7, #4]
 802c2ce:	681b      	ldr	r3, [r3, #0]
 802c2d0:	f022 0201 	bic.w	r2, r2, #1
 802c2d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 802c2d6:	6878      	ldr	r0, [r7, #4]
 802c2d8:	f000 fe48 	bl	802cf6c <UART_SetConfig>
 802c2dc:	4603      	mov	r3, r0
 802c2de:	2b01      	cmp	r3, #1
 802c2e0:	d101      	bne.n	802c2e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 802c2e2:	2301      	movs	r3, #1
 802c2e4:	e022      	b.n	802c32c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 802c2e6:	687b      	ldr	r3, [r7, #4]
 802c2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c2ea:	2b00      	cmp	r3, #0
 802c2ec:	d002      	beq.n	802c2f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 802c2ee:	6878      	ldr	r0, [r7, #4]
 802c2f0:	f001 fba4 	bl	802da3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802c2f4:	687b      	ldr	r3, [r7, #4]
 802c2f6:	681b      	ldr	r3, [r3, #0]
 802c2f8:	685a      	ldr	r2, [r3, #4]
 802c2fa:	687b      	ldr	r3, [r7, #4]
 802c2fc:	681b      	ldr	r3, [r3, #0]
 802c2fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802c302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802c304:	687b      	ldr	r3, [r7, #4]
 802c306:	681b      	ldr	r3, [r3, #0]
 802c308:	689a      	ldr	r2, [r3, #8]
 802c30a:	687b      	ldr	r3, [r7, #4]
 802c30c:	681b      	ldr	r3, [r3, #0]
 802c30e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802c312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 802c314:	687b      	ldr	r3, [r7, #4]
 802c316:	681b      	ldr	r3, [r3, #0]
 802c318:	681a      	ldr	r2, [r3, #0]
 802c31a:	687b      	ldr	r3, [r7, #4]
 802c31c:	681b      	ldr	r3, [r3, #0]
 802c31e:	f042 0201 	orr.w	r2, r2, #1
 802c322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 802c324:	6878      	ldr	r0, [r7, #4]
 802c326:	f001 fc2b 	bl	802db80 <UART_CheckIdleState>
 802c32a:	4603      	mov	r3, r0
}
 802c32c:	4618      	mov	r0, r3
 802c32e:	3708      	adds	r7, #8
 802c330:	46bd      	mov	sp, r7
 802c332:	bd80      	pop	{r7, pc}

0802c334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802c334:	b580      	push	{r7, lr}
 802c336:	b08a      	sub	sp, #40	; 0x28
 802c338:	af02      	add	r7, sp, #8
 802c33a:	60f8      	str	r0, [r7, #12]
 802c33c:	60b9      	str	r1, [r7, #8]
 802c33e:	603b      	str	r3, [r7, #0]
 802c340:	4613      	mov	r3, r2
 802c342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802c344:	68fb      	ldr	r3, [r7, #12]
 802c346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802c34a:	2b20      	cmp	r3, #32
 802c34c:	f040 8083 	bne.w	802c456 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 802c350:	68bb      	ldr	r3, [r7, #8]
 802c352:	2b00      	cmp	r3, #0
 802c354:	d002      	beq.n	802c35c <HAL_UART_Transmit+0x28>
 802c356:	88fb      	ldrh	r3, [r7, #6]
 802c358:	2b00      	cmp	r3, #0
 802c35a:	d101      	bne.n	802c360 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 802c35c:	2301      	movs	r3, #1
 802c35e:	e07b      	b.n	802c458 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 802c360:	68fb      	ldr	r3, [r7, #12]
 802c362:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802c366:	2b01      	cmp	r3, #1
 802c368:	d101      	bne.n	802c36e <HAL_UART_Transmit+0x3a>
 802c36a:	2302      	movs	r3, #2
 802c36c:	e074      	b.n	802c458 <HAL_UART_Transmit+0x124>
 802c36e:	68fb      	ldr	r3, [r7, #12]
 802c370:	2201      	movs	r2, #1
 802c372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802c376:	68fb      	ldr	r3, [r7, #12]
 802c378:	2200      	movs	r2, #0
 802c37a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802c37e:	68fb      	ldr	r3, [r7, #12]
 802c380:	2221      	movs	r2, #33	; 0x21
 802c382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802c386:	f7f5 fe5b 	bl	8022040 <HAL_GetTick>
 802c38a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 802c38c:	68fb      	ldr	r3, [r7, #12]
 802c38e:	88fa      	ldrh	r2, [r7, #6]
 802c390:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 802c394:	68fb      	ldr	r3, [r7, #12]
 802c396:	88fa      	ldrh	r2, [r7, #6]
 802c398:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802c39c:	68fb      	ldr	r3, [r7, #12]
 802c39e:	689b      	ldr	r3, [r3, #8]
 802c3a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c3a4:	d108      	bne.n	802c3b8 <HAL_UART_Transmit+0x84>
 802c3a6:	68fb      	ldr	r3, [r7, #12]
 802c3a8:	691b      	ldr	r3, [r3, #16]
 802c3aa:	2b00      	cmp	r3, #0
 802c3ac:	d104      	bne.n	802c3b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 802c3ae:	2300      	movs	r3, #0
 802c3b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802c3b2:	68bb      	ldr	r3, [r7, #8]
 802c3b4:	61bb      	str	r3, [r7, #24]
 802c3b6:	e003      	b.n	802c3c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 802c3b8:	68bb      	ldr	r3, [r7, #8]
 802c3ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802c3bc:	2300      	movs	r3, #0
 802c3be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 802c3c0:	68fb      	ldr	r3, [r7, #12]
 802c3c2:	2200      	movs	r2, #0
 802c3c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 802c3c8:	e02c      	b.n	802c424 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802c3ca:	683b      	ldr	r3, [r7, #0]
 802c3cc:	9300      	str	r3, [sp, #0]
 802c3ce:	697b      	ldr	r3, [r7, #20]
 802c3d0:	2200      	movs	r2, #0
 802c3d2:	2180      	movs	r1, #128	; 0x80
 802c3d4:	68f8      	ldr	r0, [r7, #12]
 802c3d6:	f001 fc1e 	bl	802dc16 <UART_WaitOnFlagUntilTimeout>
 802c3da:	4603      	mov	r3, r0
 802c3dc:	2b00      	cmp	r3, #0
 802c3de:	d001      	beq.n	802c3e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 802c3e0:	2303      	movs	r3, #3
 802c3e2:	e039      	b.n	802c458 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 802c3e4:	69fb      	ldr	r3, [r7, #28]
 802c3e6:	2b00      	cmp	r3, #0
 802c3e8:	d10b      	bne.n	802c402 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 802c3ea:	69bb      	ldr	r3, [r7, #24]
 802c3ec:	881b      	ldrh	r3, [r3, #0]
 802c3ee:	461a      	mov	r2, r3
 802c3f0:	68fb      	ldr	r3, [r7, #12]
 802c3f2:	681b      	ldr	r3, [r3, #0]
 802c3f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802c3f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 802c3fa:	69bb      	ldr	r3, [r7, #24]
 802c3fc:	3302      	adds	r3, #2
 802c3fe:	61bb      	str	r3, [r7, #24]
 802c400:	e007      	b.n	802c412 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 802c402:	69fb      	ldr	r3, [r7, #28]
 802c404:	781a      	ldrb	r2, [r3, #0]
 802c406:	68fb      	ldr	r3, [r7, #12]
 802c408:	681b      	ldr	r3, [r3, #0]
 802c40a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 802c40c:	69fb      	ldr	r3, [r7, #28]
 802c40e:	3301      	adds	r3, #1
 802c410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802c412:	68fb      	ldr	r3, [r7, #12]
 802c414:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 802c418:	b29b      	uxth	r3, r3
 802c41a:	3b01      	subs	r3, #1
 802c41c:	b29a      	uxth	r2, r3
 802c41e:	68fb      	ldr	r3, [r7, #12]
 802c420:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 802c424:	68fb      	ldr	r3, [r7, #12]
 802c426:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 802c42a:	b29b      	uxth	r3, r3
 802c42c:	2b00      	cmp	r3, #0
 802c42e:	d1cc      	bne.n	802c3ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802c430:	683b      	ldr	r3, [r7, #0]
 802c432:	9300      	str	r3, [sp, #0]
 802c434:	697b      	ldr	r3, [r7, #20]
 802c436:	2200      	movs	r2, #0
 802c438:	2140      	movs	r1, #64	; 0x40
 802c43a:	68f8      	ldr	r0, [r7, #12]
 802c43c:	f001 fbeb 	bl	802dc16 <UART_WaitOnFlagUntilTimeout>
 802c440:	4603      	mov	r3, r0
 802c442:	2b00      	cmp	r3, #0
 802c444:	d001      	beq.n	802c44a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 802c446:	2303      	movs	r3, #3
 802c448:	e006      	b.n	802c458 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802c44a:	68fb      	ldr	r3, [r7, #12]
 802c44c:	2220      	movs	r2, #32
 802c44e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 802c452:	2300      	movs	r3, #0
 802c454:	e000      	b.n	802c458 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 802c456:	2302      	movs	r3, #2
  }
}
 802c458:	4618      	mov	r0, r3
 802c45a:	3720      	adds	r7, #32
 802c45c:	46bd      	mov	sp, r7
 802c45e:	bd80      	pop	{r7, pc}

0802c460 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802c460:	b580      	push	{r7, lr}
 802c462:	b08a      	sub	sp, #40	; 0x28
 802c464:	af02      	add	r7, sp, #8
 802c466:	60f8      	str	r0, [r7, #12]
 802c468:	60b9      	str	r1, [r7, #8]
 802c46a:	603b      	str	r3, [r7, #0]
 802c46c:	4613      	mov	r3, r2
 802c46e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802c470:	68fb      	ldr	r3, [r7, #12]
 802c472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802c476:	2b20      	cmp	r3, #32
 802c478:	f040 80c0 	bne.w	802c5fc <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 802c47c:	68bb      	ldr	r3, [r7, #8]
 802c47e:	2b00      	cmp	r3, #0
 802c480:	d002      	beq.n	802c488 <HAL_UART_Receive+0x28>
 802c482:	88fb      	ldrh	r3, [r7, #6]
 802c484:	2b00      	cmp	r3, #0
 802c486:	d101      	bne.n	802c48c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 802c488:	2301      	movs	r3, #1
 802c48a:	e0b8      	b.n	802c5fe <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 802c48c:	68fb      	ldr	r3, [r7, #12]
 802c48e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802c492:	2b01      	cmp	r3, #1
 802c494:	d101      	bne.n	802c49a <HAL_UART_Receive+0x3a>
 802c496:	2302      	movs	r3, #2
 802c498:	e0b1      	b.n	802c5fe <HAL_UART_Receive+0x19e>
 802c49a:	68fb      	ldr	r3, [r7, #12]
 802c49c:	2201      	movs	r2, #1
 802c49e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802c4a2:	68fb      	ldr	r3, [r7, #12]
 802c4a4:	2200      	movs	r2, #0
 802c4a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 802c4aa:	68fb      	ldr	r3, [r7, #12]
 802c4ac:	2222      	movs	r2, #34	; 0x22
 802c4ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c4b2:	68fb      	ldr	r3, [r7, #12]
 802c4b4:	2200      	movs	r2, #0
 802c4b6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802c4b8:	f7f5 fdc2 	bl	8022040 <HAL_GetTick>
 802c4bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 802c4be:	68fb      	ldr	r3, [r7, #12]
 802c4c0:	88fa      	ldrh	r2, [r7, #6]
 802c4c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 802c4c6:	68fb      	ldr	r3, [r7, #12]
 802c4c8:	88fa      	ldrh	r2, [r7, #6]
 802c4ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 802c4ce:	68fb      	ldr	r3, [r7, #12]
 802c4d0:	689b      	ldr	r3, [r3, #8]
 802c4d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c4d6:	d10e      	bne.n	802c4f6 <HAL_UART_Receive+0x96>
 802c4d8:	68fb      	ldr	r3, [r7, #12]
 802c4da:	691b      	ldr	r3, [r3, #16]
 802c4dc:	2b00      	cmp	r3, #0
 802c4de:	d105      	bne.n	802c4ec <HAL_UART_Receive+0x8c>
 802c4e0:	68fb      	ldr	r3, [r7, #12]
 802c4e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 802c4e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 802c4ea:	e02d      	b.n	802c548 <HAL_UART_Receive+0xe8>
 802c4ec:	68fb      	ldr	r3, [r7, #12]
 802c4ee:	22ff      	movs	r2, #255	; 0xff
 802c4f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 802c4f4:	e028      	b.n	802c548 <HAL_UART_Receive+0xe8>
 802c4f6:	68fb      	ldr	r3, [r7, #12]
 802c4f8:	689b      	ldr	r3, [r3, #8]
 802c4fa:	2b00      	cmp	r3, #0
 802c4fc:	d10d      	bne.n	802c51a <HAL_UART_Receive+0xba>
 802c4fe:	68fb      	ldr	r3, [r7, #12]
 802c500:	691b      	ldr	r3, [r3, #16]
 802c502:	2b00      	cmp	r3, #0
 802c504:	d104      	bne.n	802c510 <HAL_UART_Receive+0xb0>
 802c506:	68fb      	ldr	r3, [r7, #12]
 802c508:	22ff      	movs	r2, #255	; 0xff
 802c50a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 802c50e:	e01b      	b.n	802c548 <HAL_UART_Receive+0xe8>
 802c510:	68fb      	ldr	r3, [r7, #12]
 802c512:	227f      	movs	r2, #127	; 0x7f
 802c514:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 802c518:	e016      	b.n	802c548 <HAL_UART_Receive+0xe8>
 802c51a:	68fb      	ldr	r3, [r7, #12]
 802c51c:	689b      	ldr	r3, [r3, #8]
 802c51e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802c522:	d10d      	bne.n	802c540 <HAL_UART_Receive+0xe0>
 802c524:	68fb      	ldr	r3, [r7, #12]
 802c526:	691b      	ldr	r3, [r3, #16]
 802c528:	2b00      	cmp	r3, #0
 802c52a:	d104      	bne.n	802c536 <HAL_UART_Receive+0xd6>
 802c52c:	68fb      	ldr	r3, [r7, #12]
 802c52e:	227f      	movs	r2, #127	; 0x7f
 802c530:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 802c534:	e008      	b.n	802c548 <HAL_UART_Receive+0xe8>
 802c536:	68fb      	ldr	r3, [r7, #12]
 802c538:	223f      	movs	r2, #63	; 0x3f
 802c53a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 802c53e:	e003      	b.n	802c548 <HAL_UART_Receive+0xe8>
 802c540:	68fb      	ldr	r3, [r7, #12]
 802c542:	2200      	movs	r2, #0
 802c544:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 802c548:	68fb      	ldr	r3, [r7, #12]
 802c54a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802c54e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802c550:	68fb      	ldr	r3, [r7, #12]
 802c552:	689b      	ldr	r3, [r3, #8]
 802c554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c558:	d108      	bne.n	802c56c <HAL_UART_Receive+0x10c>
 802c55a:	68fb      	ldr	r3, [r7, #12]
 802c55c:	691b      	ldr	r3, [r3, #16]
 802c55e:	2b00      	cmp	r3, #0
 802c560:	d104      	bne.n	802c56c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 802c562:	2300      	movs	r3, #0
 802c564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 802c566:	68bb      	ldr	r3, [r7, #8]
 802c568:	61bb      	str	r3, [r7, #24]
 802c56a:	e003      	b.n	802c574 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 802c56c:	68bb      	ldr	r3, [r7, #8]
 802c56e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802c570:	2300      	movs	r3, #0
 802c572:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 802c574:	68fb      	ldr	r3, [r7, #12]
 802c576:	2200      	movs	r2, #0
 802c578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 802c57c:	e032      	b.n	802c5e4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 802c57e:	683b      	ldr	r3, [r7, #0]
 802c580:	9300      	str	r3, [sp, #0]
 802c582:	697b      	ldr	r3, [r7, #20]
 802c584:	2200      	movs	r2, #0
 802c586:	2120      	movs	r1, #32
 802c588:	68f8      	ldr	r0, [r7, #12]
 802c58a:	f001 fb44 	bl	802dc16 <UART_WaitOnFlagUntilTimeout>
 802c58e:	4603      	mov	r3, r0
 802c590:	2b00      	cmp	r3, #0
 802c592:	d001      	beq.n	802c598 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 802c594:	2303      	movs	r3, #3
 802c596:	e032      	b.n	802c5fe <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 802c598:	69fb      	ldr	r3, [r7, #28]
 802c59a:	2b00      	cmp	r3, #0
 802c59c:	d10c      	bne.n	802c5b8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 802c59e:	68fb      	ldr	r3, [r7, #12]
 802c5a0:	681b      	ldr	r3, [r3, #0]
 802c5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c5a4:	b29a      	uxth	r2, r3
 802c5a6:	8a7b      	ldrh	r3, [r7, #18]
 802c5a8:	4013      	ands	r3, r2
 802c5aa:	b29a      	uxth	r2, r3
 802c5ac:	69bb      	ldr	r3, [r7, #24]
 802c5ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 802c5b0:	69bb      	ldr	r3, [r7, #24]
 802c5b2:	3302      	adds	r3, #2
 802c5b4:	61bb      	str	r3, [r7, #24]
 802c5b6:	e00c      	b.n	802c5d2 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 802c5b8:	68fb      	ldr	r3, [r7, #12]
 802c5ba:	681b      	ldr	r3, [r3, #0]
 802c5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c5be:	b2da      	uxtb	r2, r3
 802c5c0:	8a7b      	ldrh	r3, [r7, #18]
 802c5c2:	b2db      	uxtb	r3, r3
 802c5c4:	4013      	ands	r3, r2
 802c5c6:	b2da      	uxtb	r2, r3
 802c5c8:	69fb      	ldr	r3, [r7, #28]
 802c5ca:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 802c5cc:	69fb      	ldr	r3, [r7, #28]
 802c5ce:	3301      	adds	r3, #1
 802c5d0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 802c5d2:	68fb      	ldr	r3, [r7, #12]
 802c5d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802c5d8:	b29b      	uxth	r3, r3
 802c5da:	3b01      	subs	r3, #1
 802c5dc:	b29a      	uxth	r2, r3
 802c5de:	68fb      	ldr	r3, [r7, #12]
 802c5e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 802c5e4:	68fb      	ldr	r3, [r7, #12]
 802c5e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802c5ea:	b29b      	uxth	r3, r3
 802c5ec:	2b00      	cmp	r3, #0
 802c5ee:	d1c6      	bne.n	802c57e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 802c5f0:	68fb      	ldr	r3, [r7, #12]
 802c5f2:	2220      	movs	r2, #32
 802c5f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 802c5f8:	2300      	movs	r3, #0
 802c5fa:	e000      	b.n	802c5fe <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 802c5fc:	2302      	movs	r3, #2
  }
}
 802c5fe:	4618      	mov	r0, r3
 802c600:	3720      	adds	r7, #32
 802c602:	46bd      	mov	sp, r7
 802c604:	bd80      	pop	{r7, pc}
	...

0802c608 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 802c608:	b480      	push	{r7}
 802c60a:	b091      	sub	sp, #68	; 0x44
 802c60c:	af00      	add	r7, sp, #0
 802c60e:	60f8      	str	r0, [r7, #12]
 802c610:	60b9      	str	r1, [r7, #8]
 802c612:	4613      	mov	r3, r2
 802c614:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802c616:	68fb      	ldr	r3, [r7, #12]
 802c618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802c61c:	2b20      	cmp	r3, #32
 802c61e:	f040 808c 	bne.w	802c73a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 802c622:	68bb      	ldr	r3, [r7, #8]
 802c624:	2b00      	cmp	r3, #0
 802c626:	d002      	beq.n	802c62e <HAL_UART_Transmit_IT+0x26>
 802c628:	88fb      	ldrh	r3, [r7, #6]
 802c62a:	2b00      	cmp	r3, #0
 802c62c:	d101      	bne.n	802c632 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 802c62e:	2301      	movs	r3, #1
 802c630:	e084      	b.n	802c73c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 802c632:	68fb      	ldr	r3, [r7, #12]
 802c634:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802c638:	2b01      	cmp	r3, #1
 802c63a:	d101      	bne.n	802c640 <HAL_UART_Transmit_IT+0x38>
 802c63c:	2302      	movs	r3, #2
 802c63e:	e07d      	b.n	802c73c <HAL_UART_Transmit_IT+0x134>
 802c640:	68fb      	ldr	r3, [r7, #12]
 802c642:	2201      	movs	r2, #1
 802c644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 802c648:	68fb      	ldr	r3, [r7, #12]
 802c64a:	68ba      	ldr	r2, [r7, #8]
 802c64c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 802c64e:	68fb      	ldr	r3, [r7, #12]
 802c650:	88fa      	ldrh	r2, [r7, #6]
 802c652:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 802c656:	68fb      	ldr	r3, [r7, #12]
 802c658:	88fa      	ldrh	r2, [r7, #6]
 802c65a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 802c65e:	68fb      	ldr	r3, [r7, #12]
 802c660:	2200      	movs	r2, #0
 802c662:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802c664:	68fb      	ldr	r3, [r7, #12]
 802c666:	2200      	movs	r2, #0
 802c668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802c66c:	68fb      	ldr	r3, [r7, #12]
 802c66e:	2221      	movs	r2, #33	; 0x21
 802c670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 802c674:	68fb      	ldr	r3, [r7, #12]
 802c676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802c678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802c67c:	d12e      	bne.n	802c6dc <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802c67e:	68fb      	ldr	r3, [r7, #12]
 802c680:	689b      	ldr	r3, [r3, #8]
 802c682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c686:	d107      	bne.n	802c698 <HAL_UART_Transmit_IT+0x90>
 802c688:	68fb      	ldr	r3, [r7, #12]
 802c68a:	691b      	ldr	r3, [r3, #16]
 802c68c:	2b00      	cmp	r3, #0
 802c68e:	d103      	bne.n	802c698 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 802c690:	68fb      	ldr	r3, [r7, #12]
 802c692:	4a2d      	ldr	r2, [pc, #180]	; (802c748 <HAL_UART_Transmit_IT+0x140>)
 802c694:	675a      	str	r2, [r3, #116]	; 0x74
 802c696:	e002      	b.n	802c69e <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 802c698:	68fb      	ldr	r3, [r7, #12]
 802c69a:	4a2c      	ldr	r2, [pc, #176]	; (802c74c <HAL_UART_Transmit_IT+0x144>)
 802c69c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 802c69e:	68fb      	ldr	r3, [r7, #12]
 802c6a0:	2200      	movs	r2, #0
 802c6a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 802c6a6:	68fb      	ldr	r3, [r7, #12]
 802c6a8:	681b      	ldr	r3, [r3, #0]
 802c6aa:	3308      	adds	r3, #8
 802c6ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6b0:	e853 3f00 	ldrex	r3, [r3]
 802c6b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c6b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802c6bc:	63bb      	str	r3, [r7, #56]	; 0x38
 802c6be:	68fb      	ldr	r3, [r7, #12]
 802c6c0:	681b      	ldr	r3, [r3, #0]
 802c6c2:	3308      	adds	r3, #8
 802c6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802c6c6:	637a      	str	r2, [r7, #52]	; 0x34
 802c6c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c6ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802c6cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802c6ce:	e841 2300 	strex	r3, r2, [r1]
 802c6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802c6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c6d6:	2b00      	cmp	r3, #0
 802c6d8:	d1e5      	bne.n	802c6a6 <HAL_UART_Transmit_IT+0x9e>
 802c6da:	e02c      	b.n	802c736 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802c6dc:	68fb      	ldr	r3, [r7, #12]
 802c6de:	689b      	ldr	r3, [r3, #8]
 802c6e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c6e4:	d107      	bne.n	802c6f6 <HAL_UART_Transmit_IT+0xee>
 802c6e6:	68fb      	ldr	r3, [r7, #12]
 802c6e8:	691b      	ldr	r3, [r3, #16]
 802c6ea:	2b00      	cmp	r3, #0
 802c6ec:	d103      	bne.n	802c6f6 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 802c6ee:	68fb      	ldr	r3, [r7, #12]
 802c6f0:	4a17      	ldr	r2, [pc, #92]	; (802c750 <HAL_UART_Transmit_IT+0x148>)
 802c6f2:	675a      	str	r2, [r3, #116]	; 0x74
 802c6f4:	e002      	b.n	802c6fc <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 802c6f6:	68fb      	ldr	r3, [r7, #12]
 802c6f8:	4a16      	ldr	r2, [pc, #88]	; (802c754 <HAL_UART_Transmit_IT+0x14c>)
 802c6fa:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 802c6fc:	68fb      	ldr	r3, [r7, #12]
 802c6fe:	2200      	movs	r2, #0
 802c700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 802c704:	68fb      	ldr	r3, [r7, #12]
 802c706:	681b      	ldr	r3, [r3, #0]
 802c708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c70a:	697b      	ldr	r3, [r7, #20]
 802c70c:	e853 3f00 	ldrex	r3, [r3]
 802c710:	613b      	str	r3, [r7, #16]
   return(result);
 802c712:	693b      	ldr	r3, [r7, #16]
 802c714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c718:	63fb      	str	r3, [r7, #60]	; 0x3c
 802c71a:	68fb      	ldr	r3, [r7, #12]
 802c71c:	681b      	ldr	r3, [r3, #0]
 802c71e:	461a      	mov	r2, r3
 802c720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c722:	623b      	str	r3, [r7, #32]
 802c724:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c726:	69f9      	ldr	r1, [r7, #28]
 802c728:	6a3a      	ldr	r2, [r7, #32]
 802c72a:	e841 2300 	strex	r3, r2, [r1]
 802c72e:	61bb      	str	r3, [r7, #24]
   return(result);
 802c730:	69bb      	ldr	r3, [r7, #24]
 802c732:	2b00      	cmp	r3, #0
 802c734:	d1e6      	bne.n	802c704 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 802c736:	2300      	movs	r3, #0
 802c738:	e000      	b.n	802c73c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 802c73a:	2302      	movs	r3, #2
  }
}
 802c73c:	4618      	mov	r0, r3
 802c73e:	3744      	adds	r7, #68	; 0x44
 802c740:	46bd      	mov	sp, r7
 802c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c746:	4770      	bx	lr
 802c748:	0802e34f 	.word	0x0802e34f
 802c74c:	0802e26f 	.word	0x0802e26f
 802c750:	0802e1ad 	.word	0x0802e1ad
 802c754:	0802e0f5 	.word	0x0802e0f5

0802c758 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802c758:	b580      	push	{r7, lr}
 802c75a:	b08a      	sub	sp, #40	; 0x28
 802c75c:	af00      	add	r7, sp, #0
 802c75e:	60f8      	str	r0, [r7, #12]
 802c760:	60b9      	str	r1, [r7, #8]
 802c762:	4613      	mov	r3, r2
 802c764:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802c766:	68fb      	ldr	r3, [r7, #12]
 802c768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802c76c:	2b20      	cmp	r3, #32
 802c76e:	d142      	bne.n	802c7f6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 802c770:	68bb      	ldr	r3, [r7, #8]
 802c772:	2b00      	cmp	r3, #0
 802c774:	d002      	beq.n	802c77c <HAL_UART_Receive_IT+0x24>
 802c776:	88fb      	ldrh	r3, [r7, #6]
 802c778:	2b00      	cmp	r3, #0
 802c77a:	d101      	bne.n	802c780 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 802c77c:	2301      	movs	r3, #1
 802c77e:	e03b      	b.n	802c7f8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 802c780:	68fb      	ldr	r3, [r7, #12]
 802c782:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802c786:	2b01      	cmp	r3, #1
 802c788:	d101      	bne.n	802c78e <HAL_UART_Receive_IT+0x36>
 802c78a:	2302      	movs	r3, #2
 802c78c:	e034      	b.n	802c7f8 <HAL_UART_Receive_IT+0xa0>
 802c78e:	68fb      	ldr	r3, [r7, #12]
 802c790:	2201      	movs	r2, #1
 802c792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c796:	68fb      	ldr	r3, [r7, #12]
 802c798:	2200      	movs	r2, #0
 802c79a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 802c79c:	68fb      	ldr	r3, [r7, #12]
 802c79e:	681b      	ldr	r3, [r3, #0]
 802c7a0:	4a17      	ldr	r2, [pc, #92]	; (802c800 <HAL_UART_Receive_IT+0xa8>)
 802c7a2:	4293      	cmp	r3, r2
 802c7a4:	d01f      	beq.n	802c7e6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 802c7a6:	68fb      	ldr	r3, [r7, #12]
 802c7a8:	681b      	ldr	r3, [r3, #0]
 802c7aa:	685b      	ldr	r3, [r3, #4]
 802c7ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802c7b0:	2b00      	cmp	r3, #0
 802c7b2:	d018      	beq.n	802c7e6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 802c7b4:	68fb      	ldr	r3, [r7, #12]
 802c7b6:	681b      	ldr	r3, [r3, #0]
 802c7b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c7ba:	697b      	ldr	r3, [r7, #20]
 802c7bc:	e853 3f00 	ldrex	r3, [r3]
 802c7c0:	613b      	str	r3, [r7, #16]
   return(result);
 802c7c2:	693b      	ldr	r3, [r7, #16]
 802c7c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 802c7c8:	627b      	str	r3, [r7, #36]	; 0x24
 802c7ca:	68fb      	ldr	r3, [r7, #12]
 802c7cc:	681b      	ldr	r3, [r3, #0]
 802c7ce:	461a      	mov	r2, r3
 802c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c7d2:	623b      	str	r3, [r7, #32]
 802c7d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c7d6:	69f9      	ldr	r1, [r7, #28]
 802c7d8:	6a3a      	ldr	r2, [r7, #32]
 802c7da:	e841 2300 	strex	r3, r2, [r1]
 802c7de:	61bb      	str	r3, [r7, #24]
   return(result);
 802c7e0:	69bb      	ldr	r3, [r7, #24]
 802c7e2:	2b00      	cmp	r3, #0
 802c7e4:	d1e6      	bne.n	802c7b4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 802c7e6:	88fb      	ldrh	r3, [r7, #6]
 802c7e8:	461a      	mov	r2, r3
 802c7ea:	68b9      	ldr	r1, [r7, #8]
 802c7ec:	68f8      	ldr	r0, [r7, #12]
 802c7ee:	f001 fadb 	bl	802dda8 <UART_Start_Receive_IT>
 802c7f2:	4603      	mov	r3, r0
 802c7f4:	e000      	b.n	802c7f8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 802c7f6:	2302      	movs	r3, #2
  }
}
 802c7f8:	4618      	mov	r0, r3
 802c7fa:	3728      	adds	r7, #40	; 0x28
 802c7fc:	46bd      	mov	sp, r7
 802c7fe:	bd80      	pop	{r7, pc}
 802c800:	58000c00 	.word	0x58000c00

0802c804 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802c804:	b580      	push	{r7, lr}
 802c806:	b0ba      	sub	sp, #232	; 0xe8
 802c808:	af00      	add	r7, sp, #0
 802c80a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 802c80c:	687b      	ldr	r3, [r7, #4]
 802c80e:	681b      	ldr	r3, [r3, #0]
 802c810:	69db      	ldr	r3, [r3, #28]
 802c812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802c816:	687b      	ldr	r3, [r7, #4]
 802c818:	681b      	ldr	r3, [r3, #0]
 802c81a:	681b      	ldr	r3, [r3, #0]
 802c81c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802c820:	687b      	ldr	r3, [r7, #4]
 802c822:	681b      	ldr	r3, [r3, #0]
 802c824:	689b      	ldr	r3, [r3, #8]
 802c826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 802c82a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 802c82e:	f640 030f 	movw	r3, #2063	; 0x80f
 802c832:	4013      	ands	r3, r2
 802c834:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 802c838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802c83c:	2b00      	cmp	r3, #0
 802c83e:	d11b      	bne.n	802c878 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 802c840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c844:	f003 0320 	and.w	r3, r3, #32
 802c848:	2b00      	cmp	r3, #0
 802c84a:	d015      	beq.n	802c878 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 802c84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c850:	f003 0320 	and.w	r3, r3, #32
 802c854:	2b00      	cmp	r3, #0
 802c856:	d105      	bne.n	802c864 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 802c858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802c85c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802c860:	2b00      	cmp	r3, #0
 802c862:	d009      	beq.n	802c878 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 802c864:	687b      	ldr	r3, [r7, #4]
 802c866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c868:	2b00      	cmp	r3, #0
 802c86a:	f000 835a 	beq.w	802cf22 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 802c86e:	687b      	ldr	r3, [r7, #4]
 802c870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c872:	6878      	ldr	r0, [r7, #4]
 802c874:	4798      	blx	r3
      }
      return;
 802c876:	e354      	b.n	802cf22 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 802c878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802c87c:	2b00      	cmp	r3, #0
 802c87e:	f000 811f 	beq.w	802cac0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 802c882:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 802c886:	4b8b      	ldr	r3, [pc, #556]	; (802cab4 <HAL_UART_IRQHandler+0x2b0>)
 802c888:	4013      	ands	r3, r2
 802c88a:	2b00      	cmp	r3, #0
 802c88c:	d106      	bne.n	802c89c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 802c88e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 802c892:	4b89      	ldr	r3, [pc, #548]	; (802cab8 <HAL_UART_IRQHandler+0x2b4>)
 802c894:	4013      	ands	r3, r2
 802c896:	2b00      	cmp	r3, #0
 802c898:	f000 8112 	beq.w	802cac0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 802c89c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c8a0:	f003 0301 	and.w	r3, r3, #1
 802c8a4:	2b00      	cmp	r3, #0
 802c8a6:	d011      	beq.n	802c8cc <HAL_UART_IRQHandler+0xc8>
 802c8a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c8ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802c8b0:	2b00      	cmp	r3, #0
 802c8b2:	d00b      	beq.n	802c8cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 802c8b4:	687b      	ldr	r3, [r7, #4]
 802c8b6:	681b      	ldr	r3, [r3, #0]
 802c8b8:	2201      	movs	r2, #1
 802c8ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802c8bc:	687b      	ldr	r3, [r7, #4]
 802c8be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802c8c2:	f043 0201 	orr.w	r2, r3, #1
 802c8c6:	687b      	ldr	r3, [r7, #4]
 802c8c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 802c8cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c8d0:	f003 0302 	and.w	r3, r3, #2
 802c8d4:	2b00      	cmp	r3, #0
 802c8d6:	d011      	beq.n	802c8fc <HAL_UART_IRQHandler+0xf8>
 802c8d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802c8dc:	f003 0301 	and.w	r3, r3, #1
 802c8e0:	2b00      	cmp	r3, #0
 802c8e2:	d00b      	beq.n	802c8fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 802c8e4:	687b      	ldr	r3, [r7, #4]
 802c8e6:	681b      	ldr	r3, [r3, #0]
 802c8e8:	2202      	movs	r2, #2
 802c8ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802c8ec:	687b      	ldr	r3, [r7, #4]
 802c8ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802c8f2:	f043 0204 	orr.w	r2, r3, #4
 802c8f6:	687b      	ldr	r3, [r7, #4]
 802c8f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 802c8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c900:	f003 0304 	and.w	r3, r3, #4
 802c904:	2b00      	cmp	r3, #0
 802c906:	d011      	beq.n	802c92c <HAL_UART_IRQHandler+0x128>
 802c908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802c90c:	f003 0301 	and.w	r3, r3, #1
 802c910:	2b00      	cmp	r3, #0
 802c912:	d00b      	beq.n	802c92c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 802c914:	687b      	ldr	r3, [r7, #4]
 802c916:	681b      	ldr	r3, [r3, #0]
 802c918:	2204      	movs	r2, #4
 802c91a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802c91c:	687b      	ldr	r3, [r7, #4]
 802c91e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802c922:	f043 0202 	orr.w	r2, r3, #2
 802c926:	687b      	ldr	r3, [r7, #4]
 802c928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 802c92c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c930:	f003 0308 	and.w	r3, r3, #8
 802c934:	2b00      	cmp	r3, #0
 802c936:	d017      	beq.n	802c968 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 802c938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c93c:	f003 0320 	and.w	r3, r3, #32
 802c940:	2b00      	cmp	r3, #0
 802c942:	d105      	bne.n	802c950 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 802c944:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 802c948:	4b5a      	ldr	r3, [pc, #360]	; (802cab4 <HAL_UART_IRQHandler+0x2b0>)
 802c94a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 802c94c:	2b00      	cmp	r3, #0
 802c94e:	d00b      	beq.n	802c968 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 802c950:	687b      	ldr	r3, [r7, #4]
 802c952:	681b      	ldr	r3, [r3, #0]
 802c954:	2208      	movs	r2, #8
 802c956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802c958:	687b      	ldr	r3, [r7, #4]
 802c95a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802c95e:	f043 0208 	orr.w	r2, r3, #8
 802c962:	687b      	ldr	r3, [r7, #4]
 802c964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 802c968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c96c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802c970:	2b00      	cmp	r3, #0
 802c972:	d012      	beq.n	802c99a <HAL_UART_IRQHandler+0x196>
 802c974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c978:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802c97c:	2b00      	cmp	r3, #0
 802c97e:	d00c      	beq.n	802c99a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802c980:	687b      	ldr	r3, [r7, #4]
 802c982:	681b      	ldr	r3, [r3, #0]
 802c984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802c988:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 802c98a:	687b      	ldr	r3, [r7, #4]
 802c98c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802c990:	f043 0220 	orr.w	r2, r3, #32
 802c994:	687b      	ldr	r3, [r7, #4]
 802c996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802c99a:	687b      	ldr	r3, [r7, #4]
 802c99c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802c9a0:	2b00      	cmp	r3, #0
 802c9a2:	f000 82c0 	beq.w	802cf26 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 802c9a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c9aa:	f003 0320 	and.w	r3, r3, #32
 802c9ae:	2b00      	cmp	r3, #0
 802c9b0:	d013      	beq.n	802c9da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 802c9b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c9b6:	f003 0320 	and.w	r3, r3, #32
 802c9ba:	2b00      	cmp	r3, #0
 802c9bc:	d105      	bne.n	802c9ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 802c9be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802c9c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802c9c6:	2b00      	cmp	r3, #0
 802c9c8:	d007      	beq.n	802c9da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 802c9ca:	687b      	ldr	r3, [r7, #4]
 802c9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c9ce:	2b00      	cmp	r3, #0
 802c9d0:	d003      	beq.n	802c9da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 802c9d2:	687b      	ldr	r3, [r7, #4]
 802c9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c9d6:	6878      	ldr	r0, [r7, #4]
 802c9d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 802c9da:	687b      	ldr	r3, [r7, #4]
 802c9dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802c9e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 802c9e4:	687b      	ldr	r3, [r7, #4]
 802c9e6:	681b      	ldr	r3, [r3, #0]
 802c9e8:	689b      	ldr	r3, [r3, #8]
 802c9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c9ee:	2b40      	cmp	r3, #64	; 0x40
 802c9f0:	d005      	beq.n	802c9fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 802c9f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802c9f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 802c9fa:	2b00      	cmp	r3, #0
 802c9fc:	d04f      	beq.n	802ca9e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802c9fe:	6878      	ldr	r0, [r7, #4]
 802ca00:	f001 fafc 	bl	802dffc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802ca04:	687b      	ldr	r3, [r7, #4]
 802ca06:	681b      	ldr	r3, [r3, #0]
 802ca08:	689b      	ldr	r3, [r3, #8]
 802ca0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ca0e:	2b40      	cmp	r3, #64	; 0x40
 802ca10:	d141      	bne.n	802ca96 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802ca12:	687b      	ldr	r3, [r7, #4]
 802ca14:	681b      	ldr	r3, [r3, #0]
 802ca16:	3308      	adds	r3, #8
 802ca18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ca1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802ca20:	e853 3f00 	ldrex	r3, [r3]
 802ca24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 802ca28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802ca2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802ca30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802ca34:	687b      	ldr	r3, [r7, #4]
 802ca36:	681b      	ldr	r3, [r3, #0]
 802ca38:	3308      	adds	r3, #8
 802ca3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 802ca3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802ca42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ca46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802ca4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 802ca4e:	e841 2300 	strex	r3, r2, [r1]
 802ca52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 802ca56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802ca5a:	2b00      	cmp	r3, #0
 802ca5c:	d1d9      	bne.n	802ca12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 802ca5e:	687b      	ldr	r3, [r7, #4]
 802ca60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802ca62:	2b00      	cmp	r3, #0
 802ca64:	d013      	beq.n	802ca8e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802ca66:	687b      	ldr	r3, [r7, #4]
 802ca68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802ca6a:	4a14      	ldr	r2, [pc, #80]	; (802cabc <HAL_UART_IRQHandler+0x2b8>)
 802ca6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802ca6e:	687b      	ldr	r3, [r7, #4]
 802ca70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802ca72:	4618      	mov	r0, r3
 802ca74:	f7f7 f8c4 	bl	8023c00 <HAL_DMA_Abort_IT>
 802ca78:	4603      	mov	r3, r0
 802ca7a:	2b00      	cmp	r3, #0
 802ca7c:	d017      	beq.n	802caae <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802ca7e:	687b      	ldr	r3, [r7, #4]
 802ca80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802ca82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802ca84:	687a      	ldr	r2, [r7, #4]
 802ca86:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 802ca88:	4610      	mov	r0, r2
 802ca8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802ca8c:	e00f      	b.n	802caae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802ca8e:	6878      	ldr	r0, [r7, #4]
 802ca90:	f000 fa56 	bl	802cf40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802ca94:	e00b      	b.n	802caae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802ca96:	6878      	ldr	r0, [r7, #4]
 802ca98:	f000 fa52 	bl	802cf40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802ca9c:	e007      	b.n	802caae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802ca9e:	6878      	ldr	r0, [r7, #4]
 802caa0:	f000 fa4e 	bl	802cf40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802caa4:	687b      	ldr	r3, [r7, #4]
 802caa6:	2200      	movs	r2, #0
 802caa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 802caac:	e23b      	b.n	802cf26 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802caae:	bf00      	nop
    return;
 802cab0:	e239      	b.n	802cf26 <HAL_UART_IRQHandler+0x722>
 802cab2:	bf00      	nop
 802cab4:	10000001 	.word	0x10000001
 802cab8:	04000120 	.word	0x04000120
 802cabc:	0802e0c9 	.word	0x0802e0c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802cac0:	687b      	ldr	r3, [r7, #4]
 802cac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802cac4:	2b01      	cmp	r3, #1
 802cac6:	f040 81ce 	bne.w	802ce66 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 802caca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802cace:	f003 0310 	and.w	r3, r3, #16
 802cad2:	2b00      	cmp	r3, #0
 802cad4:	f000 81c7 	beq.w	802ce66 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 802cad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802cadc:	f003 0310 	and.w	r3, r3, #16
 802cae0:	2b00      	cmp	r3, #0
 802cae2:	f000 81c0 	beq.w	802ce66 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 802cae6:	687b      	ldr	r3, [r7, #4]
 802cae8:	681b      	ldr	r3, [r3, #0]
 802caea:	2210      	movs	r2, #16
 802caec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802caee:	687b      	ldr	r3, [r7, #4]
 802caf0:	681b      	ldr	r3, [r3, #0]
 802caf2:	689b      	ldr	r3, [r3, #8]
 802caf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802caf8:	2b40      	cmp	r3, #64	; 0x40
 802cafa:	f040 813b 	bne.w	802cd74 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 802cafe:	687b      	ldr	r3, [r7, #4]
 802cb00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb02:	681b      	ldr	r3, [r3, #0]
 802cb04:	4a8b      	ldr	r2, [pc, #556]	; (802cd34 <HAL_UART_IRQHandler+0x530>)
 802cb06:	4293      	cmp	r3, r2
 802cb08:	d059      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb0a:	687b      	ldr	r3, [r7, #4]
 802cb0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb0e:	681b      	ldr	r3, [r3, #0]
 802cb10:	4a89      	ldr	r2, [pc, #548]	; (802cd38 <HAL_UART_IRQHandler+0x534>)
 802cb12:	4293      	cmp	r3, r2
 802cb14:	d053      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb16:	687b      	ldr	r3, [r7, #4]
 802cb18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb1a:	681b      	ldr	r3, [r3, #0]
 802cb1c:	4a87      	ldr	r2, [pc, #540]	; (802cd3c <HAL_UART_IRQHandler+0x538>)
 802cb1e:	4293      	cmp	r3, r2
 802cb20:	d04d      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb22:	687b      	ldr	r3, [r7, #4]
 802cb24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb26:	681b      	ldr	r3, [r3, #0]
 802cb28:	4a85      	ldr	r2, [pc, #532]	; (802cd40 <HAL_UART_IRQHandler+0x53c>)
 802cb2a:	4293      	cmp	r3, r2
 802cb2c:	d047      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb2e:	687b      	ldr	r3, [r7, #4]
 802cb30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb32:	681b      	ldr	r3, [r3, #0]
 802cb34:	4a83      	ldr	r2, [pc, #524]	; (802cd44 <HAL_UART_IRQHandler+0x540>)
 802cb36:	4293      	cmp	r3, r2
 802cb38:	d041      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb3a:	687b      	ldr	r3, [r7, #4]
 802cb3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb3e:	681b      	ldr	r3, [r3, #0]
 802cb40:	4a81      	ldr	r2, [pc, #516]	; (802cd48 <HAL_UART_IRQHandler+0x544>)
 802cb42:	4293      	cmp	r3, r2
 802cb44:	d03b      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb46:	687b      	ldr	r3, [r7, #4]
 802cb48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb4a:	681b      	ldr	r3, [r3, #0]
 802cb4c:	4a7f      	ldr	r2, [pc, #508]	; (802cd4c <HAL_UART_IRQHandler+0x548>)
 802cb4e:	4293      	cmp	r3, r2
 802cb50:	d035      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb52:	687b      	ldr	r3, [r7, #4]
 802cb54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb56:	681b      	ldr	r3, [r3, #0]
 802cb58:	4a7d      	ldr	r2, [pc, #500]	; (802cd50 <HAL_UART_IRQHandler+0x54c>)
 802cb5a:	4293      	cmp	r3, r2
 802cb5c:	d02f      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb5e:	687b      	ldr	r3, [r7, #4]
 802cb60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb62:	681b      	ldr	r3, [r3, #0]
 802cb64:	4a7b      	ldr	r2, [pc, #492]	; (802cd54 <HAL_UART_IRQHandler+0x550>)
 802cb66:	4293      	cmp	r3, r2
 802cb68:	d029      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb6a:	687b      	ldr	r3, [r7, #4]
 802cb6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb6e:	681b      	ldr	r3, [r3, #0]
 802cb70:	4a79      	ldr	r2, [pc, #484]	; (802cd58 <HAL_UART_IRQHandler+0x554>)
 802cb72:	4293      	cmp	r3, r2
 802cb74:	d023      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb76:	687b      	ldr	r3, [r7, #4]
 802cb78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb7a:	681b      	ldr	r3, [r3, #0]
 802cb7c:	4a77      	ldr	r2, [pc, #476]	; (802cd5c <HAL_UART_IRQHandler+0x558>)
 802cb7e:	4293      	cmp	r3, r2
 802cb80:	d01d      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb82:	687b      	ldr	r3, [r7, #4]
 802cb84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb86:	681b      	ldr	r3, [r3, #0]
 802cb88:	4a75      	ldr	r2, [pc, #468]	; (802cd60 <HAL_UART_IRQHandler+0x55c>)
 802cb8a:	4293      	cmp	r3, r2
 802cb8c:	d017      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb8e:	687b      	ldr	r3, [r7, #4]
 802cb90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb92:	681b      	ldr	r3, [r3, #0]
 802cb94:	4a73      	ldr	r2, [pc, #460]	; (802cd64 <HAL_UART_IRQHandler+0x560>)
 802cb96:	4293      	cmp	r3, r2
 802cb98:	d011      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cb9a:	687b      	ldr	r3, [r7, #4]
 802cb9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cb9e:	681b      	ldr	r3, [r3, #0]
 802cba0:	4a71      	ldr	r2, [pc, #452]	; (802cd68 <HAL_UART_IRQHandler+0x564>)
 802cba2:	4293      	cmp	r3, r2
 802cba4:	d00b      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cba6:	687b      	ldr	r3, [r7, #4]
 802cba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cbaa:	681b      	ldr	r3, [r3, #0]
 802cbac:	4a6f      	ldr	r2, [pc, #444]	; (802cd6c <HAL_UART_IRQHandler+0x568>)
 802cbae:	4293      	cmp	r3, r2
 802cbb0:	d005      	beq.n	802cbbe <HAL_UART_IRQHandler+0x3ba>
 802cbb2:	687b      	ldr	r3, [r7, #4]
 802cbb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cbb6:	681b      	ldr	r3, [r3, #0]
 802cbb8:	4a6d      	ldr	r2, [pc, #436]	; (802cd70 <HAL_UART_IRQHandler+0x56c>)
 802cbba:	4293      	cmp	r3, r2
 802cbbc:	d105      	bne.n	802cbca <HAL_UART_IRQHandler+0x3c6>
 802cbbe:	687b      	ldr	r3, [r7, #4]
 802cbc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cbc2:	681b      	ldr	r3, [r3, #0]
 802cbc4:	685b      	ldr	r3, [r3, #4]
 802cbc6:	b29b      	uxth	r3, r3
 802cbc8:	e004      	b.n	802cbd4 <HAL_UART_IRQHandler+0x3d0>
 802cbca:	687b      	ldr	r3, [r7, #4]
 802cbcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cbce:	681b      	ldr	r3, [r3, #0]
 802cbd0:	685b      	ldr	r3, [r3, #4]
 802cbd2:	b29b      	uxth	r3, r3
 802cbd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 802cbd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 802cbdc:	2b00      	cmp	r3, #0
 802cbde:	f000 81a4 	beq.w	802cf2a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802cbe2:	687b      	ldr	r3, [r7, #4]
 802cbe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802cbe8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802cbec:	429a      	cmp	r2, r3
 802cbee:	f080 819c 	bcs.w	802cf2a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802cbf2:	687b      	ldr	r3, [r7, #4]
 802cbf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802cbf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 802cbfc:	687b      	ldr	r3, [r7, #4]
 802cbfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cc00:	69db      	ldr	r3, [r3, #28]
 802cc02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802cc06:	f000 8086 	beq.w	802cd16 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802cc0a:	687b      	ldr	r3, [r7, #4]
 802cc0c:	681b      	ldr	r3, [r3, #0]
 802cc0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802cc12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802cc16:	e853 3f00 	ldrex	r3, [r3]
 802cc1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 802cc1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802cc22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802cc26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802cc2a:	687b      	ldr	r3, [r7, #4]
 802cc2c:	681b      	ldr	r3, [r3, #0]
 802cc2e:	461a      	mov	r2, r3
 802cc30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802cc34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802cc38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802cc3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802cc40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802cc44:	e841 2300 	strex	r3, r2, [r1]
 802cc48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 802cc4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802cc50:	2b00      	cmp	r3, #0
 802cc52:	d1da      	bne.n	802cc0a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802cc54:	687b      	ldr	r3, [r7, #4]
 802cc56:	681b      	ldr	r3, [r3, #0]
 802cc58:	3308      	adds	r3, #8
 802cc5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802cc5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802cc5e:	e853 3f00 	ldrex	r3, [r3]
 802cc62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802cc64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802cc66:	f023 0301 	bic.w	r3, r3, #1
 802cc6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802cc6e:	687b      	ldr	r3, [r7, #4]
 802cc70:	681b      	ldr	r3, [r3, #0]
 802cc72:	3308      	adds	r3, #8
 802cc74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802cc78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802cc7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802cc7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 802cc80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802cc84:	e841 2300 	strex	r3, r2, [r1]
 802cc88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 802cc8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802cc8c:	2b00      	cmp	r3, #0
 802cc8e:	d1e1      	bne.n	802cc54 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802cc90:	687b      	ldr	r3, [r7, #4]
 802cc92:	681b      	ldr	r3, [r3, #0]
 802cc94:	3308      	adds	r3, #8
 802cc96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802cc98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802cc9a:	e853 3f00 	ldrex	r3, [r3]
 802cc9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 802cca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802cca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802cca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802ccaa:	687b      	ldr	r3, [r7, #4]
 802ccac:	681b      	ldr	r3, [r3, #0]
 802ccae:	3308      	adds	r3, #8
 802ccb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802ccb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 802ccb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ccb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802ccba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802ccbc:	e841 2300 	strex	r3, r2, [r1]
 802ccc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 802ccc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802ccc4:	2b00      	cmp	r3, #0
 802ccc6:	d1e3      	bne.n	802cc90 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802ccc8:	687b      	ldr	r3, [r7, #4]
 802ccca:	2220      	movs	r2, #32
 802cccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802ccd0:	687b      	ldr	r3, [r7, #4]
 802ccd2:	2200      	movs	r2, #0
 802ccd4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802ccd6:	687b      	ldr	r3, [r7, #4]
 802ccd8:	681b      	ldr	r3, [r3, #0]
 802ccda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ccdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ccde:	e853 3f00 	ldrex	r3, [r3]
 802cce2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802cce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802cce6:	f023 0310 	bic.w	r3, r3, #16
 802ccea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802ccee:	687b      	ldr	r3, [r7, #4]
 802ccf0:	681b      	ldr	r3, [r3, #0]
 802ccf2:	461a      	mov	r2, r3
 802ccf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802ccf8:	65bb      	str	r3, [r7, #88]	; 0x58
 802ccfa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ccfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802ccfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802cd00:	e841 2300 	strex	r3, r2, [r1]
 802cd04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802cd06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802cd08:	2b00      	cmp	r3, #0
 802cd0a:	d1e4      	bne.n	802ccd6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 802cd0c:	687b      	ldr	r3, [r7, #4]
 802cd0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cd10:	4618      	mov	r0, r3
 802cd12:	f7f6 fc57 	bl	80235c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802cd16:	687b      	ldr	r3, [r7, #4]
 802cd18:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 802cd1c:	687b      	ldr	r3, [r7, #4]
 802cd1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802cd22:	b29b      	uxth	r3, r3
 802cd24:	1ad3      	subs	r3, r2, r3
 802cd26:	b29b      	uxth	r3, r3
 802cd28:	4619      	mov	r1, r3
 802cd2a:	6878      	ldr	r0, [r7, #4]
 802cd2c:	f000 f912 	bl	802cf54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 802cd30:	e0fb      	b.n	802cf2a <HAL_UART_IRQHandler+0x726>
 802cd32:	bf00      	nop
 802cd34:	40020010 	.word	0x40020010
 802cd38:	40020028 	.word	0x40020028
 802cd3c:	40020040 	.word	0x40020040
 802cd40:	40020058 	.word	0x40020058
 802cd44:	40020070 	.word	0x40020070
 802cd48:	40020088 	.word	0x40020088
 802cd4c:	400200a0 	.word	0x400200a0
 802cd50:	400200b8 	.word	0x400200b8
 802cd54:	40020410 	.word	0x40020410
 802cd58:	40020428 	.word	0x40020428
 802cd5c:	40020440 	.word	0x40020440
 802cd60:	40020458 	.word	0x40020458
 802cd64:	40020470 	.word	0x40020470
 802cd68:	40020488 	.word	0x40020488
 802cd6c:	400204a0 	.word	0x400204a0
 802cd70:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802cd74:	687b      	ldr	r3, [r7, #4]
 802cd76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 802cd7a:	687b      	ldr	r3, [r7, #4]
 802cd7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802cd80:	b29b      	uxth	r3, r3
 802cd82:	1ad3      	subs	r3, r2, r3
 802cd84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 802cd88:	687b      	ldr	r3, [r7, #4]
 802cd8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802cd8e:	b29b      	uxth	r3, r3
 802cd90:	2b00      	cmp	r3, #0
 802cd92:	f000 80cc 	beq.w	802cf2e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 802cd96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802cd9a:	2b00      	cmp	r3, #0
 802cd9c:	f000 80c7 	beq.w	802cf2e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802cda0:	687b      	ldr	r3, [r7, #4]
 802cda2:	681b      	ldr	r3, [r3, #0]
 802cda4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802cda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cda8:	e853 3f00 	ldrex	r3, [r3]
 802cdac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802cdae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802cdb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802cdb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802cdb8:	687b      	ldr	r3, [r7, #4]
 802cdba:	681b      	ldr	r3, [r3, #0]
 802cdbc:	461a      	mov	r2, r3
 802cdbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802cdc2:	647b      	str	r3, [r7, #68]	; 0x44
 802cdc4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802cdc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802cdc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802cdca:	e841 2300 	strex	r3, r2, [r1]
 802cdce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802cdd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802cdd2:	2b00      	cmp	r3, #0
 802cdd4:	d1e4      	bne.n	802cda0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802cdd6:	687b      	ldr	r3, [r7, #4]
 802cdd8:	681b      	ldr	r3, [r3, #0]
 802cdda:	3308      	adds	r3, #8
 802cddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802cdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cde0:	e853 3f00 	ldrex	r3, [r3]
 802cde4:	623b      	str	r3, [r7, #32]
   return(result);
 802cde6:	6a3a      	ldr	r2, [r7, #32]
 802cde8:	4b54      	ldr	r3, [pc, #336]	; (802cf3c <HAL_UART_IRQHandler+0x738>)
 802cdea:	4013      	ands	r3, r2
 802cdec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802cdf0:	687b      	ldr	r3, [r7, #4]
 802cdf2:	681b      	ldr	r3, [r3, #0]
 802cdf4:	3308      	adds	r3, #8
 802cdf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802cdfa:	633a      	str	r2, [r7, #48]	; 0x30
 802cdfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802cdfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802ce00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802ce02:	e841 2300 	strex	r3, r2, [r1]
 802ce06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802ce08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ce0a:	2b00      	cmp	r3, #0
 802ce0c:	d1e3      	bne.n	802cdd6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802ce0e:	687b      	ldr	r3, [r7, #4]
 802ce10:	2220      	movs	r2, #32
 802ce12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802ce16:	687b      	ldr	r3, [r7, #4]
 802ce18:	2200      	movs	r2, #0
 802ce1a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 802ce1c:	687b      	ldr	r3, [r7, #4]
 802ce1e:	2200      	movs	r2, #0
 802ce20:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802ce22:	687b      	ldr	r3, [r7, #4]
 802ce24:	681b      	ldr	r3, [r3, #0]
 802ce26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ce28:	693b      	ldr	r3, [r7, #16]
 802ce2a:	e853 3f00 	ldrex	r3, [r3]
 802ce2e:	60fb      	str	r3, [r7, #12]
   return(result);
 802ce30:	68fb      	ldr	r3, [r7, #12]
 802ce32:	f023 0310 	bic.w	r3, r3, #16
 802ce36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802ce3a:	687b      	ldr	r3, [r7, #4]
 802ce3c:	681b      	ldr	r3, [r3, #0]
 802ce3e:	461a      	mov	r2, r3
 802ce40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 802ce44:	61fb      	str	r3, [r7, #28]
 802ce46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ce48:	69b9      	ldr	r1, [r7, #24]
 802ce4a:	69fa      	ldr	r2, [r7, #28]
 802ce4c:	e841 2300 	strex	r3, r2, [r1]
 802ce50:	617b      	str	r3, [r7, #20]
   return(result);
 802ce52:	697b      	ldr	r3, [r7, #20]
 802ce54:	2b00      	cmp	r3, #0
 802ce56:	d1e4      	bne.n	802ce22 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802ce58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802ce5c:	4619      	mov	r1, r3
 802ce5e:	6878      	ldr	r0, [r7, #4]
 802ce60:	f000 f878 	bl	802cf54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 802ce64:	e063      	b.n	802cf2e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 802ce66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802ce6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802ce6e:	2b00      	cmp	r3, #0
 802ce70:	d00e      	beq.n	802ce90 <HAL_UART_IRQHandler+0x68c>
 802ce72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802ce76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802ce7a:	2b00      	cmp	r3, #0
 802ce7c:	d008      	beq.n	802ce90 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 802ce7e:	687b      	ldr	r3, [r7, #4]
 802ce80:	681b      	ldr	r3, [r3, #0]
 802ce82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 802ce86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 802ce88:	6878      	ldr	r0, [r7, #4]
 802ce8a:	f001 ff5d 	bl	802ed48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 802ce8e:	e051      	b.n	802cf34 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 802ce90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802ce94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802ce98:	2b00      	cmp	r3, #0
 802ce9a:	d014      	beq.n	802cec6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 802ce9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802cea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802cea4:	2b00      	cmp	r3, #0
 802cea6:	d105      	bne.n	802ceb4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 802cea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802ceac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802ceb0:	2b00      	cmp	r3, #0
 802ceb2:	d008      	beq.n	802cec6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 802ceb4:	687b      	ldr	r3, [r7, #4]
 802ceb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802ceb8:	2b00      	cmp	r3, #0
 802ceba:	d03a      	beq.n	802cf32 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 802cebc:	687b      	ldr	r3, [r7, #4]
 802cebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802cec0:	6878      	ldr	r0, [r7, #4]
 802cec2:	4798      	blx	r3
    }
    return;
 802cec4:	e035      	b.n	802cf32 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 802cec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802ceca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802cece:	2b00      	cmp	r3, #0
 802ced0:	d009      	beq.n	802cee6 <HAL_UART_IRQHandler+0x6e2>
 802ced2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802ced6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ceda:	2b00      	cmp	r3, #0
 802cedc:	d003      	beq.n	802cee6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 802cede:	6878      	ldr	r0, [r7, #4]
 802cee0:	f001 faaa 	bl	802e438 <UART_EndTransmit_IT>
    return;
 802cee4:	e026      	b.n	802cf34 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 802cee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802ceea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802ceee:	2b00      	cmp	r3, #0
 802cef0:	d009      	beq.n	802cf06 <HAL_UART_IRQHandler+0x702>
 802cef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802cef6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802cefa:	2b00      	cmp	r3, #0
 802cefc:	d003      	beq.n	802cf06 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 802cefe:	6878      	ldr	r0, [r7, #4]
 802cf00:	f001 ff36 	bl	802ed70 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 802cf04:	e016      	b.n	802cf34 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 802cf06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802cf0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802cf0e:	2b00      	cmp	r3, #0
 802cf10:	d010      	beq.n	802cf34 <HAL_UART_IRQHandler+0x730>
 802cf12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802cf16:	2b00      	cmp	r3, #0
 802cf18:	da0c      	bge.n	802cf34 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 802cf1a:	6878      	ldr	r0, [r7, #4]
 802cf1c:	f001 ff1e 	bl	802ed5c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 802cf20:	e008      	b.n	802cf34 <HAL_UART_IRQHandler+0x730>
      return;
 802cf22:	bf00      	nop
 802cf24:	e006      	b.n	802cf34 <HAL_UART_IRQHandler+0x730>
    return;
 802cf26:	bf00      	nop
 802cf28:	e004      	b.n	802cf34 <HAL_UART_IRQHandler+0x730>
      return;
 802cf2a:	bf00      	nop
 802cf2c:	e002      	b.n	802cf34 <HAL_UART_IRQHandler+0x730>
      return;
 802cf2e:	bf00      	nop
 802cf30:	e000      	b.n	802cf34 <HAL_UART_IRQHandler+0x730>
    return;
 802cf32:	bf00      	nop
  }
}
 802cf34:	37e8      	adds	r7, #232	; 0xe8
 802cf36:	46bd      	mov	sp, r7
 802cf38:	bd80      	pop	{r7, pc}
 802cf3a:	bf00      	nop
 802cf3c:	effffffe 	.word	0xeffffffe

0802cf40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802cf40:	b480      	push	{r7}
 802cf42:	b083      	sub	sp, #12
 802cf44:	af00      	add	r7, sp, #0
 802cf46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 802cf48:	bf00      	nop
 802cf4a:	370c      	adds	r7, #12
 802cf4c:	46bd      	mov	sp, r7
 802cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cf52:	4770      	bx	lr

0802cf54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 802cf54:	b480      	push	{r7}
 802cf56:	b083      	sub	sp, #12
 802cf58:	af00      	add	r7, sp, #0
 802cf5a:	6078      	str	r0, [r7, #4]
 802cf5c:	460b      	mov	r3, r1
 802cf5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802cf60:	bf00      	nop
 802cf62:	370c      	adds	r7, #12
 802cf64:	46bd      	mov	sp, r7
 802cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cf6a:	4770      	bx	lr

0802cf6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 802cf6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802cf70:	b092      	sub	sp, #72	; 0x48
 802cf72:	af00      	add	r7, sp, #0
 802cf74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 802cf76:	2300      	movs	r3, #0
 802cf78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802cf7c:	697b      	ldr	r3, [r7, #20]
 802cf7e:	689a      	ldr	r2, [r3, #8]
 802cf80:	697b      	ldr	r3, [r7, #20]
 802cf82:	691b      	ldr	r3, [r3, #16]
 802cf84:	431a      	orrs	r2, r3
 802cf86:	697b      	ldr	r3, [r7, #20]
 802cf88:	695b      	ldr	r3, [r3, #20]
 802cf8a:	431a      	orrs	r2, r3
 802cf8c:	697b      	ldr	r3, [r7, #20]
 802cf8e:	69db      	ldr	r3, [r3, #28]
 802cf90:	4313      	orrs	r3, r2
 802cf92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802cf94:	697b      	ldr	r3, [r7, #20]
 802cf96:	681b      	ldr	r3, [r3, #0]
 802cf98:	681a      	ldr	r2, [r3, #0]
 802cf9a:	4bbe      	ldr	r3, [pc, #760]	; (802d294 <UART_SetConfig+0x328>)
 802cf9c:	4013      	ands	r3, r2
 802cf9e:	697a      	ldr	r2, [r7, #20]
 802cfa0:	6812      	ldr	r2, [r2, #0]
 802cfa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802cfa4:	430b      	orrs	r3, r1
 802cfa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802cfa8:	697b      	ldr	r3, [r7, #20]
 802cfaa:	681b      	ldr	r3, [r3, #0]
 802cfac:	685b      	ldr	r3, [r3, #4]
 802cfae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802cfb2:	697b      	ldr	r3, [r7, #20]
 802cfb4:	68da      	ldr	r2, [r3, #12]
 802cfb6:	697b      	ldr	r3, [r7, #20]
 802cfb8:	681b      	ldr	r3, [r3, #0]
 802cfba:	430a      	orrs	r2, r1
 802cfbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802cfbe:	697b      	ldr	r3, [r7, #20]
 802cfc0:	699b      	ldr	r3, [r3, #24]
 802cfc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 802cfc4:	697b      	ldr	r3, [r7, #20]
 802cfc6:	681b      	ldr	r3, [r3, #0]
 802cfc8:	4ab3      	ldr	r2, [pc, #716]	; (802d298 <UART_SetConfig+0x32c>)
 802cfca:	4293      	cmp	r3, r2
 802cfcc:	d004      	beq.n	802cfd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802cfce:	697b      	ldr	r3, [r7, #20]
 802cfd0:	6a1b      	ldr	r3, [r3, #32]
 802cfd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802cfd4:	4313      	orrs	r3, r2
 802cfd6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 802cfd8:	697b      	ldr	r3, [r7, #20]
 802cfda:	681b      	ldr	r3, [r3, #0]
 802cfdc:	689a      	ldr	r2, [r3, #8]
 802cfde:	4baf      	ldr	r3, [pc, #700]	; (802d29c <UART_SetConfig+0x330>)
 802cfe0:	4013      	ands	r3, r2
 802cfe2:	697a      	ldr	r2, [r7, #20]
 802cfe4:	6812      	ldr	r2, [r2, #0]
 802cfe6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802cfe8:	430b      	orrs	r3, r1
 802cfea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 802cfec:	697b      	ldr	r3, [r7, #20]
 802cfee:	681b      	ldr	r3, [r3, #0]
 802cff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cff2:	f023 010f 	bic.w	r1, r3, #15
 802cff6:	697b      	ldr	r3, [r7, #20]
 802cff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802cffa:	697b      	ldr	r3, [r7, #20]
 802cffc:	681b      	ldr	r3, [r3, #0]
 802cffe:	430a      	orrs	r2, r1
 802d000:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802d002:	697b      	ldr	r3, [r7, #20]
 802d004:	681b      	ldr	r3, [r3, #0]
 802d006:	4aa6      	ldr	r2, [pc, #664]	; (802d2a0 <UART_SetConfig+0x334>)
 802d008:	4293      	cmp	r3, r2
 802d00a:	d177      	bne.n	802d0fc <UART_SetConfig+0x190>
 802d00c:	4ba5      	ldr	r3, [pc, #660]	; (802d2a4 <UART_SetConfig+0x338>)
 802d00e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d010:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802d014:	2b28      	cmp	r3, #40	; 0x28
 802d016:	d86d      	bhi.n	802d0f4 <UART_SetConfig+0x188>
 802d018:	a201      	add	r2, pc, #4	; (adr r2, 802d020 <UART_SetConfig+0xb4>)
 802d01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d01e:	bf00      	nop
 802d020:	0802d0c5 	.word	0x0802d0c5
 802d024:	0802d0f5 	.word	0x0802d0f5
 802d028:	0802d0f5 	.word	0x0802d0f5
 802d02c:	0802d0f5 	.word	0x0802d0f5
 802d030:	0802d0f5 	.word	0x0802d0f5
 802d034:	0802d0f5 	.word	0x0802d0f5
 802d038:	0802d0f5 	.word	0x0802d0f5
 802d03c:	0802d0f5 	.word	0x0802d0f5
 802d040:	0802d0cd 	.word	0x0802d0cd
 802d044:	0802d0f5 	.word	0x0802d0f5
 802d048:	0802d0f5 	.word	0x0802d0f5
 802d04c:	0802d0f5 	.word	0x0802d0f5
 802d050:	0802d0f5 	.word	0x0802d0f5
 802d054:	0802d0f5 	.word	0x0802d0f5
 802d058:	0802d0f5 	.word	0x0802d0f5
 802d05c:	0802d0f5 	.word	0x0802d0f5
 802d060:	0802d0d5 	.word	0x0802d0d5
 802d064:	0802d0f5 	.word	0x0802d0f5
 802d068:	0802d0f5 	.word	0x0802d0f5
 802d06c:	0802d0f5 	.word	0x0802d0f5
 802d070:	0802d0f5 	.word	0x0802d0f5
 802d074:	0802d0f5 	.word	0x0802d0f5
 802d078:	0802d0f5 	.word	0x0802d0f5
 802d07c:	0802d0f5 	.word	0x0802d0f5
 802d080:	0802d0dd 	.word	0x0802d0dd
 802d084:	0802d0f5 	.word	0x0802d0f5
 802d088:	0802d0f5 	.word	0x0802d0f5
 802d08c:	0802d0f5 	.word	0x0802d0f5
 802d090:	0802d0f5 	.word	0x0802d0f5
 802d094:	0802d0f5 	.word	0x0802d0f5
 802d098:	0802d0f5 	.word	0x0802d0f5
 802d09c:	0802d0f5 	.word	0x0802d0f5
 802d0a0:	0802d0e5 	.word	0x0802d0e5
 802d0a4:	0802d0f5 	.word	0x0802d0f5
 802d0a8:	0802d0f5 	.word	0x0802d0f5
 802d0ac:	0802d0f5 	.word	0x0802d0f5
 802d0b0:	0802d0f5 	.word	0x0802d0f5
 802d0b4:	0802d0f5 	.word	0x0802d0f5
 802d0b8:	0802d0f5 	.word	0x0802d0f5
 802d0bc:	0802d0f5 	.word	0x0802d0f5
 802d0c0:	0802d0ed 	.word	0x0802d0ed
 802d0c4:	2301      	movs	r3, #1
 802d0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d0ca:	e222      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d0cc:	2304      	movs	r3, #4
 802d0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d0d2:	e21e      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d0d4:	2308      	movs	r3, #8
 802d0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d0da:	e21a      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d0dc:	2310      	movs	r3, #16
 802d0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d0e2:	e216      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d0e4:	2320      	movs	r3, #32
 802d0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d0ea:	e212      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d0ec:	2340      	movs	r3, #64	; 0x40
 802d0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d0f2:	e20e      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d0f4:	2380      	movs	r3, #128	; 0x80
 802d0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d0fa:	e20a      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d0fc:	697b      	ldr	r3, [r7, #20]
 802d0fe:	681b      	ldr	r3, [r3, #0]
 802d100:	4a69      	ldr	r2, [pc, #420]	; (802d2a8 <UART_SetConfig+0x33c>)
 802d102:	4293      	cmp	r3, r2
 802d104:	d130      	bne.n	802d168 <UART_SetConfig+0x1fc>
 802d106:	4b67      	ldr	r3, [pc, #412]	; (802d2a4 <UART_SetConfig+0x338>)
 802d108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d10a:	f003 0307 	and.w	r3, r3, #7
 802d10e:	2b05      	cmp	r3, #5
 802d110:	d826      	bhi.n	802d160 <UART_SetConfig+0x1f4>
 802d112:	a201      	add	r2, pc, #4	; (adr r2, 802d118 <UART_SetConfig+0x1ac>)
 802d114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d118:	0802d131 	.word	0x0802d131
 802d11c:	0802d139 	.word	0x0802d139
 802d120:	0802d141 	.word	0x0802d141
 802d124:	0802d149 	.word	0x0802d149
 802d128:	0802d151 	.word	0x0802d151
 802d12c:	0802d159 	.word	0x0802d159
 802d130:	2300      	movs	r3, #0
 802d132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d136:	e1ec      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d138:	2304      	movs	r3, #4
 802d13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d13e:	e1e8      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d140:	2308      	movs	r3, #8
 802d142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d146:	e1e4      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d148:	2310      	movs	r3, #16
 802d14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d14e:	e1e0      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d150:	2320      	movs	r3, #32
 802d152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d156:	e1dc      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d158:	2340      	movs	r3, #64	; 0x40
 802d15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d15e:	e1d8      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d160:	2380      	movs	r3, #128	; 0x80
 802d162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d166:	e1d4      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d168:	697b      	ldr	r3, [r7, #20]
 802d16a:	681b      	ldr	r3, [r3, #0]
 802d16c:	4a4f      	ldr	r2, [pc, #316]	; (802d2ac <UART_SetConfig+0x340>)
 802d16e:	4293      	cmp	r3, r2
 802d170:	d130      	bne.n	802d1d4 <UART_SetConfig+0x268>
 802d172:	4b4c      	ldr	r3, [pc, #304]	; (802d2a4 <UART_SetConfig+0x338>)
 802d174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d176:	f003 0307 	and.w	r3, r3, #7
 802d17a:	2b05      	cmp	r3, #5
 802d17c:	d826      	bhi.n	802d1cc <UART_SetConfig+0x260>
 802d17e:	a201      	add	r2, pc, #4	; (adr r2, 802d184 <UART_SetConfig+0x218>)
 802d180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d184:	0802d19d 	.word	0x0802d19d
 802d188:	0802d1a5 	.word	0x0802d1a5
 802d18c:	0802d1ad 	.word	0x0802d1ad
 802d190:	0802d1b5 	.word	0x0802d1b5
 802d194:	0802d1bd 	.word	0x0802d1bd
 802d198:	0802d1c5 	.word	0x0802d1c5
 802d19c:	2300      	movs	r3, #0
 802d19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d1a2:	e1b6      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d1a4:	2304      	movs	r3, #4
 802d1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d1aa:	e1b2      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d1ac:	2308      	movs	r3, #8
 802d1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d1b2:	e1ae      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d1b4:	2310      	movs	r3, #16
 802d1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d1ba:	e1aa      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d1bc:	2320      	movs	r3, #32
 802d1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d1c2:	e1a6      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d1c4:	2340      	movs	r3, #64	; 0x40
 802d1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d1ca:	e1a2      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d1cc:	2380      	movs	r3, #128	; 0x80
 802d1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d1d2:	e19e      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d1d4:	697b      	ldr	r3, [r7, #20]
 802d1d6:	681b      	ldr	r3, [r3, #0]
 802d1d8:	4a35      	ldr	r2, [pc, #212]	; (802d2b0 <UART_SetConfig+0x344>)
 802d1da:	4293      	cmp	r3, r2
 802d1dc:	d130      	bne.n	802d240 <UART_SetConfig+0x2d4>
 802d1de:	4b31      	ldr	r3, [pc, #196]	; (802d2a4 <UART_SetConfig+0x338>)
 802d1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d1e2:	f003 0307 	and.w	r3, r3, #7
 802d1e6:	2b05      	cmp	r3, #5
 802d1e8:	d826      	bhi.n	802d238 <UART_SetConfig+0x2cc>
 802d1ea:	a201      	add	r2, pc, #4	; (adr r2, 802d1f0 <UART_SetConfig+0x284>)
 802d1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d1f0:	0802d209 	.word	0x0802d209
 802d1f4:	0802d211 	.word	0x0802d211
 802d1f8:	0802d219 	.word	0x0802d219
 802d1fc:	0802d221 	.word	0x0802d221
 802d200:	0802d229 	.word	0x0802d229
 802d204:	0802d231 	.word	0x0802d231
 802d208:	2300      	movs	r3, #0
 802d20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d20e:	e180      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d210:	2304      	movs	r3, #4
 802d212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d216:	e17c      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d218:	2308      	movs	r3, #8
 802d21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d21e:	e178      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d220:	2310      	movs	r3, #16
 802d222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d226:	e174      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d228:	2320      	movs	r3, #32
 802d22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d22e:	e170      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d230:	2340      	movs	r3, #64	; 0x40
 802d232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d236:	e16c      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d238:	2380      	movs	r3, #128	; 0x80
 802d23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d23e:	e168      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d240:	697b      	ldr	r3, [r7, #20]
 802d242:	681b      	ldr	r3, [r3, #0]
 802d244:	4a1b      	ldr	r2, [pc, #108]	; (802d2b4 <UART_SetConfig+0x348>)
 802d246:	4293      	cmp	r3, r2
 802d248:	d142      	bne.n	802d2d0 <UART_SetConfig+0x364>
 802d24a:	4b16      	ldr	r3, [pc, #88]	; (802d2a4 <UART_SetConfig+0x338>)
 802d24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d24e:	f003 0307 	and.w	r3, r3, #7
 802d252:	2b05      	cmp	r3, #5
 802d254:	d838      	bhi.n	802d2c8 <UART_SetConfig+0x35c>
 802d256:	a201      	add	r2, pc, #4	; (adr r2, 802d25c <UART_SetConfig+0x2f0>)
 802d258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d25c:	0802d275 	.word	0x0802d275
 802d260:	0802d27d 	.word	0x0802d27d
 802d264:	0802d285 	.word	0x0802d285
 802d268:	0802d28d 	.word	0x0802d28d
 802d26c:	0802d2b9 	.word	0x0802d2b9
 802d270:	0802d2c1 	.word	0x0802d2c1
 802d274:	2300      	movs	r3, #0
 802d276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d27a:	e14a      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d27c:	2304      	movs	r3, #4
 802d27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d282:	e146      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d284:	2308      	movs	r3, #8
 802d286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d28a:	e142      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d28c:	2310      	movs	r3, #16
 802d28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d292:	e13e      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d294:	cfff69f3 	.word	0xcfff69f3
 802d298:	58000c00 	.word	0x58000c00
 802d29c:	11fff4ff 	.word	0x11fff4ff
 802d2a0:	40011000 	.word	0x40011000
 802d2a4:	58024400 	.word	0x58024400
 802d2a8:	40004400 	.word	0x40004400
 802d2ac:	40004800 	.word	0x40004800
 802d2b0:	40004c00 	.word	0x40004c00
 802d2b4:	40005000 	.word	0x40005000
 802d2b8:	2320      	movs	r3, #32
 802d2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d2be:	e128      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d2c0:	2340      	movs	r3, #64	; 0x40
 802d2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d2c6:	e124      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d2c8:	2380      	movs	r3, #128	; 0x80
 802d2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d2ce:	e120      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d2d0:	697b      	ldr	r3, [r7, #20]
 802d2d2:	681b      	ldr	r3, [r3, #0]
 802d2d4:	4acb      	ldr	r2, [pc, #812]	; (802d604 <UART_SetConfig+0x698>)
 802d2d6:	4293      	cmp	r3, r2
 802d2d8:	d176      	bne.n	802d3c8 <UART_SetConfig+0x45c>
 802d2da:	4bcb      	ldr	r3, [pc, #812]	; (802d608 <UART_SetConfig+0x69c>)
 802d2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d2de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802d2e2:	2b28      	cmp	r3, #40	; 0x28
 802d2e4:	d86c      	bhi.n	802d3c0 <UART_SetConfig+0x454>
 802d2e6:	a201      	add	r2, pc, #4	; (adr r2, 802d2ec <UART_SetConfig+0x380>)
 802d2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d2ec:	0802d391 	.word	0x0802d391
 802d2f0:	0802d3c1 	.word	0x0802d3c1
 802d2f4:	0802d3c1 	.word	0x0802d3c1
 802d2f8:	0802d3c1 	.word	0x0802d3c1
 802d2fc:	0802d3c1 	.word	0x0802d3c1
 802d300:	0802d3c1 	.word	0x0802d3c1
 802d304:	0802d3c1 	.word	0x0802d3c1
 802d308:	0802d3c1 	.word	0x0802d3c1
 802d30c:	0802d399 	.word	0x0802d399
 802d310:	0802d3c1 	.word	0x0802d3c1
 802d314:	0802d3c1 	.word	0x0802d3c1
 802d318:	0802d3c1 	.word	0x0802d3c1
 802d31c:	0802d3c1 	.word	0x0802d3c1
 802d320:	0802d3c1 	.word	0x0802d3c1
 802d324:	0802d3c1 	.word	0x0802d3c1
 802d328:	0802d3c1 	.word	0x0802d3c1
 802d32c:	0802d3a1 	.word	0x0802d3a1
 802d330:	0802d3c1 	.word	0x0802d3c1
 802d334:	0802d3c1 	.word	0x0802d3c1
 802d338:	0802d3c1 	.word	0x0802d3c1
 802d33c:	0802d3c1 	.word	0x0802d3c1
 802d340:	0802d3c1 	.word	0x0802d3c1
 802d344:	0802d3c1 	.word	0x0802d3c1
 802d348:	0802d3c1 	.word	0x0802d3c1
 802d34c:	0802d3a9 	.word	0x0802d3a9
 802d350:	0802d3c1 	.word	0x0802d3c1
 802d354:	0802d3c1 	.word	0x0802d3c1
 802d358:	0802d3c1 	.word	0x0802d3c1
 802d35c:	0802d3c1 	.word	0x0802d3c1
 802d360:	0802d3c1 	.word	0x0802d3c1
 802d364:	0802d3c1 	.word	0x0802d3c1
 802d368:	0802d3c1 	.word	0x0802d3c1
 802d36c:	0802d3b1 	.word	0x0802d3b1
 802d370:	0802d3c1 	.word	0x0802d3c1
 802d374:	0802d3c1 	.word	0x0802d3c1
 802d378:	0802d3c1 	.word	0x0802d3c1
 802d37c:	0802d3c1 	.word	0x0802d3c1
 802d380:	0802d3c1 	.word	0x0802d3c1
 802d384:	0802d3c1 	.word	0x0802d3c1
 802d388:	0802d3c1 	.word	0x0802d3c1
 802d38c:	0802d3b9 	.word	0x0802d3b9
 802d390:	2301      	movs	r3, #1
 802d392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d396:	e0bc      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d398:	2304      	movs	r3, #4
 802d39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d39e:	e0b8      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d3a0:	2308      	movs	r3, #8
 802d3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d3a6:	e0b4      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d3a8:	2310      	movs	r3, #16
 802d3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d3ae:	e0b0      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d3b0:	2320      	movs	r3, #32
 802d3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d3b6:	e0ac      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d3b8:	2340      	movs	r3, #64	; 0x40
 802d3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d3be:	e0a8      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d3c0:	2380      	movs	r3, #128	; 0x80
 802d3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d3c6:	e0a4      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d3c8:	697b      	ldr	r3, [r7, #20]
 802d3ca:	681b      	ldr	r3, [r3, #0]
 802d3cc:	4a8f      	ldr	r2, [pc, #572]	; (802d60c <UART_SetConfig+0x6a0>)
 802d3ce:	4293      	cmp	r3, r2
 802d3d0:	d130      	bne.n	802d434 <UART_SetConfig+0x4c8>
 802d3d2:	4b8d      	ldr	r3, [pc, #564]	; (802d608 <UART_SetConfig+0x69c>)
 802d3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d3d6:	f003 0307 	and.w	r3, r3, #7
 802d3da:	2b05      	cmp	r3, #5
 802d3dc:	d826      	bhi.n	802d42c <UART_SetConfig+0x4c0>
 802d3de:	a201      	add	r2, pc, #4	; (adr r2, 802d3e4 <UART_SetConfig+0x478>)
 802d3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d3e4:	0802d3fd 	.word	0x0802d3fd
 802d3e8:	0802d405 	.word	0x0802d405
 802d3ec:	0802d40d 	.word	0x0802d40d
 802d3f0:	0802d415 	.word	0x0802d415
 802d3f4:	0802d41d 	.word	0x0802d41d
 802d3f8:	0802d425 	.word	0x0802d425
 802d3fc:	2300      	movs	r3, #0
 802d3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d402:	e086      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d404:	2304      	movs	r3, #4
 802d406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d40a:	e082      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d40c:	2308      	movs	r3, #8
 802d40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d412:	e07e      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d414:	2310      	movs	r3, #16
 802d416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d41a:	e07a      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d41c:	2320      	movs	r3, #32
 802d41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d422:	e076      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d424:	2340      	movs	r3, #64	; 0x40
 802d426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d42a:	e072      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d42c:	2380      	movs	r3, #128	; 0x80
 802d42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d432:	e06e      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d434:	697b      	ldr	r3, [r7, #20]
 802d436:	681b      	ldr	r3, [r3, #0]
 802d438:	4a75      	ldr	r2, [pc, #468]	; (802d610 <UART_SetConfig+0x6a4>)
 802d43a:	4293      	cmp	r3, r2
 802d43c:	d130      	bne.n	802d4a0 <UART_SetConfig+0x534>
 802d43e:	4b72      	ldr	r3, [pc, #456]	; (802d608 <UART_SetConfig+0x69c>)
 802d440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d442:	f003 0307 	and.w	r3, r3, #7
 802d446:	2b05      	cmp	r3, #5
 802d448:	d826      	bhi.n	802d498 <UART_SetConfig+0x52c>
 802d44a:	a201      	add	r2, pc, #4	; (adr r2, 802d450 <UART_SetConfig+0x4e4>)
 802d44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d450:	0802d469 	.word	0x0802d469
 802d454:	0802d471 	.word	0x0802d471
 802d458:	0802d479 	.word	0x0802d479
 802d45c:	0802d481 	.word	0x0802d481
 802d460:	0802d489 	.word	0x0802d489
 802d464:	0802d491 	.word	0x0802d491
 802d468:	2300      	movs	r3, #0
 802d46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d46e:	e050      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d470:	2304      	movs	r3, #4
 802d472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d476:	e04c      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d478:	2308      	movs	r3, #8
 802d47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d47e:	e048      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d480:	2310      	movs	r3, #16
 802d482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d486:	e044      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d488:	2320      	movs	r3, #32
 802d48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d48e:	e040      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d490:	2340      	movs	r3, #64	; 0x40
 802d492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d496:	e03c      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d498:	2380      	movs	r3, #128	; 0x80
 802d49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d49e:	e038      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d4a0:	697b      	ldr	r3, [r7, #20]
 802d4a2:	681b      	ldr	r3, [r3, #0]
 802d4a4:	4a5b      	ldr	r2, [pc, #364]	; (802d614 <UART_SetConfig+0x6a8>)
 802d4a6:	4293      	cmp	r3, r2
 802d4a8:	d130      	bne.n	802d50c <UART_SetConfig+0x5a0>
 802d4aa:	4b57      	ldr	r3, [pc, #348]	; (802d608 <UART_SetConfig+0x69c>)
 802d4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802d4ae:	f003 0307 	and.w	r3, r3, #7
 802d4b2:	2b05      	cmp	r3, #5
 802d4b4:	d826      	bhi.n	802d504 <UART_SetConfig+0x598>
 802d4b6:	a201      	add	r2, pc, #4	; (adr r2, 802d4bc <UART_SetConfig+0x550>)
 802d4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d4bc:	0802d4d5 	.word	0x0802d4d5
 802d4c0:	0802d4dd 	.word	0x0802d4dd
 802d4c4:	0802d4e5 	.word	0x0802d4e5
 802d4c8:	0802d4ed 	.word	0x0802d4ed
 802d4cc:	0802d4f5 	.word	0x0802d4f5
 802d4d0:	0802d4fd 	.word	0x0802d4fd
 802d4d4:	2302      	movs	r3, #2
 802d4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d4da:	e01a      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d4dc:	2304      	movs	r3, #4
 802d4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d4e2:	e016      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d4e4:	2308      	movs	r3, #8
 802d4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d4ea:	e012      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d4ec:	2310      	movs	r3, #16
 802d4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d4f2:	e00e      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d4f4:	2320      	movs	r3, #32
 802d4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d4fa:	e00a      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d4fc:	2340      	movs	r3, #64	; 0x40
 802d4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d502:	e006      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d504:	2380      	movs	r3, #128	; 0x80
 802d506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d50a:	e002      	b.n	802d512 <UART_SetConfig+0x5a6>
 802d50c:	2380      	movs	r3, #128	; 0x80
 802d50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802d512:	697b      	ldr	r3, [r7, #20]
 802d514:	681b      	ldr	r3, [r3, #0]
 802d516:	4a3f      	ldr	r2, [pc, #252]	; (802d614 <UART_SetConfig+0x6a8>)
 802d518:	4293      	cmp	r3, r2
 802d51a:	f040 80f8 	bne.w	802d70e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 802d51e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802d522:	2b20      	cmp	r3, #32
 802d524:	dc46      	bgt.n	802d5b4 <UART_SetConfig+0x648>
 802d526:	2b02      	cmp	r3, #2
 802d528:	f2c0 8082 	blt.w	802d630 <UART_SetConfig+0x6c4>
 802d52c:	3b02      	subs	r3, #2
 802d52e:	2b1e      	cmp	r3, #30
 802d530:	d87e      	bhi.n	802d630 <UART_SetConfig+0x6c4>
 802d532:	a201      	add	r2, pc, #4	; (adr r2, 802d538 <UART_SetConfig+0x5cc>)
 802d534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d538:	0802d5bb 	.word	0x0802d5bb
 802d53c:	0802d631 	.word	0x0802d631
 802d540:	0802d5c3 	.word	0x0802d5c3
 802d544:	0802d631 	.word	0x0802d631
 802d548:	0802d631 	.word	0x0802d631
 802d54c:	0802d631 	.word	0x0802d631
 802d550:	0802d5d3 	.word	0x0802d5d3
 802d554:	0802d631 	.word	0x0802d631
 802d558:	0802d631 	.word	0x0802d631
 802d55c:	0802d631 	.word	0x0802d631
 802d560:	0802d631 	.word	0x0802d631
 802d564:	0802d631 	.word	0x0802d631
 802d568:	0802d631 	.word	0x0802d631
 802d56c:	0802d631 	.word	0x0802d631
 802d570:	0802d5e3 	.word	0x0802d5e3
 802d574:	0802d631 	.word	0x0802d631
 802d578:	0802d631 	.word	0x0802d631
 802d57c:	0802d631 	.word	0x0802d631
 802d580:	0802d631 	.word	0x0802d631
 802d584:	0802d631 	.word	0x0802d631
 802d588:	0802d631 	.word	0x0802d631
 802d58c:	0802d631 	.word	0x0802d631
 802d590:	0802d631 	.word	0x0802d631
 802d594:	0802d631 	.word	0x0802d631
 802d598:	0802d631 	.word	0x0802d631
 802d59c:	0802d631 	.word	0x0802d631
 802d5a0:	0802d631 	.word	0x0802d631
 802d5a4:	0802d631 	.word	0x0802d631
 802d5a8:	0802d631 	.word	0x0802d631
 802d5ac:	0802d631 	.word	0x0802d631
 802d5b0:	0802d623 	.word	0x0802d623
 802d5b4:	2b40      	cmp	r3, #64	; 0x40
 802d5b6:	d037      	beq.n	802d628 <UART_SetConfig+0x6bc>
 802d5b8:	e03a      	b.n	802d630 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 802d5ba:	f7fc fc29 	bl	8029e10 <HAL_RCCEx_GetD3PCLK1Freq>
 802d5be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802d5c0:	e03c      	b.n	802d63c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802d5c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802d5c6:	4618      	mov	r0, r3
 802d5c8:	f7fc fc38 	bl	8029e3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d5d0:	e034      	b.n	802d63c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802d5d2:	f107 0318 	add.w	r3, r7, #24
 802d5d6:	4618      	mov	r0, r3
 802d5d8:	f7fc fd84 	bl	802a0e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802d5dc:	69fb      	ldr	r3, [r7, #28]
 802d5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d5e0:	e02c      	b.n	802d63c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802d5e2:	4b09      	ldr	r3, [pc, #36]	; (802d608 <UART_SetConfig+0x69c>)
 802d5e4:	681b      	ldr	r3, [r3, #0]
 802d5e6:	f003 0320 	and.w	r3, r3, #32
 802d5ea:	2b00      	cmp	r3, #0
 802d5ec:	d016      	beq.n	802d61c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802d5ee:	4b06      	ldr	r3, [pc, #24]	; (802d608 <UART_SetConfig+0x69c>)
 802d5f0:	681b      	ldr	r3, [r3, #0]
 802d5f2:	08db      	lsrs	r3, r3, #3
 802d5f4:	f003 0303 	and.w	r3, r3, #3
 802d5f8:	4a07      	ldr	r2, [pc, #28]	; (802d618 <UART_SetConfig+0x6ac>)
 802d5fa:	fa22 f303 	lsr.w	r3, r2, r3
 802d5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802d600:	e01c      	b.n	802d63c <UART_SetConfig+0x6d0>
 802d602:	bf00      	nop
 802d604:	40011400 	.word	0x40011400
 802d608:	58024400 	.word	0x58024400
 802d60c:	40007800 	.word	0x40007800
 802d610:	40007c00 	.word	0x40007c00
 802d614:	58000c00 	.word	0x58000c00
 802d618:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 802d61c:	4b9d      	ldr	r3, [pc, #628]	; (802d894 <UART_SetConfig+0x928>)
 802d61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d620:	e00c      	b.n	802d63c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802d622:	4b9d      	ldr	r3, [pc, #628]	; (802d898 <UART_SetConfig+0x92c>)
 802d624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d626:	e009      	b.n	802d63c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802d628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802d62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d62e:	e005      	b.n	802d63c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 802d630:	2300      	movs	r3, #0
 802d632:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802d634:	2301      	movs	r3, #1
 802d636:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802d63a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 802d63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802d63e:	2b00      	cmp	r3, #0
 802d640:	f000 81de 	beq.w	802da00 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 802d644:	697b      	ldr	r3, [r7, #20]
 802d646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d648:	4a94      	ldr	r2, [pc, #592]	; (802d89c <UART_SetConfig+0x930>)
 802d64a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802d64e:	461a      	mov	r2, r3
 802d650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802d652:	fbb3 f3f2 	udiv	r3, r3, r2
 802d656:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802d658:	697b      	ldr	r3, [r7, #20]
 802d65a:	685a      	ldr	r2, [r3, #4]
 802d65c:	4613      	mov	r3, r2
 802d65e:	005b      	lsls	r3, r3, #1
 802d660:	4413      	add	r3, r2
 802d662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802d664:	429a      	cmp	r2, r3
 802d666:	d305      	bcc.n	802d674 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 802d668:	697b      	ldr	r3, [r7, #20]
 802d66a:	685b      	ldr	r3, [r3, #4]
 802d66c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802d66e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802d670:	429a      	cmp	r2, r3
 802d672:	d903      	bls.n	802d67c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 802d674:	2301      	movs	r3, #1
 802d676:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802d67a:	e1c1      	b.n	802da00 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802d67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802d67e:	2200      	movs	r2, #0
 802d680:	60bb      	str	r3, [r7, #8]
 802d682:	60fa      	str	r2, [r7, #12]
 802d684:	697b      	ldr	r3, [r7, #20]
 802d686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d688:	4a84      	ldr	r2, [pc, #528]	; (802d89c <UART_SetConfig+0x930>)
 802d68a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802d68e:	b29b      	uxth	r3, r3
 802d690:	2200      	movs	r2, #0
 802d692:	603b      	str	r3, [r7, #0]
 802d694:	607a      	str	r2, [r7, #4]
 802d696:	e9d7 2300 	ldrd	r2, r3, [r7]
 802d69a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802d69e:	f7f2 fe77 	bl	8020390 <__aeabi_uldivmod>
 802d6a2:	4602      	mov	r2, r0
 802d6a4:	460b      	mov	r3, r1
 802d6a6:	4610      	mov	r0, r2
 802d6a8:	4619      	mov	r1, r3
 802d6aa:	f04f 0200 	mov.w	r2, #0
 802d6ae:	f04f 0300 	mov.w	r3, #0
 802d6b2:	020b      	lsls	r3, r1, #8
 802d6b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802d6b8:	0202      	lsls	r2, r0, #8
 802d6ba:	6979      	ldr	r1, [r7, #20]
 802d6bc:	6849      	ldr	r1, [r1, #4]
 802d6be:	0849      	lsrs	r1, r1, #1
 802d6c0:	2000      	movs	r0, #0
 802d6c2:	460c      	mov	r4, r1
 802d6c4:	4605      	mov	r5, r0
 802d6c6:	eb12 0804 	adds.w	r8, r2, r4
 802d6ca:	eb43 0905 	adc.w	r9, r3, r5
 802d6ce:	697b      	ldr	r3, [r7, #20]
 802d6d0:	685b      	ldr	r3, [r3, #4]
 802d6d2:	2200      	movs	r2, #0
 802d6d4:	469a      	mov	sl, r3
 802d6d6:	4693      	mov	fp, r2
 802d6d8:	4652      	mov	r2, sl
 802d6da:	465b      	mov	r3, fp
 802d6dc:	4640      	mov	r0, r8
 802d6de:	4649      	mov	r1, r9
 802d6e0:	f7f2 fe56 	bl	8020390 <__aeabi_uldivmod>
 802d6e4:	4602      	mov	r2, r0
 802d6e6:	460b      	mov	r3, r1
 802d6e8:	4613      	mov	r3, r2
 802d6ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 802d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d6ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802d6f2:	d308      	bcc.n	802d706 <UART_SetConfig+0x79a>
 802d6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d6f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802d6fa:	d204      	bcs.n	802d706 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 802d6fc:	697b      	ldr	r3, [r7, #20]
 802d6fe:	681b      	ldr	r3, [r3, #0]
 802d700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802d702:	60da      	str	r2, [r3, #12]
 802d704:	e17c      	b.n	802da00 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 802d706:	2301      	movs	r3, #1
 802d708:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802d70c:	e178      	b.n	802da00 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802d70e:	697b      	ldr	r3, [r7, #20]
 802d710:	69db      	ldr	r3, [r3, #28]
 802d712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802d716:	f040 80c5 	bne.w	802d8a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 802d71a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802d71e:	2b20      	cmp	r3, #32
 802d720:	dc48      	bgt.n	802d7b4 <UART_SetConfig+0x848>
 802d722:	2b00      	cmp	r3, #0
 802d724:	db7b      	blt.n	802d81e <UART_SetConfig+0x8b2>
 802d726:	2b20      	cmp	r3, #32
 802d728:	d879      	bhi.n	802d81e <UART_SetConfig+0x8b2>
 802d72a:	a201      	add	r2, pc, #4	; (adr r2, 802d730 <UART_SetConfig+0x7c4>)
 802d72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d730:	0802d7bb 	.word	0x0802d7bb
 802d734:	0802d7c3 	.word	0x0802d7c3
 802d738:	0802d81f 	.word	0x0802d81f
 802d73c:	0802d81f 	.word	0x0802d81f
 802d740:	0802d7cb 	.word	0x0802d7cb
 802d744:	0802d81f 	.word	0x0802d81f
 802d748:	0802d81f 	.word	0x0802d81f
 802d74c:	0802d81f 	.word	0x0802d81f
 802d750:	0802d7db 	.word	0x0802d7db
 802d754:	0802d81f 	.word	0x0802d81f
 802d758:	0802d81f 	.word	0x0802d81f
 802d75c:	0802d81f 	.word	0x0802d81f
 802d760:	0802d81f 	.word	0x0802d81f
 802d764:	0802d81f 	.word	0x0802d81f
 802d768:	0802d81f 	.word	0x0802d81f
 802d76c:	0802d81f 	.word	0x0802d81f
 802d770:	0802d7eb 	.word	0x0802d7eb
 802d774:	0802d81f 	.word	0x0802d81f
 802d778:	0802d81f 	.word	0x0802d81f
 802d77c:	0802d81f 	.word	0x0802d81f
 802d780:	0802d81f 	.word	0x0802d81f
 802d784:	0802d81f 	.word	0x0802d81f
 802d788:	0802d81f 	.word	0x0802d81f
 802d78c:	0802d81f 	.word	0x0802d81f
 802d790:	0802d81f 	.word	0x0802d81f
 802d794:	0802d81f 	.word	0x0802d81f
 802d798:	0802d81f 	.word	0x0802d81f
 802d79c:	0802d81f 	.word	0x0802d81f
 802d7a0:	0802d81f 	.word	0x0802d81f
 802d7a4:	0802d81f 	.word	0x0802d81f
 802d7a8:	0802d81f 	.word	0x0802d81f
 802d7ac:	0802d81f 	.word	0x0802d81f
 802d7b0:	0802d811 	.word	0x0802d811
 802d7b4:	2b40      	cmp	r3, #64	; 0x40
 802d7b6:	d02e      	beq.n	802d816 <UART_SetConfig+0x8aa>
 802d7b8:	e031      	b.n	802d81e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802d7ba:	f7fb fbb7 	bl	8028f2c <HAL_RCC_GetPCLK1Freq>
 802d7be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802d7c0:	e033      	b.n	802d82a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802d7c2:	f7fb fbc9 	bl	8028f58 <HAL_RCC_GetPCLK2Freq>
 802d7c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802d7c8:	e02f      	b.n	802d82a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802d7ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802d7ce:	4618      	mov	r0, r3
 802d7d0:	f7fc fb34 	bl	8029e3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802d7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d7d8:	e027      	b.n	802d82a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802d7da:	f107 0318 	add.w	r3, r7, #24
 802d7de:	4618      	mov	r0, r3
 802d7e0:	f7fc fc80 	bl	802a0e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802d7e4:	69fb      	ldr	r3, [r7, #28]
 802d7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d7e8:	e01f      	b.n	802d82a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802d7ea:	4b2d      	ldr	r3, [pc, #180]	; (802d8a0 <UART_SetConfig+0x934>)
 802d7ec:	681b      	ldr	r3, [r3, #0]
 802d7ee:	f003 0320 	and.w	r3, r3, #32
 802d7f2:	2b00      	cmp	r3, #0
 802d7f4:	d009      	beq.n	802d80a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802d7f6:	4b2a      	ldr	r3, [pc, #168]	; (802d8a0 <UART_SetConfig+0x934>)
 802d7f8:	681b      	ldr	r3, [r3, #0]
 802d7fa:	08db      	lsrs	r3, r3, #3
 802d7fc:	f003 0303 	and.w	r3, r3, #3
 802d800:	4a24      	ldr	r2, [pc, #144]	; (802d894 <UART_SetConfig+0x928>)
 802d802:	fa22 f303 	lsr.w	r3, r2, r3
 802d806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802d808:	e00f      	b.n	802d82a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 802d80a:	4b22      	ldr	r3, [pc, #136]	; (802d894 <UART_SetConfig+0x928>)
 802d80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d80e:	e00c      	b.n	802d82a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802d810:	4b21      	ldr	r3, [pc, #132]	; (802d898 <UART_SetConfig+0x92c>)
 802d812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d814:	e009      	b.n	802d82a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802d816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802d81a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d81c:	e005      	b.n	802d82a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 802d81e:	2300      	movs	r3, #0
 802d820:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802d822:	2301      	movs	r3, #1
 802d824:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802d828:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 802d82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802d82c:	2b00      	cmp	r3, #0
 802d82e:	f000 80e7 	beq.w	802da00 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802d832:	697b      	ldr	r3, [r7, #20]
 802d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d836:	4a19      	ldr	r2, [pc, #100]	; (802d89c <UART_SetConfig+0x930>)
 802d838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802d83c:	461a      	mov	r2, r3
 802d83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802d840:	fbb3 f3f2 	udiv	r3, r3, r2
 802d844:	005a      	lsls	r2, r3, #1
 802d846:	697b      	ldr	r3, [r7, #20]
 802d848:	685b      	ldr	r3, [r3, #4]
 802d84a:	085b      	lsrs	r3, r3, #1
 802d84c:	441a      	add	r2, r3
 802d84e:	697b      	ldr	r3, [r7, #20]
 802d850:	685b      	ldr	r3, [r3, #4]
 802d852:	fbb2 f3f3 	udiv	r3, r2, r3
 802d856:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802d858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d85a:	2b0f      	cmp	r3, #15
 802d85c:	d916      	bls.n	802d88c <UART_SetConfig+0x920>
 802d85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802d864:	d212      	bcs.n	802d88c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802d866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d868:	b29b      	uxth	r3, r3
 802d86a:	f023 030f 	bic.w	r3, r3, #15
 802d86e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802d870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d872:	085b      	lsrs	r3, r3, #1
 802d874:	b29b      	uxth	r3, r3
 802d876:	f003 0307 	and.w	r3, r3, #7
 802d87a:	b29a      	uxth	r2, r3
 802d87c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802d87e:	4313      	orrs	r3, r2
 802d880:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 802d882:	697b      	ldr	r3, [r7, #20]
 802d884:	681b      	ldr	r3, [r3, #0]
 802d886:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802d888:	60da      	str	r2, [r3, #12]
 802d88a:	e0b9      	b.n	802da00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 802d88c:	2301      	movs	r3, #1
 802d88e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802d892:	e0b5      	b.n	802da00 <UART_SetConfig+0xa94>
 802d894:	03d09000 	.word	0x03d09000
 802d898:	003d0900 	.word	0x003d0900
 802d89c:	0803e4ac 	.word	0x0803e4ac
 802d8a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 802d8a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802d8a8:	2b20      	cmp	r3, #32
 802d8aa:	dc49      	bgt.n	802d940 <UART_SetConfig+0x9d4>
 802d8ac:	2b00      	cmp	r3, #0
 802d8ae:	db7c      	blt.n	802d9aa <UART_SetConfig+0xa3e>
 802d8b0:	2b20      	cmp	r3, #32
 802d8b2:	d87a      	bhi.n	802d9aa <UART_SetConfig+0xa3e>
 802d8b4:	a201      	add	r2, pc, #4	; (adr r2, 802d8bc <UART_SetConfig+0x950>)
 802d8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d8ba:	bf00      	nop
 802d8bc:	0802d947 	.word	0x0802d947
 802d8c0:	0802d94f 	.word	0x0802d94f
 802d8c4:	0802d9ab 	.word	0x0802d9ab
 802d8c8:	0802d9ab 	.word	0x0802d9ab
 802d8cc:	0802d957 	.word	0x0802d957
 802d8d0:	0802d9ab 	.word	0x0802d9ab
 802d8d4:	0802d9ab 	.word	0x0802d9ab
 802d8d8:	0802d9ab 	.word	0x0802d9ab
 802d8dc:	0802d967 	.word	0x0802d967
 802d8e0:	0802d9ab 	.word	0x0802d9ab
 802d8e4:	0802d9ab 	.word	0x0802d9ab
 802d8e8:	0802d9ab 	.word	0x0802d9ab
 802d8ec:	0802d9ab 	.word	0x0802d9ab
 802d8f0:	0802d9ab 	.word	0x0802d9ab
 802d8f4:	0802d9ab 	.word	0x0802d9ab
 802d8f8:	0802d9ab 	.word	0x0802d9ab
 802d8fc:	0802d977 	.word	0x0802d977
 802d900:	0802d9ab 	.word	0x0802d9ab
 802d904:	0802d9ab 	.word	0x0802d9ab
 802d908:	0802d9ab 	.word	0x0802d9ab
 802d90c:	0802d9ab 	.word	0x0802d9ab
 802d910:	0802d9ab 	.word	0x0802d9ab
 802d914:	0802d9ab 	.word	0x0802d9ab
 802d918:	0802d9ab 	.word	0x0802d9ab
 802d91c:	0802d9ab 	.word	0x0802d9ab
 802d920:	0802d9ab 	.word	0x0802d9ab
 802d924:	0802d9ab 	.word	0x0802d9ab
 802d928:	0802d9ab 	.word	0x0802d9ab
 802d92c:	0802d9ab 	.word	0x0802d9ab
 802d930:	0802d9ab 	.word	0x0802d9ab
 802d934:	0802d9ab 	.word	0x0802d9ab
 802d938:	0802d9ab 	.word	0x0802d9ab
 802d93c:	0802d99d 	.word	0x0802d99d
 802d940:	2b40      	cmp	r3, #64	; 0x40
 802d942:	d02e      	beq.n	802d9a2 <UART_SetConfig+0xa36>
 802d944:	e031      	b.n	802d9aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802d946:	f7fb faf1 	bl	8028f2c <HAL_RCC_GetPCLK1Freq>
 802d94a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802d94c:	e033      	b.n	802d9b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802d94e:	f7fb fb03 	bl	8028f58 <HAL_RCC_GetPCLK2Freq>
 802d952:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802d954:	e02f      	b.n	802d9b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802d956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802d95a:	4618      	mov	r0, r3
 802d95c:	f7fc fa6e 	bl	8029e3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802d960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d964:	e027      	b.n	802d9b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802d966:	f107 0318 	add.w	r3, r7, #24
 802d96a:	4618      	mov	r0, r3
 802d96c:	f7fc fbba 	bl	802a0e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802d970:	69fb      	ldr	r3, [r7, #28]
 802d972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d974:	e01f      	b.n	802d9b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802d976:	4b2d      	ldr	r3, [pc, #180]	; (802da2c <UART_SetConfig+0xac0>)
 802d978:	681b      	ldr	r3, [r3, #0]
 802d97a:	f003 0320 	and.w	r3, r3, #32
 802d97e:	2b00      	cmp	r3, #0
 802d980:	d009      	beq.n	802d996 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802d982:	4b2a      	ldr	r3, [pc, #168]	; (802da2c <UART_SetConfig+0xac0>)
 802d984:	681b      	ldr	r3, [r3, #0]
 802d986:	08db      	lsrs	r3, r3, #3
 802d988:	f003 0303 	and.w	r3, r3, #3
 802d98c:	4a28      	ldr	r2, [pc, #160]	; (802da30 <UART_SetConfig+0xac4>)
 802d98e:	fa22 f303 	lsr.w	r3, r2, r3
 802d992:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802d994:	e00f      	b.n	802d9b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 802d996:	4b26      	ldr	r3, [pc, #152]	; (802da30 <UART_SetConfig+0xac4>)
 802d998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d99a:	e00c      	b.n	802d9b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802d99c:	4b25      	ldr	r3, [pc, #148]	; (802da34 <UART_SetConfig+0xac8>)
 802d99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d9a0:	e009      	b.n	802d9b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802d9a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802d9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802d9a8:	e005      	b.n	802d9b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 802d9aa:	2300      	movs	r3, #0
 802d9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802d9ae:	2301      	movs	r3, #1
 802d9b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802d9b4:	bf00      	nop
    }

    if (pclk != 0U)
 802d9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802d9b8:	2b00      	cmp	r3, #0
 802d9ba:	d021      	beq.n	802da00 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802d9bc:	697b      	ldr	r3, [r7, #20]
 802d9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d9c0:	4a1d      	ldr	r2, [pc, #116]	; (802da38 <UART_SetConfig+0xacc>)
 802d9c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802d9c6:	461a      	mov	r2, r3
 802d9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802d9ca:	fbb3 f2f2 	udiv	r2, r3, r2
 802d9ce:	697b      	ldr	r3, [r7, #20]
 802d9d0:	685b      	ldr	r3, [r3, #4]
 802d9d2:	085b      	lsrs	r3, r3, #1
 802d9d4:	441a      	add	r2, r3
 802d9d6:	697b      	ldr	r3, [r7, #20]
 802d9d8:	685b      	ldr	r3, [r3, #4]
 802d9da:	fbb2 f3f3 	udiv	r3, r2, r3
 802d9de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802d9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d9e2:	2b0f      	cmp	r3, #15
 802d9e4:	d909      	bls.n	802d9fa <UART_SetConfig+0xa8e>
 802d9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802d9ec:	d205      	bcs.n	802d9fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802d9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d9f0:	b29a      	uxth	r2, r3
 802d9f2:	697b      	ldr	r3, [r7, #20]
 802d9f4:	681b      	ldr	r3, [r3, #0]
 802d9f6:	60da      	str	r2, [r3, #12]
 802d9f8:	e002      	b.n	802da00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 802d9fa:	2301      	movs	r3, #1
 802d9fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 802da00:	697b      	ldr	r3, [r7, #20]
 802da02:	2201      	movs	r2, #1
 802da04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 802da08:	697b      	ldr	r3, [r7, #20]
 802da0a:	2201      	movs	r2, #1
 802da0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802da10:	697b      	ldr	r3, [r7, #20]
 802da12:	2200      	movs	r2, #0
 802da14:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 802da16:	697b      	ldr	r3, [r7, #20]
 802da18:	2200      	movs	r2, #0
 802da1a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 802da1c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 802da20:	4618      	mov	r0, r3
 802da22:	3748      	adds	r7, #72	; 0x48
 802da24:	46bd      	mov	sp, r7
 802da26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802da2a:	bf00      	nop
 802da2c:	58024400 	.word	0x58024400
 802da30:	03d09000 	.word	0x03d09000
 802da34:	003d0900 	.word	0x003d0900
 802da38:	0803e4ac 	.word	0x0803e4ac

0802da3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 802da3c:	b480      	push	{r7}
 802da3e:	b083      	sub	sp, #12
 802da40:	af00      	add	r7, sp, #0
 802da42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 802da44:	687b      	ldr	r3, [r7, #4]
 802da46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802da48:	f003 0301 	and.w	r3, r3, #1
 802da4c:	2b00      	cmp	r3, #0
 802da4e:	d00a      	beq.n	802da66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802da50:	687b      	ldr	r3, [r7, #4]
 802da52:	681b      	ldr	r3, [r3, #0]
 802da54:	685b      	ldr	r3, [r3, #4]
 802da56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 802da5a:	687b      	ldr	r3, [r7, #4]
 802da5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802da5e:	687b      	ldr	r3, [r7, #4]
 802da60:	681b      	ldr	r3, [r3, #0]
 802da62:	430a      	orrs	r2, r1
 802da64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 802da66:	687b      	ldr	r3, [r7, #4]
 802da68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802da6a:	f003 0302 	and.w	r3, r3, #2
 802da6e:	2b00      	cmp	r3, #0
 802da70:	d00a      	beq.n	802da88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 802da72:	687b      	ldr	r3, [r7, #4]
 802da74:	681b      	ldr	r3, [r3, #0]
 802da76:	685b      	ldr	r3, [r3, #4]
 802da78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 802da7c:	687b      	ldr	r3, [r7, #4]
 802da7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802da80:	687b      	ldr	r3, [r7, #4]
 802da82:	681b      	ldr	r3, [r3, #0]
 802da84:	430a      	orrs	r2, r1
 802da86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 802da88:	687b      	ldr	r3, [r7, #4]
 802da8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802da8c:	f003 0304 	and.w	r3, r3, #4
 802da90:	2b00      	cmp	r3, #0
 802da92:	d00a      	beq.n	802daaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 802da94:	687b      	ldr	r3, [r7, #4]
 802da96:	681b      	ldr	r3, [r3, #0]
 802da98:	685b      	ldr	r3, [r3, #4]
 802da9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 802da9e:	687b      	ldr	r3, [r7, #4]
 802daa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802daa2:	687b      	ldr	r3, [r7, #4]
 802daa4:	681b      	ldr	r3, [r3, #0]
 802daa6:	430a      	orrs	r2, r1
 802daa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 802daaa:	687b      	ldr	r3, [r7, #4]
 802daac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802daae:	f003 0308 	and.w	r3, r3, #8
 802dab2:	2b00      	cmp	r3, #0
 802dab4:	d00a      	beq.n	802dacc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802dab6:	687b      	ldr	r3, [r7, #4]
 802dab8:	681b      	ldr	r3, [r3, #0]
 802daba:	685b      	ldr	r3, [r3, #4]
 802dabc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 802dac0:	687b      	ldr	r3, [r7, #4]
 802dac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802dac4:	687b      	ldr	r3, [r7, #4]
 802dac6:	681b      	ldr	r3, [r3, #0]
 802dac8:	430a      	orrs	r2, r1
 802daca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 802dacc:	687b      	ldr	r3, [r7, #4]
 802dace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dad0:	f003 0310 	and.w	r3, r3, #16
 802dad4:	2b00      	cmp	r3, #0
 802dad6:	d00a      	beq.n	802daee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 802dad8:	687b      	ldr	r3, [r7, #4]
 802dada:	681b      	ldr	r3, [r3, #0]
 802dadc:	689b      	ldr	r3, [r3, #8]
 802dade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 802dae2:	687b      	ldr	r3, [r7, #4]
 802dae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802dae6:	687b      	ldr	r3, [r7, #4]
 802dae8:	681b      	ldr	r3, [r3, #0]
 802daea:	430a      	orrs	r2, r1
 802daec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802daee:	687b      	ldr	r3, [r7, #4]
 802daf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802daf2:	f003 0320 	and.w	r3, r3, #32
 802daf6:	2b00      	cmp	r3, #0
 802daf8:	d00a      	beq.n	802db10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802dafa:	687b      	ldr	r3, [r7, #4]
 802dafc:	681b      	ldr	r3, [r3, #0]
 802dafe:	689b      	ldr	r3, [r3, #8]
 802db00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 802db04:	687b      	ldr	r3, [r7, #4]
 802db06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802db08:	687b      	ldr	r3, [r7, #4]
 802db0a:	681b      	ldr	r3, [r3, #0]
 802db0c:	430a      	orrs	r2, r1
 802db0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802db10:	687b      	ldr	r3, [r7, #4]
 802db12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802db14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802db18:	2b00      	cmp	r3, #0
 802db1a:	d01a      	beq.n	802db52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 802db1c:	687b      	ldr	r3, [r7, #4]
 802db1e:	681b      	ldr	r3, [r3, #0]
 802db20:	685b      	ldr	r3, [r3, #4]
 802db22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 802db26:	687b      	ldr	r3, [r7, #4]
 802db28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802db2a:	687b      	ldr	r3, [r7, #4]
 802db2c:	681b      	ldr	r3, [r3, #0]
 802db2e:	430a      	orrs	r2, r1
 802db30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802db32:	687b      	ldr	r3, [r7, #4]
 802db34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802db36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802db3a:	d10a      	bne.n	802db52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 802db3c:	687b      	ldr	r3, [r7, #4]
 802db3e:	681b      	ldr	r3, [r3, #0]
 802db40:	685b      	ldr	r3, [r3, #4]
 802db42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 802db46:	687b      	ldr	r3, [r7, #4]
 802db48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802db4a:	687b      	ldr	r3, [r7, #4]
 802db4c:	681b      	ldr	r3, [r3, #0]
 802db4e:	430a      	orrs	r2, r1
 802db50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802db52:	687b      	ldr	r3, [r7, #4]
 802db54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802db56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802db5a:	2b00      	cmp	r3, #0
 802db5c:	d00a      	beq.n	802db74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802db5e:	687b      	ldr	r3, [r7, #4]
 802db60:	681b      	ldr	r3, [r3, #0]
 802db62:	685b      	ldr	r3, [r3, #4]
 802db64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 802db68:	687b      	ldr	r3, [r7, #4]
 802db6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802db6c:	687b      	ldr	r3, [r7, #4]
 802db6e:	681b      	ldr	r3, [r3, #0]
 802db70:	430a      	orrs	r2, r1
 802db72:	605a      	str	r2, [r3, #4]
  }
}
 802db74:	bf00      	nop
 802db76:	370c      	adds	r7, #12
 802db78:	46bd      	mov	sp, r7
 802db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db7e:	4770      	bx	lr

0802db80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802db80:	b580      	push	{r7, lr}
 802db82:	b086      	sub	sp, #24
 802db84:	af02      	add	r7, sp, #8
 802db86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802db88:	687b      	ldr	r3, [r7, #4]
 802db8a:	2200      	movs	r2, #0
 802db8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802db90:	f7f4 fa56 	bl	8022040 <HAL_GetTick>
 802db94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802db96:	687b      	ldr	r3, [r7, #4]
 802db98:	681b      	ldr	r3, [r3, #0]
 802db9a:	681b      	ldr	r3, [r3, #0]
 802db9c:	f003 0308 	and.w	r3, r3, #8
 802dba0:	2b08      	cmp	r3, #8
 802dba2:	d10e      	bne.n	802dbc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802dba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802dba8:	9300      	str	r3, [sp, #0]
 802dbaa:	68fb      	ldr	r3, [r7, #12]
 802dbac:	2200      	movs	r2, #0
 802dbae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802dbb2:	6878      	ldr	r0, [r7, #4]
 802dbb4:	f000 f82f 	bl	802dc16 <UART_WaitOnFlagUntilTimeout>
 802dbb8:	4603      	mov	r3, r0
 802dbba:	2b00      	cmp	r3, #0
 802dbbc:	d001      	beq.n	802dbc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802dbbe:	2303      	movs	r3, #3
 802dbc0:	e025      	b.n	802dc0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802dbc2:	687b      	ldr	r3, [r7, #4]
 802dbc4:	681b      	ldr	r3, [r3, #0]
 802dbc6:	681b      	ldr	r3, [r3, #0]
 802dbc8:	f003 0304 	and.w	r3, r3, #4
 802dbcc:	2b04      	cmp	r3, #4
 802dbce:	d10e      	bne.n	802dbee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802dbd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802dbd4:	9300      	str	r3, [sp, #0]
 802dbd6:	68fb      	ldr	r3, [r7, #12]
 802dbd8:	2200      	movs	r2, #0
 802dbda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 802dbde:	6878      	ldr	r0, [r7, #4]
 802dbe0:	f000 f819 	bl	802dc16 <UART_WaitOnFlagUntilTimeout>
 802dbe4:	4603      	mov	r3, r0
 802dbe6:	2b00      	cmp	r3, #0
 802dbe8:	d001      	beq.n	802dbee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802dbea:	2303      	movs	r3, #3
 802dbec:	e00f      	b.n	802dc0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802dbee:	687b      	ldr	r3, [r7, #4]
 802dbf0:	2220      	movs	r2, #32
 802dbf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 802dbf6:	687b      	ldr	r3, [r7, #4]
 802dbf8:	2220      	movs	r2, #32
 802dbfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802dbfe:	687b      	ldr	r3, [r7, #4]
 802dc00:	2200      	movs	r2, #0
 802dc02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 802dc04:	687b      	ldr	r3, [r7, #4]
 802dc06:	2200      	movs	r2, #0
 802dc08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802dc0c:	2300      	movs	r3, #0
}
 802dc0e:	4618      	mov	r0, r3
 802dc10:	3710      	adds	r7, #16
 802dc12:	46bd      	mov	sp, r7
 802dc14:	bd80      	pop	{r7, pc}

0802dc16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802dc16:	b580      	push	{r7, lr}
 802dc18:	b09c      	sub	sp, #112	; 0x70
 802dc1a:	af00      	add	r7, sp, #0
 802dc1c:	60f8      	str	r0, [r7, #12]
 802dc1e:	60b9      	str	r1, [r7, #8]
 802dc20:	603b      	str	r3, [r7, #0]
 802dc22:	4613      	mov	r3, r2
 802dc24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802dc26:	e0a9      	b.n	802dd7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802dc28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802dc2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802dc2e:	f000 80a5 	beq.w	802dd7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802dc32:	f7f4 fa05 	bl	8022040 <HAL_GetTick>
 802dc36:	4602      	mov	r2, r0
 802dc38:	683b      	ldr	r3, [r7, #0]
 802dc3a:	1ad3      	subs	r3, r2, r3
 802dc3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802dc3e:	429a      	cmp	r2, r3
 802dc40:	d302      	bcc.n	802dc48 <UART_WaitOnFlagUntilTimeout+0x32>
 802dc42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802dc44:	2b00      	cmp	r3, #0
 802dc46:	d140      	bne.n	802dcca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 802dc48:	68fb      	ldr	r3, [r7, #12]
 802dc4a:	681b      	ldr	r3, [r3, #0]
 802dc4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802dc4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802dc50:	e853 3f00 	ldrex	r3, [r3]
 802dc54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 802dc56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802dc58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802dc5c:	667b      	str	r3, [r7, #100]	; 0x64
 802dc5e:	68fb      	ldr	r3, [r7, #12]
 802dc60:	681b      	ldr	r3, [r3, #0]
 802dc62:	461a      	mov	r2, r3
 802dc64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802dc66:	65fb      	str	r3, [r7, #92]	; 0x5c
 802dc68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802dc6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802dc6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802dc6e:	e841 2300 	strex	r3, r2, [r1]
 802dc72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 802dc74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802dc76:	2b00      	cmp	r3, #0
 802dc78:	d1e6      	bne.n	802dc48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802dc7a:	68fb      	ldr	r3, [r7, #12]
 802dc7c:	681b      	ldr	r3, [r3, #0]
 802dc7e:	3308      	adds	r3, #8
 802dc80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802dc82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802dc84:	e853 3f00 	ldrex	r3, [r3]
 802dc88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802dc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802dc8c:	f023 0301 	bic.w	r3, r3, #1
 802dc90:	663b      	str	r3, [r7, #96]	; 0x60
 802dc92:	68fb      	ldr	r3, [r7, #12]
 802dc94:	681b      	ldr	r3, [r3, #0]
 802dc96:	3308      	adds	r3, #8
 802dc98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802dc9a:	64ba      	str	r2, [r7, #72]	; 0x48
 802dc9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802dc9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802dca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802dca2:	e841 2300 	strex	r3, r2, [r1]
 802dca6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 802dca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802dcaa:	2b00      	cmp	r3, #0
 802dcac:	d1e5      	bne.n	802dc7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 802dcae:	68fb      	ldr	r3, [r7, #12]
 802dcb0:	2220      	movs	r2, #32
 802dcb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 802dcb6:	68fb      	ldr	r3, [r7, #12]
 802dcb8:	2220      	movs	r2, #32
 802dcba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 802dcbe:	68fb      	ldr	r3, [r7, #12]
 802dcc0:	2200      	movs	r2, #0
 802dcc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 802dcc6:	2303      	movs	r3, #3
 802dcc8:	e069      	b.n	802dd9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 802dcca:	68fb      	ldr	r3, [r7, #12]
 802dccc:	681b      	ldr	r3, [r3, #0]
 802dcce:	681b      	ldr	r3, [r3, #0]
 802dcd0:	f003 0304 	and.w	r3, r3, #4
 802dcd4:	2b00      	cmp	r3, #0
 802dcd6:	d051      	beq.n	802dd7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802dcd8:	68fb      	ldr	r3, [r7, #12]
 802dcda:	681b      	ldr	r3, [r3, #0]
 802dcdc:	69db      	ldr	r3, [r3, #28]
 802dcde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802dce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802dce6:	d149      	bne.n	802dd7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802dce8:	68fb      	ldr	r3, [r7, #12]
 802dcea:	681b      	ldr	r3, [r3, #0]
 802dcec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802dcf0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 802dcf2:	68fb      	ldr	r3, [r7, #12]
 802dcf4:	681b      	ldr	r3, [r3, #0]
 802dcf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802dcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dcfa:	e853 3f00 	ldrex	r3, [r3]
 802dcfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dd02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802dd06:	66fb      	str	r3, [r7, #108]	; 0x6c
 802dd08:	68fb      	ldr	r3, [r7, #12]
 802dd0a:	681b      	ldr	r3, [r3, #0]
 802dd0c:	461a      	mov	r2, r3
 802dd0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802dd10:	637b      	str	r3, [r7, #52]	; 0x34
 802dd12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802dd14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802dd16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802dd18:	e841 2300 	strex	r3, r2, [r1]
 802dd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802dd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dd20:	2b00      	cmp	r3, #0
 802dd22:	d1e6      	bne.n	802dcf2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802dd24:	68fb      	ldr	r3, [r7, #12]
 802dd26:	681b      	ldr	r3, [r3, #0]
 802dd28:	3308      	adds	r3, #8
 802dd2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802dd2c:	697b      	ldr	r3, [r7, #20]
 802dd2e:	e853 3f00 	ldrex	r3, [r3]
 802dd32:	613b      	str	r3, [r7, #16]
   return(result);
 802dd34:	693b      	ldr	r3, [r7, #16]
 802dd36:	f023 0301 	bic.w	r3, r3, #1
 802dd3a:	66bb      	str	r3, [r7, #104]	; 0x68
 802dd3c:	68fb      	ldr	r3, [r7, #12]
 802dd3e:	681b      	ldr	r3, [r3, #0]
 802dd40:	3308      	adds	r3, #8
 802dd42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802dd44:	623a      	str	r2, [r7, #32]
 802dd46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802dd48:	69f9      	ldr	r1, [r7, #28]
 802dd4a:	6a3a      	ldr	r2, [r7, #32]
 802dd4c:	e841 2300 	strex	r3, r2, [r1]
 802dd50:	61bb      	str	r3, [r7, #24]
   return(result);
 802dd52:	69bb      	ldr	r3, [r7, #24]
 802dd54:	2b00      	cmp	r3, #0
 802dd56:	d1e5      	bne.n	802dd24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 802dd58:	68fb      	ldr	r3, [r7, #12]
 802dd5a:	2220      	movs	r2, #32
 802dd5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 802dd60:	68fb      	ldr	r3, [r7, #12]
 802dd62:	2220      	movs	r2, #32
 802dd64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802dd68:	68fb      	ldr	r3, [r7, #12]
 802dd6a:	2220      	movs	r2, #32
 802dd6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802dd70:	68fb      	ldr	r3, [r7, #12]
 802dd72:	2200      	movs	r2, #0
 802dd74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 802dd78:	2303      	movs	r3, #3
 802dd7a:	e010      	b.n	802dd9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802dd7c:	68fb      	ldr	r3, [r7, #12]
 802dd7e:	681b      	ldr	r3, [r3, #0]
 802dd80:	69da      	ldr	r2, [r3, #28]
 802dd82:	68bb      	ldr	r3, [r7, #8]
 802dd84:	4013      	ands	r3, r2
 802dd86:	68ba      	ldr	r2, [r7, #8]
 802dd88:	429a      	cmp	r2, r3
 802dd8a:	bf0c      	ite	eq
 802dd8c:	2301      	moveq	r3, #1
 802dd8e:	2300      	movne	r3, #0
 802dd90:	b2db      	uxtb	r3, r3
 802dd92:	461a      	mov	r2, r3
 802dd94:	79fb      	ldrb	r3, [r7, #7]
 802dd96:	429a      	cmp	r2, r3
 802dd98:	f43f af46 	beq.w	802dc28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802dd9c:	2300      	movs	r3, #0
}
 802dd9e:	4618      	mov	r0, r3
 802dda0:	3770      	adds	r7, #112	; 0x70
 802dda2:	46bd      	mov	sp, r7
 802dda4:	bd80      	pop	{r7, pc}
	...

0802dda8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802dda8:	b480      	push	{r7}
 802ddaa:	b0a3      	sub	sp, #140	; 0x8c
 802ddac:	af00      	add	r7, sp, #0
 802ddae:	60f8      	str	r0, [r7, #12]
 802ddb0:	60b9      	str	r1, [r7, #8]
 802ddb2:	4613      	mov	r3, r2
 802ddb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 802ddb6:	68fb      	ldr	r3, [r7, #12]
 802ddb8:	68ba      	ldr	r2, [r7, #8]
 802ddba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 802ddbc:	68fb      	ldr	r3, [r7, #12]
 802ddbe:	88fa      	ldrh	r2, [r7, #6]
 802ddc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 802ddc4:	68fb      	ldr	r3, [r7, #12]
 802ddc6:	88fa      	ldrh	r2, [r7, #6]
 802ddc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 802ddcc:	68fb      	ldr	r3, [r7, #12]
 802ddce:	2200      	movs	r2, #0
 802ddd0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 802ddd2:	68fb      	ldr	r3, [r7, #12]
 802ddd4:	689b      	ldr	r3, [r3, #8]
 802ddd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802ddda:	d10e      	bne.n	802ddfa <UART_Start_Receive_IT+0x52>
 802dddc:	68fb      	ldr	r3, [r7, #12]
 802ddde:	691b      	ldr	r3, [r3, #16]
 802dde0:	2b00      	cmp	r3, #0
 802dde2:	d105      	bne.n	802ddf0 <UART_Start_Receive_IT+0x48>
 802dde4:	68fb      	ldr	r3, [r7, #12]
 802dde6:	f240 12ff 	movw	r2, #511	; 0x1ff
 802ddea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 802ddee:	e02d      	b.n	802de4c <UART_Start_Receive_IT+0xa4>
 802ddf0:	68fb      	ldr	r3, [r7, #12]
 802ddf2:	22ff      	movs	r2, #255	; 0xff
 802ddf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 802ddf8:	e028      	b.n	802de4c <UART_Start_Receive_IT+0xa4>
 802ddfa:	68fb      	ldr	r3, [r7, #12]
 802ddfc:	689b      	ldr	r3, [r3, #8]
 802ddfe:	2b00      	cmp	r3, #0
 802de00:	d10d      	bne.n	802de1e <UART_Start_Receive_IT+0x76>
 802de02:	68fb      	ldr	r3, [r7, #12]
 802de04:	691b      	ldr	r3, [r3, #16]
 802de06:	2b00      	cmp	r3, #0
 802de08:	d104      	bne.n	802de14 <UART_Start_Receive_IT+0x6c>
 802de0a:	68fb      	ldr	r3, [r7, #12]
 802de0c:	22ff      	movs	r2, #255	; 0xff
 802de0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 802de12:	e01b      	b.n	802de4c <UART_Start_Receive_IT+0xa4>
 802de14:	68fb      	ldr	r3, [r7, #12]
 802de16:	227f      	movs	r2, #127	; 0x7f
 802de18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 802de1c:	e016      	b.n	802de4c <UART_Start_Receive_IT+0xa4>
 802de1e:	68fb      	ldr	r3, [r7, #12]
 802de20:	689b      	ldr	r3, [r3, #8]
 802de22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802de26:	d10d      	bne.n	802de44 <UART_Start_Receive_IT+0x9c>
 802de28:	68fb      	ldr	r3, [r7, #12]
 802de2a:	691b      	ldr	r3, [r3, #16]
 802de2c:	2b00      	cmp	r3, #0
 802de2e:	d104      	bne.n	802de3a <UART_Start_Receive_IT+0x92>
 802de30:	68fb      	ldr	r3, [r7, #12]
 802de32:	227f      	movs	r2, #127	; 0x7f
 802de34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 802de38:	e008      	b.n	802de4c <UART_Start_Receive_IT+0xa4>
 802de3a:	68fb      	ldr	r3, [r7, #12]
 802de3c:	223f      	movs	r2, #63	; 0x3f
 802de3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 802de42:	e003      	b.n	802de4c <UART_Start_Receive_IT+0xa4>
 802de44:	68fb      	ldr	r3, [r7, #12]
 802de46:	2200      	movs	r2, #0
 802de48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802de4c:	68fb      	ldr	r3, [r7, #12]
 802de4e:	2200      	movs	r2, #0
 802de50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 802de54:	68fb      	ldr	r3, [r7, #12]
 802de56:	2222      	movs	r2, #34	; 0x22
 802de58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802de5c:	68fb      	ldr	r3, [r7, #12]
 802de5e:	681b      	ldr	r3, [r3, #0]
 802de60:	3308      	adds	r3, #8
 802de62:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802de64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802de66:	e853 3f00 	ldrex	r3, [r3]
 802de6a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 802de6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802de6e:	f043 0301 	orr.w	r3, r3, #1
 802de72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802de76:	68fb      	ldr	r3, [r7, #12]
 802de78:	681b      	ldr	r3, [r3, #0]
 802de7a:	3308      	adds	r3, #8
 802de7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 802de80:	673a      	str	r2, [r7, #112]	; 0x70
 802de82:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802de84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 802de86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802de88:	e841 2300 	strex	r3, r2, [r1]
 802de8c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 802de8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802de90:	2b00      	cmp	r3, #0
 802de92:	d1e3      	bne.n	802de5c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 802de94:	68fb      	ldr	r3, [r7, #12]
 802de96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802de98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802de9c:	d153      	bne.n	802df46 <UART_Start_Receive_IT+0x19e>
 802de9e:	68fb      	ldr	r3, [r7, #12]
 802dea0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 802dea4:	88fa      	ldrh	r2, [r7, #6]
 802dea6:	429a      	cmp	r2, r3
 802dea8:	d34d      	bcc.n	802df46 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802deaa:	68fb      	ldr	r3, [r7, #12]
 802deac:	689b      	ldr	r3, [r3, #8]
 802deae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802deb2:	d107      	bne.n	802dec4 <UART_Start_Receive_IT+0x11c>
 802deb4:	68fb      	ldr	r3, [r7, #12]
 802deb6:	691b      	ldr	r3, [r3, #16]
 802deb8:	2b00      	cmp	r3, #0
 802deba:	d103      	bne.n	802dec4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 802debc:	68fb      	ldr	r3, [r7, #12]
 802debe:	4a4b      	ldr	r2, [pc, #300]	; (802dfec <UART_Start_Receive_IT+0x244>)
 802dec0:	671a      	str	r2, [r3, #112]	; 0x70
 802dec2:	e002      	b.n	802deca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 802dec4:	68fb      	ldr	r3, [r7, #12]
 802dec6:	4a4a      	ldr	r2, [pc, #296]	; (802dff0 <UART_Start_Receive_IT+0x248>)
 802dec8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 802deca:	68fb      	ldr	r3, [r7, #12]
 802decc:	2200      	movs	r2, #0
 802dece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 802ded2:	68fb      	ldr	r3, [r7, #12]
 802ded4:	691b      	ldr	r3, [r3, #16]
 802ded6:	2b00      	cmp	r3, #0
 802ded8:	d01a      	beq.n	802df10 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802deda:	68fb      	ldr	r3, [r7, #12]
 802dedc:	681b      	ldr	r3, [r3, #0]
 802dede:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802dee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802dee2:	e853 3f00 	ldrex	r3, [r3]
 802dee6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 802dee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802deea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802deee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802def2:	68fb      	ldr	r3, [r7, #12]
 802def4:	681b      	ldr	r3, [r3, #0]
 802def6:	461a      	mov	r2, r3
 802def8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802defc:	65fb      	str	r3, [r7, #92]	; 0x5c
 802defe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802df00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802df02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802df04:	e841 2300 	strex	r3, r2, [r1]
 802df08:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 802df0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802df0c:	2b00      	cmp	r3, #0
 802df0e:	d1e4      	bne.n	802deda <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 802df10:	68fb      	ldr	r3, [r7, #12]
 802df12:	681b      	ldr	r3, [r3, #0]
 802df14:	3308      	adds	r3, #8
 802df16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802df18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802df1a:	e853 3f00 	ldrex	r3, [r3]
 802df1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802df20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802df22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802df26:	67fb      	str	r3, [r7, #124]	; 0x7c
 802df28:	68fb      	ldr	r3, [r7, #12]
 802df2a:	681b      	ldr	r3, [r3, #0]
 802df2c:	3308      	adds	r3, #8
 802df2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 802df30:	64ba      	str	r2, [r7, #72]	; 0x48
 802df32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802df34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802df36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802df38:	e841 2300 	strex	r3, r2, [r1]
 802df3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 802df3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802df40:	2b00      	cmp	r3, #0
 802df42:	d1e5      	bne.n	802df10 <UART_Start_Receive_IT+0x168>
 802df44:	e04a      	b.n	802dfdc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802df46:	68fb      	ldr	r3, [r7, #12]
 802df48:	689b      	ldr	r3, [r3, #8]
 802df4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802df4e:	d107      	bne.n	802df60 <UART_Start_Receive_IT+0x1b8>
 802df50:	68fb      	ldr	r3, [r7, #12]
 802df52:	691b      	ldr	r3, [r3, #16]
 802df54:	2b00      	cmp	r3, #0
 802df56:	d103      	bne.n	802df60 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 802df58:	68fb      	ldr	r3, [r7, #12]
 802df5a:	4a26      	ldr	r2, [pc, #152]	; (802dff4 <UART_Start_Receive_IT+0x24c>)
 802df5c:	671a      	str	r2, [r3, #112]	; 0x70
 802df5e:	e002      	b.n	802df66 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 802df60:	68fb      	ldr	r3, [r7, #12]
 802df62:	4a25      	ldr	r2, [pc, #148]	; (802dff8 <UART_Start_Receive_IT+0x250>)
 802df64:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 802df66:	68fb      	ldr	r3, [r7, #12]
 802df68:	2200      	movs	r2, #0
 802df6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 802df6e:	68fb      	ldr	r3, [r7, #12]
 802df70:	691b      	ldr	r3, [r3, #16]
 802df72:	2b00      	cmp	r3, #0
 802df74:	d019      	beq.n	802dfaa <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 802df76:	68fb      	ldr	r3, [r7, #12]
 802df78:	681b      	ldr	r3, [r3, #0]
 802df7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802df7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802df7e:	e853 3f00 	ldrex	r3, [r3]
 802df82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802df84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802df86:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 802df8a:	677b      	str	r3, [r7, #116]	; 0x74
 802df8c:	68fb      	ldr	r3, [r7, #12]
 802df8e:	681b      	ldr	r3, [r3, #0]
 802df90:	461a      	mov	r2, r3
 802df92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802df94:	637b      	str	r3, [r7, #52]	; 0x34
 802df96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802df98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802df9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802df9c:	e841 2300 	strex	r3, r2, [r1]
 802dfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802dfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dfa4:	2b00      	cmp	r3, #0
 802dfa6:	d1e6      	bne.n	802df76 <UART_Start_Receive_IT+0x1ce>
 802dfa8:	e018      	b.n	802dfdc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 802dfaa:	68fb      	ldr	r3, [r7, #12]
 802dfac:	681b      	ldr	r3, [r3, #0]
 802dfae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802dfb0:	697b      	ldr	r3, [r7, #20]
 802dfb2:	e853 3f00 	ldrex	r3, [r3]
 802dfb6:	613b      	str	r3, [r7, #16]
   return(result);
 802dfb8:	693b      	ldr	r3, [r7, #16]
 802dfba:	f043 0320 	orr.w	r3, r3, #32
 802dfbe:	67bb      	str	r3, [r7, #120]	; 0x78
 802dfc0:	68fb      	ldr	r3, [r7, #12]
 802dfc2:	681b      	ldr	r3, [r3, #0]
 802dfc4:	461a      	mov	r2, r3
 802dfc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802dfc8:	623b      	str	r3, [r7, #32]
 802dfca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802dfcc:	69f9      	ldr	r1, [r7, #28]
 802dfce:	6a3a      	ldr	r2, [r7, #32]
 802dfd0:	e841 2300 	strex	r3, r2, [r1]
 802dfd4:	61bb      	str	r3, [r7, #24]
   return(result);
 802dfd6:	69bb      	ldr	r3, [r7, #24]
 802dfd8:	2b00      	cmp	r3, #0
 802dfda:	d1e6      	bne.n	802dfaa <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 802dfdc:	2300      	movs	r3, #0
}
 802dfde:	4618      	mov	r0, r3
 802dfe0:	378c      	adds	r7, #140	; 0x8c
 802dfe2:	46bd      	mov	sp, r7
 802dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dfe8:	4770      	bx	lr
 802dfea:	bf00      	nop
 802dfec:	0802ea49 	.word	0x0802ea49
 802dff0:	0802e751 	.word	0x0802e751
 802dff4:	0802e5ef 	.word	0x0802e5ef
 802dff8:	0802e48f 	.word	0x0802e48f

0802dffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802dffc:	b480      	push	{r7}
 802dffe:	b095      	sub	sp, #84	; 0x54
 802e000:	af00      	add	r7, sp, #0
 802e002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802e004:	687b      	ldr	r3, [r7, #4]
 802e006:	681b      	ldr	r3, [r3, #0]
 802e008:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e00c:	e853 3f00 	ldrex	r3, [r3]
 802e010:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802e012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802e018:	64fb      	str	r3, [r7, #76]	; 0x4c
 802e01a:	687b      	ldr	r3, [r7, #4]
 802e01c:	681b      	ldr	r3, [r3, #0]
 802e01e:	461a      	mov	r2, r3
 802e020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e022:	643b      	str	r3, [r7, #64]	; 0x40
 802e024:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e026:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802e028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802e02a:	e841 2300 	strex	r3, r2, [r1]
 802e02e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802e030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e032:	2b00      	cmp	r3, #0
 802e034:	d1e6      	bne.n	802e004 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802e036:	687b      	ldr	r3, [r7, #4]
 802e038:	681b      	ldr	r3, [r3, #0]
 802e03a:	3308      	adds	r3, #8
 802e03c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e03e:	6a3b      	ldr	r3, [r7, #32]
 802e040:	e853 3f00 	ldrex	r3, [r3]
 802e044:	61fb      	str	r3, [r7, #28]
   return(result);
 802e046:	69fa      	ldr	r2, [r7, #28]
 802e048:	4b1e      	ldr	r3, [pc, #120]	; (802e0c4 <UART_EndRxTransfer+0xc8>)
 802e04a:	4013      	ands	r3, r2
 802e04c:	64bb      	str	r3, [r7, #72]	; 0x48
 802e04e:	687b      	ldr	r3, [r7, #4]
 802e050:	681b      	ldr	r3, [r3, #0]
 802e052:	3308      	adds	r3, #8
 802e054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802e056:	62fa      	str	r2, [r7, #44]	; 0x2c
 802e058:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e05a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802e05c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802e05e:	e841 2300 	strex	r3, r2, [r1]
 802e062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802e064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e066:	2b00      	cmp	r3, #0
 802e068:	d1e5      	bne.n	802e036 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802e06a:	687b      	ldr	r3, [r7, #4]
 802e06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e06e:	2b01      	cmp	r3, #1
 802e070:	d118      	bne.n	802e0a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802e072:	687b      	ldr	r3, [r7, #4]
 802e074:	681b      	ldr	r3, [r3, #0]
 802e076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e078:	68fb      	ldr	r3, [r7, #12]
 802e07a:	e853 3f00 	ldrex	r3, [r3]
 802e07e:	60bb      	str	r3, [r7, #8]
   return(result);
 802e080:	68bb      	ldr	r3, [r7, #8]
 802e082:	f023 0310 	bic.w	r3, r3, #16
 802e086:	647b      	str	r3, [r7, #68]	; 0x44
 802e088:	687b      	ldr	r3, [r7, #4]
 802e08a:	681b      	ldr	r3, [r3, #0]
 802e08c:	461a      	mov	r2, r3
 802e08e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e090:	61bb      	str	r3, [r7, #24]
 802e092:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e094:	6979      	ldr	r1, [r7, #20]
 802e096:	69ba      	ldr	r2, [r7, #24]
 802e098:	e841 2300 	strex	r3, r2, [r1]
 802e09c:	613b      	str	r3, [r7, #16]
   return(result);
 802e09e:	693b      	ldr	r3, [r7, #16]
 802e0a0:	2b00      	cmp	r3, #0
 802e0a2:	d1e6      	bne.n	802e072 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802e0a4:	687b      	ldr	r3, [r7, #4]
 802e0a6:	2220      	movs	r2, #32
 802e0a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802e0ac:	687b      	ldr	r3, [r7, #4]
 802e0ae:	2200      	movs	r2, #0
 802e0b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 802e0b2:	687b      	ldr	r3, [r7, #4]
 802e0b4:	2200      	movs	r2, #0
 802e0b6:	671a      	str	r2, [r3, #112]	; 0x70
}
 802e0b8:	bf00      	nop
 802e0ba:	3754      	adds	r7, #84	; 0x54
 802e0bc:	46bd      	mov	sp, r7
 802e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e0c2:	4770      	bx	lr
 802e0c4:	effffffe 	.word	0xeffffffe

0802e0c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802e0c8:	b580      	push	{r7, lr}
 802e0ca:	b084      	sub	sp, #16
 802e0cc:	af00      	add	r7, sp, #0
 802e0ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802e0d0:	687b      	ldr	r3, [r7, #4]
 802e0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e0d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 802e0d6:	68fb      	ldr	r3, [r7, #12]
 802e0d8:	2200      	movs	r2, #0
 802e0da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 802e0de:	68fb      	ldr	r3, [r7, #12]
 802e0e0:	2200      	movs	r2, #0
 802e0e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802e0e6:	68f8      	ldr	r0, [r7, #12]
 802e0e8:	f7fe ff2a 	bl	802cf40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802e0ec:	bf00      	nop
 802e0ee:	3710      	adds	r7, #16
 802e0f0:	46bd      	mov	sp, r7
 802e0f2:	bd80      	pop	{r7, pc}

0802e0f4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 802e0f4:	b480      	push	{r7}
 802e0f6:	b08f      	sub	sp, #60	; 0x3c
 802e0f8:	af00      	add	r7, sp, #0
 802e0fa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802e0fc:	687b      	ldr	r3, [r7, #4]
 802e0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e102:	2b21      	cmp	r3, #33	; 0x21
 802e104:	d14c      	bne.n	802e1a0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 802e106:	687b      	ldr	r3, [r7, #4]
 802e108:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 802e10c:	b29b      	uxth	r3, r3
 802e10e:	2b00      	cmp	r3, #0
 802e110:	d132      	bne.n	802e178 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 802e112:	687b      	ldr	r3, [r7, #4]
 802e114:	681b      	ldr	r3, [r3, #0]
 802e116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e118:	6a3b      	ldr	r3, [r7, #32]
 802e11a:	e853 3f00 	ldrex	r3, [r3]
 802e11e:	61fb      	str	r3, [r7, #28]
   return(result);
 802e120:	69fb      	ldr	r3, [r7, #28]
 802e122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802e126:	637b      	str	r3, [r7, #52]	; 0x34
 802e128:	687b      	ldr	r3, [r7, #4]
 802e12a:	681b      	ldr	r3, [r3, #0]
 802e12c:	461a      	mov	r2, r3
 802e12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e130:	62fb      	str	r3, [r7, #44]	; 0x2c
 802e132:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802e136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802e138:	e841 2300 	strex	r3, r2, [r1]
 802e13c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802e13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e140:	2b00      	cmp	r3, #0
 802e142:	d1e6      	bne.n	802e112 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 802e144:	687b      	ldr	r3, [r7, #4]
 802e146:	681b      	ldr	r3, [r3, #0]
 802e148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e14a:	68fb      	ldr	r3, [r7, #12]
 802e14c:	e853 3f00 	ldrex	r3, [r3]
 802e150:	60bb      	str	r3, [r7, #8]
   return(result);
 802e152:	68bb      	ldr	r3, [r7, #8]
 802e154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e158:	633b      	str	r3, [r7, #48]	; 0x30
 802e15a:	687b      	ldr	r3, [r7, #4]
 802e15c:	681b      	ldr	r3, [r3, #0]
 802e15e:	461a      	mov	r2, r3
 802e160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e162:	61bb      	str	r3, [r7, #24]
 802e164:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e166:	6979      	ldr	r1, [r7, #20]
 802e168:	69ba      	ldr	r2, [r7, #24]
 802e16a:	e841 2300 	strex	r3, r2, [r1]
 802e16e:	613b      	str	r3, [r7, #16]
   return(result);
 802e170:	693b      	ldr	r3, [r7, #16]
 802e172:	2b00      	cmp	r3, #0
 802e174:	d1e6      	bne.n	802e144 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 802e176:	e013      	b.n	802e1a0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 802e178:	687b      	ldr	r3, [r7, #4]
 802e17a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e17c:	781a      	ldrb	r2, [r3, #0]
 802e17e:	687b      	ldr	r3, [r7, #4]
 802e180:	681b      	ldr	r3, [r3, #0]
 802e182:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 802e184:	687b      	ldr	r3, [r7, #4]
 802e186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e188:	1c5a      	adds	r2, r3, #1
 802e18a:	687b      	ldr	r3, [r7, #4]
 802e18c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 802e18e:	687b      	ldr	r3, [r7, #4]
 802e190:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 802e194:	b29b      	uxth	r3, r3
 802e196:	3b01      	subs	r3, #1
 802e198:	b29a      	uxth	r2, r3
 802e19a:	687b      	ldr	r3, [r7, #4]
 802e19c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 802e1a0:	bf00      	nop
 802e1a2:	373c      	adds	r7, #60	; 0x3c
 802e1a4:	46bd      	mov	sp, r7
 802e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e1aa:	4770      	bx	lr

0802e1ac <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 802e1ac:	b480      	push	{r7}
 802e1ae:	b091      	sub	sp, #68	; 0x44
 802e1b0:	af00      	add	r7, sp, #0
 802e1b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802e1b4:	687b      	ldr	r3, [r7, #4]
 802e1b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e1ba:	2b21      	cmp	r3, #33	; 0x21
 802e1bc:	d151      	bne.n	802e262 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 802e1be:	687b      	ldr	r3, [r7, #4]
 802e1c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 802e1c4:	b29b      	uxth	r3, r3
 802e1c6:	2b00      	cmp	r3, #0
 802e1c8:	d132      	bne.n	802e230 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 802e1ca:	687b      	ldr	r3, [r7, #4]
 802e1cc:	681b      	ldr	r3, [r3, #0]
 802e1ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e1d2:	e853 3f00 	ldrex	r3, [r3]
 802e1d6:	623b      	str	r3, [r7, #32]
   return(result);
 802e1d8:	6a3b      	ldr	r3, [r7, #32]
 802e1da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802e1de:	63bb      	str	r3, [r7, #56]	; 0x38
 802e1e0:	687b      	ldr	r3, [r7, #4]
 802e1e2:	681b      	ldr	r3, [r3, #0]
 802e1e4:	461a      	mov	r2, r3
 802e1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e1e8:	633b      	str	r3, [r7, #48]	; 0x30
 802e1ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e1ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802e1ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802e1f0:	e841 2300 	strex	r3, r2, [r1]
 802e1f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802e1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e1f8:	2b00      	cmp	r3, #0
 802e1fa:	d1e6      	bne.n	802e1ca <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 802e1fc:	687b      	ldr	r3, [r7, #4]
 802e1fe:	681b      	ldr	r3, [r3, #0]
 802e200:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e202:	693b      	ldr	r3, [r7, #16]
 802e204:	e853 3f00 	ldrex	r3, [r3]
 802e208:	60fb      	str	r3, [r7, #12]
   return(result);
 802e20a:	68fb      	ldr	r3, [r7, #12]
 802e20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e210:	637b      	str	r3, [r7, #52]	; 0x34
 802e212:	687b      	ldr	r3, [r7, #4]
 802e214:	681b      	ldr	r3, [r3, #0]
 802e216:	461a      	mov	r2, r3
 802e218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e21a:	61fb      	str	r3, [r7, #28]
 802e21c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e21e:	69b9      	ldr	r1, [r7, #24]
 802e220:	69fa      	ldr	r2, [r7, #28]
 802e222:	e841 2300 	strex	r3, r2, [r1]
 802e226:	617b      	str	r3, [r7, #20]
   return(result);
 802e228:	697b      	ldr	r3, [r7, #20]
 802e22a:	2b00      	cmp	r3, #0
 802e22c:	d1e6      	bne.n	802e1fc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 802e22e:	e018      	b.n	802e262 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802e230:	687b      	ldr	r3, [r7, #4]
 802e232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e234:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 802e236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802e238:	881b      	ldrh	r3, [r3, #0]
 802e23a:	461a      	mov	r2, r3
 802e23c:	687b      	ldr	r3, [r7, #4]
 802e23e:	681b      	ldr	r3, [r3, #0]
 802e240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802e244:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 802e246:	687b      	ldr	r3, [r7, #4]
 802e248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e24a:	1c9a      	adds	r2, r3, #2
 802e24c:	687b      	ldr	r3, [r7, #4]
 802e24e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 802e250:	687b      	ldr	r3, [r7, #4]
 802e252:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 802e256:	b29b      	uxth	r3, r3
 802e258:	3b01      	subs	r3, #1
 802e25a:	b29a      	uxth	r2, r3
 802e25c:	687b      	ldr	r3, [r7, #4]
 802e25e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 802e262:	bf00      	nop
 802e264:	3744      	adds	r7, #68	; 0x44
 802e266:	46bd      	mov	sp, r7
 802e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e26c:	4770      	bx	lr

0802e26e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 802e26e:	b480      	push	{r7}
 802e270:	b091      	sub	sp, #68	; 0x44
 802e272:	af00      	add	r7, sp, #0
 802e274:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802e276:	687b      	ldr	r3, [r7, #4]
 802e278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e27c:	2b21      	cmp	r3, #33	; 0x21
 802e27e:	d160      	bne.n	802e342 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 802e280:	687b      	ldr	r3, [r7, #4]
 802e282:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e286:	87fb      	strh	r3, [r7, #62]	; 0x3e
 802e288:	e057      	b.n	802e33a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 802e28a:	687b      	ldr	r3, [r7, #4]
 802e28c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 802e290:	b29b      	uxth	r3, r3
 802e292:	2b00      	cmp	r3, #0
 802e294:	d133      	bne.n	802e2fe <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 802e296:	687b      	ldr	r3, [r7, #4]
 802e298:	681b      	ldr	r3, [r3, #0]
 802e29a:	3308      	adds	r3, #8
 802e29c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e2a0:	e853 3f00 	ldrex	r3, [r3]
 802e2a4:	623b      	str	r3, [r7, #32]
   return(result);
 802e2a6:	6a3b      	ldr	r3, [r7, #32]
 802e2a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 802e2ac:	63bb      	str	r3, [r7, #56]	; 0x38
 802e2ae:	687b      	ldr	r3, [r7, #4]
 802e2b0:	681b      	ldr	r3, [r3, #0]
 802e2b2:	3308      	adds	r3, #8
 802e2b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802e2b6:	633a      	str	r2, [r7, #48]	; 0x30
 802e2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e2ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802e2bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802e2be:	e841 2300 	strex	r3, r2, [r1]
 802e2c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e2c6:	2b00      	cmp	r3, #0
 802e2c8:	d1e5      	bne.n	802e296 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 802e2ca:	687b      	ldr	r3, [r7, #4]
 802e2cc:	681b      	ldr	r3, [r3, #0]
 802e2ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e2d0:	693b      	ldr	r3, [r7, #16]
 802e2d2:	e853 3f00 	ldrex	r3, [r3]
 802e2d6:	60fb      	str	r3, [r7, #12]
   return(result);
 802e2d8:	68fb      	ldr	r3, [r7, #12]
 802e2da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e2de:	637b      	str	r3, [r7, #52]	; 0x34
 802e2e0:	687b      	ldr	r3, [r7, #4]
 802e2e2:	681b      	ldr	r3, [r3, #0]
 802e2e4:	461a      	mov	r2, r3
 802e2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e2e8:	61fb      	str	r3, [r7, #28]
 802e2ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e2ec:	69b9      	ldr	r1, [r7, #24]
 802e2ee:	69fa      	ldr	r2, [r7, #28]
 802e2f0:	e841 2300 	strex	r3, r2, [r1]
 802e2f4:	617b      	str	r3, [r7, #20]
   return(result);
 802e2f6:	697b      	ldr	r3, [r7, #20]
 802e2f8:	2b00      	cmp	r3, #0
 802e2fa:	d1e6      	bne.n	802e2ca <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 802e2fc:	e021      	b.n	802e342 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 802e2fe:	687b      	ldr	r3, [r7, #4]
 802e300:	681b      	ldr	r3, [r3, #0]
 802e302:	69db      	ldr	r3, [r3, #28]
 802e304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802e308:	2b00      	cmp	r3, #0
 802e30a:	d013      	beq.n	802e334 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 802e30c:	687b      	ldr	r3, [r7, #4]
 802e30e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e310:	781a      	ldrb	r2, [r3, #0]
 802e312:	687b      	ldr	r3, [r7, #4]
 802e314:	681b      	ldr	r3, [r3, #0]
 802e316:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 802e318:	687b      	ldr	r3, [r7, #4]
 802e31a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e31c:	1c5a      	adds	r2, r3, #1
 802e31e:	687b      	ldr	r3, [r7, #4]
 802e320:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 802e322:	687b      	ldr	r3, [r7, #4]
 802e324:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 802e328:	b29b      	uxth	r3, r3
 802e32a:	3b01      	subs	r3, #1
 802e32c:	b29a      	uxth	r2, r3
 802e32e:	687b      	ldr	r3, [r7, #4]
 802e330:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 802e334:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802e336:	3b01      	subs	r3, #1
 802e338:	87fb      	strh	r3, [r7, #62]	; 0x3e
 802e33a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802e33c:	2b00      	cmp	r3, #0
 802e33e:	d1a4      	bne.n	802e28a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 802e340:	e7ff      	b.n	802e342 <UART_TxISR_8BIT_FIFOEN+0xd4>
 802e342:	bf00      	nop
 802e344:	3744      	adds	r7, #68	; 0x44
 802e346:	46bd      	mov	sp, r7
 802e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e34c:	4770      	bx	lr

0802e34e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 802e34e:	b480      	push	{r7}
 802e350:	b091      	sub	sp, #68	; 0x44
 802e352:	af00      	add	r7, sp, #0
 802e354:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802e356:	687b      	ldr	r3, [r7, #4]
 802e358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e35c:	2b21      	cmp	r3, #33	; 0x21
 802e35e:	d165      	bne.n	802e42c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 802e360:	687b      	ldr	r3, [r7, #4]
 802e362:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e366:	87fb      	strh	r3, [r7, #62]	; 0x3e
 802e368:	e05c      	b.n	802e424 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 802e36a:	687b      	ldr	r3, [r7, #4]
 802e36c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 802e370:	b29b      	uxth	r3, r3
 802e372:	2b00      	cmp	r3, #0
 802e374:	d133      	bne.n	802e3de <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 802e376:	687b      	ldr	r3, [r7, #4]
 802e378:	681b      	ldr	r3, [r3, #0]
 802e37a:	3308      	adds	r3, #8
 802e37c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e37e:	6a3b      	ldr	r3, [r7, #32]
 802e380:	e853 3f00 	ldrex	r3, [r3]
 802e384:	61fb      	str	r3, [r7, #28]
   return(result);
 802e386:	69fb      	ldr	r3, [r7, #28]
 802e388:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 802e38c:	637b      	str	r3, [r7, #52]	; 0x34
 802e38e:	687b      	ldr	r3, [r7, #4]
 802e390:	681b      	ldr	r3, [r3, #0]
 802e392:	3308      	adds	r3, #8
 802e394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802e396:	62fa      	str	r2, [r7, #44]	; 0x2c
 802e398:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e39a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802e39c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802e39e:	e841 2300 	strex	r3, r2, [r1]
 802e3a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802e3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e3a6:	2b00      	cmp	r3, #0
 802e3a8:	d1e5      	bne.n	802e376 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 802e3aa:	687b      	ldr	r3, [r7, #4]
 802e3ac:	681b      	ldr	r3, [r3, #0]
 802e3ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e3b0:	68fb      	ldr	r3, [r7, #12]
 802e3b2:	e853 3f00 	ldrex	r3, [r3]
 802e3b6:	60bb      	str	r3, [r7, #8]
   return(result);
 802e3b8:	68bb      	ldr	r3, [r7, #8]
 802e3ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e3be:	633b      	str	r3, [r7, #48]	; 0x30
 802e3c0:	687b      	ldr	r3, [r7, #4]
 802e3c2:	681b      	ldr	r3, [r3, #0]
 802e3c4:	461a      	mov	r2, r3
 802e3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e3c8:	61bb      	str	r3, [r7, #24]
 802e3ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e3cc:	6979      	ldr	r1, [r7, #20]
 802e3ce:	69ba      	ldr	r2, [r7, #24]
 802e3d0:	e841 2300 	strex	r3, r2, [r1]
 802e3d4:	613b      	str	r3, [r7, #16]
   return(result);
 802e3d6:	693b      	ldr	r3, [r7, #16]
 802e3d8:	2b00      	cmp	r3, #0
 802e3da:	d1e6      	bne.n	802e3aa <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 802e3dc:	e026      	b.n	802e42c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 802e3de:	687b      	ldr	r3, [r7, #4]
 802e3e0:	681b      	ldr	r3, [r3, #0]
 802e3e2:	69db      	ldr	r3, [r3, #28]
 802e3e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802e3e8:	2b00      	cmp	r3, #0
 802e3ea:	d018      	beq.n	802e41e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 802e3ec:	687b      	ldr	r3, [r7, #4]
 802e3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e3f0:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 802e3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e3f4:	881b      	ldrh	r3, [r3, #0]
 802e3f6:	461a      	mov	r2, r3
 802e3f8:	687b      	ldr	r3, [r7, #4]
 802e3fa:	681b      	ldr	r3, [r3, #0]
 802e3fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802e400:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 802e402:	687b      	ldr	r3, [r7, #4]
 802e404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e406:	1c9a      	adds	r2, r3, #2
 802e408:	687b      	ldr	r3, [r7, #4]
 802e40a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 802e40c:	687b      	ldr	r3, [r7, #4]
 802e40e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 802e412:	b29b      	uxth	r3, r3
 802e414:	3b01      	subs	r3, #1
 802e416:	b29a      	uxth	r2, r3
 802e418:	687b      	ldr	r3, [r7, #4]
 802e41a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 802e41e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802e420:	3b01      	subs	r3, #1
 802e422:	87fb      	strh	r3, [r7, #62]	; 0x3e
 802e424:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802e426:	2b00      	cmp	r3, #0
 802e428:	d19f      	bne.n	802e36a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 802e42a:	e7ff      	b.n	802e42c <UART_TxISR_16BIT_FIFOEN+0xde>
 802e42c:	bf00      	nop
 802e42e:	3744      	adds	r7, #68	; 0x44
 802e430:	46bd      	mov	sp, r7
 802e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e436:	4770      	bx	lr

0802e438 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802e438:	b580      	push	{r7, lr}
 802e43a:	b088      	sub	sp, #32
 802e43c:	af00      	add	r7, sp, #0
 802e43e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 802e440:	687b      	ldr	r3, [r7, #4]
 802e442:	681b      	ldr	r3, [r3, #0]
 802e444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e446:	68fb      	ldr	r3, [r7, #12]
 802e448:	e853 3f00 	ldrex	r3, [r3]
 802e44c:	60bb      	str	r3, [r7, #8]
   return(result);
 802e44e:	68bb      	ldr	r3, [r7, #8]
 802e450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802e454:	61fb      	str	r3, [r7, #28]
 802e456:	687b      	ldr	r3, [r7, #4]
 802e458:	681b      	ldr	r3, [r3, #0]
 802e45a:	461a      	mov	r2, r3
 802e45c:	69fb      	ldr	r3, [r7, #28]
 802e45e:	61bb      	str	r3, [r7, #24]
 802e460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e462:	6979      	ldr	r1, [r7, #20]
 802e464:	69ba      	ldr	r2, [r7, #24]
 802e466:	e841 2300 	strex	r3, r2, [r1]
 802e46a:	613b      	str	r3, [r7, #16]
   return(result);
 802e46c:	693b      	ldr	r3, [r7, #16]
 802e46e:	2b00      	cmp	r3, #0
 802e470:	d1e6      	bne.n	802e440 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802e472:	687b      	ldr	r3, [r7, #4]
 802e474:	2220      	movs	r2, #32
 802e476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 802e47a:	687b      	ldr	r3, [r7, #4]
 802e47c:	2200      	movs	r2, #0
 802e47e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802e480:	6878      	ldr	r0, [r7, #4]
 802e482:	f7f2 fcfd 	bl	8020e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802e486:	bf00      	nop
 802e488:	3720      	adds	r7, #32
 802e48a:	46bd      	mov	sp, r7
 802e48c:	bd80      	pop	{r7, pc}

0802e48e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 802e48e:	b580      	push	{r7, lr}
 802e490:	b096      	sub	sp, #88	; 0x58
 802e492:	af00      	add	r7, sp, #0
 802e494:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 802e496:	687b      	ldr	r3, [r7, #4]
 802e498:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802e49c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802e4a0:	687b      	ldr	r3, [r7, #4]
 802e4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802e4a6:	2b22      	cmp	r3, #34	; 0x22
 802e4a8:	f040 8095 	bne.w	802e5d6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 802e4ac:	687b      	ldr	r3, [r7, #4]
 802e4ae:	681b      	ldr	r3, [r3, #0]
 802e4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e4b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 802e4b6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 802e4ba:	b2d9      	uxtb	r1, r3
 802e4bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 802e4c0:	b2da      	uxtb	r2, r3
 802e4c2:	687b      	ldr	r3, [r7, #4]
 802e4c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e4c6:	400a      	ands	r2, r1
 802e4c8:	b2d2      	uxtb	r2, r2
 802e4ca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 802e4cc:	687b      	ldr	r3, [r7, #4]
 802e4ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e4d0:	1c5a      	adds	r2, r3, #1
 802e4d2:	687b      	ldr	r3, [r7, #4]
 802e4d4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 802e4d6:	687b      	ldr	r3, [r7, #4]
 802e4d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802e4dc:	b29b      	uxth	r3, r3
 802e4de:	3b01      	subs	r3, #1
 802e4e0:	b29a      	uxth	r2, r3
 802e4e2:	687b      	ldr	r3, [r7, #4]
 802e4e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 802e4e8:	687b      	ldr	r3, [r7, #4]
 802e4ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802e4ee:	b29b      	uxth	r3, r3
 802e4f0:	2b00      	cmp	r3, #0
 802e4f2:	d178      	bne.n	802e5e6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802e4f4:	687b      	ldr	r3, [r7, #4]
 802e4f6:	681b      	ldr	r3, [r3, #0]
 802e4f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e4fc:	e853 3f00 	ldrex	r3, [r3]
 802e500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802e502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802e508:	653b      	str	r3, [r7, #80]	; 0x50
 802e50a:	687b      	ldr	r3, [r7, #4]
 802e50c:	681b      	ldr	r3, [r3, #0]
 802e50e:	461a      	mov	r2, r3
 802e510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802e512:	647b      	str	r3, [r7, #68]	; 0x44
 802e514:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e516:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802e518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e51a:	e841 2300 	strex	r3, r2, [r1]
 802e51e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802e520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802e522:	2b00      	cmp	r3, #0
 802e524:	d1e6      	bne.n	802e4f4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802e526:	687b      	ldr	r3, [r7, #4]
 802e528:	681b      	ldr	r3, [r3, #0]
 802e52a:	3308      	adds	r3, #8
 802e52c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e530:	e853 3f00 	ldrex	r3, [r3]
 802e534:	623b      	str	r3, [r7, #32]
   return(result);
 802e536:	6a3b      	ldr	r3, [r7, #32]
 802e538:	f023 0301 	bic.w	r3, r3, #1
 802e53c:	64fb      	str	r3, [r7, #76]	; 0x4c
 802e53e:	687b      	ldr	r3, [r7, #4]
 802e540:	681b      	ldr	r3, [r3, #0]
 802e542:	3308      	adds	r3, #8
 802e544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802e546:	633a      	str	r2, [r7, #48]	; 0x30
 802e548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e54a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802e54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802e54e:	e841 2300 	strex	r3, r2, [r1]
 802e552:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802e554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e556:	2b00      	cmp	r3, #0
 802e558:	d1e5      	bne.n	802e526 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802e55a:	687b      	ldr	r3, [r7, #4]
 802e55c:	2220      	movs	r2, #32
 802e55e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 802e562:	687b      	ldr	r3, [r7, #4]
 802e564:	2200      	movs	r2, #0
 802e566:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802e568:	687b      	ldr	r3, [r7, #4]
 802e56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e56c:	2b01      	cmp	r3, #1
 802e56e:	d12e      	bne.n	802e5ce <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802e570:	687b      	ldr	r3, [r7, #4]
 802e572:	2200      	movs	r2, #0
 802e574:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802e576:	687b      	ldr	r3, [r7, #4]
 802e578:	681b      	ldr	r3, [r3, #0]
 802e57a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e57c:	693b      	ldr	r3, [r7, #16]
 802e57e:	e853 3f00 	ldrex	r3, [r3]
 802e582:	60fb      	str	r3, [r7, #12]
   return(result);
 802e584:	68fb      	ldr	r3, [r7, #12]
 802e586:	f023 0310 	bic.w	r3, r3, #16
 802e58a:	64bb      	str	r3, [r7, #72]	; 0x48
 802e58c:	687b      	ldr	r3, [r7, #4]
 802e58e:	681b      	ldr	r3, [r3, #0]
 802e590:	461a      	mov	r2, r3
 802e592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e594:	61fb      	str	r3, [r7, #28]
 802e596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e598:	69b9      	ldr	r1, [r7, #24]
 802e59a:	69fa      	ldr	r2, [r7, #28]
 802e59c:	e841 2300 	strex	r3, r2, [r1]
 802e5a0:	617b      	str	r3, [r7, #20]
   return(result);
 802e5a2:	697b      	ldr	r3, [r7, #20]
 802e5a4:	2b00      	cmp	r3, #0
 802e5a6:	d1e6      	bne.n	802e576 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 802e5a8:	687b      	ldr	r3, [r7, #4]
 802e5aa:	681b      	ldr	r3, [r3, #0]
 802e5ac:	69db      	ldr	r3, [r3, #28]
 802e5ae:	f003 0310 	and.w	r3, r3, #16
 802e5b2:	2b10      	cmp	r3, #16
 802e5b4:	d103      	bne.n	802e5be <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 802e5b6:	687b      	ldr	r3, [r7, #4]
 802e5b8:	681b      	ldr	r3, [r3, #0]
 802e5ba:	2210      	movs	r2, #16
 802e5bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802e5be:	687b      	ldr	r3, [r7, #4]
 802e5c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802e5c4:	4619      	mov	r1, r3
 802e5c6:	6878      	ldr	r0, [r7, #4]
 802e5c8:	f7fe fcc4 	bl	802cf54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 802e5cc:	e00b      	b.n	802e5e6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 802e5ce:	6878      	ldr	r0, [r7, #4]
 802e5d0:	f7f2 fc44 	bl	8020e5c <HAL_UART_RxCpltCallback>
}
 802e5d4:	e007      	b.n	802e5e6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 802e5d6:	687b      	ldr	r3, [r7, #4]
 802e5d8:	681b      	ldr	r3, [r3, #0]
 802e5da:	699a      	ldr	r2, [r3, #24]
 802e5dc:	687b      	ldr	r3, [r7, #4]
 802e5de:	681b      	ldr	r3, [r3, #0]
 802e5e0:	f042 0208 	orr.w	r2, r2, #8
 802e5e4:	619a      	str	r2, [r3, #24]
}
 802e5e6:	bf00      	nop
 802e5e8:	3758      	adds	r7, #88	; 0x58
 802e5ea:	46bd      	mov	sp, r7
 802e5ec:	bd80      	pop	{r7, pc}

0802e5ee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 802e5ee:	b580      	push	{r7, lr}
 802e5f0:	b096      	sub	sp, #88	; 0x58
 802e5f2:	af00      	add	r7, sp, #0
 802e5f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 802e5f6:	687b      	ldr	r3, [r7, #4]
 802e5f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802e5fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802e600:	687b      	ldr	r3, [r7, #4]
 802e602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802e606:	2b22      	cmp	r3, #34	; 0x22
 802e608:	f040 8095 	bne.w	802e736 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 802e60c:	687b      	ldr	r3, [r7, #4]
 802e60e:	681b      	ldr	r3, [r3, #0]
 802e610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e612:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 802e616:	687b      	ldr	r3, [r7, #4]
 802e618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e61a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 802e61c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 802e620:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 802e624:	4013      	ands	r3, r2
 802e626:	b29a      	uxth	r2, r3
 802e628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802e62a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 802e62c:	687b      	ldr	r3, [r7, #4]
 802e62e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e630:	1c9a      	adds	r2, r3, #2
 802e632:	687b      	ldr	r3, [r7, #4]
 802e634:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 802e636:	687b      	ldr	r3, [r7, #4]
 802e638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802e63c:	b29b      	uxth	r3, r3
 802e63e:	3b01      	subs	r3, #1
 802e640:	b29a      	uxth	r2, r3
 802e642:	687b      	ldr	r3, [r7, #4]
 802e644:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 802e648:	687b      	ldr	r3, [r7, #4]
 802e64a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802e64e:	b29b      	uxth	r3, r3
 802e650:	2b00      	cmp	r3, #0
 802e652:	d178      	bne.n	802e746 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802e654:	687b      	ldr	r3, [r7, #4]
 802e656:	681b      	ldr	r3, [r3, #0]
 802e658:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e65c:	e853 3f00 	ldrex	r3, [r3]
 802e660:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802e662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e664:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802e668:	64fb      	str	r3, [r7, #76]	; 0x4c
 802e66a:	687b      	ldr	r3, [r7, #4]
 802e66c:	681b      	ldr	r3, [r3, #0]
 802e66e:	461a      	mov	r2, r3
 802e670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e672:	643b      	str	r3, [r7, #64]	; 0x40
 802e674:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e676:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802e678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802e67a:	e841 2300 	strex	r3, r2, [r1]
 802e67e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802e680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e682:	2b00      	cmp	r3, #0
 802e684:	d1e6      	bne.n	802e654 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802e686:	687b      	ldr	r3, [r7, #4]
 802e688:	681b      	ldr	r3, [r3, #0]
 802e68a:	3308      	adds	r3, #8
 802e68c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e68e:	6a3b      	ldr	r3, [r7, #32]
 802e690:	e853 3f00 	ldrex	r3, [r3]
 802e694:	61fb      	str	r3, [r7, #28]
   return(result);
 802e696:	69fb      	ldr	r3, [r7, #28]
 802e698:	f023 0301 	bic.w	r3, r3, #1
 802e69c:	64bb      	str	r3, [r7, #72]	; 0x48
 802e69e:	687b      	ldr	r3, [r7, #4]
 802e6a0:	681b      	ldr	r3, [r3, #0]
 802e6a2:	3308      	adds	r3, #8
 802e6a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802e6a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 802e6a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e6aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802e6ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802e6ae:	e841 2300 	strex	r3, r2, [r1]
 802e6b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e6b6:	2b00      	cmp	r3, #0
 802e6b8:	d1e5      	bne.n	802e686 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802e6ba:	687b      	ldr	r3, [r7, #4]
 802e6bc:	2220      	movs	r2, #32
 802e6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 802e6c2:	687b      	ldr	r3, [r7, #4]
 802e6c4:	2200      	movs	r2, #0
 802e6c6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802e6c8:	687b      	ldr	r3, [r7, #4]
 802e6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e6cc:	2b01      	cmp	r3, #1
 802e6ce:	d12e      	bne.n	802e72e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802e6d0:	687b      	ldr	r3, [r7, #4]
 802e6d2:	2200      	movs	r2, #0
 802e6d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802e6d6:	687b      	ldr	r3, [r7, #4]
 802e6d8:	681b      	ldr	r3, [r3, #0]
 802e6da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e6dc:	68fb      	ldr	r3, [r7, #12]
 802e6de:	e853 3f00 	ldrex	r3, [r3]
 802e6e2:	60bb      	str	r3, [r7, #8]
   return(result);
 802e6e4:	68bb      	ldr	r3, [r7, #8]
 802e6e6:	f023 0310 	bic.w	r3, r3, #16
 802e6ea:	647b      	str	r3, [r7, #68]	; 0x44
 802e6ec:	687b      	ldr	r3, [r7, #4]
 802e6ee:	681b      	ldr	r3, [r3, #0]
 802e6f0:	461a      	mov	r2, r3
 802e6f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e6f4:	61bb      	str	r3, [r7, #24]
 802e6f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e6f8:	6979      	ldr	r1, [r7, #20]
 802e6fa:	69ba      	ldr	r2, [r7, #24]
 802e6fc:	e841 2300 	strex	r3, r2, [r1]
 802e700:	613b      	str	r3, [r7, #16]
   return(result);
 802e702:	693b      	ldr	r3, [r7, #16]
 802e704:	2b00      	cmp	r3, #0
 802e706:	d1e6      	bne.n	802e6d6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 802e708:	687b      	ldr	r3, [r7, #4]
 802e70a:	681b      	ldr	r3, [r3, #0]
 802e70c:	69db      	ldr	r3, [r3, #28]
 802e70e:	f003 0310 	and.w	r3, r3, #16
 802e712:	2b10      	cmp	r3, #16
 802e714:	d103      	bne.n	802e71e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 802e716:	687b      	ldr	r3, [r7, #4]
 802e718:	681b      	ldr	r3, [r3, #0]
 802e71a:	2210      	movs	r2, #16
 802e71c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802e71e:	687b      	ldr	r3, [r7, #4]
 802e720:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802e724:	4619      	mov	r1, r3
 802e726:	6878      	ldr	r0, [r7, #4]
 802e728:	f7fe fc14 	bl	802cf54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 802e72c:	e00b      	b.n	802e746 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 802e72e:	6878      	ldr	r0, [r7, #4]
 802e730:	f7f2 fb94 	bl	8020e5c <HAL_UART_RxCpltCallback>
}
 802e734:	e007      	b.n	802e746 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 802e736:	687b      	ldr	r3, [r7, #4]
 802e738:	681b      	ldr	r3, [r3, #0]
 802e73a:	699a      	ldr	r2, [r3, #24]
 802e73c:	687b      	ldr	r3, [r7, #4]
 802e73e:	681b      	ldr	r3, [r3, #0]
 802e740:	f042 0208 	orr.w	r2, r2, #8
 802e744:	619a      	str	r2, [r3, #24]
}
 802e746:	bf00      	nop
 802e748:	3758      	adds	r7, #88	; 0x58
 802e74a:	46bd      	mov	sp, r7
 802e74c:	bd80      	pop	{r7, pc}
	...

0802e750 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 802e750:	b580      	push	{r7, lr}
 802e752:	b0a6      	sub	sp, #152	; 0x98
 802e754:	af00      	add	r7, sp, #0
 802e756:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 802e758:	687b      	ldr	r3, [r7, #4]
 802e75a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802e75e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 802e762:	687b      	ldr	r3, [r7, #4]
 802e764:	681b      	ldr	r3, [r3, #0]
 802e766:	69db      	ldr	r3, [r3, #28]
 802e768:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 802e76c:	687b      	ldr	r3, [r7, #4]
 802e76e:	681b      	ldr	r3, [r3, #0]
 802e770:	681b      	ldr	r3, [r3, #0]
 802e772:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 802e776:	687b      	ldr	r3, [r7, #4]
 802e778:	681b      	ldr	r3, [r3, #0]
 802e77a:	689b      	ldr	r3, [r3, #8]
 802e77c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802e780:	687b      	ldr	r3, [r7, #4]
 802e782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802e786:	2b22      	cmp	r3, #34	; 0x22
 802e788:	f040 814d 	bne.w	802ea26 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 802e78c:	687b      	ldr	r3, [r7, #4]
 802e78e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 802e792:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 802e796:	e0f4      	b.n	802e982 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 802e798:	687b      	ldr	r3, [r7, #4]
 802e79a:	681b      	ldr	r3, [r3, #0]
 802e79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e79e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 802e7a2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 802e7a6:	b2d9      	uxtb	r1, r3
 802e7a8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 802e7ac:	b2da      	uxtb	r2, r3
 802e7ae:	687b      	ldr	r3, [r7, #4]
 802e7b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e7b2:	400a      	ands	r2, r1
 802e7b4:	b2d2      	uxtb	r2, r2
 802e7b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 802e7b8:	687b      	ldr	r3, [r7, #4]
 802e7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e7bc:	1c5a      	adds	r2, r3, #1
 802e7be:	687b      	ldr	r3, [r7, #4]
 802e7c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 802e7c2:	687b      	ldr	r3, [r7, #4]
 802e7c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802e7c8:	b29b      	uxth	r3, r3
 802e7ca:	3b01      	subs	r3, #1
 802e7cc:	b29a      	uxth	r2, r3
 802e7ce:	687b      	ldr	r3, [r7, #4]
 802e7d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 802e7d4:	687b      	ldr	r3, [r7, #4]
 802e7d6:	681b      	ldr	r3, [r3, #0]
 802e7d8:	69db      	ldr	r3, [r3, #28]
 802e7da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 802e7de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802e7e2:	f003 0307 	and.w	r3, r3, #7
 802e7e6:	2b00      	cmp	r3, #0
 802e7e8:	d053      	beq.n	802e892 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 802e7ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802e7ee:	f003 0301 	and.w	r3, r3, #1
 802e7f2:	2b00      	cmp	r3, #0
 802e7f4:	d011      	beq.n	802e81a <UART_RxISR_8BIT_FIFOEN+0xca>
 802e7f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802e7fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e7fe:	2b00      	cmp	r3, #0
 802e800:	d00b      	beq.n	802e81a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 802e802:	687b      	ldr	r3, [r7, #4]
 802e804:	681b      	ldr	r3, [r3, #0]
 802e806:	2201      	movs	r2, #1
 802e808:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 802e80a:	687b      	ldr	r3, [r7, #4]
 802e80c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e810:	f043 0201 	orr.w	r2, r3, #1
 802e814:	687b      	ldr	r3, [r7, #4]
 802e816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 802e81a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802e81e:	f003 0302 	and.w	r3, r3, #2
 802e822:	2b00      	cmp	r3, #0
 802e824:	d011      	beq.n	802e84a <UART_RxISR_8BIT_FIFOEN+0xfa>
 802e826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802e82a:	f003 0301 	and.w	r3, r3, #1
 802e82e:	2b00      	cmp	r3, #0
 802e830:	d00b      	beq.n	802e84a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 802e832:	687b      	ldr	r3, [r7, #4]
 802e834:	681b      	ldr	r3, [r3, #0]
 802e836:	2202      	movs	r2, #2
 802e838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 802e83a:	687b      	ldr	r3, [r7, #4]
 802e83c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e840:	f043 0204 	orr.w	r2, r3, #4
 802e844:	687b      	ldr	r3, [r7, #4]
 802e846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 802e84a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802e84e:	f003 0304 	and.w	r3, r3, #4
 802e852:	2b00      	cmp	r3, #0
 802e854:	d011      	beq.n	802e87a <UART_RxISR_8BIT_FIFOEN+0x12a>
 802e856:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802e85a:	f003 0301 	and.w	r3, r3, #1
 802e85e:	2b00      	cmp	r3, #0
 802e860:	d00b      	beq.n	802e87a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 802e862:	687b      	ldr	r3, [r7, #4]
 802e864:	681b      	ldr	r3, [r3, #0]
 802e866:	2204      	movs	r2, #4
 802e868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 802e86a:	687b      	ldr	r3, [r7, #4]
 802e86c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e870:	f043 0202 	orr.w	r2, r3, #2
 802e874:	687b      	ldr	r3, [r7, #4]
 802e876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802e87a:	687b      	ldr	r3, [r7, #4]
 802e87c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802e880:	2b00      	cmp	r3, #0
 802e882:	d006      	beq.n	802e892 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802e884:	6878      	ldr	r0, [r7, #4]
 802e886:	f7fe fb5b 	bl	802cf40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 802e88a:	687b      	ldr	r3, [r7, #4]
 802e88c:	2200      	movs	r2, #0
 802e88e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 802e892:	687b      	ldr	r3, [r7, #4]
 802e894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802e898:	b29b      	uxth	r3, r3
 802e89a:	2b00      	cmp	r3, #0
 802e89c:	d171      	bne.n	802e982 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802e89e:	687b      	ldr	r3, [r7, #4]
 802e8a0:	681b      	ldr	r3, [r3, #0]
 802e8a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e8a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802e8a6:	e853 3f00 	ldrex	r3, [r3]
 802e8aa:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 802e8ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802e8ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802e8b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802e8b6:	687b      	ldr	r3, [r7, #4]
 802e8b8:	681b      	ldr	r3, [r3, #0]
 802e8ba:	461a      	mov	r2, r3
 802e8bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802e8c0:	66bb      	str	r3, [r7, #104]	; 0x68
 802e8c2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e8c4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 802e8c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802e8c8:	e841 2300 	strex	r3, r2, [r1]
 802e8cc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 802e8ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802e8d0:	2b00      	cmp	r3, #0
 802e8d2:	d1e4      	bne.n	802e89e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802e8d4:	687b      	ldr	r3, [r7, #4]
 802e8d6:	681b      	ldr	r3, [r3, #0]
 802e8d8:	3308      	adds	r3, #8
 802e8da:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e8dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e8de:	e853 3f00 	ldrex	r3, [r3]
 802e8e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 802e8e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e8e6:	4b56      	ldr	r3, [pc, #344]	; (802ea40 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 802e8e8:	4013      	ands	r3, r2
 802e8ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 802e8ec:	687b      	ldr	r3, [r7, #4]
 802e8ee:	681b      	ldr	r3, [r3, #0]
 802e8f0:	3308      	adds	r3, #8
 802e8f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 802e8f4:	657a      	str	r2, [r7, #84]	; 0x54
 802e8f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e8f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802e8fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802e8fc:	e841 2300 	strex	r3, r2, [r1]
 802e900:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 802e902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e904:	2b00      	cmp	r3, #0
 802e906:	d1e5      	bne.n	802e8d4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802e908:	687b      	ldr	r3, [r7, #4]
 802e90a:	2220      	movs	r2, #32
 802e90c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 802e910:	687b      	ldr	r3, [r7, #4]
 802e912:	2200      	movs	r2, #0
 802e914:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802e916:	687b      	ldr	r3, [r7, #4]
 802e918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e91a:	2b01      	cmp	r3, #1
 802e91c:	d12e      	bne.n	802e97c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802e91e:	687b      	ldr	r3, [r7, #4]
 802e920:	2200      	movs	r2, #0
 802e922:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802e924:	687b      	ldr	r3, [r7, #4]
 802e926:	681b      	ldr	r3, [r3, #0]
 802e928:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e92c:	e853 3f00 	ldrex	r3, [r3]
 802e930:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802e932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e934:	f023 0310 	bic.w	r3, r3, #16
 802e938:	67bb      	str	r3, [r7, #120]	; 0x78
 802e93a:	687b      	ldr	r3, [r7, #4]
 802e93c:	681b      	ldr	r3, [r3, #0]
 802e93e:	461a      	mov	r2, r3
 802e940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802e942:	643b      	str	r3, [r7, #64]	; 0x40
 802e944:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e946:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802e948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802e94a:	e841 2300 	strex	r3, r2, [r1]
 802e94e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802e950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e952:	2b00      	cmp	r3, #0
 802e954:	d1e6      	bne.n	802e924 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 802e956:	687b      	ldr	r3, [r7, #4]
 802e958:	681b      	ldr	r3, [r3, #0]
 802e95a:	69db      	ldr	r3, [r3, #28]
 802e95c:	f003 0310 	and.w	r3, r3, #16
 802e960:	2b10      	cmp	r3, #16
 802e962:	d103      	bne.n	802e96c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 802e964:	687b      	ldr	r3, [r7, #4]
 802e966:	681b      	ldr	r3, [r3, #0]
 802e968:	2210      	movs	r2, #16
 802e96a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802e96c:	687b      	ldr	r3, [r7, #4]
 802e96e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802e972:	4619      	mov	r1, r3
 802e974:	6878      	ldr	r0, [r7, #4]
 802e976:	f7fe faed 	bl	802cf54 <HAL_UARTEx_RxEventCallback>
 802e97a:	e002      	b.n	802e982 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 802e97c:	6878      	ldr	r0, [r7, #4]
 802e97e:	f7f2 fa6d 	bl	8020e5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 802e982:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 802e986:	2b00      	cmp	r3, #0
 802e988:	d006      	beq.n	802e998 <UART_RxISR_8BIT_FIFOEN+0x248>
 802e98a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802e98e:	f003 0320 	and.w	r3, r3, #32
 802e992:	2b00      	cmp	r3, #0
 802e994:	f47f af00 	bne.w	802e798 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 802e998:	687b      	ldr	r3, [r7, #4]
 802e99a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802e99e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 802e9a2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 802e9a6:	2b00      	cmp	r3, #0
 802e9a8:	d045      	beq.n	802ea36 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 802e9aa:	687b      	ldr	r3, [r7, #4]
 802e9ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 802e9b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 802e9b4:	429a      	cmp	r2, r3
 802e9b6:	d23e      	bcs.n	802ea36 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 802e9b8:	687b      	ldr	r3, [r7, #4]
 802e9ba:	681b      	ldr	r3, [r3, #0]
 802e9bc:	3308      	adds	r3, #8
 802e9be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e9c0:	6a3b      	ldr	r3, [r7, #32]
 802e9c2:	e853 3f00 	ldrex	r3, [r3]
 802e9c6:	61fb      	str	r3, [r7, #28]
   return(result);
 802e9c8:	69fb      	ldr	r3, [r7, #28]
 802e9ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802e9ce:	673b      	str	r3, [r7, #112]	; 0x70
 802e9d0:	687b      	ldr	r3, [r7, #4]
 802e9d2:	681b      	ldr	r3, [r3, #0]
 802e9d4:	3308      	adds	r3, #8
 802e9d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802e9d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 802e9da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e9dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802e9de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802e9e0:	e841 2300 	strex	r3, r2, [r1]
 802e9e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802e9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e9e8:	2b00      	cmp	r3, #0
 802e9ea:	d1e5      	bne.n	802e9b8 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 802e9ec:	687b      	ldr	r3, [r7, #4]
 802e9ee:	4a15      	ldr	r2, [pc, #84]	; (802ea44 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 802e9f0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 802e9f2:	687b      	ldr	r3, [r7, #4]
 802e9f4:	681b      	ldr	r3, [r3, #0]
 802e9f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e9f8:	68fb      	ldr	r3, [r7, #12]
 802e9fa:	e853 3f00 	ldrex	r3, [r3]
 802e9fe:	60bb      	str	r3, [r7, #8]
   return(result);
 802ea00:	68bb      	ldr	r3, [r7, #8]
 802ea02:	f043 0320 	orr.w	r3, r3, #32
 802ea06:	66fb      	str	r3, [r7, #108]	; 0x6c
 802ea08:	687b      	ldr	r3, [r7, #4]
 802ea0a:	681b      	ldr	r3, [r3, #0]
 802ea0c:	461a      	mov	r2, r3
 802ea0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802ea10:	61bb      	str	r3, [r7, #24]
 802ea12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ea14:	6979      	ldr	r1, [r7, #20]
 802ea16:	69ba      	ldr	r2, [r7, #24]
 802ea18:	e841 2300 	strex	r3, r2, [r1]
 802ea1c:	613b      	str	r3, [r7, #16]
   return(result);
 802ea1e:	693b      	ldr	r3, [r7, #16]
 802ea20:	2b00      	cmp	r3, #0
 802ea22:	d1e6      	bne.n	802e9f2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 802ea24:	e007      	b.n	802ea36 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 802ea26:	687b      	ldr	r3, [r7, #4]
 802ea28:	681b      	ldr	r3, [r3, #0]
 802ea2a:	699a      	ldr	r2, [r3, #24]
 802ea2c:	687b      	ldr	r3, [r7, #4]
 802ea2e:	681b      	ldr	r3, [r3, #0]
 802ea30:	f042 0208 	orr.w	r2, r2, #8
 802ea34:	619a      	str	r2, [r3, #24]
}
 802ea36:	bf00      	nop
 802ea38:	3798      	adds	r7, #152	; 0x98
 802ea3a:	46bd      	mov	sp, r7
 802ea3c:	bd80      	pop	{r7, pc}
 802ea3e:	bf00      	nop
 802ea40:	effffffe 	.word	0xeffffffe
 802ea44:	0802e48f 	.word	0x0802e48f

0802ea48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 802ea48:	b580      	push	{r7, lr}
 802ea4a:	b0a8      	sub	sp, #160	; 0xa0
 802ea4c:	af00      	add	r7, sp, #0
 802ea4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 802ea50:	687b      	ldr	r3, [r7, #4]
 802ea52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802ea56:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 802ea5a:	687b      	ldr	r3, [r7, #4]
 802ea5c:	681b      	ldr	r3, [r3, #0]
 802ea5e:	69db      	ldr	r3, [r3, #28]
 802ea60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 802ea64:	687b      	ldr	r3, [r7, #4]
 802ea66:	681b      	ldr	r3, [r3, #0]
 802ea68:	681b      	ldr	r3, [r3, #0]
 802ea6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 802ea6e:	687b      	ldr	r3, [r7, #4]
 802ea70:	681b      	ldr	r3, [r3, #0]
 802ea72:	689b      	ldr	r3, [r3, #8]
 802ea74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802ea78:	687b      	ldr	r3, [r7, #4]
 802ea7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802ea7e:	2b22      	cmp	r3, #34	; 0x22
 802ea80:	f040 8151 	bne.w	802ed26 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 802ea84:	687b      	ldr	r3, [r7, #4]
 802ea86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 802ea8a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 802ea8e:	e0f8      	b.n	802ec82 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 802ea90:	687b      	ldr	r3, [r7, #4]
 802ea92:	681b      	ldr	r3, [r3, #0]
 802ea94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ea96:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 802ea9a:	687b      	ldr	r3, [r7, #4]
 802ea9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802ea9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 802eaa2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 802eaa6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 802eaaa:	4013      	ands	r3, r2
 802eaac:	b29a      	uxth	r2, r3
 802eaae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802eab2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802eab4:	687b      	ldr	r3, [r7, #4]
 802eab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802eab8:	1c9a      	adds	r2, r3, #2
 802eaba:	687b      	ldr	r3, [r7, #4]
 802eabc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 802eabe:	687b      	ldr	r3, [r7, #4]
 802eac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802eac4:	b29b      	uxth	r3, r3
 802eac6:	3b01      	subs	r3, #1
 802eac8:	b29a      	uxth	r2, r3
 802eaca:	687b      	ldr	r3, [r7, #4]
 802eacc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 802ead0:	687b      	ldr	r3, [r7, #4]
 802ead2:	681b      	ldr	r3, [r3, #0]
 802ead4:	69db      	ldr	r3, [r3, #28]
 802ead6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 802eada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802eade:	f003 0307 	and.w	r3, r3, #7
 802eae2:	2b00      	cmp	r3, #0
 802eae4:	d053      	beq.n	802eb8e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 802eae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802eaea:	f003 0301 	and.w	r3, r3, #1
 802eaee:	2b00      	cmp	r3, #0
 802eaf0:	d011      	beq.n	802eb16 <UART_RxISR_16BIT_FIFOEN+0xce>
 802eaf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802eaf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802eafa:	2b00      	cmp	r3, #0
 802eafc:	d00b      	beq.n	802eb16 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 802eafe:	687b      	ldr	r3, [r7, #4]
 802eb00:	681b      	ldr	r3, [r3, #0]
 802eb02:	2201      	movs	r2, #1
 802eb04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 802eb06:	687b      	ldr	r3, [r7, #4]
 802eb08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802eb0c:	f043 0201 	orr.w	r2, r3, #1
 802eb10:	687b      	ldr	r3, [r7, #4]
 802eb12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 802eb16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802eb1a:	f003 0302 	and.w	r3, r3, #2
 802eb1e:	2b00      	cmp	r3, #0
 802eb20:	d011      	beq.n	802eb46 <UART_RxISR_16BIT_FIFOEN+0xfe>
 802eb22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802eb26:	f003 0301 	and.w	r3, r3, #1
 802eb2a:	2b00      	cmp	r3, #0
 802eb2c:	d00b      	beq.n	802eb46 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 802eb2e:	687b      	ldr	r3, [r7, #4]
 802eb30:	681b      	ldr	r3, [r3, #0]
 802eb32:	2202      	movs	r2, #2
 802eb34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 802eb36:	687b      	ldr	r3, [r7, #4]
 802eb38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802eb3c:	f043 0204 	orr.w	r2, r3, #4
 802eb40:	687b      	ldr	r3, [r7, #4]
 802eb42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 802eb46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802eb4a:	f003 0304 	and.w	r3, r3, #4
 802eb4e:	2b00      	cmp	r3, #0
 802eb50:	d011      	beq.n	802eb76 <UART_RxISR_16BIT_FIFOEN+0x12e>
 802eb52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802eb56:	f003 0301 	and.w	r3, r3, #1
 802eb5a:	2b00      	cmp	r3, #0
 802eb5c:	d00b      	beq.n	802eb76 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 802eb5e:	687b      	ldr	r3, [r7, #4]
 802eb60:	681b      	ldr	r3, [r3, #0]
 802eb62:	2204      	movs	r2, #4
 802eb64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 802eb66:	687b      	ldr	r3, [r7, #4]
 802eb68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802eb6c:	f043 0202 	orr.w	r2, r3, #2
 802eb70:	687b      	ldr	r3, [r7, #4]
 802eb72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802eb76:	687b      	ldr	r3, [r7, #4]
 802eb78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802eb7c:	2b00      	cmp	r3, #0
 802eb7e:	d006      	beq.n	802eb8e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802eb80:	6878      	ldr	r0, [r7, #4]
 802eb82:	f7fe f9dd 	bl	802cf40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 802eb86:	687b      	ldr	r3, [r7, #4]
 802eb88:	2200      	movs	r2, #0
 802eb8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 802eb8e:	687b      	ldr	r3, [r7, #4]
 802eb90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802eb94:	b29b      	uxth	r3, r3
 802eb96:	2b00      	cmp	r3, #0
 802eb98:	d173      	bne.n	802ec82 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802eb9a:	687b      	ldr	r3, [r7, #4]
 802eb9c:	681b      	ldr	r3, [r3, #0]
 802eb9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802eba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802eba2:	e853 3f00 	ldrex	r3, [r3]
 802eba6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 802eba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802ebaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802ebae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802ebb2:	687b      	ldr	r3, [r7, #4]
 802ebb4:	681b      	ldr	r3, [r3, #0]
 802ebb6:	461a      	mov	r2, r3
 802ebb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802ebbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 802ebbe:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ebc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802ebc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802ebc4:	e841 2300 	strex	r3, r2, [r1]
 802ebc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 802ebca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802ebcc:	2b00      	cmp	r3, #0
 802ebce:	d1e4      	bne.n	802eb9a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802ebd0:	687b      	ldr	r3, [r7, #4]
 802ebd2:	681b      	ldr	r3, [r3, #0]
 802ebd4:	3308      	adds	r3, #8
 802ebd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ebd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ebda:	e853 3f00 	ldrex	r3, [r3]
 802ebde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802ebe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ebe2:	4b57      	ldr	r3, [pc, #348]	; (802ed40 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 802ebe4:	4013      	ands	r3, r2
 802ebe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802ebea:	687b      	ldr	r3, [r7, #4]
 802ebec:	681b      	ldr	r3, [r3, #0]
 802ebee:	3308      	adds	r3, #8
 802ebf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802ebf4:	65ba      	str	r2, [r7, #88]	; 0x58
 802ebf6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ebf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802ebfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802ebfc:	e841 2300 	strex	r3, r2, [r1]
 802ec00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802ec02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ec04:	2b00      	cmp	r3, #0
 802ec06:	d1e3      	bne.n	802ebd0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802ec08:	687b      	ldr	r3, [r7, #4]
 802ec0a:	2220      	movs	r2, #32
 802ec0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 802ec10:	687b      	ldr	r3, [r7, #4]
 802ec12:	2200      	movs	r2, #0
 802ec14:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802ec16:	687b      	ldr	r3, [r7, #4]
 802ec18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ec1a:	2b01      	cmp	r3, #1
 802ec1c:	d12e      	bne.n	802ec7c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802ec1e:	687b      	ldr	r3, [r7, #4]
 802ec20:	2200      	movs	r2, #0
 802ec22:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802ec24:	687b      	ldr	r3, [r7, #4]
 802ec26:	681b      	ldr	r3, [r3, #0]
 802ec28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ec2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ec2c:	e853 3f00 	ldrex	r3, [r3]
 802ec30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802ec32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ec34:	f023 0310 	bic.w	r3, r3, #16
 802ec38:	67fb      	str	r3, [r7, #124]	; 0x7c
 802ec3a:	687b      	ldr	r3, [r7, #4]
 802ec3c:	681b      	ldr	r3, [r3, #0]
 802ec3e:	461a      	mov	r2, r3
 802ec40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802ec42:	647b      	str	r3, [r7, #68]	; 0x44
 802ec44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ec46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802ec48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802ec4a:	e841 2300 	strex	r3, r2, [r1]
 802ec4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802ec50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ec52:	2b00      	cmp	r3, #0
 802ec54:	d1e6      	bne.n	802ec24 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 802ec56:	687b      	ldr	r3, [r7, #4]
 802ec58:	681b      	ldr	r3, [r3, #0]
 802ec5a:	69db      	ldr	r3, [r3, #28]
 802ec5c:	f003 0310 	and.w	r3, r3, #16
 802ec60:	2b10      	cmp	r3, #16
 802ec62:	d103      	bne.n	802ec6c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 802ec64:	687b      	ldr	r3, [r7, #4]
 802ec66:	681b      	ldr	r3, [r3, #0]
 802ec68:	2210      	movs	r2, #16
 802ec6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802ec6c:	687b      	ldr	r3, [r7, #4]
 802ec6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802ec72:	4619      	mov	r1, r3
 802ec74:	6878      	ldr	r0, [r7, #4]
 802ec76:	f7fe f96d 	bl	802cf54 <HAL_UARTEx_RxEventCallback>
 802ec7a:	e002      	b.n	802ec82 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 802ec7c:	6878      	ldr	r0, [r7, #4]
 802ec7e:	f7f2 f8ed 	bl	8020e5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 802ec82:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 802ec86:	2b00      	cmp	r3, #0
 802ec88:	d006      	beq.n	802ec98 <UART_RxISR_16BIT_FIFOEN+0x250>
 802ec8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802ec8e:	f003 0320 	and.w	r3, r3, #32
 802ec92:	2b00      	cmp	r3, #0
 802ec94:	f47f aefc 	bne.w	802ea90 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 802ec98:	687b      	ldr	r3, [r7, #4]
 802ec9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 802ec9e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 802eca2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 802eca6:	2b00      	cmp	r3, #0
 802eca8:	d045      	beq.n	802ed36 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 802ecaa:	687b      	ldr	r3, [r7, #4]
 802ecac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 802ecb0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 802ecb4:	429a      	cmp	r2, r3
 802ecb6:	d23e      	bcs.n	802ed36 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 802ecb8:	687b      	ldr	r3, [r7, #4]
 802ecba:	681b      	ldr	r3, [r3, #0]
 802ecbc:	3308      	adds	r3, #8
 802ecbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ecc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ecc2:	e853 3f00 	ldrex	r3, [r3]
 802ecc6:	623b      	str	r3, [r7, #32]
   return(result);
 802ecc8:	6a3b      	ldr	r3, [r7, #32]
 802ecca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802ecce:	677b      	str	r3, [r7, #116]	; 0x74
 802ecd0:	687b      	ldr	r3, [r7, #4]
 802ecd2:	681b      	ldr	r3, [r3, #0]
 802ecd4:	3308      	adds	r3, #8
 802ecd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802ecd8:	633a      	str	r2, [r7, #48]	; 0x30
 802ecda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ecdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802ecde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802ece0:	e841 2300 	strex	r3, r2, [r1]
 802ece4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802ece6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ece8:	2b00      	cmp	r3, #0
 802ecea:	d1e5      	bne.n	802ecb8 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 802ecec:	687b      	ldr	r3, [r7, #4]
 802ecee:	4a15      	ldr	r2, [pc, #84]	; (802ed44 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 802ecf0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 802ecf2:	687b      	ldr	r3, [r7, #4]
 802ecf4:	681b      	ldr	r3, [r3, #0]
 802ecf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ecf8:	693b      	ldr	r3, [r7, #16]
 802ecfa:	e853 3f00 	ldrex	r3, [r3]
 802ecfe:	60fb      	str	r3, [r7, #12]
   return(result);
 802ed00:	68fb      	ldr	r3, [r7, #12]
 802ed02:	f043 0320 	orr.w	r3, r3, #32
 802ed06:	673b      	str	r3, [r7, #112]	; 0x70
 802ed08:	687b      	ldr	r3, [r7, #4]
 802ed0a:	681b      	ldr	r3, [r3, #0]
 802ed0c:	461a      	mov	r2, r3
 802ed0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802ed10:	61fb      	str	r3, [r7, #28]
 802ed12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ed14:	69b9      	ldr	r1, [r7, #24]
 802ed16:	69fa      	ldr	r2, [r7, #28]
 802ed18:	e841 2300 	strex	r3, r2, [r1]
 802ed1c:	617b      	str	r3, [r7, #20]
   return(result);
 802ed1e:	697b      	ldr	r3, [r7, #20]
 802ed20:	2b00      	cmp	r3, #0
 802ed22:	d1e6      	bne.n	802ecf2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 802ed24:	e007      	b.n	802ed36 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 802ed26:	687b      	ldr	r3, [r7, #4]
 802ed28:	681b      	ldr	r3, [r3, #0]
 802ed2a:	699a      	ldr	r2, [r3, #24]
 802ed2c:	687b      	ldr	r3, [r7, #4]
 802ed2e:	681b      	ldr	r3, [r3, #0]
 802ed30:	f042 0208 	orr.w	r2, r2, #8
 802ed34:	619a      	str	r2, [r3, #24]
}
 802ed36:	bf00      	nop
 802ed38:	37a0      	adds	r7, #160	; 0xa0
 802ed3a:	46bd      	mov	sp, r7
 802ed3c:	bd80      	pop	{r7, pc}
 802ed3e:	bf00      	nop
 802ed40:	effffffe 	.word	0xeffffffe
 802ed44:	0802e5ef 	.word	0x0802e5ef

0802ed48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 802ed48:	b480      	push	{r7}
 802ed4a:	b083      	sub	sp, #12
 802ed4c:	af00      	add	r7, sp, #0
 802ed4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 802ed50:	bf00      	nop
 802ed52:	370c      	adds	r7, #12
 802ed54:	46bd      	mov	sp, r7
 802ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed5a:	4770      	bx	lr

0802ed5c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 802ed5c:	b480      	push	{r7}
 802ed5e:	b083      	sub	sp, #12
 802ed60:	af00      	add	r7, sp, #0
 802ed62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 802ed64:	bf00      	nop
 802ed66:	370c      	adds	r7, #12
 802ed68:	46bd      	mov	sp, r7
 802ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed6e:	4770      	bx	lr

0802ed70 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 802ed70:	b480      	push	{r7}
 802ed72:	b083      	sub	sp, #12
 802ed74:	af00      	add	r7, sp, #0
 802ed76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 802ed78:	bf00      	nop
 802ed7a:	370c      	adds	r7, #12
 802ed7c:	46bd      	mov	sp, r7
 802ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed82:	4770      	bx	lr

0802ed84 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 802ed84:	b580      	push	{r7, lr}
 802ed86:	b084      	sub	sp, #16
 802ed88:	af00      	add	r7, sp, #0
 802ed8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802ed8c:	687b      	ldr	r3, [r7, #4]
 802ed8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802ed92:	2b01      	cmp	r3, #1
 802ed94:	d101      	bne.n	802ed9a <HAL_UARTEx_EnableFifoMode+0x16>
 802ed96:	2302      	movs	r3, #2
 802ed98:	e02b      	b.n	802edf2 <HAL_UARTEx_EnableFifoMode+0x6e>
 802ed9a:	687b      	ldr	r3, [r7, #4]
 802ed9c:	2201      	movs	r2, #1
 802ed9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802eda2:	687b      	ldr	r3, [r7, #4]
 802eda4:	2224      	movs	r2, #36	; 0x24
 802eda6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802edaa:	687b      	ldr	r3, [r7, #4]
 802edac:	681b      	ldr	r3, [r3, #0]
 802edae:	681b      	ldr	r3, [r3, #0]
 802edb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802edb2:	687b      	ldr	r3, [r7, #4]
 802edb4:	681b      	ldr	r3, [r3, #0]
 802edb6:	681a      	ldr	r2, [r3, #0]
 802edb8:	687b      	ldr	r3, [r7, #4]
 802edba:	681b      	ldr	r3, [r3, #0]
 802edbc:	f022 0201 	bic.w	r2, r2, #1
 802edc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 802edc2:	68fb      	ldr	r3, [r7, #12]
 802edc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802edc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 802edca:	687b      	ldr	r3, [r7, #4]
 802edcc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 802edd0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802edd2:	687b      	ldr	r3, [r7, #4]
 802edd4:	681b      	ldr	r3, [r3, #0]
 802edd6:	68fa      	ldr	r2, [r7, #12]
 802edd8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802edda:	6878      	ldr	r0, [r7, #4]
 802eddc:	f000 f8c2 	bl	802ef64 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 802ede0:	687b      	ldr	r3, [r7, #4]
 802ede2:	2220      	movs	r2, #32
 802ede4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802ede8:	687b      	ldr	r3, [r7, #4]
 802edea:	2200      	movs	r2, #0
 802edec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802edf0:	2300      	movs	r3, #0
}
 802edf2:	4618      	mov	r0, r3
 802edf4:	3710      	adds	r7, #16
 802edf6:	46bd      	mov	sp, r7
 802edf8:	bd80      	pop	{r7, pc}

0802edfa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 802edfa:	b480      	push	{r7}
 802edfc:	b085      	sub	sp, #20
 802edfe:	af00      	add	r7, sp, #0
 802ee00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802ee02:	687b      	ldr	r3, [r7, #4]
 802ee04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802ee08:	2b01      	cmp	r3, #1
 802ee0a:	d101      	bne.n	802ee10 <HAL_UARTEx_DisableFifoMode+0x16>
 802ee0c:	2302      	movs	r3, #2
 802ee0e:	e027      	b.n	802ee60 <HAL_UARTEx_DisableFifoMode+0x66>
 802ee10:	687b      	ldr	r3, [r7, #4]
 802ee12:	2201      	movs	r2, #1
 802ee14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802ee18:	687b      	ldr	r3, [r7, #4]
 802ee1a:	2224      	movs	r2, #36	; 0x24
 802ee1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802ee20:	687b      	ldr	r3, [r7, #4]
 802ee22:	681b      	ldr	r3, [r3, #0]
 802ee24:	681b      	ldr	r3, [r3, #0]
 802ee26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802ee28:	687b      	ldr	r3, [r7, #4]
 802ee2a:	681b      	ldr	r3, [r3, #0]
 802ee2c:	681a      	ldr	r2, [r3, #0]
 802ee2e:	687b      	ldr	r3, [r7, #4]
 802ee30:	681b      	ldr	r3, [r3, #0]
 802ee32:	f022 0201 	bic.w	r2, r2, #1
 802ee36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802ee38:	68fb      	ldr	r3, [r7, #12]
 802ee3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802ee3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802ee40:	687b      	ldr	r3, [r7, #4]
 802ee42:	2200      	movs	r2, #0
 802ee44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802ee46:	687b      	ldr	r3, [r7, #4]
 802ee48:	681b      	ldr	r3, [r3, #0]
 802ee4a:	68fa      	ldr	r2, [r7, #12]
 802ee4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802ee4e:	687b      	ldr	r3, [r7, #4]
 802ee50:	2220      	movs	r2, #32
 802ee52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802ee56:	687b      	ldr	r3, [r7, #4]
 802ee58:	2200      	movs	r2, #0
 802ee5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802ee5e:	2300      	movs	r3, #0
}
 802ee60:	4618      	mov	r0, r3
 802ee62:	3714      	adds	r7, #20
 802ee64:	46bd      	mov	sp, r7
 802ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ee6a:	4770      	bx	lr

0802ee6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802ee6c:	b580      	push	{r7, lr}
 802ee6e:	b084      	sub	sp, #16
 802ee70:	af00      	add	r7, sp, #0
 802ee72:	6078      	str	r0, [r7, #4]
 802ee74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802ee76:	687b      	ldr	r3, [r7, #4]
 802ee78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802ee7c:	2b01      	cmp	r3, #1
 802ee7e:	d101      	bne.n	802ee84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802ee80:	2302      	movs	r3, #2
 802ee82:	e02d      	b.n	802eee0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802ee84:	687b      	ldr	r3, [r7, #4]
 802ee86:	2201      	movs	r2, #1
 802ee88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802ee8c:	687b      	ldr	r3, [r7, #4]
 802ee8e:	2224      	movs	r2, #36	; 0x24
 802ee90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802ee94:	687b      	ldr	r3, [r7, #4]
 802ee96:	681b      	ldr	r3, [r3, #0]
 802ee98:	681b      	ldr	r3, [r3, #0]
 802ee9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802ee9c:	687b      	ldr	r3, [r7, #4]
 802ee9e:	681b      	ldr	r3, [r3, #0]
 802eea0:	681a      	ldr	r2, [r3, #0]
 802eea2:	687b      	ldr	r3, [r7, #4]
 802eea4:	681b      	ldr	r3, [r3, #0]
 802eea6:	f022 0201 	bic.w	r2, r2, #1
 802eeaa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802eeac:	687b      	ldr	r3, [r7, #4]
 802eeae:	681b      	ldr	r3, [r3, #0]
 802eeb0:	689b      	ldr	r3, [r3, #8]
 802eeb2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 802eeb6:	687b      	ldr	r3, [r7, #4]
 802eeb8:	681b      	ldr	r3, [r3, #0]
 802eeba:	683a      	ldr	r2, [r7, #0]
 802eebc:	430a      	orrs	r2, r1
 802eebe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802eec0:	6878      	ldr	r0, [r7, #4]
 802eec2:	f000 f84f 	bl	802ef64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802eec6:	687b      	ldr	r3, [r7, #4]
 802eec8:	681b      	ldr	r3, [r3, #0]
 802eeca:	68fa      	ldr	r2, [r7, #12]
 802eecc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802eece:	687b      	ldr	r3, [r7, #4]
 802eed0:	2220      	movs	r2, #32
 802eed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802eed6:	687b      	ldr	r3, [r7, #4]
 802eed8:	2200      	movs	r2, #0
 802eeda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802eede:	2300      	movs	r3, #0
}
 802eee0:	4618      	mov	r0, r3
 802eee2:	3710      	adds	r7, #16
 802eee4:	46bd      	mov	sp, r7
 802eee6:	bd80      	pop	{r7, pc}

0802eee8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802eee8:	b580      	push	{r7, lr}
 802eeea:	b084      	sub	sp, #16
 802eeec:	af00      	add	r7, sp, #0
 802eeee:	6078      	str	r0, [r7, #4]
 802eef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802eef2:	687b      	ldr	r3, [r7, #4]
 802eef4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802eef8:	2b01      	cmp	r3, #1
 802eefa:	d101      	bne.n	802ef00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802eefc:	2302      	movs	r3, #2
 802eefe:	e02d      	b.n	802ef5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802ef00:	687b      	ldr	r3, [r7, #4]
 802ef02:	2201      	movs	r2, #1
 802ef04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802ef08:	687b      	ldr	r3, [r7, #4]
 802ef0a:	2224      	movs	r2, #36	; 0x24
 802ef0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802ef10:	687b      	ldr	r3, [r7, #4]
 802ef12:	681b      	ldr	r3, [r3, #0]
 802ef14:	681b      	ldr	r3, [r3, #0]
 802ef16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802ef18:	687b      	ldr	r3, [r7, #4]
 802ef1a:	681b      	ldr	r3, [r3, #0]
 802ef1c:	681a      	ldr	r2, [r3, #0]
 802ef1e:	687b      	ldr	r3, [r7, #4]
 802ef20:	681b      	ldr	r3, [r3, #0]
 802ef22:	f022 0201 	bic.w	r2, r2, #1
 802ef26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802ef28:	687b      	ldr	r3, [r7, #4]
 802ef2a:	681b      	ldr	r3, [r3, #0]
 802ef2c:	689b      	ldr	r3, [r3, #8]
 802ef2e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 802ef32:	687b      	ldr	r3, [r7, #4]
 802ef34:	681b      	ldr	r3, [r3, #0]
 802ef36:	683a      	ldr	r2, [r7, #0]
 802ef38:	430a      	orrs	r2, r1
 802ef3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802ef3c:	6878      	ldr	r0, [r7, #4]
 802ef3e:	f000 f811 	bl	802ef64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802ef42:	687b      	ldr	r3, [r7, #4]
 802ef44:	681b      	ldr	r3, [r3, #0]
 802ef46:	68fa      	ldr	r2, [r7, #12]
 802ef48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802ef4a:	687b      	ldr	r3, [r7, #4]
 802ef4c:	2220      	movs	r2, #32
 802ef4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802ef52:	687b      	ldr	r3, [r7, #4]
 802ef54:	2200      	movs	r2, #0
 802ef56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802ef5a:	2300      	movs	r3, #0
}
 802ef5c:	4618      	mov	r0, r3
 802ef5e:	3710      	adds	r7, #16
 802ef60:	46bd      	mov	sp, r7
 802ef62:	bd80      	pop	{r7, pc}

0802ef64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 802ef64:	b480      	push	{r7}
 802ef66:	b085      	sub	sp, #20
 802ef68:	af00      	add	r7, sp, #0
 802ef6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 802ef6c:	687b      	ldr	r3, [r7, #4]
 802ef6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802ef70:	2b00      	cmp	r3, #0
 802ef72:	d108      	bne.n	802ef86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 802ef74:	687b      	ldr	r3, [r7, #4]
 802ef76:	2201      	movs	r2, #1
 802ef78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 802ef7c:	687b      	ldr	r3, [r7, #4]
 802ef7e:	2201      	movs	r2, #1
 802ef80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 802ef84:	e031      	b.n	802efea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 802ef86:	2310      	movs	r3, #16
 802ef88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802ef8a:	2310      	movs	r3, #16
 802ef8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802ef8e:	687b      	ldr	r3, [r7, #4]
 802ef90:	681b      	ldr	r3, [r3, #0]
 802ef92:	689b      	ldr	r3, [r3, #8]
 802ef94:	0e5b      	lsrs	r3, r3, #25
 802ef96:	b2db      	uxtb	r3, r3
 802ef98:	f003 0307 	and.w	r3, r3, #7
 802ef9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802ef9e:	687b      	ldr	r3, [r7, #4]
 802efa0:	681b      	ldr	r3, [r3, #0]
 802efa2:	689b      	ldr	r3, [r3, #8]
 802efa4:	0f5b      	lsrs	r3, r3, #29
 802efa6:	b2db      	uxtb	r3, r3
 802efa8:	f003 0307 	and.w	r3, r3, #7
 802efac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802efae:	7bbb      	ldrb	r3, [r7, #14]
 802efb0:	7b3a      	ldrb	r2, [r7, #12]
 802efb2:	4911      	ldr	r1, [pc, #68]	; (802eff8 <UARTEx_SetNbDataToProcess+0x94>)
 802efb4:	5c8a      	ldrb	r2, [r1, r2]
 802efb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802efba:	7b3a      	ldrb	r2, [r7, #12]
 802efbc:	490f      	ldr	r1, [pc, #60]	; (802effc <UARTEx_SetNbDataToProcess+0x98>)
 802efbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802efc0:	fb93 f3f2 	sdiv	r3, r3, r2
 802efc4:	b29a      	uxth	r2, r3
 802efc6:	687b      	ldr	r3, [r7, #4]
 802efc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802efcc:	7bfb      	ldrb	r3, [r7, #15]
 802efce:	7b7a      	ldrb	r2, [r7, #13]
 802efd0:	4909      	ldr	r1, [pc, #36]	; (802eff8 <UARTEx_SetNbDataToProcess+0x94>)
 802efd2:	5c8a      	ldrb	r2, [r1, r2]
 802efd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 802efd8:	7b7a      	ldrb	r2, [r7, #13]
 802efda:	4908      	ldr	r1, [pc, #32]	; (802effc <UARTEx_SetNbDataToProcess+0x98>)
 802efdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802efde:	fb93 f3f2 	sdiv	r3, r3, r2
 802efe2:	b29a      	uxth	r2, r3
 802efe4:	687b      	ldr	r3, [r7, #4]
 802efe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 802efea:	bf00      	nop
 802efec:	3714      	adds	r7, #20
 802efee:	46bd      	mov	sp, r7
 802eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eff4:	4770      	bx	lr
 802eff6:	bf00      	nop
 802eff8:	0803e4c4 	.word	0x0803e4c4
 802effc:	0803e4cc 	.word	0x0803e4cc

0802f000 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802f000:	b084      	sub	sp, #16
 802f002:	b580      	push	{r7, lr}
 802f004:	b084      	sub	sp, #16
 802f006:	af00      	add	r7, sp, #0
 802f008:	6078      	str	r0, [r7, #4]
 802f00a:	f107 001c 	add.w	r0, r7, #28
 802f00e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802f012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802f014:	2b01      	cmp	r3, #1
 802f016:	d120      	bne.n	802f05a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802f018:	687b      	ldr	r3, [r7, #4]
 802f01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f01c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802f020:	687b      	ldr	r3, [r7, #4]
 802f022:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802f024:	687b      	ldr	r3, [r7, #4]
 802f026:	68da      	ldr	r2, [r3, #12]
 802f028:	4b2a      	ldr	r3, [pc, #168]	; (802f0d4 <USB_CoreInit+0xd4>)
 802f02a:	4013      	ands	r3, r2
 802f02c:	687a      	ldr	r2, [r7, #4]
 802f02e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802f030:	687b      	ldr	r3, [r7, #4]
 802f032:	68db      	ldr	r3, [r3, #12]
 802f034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802f038:	687b      	ldr	r3, [r7, #4]
 802f03a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802f03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802f03e:	2b01      	cmp	r3, #1
 802f040:	d105      	bne.n	802f04e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802f042:	687b      	ldr	r3, [r7, #4]
 802f044:	68db      	ldr	r3, [r3, #12]
 802f046:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802f04a:	687b      	ldr	r3, [r7, #4]
 802f04c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802f04e:	6878      	ldr	r0, [r7, #4]
 802f050:	f001 fc04 	bl	803085c <USB_CoreReset>
 802f054:	4603      	mov	r3, r0
 802f056:	73fb      	strb	r3, [r7, #15]
 802f058:	e01a      	b.n	802f090 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802f05a:	687b      	ldr	r3, [r7, #4]
 802f05c:	68db      	ldr	r3, [r3, #12]
 802f05e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802f062:	687b      	ldr	r3, [r7, #4]
 802f064:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802f066:	6878      	ldr	r0, [r7, #4]
 802f068:	f001 fbf8 	bl	803085c <USB_CoreReset>
 802f06c:	4603      	mov	r3, r0
 802f06e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802f070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802f072:	2b00      	cmp	r3, #0
 802f074:	d106      	bne.n	802f084 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802f076:	687b      	ldr	r3, [r7, #4]
 802f078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f07a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802f07e:	687b      	ldr	r3, [r7, #4]
 802f080:	639a      	str	r2, [r3, #56]	; 0x38
 802f082:	e005      	b.n	802f090 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802f084:	687b      	ldr	r3, [r7, #4]
 802f086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f088:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802f08c:	687b      	ldr	r3, [r7, #4]
 802f08e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802f090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f092:	2b01      	cmp	r3, #1
 802f094:	d116      	bne.n	802f0c4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 802f096:	687b      	ldr	r3, [r7, #4]
 802f098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f09a:	b29a      	uxth	r2, r3
 802f09c:	687b      	ldr	r3, [r7, #4]
 802f09e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 802f0a0:	687b      	ldr	r3, [r7, #4]
 802f0a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802f0a4:	4b0c      	ldr	r3, [pc, #48]	; (802f0d8 <USB_CoreInit+0xd8>)
 802f0a6:	4313      	orrs	r3, r2
 802f0a8:	687a      	ldr	r2, [r7, #4]
 802f0aa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802f0ac:	687b      	ldr	r3, [r7, #4]
 802f0ae:	689b      	ldr	r3, [r3, #8]
 802f0b0:	f043 0206 	orr.w	r2, r3, #6
 802f0b4:	687b      	ldr	r3, [r7, #4]
 802f0b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802f0b8:	687b      	ldr	r3, [r7, #4]
 802f0ba:	689b      	ldr	r3, [r3, #8]
 802f0bc:	f043 0220 	orr.w	r2, r3, #32
 802f0c0:	687b      	ldr	r3, [r7, #4]
 802f0c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802f0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 802f0c6:	4618      	mov	r0, r3
 802f0c8:	3710      	adds	r7, #16
 802f0ca:	46bd      	mov	sp, r7
 802f0cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802f0d0:	b004      	add	sp, #16
 802f0d2:	4770      	bx	lr
 802f0d4:	ffbdffbf 	.word	0xffbdffbf
 802f0d8:	03ee0000 	.word	0x03ee0000

0802f0dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 802f0dc:	b480      	push	{r7}
 802f0de:	b087      	sub	sp, #28
 802f0e0:	af00      	add	r7, sp, #0
 802f0e2:	60f8      	str	r0, [r7, #12]
 802f0e4:	60b9      	str	r1, [r7, #8]
 802f0e6:	4613      	mov	r3, r2
 802f0e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 802f0ea:	79fb      	ldrb	r3, [r7, #7]
 802f0ec:	2b02      	cmp	r3, #2
 802f0ee:	d165      	bne.n	802f1bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 802f0f0:	68bb      	ldr	r3, [r7, #8]
 802f0f2:	4a41      	ldr	r2, [pc, #260]	; (802f1f8 <USB_SetTurnaroundTime+0x11c>)
 802f0f4:	4293      	cmp	r3, r2
 802f0f6:	d906      	bls.n	802f106 <USB_SetTurnaroundTime+0x2a>
 802f0f8:	68bb      	ldr	r3, [r7, #8]
 802f0fa:	4a40      	ldr	r2, [pc, #256]	; (802f1fc <USB_SetTurnaroundTime+0x120>)
 802f0fc:	4293      	cmp	r3, r2
 802f0fe:	d202      	bcs.n	802f106 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 802f100:	230f      	movs	r3, #15
 802f102:	617b      	str	r3, [r7, #20]
 802f104:	e062      	b.n	802f1cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 802f106:	68bb      	ldr	r3, [r7, #8]
 802f108:	4a3c      	ldr	r2, [pc, #240]	; (802f1fc <USB_SetTurnaroundTime+0x120>)
 802f10a:	4293      	cmp	r3, r2
 802f10c:	d306      	bcc.n	802f11c <USB_SetTurnaroundTime+0x40>
 802f10e:	68bb      	ldr	r3, [r7, #8]
 802f110:	4a3b      	ldr	r2, [pc, #236]	; (802f200 <USB_SetTurnaroundTime+0x124>)
 802f112:	4293      	cmp	r3, r2
 802f114:	d202      	bcs.n	802f11c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 802f116:	230e      	movs	r3, #14
 802f118:	617b      	str	r3, [r7, #20]
 802f11a:	e057      	b.n	802f1cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 802f11c:	68bb      	ldr	r3, [r7, #8]
 802f11e:	4a38      	ldr	r2, [pc, #224]	; (802f200 <USB_SetTurnaroundTime+0x124>)
 802f120:	4293      	cmp	r3, r2
 802f122:	d306      	bcc.n	802f132 <USB_SetTurnaroundTime+0x56>
 802f124:	68bb      	ldr	r3, [r7, #8]
 802f126:	4a37      	ldr	r2, [pc, #220]	; (802f204 <USB_SetTurnaroundTime+0x128>)
 802f128:	4293      	cmp	r3, r2
 802f12a:	d202      	bcs.n	802f132 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 802f12c:	230d      	movs	r3, #13
 802f12e:	617b      	str	r3, [r7, #20]
 802f130:	e04c      	b.n	802f1cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 802f132:	68bb      	ldr	r3, [r7, #8]
 802f134:	4a33      	ldr	r2, [pc, #204]	; (802f204 <USB_SetTurnaroundTime+0x128>)
 802f136:	4293      	cmp	r3, r2
 802f138:	d306      	bcc.n	802f148 <USB_SetTurnaroundTime+0x6c>
 802f13a:	68bb      	ldr	r3, [r7, #8]
 802f13c:	4a32      	ldr	r2, [pc, #200]	; (802f208 <USB_SetTurnaroundTime+0x12c>)
 802f13e:	4293      	cmp	r3, r2
 802f140:	d802      	bhi.n	802f148 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 802f142:	230c      	movs	r3, #12
 802f144:	617b      	str	r3, [r7, #20]
 802f146:	e041      	b.n	802f1cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 802f148:	68bb      	ldr	r3, [r7, #8]
 802f14a:	4a2f      	ldr	r2, [pc, #188]	; (802f208 <USB_SetTurnaroundTime+0x12c>)
 802f14c:	4293      	cmp	r3, r2
 802f14e:	d906      	bls.n	802f15e <USB_SetTurnaroundTime+0x82>
 802f150:	68bb      	ldr	r3, [r7, #8]
 802f152:	4a2e      	ldr	r2, [pc, #184]	; (802f20c <USB_SetTurnaroundTime+0x130>)
 802f154:	4293      	cmp	r3, r2
 802f156:	d802      	bhi.n	802f15e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 802f158:	230b      	movs	r3, #11
 802f15a:	617b      	str	r3, [r7, #20]
 802f15c:	e036      	b.n	802f1cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 802f15e:	68bb      	ldr	r3, [r7, #8]
 802f160:	4a2a      	ldr	r2, [pc, #168]	; (802f20c <USB_SetTurnaroundTime+0x130>)
 802f162:	4293      	cmp	r3, r2
 802f164:	d906      	bls.n	802f174 <USB_SetTurnaroundTime+0x98>
 802f166:	68bb      	ldr	r3, [r7, #8]
 802f168:	4a29      	ldr	r2, [pc, #164]	; (802f210 <USB_SetTurnaroundTime+0x134>)
 802f16a:	4293      	cmp	r3, r2
 802f16c:	d802      	bhi.n	802f174 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 802f16e:	230a      	movs	r3, #10
 802f170:	617b      	str	r3, [r7, #20]
 802f172:	e02b      	b.n	802f1cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 802f174:	68bb      	ldr	r3, [r7, #8]
 802f176:	4a26      	ldr	r2, [pc, #152]	; (802f210 <USB_SetTurnaroundTime+0x134>)
 802f178:	4293      	cmp	r3, r2
 802f17a:	d906      	bls.n	802f18a <USB_SetTurnaroundTime+0xae>
 802f17c:	68bb      	ldr	r3, [r7, #8]
 802f17e:	4a25      	ldr	r2, [pc, #148]	; (802f214 <USB_SetTurnaroundTime+0x138>)
 802f180:	4293      	cmp	r3, r2
 802f182:	d202      	bcs.n	802f18a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 802f184:	2309      	movs	r3, #9
 802f186:	617b      	str	r3, [r7, #20]
 802f188:	e020      	b.n	802f1cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 802f18a:	68bb      	ldr	r3, [r7, #8]
 802f18c:	4a21      	ldr	r2, [pc, #132]	; (802f214 <USB_SetTurnaroundTime+0x138>)
 802f18e:	4293      	cmp	r3, r2
 802f190:	d306      	bcc.n	802f1a0 <USB_SetTurnaroundTime+0xc4>
 802f192:	68bb      	ldr	r3, [r7, #8]
 802f194:	4a20      	ldr	r2, [pc, #128]	; (802f218 <USB_SetTurnaroundTime+0x13c>)
 802f196:	4293      	cmp	r3, r2
 802f198:	d802      	bhi.n	802f1a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 802f19a:	2308      	movs	r3, #8
 802f19c:	617b      	str	r3, [r7, #20]
 802f19e:	e015      	b.n	802f1cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 802f1a0:	68bb      	ldr	r3, [r7, #8]
 802f1a2:	4a1d      	ldr	r2, [pc, #116]	; (802f218 <USB_SetTurnaroundTime+0x13c>)
 802f1a4:	4293      	cmp	r3, r2
 802f1a6:	d906      	bls.n	802f1b6 <USB_SetTurnaroundTime+0xda>
 802f1a8:	68bb      	ldr	r3, [r7, #8]
 802f1aa:	4a1c      	ldr	r2, [pc, #112]	; (802f21c <USB_SetTurnaroundTime+0x140>)
 802f1ac:	4293      	cmp	r3, r2
 802f1ae:	d202      	bcs.n	802f1b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 802f1b0:	2307      	movs	r3, #7
 802f1b2:	617b      	str	r3, [r7, #20]
 802f1b4:	e00a      	b.n	802f1cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 802f1b6:	2306      	movs	r3, #6
 802f1b8:	617b      	str	r3, [r7, #20]
 802f1ba:	e007      	b.n	802f1cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 802f1bc:	79fb      	ldrb	r3, [r7, #7]
 802f1be:	2b00      	cmp	r3, #0
 802f1c0:	d102      	bne.n	802f1c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 802f1c2:	2309      	movs	r3, #9
 802f1c4:	617b      	str	r3, [r7, #20]
 802f1c6:	e001      	b.n	802f1cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 802f1c8:	2309      	movs	r3, #9
 802f1ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 802f1cc:	68fb      	ldr	r3, [r7, #12]
 802f1ce:	68db      	ldr	r3, [r3, #12]
 802f1d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 802f1d4:	68fb      	ldr	r3, [r7, #12]
 802f1d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 802f1d8:	68fb      	ldr	r3, [r7, #12]
 802f1da:	68da      	ldr	r2, [r3, #12]
 802f1dc:	697b      	ldr	r3, [r7, #20]
 802f1de:	029b      	lsls	r3, r3, #10
 802f1e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 802f1e4:	431a      	orrs	r2, r3
 802f1e6:	68fb      	ldr	r3, [r7, #12]
 802f1e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802f1ea:	2300      	movs	r3, #0
}
 802f1ec:	4618      	mov	r0, r3
 802f1ee:	371c      	adds	r7, #28
 802f1f0:	46bd      	mov	sp, r7
 802f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f1f6:	4770      	bx	lr
 802f1f8:	00d8acbf 	.word	0x00d8acbf
 802f1fc:	00e4e1c0 	.word	0x00e4e1c0
 802f200:	00f42400 	.word	0x00f42400
 802f204:	01067380 	.word	0x01067380
 802f208:	011a499f 	.word	0x011a499f
 802f20c:	01312cff 	.word	0x01312cff
 802f210:	014ca43f 	.word	0x014ca43f
 802f214:	016e3600 	.word	0x016e3600
 802f218:	01a6ab1f 	.word	0x01a6ab1f
 802f21c:	01e84800 	.word	0x01e84800

0802f220 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802f220:	b480      	push	{r7}
 802f222:	b083      	sub	sp, #12
 802f224:	af00      	add	r7, sp, #0
 802f226:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802f228:	687b      	ldr	r3, [r7, #4]
 802f22a:	689b      	ldr	r3, [r3, #8]
 802f22c:	f043 0201 	orr.w	r2, r3, #1
 802f230:	687b      	ldr	r3, [r7, #4]
 802f232:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802f234:	2300      	movs	r3, #0
}
 802f236:	4618      	mov	r0, r3
 802f238:	370c      	adds	r7, #12
 802f23a:	46bd      	mov	sp, r7
 802f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f240:	4770      	bx	lr

0802f242 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802f242:	b480      	push	{r7}
 802f244:	b083      	sub	sp, #12
 802f246:	af00      	add	r7, sp, #0
 802f248:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802f24a:	687b      	ldr	r3, [r7, #4]
 802f24c:	689b      	ldr	r3, [r3, #8]
 802f24e:	f023 0201 	bic.w	r2, r3, #1
 802f252:	687b      	ldr	r3, [r7, #4]
 802f254:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802f256:	2300      	movs	r3, #0
}
 802f258:	4618      	mov	r0, r3
 802f25a:	370c      	adds	r7, #12
 802f25c:	46bd      	mov	sp, r7
 802f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f262:	4770      	bx	lr

0802f264 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802f264:	b580      	push	{r7, lr}
 802f266:	b084      	sub	sp, #16
 802f268:	af00      	add	r7, sp, #0
 802f26a:	6078      	str	r0, [r7, #4]
 802f26c:	460b      	mov	r3, r1
 802f26e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802f270:	2300      	movs	r3, #0
 802f272:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802f274:	687b      	ldr	r3, [r7, #4]
 802f276:	68db      	ldr	r3, [r3, #12]
 802f278:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802f27c:	687b      	ldr	r3, [r7, #4]
 802f27e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802f280:	78fb      	ldrb	r3, [r7, #3]
 802f282:	2b01      	cmp	r3, #1
 802f284:	d115      	bne.n	802f2b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802f286:	687b      	ldr	r3, [r7, #4]
 802f288:	68db      	ldr	r3, [r3, #12]
 802f28a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802f28e:	687b      	ldr	r3, [r7, #4]
 802f290:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802f292:	2001      	movs	r0, #1
 802f294:	f7f2 fee0 	bl	8022058 <HAL_Delay>
      ms++;
 802f298:	68fb      	ldr	r3, [r7, #12]
 802f29a:	3301      	adds	r3, #1
 802f29c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802f29e:	6878      	ldr	r0, [r7, #4]
 802f2a0:	f001 fa4b 	bl	803073a <USB_GetMode>
 802f2a4:	4603      	mov	r3, r0
 802f2a6:	2b01      	cmp	r3, #1
 802f2a8:	d01e      	beq.n	802f2e8 <USB_SetCurrentMode+0x84>
 802f2aa:	68fb      	ldr	r3, [r7, #12]
 802f2ac:	2b31      	cmp	r3, #49	; 0x31
 802f2ae:	d9f0      	bls.n	802f292 <USB_SetCurrentMode+0x2e>
 802f2b0:	e01a      	b.n	802f2e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802f2b2:	78fb      	ldrb	r3, [r7, #3]
 802f2b4:	2b00      	cmp	r3, #0
 802f2b6:	d115      	bne.n	802f2e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802f2b8:	687b      	ldr	r3, [r7, #4]
 802f2ba:	68db      	ldr	r3, [r3, #12]
 802f2bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802f2c0:	687b      	ldr	r3, [r7, #4]
 802f2c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802f2c4:	2001      	movs	r0, #1
 802f2c6:	f7f2 fec7 	bl	8022058 <HAL_Delay>
      ms++;
 802f2ca:	68fb      	ldr	r3, [r7, #12]
 802f2cc:	3301      	adds	r3, #1
 802f2ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802f2d0:	6878      	ldr	r0, [r7, #4]
 802f2d2:	f001 fa32 	bl	803073a <USB_GetMode>
 802f2d6:	4603      	mov	r3, r0
 802f2d8:	2b00      	cmp	r3, #0
 802f2da:	d005      	beq.n	802f2e8 <USB_SetCurrentMode+0x84>
 802f2dc:	68fb      	ldr	r3, [r7, #12]
 802f2de:	2b31      	cmp	r3, #49	; 0x31
 802f2e0:	d9f0      	bls.n	802f2c4 <USB_SetCurrentMode+0x60>
 802f2e2:	e001      	b.n	802f2e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802f2e4:	2301      	movs	r3, #1
 802f2e6:	e005      	b.n	802f2f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802f2e8:	68fb      	ldr	r3, [r7, #12]
 802f2ea:	2b32      	cmp	r3, #50	; 0x32
 802f2ec:	d101      	bne.n	802f2f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802f2ee:	2301      	movs	r3, #1
 802f2f0:	e000      	b.n	802f2f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802f2f2:	2300      	movs	r3, #0
}
 802f2f4:	4618      	mov	r0, r3
 802f2f6:	3710      	adds	r7, #16
 802f2f8:	46bd      	mov	sp, r7
 802f2fa:	bd80      	pop	{r7, pc}

0802f2fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802f2fc:	b084      	sub	sp, #16
 802f2fe:	b580      	push	{r7, lr}
 802f300:	b086      	sub	sp, #24
 802f302:	af00      	add	r7, sp, #0
 802f304:	6078      	str	r0, [r7, #4]
 802f306:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802f30a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802f30e:	2300      	movs	r3, #0
 802f310:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802f312:	687b      	ldr	r3, [r7, #4]
 802f314:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 802f316:	2300      	movs	r3, #0
 802f318:	613b      	str	r3, [r7, #16]
 802f31a:	e009      	b.n	802f330 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 802f31c:	687a      	ldr	r2, [r7, #4]
 802f31e:	693b      	ldr	r3, [r7, #16]
 802f320:	3340      	adds	r3, #64	; 0x40
 802f322:	009b      	lsls	r3, r3, #2
 802f324:	4413      	add	r3, r2
 802f326:	2200      	movs	r2, #0
 802f328:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 802f32a:	693b      	ldr	r3, [r7, #16]
 802f32c:	3301      	adds	r3, #1
 802f32e:	613b      	str	r3, [r7, #16]
 802f330:	693b      	ldr	r3, [r7, #16]
 802f332:	2b0e      	cmp	r3, #14
 802f334:	d9f2      	bls.n	802f31c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 802f336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802f338:	2b00      	cmp	r3, #0
 802f33a:	d11c      	bne.n	802f376 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802f33c:	68fb      	ldr	r3, [r7, #12]
 802f33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f342:	685b      	ldr	r3, [r3, #4]
 802f344:	68fa      	ldr	r2, [r7, #12]
 802f346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802f34a:	f043 0302 	orr.w	r3, r3, #2
 802f34e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 802f350:	687b      	ldr	r3, [r7, #4]
 802f352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f354:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 802f358:	687b      	ldr	r3, [r7, #4]
 802f35a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 802f35c:	687b      	ldr	r3, [r7, #4]
 802f35e:	681b      	ldr	r3, [r3, #0]
 802f360:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802f364:	687b      	ldr	r3, [r7, #4]
 802f366:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 802f368:	687b      	ldr	r3, [r7, #4]
 802f36a:	681b      	ldr	r3, [r3, #0]
 802f36c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 802f370:	687b      	ldr	r3, [r7, #4]
 802f372:	601a      	str	r2, [r3, #0]
 802f374:	e005      	b.n	802f382 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 802f376:	687b      	ldr	r3, [r7, #4]
 802f378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f37a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802f37e:	687b      	ldr	r3, [r7, #4]
 802f380:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802f382:	68fb      	ldr	r3, [r7, #12]
 802f384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802f388:	461a      	mov	r2, r3
 802f38a:	2300      	movs	r3, #0
 802f38c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 802f38e:	68fb      	ldr	r3, [r7, #12]
 802f390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f394:	4619      	mov	r1, r3
 802f396:	68fb      	ldr	r3, [r7, #12]
 802f398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f39c:	461a      	mov	r2, r3
 802f39e:	680b      	ldr	r3, [r1, #0]
 802f3a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802f3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f3a4:	2b01      	cmp	r3, #1
 802f3a6:	d10c      	bne.n	802f3c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 802f3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802f3aa:	2b00      	cmp	r3, #0
 802f3ac:	d104      	bne.n	802f3b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 802f3ae:	2100      	movs	r1, #0
 802f3b0:	6878      	ldr	r0, [r7, #4]
 802f3b2:	f000 f965 	bl	802f680 <USB_SetDevSpeed>
 802f3b6:	e008      	b.n	802f3ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 802f3b8:	2101      	movs	r1, #1
 802f3ba:	6878      	ldr	r0, [r7, #4]
 802f3bc:	f000 f960 	bl	802f680 <USB_SetDevSpeed>
 802f3c0:	e003      	b.n	802f3ca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 802f3c2:	2103      	movs	r1, #3
 802f3c4:	6878      	ldr	r0, [r7, #4]
 802f3c6:	f000 f95b 	bl	802f680 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802f3ca:	2110      	movs	r1, #16
 802f3cc:	6878      	ldr	r0, [r7, #4]
 802f3ce:	f000 f8f3 	bl	802f5b8 <USB_FlushTxFifo>
 802f3d2:	4603      	mov	r3, r0
 802f3d4:	2b00      	cmp	r3, #0
 802f3d6:	d001      	beq.n	802f3dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 802f3d8:	2301      	movs	r3, #1
 802f3da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802f3dc:	6878      	ldr	r0, [r7, #4]
 802f3de:	f000 f91f 	bl	802f620 <USB_FlushRxFifo>
 802f3e2:	4603      	mov	r3, r0
 802f3e4:	2b00      	cmp	r3, #0
 802f3e6:	d001      	beq.n	802f3ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 802f3e8:	2301      	movs	r3, #1
 802f3ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 802f3ec:	68fb      	ldr	r3, [r7, #12]
 802f3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f3f2:	461a      	mov	r2, r3
 802f3f4:	2300      	movs	r3, #0
 802f3f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 802f3f8:	68fb      	ldr	r3, [r7, #12]
 802f3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f3fe:	461a      	mov	r2, r3
 802f400:	2300      	movs	r3, #0
 802f402:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 802f404:	68fb      	ldr	r3, [r7, #12]
 802f406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f40a:	461a      	mov	r2, r3
 802f40c:	2300      	movs	r3, #0
 802f40e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802f410:	2300      	movs	r3, #0
 802f412:	613b      	str	r3, [r7, #16]
 802f414:	e043      	b.n	802f49e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802f416:	693b      	ldr	r3, [r7, #16]
 802f418:	015a      	lsls	r2, r3, #5
 802f41a:	68fb      	ldr	r3, [r7, #12]
 802f41c:	4413      	add	r3, r2
 802f41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f422:	681b      	ldr	r3, [r3, #0]
 802f424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802f428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802f42c:	d118      	bne.n	802f460 <USB_DevInit+0x164>
    {
      if (i == 0U)
 802f42e:	693b      	ldr	r3, [r7, #16]
 802f430:	2b00      	cmp	r3, #0
 802f432:	d10a      	bne.n	802f44a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 802f434:	693b      	ldr	r3, [r7, #16]
 802f436:	015a      	lsls	r2, r3, #5
 802f438:	68fb      	ldr	r3, [r7, #12]
 802f43a:	4413      	add	r3, r2
 802f43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f440:	461a      	mov	r2, r3
 802f442:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802f446:	6013      	str	r3, [r2, #0]
 802f448:	e013      	b.n	802f472 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 802f44a:	693b      	ldr	r3, [r7, #16]
 802f44c:	015a      	lsls	r2, r3, #5
 802f44e:	68fb      	ldr	r3, [r7, #12]
 802f450:	4413      	add	r3, r2
 802f452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f456:	461a      	mov	r2, r3
 802f458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802f45c:	6013      	str	r3, [r2, #0]
 802f45e:	e008      	b.n	802f472 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 802f460:	693b      	ldr	r3, [r7, #16]
 802f462:	015a      	lsls	r2, r3, #5
 802f464:	68fb      	ldr	r3, [r7, #12]
 802f466:	4413      	add	r3, r2
 802f468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f46c:	461a      	mov	r2, r3
 802f46e:	2300      	movs	r3, #0
 802f470:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 802f472:	693b      	ldr	r3, [r7, #16]
 802f474:	015a      	lsls	r2, r3, #5
 802f476:	68fb      	ldr	r3, [r7, #12]
 802f478:	4413      	add	r3, r2
 802f47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f47e:	461a      	mov	r2, r3
 802f480:	2300      	movs	r3, #0
 802f482:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 802f484:	693b      	ldr	r3, [r7, #16]
 802f486:	015a      	lsls	r2, r3, #5
 802f488:	68fb      	ldr	r3, [r7, #12]
 802f48a:	4413      	add	r3, r2
 802f48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f490:	461a      	mov	r2, r3
 802f492:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802f496:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802f498:	693b      	ldr	r3, [r7, #16]
 802f49a:	3301      	adds	r3, #1
 802f49c:	613b      	str	r3, [r7, #16]
 802f49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f4a0:	693a      	ldr	r2, [r7, #16]
 802f4a2:	429a      	cmp	r2, r3
 802f4a4:	d3b7      	bcc.n	802f416 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802f4a6:	2300      	movs	r3, #0
 802f4a8:	613b      	str	r3, [r7, #16]
 802f4aa:	e043      	b.n	802f534 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802f4ac:	693b      	ldr	r3, [r7, #16]
 802f4ae:	015a      	lsls	r2, r3, #5
 802f4b0:	68fb      	ldr	r3, [r7, #12]
 802f4b2:	4413      	add	r3, r2
 802f4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f4b8:	681b      	ldr	r3, [r3, #0]
 802f4ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802f4be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802f4c2:	d118      	bne.n	802f4f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 802f4c4:	693b      	ldr	r3, [r7, #16]
 802f4c6:	2b00      	cmp	r3, #0
 802f4c8:	d10a      	bne.n	802f4e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 802f4ca:	693b      	ldr	r3, [r7, #16]
 802f4cc:	015a      	lsls	r2, r3, #5
 802f4ce:	68fb      	ldr	r3, [r7, #12]
 802f4d0:	4413      	add	r3, r2
 802f4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f4d6:	461a      	mov	r2, r3
 802f4d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802f4dc:	6013      	str	r3, [r2, #0]
 802f4de:	e013      	b.n	802f508 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 802f4e0:	693b      	ldr	r3, [r7, #16]
 802f4e2:	015a      	lsls	r2, r3, #5
 802f4e4:	68fb      	ldr	r3, [r7, #12]
 802f4e6:	4413      	add	r3, r2
 802f4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f4ec:	461a      	mov	r2, r3
 802f4ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802f4f2:	6013      	str	r3, [r2, #0]
 802f4f4:	e008      	b.n	802f508 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 802f4f6:	693b      	ldr	r3, [r7, #16]
 802f4f8:	015a      	lsls	r2, r3, #5
 802f4fa:	68fb      	ldr	r3, [r7, #12]
 802f4fc:	4413      	add	r3, r2
 802f4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f502:	461a      	mov	r2, r3
 802f504:	2300      	movs	r3, #0
 802f506:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 802f508:	693b      	ldr	r3, [r7, #16]
 802f50a:	015a      	lsls	r2, r3, #5
 802f50c:	68fb      	ldr	r3, [r7, #12]
 802f50e:	4413      	add	r3, r2
 802f510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f514:	461a      	mov	r2, r3
 802f516:	2300      	movs	r3, #0
 802f518:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 802f51a:	693b      	ldr	r3, [r7, #16]
 802f51c:	015a      	lsls	r2, r3, #5
 802f51e:	68fb      	ldr	r3, [r7, #12]
 802f520:	4413      	add	r3, r2
 802f522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f526:	461a      	mov	r2, r3
 802f528:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802f52c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802f52e:	693b      	ldr	r3, [r7, #16]
 802f530:	3301      	adds	r3, #1
 802f532:	613b      	str	r3, [r7, #16]
 802f534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f536:	693a      	ldr	r2, [r7, #16]
 802f538:	429a      	cmp	r2, r3
 802f53a:	d3b7      	bcc.n	802f4ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 802f53c:	68fb      	ldr	r3, [r7, #12]
 802f53e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f542:	691b      	ldr	r3, [r3, #16]
 802f544:	68fa      	ldr	r2, [r7, #12]
 802f546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802f54a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802f54e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802f550:	687b      	ldr	r3, [r7, #4]
 802f552:	2200      	movs	r2, #0
 802f554:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 802f556:	687b      	ldr	r3, [r7, #4]
 802f558:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 802f55c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802f55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802f560:	2b00      	cmp	r3, #0
 802f562:	d105      	bne.n	802f570 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802f564:	687b      	ldr	r3, [r7, #4]
 802f566:	699b      	ldr	r3, [r3, #24]
 802f568:	f043 0210 	orr.w	r2, r3, #16
 802f56c:	687b      	ldr	r3, [r7, #4]
 802f56e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 802f570:	687b      	ldr	r3, [r7, #4]
 802f572:	699a      	ldr	r2, [r3, #24]
 802f574:	4b0e      	ldr	r3, [pc, #56]	; (802f5b0 <USB_DevInit+0x2b4>)
 802f576:	4313      	orrs	r3, r2
 802f578:	687a      	ldr	r2, [r7, #4]
 802f57a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 802f57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f57e:	2b00      	cmp	r3, #0
 802f580:	d005      	beq.n	802f58e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 802f582:	687b      	ldr	r3, [r7, #4]
 802f584:	699b      	ldr	r3, [r3, #24]
 802f586:	f043 0208 	orr.w	r2, r3, #8
 802f58a:	687b      	ldr	r3, [r7, #4]
 802f58c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 802f58e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802f590:	2b01      	cmp	r3, #1
 802f592:	d105      	bne.n	802f5a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 802f594:	687b      	ldr	r3, [r7, #4]
 802f596:	699a      	ldr	r2, [r3, #24]
 802f598:	4b06      	ldr	r3, [pc, #24]	; (802f5b4 <USB_DevInit+0x2b8>)
 802f59a:	4313      	orrs	r3, r2
 802f59c:	687a      	ldr	r2, [r7, #4]
 802f59e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 802f5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 802f5a2:	4618      	mov	r0, r3
 802f5a4:	3718      	adds	r7, #24
 802f5a6:	46bd      	mov	sp, r7
 802f5a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802f5ac:	b004      	add	sp, #16
 802f5ae:	4770      	bx	lr
 802f5b0:	803c3800 	.word	0x803c3800
 802f5b4:	40000004 	.word	0x40000004

0802f5b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802f5b8:	b480      	push	{r7}
 802f5ba:	b085      	sub	sp, #20
 802f5bc:	af00      	add	r7, sp, #0
 802f5be:	6078      	str	r0, [r7, #4]
 802f5c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802f5c2:	2300      	movs	r3, #0
 802f5c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802f5c6:	68fb      	ldr	r3, [r7, #12]
 802f5c8:	3301      	adds	r3, #1
 802f5ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802f5cc:	68fb      	ldr	r3, [r7, #12]
 802f5ce:	4a13      	ldr	r2, [pc, #76]	; (802f61c <USB_FlushTxFifo+0x64>)
 802f5d0:	4293      	cmp	r3, r2
 802f5d2:	d901      	bls.n	802f5d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802f5d4:	2303      	movs	r3, #3
 802f5d6:	e01b      	b.n	802f610 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802f5d8:	687b      	ldr	r3, [r7, #4]
 802f5da:	691b      	ldr	r3, [r3, #16]
 802f5dc:	2b00      	cmp	r3, #0
 802f5de:	daf2      	bge.n	802f5c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802f5e0:	2300      	movs	r3, #0
 802f5e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802f5e4:	683b      	ldr	r3, [r7, #0]
 802f5e6:	019b      	lsls	r3, r3, #6
 802f5e8:	f043 0220 	orr.w	r2, r3, #32
 802f5ec:	687b      	ldr	r3, [r7, #4]
 802f5ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802f5f0:	68fb      	ldr	r3, [r7, #12]
 802f5f2:	3301      	adds	r3, #1
 802f5f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802f5f6:	68fb      	ldr	r3, [r7, #12]
 802f5f8:	4a08      	ldr	r2, [pc, #32]	; (802f61c <USB_FlushTxFifo+0x64>)
 802f5fa:	4293      	cmp	r3, r2
 802f5fc:	d901      	bls.n	802f602 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802f5fe:	2303      	movs	r3, #3
 802f600:	e006      	b.n	802f610 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802f602:	687b      	ldr	r3, [r7, #4]
 802f604:	691b      	ldr	r3, [r3, #16]
 802f606:	f003 0320 	and.w	r3, r3, #32
 802f60a:	2b20      	cmp	r3, #32
 802f60c:	d0f0      	beq.n	802f5f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802f60e:	2300      	movs	r3, #0
}
 802f610:	4618      	mov	r0, r3
 802f612:	3714      	adds	r7, #20
 802f614:	46bd      	mov	sp, r7
 802f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f61a:	4770      	bx	lr
 802f61c:	00030d40 	.word	0x00030d40

0802f620 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802f620:	b480      	push	{r7}
 802f622:	b085      	sub	sp, #20
 802f624:	af00      	add	r7, sp, #0
 802f626:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802f628:	2300      	movs	r3, #0
 802f62a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802f62c:	68fb      	ldr	r3, [r7, #12]
 802f62e:	3301      	adds	r3, #1
 802f630:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802f632:	68fb      	ldr	r3, [r7, #12]
 802f634:	4a11      	ldr	r2, [pc, #68]	; (802f67c <USB_FlushRxFifo+0x5c>)
 802f636:	4293      	cmp	r3, r2
 802f638:	d901      	bls.n	802f63e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802f63a:	2303      	movs	r3, #3
 802f63c:	e018      	b.n	802f670 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802f63e:	687b      	ldr	r3, [r7, #4]
 802f640:	691b      	ldr	r3, [r3, #16]
 802f642:	2b00      	cmp	r3, #0
 802f644:	daf2      	bge.n	802f62c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802f646:	2300      	movs	r3, #0
 802f648:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802f64a:	687b      	ldr	r3, [r7, #4]
 802f64c:	2210      	movs	r2, #16
 802f64e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802f650:	68fb      	ldr	r3, [r7, #12]
 802f652:	3301      	adds	r3, #1
 802f654:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802f656:	68fb      	ldr	r3, [r7, #12]
 802f658:	4a08      	ldr	r2, [pc, #32]	; (802f67c <USB_FlushRxFifo+0x5c>)
 802f65a:	4293      	cmp	r3, r2
 802f65c:	d901      	bls.n	802f662 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802f65e:	2303      	movs	r3, #3
 802f660:	e006      	b.n	802f670 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802f662:	687b      	ldr	r3, [r7, #4]
 802f664:	691b      	ldr	r3, [r3, #16]
 802f666:	f003 0310 	and.w	r3, r3, #16
 802f66a:	2b10      	cmp	r3, #16
 802f66c:	d0f0      	beq.n	802f650 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802f66e:	2300      	movs	r3, #0
}
 802f670:	4618      	mov	r0, r3
 802f672:	3714      	adds	r7, #20
 802f674:	46bd      	mov	sp, r7
 802f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f67a:	4770      	bx	lr
 802f67c:	00030d40 	.word	0x00030d40

0802f680 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 802f680:	b480      	push	{r7}
 802f682:	b085      	sub	sp, #20
 802f684:	af00      	add	r7, sp, #0
 802f686:	6078      	str	r0, [r7, #4]
 802f688:	460b      	mov	r3, r1
 802f68a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802f68c:	687b      	ldr	r3, [r7, #4]
 802f68e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 802f690:	68fb      	ldr	r3, [r7, #12]
 802f692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f696:	681a      	ldr	r2, [r3, #0]
 802f698:	78fb      	ldrb	r3, [r7, #3]
 802f69a:	68f9      	ldr	r1, [r7, #12]
 802f69c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802f6a0:	4313      	orrs	r3, r2
 802f6a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 802f6a4:	2300      	movs	r3, #0
}
 802f6a6:	4618      	mov	r0, r3
 802f6a8:	3714      	adds	r7, #20
 802f6aa:	46bd      	mov	sp, r7
 802f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f6b0:	4770      	bx	lr

0802f6b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802f6b2:	b480      	push	{r7}
 802f6b4:	b087      	sub	sp, #28
 802f6b6:	af00      	add	r7, sp, #0
 802f6b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802f6ba:	687b      	ldr	r3, [r7, #4]
 802f6bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 802f6be:	693b      	ldr	r3, [r7, #16]
 802f6c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f6c4:	689b      	ldr	r3, [r3, #8]
 802f6c6:	f003 0306 	and.w	r3, r3, #6
 802f6ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 802f6cc:	68fb      	ldr	r3, [r7, #12]
 802f6ce:	2b00      	cmp	r3, #0
 802f6d0:	d102      	bne.n	802f6d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 802f6d2:	2300      	movs	r3, #0
 802f6d4:	75fb      	strb	r3, [r7, #23]
 802f6d6:	e00a      	b.n	802f6ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 802f6d8:	68fb      	ldr	r3, [r7, #12]
 802f6da:	2b02      	cmp	r3, #2
 802f6dc:	d002      	beq.n	802f6e4 <USB_GetDevSpeed+0x32>
 802f6de:	68fb      	ldr	r3, [r7, #12]
 802f6e0:	2b06      	cmp	r3, #6
 802f6e2:	d102      	bne.n	802f6ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 802f6e4:	2302      	movs	r3, #2
 802f6e6:	75fb      	strb	r3, [r7, #23]
 802f6e8:	e001      	b.n	802f6ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 802f6ea:	230f      	movs	r3, #15
 802f6ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 802f6ee:	7dfb      	ldrb	r3, [r7, #23]
}
 802f6f0:	4618      	mov	r0, r3
 802f6f2:	371c      	adds	r7, #28
 802f6f4:	46bd      	mov	sp, r7
 802f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f6fa:	4770      	bx	lr

0802f6fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802f6fc:	b480      	push	{r7}
 802f6fe:	b085      	sub	sp, #20
 802f700:	af00      	add	r7, sp, #0
 802f702:	6078      	str	r0, [r7, #4]
 802f704:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802f706:	687b      	ldr	r3, [r7, #4]
 802f708:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802f70a:	683b      	ldr	r3, [r7, #0]
 802f70c:	781b      	ldrb	r3, [r3, #0]
 802f70e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802f710:	683b      	ldr	r3, [r7, #0]
 802f712:	785b      	ldrb	r3, [r3, #1]
 802f714:	2b01      	cmp	r3, #1
 802f716:	d139      	bne.n	802f78c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 802f718:	68fb      	ldr	r3, [r7, #12]
 802f71a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f71e:	69da      	ldr	r2, [r3, #28]
 802f720:	683b      	ldr	r3, [r7, #0]
 802f722:	781b      	ldrb	r3, [r3, #0]
 802f724:	f003 030f 	and.w	r3, r3, #15
 802f728:	2101      	movs	r1, #1
 802f72a:	fa01 f303 	lsl.w	r3, r1, r3
 802f72e:	b29b      	uxth	r3, r3
 802f730:	68f9      	ldr	r1, [r7, #12]
 802f732:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802f736:	4313      	orrs	r3, r2
 802f738:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 802f73a:	68bb      	ldr	r3, [r7, #8]
 802f73c:	015a      	lsls	r2, r3, #5
 802f73e:	68fb      	ldr	r3, [r7, #12]
 802f740:	4413      	add	r3, r2
 802f742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f746:	681b      	ldr	r3, [r3, #0]
 802f748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802f74c:	2b00      	cmp	r3, #0
 802f74e:	d153      	bne.n	802f7f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802f750:	68bb      	ldr	r3, [r7, #8]
 802f752:	015a      	lsls	r2, r3, #5
 802f754:	68fb      	ldr	r3, [r7, #12]
 802f756:	4413      	add	r3, r2
 802f758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f75c:	681a      	ldr	r2, [r3, #0]
 802f75e:	683b      	ldr	r3, [r7, #0]
 802f760:	68db      	ldr	r3, [r3, #12]
 802f762:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802f766:	683b      	ldr	r3, [r7, #0]
 802f768:	791b      	ldrb	r3, [r3, #4]
 802f76a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802f76c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802f76e:	68bb      	ldr	r3, [r7, #8]
 802f770:	059b      	lsls	r3, r3, #22
 802f772:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802f774:	431a      	orrs	r2, r3
 802f776:	68bb      	ldr	r3, [r7, #8]
 802f778:	0159      	lsls	r1, r3, #5
 802f77a:	68fb      	ldr	r3, [r7, #12]
 802f77c:	440b      	add	r3, r1
 802f77e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f782:	4619      	mov	r1, r3
 802f784:	4b20      	ldr	r3, [pc, #128]	; (802f808 <USB_ActivateEndpoint+0x10c>)
 802f786:	4313      	orrs	r3, r2
 802f788:	600b      	str	r3, [r1, #0]
 802f78a:	e035      	b.n	802f7f8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 802f78c:	68fb      	ldr	r3, [r7, #12]
 802f78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f792:	69da      	ldr	r2, [r3, #28]
 802f794:	683b      	ldr	r3, [r7, #0]
 802f796:	781b      	ldrb	r3, [r3, #0]
 802f798:	f003 030f 	and.w	r3, r3, #15
 802f79c:	2101      	movs	r1, #1
 802f79e:	fa01 f303 	lsl.w	r3, r1, r3
 802f7a2:	041b      	lsls	r3, r3, #16
 802f7a4:	68f9      	ldr	r1, [r7, #12]
 802f7a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802f7aa:	4313      	orrs	r3, r2
 802f7ac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 802f7ae:	68bb      	ldr	r3, [r7, #8]
 802f7b0:	015a      	lsls	r2, r3, #5
 802f7b2:	68fb      	ldr	r3, [r7, #12]
 802f7b4:	4413      	add	r3, r2
 802f7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f7ba:	681b      	ldr	r3, [r3, #0]
 802f7bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802f7c0:	2b00      	cmp	r3, #0
 802f7c2:	d119      	bne.n	802f7f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802f7c4:	68bb      	ldr	r3, [r7, #8]
 802f7c6:	015a      	lsls	r2, r3, #5
 802f7c8:	68fb      	ldr	r3, [r7, #12]
 802f7ca:	4413      	add	r3, r2
 802f7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f7d0:	681a      	ldr	r2, [r3, #0]
 802f7d2:	683b      	ldr	r3, [r7, #0]
 802f7d4:	68db      	ldr	r3, [r3, #12]
 802f7d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 802f7da:	683b      	ldr	r3, [r7, #0]
 802f7dc:	791b      	ldrb	r3, [r3, #4]
 802f7de:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802f7e0:	430b      	orrs	r3, r1
 802f7e2:	431a      	orrs	r2, r3
 802f7e4:	68bb      	ldr	r3, [r7, #8]
 802f7e6:	0159      	lsls	r1, r3, #5
 802f7e8:	68fb      	ldr	r3, [r7, #12]
 802f7ea:	440b      	add	r3, r1
 802f7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f7f0:	4619      	mov	r1, r3
 802f7f2:	4b05      	ldr	r3, [pc, #20]	; (802f808 <USB_ActivateEndpoint+0x10c>)
 802f7f4:	4313      	orrs	r3, r2
 802f7f6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 802f7f8:	2300      	movs	r3, #0
}
 802f7fa:	4618      	mov	r0, r3
 802f7fc:	3714      	adds	r7, #20
 802f7fe:	46bd      	mov	sp, r7
 802f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f804:	4770      	bx	lr
 802f806:	bf00      	nop
 802f808:	10008000 	.word	0x10008000

0802f80c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802f80c:	b480      	push	{r7}
 802f80e:	b085      	sub	sp, #20
 802f810:	af00      	add	r7, sp, #0
 802f812:	6078      	str	r0, [r7, #4]
 802f814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802f816:	687b      	ldr	r3, [r7, #4]
 802f818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802f81a:	683b      	ldr	r3, [r7, #0]
 802f81c:	781b      	ldrb	r3, [r3, #0]
 802f81e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 802f820:	683b      	ldr	r3, [r7, #0]
 802f822:	785b      	ldrb	r3, [r3, #1]
 802f824:	2b01      	cmp	r3, #1
 802f826:	d161      	bne.n	802f8ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802f828:	68bb      	ldr	r3, [r7, #8]
 802f82a:	015a      	lsls	r2, r3, #5
 802f82c:	68fb      	ldr	r3, [r7, #12]
 802f82e:	4413      	add	r3, r2
 802f830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f834:	681b      	ldr	r3, [r3, #0]
 802f836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802f83a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802f83e:	d11f      	bne.n	802f880 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 802f840:	68bb      	ldr	r3, [r7, #8]
 802f842:	015a      	lsls	r2, r3, #5
 802f844:	68fb      	ldr	r3, [r7, #12]
 802f846:	4413      	add	r3, r2
 802f848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f84c:	681b      	ldr	r3, [r3, #0]
 802f84e:	68ba      	ldr	r2, [r7, #8]
 802f850:	0151      	lsls	r1, r2, #5
 802f852:	68fa      	ldr	r2, [r7, #12]
 802f854:	440a      	add	r2, r1
 802f856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802f85a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802f85e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 802f860:	68bb      	ldr	r3, [r7, #8]
 802f862:	015a      	lsls	r2, r3, #5
 802f864:	68fb      	ldr	r3, [r7, #12]
 802f866:	4413      	add	r3, r2
 802f868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f86c:	681b      	ldr	r3, [r3, #0]
 802f86e:	68ba      	ldr	r2, [r7, #8]
 802f870:	0151      	lsls	r1, r2, #5
 802f872:	68fa      	ldr	r2, [r7, #12]
 802f874:	440a      	add	r2, r1
 802f876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802f87a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802f87e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802f880:	68fb      	ldr	r3, [r7, #12]
 802f882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802f888:	683b      	ldr	r3, [r7, #0]
 802f88a:	781b      	ldrb	r3, [r3, #0]
 802f88c:	f003 030f 	and.w	r3, r3, #15
 802f890:	2101      	movs	r1, #1
 802f892:	fa01 f303 	lsl.w	r3, r1, r3
 802f896:	b29b      	uxth	r3, r3
 802f898:	43db      	mvns	r3, r3
 802f89a:	68f9      	ldr	r1, [r7, #12]
 802f89c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802f8a0:	4013      	ands	r3, r2
 802f8a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802f8a4:	68fb      	ldr	r3, [r7, #12]
 802f8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f8aa:	69da      	ldr	r2, [r3, #28]
 802f8ac:	683b      	ldr	r3, [r7, #0]
 802f8ae:	781b      	ldrb	r3, [r3, #0]
 802f8b0:	f003 030f 	and.w	r3, r3, #15
 802f8b4:	2101      	movs	r1, #1
 802f8b6:	fa01 f303 	lsl.w	r3, r1, r3
 802f8ba:	b29b      	uxth	r3, r3
 802f8bc:	43db      	mvns	r3, r3
 802f8be:	68f9      	ldr	r1, [r7, #12]
 802f8c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802f8c4:	4013      	ands	r3, r2
 802f8c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 802f8c8:	68bb      	ldr	r3, [r7, #8]
 802f8ca:	015a      	lsls	r2, r3, #5
 802f8cc:	68fb      	ldr	r3, [r7, #12]
 802f8ce:	4413      	add	r3, r2
 802f8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f8d4:	681a      	ldr	r2, [r3, #0]
 802f8d6:	68bb      	ldr	r3, [r7, #8]
 802f8d8:	0159      	lsls	r1, r3, #5
 802f8da:	68fb      	ldr	r3, [r7, #12]
 802f8dc:	440b      	add	r3, r1
 802f8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f8e2:	4619      	mov	r1, r3
 802f8e4:	4b35      	ldr	r3, [pc, #212]	; (802f9bc <USB_DeactivateEndpoint+0x1b0>)
 802f8e6:	4013      	ands	r3, r2
 802f8e8:	600b      	str	r3, [r1, #0]
 802f8ea:	e060      	b.n	802f9ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802f8ec:	68bb      	ldr	r3, [r7, #8]
 802f8ee:	015a      	lsls	r2, r3, #5
 802f8f0:	68fb      	ldr	r3, [r7, #12]
 802f8f2:	4413      	add	r3, r2
 802f8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f8f8:	681b      	ldr	r3, [r3, #0]
 802f8fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802f8fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802f902:	d11f      	bne.n	802f944 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802f904:	68bb      	ldr	r3, [r7, #8]
 802f906:	015a      	lsls	r2, r3, #5
 802f908:	68fb      	ldr	r3, [r7, #12]
 802f90a:	4413      	add	r3, r2
 802f90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f910:	681b      	ldr	r3, [r3, #0]
 802f912:	68ba      	ldr	r2, [r7, #8]
 802f914:	0151      	lsls	r1, r2, #5
 802f916:	68fa      	ldr	r2, [r7, #12]
 802f918:	440a      	add	r2, r1
 802f91a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802f91e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802f922:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 802f924:	68bb      	ldr	r3, [r7, #8]
 802f926:	015a      	lsls	r2, r3, #5
 802f928:	68fb      	ldr	r3, [r7, #12]
 802f92a:	4413      	add	r3, r2
 802f92c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f930:	681b      	ldr	r3, [r3, #0]
 802f932:	68ba      	ldr	r2, [r7, #8]
 802f934:	0151      	lsls	r1, r2, #5
 802f936:	68fa      	ldr	r2, [r7, #12]
 802f938:	440a      	add	r2, r1
 802f93a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802f93e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802f942:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802f944:	68fb      	ldr	r3, [r7, #12]
 802f946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f94a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802f94c:	683b      	ldr	r3, [r7, #0]
 802f94e:	781b      	ldrb	r3, [r3, #0]
 802f950:	f003 030f 	and.w	r3, r3, #15
 802f954:	2101      	movs	r1, #1
 802f956:	fa01 f303 	lsl.w	r3, r1, r3
 802f95a:	041b      	lsls	r3, r3, #16
 802f95c:	43db      	mvns	r3, r3
 802f95e:	68f9      	ldr	r1, [r7, #12]
 802f960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802f964:	4013      	ands	r3, r2
 802f966:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802f968:	68fb      	ldr	r3, [r7, #12]
 802f96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f96e:	69da      	ldr	r2, [r3, #28]
 802f970:	683b      	ldr	r3, [r7, #0]
 802f972:	781b      	ldrb	r3, [r3, #0]
 802f974:	f003 030f 	and.w	r3, r3, #15
 802f978:	2101      	movs	r1, #1
 802f97a:	fa01 f303 	lsl.w	r3, r1, r3
 802f97e:	041b      	lsls	r3, r3, #16
 802f980:	43db      	mvns	r3, r3
 802f982:	68f9      	ldr	r1, [r7, #12]
 802f984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802f988:	4013      	ands	r3, r2
 802f98a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 802f98c:	68bb      	ldr	r3, [r7, #8]
 802f98e:	015a      	lsls	r2, r3, #5
 802f990:	68fb      	ldr	r3, [r7, #12]
 802f992:	4413      	add	r3, r2
 802f994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f998:	681a      	ldr	r2, [r3, #0]
 802f99a:	68bb      	ldr	r3, [r7, #8]
 802f99c:	0159      	lsls	r1, r3, #5
 802f99e:	68fb      	ldr	r3, [r7, #12]
 802f9a0:	440b      	add	r3, r1
 802f9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f9a6:	4619      	mov	r1, r3
 802f9a8:	4b05      	ldr	r3, [pc, #20]	; (802f9c0 <USB_DeactivateEndpoint+0x1b4>)
 802f9aa:	4013      	ands	r3, r2
 802f9ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 802f9ae:	2300      	movs	r3, #0
}
 802f9b0:	4618      	mov	r0, r3
 802f9b2:	3714      	adds	r7, #20
 802f9b4:	46bd      	mov	sp, r7
 802f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f9ba:	4770      	bx	lr
 802f9bc:	ec337800 	.word	0xec337800
 802f9c0:	eff37800 	.word	0xeff37800

0802f9c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802f9c4:	b580      	push	{r7, lr}
 802f9c6:	b08a      	sub	sp, #40	; 0x28
 802f9c8:	af02      	add	r7, sp, #8
 802f9ca:	60f8      	str	r0, [r7, #12]
 802f9cc:	60b9      	str	r1, [r7, #8]
 802f9ce:	4613      	mov	r3, r2
 802f9d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802f9d2:	68fb      	ldr	r3, [r7, #12]
 802f9d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 802f9d6:	68bb      	ldr	r3, [r7, #8]
 802f9d8:	781b      	ldrb	r3, [r3, #0]
 802f9da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 802f9dc:	68bb      	ldr	r3, [r7, #8]
 802f9de:	785b      	ldrb	r3, [r3, #1]
 802f9e0:	2b01      	cmp	r3, #1
 802f9e2:	f040 8163 	bne.w	802fcac <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802f9e6:	68bb      	ldr	r3, [r7, #8]
 802f9e8:	699b      	ldr	r3, [r3, #24]
 802f9ea:	2b00      	cmp	r3, #0
 802f9ec:	d132      	bne.n	802fa54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802f9ee:	69bb      	ldr	r3, [r7, #24]
 802f9f0:	015a      	lsls	r2, r3, #5
 802f9f2:	69fb      	ldr	r3, [r7, #28]
 802f9f4:	4413      	add	r3, r2
 802f9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f9fa:	691a      	ldr	r2, [r3, #16]
 802f9fc:	69bb      	ldr	r3, [r7, #24]
 802f9fe:	0159      	lsls	r1, r3, #5
 802fa00:	69fb      	ldr	r3, [r7, #28]
 802fa02:	440b      	add	r3, r1
 802fa04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fa08:	4619      	mov	r1, r3
 802fa0a:	4ba5      	ldr	r3, [pc, #660]	; (802fca0 <USB_EPStartXfer+0x2dc>)
 802fa0c:	4013      	ands	r3, r2
 802fa0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802fa10:	69bb      	ldr	r3, [r7, #24]
 802fa12:	015a      	lsls	r2, r3, #5
 802fa14:	69fb      	ldr	r3, [r7, #28]
 802fa16:	4413      	add	r3, r2
 802fa18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fa1c:	691b      	ldr	r3, [r3, #16]
 802fa1e:	69ba      	ldr	r2, [r7, #24]
 802fa20:	0151      	lsls	r1, r2, #5
 802fa22:	69fa      	ldr	r2, [r7, #28]
 802fa24:	440a      	add	r2, r1
 802fa26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fa2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802fa2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802fa30:	69bb      	ldr	r3, [r7, #24]
 802fa32:	015a      	lsls	r2, r3, #5
 802fa34:	69fb      	ldr	r3, [r7, #28]
 802fa36:	4413      	add	r3, r2
 802fa38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fa3c:	691a      	ldr	r2, [r3, #16]
 802fa3e:	69bb      	ldr	r3, [r7, #24]
 802fa40:	0159      	lsls	r1, r3, #5
 802fa42:	69fb      	ldr	r3, [r7, #28]
 802fa44:	440b      	add	r3, r1
 802fa46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fa4a:	4619      	mov	r1, r3
 802fa4c:	4b95      	ldr	r3, [pc, #596]	; (802fca4 <USB_EPStartXfer+0x2e0>)
 802fa4e:	4013      	ands	r3, r2
 802fa50:	610b      	str	r3, [r1, #16]
 802fa52:	e074      	b.n	802fb3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802fa54:	69bb      	ldr	r3, [r7, #24]
 802fa56:	015a      	lsls	r2, r3, #5
 802fa58:	69fb      	ldr	r3, [r7, #28]
 802fa5a:	4413      	add	r3, r2
 802fa5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fa60:	691a      	ldr	r2, [r3, #16]
 802fa62:	69bb      	ldr	r3, [r7, #24]
 802fa64:	0159      	lsls	r1, r3, #5
 802fa66:	69fb      	ldr	r3, [r7, #28]
 802fa68:	440b      	add	r3, r1
 802fa6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fa6e:	4619      	mov	r1, r3
 802fa70:	4b8c      	ldr	r3, [pc, #560]	; (802fca4 <USB_EPStartXfer+0x2e0>)
 802fa72:	4013      	ands	r3, r2
 802fa74:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802fa76:	69bb      	ldr	r3, [r7, #24]
 802fa78:	015a      	lsls	r2, r3, #5
 802fa7a:	69fb      	ldr	r3, [r7, #28]
 802fa7c:	4413      	add	r3, r2
 802fa7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fa82:	691a      	ldr	r2, [r3, #16]
 802fa84:	69bb      	ldr	r3, [r7, #24]
 802fa86:	0159      	lsls	r1, r3, #5
 802fa88:	69fb      	ldr	r3, [r7, #28]
 802fa8a:	440b      	add	r3, r1
 802fa8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fa90:	4619      	mov	r1, r3
 802fa92:	4b83      	ldr	r3, [pc, #524]	; (802fca0 <USB_EPStartXfer+0x2dc>)
 802fa94:	4013      	ands	r3, r2
 802fa96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 802fa98:	69bb      	ldr	r3, [r7, #24]
 802fa9a:	015a      	lsls	r2, r3, #5
 802fa9c:	69fb      	ldr	r3, [r7, #28]
 802fa9e:	4413      	add	r3, r2
 802faa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802faa4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 802faa6:	68bb      	ldr	r3, [r7, #8]
 802faa8:	6999      	ldr	r1, [r3, #24]
 802faaa:	68bb      	ldr	r3, [r7, #8]
 802faac:	68db      	ldr	r3, [r3, #12]
 802faae:	440b      	add	r3, r1
 802fab0:	1e59      	subs	r1, r3, #1
 802fab2:	68bb      	ldr	r3, [r7, #8]
 802fab4:	68db      	ldr	r3, [r3, #12]
 802fab6:	fbb1 f3f3 	udiv	r3, r1, r3
 802faba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 802fabc:	4b7a      	ldr	r3, [pc, #488]	; (802fca8 <USB_EPStartXfer+0x2e4>)
 802fabe:	400b      	ands	r3, r1
 802fac0:	69b9      	ldr	r1, [r7, #24]
 802fac2:	0148      	lsls	r0, r1, #5
 802fac4:	69f9      	ldr	r1, [r7, #28]
 802fac6:	4401      	add	r1, r0
 802fac8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802facc:	4313      	orrs	r3, r2
 802face:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802fad0:	69bb      	ldr	r3, [r7, #24]
 802fad2:	015a      	lsls	r2, r3, #5
 802fad4:	69fb      	ldr	r3, [r7, #28]
 802fad6:	4413      	add	r3, r2
 802fad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fadc:	691a      	ldr	r2, [r3, #16]
 802fade:	68bb      	ldr	r3, [r7, #8]
 802fae0:	699b      	ldr	r3, [r3, #24]
 802fae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802fae6:	69b9      	ldr	r1, [r7, #24]
 802fae8:	0148      	lsls	r0, r1, #5
 802faea:	69f9      	ldr	r1, [r7, #28]
 802faec:	4401      	add	r1, r0
 802faee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802faf2:	4313      	orrs	r3, r2
 802faf4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 802faf6:	68bb      	ldr	r3, [r7, #8]
 802faf8:	791b      	ldrb	r3, [r3, #4]
 802fafa:	2b01      	cmp	r3, #1
 802fafc:	d11f      	bne.n	802fb3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 802fafe:	69bb      	ldr	r3, [r7, #24]
 802fb00:	015a      	lsls	r2, r3, #5
 802fb02:	69fb      	ldr	r3, [r7, #28]
 802fb04:	4413      	add	r3, r2
 802fb06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fb0a:	691b      	ldr	r3, [r3, #16]
 802fb0c:	69ba      	ldr	r2, [r7, #24]
 802fb0e:	0151      	lsls	r1, r2, #5
 802fb10:	69fa      	ldr	r2, [r7, #28]
 802fb12:	440a      	add	r2, r1
 802fb14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fb18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 802fb1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 802fb1e:	69bb      	ldr	r3, [r7, #24]
 802fb20:	015a      	lsls	r2, r3, #5
 802fb22:	69fb      	ldr	r3, [r7, #28]
 802fb24:	4413      	add	r3, r2
 802fb26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fb2a:	691b      	ldr	r3, [r3, #16]
 802fb2c:	69ba      	ldr	r2, [r7, #24]
 802fb2e:	0151      	lsls	r1, r2, #5
 802fb30:	69fa      	ldr	r2, [r7, #28]
 802fb32:	440a      	add	r2, r1
 802fb34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fb38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802fb3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 802fb3e:	79fb      	ldrb	r3, [r7, #7]
 802fb40:	2b01      	cmp	r3, #1
 802fb42:	d14b      	bne.n	802fbdc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802fb44:	68bb      	ldr	r3, [r7, #8]
 802fb46:	695b      	ldr	r3, [r3, #20]
 802fb48:	2b00      	cmp	r3, #0
 802fb4a:	d009      	beq.n	802fb60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802fb4c:	69bb      	ldr	r3, [r7, #24]
 802fb4e:	015a      	lsls	r2, r3, #5
 802fb50:	69fb      	ldr	r3, [r7, #28]
 802fb52:	4413      	add	r3, r2
 802fb54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fb58:	461a      	mov	r2, r3
 802fb5a:	68bb      	ldr	r3, [r7, #8]
 802fb5c:	695b      	ldr	r3, [r3, #20]
 802fb5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 802fb60:	68bb      	ldr	r3, [r7, #8]
 802fb62:	791b      	ldrb	r3, [r3, #4]
 802fb64:	2b01      	cmp	r3, #1
 802fb66:	d128      	bne.n	802fbba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802fb68:	69fb      	ldr	r3, [r7, #28]
 802fb6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fb6e:	689b      	ldr	r3, [r3, #8]
 802fb70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802fb74:	2b00      	cmp	r3, #0
 802fb76:	d110      	bne.n	802fb9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802fb78:	69bb      	ldr	r3, [r7, #24]
 802fb7a:	015a      	lsls	r2, r3, #5
 802fb7c:	69fb      	ldr	r3, [r7, #28]
 802fb7e:	4413      	add	r3, r2
 802fb80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fb84:	681b      	ldr	r3, [r3, #0]
 802fb86:	69ba      	ldr	r2, [r7, #24]
 802fb88:	0151      	lsls	r1, r2, #5
 802fb8a:	69fa      	ldr	r2, [r7, #28]
 802fb8c:	440a      	add	r2, r1
 802fb8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fb92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802fb96:	6013      	str	r3, [r2, #0]
 802fb98:	e00f      	b.n	802fbba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802fb9a:	69bb      	ldr	r3, [r7, #24]
 802fb9c:	015a      	lsls	r2, r3, #5
 802fb9e:	69fb      	ldr	r3, [r7, #28]
 802fba0:	4413      	add	r3, r2
 802fba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fba6:	681b      	ldr	r3, [r3, #0]
 802fba8:	69ba      	ldr	r2, [r7, #24]
 802fbaa:	0151      	lsls	r1, r2, #5
 802fbac:	69fa      	ldr	r2, [r7, #28]
 802fbae:	440a      	add	r2, r1
 802fbb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fbb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802fbb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802fbba:	69bb      	ldr	r3, [r7, #24]
 802fbbc:	015a      	lsls	r2, r3, #5
 802fbbe:	69fb      	ldr	r3, [r7, #28]
 802fbc0:	4413      	add	r3, r2
 802fbc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fbc6:	681b      	ldr	r3, [r3, #0]
 802fbc8:	69ba      	ldr	r2, [r7, #24]
 802fbca:	0151      	lsls	r1, r2, #5
 802fbcc:	69fa      	ldr	r2, [r7, #28]
 802fbce:	440a      	add	r2, r1
 802fbd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fbd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802fbd8:	6013      	str	r3, [r2, #0]
 802fbda:	e137      	b.n	802fe4c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802fbdc:	69bb      	ldr	r3, [r7, #24]
 802fbde:	015a      	lsls	r2, r3, #5
 802fbe0:	69fb      	ldr	r3, [r7, #28]
 802fbe2:	4413      	add	r3, r2
 802fbe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fbe8:	681b      	ldr	r3, [r3, #0]
 802fbea:	69ba      	ldr	r2, [r7, #24]
 802fbec:	0151      	lsls	r1, r2, #5
 802fbee:	69fa      	ldr	r2, [r7, #28]
 802fbf0:	440a      	add	r2, r1
 802fbf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fbf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802fbfa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 802fbfc:	68bb      	ldr	r3, [r7, #8]
 802fbfe:	791b      	ldrb	r3, [r3, #4]
 802fc00:	2b01      	cmp	r3, #1
 802fc02:	d015      	beq.n	802fc30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 802fc04:	68bb      	ldr	r3, [r7, #8]
 802fc06:	699b      	ldr	r3, [r3, #24]
 802fc08:	2b00      	cmp	r3, #0
 802fc0a:	f000 811f 	beq.w	802fe4c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802fc0e:	69fb      	ldr	r3, [r7, #28]
 802fc10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fc14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802fc16:	68bb      	ldr	r3, [r7, #8]
 802fc18:	781b      	ldrb	r3, [r3, #0]
 802fc1a:	f003 030f 	and.w	r3, r3, #15
 802fc1e:	2101      	movs	r1, #1
 802fc20:	fa01 f303 	lsl.w	r3, r1, r3
 802fc24:	69f9      	ldr	r1, [r7, #28]
 802fc26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802fc2a:	4313      	orrs	r3, r2
 802fc2c:	634b      	str	r3, [r1, #52]	; 0x34
 802fc2e:	e10d      	b.n	802fe4c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802fc30:	69fb      	ldr	r3, [r7, #28]
 802fc32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fc36:	689b      	ldr	r3, [r3, #8]
 802fc38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802fc3c:	2b00      	cmp	r3, #0
 802fc3e:	d110      	bne.n	802fc62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802fc40:	69bb      	ldr	r3, [r7, #24]
 802fc42:	015a      	lsls	r2, r3, #5
 802fc44:	69fb      	ldr	r3, [r7, #28]
 802fc46:	4413      	add	r3, r2
 802fc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fc4c:	681b      	ldr	r3, [r3, #0]
 802fc4e:	69ba      	ldr	r2, [r7, #24]
 802fc50:	0151      	lsls	r1, r2, #5
 802fc52:	69fa      	ldr	r2, [r7, #28]
 802fc54:	440a      	add	r2, r1
 802fc56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fc5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802fc5e:	6013      	str	r3, [r2, #0]
 802fc60:	e00f      	b.n	802fc82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802fc62:	69bb      	ldr	r3, [r7, #24]
 802fc64:	015a      	lsls	r2, r3, #5
 802fc66:	69fb      	ldr	r3, [r7, #28]
 802fc68:	4413      	add	r3, r2
 802fc6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fc6e:	681b      	ldr	r3, [r3, #0]
 802fc70:	69ba      	ldr	r2, [r7, #24]
 802fc72:	0151      	lsls	r1, r2, #5
 802fc74:	69fa      	ldr	r2, [r7, #28]
 802fc76:	440a      	add	r2, r1
 802fc78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fc7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802fc80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 802fc82:	68bb      	ldr	r3, [r7, #8]
 802fc84:	6919      	ldr	r1, [r3, #16]
 802fc86:	68bb      	ldr	r3, [r7, #8]
 802fc88:	781a      	ldrb	r2, [r3, #0]
 802fc8a:	68bb      	ldr	r3, [r7, #8]
 802fc8c:	699b      	ldr	r3, [r3, #24]
 802fc8e:	b298      	uxth	r0, r3
 802fc90:	79fb      	ldrb	r3, [r7, #7]
 802fc92:	9300      	str	r3, [sp, #0]
 802fc94:	4603      	mov	r3, r0
 802fc96:	68f8      	ldr	r0, [r7, #12]
 802fc98:	f000 faea 	bl	8030270 <USB_WritePacket>
 802fc9c:	e0d6      	b.n	802fe4c <USB_EPStartXfer+0x488>
 802fc9e:	bf00      	nop
 802fca0:	e007ffff 	.word	0xe007ffff
 802fca4:	fff80000 	.word	0xfff80000
 802fca8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802fcac:	69bb      	ldr	r3, [r7, #24]
 802fcae:	015a      	lsls	r2, r3, #5
 802fcb0:	69fb      	ldr	r3, [r7, #28]
 802fcb2:	4413      	add	r3, r2
 802fcb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fcb8:	691a      	ldr	r2, [r3, #16]
 802fcba:	69bb      	ldr	r3, [r7, #24]
 802fcbc:	0159      	lsls	r1, r3, #5
 802fcbe:	69fb      	ldr	r3, [r7, #28]
 802fcc0:	440b      	add	r3, r1
 802fcc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fcc6:	4619      	mov	r1, r3
 802fcc8:	4b63      	ldr	r3, [pc, #396]	; (802fe58 <USB_EPStartXfer+0x494>)
 802fcca:	4013      	ands	r3, r2
 802fccc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802fcce:	69bb      	ldr	r3, [r7, #24]
 802fcd0:	015a      	lsls	r2, r3, #5
 802fcd2:	69fb      	ldr	r3, [r7, #28]
 802fcd4:	4413      	add	r3, r2
 802fcd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fcda:	691a      	ldr	r2, [r3, #16]
 802fcdc:	69bb      	ldr	r3, [r7, #24]
 802fcde:	0159      	lsls	r1, r3, #5
 802fce0:	69fb      	ldr	r3, [r7, #28]
 802fce2:	440b      	add	r3, r1
 802fce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fce8:	4619      	mov	r1, r3
 802fcea:	4b5c      	ldr	r3, [pc, #368]	; (802fe5c <USB_EPStartXfer+0x498>)
 802fcec:	4013      	ands	r3, r2
 802fcee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 802fcf0:	68bb      	ldr	r3, [r7, #8]
 802fcf2:	699b      	ldr	r3, [r3, #24]
 802fcf4:	2b00      	cmp	r3, #0
 802fcf6:	d123      	bne.n	802fd40 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 802fcf8:	69bb      	ldr	r3, [r7, #24]
 802fcfa:	015a      	lsls	r2, r3, #5
 802fcfc:	69fb      	ldr	r3, [r7, #28]
 802fcfe:	4413      	add	r3, r2
 802fd00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fd04:	691a      	ldr	r2, [r3, #16]
 802fd06:	68bb      	ldr	r3, [r7, #8]
 802fd08:	68db      	ldr	r3, [r3, #12]
 802fd0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802fd0e:	69b9      	ldr	r1, [r7, #24]
 802fd10:	0148      	lsls	r0, r1, #5
 802fd12:	69f9      	ldr	r1, [r7, #28]
 802fd14:	4401      	add	r1, r0
 802fd16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802fd1a:	4313      	orrs	r3, r2
 802fd1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802fd1e:	69bb      	ldr	r3, [r7, #24]
 802fd20:	015a      	lsls	r2, r3, #5
 802fd22:	69fb      	ldr	r3, [r7, #28]
 802fd24:	4413      	add	r3, r2
 802fd26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fd2a:	691b      	ldr	r3, [r3, #16]
 802fd2c:	69ba      	ldr	r2, [r7, #24]
 802fd2e:	0151      	lsls	r1, r2, #5
 802fd30:	69fa      	ldr	r2, [r7, #28]
 802fd32:	440a      	add	r2, r1
 802fd34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802fd38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802fd3c:	6113      	str	r3, [r2, #16]
 802fd3e:	e037      	b.n	802fdb0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 802fd40:	68bb      	ldr	r3, [r7, #8]
 802fd42:	699a      	ldr	r2, [r3, #24]
 802fd44:	68bb      	ldr	r3, [r7, #8]
 802fd46:	68db      	ldr	r3, [r3, #12]
 802fd48:	4413      	add	r3, r2
 802fd4a:	1e5a      	subs	r2, r3, #1
 802fd4c:	68bb      	ldr	r3, [r7, #8]
 802fd4e:	68db      	ldr	r3, [r3, #12]
 802fd50:	fbb2 f3f3 	udiv	r3, r2, r3
 802fd54:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 802fd56:	68bb      	ldr	r3, [r7, #8]
 802fd58:	68db      	ldr	r3, [r3, #12]
 802fd5a:	8afa      	ldrh	r2, [r7, #22]
 802fd5c:	fb03 f202 	mul.w	r2, r3, r2
 802fd60:	68bb      	ldr	r3, [r7, #8]
 802fd62:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 802fd64:	69bb      	ldr	r3, [r7, #24]
 802fd66:	015a      	lsls	r2, r3, #5
 802fd68:	69fb      	ldr	r3, [r7, #28]
 802fd6a:	4413      	add	r3, r2
 802fd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fd70:	691a      	ldr	r2, [r3, #16]
 802fd72:	8afb      	ldrh	r3, [r7, #22]
 802fd74:	04d9      	lsls	r1, r3, #19
 802fd76:	4b3a      	ldr	r3, [pc, #232]	; (802fe60 <USB_EPStartXfer+0x49c>)
 802fd78:	400b      	ands	r3, r1
 802fd7a:	69b9      	ldr	r1, [r7, #24]
 802fd7c:	0148      	lsls	r0, r1, #5
 802fd7e:	69f9      	ldr	r1, [r7, #28]
 802fd80:	4401      	add	r1, r0
 802fd82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802fd86:	4313      	orrs	r3, r2
 802fd88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 802fd8a:	69bb      	ldr	r3, [r7, #24]
 802fd8c:	015a      	lsls	r2, r3, #5
 802fd8e:	69fb      	ldr	r3, [r7, #28]
 802fd90:	4413      	add	r3, r2
 802fd92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fd96:	691a      	ldr	r2, [r3, #16]
 802fd98:	68bb      	ldr	r3, [r7, #8]
 802fd9a:	69db      	ldr	r3, [r3, #28]
 802fd9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802fda0:	69b9      	ldr	r1, [r7, #24]
 802fda2:	0148      	lsls	r0, r1, #5
 802fda4:	69f9      	ldr	r1, [r7, #28]
 802fda6:	4401      	add	r1, r0
 802fda8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802fdac:	4313      	orrs	r3, r2
 802fdae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802fdb0:	79fb      	ldrb	r3, [r7, #7]
 802fdb2:	2b01      	cmp	r3, #1
 802fdb4:	d10d      	bne.n	802fdd2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802fdb6:	68bb      	ldr	r3, [r7, #8]
 802fdb8:	691b      	ldr	r3, [r3, #16]
 802fdba:	2b00      	cmp	r3, #0
 802fdbc:	d009      	beq.n	802fdd2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802fdbe:	68bb      	ldr	r3, [r7, #8]
 802fdc0:	6919      	ldr	r1, [r3, #16]
 802fdc2:	69bb      	ldr	r3, [r7, #24]
 802fdc4:	015a      	lsls	r2, r3, #5
 802fdc6:	69fb      	ldr	r3, [r7, #28]
 802fdc8:	4413      	add	r3, r2
 802fdca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fdce:	460a      	mov	r2, r1
 802fdd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 802fdd2:	68bb      	ldr	r3, [r7, #8]
 802fdd4:	791b      	ldrb	r3, [r3, #4]
 802fdd6:	2b01      	cmp	r3, #1
 802fdd8:	d128      	bne.n	802fe2c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802fdda:	69fb      	ldr	r3, [r7, #28]
 802fddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fde0:	689b      	ldr	r3, [r3, #8]
 802fde2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802fde6:	2b00      	cmp	r3, #0
 802fde8:	d110      	bne.n	802fe0c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 802fdea:	69bb      	ldr	r3, [r7, #24]
 802fdec:	015a      	lsls	r2, r3, #5
 802fdee:	69fb      	ldr	r3, [r7, #28]
 802fdf0:	4413      	add	r3, r2
 802fdf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fdf6:	681b      	ldr	r3, [r3, #0]
 802fdf8:	69ba      	ldr	r2, [r7, #24]
 802fdfa:	0151      	lsls	r1, r2, #5
 802fdfc:	69fa      	ldr	r2, [r7, #28]
 802fdfe:	440a      	add	r2, r1
 802fe00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802fe04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802fe08:	6013      	str	r3, [r2, #0]
 802fe0a:	e00f      	b.n	802fe2c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 802fe0c:	69bb      	ldr	r3, [r7, #24]
 802fe0e:	015a      	lsls	r2, r3, #5
 802fe10:	69fb      	ldr	r3, [r7, #28]
 802fe12:	4413      	add	r3, r2
 802fe14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fe18:	681b      	ldr	r3, [r3, #0]
 802fe1a:	69ba      	ldr	r2, [r7, #24]
 802fe1c:	0151      	lsls	r1, r2, #5
 802fe1e:	69fa      	ldr	r2, [r7, #28]
 802fe20:	440a      	add	r2, r1
 802fe22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802fe26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802fe2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802fe2c:	69bb      	ldr	r3, [r7, #24]
 802fe2e:	015a      	lsls	r2, r3, #5
 802fe30:	69fb      	ldr	r3, [r7, #28]
 802fe32:	4413      	add	r3, r2
 802fe34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fe38:	681b      	ldr	r3, [r3, #0]
 802fe3a:	69ba      	ldr	r2, [r7, #24]
 802fe3c:	0151      	lsls	r1, r2, #5
 802fe3e:	69fa      	ldr	r2, [r7, #28]
 802fe40:	440a      	add	r2, r1
 802fe42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802fe46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802fe4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802fe4c:	2300      	movs	r3, #0
}
 802fe4e:	4618      	mov	r0, r3
 802fe50:	3720      	adds	r7, #32
 802fe52:	46bd      	mov	sp, r7
 802fe54:	bd80      	pop	{r7, pc}
 802fe56:	bf00      	nop
 802fe58:	fff80000 	.word	0xfff80000
 802fe5c:	e007ffff 	.word	0xe007ffff
 802fe60:	1ff80000 	.word	0x1ff80000

0802fe64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802fe64:	b480      	push	{r7}
 802fe66:	b087      	sub	sp, #28
 802fe68:	af00      	add	r7, sp, #0
 802fe6a:	60f8      	str	r0, [r7, #12]
 802fe6c:	60b9      	str	r1, [r7, #8]
 802fe6e:	4613      	mov	r3, r2
 802fe70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802fe72:	68fb      	ldr	r3, [r7, #12]
 802fe74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 802fe76:	68bb      	ldr	r3, [r7, #8]
 802fe78:	781b      	ldrb	r3, [r3, #0]
 802fe7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802fe7c:	68bb      	ldr	r3, [r7, #8]
 802fe7e:	785b      	ldrb	r3, [r3, #1]
 802fe80:	2b01      	cmp	r3, #1
 802fe82:	f040 80ce 	bne.w	8030022 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802fe86:	68bb      	ldr	r3, [r7, #8]
 802fe88:	699b      	ldr	r3, [r3, #24]
 802fe8a:	2b00      	cmp	r3, #0
 802fe8c:	d132      	bne.n	802fef4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802fe8e:	693b      	ldr	r3, [r7, #16]
 802fe90:	015a      	lsls	r2, r3, #5
 802fe92:	697b      	ldr	r3, [r7, #20]
 802fe94:	4413      	add	r3, r2
 802fe96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fe9a:	691a      	ldr	r2, [r3, #16]
 802fe9c:	693b      	ldr	r3, [r7, #16]
 802fe9e:	0159      	lsls	r1, r3, #5
 802fea0:	697b      	ldr	r3, [r7, #20]
 802fea2:	440b      	add	r3, r1
 802fea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fea8:	4619      	mov	r1, r3
 802feaa:	4b9a      	ldr	r3, [pc, #616]	; (8030114 <USB_EP0StartXfer+0x2b0>)
 802feac:	4013      	ands	r3, r2
 802feae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802feb0:	693b      	ldr	r3, [r7, #16]
 802feb2:	015a      	lsls	r2, r3, #5
 802feb4:	697b      	ldr	r3, [r7, #20]
 802feb6:	4413      	add	r3, r2
 802feb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802febc:	691b      	ldr	r3, [r3, #16]
 802febe:	693a      	ldr	r2, [r7, #16]
 802fec0:	0151      	lsls	r1, r2, #5
 802fec2:	697a      	ldr	r2, [r7, #20]
 802fec4:	440a      	add	r2, r1
 802fec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802feca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802fece:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802fed0:	693b      	ldr	r3, [r7, #16]
 802fed2:	015a      	lsls	r2, r3, #5
 802fed4:	697b      	ldr	r3, [r7, #20]
 802fed6:	4413      	add	r3, r2
 802fed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fedc:	691a      	ldr	r2, [r3, #16]
 802fede:	693b      	ldr	r3, [r7, #16]
 802fee0:	0159      	lsls	r1, r3, #5
 802fee2:	697b      	ldr	r3, [r7, #20]
 802fee4:	440b      	add	r3, r1
 802fee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802feea:	4619      	mov	r1, r3
 802feec:	4b8a      	ldr	r3, [pc, #552]	; (8030118 <USB_EP0StartXfer+0x2b4>)
 802feee:	4013      	ands	r3, r2
 802fef0:	610b      	str	r3, [r1, #16]
 802fef2:	e04e      	b.n	802ff92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802fef4:	693b      	ldr	r3, [r7, #16]
 802fef6:	015a      	lsls	r2, r3, #5
 802fef8:	697b      	ldr	r3, [r7, #20]
 802fefa:	4413      	add	r3, r2
 802fefc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ff00:	691a      	ldr	r2, [r3, #16]
 802ff02:	693b      	ldr	r3, [r7, #16]
 802ff04:	0159      	lsls	r1, r3, #5
 802ff06:	697b      	ldr	r3, [r7, #20]
 802ff08:	440b      	add	r3, r1
 802ff0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ff0e:	4619      	mov	r1, r3
 802ff10:	4b81      	ldr	r3, [pc, #516]	; (8030118 <USB_EP0StartXfer+0x2b4>)
 802ff12:	4013      	ands	r3, r2
 802ff14:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802ff16:	693b      	ldr	r3, [r7, #16]
 802ff18:	015a      	lsls	r2, r3, #5
 802ff1a:	697b      	ldr	r3, [r7, #20]
 802ff1c:	4413      	add	r3, r2
 802ff1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ff22:	691a      	ldr	r2, [r3, #16]
 802ff24:	693b      	ldr	r3, [r7, #16]
 802ff26:	0159      	lsls	r1, r3, #5
 802ff28:	697b      	ldr	r3, [r7, #20]
 802ff2a:	440b      	add	r3, r1
 802ff2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ff30:	4619      	mov	r1, r3
 802ff32:	4b78      	ldr	r3, [pc, #480]	; (8030114 <USB_EP0StartXfer+0x2b0>)
 802ff34:	4013      	ands	r3, r2
 802ff36:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 802ff38:	68bb      	ldr	r3, [r7, #8]
 802ff3a:	699a      	ldr	r2, [r3, #24]
 802ff3c:	68bb      	ldr	r3, [r7, #8]
 802ff3e:	68db      	ldr	r3, [r3, #12]
 802ff40:	429a      	cmp	r2, r3
 802ff42:	d903      	bls.n	802ff4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 802ff44:	68bb      	ldr	r3, [r7, #8]
 802ff46:	68da      	ldr	r2, [r3, #12]
 802ff48:	68bb      	ldr	r3, [r7, #8]
 802ff4a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802ff4c:	693b      	ldr	r3, [r7, #16]
 802ff4e:	015a      	lsls	r2, r3, #5
 802ff50:	697b      	ldr	r3, [r7, #20]
 802ff52:	4413      	add	r3, r2
 802ff54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ff58:	691b      	ldr	r3, [r3, #16]
 802ff5a:	693a      	ldr	r2, [r7, #16]
 802ff5c:	0151      	lsls	r1, r2, #5
 802ff5e:	697a      	ldr	r2, [r7, #20]
 802ff60:	440a      	add	r2, r1
 802ff62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ff66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802ff6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802ff6c:	693b      	ldr	r3, [r7, #16]
 802ff6e:	015a      	lsls	r2, r3, #5
 802ff70:	697b      	ldr	r3, [r7, #20]
 802ff72:	4413      	add	r3, r2
 802ff74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ff78:	691a      	ldr	r2, [r3, #16]
 802ff7a:	68bb      	ldr	r3, [r7, #8]
 802ff7c:	699b      	ldr	r3, [r3, #24]
 802ff7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802ff82:	6939      	ldr	r1, [r7, #16]
 802ff84:	0148      	lsls	r0, r1, #5
 802ff86:	6979      	ldr	r1, [r7, #20]
 802ff88:	4401      	add	r1, r0
 802ff8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802ff8e:	4313      	orrs	r3, r2
 802ff90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802ff92:	79fb      	ldrb	r3, [r7, #7]
 802ff94:	2b01      	cmp	r3, #1
 802ff96:	d11e      	bne.n	802ffd6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802ff98:	68bb      	ldr	r3, [r7, #8]
 802ff9a:	695b      	ldr	r3, [r3, #20]
 802ff9c:	2b00      	cmp	r3, #0
 802ff9e:	d009      	beq.n	802ffb4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802ffa0:	693b      	ldr	r3, [r7, #16]
 802ffa2:	015a      	lsls	r2, r3, #5
 802ffa4:	697b      	ldr	r3, [r7, #20]
 802ffa6:	4413      	add	r3, r2
 802ffa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ffac:	461a      	mov	r2, r3
 802ffae:	68bb      	ldr	r3, [r7, #8]
 802ffb0:	695b      	ldr	r3, [r3, #20]
 802ffb2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802ffb4:	693b      	ldr	r3, [r7, #16]
 802ffb6:	015a      	lsls	r2, r3, #5
 802ffb8:	697b      	ldr	r3, [r7, #20]
 802ffba:	4413      	add	r3, r2
 802ffbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ffc0:	681b      	ldr	r3, [r3, #0]
 802ffc2:	693a      	ldr	r2, [r7, #16]
 802ffc4:	0151      	lsls	r1, r2, #5
 802ffc6:	697a      	ldr	r2, [r7, #20]
 802ffc8:	440a      	add	r2, r1
 802ffca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ffce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802ffd2:	6013      	str	r3, [r2, #0]
 802ffd4:	e097      	b.n	8030106 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802ffd6:	693b      	ldr	r3, [r7, #16]
 802ffd8:	015a      	lsls	r2, r3, #5
 802ffda:	697b      	ldr	r3, [r7, #20]
 802ffdc:	4413      	add	r3, r2
 802ffde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ffe2:	681b      	ldr	r3, [r3, #0]
 802ffe4:	693a      	ldr	r2, [r7, #16]
 802ffe6:	0151      	lsls	r1, r2, #5
 802ffe8:	697a      	ldr	r2, [r7, #20]
 802ffea:	440a      	add	r2, r1
 802ffec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fff0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802fff4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 802fff6:	68bb      	ldr	r3, [r7, #8]
 802fff8:	699b      	ldr	r3, [r3, #24]
 802fffa:	2b00      	cmp	r3, #0
 802fffc:	f000 8083 	beq.w	8030106 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8030000:	697b      	ldr	r3, [r7, #20]
 8030002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8030006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8030008:	68bb      	ldr	r3, [r7, #8]
 803000a:	781b      	ldrb	r3, [r3, #0]
 803000c:	f003 030f 	and.w	r3, r3, #15
 8030010:	2101      	movs	r1, #1
 8030012:	fa01 f303 	lsl.w	r3, r1, r3
 8030016:	6979      	ldr	r1, [r7, #20]
 8030018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803001c:	4313      	orrs	r3, r2
 803001e:	634b      	str	r3, [r1, #52]	; 0x34
 8030020:	e071      	b.n	8030106 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8030022:	693b      	ldr	r3, [r7, #16]
 8030024:	015a      	lsls	r2, r3, #5
 8030026:	697b      	ldr	r3, [r7, #20]
 8030028:	4413      	add	r3, r2
 803002a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803002e:	691a      	ldr	r2, [r3, #16]
 8030030:	693b      	ldr	r3, [r7, #16]
 8030032:	0159      	lsls	r1, r3, #5
 8030034:	697b      	ldr	r3, [r7, #20]
 8030036:	440b      	add	r3, r1
 8030038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803003c:	4619      	mov	r1, r3
 803003e:	4b36      	ldr	r3, [pc, #216]	; (8030118 <USB_EP0StartXfer+0x2b4>)
 8030040:	4013      	ands	r3, r2
 8030042:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8030044:	693b      	ldr	r3, [r7, #16]
 8030046:	015a      	lsls	r2, r3, #5
 8030048:	697b      	ldr	r3, [r7, #20]
 803004a:	4413      	add	r3, r2
 803004c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030050:	691a      	ldr	r2, [r3, #16]
 8030052:	693b      	ldr	r3, [r7, #16]
 8030054:	0159      	lsls	r1, r3, #5
 8030056:	697b      	ldr	r3, [r7, #20]
 8030058:	440b      	add	r3, r1
 803005a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803005e:	4619      	mov	r1, r3
 8030060:	4b2c      	ldr	r3, [pc, #176]	; (8030114 <USB_EP0StartXfer+0x2b0>)
 8030062:	4013      	ands	r3, r2
 8030064:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8030066:	68bb      	ldr	r3, [r7, #8]
 8030068:	699b      	ldr	r3, [r3, #24]
 803006a:	2b00      	cmp	r3, #0
 803006c:	d003      	beq.n	8030076 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 803006e:	68bb      	ldr	r3, [r7, #8]
 8030070:	68da      	ldr	r2, [r3, #12]
 8030072:	68bb      	ldr	r3, [r7, #8]
 8030074:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8030076:	68bb      	ldr	r3, [r7, #8]
 8030078:	68da      	ldr	r2, [r3, #12]
 803007a:	68bb      	ldr	r3, [r7, #8]
 803007c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803007e:	693b      	ldr	r3, [r7, #16]
 8030080:	015a      	lsls	r2, r3, #5
 8030082:	697b      	ldr	r3, [r7, #20]
 8030084:	4413      	add	r3, r2
 8030086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803008a:	691b      	ldr	r3, [r3, #16]
 803008c:	693a      	ldr	r2, [r7, #16]
 803008e:	0151      	lsls	r1, r2, #5
 8030090:	697a      	ldr	r2, [r7, #20]
 8030092:	440a      	add	r2, r1
 8030094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8030098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803009c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 803009e:	693b      	ldr	r3, [r7, #16]
 80300a0:	015a      	lsls	r2, r3, #5
 80300a2:	697b      	ldr	r3, [r7, #20]
 80300a4:	4413      	add	r3, r2
 80300a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80300aa:	691a      	ldr	r2, [r3, #16]
 80300ac:	68bb      	ldr	r3, [r7, #8]
 80300ae:	69db      	ldr	r3, [r3, #28]
 80300b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80300b4:	6939      	ldr	r1, [r7, #16]
 80300b6:	0148      	lsls	r0, r1, #5
 80300b8:	6979      	ldr	r1, [r7, #20]
 80300ba:	4401      	add	r1, r0
 80300bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80300c0:	4313      	orrs	r3, r2
 80300c2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80300c4:	79fb      	ldrb	r3, [r7, #7]
 80300c6:	2b01      	cmp	r3, #1
 80300c8:	d10d      	bne.n	80300e6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80300ca:	68bb      	ldr	r3, [r7, #8]
 80300cc:	691b      	ldr	r3, [r3, #16]
 80300ce:	2b00      	cmp	r3, #0
 80300d0:	d009      	beq.n	80300e6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80300d2:	68bb      	ldr	r3, [r7, #8]
 80300d4:	6919      	ldr	r1, [r3, #16]
 80300d6:	693b      	ldr	r3, [r7, #16]
 80300d8:	015a      	lsls	r2, r3, #5
 80300da:	697b      	ldr	r3, [r7, #20]
 80300dc:	4413      	add	r3, r2
 80300de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80300e2:	460a      	mov	r2, r1
 80300e4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80300e6:	693b      	ldr	r3, [r7, #16]
 80300e8:	015a      	lsls	r2, r3, #5
 80300ea:	697b      	ldr	r3, [r7, #20]
 80300ec:	4413      	add	r3, r2
 80300ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80300f2:	681b      	ldr	r3, [r3, #0]
 80300f4:	693a      	ldr	r2, [r7, #16]
 80300f6:	0151      	lsls	r1, r2, #5
 80300f8:	697a      	ldr	r2, [r7, #20]
 80300fa:	440a      	add	r2, r1
 80300fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8030100:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8030104:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8030106:	2300      	movs	r3, #0
}
 8030108:	4618      	mov	r0, r3
 803010a:	371c      	adds	r7, #28
 803010c:	46bd      	mov	sp, r7
 803010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030112:	4770      	bx	lr
 8030114:	e007ffff 	.word	0xe007ffff
 8030118:	fff80000 	.word	0xfff80000

0803011c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803011c:	b480      	push	{r7}
 803011e:	b087      	sub	sp, #28
 8030120:	af00      	add	r7, sp, #0
 8030122:	6078      	str	r0, [r7, #4]
 8030124:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8030126:	2300      	movs	r3, #0
 8030128:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 803012a:	2300      	movs	r3, #0
 803012c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803012e:	687b      	ldr	r3, [r7, #4]
 8030130:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8030132:	683b      	ldr	r3, [r7, #0]
 8030134:	785b      	ldrb	r3, [r3, #1]
 8030136:	2b01      	cmp	r3, #1
 8030138:	d14a      	bne.n	80301d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 803013a:	683b      	ldr	r3, [r7, #0]
 803013c:	781b      	ldrb	r3, [r3, #0]
 803013e:	015a      	lsls	r2, r3, #5
 8030140:	693b      	ldr	r3, [r7, #16]
 8030142:	4413      	add	r3, r2
 8030144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8030148:	681b      	ldr	r3, [r3, #0]
 803014a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803014e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8030152:	f040 8086 	bne.w	8030262 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8030156:	683b      	ldr	r3, [r7, #0]
 8030158:	781b      	ldrb	r3, [r3, #0]
 803015a:	015a      	lsls	r2, r3, #5
 803015c:	693b      	ldr	r3, [r7, #16]
 803015e:	4413      	add	r3, r2
 8030160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8030164:	681b      	ldr	r3, [r3, #0]
 8030166:	683a      	ldr	r2, [r7, #0]
 8030168:	7812      	ldrb	r2, [r2, #0]
 803016a:	0151      	lsls	r1, r2, #5
 803016c:	693a      	ldr	r2, [r7, #16]
 803016e:	440a      	add	r2, r1
 8030170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8030174:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8030178:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 803017a:	683b      	ldr	r3, [r7, #0]
 803017c:	781b      	ldrb	r3, [r3, #0]
 803017e:	015a      	lsls	r2, r3, #5
 8030180:	693b      	ldr	r3, [r7, #16]
 8030182:	4413      	add	r3, r2
 8030184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8030188:	681b      	ldr	r3, [r3, #0]
 803018a:	683a      	ldr	r2, [r7, #0]
 803018c:	7812      	ldrb	r2, [r2, #0]
 803018e:	0151      	lsls	r1, r2, #5
 8030190:	693a      	ldr	r2, [r7, #16]
 8030192:	440a      	add	r2, r1
 8030194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8030198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803019c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 803019e:	68fb      	ldr	r3, [r7, #12]
 80301a0:	3301      	adds	r3, #1
 80301a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80301a4:	68fb      	ldr	r3, [r7, #12]
 80301a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80301aa:	4293      	cmp	r3, r2
 80301ac:	d902      	bls.n	80301b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80301ae:	2301      	movs	r3, #1
 80301b0:	75fb      	strb	r3, [r7, #23]
          break;
 80301b2:	e056      	b.n	8030262 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80301b4:	683b      	ldr	r3, [r7, #0]
 80301b6:	781b      	ldrb	r3, [r3, #0]
 80301b8:	015a      	lsls	r2, r3, #5
 80301ba:	693b      	ldr	r3, [r7, #16]
 80301bc:	4413      	add	r3, r2
 80301be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80301c2:	681b      	ldr	r3, [r3, #0]
 80301c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80301c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80301cc:	d0e7      	beq.n	803019e <USB_EPStopXfer+0x82>
 80301ce:	e048      	b.n	8030262 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80301d0:	683b      	ldr	r3, [r7, #0]
 80301d2:	781b      	ldrb	r3, [r3, #0]
 80301d4:	015a      	lsls	r2, r3, #5
 80301d6:	693b      	ldr	r3, [r7, #16]
 80301d8:	4413      	add	r3, r2
 80301da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80301de:	681b      	ldr	r3, [r3, #0]
 80301e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80301e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80301e8:	d13b      	bne.n	8030262 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80301ea:	683b      	ldr	r3, [r7, #0]
 80301ec:	781b      	ldrb	r3, [r3, #0]
 80301ee:	015a      	lsls	r2, r3, #5
 80301f0:	693b      	ldr	r3, [r7, #16]
 80301f2:	4413      	add	r3, r2
 80301f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80301f8:	681b      	ldr	r3, [r3, #0]
 80301fa:	683a      	ldr	r2, [r7, #0]
 80301fc:	7812      	ldrb	r2, [r2, #0]
 80301fe:	0151      	lsls	r1, r2, #5
 8030200:	693a      	ldr	r2, [r7, #16]
 8030202:	440a      	add	r2, r1
 8030204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8030208:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803020c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 803020e:	683b      	ldr	r3, [r7, #0]
 8030210:	781b      	ldrb	r3, [r3, #0]
 8030212:	015a      	lsls	r2, r3, #5
 8030214:	693b      	ldr	r3, [r7, #16]
 8030216:	4413      	add	r3, r2
 8030218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803021c:	681b      	ldr	r3, [r3, #0]
 803021e:	683a      	ldr	r2, [r7, #0]
 8030220:	7812      	ldrb	r2, [r2, #0]
 8030222:	0151      	lsls	r1, r2, #5
 8030224:	693a      	ldr	r2, [r7, #16]
 8030226:	440a      	add	r2, r1
 8030228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803022c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8030230:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8030232:	68fb      	ldr	r3, [r7, #12]
 8030234:	3301      	adds	r3, #1
 8030236:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8030238:	68fb      	ldr	r3, [r7, #12]
 803023a:	f242 7210 	movw	r2, #10000	; 0x2710
 803023e:	4293      	cmp	r3, r2
 8030240:	d902      	bls.n	8030248 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8030242:	2301      	movs	r3, #1
 8030244:	75fb      	strb	r3, [r7, #23]
          break;
 8030246:	e00c      	b.n	8030262 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8030248:	683b      	ldr	r3, [r7, #0]
 803024a:	781b      	ldrb	r3, [r3, #0]
 803024c:	015a      	lsls	r2, r3, #5
 803024e:	693b      	ldr	r3, [r7, #16]
 8030250:	4413      	add	r3, r2
 8030252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030256:	681b      	ldr	r3, [r3, #0]
 8030258:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803025c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8030260:	d0e7      	beq.n	8030232 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8030262:	7dfb      	ldrb	r3, [r7, #23]
}
 8030264:	4618      	mov	r0, r3
 8030266:	371c      	adds	r7, #28
 8030268:	46bd      	mov	sp, r7
 803026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803026e:	4770      	bx	lr

08030270 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8030270:	b480      	push	{r7}
 8030272:	b089      	sub	sp, #36	; 0x24
 8030274:	af00      	add	r7, sp, #0
 8030276:	60f8      	str	r0, [r7, #12]
 8030278:	60b9      	str	r1, [r7, #8]
 803027a:	4611      	mov	r1, r2
 803027c:	461a      	mov	r2, r3
 803027e:	460b      	mov	r3, r1
 8030280:	71fb      	strb	r3, [r7, #7]
 8030282:	4613      	mov	r3, r2
 8030284:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030286:	68fb      	ldr	r3, [r7, #12]
 8030288:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 803028a:	68bb      	ldr	r3, [r7, #8]
 803028c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 803028e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8030292:	2b00      	cmp	r3, #0
 8030294:	d123      	bne.n	80302de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8030296:	88bb      	ldrh	r3, [r7, #4]
 8030298:	3303      	adds	r3, #3
 803029a:	089b      	lsrs	r3, r3, #2
 803029c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 803029e:	2300      	movs	r3, #0
 80302a0:	61bb      	str	r3, [r7, #24]
 80302a2:	e018      	b.n	80302d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80302a4:	79fb      	ldrb	r3, [r7, #7]
 80302a6:	031a      	lsls	r2, r3, #12
 80302a8:	697b      	ldr	r3, [r7, #20]
 80302aa:	4413      	add	r3, r2
 80302ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80302b0:	461a      	mov	r2, r3
 80302b2:	69fb      	ldr	r3, [r7, #28]
 80302b4:	681b      	ldr	r3, [r3, #0]
 80302b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80302b8:	69fb      	ldr	r3, [r7, #28]
 80302ba:	3301      	adds	r3, #1
 80302bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80302be:	69fb      	ldr	r3, [r7, #28]
 80302c0:	3301      	adds	r3, #1
 80302c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80302c4:	69fb      	ldr	r3, [r7, #28]
 80302c6:	3301      	adds	r3, #1
 80302c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80302ca:	69fb      	ldr	r3, [r7, #28]
 80302cc:	3301      	adds	r3, #1
 80302ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80302d0:	69bb      	ldr	r3, [r7, #24]
 80302d2:	3301      	adds	r3, #1
 80302d4:	61bb      	str	r3, [r7, #24]
 80302d6:	69ba      	ldr	r2, [r7, #24]
 80302d8:	693b      	ldr	r3, [r7, #16]
 80302da:	429a      	cmp	r2, r3
 80302dc:	d3e2      	bcc.n	80302a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80302de:	2300      	movs	r3, #0
}
 80302e0:	4618      	mov	r0, r3
 80302e2:	3724      	adds	r7, #36	; 0x24
 80302e4:	46bd      	mov	sp, r7
 80302e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80302ea:	4770      	bx	lr

080302ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80302ec:	b480      	push	{r7}
 80302ee:	b08b      	sub	sp, #44	; 0x2c
 80302f0:	af00      	add	r7, sp, #0
 80302f2:	60f8      	str	r0, [r7, #12]
 80302f4:	60b9      	str	r1, [r7, #8]
 80302f6:	4613      	mov	r3, r2
 80302f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80302fa:	68fb      	ldr	r3, [r7, #12]
 80302fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80302fe:	68bb      	ldr	r3, [r7, #8]
 8030300:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8030302:	88fb      	ldrh	r3, [r7, #6]
 8030304:	089b      	lsrs	r3, r3, #2
 8030306:	b29b      	uxth	r3, r3
 8030308:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 803030a:	88fb      	ldrh	r3, [r7, #6]
 803030c:	f003 0303 	and.w	r3, r3, #3
 8030310:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8030312:	2300      	movs	r3, #0
 8030314:	623b      	str	r3, [r7, #32]
 8030316:	e014      	b.n	8030342 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8030318:	69bb      	ldr	r3, [r7, #24]
 803031a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803031e:	681a      	ldr	r2, [r3, #0]
 8030320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030322:	601a      	str	r2, [r3, #0]
    pDest++;
 8030324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030326:	3301      	adds	r3, #1
 8030328:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803032a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803032c:	3301      	adds	r3, #1
 803032e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8030330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030332:	3301      	adds	r3, #1
 8030334:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8030336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030338:	3301      	adds	r3, #1
 803033a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 803033c:	6a3b      	ldr	r3, [r7, #32]
 803033e:	3301      	adds	r3, #1
 8030340:	623b      	str	r3, [r7, #32]
 8030342:	6a3a      	ldr	r2, [r7, #32]
 8030344:	697b      	ldr	r3, [r7, #20]
 8030346:	429a      	cmp	r2, r3
 8030348:	d3e6      	bcc.n	8030318 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 803034a:	8bfb      	ldrh	r3, [r7, #30]
 803034c:	2b00      	cmp	r3, #0
 803034e:	d01e      	beq.n	803038e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8030350:	2300      	movs	r3, #0
 8030352:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8030354:	69bb      	ldr	r3, [r7, #24]
 8030356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803035a:	461a      	mov	r2, r3
 803035c:	f107 0310 	add.w	r3, r7, #16
 8030360:	6812      	ldr	r2, [r2, #0]
 8030362:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8030364:	693a      	ldr	r2, [r7, #16]
 8030366:	6a3b      	ldr	r3, [r7, #32]
 8030368:	b2db      	uxtb	r3, r3
 803036a:	00db      	lsls	r3, r3, #3
 803036c:	fa22 f303 	lsr.w	r3, r2, r3
 8030370:	b2da      	uxtb	r2, r3
 8030372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030374:	701a      	strb	r2, [r3, #0]
      i++;
 8030376:	6a3b      	ldr	r3, [r7, #32]
 8030378:	3301      	adds	r3, #1
 803037a:	623b      	str	r3, [r7, #32]
      pDest++;
 803037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803037e:	3301      	adds	r3, #1
 8030380:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8030382:	8bfb      	ldrh	r3, [r7, #30]
 8030384:	3b01      	subs	r3, #1
 8030386:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8030388:	8bfb      	ldrh	r3, [r7, #30]
 803038a:	2b00      	cmp	r3, #0
 803038c:	d1ea      	bne.n	8030364 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 803038e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8030390:	4618      	mov	r0, r3
 8030392:	372c      	adds	r7, #44	; 0x2c
 8030394:	46bd      	mov	sp, r7
 8030396:	f85d 7b04 	ldr.w	r7, [sp], #4
 803039a:	4770      	bx	lr

0803039c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803039c:	b480      	push	{r7}
 803039e:	b085      	sub	sp, #20
 80303a0:	af00      	add	r7, sp, #0
 80303a2:	6078      	str	r0, [r7, #4]
 80303a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80303a6:	687b      	ldr	r3, [r7, #4]
 80303a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80303aa:	683b      	ldr	r3, [r7, #0]
 80303ac:	781b      	ldrb	r3, [r3, #0]
 80303ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80303b0:	683b      	ldr	r3, [r7, #0]
 80303b2:	785b      	ldrb	r3, [r3, #1]
 80303b4:	2b01      	cmp	r3, #1
 80303b6:	d12c      	bne.n	8030412 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80303b8:	68bb      	ldr	r3, [r7, #8]
 80303ba:	015a      	lsls	r2, r3, #5
 80303bc:	68fb      	ldr	r3, [r7, #12]
 80303be:	4413      	add	r3, r2
 80303c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80303c4:	681b      	ldr	r3, [r3, #0]
 80303c6:	2b00      	cmp	r3, #0
 80303c8:	db12      	blt.n	80303f0 <USB_EPSetStall+0x54>
 80303ca:	68bb      	ldr	r3, [r7, #8]
 80303cc:	2b00      	cmp	r3, #0
 80303ce:	d00f      	beq.n	80303f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80303d0:	68bb      	ldr	r3, [r7, #8]
 80303d2:	015a      	lsls	r2, r3, #5
 80303d4:	68fb      	ldr	r3, [r7, #12]
 80303d6:	4413      	add	r3, r2
 80303d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80303dc:	681b      	ldr	r3, [r3, #0]
 80303de:	68ba      	ldr	r2, [r7, #8]
 80303e0:	0151      	lsls	r1, r2, #5
 80303e2:	68fa      	ldr	r2, [r7, #12]
 80303e4:	440a      	add	r2, r1
 80303e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80303ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80303ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80303f0:	68bb      	ldr	r3, [r7, #8]
 80303f2:	015a      	lsls	r2, r3, #5
 80303f4:	68fb      	ldr	r3, [r7, #12]
 80303f6:	4413      	add	r3, r2
 80303f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80303fc:	681b      	ldr	r3, [r3, #0]
 80303fe:	68ba      	ldr	r2, [r7, #8]
 8030400:	0151      	lsls	r1, r2, #5
 8030402:	68fa      	ldr	r2, [r7, #12]
 8030404:	440a      	add	r2, r1
 8030406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803040a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 803040e:	6013      	str	r3, [r2, #0]
 8030410:	e02b      	b.n	803046a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8030412:	68bb      	ldr	r3, [r7, #8]
 8030414:	015a      	lsls	r2, r3, #5
 8030416:	68fb      	ldr	r3, [r7, #12]
 8030418:	4413      	add	r3, r2
 803041a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803041e:	681b      	ldr	r3, [r3, #0]
 8030420:	2b00      	cmp	r3, #0
 8030422:	db12      	blt.n	803044a <USB_EPSetStall+0xae>
 8030424:	68bb      	ldr	r3, [r7, #8]
 8030426:	2b00      	cmp	r3, #0
 8030428:	d00f      	beq.n	803044a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 803042a:	68bb      	ldr	r3, [r7, #8]
 803042c:	015a      	lsls	r2, r3, #5
 803042e:	68fb      	ldr	r3, [r7, #12]
 8030430:	4413      	add	r3, r2
 8030432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030436:	681b      	ldr	r3, [r3, #0]
 8030438:	68ba      	ldr	r2, [r7, #8]
 803043a:	0151      	lsls	r1, r2, #5
 803043c:	68fa      	ldr	r2, [r7, #12]
 803043e:	440a      	add	r2, r1
 8030440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8030444:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8030448:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 803044a:	68bb      	ldr	r3, [r7, #8]
 803044c:	015a      	lsls	r2, r3, #5
 803044e:	68fb      	ldr	r3, [r7, #12]
 8030450:	4413      	add	r3, r2
 8030452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030456:	681b      	ldr	r3, [r3, #0]
 8030458:	68ba      	ldr	r2, [r7, #8]
 803045a:	0151      	lsls	r1, r2, #5
 803045c:	68fa      	ldr	r2, [r7, #12]
 803045e:	440a      	add	r2, r1
 8030460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8030464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8030468:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803046a:	2300      	movs	r3, #0
}
 803046c:	4618      	mov	r0, r3
 803046e:	3714      	adds	r7, #20
 8030470:	46bd      	mov	sp, r7
 8030472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030476:	4770      	bx	lr

08030478 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8030478:	b480      	push	{r7}
 803047a:	b085      	sub	sp, #20
 803047c:	af00      	add	r7, sp, #0
 803047e:	6078      	str	r0, [r7, #4]
 8030480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030482:	687b      	ldr	r3, [r7, #4]
 8030484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8030486:	683b      	ldr	r3, [r7, #0]
 8030488:	781b      	ldrb	r3, [r3, #0]
 803048a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803048c:	683b      	ldr	r3, [r7, #0]
 803048e:	785b      	ldrb	r3, [r3, #1]
 8030490:	2b01      	cmp	r3, #1
 8030492:	d128      	bne.n	80304e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8030494:	68bb      	ldr	r3, [r7, #8]
 8030496:	015a      	lsls	r2, r3, #5
 8030498:	68fb      	ldr	r3, [r7, #12]
 803049a:	4413      	add	r3, r2
 803049c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80304a0:	681b      	ldr	r3, [r3, #0]
 80304a2:	68ba      	ldr	r2, [r7, #8]
 80304a4:	0151      	lsls	r1, r2, #5
 80304a6:	68fa      	ldr	r2, [r7, #12]
 80304a8:	440a      	add	r2, r1
 80304aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80304ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80304b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80304b4:	683b      	ldr	r3, [r7, #0]
 80304b6:	791b      	ldrb	r3, [r3, #4]
 80304b8:	2b03      	cmp	r3, #3
 80304ba:	d003      	beq.n	80304c4 <USB_EPClearStall+0x4c>
 80304bc:	683b      	ldr	r3, [r7, #0]
 80304be:	791b      	ldrb	r3, [r3, #4]
 80304c0:	2b02      	cmp	r3, #2
 80304c2:	d138      	bne.n	8030536 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80304c4:	68bb      	ldr	r3, [r7, #8]
 80304c6:	015a      	lsls	r2, r3, #5
 80304c8:	68fb      	ldr	r3, [r7, #12]
 80304ca:	4413      	add	r3, r2
 80304cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80304d0:	681b      	ldr	r3, [r3, #0]
 80304d2:	68ba      	ldr	r2, [r7, #8]
 80304d4:	0151      	lsls	r1, r2, #5
 80304d6:	68fa      	ldr	r2, [r7, #12]
 80304d8:	440a      	add	r2, r1
 80304da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80304de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80304e2:	6013      	str	r3, [r2, #0]
 80304e4:	e027      	b.n	8030536 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80304e6:	68bb      	ldr	r3, [r7, #8]
 80304e8:	015a      	lsls	r2, r3, #5
 80304ea:	68fb      	ldr	r3, [r7, #12]
 80304ec:	4413      	add	r3, r2
 80304ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80304f2:	681b      	ldr	r3, [r3, #0]
 80304f4:	68ba      	ldr	r2, [r7, #8]
 80304f6:	0151      	lsls	r1, r2, #5
 80304f8:	68fa      	ldr	r2, [r7, #12]
 80304fa:	440a      	add	r2, r1
 80304fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8030500:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8030504:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8030506:	683b      	ldr	r3, [r7, #0]
 8030508:	791b      	ldrb	r3, [r3, #4]
 803050a:	2b03      	cmp	r3, #3
 803050c:	d003      	beq.n	8030516 <USB_EPClearStall+0x9e>
 803050e:	683b      	ldr	r3, [r7, #0]
 8030510:	791b      	ldrb	r3, [r3, #4]
 8030512:	2b02      	cmp	r3, #2
 8030514:	d10f      	bne.n	8030536 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8030516:	68bb      	ldr	r3, [r7, #8]
 8030518:	015a      	lsls	r2, r3, #5
 803051a:	68fb      	ldr	r3, [r7, #12]
 803051c:	4413      	add	r3, r2
 803051e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030522:	681b      	ldr	r3, [r3, #0]
 8030524:	68ba      	ldr	r2, [r7, #8]
 8030526:	0151      	lsls	r1, r2, #5
 8030528:	68fa      	ldr	r2, [r7, #12]
 803052a:	440a      	add	r2, r1
 803052c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8030530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8030534:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8030536:	2300      	movs	r3, #0
}
 8030538:	4618      	mov	r0, r3
 803053a:	3714      	adds	r7, #20
 803053c:	46bd      	mov	sp, r7
 803053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030542:	4770      	bx	lr

08030544 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8030544:	b480      	push	{r7}
 8030546:	b085      	sub	sp, #20
 8030548:	af00      	add	r7, sp, #0
 803054a:	6078      	str	r0, [r7, #4]
 803054c:	460b      	mov	r3, r1
 803054e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030550:	687b      	ldr	r3, [r7, #4]
 8030552:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8030554:	68fb      	ldr	r3, [r7, #12]
 8030556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803055a:	681b      	ldr	r3, [r3, #0]
 803055c:	68fa      	ldr	r2, [r7, #12]
 803055e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8030562:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8030566:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8030568:	68fb      	ldr	r3, [r7, #12]
 803056a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803056e:	681a      	ldr	r2, [r3, #0]
 8030570:	78fb      	ldrb	r3, [r7, #3]
 8030572:	011b      	lsls	r3, r3, #4
 8030574:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8030578:	68f9      	ldr	r1, [r7, #12]
 803057a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803057e:	4313      	orrs	r3, r2
 8030580:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8030582:	2300      	movs	r3, #0
}
 8030584:	4618      	mov	r0, r3
 8030586:	3714      	adds	r7, #20
 8030588:	46bd      	mov	sp, r7
 803058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803058e:	4770      	bx	lr

08030590 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8030590:	b480      	push	{r7}
 8030592:	b085      	sub	sp, #20
 8030594:	af00      	add	r7, sp, #0
 8030596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030598:	687b      	ldr	r3, [r7, #4]
 803059a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803059c:	68fb      	ldr	r3, [r7, #12]
 803059e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80305a2:	681b      	ldr	r3, [r3, #0]
 80305a4:	68fa      	ldr	r2, [r7, #12]
 80305a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80305aa:	f023 0303 	bic.w	r3, r3, #3
 80305ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80305b0:	68fb      	ldr	r3, [r7, #12]
 80305b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80305b6:	685b      	ldr	r3, [r3, #4]
 80305b8:	68fa      	ldr	r2, [r7, #12]
 80305ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80305be:	f023 0302 	bic.w	r3, r3, #2
 80305c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80305c4:	2300      	movs	r3, #0
}
 80305c6:	4618      	mov	r0, r3
 80305c8:	3714      	adds	r7, #20
 80305ca:	46bd      	mov	sp, r7
 80305cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80305d0:	4770      	bx	lr

080305d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80305d2:	b480      	push	{r7}
 80305d4:	b085      	sub	sp, #20
 80305d6:	af00      	add	r7, sp, #0
 80305d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80305da:	687b      	ldr	r3, [r7, #4]
 80305dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80305de:	68fb      	ldr	r3, [r7, #12]
 80305e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80305e4:	681b      	ldr	r3, [r3, #0]
 80305e6:	68fa      	ldr	r2, [r7, #12]
 80305e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80305ec:	f023 0303 	bic.w	r3, r3, #3
 80305f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80305f2:	68fb      	ldr	r3, [r7, #12]
 80305f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80305f8:	685b      	ldr	r3, [r3, #4]
 80305fa:	68fa      	ldr	r2, [r7, #12]
 80305fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8030600:	f043 0302 	orr.w	r3, r3, #2
 8030604:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8030606:	2300      	movs	r3, #0
}
 8030608:	4618      	mov	r0, r3
 803060a:	3714      	adds	r7, #20
 803060c:	46bd      	mov	sp, r7
 803060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030612:	4770      	bx	lr

08030614 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8030614:	b480      	push	{r7}
 8030616:	b085      	sub	sp, #20
 8030618:	af00      	add	r7, sp, #0
 803061a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 803061c:	687b      	ldr	r3, [r7, #4]
 803061e:	695b      	ldr	r3, [r3, #20]
 8030620:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8030622:	687b      	ldr	r3, [r7, #4]
 8030624:	699b      	ldr	r3, [r3, #24]
 8030626:	68fa      	ldr	r2, [r7, #12]
 8030628:	4013      	ands	r3, r2
 803062a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 803062c:	68fb      	ldr	r3, [r7, #12]
}
 803062e:	4618      	mov	r0, r3
 8030630:	3714      	adds	r7, #20
 8030632:	46bd      	mov	sp, r7
 8030634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030638:	4770      	bx	lr

0803063a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803063a:	b480      	push	{r7}
 803063c:	b085      	sub	sp, #20
 803063e:	af00      	add	r7, sp, #0
 8030640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030642:	687b      	ldr	r3, [r7, #4]
 8030644:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8030646:	68fb      	ldr	r3, [r7, #12]
 8030648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803064c:	699b      	ldr	r3, [r3, #24]
 803064e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8030650:	68fb      	ldr	r3, [r7, #12]
 8030652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8030656:	69db      	ldr	r3, [r3, #28]
 8030658:	68ba      	ldr	r2, [r7, #8]
 803065a:	4013      	ands	r3, r2
 803065c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 803065e:	68bb      	ldr	r3, [r7, #8]
 8030660:	0c1b      	lsrs	r3, r3, #16
}
 8030662:	4618      	mov	r0, r3
 8030664:	3714      	adds	r7, #20
 8030666:	46bd      	mov	sp, r7
 8030668:	f85d 7b04 	ldr.w	r7, [sp], #4
 803066c:	4770      	bx	lr

0803066e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803066e:	b480      	push	{r7}
 8030670:	b085      	sub	sp, #20
 8030672:	af00      	add	r7, sp, #0
 8030674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030676:	687b      	ldr	r3, [r7, #4]
 8030678:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 803067a:	68fb      	ldr	r3, [r7, #12]
 803067c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8030680:	699b      	ldr	r3, [r3, #24]
 8030682:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8030684:	68fb      	ldr	r3, [r7, #12]
 8030686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803068a:	69db      	ldr	r3, [r3, #28]
 803068c:	68ba      	ldr	r2, [r7, #8]
 803068e:	4013      	ands	r3, r2
 8030690:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8030692:	68bb      	ldr	r3, [r7, #8]
 8030694:	b29b      	uxth	r3, r3
}
 8030696:	4618      	mov	r0, r3
 8030698:	3714      	adds	r7, #20
 803069a:	46bd      	mov	sp, r7
 803069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80306a0:	4770      	bx	lr

080306a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80306a2:	b480      	push	{r7}
 80306a4:	b085      	sub	sp, #20
 80306a6:	af00      	add	r7, sp, #0
 80306a8:	6078      	str	r0, [r7, #4]
 80306aa:	460b      	mov	r3, r1
 80306ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80306ae:	687b      	ldr	r3, [r7, #4]
 80306b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80306b2:	78fb      	ldrb	r3, [r7, #3]
 80306b4:	015a      	lsls	r2, r3, #5
 80306b6:	68fb      	ldr	r3, [r7, #12]
 80306b8:	4413      	add	r3, r2
 80306ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80306be:	689b      	ldr	r3, [r3, #8]
 80306c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80306c2:	68fb      	ldr	r3, [r7, #12]
 80306c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80306c8:	695b      	ldr	r3, [r3, #20]
 80306ca:	68ba      	ldr	r2, [r7, #8]
 80306cc:	4013      	ands	r3, r2
 80306ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80306d0:	68bb      	ldr	r3, [r7, #8]
}
 80306d2:	4618      	mov	r0, r3
 80306d4:	3714      	adds	r7, #20
 80306d6:	46bd      	mov	sp, r7
 80306d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80306dc:	4770      	bx	lr

080306de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80306de:	b480      	push	{r7}
 80306e0:	b087      	sub	sp, #28
 80306e2:	af00      	add	r7, sp, #0
 80306e4:	6078      	str	r0, [r7, #4]
 80306e6:	460b      	mov	r3, r1
 80306e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80306ea:	687b      	ldr	r3, [r7, #4]
 80306ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80306ee:	697b      	ldr	r3, [r7, #20]
 80306f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80306f4:	691b      	ldr	r3, [r3, #16]
 80306f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80306f8:	697b      	ldr	r3, [r7, #20]
 80306fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80306fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030700:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8030702:	78fb      	ldrb	r3, [r7, #3]
 8030704:	f003 030f 	and.w	r3, r3, #15
 8030708:	68fa      	ldr	r2, [r7, #12]
 803070a:	fa22 f303 	lsr.w	r3, r2, r3
 803070e:	01db      	lsls	r3, r3, #7
 8030710:	b2db      	uxtb	r3, r3
 8030712:	693a      	ldr	r2, [r7, #16]
 8030714:	4313      	orrs	r3, r2
 8030716:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8030718:	78fb      	ldrb	r3, [r7, #3]
 803071a:	015a      	lsls	r2, r3, #5
 803071c:	697b      	ldr	r3, [r7, #20]
 803071e:	4413      	add	r3, r2
 8030720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8030724:	689b      	ldr	r3, [r3, #8]
 8030726:	693a      	ldr	r2, [r7, #16]
 8030728:	4013      	ands	r3, r2
 803072a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803072c:	68bb      	ldr	r3, [r7, #8]
}
 803072e:	4618      	mov	r0, r3
 8030730:	371c      	adds	r7, #28
 8030732:	46bd      	mov	sp, r7
 8030734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030738:	4770      	bx	lr

0803073a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 803073a:	b480      	push	{r7}
 803073c:	b083      	sub	sp, #12
 803073e:	af00      	add	r7, sp, #0
 8030740:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8030742:	687b      	ldr	r3, [r7, #4]
 8030744:	695b      	ldr	r3, [r3, #20]
 8030746:	f003 0301 	and.w	r3, r3, #1
}
 803074a:	4618      	mov	r0, r3
 803074c:	370c      	adds	r7, #12
 803074e:	46bd      	mov	sp, r7
 8030750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030754:	4770      	bx	lr
	...

08030758 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8030758:	b480      	push	{r7}
 803075a:	b085      	sub	sp, #20
 803075c:	af00      	add	r7, sp, #0
 803075e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030760:	687b      	ldr	r3, [r7, #4]
 8030762:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8030764:	68fb      	ldr	r3, [r7, #12]
 8030766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803076a:	681a      	ldr	r2, [r3, #0]
 803076c:	68fb      	ldr	r3, [r7, #12]
 803076e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8030772:	4619      	mov	r1, r3
 8030774:	4b09      	ldr	r3, [pc, #36]	; (803079c <USB_ActivateSetup+0x44>)
 8030776:	4013      	ands	r3, r2
 8030778:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 803077a:	68fb      	ldr	r3, [r7, #12]
 803077c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8030780:	685b      	ldr	r3, [r3, #4]
 8030782:	68fa      	ldr	r2, [r7, #12]
 8030784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8030788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803078c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803078e:	2300      	movs	r3, #0
}
 8030790:	4618      	mov	r0, r3
 8030792:	3714      	adds	r7, #20
 8030794:	46bd      	mov	sp, r7
 8030796:	f85d 7b04 	ldr.w	r7, [sp], #4
 803079a:	4770      	bx	lr
 803079c:	fffff800 	.word	0xfffff800

080307a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80307a0:	b480      	push	{r7}
 80307a2:	b087      	sub	sp, #28
 80307a4:	af00      	add	r7, sp, #0
 80307a6:	60f8      	str	r0, [r7, #12]
 80307a8:	460b      	mov	r3, r1
 80307aa:	607a      	str	r2, [r7, #4]
 80307ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80307ae:	68fb      	ldr	r3, [r7, #12]
 80307b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80307b2:	68fb      	ldr	r3, [r7, #12]
 80307b4:	333c      	adds	r3, #60	; 0x3c
 80307b6:	3304      	adds	r3, #4
 80307b8:	681b      	ldr	r3, [r3, #0]
 80307ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80307bc:	693b      	ldr	r3, [r7, #16]
 80307be:	4a26      	ldr	r2, [pc, #152]	; (8030858 <USB_EP0_OutStart+0xb8>)
 80307c0:	4293      	cmp	r3, r2
 80307c2:	d90a      	bls.n	80307da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80307c4:	697b      	ldr	r3, [r7, #20]
 80307c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80307ca:	681b      	ldr	r3, [r3, #0]
 80307cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80307d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80307d4:	d101      	bne.n	80307da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80307d6:	2300      	movs	r3, #0
 80307d8:	e037      	b.n	803084a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80307da:	697b      	ldr	r3, [r7, #20]
 80307dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80307e0:	461a      	mov	r2, r3
 80307e2:	2300      	movs	r3, #0
 80307e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80307e6:	697b      	ldr	r3, [r7, #20]
 80307e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80307ec:	691b      	ldr	r3, [r3, #16]
 80307ee:	697a      	ldr	r2, [r7, #20]
 80307f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80307f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80307f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80307fa:	697b      	ldr	r3, [r7, #20]
 80307fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030800:	691b      	ldr	r3, [r3, #16]
 8030802:	697a      	ldr	r2, [r7, #20]
 8030804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8030808:	f043 0318 	orr.w	r3, r3, #24
 803080c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 803080e:	697b      	ldr	r3, [r7, #20]
 8030810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030814:	691b      	ldr	r3, [r3, #16]
 8030816:	697a      	ldr	r2, [r7, #20]
 8030818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803081c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8030820:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8030822:	7afb      	ldrb	r3, [r7, #11]
 8030824:	2b01      	cmp	r3, #1
 8030826:	d10f      	bne.n	8030848 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8030828:	697b      	ldr	r3, [r7, #20]
 803082a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803082e:	461a      	mov	r2, r3
 8030830:	687b      	ldr	r3, [r7, #4]
 8030832:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8030834:	697b      	ldr	r3, [r7, #20]
 8030836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803083a:	681b      	ldr	r3, [r3, #0]
 803083c:	697a      	ldr	r2, [r7, #20]
 803083e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8030842:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8030846:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8030848:	2300      	movs	r3, #0
}
 803084a:	4618      	mov	r0, r3
 803084c:	371c      	adds	r7, #28
 803084e:	46bd      	mov	sp, r7
 8030850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030854:	4770      	bx	lr
 8030856:	bf00      	nop
 8030858:	4f54300a 	.word	0x4f54300a

0803085c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 803085c:	b480      	push	{r7}
 803085e:	b085      	sub	sp, #20
 8030860:	af00      	add	r7, sp, #0
 8030862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8030864:	2300      	movs	r3, #0
 8030866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8030868:	68fb      	ldr	r3, [r7, #12]
 803086a:	3301      	adds	r3, #1
 803086c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803086e:	68fb      	ldr	r3, [r7, #12]
 8030870:	4a13      	ldr	r2, [pc, #76]	; (80308c0 <USB_CoreReset+0x64>)
 8030872:	4293      	cmp	r3, r2
 8030874:	d901      	bls.n	803087a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8030876:	2303      	movs	r3, #3
 8030878:	e01b      	b.n	80308b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803087a:	687b      	ldr	r3, [r7, #4]
 803087c:	691b      	ldr	r3, [r3, #16]
 803087e:	2b00      	cmp	r3, #0
 8030880:	daf2      	bge.n	8030868 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8030882:	2300      	movs	r3, #0
 8030884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8030886:	687b      	ldr	r3, [r7, #4]
 8030888:	691b      	ldr	r3, [r3, #16]
 803088a:	f043 0201 	orr.w	r2, r3, #1
 803088e:	687b      	ldr	r3, [r7, #4]
 8030890:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8030892:	68fb      	ldr	r3, [r7, #12]
 8030894:	3301      	adds	r3, #1
 8030896:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8030898:	68fb      	ldr	r3, [r7, #12]
 803089a:	4a09      	ldr	r2, [pc, #36]	; (80308c0 <USB_CoreReset+0x64>)
 803089c:	4293      	cmp	r3, r2
 803089e:	d901      	bls.n	80308a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80308a0:	2303      	movs	r3, #3
 80308a2:	e006      	b.n	80308b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80308a4:	687b      	ldr	r3, [r7, #4]
 80308a6:	691b      	ldr	r3, [r3, #16]
 80308a8:	f003 0301 	and.w	r3, r3, #1
 80308ac:	2b01      	cmp	r3, #1
 80308ae:	d0f0      	beq.n	8030892 <USB_CoreReset+0x36>

  return HAL_OK;
 80308b0:	2300      	movs	r3, #0
}
 80308b2:	4618      	mov	r0, r3
 80308b4:	3714      	adds	r7, #20
 80308b6:	46bd      	mov	sp, r7
 80308b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80308bc:	4770      	bx	lr
 80308be:	bf00      	nop
 80308c0:	00030d40 	.word	0x00030d40

080308c4 <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 80308c4:	b480      	push	{r7}
 80308c6:	b083      	sub	sp, #12
 80308c8:	af00      	add	r7, sp, #0
 80308ca:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 80308cc:	4a04      	ldr	r2, [pc, #16]	; (80308e0 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 80308ce:	687b      	ldr	r3, [r7, #4]
 80308d0:	6013      	str	r3, [r2, #0]
}
 80308d2:	bf00      	nop
 80308d4:	370c      	adds	r7, #12
 80308d6:	46bd      	mov	sp, r7
 80308d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80308dc:	4770      	bx	lr
 80308de:	bf00      	nop
 80308e0:	24000834 	.word	0x24000834

080308e4 <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 80308e4:	b580      	push	{r7, lr}
 80308e6:	b082      	sub	sp, #8
 80308e8:	af00      	add	r7, sp, #0
 80308ea:	6078      	str	r0, [r7, #4]
 80308ec:	460b      	mov	r3, r1
 80308ee:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 80308f0:	4b11      	ldr	r3, [pc, #68]	; (8030938 <_Z11spiTransmitPht+0x54>)
 80308f2:	681b      	ldr	r3, [r3, #0]
 80308f4:	887a      	ldrh	r2, [r7, #2]
 80308f6:	6879      	ldr	r1, [r7, #4]
 80308f8:	4618      	mov	r0, r3
 80308fa:	f7f9 ffb1 	bl	802a860 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 80308fe:	4b0e      	ldr	r3, [pc, #56]	; (8030938 <_Z11spiTransmitPht+0x54>)
 8030900:	681b      	ldr	r3, [r3, #0]
 8030902:	4618      	mov	r0, r3
 8030904:	f7fa fe3a 	bl	802b57c <HAL_SPI_GetState>
 8030908:	4603      	mov	r3, r0
 803090a:	2b01      	cmp	r3, #1
 803090c:	bf14      	ite	ne
 803090e:	2301      	movne	r3, #1
 8030910:	2300      	moveq	r3, #0
 8030912:	b2db      	uxtb	r3, r3
 8030914:	2b00      	cmp	r3, #0
 8030916:	d000      	beq.n	803091a <_Z11spiTransmitPht+0x36>
 8030918:	e7f1      	b.n	80308fe <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 803091a:	4b07      	ldr	r3, [pc, #28]	; (8030938 <_Z11spiTransmitPht+0x54>)
 803091c:	681b      	ldr	r3, [r3, #0]
 803091e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8030922:	2b00      	cmp	r3, #0
 8030924:	bf0c      	ite	eq
 8030926:	2301      	moveq	r3, #1
 8030928:	2300      	movne	r3, #0
 803092a:	b2db      	uxtb	r3, r3
 803092c:	b25b      	sxtb	r3, r3
  }
 803092e:	4618      	mov	r0, r3
 8030930:	3708      	adds	r7, #8
 8030932:	46bd      	mov	sp, r7
 8030934:	bd80      	pop	{r7, pc}
 8030936:	bf00      	nop
 8030938:	24000834 	.word	0x24000834

0803093c <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 803093c:	b580      	push	{r7, lr}
 803093e:	b082      	sub	sp, #8
 8030940:	af00      	add	r7, sp, #0
 8030942:	6078      	str	r0, [r7, #4]
 8030944:	460b      	mov	r3, r1
 8030946:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8030948:	4b11      	ldr	r3, [pc, #68]	; (8030990 <_Z9spiReceivPht+0x54>)
 803094a:	681b      	ldr	r3, [r3, #0]
 803094c:	887a      	ldrh	r2, [r7, #2]
 803094e:	6879      	ldr	r1, [r7, #4]
 8030950:	4618      	mov	r0, r3
 8030952:	f7fa f8cf 	bl	802aaf4 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8030956:	4b0e      	ldr	r3, [pc, #56]	; (8030990 <_Z9spiReceivPht+0x54>)
 8030958:	681b      	ldr	r3, [r3, #0]
 803095a:	4618      	mov	r0, r3
 803095c:	f7fa fe0e 	bl	802b57c <HAL_SPI_GetState>
 8030960:	4603      	mov	r3, r0
 8030962:	2b01      	cmp	r3, #1
 8030964:	bf14      	ite	ne
 8030966:	2301      	movne	r3, #1
 8030968:	2300      	moveq	r3, #0
 803096a:	b2db      	uxtb	r3, r3
 803096c:	2b00      	cmp	r3, #0
 803096e:	d000      	beq.n	8030972 <_Z9spiReceivPht+0x36>
 8030970:	e7f1      	b.n	8030956 <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8030972:	4b07      	ldr	r3, [pc, #28]	; (8030990 <_Z9spiReceivPht+0x54>)
 8030974:	681b      	ldr	r3, [r3, #0]
 8030976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803097a:	2b00      	cmp	r3, #0
 803097c:	bf0c      	ite	eq
 803097e:	2301      	moveq	r3, #1
 8030980:	2300      	movne	r3, #0
 8030982:	b2db      	uxtb	r3, r3
 8030984:	b25b      	sxtb	r3, r3
  }
 8030986:	4618      	mov	r0, r3
 8030988:	3708      	adds	r7, #8
 803098a:	46bd      	mov	sp, r7
 803098c:	bd80      	pop	{r7, pc}
 803098e:	bf00      	nop
 8030990:	24000834 	.word	0x24000834

08030994 <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8030994:	b580      	push	{r7, lr}
 8030996:	b084      	sub	sp, #16
 8030998:	af00      	add	r7, sp, #0
 803099a:	60b9      	str	r1, [r7, #8]
 803099c:	607a      	str	r2, [r7, #4]
 803099e:	603b      	str	r3, [r7, #0]
 80309a0:	4603      	mov	r3, r0
 80309a2:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 80309a4:	4b19      	ldr	r3, [pc, #100]	; (8030a0c <_Z13bhy2_spi_readhPhmPv+0x78>)
 80309a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80309aa:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 80309ac:	f107 030f 	add.w	r3, r7, #15
 80309b0:	2101      	movs	r1, #1
 80309b2:	4618      	mov	r0, r3
 80309b4:	f7ff ff96 	bl	80308e4 <_Z11spiTransmitPht>
 80309b8:	4603      	mov	r3, r0
 80309ba:	2b00      	cmp	r3, #0
 80309bc:	bf0c      	ite	eq
 80309be:	2301      	moveq	r3, #1
 80309c0:	2300      	movne	r3, #0
 80309c2:	b2db      	uxtb	r3, r3
 80309c4:	2b00      	cmp	r3, #0
 80309c6:	d002      	beq.n	80309ce <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 80309c8:	f06f 0301 	mvn.w	r3, #1
 80309cc:	e019      	b.n	8030a02 <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 80309ce:	687b      	ldr	r3, [r7, #4]
 80309d0:	b29b      	uxth	r3, r3
 80309d2:	4619      	mov	r1, r3
 80309d4:	68b8      	ldr	r0, [r7, #8]
 80309d6:	f7ff ffb1 	bl	803093c <_Z9spiReceivPht>
 80309da:	4603      	mov	r3, r0
 80309dc:	2b00      	cmp	r3, #0
 80309de:	bf14      	ite	ne
 80309e0:	2301      	movne	r3, #1
 80309e2:	2300      	moveq	r3, #0
 80309e4:	b2db      	uxtb	r3, r3
 80309e6:	2b00      	cmp	r3, #0
 80309e8:	d005      	beq.n	80309f6 <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 80309ea:	4b08      	ldr	r3, [pc, #32]	; (8030a0c <_Z13bhy2_spi_readhPhmPv+0x78>)
 80309ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80309f0:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 80309f2:	2300      	movs	r3, #0
 80309f4:	e005      	b.n	8030a02 <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 80309f6:	4b05      	ldr	r3, [pc, #20]	; (8030a0c <_Z13bhy2_spi_readhPhmPv+0x78>)
 80309f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80309fc:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 80309fe:	f06f 0301 	mvn.w	r3, #1
  }
 8030a02:	4618      	mov	r0, r3
 8030a04:	3710      	adds	r7, #16
 8030a06:	46bd      	mov	sp, r7
 8030a08:	bd80      	pop	{r7, pc}
 8030a0a:	bf00      	nop
 8030a0c:	58021000 	.word	0x58021000

08030a10 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8030a10:	b580      	push	{r7, lr}
 8030a12:	b084      	sub	sp, #16
 8030a14:	af00      	add	r7, sp, #0
 8030a16:	60b9      	str	r1, [r7, #8]
 8030a18:	607a      	str	r2, [r7, #4]
 8030a1a:	603b      	str	r3, [r7, #0]
 8030a1c:	4603      	mov	r3, r0
 8030a1e:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8030a20:	687b      	ldr	r3, [r7, #4]
 8030a22:	2b40      	cmp	r3, #64	; 0x40
 8030a24:	d902      	bls.n	8030a2c <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8030a26:	f06f 0303 	mvn.w	r3, #3
 8030a2a:	e028      	b.n	8030a7e <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8030a2c:	4a16      	ldr	r2, [pc, #88]	; (8030a88 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8030a2e:	7bfb      	ldrb	r3, [r7, #15]
 8030a30:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8030a32:	4b16      	ldr	r3, [pc, #88]	; (8030a8c <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8030a34:	687a      	ldr	r2, [r7, #4]
 8030a36:	68b9      	ldr	r1, [r7, #8]
 8030a38:	4618      	mov	r0, r3
 8030a3a:	f00b f925 	bl	803bc88 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8030a3e:	4b14      	ldr	r3, [pc, #80]	; (8030a90 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8030a40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8030a44:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8030a46:	687b      	ldr	r3, [r7, #4]
 8030a48:	b29b      	uxth	r3, r3
 8030a4a:	3301      	adds	r3, #1
 8030a4c:	b29b      	uxth	r3, r3
 8030a4e:	4619      	mov	r1, r3
 8030a50:	480d      	ldr	r0, [pc, #52]	; (8030a88 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8030a52:	f7ff ff47 	bl	80308e4 <_Z11spiTransmitPht>
 8030a56:	4603      	mov	r3, r0
 8030a58:	2b00      	cmp	r3, #0
 8030a5a:	bf14      	ite	ne
 8030a5c:	2301      	movne	r3, #1
 8030a5e:	2300      	moveq	r3, #0
 8030a60:	b2db      	uxtb	r3, r3
 8030a62:	2b00      	cmp	r3, #0
 8030a64:	d005      	beq.n	8030a72 <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8030a66:	4b0a      	ldr	r3, [pc, #40]	; (8030a90 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8030a68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8030a6c:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8030a6e:	2300      	movs	r3, #0
 8030a70:	e005      	b.n	8030a7e <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8030a72:	4b07      	ldr	r3, [pc, #28]	; (8030a90 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8030a74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8030a78:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8030a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8030a7e:	4618      	mov	r0, r3
 8030a80:	3710      	adds	r7, #16
 8030a82:	46bd      	mov	sp, r7
 8030a84:	bd80      	pop	{r7, pc}
 8030a86:	bf00      	nop
 8030a88:	24000838 	.word	0x24000838
 8030a8c:	24000839 	.word	0x24000839
 8030a90:	58021000 	.word	0x58021000

08030a94 <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8030a94:	b580      	push	{r7, lr}
 8030a96:	b082      	sub	sp, #8
 8030a98:	af00      	add	r7, sp, #0
 8030a9a:	6078      	str	r0, [r7, #4]
 8030a9c:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8030a9e:	687b      	ldr	r3, [r7, #4]
 8030aa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8030aa4:	d308      	bcc.n	8030ab8 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8030aa6:	687b      	ldr	r3, [r7, #4]
 8030aa8:	4a0b      	ldr	r2, [pc, #44]	; (8030ad8 <_Z13bhy2_delay_usmPv+0x44>)
 8030aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8030aae:	099b      	lsrs	r3, r3, #6
 8030ab0:	4618      	mov	r0, r3
 8030ab2:	f7f1 fad1 	bl	8022058 <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8030ab6:	e00b      	b.n	8030ad0 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8030ab8:	687b      	ldr	r3, [r7, #4]
 8030aba:	1e5a      	subs	r2, r3, #1
 8030abc:	607a      	str	r2, [r7, #4]
 8030abe:	2b00      	cmp	r3, #0
 8030ac0:	bf14      	ite	ne
 8030ac2:	2301      	movne	r3, #1
 8030ac4:	2300      	moveq	r3, #0
 8030ac6:	b2db      	uxtb	r3, r3
 8030ac8:	2b00      	cmp	r3, #0
 8030aca:	d001      	beq.n	8030ad0 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8030acc:	bf00      	nop
    while( us-- ) {
 8030ace:	e7f3      	b.n	8030ab8 <_Z13bhy2_delay_usmPv+0x24>
  }
 8030ad0:	bf00      	nop
 8030ad2:	3708      	adds	r7, #8
 8030ad4:	46bd      	mov	sp, r7
 8030ad6:	bd80      	pop	{r7, pc}
 8030ad8:	10624dd3 	.word	0x10624dd3

08030adc <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 8030adc:	b580      	push	{r7, lr}
 8030ade:	b086      	sub	sp, #24
 8030ae0:	af00      	add	r7, sp, #0
 8030ae2:	60b9      	str	r1, [r7, #8]
 8030ae4:	607b      	str	r3, [r7, #4]
 8030ae6:	4603      	mov	r3, r0
 8030ae8:	73fb      	strb	r3, [r7, #15]
 8030aea:	4613      	mov	r3, r2
 8030aec:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 8030aee:	2300      	movs	r3, #0
 8030af0:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8030af2:	687b      	ldr	r3, [r7, #4]
 8030af4:	2b00      	cmp	r3, #0
 8030af6:	d008      	beq.n	8030b0a <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 8030af8:	89ba      	ldrh	r2, [r7, #12]
 8030afa:	687b      	ldr	r3, [r7, #4]
 8030afc:	7bf8      	ldrb	r0, [r7, #15]
 8030afe:	68b9      	ldr	r1, [r7, #8]
 8030b00:	f001 f925 	bl	8031d4e <bhy2_hif_get_regs>
 8030b04:	4603      	mov	r3, r0
 8030b06:	75fb      	strb	r3, [r7, #23]
 8030b08:	e001      	b.n	8030b0e <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8030b0a:	23ff      	movs	r3, #255	; 0xff
 8030b0c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8030b0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8030b12:	4618      	mov	r0, r3
 8030b14:	3718      	adds	r7, #24
 8030b16:	46bd      	mov	sp, r7
 8030b18:	bd80      	pop	{r7, pc}

08030b1a <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 8030b1a:	b590      	push	{r4, r7, lr}
 8030b1c:	b08f      	sub	sp, #60	; 0x3c
 8030b1e:	af02      	add	r7, sp, #8
 8030b20:	60f8      	str	r0, [r7, #12]
 8030b22:	60b9      	str	r1, [r7, #8]
 8030b24:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 8030b26:	2300      	movs	r3, #0
 8030b28:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 8030b2a:	687b      	ldr	r3, [r7, #4]
 8030b2c:	2b00      	cmp	r3, #0
 8030b2e:	d002      	beq.n	8030b36 <bhy2_get_and_process_fifo+0x1c>
 8030b30:	68fb      	ldr	r3, [r7, #12]
 8030b32:	2b00      	cmp	r3, #0
 8030b34:	d102      	bne.n	8030b3c <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 8030b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8030b3a:	e11b      	b.n	8030d74 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 8030b3c:	68bb      	ldr	r3, [r7, #8]
 8030b3e:	2b00      	cmp	r3, #0
 8030b40:	d102      	bne.n	8030b48 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 8030b42:	f06f 0305 	mvn.w	r3, #5
 8030b46:	e115      	b.n	8030d74 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 8030b48:	68ba      	ldr	r2, [r7, #8]
 8030b4a:	2100      	movs	r1, #0
 8030b4c:	68f8      	ldr	r0, [r7, #12]
 8030b4e:	f00b f8c3 	bl	803bcd8 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 8030b52:	f107 0314 	add.w	r3, r7, #20
 8030b56:	2214      	movs	r2, #20
 8030b58:	2100      	movs	r1, #0
 8030b5a:	4618      	mov	r0, r3
 8030b5c:	f00b f8bc 	bl	803bcd8 <memset>

    fifos.buffer = work_buffer;
 8030b60:	68fb      	ldr	r3, [r7, #12]
 8030b62:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 8030b64:	68bb      	ldr	r3, [r7, #8]
 8030b66:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 8030b68:	687a      	ldr	r2, [r7, #4]
 8030b6a:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8030b6e:	4611      	mov	r1, r2
 8030b70:	4618      	mov	r0, r3
 8030b72:	f001 fa5f 	bl	8032034 <bhy2_hif_get_interrupt_status>
 8030b76:	4603      	mov	r3, r0
 8030b78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 8030b7c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8030b80:	2b00      	cmp	r3, #0
 8030b82:	d002      	beq.n	8030b8a <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 8030b84:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8030b88:	e0f4      	b.n	8030d74 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 8030b8a:	2300      	movs	r3, #0
 8030b8c:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8030b8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8030b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8030b96:	e042      	b.n	8030c1e <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8030b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8030b9c:	f003 0306 	and.w	r3, r3, #6
 8030ba0:	2b02      	cmp	r3, #2
 8030ba2:	d00e      	beq.n	8030bc2 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8030ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8030ba8:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8030bac:	2b04      	cmp	r3, #4
 8030bae:	d008      	beq.n	8030bc2 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8030bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8030bb4:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8030bb8:	2b06      	cmp	r3, #6
 8030bba:	d002      	beq.n	8030bc2 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8030bbc:	69fb      	ldr	r3, [r7, #28]
 8030bbe:	2b00      	cmp	r3, #0
 8030bc0:	d020      	beq.n	8030c04 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8030bc2:	2300      	movs	r3, #0
 8030bc4:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8030bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030bc8:	69bb      	ldr	r3, [r7, #24]
 8030bca:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 8030bcc:	6a3a      	ldr	r2, [r7, #32]
 8030bce:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8030bd0:	1ad1      	subs	r1, r2, r3
 8030bd2:	687b      	ldr	r3, [r7, #4]
 8030bd4:	f107 0214 	add.w	r2, r7, #20
 8030bd8:	f102 0408 	add.w	r4, r2, #8
 8030bdc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8030be0:	9300      	str	r3, [sp, #0]
 8030be2:	4623      	mov	r3, r4
 8030be4:	f001 fad7 	bl	8032196 <bhy2_hif_get_wakeup_fifo>
 8030be8:	4603      	mov	r3, r0
 8030bea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 8030bee:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8030bf2:	2b00      	cmp	r3, #0
 8030bf4:	d002      	beq.n	8030bfc <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 8030bf6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8030bfa:	e0bb      	b.n	8030d74 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8030bfc:	69ba      	ldr	r2, [r7, #24]
 8030bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030c00:	4413      	add	r3, r2
 8030c02:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 8030c04:	f107 0314 	add.w	r3, r7, #20
 8030c08:	687a      	ldr	r2, [r7, #4]
 8030c0a:	4619      	mov	r1, r3
 8030c0c:	2000      	movs	r0, #0
 8030c0e:	f000 fbad 	bl	803136c <parse_fifo>
 8030c12:	4603      	mov	r3, r0
 8030c14:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8030c18:	2300      	movs	r3, #0
 8030c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8030c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8030c22:	2b00      	cmp	r3, #0
 8030c24:	d102      	bne.n	8030c2c <bhy2_get_and_process_fifo+0x112>
 8030c26:	69fb      	ldr	r3, [r7, #28]
 8030c28:	2b00      	cmp	r3, #0
 8030c2a:	d003      	beq.n	8030c34 <bhy2_get_and_process_fifo+0x11a>
 8030c2c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8030c30:	2b00      	cmp	r3, #0
 8030c32:	d0b1      	beq.n	8030b98 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 8030c34:	2300      	movs	r3, #0
 8030c36:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8030c38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8030c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8030c40:	e042      	b.n	8030cc8 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8030c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8030c46:	f003 0318 	and.w	r3, r3, #24
 8030c4a:	2b08      	cmp	r3, #8
 8030c4c:	d00e      	beq.n	8030c6c <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8030c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8030c52:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8030c56:	2b10      	cmp	r3, #16
 8030c58:	d008      	beq.n	8030c6c <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8030c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8030c5e:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8030c62:	2b18      	cmp	r3, #24
 8030c64:	d002      	beq.n	8030c6c <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8030c66:	69fb      	ldr	r3, [r7, #28]
 8030c68:	2b00      	cmp	r3, #0
 8030c6a:	d020      	beq.n	8030cae <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8030c6c:	2300      	movs	r3, #0
 8030c6e:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8030c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030c72:	69bb      	ldr	r3, [r7, #24]
 8030c74:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8030c76:	6a3a      	ldr	r2, [r7, #32]
 8030c78:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8030c7a:	1ad1      	subs	r1, r2, r3
 8030c7c:	687b      	ldr	r3, [r7, #4]
 8030c7e:	f107 0214 	add.w	r2, r7, #20
 8030c82:	f102 0408 	add.w	r4, r2, #8
 8030c86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8030c8a:	9300      	str	r3, [sp, #0]
 8030c8c:	4623      	mov	r3, r4
 8030c8e:	f001 fa98 	bl	80321c2 <bhy2_hif_get_nonwakeup_fifo>
 8030c92:	4603      	mov	r3, r0
 8030c94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8030c98:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8030c9c:	2b00      	cmp	r3, #0
 8030c9e:	d002      	beq.n	8030ca6 <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8030ca0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8030ca4:	e066      	b.n	8030d74 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8030ca6:	69ba      	ldr	r2, [r7, #24]
 8030ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030caa:	4413      	add	r3, r2
 8030cac:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 8030cae:	f107 0314 	add.w	r3, r7, #20
 8030cb2:	687a      	ldr	r2, [r7, #4]
 8030cb4:	4619      	mov	r1, r3
 8030cb6:	2001      	movs	r0, #1
 8030cb8:	f000 fb58 	bl	803136c <parse_fifo>
 8030cbc:	4603      	mov	r3, r0
 8030cbe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8030cc2:	2300      	movs	r3, #0
 8030cc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8030cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8030ccc:	2b00      	cmp	r3, #0
 8030cce:	d102      	bne.n	8030cd6 <bhy2_get_and_process_fifo+0x1bc>
 8030cd0:	69fb      	ldr	r3, [r7, #28]
 8030cd2:	2b00      	cmp	r3, #0
 8030cd4:	d003      	beq.n	8030cde <bhy2_get_and_process_fifo+0x1c4>
 8030cd6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8030cda:	2b00      	cmp	r3, #0
 8030cdc:	d0b1      	beq.n	8030c42 <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 8030cde:	2300      	movs	r3, #0
 8030ce0:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8030ce2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8030ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8030cea:	e036      	b.n	8030d5a <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8030cec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8030cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8030cf4:	2b00      	cmp	r3, #0
 8030cf6:	d102      	bne.n	8030cfe <bhy2_get_and_process_fifo+0x1e4>
 8030cf8:	69fb      	ldr	r3, [r7, #28]
 8030cfa:	2b00      	cmp	r3, #0
 8030cfc:	d020      	beq.n	8030d40 <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8030cfe:	2300      	movs	r3, #0
 8030d00:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8030d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030d04:	69bb      	ldr	r3, [r7, #24]
 8030d06:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8030d08:	6a3a      	ldr	r2, [r7, #32]
 8030d0a:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8030d0c:	1ad1      	subs	r1, r2, r3
 8030d0e:	687b      	ldr	r3, [r7, #4]
 8030d10:	f107 0214 	add.w	r2, r7, #20
 8030d14:	f102 0408 	add.w	r4, r2, #8
 8030d18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8030d1c:	9300      	str	r3, [sp, #0]
 8030d1e:	4623      	mov	r3, r4
 8030d20:	f001 fab0 	bl	8032284 <bhy2_hif_get_status_fifo_async>
 8030d24:	4603      	mov	r3, r0
 8030d26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8030d2a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8030d2e:	2b00      	cmp	r3, #0
 8030d30:	d002      	beq.n	8030d38 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8030d32:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8030d36:	e01d      	b.n	8030d74 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8030d38:	69ba      	ldr	r2, [r7, #24]
 8030d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030d3c:	4413      	add	r3, r2
 8030d3e:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8030d40:	f107 0314 	add.w	r3, r7, #20
 8030d44:	687a      	ldr	r2, [r7, #4]
 8030d46:	4619      	mov	r1, r3
 8030d48:	2002      	movs	r0, #2
 8030d4a:	f000 fb0f 	bl	803136c <parse_fifo>
 8030d4e:	4603      	mov	r3, r0
 8030d50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8030d54:	2300      	movs	r3, #0
 8030d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8030d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8030d5e:	2b00      	cmp	r3, #0
 8030d60:	d102      	bne.n	8030d68 <bhy2_get_and_process_fifo+0x24e>
 8030d62:	69fb      	ldr	r3, [r7, #28]
 8030d64:	2b00      	cmp	r3, #0
 8030d66:	d003      	beq.n	8030d70 <bhy2_get_and_process_fifo+0x256>
 8030d68:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8030d6c:	2b00      	cmp	r3, #0
 8030d6e:	d0bd      	beq.n	8030cec <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8030d70:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8030d74:	4618      	mov	r0, r3
 8030d76:	3734      	adds	r7, #52	; 0x34
 8030d78:	46bd      	mov	sp, r7
 8030d7a:	bd90      	pop	{r4, r7, pc}

08030d7c <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8030d7c:	b580      	push	{r7, lr}
 8030d7e:	b086      	sub	sp, #24
 8030d80:	af00      	add	r7, sp, #0
 8030d82:	4603      	mov	r3, r0
 8030d84:	ed87 0a02 	vstr	s0, [r7, #8]
 8030d88:	6079      	str	r1, [r7, #4]
 8030d8a:	603a      	str	r2, [r7, #0]
 8030d8c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8030d8e:	2300      	movs	r3, #0
 8030d90:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8030d92:	683b      	ldr	r3, [r7, #0]
 8030d94:	2b00      	cmp	r3, #0
 8030d96:	d00a      	beq.n	8030dae <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8030d98:	683a      	ldr	r2, [r7, #0]
 8030d9a:	7bfb      	ldrb	r3, [r7, #15]
 8030d9c:	6879      	ldr	r1, [r7, #4]
 8030d9e:	ed97 0a02 	vldr	s0, [r7, #8]
 8030da2:	4618      	mov	r0, r3
 8030da4:	f001 fa84 	bl	80322b0 <bhy2_hif_exec_sensor_conf_cmd>
 8030da8:	4603      	mov	r3, r0
 8030daa:	75fb      	strb	r3, [r7, #23]
 8030dac:	e001      	b.n	8030db2 <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8030dae:	23ff      	movs	r3, #255	; 0xff
 8030db0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8030db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8030db6:	4618      	mov	r0, r3
 8030db8:	3718      	adds	r7, #24
 8030dba:	46bd      	mov	sp, r7
 8030dbc:	bd80      	pop	{r7, pc}

08030dbe <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8030dbe:	b580      	push	{r7, lr}
 8030dc0:	b084      	sub	sp, #16
 8030dc2:	af00      	add	r7, sp, #0
 8030dc4:	6078      	str	r0, [r7, #4]
 8030dc6:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8030dc8:	2300      	movs	r3, #0
 8030dca:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8030dcc:	683b      	ldr	r3, [r7, #0]
 8030dce:	2b00      	cmp	r3, #0
 8030dd0:	d007      	beq.n	8030de2 <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8030dd2:	683b      	ldr	r3, [r7, #0]
 8030dd4:	4619      	mov	r1, r3
 8030dd6:	6878      	ldr	r0, [r7, #4]
 8030dd8:	f001 f8e8 	bl	8031fac <bhy2_hif_get_product_id>
 8030ddc:	4603      	mov	r3, r0
 8030dde:	73fb      	strb	r3, [r7, #15]
 8030de0:	e001      	b.n	8030de6 <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8030de2:	23ff      	movs	r3, #255	; 0xff
 8030de4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8030de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8030dea:	4618      	mov	r0, r3
 8030dec:	3710      	adds	r7, #16
 8030dee:	46bd      	mov	sp, r7
 8030df0:	bd80      	pop	{r7, pc}

08030df2 <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8030df2:	b580      	push	{r7, lr}
 8030df4:	b084      	sub	sp, #16
 8030df6:	af00      	add	r7, sp, #0
 8030df8:	6078      	str	r0, [r7, #4]
 8030dfa:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8030dfc:	2300      	movs	r3, #0
 8030dfe:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8030e00:	683b      	ldr	r3, [r7, #0]
 8030e02:	2b00      	cmp	r3, #0
 8030e04:	d007      	beq.n	8030e16 <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8030e06:	683b      	ldr	r3, [r7, #0]
 8030e08:	4619      	mov	r1, r3
 8030e0a:	6878      	ldr	r0, [r7, #4]
 8030e0c:	f001 f8de 	bl	8031fcc <bhy2_hif_get_kernel_version>
 8030e10:	4603      	mov	r3, r0
 8030e12:	73fb      	strb	r3, [r7, #15]
 8030e14:	e001      	b.n	8030e1a <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8030e16:	23ff      	movs	r3, #255	; 0xff
 8030e18:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8030e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8030e1e:	4618      	mov	r0, r3
 8030e20:	3710      	adds	r7, #16
 8030e22:	46bd      	mov	sp, r7
 8030e24:	bd80      	pop	{r7, pc}

08030e26 <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8030e26:	b580      	push	{r7, lr}
 8030e28:	b084      	sub	sp, #16
 8030e2a:	af00      	add	r7, sp, #0
 8030e2c:	6078      	str	r0, [r7, #4]
 8030e2e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8030e30:	2300      	movs	r3, #0
 8030e32:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8030e34:	683b      	ldr	r3, [r7, #0]
 8030e36:	2b00      	cmp	r3, #0
 8030e38:	d007      	beq.n	8030e4a <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8030e3a:	683b      	ldr	r3, [r7, #0]
 8030e3c:	4619      	mov	r1, r3
 8030e3e:	6878      	ldr	r0, [r7, #4]
 8030e40:	f001 f8e8 	bl	8032014 <bhy2_hif_get_boot_status>
 8030e44:	4603      	mov	r3, r0
 8030e46:	73fb      	strb	r3, [r7, #15]
 8030e48:	e001      	b.n	8030e4e <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8030e4a:	23ff      	movs	r3, #255	; 0xff
 8030e4c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8030e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8030e52:	4618      	mov	r0, r3
 8030e54:	3710      	adds	r7, #16
 8030e56:	46bd      	mov	sp, r7
 8030e58:	bd80      	pop	{r7, pc}

08030e5a <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8030e5a:	b580      	push	{r7, lr}
 8030e5c:	b086      	sub	sp, #24
 8030e5e:	af02      	add	r7, sp, #8
 8030e60:	6078      	str	r0, [r7, #4]
 8030e62:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8030e64:	2300      	movs	r3, #0
 8030e66:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8030e68:	2300      	movs	r3, #0
 8030e6a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8030e6c:	683b      	ldr	r3, [r7, #0]
 8030e6e:	2b00      	cmp	r3, #0
 8030e70:	d00d      	beq.n	8030e8e <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8030e72:	683b      	ldr	r3, [r7, #0]
 8030e74:	f107 0208 	add.w	r2, r7, #8
 8030e78:	9300      	str	r3, [sp, #0]
 8030e7a:	4613      	mov	r3, r2
 8030e7c:	2220      	movs	r2, #32
 8030e7e:	6879      	ldr	r1, [r7, #4]
 8030e80:	f240 101f 	movw	r0, #287	; 0x11f
 8030e84:	f001 f80a 	bl	8031e9c <bhy2_hif_get_parameter>
 8030e88:	4603      	mov	r3, r0
 8030e8a:	73fb      	strb	r3, [r7, #15]
 8030e8c:	e001      	b.n	8030e92 <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8030e8e:	23ff      	movs	r3, #255	; 0xff
 8030e90:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8030e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8030e96:	4618      	mov	r0, r3
 8030e98:	3710      	adds	r7, #16
 8030e9a:	46bd      	mov	sp, r7
 8030e9c:	bd80      	pop	{r7, pc}

08030e9e <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8030e9e:	b580      	push	{r7, lr}
 8030ea0:	b086      	sub	sp, #24
 8030ea2:	af00      	add	r7, sp, #0
 8030ea4:	60f8      	str	r0, [r7, #12]
 8030ea6:	60b9      	str	r1, [r7, #8]
 8030ea8:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8030eaa:	2300      	movs	r3, #0
 8030eac:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8030eae:	687b      	ldr	r3, [r7, #4]
 8030eb0:	2b00      	cmp	r3, #0
 8030eb2:	d002      	beq.n	8030eba <bhy2_upload_firmware_to_ram+0x1c>
 8030eb4:	68fb      	ldr	r3, [r7, #12]
 8030eb6:	2b00      	cmp	r3, #0
 8030eb8:	d102      	bne.n	8030ec0 <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8030eba:	23ff      	movs	r3, #255	; 0xff
 8030ebc:	75fb      	strb	r3, [r7, #23]
 8030ebe:	e007      	b.n	8030ed0 <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8030ec0:	687b      	ldr	r3, [r7, #4]
 8030ec2:	461a      	mov	r2, r3
 8030ec4:	68b9      	ldr	r1, [r7, #8]
 8030ec6:	68f8      	ldr	r0, [r7, #12]
 8030ec8:	f001 f90d 	bl	80320e6 <bhy2_hif_upload_firmware_to_ram>
 8030ecc:	4603      	mov	r3, r0
 8030ece:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8030ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8030ed4:	4618      	mov	r0, r3
 8030ed6:	3718      	adds	r7, #24
 8030ed8:	46bd      	mov	sp, r7
 8030eda:	bd80      	pop	{r7, pc}

08030edc <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8030edc:	b580      	push	{r7, lr}
 8030ede:	b084      	sub	sp, #16
 8030ee0:	af00      	add	r7, sp, #0
 8030ee2:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8030ee4:	2300      	movs	r3, #0
 8030ee6:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8030ee8:	687b      	ldr	r3, [r7, #4]
 8030eea:	2b00      	cmp	r3, #0
 8030eec:	d102      	bne.n	8030ef4 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8030eee:	23ff      	movs	r3, #255	; 0xff
 8030ef0:	73fb      	strb	r3, [r7, #15]
 8030ef2:	e005      	b.n	8030f00 <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8030ef4:	687b      	ldr	r3, [r7, #4]
 8030ef6:	4618      	mov	r0, r3
 8030ef8:	f001 f932 	bl	8032160 <bhy2_hif_boot_program_ram>
 8030efc:	4603      	mov	r3, r0
 8030efe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8030f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8030f04:	4618      	mov	r0, r3
 8030f06:	3710      	adds	r7, #16
 8030f08:	46bd      	mov	sp, r7
 8030f0a:	bd80      	pop	{r7, pc}

08030f0c <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8030f0c:	b580      	push	{r7, lr}
 8030f0e:	b084      	sub	sp, #16
 8030f10:	af00      	add	r7, sp, #0
 8030f12:	4603      	mov	r3, r0
 8030f14:	6039      	str	r1, [r7, #0]
 8030f16:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8030f18:	2300      	movs	r3, #0
 8030f1a:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8030f1c:	683b      	ldr	r3, [r7, #0]
 8030f1e:	2b00      	cmp	r3, #0
 8030f20:	d102      	bne.n	8030f28 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8030f22:	23ff      	movs	r3, #255	; 0xff
 8030f24:	73fb      	strb	r3, [r7, #15]
 8030f26:	e007      	b.n	8030f38 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8030f28:	683b      	ldr	r3, [r7, #0]
 8030f2a:	1df9      	adds	r1, r7, #7
 8030f2c:	2201      	movs	r2, #1
 8030f2e:	2007      	movs	r0, #7
 8030f30:	f000 ff45 	bl	8031dbe <bhy2_hif_set_regs>
 8030f34:	4603      	mov	r3, r0
 8030f36:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8030f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8030f3c:	4618      	mov	r0, r3
 8030f3e:	3710      	adds	r7, #16
 8030f40:	46bd      	mov	sp, r7
 8030f42:	bd80      	pop	{r7, pc}

08030f44 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8030f44:	b580      	push	{r7, lr}
 8030f46:	b084      	sub	sp, #16
 8030f48:	af00      	add	r7, sp, #0
 8030f4a:	6078      	str	r0, [r7, #4]
 8030f4c:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8030f4e:	2300      	movs	r3, #0
 8030f50:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8030f52:	683b      	ldr	r3, [r7, #0]
 8030f54:	2b00      	cmp	r3, #0
 8030f56:	d102      	bne.n	8030f5e <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8030f58:	23ff      	movs	r3, #255	; 0xff
 8030f5a:	73fb      	strb	r3, [r7, #15]
 8030f5c:	e007      	b.n	8030f6e <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8030f5e:	683b      	ldr	r3, [r7, #0]
 8030f60:	2201      	movs	r2, #1
 8030f62:	6879      	ldr	r1, [r7, #4]
 8030f64:	2007      	movs	r0, #7
 8030f66:	f000 fef2 	bl	8031d4e <bhy2_hif_get_regs>
 8030f6a:	4603      	mov	r3, r0
 8030f6c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8030f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8030f72:	4618      	mov	r0, r3
 8030f74:	3710      	adds	r7, #16
 8030f76:	46bd      	mov	sp, r7
 8030f78:	bd80      	pop	{r7, pc}

08030f7a <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8030f7a:	b580      	push	{r7, lr}
 8030f7c:	b084      	sub	sp, #16
 8030f7e:	af00      	add	r7, sp, #0
 8030f80:	6078      	str	r0, [r7, #4]
 8030f82:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8030f84:	2300      	movs	r3, #0
 8030f86:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8030f88:	683b      	ldr	r3, [r7, #0]
 8030f8a:	2b00      	cmp	r3, #0
 8030f8c:	d102      	bne.n	8030f94 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8030f8e:	23ff      	movs	r3, #255	; 0xff
 8030f90:	73fb      	strb	r3, [r7, #15]
 8030f92:	e006      	b.n	8030fa2 <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8030f94:	683b      	ldr	r3, [r7, #0]
 8030f96:	4619      	mov	r1, r3
 8030f98:	6878      	ldr	r0, [r7, #4]
 8030f9a:	f001 f84b 	bl	8032034 <bhy2_hif_get_interrupt_status>
 8030f9e:	4603      	mov	r3, r0
 8030fa0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8030fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8030fa6:	4618      	mov	r0, r3
 8030fa8:	3710      	adds	r7, #16
 8030faa:	46bd      	mov	sp, r7
 8030fac:	bd80      	pop	{r7, pc}

08030fae <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8030fae:	b580      	push	{r7, lr}
 8030fb0:	b084      	sub	sp, #16
 8030fb2:	af00      	add	r7, sp, #0
 8030fb4:	4603      	mov	r3, r0
 8030fb6:	6039      	str	r1, [r7, #0]
 8030fb8:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8030fba:	2300      	movs	r3, #0
 8030fbc:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8030fbe:	683b      	ldr	r3, [r7, #0]
 8030fc0:	2b00      	cmp	r3, #0
 8030fc2:	d102      	bne.n	8030fca <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8030fc4:	23ff      	movs	r3, #255	; 0xff
 8030fc6:	73fb      	strb	r3, [r7, #15]
 8030fc8:	e007      	b.n	8030fda <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8030fca:	683b      	ldr	r3, [r7, #0]
 8030fcc:	1df9      	adds	r1, r7, #7
 8030fce:	2201      	movs	r2, #1
 8030fd0:	2006      	movs	r0, #6
 8030fd2:	f000 fef4 	bl	8031dbe <bhy2_hif_set_regs>
 8030fd6:	4603      	mov	r3, r0
 8030fd8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8030fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8030fde:	4618      	mov	r0, r3
 8030fe0:	3710      	adds	r7, #16
 8030fe2:	46bd      	mov	sp, r7
 8030fe4:	bd80      	pop	{r7, pc}

08030fe6 <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8030fe6:	b580      	push	{r7, lr}
 8030fe8:	b084      	sub	sp, #16
 8030fea:	af00      	add	r7, sp, #0
 8030fec:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8030fee:	2300      	movs	r3, #0
 8030ff0:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8030ff2:	687b      	ldr	r3, [r7, #4]
 8030ff4:	2b00      	cmp	r3, #0
 8030ff6:	d102      	bne.n	8030ffe <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8030ff8:	23ff      	movs	r3, #255	; 0xff
 8030ffa:	73fb      	strb	r3, [r7, #15]
 8030ffc:	e005      	b.n	803100a <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8030ffe:	687b      	ldr	r3, [r7, #4]
 8031000:	4618      	mov	r0, r3
 8031002:	f001 f827 	bl	8032054 <bhy2_hif_reset>
 8031006:	4603      	mov	r3, r0
 8031008:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 803100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 803100e:	4618      	mov	r0, r3
 8031010:	3710      	adds	r7, #16
 8031012:	46bd      	mov	sp, r7
 8031014:	bd80      	pop	{r7, pc}

08031016 <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8031016:	b580      	push	{r7, lr}
 8031018:	b08a      	sub	sp, #40	; 0x28
 803101a:	af04      	add	r7, sp, #16
 803101c:	60b9      	str	r1, [r7, #8]
 803101e:	607a      	str	r2, [r7, #4]
 8031020:	603b      	str	r3, [r7, #0]
 8031022:	4603      	mov	r3, r0
 8031024:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8031026:	2300      	movs	r3, #0
 8031028:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 803102a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803102c:	2b00      	cmp	r3, #0
 803102e:	d014      	beq.n	803105a <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8031030:	f640 1238 	movw	r2, #2360	; 0x938
 8031034:	2100      	movs	r1, #0
 8031036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8031038:	f00a fe4e 	bl	803bcd8 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 803103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803103e:	7bf8      	ldrb	r0, [r7, #15]
 8031040:	9302      	str	r3, [sp, #8]
 8031042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031044:	9301      	str	r3, [sp, #4]
 8031046:	6a3b      	ldr	r3, [r7, #32]
 8031048:	9300      	str	r3, [sp, #0]
 803104a:	683b      	ldr	r3, [r7, #0]
 803104c:	687a      	ldr	r2, [r7, #4]
 803104e:	68b9      	ldr	r1, [r7, #8]
 8031050:	f000 fe3e 	bl	8031cd0 <bhy2_hif_init>
 8031054:	4603      	mov	r3, r0
 8031056:	75fb      	strb	r3, [r7, #23]
 8031058:	e001      	b.n	803105e <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 803105a:	23ff      	movs	r3, #255	; 0xff
 803105c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 803105e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8031062:	4618      	mov	r0, r3
 8031064:	3718      	adds	r7, #24
 8031066:	46bd      	mov	sp, r7
 8031068:	bd80      	pop	{r7, pc}

0803106a <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 803106a:	b480      	push	{r7}
 803106c:	b087      	sub	sp, #28
 803106e:	af00      	add	r7, sp, #0
 8031070:	60b9      	str	r1, [r7, #8]
 8031072:	607a      	str	r2, [r7, #4]
 8031074:	603b      	str	r3, [r7, #0]
 8031076:	4603      	mov	r3, r0
 8031078:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 803107a:	2300      	movs	r3, #0
 803107c:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 803107e:	683b      	ldr	r3, [r7, #0]
 8031080:	2b00      	cmp	r3, #0
 8031082:	d002      	beq.n	803108a <bhy2_register_fifo_parse_callback+0x20>
 8031084:	68bb      	ldr	r3, [r7, #8]
 8031086:	2b00      	cmp	r3, #0
 8031088:	d102      	bne.n	8031090 <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 803108a:	23ff      	movs	r3, #255	; 0xff
 803108c:	75fb      	strb	r3, [r7, #23]
 803108e:	e013      	b.n	80310b8 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8031090:	7bfa      	ldrb	r2, [r7, #15]
 8031092:	6839      	ldr	r1, [r7, #0]
 8031094:	4613      	mov	r3, r2
 8031096:	00db      	lsls	r3, r3, #3
 8031098:	4413      	add	r3, r2
 803109a:	440b      	add	r3, r1
 803109c:	3318      	adds	r3, #24
 803109e:	68ba      	ldr	r2, [r7, #8]
 80310a0:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 80310a4:	7bfa      	ldrb	r2, [r7, #15]
 80310a6:	6839      	ldr	r1, [r7, #0]
 80310a8:	4613      	mov	r3, r2
 80310aa:	00db      	lsls	r3, r3, #3
 80310ac:	4413      	add	r3, r2
 80310ae:	440b      	add	r3, r1
 80310b0:	3318      	adds	r3, #24
 80310b2:	687a      	ldr	r2, [r7, #4]
 80310b4:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 80310b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80310bc:	4618      	mov	r0, r3
 80310be:	371c      	adds	r7, #28
 80310c0:	46bd      	mov	sp, r7
 80310c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80310c6:	4770      	bx	lr

080310c8 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 80310c8:	b580      	push	{r7, lr}
 80310ca:	b092      	sub	sp, #72	; 0x48
 80310cc:	af00      	add	r7, sp, #0
 80310ce:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 80310d0:	687b      	ldr	r3, [r7, #4]
 80310d2:	2b00      	cmp	r3, #0
 80310d4:	d103      	bne.n	80310de <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 80310d6:	23ff      	movs	r3, #255	; 0xff
 80310d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80310dc:	e079      	b.n	80311d2 <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 80310de:	f107 0308 	add.w	r3, r7, #8
 80310e2:	6879      	ldr	r1, [r7, #4]
 80310e4:	4618      	mov	r0, r3
 80310e6:	f7ff feb8 	bl	8030e5a <bhy2_get_virt_sensor_list>
 80310ea:	4603      	mov	r3, r0
 80310ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 80310f0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80310f4:	2b00      	cmp	r3, #0
 80310f6:	d16c      	bne.n	80311d2 <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 80310f8:	687b      	ldr	r3, [r7, #4]
 80310fa:	2201      	movs	r2, #1
 80310fc:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 80310fe:	2301      	movs	r3, #1
 8031100:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8031104:	e041      	b.n	803118a <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8031106:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 803110a:	08db      	lsrs	r3, r3, #3
 803110c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8031110:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8031114:	f003 0307 	and.w	r3, r3, #7
 8031118:	2201      	movs	r2, #1
 803111a:	fa02 f303 	lsl.w	r3, r2, r3
 803111e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 8031122:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8031126:	3348      	adds	r3, #72	; 0x48
 8031128:	443b      	add	r3, r7
 803112a:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 803112e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8031132:	4013      	ands	r3, r2
 8031134:	b2db      	uxtb	r3, r3
 8031136:	2b00      	cmp	r3, #0
 8031138:	d022      	beq.n	8031180 <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 803113a:	687a      	ldr	r2, [r7, #4]
 803113c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8031140:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8031144:	4618      	mov	r0, r3
 8031146:	f001 f8e6 	bl	8032316 <bhy2_hif_get_sensor_info>
 803114a:	4603      	mov	r3, r0
 803114c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8031150:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8031154:	2b00      	cmp	r3, #0
 8031156:	d113      	bne.n	8031180 <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8031158:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 803115c:	2b00      	cmp	r3, #0
 803115e:	d103      	bne.n	8031168 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 8031160:	23f8      	movs	r3, #248	; 0xf8
 8031162:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8031166:	e018      	b.n	803119a <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8031168:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 803116c:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8031170:	6879      	ldr	r1, [r7, #4]
 8031172:	4613      	mov	r3, r2
 8031174:	00db      	lsls	r3, r3, #3
 8031176:	4413      	add	r3, r2
 8031178:	440b      	add	r3, r1
 803117a:	331c      	adds	r3, #28
 803117c:	4602      	mov	r2, r0
 803117e:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8031180:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8031184:	3301      	adds	r3, #1
 8031186:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 803118a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 803118e:	2bf4      	cmp	r3, #244	; 0xf4
 8031190:	d803      	bhi.n	803119a <bhy2_update_virtual_sensor_list+0xd2>
 8031192:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8031196:	2b00      	cmp	r3, #0
 8031198:	d0b5      	beq.n	8031106 <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 803119a:	23ff      	movs	r3, #255	; 0xff
 803119c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80311a0:	e013      	b.n	80311ca <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 80311a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80311a6:	3bf5      	subs	r3, #245	; 0xf5
 80311a8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80311ac:	490c      	ldr	r1, [pc, #48]	; (80311e0 <bhy2_update_virtual_sensor_list+0x118>)
 80311ae:	5cc8      	ldrb	r0, [r1, r3]
 80311b0:	6879      	ldr	r1, [r7, #4]
 80311b2:	4613      	mov	r3, r2
 80311b4:	00db      	lsls	r3, r3, #3
 80311b6:	4413      	add	r3, r2
 80311b8:	440b      	add	r3, r1
 80311ba:	331c      	adds	r3, #28
 80311bc:	4602      	mov	r2, r0
 80311be:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 80311c0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80311c4:	3b01      	subs	r3, #1
 80311c6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80311ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80311ce:	2bf4      	cmp	r3, #244	; 0xf4
 80311d0:	d8e7      	bhi.n	80311a2 <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 80311d2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80311d6:	4618      	mov	r0, r3
 80311d8:	3748      	adds	r7, #72	; 0x48
 80311da:	46bd      	mov	sp, r7
 80311dc:	bd80      	pop	{r7, pc}
 80311de:	bf00      	nop
 80311e0:	0803e4d4 	.word	0x0803e4d4

080311e4 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 80311e4:	b580      	push	{r7, lr}
 80311e6:	b084      	sub	sp, #16
 80311e8:	af00      	add	r7, sp, #0
 80311ea:	6078      	str	r0, [r7, #4]
 80311ec:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 80311ee:	2300      	movs	r3, #0
 80311f0:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 80311f2:	683b      	ldr	r3, [r7, #0]
 80311f4:	2b00      	cmp	r3, #0
 80311f6:	d002      	beq.n	80311fe <bhy2_get_error_value+0x1a>
 80311f8:	687b      	ldr	r3, [r7, #4]
 80311fa:	2b00      	cmp	r3, #0
 80311fc:	d102      	bne.n	8031204 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 80311fe:	23ff      	movs	r3, #255	; 0xff
 8031200:	73fb      	strb	r3, [r7, #15]
 8031202:	e007      	b.n	8031214 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8031204:	683b      	ldr	r3, [r7, #0]
 8031206:	2201      	movs	r2, #1
 8031208:	6879      	ldr	r1, [r7, #4]
 803120a:	202e      	movs	r0, #46	; 0x2e
 803120c:	f7ff fc66 	bl	8030adc <bhy2_get_regs>
 8031210:	4603      	mov	r3, r0
 8031212:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8031214:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8031218:	4618      	mov	r0, r3
 803121a:	3710      	adds	r7, #16
 803121c:	46bd      	mov	sp, r7
 803121e:	bd80      	pop	{r7, pc}

08031220 <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8031220:	b480      	push	{r7}
 8031222:	b087      	sub	sp, #28
 8031224:	af00      	add	r7, sp, #0
 8031226:	4603      	mov	r3, r0
 8031228:	60b9      	str	r1, [r7, #8]
 803122a:	607a      	str	r2, [r7, #4]
 803122c:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 803122e:	2300      	movs	r3, #0
 8031230:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 8031232:	687b      	ldr	r3, [r7, #4]
 8031234:	2b00      	cmp	r3, #0
 8031236:	d04e      	beq.n	80312d6 <get_callback_info+0xb6>
 8031238:	68bb      	ldr	r3, [r7, #8]
 803123a:	2b00      	cmp	r3, #0
 803123c:	d04b      	beq.n	80312d6 <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 803123e:	7bfa      	ldrb	r2, [r7, #15]
 8031240:	68b8      	ldr	r0, [r7, #8]
 8031242:	6879      	ldr	r1, [r7, #4]
 8031244:	4613      	mov	r3, r2
 8031246:	00db      	lsls	r3, r3, #3
 8031248:	4413      	add	r3, r2
 803124a:	440b      	add	r3, r1
 803124c:	3318      	adds	r3, #24
 803124e:	4602      	mov	r2, r0
 8031250:	3304      	adds	r3, #4
 8031252:	6818      	ldr	r0, [r3, #0]
 8031254:	6859      	ldr	r1, [r3, #4]
 8031256:	6010      	str	r0, [r2, #0]
 8031258:	6051      	str	r1, [r2, #4]
 803125a:	7a1b      	ldrb	r3, [r3, #8]
 803125c:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 803125e:	7bfb      	ldrb	r3, [r7, #15]
 8031260:	2bf4      	cmp	r3, #244	; 0xf4
 8031262:	d91b      	bls.n	803129c <get_callback_info+0x7c>
 8031264:	68bb      	ldr	r3, [r7, #8]
 8031266:	781b      	ldrb	r3, [r3, #0]
 8031268:	2b00      	cmp	r3, #0
 803126a:	d117      	bne.n	803129c <get_callback_info+0x7c>
        {
            info->callback = NULL;
 803126c:	68bb      	ldr	r3, [r7, #8]
 803126e:	2200      	movs	r2, #0
 8031270:	705a      	strb	r2, [r3, #1]
 8031272:	2200      	movs	r2, #0
 8031274:	709a      	strb	r2, [r3, #2]
 8031276:	2200      	movs	r2, #0
 8031278:	70da      	strb	r2, [r3, #3]
 803127a:	2200      	movs	r2, #0
 803127c:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 803127e:	68bb      	ldr	r3, [r7, #8]
 8031280:	2200      	movs	r2, #0
 8031282:	715a      	strb	r2, [r3, #5]
 8031284:	2200      	movs	r2, #0
 8031286:	719a      	strb	r2, [r3, #6]
 8031288:	2200      	movs	r2, #0
 803128a:	71da      	strb	r2, [r3, #7]
 803128c:	2200      	movs	r2, #0
 803128e:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8031290:	7bfb      	ldrb	r3, [r7, #15]
 8031292:	3bf5      	subs	r3, #245	; 0xf5
 8031294:	4a16      	ldr	r2, [pc, #88]	; (80312f0 <get_callback_info+0xd0>)
 8031296:	5cd2      	ldrb	r2, [r2, r3]
 8031298:	68bb      	ldr	r3, [r7, #8]
 803129a:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 803129c:	7bfb      	ldrb	r3, [r7, #15]
 803129e:	2b00      	cmp	r3, #0
 80312a0:	d11c      	bne.n	80312dc <get_callback_info+0xbc>
 80312a2:	68bb      	ldr	r3, [r7, #8]
 80312a4:	781b      	ldrb	r3, [r3, #0]
 80312a6:	2b00      	cmp	r3, #0
 80312a8:	d118      	bne.n	80312dc <get_callback_info+0xbc>
        {
            info->callback = NULL;
 80312aa:	68bb      	ldr	r3, [r7, #8]
 80312ac:	2200      	movs	r2, #0
 80312ae:	705a      	strb	r2, [r3, #1]
 80312b0:	2200      	movs	r2, #0
 80312b2:	709a      	strb	r2, [r3, #2]
 80312b4:	2200      	movs	r2, #0
 80312b6:	70da      	strb	r2, [r3, #3]
 80312b8:	2200      	movs	r2, #0
 80312ba:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 80312bc:	68bb      	ldr	r3, [r7, #8]
 80312be:	2200      	movs	r2, #0
 80312c0:	715a      	strb	r2, [r3, #5]
 80312c2:	2200      	movs	r2, #0
 80312c4:	719a      	strb	r2, [r3, #6]
 80312c6:	2200      	movs	r2, #0
 80312c8:	71da      	strb	r2, [r3, #7]
 80312ca:	2200      	movs	r2, #0
 80312cc:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 80312ce:	68bb      	ldr	r3, [r7, #8]
 80312d0:	2201      	movs	r2, #1
 80312d2:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 80312d4:	e002      	b.n	80312dc <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80312d6:	23ff      	movs	r3, #255	; 0xff
 80312d8:	75fb      	strb	r3, [r7, #23]
 80312da:	e000      	b.n	80312de <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 80312dc:	bf00      	nop
    }

    return rslt;
 80312de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80312e2:	4618      	mov	r0, r3
 80312e4:	371c      	adds	r7, #28
 80312e6:	46bd      	mov	sp, r7
 80312e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80312ec:	4770      	bx	lr
 80312ee:	bf00      	nop
 80312f0:	0803e4d4 	.word	0x0803e4d4

080312f4 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 80312f4:	b480      	push	{r7}
 80312f6:	b085      	sub	sp, #20
 80312f8:	af00      	add	r7, sp, #0
 80312fa:	60f8      	str	r0, [r7, #12]
 80312fc:	460b      	mov	r3, r1
 80312fe:	607a      	str	r2, [r7, #4]
 8031300:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 8031302:	68fb      	ldr	r3, [r7, #12]
 8031304:	681a      	ldr	r2, [r3, #0]
 8031306:	7afb      	ldrb	r3, [r7, #11]
 8031308:	441a      	add	r2, r3
 803130a:	68fb      	ldr	r3, [r7, #12]
 803130c:	685b      	ldr	r3, [r3, #4]
 803130e:	429a      	cmp	r2, r3
 8031310:	d803      	bhi.n	803131a <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 8031312:	687b      	ldr	r3, [r7, #4]
 8031314:	2200      	movs	r2, #0
 8031316:	701a      	strb	r2, [r3, #0]
 8031318:	e002      	b.n	8031320 <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 803131a:	687b      	ldr	r3, [r7, #4]
 803131c:	2201      	movs	r2, #1
 803131e:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 8031320:	2300      	movs	r3, #0
}
 8031322:	4618      	mov	r0, r3
 8031324:	3714      	adds	r7, #20
 8031326:	46bd      	mov	sp, r7
 8031328:	f85d 7b04 	ldr.w	r7, [sp], #4
 803132c:	4770      	bx	lr

0803132e <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 803132e:	b480      	push	{r7}
 8031330:	b087      	sub	sp, #28
 8031332:	af00      	add	r7, sp, #0
 8031334:	4603      	mov	r3, r0
 8031336:	60b9      	str	r1, [r7, #8]
 8031338:	607a      	str	r2, [r7, #4]
 803133a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 803133c:	2300      	movs	r3, #0
 803133e:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 8031340:	7bfb      	ldrb	r3, [r7, #15]
 8031342:	2b02      	cmp	r3, #2
 8031344:	d808      	bhi.n	8031358 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 8031346:	7bfb      	ldrb	r3, [r7, #15]
 8031348:	f503 7392 	add.w	r3, r3, #292	; 0x124
 803134c:	00db      	lsls	r3, r3, #3
 803134e:	687a      	ldr	r2, [r7, #4]
 8031350:	441a      	add	r2, r3
 8031352:	68bb      	ldr	r3, [r7, #8]
 8031354:	601a      	str	r2, [r3, #0]
 8031356:	e001      	b.n	803135c <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 8031358:	23f9      	movs	r3, #249	; 0xf9
 803135a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 803135c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8031360:	4618      	mov	r0, r3
 8031362:	371c      	adds	r7, #28
 8031364:	46bd      	mov	sp, r7
 8031366:	f85d 7b04 	ldr.w	r7, [sp], #4
 803136a:	4770      	bx	lr

0803136c <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 803136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031370:	b099      	sub	sp, #100	; 0x64
 8031372:	af00      	add	r7, sp, #0
 8031374:	4603      	mov	r3, r0
 8031376:	62b9      	str	r1, [r7, #40]	; 0x28
 8031378:	627a      	str	r2, [r7, #36]	; 0x24
 803137a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 803137e:	2300      	movs	r3, #0
 8031380:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 8031384:	2300      	movs	r3, #0
 8031386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 803138a:	2300      	movs	r3, #0
 803138c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 8031390:	2300      	movs	r3, #0
 8031392:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8031396:	e16a      	b.n	803166e <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 8031398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803139a:	681b      	ldr	r3, [r3, #0]
 803139c:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 803139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80313a0:	691a      	ldr	r2, [r3, #16]
 80313a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80313a4:	4413      	add	r3, r2
 80313a6:	781b      	ldrb	r3, [r3, #0]
 80313a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 80313ac:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80313b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80313b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80313b6:	4618      	mov	r0, r3
 80313b8:	f7ff ffb9 	bl	803132e <get_time_stamp>
 80313bc:	4603      	mov	r3, r0
 80313be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 80313c2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80313c6:	2b00      	cmp	r3, #0
 80313c8:	d002      	beq.n	80313d0 <parse_fifo+0x64>
        {
            return rslt;
 80313ca:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80313ce:	e191      	b.n	80316f4 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 80313d0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80313d4:	2b00      	cmp	r3, #0
 80313d6:	d025      	beq.n	8031424 <parse_fifo+0xb8>
 80313d8:	2b00      	cmp	r3, #0
 80313da:	f2c0 80f6 	blt.w	80315ca <parse_fifo+0x25e>
 80313de:	2bff      	cmp	r3, #255	; 0xff
 80313e0:	f300 80f3 	bgt.w	80315ca <parse_fifo+0x25e>
 80313e4:	2bf5      	cmp	r3, #245	; 0xf5
 80313e6:	f2c0 80f0 	blt.w	80315ca <parse_fifo+0x25e>
 80313ea:	3bf5      	subs	r3, #245	; 0xf5
 80313ec:	2b0a      	cmp	r3, #10
 80313ee:	f200 80ec 	bhi.w	80315ca <parse_fifo+0x25e>
 80313f2:	a201      	add	r2, pc, #4	; (adr r2, 80313f8 <parse_fifo+0x8c>)
 80313f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80313f8:	08031431 	.word	0x08031431
 80313fc:	08031499 	.word	0x08031499
 8031400:	08031517 	.word	0x08031517
 8031404:	080315cb 	.word	0x080315cb
 8031408:	080315cb 	.word	0x080315cb
 803140c:	080315cb 	.word	0x080315cb
 8031410:	08031431 	.word	0x08031431
 8031414:	08031499 	.word	0x08031499
 8031418:	08031517 	.word	0x08031517
 803141c:	080315cb 	.word	0x080315cb
 8031420:	08031425 	.word	0x08031425
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 8031424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031426:	681b      	ldr	r3, [r3, #0]
 8031428:	1c5a      	adds	r2, r3, #1
 803142a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803142c:	601a      	str	r2, [r3, #0]
                break;
 803142e:	e11e      	b.n	803166e <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 8031430:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8031434:	461a      	mov	r2, r3
 8031436:	2102      	movs	r1, #2
 8031438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 803143a:	f7ff ff5b 	bl	80312f4 <get_buffer_status>
 803143e:	4603      	mov	r3, r0
 8031440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8031444:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8031448:	2b00      	cmp	r3, #0
 803144a:	d002      	beq.n	8031452 <parse_fifo+0xe6>
                {
                    return rslt;
 803144c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8031450:	e150      	b.n	80316f4 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8031452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8031456:	2b00      	cmp	r3, #0
 8031458:	d000      	beq.n	803145c <parse_fifo+0xf0>
                {
                    break;
 803145a:	e108      	b.n	803166e <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 803145c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803145e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031464:	691a      	ldr	r2, [r3, #16]
 8031466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8031468:	3301      	adds	r3, #1
 803146a:	4413      	add	r3, r2
 803146c:	781b      	ldrb	r3, [r3, #0]
 803146e:	b2db      	uxtb	r3, r3
 8031470:	2200      	movs	r2, #0
 8031472:	469a      	mov	sl, r3
 8031474:	4693      	mov	fp, r2
 8031476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8031478:	eb10 020a 	adds.w	r2, r0, sl
 803147c:	61ba      	str	r2, [r7, #24]
 803147e:	eb41 020b 	adc.w	r2, r1, fp
 8031482:	61fa      	str	r2, [r7, #28]
 8031484:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8031488:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 803148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803148e:	681b      	ldr	r3, [r3, #0]
 8031490:	1c9a      	adds	r2, r3, #2
 8031492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031494:	601a      	str	r2, [r3, #0]
                break;
 8031496:	e0ea      	b.n	803166e <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 8031498:	f107 0337 	add.w	r3, r7, #55	; 0x37
 803149c:	461a      	mov	r2, r3
 803149e:	2103      	movs	r1, #3
 80314a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80314a2:	f7ff ff27 	bl	80312f4 <get_buffer_status>
 80314a6:	4603      	mov	r3, r0
 80314a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80314ac:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80314b0:	2b00      	cmp	r3, #0
 80314b2:	d002      	beq.n	80314ba <parse_fifo+0x14e>
                {
                    return rslt;
 80314b4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80314b8:	e11c      	b.n	80316f4 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80314ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80314be:	2b00      	cmp	r3, #0
 80314c0:	d000      	beq.n	80314c4 <parse_fifo+0x158>
                {
                    break;
 80314c2:	e0d4      	b.n	803166e <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 80314c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80314c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80314ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80314cc:	691a      	ldr	r2, [r3, #16]
 80314ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80314d0:	3301      	adds	r3, #1
 80314d2:	4413      	add	r3, r2
 80314d4:	781b      	ldrb	r3, [r3, #0]
 80314d6:	b21c      	sxth	r4, r3
 80314d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80314da:	691a      	ldr	r2, [r3, #16]
 80314dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80314de:	3302      	adds	r3, #2
 80314e0:	4413      	add	r3, r2
 80314e2:	781b      	ldrb	r3, [r3, #0]
 80314e4:	021b      	lsls	r3, r3, #8
 80314e6:	b21b      	sxth	r3, r3
 80314e8:	4323      	orrs	r3, r4
 80314ea:	b21b      	sxth	r3, r3
 80314ec:	b29b      	uxth	r3, r3
 80314ee:	b29b      	uxth	r3, r3
 80314f0:	2200      	movs	r2, #0
 80314f2:	461d      	mov	r5, r3
 80314f4:	4616      	mov	r6, r2
 80314f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80314f8:	1942      	adds	r2, r0, r5
 80314fa:	613a      	str	r2, [r7, #16]
 80314fc:	eb41 0206 	adc.w	r2, r1, r6
 8031500:	617a      	str	r2, [r7, #20]
 8031502:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8031506:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 803150a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803150c:	681b      	ldr	r3, [r3, #0]
 803150e:	1cda      	adds	r2, r3, #3
 8031510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031512:	601a      	str	r2, [r3, #0]
                break;
 8031514:	e0ab      	b.n	803166e <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 8031516:	f107 0337 	add.w	r3, r7, #55	; 0x37
 803151a:	461a      	mov	r2, r3
 803151c:	2106      	movs	r1, #6
 803151e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8031520:	f7ff fee8 	bl	80312f4 <get_buffer_status>
 8031524:	4603      	mov	r3, r0
 8031526:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 803152a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 803152e:	2b00      	cmp	r3, #0
 8031530:	d002      	beq.n	8031538 <parse_fifo+0x1cc>
                {
                    return rslt;
 8031532:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8031536:	e0dd      	b.n	80316f4 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8031538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 803153c:	2b00      	cmp	r3, #0
 803153e:	d000      	beq.n	8031542 <parse_fifo+0x1d6>
                {
                    break;
 8031540:	e095      	b.n	803166e <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 8031542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031544:	691a      	ldr	r2, [r3, #16]
 8031546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8031548:	3301      	adds	r3, #1
 803154a:	4413      	add	r3, r2
 803154c:	781b      	ldrb	r3, [r3, #0]
 803154e:	4619      	mov	r1, r3
 8031550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031552:	691a      	ldr	r2, [r3, #16]
 8031554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8031556:	3302      	adds	r3, #2
 8031558:	4413      	add	r3, r2
 803155a:	781b      	ldrb	r3, [r3, #0]
 803155c:	021b      	lsls	r3, r3, #8
 803155e:	4319      	orrs	r1, r3
 8031560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031562:	691a      	ldr	r2, [r3, #16]
 8031564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8031566:	3303      	adds	r3, #3
 8031568:	4413      	add	r3, r2
 803156a:	781b      	ldrb	r3, [r3, #0]
 803156c:	041b      	lsls	r3, r3, #16
 803156e:	4319      	orrs	r1, r3
 8031570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031572:	691a      	ldr	r2, [r3, #16]
 8031574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8031576:	3304      	adds	r3, #4
 8031578:	4413      	add	r3, r2
 803157a:	781b      	ldrb	r3, [r3, #0]
 803157c:	061b      	lsls	r3, r3, #24
 803157e:	430b      	orrs	r3, r1
 8031580:	2200      	movs	r2, #0
 8031582:	4698      	mov	r8, r3
 8031584:	4691      	mov	r9, r2
 8031586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031588:	691a      	ldr	r2, [r3, #16]
 803158a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803158c:	3305      	adds	r3, #5
 803158e:	4413      	add	r3, r2
 8031590:	781b      	ldrb	r3, [r3, #0]
 8031592:	b2db      	uxtb	r3, r3
 8031594:	2200      	movs	r2, #0
 8031596:	60bb      	str	r3, [r7, #8]
 8031598:	60fa      	str	r2, [r7, #12]
 803159a:	f04f 0200 	mov.w	r2, #0
 803159e:	f04f 0300 	mov.w	r3, #0
 80315a2:	68b9      	ldr	r1, [r7, #8]
 80315a4:	000b      	movs	r3, r1
 80315a6:	2200      	movs	r2, #0
 80315a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80315aa:	ea48 0002 	orr.w	r0, r8, r2
 80315ae:	6038      	str	r0, [r7, #0]
 80315b0:	ea49 0303 	orr.w	r3, r9, r3
 80315b4:	607b      	str	r3, [r7, #4]
 80315b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80315ba:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 80315be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80315c0:	681b      	ldr	r3, [r3, #0]
 80315c2:	1d9a      	adds	r2, r3, #6
 80315c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80315c6:	601a      	str	r2, [r3, #0]
                break;
 80315c8:	e051      	b.n	803166e <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 80315ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80315ce:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80315d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80315d4:	4618      	mov	r0, r3
 80315d6:	f7ff fe23 	bl	8031220 <get_callback_info>
 80315da:	4603      	mov	r3, r0
 80315dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 80315e0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80315e4:	2b00      	cmp	r3, #0
 80315e6:	d002      	beq.n	80315ee <parse_fifo+0x282>
                {
                    return rslt;
 80315e8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80315ec:	e082      	b.n	80316f4 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 80315ee:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 80315f2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80315f6:	461a      	mov	r2, r3
 80315f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80315fa:	f7ff fe7b 	bl	80312f4 <get_buffer_status>
 80315fe:	4603      	mov	r3, r0
 8031600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8031604:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8031608:	2b00      	cmp	r3, #0
 803160a:	d002      	beq.n	8031612 <parse_fifo+0x2a6>
                {
                    return rslt;
 803160c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8031610:	e070      	b.n	80316f4 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8031612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8031616:	2b00      	cmp	r3, #0
 8031618:	d000      	beq.n	803161c <parse_fifo+0x2b0>
                {
                    break;
 803161a:	e028      	b.n	803166e <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 803161c:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 8031620:	2b00      	cmp	r3, #0
 8031622:	d01c      	beq.n	803165e <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 8031624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031626:	691a      	ldr	r2, [r3, #16]
 8031628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803162a:	3301      	adds	r3, #1
 803162c:	4413      	add	r3, r2
 803162e:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 8031630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8031634:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 8031638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803163a:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 803163c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8031640:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 8031644:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8031648:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 803164c:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 8031650:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 8031654:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8031658:	4611      	mov	r1, r2
 803165a:	4618      	mov	r0, r3
 803165c:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 803165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031660:	681a      	ldr	r2, [r3, #0]
 8031662:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8031666:	441a      	add	r2, r3
 8031668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803166a:	601a      	str	r2, [r3, #0]
                break;
 803166c:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 803166e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031670:	681a      	ldr	r2, [r3, #0]
 8031672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031674:	685b      	ldr	r3, [r3, #4]
 8031676:	429a      	cmp	r2, r3
 8031678:	d204      	bcs.n	8031684 <parse_fifo+0x318>
 803167a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 803167e:	2b00      	cmp	r3, #0
 8031680:	f43f ae8a 	beq.w	8031398 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 8031684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031686:	685b      	ldr	r3, [r3, #4]
 8031688:	2b00      	cmp	r3, #0
 803168a:	d031      	beq.n	80316f0 <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 803168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803168e:	685a      	ldr	r2, [r3, #4]
 8031690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031692:	681b      	ldr	r3, [r3, #0]
 8031694:	429a      	cmp	r2, r3
 8031696:	d202      	bcs.n	803169e <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 8031698:	f06f 0301 	mvn.w	r3, #1
 803169c:	e02a      	b.n	80316f4 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 803169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80316a0:	685a      	ldr	r2, [r3, #4]
 80316a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80316a4:	681b      	ldr	r3, [r3, #0]
 80316a6:	1ad2      	subs	r2, r2, r3
 80316a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80316aa:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 80316ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80316ae:	685b      	ldr	r3, [r3, #4]
 80316b0:	2b00      	cmp	r3, #0
 80316b2:	d01d      	beq.n	80316f0 <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 80316b4:	2300      	movs	r3, #0
 80316b6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80316ba:	e013      	b.n	80316e4 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 80316bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80316be:	691a      	ldr	r2, [r3, #16]
 80316c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80316c2:	6819      	ldr	r1, [r3, #0]
 80316c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80316c8:	440b      	add	r3, r1
 80316ca:	441a      	add	r2, r3
 80316cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80316ce:	6919      	ldr	r1, [r3, #16]
 80316d0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80316d4:	440b      	add	r3, r1
 80316d6:	7812      	ldrb	r2, [r2, #0]
 80316d8:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 80316da:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80316de:	3301      	adds	r3, #1
 80316e0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80316e4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80316e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80316ea:	685b      	ldr	r3, [r3, #4]
 80316ec:	429a      	cmp	r2, r3
 80316ee:	d3e5      	bcc.n	80316bc <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 80316f0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80316f4:	4618      	mov	r0, r3
 80316f6:	3764      	adds	r7, #100	; 0x64
 80316f8:	46bd      	mov	sp, r7
 80316fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80316fe:	bf00      	nop

08031700 <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 8031700:	b590      	push	{r4, r7, lr}
 8031702:	b0cf      	sub	sp, #316	; 0x13c
 8031704:	af00      	add	r7, sp, #0
 8031706:	4604      	mov	r4, r0
 8031708:	f507 709c 	add.w	r0, r7, #312	; 0x138
 803170c:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8031710:	6001      	str	r1, [r0, #0]
 8031712:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8031716:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 803171a:	600a      	str	r2, [r1, #0]
 803171c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8031720:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8031724:	6013      	str	r3, [r2, #0]
 8031726:	f507 739c 	add.w	r3, r7, #312	; 0x138
 803172a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 803172e:	4622      	mov	r2, r4
 8031730:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 8031732:	2300      	movs	r3, #0
 8031734:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 8031738:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 803173c:	2b00      	cmp	r3, #0
 803173e:	f000 81af 	beq.w	8031aa0 <bhy2_hif_exec_cmd_generic+0x3a0>
 8031742:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8031746:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 803174a:	681b      	ldr	r3, [r3, #0]
 803174c:	2b00      	cmp	r3, #0
 803174e:	d007      	beq.n	8031760 <bhy2_hif_exec_cmd_generic+0x60>
 8031750:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8031754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8031758:	681b      	ldr	r3, [r3, #0]
 803175a:	2b00      	cmp	r3, #0
 803175c:	f000 81a0 	beq.w	8031aa0 <bhy2_hif_exec_cmd_generic+0x3a0>
 8031760:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8031764:	2b00      	cmp	r3, #0
 8031766:	d007      	beq.n	8031778 <bhy2_hif_exec_cmd_generic+0x78>
 8031768:	f507 739c 	add.w	r3, r7, #312	; 0x138
 803176c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8031770:	681b      	ldr	r3, [r3, #0]
 8031772:	2b00      	cmp	r3, #0
 8031774:	f000 8194 	beq.w	8031aa0 <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 8031778:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 803177c:	699b      	ldr	r3, [r3, #24]
 803177e:	2b00      	cmp	r3, #0
 8031780:	f000 8188 	beq.w	8031a94 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 8031784:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8031788:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 803178c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8031790:	681b      	ldr	r3, [r3, #0]
 8031792:	4413      	add	r3, r2
 8031794:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 8031798:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 803179c:	2b00      	cmp	r3, #0
 803179e:	d007      	beq.n	80317b0 <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 80317a0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80317a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80317a8:	4413      	add	r3, r2
 80317aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80317ae:	e003      	b.n	80317b8 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 80317b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80317b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 80317b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80317bc:	f003 0303 	and.w	r3, r3, #3
 80317c0:	2b00      	cmp	r3, #0
 80317c2:	d006      	beq.n	80317d2 <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 80317c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80317c8:	089b      	lsrs	r3, r3, #2
 80317ca:	3301      	adds	r3, #1
 80317cc:	009b      	lsls	r3, r3, #2
 80317ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 80317d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80317d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80317da:	881b      	ldrh	r3, [r3, #0]
 80317dc:	b2da      	uxtb	r2, r3
 80317de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80317e2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80317e6:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 80317e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80317ec:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80317f0:	881b      	ldrh	r3, [r3, #0]
 80317f2:	0a1b      	lsrs	r3, r3, #8
 80317f4:	b29b      	uxth	r3, r3
 80317f6:	b2da      	uxtb	r2, r3
 80317f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80317fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8031800:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 8031802:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8031806:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 803180a:	881b      	ldrh	r3, [r3, #0]
 803180c:	2b02      	cmp	r3, #2
 803180e:	d113      	bne.n	8031838 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 8031810:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8031814:	089b      	lsrs	r3, r3, #2
 8031816:	b2da      	uxtb	r2, r3
 8031818:	f507 739c 	add.w	r3, r7, #312	; 0x138
 803181c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8031820:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 8031822:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8031826:	089b      	lsrs	r3, r3, #2
 8031828:	0a1b      	lsrs	r3, r3, #8
 803182a:	b2da      	uxtb	r2, r3
 803182c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8031830:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8031834:	70da      	strb	r2, [r3, #3]
 8031836:	e010      	b.n	803185a <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 8031838:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 803183c:	b2da      	uxtb	r2, r3
 803183e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8031842:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8031846:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 8031848:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 803184c:	0a1b      	lsrs	r3, r3, #8
 803184e:	b2da      	uxtb	r2, r3
 8031850:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8031854:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8031858:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 803185a:	2304      	movs	r3, #4
 803185c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 8031860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8031864:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 8031868:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 803186c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8031870:	4413      	add	r3, r2
 8031872:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 8031876:	f44f 7380 	mov.w	r3, #256	; 0x100
 803187a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 803187e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8031882:	699b      	ldr	r3, [r3, #24]
 8031884:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8031888:	429a      	cmp	r2, r3
 803188a:	f240 80f9 	bls.w	8031a80 <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 803188e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8031892:	699b      	ldr	r3, [r3, #24]
 8031894:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8031898:	e0f2      	b.n	8031a80 <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 803189a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 803189e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80318a2:	4413      	add	r3, r2
 80318a4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80318a8:	429a      	cmp	r2, r3
 80318aa:	d20b      	bcs.n	80318c4 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 80318ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80318b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 80318b4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80318b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80318bc:	1ad3      	subs	r3, r2, r3
 80318be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80318c2:	e020      	b.n	8031906 <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 80318c4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80318c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80318cc:	4413      	add	r3, r2
 80318ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 80318d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80318d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 80318da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80318de:	f003 0303 	and.w	r3, r3, #3
 80318e2:	2b00      	cmp	r3, #0
 80318e4:	d006      	beq.n	80318f4 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 80318e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80318ea:	089b      	lsrs	r3, r3, #2
 80318ec:	3301      	adds	r3, #1
 80318ee:	009b      	lsls	r3, r3, #2
 80318f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 80318f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80318f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80318fc:	d903      	bls.n	8031906 <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 80318fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8031902:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 8031906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 803190a:	2b00      	cmp	r3, #0
 803190c:	d07e      	beq.n	8031a0c <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 803190e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8031912:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8031916:	681a      	ldr	r2, [r3, #0]
 8031918:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 803191c:	4413      	add	r3, r2
 803191e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8031922:	429a      	cmp	r2, r3
 8031924:	d315      	bcc.n	8031952 <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 8031926:	f107 0214 	add.w	r2, r7, #20
 803192a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 803192e:	18d0      	adds	r0, r2, r3
 8031930:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8031934:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8031938:	1ad3      	subs	r3, r2, r3
 803193a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 803193e:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8031942:	6812      	ldr	r2, [r2, #0]
 8031944:	4413      	add	r3, r2
 8031946:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 803194a:	4619      	mov	r1, r3
 803194c:	f00a f99c 	bl	803bc88 <memcpy>
 8031950:	e05c      	b.n	8031a0c <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 8031952:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8031956:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 803195a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 803195e:	681b      	ldr	r3, [r3, #0]
 8031960:	429a      	cmp	r2, r3
 8031962:	d93b      	bls.n	80319dc <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 8031964:	f107 0214 	add.w	r2, r7, #20
 8031968:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 803196c:	18d0      	adds	r0, r2, r3
 803196e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8031972:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8031976:	1ad3      	subs	r3, r2, r3
 8031978:	f507 729c 	add.w	r2, r7, #312	; 0x138
 803197c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8031980:	6812      	ldr	r2, [r2, #0]
 8031982:	18d1      	adds	r1, r2, r3
 8031984:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8031988:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 803198c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8031990:	681b      	ldr	r3, [r3, #0]
 8031992:	1ad3      	subs	r3, r2, r3
 8031994:	461a      	mov	r2, r3
 8031996:	f00a f977 	bl	803bc88 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 803199a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 803199e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80319a2:	441a      	add	r2, r3
 80319a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80319a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80319ac:	681b      	ldr	r3, [r3, #0]
 80319ae:	1ad3      	subs	r3, r2, r3
 80319b0:	f107 0214 	add.w	r2, r7, #20
 80319b4:	18d0      	adds	r0, r2, r3
 80319b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80319ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80319be:	681a      	ldr	r2, [r3, #0]
 80319c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80319c4:	1ad2      	subs	r2, r2, r3
 80319c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80319ca:	441a      	add	r2, r3
 80319cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80319d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80319d4:	6819      	ldr	r1, [r3, #0]
 80319d6:	f00a f957 	bl	803bc88 <memcpy>
 80319da:	e017      	b.n	8031a0c <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 80319dc:	f107 0214 	add.w	r2, r7, #20
 80319e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80319e4:	18d0      	adds	r0, r2, r3
 80319e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80319ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80319ee:	681a      	ldr	r2, [r3, #0]
 80319f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80319f4:	1ad3      	subs	r3, r2, r3
 80319f6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80319fa:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80319fe:	6812      	ldr	r2, [r2, #0]
 8031a00:	4413      	add	r3, r2
 8031a02:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8031a06:	4619      	mov	r1, r3
 8031a08:	f00a f93e 	bl	803bc88 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8031a0c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8031a10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8031a14:	4413      	add	r3, r2
 8031a16:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8031a1a:	429a      	cmp	r2, r3
 8031a1c:	d012      	beq.n	8031a44 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 8031a1e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8031a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8031a26:	4413      	add	r3, r2
 8031a28:	f107 0214 	add.w	r2, r7, #20
 8031a2c:	18d0      	adds	r0, r2, r3
 8031a2e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8031a32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8031a36:	4413      	add	r3, r2
 8031a38:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8031a3c:	461a      	mov	r2, r3
 8031a3e:	2100      	movs	r1, #0
 8031a40:	f00a f94a 	bl	803bcd8 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 8031a44:	f107 0114 	add.w	r1, r7, #20
 8031a48:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8031a4c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8031a50:	2000      	movs	r0, #0
 8031a52:	f000 f9b4 	bl	8031dbe <bhy2_hif_set_regs>
 8031a56:	4603      	mov	r3, r0
 8031a58:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 8031a5c:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8031a60:	2b00      	cmp	r3, #0
 8031a62:	d11b      	bne.n	8031a9c <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 8031a64:	2300      	movs	r3, #0
 8031a66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 8031a6a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8031a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8031a72:	1ad3      	subs	r3, r2, r3
 8031a74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 8031a78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8031a7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8031a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8031a84:	2b00      	cmp	r3, #0
 8031a86:	d00f      	beq.n	8031aa8 <bhy2_hif_exec_cmd_generic+0x3a8>
 8031a88:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8031a8c:	2b00      	cmp	r3, #0
 8031a8e:	f43f af04 	beq.w	803189a <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 8031a92:	e009      	b.n	8031aa8 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 8031a94:	23fe      	movs	r3, #254	; 0xfe
 8031a96:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 8031a9a:	e005      	b.n	8031aa8 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 8031a9c:	bf00      	nop
        if (hif->read_write_len != 0)
 8031a9e:	e003      	b.n	8031aa8 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8031aa0:	23ff      	movs	r3, #255	; 0xff
 8031aa2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8031aa6:	e000      	b.n	8031aaa <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 8031aa8:	bf00      	nop
    }

    return rslt;
 8031aaa:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 8031aae:	4618      	mov	r0, r3
 8031ab0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8031ab4:	46bd      	mov	sp, r7
 8031ab6:	bd90      	pop	{r4, r7, pc}

08031ab8 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 8031ab8:	b580      	push	{r7, lr}
 8031aba:	b084      	sub	sp, #16
 8031abc:	af00      	add	r7, sp, #0
 8031abe:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8031ac0:	2300      	movs	r3, #0
 8031ac2:	81fb      	strh	r3, [r7, #14]
 8031ac4:	e027      	b.n	8031b16 <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 8031ac6:	f107 030c 	add.w	r3, r7, #12
 8031aca:	6879      	ldr	r1, [r7, #4]
 8031acc:	4618      	mov	r0, r3
 8031ace:	f000 fab1 	bl	8032034 <bhy2_hif_get_interrupt_status>
 8031ad2:	4603      	mov	r3, r0
 8031ad4:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 8031ad6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8031ada:	2b00      	cmp	r3, #0
 8031adc:	d115      	bne.n	8031b0a <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 8031ade:	7b3b      	ldrb	r3, [r7, #12]
 8031ae0:	f003 0320 	and.w	r3, r3, #32
 8031ae4:	2b00      	cmp	r3, #0
 8031ae6:	d002      	beq.n	8031aee <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 8031ae8:	2300      	movs	r3, #0
 8031aea:	737b      	strb	r3, [r7, #13]
                break;
 8031aec:	e017      	b.n	8031b1e <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 8031aee:	6879      	ldr	r1, [r7, #4]
 8031af0:	f242 7010 	movw	r0, #10000	; 0x2710
 8031af4:	f000 f99b 	bl	8031e2e <bhy2_hif_delay_us>
 8031af8:	4603      	mov	r3, r0
 8031afa:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8031afc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8031b00:	2b00      	cmp	r3, #0
 8031b02:	d005      	beq.n	8031b10 <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 8031b04:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8031b08:	e00b      	b.n	8031b22 <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 8031b0a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8031b0e:	e008      	b.n	8031b22 <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8031b10:	89fb      	ldrh	r3, [r7, #14]
 8031b12:	3301      	adds	r3, #1
 8031b14:	81fb      	strh	r3, [r7, #14]
 8031b16:	89fb      	ldrh	r3, [r7, #14]
 8031b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8031b1c:	d3d3      	bcc.n	8031ac6 <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8031b1e:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8031b22:	4618      	mov	r0, r3
 8031b24:	3710      	adds	r7, #16
 8031b26:	46bd      	mov	sp, r7
 8031b28:	bd80      	pop	{r7, pc}

08031b2a <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 8031b2a:	b580      	push	{r7, lr}
 8031b2c:	b084      	sub	sp, #16
 8031b2e:	af00      	add	r7, sp, #0
 8031b30:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8031b32:	2300      	movs	r3, #0
 8031b34:	81fb      	strh	r3, [r7, #14]
 8031b36:	e02f      	b.n	8031b98 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 8031b38:	6879      	ldr	r1, [r7, #4]
 8031b3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8031b3e:	f000 f976 	bl	8031e2e <bhy2_hif_delay_us>
 8031b42:	4603      	mov	r3, r0
 8031b44:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8031b46:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8031b4a:	2b00      	cmp	r3, #0
 8031b4c:	da02      	bge.n	8031b54 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 8031b4e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8031b52:	e02d      	b.n	8031bb0 <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 8031b54:	f107 010c 	add.w	r1, r7, #12
 8031b58:	687b      	ldr	r3, [r7, #4]
 8031b5a:	2201      	movs	r2, #1
 8031b5c:	2025      	movs	r0, #37	; 0x25
 8031b5e:	f000 f8f6 	bl	8031d4e <bhy2_hif_get_regs>
 8031b62:	4603      	mov	r3, r0
 8031b64:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8031b66:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8031b6a:	2b00      	cmp	r3, #0
 8031b6c:	da02      	bge.n	8031b74 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 8031b6e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8031b72:	e01d      	b.n	8031bb0 <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8031b74:	7b3b      	ldrb	r3, [r7, #12]
 8031b76:	f003 0310 	and.w	r3, r3, #16
 8031b7a:	2b00      	cmp	r3, #0
 8031b7c:	d009      	beq.n	8031b92 <bhy2_hif_check_boot_status_ram+0x68>
 8031b7e:	7b3b      	ldrb	r3, [r7, #12]
 8031b80:	f003 0320 	and.w	r3, r3, #32
 8031b84:	2b00      	cmp	r3, #0
 8031b86:	d004      	beq.n	8031b92 <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 8031b88:	7b3b      	ldrb	r3, [r7, #12]
 8031b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8031b8e:	2b00      	cmp	r3, #0
 8031b90:	d006      	beq.n	8031ba0 <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8031b92:	89fb      	ldrh	r3, [r7, #14]
 8031b94:	3301      	adds	r3, #1
 8031b96:	81fb      	strh	r3, [r7, #14]
 8031b98:	89fb      	ldrh	r3, [r7, #14]
 8031b9a:	2b63      	cmp	r3, #99	; 0x63
 8031b9c:	d9cc      	bls.n	8031b38 <bhy2_hif_check_boot_status_ram+0xe>
 8031b9e:	e000      	b.n	8031ba2 <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 8031ba0:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 8031ba2:	89fb      	ldrh	r3, [r7, #14]
 8031ba4:	2b64      	cmp	r3, #100	; 0x64
 8031ba6:	d102      	bne.n	8031bae <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 8031ba8:	f06f 0304 	mvn.w	r3, #4
 8031bac:	e000      	b.n	8031bb0 <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 8031bae:	2300      	movs	r3, #0
}
 8031bb0:	4618      	mov	r0, r3
 8031bb2:	3710      	adds	r7, #16
 8031bb4:	46bd      	mov	sp, r7
 8031bb6:	bd80      	pop	{r7, pc}

08031bb8 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8031bb8:	b580      	push	{r7, lr}
 8031bba:	b08a      	sub	sp, #40	; 0x28
 8031bbc:	af00      	add	r7, sp, #0
 8031bbe:	60b9      	str	r1, [r7, #8]
 8031bc0:	607a      	str	r2, [r7, #4]
 8031bc2:	603b      	str	r3, [r7, #0]
 8031bc4:	4603      	mov	r3, r0
 8031bc6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8031bc8:	2300      	movs	r3, #0
 8031bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 8031bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8031bd0:	2b00      	cmp	r3, #0
 8031bd2:	d072      	beq.n	8031cba <bhy2_hif_get_fifo+0x102>
 8031bd4:	68bb      	ldr	r3, [r7, #8]
 8031bd6:	2b00      	cmp	r3, #0
 8031bd8:	d06f      	beq.n	8031cba <bhy2_hif_get_fifo+0x102>
 8031bda:	683b      	ldr	r3, [r7, #0]
 8031bdc:	2b00      	cmp	r3, #0
 8031bde:	d06c      	beq.n	8031cba <bhy2_hif_get_fifo+0x102>
 8031be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8031be2:	2b00      	cmp	r3, #0
 8031be4:	d069      	beq.n	8031cba <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 8031be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8031be8:	699b      	ldr	r3, [r3, #24]
 8031bea:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8031bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8031bee:	681b      	ldr	r3, [r3, #0]
 8031bf0:	2b00      	cmp	r3, #0
 8031bf2:	d114      	bne.n	8031c1e <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 8031bf4:	f107 0114 	add.w	r1, r7, #20
 8031bf8:	7bf8      	ldrb	r0, [r7, #15]
 8031bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8031bfc:	2202      	movs	r2, #2
 8031bfe:	f000 f8a6 	bl	8031d4e <bhy2_hif_get_regs>
 8031c02:	4603      	mov	r3, r0
 8031c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 8031c08:	7d3b      	ldrb	r3, [r7, #20]
 8031c0a:	b21a      	sxth	r2, r3
 8031c0c:	7d7b      	ldrb	r3, [r7, #21]
 8031c0e:	021b      	lsls	r3, r3, #8
 8031c10:	b21b      	sxth	r3, r3
 8031c12:	4313      	orrs	r3, r2
 8031c14:	b21b      	sxth	r3, r3
 8031c16:	b29b      	uxth	r3, r3
 8031c18:	461a      	mov	r2, r3
 8031c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8031c1c:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8031c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8031c20:	681b      	ldr	r3, [r3, #0]
 8031c22:	2b00      	cmp	r3, #0
 8031c24:	d04d      	beq.n	8031cc2 <bhy2_hif_get_fifo+0x10a>
 8031c26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8031c2a:	2b00      	cmp	r3, #0
 8031c2c:	d149      	bne.n	8031cc2 <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 8031c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8031c30:	681b      	ldr	r3, [r3, #0]
 8031c32:	687a      	ldr	r2, [r7, #4]
 8031c34:	429a      	cmp	r2, r3
 8031c36:	d203      	bcs.n	8031c40 <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 8031c38:	683b      	ldr	r3, [r7, #0]
 8031c3a:	687a      	ldr	r2, [r7, #4]
 8031c3c:	601a      	str	r2, [r3, #0]
 8031c3e:	e003      	b.n	8031c48 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 8031c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8031c42:	681a      	ldr	r2, [r3, #0]
 8031c44:	683b      	ldr	r3, [r7, #0]
 8031c46:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 8031c48:	683b      	ldr	r3, [r7, #0]
 8031c4a:	681b      	ldr	r3, [r3, #0]
 8031c4c:	623b      	str	r3, [r7, #32]
            offset = 0;
 8031c4e:	2300      	movs	r3, #0
 8031c50:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8031c52:	e016      	b.n	8031c82 <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 8031c54:	68ba      	ldr	r2, [r7, #8]
 8031c56:	69fb      	ldr	r3, [r7, #28]
 8031c58:	18d1      	adds	r1, r2, r3
 8031c5a:	7bf8      	ldrb	r0, [r7, #15]
 8031c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8031c5e:	69ba      	ldr	r2, [r7, #24]
 8031c60:	f000 f875 	bl	8031d4e <bhy2_hif_get_regs>
 8031c64:	4603      	mov	r3, r0
 8031c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 8031c6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8031c6e:	2b00      	cmp	r3, #0
 8031c70:	d10c      	bne.n	8031c8c <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 8031c72:	6a3a      	ldr	r2, [r7, #32]
 8031c74:	69bb      	ldr	r3, [r7, #24]
 8031c76:	1ad3      	subs	r3, r2, r3
 8031c78:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 8031c7a:	69fa      	ldr	r2, [r7, #28]
 8031c7c:	69bb      	ldr	r3, [r7, #24]
 8031c7e:	4413      	add	r3, r2
 8031c80:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8031c82:	6a3a      	ldr	r2, [r7, #32]
 8031c84:	69bb      	ldr	r3, [r7, #24]
 8031c86:	429a      	cmp	r2, r3
 8031c88:	d8e4      	bhi.n	8031c54 <bhy2_hif_get_fifo+0x9c>
 8031c8a:	e000      	b.n	8031c8e <bhy2_hif_get_fifo+0xd6>
                    break;
 8031c8c:	bf00      	nop
            }

            if (read_len != 0)
 8031c8e:	6a3b      	ldr	r3, [r7, #32]
 8031c90:	2b00      	cmp	r3, #0
 8031c92:	d00a      	beq.n	8031caa <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8031c94:	68ba      	ldr	r2, [r7, #8]
 8031c96:	69fb      	ldr	r3, [r7, #28]
 8031c98:	18d1      	adds	r1, r2, r3
 8031c9a:	7bf8      	ldrb	r0, [r7, #15]
 8031c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8031c9e:	6a3a      	ldr	r2, [r7, #32]
 8031ca0:	f000 f855 	bl	8031d4e <bhy2_hif_get_regs>
 8031ca4:	4603      	mov	r3, r0
 8031ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 8031caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8031cac:	681a      	ldr	r2, [r3, #0]
 8031cae:	683b      	ldr	r3, [r7, #0]
 8031cb0:	681b      	ldr	r3, [r3, #0]
 8031cb2:	1ad2      	subs	r2, r2, r3
 8031cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8031cb6:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8031cb8:	e003      	b.n	8031cc2 <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8031cba:	23ff      	movs	r3, #255	; 0xff
 8031cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8031cc0:	e000      	b.n	8031cc4 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8031cc2:	bf00      	nop
    }

    return rslt;
 8031cc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8031cc8:	4618      	mov	r0, r3
 8031cca:	3728      	adds	r7, #40	; 0x28
 8031ccc:	46bd      	mov	sp, r7
 8031cce:	bd80      	pop	{r7, pc}

08031cd0 <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 8031cd0:	b480      	push	{r7}
 8031cd2:	b087      	sub	sp, #28
 8031cd4:	af00      	add	r7, sp, #0
 8031cd6:	60b9      	str	r1, [r7, #8]
 8031cd8:	607a      	str	r2, [r7, #4]
 8031cda:	603b      	str	r3, [r7, #0]
 8031cdc:	4603      	mov	r3, r0
 8031cde:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8031ce0:	2300      	movs	r3, #0
 8031ce2:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 8031ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031ce6:	2b00      	cmp	r3, #0
 8031ce8:	d027      	beq.n	8031d3a <bhy2_hif_init+0x6a>
 8031cea:	68bb      	ldr	r3, [r7, #8]
 8031cec:	2b00      	cmp	r3, #0
 8031cee:	d024      	beq.n	8031d3a <bhy2_hif_init+0x6a>
 8031cf0:	687b      	ldr	r3, [r7, #4]
 8031cf2:	2b00      	cmp	r3, #0
 8031cf4:	d021      	beq.n	8031d3a <bhy2_hif_init+0x6a>
 8031cf6:	683b      	ldr	r3, [r7, #0]
 8031cf8:	2b00      	cmp	r3, #0
 8031cfa:	d01e      	beq.n	8031d3a <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8031cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031cfe:	68ba      	ldr	r2, [r7, #8]
 8031d00:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8031d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031d04:	687a      	ldr	r2, [r7, #4]
 8031d06:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 8031d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031d0a:	683a      	ldr	r2, [r7, #0]
 8031d0c:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8031d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031d12:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8031d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031d16:	7bfa      	ldrb	r2, [r7, #15]
 8031d18:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8031d1a:	6a3b      	ldr	r3, [r7, #32]
 8031d1c:	f003 0303 	and.w	r3, r3, #3
 8031d20:	2b00      	cmp	r3, #0
 8031d22:	d006      	beq.n	8031d32 <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8031d24:	6a3b      	ldr	r3, [r7, #32]
 8031d26:	089b      	lsrs	r3, r3, #2
 8031d28:	3301      	adds	r3, #1
 8031d2a:	009a      	lsls	r2, r3, #2
 8031d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031d2e:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8031d30:	e005      	b.n	8031d3e <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8031d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031d34:	6a3a      	ldr	r2, [r7, #32]
 8031d36:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8031d38:	e001      	b.n	8031d3e <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8031d3a:	23ff      	movs	r3, #255	; 0xff
 8031d3c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8031d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8031d42:	4618      	mov	r0, r3
 8031d44:	371c      	adds	r7, #28
 8031d46:	46bd      	mov	sp, r7
 8031d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031d4c:	4770      	bx	lr

08031d4e <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8031d4e:	b590      	push	{r4, r7, lr}
 8031d50:	b087      	sub	sp, #28
 8031d52:	af00      	add	r7, sp, #0
 8031d54:	60b9      	str	r1, [r7, #8]
 8031d56:	607a      	str	r2, [r7, #4]
 8031d58:	603b      	str	r3, [r7, #0]
 8031d5a:	4603      	mov	r3, r0
 8031d5c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8031d5e:	2300      	movs	r3, #0
 8031d60:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8031d62:	683b      	ldr	r3, [r7, #0]
 8031d64:	2b00      	cmp	r3, #0
 8031d66:	d022      	beq.n	8031dae <bhy2_hif_get_regs+0x60>
 8031d68:	683b      	ldr	r3, [r7, #0]
 8031d6a:	681b      	ldr	r3, [r3, #0]
 8031d6c:	2b00      	cmp	r3, #0
 8031d6e:	d01e      	beq.n	8031dae <bhy2_hif_get_regs+0x60>
 8031d70:	68bb      	ldr	r3, [r7, #8]
 8031d72:	2b00      	cmp	r3, #0
 8031d74:	d01b      	beq.n	8031dae <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8031d76:	683b      	ldr	r3, [r7, #0]
 8031d78:	7b1b      	ldrb	r3, [r3, #12]
 8031d7a:	2b01      	cmp	r3, #1
 8031d7c:	d103      	bne.n	8031d86 <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8031d7e:	7bfb      	ldrb	r3, [r7, #15]
 8031d80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8031d84:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8031d86:	683b      	ldr	r3, [r7, #0]
 8031d88:	681c      	ldr	r4, [r3, #0]
 8031d8a:	683b      	ldr	r3, [r7, #0]
 8031d8c:	691b      	ldr	r3, [r3, #16]
 8031d8e:	7bf8      	ldrb	r0, [r7, #15]
 8031d90:	687a      	ldr	r2, [r7, #4]
 8031d92:	68b9      	ldr	r1, [r7, #8]
 8031d94:	47a0      	blx	r4
 8031d96:	4603      	mov	r3, r0
 8031d98:	461a      	mov	r2, r3
 8031d9a:	683b      	ldr	r3, [r7, #0]
 8031d9c:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8031d9e:	683b      	ldr	r3, [r7, #0]
 8031da0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8031da4:	2b00      	cmp	r3, #0
 8031da6:	d004      	beq.n	8031db2 <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8031da8:	23fd      	movs	r3, #253	; 0xfd
 8031daa:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8031dac:	e001      	b.n	8031db2 <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8031dae:	23ff      	movs	r3, #255	; 0xff
 8031db0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8031db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8031db6:	4618      	mov	r0, r3
 8031db8:	371c      	adds	r7, #28
 8031dba:	46bd      	mov	sp, r7
 8031dbc:	bd90      	pop	{r4, r7, pc}

08031dbe <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8031dbe:	b590      	push	{r4, r7, lr}
 8031dc0:	b087      	sub	sp, #28
 8031dc2:	af00      	add	r7, sp, #0
 8031dc4:	60b9      	str	r1, [r7, #8]
 8031dc6:	607a      	str	r2, [r7, #4]
 8031dc8:	603b      	str	r3, [r7, #0]
 8031dca:	4603      	mov	r3, r0
 8031dcc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8031dce:	2300      	movs	r3, #0
 8031dd0:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8031dd2:	683b      	ldr	r3, [r7, #0]
 8031dd4:	2b00      	cmp	r3, #0
 8031dd6:	d022      	beq.n	8031e1e <bhy2_hif_set_regs+0x60>
 8031dd8:	683b      	ldr	r3, [r7, #0]
 8031dda:	681b      	ldr	r3, [r3, #0]
 8031ddc:	2b00      	cmp	r3, #0
 8031dde:	d01e      	beq.n	8031e1e <bhy2_hif_set_regs+0x60>
 8031de0:	68bb      	ldr	r3, [r7, #8]
 8031de2:	2b00      	cmp	r3, #0
 8031de4:	d01b      	beq.n	8031e1e <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8031de6:	683b      	ldr	r3, [r7, #0]
 8031de8:	7b1b      	ldrb	r3, [r3, #12]
 8031dea:	2b01      	cmp	r3, #1
 8031dec:	d103      	bne.n	8031df6 <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8031dee:	7bfb      	ldrb	r3, [r7, #15]
 8031df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8031df4:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8031df6:	683b      	ldr	r3, [r7, #0]
 8031df8:	685c      	ldr	r4, [r3, #4]
 8031dfa:	683b      	ldr	r3, [r7, #0]
 8031dfc:	691b      	ldr	r3, [r3, #16]
 8031dfe:	7bf8      	ldrb	r0, [r7, #15]
 8031e00:	687a      	ldr	r2, [r7, #4]
 8031e02:	68b9      	ldr	r1, [r7, #8]
 8031e04:	47a0      	blx	r4
 8031e06:	4603      	mov	r3, r0
 8031e08:	461a      	mov	r2, r3
 8031e0a:	683b      	ldr	r3, [r7, #0]
 8031e0c:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8031e0e:	683b      	ldr	r3, [r7, #0]
 8031e10:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8031e14:	2b00      	cmp	r3, #0
 8031e16:	d004      	beq.n	8031e22 <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8031e18:	23fd      	movs	r3, #253	; 0xfd
 8031e1a:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8031e1c:	e001      	b.n	8031e22 <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8031e1e:	23ff      	movs	r3, #255	; 0xff
 8031e20:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8031e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8031e26:	4618      	mov	r0, r3
 8031e28:	371c      	adds	r7, #28
 8031e2a:	46bd      	mov	sp, r7
 8031e2c:	bd90      	pop	{r4, r7, pc}

08031e2e <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8031e2e:	b580      	push	{r7, lr}
 8031e30:	b084      	sub	sp, #16
 8031e32:	af00      	add	r7, sp, #0
 8031e34:	6078      	str	r0, [r7, #4]
 8031e36:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8031e38:	2300      	movs	r3, #0
 8031e3a:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8031e3c:	683b      	ldr	r3, [r7, #0]
 8031e3e:	2b00      	cmp	r3, #0
 8031e40:	d00b      	beq.n	8031e5a <bhy2_hif_delay_us+0x2c>
 8031e42:	683b      	ldr	r3, [r7, #0]
 8031e44:	689b      	ldr	r3, [r3, #8]
 8031e46:	2b00      	cmp	r3, #0
 8031e48:	d007      	beq.n	8031e5a <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8031e4a:	683b      	ldr	r3, [r7, #0]
 8031e4c:	689b      	ldr	r3, [r3, #8]
 8031e4e:	683a      	ldr	r2, [r7, #0]
 8031e50:	6912      	ldr	r2, [r2, #16]
 8031e52:	4611      	mov	r1, r2
 8031e54:	6878      	ldr	r0, [r7, #4]
 8031e56:	4798      	blx	r3
 8031e58:	e001      	b.n	8031e5e <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8031e5a:	23ff      	movs	r3, #255	; 0xff
 8031e5c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8031e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8031e62:	4618      	mov	r0, r3
 8031e64:	3710      	adds	r7, #16
 8031e66:	46bd      	mov	sp, r7
 8031e68:	bd80      	pop	{r7, pc}

08031e6a <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8031e6a:	b580      	push	{r7, lr}
 8031e6c:	b088      	sub	sp, #32
 8031e6e:	af04      	add	r7, sp, #16
 8031e70:	60b9      	str	r1, [r7, #8]
 8031e72:	607a      	str	r2, [r7, #4]
 8031e74:	603b      	str	r3, [r7, #0]
 8031e76:	4603      	mov	r3, r0
 8031e78:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8031e7a:	89f8      	ldrh	r0, [r7, #14]
 8031e7c:	683b      	ldr	r3, [r7, #0]
 8031e7e:	9302      	str	r3, [sp, #8]
 8031e80:	2300      	movs	r3, #0
 8031e82:	9301      	str	r3, [sp, #4]
 8031e84:	2300      	movs	r3, #0
 8031e86:	9300      	str	r3, [sp, #0]
 8031e88:	2300      	movs	r3, #0
 8031e8a:	687a      	ldr	r2, [r7, #4]
 8031e8c:	68b9      	ldr	r1, [r7, #8]
 8031e8e:	f7ff fc37 	bl	8031700 <bhy2_hif_exec_cmd_generic>
 8031e92:	4603      	mov	r3, r0
}
 8031e94:	4618      	mov	r0, r3
 8031e96:	3710      	adds	r7, #16
 8031e98:	46bd      	mov	sp, r7
 8031e9a:	bd80      	pop	{r7, pc}

08031e9c <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8031e9c:	b580      	push	{r7, lr}
 8031e9e:	b088      	sub	sp, #32
 8031ea0:	af02      	add	r7, sp, #8
 8031ea2:	60b9      	str	r1, [r7, #8]
 8031ea4:	607a      	str	r2, [r7, #4]
 8031ea6:	603b      	str	r3, [r7, #0]
 8031ea8:	4603      	mov	r3, r0
 8031eaa:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8031eac:	2300      	movs	r3, #0
 8031eae:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8031eb0:	2300      	movs	r3, #0
 8031eb2:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8031eb4:	6a3b      	ldr	r3, [r7, #32]
 8031eb6:	2b00      	cmp	r3, #0
 8031eb8:	d06e      	beq.n	8031f98 <bhy2_hif_get_parameter+0xfc>
 8031eba:	68bb      	ldr	r3, [r7, #8]
 8031ebc:	2b00      	cmp	r3, #0
 8031ebe:	d06b      	beq.n	8031f98 <bhy2_hif_get_parameter+0xfc>
 8031ec0:	683b      	ldr	r3, [r7, #0]
 8031ec2:	2b00      	cmp	r3, #0
 8031ec4:	d068      	beq.n	8031f98 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8031ec6:	683b      	ldr	r3, [r7, #0]
 8031ec8:	2200      	movs	r2, #0
 8031eca:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8031ecc:	f107 0113 	add.w	r1, r7, #19
 8031ed0:	6a3b      	ldr	r3, [r7, #32]
 8031ed2:	2201      	movs	r2, #1
 8031ed4:	2006      	movs	r0, #6
 8031ed6:	f7ff ff3a 	bl	8031d4e <bhy2_hif_get_regs>
 8031eda:	4603      	mov	r3, r0
 8031edc:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8031ede:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8031ee2:	2b00      	cmp	r3, #0
 8031ee4:	d15b      	bne.n	8031f9e <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8031ee6:	7cfb      	ldrb	r3, [r7, #19]
 8031ee8:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8031eea:	7cfb      	ldrb	r3, [r7, #19]
 8031eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8031ef0:	b2db      	uxtb	r3, r3
 8031ef2:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8031ef4:	7cfb      	ldrb	r3, [r7, #19]
 8031ef6:	7dba      	ldrb	r2, [r7, #22]
 8031ef8:	429a      	cmp	r2, r3
 8031efa:	d008      	beq.n	8031f0e <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8031efc:	f107 0113 	add.w	r1, r7, #19
 8031f00:	6a3b      	ldr	r3, [r7, #32]
 8031f02:	2201      	movs	r2, #1
 8031f04:	2006      	movs	r0, #6
 8031f06:	f7ff ff5a 	bl	8031dbe <bhy2_hif_set_regs>
 8031f0a:	4603      	mov	r3, r0
 8031f0c:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8031f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8031f12:	2b00      	cmp	r3, #0
 8031f14:	d143      	bne.n	8031f9e <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8031f16:	89fb      	ldrh	r3, [r7, #14]
 8031f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8031f1c:	b298      	uxth	r0, r3
 8031f1e:	6a3b      	ldr	r3, [r7, #32]
 8031f20:	2200      	movs	r2, #0
 8031f22:	2100      	movs	r1, #0
 8031f24:	f7ff ffa1 	bl	8031e6a <bhy2_hif_exec_cmd>
 8031f28:	4603      	mov	r3, r0
 8031f2a:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8031f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8031f30:	2b00      	cmp	r3, #0
 8031f32:	d134      	bne.n	8031f9e <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8031f34:	6a38      	ldr	r0, [r7, #32]
 8031f36:	f7ff fdbf 	bl	8031ab8 <bhy2_wait_status_ready>
 8031f3a:	4603      	mov	r3, r0
 8031f3c:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8031f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8031f42:	2b00      	cmp	r3, #0
 8031f44:	d12b      	bne.n	8031f9e <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8031f46:	f107 0014 	add.w	r0, r7, #20
 8031f4a:	6a3b      	ldr	r3, [r7, #32]
 8031f4c:	9300      	str	r3, [sp, #0]
 8031f4e:	683b      	ldr	r3, [r7, #0]
 8031f50:	687a      	ldr	r2, [r7, #4]
 8031f52:	68b9      	ldr	r1, [r7, #8]
 8031f54:	f000 f94b 	bl	80321ee <bhy2_hif_get_status_fifo>
 8031f58:	4603      	mov	r3, r0
 8031f5a:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8031f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8031f60:	2b00      	cmp	r3, #0
 8031f62:	d11c      	bne.n	8031f9e <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8031f64:	7cfb      	ldrb	r3, [r7, #19]
 8031f66:	7dba      	ldrb	r2, [r7, #22]
 8031f68:	429a      	cmp	r2, r3
 8031f6a:	d00a      	beq.n	8031f82 <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8031f6c:	7dbb      	ldrb	r3, [r7, #22]
 8031f6e:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8031f70:	f107 0113 	add.w	r1, r7, #19
 8031f74:	6a3b      	ldr	r3, [r7, #32]
 8031f76:	2201      	movs	r2, #1
 8031f78:	2006      	movs	r0, #6
 8031f7a:	f7ff ff20 	bl	8031dbe <bhy2_hif_set_regs>
 8031f7e:	4603      	mov	r3, r0
 8031f80:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8031f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8031f86:	2b00      	cmp	r3, #0
 8031f88:	d109      	bne.n	8031f9e <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8031f8a:	8abb      	ldrh	r3, [r7, #20]
 8031f8c:	89fa      	ldrh	r2, [r7, #14]
 8031f8e:	429a      	cmp	r2, r3
 8031f90:	d005      	beq.n	8031f9e <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8031f92:	23fb      	movs	r3, #251	; 0xfb
 8031f94:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8031f96:	e002      	b.n	8031f9e <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8031f98:	23ff      	movs	r3, #255	; 0xff
 8031f9a:	75fb      	strb	r3, [r7, #23]
 8031f9c:	e000      	b.n	8031fa0 <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8031f9e:	bf00      	nop
    }

    return rslt;
 8031fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8031fa4:	4618      	mov	r0, r3
 8031fa6:	3718      	adds	r7, #24
 8031fa8:	46bd      	mov	sp, r7
 8031faa:	bd80      	pop	{r7, pc}

08031fac <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8031fac:	b580      	push	{r7, lr}
 8031fae:	b082      	sub	sp, #8
 8031fb0:	af00      	add	r7, sp, #0
 8031fb2:	6078      	str	r0, [r7, #4]
 8031fb4:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8031fb6:	683b      	ldr	r3, [r7, #0]
 8031fb8:	2201      	movs	r2, #1
 8031fba:	6879      	ldr	r1, [r7, #4]
 8031fbc:	201c      	movs	r0, #28
 8031fbe:	f7ff fec6 	bl	8031d4e <bhy2_hif_get_regs>
 8031fc2:	4603      	mov	r3, r0
}
 8031fc4:	4618      	mov	r0, r3
 8031fc6:	3708      	adds	r7, #8
 8031fc8:	46bd      	mov	sp, r7
 8031fca:	bd80      	pop	{r7, pc}

08031fcc <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8031fcc:	b580      	push	{r7, lr}
 8031fce:	b084      	sub	sp, #16
 8031fd0:	af00      	add	r7, sp, #0
 8031fd2:	6078      	str	r0, [r7, #4]
 8031fd4:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8031fd6:	687b      	ldr	r3, [r7, #4]
 8031fd8:	2b00      	cmp	r3, #0
 8031fda:	d013      	beq.n	8032004 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8031fdc:	f107 010c 	add.w	r1, r7, #12
 8031fe0:	683b      	ldr	r3, [r7, #0]
 8031fe2:	2202      	movs	r2, #2
 8031fe4:	2020      	movs	r0, #32
 8031fe6:	f7ff feb2 	bl	8031d4e <bhy2_hif_get_regs>
 8031fea:	4603      	mov	r3, r0
 8031fec:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8031fee:	7b3b      	ldrb	r3, [r7, #12]
 8031ff0:	b21a      	sxth	r2, r3
 8031ff2:	7b7b      	ldrb	r3, [r7, #13]
 8031ff4:	021b      	lsls	r3, r3, #8
 8031ff6:	b21b      	sxth	r3, r3
 8031ff8:	4313      	orrs	r3, r2
 8031ffa:	b21b      	sxth	r3, r3
 8031ffc:	b29a      	uxth	r2, r3
 8031ffe:	687b      	ldr	r3, [r7, #4]
 8032000:	801a      	strh	r2, [r3, #0]
 8032002:	e001      	b.n	8032008 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8032004:	23ff      	movs	r3, #255	; 0xff
 8032006:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8032008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 803200c:	4618      	mov	r0, r3
 803200e:	3710      	adds	r7, #16
 8032010:	46bd      	mov	sp, r7
 8032012:	bd80      	pop	{r7, pc}

08032014 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8032014:	b580      	push	{r7, lr}
 8032016:	b082      	sub	sp, #8
 8032018:	af00      	add	r7, sp, #0
 803201a:	6078      	str	r0, [r7, #4]
 803201c:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 803201e:	683b      	ldr	r3, [r7, #0]
 8032020:	2201      	movs	r2, #1
 8032022:	6879      	ldr	r1, [r7, #4]
 8032024:	2025      	movs	r0, #37	; 0x25
 8032026:	f7ff fe92 	bl	8031d4e <bhy2_hif_get_regs>
 803202a:	4603      	mov	r3, r0
}
 803202c:	4618      	mov	r0, r3
 803202e:	3708      	adds	r7, #8
 8032030:	46bd      	mov	sp, r7
 8032032:	bd80      	pop	{r7, pc}

08032034 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8032034:	b580      	push	{r7, lr}
 8032036:	b082      	sub	sp, #8
 8032038:	af00      	add	r7, sp, #0
 803203a:	6078      	str	r0, [r7, #4]
 803203c:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 803203e:	683b      	ldr	r3, [r7, #0]
 8032040:	2201      	movs	r2, #1
 8032042:	6879      	ldr	r1, [r7, #4]
 8032044:	202d      	movs	r0, #45	; 0x2d
 8032046:	f7ff fe82 	bl	8031d4e <bhy2_hif_get_regs>
 803204a:	4603      	mov	r3, r0
}
 803204c:	4618      	mov	r0, r3
 803204e:	3708      	adds	r7, #8
 8032050:	46bd      	mov	sp, r7
 8032052:	bd80      	pop	{r7, pc}

08032054 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8032054:	b580      	push	{r7, lr}
 8032056:	b084      	sub	sp, #16
 8032058:	af00      	add	r7, sp, #0
 803205a:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 803205c:	2301      	movs	r3, #1
 803205e:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8032060:	2300      	movs	r3, #0
 8032062:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8032064:	230f      	movs	r3, #15
 8032066:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8032068:	f107 010b 	add.w	r1, r7, #11
 803206c:	687b      	ldr	r3, [r7, #4]
 803206e:	2201      	movs	r2, #1
 8032070:	2014      	movs	r0, #20
 8032072:	f7ff fea4 	bl	8031dbe <bhy2_hif_set_regs>
 8032076:	4603      	mov	r3, r0
 8032078:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 803207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 803207e:	2b00      	cmp	r3, #0
 8032080:	d12b      	bne.n	80320da <bhy2_hif_reset+0x86>
    {
        while (count--)
 8032082:	e01c      	b.n	80320be <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8032084:	6879      	ldr	r1, [r7, #4]
 8032086:	f242 7010 	movw	r0, #10000	; 0x2710
 803208a:	f7ff fed0 	bl	8031e2e <bhy2_hif_delay_us>
 803208e:	4603      	mov	r3, r0
 8032090:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8032092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8032096:	2b00      	cmp	r3, #0
 8032098:	d111      	bne.n	80320be <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 803209a:	f107 010a 	add.w	r1, r7, #10
 803209e:	687b      	ldr	r3, [r7, #4]
 80320a0:	2201      	movs	r2, #1
 80320a2:	2025      	movs	r0, #37	; 0x25
 80320a4:	f7ff fe53 	bl	8031d4e <bhy2_hif_get_regs>
 80320a8:	4603      	mov	r3, r0
 80320aa:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 80320ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80320b0:	2b00      	cmp	r3, #0
 80320b2:	d104      	bne.n	80320be <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 80320b4:	7abb      	ldrb	r3, [r7, #10]
 80320b6:	f003 0310 	and.w	r3, r3, #16
 80320ba:	2b00      	cmp	r3, #0
 80320bc:	d105      	bne.n	80320ca <bhy2_hif_reset+0x76>
        while (count--)
 80320be:	89bb      	ldrh	r3, [r7, #12]
 80320c0:	1e5a      	subs	r2, r3, #1
 80320c2:	81ba      	strh	r2, [r7, #12]
 80320c4:	2b00      	cmp	r3, #0
 80320c6:	d1dd      	bne.n	8032084 <bhy2_hif_reset+0x30>
 80320c8:	e000      	b.n	80320cc <bhy2_hif_reset+0x78>
                    {
                        break;
 80320ca:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80320cc:	7abb      	ldrb	r3, [r7, #10]
 80320ce:	f003 0310 	and.w	r3, r3, #16
 80320d2:	2b00      	cmp	r3, #0
 80320d4:	d101      	bne.n	80320da <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 80320d6:	23fb      	movs	r3, #251	; 0xfb
 80320d8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80320da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80320de:	4618      	mov	r0, r3
 80320e0:	3710      	adds	r7, #16
 80320e2:	46bd      	mov	sp, r7
 80320e4:	bd80      	pop	{r7, pc}

080320e6 <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 80320e6:	b580      	push	{r7, lr}
 80320e8:	b086      	sub	sp, #24
 80320ea:	af00      	add	r7, sp, #0
 80320ec:	60f8      	str	r0, [r7, #12]
 80320ee:	60b9      	str	r1, [r7, #8]
 80320f0:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 80320f2:	2300      	movs	r3, #0
 80320f4:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 80320f6:	687b      	ldr	r3, [r7, #4]
 80320f8:	2b00      	cmp	r3, #0
 80320fa:	d027      	beq.n	803214c <bhy2_hif_upload_firmware_to_ram+0x66>
 80320fc:	68fb      	ldr	r3, [r7, #12]
 80320fe:	2b00      	cmp	r3, #0
 8032100:	d024      	beq.n	803214c <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 8032102:	68fb      	ldr	r3, [r7, #12]
 8032104:	781b      	ldrb	r3, [r3, #0]
 8032106:	b21a      	sxth	r2, r3
 8032108:	68fb      	ldr	r3, [r7, #12]
 803210a:	3301      	adds	r3, #1
 803210c:	781b      	ldrb	r3, [r3, #0]
 803210e:	021b      	lsls	r3, r3, #8
 8032110:	b21b      	sxth	r3, r3
 8032112:	4313      	orrs	r3, r2
 8032114:	b21b      	sxth	r3, r3
 8032116:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 8032118:	8abb      	ldrh	r3, [r7, #20]
 803211a:	f246 622b 	movw	r2, #26155	; 0x662b
 803211e:	4293      	cmp	r3, r2
 8032120:	d002      	beq.n	8032128 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 8032122:	23fc      	movs	r3, #252	; 0xfc
 8032124:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8032126:	e014      	b.n	8032152 <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 8032128:	687b      	ldr	r3, [r7, #4]
 803212a:	68ba      	ldr	r2, [r7, #8]
 803212c:	68f9      	ldr	r1, [r7, #12]
 803212e:	2002      	movs	r0, #2
 8032130:	f7ff fe9b 	bl	8031e6a <bhy2_hif_exec_cmd>
 8032134:	4603      	mov	r3, r0
 8032136:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 8032138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 803213c:	2b00      	cmp	r3, #0
 803213e:	d108      	bne.n	8032152 <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 8032140:	6878      	ldr	r0, [r7, #4]
 8032142:	f7ff fcf2 	bl	8031b2a <bhy2_hif_check_boot_status_ram>
 8032146:	4603      	mov	r3, r0
 8032148:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 803214a:	e002      	b.n	8032152 <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 803214c:	23ff      	movs	r3, #255	; 0xff
 803214e:	75fb      	strb	r3, [r7, #23]
 8032150:	e000      	b.n	8032154 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 8032152:	bf00      	nop
    }

    return rslt;
 8032154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8032158:	4618      	mov	r0, r3
 803215a:	3718      	adds	r7, #24
 803215c:	46bd      	mov	sp, r7
 803215e:	bd80      	pop	{r7, pc}

08032160 <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 8032160:	b580      	push	{r7, lr}
 8032162:	b084      	sub	sp, #16
 8032164:	af00      	add	r7, sp, #0
 8032166:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 8032168:	687b      	ldr	r3, [r7, #4]
 803216a:	2200      	movs	r2, #0
 803216c:	2100      	movs	r1, #0
 803216e:	2003      	movs	r0, #3
 8032170:	f7ff fe7b 	bl	8031e6a <bhy2_hif_exec_cmd>
 8032174:	4603      	mov	r3, r0
 8032176:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8032178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 803217c:	2b00      	cmp	r3, #0
 803217e:	d104      	bne.n	803218a <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 8032180:	6878      	ldr	r0, [r7, #4]
 8032182:	f7ff fcd2 	bl	8031b2a <bhy2_hif_check_boot_status_ram>
 8032186:	4603      	mov	r3, r0
 8032188:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 803218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 803218e:	4618      	mov	r0, r3
 8032190:	3710      	adds	r7, #16
 8032192:	46bd      	mov	sp, r7
 8032194:	bd80      	pop	{r7, pc}

08032196 <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8032196:	b580      	push	{r7, lr}
 8032198:	b086      	sub	sp, #24
 803219a:	af02      	add	r7, sp, #8
 803219c:	60f8      	str	r0, [r7, #12]
 803219e:	60b9      	str	r1, [r7, #8]
 80321a0:	607a      	str	r2, [r7, #4]
 80321a2:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 80321a4:	69bb      	ldr	r3, [r7, #24]
 80321a6:	9301      	str	r3, [sp, #4]
 80321a8:	683b      	ldr	r3, [r7, #0]
 80321aa:	9300      	str	r3, [sp, #0]
 80321ac:	687b      	ldr	r3, [r7, #4]
 80321ae:	68ba      	ldr	r2, [r7, #8]
 80321b0:	68f9      	ldr	r1, [r7, #12]
 80321b2:	2001      	movs	r0, #1
 80321b4:	f7ff fd00 	bl	8031bb8 <bhy2_hif_get_fifo>
 80321b8:	4603      	mov	r3, r0
}
 80321ba:	4618      	mov	r0, r3
 80321bc:	3710      	adds	r7, #16
 80321be:	46bd      	mov	sp, r7
 80321c0:	bd80      	pop	{r7, pc}

080321c2 <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 80321c2:	b580      	push	{r7, lr}
 80321c4:	b086      	sub	sp, #24
 80321c6:	af02      	add	r7, sp, #8
 80321c8:	60f8      	str	r0, [r7, #12]
 80321ca:	60b9      	str	r1, [r7, #8]
 80321cc:	607a      	str	r2, [r7, #4]
 80321ce:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 80321d0:	69bb      	ldr	r3, [r7, #24]
 80321d2:	9301      	str	r3, [sp, #4]
 80321d4:	683b      	ldr	r3, [r7, #0]
 80321d6:	9300      	str	r3, [sp, #0]
 80321d8:	687b      	ldr	r3, [r7, #4]
 80321da:	68ba      	ldr	r2, [r7, #8]
 80321dc:	68f9      	ldr	r1, [r7, #12]
 80321de:	2002      	movs	r0, #2
 80321e0:	f7ff fcea 	bl	8031bb8 <bhy2_hif_get_fifo>
 80321e4:	4603      	mov	r3, r0
}
 80321e6:	4618      	mov	r0, r3
 80321e8:	3710      	adds	r7, #16
 80321ea:	46bd      	mov	sp, r7
 80321ec:	bd80      	pop	{r7, pc}

080321ee <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 80321ee:	b580      	push	{r7, lr}
 80321f0:	b086      	sub	sp, #24
 80321f2:	af00      	add	r7, sp, #0
 80321f4:	60f8      	str	r0, [r7, #12]
 80321f6:	60b9      	str	r1, [r7, #8]
 80321f8:	607a      	str	r2, [r7, #4]
 80321fa:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 80321fc:	f107 0110 	add.w	r1, r7, #16
 8032200:	6a3b      	ldr	r3, [r7, #32]
 8032202:	2204      	movs	r2, #4
 8032204:	2003      	movs	r0, #3
 8032206:	f7ff fda2 	bl	8031d4e <bhy2_hif_get_regs>
 803220a:	4603      	mov	r3, r0
 803220c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 803220e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8032212:	2b00      	cmp	r3, #0
 8032214:	d130      	bne.n	8032278 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 8032216:	7c3b      	ldrb	r3, [r7, #16]
 8032218:	b21a      	sxth	r2, r3
 803221a:	f107 0310 	add.w	r3, r7, #16
 803221e:	3301      	adds	r3, #1
 8032220:	781b      	ldrb	r3, [r3, #0]
 8032222:	021b      	lsls	r3, r3, #8
 8032224:	b21b      	sxth	r3, r3
 8032226:	4313      	orrs	r3, r2
 8032228:	b21b      	sxth	r3, r3
 803222a:	b29a      	uxth	r2, r3
 803222c:	68fb      	ldr	r3, [r7, #12]
 803222e:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 8032230:	7cbb      	ldrb	r3, [r7, #18]
 8032232:	b21a      	sxth	r2, r3
 8032234:	f107 0310 	add.w	r3, r7, #16
 8032238:	3302      	adds	r3, #2
 803223a:	3301      	adds	r3, #1
 803223c:	781b      	ldrb	r3, [r3, #0]
 803223e:	021b      	lsls	r3, r3, #8
 8032240:	b21b      	sxth	r3, r3
 8032242:	4313      	orrs	r3, r2
 8032244:	b21b      	sxth	r3, r3
 8032246:	b29b      	uxth	r3, r3
 8032248:	461a      	mov	r2, r3
 803224a:	683b      	ldr	r3, [r7, #0]
 803224c:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 803224e:	683b      	ldr	r3, [r7, #0]
 8032250:	681b      	ldr	r3, [r3, #0]
 8032252:	2b00      	cmp	r3, #0
 8032254:	d010      	beq.n	8032278 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 8032256:	683b      	ldr	r3, [r7, #0]
 8032258:	681b      	ldr	r3, [r3, #0]
 803225a:	687a      	ldr	r2, [r7, #4]
 803225c:	429a      	cmp	r2, r3
 803225e:	d202      	bcs.n	8032266 <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 8032260:	23fa      	movs	r3, #250	; 0xfa
 8032262:	75fb      	strb	r3, [r7, #23]
 8032264:	e008      	b.n	8032278 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 8032266:	683b      	ldr	r3, [r7, #0]
 8032268:	681a      	ldr	r2, [r3, #0]
 803226a:	6a3b      	ldr	r3, [r7, #32]
 803226c:	68b9      	ldr	r1, [r7, #8]
 803226e:	2003      	movs	r0, #3
 8032270:	f7ff fd6d 	bl	8031d4e <bhy2_hif_get_regs>
 8032274:	4603      	mov	r3, r0
 8032276:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8032278:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803227c:	4618      	mov	r0, r3
 803227e:	3718      	adds	r7, #24
 8032280:	46bd      	mov	sp, r7
 8032282:	bd80      	pop	{r7, pc}

08032284 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 8032284:	b580      	push	{r7, lr}
 8032286:	b086      	sub	sp, #24
 8032288:	af02      	add	r7, sp, #8
 803228a:	60f8      	str	r0, [r7, #12]
 803228c:	60b9      	str	r1, [r7, #8]
 803228e:	607a      	str	r2, [r7, #4]
 8032290:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8032292:	69bb      	ldr	r3, [r7, #24]
 8032294:	9301      	str	r3, [sp, #4]
 8032296:	683b      	ldr	r3, [r7, #0]
 8032298:	9300      	str	r3, [sp, #0]
 803229a:	687b      	ldr	r3, [r7, #4]
 803229c:	68ba      	ldr	r2, [r7, #8]
 803229e:	68f9      	ldr	r1, [r7, #12]
 80322a0:	2003      	movs	r0, #3
 80322a2:	f7ff fc89 	bl	8031bb8 <bhy2_hif_get_fifo>
 80322a6:	4603      	mov	r3, r0
}
 80322a8:	4618      	mov	r0, r3
 80322aa:	3710      	adds	r7, #16
 80322ac:	46bd      	mov	sp, r7
 80322ae:	bd80      	pop	{r7, pc}

080322b0 <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 80322b0:	b580      	push	{r7, lr}
 80322b2:	b088      	sub	sp, #32
 80322b4:	af00      	add	r7, sp, #0
 80322b6:	4603      	mov	r3, r0
 80322b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80322bc:	6079      	str	r1, [r7, #4]
 80322be:	603a      	str	r2, [r7, #0]
 80322c0:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 80322c2:	68bb      	ldr	r3, [r7, #8]
 80322c4:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 80322c6:	7bfb      	ldrb	r3, [r7, #15]
 80322c8:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 80322ca:	697b      	ldr	r3, [r7, #20]
 80322cc:	b2db      	uxtb	r3, r3
 80322ce:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 80322d0:	697b      	ldr	r3, [r7, #20]
 80322d2:	0a1b      	lsrs	r3, r3, #8
 80322d4:	b2db      	uxtb	r3, r3
 80322d6:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 80322d8:	697b      	ldr	r3, [r7, #20]
 80322da:	0c1b      	lsrs	r3, r3, #16
 80322dc:	b2db      	uxtb	r3, r3
 80322de:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 80322e0:	697b      	ldr	r3, [r7, #20]
 80322e2:	0e1b      	lsrs	r3, r3, #24
 80322e4:	b2db      	uxtb	r3, r3
 80322e6:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 80322e8:	687b      	ldr	r3, [r7, #4]
 80322ea:	b2db      	uxtb	r3, r3
 80322ec:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 80322ee:	687b      	ldr	r3, [r7, #4]
 80322f0:	0a1b      	lsrs	r3, r3, #8
 80322f2:	b2db      	uxtb	r3, r3
 80322f4:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 80322f6:	687b      	ldr	r3, [r7, #4]
 80322f8:	0c1b      	lsrs	r3, r3, #16
 80322fa:	b2db      	uxtb	r3, r3
 80322fc:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 80322fe:	f107 0118 	add.w	r1, r7, #24
 8032302:	683b      	ldr	r3, [r7, #0]
 8032304:	2208      	movs	r2, #8
 8032306:	200d      	movs	r0, #13
 8032308:	f7ff fdaf 	bl	8031e6a <bhy2_hif_exec_cmd>
 803230c:	4603      	mov	r3, r0
}
 803230e:	4618      	mov	r0, r3
 8032310:	3720      	adds	r7, #32
 8032312:	46bd      	mov	sp, r7
 8032314:	bd80      	pop	{r7, pc}

08032316 <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 8032316:	b580      	push	{r7, lr}
 8032318:	b090      	sub	sp, #64	; 0x40
 803231a:	af02      	add	r7, sp, #8
 803231c:	4603      	mov	r3, r0
 803231e:	60b9      	str	r1, [r7, #8]
 8032320:	607a      	str	r2, [r7, #4]
 8032322:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 8032324:	68bb      	ldr	r3, [r7, #8]
 8032326:	2b00      	cmp	r3, #0
 8032328:	f000 80da 	beq.w	80324e0 <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 803232c:	7bfb      	ldrb	r3, [r7, #15]
 803232e:	2bf5      	cmp	r3, #245	; 0xf5
 8032330:	d903      	bls.n	803233a <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 8032332:	23fe      	movs	r3, #254	; 0xfe
 8032334:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8032338:	e0d5      	b.n	80324e6 <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 803233a:	7bfb      	ldrb	r3, [r7, #15]
 803233c:	b29b      	uxth	r3, r3
 803233e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8032342:	b298      	uxth	r0, r3
 8032344:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8032348:	f107 0114 	add.w	r1, r7, #20
 803234c:	687b      	ldr	r3, [r7, #4]
 803234e:	9300      	str	r3, [sp, #0]
 8032350:	4613      	mov	r3, r2
 8032352:	221c      	movs	r2, #28
 8032354:	f7ff fda2 	bl	8031e9c <bhy2_hif_get_parameter>
 8032358:	4603      	mov	r3, r0
 803235a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 803235e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8032362:	2b00      	cmp	r3, #0
 8032364:	f040 80bf 	bne.w	80324e6 <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 8032368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803236a:	2b1c      	cmp	r3, #28
 803236c:	d003      	beq.n	8032376 <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 803236e:	23fe      	movs	r3, #254	; 0xfe
 8032370:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8032374:	e0b7      	b.n	80324e6 <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 8032376:	7d3a      	ldrb	r2, [r7, #20]
 8032378:	68bb      	ldr	r3, [r7, #8]
 803237a:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 803237c:	7d7a      	ldrb	r2, [r7, #21]
 803237e:	68bb      	ldr	r3, [r7, #8]
 8032380:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 8032382:	7dba      	ldrb	r2, [r7, #22]
 8032384:	68bb      	ldr	r3, [r7, #8]
 8032386:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 8032388:	7dfa      	ldrb	r2, [r7, #23]
 803238a:	68bb      	ldr	r3, [r7, #8]
 803238c:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 803238e:	7e3a      	ldrb	r2, [r7, #24]
 8032390:	68bb      	ldr	r3, [r7, #8]
 8032392:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 8032394:	7e7a      	ldrb	r2, [r7, #25]
 8032396:	68bb      	ldr	r3, [r7, #8]
 8032398:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 803239a:	7eba      	ldrb	r2, [r7, #26]
 803239c:	68bb      	ldr	r3, [r7, #8]
 803239e:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 80323a0:	7efa      	ldrb	r2, [r7, #27]
 80323a2:	68bb      	ldr	r3, [r7, #8]
 80323a4:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 80323a6:	7f3a      	ldrb	r2, [r7, #28]
 80323a8:	68bb      	ldr	r3, [r7, #8]
 80323aa:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 80323ac:	7f7a      	ldrb	r2, [r7, #29]
 80323ae:	68bb      	ldr	r3, [r7, #8]
 80323b0:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 80323b2:	7fba      	ldrb	r2, [r7, #30]
 80323b4:	68bb      	ldr	r3, [r7, #8]
 80323b6:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 80323b8:	7ffa      	ldrb	r2, [r7, #31]
 80323ba:	68bb      	ldr	r3, [r7, #8]
 80323bc:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 80323be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80323c2:	68bb      	ldr	r3, [r7, #8]
 80323c4:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 80323c6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80323ca:	68bb      	ldr	r3, [r7, #8]
 80323cc:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 80323ce:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80323d2:	68bb      	ldr	r3, [r7, #8]
 80323d4:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 80323d6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80323da:	68bb      	ldr	r3, [r7, #8]
 80323dc:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 80323de:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80323e2:	68bb      	ldr	r3, [r7, #8]
 80323e4:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 80323e6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80323ea:	68bb      	ldr	r3, [r7, #8]
 80323ec:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 80323ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80323f2:	68bb      	ldr	r3, [r7, #8]
 80323f4:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 80323f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80323fa:	68bb      	ldr	r3, [r7, #8]
 80323fc:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 80323fe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8032402:	68bb      	ldr	r3, [r7, #8]
 8032404:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 8032406:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 803240a:	68bb      	ldr	r3, [r7, #8]
 803240c:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 803240e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8032412:	68bb      	ldr	r3, [r7, #8]
 8032414:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 8032416:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 803241a:	68bb      	ldr	r3, [r7, #8]
 803241c:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 803241e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8032422:	68bb      	ldr	r3, [r7, #8]
 8032424:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 8032426:	68bb      	ldr	r3, [r7, #8]
 8032428:	791b      	ldrb	r3, [r3, #4]
 803242a:	b21a      	sxth	r2, r3
 803242c:	68bb      	ldr	r3, [r7, #8]
 803242e:	795b      	ldrb	r3, [r3, #5]
 8032430:	021b      	lsls	r3, r3, #8
 8032432:	b21b      	sxth	r3, r3
 8032434:	4313      	orrs	r3, r2
 8032436:	b21b      	sxth	r3, r3
 8032438:	b29a      	uxth	r2, r3
 803243a:	68bb      	ldr	r3, [r7, #8]
 803243c:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 803243e:	68bb      	ldr	r3, [r7, #8]
 8032440:	799b      	ldrb	r3, [r3, #6]
 8032442:	b21a      	sxth	r2, r3
 8032444:	68bb      	ldr	r3, [r7, #8]
 8032446:	79db      	ldrb	r3, [r3, #7]
 8032448:	021b      	lsls	r3, r3, #8
 803244a:	b21b      	sxth	r3, r3
 803244c:	4313      	orrs	r3, r2
 803244e:	b21b      	sxth	r3, r3
 8032450:	b29a      	uxth	r2, r3
 8032452:	68bb      	ldr	r3, [r7, #8]
 8032454:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 8032456:	68bb      	ldr	r3, [r7, #8]
 8032458:	7a1b      	ldrb	r3, [r3, #8]
 803245a:	461a      	mov	r2, r3
 803245c:	68bb      	ldr	r3, [r7, #8]
 803245e:	7a5b      	ldrb	r3, [r3, #9]
 8032460:	021b      	lsls	r3, r3, #8
 8032462:	431a      	orrs	r2, r3
 8032464:	68bb      	ldr	r3, [r7, #8]
 8032466:	7a9b      	ldrb	r3, [r3, #10]
 8032468:	041b      	lsls	r3, r3, #16
 803246a:	431a      	orrs	r2, r3
 803246c:	68bb      	ldr	r3, [r7, #8]
 803246e:	7adb      	ldrb	r3, [r3, #11]
 8032470:	061b      	lsls	r3, r3, #24
 8032472:	431a      	orrs	r2, r3
 8032474:	68bb      	ldr	r3, [r7, #8]
 8032476:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 8032478:	68bb      	ldr	r3, [r7, #8]
 803247a:	7b1b      	ldrb	r3, [r3, #12]
 803247c:	461a      	mov	r2, r3
 803247e:	68bb      	ldr	r3, [r7, #8]
 8032480:	7b5b      	ldrb	r3, [r3, #13]
 8032482:	021b      	lsls	r3, r3, #8
 8032484:	431a      	orrs	r2, r3
 8032486:	68bb      	ldr	r3, [r7, #8]
 8032488:	7b9b      	ldrb	r3, [r3, #14]
 803248a:	041b      	lsls	r3, r3, #16
 803248c:	431a      	orrs	r2, r3
 803248e:	68bb      	ldr	r3, [r7, #8]
 8032490:	7bdb      	ldrb	r3, [r3, #15]
 8032492:	061b      	lsls	r3, r3, #24
 8032494:	431a      	orrs	r2, r3
 8032496:	68bb      	ldr	r3, [r7, #8]
 8032498:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 803249a:	68bb      	ldr	r3, [r7, #8]
 803249c:	7c1b      	ldrb	r3, [r3, #16]
 803249e:	461a      	mov	r2, r3
 80324a0:	68bb      	ldr	r3, [r7, #8]
 80324a2:	7c5b      	ldrb	r3, [r3, #17]
 80324a4:	021b      	lsls	r3, r3, #8
 80324a6:	431a      	orrs	r2, r3
 80324a8:	68bb      	ldr	r3, [r7, #8]
 80324aa:	7c9b      	ldrb	r3, [r3, #18]
 80324ac:	041b      	lsls	r3, r3, #16
 80324ae:	431a      	orrs	r2, r3
 80324b0:	68bb      	ldr	r3, [r7, #8]
 80324b2:	7cdb      	ldrb	r3, [r3, #19]
 80324b4:	061b      	lsls	r3, r3, #24
 80324b6:	431a      	orrs	r2, r3
 80324b8:	68bb      	ldr	r3, [r7, #8]
 80324ba:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 80324bc:	68bb      	ldr	r3, [r7, #8]
 80324be:	7e1b      	ldrb	r3, [r3, #24]
 80324c0:	461a      	mov	r2, r3
 80324c2:	68bb      	ldr	r3, [r7, #8]
 80324c4:	7e5b      	ldrb	r3, [r3, #25]
 80324c6:	021b      	lsls	r3, r3, #8
 80324c8:	431a      	orrs	r2, r3
 80324ca:	68bb      	ldr	r3, [r7, #8]
 80324cc:	7e9b      	ldrb	r3, [r3, #26]
 80324ce:	041b      	lsls	r3, r3, #16
 80324d0:	431a      	orrs	r2, r3
 80324d2:	68bb      	ldr	r3, [r7, #8]
 80324d4:	7edb      	ldrb	r3, [r3, #27]
 80324d6:	061b      	lsls	r3, r3, #24
 80324d8:	431a      	orrs	r2, r3
 80324da:	68bb      	ldr	r3, [r7, #8]
 80324dc:	619a      	str	r2, [r3, #24]
 80324de:	e002      	b.n	80324e6 <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80324e0:	23ff      	movs	r3, #255	; 0xff
 80324e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 80324e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80324ea:	4618      	mov	r0, r3
 80324ec:	3738      	adds	r7, #56	; 0x38
 80324ee:	46bd      	mov	sp, r7
 80324f0:	bd80      	pop	{r7, pc}

080324f2 <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 80324f2:	b480      	push	{r7}
 80324f4:	b083      	sub	sp, #12
 80324f6:	af00      	add	r7, sp, #0
 80324f8:	6078      	str	r0, [r7, #4]
 80324fa:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 80324fc:	687b      	ldr	r3, [r7, #4]
 80324fe:	781b      	ldrb	r3, [r3, #0]
 8032500:	b21a      	sxth	r2, r3
 8032502:	687b      	ldr	r3, [r7, #4]
 8032504:	3301      	adds	r3, #1
 8032506:	781b      	ldrb	r3, [r3, #0]
 8032508:	021b      	lsls	r3, r3, #8
 803250a:	b21b      	sxth	r3, r3
 803250c:	4313      	orrs	r3, r2
 803250e:	b21a      	sxth	r2, r3
 8032510:	683b      	ldr	r3, [r7, #0]
 8032512:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 8032514:	687b      	ldr	r3, [r7, #4]
 8032516:	3302      	adds	r3, #2
 8032518:	781b      	ldrb	r3, [r3, #0]
 803251a:	b21a      	sxth	r2, r3
 803251c:	687b      	ldr	r3, [r7, #4]
 803251e:	3303      	adds	r3, #3
 8032520:	781b      	ldrb	r3, [r3, #0]
 8032522:	021b      	lsls	r3, r3, #8
 8032524:	b21b      	sxth	r3, r3
 8032526:	4313      	orrs	r3, r2
 8032528:	b21a      	sxth	r2, r3
 803252a:	683b      	ldr	r3, [r7, #0]
 803252c:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 803252e:	687b      	ldr	r3, [r7, #4]
 8032530:	3304      	adds	r3, #4
 8032532:	781b      	ldrb	r3, [r3, #0]
 8032534:	b21a      	sxth	r2, r3
 8032536:	687b      	ldr	r3, [r7, #4]
 8032538:	3305      	adds	r3, #5
 803253a:	781b      	ldrb	r3, [r3, #0]
 803253c:	021b      	lsls	r3, r3, #8
 803253e:	b21b      	sxth	r3, r3
 8032540:	4313      	orrs	r3, r2
 8032542:	b21a      	sxth	r2, r3
 8032544:	683b      	ldr	r3, [r7, #0]
 8032546:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 8032548:	687b      	ldr	r3, [r7, #4]
 803254a:	3306      	adds	r3, #6
 803254c:	781b      	ldrb	r3, [r3, #0]
 803254e:	b21a      	sxth	r2, r3
 8032550:	687b      	ldr	r3, [r7, #4]
 8032552:	3307      	adds	r3, #7
 8032554:	781b      	ldrb	r3, [r3, #0]
 8032556:	021b      	lsls	r3, r3, #8
 8032558:	b21b      	sxth	r3, r3
 803255a:	4313      	orrs	r3, r2
 803255c:	b21a      	sxth	r2, r3
 803255e:	683b      	ldr	r3, [r7, #0]
 8032560:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 8032562:	687b      	ldr	r3, [r7, #4]
 8032564:	3308      	adds	r3, #8
 8032566:	781b      	ldrb	r3, [r3, #0]
 8032568:	b21a      	sxth	r2, r3
 803256a:	687b      	ldr	r3, [r7, #4]
 803256c:	3309      	adds	r3, #9
 803256e:	781b      	ldrb	r3, [r3, #0]
 8032570:	021b      	lsls	r3, r3, #8
 8032572:	b21b      	sxth	r3, r3
 8032574:	4313      	orrs	r3, r2
 8032576:	b21b      	sxth	r3, r3
 8032578:	b29a      	uxth	r2, r3
 803257a:	683b      	ldr	r3, [r7, #0]
 803257c:	811a      	strh	r2, [r3, #8]
}
 803257e:	bf00      	nop
 8032580:	370c      	adds	r7, #12
 8032582:	46bd      	mov	sp, r7
 8032584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032588:	4770      	bx	lr
	...

0803258c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803258c:	b580      	push	{r7, lr}
 803258e:	b084      	sub	sp, #16
 8032590:	af00      	add	r7, sp, #0
 8032592:	6078      	str	r0, [r7, #4]
 8032594:	460b      	mov	r3, r1
 8032596:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8032598:	f44f 7007 	mov.w	r0, #540	; 0x21c
 803259c:	f002 fc54 	bl	8034e48 <USBD_static_malloc>
 80325a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80325a2:	68fb      	ldr	r3, [r7, #12]
 80325a4:	2b00      	cmp	r3, #0
 80325a6:	d109      	bne.n	80325bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80325a8:	687b      	ldr	r3, [r7, #4]
 80325aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80325ae:	687b      	ldr	r3, [r7, #4]
 80325b0:	32b0      	adds	r2, #176	; 0xb0
 80325b2:	2100      	movs	r1, #0
 80325b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80325b8:	2302      	movs	r3, #2
 80325ba:	e0d4      	b.n	8032766 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80325bc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80325c0:	2100      	movs	r1, #0
 80325c2:	68f8      	ldr	r0, [r7, #12]
 80325c4:	f009 fb88 	bl	803bcd8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80325c8:	687b      	ldr	r3, [r7, #4]
 80325ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80325ce:	687b      	ldr	r3, [r7, #4]
 80325d0:	32b0      	adds	r2, #176	; 0xb0
 80325d2:	68f9      	ldr	r1, [r7, #12]
 80325d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80325d8:	687b      	ldr	r3, [r7, #4]
 80325da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80325de:	687b      	ldr	r3, [r7, #4]
 80325e0:	32b0      	adds	r2, #176	; 0xb0
 80325e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80325e6:	687b      	ldr	r3, [r7, #4]
 80325e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80325ec:	687b      	ldr	r3, [r7, #4]
 80325ee:	7c1b      	ldrb	r3, [r3, #16]
 80325f0:	2b00      	cmp	r3, #0
 80325f2:	d138      	bne.n	8032666 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80325f4:	4b5e      	ldr	r3, [pc, #376]	; (8032770 <USBD_CDC_Init+0x1e4>)
 80325f6:	7819      	ldrb	r1, [r3, #0]
 80325f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80325fc:	2202      	movs	r2, #2
 80325fe:	6878      	ldr	r0, [r7, #4]
 8032600:	f002 faff 	bl	8034c02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8032604:	4b5a      	ldr	r3, [pc, #360]	; (8032770 <USBD_CDC_Init+0x1e4>)
 8032606:	781b      	ldrb	r3, [r3, #0]
 8032608:	f003 020f 	and.w	r2, r3, #15
 803260c:	6879      	ldr	r1, [r7, #4]
 803260e:	4613      	mov	r3, r2
 8032610:	009b      	lsls	r3, r3, #2
 8032612:	4413      	add	r3, r2
 8032614:	009b      	lsls	r3, r3, #2
 8032616:	440b      	add	r3, r1
 8032618:	3324      	adds	r3, #36	; 0x24
 803261a:	2201      	movs	r2, #1
 803261c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803261e:	4b55      	ldr	r3, [pc, #340]	; (8032774 <USBD_CDC_Init+0x1e8>)
 8032620:	7819      	ldrb	r1, [r3, #0]
 8032622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8032626:	2202      	movs	r2, #2
 8032628:	6878      	ldr	r0, [r7, #4]
 803262a:	f002 faea 	bl	8034c02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803262e:	4b51      	ldr	r3, [pc, #324]	; (8032774 <USBD_CDC_Init+0x1e8>)
 8032630:	781b      	ldrb	r3, [r3, #0]
 8032632:	f003 020f 	and.w	r2, r3, #15
 8032636:	6879      	ldr	r1, [r7, #4]
 8032638:	4613      	mov	r3, r2
 803263a:	009b      	lsls	r3, r3, #2
 803263c:	4413      	add	r3, r2
 803263e:	009b      	lsls	r3, r3, #2
 8032640:	440b      	add	r3, r1
 8032642:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8032646:	2201      	movs	r2, #1
 8032648:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 803264a:	4b4b      	ldr	r3, [pc, #300]	; (8032778 <USBD_CDC_Init+0x1ec>)
 803264c:	781b      	ldrb	r3, [r3, #0]
 803264e:	f003 020f 	and.w	r2, r3, #15
 8032652:	6879      	ldr	r1, [r7, #4]
 8032654:	4613      	mov	r3, r2
 8032656:	009b      	lsls	r3, r3, #2
 8032658:	4413      	add	r3, r2
 803265a:	009b      	lsls	r3, r3, #2
 803265c:	440b      	add	r3, r1
 803265e:	3326      	adds	r3, #38	; 0x26
 8032660:	2210      	movs	r2, #16
 8032662:	801a      	strh	r2, [r3, #0]
 8032664:	e035      	b.n	80326d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8032666:	4b42      	ldr	r3, [pc, #264]	; (8032770 <USBD_CDC_Init+0x1e4>)
 8032668:	7819      	ldrb	r1, [r3, #0]
 803266a:	2340      	movs	r3, #64	; 0x40
 803266c:	2202      	movs	r2, #2
 803266e:	6878      	ldr	r0, [r7, #4]
 8032670:	f002 fac7 	bl	8034c02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8032674:	4b3e      	ldr	r3, [pc, #248]	; (8032770 <USBD_CDC_Init+0x1e4>)
 8032676:	781b      	ldrb	r3, [r3, #0]
 8032678:	f003 020f 	and.w	r2, r3, #15
 803267c:	6879      	ldr	r1, [r7, #4]
 803267e:	4613      	mov	r3, r2
 8032680:	009b      	lsls	r3, r3, #2
 8032682:	4413      	add	r3, r2
 8032684:	009b      	lsls	r3, r3, #2
 8032686:	440b      	add	r3, r1
 8032688:	3324      	adds	r3, #36	; 0x24
 803268a:	2201      	movs	r2, #1
 803268c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803268e:	4b39      	ldr	r3, [pc, #228]	; (8032774 <USBD_CDC_Init+0x1e8>)
 8032690:	7819      	ldrb	r1, [r3, #0]
 8032692:	2340      	movs	r3, #64	; 0x40
 8032694:	2202      	movs	r2, #2
 8032696:	6878      	ldr	r0, [r7, #4]
 8032698:	f002 fab3 	bl	8034c02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803269c:	4b35      	ldr	r3, [pc, #212]	; (8032774 <USBD_CDC_Init+0x1e8>)
 803269e:	781b      	ldrb	r3, [r3, #0]
 80326a0:	f003 020f 	and.w	r2, r3, #15
 80326a4:	6879      	ldr	r1, [r7, #4]
 80326a6:	4613      	mov	r3, r2
 80326a8:	009b      	lsls	r3, r3, #2
 80326aa:	4413      	add	r3, r2
 80326ac:	009b      	lsls	r3, r3, #2
 80326ae:	440b      	add	r3, r1
 80326b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80326b4:	2201      	movs	r2, #1
 80326b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80326b8:	4b2f      	ldr	r3, [pc, #188]	; (8032778 <USBD_CDC_Init+0x1ec>)
 80326ba:	781b      	ldrb	r3, [r3, #0]
 80326bc:	f003 020f 	and.w	r2, r3, #15
 80326c0:	6879      	ldr	r1, [r7, #4]
 80326c2:	4613      	mov	r3, r2
 80326c4:	009b      	lsls	r3, r3, #2
 80326c6:	4413      	add	r3, r2
 80326c8:	009b      	lsls	r3, r3, #2
 80326ca:	440b      	add	r3, r1
 80326cc:	3326      	adds	r3, #38	; 0x26
 80326ce:	2210      	movs	r2, #16
 80326d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80326d2:	4b29      	ldr	r3, [pc, #164]	; (8032778 <USBD_CDC_Init+0x1ec>)
 80326d4:	7819      	ldrb	r1, [r3, #0]
 80326d6:	2308      	movs	r3, #8
 80326d8:	2203      	movs	r2, #3
 80326da:	6878      	ldr	r0, [r7, #4]
 80326dc:	f002 fa91 	bl	8034c02 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80326e0:	4b25      	ldr	r3, [pc, #148]	; (8032778 <USBD_CDC_Init+0x1ec>)
 80326e2:	781b      	ldrb	r3, [r3, #0]
 80326e4:	f003 020f 	and.w	r2, r3, #15
 80326e8:	6879      	ldr	r1, [r7, #4]
 80326ea:	4613      	mov	r3, r2
 80326ec:	009b      	lsls	r3, r3, #2
 80326ee:	4413      	add	r3, r2
 80326f0:	009b      	lsls	r3, r3, #2
 80326f2:	440b      	add	r3, r1
 80326f4:	3324      	adds	r3, #36	; 0x24
 80326f6:	2201      	movs	r2, #1
 80326f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80326fa:	68fb      	ldr	r3, [r7, #12]
 80326fc:	2200      	movs	r2, #0
 80326fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8032702:	687b      	ldr	r3, [r7, #4]
 8032704:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8032708:	687a      	ldr	r2, [r7, #4]
 803270a:	33b0      	adds	r3, #176	; 0xb0
 803270c:	009b      	lsls	r3, r3, #2
 803270e:	4413      	add	r3, r2
 8032710:	685b      	ldr	r3, [r3, #4]
 8032712:	681b      	ldr	r3, [r3, #0]
 8032714:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8032716:	68fb      	ldr	r3, [r7, #12]
 8032718:	2200      	movs	r2, #0
 803271a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 803271e:	68fb      	ldr	r3, [r7, #12]
 8032720:	2200      	movs	r2, #0
 8032722:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8032726:	68fb      	ldr	r3, [r7, #12]
 8032728:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 803272c:	2b00      	cmp	r3, #0
 803272e:	d101      	bne.n	8032734 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8032730:	2302      	movs	r3, #2
 8032732:	e018      	b.n	8032766 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8032734:	687b      	ldr	r3, [r7, #4]
 8032736:	7c1b      	ldrb	r3, [r3, #16]
 8032738:	2b00      	cmp	r3, #0
 803273a:	d10a      	bne.n	8032752 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803273c:	4b0d      	ldr	r3, [pc, #52]	; (8032774 <USBD_CDC_Init+0x1e8>)
 803273e:	7819      	ldrb	r1, [r3, #0]
 8032740:	68fb      	ldr	r3, [r7, #12]
 8032742:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8032746:	f44f 7300 	mov.w	r3, #512	; 0x200
 803274a:	6878      	ldr	r0, [r7, #4]
 803274c:	f002 fb48 	bl	8034de0 <USBD_LL_PrepareReceive>
 8032750:	e008      	b.n	8032764 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8032752:	4b08      	ldr	r3, [pc, #32]	; (8032774 <USBD_CDC_Init+0x1e8>)
 8032754:	7819      	ldrb	r1, [r3, #0]
 8032756:	68fb      	ldr	r3, [r7, #12]
 8032758:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803275c:	2340      	movs	r3, #64	; 0x40
 803275e:	6878      	ldr	r0, [r7, #4]
 8032760:	f002 fb3e 	bl	8034de0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8032764:	2300      	movs	r3, #0
}
 8032766:	4618      	mov	r0, r3
 8032768:	3710      	adds	r7, #16
 803276a:	46bd      	mov	sp, r7
 803276c:	bd80      	pop	{r7, pc}
 803276e:	bf00      	nop
 8032770:	24000097 	.word	0x24000097
 8032774:	24000098 	.word	0x24000098
 8032778:	24000099 	.word	0x24000099

0803277c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803277c:	b580      	push	{r7, lr}
 803277e:	b082      	sub	sp, #8
 8032780:	af00      	add	r7, sp, #0
 8032782:	6078      	str	r0, [r7, #4]
 8032784:	460b      	mov	r3, r1
 8032786:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8032788:	4b3a      	ldr	r3, [pc, #232]	; (8032874 <USBD_CDC_DeInit+0xf8>)
 803278a:	781b      	ldrb	r3, [r3, #0]
 803278c:	4619      	mov	r1, r3
 803278e:	6878      	ldr	r0, [r7, #4]
 8032790:	f002 fa5d 	bl	8034c4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8032794:	4b37      	ldr	r3, [pc, #220]	; (8032874 <USBD_CDC_DeInit+0xf8>)
 8032796:	781b      	ldrb	r3, [r3, #0]
 8032798:	f003 020f 	and.w	r2, r3, #15
 803279c:	6879      	ldr	r1, [r7, #4]
 803279e:	4613      	mov	r3, r2
 80327a0:	009b      	lsls	r3, r3, #2
 80327a2:	4413      	add	r3, r2
 80327a4:	009b      	lsls	r3, r3, #2
 80327a6:	440b      	add	r3, r1
 80327a8:	3324      	adds	r3, #36	; 0x24
 80327aa:	2200      	movs	r2, #0
 80327ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80327ae:	4b32      	ldr	r3, [pc, #200]	; (8032878 <USBD_CDC_DeInit+0xfc>)
 80327b0:	781b      	ldrb	r3, [r3, #0]
 80327b2:	4619      	mov	r1, r3
 80327b4:	6878      	ldr	r0, [r7, #4]
 80327b6:	f002 fa4a 	bl	8034c4e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80327ba:	4b2f      	ldr	r3, [pc, #188]	; (8032878 <USBD_CDC_DeInit+0xfc>)
 80327bc:	781b      	ldrb	r3, [r3, #0]
 80327be:	f003 020f 	and.w	r2, r3, #15
 80327c2:	6879      	ldr	r1, [r7, #4]
 80327c4:	4613      	mov	r3, r2
 80327c6:	009b      	lsls	r3, r3, #2
 80327c8:	4413      	add	r3, r2
 80327ca:	009b      	lsls	r3, r3, #2
 80327cc:	440b      	add	r3, r1
 80327ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80327d2:	2200      	movs	r2, #0
 80327d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80327d6:	4b29      	ldr	r3, [pc, #164]	; (803287c <USBD_CDC_DeInit+0x100>)
 80327d8:	781b      	ldrb	r3, [r3, #0]
 80327da:	4619      	mov	r1, r3
 80327dc:	6878      	ldr	r0, [r7, #4]
 80327de:	f002 fa36 	bl	8034c4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80327e2:	4b26      	ldr	r3, [pc, #152]	; (803287c <USBD_CDC_DeInit+0x100>)
 80327e4:	781b      	ldrb	r3, [r3, #0]
 80327e6:	f003 020f 	and.w	r2, r3, #15
 80327ea:	6879      	ldr	r1, [r7, #4]
 80327ec:	4613      	mov	r3, r2
 80327ee:	009b      	lsls	r3, r3, #2
 80327f0:	4413      	add	r3, r2
 80327f2:	009b      	lsls	r3, r3, #2
 80327f4:	440b      	add	r3, r1
 80327f6:	3324      	adds	r3, #36	; 0x24
 80327f8:	2200      	movs	r2, #0
 80327fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80327fc:	4b1f      	ldr	r3, [pc, #124]	; (803287c <USBD_CDC_DeInit+0x100>)
 80327fe:	781b      	ldrb	r3, [r3, #0]
 8032800:	f003 020f 	and.w	r2, r3, #15
 8032804:	6879      	ldr	r1, [r7, #4]
 8032806:	4613      	mov	r3, r2
 8032808:	009b      	lsls	r3, r3, #2
 803280a:	4413      	add	r3, r2
 803280c:	009b      	lsls	r3, r3, #2
 803280e:	440b      	add	r3, r1
 8032810:	3326      	adds	r3, #38	; 0x26
 8032812:	2200      	movs	r2, #0
 8032814:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8032816:	687b      	ldr	r3, [r7, #4]
 8032818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803281c:	687b      	ldr	r3, [r7, #4]
 803281e:	32b0      	adds	r2, #176	; 0xb0
 8032820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032824:	2b00      	cmp	r3, #0
 8032826:	d01f      	beq.n	8032868 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8032828:	687b      	ldr	r3, [r7, #4]
 803282a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803282e:	687a      	ldr	r2, [r7, #4]
 8032830:	33b0      	adds	r3, #176	; 0xb0
 8032832:	009b      	lsls	r3, r3, #2
 8032834:	4413      	add	r3, r2
 8032836:	685b      	ldr	r3, [r3, #4]
 8032838:	685b      	ldr	r3, [r3, #4]
 803283a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 803283c:	687b      	ldr	r3, [r7, #4]
 803283e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032842:	687b      	ldr	r3, [r7, #4]
 8032844:	32b0      	adds	r2, #176	; 0xb0
 8032846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803284a:	4618      	mov	r0, r3
 803284c:	f002 fb0a 	bl	8034e64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8032850:	687b      	ldr	r3, [r7, #4]
 8032852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032856:	687b      	ldr	r3, [r7, #4]
 8032858:	32b0      	adds	r2, #176	; 0xb0
 803285a:	2100      	movs	r1, #0
 803285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8032860:	687b      	ldr	r3, [r7, #4]
 8032862:	2200      	movs	r2, #0
 8032864:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8032868:	2300      	movs	r3, #0
}
 803286a:	4618      	mov	r0, r3
 803286c:	3708      	adds	r7, #8
 803286e:	46bd      	mov	sp, r7
 8032870:	bd80      	pop	{r7, pc}
 8032872:	bf00      	nop
 8032874:	24000097 	.word	0x24000097
 8032878:	24000098 	.word	0x24000098
 803287c:	24000099 	.word	0x24000099

08032880 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8032880:	b580      	push	{r7, lr}
 8032882:	b086      	sub	sp, #24
 8032884:	af00      	add	r7, sp, #0
 8032886:	6078      	str	r0, [r7, #4]
 8032888:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803288a:	687b      	ldr	r3, [r7, #4]
 803288c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032890:	687b      	ldr	r3, [r7, #4]
 8032892:	32b0      	adds	r2, #176	; 0xb0
 8032894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032898:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 803289a:	2300      	movs	r3, #0
 803289c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 803289e:	2300      	movs	r3, #0
 80328a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80328a2:	2300      	movs	r3, #0
 80328a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80328a6:	693b      	ldr	r3, [r7, #16]
 80328a8:	2b00      	cmp	r3, #0
 80328aa:	d101      	bne.n	80328b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80328ac:	2303      	movs	r3, #3
 80328ae:	e0bf      	b.n	8032a30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80328b0:	683b      	ldr	r3, [r7, #0]
 80328b2:	781b      	ldrb	r3, [r3, #0]
 80328b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80328b8:	2b00      	cmp	r3, #0
 80328ba:	d050      	beq.n	803295e <USBD_CDC_Setup+0xde>
 80328bc:	2b20      	cmp	r3, #32
 80328be:	f040 80af 	bne.w	8032a20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80328c2:	683b      	ldr	r3, [r7, #0]
 80328c4:	88db      	ldrh	r3, [r3, #6]
 80328c6:	2b00      	cmp	r3, #0
 80328c8:	d03a      	beq.n	8032940 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80328ca:	683b      	ldr	r3, [r7, #0]
 80328cc:	781b      	ldrb	r3, [r3, #0]
 80328ce:	b25b      	sxtb	r3, r3
 80328d0:	2b00      	cmp	r3, #0
 80328d2:	da1b      	bge.n	803290c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80328d4:	687b      	ldr	r3, [r7, #4]
 80328d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80328da:	687a      	ldr	r2, [r7, #4]
 80328dc:	33b0      	adds	r3, #176	; 0xb0
 80328de:	009b      	lsls	r3, r3, #2
 80328e0:	4413      	add	r3, r2
 80328e2:	685b      	ldr	r3, [r3, #4]
 80328e4:	689b      	ldr	r3, [r3, #8]
 80328e6:	683a      	ldr	r2, [r7, #0]
 80328e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80328ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80328ec:	683a      	ldr	r2, [r7, #0]
 80328ee:	88d2      	ldrh	r2, [r2, #6]
 80328f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80328f2:	683b      	ldr	r3, [r7, #0]
 80328f4:	88db      	ldrh	r3, [r3, #6]
 80328f6:	2b07      	cmp	r3, #7
 80328f8:	bf28      	it	cs
 80328fa:	2307      	movcs	r3, #7
 80328fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80328fe:	693b      	ldr	r3, [r7, #16]
 8032900:	89fa      	ldrh	r2, [r7, #14]
 8032902:	4619      	mov	r1, r3
 8032904:	6878      	ldr	r0, [r7, #4]
 8032906:	f001 fd43 	bl	8034390 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 803290a:	e090      	b.n	8032a2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 803290c:	683b      	ldr	r3, [r7, #0]
 803290e:	785a      	ldrb	r2, [r3, #1]
 8032910:	693b      	ldr	r3, [r7, #16]
 8032912:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8032916:	683b      	ldr	r3, [r7, #0]
 8032918:	88db      	ldrh	r3, [r3, #6]
 803291a:	2b3f      	cmp	r3, #63	; 0x3f
 803291c:	d803      	bhi.n	8032926 <USBD_CDC_Setup+0xa6>
 803291e:	683b      	ldr	r3, [r7, #0]
 8032920:	88db      	ldrh	r3, [r3, #6]
 8032922:	b2da      	uxtb	r2, r3
 8032924:	e000      	b.n	8032928 <USBD_CDC_Setup+0xa8>
 8032926:	2240      	movs	r2, #64	; 0x40
 8032928:	693b      	ldr	r3, [r7, #16]
 803292a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 803292e:	6939      	ldr	r1, [r7, #16]
 8032930:	693b      	ldr	r3, [r7, #16]
 8032932:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8032936:	461a      	mov	r2, r3
 8032938:	6878      	ldr	r0, [r7, #4]
 803293a:	f001 fd55 	bl	80343e8 <USBD_CtlPrepareRx>
      break;
 803293e:	e076      	b.n	8032a2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8032940:	687b      	ldr	r3, [r7, #4]
 8032942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8032946:	687a      	ldr	r2, [r7, #4]
 8032948:	33b0      	adds	r3, #176	; 0xb0
 803294a:	009b      	lsls	r3, r3, #2
 803294c:	4413      	add	r3, r2
 803294e:	685b      	ldr	r3, [r3, #4]
 8032950:	689b      	ldr	r3, [r3, #8]
 8032952:	683a      	ldr	r2, [r7, #0]
 8032954:	7850      	ldrb	r0, [r2, #1]
 8032956:	2200      	movs	r2, #0
 8032958:	6839      	ldr	r1, [r7, #0]
 803295a:	4798      	blx	r3
      break;
 803295c:	e067      	b.n	8032a2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803295e:	683b      	ldr	r3, [r7, #0]
 8032960:	785b      	ldrb	r3, [r3, #1]
 8032962:	2b0b      	cmp	r3, #11
 8032964:	d851      	bhi.n	8032a0a <USBD_CDC_Setup+0x18a>
 8032966:	a201      	add	r2, pc, #4	; (adr r2, 803296c <USBD_CDC_Setup+0xec>)
 8032968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803296c:	0803299d 	.word	0x0803299d
 8032970:	08032a19 	.word	0x08032a19
 8032974:	08032a0b 	.word	0x08032a0b
 8032978:	08032a0b 	.word	0x08032a0b
 803297c:	08032a0b 	.word	0x08032a0b
 8032980:	08032a0b 	.word	0x08032a0b
 8032984:	08032a0b 	.word	0x08032a0b
 8032988:	08032a0b 	.word	0x08032a0b
 803298c:	08032a0b 	.word	0x08032a0b
 8032990:	08032a0b 	.word	0x08032a0b
 8032994:	080329c7 	.word	0x080329c7
 8032998:	080329f1 	.word	0x080329f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803299c:	687b      	ldr	r3, [r7, #4]
 803299e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80329a2:	b2db      	uxtb	r3, r3
 80329a4:	2b03      	cmp	r3, #3
 80329a6:	d107      	bne.n	80329b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80329a8:	f107 030a 	add.w	r3, r7, #10
 80329ac:	2202      	movs	r2, #2
 80329ae:	4619      	mov	r1, r3
 80329b0:	6878      	ldr	r0, [r7, #4]
 80329b2:	f001 fced 	bl	8034390 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80329b6:	e032      	b.n	8032a1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80329b8:	6839      	ldr	r1, [r7, #0]
 80329ba:	6878      	ldr	r0, [r7, #4]
 80329bc:	f001 fc77 	bl	80342ae <USBD_CtlError>
            ret = USBD_FAIL;
 80329c0:	2303      	movs	r3, #3
 80329c2:	75fb      	strb	r3, [r7, #23]
          break;
 80329c4:	e02b      	b.n	8032a1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80329c6:	687b      	ldr	r3, [r7, #4]
 80329c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80329cc:	b2db      	uxtb	r3, r3
 80329ce:	2b03      	cmp	r3, #3
 80329d0:	d107      	bne.n	80329e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80329d2:	f107 030d 	add.w	r3, r7, #13
 80329d6:	2201      	movs	r2, #1
 80329d8:	4619      	mov	r1, r3
 80329da:	6878      	ldr	r0, [r7, #4]
 80329dc:	f001 fcd8 	bl	8034390 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80329e0:	e01d      	b.n	8032a1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80329e2:	6839      	ldr	r1, [r7, #0]
 80329e4:	6878      	ldr	r0, [r7, #4]
 80329e6:	f001 fc62 	bl	80342ae <USBD_CtlError>
            ret = USBD_FAIL;
 80329ea:	2303      	movs	r3, #3
 80329ec:	75fb      	strb	r3, [r7, #23]
          break;
 80329ee:	e016      	b.n	8032a1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80329f0:	687b      	ldr	r3, [r7, #4]
 80329f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80329f6:	b2db      	uxtb	r3, r3
 80329f8:	2b03      	cmp	r3, #3
 80329fa:	d00f      	beq.n	8032a1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80329fc:	6839      	ldr	r1, [r7, #0]
 80329fe:	6878      	ldr	r0, [r7, #4]
 8032a00:	f001 fc55 	bl	80342ae <USBD_CtlError>
            ret = USBD_FAIL;
 8032a04:	2303      	movs	r3, #3
 8032a06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8032a08:	e008      	b.n	8032a1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8032a0a:	6839      	ldr	r1, [r7, #0]
 8032a0c:	6878      	ldr	r0, [r7, #4]
 8032a0e:	f001 fc4e 	bl	80342ae <USBD_CtlError>
          ret = USBD_FAIL;
 8032a12:	2303      	movs	r3, #3
 8032a14:	75fb      	strb	r3, [r7, #23]
          break;
 8032a16:	e002      	b.n	8032a1e <USBD_CDC_Setup+0x19e>
          break;
 8032a18:	bf00      	nop
 8032a1a:	e008      	b.n	8032a2e <USBD_CDC_Setup+0x1ae>
          break;
 8032a1c:	bf00      	nop
      }
      break;
 8032a1e:	e006      	b.n	8032a2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8032a20:	6839      	ldr	r1, [r7, #0]
 8032a22:	6878      	ldr	r0, [r7, #4]
 8032a24:	f001 fc43 	bl	80342ae <USBD_CtlError>
      ret = USBD_FAIL;
 8032a28:	2303      	movs	r3, #3
 8032a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8032a2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8032a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8032a30:	4618      	mov	r0, r3
 8032a32:	3718      	adds	r7, #24
 8032a34:	46bd      	mov	sp, r7
 8032a36:	bd80      	pop	{r7, pc}

08032a38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8032a38:	b580      	push	{r7, lr}
 8032a3a:	b084      	sub	sp, #16
 8032a3c:	af00      	add	r7, sp, #0
 8032a3e:	6078      	str	r0, [r7, #4]
 8032a40:	460b      	mov	r3, r1
 8032a42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8032a44:	687b      	ldr	r3, [r7, #4]
 8032a46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8032a4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8032a4c:	687b      	ldr	r3, [r7, #4]
 8032a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032a52:	687b      	ldr	r3, [r7, #4]
 8032a54:	32b0      	adds	r2, #176	; 0xb0
 8032a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032a5a:	2b00      	cmp	r3, #0
 8032a5c:	d101      	bne.n	8032a62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8032a5e:	2303      	movs	r3, #3
 8032a60:	e065      	b.n	8032b2e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8032a62:	687b      	ldr	r3, [r7, #4]
 8032a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032a68:	687b      	ldr	r3, [r7, #4]
 8032a6a:	32b0      	adds	r2, #176	; 0xb0
 8032a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032a70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8032a72:	78fb      	ldrb	r3, [r7, #3]
 8032a74:	f003 020f 	and.w	r2, r3, #15
 8032a78:	6879      	ldr	r1, [r7, #4]
 8032a7a:	4613      	mov	r3, r2
 8032a7c:	009b      	lsls	r3, r3, #2
 8032a7e:	4413      	add	r3, r2
 8032a80:	009b      	lsls	r3, r3, #2
 8032a82:	440b      	add	r3, r1
 8032a84:	3318      	adds	r3, #24
 8032a86:	681b      	ldr	r3, [r3, #0]
 8032a88:	2b00      	cmp	r3, #0
 8032a8a:	d02f      	beq.n	8032aec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8032a8c:	78fb      	ldrb	r3, [r7, #3]
 8032a8e:	f003 020f 	and.w	r2, r3, #15
 8032a92:	6879      	ldr	r1, [r7, #4]
 8032a94:	4613      	mov	r3, r2
 8032a96:	009b      	lsls	r3, r3, #2
 8032a98:	4413      	add	r3, r2
 8032a9a:	009b      	lsls	r3, r3, #2
 8032a9c:	440b      	add	r3, r1
 8032a9e:	3318      	adds	r3, #24
 8032aa0:	681a      	ldr	r2, [r3, #0]
 8032aa2:	78fb      	ldrb	r3, [r7, #3]
 8032aa4:	f003 010f 	and.w	r1, r3, #15
 8032aa8:	68f8      	ldr	r0, [r7, #12]
 8032aaa:	460b      	mov	r3, r1
 8032aac:	00db      	lsls	r3, r3, #3
 8032aae:	440b      	add	r3, r1
 8032ab0:	009b      	lsls	r3, r3, #2
 8032ab2:	4403      	add	r3, r0
 8032ab4:	3348      	adds	r3, #72	; 0x48
 8032ab6:	681b      	ldr	r3, [r3, #0]
 8032ab8:	fbb2 f1f3 	udiv	r1, r2, r3
 8032abc:	fb01 f303 	mul.w	r3, r1, r3
 8032ac0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8032ac2:	2b00      	cmp	r3, #0
 8032ac4:	d112      	bne.n	8032aec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8032ac6:	78fb      	ldrb	r3, [r7, #3]
 8032ac8:	f003 020f 	and.w	r2, r3, #15
 8032acc:	6879      	ldr	r1, [r7, #4]
 8032ace:	4613      	mov	r3, r2
 8032ad0:	009b      	lsls	r3, r3, #2
 8032ad2:	4413      	add	r3, r2
 8032ad4:	009b      	lsls	r3, r3, #2
 8032ad6:	440b      	add	r3, r1
 8032ad8:	3318      	adds	r3, #24
 8032ada:	2200      	movs	r2, #0
 8032adc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8032ade:	78f9      	ldrb	r1, [r7, #3]
 8032ae0:	2300      	movs	r3, #0
 8032ae2:	2200      	movs	r2, #0
 8032ae4:	6878      	ldr	r0, [r7, #4]
 8032ae6:	f002 f95a 	bl	8034d9e <USBD_LL_Transmit>
 8032aea:	e01f      	b.n	8032b2c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8032aec:	68bb      	ldr	r3, [r7, #8]
 8032aee:	2200      	movs	r2, #0
 8032af0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8032af4:	687b      	ldr	r3, [r7, #4]
 8032af6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8032afa:	687a      	ldr	r2, [r7, #4]
 8032afc:	33b0      	adds	r3, #176	; 0xb0
 8032afe:	009b      	lsls	r3, r3, #2
 8032b00:	4413      	add	r3, r2
 8032b02:	685b      	ldr	r3, [r3, #4]
 8032b04:	691b      	ldr	r3, [r3, #16]
 8032b06:	2b00      	cmp	r3, #0
 8032b08:	d010      	beq.n	8032b2c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8032b0a:	687b      	ldr	r3, [r7, #4]
 8032b0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8032b10:	687a      	ldr	r2, [r7, #4]
 8032b12:	33b0      	adds	r3, #176	; 0xb0
 8032b14:	009b      	lsls	r3, r3, #2
 8032b16:	4413      	add	r3, r2
 8032b18:	685b      	ldr	r3, [r3, #4]
 8032b1a:	691b      	ldr	r3, [r3, #16]
 8032b1c:	68ba      	ldr	r2, [r7, #8]
 8032b1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8032b22:	68ba      	ldr	r2, [r7, #8]
 8032b24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8032b28:	78fa      	ldrb	r2, [r7, #3]
 8032b2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8032b2c:	2300      	movs	r3, #0
}
 8032b2e:	4618      	mov	r0, r3
 8032b30:	3710      	adds	r7, #16
 8032b32:	46bd      	mov	sp, r7
 8032b34:	bd80      	pop	{r7, pc}

08032b36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8032b36:	b580      	push	{r7, lr}
 8032b38:	b084      	sub	sp, #16
 8032b3a:	af00      	add	r7, sp, #0
 8032b3c:	6078      	str	r0, [r7, #4]
 8032b3e:	460b      	mov	r3, r1
 8032b40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8032b42:	687b      	ldr	r3, [r7, #4]
 8032b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032b48:	687b      	ldr	r3, [r7, #4]
 8032b4a:	32b0      	adds	r2, #176	; 0xb0
 8032b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032b50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8032b52:	687b      	ldr	r3, [r7, #4]
 8032b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032b58:	687b      	ldr	r3, [r7, #4]
 8032b5a:	32b0      	adds	r2, #176	; 0xb0
 8032b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032b60:	2b00      	cmp	r3, #0
 8032b62:	d101      	bne.n	8032b68 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8032b64:	2303      	movs	r3, #3
 8032b66:	e01a      	b.n	8032b9e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8032b68:	78fb      	ldrb	r3, [r7, #3]
 8032b6a:	4619      	mov	r1, r3
 8032b6c:	6878      	ldr	r0, [r7, #4]
 8032b6e:	f002 f958 	bl	8034e22 <USBD_LL_GetRxDataSize>
 8032b72:	4602      	mov	r2, r0
 8032b74:	68fb      	ldr	r3, [r7, #12]
 8032b76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8032b7a:	687b      	ldr	r3, [r7, #4]
 8032b7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8032b80:	687a      	ldr	r2, [r7, #4]
 8032b82:	33b0      	adds	r3, #176	; 0xb0
 8032b84:	009b      	lsls	r3, r3, #2
 8032b86:	4413      	add	r3, r2
 8032b88:	685b      	ldr	r3, [r3, #4]
 8032b8a:	68db      	ldr	r3, [r3, #12]
 8032b8c:	68fa      	ldr	r2, [r7, #12]
 8032b8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8032b92:	68fa      	ldr	r2, [r7, #12]
 8032b94:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8032b98:	4611      	mov	r1, r2
 8032b9a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8032b9c:	2300      	movs	r3, #0
}
 8032b9e:	4618      	mov	r0, r3
 8032ba0:	3710      	adds	r7, #16
 8032ba2:	46bd      	mov	sp, r7
 8032ba4:	bd80      	pop	{r7, pc}

08032ba6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8032ba6:	b580      	push	{r7, lr}
 8032ba8:	b084      	sub	sp, #16
 8032baa:	af00      	add	r7, sp, #0
 8032bac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8032bae:	687b      	ldr	r3, [r7, #4]
 8032bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032bb4:	687b      	ldr	r3, [r7, #4]
 8032bb6:	32b0      	adds	r2, #176	; 0xb0
 8032bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032bbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8032bbe:	68fb      	ldr	r3, [r7, #12]
 8032bc0:	2b00      	cmp	r3, #0
 8032bc2:	d101      	bne.n	8032bc8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8032bc4:	2303      	movs	r3, #3
 8032bc6:	e025      	b.n	8032c14 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8032bc8:	687b      	ldr	r3, [r7, #4]
 8032bca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8032bce:	687a      	ldr	r2, [r7, #4]
 8032bd0:	33b0      	adds	r3, #176	; 0xb0
 8032bd2:	009b      	lsls	r3, r3, #2
 8032bd4:	4413      	add	r3, r2
 8032bd6:	685b      	ldr	r3, [r3, #4]
 8032bd8:	2b00      	cmp	r3, #0
 8032bda:	d01a      	beq.n	8032c12 <USBD_CDC_EP0_RxReady+0x6c>
 8032bdc:	68fb      	ldr	r3, [r7, #12]
 8032bde:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8032be2:	2bff      	cmp	r3, #255	; 0xff
 8032be4:	d015      	beq.n	8032c12 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8032be6:	687b      	ldr	r3, [r7, #4]
 8032be8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8032bec:	687a      	ldr	r2, [r7, #4]
 8032bee:	33b0      	adds	r3, #176	; 0xb0
 8032bf0:	009b      	lsls	r3, r3, #2
 8032bf2:	4413      	add	r3, r2
 8032bf4:	685b      	ldr	r3, [r3, #4]
 8032bf6:	689b      	ldr	r3, [r3, #8]
 8032bf8:	68fa      	ldr	r2, [r7, #12]
 8032bfa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8032bfe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8032c00:	68fa      	ldr	r2, [r7, #12]
 8032c02:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8032c06:	b292      	uxth	r2, r2
 8032c08:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8032c0a:	68fb      	ldr	r3, [r7, #12]
 8032c0c:	22ff      	movs	r2, #255	; 0xff
 8032c0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8032c12:	2300      	movs	r3, #0
}
 8032c14:	4618      	mov	r0, r3
 8032c16:	3710      	adds	r7, #16
 8032c18:	46bd      	mov	sp, r7
 8032c1a:	bd80      	pop	{r7, pc}

08032c1c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8032c1c:	b580      	push	{r7, lr}
 8032c1e:	b086      	sub	sp, #24
 8032c20:	af00      	add	r7, sp, #0
 8032c22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8032c24:	2182      	movs	r1, #130	; 0x82
 8032c26:	4818      	ldr	r0, [pc, #96]	; (8032c88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8032c28:	f000 fd09 	bl	803363e <USBD_GetEpDesc>
 8032c2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8032c2e:	2101      	movs	r1, #1
 8032c30:	4815      	ldr	r0, [pc, #84]	; (8032c88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8032c32:	f000 fd04 	bl	803363e <USBD_GetEpDesc>
 8032c36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8032c38:	2181      	movs	r1, #129	; 0x81
 8032c3a:	4813      	ldr	r0, [pc, #76]	; (8032c88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8032c3c:	f000 fcff 	bl	803363e <USBD_GetEpDesc>
 8032c40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8032c42:	697b      	ldr	r3, [r7, #20]
 8032c44:	2b00      	cmp	r3, #0
 8032c46:	d002      	beq.n	8032c4e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8032c48:	697b      	ldr	r3, [r7, #20]
 8032c4a:	2210      	movs	r2, #16
 8032c4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8032c4e:	693b      	ldr	r3, [r7, #16]
 8032c50:	2b00      	cmp	r3, #0
 8032c52:	d006      	beq.n	8032c62 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8032c54:	693b      	ldr	r3, [r7, #16]
 8032c56:	2200      	movs	r2, #0
 8032c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8032c5c:	711a      	strb	r2, [r3, #4]
 8032c5e:	2200      	movs	r2, #0
 8032c60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8032c62:	68fb      	ldr	r3, [r7, #12]
 8032c64:	2b00      	cmp	r3, #0
 8032c66:	d006      	beq.n	8032c76 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8032c68:	68fb      	ldr	r3, [r7, #12]
 8032c6a:	2200      	movs	r2, #0
 8032c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8032c70:	711a      	strb	r2, [r3, #4]
 8032c72:	2200      	movs	r2, #0
 8032c74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8032c76:	687b      	ldr	r3, [r7, #4]
 8032c78:	2243      	movs	r2, #67	; 0x43
 8032c7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8032c7c:	4b02      	ldr	r3, [pc, #8]	; (8032c88 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8032c7e:	4618      	mov	r0, r3
 8032c80:	3718      	adds	r7, #24
 8032c82:	46bd      	mov	sp, r7
 8032c84:	bd80      	pop	{r7, pc}
 8032c86:	bf00      	nop
 8032c88:	24000054 	.word	0x24000054

08032c8c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8032c8c:	b580      	push	{r7, lr}
 8032c8e:	b086      	sub	sp, #24
 8032c90:	af00      	add	r7, sp, #0
 8032c92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8032c94:	2182      	movs	r1, #130	; 0x82
 8032c96:	4818      	ldr	r0, [pc, #96]	; (8032cf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8032c98:	f000 fcd1 	bl	803363e <USBD_GetEpDesc>
 8032c9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8032c9e:	2101      	movs	r1, #1
 8032ca0:	4815      	ldr	r0, [pc, #84]	; (8032cf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8032ca2:	f000 fccc 	bl	803363e <USBD_GetEpDesc>
 8032ca6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8032ca8:	2181      	movs	r1, #129	; 0x81
 8032caa:	4813      	ldr	r0, [pc, #76]	; (8032cf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8032cac:	f000 fcc7 	bl	803363e <USBD_GetEpDesc>
 8032cb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8032cb2:	697b      	ldr	r3, [r7, #20]
 8032cb4:	2b00      	cmp	r3, #0
 8032cb6:	d002      	beq.n	8032cbe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8032cb8:	697b      	ldr	r3, [r7, #20]
 8032cba:	2210      	movs	r2, #16
 8032cbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8032cbe:	693b      	ldr	r3, [r7, #16]
 8032cc0:	2b00      	cmp	r3, #0
 8032cc2:	d006      	beq.n	8032cd2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8032cc4:	693b      	ldr	r3, [r7, #16]
 8032cc6:	2200      	movs	r2, #0
 8032cc8:	711a      	strb	r2, [r3, #4]
 8032cca:	2200      	movs	r2, #0
 8032ccc:	f042 0202 	orr.w	r2, r2, #2
 8032cd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8032cd2:	68fb      	ldr	r3, [r7, #12]
 8032cd4:	2b00      	cmp	r3, #0
 8032cd6:	d006      	beq.n	8032ce6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8032cd8:	68fb      	ldr	r3, [r7, #12]
 8032cda:	2200      	movs	r2, #0
 8032cdc:	711a      	strb	r2, [r3, #4]
 8032cde:	2200      	movs	r2, #0
 8032ce0:	f042 0202 	orr.w	r2, r2, #2
 8032ce4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8032ce6:	687b      	ldr	r3, [r7, #4]
 8032ce8:	2243      	movs	r2, #67	; 0x43
 8032cea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8032cec:	4b02      	ldr	r3, [pc, #8]	; (8032cf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8032cee:	4618      	mov	r0, r3
 8032cf0:	3718      	adds	r7, #24
 8032cf2:	46bd      	mov	sp, r7
 8032cf4:	bd80      	pop	{r7, pc}
 8032cf6:	bf00      	nop
 8032cf8:	24000054 	.word	0x24000054

08032cfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8032cfc:	b580      	push	{r7, lr}
 8032cfe:	b086      	sub	sp, #24
 8032d00:	af00      	add	r7, sp, #0
 8032d02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8032d04:	2182      	movs	r1, #130	; 0x82
 8032d06:	4818      	ldr	r0, [pc, #96]	; (8032d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8032d08:	f000 fc99 	bl	803363e <USBD_GetEpDesc>
 8032d0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8032d0e:	2101      	movs	r1, #1
 8032d10:	4815      	ldr	r0, [pc, #84]	; (8032d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8032d12:	f000 fc94 	bl	803363e <USBD_GetEpDesc>
 8032d16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8032d18:	2181      	movs	r1, #129	; 0x81
 8032d1a:	4813      	ldr	r0, [pc, #76]	; (8032d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8032d1c:	f000 fc8f 	bl	803363e <USBD_GetEpDesc>
 8032d20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8032d22:	697b      	ldr	r3, [r7, #20]
 8032d24:	2b00      	cmp	r3, #0
 8032d26:	d002      	beq.n	8032d2e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8032d28:	697b      	ldr	r3, [r7, #20]
 8032d2a:	2210      	movs	r2, #16
 8032d2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8032d2e:	693b      	ldr	r3, [r7, #16]
 8032d30:	2b00      	cmp	r3, #0
 8032d32:	d006      	beq.n	8032d42 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8032d34:	693b      	ldr	r3, [r7, #16]
 8032d36:	2200      	movs	r2, #0
 8032d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8032d3c:	711a      	strb	r2, [r3, #4]
 8032d3e:	2200      	movs	r2, #0
 8032d40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8032d42:	68fb      	ldr	r3, [r7, #12]
 8032d44:	2b00      	cmp	r3, #0
 8032d46:	d006      	beq.n	8032d56 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8032d48:	68fb      	ldr	r3, [r7, #12]
 8032d4a:	2200      	movs	r2, #0
 8032d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8032d50:	711a      	strb	r2, [r3, #4]
 8032d52:	2200      	movs	r2, #0
 8032d54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8032d56:	687b      	ldr	r3, [r7, #4]
 8032d58:	2243      	movs	r2, #67	; 0x43
 8032d5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8032d5c:	4b02      	ldr	r3, [pc, #8]	; (8032d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8032d5e:	4618      	mov	r0, r3
 8032d60:	3718      	adds	r7, #24
 8032d62:	46bd      	mov	sp, r7
 8032d64:	bd80      	pop	{r7, pc}
 8032d66:	bf00      	nop
 8032d68:	24000054 	.word	0x24000054

08032d6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8032d6c:	b480      	push	{r7}
 8032d6e:	b083      	sub	sp, #12
 8032d70:	af00      	add	r7, sp, #0
 8032d72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8032d74:	687b      	ldr	r3, [r7, #4]
 8032d76:	220a      	movs	r2, #10
 8032d78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8032d7a:	4b03      	ldr	r3, [pc, #12]	; (8032d88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8032d7c:	4618      	mov	r0, r3
 8032d7e:	370c      	adds	r7, #12
 8032d80:	46bd      	mov	sp, r7
 8032d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d86:	4770      	bx	lr
 8032d88:	24000010 	.word	0x24000010

08032d8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8032d8c:	b480      	push	{r7}
 8032d8e:	b083      	sub	sp, #12
 8032d90:	af00      	add	r7, sp, #0
 8032d92:	6078      	str	r0, [r7, #4]
 8032d94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8032d96:	683b      	ldr	r3, [r7, #0]
 8032d98:	2b00      	cmp	r3, #0
 8032d9a:	d101      	bne.n	8032da0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8032d9c:	2303      	movs	r3, #3
 8032d9e:	e009      	b.n	8032db4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8032da0:	687b      	ldr	r3, [r7, #4]
 8032da2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8032da6:	687a      	ldr	r2, [r7, #4]
 8032da8:	33b0      	adds	r3, #176	; 0xb0
 8032daa:	009b      	lsls	r3, r3, #2
 8032dac:	4413      	add	r3, r2
 8032dae:	683a      	ldr	r2, [r7, #0]
 8032db0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8032db2:	2300      	movs	r3, #0
}
 8032db4:	4618      	mov	r0, r3
 8032db6:	370c      	adds	r7, #12
 8032db8:	46bd      	mov	sp, r7
 8032dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032dbe:	4770      	bx	lr

08032dc0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8032dc0:	b480      	push	{r7}
 8032dc2:	b087      	sub	sp, #28
 8032dc4:	af00      	add	r7, sp, #0
 8032dc6:	60f8      	str	r0, [r7, #12]
 8032dc8:	60b9      	str	r1, [r7, #8]
 8032dca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8032dcc:	68fb      	ldr	r3, [r7, #12]
 8032dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032dd2:	68fb      	ldr	r3, [r7, #12]
 8032dd4:	32b0      	adds	r2, #176	; 0xb0
 8032dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032dda:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8032ddc:	697b      	ldr	r3, [r7, #20]
 8032dde:	2b00      	cmp	r3, #0
 8032de0:	d101      	bne.n	8032de6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8032de2:	2303      	movs	r3, #3
 8032de4:	e008      	b.n	8032df8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8032de6:	697b      	ldr	r3, [r7, #20]
 8032de8:	68ba      	ldr	r2, [r7, #8]
 8032dea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8032dee:	697b      	ldr	r3, [r7, #20]
 8032df0:	687a      	ldr	r2, [r7, #4]
 8032df2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8032df6:	2300      	movs	r3, #0
}
 8032df8:	4618      	mov	r0, r3
 8032dfa:	371c      	adds	r7, #28
 8032dfc:	46bd      	mov	sp, r7
 8032dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032e02:	4770      	bx	lr

08032e04 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8032e04:	b480      	push	{r7}
 8032e06:	b085      	sub	sp, #20
 8032e08:	af00      	add	r7, sp, #0
 8032e0a:	6078      	str	r0, [r7, #4]
 8032e0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8032e0e:	687b      	ldr	r3, [r7, #4]
 8032e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032e14:	687b      	ldr	r3, [r7, #4]
 8032e16:	32b0      	adds	r2, #176	; 0xb0
 8032e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032e1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8032e1e:	68fb      	ldr	r3, [r7, #12]
 8032e20:	2b00      	cmp	r3, #0
 8032e22:	d101      	bne.n	8032e28 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8032e24:	2303      	movs	r3, #3
 8032e26:	e004      	b.n	8032e32 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8032e28:	68fb      	ldr	r3, [r7, #12]
 8032e2a:	683a      	ldr	r2, [r7, #0]
 8032e2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8032e30:	2300      	movs	r3, #0
}
 8032e32:	4618      	mov	r0, r3
 8032e34:	3714      	adds	r7, #20
 8032e36:	46bd      	mov	sp, r7
 8032e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032e3c:	4770      	bx	lr
	...

08032e40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8032e40:	b580      	push	{r7, lr}
 8032e42:	b084      	sub	sp, #16
 8032e44:	af00      	add	r7, sp, #0
 8032e46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8032e48:	687b      	ldr	r3, [r7, #4]
 8032e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032e4e:	687b      	ldr	r3, [r7, #4]
 8032e50:	32b0      	adds	r2, #176	; 0xb0
 8032e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032e56:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8032e58:	687b      	ldr	r3, [r7, #4]
 8032e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032e5e:	687b      	ldr	r3, [r7, #4]
 8032e60:	32b0      	adds	r2, #176	; 0xb0
 8032e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032e66:	2b00      	cmp	r3, #0
 8032e68:	d101      	bne.n	8032e6e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8032e6a:	2303      	movs	r3, #3
 8032e6c:	e018      	b.n	8032ea0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8032e6e:	687b      	ldr	r3, [r7, #4]
 8032e70:	7c1b      	ldrb	r3, [r3, #16]
 8032e72:	2b00      	cmp	r3, #0
 8032e74:	d10a      	bne.n	8032e8c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8032e76:	4b0c      	ldr	r3, [pc, #48]	; (8032ea8 <USBD_CDC_ReceivePacket+0x68>)
 8032e78:	7819      	ldrb	r1, [r3, #0]
 8032e7a:	68fb      	ldr	r3, [r7, #12]
 8032e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8032e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8032e84:	6878      	ldr	r0, [r7, #4]
 8032e86:	f001 ffab 	bl	8034de0 <USBD_LL_PrepareReceive>
 8032e8a:	e008      	b.n	8032e9e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8032e8c:	4b06      	ldr	r3, [pc, #24]	; (8032ea8 <USBD_CDC_ReceivePacket+0x68>)
 8032e8e:	7819      	ldrb	r1, [r3, #0]
 8032e90:	68fb      	ldr	r3, [r7, #12]
 8032e92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8032e96:	2340      	movs	r3, #64	; 0x40
 8032e98:	6878      	ldr	r0, [r7, #4]
 8032e9a:	f001 ffa1 	bl	8034de0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8032e9e:	2300      	movs	r3, #0
}
 8032ea0:	4618      	mov	r0, r3
 8032ea2:	3710      	adds	r7, #16
 8032ea4:	46bd      	mov	sp, r7
 8032ea6:	bd80      	pop	{r7, pc}
 8032ea8:	24000098 	.word	0x24000098

08032eac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8032eac:	b580      	push	{r7, lr}
 8032eae:	b086      	sub	sp, #24
 8032eb0:	af00      	add	r7, sp, #0
 8032eb2:	60f8      	str	r0, [r7, #12]
 8032eb4:	60b9      	str	r1, [r7, #8]
 8032eb6:	4613      	mov	r3, r2
 8032eb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8032eba:	68fb      	ldr	r3, [r7, #12]
 8032ebc:	2b00      	cmp	r3, #0
 8032ebe:	d101      	bne.n	8032ec4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8032ec0:	2303      	movs	r3, #3
 8032ec2:	e01f      	b.n	8032f04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8032ec4:	68fb      	ldr	r3, [r7, #12]
 8032ec6:	2200      	movs	r2, #0
 8032ec8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8032ecc:	68fb      	ldr	r3, [r7, #12]
 8032ece:	2200      	movs	r2, #0
 8032ed0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8032ed4:	68fb      	ldr	r3, [r7, #12]
 8032ed6:	2200      	movs	r2, #0
 8032ed8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8032edc:	68bb      	ldr	r3, [r7, #8]
 8032ede:	2b00      	cmp	r3, #0
 8032ee0:	d003      	beq.n	8032eea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8032ee2:	68fb      	ldr	r3, [r7, #12]
 8032ee4:	68ba      	ldr	r2, [r7, #8]
 8032ee6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8032eea:	68fb      	ldr	r3, [r7, #12]
 8032eec:	2201      	movs	r2, #1
 8032eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8032ef2:	68fb      	ldr	r3, [r7, #12]
 8032ef4:	79fa      	ldrb	r2, [r7, #7]
 8032ef6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8032ef8:	68f8      	ldr	r0, [r7, #12]
 8032efa:	f001 fe17 	bl	8034b2c <USBD_LL_Init>
 8032efe:	4603      	mov	r3, r0
 8032f00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8032f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8032f04:	4618      	mov	r0, r3
 8032f06:	3718      	adds	r7, #24
 8032f08:	46bd      	mov	sp, r7
 8032f0a:	bd80      	pop	{r7, pc}

08032f0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8032f0c:	b580      	push	{r7, lr}
 8032f0e:	b084      	sub	sp, #16
 8032f10:	af00      	add	r7, sp, #0
 8032f12:	6078      	str	r0, [r7, #4]
 8032f14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8032f16:	2300      	movs	r3, #0
 8032f18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8032f1a:	683b      	ldr	r3, [r7, #0]
 8032f1c:	2b00      	cmp	r3, #0
 8032f1e:	d101      	bne.n	8032f24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8032f20:	2303      	movs	r3, #3
 8032f22:	e025      	b.n	8032f70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8032f24:	687b      	ldr	r3, [r7, #4]
 8032f26:	683a      	ldr	r2, [r7, #0]
 8032f28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8032f2c:	687b      	ldr	r3, [r7, #4]
 8032f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032f32:	687b      	ldr	r3, [r7, #4]
 8032f34:	32ae      	adds	r2, #174	; 0xae
 8032f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032f3c:	2b00      	cmp	r3, #0
 8032f3e:	d00f      	beq.n	8032f60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8032f40:	687b      	ldr	r3, [r7, #4]
 8032f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8032f46:	687b      	ldr	r3, [r7, #4]
 8032f48:	32ae      	adds	r2, #174	; 0xae
 8032f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032f50:	f107 020e 	add.w	r2, r7, #14
 8032f54:	4610      	mov	r0, r2
 8032f56:	4798      	blx	r3
 8032f58:	4602      	mov	r2, r0
 8032f5a:	687b      	ldr	r3, [r7, #4]
 8032f5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8032f60:	687b      	ldr	r3, [r7, #4]
 8032f62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8032f66:	1c5a      	adds	r2, r3, #1
 8032f68:	687b      	ldr	r3, [r7, #4]
 8032f6a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8032f6e:	2300      	movs	r3, #0
}
 8032f70:	4618      	mov	r0, r3
 8032f72:	3710      	adds	r7, #16
 8032f74:	46bd      	mov	sp, r7
 8032f76:	bd80      	pop	{r7, pc}

08032f78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8032f78:	b580      	push	{r7, lr}
 8032f7a:	b082      	sub	sp, #8
 8032f7c:	af00      	add	r7, sp, #0
 8032f7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8032f80:	6878      	ldr	r0, [r7, #4]
 8032f82:	f001 fe23 	bl	8034bcc <USBD_LL_Start>
 8032f86:	4603      	mov	r3, r0
}
 8032f88:	4618      	mov	r0, r3
 8032f8a:	3708      	adds	r7, #8
 8032f8c:	46bd      	mov	sp, r7
 8032f8e:	bd80      	pop	{r7, pc}

08032f90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8032f90:	b480      	push	{r7}
 8032f92:	b083      	sub	sp, #12
 8032f94:	af00      	add	r7, sp, #0
 8032f96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8032f98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8032f9a:	4618      	mov	r0, r3
 8032f9c:	370c      	adds	r7, #12
 8032f9e:	46bd      	mov	sp, r7
 8032fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032fa4:	4770      	bx	lr

08032fa6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8032fa6:	b580      	push	{r7, lr}
 8032fa8:	b084      	sub	sp, #16
 8032faa:	af00      	add	r7, sp, #0
 8032fac:	6078      	str	r0, [r7, #4]
 8032fae:	460b      	mov	r3, r1
 8032fb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8032fb2:	2300      	movs	r3, #0
 8032fb4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8032fb6:	687b      	ldr	r3, [r7, #4]
 8032fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8032fbc:	2b00      	cmp	r3, #0
 8032fbe:	d009      	beq.n	8032fd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8032fc0:	687b      	ldr	r3, [r7, #4]
 8032fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8032fc6:	681b      	ldr	r3, [r3, #0]
 8032fc8:	78fa      	ldrb	r2, [r7, #3]
 8032fca:	4611      	mov	r1, r2
 8032fcc:	6878      	ldr	r0, [r7, #4]
 8032fce:	4798      	blx	r3
 8032fd0:	4603      	mov	r3, r0
 8032fd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8032fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8032fd6:	4618      	mov	r0, r3
 8032fd8:	3710      	adds	r7, #16
 8032fda:	46bd      	mov	sp, r7
 8032fdc:	bd80      	pop	{r7, pc}

08032fde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8032fde:	b580      	push	{r7, lr}
 8032fe0:	b084      	sub	sp, #16
 8032fe2:	af00      	add	r7, sp, #0
 8032fe4:	6078      	str	r0, [r7, #4]
 8032fe6:	460b      	mov	r3, r1
 8032fe8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8032fea:	2300      	movs	r3, #0
 8032fec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8032fee:	687b      	ldr	r3, [r7, #4]
 8032ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8032ff4:	685b      	ldr	r3, [r3, #4]
 8032ff6:	78fa      	ldrb	r2, [r7, #3]
 8032ff8:	4611      	mov	r1, r2
 8032ffa:	6878      	ldr	r0, [r7, #4]
 8032ffc:	4798      	blx	r3
 8032ffe:	4603      	mov	r3, r0
 8033000:	2b00      	cmp	r3, #0
 8033002:	d001      	beq.n	8033008 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8033004:	2303      	movs	r3, #3
 8033006:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8033008:	7bfb      	ldrb	r3, [r7, #15]
}
 803300a:	4618      	mov	r0, r3
 803300c:	3710      	adds	r7, #16
 803300e:	46bd      	mov	sp, r7
 8033010:	bd80      	pop	{r7, pc}

08033012 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8033012:	b580      	push	{r7, lr}
 8033014:	b084      	sub	sp, #16
 8033016:	af00      	add	r7, sp, #0
 8033018:	6078      	str	r0, [r7, #4]
 803301a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 803301c:	687b      	ldr	r3, [r7, #4]
 803301e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8033022:	6839      	ldr	r1, [r7, #0]
 8033024:	4618      	mov	r0, r3
 8033026:	f001 f908 	bl	803423a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 803302a:	687b      	ldr	r3, [r7, #4]
 803302c:	2201      	movs	r2, #1
 803302e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8033032:	687b      	ldr	r3, [r7, #4]
 8033034:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8033038:	461a      	mov	r2, r3
 803303a:	687b      	ldr	r3, [r7, #4]
 803303c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8033040:	687b      	ldr	r3, [r7, #4]
 8033042:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8033046:	f003 031f 	and.w	r3, r3, #31
 803304a:	2b02      	cmp	r3, #2
 803304c:	d01a      	beq.n	8033084 <USBD_LL_SetupStage+0x72>
 803304e:	2b02      	cmp	r3, #2
 8033050:	d822      	bhi.n	8033098 <USBD_LL_SetupStage+0x86>
 8033052:	2b00      	cmp	r3, #0
 8033054:	d002      	beq.n	803305c <USBD_LL_SetupStage+0x4a>
 8033056:	2b01      	cmp	r3, #1
 8033058:	d00a      	beq.n	8033070 <USBD_LL_SetupStage+0x5e>
 803305a:	e01d      	b.n	8033098 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 803305c:	687b      	ldr	r3, [r7, #4]
 803305e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8033062:	4619      	mov	r1, r3
 8033064:	6878      	ldr	r0, [r7, #4]
 8033066:	f000 fb5f 	bl	8033728 <USBD_StdDevReq>
 803306a:	4603      	mov	r3, r0
 803306c:	73fb      	strb	r3, [r7, #15]
      break;
 803306e:	e020      	b.n	80330b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8033070:	687b      	ldr	r3, [r7, #4]
 8033072:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8033076:	4619      	mov	r1, r3
 8033078:	6878      	ldr	r0, [r7, #4]
 803307a:	f000 fbc7 	bl	803380c <USBD_StdItfReq>
 803307e:	4603      	mov	r3, r0
 8033080:	73fb      	strb	r3, [r7, #15]
      break;
 8033082:	e016      	b.n	80330b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8033084:	687b      	ldr	r3, [r7, #4]
 8033086:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803308a:	4619      	mov	r1, r3
 803308c:	6878      	ldr	r0, [r7, #4]
 803308e:	f000 fc29 	bl	80338e4 <USBD_StdEPReq>
 8033092:	4603      	mov	r3, r0
 8033094:	73fb      	strb	r3, [r7, #15]
      break;
 8033096:	e00c      	b.n	80330b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8033098:	687b      	ldr	r3, [r7, #4]
 803309a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803309e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80330a2:	b2db      	uxtb	r3, r3
 80330a4:	4619      	mov	r1, r3
 80330a6:	6878      	ldr	r0, [r7, #4]
 80330a8:	f001 fdf0 	bl	8034c8c <USBD_LL_StallEP>
 80330ac:	4603      	mov	r3, r0
 80330ae:	73fb      	strb	r3, [r7, #15]
      break;
 80330b0:	bf00      	nop
  }

  return ret;
 80330b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80330b4:	4618      	mov	r0, r3
 80330b6:	3710      	adds	r7, #16
 80330b8:	46bd      	mov	sp, r7
 80330ba:	bd80      	pop	{r7, pc}

080330bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80330bc:	b580      	push	{r7, lr}
 80330be:	b086      	sub	sp, #24
 80330c0:	af00      	add	r7, sp, #0
 80330c2:	60f8      	str	r0, [r7, #12]
 80330c4:	460b      	mov	r3, r1
 80330c6:	607a      	str	r2, [r7, #4]
 80330c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80330ca:	2300      	movs	r3, #0
 80330cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80330ce:	7afb      	ldrb	r3, [r7, #11]
 80330d0:	2b00      	cmp	r3, #0
 80330d2:	d16e      	bne.n	80331b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80330d4:	68fb      	ldr	r3, [r7, #12]
 80330d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80330da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80330dc:	68fb      	ldr	r3, [r7, #12]
 80330de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80330e2:	2b03      	cmp	r3, #3
 80330e4:	f040 8098 	bne.w	8033218 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80330e8:	693b      	ldr	r3, [r7, #16]
 80330ea:	689a      	ldr	r2, [r3, #8]
 80330ec:	693b      	ldr	r3, [r7, #16]
 80330ee:	68db      	ldr	r3, [r3, #12]
 80330f0:	429a      	cmp	r2, r3
 80330f2:	d913      	bls.n	803311c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80330f4:	693b      	ldr	r3, [r7, #16]
 80330f6:	689a      	ldr	r2, [r3, #8]
 80330f8:	693b      	ldr	r3, [r7, #16]
 80330fa:	68db      	ldr	r3, [r3, #12]
 80330fc:	1ad2      	subs	r2, r2, r3
 80330fe:	693b      	ldr	r3, [r7, #16]
 8033100:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8033102:	693b      	ldr	r3, [r7, #16]
 8033104:	68da      	ldr	r2, [r3, #12]
 8033106:	693b      	ldr	r3, [r7, #16]
 8033108:	689b      	ldr	r3, [r3, #8]
 803310a:	4293      	cmp	r3, r2
 803310c:	bf28      	it	cs
 803310e:	4613      	movcs	r3, r2
 8033110:	461a      	mov	r2, r3
 8033112:	6879      	ldr	r1, [r7, #4]
 8033114:	68f8      	ldr	r0, [r7, #12]
 8033116:	f001 f984 	bl	8034422 <USBD_CtlContinueRx>
 803311a:	e07d      	b.n	8033218 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 803311c:	68fb      	ldr	r3, [r7, #12]
 803311e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8033122:	f003 031f 	and.w	r3, r3, #31
 8033126:	2b02      	cmp	r3, #2
 8033128:	d014      	beq.n	8033154 <USBD_LL_DataOutStage+0x98>
 803312a:	2b02      	cmp	r3, #2
 803312c:	d81d      	bhi.n	803316a <USBD_LL_DataOutStage+0xae>
 803312e:	2b00      	cmp	r3, #0
 8033130:	d002      	beq.n	8033138 <USBD_LL_DataOutStage+0x7c>
 8033132:	2b01      	cmp	r3, #1
 8033134:	d003      	beq.n	803313e <USBD_LL_DataOutStage+0x82>
 8033136:	e018      	b.n	803316a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8033138:	2300      	movs	r3, #0
 803313a:	75bb      	strb	r3, [r7, #22]
            break;
 803313c:	e018      	b.n	8033170 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 803313e:	68fb      	ldr	r3, [r7, #12]
 8033140:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8033144:	b2db      	uxtb	r3, r3
 8033146:	4619      	mov	r1, r3
 8033148:	68f8      	ldr	r0, [r7, #12]
 803314a:	f000 fa5e 	bl	803360a <USBD_CoreFindIF>
 803314e:	4603      	mov	r3, r0
 8033150:	75bb      	strb	r3, [r7, #22]
            break;
 8033152:	e00d      	b.n	8033170 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8033154:	68fb      	ldr	r3, [r7, #12]
 8033156:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 803315a:	b2db      	uxtb	r3, r3
 803315c:	4619      	mov	r1, r3
 803315e:	68f8      	ldr	r0, [r7, #12]
 8033160:	f000 fa60 	bl	8033624 <USBD_CoreFindEP>
 8033164:	4603      	mov	r3, r0
 8033166:	75bb      	strb	r3, [r7, #22]
            break;
 8033168:	e002      	b.n	8033170 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 803316a:	2300      	movs	r3, #0
 803316c:	75bb      	strb	r3, [r7, #22]
            break;
 803316e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8033170:	7dbb      	ldrb	r3, [r7, #22]
 8033172:	2b00      	cmp	r3, #0
 8033174:	d119      	bne.n	80331aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8033176:	68fb      	ldr	r3, [r7, #12]
 8033178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803317c:	b2db      	uxtb	r3, r3
 803317e:	2b03      	cmp	r3, #3
 8033180:	d113      	bne.n	80331aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8033182:	7dba      	ldrb	r2, [r7, #22]
 8033184:	68fb      	ldr	r3, [r7, #12]
 8033186:	32ae      	adds	r2, #174	; 0xae
 8033188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803318c:	691b      	ldr	r3, [r3, #16]
 803318e:	2b00      	cmp	r3, #0
 8033190:	d00b      	beq.n	80331aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8033192:	7dba      	ldrb	r2, [r7, #22]
 8033194:	68fb      	ldr	r3, [r7, #12]
 8033196:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 803319a:	7dba      	ldrb	r2, [r7, #22]
 803319c:	68fb      	ldr	r3, [r7, #12]
 803319e:	32ae      	adds	r2, #174	; 0xae
 80331a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80331a4:	691b      	ldr	r3, [r3, #16]
 80331a6:	68f8      	ldr	r0, [r7, #12]
 80331a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80331aa:	68f8      	ldr	r0, [r7, #12]
 80331ac:	f001 f94a 	bl	8034444 <USBD_CtlSendStatus>
 80331b0:	e032      	b.n	8033218 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80331b2:	7afb      	ldrb	r3, [r7, #11]
 80331b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80331b8:	b2db      	uxtb	r3, r3
 80331ba:	4619      	mov	r1, r3
 80331bc:	68f8      	ldr	r0, [r7, #12]
 80331be:	f000 fa31 	bl	8033624 <USBD_CoreFindEP>
 80331c2:	4603      	mov	r3, r0
 80331c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80331c6:	7dbb      	ldrb	r3, [r7, #22]
 80331c8:	2bff      	cmp	r3, #255	; 0xff
 80331ca:	d025      	beq.n	8033218 <USBD_LL_DataOutStage+0x15c>
 80331cc:	7dbb      	ldrb	r3, [r7, #22]
 80331ce:	2b00      	cmp	r3, #0
 80331d0:	d122      	bne.n	8033218 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80331d2:	68fb      	ldr	r3, [r7, #12]
 80331d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80331d8:	b2db      	uxtb	r3, r3
 80331da:	2b03      	cmp	r3, #3
 80331dc:	d117      	bne.n	803320e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80331de:	7dba      	ldrb	r2, [r7, #22]
 80331e0:	68fb      	ldr	r3, [r7, #12]
 80331e2:	32ae      	adds	r2, #174	; 0xae
 80331e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80331e8:	699b      	ldr	r3, [r3, #24]
 80331ea:	2b00      	cmp	r3, #0
 80331ec:	d00f      	beq.n	803320e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80331ee:	7dba      	ldrb	r2, [r7, #22]
 80331f0:	68fb      	ldr	r3, [r7, #12]
 80331f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80331f6:	7dba      	ldrb	r2, [r7, #22]
 80331f8:	68fb      	ldr	r3, [r7, #12]
 80331fa:	32ae      	adds	r2, #174	; 0xae
 80331fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033200:	699b      	ldr	r3, [r3, #24]
 8033202:	7afa      	ldrb	r2, [r7, #11]
 8033204:	4611      	mov	r1, r2
 8033206:	68f8      	ldr	r0, [r7, #12]
 8033208:	4798      	blx	r3
 803320a:	4603      	mov	r3, r0
 803320c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 803320e:	7dfb      	ldrb	r3, [r7, #23]
 8033210:	2b00      	cmp	r3, #0
 8033212:	d001      	beq.n	8033218 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8033214:	7dfb      	ldrb	r3, [r7, #23]
 8033216:	e000      	b.n	803321a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8033218:	2300      	movs	r3, #0
}
 803321a:	4618      	mov	r0, r3
 803321c:	3718      	adds	r7, #24
 803321e:	46bd      	mov	sp, r7
 8033220:	bd80      	pop	{r7, pc}

08033222 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8033222:	b580      	push	{r7, lr}
 8033224:	b086      	sub	sp, #24
 8033226:	af00      	add	r7, sp, #0
 8033228:	60f8      	str	r0, [r7, #12]
 803322a:	460b      	mov	r3, r1
 803322c:	607a      	str	r2, [r7, #4]
 803322e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8033230:	7afb      	ldrb	r3, [r7, #11]
 8033232:	2b00      	cmp	r3, #0
 8033234:	d16f      	bne.n	8033316 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8033236:	68fb      	ldr	r3, [r7, #12]
 8033238:	3314      	adds	r3, #20
 803323a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 803323c:	68fb      	ldr	r3, [r7, #12]
 803323e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8033242:	2b02      	cmp	r3, #2
 8033244:	d15a      	bne.n	80332fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8033246:	693b      	ldr	r3, [r7, #16]
 8033248:	689a      	ldr	r2, [r3, #8]
 803324a:	693b      	ldr	r3, [r7, #16]
 803324c:	68db      	ldr	r3, [r3, #12]
 803324e:	429a      	cmp	r2, r3
 8033250:	d914      	bls.n	803327c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8033252:	693b      	ldr	r3, [r7, #16]
 8033254:	689a      	ldr	r2, [r3, #8]
 8033256:	693b      	ldr	r3, [r7, #16]
 8033258:	68db      	ldr	r3, [r3, #12]
 803325a:	1ad2      	subs	r2, r2, r3
 803325c:	693b      	ldr	r3, [r7, #16]
 803325e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8033260:	693b      	ldr	r3, [r7, #16]
 8033262:	689b      	ldr	r3, [r3, #8]
 8033264:	461a      	mov	r2, r3
 8033266:	6879      	ldr	r1, [r7, #4]
 8033268:	68f8      	ldr	r0, [r7, #12]
 803326a:	f001 f8ac 	bl	80343c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803326e:	2300      	movs	r3, #0
 8033270:	2200      	movs	r2, #0
 8033272:	2100      	movs	r1, #0
 8033274:	68f8      	ldr	r0, [r7, #12]
 8033276:	f001 fdb3 	bl	8034de0 <USBD_LL_PrepareReceive>
 803327a:	e03f      	b.n	80332fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 803327c:	693b      	ldr	r3, [r7, #16]
 803327e:	68da      	ldr	r2, [r3, #12]
 8033280:	693b      	ldr	r3, [r7, #16]
 8033282:	689b      	ldr	r3, [r3, #8]
 8033284:	429a      	cmp	r2, r3
 8033286:	d11c      	bne.n	80332c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8033288:	693b      	ldr	r3, [r7, #16]
 803328a:	685a      	ldr	r2, [r3, #4]
 803328c:	693b      	ldr	r3, [r7, #16]
 803328e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8033290:	429a      	cmp	r2, r3
 8033292:	d316      	bcc.n	80332c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8033294:	693b      	ldr	r3, [r7, #16]
 8033296:	685a      	ldr	r2, [r3, #4]
 8033298:	68fb      	ldr	r3, [r7, #12]
 803329a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 803329e:	429a      	cmp	r2, r3
 80332a0:	d20f      	bcs.n	80332c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80332a2:	2200      	movs	r2, #0
 80332a4:	2100      	movs	r1, #0
 80332a6:	68f8      	ldr	r0, [r7, #12]
 80332a8:	f001 f88d 	bl	80343c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80332ac:	68fb      	ldr	r3, [r7, #12]
 80332ae:	2200      	movs	r2, #0
 80332b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80332b4:	2300      	movs	r3, #0
 80332b6:	2200      	movs	r2, #0
 80332b8:	2100      	movs	r1, #0
 80332ba:	68f8      	ldr	r0, [r7, #12]
 80332bc:	f001 fd90 	bl	8034de0 <USBD_LL_PrepareReceive>
 80332c0:	e01c      	b.n	80332fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80332c2:	68fb      	ldr	r3, [r7, #12]
 80332c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80332c8:	b2db      	uxtb	r3, r3
 80332ca:	2b03      	cmp	r3, #3
 80332cc:	d10f      	bne.n	80332ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80332ce:	68fb      	ldr	r3, [r7, #12]
 80332d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80332d4:	68db      	ldr	r3, [r3, #12]
 80332d6:	2b00      	cmp	r3, #0
 80332d8:	d009      	beq.n	80332ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80332da:	68fb      	ldr	r3, [r7, #12]
 80332dc:	2200      	movs	r2, #0
 80332de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80332e2:	68fb      	ldr	r3, [r7, #12]
 80332e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80332e8:	68db      	ldr	r3, [r3, #12]
 80332ea:	68f8      	ldr	r0, [r7, #12]
 80332ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80332ee:	2180      	movs	r1, #128	; 0x80
 80332f0:	68f8      	ldr	r0, [r7, #12]
 80332f2:	f001 fccb 	bl	8034c8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80332f6:	68f8      	ldr	r0, [r7, #12]
 80332f8:	f001 f8b7 	bl	803446a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80332fc:	68fb      	ldr	r3, [r7, #12]
 80332fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8033302:	2b00      	cmp	r3, #0
 8033304:	d03a      	beq.n	803337c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8033306:	68f8      	ldr	r0, [r7, #12]
 8033308:	f7ff fe42 	bl	8032f90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 803330c:	68fb      	ldr	r3, [r7, #12]
 803330e:	2200      	movs	r2, #0
 8033310:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8033314:	e032      	b.n	803337c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8033316:	7afb      	ldrb	r3, [r7, #11]
 8033318:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803331c:	b2db      	uxtb	r3, r3
 803331e:	4619      	mov	r1, r3
 8033320:	68f8      	ldr	r0, [r7, #12]
 8033322:	f000 f97f 	bl	8033624 <USBD_CoreFindEP>
 8033326:	4603      	mov	r3, r0
 8033328:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803332a:	7dfb      	ldrb	r3, [r7, #23]
 803332c:	2bff      	cmp	r3, #255	; 0xff
 803332e:	d025      	beq.n	803337c <USBD_LL_DataInStage+0x15a>
 8033330:	7dfb      	ldrb	r3, [r7, #23]
 8033332:	2b00      	cmp	r3, #0
 8033334:	d122      	bne.n	803337c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8033336:	68fb      	ldr	r3, [r7, #12]
 8033338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803333c:	b2db      	uxtb	r3, r3
 803333e:	2b03      	cmp	r3, #3
 8033340:	d11c      	bne.n	803337c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8033342:	7dfa      	ldrb	r2, [r7, #23]
 8033344:	68fb      	ldr	r3, [r7, #12]
 8033346:	32ae      	adds	r2, #174	; 0xae
 8033348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803334c:	695b      	ldr	r3, [r3, #20]
 803334e:	2b00      	cmp	r3, #0
 8033350:	d014      	beq.n	803337c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8033352:	7dfa      	ldrb	r2, [r7, #23]
 8033354:	68fb      	ldr	r3, [r7, #12]
 8033356:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 803335a:	7dfa      	ldrb	r2, [r7, #23]
 803335c:	68fb      	ldr	r3, [r7, #12]
 803335e:	32ae      	adds	r2, #174	; 0xae
 8033360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033364:	695b      	ldr	r3, [r3, #20]
 8033366:	7afa      	ldrb	r2, [r7, #11]
 8033368:	4611      	mov	r1, r2
 803336a:	68f8      	ldr	r0, [r7, #12]
 803336c:	4798      	blx	r3
 803336e:	4603      	mov	r3, r0
 8033370:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8033372:	7dbb      	ldrb	r3, [r7, #22]
 8033374:	2b00      	cmp	r3, #0
 8033376:	d001      	beq.n	803337c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8033378:	7dbb      	ldrb	r3, [r7, #22]
 803337a:	e000      	b.n	803337e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 803337c:	2300      	movs	r3, #0
}
 803337e:	4618      	mov	r0, r3
 8033380:	3718      	adds	r7, #24
 8033382:	46bd      	mov	sp, r7
 8033384:	bd80      	pop	{r7, pc}

08033386 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8033386:	b580      	push	{r7, lr}
 8033388:	b084      	sub	sp, #16
 803338a:	af00      	add	r7, sp, #0
 803338c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 803338e:	2300      	movs	r3, #0
 8033390:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8033392:	687b      	ldr	r3, [r7, #4]
 8033394:	2201      	movs	r2, #1
 8033396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 803339a:	687b      	ldr	r3, [r7, #4]
 803339c:	2200      	movs	r2, #0
 803339e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80333a2:	687b      	ldr	r3, [r7, #4]
 80333a4:	2200      	movs	r2, #0
 80333a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80333a8:	687b      	ldr	r3, [r7, #4]
 80333aa:	2200      	movs	r2, #0
 80333ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80333b0:	687b      	ldr	r3, [r7, #4]
 80333b2:	2200      	movs	r2, #0
 80333b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80333b8:	687b      	ldr	r3, [r7, #4]
 80333ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80333be:	2b00      	cmp	r3, #0
 80333c0:	d014      	beq.n	80333ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80333c2:	687b      	ldr	r3, [r7, #4]
 80333c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80333c8:	685b      	ldr	r3, [r3, #4]
 80333ca:	2b00      	cmp	r3, #0
 80333cc:	d00e      	beq.n	80333ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80333ce:	687b      	ldr	r3, [r7, #4]
 80333d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80333d4:	685b      	ldr	r3, [r3, #4]
 80333d6:	687a      	ldr	r2, [r7, #4]
 80333d8:	6852      	ldr	r2, [r2, #4]
 80333da:	b2d2      	uxtb	r2, r2
 80333dc:	4611      	mov	r1, r2
 80333de:	6878      	ldr	r0, [r7, #4]
 80333e0:	4798      	blx	r3
 80333e2:	4603      	mov	r3, r0
 80333e4:	2b00      	cmp	r3, #0
 80333e6:	d001      	beq.n	80333ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80333e8:	2303      	movs	r3, #3
 80333ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80333ec:	2340      	movs	r3, #64	; 0x40
 80333ee:	2200      	movs	r2, #0
 80333f0:	2100      	movs	r1, #0
 80333f2:	6878      	ldr	r0, [r7, #4]
 80333f4:	f001 fc05 	bl	8034c02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80333f8:	687b      	ldr	r3, [r7, #4]
 80333fa:	2201      	movs	r2, #1
 80333fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8033400:	687b      	ldr	r3, [r7, #4]
 8033402:	2240      	movs	r2, #64	; 0x40
 8033404:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8033408:	2340      	movs	r3, #64	; 0x40
 803340a:	2200      	movs	r2, #0
 803340c:	2180      	movs	r1, #128	; 0x80
 803340e:	6878      	ldr	r0, [r7, #4]
 8033410:	f001 fbf7 	bl	8034c02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8033414:	687b      	ldr	r3, [r7, #4]
 8033416:	2201      	movs	r2, #1
 8033418:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 803341a:	687b      	ldr	r3, [r7, #4]
 803341c:	2240      	movs	r2, #64	; 0x40
 803341e:	621a      	str	r2, [r3, #32]

  return ret;
 8033420:	7bfb      	ldrb	r3, [r7, #15]
}
 8033422:	4618      	mov	r0, r3
 8033424:	3710      	adds	r7, #16
 8033426:	46bd      	mov	sp, r7
 8033428:	bd80      	pop	{r7, pc}

0803342a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 803342a:	b480      	push	{r7}
 803342c:	b083      	sub	sp, #12
 803342e:	af00      	add	r7, sp, #0
 8033430:	6078      	str	r0, [r7, #4]
 8033432:	460b      	mov	r3, r1
 8033434:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8033436:	687b      	ldr	r3, [r7, #4]
 8033438:	78fa      	ldrb	r2, [r7, #3]
 803343a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 803343c:	2300      	movs	r3, #0
}
 803343e:	4618      	mov	r0, r3
 8033440:	370c      	adds	r7, #12
 8033442:	46bd      	mov	sp, r7
 8033444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033448:	4770      	bx	lr

0803344a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 803344a:	b480      	push	{r7}
 803344c:	b083      	sub	sp, #12
 803344e:	af00      	add	r7, sp, #0
 8033450:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8033452:	687b      	ldr	r3, [r7, #4]
 8033454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8033458:	b2da      	uxtb	r2, r3
 803345a:	687b      	ldr	r3, [r7, #4]
 803345c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8033460:	687b      	ldr	r3, [r7, #4]
 8033462:	2204      	movs	r2, #4
 8033464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8033468:	2300      	movs	r3, #0
}
 803346a:	4618      	mov	r0, r3
 803346c:	370c      	adds	r7, #12
 803346e:	46bd      	mov	sp, r7
 8033470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033474:	4770      	bx	lr

08033476 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8033476:	b480      	push	{r7}
 8033478:	b083      	sub	sp, #12
 803347a:	af00      	add	r7, sp, #0
 803347c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 803347e:	687b      	ldr	r3, [r7, #4]
 8033480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8033484:	b2db      	uxtb	r3, r3
 8033486:	2b04      	cmp	r3, #4
 8033488:	d106      	bne.n	8033498 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 803348a:	687b      	ldr	r3, [r7, #4]
 803348c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8033490:	b2da      	uxtb	r2, r3
 8033492:	687b      	ldr	r3, [r7, #4]
 8033494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8033498:	2300      	movs	r3, #0
}
 803349a:	4618      	mov	r0, r3
 803349c:	370c      	adds	r7, #12
 803349e:	46bd      	mov	sp, r7
 80334a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80334a4:	4770      	bx	lr

080334a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80334a6:	b580      	push	{r7, lr}
 80334a8:	b082      	sub	sp, #8
 80334aa:	af00      	add	r7, sp, #0
 80334ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80334ae:	687b      	ldr	r3, [r7, #4]
 80334b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80334b4:	b2db      	uxtb	r3, r3
 80334b6:	2b03      	cmp	r3, #3
 80334b8:	d110      	bne.n	80334dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80334ba:	687b      	ldr	r3, [r7, #4]
 80334bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80334c0:	2b00      	cmp	r3, #0
 80334c2:	d00b      	beq.n	80334dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80334c4:	687b      	ldr	r3, [r7, #4]
 80334c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80334ca:	69db      	ldr	r3, [r3, #28]
 80334cc:	2b00      	cmp	r3, #0
 80334ce:	d005      	beq.n	80334dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80334d0:	687b      	ldr	r3, [r7, #4]
 80334d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80334d6:	69db      	ldr	r3, [r3, #28]
 80334d8:	6878      	ldr	r0, [r7, #4]
 80334da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80334dc:	2300      	movs	r3, #0
}
 80334de:	4618      	mov	r0, r3
 80334e0:	3708      	adds	r7, #8
 80334e2:	46bd      	mov	sp, r7
 80334e4:	bd80      	pop	{r7, pc}

080334e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80334e6:	b580      	push	{r7, lr}
 80334e8:	b082      	sub	sp, #8
 80334ea:	af00      	add	r7, sp, #0
 80334ec:	6078      	str	r0, [r7, #4]
 80334ee:	460b      	mov	r3, r1
 80334f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80334f2:	687b      	ldr	r3, [r7, #4]
 80334f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80334f8:	687b      	ldr	r3, [r7, #4]
 80334fa:	32ae      	adds	r2, #174	; 0xae
 80334fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033500:	2b00      	cmp	r3, #0
 8033502:	d101      	bne.n	8033508 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8033504:	2303      	movs	r3, #3
 8033506:	e01c      	b.n	8033542 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8033508:	687b      	ldr	r3, [r7, #4]
 803350a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803350e:	b2db      	uxtb	r3, r3
 8033510:	2b03      	cmp	r3, #3
 8033512:	d115      	bne.n	8033540 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8033514:	687b      	ldr	r3, [r7, #4]
 8033516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803351a:	687b      	ldr	r3, [r7, #4]
 803351c:	32ae      	adds	r2, #174	; 0xae
 803351e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033522:	6a1b      	ldr	r3, [r3, #32]
 8033524:	2b00      	cmp	r3, #0
 8033526:	d00b      	beq.n	8033540 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8033528:	687b      	ldr	r3, [r7, #4]
 803352a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803352e:	687b      	ldr	r3, [r7, #4]
 8033530:	32ae      	adds	r2, #174	; 0xae
 8033532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033536:	6a1b      	ldr	r3, [r3, #32]
 8033538:	78fa      	ldrb	r2, [r7, #3]
 803353a:	4611      	mov	r1, r2
 803353c:	6878      	ldr	r0, [r7, #4]
 803353e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8033540:	2300      	movs	r3, #0
}
 8033542:	4618      	mov	r0, r3
 8033544:	3708      	adds	r7, #8
 8033546:	46bd      	mov	sp, r7
 8033548:	bd80      	pop	{r7, pc}

0803354a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 803354a:	b580      	push	{r7, lr}
 803354c:	b082      	sub	sp, #8
 803354e:	af00      	add	r7, sp, #0
 8033550:	6078      	str	r0, [r7, #4]
 8033552:	460b      	mov	r3, r1
 8033554:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8033556:	687b      	ldr	r3, [r7, #4]
 8033558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803355c:	687b      	ldr	r3, [r7, #4]
 803355e:	32ae      	adds	r2, #174	; 0xae
 8033560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033564:	2b00      	cmp	r3, #0
 8033566:	d101      	bne.n	803356c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8033568:	2303      	movs	r3, #3
 803356a:	e01c      	b.n	80335a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803356c:	687b      	ldr	r3, [r7, #4]
 803356e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8033572:	b2db      	uxtb	r3, r3
 8033574:	2b03      	cmp	r3, #3
 8033576:	d115      	bne.n	80335a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8033578:	687b      	ldr	r3, [r7, #4]
 803357a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803357e:	687b      	ldr	r3, [r7, #4]
 8033580:	32ae      	adds	r2, #174	; 0xae
 8033582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8033588:	2b00      	cmp	r3, #0
 803358a:	d00b      	beq.n	80335a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 803358c:	687b      	ldr	r3, [r7, #4]
 803358e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033592:	687b      	ldr	r3, [r7, #4]
 8033594:	32ae      	adds	r2, #174	; 0xae
 8033596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803359c:	78fa      	ldrb	r2, [r7, #3]
 803359e:	4611      	mov	r1, r2
 80335a0:	6878      	ldr	r0, [r7, #4]
 80335a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80335a4:	2300      	movs	r3, #0
}
 80335a6:	4618      	mov	r0, r3
 80335a8:	3708      	adds	r7, #8
 80335aa:	46bd      	mov	sp, r7
 80335ac:	bd80      	pop	{r7, pc}

080335ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80335ae:	b480      	push	{r7}
 80335b0:	b083      	sub	sp, #12
 80335b2:	af00      	add	r7, sp, #0
 80335b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80335b6:	2300      	movs	r3, #0
}
 80335b8:	4618      	mov	r0, r3
 80335ba:	370c      	adds	r7, #12
 80335bc:	46bd      	mov	sp, r7
 80335be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80335c2:	4770      	bx	lr

080335c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80335c4:	b580      	push	{r7, lr}
 80335c6:	b084      	sub	sp, #16
 80335c8:	af00      	add	r7, sp, #0
 80335ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80335cc:	2300      	movs	r3, #0
 80335ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80335d0:	687b      	ldr	r3, [r7, #4]
 80335d2:	2201      	movs	r2, #1
 80335d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80335d8:	687b      	ldr	r3, [r7, #4]
 80335da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80335de:	2b00      	cmp	r3, #0
 80335e0:	d00e      	beq.n	8033600 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80335e2:	687b      	ldr	r3, [r7, #4]
 80335e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80335e8:	685b      	ldr	r3, [r3, #4]
 80335ea:	687a      	ldr	r2, [r7, #4]
 80335ec:	6852      	ldr	r2, [r2, #4]
 80335ee:	b2d2      	uxtb	r2, r2
 80335f0:	4611      	mov	r1, r2
 80335f2:	6878      	ldr	r0, [r7, #4]
 80335f4:	4798      	blx	r3
 80335f6:	4603      	mov	r3, r0
 80335f8:	2b00      	cmp	r3, #0
 80335fa:	d001      	beq.n	8033600 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80335fc:	2303      	movs	r3, #3
 80335fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8033600:	7bfb      	ldrb	r3, [r7, #15]
}
 8033602:	4618      	mov	r0, r3
 8033604:	3710      	adds	r7, #16
 8033606:	46bd      	mov	sp, r7
 8033608:	bd80      	pop	{r7, pc}

0803360a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803360a:	b480      	push	{r7}
 803360c:	b083      	sub	sp, #12
 803360e:	af00      	add	r7, sp, #0
 8033610:	6078      	str	r0, [r7, #4]
 8033612:	460b      	mov	r3, r1
 8033614:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8033616:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8033618:	4618      	mov	r0, r3
 803361a:	370c      	adds	r7, #12
 803361c:	46bd      	mov	sp, r7
 803361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033622:	4770      	bx	lr

08033624 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8033624:	b480      	push	{r7}
 8033626:	b083      	sub	sp, #12
 8033628:	af00      	add	r7, sp, #0
 803362a:	6078      	str	r0, [r7, #4]
 803362c:	460b      	mov	r3, r1
 803362e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8033630:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8033632:	4618      	mov	r0, r3
 8033634:	370c      	adds	r7, #12
 8033636:	46bd      	mov	sp, r7
 8033638:	f85d 7b04 	ldr.w	r7, [sp], #4
 803363c:	4770      	bx	lr

0803363e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 803363e:	b580      	push	{r7, lr}
 8033640:	b086      	sub	sp, #24
 8033642:	af00      	add	r7, sp, #0
 8033644:	6078      	str	r0, [r7, #4]
 8033646:	460b      	mov	r3, r1
 8033648:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 803364a:	687b      	ldr	r3, [r7, #4]
 803364c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 803364e:	687b      	ldr	r3, [r7, #4]
 8033650:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8033652:	2300      	movs	r3, #0
 8033654:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8033656:	68fb      	ldr	r3, [r7, #12]
 8033658:	885b      	ldrh	r3, [r3, #2]
 803365a:	b29a      	uxth	r2, r3
 803365c:	68fb      	ldr	r3, [r7, #12]
 803365e:	781b      	ldrb	r3, [r3, #0]
 8033660:	b29b      	uxth	r3, r3
 8033662:	429a      	cmp	r2, r3
 8033664:	d920      	bls.n	80336a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8033666:	68fb      	ldr	r3, [r7, #12]
 8033668:	781b      	ldrb	r3, [r3, #0]
 803366a:	b29b      	uxth	r3, r3
 803366c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 803366e:	e013      	b.n	8033698 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8033670:	f107 030a 	add.w	r3, r7, #10
 8033674:	4619      	mov	r1, r3
 8033676:	6978      	ldr	r0, [r7, #20]
 8033678:	f000 f81b 	bl	80336b2 <USBD_GetNextDesc>
 803367c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 803367e:	697b      	ldr	r3, [r7, #20]
 8033680:	785b      	ldrb	r3, [r3, #1]
 8033682:	2b05      	cmp	r3, #5
 8033684:	d108      	bne.n	8033698 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8033686:	697b      	ldr	r3, [r7, #20]
 8033688:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 803368a:	693b      	ldr	r3, [r7, #16]
 803368c:	789b      	ldrb	r3, [r3, #2]
 803368e:	78fa      	ldrb	r2, [r7, #3]
 8033690:	429a      	cmp	r2, r3
 8033692:	d008      	beq.n	80336a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8033694:	2300      	movs	r3, #0
 8033696:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8033698:	68fb      	ldr	r3, [r7, #12]
 803369a:	885b      	ldrh	r3, [r3, #2]
 803369c:	b29a      	uxth	r2, r3
 803369e:	897b      	ldrh	r3, [r7, #10]
 80336a0:	429a      	cmp	r2, r3
 80336a2:	d8e5      	bhi.n	8033670 <USBD_GetEpDesc+0x32>
 80336a4:	e000      	b.n	80336a8 <USBD_GetEpDesc+0x6a>
          break;
 80336a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80336a8:	693b      	ldr	r3, [r7, #16]
}
 80336aa:	4618      	mov	r0, r3
 80336ac:	3718      	adds	r7, #24
 80336ae:	46bd      	mov	sp, r7
 80336b0:	bd80      	pop	{r7, pc}

080336b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80336b2:	b480      	push	{r7}
 80336b4:	b085      	sub	sp, #20
 80336b6:	af00      	add	r7, sp, #0
 80336b8:	6078      	str	r0, [r7, #4]
 80336ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80336bc:	687b      	ldr	r3, [r7, #4]
 80336be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80336c0:	683b      	ldr	r3, [r7, #0]
 80336c2:	881a      	ldrh	r2, [r3, #0]
 80336c4:	68fb      	ldr	r3, [r7, #12]
 80336c6:	781b      	ldrb	r3, [r3, #0]
 80336c8:	b29b      	uxth	r3, r3
 80336ca:	4413      	add	r3, r2
 80336cc:	b29a      	uxth	r2, r3
 80336ce:	683b      	ldr	r3, [r7, #0]
 80336d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80336d2:	68fb      	ldr	r3, [r7, #12]
 80336d4:	781b      	ldrb	r3, [r3, #0]
 80336d6:	461a      	mov	r2, r3
 80336d8:	687b      	ldr	r3, [r7, #4]
 80336da:	4413      	add	r3, r2
 80336dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80336de:	68fb      	ldr	r3, [r7, #12]
}
 80336e0:	4618      	mov	r0, r3
 80336e2:	3714      	adds	r7, #20
 80336e4:	46bd      	mov	sp, r7
 80336e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80336ea:	4770      	bx	lr

080336ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80336ec:	b480      	push	{r7}
 80336ee:	b087      	sub	sp, #28
 80336f0:	af00      	add	r7, sp, #0
 80336f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80336f4:	687b      	ldr	r3, [r7, #4]
 80336f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80336f8:	697b      	ldr	r3, [r7, #20]
 80336fa:	781b      	ldrb	r3, [r3, #0]
 80336fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80336fe:	697b      	ldr	r3, [r7, #20]
 8033700:	3301      	adds	r3, #1
 8033702:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8033704:	697b      	ldr	r3, [r7, #20]
 8033706:	781b      	ldrb	r3, [r3, #0]
 8033708:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 803370a:	8a3b      	ldrh	r3, [r7, #16]
 803370c:	021b      	lsls	r3, r3, #8
 803370e:	b21a      	sxth	r2, r3
 8033710:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8033714:	4313      	orrs	r3, r2
 8033716:	b21b      	sxth	r3, r3
 8033718:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 803371a:	89fb      	ldrh	r3, [r7, #14]
}
 803371c:	4618      	mov	r0, r3
 803371e:	371c      	adds	r7, #28
 8033720:	46bd      	mov	sp, r7
 8033722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033726:	4770      	bx	lr

08033728 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8033728:	b580      	push	{r7, lr}
 803372a:	b084      	sub	sp, #16
 803372c:	af00      	add	r7, sp, #0
 803372e:	6078      	str	r0, [r7, #4]
 8033730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8033732:	2300      	movs	r3, #0
 8033734:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8033736:	683b      	ldr	r3, [r7, #0]
 8033738:	781b      	ldrb	r3, [r3, #0]
 803373a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803373e:	2b40      	cmp	r3, #64	; 0x40
 8033740:	d005      	beq.n	803374e <USBD_StdDevReq+0x26>
 8033742:	2b40      	cmp	r3, #64	; 0x40
 8033744:	d857      	bhi.n	80337f6 <USBD_StdDevReq+0xce>
 8033746:	2b00      	cmp	r3, #0
 8033748:	d00f      	beq.n	803376a <USBD_StdDevReq+0x42>
 803374a:	2b20      	cmp	r3, #32
 803374c:	d153      	bne.n	80337f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 803374e:	687b      	ldr	r3, [r7, #4]
 8033750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8033754:	687b      	ldr	r3, [r7, #4]
 8033756:	32ae      	adds	r2, #174	; 0xae
 8033758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803375c:	689b      	ldr	r3, [r3, #8]
 803375e:	6839      	ldr	r1, [r7, #0]
 8033760:	6878      	ldr	r0, [r7, #4]
 8033762:	4798      	blx	r3
 8033764:	4603      	mov	r3, r0
 8033766:	73fb      	strb	r3, [r7, #15]
      break;
 8033768:	e04a      	b.n	8033800 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803376a:	683b      	ldr	r3, [r7, #0]
 803376c:	785b      	ldrb	r3, [r3, #1]
 803376e:	2b09      	cmp	r3, #9
 8033770:	d83b      	bhi.n	80337ea <USBD_StdDevReq+0xc2>
 8033772:	a201      	add	r2, pc, #4	; (adr r2, 8033778 <USBD_StdDevReq+0x50>)
 8033774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8033778:	080337cd 	.word	0x080337cd
 803377c:	080337e1 	.word	0x080337e1
 8033780:	080337eb 	.word	0x080337eb
 8033784:	080337d7 	.word	0x080337d7
 8033788:	080337eb 	.word	0x080337eb
 803378c:	080337ab 	.word	0x080337ab
 8033790:	080337a1 	.word	0x080337a1
 8033794:	080337eb 	.word	0x080337eb
 8033798:	080337c3 	.word	0x080337c3
 803379c:	080337b5 	.word	0x080337b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80337a0:	6839      	ldr	r1, [r7, #0]
 80337a2:	6878      	ldr	r0, [r7, #4]
 80337a4:	f000 fa3c 	bl	8033c20 <USBD_GetDescriptor>
          break;
 80337a8:	e024      	b.n	80337f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80337aa:	6839      	ldr	r1, [r7, #0]
 80337ac:	6878      	ldr	r0, [r7, #4]
 80337ae:	f000 fba1 	bl	8033ef4 <USBD_SetAddress>
          break;
 80337b2:	e01f      	b.n	80337f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80337b4:	6839      	ldr	r1, [r7, #0]
 80337b6:	6878      	ldr	r0, [r7, #4]
 80337b8:	f000 fbe0 	bl	8033f7c <USBD_SetConfig>
 80337bc:	4603      	mov	r3, r0
 80337be:	73fb      	strb	r3, [r7, #15]
          break;
 80337c0:	e018      	b.n	80337f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80337c2:	6839      	ldr	r1, [r7, #0]
 80337c4:	6878      	ldr	r0, [r7, #4]
 80337c6:	f000 fc83 	bl	80340d0 <USBD_GetConfig>
          break;
 80337ca:	e013      	b.n	80337f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80337cc:	6839      	ldr	r1, [r7, #0]
 80337ce:	6878      	ldr	r0, [r7, #4]
 80337d0:	f000 fcb4 	bl	803413c <USBD_GetStatus>
          break;
 80337d4:	e00e      	b.n	80337f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80337d6:	6839      	ldr	r1, [r7, #0]
 80337d8:	6878      	ldr	r0, [r7, #4]
 80337da:	f000 fce3 	bl	80341a4 <USBD_SetFeature>
          break;
 80337de:	e009      	b.n	80337f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80337e0:	6839      	ldr	r1, [r7, #0]
 80337e2:	6878      	ldr	r0, [r7, #4]
 80337e4:	f000 fd07 	bl	80341f6 <USBD_ClrFeature>
          break;
 80337e8:	e004      	b.n	80337f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80337ea:	6839      	ldr	r1, [r7, #0]
 80337ec:	6878      	ldr	r0, [r7, #4]
 80337ee:	f000 fd5e 	bl	80342ae <USBD_CtlError>
          break;
 80337f2:	bf00      	nop
      }
      break;
 80337f4:	e004      	b.n	8033800 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80337f6:	6839      	ldr	r1, [r7, #0]
 80337f8:	6878      	ldr	r0, [r7, #4]
 80337fa:	f000 fd58 	bl	80342ae <USBD_CtlError>
      break;
 80337fe:	bf00      	nop
  }

  return ret;
 8033800:	7bfb      	ldrb	r3, [r7, #15]
}
 8033802:	4618      	mov	r0, r3
 8033804:	3710      	adds	r7, #16
 8033806:	46bd      	mov	sp, r7
 8033808:	bd80      	pop	{r7, pc}
 803380a:	bf00      	nop

0803380c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803380c:	b580      	push	{r7, lr}
 803380e:	b084      	sub	sp, #16
 8033810:	af00      	add	r7, sp, #0
 8033812:	6078      	str	r0, [r7, #4]
 8033814:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8033816:	2300      	movs	r3, #0
 8033818:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803381a:	683b      	ldr	r3, [r7, #0]
 803381c:	781b      	ldrb	r3, [r3, #0]
 803381e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8033822:	2b40      	cmp	r3, #64	; 0x40
 8033824:	d005      	beq.n	8033832 <USBD_StdItfReq+0x26>
 8033826:	2b40      	cmp	r3, #64	; 0x40
 8033828:	d852      	bhi.n	80338d0 <USBD_StdItfReq+0xc4>
 803382a:	2b00      	cmp	r3, #0
 803382c:	d001      	beq.n	8033832 <USBD_StdItfReq+0x26>
 803382e:	2b20      	cmp	r3, #32
 8033830:	d14e      	bne.n	80338d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8033832:	687b      	ldr	r3, [r7, #4]
 8033834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8033838:	b2db      	uxtb	r3, r3
 803383a:	3b01      	subs	r3, #1
 803383c:	2b02      	cmp	r3, #2
 803383e:	d840      	bhi.n	80338c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8033840:	683b      	ldr	r3, [r7, #0]
 8033842:	889b      	ldrh	r3, [r3, #4]
 8033844:	b2db      	uxtb	r3, r3
 8033846:	2b01      	cmp	r3, #1
 8033848:	d836      	bhi.n	80338b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 803384a:	683b      	ldr	r3, [r7, #0]
 803384c:	889b      	ldrh	r3, [r3, #4]
 803384e:	b2db      	uxtb	r3, r3
 8033850:	4619      	mov	r1, r3
 8033852:	6878      	ldr	r0, [r7, #4]
 8033854:	f7ff fed9 	bl	803360a <USBD_CoreFindIF>
 8033858:	4603      	mov	r3, r0
 803385a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803385c:	7bbb      	ldrb	r3, [r7, #14]
 803385e:	2bff      	cmp	r3, #255	; 0xff
 8033860:	d01d      	beq.n	803389e <USBD_StdItfReq+0x92>
 8033862:	7bbb      	ldrb	r3, [r7, #14]
 8033864:	2b00      	cmp	r3, #0
 8033866:	d11a      	bne.n	803389e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8033868:	7bba      	ldrb	r2, [r7, #14]
 803386a:	687b      	ldr	r3, [r7, #4]
 803386c:	32ae      	adds	r2, #174	; 0xae
 803386e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033872:	689b      	ldr	r3, [r3, #8]
 8033874:	2b00      	cmp	r3, #0
 8033876:	d00f      	beq.n	8033898 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8033878:	7bba      	ldrb	r2, [r7, #14]
 803387a:	687b      	ldr	r3, [r7, #4]
 803387c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8033880:	7bba      	ldrb	r2, [r7, #14]
 8033882:	687b      	ldr	r3, [r7, #4]
 8033884:	32ae      	adds	r2, #174	; 0xae
 8033886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803388a:	689b      	ldr	r3, [r3, #8]
 803388c:	6839      	ldr	r1, [r7, #0]
 803388e:	6878      	ldr	r0, [r7, #4]
 8033890:	4798      	blx	r3
 8033892:	4603      	mov	r3, r0
 8033894:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8033896:	e004      	b.n	80338a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8033898:	2303      	movs	r3, #3
 803389a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803389c:	e001      	b.n	80338a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 803389e:	2303      	movs	r3, #3
 80338a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80338a2:	683b      	ldr	r3, [r7, #0]
 80338a4:	88db      	ldrh	r3, [r3, #6]
 80338a6:	2b00      	cmp	r3, #0
 80338a8:	d110      	bne.n	80338cc <USBD_StdItfReq+0xc0>
 80338aa:	7bfb      	ldrb	r3, [r7, #15]
 80338ac:	2b00      	cmp	r3, #0
 80338ae:	d10d      	bne.n	80338cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80338b0:	6878      	ldr	r0, [r7, #4]
 80338b2:	f000 fdc7 	bl	8034444 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80338b6:	e009      	b.n	80338cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80338b8:	6839      	ldr	r1, [r7, #0]
 80338ba:	6878      	ldr	r0, [r7, #4]
 80338bc:	f000 fcf7 	bl	80342ae <USBD_CtlError>
          break;
 80338c0:	e004      	b.n	80338cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80338c2:	6839      	ldr	r1, [r7, #0]
 80338c4:	6878      	ldr	r0, [r7, #4]
 80338c6:	f000 fcf2 	bl	80342ae <USBD_CtlError>
          break;
 80338ca:	e000      	b.n	80338ce <USBD_StdItfReq+0xc2>
          break;
 80338cc:	bf00      	nop
      }
      break;
 80338ce:	e004      	b.n	80338da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80338d0:	6839      	ldr	r1, [r7, #0]
 80338d2:	6878      	ldr	r0, [r7, #4]
 80338d4:	f000 fceb 	bl	80342ae <USBD_CtlError>
      break;
 80338d8:	bf00      	nop
  }

  return ret;
 80338da:	7bfb      	ldrb	r3, [r7, #15]
}
 80338dc:	4618      	mov	r0, r3
 80338de:	3710      	adds	r7, #16
 80338e0:	46bd      	mov	sp, r7
 80338e2:	bd80      	pop	{r7, pc}

080338e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80338e4:	b580      	push	{r7, lr}
 80338e6:	b084      	sub	sp, #16
 80338e8:	af00      	add	r7, sp, #0
 80338ea:	6078      	str	r0, [r7, #4]
 80338ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80338ee:	2300      	movs	r3, #0
 80338f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80338f2:	683b      	ldr	r3, [r7, #0]
 80338f4:	889b      	ldrh	r3, [r3, #4]
 80338f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80338f8:	683b      	ldr	r3, [r7, #0]
 80338fa:	781b      	ldrb	r3, [r3, #0]
 80338fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8033900:	2b40      	cmp	r3, #64	; 0x40
 8033902:	d007      	beq.n	8033914 <USBD_StdEPReq+0x30>
 8033904:	2b40      	cmp	r3, #64	; 0x40
 8033906:	f200 817f 	bhi.w	8033c08 <USBD_StdEPReq+0x324>
 803390a:	2b00      	cmp	r3, #0
 803390c:	d02a      	beq.n	8033964 <USBD_StdEPReq+0x80>
 803390e:	2b20      	cmp	r3, #32
 8033910:	f040 817a 	bne.w	8033c08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8033914:	7bbb      	ldrb	r3, [r7, #14]
 8033916:	4619      	mov	r1, r3
 8033918:	6878      	ldr	r0, [r7, #4]
 803391a:	f7ff fe83 	bl	8033624 <USBD_CoreFindEP>
 803391e:	4603      	mov	r3, r0
 8033920:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8033922:	7b7b      	ldrb	r3, [r7, #13]
 8033924:	2bff      	cmp	r3, #255	; 0xff
 8033926:	f000 8174 	beq.w	8033c12 <USBD_StdEPReq+0x32e>
 803392a:	7b7b      	ldrb	r3, [r7, #13]
 803392c:	2b00      	cmp	r3, #0
 803392e:	f040 8170 	bne.w	8033c12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8033932:	7b7a      	ldrb	r2, [r7, #13]
 8033934:	687b      	ldr	r3, [r7, #4]
 8033936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 803393a:	7b7a      	ldrb	r2, [r7, #13]
 803393c:	687b      	ldr	r3, [r7, #4]
 803393e:	32ae      	adds	r2, #174	; 0xae
 8033940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033944:	689b      	ldr	r3, [r3, #8]
 8033946:	2b00      	cmp	r3, #0
 8033948:	f000 8163 	beq.w	8033c12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 803394c:	7b7a      	ldrb	r2, [r7, #13]
 803394e:	687b      	ldr	r3, [r7, #4]
 8033950:	32ae      	adds	r2, #174	; 0xae
 8033952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033956:	689b      	ldr	r3, [r3, #8]
 8033958:	6839      	ldr	r1, [r7, #0]
 803395a:	6878      	ldr	r0, [r7, #4]
 803395c:	4798      	blx	r3
 803395e:	4603      	mov	r3, r0
 8033960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8033962:	e156      	b.n	8033c12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8033964:	683b      	ldr	r3, [r7, #0]
 8033966:	785b      	ldrb	r3, [r3, #1]
 8033968:	2b03      	cmp	r3, #3
 803396a:	d008      	beq.n	803397e <USBD_StdEPReq+0x9a>
 803396c:	2b03      	cmp	r3, #3
 803396e:	f300 8145 	bgt.w	8033bfc <USBD_StdEPReq+0x318>
 8033972:	2b00      	cmp	r3, #0
 8033974:	f000 809b 	beq.w	8033aae <USBD_StdEPReq+0x1ca>
 8033978:	2b01      	cmp	r3, #1
 803397a:	d03c      	beq.n	80339f6 <USBD_StdEPReq+0x112>
 803397c:	e13e      	b.n	8033bfc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 803397e:	687b      	ldr	r3, [r7, #4]
 8033980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8033984:	b2db      	uxtb	r3, r3
 8033986:	2b02      	cmp	r3, #2
 8033988:	d002      	beq.n	8033990 <USBD_StdEPReq+0xac>
 803398a:	2b03      	cmp	r3, #3
 803398c:	d016      	beq.n	80339bc <USBD_StdEPReq+0xd8>
 803398e:	e02c      	b.n	80339ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8033990:	7bbb      	ldrb	r3, [r7, #14]
 8033992:	2b00      	cmp	r3, #0
 8033994:	d00d      	beq.n	80339b2 <USBD_StdEPReq+0xce>
 8033996:	7bbb      	ldrb	r3, [r7, #14]
 8033998:	2b80      	cmp	r3, #128	; 0x80
 803399a:	d00a      	beq.n	80339b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803399c:	7bbb      	ldrb	r3, [r7, #14]
 803399e:	4619      	mov	r1, r3
 80339a0:	6878      	ldr	r0, [r7, #4]
 80339a2:	f001 f973 	bl	8034c8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80339a6:	2180      	movs	r1, #128	; 0x80
 80339a8:	6878      	ldr	r0, [r7, #4]
 80339aa:	f001 f96f 	bl	8034c8c <USBD_LL_StallEP>
 80339ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80339b0:	e020      	b.n	80339f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80339b2:	6839      	ldr	r1, [r7, #0]
 80339b4:	6878      	ldr	r0, [r7, #4]
 80339b6:	f000 fc7a 	bl	80342ae <USBD_CtlError>
              break;
 80339ba:	e01b      	b.n	80339f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80339bc:	683b      	ldr	r3, [r7, #0]
 80339be:	885b      	ldrh	r3, [r3, #2]
 80339c0:	2b00      	cmp	r3, #0
 80339c2:	d10e      	bne.n	80339e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80339c4:	7bbb      	ldrb	r3, [r7, #14]
 80339c6:	2b00      	cmp	r3, #0
 80339c8:	d00b      	beq.n	80339e2 <USBD_StdEPReq+0xfe>
 80339ca:	7bbb      	ldrb	r3, [r7, #14]
 80339cc:	2b80      	cmp	r3, #128	; 0x80
 80339ce:	d008      	beq.n	80339e2 <USBD_StdEPReq+0xfe>
 80339d0:	683b      	ldr	r3, [r7, #0]
 80339d2:	88db      	ldrh	r3, [r3, #6]
 80339d4:	2b00      	cmp	r3, #0
 80339d6:	d104      	bne.n	80339e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80339d8:	7bbb      	ldrb	r3, [r7, #14]
 80339da:	4619      	mov	r1, r3
 80339dc:	6878      	ldr	r0, [r7, #4]
 80339de:	f001 f955 	bl	8034c8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80339e2:	6878      	ldr	r0, [r7, #4]
 80339e4:	f000 fd2e 	bl	8034444 <USBD_CtlSendStatus>

              break;
 80339e8:	e004      	b.n	80339f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80339ea:	6839      	ldr	r1, [r7, #0]
 80339ec:	6878      	ldr	r0, [r7, #4]
 80339ee:	f000 fc5e 	bl	80342ae <USBD_CtlError>
              break;
 80339f2:	bf00      	nop
          }
          break;
 80339f4:	e107      	b.n	8033c06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80339f6:	687b      	ldr	r3, [r7, #4]
 80339f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80339fc:	b2db      	uxtb	r3, r3
 80339fe:	2b02      	cmp	r3, #2
 8033a00:	d002      	beq.n	8033a08 <USBD_StdEPReq+0x124>
 8033a02:	2b03      	cmp	r3, #3
 8033a04:	d016      	beq.n	8033a34 <USBD_StdEPReq+0x150>
 8033a06:	e04b      	b.n	8033aa0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8033a08:	7bbb      	ldrb	r3, [r7, #14]
 8033a0a:	2b00      	cmp	r3, #0
 8033a0c:	d00d      	beq.n	8033a2a <USBD_StdEPReq+0x146>
 8033a0e:	7bbb      	ldrb	r3, [r7, #14]
 8033a10:	2b80      	cmp	r3, #128	; 0x80
 8033a12:	d00a      	beq.n	8033a2a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8033a14:	7bbb      	ldrb	r3, [r7, #14]
 8033a16:	4619      	mov	r1, r3
 8033a18:	6878      	ldr	r0, [r7, #4]
 8033a1a:	f001 f937 	bl	8034c8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8033a1e:	2180      	movs	r1, #128	; 0x80
 8033a20:	6878      	ldr	r0, [r7, #4]
 8033a22:	f001 f933 	bl	8034c8c <USBD_LL_StallEP>
 8033a26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8033a28:	e040      	b.n	8033aac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8033a2a:	6839      	ldr	r1, [r7, #0]
 8033a2c:	6878      	ldr	r0, [r7, #4]
 8033a2e:	f000 fc3e 	bl	80342ae <USBD_CtlError>
              break;
 8033a32:	e03b      	b.n	8033aac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8033a34:	683b      	ldr	r3, [r7, #0]
 8033a36:	885b      	ldrh	r3, [r3, #2]
 8033a38:	2b00      	cmp	r3, #0
 8033a3a:	d136      	bne.n	8033aaa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8033a3c:	7bbb      	ldrb	r3, [r7, #14]
 8033a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8033a42:	2b00      	cmp	r3, #0
 8033a44:	d004      	beq.n	8033a50 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8033a46:	7bbb      	ldrb	r3, [r7, #14]
 8033a48:	4619      	mov	r1, r3
 8033a4a:	6878      	ldr	r0, [r7, #4]
 8033a4c:	f001 f93d 	bl	8034cca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8033a50:	6878      	ldr	r0, [r7, #4]
 8033a52:	f000 fcf7 	bl	8034444 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8033a56:	7bbb      	ldrb	r3, [r7, #14]
 8033a58:	4619      	mov	r1, r3
 8033a5a:	6878      	ldr	r0, [r7, #4]
 8033a5c:	f7ff fde2 	bl	8033624 <USBD_CoreFindEP>
 8033a60:	4603      	mov	r3, r0
 8033a62:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8033a64:	7b7b      	ldrb	r3, [r7, #13]
 8033a66:	2bff      	cmp	r3, #255	; 0xff
 8033a68:	d01f      	beq.n	8033aaa <USBD_StdEPReq+0x1c6>
 8033a6a:	7b7b      	ldrb	r3, [r7, #13]
 8033a6c:	2b00      	cmp	r3, #0
 8033a6e:	d11c      	bne.n	8033aaa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8033a70:	7b7a      	ldrb	r2, [r7, #13]
 8033a72:	687b      	ldr	r3, [r7, #4]
 8033a74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8033a78:	7b7a      	ldrb	r2, [r7, #13]
 8033a7a:	687b      	ldr	r3, [r7, #4]
 8033a7c:	32ae      	adds	r2, #174	; 0xae
 8033a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033a82:	689b      	ldr	r3, [r3, #8]
 8033a84:	2b00      	cmp	r3, #0
 8033a86:	d010      	beq.n	8033aaa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8033a88:	7b7a      	ldrb	r2, [r7, #13]
 8033a8a:	687b      	ldr	r3, [r7, #4]
 8033a8c:	32ae      	adds	r2, #174	; 0xae
 8033a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033a92:	689b      	ldr	r3, [r3, #8]
 8033a94:	6839      	ldr	r1, [r7, #0]
 8033a96:	6878      	ldr	r0, [r7, #4]
 8033a98:	4798      	blx	r3
 8033a9a:	4603      	mov	r3, r0
 8033a9c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8033a9e:	e004      	b.n	8033aaa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8033aa0:	6839      	ldr	r1, [r7, #0]
 8033aa2:	6878      	ldr	r0, [r7, #4]
 8033aa4:	f000 fc03 	bl	80342ae <USBD_CtlError>
              break;
 8033aa8:	e000      	b.n	8033aac <USBD_StdEPReq+0x1c8>
              break;
 8033aaa:	bf00      	nop
          }
          break;
 8033aac:	e0ab      	b.n	8033c06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8033aae:	687b      	ldr	r3, [r7, #4]
 8033ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8033ab4:	b2db      	uxtb	r3, r3
 8033ab6:	2b02      	cmp	r3, #2
 8033ab8:	d002      	beq.n	8033ac0 <USBD_StdEPReq+0x1dc>
 8033aba:	2b03      	cmp	r3, #3
 8033abc:	d032      	beq.n	8033b24 <USBD_StdEPReq+0x240>
 8033abe:	e097      	b.n	8033bf0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8033ac0:	7bbb      	ldrb	r3, [r7, #14]
 8033ac2:	2b00      	cmp	r3, #0
 8033ac4:	d007      	beq.n	8033ad6 <USBD_StdEPReq+0x1f2>
 8033ac6:	7bbb      	ldrb	r3, [r7, #14]
 8033ac8:	2b80      	cmp	r3, #128	; 0x80
 8033aca:	d004      	beq.n	8033ad6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8033acc:	6839      	ldr	r1, [r7, #0]
 8033ace:	6878      	ldr	r0, [r7, #4]
 8033ad0:	f000 fbed 	bl	80342ae <USBD_CtlError>
                break;
 8033ad4:	e091      	b.n	8033bfa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8033ad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8033ada:	2b00      	cmp	r3, #0
 8033adc:	da0b      	bge.n	8033af6 <USBD_StdEPReq+0x212>
 8033ade:	7bbb      	ldrb	r3, [r7, #14]
 8033ae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8033ae4:	4613      	mov	r3, r2
 8033ae6:	009b      	lsls	r3, r3, #2
 8033ae8:	4413      	add	r3, r2
 8033aea:	009b      	lsls	r3, r3, #2
 8033aec:	3310      	adds	r3, #16
 8033aee:	687a      	ldr	r2, [r7, #4]
 8033af0:	4413      	add	r3, r2
 8033af2:	3304      	adds	r3, #4
 8033af4:	e00b      	b.n	8033b0e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8033af6:	7bbb      	ldrb	r3, [r7, #14]
 8033af8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8033afc:	4613      	mov	r3, r2
 8033afe:	009b      	lsls	r3, r3, #2
 8033b00:	4413      	add	r3, r2
 8033b02:	009b      	lsls	r3, r3, #2
 8033b04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8033b08:	687a      	ldr	r2, [r7, #4]
 8033b0a:	4413      	add	r3, r2
 8033b0c:	3304      	adds	r3, #4
 8033b0e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8033b10:	68bb      	ldr	r3, [r7, #8]
 8033b12:	2200      	movs	r2, #0
 8033b14:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8033b16:	68bb      	ldr	r3, [r7, #8]
 8033b18:	2202      	movs	r2, #2
 8033b1a:	4619      	mov	r1, r3
 8033b1c:	6878      	ldr	r0, [r7, #4]
 8033b1e:	f000 fc37 	bl	8034390 <USBD_CtlSendData>
              break;
 8033b22:	e06a      	b.n	8033bfa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8033b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8033b28:	2b00      	cmp	r3, #0
 8033b2a:	da11      	bge.n	8033b50 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8033b2c:	7bbb      	ldrb	r3, [r7, #14]
 8033b2e:	f003 020f 	and.w	r2, r3, #15
 8033b32:	6879      	ldr	r1, [r7, #4]
 8033b34:	4613      	mov	r3, r2
 8033b36:	009b      	lsls	r3, r3, #2
 8033b38:	4413      	add	r3, r2
 8033b3a:	009b      	lsls	r3, r3, #2
 8033b3c:	440b      	add	r3, r1
 8033b3e:	3324      	adds	r3, #36	; 0x24
 8033b40:	881b      	ldrh	r3, [r3, #0]
 8033b42:	2b00      	cmp	r3, #0
 8033b44:	d117      	bne.n	8033b76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8033b46:	6839      	ldr	r1, [r7, #0]
 8033b48:	6878      	ldr	r0, [r7, #4]
 8033b4a:	f000 fbb0 	bl	80342ae <USBD_CtlError>
                  break;
 8033b4e:	e054      	b.n	8033bfa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8033b50:	7bbb      	ldrb	r3, [r7, #14]
 8033b52:	f003 020f 	and.w	r2, r3, #15
 8033b56:	6879      	ldr	r1, [r7, #4]
 8033b58:	4613      	mov	r3, r2
 8033b5a:	009b      	lsls	r3, r3, #2
 8033b5c:	4413      	add	r3, r2
 8033b5e:	009b      	lsls	r3, r3, #2
 8033b60:	440b      	add	r3, r1
 8033b62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8033b66:	881b      	ldrh	r3, [r3, #0]
 8033b68:	2b00      	cmp	r3, #0
 8033b6a:	d104      	bne.n	8033b76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8033b6c:	6839      	ldr	r1, [r7, #0]
 8033b6e:	6878      	ldr	r0, [r7, #4]
 8033b70:	f000 fb9d 	bl	80342ae <USBD_CtlError>
                  break;
 8033b74:	e041      	b.n	8033bfa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8033b76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8033b7a:	2b00      	cmp	r3, #0
 8033b7c:	da0b      	bge.n	8033b96 <USBD_StdEPReq+0x2b2>
 8033b7e:	7bbb      	ldrb	r3, [r7, #14]
 8033b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8033b84:	4613      	mov	r3, r2
 8033b86:	009b      	lsls	r3, r3, #2
 8033b88:	4413      	add	r3, r2
 8033b8a:	009b      	lsls	r3, r3, #2
 8033b8c:	3310      	adds	r3, #16
 8033b8e:	687a      	ldr	r2, [r7, #4]
 8033b90:	4413      	add	r3, r2
 8033b92:	3304      	adds	r3, #4
 8033b94:	e00b      	b.n	8033bae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8033b96:	7bbb      	ldrb	r3, [r7, #14]
 8033b98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8033b9c:	4613      	mov	r3, r2
 8033b9e:	009b      	lsls	r3, r3, #2
 8033ba0:	4413      	add	r3, r2
 8033ba2:	009b      	lsls	r3, r3, #2
 8033ba4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8033ba8:	687a      	ldr	r2, [r7, #4]
 8033baa:	4413      	add	r3, r2
 8033bac:	3304      	adds	r3, #4
 8033bae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8033bb0:	7bbb      	ldrb	r3, [r7, #14]
 8033bb2:	2b00      	cmp	r3, #0
 8033bb4:	d002      	beq.n	8033bbc <USBD_StdEPReq+0x2d8>
 8033bb6:	7bbb      	ldrb	r3, [r7, #14]
 8033bb8:	2b80      	cmp	r3, #128	; 0x80
 8033bba:	d103      	bne.n	8033bc4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8033bbc:	68bb      	ldr	r3, [r7, #8]
 8033bbe:	2200      	movs	r2, #0
 8033bc0:	601a      	str	r2, [r3, #0]
 8033bc2:	e00e      	b.n	8033be2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8033bc4:	7bbb      	ldrb	r3, [r7, #14]
 8033bc6:	4619      	mov	r1, r3
 8033bc8:	6878      	ldr	r0, [r7, #4]
 8033bca:	f001 f89d 	bl	8034d08 <USBD_LL_IsStallEP>
 8033bce:	4603      	mov	r3, r0
 8033bd0:	2b00      	cmp	r3, #0
 8033bd2:	d003      	beq.n	8033bdc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8033bd4:	68bb      	ldr	r3, [r7, #8]
 8033bd6:	2201      	movs	r2, #1
 8033bd8:	601a      	str	r2, [r3, #0]
 8033bda:	e002      	b.n	8033be2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8033bdc:	68bb      	ldr	r3, [r7, #8]
 8033bde:	2200      	movs	r2, #0
 8033be0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8033be2:	68bb      	ldr	r3, [r7, #8]
 8033be4:	2202      	movs	r2, #2
 8033be6:	4619      	mov	r1, r3
 8033be8:	6878      	ldr	r0, [r7, #4]
 8033bea:	f000 fbd1 	bl	8034390 <USBD_CtlSendData>
              break;
 8033bee:	e004      	b.n	8033bfa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8033bf0:	6839      	ldr	r1, [r7, #0]
 8033bf2:	6878      	ldr	r0, [r7, #4]
 8033bf4:	f000 fb5b 	bl	80342ae <USBD_CtlError>
              break;
 8033bf8:	bf00      	nop
          }
          break;
 8033bfa:	e004      	b.n	8033c06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8033bfc:	6839      	ldr	r1, [r7, #0]
 8033bfe:	6878      	ldr	r0, [r7, #4]
 8033c00:	f000 fb55 	bl	80342ae <USBD_CtlError>
          break;
 8033c04:	bf00      	nop
      }
      break;
 8033c06:	e005      	b.n	8033c14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8033c08:	6839      	ldr	r1, [r7, #0]
 8033c0a:	6878      	ldr	r0, [r7, #4]
 8033c0c:	f000 fb4f 	bl	80342ae <USBD_CtlError>
      break;
 8033c10:	e000      	b.n	8033c14 <USBD_StdEPReq+0x330>
      break;
 8033c12:	bf00      	nop
  }

  return ret;
 8033c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8033c16:	4618      	mov	r0, r3
 8033c18:	3710      	adds	r7, #16
 8033c1a:	46bd      	mov	sp, r7
 8033c1c:	bd80      	pop	{r7, pc}
	...

08033c20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8033c20:	b580      	push	{r7, lr}
 8033c22:	b084      	sub	sp, #16
 8033c24:	af00      	add	r7, sp, #0
 8033c26:	6078      	str	r0, [r7, #4]
 8033c28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8033c2a:	2300      	movs	r3, #0
 8033c2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8033c2e:	2300      	movs	r3, #0
 8033c30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8033c32:	2300      	movs	r3, #0
 8033c34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8033c36:	683b      	ldr	r3, [r7, #0]
 8033c38:	885b      	ldrh	r3, [r3, #2]
 8033c3a:	0a1b      	lsrs	r3, r3, #8
 8033c3c:	b29b      	uxth	r3, r3
 8033c3e:	3b01      	subs	r3, #1
 8033c40:	2b06      	cmp	r3, #6
 8033c42:	f200 8128 	bhi.w	8033e96 <USBD_GetDescriptor+0x276>
 8033c46:	a201      	add	r2, pc, #4	; (adr r2, 8033c4c <USBD_GetDescriptor+0x2c>)
 8033c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8033c4c:	08033c69 	.word	0x08033c69
 8033c50:	08033c81 	.word	0x08033c81
 8033c54:	08033cc1 	.word	0x08033cc1
 8033c58:	08033e97 	.word	0x08033e97
 8033c5c:	08033e97 	.word	0x08033e97
 8033c60:	08033e37 	.word	0x08033e37
 8033c64:	08033e63 	.word	0x08033e63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8033c68:	687b      	ldr	r3, [r7, #4]
 8033c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033c6e:	681b      	ldr	r3, [r3, #0]
 8033c70:	687a      	ldr	r2, [r7, #4]
 8033c72:	7c12      	ldrb	r2, [r2, #16]
 8033c74:	f107 0108 	add.w	r1, r7, #8
 8033c78:	4610      	mov	r0, r2
 8033c7a:	4798      	blx	r3
 8033c7c:	60f8      	str	r0, [r7, #12]
      break;
 8033c7e:	e112      	b.n	8033ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8033c80:	687b      	ldr	r3, [r7, #4]
 8033c82:	7c1b      	ldrb	r3, [r3, #16]
 8033c84:	2b00      	cmp	r3, #0
 8033c86:	d10d      	bne.n	8033ca4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8033c88:	687b      	ldr	r3, [r7, #4]
 8033c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8033c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033c90:	f107 0208 	add.w	r2, r7, #8
 8033c94:	4610      	mov	r0, r2
 8033c96:	4798      	blx	r3
 8033c98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8033c9a:	68fb      	ldr	r3, [r7, #12]
 8033c9c:	3301      	adds	r3, #1
 8033c9e:	2202      	movs	r2, #2
 8033ca0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8033ca2:	e100      	b.n	8033ea6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8033ca4:	687b      	ldr	r3, [r7, #4]
 8033ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8033caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033cac:	f107 0208 	add.w	r2, r7, #8
 8033cb0:	4610      	mov	r0, r2
 8033cb2:	4798      	blx	r3
 8033cb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8033cb6:	68fb      	ldr	r3, [r7, #12]
 8033cb8:	3301      	adds	r3, #1
 8033cba:	2202      	movs	r2, #2
 8033cbc:	701a      	strb	r2, [r3, #0]
      break;
 8033cbe:	e0f2      	b.n	8033ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8033cc0:	683b      	ldr	r3, [r7, #0]
 8033cc2:	885b      	ldrh	r3, [r3, #2]
 8033cc4:	b2db      	uxtb	r3, r3
 8033cc6:	2b05      	cmp	r3, #5
 8033cc8:	f200 80ac 	bhi.w	8033e24 <USBD_GetDescriptor+0x204>
 8033ccc:	a201      	add	r2, pc, #4	; (adr r2, 8033cd4 <USBD_GetDescriptor+0xb4>)
 8033cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8033cd2:	bf00      	nop
 8033cd4:	08033ced 	.word	0x08033ced
 8033cd8:	08033d21 	.word	0x08033d21
 8033cdc:	08033d55 	.word	0x08033d55
 8033ce0:	08033d89 	.word	0x08033d89
 8033ce4:	08033dbd 	.word	0x08033dbd
 8033ce8:	08033df1 	.word	0x08033df1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8033cec:	687b      	ldr	r3, [r7, #4]
 8033cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033cf2:	685b      	ldr	r3, [r3, #4]
 8033cf4:	2b00      	cmp	r3, #0
 8033cf6:	d00b      	beq.n	8033d10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8033cf8:	687b      	ldr	r3, [r7, #4]
 8033cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033cfe:	685b      	ldr	r3, [r3, #4]
 8033d00:	687a      	ldr	r2, [r7, #4]
 8033d02:	7c12      	ldrb	r2, [r2, #16]
 8033d04:	f107 0108 	add.w	r1, r7, #8
 8033d08:	4610      	mov	r0, r2
 8033d0a:	4798      	blx	r3
 8033d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8033d0e:	e091      	b.n	8033e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8033d10:	6839      	ldr	r1, [r7, #0]
 8033d12:	6878      	ldr	r0, [r7, #4]
 8033d14:	f000 facb 	bl	80342ae <USBD_CtlError>
            err++;
 8033d18:	7afb      	ldrb	r3, [r7, #11]
 8033d1a:	3301      	adds	r3, #1
 8033d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8033d1e:	e089      	b.n	8033e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8033d20:	687b      	ldr	r3, [r7, #4]
 8033d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033d26:	689b      	ldr	r3, [r3, #8]
 8033d28:	2b00      	cmp	r3, #0
 8033d2a:	d00b      	beq.n	8033d44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8033d2c:	687b      	ldr	r3, [r7, #4]
 8033d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033d32:	689b      	ldr	r3, [r3, #8]
 8033d34:	687a      	ldr	r2, [r7, #4]
 8033d36:	7c12      	ldrb	r2, [r2, #16]
 8033d38:	f107 0108 	add.w	r1, r7, #8
 8033d3c:	4610      	mov	r0, r2
 8033d3e:	4798      	blx	r3
 8033d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8033d42:	e077      	b.n	8033e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8033d44:	6839      	ldr	r1, [r7, #0]
 8033d46:	6878      	ldr	r0, [r7, #4]
 8033d48:	f000 fab1 	bl	80342ae <USBD_CtlError>
            err++;
 8033d4c:	7afb      	ldrb	r3, [r7, #11]
 8033d4e:	3301      	adds	r3, #1
 8033d50:	72fb      	strb	r3, [r7, #11]
          break;
 8033d52:	e06f      	b.n	8033e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8033d54:	687b      	ldr	r3, [r7, #4]
 8033d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033d5a:	68db      	ldr	r3, [r3, #12]
 8033d5c:	2b00      	cmp	r3, #0
 8033d5e:	d00b      	beq.n	8033d78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8033d60:	687b      	ldr	r3, [r7, #4]
 8033d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033d66:	68db      	ldr	r3, [r3, #12]
 8033d68:	687a      	ldr	r2, [r7, #4]
 8033d6a:	7c12      	ldrb	r2, [r2, #16]
 8033d6c:	f107 0108 	add.w	r1, r7, #8
 8033d70:	4610      	mov	r0, r2
 8033d72:	4798      	blx	r3
 8033d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8033d76:	e05d      	b.n	8033e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8033d78:	6839      	ldr	r1, [r7, #0]
 8033d7a:	6878      	ldr	r0, [r7, #4]
 8033d7c:	f000 fa97 	bl	80342ae <USBD_CtlError>
            err++;
 8033d80:	7afb      	ldrb	r3, [r7, #11]
 8033d82:	3301      	adds	r3, #1
 8033d84:	72fb      	strb	r3, [r7, #11]
          break;
 8033d86:	e055      	b.n	8033e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8033d88:	687b      	ldr	r3, [r7, #4]
 8033d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033d8e:	691b      	ldr	r3, [r3, #16]
 8033d90:	2b00      	cmp	r3, #0
 8033d92:	d00b      	beq.n	8033dac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8033d94:	687b      	ldr	r3, [r7, #4]
 8033d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033d9a:	691b      	ldr	r3, [r3, #16]
 8033d9c:	687a      	ldr	r2, [r7, #4]
 8033d9e:	7c12      	ldrb	r2, [r2, #16]
 8033da0:	f107 0108 	add.w	r1, r7, #8
 8033da4:	4610      	mov	r0, r2
 8033da6:	4798      	blx	r3
 8033da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8033daa:	e043      	b.n	8033e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8033dac:	6839      	ldr	r1, [r7, #0]
 8033dae:	6878      	ldr	r0, [r7, #4]
 8033db0:	f000 fa7d 	bl	80342ae <USBD_CtlError>
            err++;
 8033db4:	7afb      	ldrb	r3, [r7, #11]
 8033db6:	3301      	adds	r3, #1
 8033db8:	72fb      	strb	r3, [r7, #11]
          break;
 8033dba:	e03b      	b.n	8033e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8033dbc:	687b      	ldr	r3, [r7, #4]
 8033dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033dc2:	695b      	ldr	r3, [r3, #20]
 8033dc4:	2b00      	cmp	r3, #0
 8033dc6:	d00b      	beq.n	8033de0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8033dc8:	687b      	ldr	r3, [r7, #4]
 8033dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033dce:	695b      	ldr	r3, [r3, #20]
 8033dd0:	687a      	ldr	r2, [r7, #4]
 8033dd2:	7c12      	ldrb	r2, [r2, #16]
 8033dd4:	f107 0108 	add.w	r1, r7, #8
 8033dd8:	4610      	mov	r0, r2
 8033dda:	4798      	blx	r3
 8033ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8033dde:	e029      	b.n	8033e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8033de0:	6839      	ldr	r1, [r7, #0]
 8033de2:	6878      	ldr	r0, [r7, #4]
 8033de4:	f000 fa63 	bl	80342ae <USBD_CtlError>
            err++;
 8033de8:	7afb      	ldrb	r3, [r7, #11]
 8033dea:	3301      	adds	r3, #1
 8033dec:	72fb      	strb	r3, [r7, #11]
          break;
 8033dee:	e021      	b.n	8033e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8033df0:	687b      	ldr	r3, [r7, #4]
 8033df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033df6:	699b      	ldr	r3, [r3, #24]
 8033df8:	2b00      	cmp	r3, #0
 8033dfa:	d00b      	beq.n	8033e14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8033dfc:	687b      	ldr	r3, [r7, #4]
 8033dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8033e02:	699b      	ldr	r3, [r3, #24]
 8033e04:	687a      	ldr	r2, [r7, #4]
 8033e06:	7c12      	ldrb	r2, [r2, #16]
 8033e08:	f107 0108 	add.w	r1, r7, #8
 8033e0c:	4610      	mov	r0, r2
 8033e0e:	4798      	blx	r3
 8033e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8033e12:	e00f      	b.n	8033e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8033e14:	6839      	ldr	r1, [r7, #0]
 8033e16:	6878      	ldr	r0, [r7, #4]
 8033e18:	f000 fa49 	bl	80342ae <USBD_CtlError>
            err++;
 8033e1c:	7afb      	ldrb	r3, [r7, #11]
 8033e1e:	3301      	adds	r3, #1
 8033e20:	72fb      	strb	r3, [r7, #11]
          break;
 8033e22:	e007      	b.n	8033e34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8033e24:	6839      	ldr	r1, [r7, #0]
 8033e26:	6878      	ldr	r0, [r7, #4]
 8033e28:	f000 fa41 	bl	80342ae <USBD_CtlError>
          err++;
 8033e2c:	7afb      	ldrb	r3, [r7, #11]
 8033e2e:	3301      	adds	r3, #1
 8033e30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8033e32:	bf00      	nop
      }
      break;
 8033e34:	e037      	b.n	8033ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8033e36:	687b      	ldr	r3, [r7, #4]
 8033e38:	7c1b      	ldrb	r3, [r3, #16]
 8033e3a:	2b00      	cmp	r3, #0
 8033e3c:	d109      	bne.n	8033e52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8033e3e:	687b      	ldr	r3, [r7, #4]
 8033e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8033e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033e46:	f107 0208 	add.w	r2, r7, #8
 8033e4a:	4610      	mov	r0, r2
 8033e4c:	4798      	blx	r3
 8033e4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8033e50:	e029      	b.n	8033ea6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8033e52:	6839      	ldr	r1, [r7, #0]
 8033e54:	6878      	ldr	r0, [r7, #4]
 8033e56:	f000 fa2a 	bl	80342ae <USBD_CtlError>
        err++;
 8033e5a:	7afb      	ldrb	r3, [r7, #11]
 8033e5c:	3301      	adds	r3, #1
 8033e5e:	72fb      	strb	r3, [r7, #11]
      break;
 8033e60:	e021      	b.n	8033ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8033e62:	687b      	ldr	r3, [r7, #4]
 8033e64:	7c1b      	ldrb	r3, [r3, #16]
 8033e66:	2b00      	cmp	r3, #0
 8033e68:	d10d      	bne.n	8033e86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8033e6a:	687b      	ldr	r3, [r7, #4]
 8033e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8033e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033e72:	f107 0208 	add.w	r2, r7, #8
 8033e76:	4610      	mov	r0, r2
 8033e78:	4798      	blx	r3
 8033e7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8033e7c:	68fb      	ldr	r3, [r7, #12]
 8033e7e:	3301      	adds	r3, #1
 8033e80:	2207      	movs	r2, #7
 8033e82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8033e84:	e00f      	b.n	8033ea6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8033e86:	6839      	ldr	r1, [r7, #0]
 8033e88:	6878      	ldr	r0, [r7, #4]
 8033e8a:	f000 fa10 	bl	80342ae <USBD_CtlError>
        err++;
 8033e8e:	7afb      	ldrb	r3, [r7, #11]
 8033e90:	3301      	adds	r3, #1
 8033e92:	72fb      	strb	r3, [r7, #11]
      break;
 8033e94:	e007      	b.n	8033ea6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8033e96:	6839      	ldr	r1, [r7, #0]
 8033e98:	6878      	ldr	r0, [r7, #4]
 8033e9a:	f000 fa08 	bl	80342ae <USBD_CtlError>
      err++;
 8033e9e:	7afb      	ldrb	r3, [r7, #11]
 8033ea0:	3301      	adds	r3, #1
 8033ea2:	72fb      	strb	r3, [r7, #11]
      break;
 8033ea4:	bf00      	nop
  }

  if (err != 0U)
 8033ea6:	7afb      	ldrb	r3, [r7, #11]
 8033ea8:	2b00      	cmp	r3, #0
 8033eaa:	d11e      	bne.n	8033eea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8033eac:	683b      	ldr	r3, [r7, #0]
 8033eae:	88db      	ldrh	r3, [r3, #6]
 8033eb0:	2b00      	cmp	r3, #0
 8033eb2:	d016      	beq.n	8033ee2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8033eb4:	893b      	ldrh	r3, [r7, #8]
 8033eb6:	2b00      	cmp	r3, #0
 8033eb8:	d00e      	beq.n	8033ed8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8033eba:	683b      	ldr	r3, [r7, #0]
 8033ebc:	88da      	ldrh	r2, [r3, #6]
 8033ebe:	893b      	ldrh	r3, [r7, #8]
 8033ec0:	4293      	cmp	r3, r2
 8033ec2:	bf28      	it	cs
 8033ec4:	4613      	movcs	r3, r2
 8033ec6:	b29b      	uxth	r3, r3
 8033ec8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8033eca:	893b      	ldrh	r3, [r7, #8]
 8033ecc:	461a      	mov	r2, r3
 8033ece:	68f9      	ldr	r1, [r7, #12]
 8033ed0:	6878      	ldr	r0, [r7, #4]
 8033ed2:	f000 fa5d 	bl	8034390 <USBD_CtlSendData>
 8033ed6:	e009      	b.n	8033eec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8033ed8:	6839      	ldr	r1, [r7, #0]
 8033eda:	6878      	ldr	r0, [r7, #4]
 8033edc:	f000 f9e7 	bl	80342ae <USBD_CtlError>
 8033ee0:	e004      	b.n	8033eec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8033ee2:	6878      	ldr	r0, [r7, #4]
 8033ee4:	f000 faae 	bl	8034444 <USBD_CtlSendStatus>
 8033ee8:	e000      	b.n	8033eec <USBD_GetDescriptor+0x2cc>
    return;
 8033eea:	bf00      	nop
  }
}
 8033eec:	3710      	adds	r7, #16
 8033eee:	46bd      	mov	sp, r7
 8033ef0:	bd80      	pop	{r7, pc}
 8033ef2:	bf00      	nop

08033ef4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8033ef4:	b580      	push	{r7, lr}
 8033ef6:	b084      	sub	sp, #16
 8033ef8:	af00      	add	r7, sp, #0
 8033efa:	6078      	str	r0, [r7, #4]
 8033efc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8033efe:	683b      	ldr	r3, [r7, #0]
 8033f00:	889b      	ldrh	r3, [r3, #4]
 8033f02:	2b00      	cmp	r3, #0
 8033f04:	d131      	bne.n	8033f6a <USBD_SetAddress+0x76>
 8033f06:	683b      	ldr	r3, [r7, #0]
 8033f08:	88db      	ldrh	r3, [r3, #6]
 8033f0a:	2b00      	cmp	r3, #0
 8033f0c:	d12d      	bne.n	8033f6a <USBD_SetAddress+0x76>
 8033f0e:	683b      	ldr	r3, [r7, #0]
 8033f10:	885b      	ldrh	r3, [r3, #2]
 8033f12:	2b7f      	cmp	r3, #127	; 0x7f
 8033f14:	d829      	bhi.n	8033f6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8033f16:	683b      	ldr	r3, [r7, #0]
 8033f18:	885b      	ldrh	r3, [r3, #2]
 8033f1a:	b2db      	uxtb	r3, r3
 8033f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8033f20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8033f22:	687b      	ldr	r3, [r7, #4]
 8033f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8033f28:	b2db      	uxtb	r3, r3
 8033f2a:	2b03      	cmp	r3, #3
 8033f2c:	d104      	bne.n	8033f38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8033f2e:	6839      	ldr	r1, [r7, #0]
 8033f30:	6878      	ldr	r0, [r7, #4]
 8033f32:	f000 f9bc 	bl	80342ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8033f36:	e01d      	b.n	8033f74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8033f38:	687b      	ldr	r3, [r7, #4]
 8033f3a:	7bfa      	ldrb	r2, [r7, #15]
 8033f3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8033f40:	7bfb      	ldrb	r3, [r7, #15]
 8033f42:	4619      	mov	r1, r3
 8033f44:	6878      	ldr	r0, [r7, #4]
 8033f46:	f000 ff0b 	bl	8034d60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8033f4a:	6878      	ldr	r0, [r7, #4]
 8033f4c:	f000 fa7a 	bl	8034444 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8033f50:	7bfb      	ldrb	r3, [r7, #15]
 8033f52:	2b00      	cmp	r3, #0
 8033f54:	d004      	beq.n	8033f60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8033f56:	687b      	ldr	r3, [r7, #4]
 8033f58:	2202      	movs	r2, #2
 8033f5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8033f5e:	e009      	b.n	8033f74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8033f60:	687b      	ldr	r3, [r7, #4]
 8033f62:	2201      	movs	r2, #1
 8033f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8033f68:	e004      	b.n	8033f74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8033f6a:	6839      	ldr	r1, [r7, #0]
 8033f6c:	6878      	ldr	r0, [r7, #4]
 8033f6e:	f000 f99e 	bl	80342ae <USBD_CtlError>
  }
}
 8033f72:	bf00      	nop
 8033f74:	bf00      	nop
 8033f76:	3710      	adds	r7, #16
 8033f78:	46bd      	mov	sp, r7
 8033f7a:	bd80      	pop	{r7, pc}

08033f7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8033f7c:	b580      	push	{r7, lr}
 8033f7e:	b084      	sub	sp, #16
 8033f80:	af00      	add	r7, sp, #0
 8033f82:	6078      	str	r0, [r7, #4]
 8033f84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8033f86:	2300      	movs	r3, #0
 8033f88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8033f8a:	683b      	ldr	r3, [r7, #0]
 8033f8c:	885b      	ldrh	r3, [r3, #2]
 8033f8e:	b2da      	uxtb	r2, r3
 8033f90:	4b4e      	ldr	r3, [pc, #312]	; (80340cc <USBD_SetConfig+0x150>)
 8033f92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8033f94:	4b4d      	ldr	r3, [pc, #308]	; (80340cc <USBD_SetConfig+0x150>)
 8033f96:	781b      	ldrb	r3, [r3, #0]
 8033f98:	2b01      	cmp	r3, #1
 8033f9a:	d905      	bls.n	8033fa8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8033f9c:	6839      	ldr	r1, [r7, #0]
 8033f9e:	6878      	ldr	r0, [r7, #4]
 8033fa0:	f000 f985 	bl	80342ae <USBD_CtlError>
    return USBD_FAIL;
 8033fa4:	2303      	movs	r3, #3
 8033fa6:	e08c      	b.n	80340c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8033fa8:	687b      	ldr	r3, [r7, #4]
 8033faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8033fae:	b2db      	uxtb	r3, r3
 8033fb0:	2b02      	cmp	r3, #2
 8033fb2:	d002      	beq.n	8033fba <USBD_SetConfig+0x3e>
 8033fb4:	2b03      	cmp	r3, #3
 8033fb6:	d029      	beq.n	803400c <USBD_SetConfig+0x90>
 8033fb8:	e075      	b.n	80340a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8033fba:	4b44      	ldr	r3, [pc, #272]	; (80340cc <USBD_SetConfig+0x150>)
 8033fbc:	781b      	ldrb	r3, [r3, #0]
 8033fbe:	2b00      	cmp	r3, #0
 8033fc0:	d020      	beq.n	8034004 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8033fc2:	4b42      	ldr	r3, [pc, #264]	; (80340cc <USBD_SetConfig+0x150>)
 8033fc4:	781b      	ldrb	r3, [r3, #0]
 8033fc6:	461a      	mov	r2, r3
 8033fc8:	687b      	ldr	r3, [r7, #4]
 8033fca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8033fcc:	4b3f      	ldr	r3, [pc, #252]	; (80340cc <USBD_SetConfig+0x150>)
 8033fce:	781b      	ldrb	r3, [r3, #0]
 8033fd0:	4619      	mov	r1, r3
 8033fd2:	6878      	ldr	r0, [r7, #4]
 8033fd4:	f7fe ffe7 	bl	8032fa6 <USBD_SetClassConfig>
 8033fd8:	4603      	mov	r3, r0
 8033fda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8033fdc:	7bfb      	ldrb	r3, [r7, #15]
 8033fde:	2b00      	cmp	r3, #0
 8033fe0:	d008      	beq.n	8033ff4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8033fe2:	6839      	ldr	r1, [r7, #0]
 8033fe4:	6878      	ldr	r0, [r7, #4]
 8033fe6:	f000 f962 	bl	80342ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8033fea:	687b      	ldr	r3, [r7, #4]
 8033fec:	2202      	movs	r2, #2
 8033fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8033ff2:	e065      	b.n	80340c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8033ff4:	6878      	ldr	r0, [r7, #4]
 8033ff6:	f000 fa25 	bl	8034444 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8033ffa:	687b      	ldr	r3, [r7, #4]
 8033ffc:	2203      	movs	r2, #3
 8033ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8034002:	e05d      	b.n	80340c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8034004:	6878      	ldr	r0, [r7, #4]
 8034006:	f000 fa1d 	bl	8034444 <USBD_CtlSendStatus>
      break;
 803400a:	e059      	b.n	80340c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 803400c:	4b2f      	ldr	r3, [pc, #188]	; (80340cc <USBD_SetConfig+0x150>)
 803400e:	781b      	ldrb	r3, [r3, #0]
 8034010:	2b00      	cmp	r3, #0
 8034012:	d112      	bne.n	803403a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8034014:	687b      	ldr	r3, [r7, #4]
 8034016:	2202      	movs	r2, #2
 8034018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 803401c:	4b2b      	ldr	r3, [pc, #172]	; (80340cc <USBD_SetConfig+0x150>)
 803401e:	781b      	ldrb	r3, [r3, #0]
 8034020:	461a      	mov	r2, r3
 8034022:	687b      	ldr	r3, [r7, #4]
 8034024:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8034026:	4b29      	ldr	r3, [pc, #164]	; (80340cc <USBD_SetConfig+0x150>)
 8034028:	781b      	ldrb	r3, [r3, #0]
 803402a:	4619      	mov	r1, r3
 803402c:	6878      	ldr	r0, [r7, #4]
 803402e:	f7fe ffd6 	bl	8032fde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8034032:	6878      	ldr	r0, [r7, #4]
 8034034:	f000 fa06 	bl	8034444 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8034038:	e042      	b.n	80340c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 803403a:	4b24      	ldr	r3, [pc, #144]	; (80340cc <USBD_SetConfig+0x150>)
 803403c:	781b      	ldrb	r3, [r3, #0]
 803403e:	461a      	mov	r2, r3
 8034040:	687b      	ldr	r3, [r7, #4]
 8034042:	685b      	ldr	r3, [r3, #4]
 8034044:	429a      	cmp	r2, r3
 8034046:	d02a      	beq.n	803409e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8034048:	687b      	ldr	r3, [r7, #4]
 803404a:	685b      	ldr	r3, [r3, #4]
 803404c:	b2db      	uxtb	r3, r3
 803404e:	4619      	mov	r1, r3
 8034050:	6878      	ldr	r0, [r7, #4]
 8034052:	f7fe ffc4 	bl	8032fde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8034056:	4b1d      	ldr	r3, [pc, #116]	; (80340cc <USBD_SetConfig+0x150>)
 8034058:	781b      	ldrb	r3, [r3, #0]
 803405a:	461a      	mov	r2, r3
 803405c:	687b      	ldr	r3, [r7, #4]
 803405e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8034060:	4b1a      	ldr	r3, [pc, #104]	; (80340cc <USBD_SetConfig+0x150>)
 8034062:	781b      	ldrb	r3, [r3, #0]
 8034064:	4619      	mov	r1, r3
 8034066:	6878      	ldr	r0, [r7, #4]
 8034068:	f7fe ff9d 	bl	8032fa6 <USBD_SetClassConfig>
 803406c:	4603      	mov	r3, r0
 803406e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8034070:	7bfb      	ldrb	r3, [r7, #15]
 8034072:	2b00      	cmp	r3, #0
 8034074:	d00f      	beq.n	8034096 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8034076:	6839      	ldr	r1, [r7, #0]
 8034078:	6878      	ldr	r0, [r7, #4]
 803407a:	f000 f918 	bl	80342ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803407e:	687b      	ldr	r3, [r7, #4]
 8034080:	685b      	ldr	r3, [r3, #4]
 8034082:	b2db      	uxtb	r3, r3
 8034084:	4619      	mov	r1, r3
 8034086:	6878      	ldr	r0, [r7, #4]
 8034088:	f7fe ffa9 	bl	8032fde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803408c:	687b      	ldr	r3, [r7, #4]
 803408e:	2202      	movs	r2, #2
 8034090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8034094:	e014      	b.n	80340c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8034096:	6878      	ldr	r0, [r7, #4]
 8034098:	f000 f9d4 	bl	8034444 <USBD_CtlSendStatus>
      break;
 803409c:	e010      	b.n	80340c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803409e:	6878      	ldr	r0, [r7, #4]
 80340a0:	f000 f9d0 	bl	8034444 <USBD_CtlSendStatus>
      break;
 80340a4:	e00c      	b.n	80340c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80340a6:	6839      	ldr	r1, [r7, #0]
 80340a8:	6878      	ldr	r0, [r7, #4]
 80340aa:	f000 f900 	bl	80342ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80340ae:	4b07      	ldr	r3, [pc, #28]	; (80340cc <USBD_SetConfig+0x150>)
 80340b0:	781b      	ldrb	r3, [r3, #0]
 80340b2:	4619      	mov	r1, r3
 80340b4:	6878      	ldr	r0, [r7, #4]
 80340b6:	f7fe ff92 	bl	8032fde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80340ba:	2303      	movs	r3, #3
 80340bc:	73fb      	strb	r3, [r7, #15]
      break;
 80340be:	bf00      	nop
  }

  return ret;
 80340c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80340c2:	4618      	mov	r0, r3
 80340c4:	3710      	adds	r7, #16
 80340c6:	46bd      	mov	sp, r7
 80340c8:	bd80      	pop	{r7, pc}
 80340ca:	bf00      	nop
 80340cc:	24000879 	.word	0x24000879

080340d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80340d0:	b580      	push	{r7, lr}
 80340d2:	b082      	sub	sp, #8
 80340d4:	af00      	add	r7, sp, #0
 80340d6:	6078      	str	r0, [r7, #4]
 80340d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80340da:	683b      	ldr	r3, [r7, #0]
 80340dc:	88db      	ldrh	r3, [r3, #6]
 80340de:	2b01      	cmp	r3, #1
 80340e0:	d004      	beq.n	80340ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80340e2:	6839      	ldr	r1, [r7, #0]
 80340e4:	6878      	ldr	r0, [r7, #4]
 80340e6:	f000 f8e2 	bl	80342ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80340ea:	e023      	b.n	8034134 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80340ec:	687b      	ldr	r3, [r7, #4]
 80340ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80340f2:	b2db      	uxtb	r3, r3
 80340f4:	2b02      	cmp	r3, #2
 80340f6:	dc02      	bgt.n	80340fe <USBD_GetConfig+0x2e>
 80340f8:	2b00      	cmp	r3, #0
 80340fa:	dc03      	bgt.n	8034104 <USBD_GetConfig+0x34>
 80340fc:	e015      	b.n	803412a <USBD_GetConfig+0x5a>
 80340fe:	2b03      	cmp	r3, #3
 8034100:	d00b      	beq.n	803411a <USBD_GetConfig+0x4a>
 8034102:	e012      	b.n	803412a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8034104:	687b      	ldr	r3, [r7, #4]
 8034106:	2200      	movs	r2, #0
 8034108:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803410a:	687b      	ldr	r3, [r7, #4]
 803410c:	3308      	adds	r3, #8
 803410e:	2201      	movs	r2, #1
 8034110:	4619      	mov	r1, r3
 8034112:	6878      	ldr	r0, [r7, #4]
 8034114:	f000 f93c 	bl	8034390 <USBD_CtlSendData>
        break;
 8034118:	e00c      	b.n	8034134 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803411a:	687b      	ldr	r3, [r7, #4]
 803411c:	3304      	adds	r3, #4
 803411e:	2201      	movs	r2, #1
 8034120:	4619      	mov	r1, r3
 8034122:	6878      	ldr	r0, [r7, #4]
 8034124:	f000 f934 	bl	8034390 <USBD_CtlSendData>
        break;
 8034128:	e004      	b.n	8034134 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 803412a:	6839      	ldr	r1, [r7, #0]
 803412c:	6878      	ldr	r0, [r7, #4]
 803412e:	f000 f8be 	bl	80342ae <USBD_CtlError>
        break;
 8034132:	bf00      	nop
}
 8034134:	bf00      	nop
 8034136:	3708      	adds	r7, #8
 8034138:	46bd      	mov	sp, r7
 803413a:	bd80      	pop	{r7, pc}

0803413c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803413c:	b580      	push	{r7, lr}
 803413e:	b082      	sub	sp, #8
 8034140:	af00      	add	r7, sp, #0
 8034142:	6078      	str	r0, [r7, #4]
 8034144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8034146:	687b      	ldr	r3, [r7, #4]
 8034148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803414c:	b2db      	uxtb	r3, r3
 803414e:	3b01      	subs	r3, #1
 8034150:	2b02      	cmp	r3, #2
 8034152:	d81e      	bhi.n	8034192 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8034154:	683b      	ldr	r3, [r7, #0]
 8034156:	88db      	ldrh	r3, [r3, #6]
 8034158:	2b02      	cmp	r3, #2
 803415a:	d004      	beq.n	8034166 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 803415c:	6839      	ldr	r1, [r7, #0]
 803415e:	6878      	ldr	r0, [r7, #4]
 8034160:	f000 f8a5 	bl	80342ae <USBD_CtlError>
        break;
 8034164:	e01a      	b.n	803419c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8034166:	687b      	ldr	r3, [r7, #4]
 8034168:	2201      	movs	r2, #1
 803416a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 803416c:	687b      	ldr	r3, [r7, #4]
 803416e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8034172:	2b00      	cmp	r3, #0
 8034174:	d005      	beq.n	8034182 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8034176:	687b      	ldr	r3, [r7, #4]
 8034178:	68db      	ldr	r3, [r3, #12]
 803417a:	f043 0202 	orr.w	r2, r3, #2
 803417e:	687b      	ldr	r3, [r7, #4]
 8034180:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8034182:	687b      	ldr	r3, [r7, #4]
 8034184:	330c      	adds	r3, #12
 8034186:	2202      	movs	r2, #2
 8034188:	4619      	mov	r1, r3
 803418a:	6878      	ldr	r0, [r7, #4]
 803418c:	f000 f900 	bl	8034390 <USBD_CtlSendData>
      break;
 8034190:	e004      	b.n	803419c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8034192:	6839      	ldr	r1, [r7, #0]
 8034194:	6878      	ldr	r0, [r7, #4]
 8034196:	f000 f88a 	bl	80342ae <USBD_CtlError>
      break;
 803419a:	bf00      	nop
  }
}
 803419c:	bf00      	nop
 803419e:	3708      	adds	r7, #8
 80341a0:	46bd      	mov	sp, r7
 80341a2:	bd80      	pop	{r7, pc}

080341a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80341a4:	b580      	push	{r7, lr}
 80341a6:	b082      	sub	sp, #8
 80341a8:	af00      	add	r7, sp, #0
 80341aa:	6078      	str	r0, [r7, #4]
 80341ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80341ae:	683b      	ldr	r3, [r7, #0]
 80341b0:	885b      	ldrh	r3, [r3, #2]
 80341b2:	2b01      	cmp	r3, #1
 80341b4:	d107      	bne.n	80341c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80341b6:	687b      	ldr	r3, [r7, #4]
 80341b8:	2201      	movs	r2, #1
 80341ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80341be:	6878      	ldr	r0, [r7, #4]
 80341c0:	f000 f940 	bl	8034444 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80341c4:	e013      	b.n	80341ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80341c6:	683b      	ldr	r3, [r7, #0]
 80341c8:	885b      	ldrh	r3, [r3, #2]
 80341ca:	2b02      	cmp	r3, #2
 80341cc:	d10b      	bne.n	80341e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80341ce:	683b      	ldr	r3, [r7, #0]
 80341d0:	889b      	ldrh	r3, [r3, #4]
 80341d2:	0a1b      	lsrs	r3, r3, #8
 80341d4:	b29b      	uxth	r3, r3
 80341d6:	b2da      	uxtb	r2, r3
 80341d8:	687b      	ldr	r3, [r7, #4]
 80341da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80341de:	6878      	ldr	r0, [r7, #4]
 80341e0:	f000 f930 	bl	8034444 <USBD_CtlSendStatus>
}
 80341e4:	e003      	b.n	80341ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80341e6:	6839      	ldr	r1, [r7, #0]
 80341e8:	6878      	ldr	r0, [r7, #4]
 80341ea:	f000 f860 	bl	80342ae <USBD_CtlError>
}
 80341ee:	bf00      	nop
 80341f0:	3708      	adds	r7, #8
 80341f2:	46bd      	mov	sp, r7
 80341f4:	bd80      	pop	{r7, pc}

080341f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80341f6:	b580      	push	{r7, lr}
 80341f8:	b082      	sub	sp, #8
 80341fa:	af00      	add	r7, sp, #0
 80341fc:	6078      	str	r0, [r7, #4]
 80341fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8034200:	687b      	ldr	r3, [r7, #4]
 8034202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034206:	b2db      	uxtb	r3, r3
 8034208:	3b01      	subs	r3, #1
 803420a:	2b02      	cmp	r3, #2
 803420c:	d80b      	bhi.n	8034226 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803420e:	683b      	ldr	r3, [r7, #0]
 8034210:	885b      	ldrh	r3, [r3, #2]
 8034212:	2b01      	cmp	r3, #1
 8034214:	d10c      	bne.n	8034230 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8034216:	687b      	ldr	r3, [r7, #4]
 8034218:	2200      	movs	r2, #0
 803421a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 803421e:	6878      	ldr	r0, [r7, #4]
 8034220:	f000 f910 	bl	8034444 <USBD_CtlSendStatus>
      }
      break;
 8034224:	e004      	b.n	8034230 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8034226:	6839      	ldr	r1, [r7, #0]
 8034228:	6878      	ldr	r0, [r7, #4]
 803422a:	f000 f840 	bl	80342ae <USBD_CtlError>
      break;
 803422e:	e000      	b.n	8034232 <USBD_ClrFeature+0x3c>
      break;
 8034230:	bf00      	nop
  }
}
 8034232:	bf00      	nop
 8034234:	3708      	adds	r7, #8
 8034236:	46bd      	mov	sp, r7
 8034238:	bd80      	pop	{r7, pc}

0803423a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803423a:	b580      	push	{r7, lr}
 803423c:	b084      	sub	sp, #16
 803423e:	af00      	add	r7, sp, #0
 8034240:	6078      	str	r0, [r7, #4]
 8034242:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8034244:	683b      	ldr	r3, [r7, #0]
 8034246:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8034248:	68fb      	ldr	r3, [r7, #12]
 803424a:	781a      	ldrb	r2, [r3, #0]
 803424c:	687b      	ldr	r3, [r7, #4]
 803424e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8034250:	68fb      	ldr	r3, [r7, #12]
 8034252:	3301      	adds	r3, #1
 8034254:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8034256:	68fb      	ldr	r3, [r7, #12]
 8034258:	781a      	ldrb	r2, [r3, #0]
 803425a:	687b      	ldr	r3, [r7, #4]
 803425c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803425e:	68fb      	ldr	r3, [r7, #12]
 8034260:	3301      	adds	r3, #1
 8034262:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8034264:	68f8      	ldr	r0, [r7, #12]
 8034266:	f7ff fa41 	bl	80336ec <SWAPBYTE>
 803426a:	4603      	mov	r3, r0
 803426c:	461a      	mov	r2, r3
 803426e:	687b      	ldr	r3, [r7, #4]
 8034270:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8034272:	68fb      	ldr	r3, [r7, #12]
 8034274:	3301      	adds	r3, #1
 8034276:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8034278:	68fb      	ldr	r3, [r7, #12]
 803427a:	3301      	adds	r3, #1
 803427c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803427e:	68f8      	ldr	r0, [r7, #12]
 8034280:	f7ff fa34 	bl	80336ec <SWAPBYTE>
 8034284:	4603      	mov	r3, r0
 8034286:	461a      	mov	r2, r3
 8034288:	687b      	ldr	r3, [r7, #4]
 803428a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 803428c:	68fb      	ldr	r3, [r7, #12]
 803428e:	3301      	adds	r3, #1
 8034290:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8034292:	68fb      	ldr	r3, [r7, #12]
 8034294:	3301      	adds	r3, #1
 8034296:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8034298:	68f8      	ldr	r0, [r7, #12]
 803429a:	f7ff fa27 	bl	80336ec <SWAPBYTE>
 803429e:	4603      	mov	r3, r0
 80342a0:	461a      	mov	r2, r3
 80342a2:	687b      	ldr	r3, [r7, #4]
 80342a4:	80da      	strh	r2, [r3, #6]
}
 80342a6:	bf00      	nop
 80342a8:	3710      	adds	r7, #16
 80342aa:	46bd      	mov	sp, r7
 80342ac:	bd80      	pop	{r7, pc}

080342ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80342ae:	b580      	push	{r7, lr}
 80342b0:	b082      	sub	sp, #8
 80342b2:	af00      	add	r7, sp, #0
 80342b4:	6078      	str	r0, [r7, #4]
 80342b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80342b8:	2180      	movs	r1, #128	; 0x80
 80342ba:	6878      	ldr	r0, [r7, #4]
 80342bc:	f000 fce6 	bl	8034c8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80342c0:	2100      	movs	r1, #0
 80342c2:	6878      	ldr	r0, [r7, #4]
 80342c4:	f000 fce2 	bl	8034c8c <USBD_LL_StallEP>
}
 80342c8:	bf00      	nop
 80342ca:	3708      	adds	r7, #8
 80342cc:	46bd      	mov	sp, r7
 80342ce:	bd80      	pop	{r7, pc}

080342d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80342d0:	b580      	push	{r7, lr}
 80342d2:	b086      	sub	sp, #24
 80342d4:	af00      	add	r7, sp, #0
 80342d6:	60f8      	str	r0, [r7, #12]
 80342d8:	60b9      	str	r1, [r7, #8]
 80342da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80342dc:	2300      	movs	r3, #0
 80342de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80342e0:	68fb      	ldr	r3, [r7, #12]
 80342e2:	2b00      	cmp	r3, #0
 80342e4:	d036      	beq.n	8034354 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80342e6:	68fb      	ldr	r3, [r7, #12]
 80342e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80342ea:	6938      	ldr	r0, [r7, #16]
 80342ec:	f000 f836 	bl	803435c <USBD_GetLen>
 80342f0:	4603      	mov	r3, r0
 80342f2:	3301      	adds	r3, #1
 80342f4:	b29b      	uxth	r3, r3
 80342f6:	005b      	lsls	r3, r3, #1
 80342f8:	b29a      	uxth	r2, r3
 80342fa:	687b      	ldr	r3, [r7, #4]
 80342fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80342fe:	7dfb      	ldrb	r3, [r7, #23]
 8034300:	68ba      	ldr	r2, [r7, #8]
 8034302:	4413      	add	r3, r2
 8034304:	687a      	ldr	r2, [r7, #4]
 8034306:	7812      	ldrb	r2, [r2, #0]
 8034308:	701a      	strb	r2, [r3, #0]
  idx++;
 803430a:	7dfb      	ldrb	r3, [r7, #23]
 803430c:	3301      	adds	r3, #1
 803430e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8034310:	7dfb      	ldrb	r3, [r7, #23]
 8034312:	68ba      	ldr	r2, [r7, #8]
 8034314:	4413      	add	r3, r2
 8034316:	2203      	movs	r2, #3
 8034318:	701a      	strb	r2, [r3, #0]
  idx++;
 803431a:	7dfb      	ldrb	r3, [r7, #23]
 803431c:	3301      	adds	r3, #1
 803431e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8034320:	e013      	b.n	803434a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8034322:	7dfb      	ldrb	r3, [r7, #23]
 8034324:	68ba      	ldr	r2, [r7, #8]
 8034326:	4413      	add	r3, r2
 8034328:	693a      	ldr	r2, [r7, #16]
 803432a:	7812      	ldrb	r2, [r2, #0]
 803432c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803432e:	693b      	ldr	r3, [r7, #16]
 8034330:	3301      	adds	r3, #1
 8034332:	613b      	str	r3, [r7, #16]
    idx++;
 8034334:	7dfb      	ldrb	r3, [r7, #23]
 8034336:	3301      	adds	r3, #1
 8034338:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803433a:	7dfb      	ldrb	r3, [r7, #23]
 803433c:	68ba      	ldr	r2, [r7, #8]
 803433e:	4413      	add	r3, r2
 8034340:	2200      	movs	r2, #0
 8034342:	701a      	strb	r2, [r3, #0]
    idx++;
 8034344:	7dfb      	ldrb	r3, [r7, #23]
 8034346:	3301      	adds	r3, #1
 8034348:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803434a:	693b      	ldr	r3, [r7, #16]
 803434c:	781b      	ldrb	r3, [r3, #0]
 803434e:	2b00      	cmp	r3, #0
 8034350:	d1e7      	bne.n	8034322 <USBD_GetString+0x52>
 8034352:	e000      	b.n	8034356 <USBD_GetString+0x86>
    return;
 8034354:	bf00      	nop
  }
}
 8034356:	3718      	adds	r7, #24
 8034358:	46bd      	mov	sp, r7
 803435a:	bd80      	pop	{r7, pc}

0803435c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 803435c:	b480      	push	{r7}
 803435e:	b085      	sub	sp, #20
 8034360:	af00      	add	r7, sp, #0
 8034362:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8034364:	2300      	movs	r3, #0
 8034366:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8034368:	687b      	ldr	r3, [r7, #4]
 803436a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 803436c:	e005      	b.n	803437a <USBD_GetLen+0x1e>
  {
    len++;
 803436e:	7bfb      	ldrb	r3, [r7, #15]
 8034370:	3301      	adds	r3, #1
 8034372:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8034374:	68bb      	ldr	r3, [r7, #8]
 8034376:	3301      	adds	r3, #1
 8034378:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803437a:	68bb      	ldr	r3, [r7, #8]
 803437c:	781b      	ldrb	r3, [r3, #0]
 803437e:	2b00      	cmp	r3, #0
 8034380:	d1f5      	bne.n	803436e <USBD_GetLen+0x12>
  }

  return len;
 8034382:	7bfb      	ldrb	r3, [r7, #15]
}
 8034384:	4618      	mov	r0, r3
 8034386:	3714      	adds	r7, #20
 8034388:	46bd      	mov	sp, r7
 803438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803438e:	4770      	bx	lr

08034390 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8034390:	b580      	push	{r7, lr}
 8034392:	b084      	sub	sp, #16
 8034394:	af00      	add	r7, sp, #0
 8034396:	60f8      	str	r0, [r7, #12]
 8034398:	60b9      	str	r1, [r7, #8]
 803439a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 803439c:	68fb      	ldr	r3, [r7, #12]
 803439e:	2202      	movs	r2, #2
 80343a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80343a4:	68fb      	ldr	r3, [r7, #12]
 80343a6:	687a      	ldr	r2, [r7, #4]
 80343a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80343aa:	68fb      	ldr	r3, [r7, #12]
 80343ac:	687a      	ldr	r2, [r7, #4]
 80343ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80343b0:	687b      	ldr	r3, [r7, #4]
 80343b2:	68ba      	ldr	r2, [r7, #8]
 80343b4:	2100      	movs	r1, #0
 80343b6:	68f8      	ldr	r0, [r7, #12]
 80343b8:	f000 fcf1 	bl	8034d9e <USBD_LL_Transmit>

  return USBD_OK;
 80343bc:	2300      	movs	r3, #0
}
 80343be:	4618      	mov	r0, r3
 80343c0:	3710      	adds	r7, #16
 80343c2:	46bd      	mov	sp, r7
 80343c4:	bd80      	pop	{r7, pc}

080343c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80343c6:	b580      	push	{r7, lr}
 80343c8:	b084      	sub	sp, #16
 80343ca:	af00      	add	r7, sp, #0
 80343cc:	60f8      	str	r0, [r7, #12]
 80343ce:	60b9      	str	r1, [r7, #8]
 80343d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80343d2:	687b      	ldr	r3, [r7, #4]
 80343d4:	68ba      	ldr	r2, [r7, #8]
 80343d6:	2100      	movs	r1, #0
 80343d8:	68f8      	ldr	r0, [r7, #12]
 80343da:	f000 fce0 	bl	8034d9e <USBD_LL_Transmit>

  return USBD_OK;
 80343de:	2300      	movs	r3, #0
}
 80343e0:	4618      	mov	r0, r3
 80343e2:	3710      	adds	r7, #16
 80343e4:	46bd      	mov	sp, r7
 80343e6:	bd80      	pop	{r7, pc}

080343e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80343e8:	b580      	push	{r7, lr}
 80343ea:	b084      	sub	sp, #16
 80343ec:	af00      	add	r7, sp, #0
 80343ee:	60f8      	str	r0, [r7, #12]
 80343f0:	60b9      	str	r1, [r7, #8]
 80343f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80343f4:	68fb      	ldr	r3, [r7, #12]
 80343f6:	2203      	movs	r2, #3
 80343f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80343fc:	68fb      	ldr	r3, [r7, #12]
 80343fe:	687a      	ldr	r2, [r7, #4]
 8034400:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8034404:	68fb      	ldr	r3, [r7, #12]
 8034406:	687a      	ldr	r2, [r7, #4]
 8034408:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803440c:	687b      	ldr	r3, [r7, #4]
 803440e:	68ba      	ldr	r2, [r7, #8]
 8034410:	2100      	movs	r1, #0
 8034412:	68f8      	ldr	r0, [r7, #12]
 8034414:	f000 fce4 	bl	8034de0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8034418:	2300      	movs	r3, #0
}
 803441a:	4618      	mov	r0, r3
 803441c:	3710      	adds	r7, #16
 803441e:	46bd      	mov	sp, r7
 8034420:	bd80      	pop	{r7, pc}

08034422 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8034422:	b580      	push	{r7, lr}
 8034424:	b084      	sub	sp, #16
 8034426:	af00      	add	r7, sp, #0
 8034428:	60f8      	str	r0, [r7, #12]
 803442a:	60b9      	str	r1, [r7, #8]
 803442c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803442e:	687b      	ldr	r3, [r7, #4]
 8034430:	68ba      	ldr	r2, [r7, #8]
 8034432:	2100      	movs	r1, #0
 8034434:	68f8      	ldr	r0, [r7, #12]
 8034436:	f000 fcd3 	bl	8034de0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803443a:	2300      	movs	r3, #0
}
 803443c:	4618      	mov	r0, r3
 803443e:	3710      	adds	r7, #16
 8034440:	46bd      	mov	sp, r7
 8034442:	bd80      	pop	{r7, pc}

08034444 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8034444:	b580      	push	{r7, lr}
 8034446:	b082      	sub	sp, #8
 8034448:	af00      	add	r7, sp, #0
 803444a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 803444c:	687b      	ldr	r3, [r7, #4]
 803444e:	2204      	movs	r2, #4
 8034450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8034454:	2300      	movs	r3, #0
 8034456:	2200      	movs	r2, #0
 8034458:	2100      	movs	r1, #0
 803445a:	6878      	ldr	r0, [r7, #4]
 803445c:	f000 fc9f 	bl	8034d9e <USBD_LL_Transmit>

  return USBD_OK;
 8034460:	2300      	movs	r3, #0
}
 8034462:	4618      	mov	r0, r3
 8034464:	3708      	adds	r7, #8
 8034466:	46bd      	mov	sp, r7
 8034468:	bd80      	pop	{r7, pc}

0803446a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803446a:	b580      	push	{r7, lr}
 803446c:	b082      	sub	sp, #8
 803446e:	af00      	add	r7, sp, #0
 8034470:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8034472:	687b      	ldr	r3, [r7, #4]
 8034474:	2205      	movs	r2, #5
 8034476:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803447a:	2300      	movs	r3, #0
 803447c:	2200      	movs	r2, #0
 803447e:	2100      	movs	r1, #0
 8034480:	6878      	ldr	r0, [r7, #4]
 8034482:	f000 fcad 	bl	8034de0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8034486:	2300      	movs	r3, #0
}
 8034488:	4618      	mov	r0, r3
 803448a:	3708      	adds	r7, #8
 803448c:	46bd      	mov	sp, r7
 803448e:	bd80      	pop	{r7, pc}

08034490 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8034490:	b580      	push	{r7, lr}
 8034492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8034494:	2200      	movs	r2, #0
 8034496:	4913      	ldr	r1, [pc, #76]	; (80344e4 <MX_USB_DEVICE_Init+0x54>)
 8034498:	4813      	ldr	r0, [pc, #76]	; (80344e8 <MX_USB_DEVICE_Init+0x58>)
 803449a:	f7fe fd07 	bl	8032eac <USBD_Init>
 803449e:	4603      	mov	r3, r0
 80344a0:	2b00      	cmp	r3, #0
 80344a2:	d001      	beq.n	80344a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80344a4:	f7ec fd16 	bl	8020ed4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80344a8:	4910      	ldr	r1, [pc, #64]	; (80344ec <MX_USB_DEVICE_Init+0x5c>)
 80344aa:	480f      	ldr	r0, [pc, #60]	; (80344e8 <MX_USB_DEVICE_Init+0x58>)
 80344ac:	f7fe fd2e 	bl	8032f0c <USBD_RegisterClass>
 80344b0:	4603      	mov	r3, r0
 80344b2:	2b00      	cmp	r3, #0
 80344b4:	d001      	beq.n	80344ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80344b6:	f7ec fd0d 	bl	8020ed4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80344ba:	490d      	ldr	r1, [pc, #52]	; (80344f0 <MX_USB_DEVICE_Init+0x60>)
 80344bc:	480a      	ldr	r0, [pc, #40]	; (80344e8 <MX_USB_DEVICE_Init+0x58>)
 80344be:	f7fe fc65 	bl	8032d8c <USBD_CDC_RegisterInterface>
 80344c2:	4603      	mov	r3, r0
 80344c4:	2b00      	cmp	r3, #0
 80344c6:	d001      	beq.n	80344cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80344c8:	f7ec fd04 	bl	8020ed4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80344cc:	4806      	ldr	r0, [pc, #24]	; (80344e8 <MX_USB_DEVICE_Init+0x58>)
 80344ce:	f7fe fd53 	bl	8032f78 <USBD_Start>
 80344d2:	4603      	mov	r3, r0
 80344d4:	2b00      	cmp	r3, #0
 80344d6:	d001      	beq.n	80344dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80344d8:	f7ec fcfc 	bl	8020ed4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80344dc:	f7f3 fd88 	bl	8027ff0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80344e0:	bf00      	nop
 80344e2:	bd80      	pop	{r7, pc}
 80344e4:	240000b0 	.word	0x240000b0
 80344e8:	2400087c 	.word	0x2400087c
 80344ec:	2400001c 	.word	0x2400001c
 80344f0:	2400009c 	.word	0x2400009c

080344f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80344f4:	b580      	push	{r7, lr}
 80344f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80344f8:	2200      	movs	r2, #0
 80344fa:	4905      	ldr	r1, [pc, #20]	; (8034510 <CDC_Init_FS+0x1c>)
 80344fc:	4805      	ldr	r0, [pc, #20]	; (8034514 <CDC_Init_FS+0x20>)
 80344fe:	f7fe fc5f 	bl	8032dc0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8034502:	4905      	ldr	r1, [pc, #20]	; (8034518 <CDC_Init_FS+0x24>)
 8034504:	4803      	ldr	r0, [pc, #12]	; (8034514 <CDC_Init_FS+0x20>)
 8034506:	f7fe fc7d 	bl	8032e04 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 803450a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 803450c:	4618      	mov	r0, r3
 803450e:	bd80      	pop	{r7, pc}
 8034510:	24001358 	.word	0x24001358
 8034514:	2400087c 	.word	0x2400087c
 8034518:	24000b58 	.word	0x24000b58

0803451c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 803451c:	b480      	push	{r7}
 803451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8034520:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8034522:	4618      	mov	r0, r3
 8034524:	46bd      	mov	sp, r7
 8034526:	f85d 7b04 	ldr.w	r7, [sp], #4
 803452a:	4770      	bx	lr

0803452c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 803452c:	b480      	push	{r7}
 803452e:	b083      	sub	sp, #12
 8034530:	af00      	add	r7, sp, #0
 8034532:	4603      	mov	r3, r0
 8034534:	6039      	str	r1, [r7, #0]
 8034536:	71fb      	strb	r3, [r7, #7]
 8034538:	4613      	mov	r3, r2
 803453a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 803453c:	79fb      	ldrb	r3, [r7, #7]
 803453e:	2b23      	cmp	r3, #35	; 0x23
 8034540:	d84a      	bhi.n	80345d8 <CDC_Control_FS+0xac>
 8034542:	a201      	add	r2, pc, #4	; (adr r2, 8034548 <CDC_Control_FS+0x1c>)
 8034544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034548:	080345d9 	.word	0x080345d9
 803454c:	080345d9 	.word	0x080345d9
 8034550:	080345d9 	.word	0x080345d9
 8034554:	080345d9 	.word	0x080345d9
 8034558:	080345d9 	.word	0x080345d9
 803455c:	080345d9 	.word	0x080345d9
 8034560:	080345d9 	.word	0x080345d9
 8034564:	080345d9 	.word	0x080345d9
 8034568:	080345d9 	.word	0x080345d9
 803456c:	080345d9 	.word	0x080345d9
 8034570:	080345d9 	.word	0x080345d9
 8034574:	080345d9 	.word	0x080345d9
 8034578:	080345d9 	.word	0x080345d9
 803457c:	080345d9 	.word	0x080345d9
 8034580:	080345d9 	.word	0x080345d9
 8034584:	080345d9 	.word	0x080345d9
 8034588:	080345d9 	.word	0x080345d9
 803458c:	080345d9 	.word	0x080345d9
 8034590:	080345d9 	.word	0x080345d9
 8034594:	080345d9 	.word	0x080345d9
 8034598:	080345d9 	.word	0x080345d9
 803459c:	080345d9 	.word	0x080345d9
 80345a0:	080345d9 	.word	0x080345d9
 80345a4:	080345d9 	.word	0x080345d9
 80345a8:	080345d9 	.word	0x080345d9
 80345ac:	080345d9 	.word	0x080345d9
 80345b0:	080345d9 	.word	0x080345d9
 80345b4:	080345d9 	.word	0x080345d9
 80345b8:	080345d9 	.word	0x080345d9
 80345bc:	080345d9 	.word	0x080345d9
 80345c0:	080345d9 	.word	0x080345d9
 80345c4:	080345d9 	.word	0x080345d9
 80345c8:	080345d9 	.word	0x080345d9
 80345cc:	080345d9 	.word	0x080345d9
 80345d0:	080345d9 	.word	0x080345d9
 80345d4:	080345d9 	.word	0x080345d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80345d8:	bf00      	nop
  }

  return (USBD_OK);
 80345da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80345dc:	4618      	mov	r0, r3
 80345de:	370c      	adds	r7, #12
 80345e0:	46bd      	mov	sp, r7
 80345e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80345e6:	4770      	bx	lr

080345e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80345e8:	b580      	push	{r7, lr}
 80345ea:	b082      	sub	sp, #8
 80345ec:	af00      	add	r7, sp, #0
 80345ee:	6078      	str	r0, [r7, #4]
 80345f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80345f2:	6879      	ldr	r1, [r7, #4]
 80345f4:	4805      	ldr	r0, [pc, #20]	; (803460c <CDC_Receive_FS+0x24>)
 80345f6:	f7fe fc05 	bl	8032e04 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80345fa:	4804      	ldr	r0, [pc, #16]	; (803460c <CDC_Receive_FS+0x24>)
 80345fc:	f7fe fc20 	bl	8032e40 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8034600:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8034602:	4618      	mov	r0, r3
 8034604:	3708      	adds	r7, #8
 8034606:	46bd      	mov	sp, r7
 8034608:	bd80      	pop	{r7, pc}
 803460a:	bf00      	nop
 803460c:	2400087c 	.word	0x2400087c

08034610 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8034610:	b480      	push	{r7}
 8034612:	b087      	sub	sp, #28
 8034614:	af00      	add	r7, sp, #0
 8034616:	60f8      	str	r0, [r7, #12]
 8034618:	60b9      	str	r1, [r7, #8]
 803461a:	4613      	mov	r3, r2
 803461c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803461e:	2300      	movs	r3, #0
 8034620:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8034622:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8034626:	4618      	mov	r0, r3
 8034628:	371c      	adds	r7, #28
 803462a:	46bd      	mov	sp, r7
 803462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034630:	4770      	bx	lr
	...

08034634 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8034634:	b480      	push	{r7}
 8034636:	b083      	sub	sp, #12
 8034638:	af00      	add	r7, sp, #0
 803463a:	4603      	mov	r3, r0
 803463c:	6039      	str	r1, [r7, #0]
 803463e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8034640:	683b      	ldr	r3, [r7, #0]
 8034642:	2212      	movs	r2, #18
 8034644:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8034646:	4b03      	ldr	r3, [pc, #12]	; (8034654 <USBD_FS_DeviceDescriptor+0x20>)
}
 8034648:	4618      	mov	r0, r3
 803464a:	370c      	adds	r7, #12
 803464c:	46bd      	mov	sp, r7
 803464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034652:	4770      	bx	lr
 8034654:	240000cc 	.word	0x240000cc

08034658 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8034658:	b480      	push	{r7}
 803465a:	b083      	sub	sp, #12
 803465c:	af00      	add	r7, sp, #0
 803465e:	4603      	mov	r3, r0
 8034660:	6039      	str	r1, [r7, #0]
 8034662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8034664:	683b      	ldr	r3, [r7, #0]
 8034666:	2204      	movs	r2, #4
 8034668:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 803466a:	4b03      	ldr	r3, [pc, #12]	; (8034678 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 803466c:	4618      	mov	r0, r3
 803466e:	370c      	adds	r7, #12
 8034670:	46bd      	mov	sp, r7
 8034672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034676:	4770      	bx	lr
 8034678:	240000e0 	.word	0x240000e0

0803467c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803467c:	b580      	push	{r7, lr}
 803467e:	b082      	sub	sp, #8
 8034680:	af00      	add	r7, sp, #0
 8034682:	4603      	mov	r3, r0
 8034684:	6039      	str	r1, [r7, #0]
 8034686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8034688:	79fb      	ldrb	r3, [r7, #7]
 803468a:	2b00      	cmp	r3, #0
 803468c:	d105      	bne.n	803469a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803468e:	683a      	ldr	r2, [r7, #0]
 8034690:	4907      	ldr	r1, [pc, #28]	; (80346b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8034692:	4808      	ldr	r0, [pc, #32]	; (80346b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8034694:	f7ff fe1c 	bl	80342d0 <USBD_GetString>
 8034698:	e004      	b.n	80346a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803469a:	683a      	ldr	r2, [r7, #0]
 803469c:	4904      	ldr	r1, [pc, #16]	; (80346b0 <USBD_FS_ProductStrDescriptor+0x34>)
 803469e:	4805      	ldr	r0, [pc, #20]	; (80346b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80346a0:	f7ff fe16 	bl	80342d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80346a4:	4b02      	ldr	r3, [pc, #8]	; (80346b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80346a6:	4618      	mov	r0, r3
 80346a8:	3708      	adds	r7, #8
 80346aa:	46bd      	mov	sp, r7
 80346ac:	bd80      	pop	{r7, pc}
 80346ae:	bf00      	nop
 80346b0:	24001b58 	.word	0x24001b58
 80346b4:	0803cc74 	.word	0x0803cc74

080346b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80346b8:	b580      	push	{r7, lr}
 80346ba:	b082      	sub	sp, #8
 80346bc:	af00      	add	r7, sp, #0
 80346be:	4603      	mov	r3, r0
 80346c0:	6039      	str	r1, [r7, #0]
 80346c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80346c4:	683a      	ldr	r2, [r7, #0]
 80346c6:	4904      	ldr	r1, [pc, #16]	; (80346d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80346c8:	4804      	ldr	r0, [pc, #16]	; (80346dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80346ca:	f7ff fe01 	bl	80342d0 <USBD_GetString>
  return USBD_StrDesc;
 80346ce:	4b02      	ldr	r3, [pc, #8]	; (80346d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80346d0:	4618      	mov	r0, r3
 80346d2:	3708      	adds	r7, #8
 80346d4:	46bd      	mov	sp, r7
 80346d6:	bd80      	pop	{r7, pc}
 80346d8:	24001b58 	.word	0x24001b58
 80346dc:	0803cc8c 	.word	0x0803cc8c

080346e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80346e0:	b580      	push	{r7, lr}
 80346e2:	b082      	sub	sp, #8
 80346e4:	af00      	add	r7, sp, #0
 80346e6:	4603      	mov	r3, r0
 80346e8:	6039      	str	r1, [r7, #0]
 80346ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80346ec:	683b      	ldr	r3, [r7, #0]
 80346ee:	221a      	movs	r2, #26
 80346f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80346f2:	f000 f843 	bl	803477c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80346f6:	4b02      	ldr	r3, [pc, #8]	; (8034700 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80346f8:	4618      	mov	r0, r3
 80346fa:	3708      	adds	r7, #8
 80346fc:	46bd      	mov	sp, r7
 80346fe:	bd80      	pop	{r7, pc}
 8034700:	240000e4 	.word	0x240000e4

08034704 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8034704:	b580      	push	{r7, lr}
 8034706:	b082      	sub	sp, #8
 8034708:	af00      	add	r7, sp, #0
 803470a:	4603      	mov	r3, r0
 803470c:	6039      	str	r1, [r7, #0]
 803470e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8034710:	79fb      	ldrb	r3, [r7, #7]
 8034712:	2b00      	cmp	r3, #0
 8034714:	d105      	bne.n	8034722 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8034716:	683a      	ldr	r2, [r7, #0]
 8034718:	4907      	ldr	r1, [pc, #28]	; (8034738 <USBD_FS_ConfigStrDescriptor+0x34>)
 803471a:	4808      	ldr	r0, [pc, #32]	; (803473c <USBD_FS_ConfigStrDescriptor+0x38>)
 803471c:	f7ff fdd8 	bl	80342d0 <USBD_GetString>
 8034720:	e004      	b.n	803472c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8034722:	683a      	ldr	r2, [r7, #0]
 8034724:	4904      	ldr	r1, [pc, #16]	; (8034738 <USBD_FS_ConfigStrDescriptor+0x34>)
 8034726:	4805      	ldr	r0, [pc, #20]	; (803473c <USBD_FS_ConfigStrDescriptor+0x38>)
 8034728:	f7ff fdd2 	bl	80342d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 803472c:	4b02      	ldr	r3, [pc, #8]	; (8034738 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 803472e:	4618      	mov	r0, r3
 8034730:	3708      	adds	r7, #8
 8034732:	46bd      	mov	sp, r7
 8034734:	bd80      	pop	{r7, pc}
 8034736:	bf00      	nop
 8034738:	24001b58 	.word	0x24001b58
 803473c:	0803cca0 	.word	0x0803cca0

08034740 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8034740:	b580      	push	{r7, lr}
 8034742:	b082      	sub	sp, #8
 8034744:	af00      	add	r7, sp, #0
 8034746:	4603      	mov	r3, r0
 8034748:	6039      	str	r1, [r7, #0]
 803474a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803474c:	79fb      	ldrb	r3, [r7, #7]
 803474e:	2b00      	cmp	r3, #0
 8034750:	d105      	bne.n	803475e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8034752:	683a      	ldr	r2, [r7, #0]
 8034754:	4907      	ldr	r1, [pc, #28]	; (8034774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8034756:	4808      	ldr	r0, [pc, #32]	; (8034778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8034758:	f7ff fdba 	bl	80342d0 <USBD_GetString>
 803475c:	e004      	b.n	8034768 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803475e:	683a      	ldr	r2, [r7, #0]
 8034760:	4904      	ldr	r1, [pc, #16]	; (8034774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8034762:	4805      	ldr	r0, [pc, #20]	; (8034778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8034764:	f7ff fdb4 	bl	80342d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8034768:	4b02      	ldr	r3, [pc, #8]	; (8034774 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 803476a:	4618      	mov	r0, r3
 803476c:	3708      	adds	r7, #8
 803476e:	46bd      	mov	sp, r7
 8034770:	bd80      	pop	{r7, pc}
 8034772:	bf00      	nop
 8034774:	24001b58 	.word	0x24001b58
 8034778:	0803ccac 	.word	0x0803ccac

0803477c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 803477c:	b580      	push	{r7, lr}
 803477e:	b084      	sub	sp, #16
 8034780:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8034782:	4b0f      	ldr	r3, [pc, #60]	; (80347c0 <Get_SerialNum+0x44>)
 8034784:	681b      	ldr	r3, [r3, #0]
 8034786:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8034788:	4b0e      	ldr	r3, [pc, #56]	; (80347c4 <Get_SerialNum+0x48>)
 803478a:	681b      	ldr	r3, [r3, #0]
 803478c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 803478e:	4b0e      	ldr	r3, [pc, #56]	; (80347c8 <Get_SerialNum+0x4c>)
 8034790:	681b      	ldr	r3, [r3, #0]
 8034792:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8034794:	68fa      	ldr	r2, [r7, #12]
 8034796:	687b      	ldr	r3, [r7, #4]
 8034798:	4413      	add	r3, r2
 803479a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803479c:	68fb      	ldr	r3, [r7, #12]
 803479e:	2b00      	cmp	r3, #0
 80347a0:	d009      	beq.n	80347b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80347a2:	2208      	movs	r2, #8
 80347a4:	4909      	ldr	r1, [pc, #36]	; (80347cc <Get_SerialNum+0x50>)
 80347a6:	68f8      	ldr	r0, [r7, #12]
 80347a8:	f000 f814 	bl	80347d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80347ac:	2204      	movs	r2, #4
 80347ae:	4908      	ldr	r1, [pc, #32]	; (80347d0 <Get_SerialNum+0x54>)
 80347b0:	68b8      	ldr	r0, [r7, #8]
 80347b2:	f000 f80f 	bl	80347d4 <IntToUnicode>
  }
}
 80347b6:	bf00      	nop
 80347b8:	3710      	adds	r7, #16
 80347ba:	46bd      	mov	sp, r7
 80347bc:	bd80      	pop	{r7, pc}
 80347be:	bf00      	nop
 80347c0:	1ff1e800 	.word	0x1ff1e800
 80347c4:	1ff1e804 	.word	0x1ff1e804
 80347c8:	1ff1e808 	.word	0x1ff1e808
 80347cc:	240000e6 	.word	0x240000e6
 80347d0:	240000f6 	.word	0x240000f6

080347d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80347d4:	b480      	push	{r7}
 80347d6:	b087      	sub	sp, #28
 80347d8:	af00      	add	r7, sp, #0
 80347da:	60f8      	str	r0, [r7, #12]
 80347dc:	60b9      	str	r1, [r7, #8]
 80347de:	4613      	mov	r3, r2
 80347e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80347e2:	2300      	movs	r3, #0
 80347e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80347e6:	2300      	movs	r3, #0
 80347e8:	75fb      	strb	r3, [r7, #23]
 80347ea:	e027      	b.n	803483c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80347ec:	68fb      	ldr	r3, [r7, #12]
 80347ee:	0f1b      	lsrs	r3, r3, #28
 80347f0:	2b09      	cmp	r3, #9
 80347f2:	d80b      	bhi.n	803480c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80347f4:	68fb      	ldr	r3, [r7, #12]
 80347f6:	0f1b      	lsrs	r3, r3, #28
 80347f8:	b2da      	uxtb	r2, r3
 80347fa:	7dfb      	ldrb	r3, [r7, #23]
 80347fc:	005b      	lsls	r3, r3, #1
 80347fe:	4619      	mov	r1, r3
 8034800:	68bb      	ldr	r3, [r7, #8]
 8034802:	440b      	add	r3, r1
 8034804:	3230      	adds	r2, #48	; 0x30
 8034806:	b2d2      	uxtb	r2, r2
 8034808:	701a      	strb	r2, [r3, #0]
 803480a:	e00a      	b.n	8034822 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 803480c:	68fb      	ldr	r3, [r7, #12]
 803480e:	0f1b      	lsrs	r3, r3, #28
 8034810:	b2da      	uxtb	r2, r3
 8034812:	7dfb      	ldrb	r3, [r7, #23]
 8034814:	005b      	lsls	r3, r3, #1
 8034816:	4619      	mov	r1, r3
 8034818:	68bb      	ldr	r3, [r7, #8]
 803481a:	440b      	add	r3, r1
 803481c:	3237      	adds	r2, #55	; 0x37
 803481e:	b2d2      	uxtb	r2, r2
 8034820:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8034822:	68fb      	ldr	r3, [r7, #12]
 8034824:	011b      	lsls	r3, r3, #4
 8034826:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8034828:	7dfb      	ldrb	r3, [r7, #23]
 803482a:	005b      	lsls	r3, r3, #1
 803482c:	3301      	adds	r3, #1
 803482e:	68ba      	ldr	r2, [r7, #8]
 8034830:	4413      	add	r3, r2
 8034832:	2200      	movs	r2, #0
 8034834:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8034836:	7dfb      	ldrb	r3, [r7, #23]
 8034838:	3301      	adds	r3, #1
 803483a:	75fb      	strb	r3, [r7, #23]
 803483c:	7dfa      	ldrb	r2, [r7, #23]
 803483e:	79fb      	ldrb	r3, [r7, #7]
 8034840:	429a      	cmp	r2, r3
 8034842:	d3d3      	bcc.n	80347ec <IntToUnicode+0x18>
  }
}
 8034844:	bf00      	nop
 8034846:	bf00      	nop
 8034848:	371c      	adds	r7, #28
 803484a:	46bd      	mov	sp, r7
 803484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034850:	4770      	bx	lr
	...

08034854 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8034854:	b580      	push	{r7, lr}
 8034856:	b0b8      	sub	sp, #224	; 0xe0
 8034858:	af00      	add	r7, sp, #0
 803485a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803485c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8034860:	2200      	movs	r2, #0
 8034862:	601a      	str	r2, [r3, #0]
 8034864:	605a      	str	r2, [r3, #4]
 8034866:	609a      	str	r2, [r3, #8]
 8034868:	60da      	str	r2, [r3, #12]
 803486a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 803486c:	f107 0310 	add.w	r3, r7, #16
 8034870:	22bc      	movs	r2, #188	; 0xbc
 8034872:	2100      	movs	r1, #0
 8034874:	4618      	mov	r0, r3
 8034876:	f007 fa2f 	bl	803bcd8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 803487a:	687b      	ldr	r3, [r7, #4]
 803487c:	681b      	ldr	r3, [r3, #0]
 803487e:	4a2f      	ldr	r2, [pc, #188]	; (803493c <HAL_PCD_MspInit+0xe8>)
 8034880:	4293      	cmp	r3, r2
 8034882:	d156      	bne.n	8034932 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8034884:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8034888:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 803488a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 803488e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8034892:	f107 0310 	add.w	r3, r7, #16
 8034896:	4618      	mov	r0, r3
 8034898:	f7f4 fb74 	bl	8028f84 <HAL_RCCEx_PeriphCLKConfig>
 803489c:	4603      	mov	r3, r0
 803489e:	2b00      	cmp	r3, #0
 80348a0:	d001      	beq.n	80348a6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80348a2:	f7ec fb17 	bl	8020ed4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80348a6:	f7f3 fba3 	bl	8027ff0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80348aa:	4b25      	ldr	r3, [pc, #148]	; (8034940 <HAL_PCD_MspInit+0xec>)
 80348ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80348b0:	4a23      	ldr	r2, [pc, #140]	; (8034940 <HAL_PCD_MspInit+0xec>)
 80348b2:	f043 0301 	orr.w	r3, r3, #1
 80348b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80348ba:	4b21      	ldr	r3, [pc, #132]	; (8034940 <HAL_PCD_MspInit+0xec>)
 80348bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80348c0:	f003 0301 	and.w	r3, r3, #1
 80348c4:	60fb      	str	r3, [r7, #12]
 80348c6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80348c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80348cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80348d0:	2302      	movs	r3, #2
 80348d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80348d6:	2300      	movs	r3, #0
 80348d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80348dc:	2300      	movs	r3, #0
 80348de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80348e2:	230a      	movs	r3, #10
 80348e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80348e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80348ec:	4619      	mov	r1, r3
 80348ee:	4815      	ldr	r0, [pc, #84]	; (8034944 <HAL_PCD_MspInit+0xf0>)
 80348f0:	f7f0 fef8 	bl	80256e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80348f4:	4b12      	ldr	r3, [pc, #72]	; (8034940 <HAL_PCD_MspInit+0xec>)
 80348f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80348fa:	4a11      	ldr	r2, [pc, #68]	; (8034940 <HAL_PCD_MspInit+0xec>)
 80348fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8034900:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8034904:	4b0e      	ldr	r3, [pc, #56]	; (8034940 <HAL_PCD_MspInit+0xec>)
 8034906:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803490a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803490e:	60bb      	str	r3, [r7, #8]
 8034910:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 8034912:	2200      	movs	r2, #0
 8034914:	2100      	movs	r1, #0
 8034916:	2062      	movs	r0, #98	; 0x62
 8034918:	f7ed fe91 	bl	802263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 803491c:	2062      	movs	r0, #98	; 0x62
 803491e:	f7ed fea8 	bl	8022672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8034922:	2200      	movs	r2, #0
 8034924:	2100      	movs	r1, #0
 8034926:	2065      	movs	r0, #101	; 0x65
 8034928:	f7ed fe89 	bl	802263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 803492c:	2065      	movs	r0, #101	; 0x65
 803492e:	f7ed fea0 	bl	8022672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8034932:	bf00      	nop
 8034934:	37e0      	adds	r7, #224	; 0xe0
 8034936:	46bd      	mov	sp, r7
 8034938:	bd80      	pop	{r7, pc}
 803493a:	bf00      	nop
 803493c:	40080000 	.word	0x40080000
 8034940:	58024400 	.word	0x58024400
 8034944:	58020000 	.word	0x58020000

08034948 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034948:	b580      	push	{r7, lr}
 803494a:	b082      	sub	sp, #8
 803494c:	af00      	add	r7, sp, #0
 803494e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8034950:	687b      	ldr	r3, [r7, #4]
 8034952:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8034956:	687b      	ldr	r3, [r7, #4]
 8034958:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803495c:	4619      	mov	r1, r3
 803495e:	4610      	mov	r0, r2
 8034960:	f7fe fb57 	bl	8033012 <USBD_LL_SetupStage>
}
 8034964:	bf00      	nop
 8034966:	3708      	adds	r7, #8
 8034968:	46bd      	mov	sp, r7
 803496a:	bd80      	pop	{r7, pc}

0803496c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803496c:	b580      	push	{r7, lr}
 803496e:	b082      	sub	sp, #8
 8034970:	af00      	add	r7, sp, #0
 8034972:	6078      	str	r0, [r7, #4]
 8034974:	460b      	mov	r3, r1
 8034976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8034978:	687b      	ldr	r3, [r7, #4]
 803497a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803497e:	78fa      	ldrb	r2, [r7, #3]
 8034980:	6879      	ldr	r1, [r7, #4]
 8034982:	4613      	mov	r3, r2
 8034984:	00db      	lsls	r3, r3, #3
 8034986:	4413      	add	r3, r2
 8034988:	009b      	lsls	r3, r3, #2
 803498a:	440b      	add	r3, r1
 803498c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8034990:	681a      	ldr	r2, [r3, #0]
 8034992:	78fb      	ldrb	r3, [r7, #3]
 8034994:	4619      	mov	r1, r3
 8034996:	f7fe fb91 	bl	80330bc <USBD_LL_DataOutStage>
}
 803499a:	bf00      	nop
 803499c:	3708      	adds	r7, #8
 803499e:	46bd      	mov	sp, r7
 80349a0:	bd80      	pop	{r7, pc}

080349a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80349a2:	b580      	push	{r7, lr}
 80349a4:	b082      	sub	sp, #8
 80349a6:	af00      	add	r7, sp, #0
 80349a8:	6078      	str	r0, [r7, #4]
 80349aa:	460b      	mov	r3, r1
 80349ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80349ae:	687b      	ldr	r3, [r7, #4]
 80349b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80349b4:	78fa      	ldrb	r2, [r7, #3]
 80349b6:	6879      	ldr	r1, [r7, #4]
 80349b8:	4613      	mov	r3, r2
 80349ba:	00db      	lsls	r3, r3, #3
 80349bc:	4413      	add	r3, r2
 80349be:	009b      	lsls	r3, r3, #2
 80349c0:	440b      	add	r3, r1
 80349c2:	334c      	adds	r3, #76	; 0x4c
 80349c4:	681a      	ldr	r2, [r3, #0]
 80349c6:	78fb      	ldrb	r3, [r7, #3]
 80349c8:	4619      	mov	r1, r3
 80349ca:	f7fe fc2a 	bl	8033222 <USBD_LL_DataInStage>
}
 80349ce:	bf00      	nop
 80349d0:	3708      	adds	r7, #8
 80349d2:	46bd      	mov	sp, r7
 80349d4:	bd80      	pop	{r7, pc}

080349d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80349d6:	b580      	push	{r7, lr}
 80349d8:	b082      	sub	sp, #8
 80349da:	af00      	add	r7, sp, #0
 80349dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80349de:	687b      	ldr	r3, [r7, #4]
 80349e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80349e4:	4618      	mov	r0, r3
 80349e6:	f7fe fd5e 	bl	80334a6 <USBD_LL_SOF>
}
 80349ea:	bf00      	nop
 80349ec:	3708      	adds	r7, #8
 80349ee:	46bd      	mov	sp, r7
 80349f0:	bd80      	pop	{r7, pc}

080349f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80349f2:	b580      	push	{r7, lr}
 80349f4:	b084      	sub	sp, #16
 80349f6:	af00      	add	r7, sp, #0
 80349f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80349fa:	2301      	movs	r3, #1
 80349fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80349fe:	687b      	ldr	r3, [r7, #4]
 8034a00:	68db      	ldr	r3, [r3, #12]
 8034a02:	2b00      	cmp	r3, #0
 8034a04:	d102      	bne.n	8034a0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8034a06:	2300      	movs	r3, #0
 8034a08:	73fb      	strb	r3, [r7, #15]
 8034a0a:	e008      	b.n	8034a1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8034a0c:	687b      	ldr	r3, [r7, #4]
 8034a0e:	68db      	ldr	r3, [r3, #12]
 8034a10:	2b02      	cmp	r3, #2
 8034a12:	d102      	bne.n	8034a1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8034a14:	2301      	movs	r3, #1
 8034a16:	73fb      	strb	r3, [r7, #15]
 8034a18:	e001      	b.n	8034a1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8034a1a:	f7ec fa5b 	bl	8020ed4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8034a1e:	687b      	ldr	r3, [r7, #4]
 8034a20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8034a24:	7bfa      	ldrb	r2, [r7, #15]
 8034a26:	4611      	mov	r1, r2
 8034a28:	4618      	mov	r0, r3
 8034a2a:	f7fe fcfe 	bl	803342a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8034a2e:	687b      	ldr	r3, [r7, #4]
 8034a30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8034a34:	4618      	mov	r0, r3
 8034a36:	f7fe fca6 	bl	8033386 <USBD_LL_Reset>
}
 8034a3a:	bf00      	nop
 8034a3c:	3710      	adds	r7, #16
 8034a3e:	46bd      	mov	sp, r7
 8034a40:	bd80      	pop	{r7, pc}
	...

08034a44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034a44:	b580      	push	{r7, lr}
 8034a46:	b082      	sub	sp, #8
 8034a48:	af00      	add	r7, sp, #0
 8034a4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8034a4c:	687b      	ldr	r3, [r7, #4]
 8034a4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8034a52:	4618      	mov	r0, r3
 8034a54:	f7fe fcf9 	bl	803344a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8034a58:	687b      	ldr	r3, [r7, #4]
 8034a5a:	681b      	ldr	r3, [r3, #0]
 8034a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8034a60:	681b      	ldr	r3, [r3, #0]
 8034a62:	687a      	ldr	r2, [r7, #4]
 8034a64:	6812      	ldr	r2, [r2, #0]
 8034a66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8034a6a:	f043 0301 	orr.w	r3, r3, #1
 8034a6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8034a70:	687b      	ldr	r3, [r7, #4]
 8034a72:	6a1b      	ldr	r3, [r3, #32]
 8034a74:	2b00      	cmp	r3, #0
 8034a76:	d005      	beq.n	8034a84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8034a78:	4b04      	ldr	r3, [pc, #16]	; (8034a8c <HAL_PCD_SuspendCallback+0x48>)
 8034a7a:	691b      	ldr	r3, [r3, #16]
 8034a7c:	4a03      	ldr	r2, [pc, #12]	; (8034a8c <HAL_PCD_SuspendCallback+0x48>)
 8034a7e:	f043 0306 	orr.w	r3, r3, #6
 8034a82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8034a84:	bf00      	nop
 8034a86:	3708      	adds	r7, #8
 8034a88:	46bd      	mov	sp, r7
 8034a8a:	bd80      	pop	{r7, pc}
 8034a8c:	e000ed00 	.word	0xe000ed00

08034a90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034a90:	b580      	push	{r7, lr}
 8034a92:	b082      	sub	sp, #8
 8034a94:	af00      	add	r7, sp, #0
 8034a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8034a98:	687b      	ldr	r3, [r7, #4]
 8034a9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8034a9e:	4618      	mov	r0, r3
 8034aa0:	f7fe fce9 	bl	8033476 <USBD_LL_Resume>
}
 8034aa4:	bf00      	nop
 8034aa6:	3708      	adds	r7, #8
 8034aa8:	46bd      	mov	sp, r7
 8034aaa:	bd80      	pop	{r7, pc}

08034aac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034aac:	b580      	push	{r7, lr}
 8034aae:	b082      	sub	sp, #8
 8034ab0:	af00      	add	r7, sp, #0
 8034ab2:	6078      	str	r0, [r7, #4]
 8034ab4:	460b      	mov	r3, r1
 8034ab6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8034ab8:	687b      	ldr	r3, [r7, #4]
 8034aba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8034abe:	78fa      	ldrb	r2, [r7, #3]
 8034ac0:	4611      	mov	r1, r2
 8034ac2:	4618      	mov	r0, r3
 8034ac4:	f7fe fd41 	bl	803354a <USBD_LL_IsoOUTIncomplete>
}
 8034ac8:	bf00      	nop
 8034aca:	3708      	adds	r7, #8
 8034acc:	46bd      	mov	sp, r7
 8034ace:	bd80      	pop	{r7, pc}

08034ad0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034ad0:	b580      	push	{r7, lr}
 8034ad2:	b082      	sub	sp, #8
 8034ad4:	af00      	add	r7, sp, #0
 8034ad6:	6078      	str	r0, [r7, #4]
 8034ad8:	460b      	mov	r3, r1
 8034ada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8034adc:	687b      	ldr	r3, [r7, #4]
 8034ade:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8034ae2:	78fa      	ldrb	r2, [r7, #3]
 8034ae4:	4611      	mov	r1, r2
 8034ae6:	4618      	mov	r0, r3
 8034ae8:	f7fe fcfd 	bl	80334e6 <USBD_LL_IsoINIncomplete>
}
 8034aec:	bf00      	nop
 8034aee:	3708      	adds	r7, #8
 8034af0:	46bd      	mov	sp, r7
 8034af2:	bd80      	pop	{r7, pc}

08034af4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034af4:	b580      	push	{r7, lr}
 8034af6:	b082      	sub	sp, #8
 8034af8:	af00      	add	r7, sp, #0
 8034afa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8034afc:	687b      	ldr	r3, [r7, #4]
 8034afe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8034b02:	4618      	mov	r0, r3
 8034b04:	f7fe fd53 	bl	80335ae <USBD_LL_DevConnected>
}
 8034b08:	bf00      	nop
 8034b0a:	3708      	adds	r7, #8
 8034b0c:	46bd      	mov	sp, r7
 8034b0e:	bd80      	pop	{r7, pc}

08034b10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8034b10:	b580      	push	{r7, lr}
 8034b12:	b082      	sub	sp, #8
 8034b14:	af00      	add	r7, sp, #0
 8034b16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8034b18:	687b      	ldr	r3, [r7, #4]
 8034b1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8034b1e:	4618      	mov	r0, r3
 8034b20:	f7fe fd50 	bl	80335c4 <USBD_LL_DevDisconnected>
}
 8034b24:	bf00      	nop
 8034b26:	3708      	adds	r7, #8
 8034b28:	46bd      	mov	sp, r7
 8034b2a:	bd80      	pop	{r7, pc}

08034b2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8034b2c:	b580      	push	{r7, lr}
 8034b2e:	b082      	sub	sp, #8
 8034b30:	af00      	add	r7, sp, #0
 8034b32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8034b34:	687b      	ldr	r3, [r7, #4]
 8034b36:	781b      	ldrb	r3, [r3, #0]
 8034b38:	2b00      	cmp	r3, #0
 8034b3a:	d13e      	bne.n	8034bba <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8034b3c:	4a21      	ldr	r2, [pc, #132]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b3e:	687b      	ldr	r3, [r7, #4]
 8034b40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8034b44:	687b      	ldr	r3, [r7, #4]
 8034b46:	4a1f      	ldr	r2, [pc, #124]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b48:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8034b4c:	4b1d      	ldr	r3, [pc, #116]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b4e:	4a1e      	ldr	r2, [pc, #120]	; (8034bc8 <USBD_LL_Init+0x9c>)
 8034b50:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8034b52:	4b1c      	ldr	r3, [pc, #112]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b54:	2209      	movs	r2, #9
 8034b56:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8034b58:	4b1a      	ldr	r3, [pc, #104]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b5a:	2202      	movs	r2, #2
 8034b5c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8034b5e:	4b19      	ldr	r3, [pc, #100]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b60:	2200      	movs	r2, #0
 8034b62:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8034b64:	4b17      	ldr	r3, [pc, #92]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b66:	2202      	movs	r2, #2
 8034b68:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8034b6a:	4b16      	ldr	r3, [pc, #88]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b6c:	2200      	movs	r2, #0
 8034b6e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8034b70:	4b14      	ldr	r3, [pc, #80]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b72:	2200      	movs	r2, #0
 8034b74:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8034b76:	4b13      	ldr	r3, [pc, #76]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b78:	2200      	movs	r2, #0
 8034b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8034b7c:	4b11      	ldr	r3, [pc, #68]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b7e:	2200      	movs	r2, #0
 8034b80:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8034b82:	4b10      	ldr	r3, [pc, #64]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b84:	2200      	movs	r2, #0
 8034b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8034b88:	4b0e      	ldr	r3, [pc, #56]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b8a:	2200      	movs	r2, #0
 8034b8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8034b8e:	480d      	ldr	r0, [pc, #52]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034b90:	f7f1 ff1e 	bl	80269d0 <HAL_PCD_Init>
 8034b94:	4603      	mov	r3, r0
 8034b96:	2b00      	cmp	r3, #0
 8034b98:	d001      	beq.n	8034b9e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8034b9a:	f7ec f99b 	bl	8020ed4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8034b9e:	2180      	movs	r1, #128	; 0x80
 8034ba0:	4808      	ldr	r0, [pc, #32]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034ba2:	f7f3 f9aa 	bl	8027efa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8034ba6:	2240      	movs	r2, #64	; 0x40
 8034ba8:	2100      	movs	r1, #0
 8034baa:	4806      	ldr	r0, [pc, #24]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034bac:	f7f3 f95e 	bl	8027e6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8034bb0:	2280      	movs	r2, #128	; 0x80
 8034bb2:	2101      	movs	r1, #1
 8034bb4:	4803      	ldr	r0, [pc, #12]	; (8034bc4 <USBD_LL_Init+0x98>)
 8034bb6:	f7f3 f959 	bl	8027e6c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8034bba:	2300      	movs	r3, #0
}
 8034bbc:	4618      	mov	r0, r3
 8034bbe:	3708      	adds	r7, #8
 8034bc0:	46bd      	mov	sp, r7
 8034bc2:	bd80      	pop	{r7, pc}
 8034bc4:	24001d58 	.word	0x24001d58
 8034bc8:	40080000 	.word	0x40080000

08034bcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8034bcc:	b580      	push	{r7, lr}
 8034bce:	b084      	sub	sp, #16
 8034bd0:	af00      	add	r7, sp, #0
 8034bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034bd4:	2300      	movs	r3, #0
 8034bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8034bd8:	2300      	movs	r3, #0
 8034bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8034bdc:	687b      	ldr	r3, [r7, #4]
 8034bde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8034be2:	4618      	mov	r0, r3
 8034be4:	f7f2 f818 	bl	8026c18 <HAL_PCD_Start>
 8034be8:	4603      	mov	r3, r0
 8034bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8034bec:	7bfb      	ldrb	r3, [r7, #15]
 8034bee:	4618      	mov	r0, r3
 8034bf0:	f000 f942 	bl	8034e78 <USBD_Get_USB_Status>
 8034bf4:	4603      	mov	r3, r0
 8034bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8034bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8034bfa:	4618      	mov	r0, r3
 8034bfc:	3710      	adds	r7, #16
 8034bfe:	46bd      	mov	sp, r7
 8034c00:	bd80      	pop	{r7, pc}

08034c02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8034c02:	b580      	push	{r7, lr}
 8034c04:	b084      	sub	sp, #16
 8034c06:	af00      	add	r7, sp, #0
 8034c08:	6078      	str	r0, [r7, #4]
 8034c0a:	4608      	mov	r0, r1
 8034c0c:	4611      	mov	r1, r2
 8034c0e:	461a      	mov	r2, r3
 8034c10:	4603      	mov	r3, r0
 8034c12:	70fb      	strb	r3, [r7, #3]
 8034c14:	460b      	mov	r3, r1
 8034c16:	70bb      	strb	r3, [r7, #2]
 8034c18:	4613      	mov	r3, r2
 8034c1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034c1c:	2300      	movs	r3, #0
 8034c1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8034c20:	2300      	movs	r3, #0
 8034c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8034c24:	687b      	ldr	r3, [r7, #4]
 8034c26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8034c2a:	78bb      	ldrb	r3, [r7, #2]
 8034c2c:	883a      	ldrh	r2, [r7, #0]
 8034c2e:	78f9      	ldrb	r1, [r7, #3]
 8034c30:	f7f2 fd16 	bl	8027660 <HAL_PCD_EP_Open>
 8034c34:	4603      	mov	r3, r0
 8034c36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8034c38:	7bfb      	ldrb	r3, [r7, #15]
 8034c3a:	4618      	mov	r0, r3
 8034c3c:	f000 f91c 	bl	8034e78 <USBD_Get_USB_Status>
 8034c40:	4603      	mov	r3, r0
 8034c42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8034c44:	7bbb      	ldrb	r3, [r7, #14]
}
 8034c46:	4618      	mov	r0, r3
 8034c48:	3710      	adds	r7, #16
 8034c4a:	46bd      	mov	sp, r7
 8034c4c:	bd80      	pop	{r7, pc}

08034c4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8034c4e:	b580      	push	{r7, lr}
 8034c50:	b084      	sub	sp, #16
 8034c52:	af00      	add	r7, sp, #0
 8034c54:	6078      	str	r0, [r7, #4]
 8034c56:	460b      	mov	r3, r1
 8034c58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034c5a:	2300      	movs	r3, #0
 8034c5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8034c5e:	2300      	movs	r3, #0
 8034c60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8034c62:	687b      	ldr	r3, [r7, #4]
 8034c64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8034c68:	78fa      	ldrb	r2, [r7, #3]
 8034c6a:	4611      	mov	r1, r2
 8034c6c:	4618      	mov	r0, r3
 8034c6e:	f7f2 fd5f 	bl	8027730 <HAL_PCD_EP_Close>
 8034c72:	4603      	mov	r3, r0
 8034c74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8034c76:	7bfb      	ldrb	r3, [r7, #15]
 8034c78:	4618      	mov	r0, r3
 8034c7a:	f000 f8fd 	bl	8034e78 <USBD_Get_USB_Status>
 8034c7e:	4603      	mov	r3, r0
 8034c80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8034c82:	7bbb      	ldrb	r3, [r7, #14]
}
 8034c84:	4618      	mov	r0, r3
 8034c86:	3710      	adds	r7, #16
 8034c88:	46bd      	mov	sp, r7
 8034c8a:	bd80      	pop	{r7, pc}

08034c8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8034c8c:	b580      	push	{r7, lr}
 8034c8e:	b084      	sub	sp, #16
 8034c90:	af00      	add	r7, sp, #0
 8034c92:	6078      	str	r0, [r7, #4]
 8034c94:	460b      	mov	r3, r1
 8034c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034c98:	2300      	movs	r3, #0
 8034c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8034c9c:	2300      	movs	r3, #0
 8034c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8034ca0:	687b      	ldr	r3, [r7, #4]
 8034ca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8034ca6:	78fa      	ldrb	r2, [r7, #3]
 8034ca8:	4611      	mov	r1, r2
 8034caa:	4618      	mov	r0, r3
 8034cac:	f7f2 fe37 	bl	802791e <HAL_PCD_EP_SetStall>
 8034cb0:	4603      	mov	r3, r0
 8034cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8034cb4:	7bfb      	ldrb	r3, [r7, #15]
 8034cb6:	4618      	mov	r0, r3
 8034cb8:	f000 f8de 	bl	8034e78 <USBD_Get_USB_Status>
 8034cbc:	4603      	mov	r3, r0
 8034cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8034cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8034cc2:	4618      	mov	r0, r3
 8034cc4:	3710      	adds	r7, #16
 8034cc6:	46bd      	mov	sp, r7
 8034cc8:	bd80      	pop	{r7, pc}

08034cca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8034cca:	b580      	push	{r7, lr}
 8034ccc:	b084      	sub	sp, #16
 8034cce:	af00      	add	r7, sp, #0
 8034cd0:	6078      	str	r0, [r7, #4]
 8034cd2:	460b      	mov	r3, r1
 8034cd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034cd6:	2300      	movs	r3, #0
 8034cd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8034cda:	2300      	movs	r3, #0
 8034cdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8034cde:	687b      	ldr	r3, [r7, #4]
 8034ce0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8034ce4:	78fa      	ldrb	r2, [r7, #3]
 8034ce6:	4611      	mov	r1, r2
 8034ce8:	4618      	mov	r0, r3
 8034cea:	f7f2 fe7c 	bl	80279e6 <HAL_PCD_EP_ClrStall>
 8034cee:	4603      	mov	r3, r0
 8034cf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8034cf2:	7bfb      	ldrb	r3, [r7, #15]
 8034cf4:	4618      	mov	r0, r3
 8034cf6:	f000 f8bf 	bl	8034e78 <USBD_Get_USB_Status>
 8034cfa:	4603      	mov	r3, r0
 8034cfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8034cfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8034d00:	4618      	mov	r0, r3
 8034d02:	3710      	adds	r7, #16
 8034d04:	46bd      	mov	sp, r7
 8034d06:	bd80      	pop	{r7, pc}

08034d08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8034d08:	b480      	push	{r7}
 8034d0a:	b085      	sub	sp, #20
 8034d0c:	af00      	add	r7, sp, #0
 8034d0e:	6078      	str	r0, [r7, #4]
 8034d10:	460b      	mov	r3, r1
 8034d12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8034d14:	687b      	ldr	r3, [r7, #4]
 8034d16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8034d1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8034d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8034d20:	2b00      	cmp	r3, #0
 8034d22:	da0b      	bge.n	8034d3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8034d24:	78fb      	ldrb	r3, [r7, #3]
 8034d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8034d2a:	68f9      	ldr	r1, [r7, #12]
 8034d2c:	4613      	mov	r3, r2
 8034d2e:	00db      	lsls	r3, r3, #3
 8034d30:	4413      	add	r3, r2
 8034d32:	009b      	lsls	r3, r3, #2
 8034d34:	440b      	add	r3, r1
 8034d36:	333e      	adds	r3, #62	; 0x3e
 8034d38:	781b      	ldrb	r3, [r3, #0]
 8034d3a:	e00b      	b.n	8034d54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8034d3c:	78fb      	ldrb	r3, [r7, #3]
 8034d3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8034d42:	68f9      	ldr	r1, [r7, #12]
 8034d44:	4613      	mov	r3, r2
 8034d46:	00db      	lsls	r3, r3, #3
 8034d48:	4413      	add	r3, r2
 8034d4a:	009b      	lsls	r3, r3, #2
 8034d4c:	440b      	add	r3, r1
 8034d4e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8034d52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8034d54:	4618      	mov	r0, r3
 8034d56:	3714      	adds	r7, #20
 8034d58:	46bd      	mov	sp, r7
 8034d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034d5e:	4770      	bx	lr

08034d60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8034d60:	b580      	push	{r7, lr}
 8034d62:	b084      	sub	sp, #16
 8034d64:	af00      	add	r7, sp, #0
 8034d66:	6078      	str	r0, [r7, #4]
 8034d68:	460b      	mov	r3, r1
 8034d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034d6c:	2300      	movs	r3, #0
 8034d6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8034d70:	2300      	movs	r3, #0
 8034d72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8034d74:	687b      	ldr	r3, [r7, #4]
 8034d76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8034d7a:	78fa      	ldrb	r2, [r7, #3]
 8034d7c:	4611      	mov	r1, r2
 8034d7e:	4618      	mov	r0, r3
 8034d80:	f7f2 fc49 	bl	8027616 <HAL_PCD_SetAddress>
 8034d84:	4603      	mov	r3, r0
 8034d86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8034d88:	7bfb      	ldrb	r3, [r7, #15]
 8034d8a:	4618      	mov	r0, r3
 8034d8c:	f000 f874 	bl	8034e78 <USBD_Get_USB_Status>
 8034d90:	4603      	mov	r3, r0
 8034d92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8034d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8034d96:	4618      	mov	r0, r3
 8034d98:	3710      	adds	r7, #16
 8034d9a:	46bd      	mov	sp, r7
 8034d9c:	bd80      	pop	{r7, pc}

08034d9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8034d9e:	b580      	push	{r7, lr}
 8034da0:	b086      	sub	sp, #24
 8034da2:	af00      	add	r7, sp, #0
 8034da4:	60f8      	str	r0, [r7, #12]
 8034da6:	607a      	str	r2, [r7, #4]
 8034da8:	603b      	str	r3, [r7, #0]
 8034daa:	460b      	mov	r3, r1
 8034dac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034dae:	2300      	movs	r3, #0
 8034db0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8034db2:	2300      	movs	r3, #0
 8034db4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8034db6:	68fb      	ldr	r3, [r7, #12]
 8034db8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8034dbc:	7af9      	ldrb	r1, [r7, #11]
 8034dbe:	683b      	ldr	r3, [r7, #0]
 8034dc0:	687a      	ldr	r2, [r7, #4]
 8034dc2:	f7f2 fd62 	bl	802788a <HAL_PCD_EP_Transmit>
 8034dc6:	4603      	mov	r3, r0
 8034dc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8034dca:	7dfb      	ldrb	r3, [r7, #23]
 8034dcc:	4618      	mov	r0, r3
 8034dce:	f000 f853 	bl	8034e78 <USBD_Get_USB_Status>
 8034dd2:	4603      	mov	r3, r0
 8034dd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8034dd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8034dd8:	4618      	mov	r0, r3
 8034dda:	3718      	adds	r7, #24
 8034ddc:	46bd      	mov	sp, r7
 8034dde:	bd80      	pop	{r7, pc}

08034de0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8034de0:	b580      	push	{r7, lr}
 8034de2:	b086      	sub	sp, #24
 8034de4:	af00      	add	r7, sp, #0
 8034de6:	60f8      	str	r0, [r7, #12]
 8034de8:	607a      	str	r2, [r7, #4]
 8034dea:	603b      	str	r3, [r7, #0]
 8034dec:	460b      	mov	r3, r1
 8034dee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8034df0:	2300      	movs	r3, #0
 8034df2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8034df4:	2300      	movs	r3, #0
 8034df6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8034df8:	68fb      	ldr	r3, [r7, #12]
 8034dfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8034dfe:	7af9      	ldrb	r1, [r7, #11]
 8034e00:	683b      	ldr	r3, [r7, #0]
 8034e02:	687a      	ldr	r2, [r7, #4]
 8034e04:	f7f2 fcde 	bl	80277c4 <HAL_PCD_EP_Receive>
 8034e08:	4603      	mov	r3, r0
 8034e0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8034e0c:	7dfb      	ldrb	r3, [r7, #23]
 8034e0e:	4618      	mov	r0, r3
 8034e10:	f000 f832 	bl	8034e78 <USBD_Get_USB_Status>
 8034e14:	4603      	mov	r3, r0
 8034e16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8034e18:	7dbb      	ldrb	r3, [r7, #22]
}
 8034e1a:	4618      	mov	r0, r3
 8034e1c:	3718      	adds	r7, #24
 8034e1e:	46bd      	mov	sp, r7
 8034e20:	bd80      	pop	{r7, pc}

08034e22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8034e22:	b580      	push	{r7, lr}
 8034e24:	b082      	sub	sp, #8
 8034e26:	af00      	add	r7, sp, #0
 8034e28:	6078      	str	r0, [r7, #4]
 8034e2a:	460b      	mov	r3, r1
 8034e2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8034e2e:	687b      	ldr	r3, [r7, #4]
 8034e30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8034e34:	78fa      	ldrb	r2, [r7, #3]
 8034e36:	4611      	mov	r1, r2
 8034e38:	4618      	mov	r0, r3
 8034e3a:	f7f2 fd0e 	bl	802785a <HAL_PCD_EP_GetRxCount>
 8034e3e:	4603      	mov	r3, r0
}
 8034e40:	4618      	mov	r0, r3
 8034e42:	3708      	adds	r7, #8
 8034e44:	46bd      	mov	sp, r7
 8034e46:	bd80      	pop	{r7, pc}

08034e48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8034e48:	b480      	push	{r7}
 8034e4a:	b083      	sub	sp, #12
 8034e4c:	af00      	add	r7, sp, #0
 8034e4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8034e50:	4b03      	ldr	r3, [pc, #12]	; (8034e60 <USBD_static_malloc+0x18>)
}
 8034e52:	4618      	mov	r0, r3
 8034e54:	370c      	adds	r7, #12
 8034e56:	46bd      	mov	sp, r7
 8034e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034e5c:	4770      	bx	lr
 8034e5e:	bf00      	nop
 8034e60:	24002264 	.word	0x24002264

08034e64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8034e64:	b480      	push	{r7}
 8034e66:	b083      	sub	sp, #12
 8034e68:	af00      	add	r7, sp, #0
 8034e6a:	6078      	str	r0, [r7, #4]

}
 8034e6c:	bf00      	nop
 8034e6e:	370c      	adds	r7, #12
 8034e70:	46bd      	mov	sp, r7
 8034e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034e76:	4770      	bx	lr

08034e78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8034e78:	b480      	push	{r7}
 8034e7a:	b085      	sub	sp, #20
 8034e7c:	af00      	add	r7, sp, #0
 8034e7e:	4603      	mov	r3, r0
 8034e80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8034e82:	2300      	movs	r3, #0
 8034e84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8034e86:	79fb      	ldrb	r3, [r7, #7]
 8034e88:	2b03      	cmp	r3, #3
 8034e8a:	d817      	bhi.n	8034ebc <USBD_Get_USB_Status+0x44>
 8034e8c:	a201      	add	r2, pc, #4	; (adr r2, 8034e94 <USBD_Get_USB_Status+0x1c>)
 8034e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034e92:	bf00      	nop
 8034e94:	08034ea5 	.word	0x08034ea5
 8034e98:	08034eab 	.word	0x08034eab
 8034e9c:	08034eb1 	.word	0x08034eb1
 8034ea0:	08034eb7 	.word	0x08034eb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8034ea4:	2300      	movs	r3, #0
 8034ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8034ea8:	e00b      	b.n	8034ec2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8034eaa:	2303      	movs	r3, #3
 8034eac:	73fb      	strb	r3, [r7, #15]
    break;
 8034eae:	e008      	b.n	8034ec2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8034eb0:	2301      	movs	r3, #1
 8034eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8034eb4:	e005      	b.n	8034ec2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8034eb6:	2303      	movs	r3, #3
 8034eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8034eba:	e002      	b.n	8034ec2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8034ebc:	2303      	movs	r3, #3
 8034ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8034ec0:	bf00      	nop
  }
  return usb_status;
 8034ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8034ec4:	4618      	mov	r0, r3
 8034ec6:	3714      	adds	r7, #20
 8034ec8:	46bd      	mov	sp, r7
 8034eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ece:	4770      	bx	lr

08034ed0 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8034ed0:	b480      	push	{r7}
 8034ed2:	b083      	sub	sp, #12
 8034ed4:	af00      	add	r7, sp, #0
 8034ed6:	6078      	str	r0, [r7, #4]
 8034ed8:	687b      	ldr	r3, [r7, #4]
 8034eda:	2b00      	cmp	r3, #0
 8034edc:	bfb8      	it	lt
 8034ede:	425b      	neglt	r3, r3
 8034ee0:	4618      	mov	r0, r3
 8034ee2:	370c      	adds	r7, #12
 8034ee4:	46bd      	mov	sp, r7
 8034ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034eea:	4770      	bx	lr

08034eec <_ZN10BodyClient14TrySynchronizeEv>:

	uint8_t *RxBuf;
	uint8_t RxSize;

private:
	Status TrySynchronize() {
 8034eec:	b580      	push	{r7, lr}
 8034eee:	b086      	sub	sp, #24
 8034ef0:	af00      	add	r7, sp, #0
 8034ef2:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(Uart, TxBuf, TxSize, Timeout);
 8034ef4:	687b      	ldr	r3, [r7, #4]
 8034ef6:	6898      	ldr	r0, [r3, #8]
 8034ef8:	687b      	ldr	r3, [r7, #4]
 8034efa:	6959      	ldr	r1, [r3, #20]
 8034efc:	687b      	ldr	r3, [r7, #4]
 8034efe:	7e1b      	ldrb	r3, [r3, #24]
 8034f00:	b29a      	uxth	r2, r3
 8034f02:	687b      	ldr	r3, [r7, #4]
 8034f04:	68db      	ldr	r3, [r3, #12]
 8034f06:	f7f7 fa15 	bl	802c334 <HAL_UART_Transmit>

		auto status = HAL_UART_Receive(Uart, RxBuf, NACK.Size, Timeout);
 8034f0a:	687b      	ldr	r3, [r7, #4]
 8034f0c:	6898      	ldr	r0, [r3, #8]
 8034f0e:	687b      	ldr	r3, [r7, #4]
 8034f10:	69d9      	ldr	r1, [r3, #28]
 8034f12:	687b      	ldr	r3, [r7, #4]
 8034f14:	791b      	ldrb	r3, [r3, #4]
 8034f16:	b29a      	uxth	r2, r3
 8034f18:	687b      	ldr	r3, [r7, #4]
 8034f1a:	68db      	ldr	r3, [r3, #12]
 8034f1c:	f7f7 faa0 	bl	802c460 <HAL_UART_Receive>
 8034f20:	4603      	mov	r3, r0
 8034f22:	75fb      	strb	r3, [r7, #23]
		if (status == HAL_TIMEOUT)
 8034f24:	7dfb      	ldrb	r3, [r7, #23]
 8034f26:	2b03      	cmp	r3, #3
 8034f28:	d101      	bne.n	8034f2e <_ZN10BodyClient14TrySynchronizeEv+0x42>
			return Status::ACKTimeout;
 8034f2a:	2302      	movs	r3, #2
 8034f2c:	e02f      	b.n	8034f8e <_ZN10BodyClient14TrySynchronizeEv+0xa2>
		if (status != HAL_OK)
 8034f2e:	7dfb      	ldrb	r3, [r7, #23]
 8034f30:	2b00      	cmp	r3, #0
 8034f32:	d001      	beq.n	8034f38 <_ZN10BodyClient14TrySynchronizeEv+0x4c>
			return Status::Unknown;
 8034f34:	2303      	movs	r3, #3
 8034f36:	e02a      	b.n	8034f8e <_ZN10BodyClient14TrySynchronizeEv+0xa2>
		if (RxIsNack())
 8034f38:	6878      	ldr	r0, [r7, #4]
 8034f3a:	f000 f82c 	bl	8034f96 <_ZNK10BodyClient8RxIsNackEv>
 8034f3e:	4603      	mov	r3, r0
 8034f40:	2b00      	cmp	r3, #0
 8034f42:	d001      	beq.n	8034f48 <_ZN10BodyClient14TrySynchronizeEv+0x5c>
			return Status::Nack;
 8034f44:	2301      	movs	r3, #1
 8034f46:	e022      	b.n	8034f8e <_ZN10BodyClient14TrySynchronizeEv+0xa2>

		uint8_t *rxPtr = RxBuf + NACK.Size;
 8034f48:	687b      	ldr	r3, [r7, #4]
 8034f4a:	69db      	ldr	r3, [r3, #28]
 8034f4c:	687a      	ldr	r2, [r7, #4]
 8034f4e:	7912      	ldrb	r2, [r2, #4]
 8034f50:	4413      	add	r3, r2
 8034f52:	613b      	str	r3, [r7, #16]
		uint8_t rxRem = RxSize - NACK.Size;
 8034f54:	687b      	ldr	r3, [r7, #4]
 8034f56:	f893 2020 	ldrb.w	r2, [r3, #32]
 8034f5a:	687b      	ldr	r3, [r7, #4]
 8034f5c:	791b      	ldrb	r3, [r3, #4]
 8034f5e:	1ad3      	subs	r3, r2, r3
 8034f60:	73fb      	strb	r3, [r7, #15]

		status = HAL_UART_Receive(Uart, rxPtr, rxRem, Timeout);
 8034f62:	687b      	ldr	r3, [r7, #4]
 8034f64:	6898      	ldr	r0, [r3, #8]
 8034f66:	7bfb      	ldrb	r3, [r7, #15]
 8034f68:	b29a      	uxth	r2, r3
 8034f6a:	687b      	ldr	r3, [r7, #4]
 8034f6c:	68db      	ldr	r3, [r3, #12]
 8034f6e:	6939      	ldr	r1, [r7, #16]
 8034f70:	f7f7 fa76 	bl	802c460 <HAL_UART_Receive>
 8034f74:	4603      	mov	r3, r0
 8034f76:	75fb      	strb	r3, [r7, #23]

		if (status == HAL_TIMEOUT)
 8034f78:	7dfb      	ldrb	r3, [r7, #23]
 8034f7a:	2b03      	cmp	r3, #3
 8034f7c:	d101      	bne.n	8034f82 <_ZN10BodyClient14TrySynchronizeEv+0x96>
			return Status::EOMTimeout;
 8034f7e:	2304      	movs	r3, #4
 8034f80:	e005      	b.n	8034f8e <_ZN10BodyClient14TrySynchronizeEv+0xa2>
		if (status != HAL_OK)
 8034f82:	7dfb      	ldrb	r3, [r7, #23]
 8034f84:	2b00      	cmp	r3, #0
 8034f86:	d001      	beq.n	8034f8c <_ZN10BodyClient14TrySynchronizeEv+0xa0>
			return Status::Unknown;
 8034f88:	2303      	movs	r3, #3
 8034f8a:	e000      	b.n	8034f8e <_ZN10BodyClient14TrySynchronizeEv+0xa2>

		return Status::Success;
 8034f8c:	2300      	movs	r3, #0
	}
 8034f8e:	4618      	mov	r0, r3
 8034f90:	3718      	adds	r7, #24
 8034f92:	46bd      	mov	sp, r7
 8034f94:	bd80      	pop	{r7, pc}

08034f96 <_ZNK10BodyClient8RxIsNackEv>:

	bool RxIsNack() const {
 8034f96:	b580      	push	{r7, lr}
 8034f98:	b082      	sub	sp, #8
 8034f9a:	af00      	add	r7, sp, #0
 8034f9c:	6078      	str	r0, [r7, #4]
		return memcmp(RxBuf, NACK.Data, NACK.Size) == 0;
 8034f9e:	687b      	ldr	r3, [r7, #4]
 8034fa0:	69d8      	ldr	r0, [r3, #28]
 8034fa2:	6879      	ldr	r1, [r7, #4]
 8034fa4:	687b      	ldr	r3, [r7, #4]
 8034fa6:	791b      	ldrb	r3, [r3, #4]
 8034fa8:	461a      	mov	r2, r3
 8034faa:	f006 fe5d 	bl	803bc68 <memcmp>
 8034fae:	4603      	mov	r3, r0
 8034fb0:	2b00      	cmp	r3, #0
 8034fb2:	bf0c      	ite	eq
 8034fb4:	2301      	moveq	r3, #1
 8034fb6:	2300      	movne	r3, #0
 8034fb8:	b2db      	uxtb	r3, r3
	}
 8034fba:	4618      	mov	r0, r3
 8034fbc:	3708      	adds	r7, #8
 8034fbe:	46bd      	mov	sp, r7
 8034fc0:	bd80      	pop	{r7, pc}
	...

08034fc4 <_ZN8BodyMsgs9Responces9KondoNACKC1Ev>:
			const size_t ResponceSize = 33;
		};
	};

	struct Responces {
		struct KondoNACK {
 8034fc4:	b480      	push	{r7}
 8034fc6:	b083      	sub	sp, #12
 8034fc8:	af00      	add	r7, sp, #0
 8034fca:	6078      	str	r0, [r7, #4]
 8034fcc:	687b      	ldr	r3, [r7, #4]
 8034fce:	4a06      	ldr	r2, [pc, #24]	; (8034fe8 <_ZN8BodyMsgs9Responces9KondoNACKC1Ev+0x24>)
 8034fd0:	6810      	ldr	r0, [r2, #0]
 8034fd2:	6018      	str	r0, [r3, #0]
 8034fd4:	687b      	ldr	r3, [r7, #4]
 8034fd6:	2204      	movs	r2, #4
 8034fd8:	711a      	strb	r2, [r3, #4]
 8034fda:	687b      	ldr	r3, [r7, #4]
 8034fdc:	4618      	mov	r0, r3
 8034fde:	370c      	adds	r7, #12
 8034fe0:	46bd      	mov	sp, r7
 8034fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034fe6:	4770      	bx	lr
 8034fe8:	0803ccbc 	.word	0x0803ccbc

08034fec <_ZN10BodyClientC1EP20__UART_HandleTypeDefjj>:

public:
	explicit BodyClient(UART_HandleTypeDef *uart, size_t timeoutMs,
 8034fec:	b580      	push	{r7, lr}
 8034fee:	b084      	sub	sp, #16
 8034ff0:	af00      	add	r7, sp, #0
 8034ff2:	60f8      	str	r0, [r7, #12]
 8034ff4:	60b9      	str	r1, [r7, #8]
 8034ff6:	607a      	str	r2, [r7, #4]
 8034ff8:	603b      	str	r3, [r7, #0]
			size_t nAttempts) :
			Uart { uart }, Timeout { timeoutMs }, NAttempts { nAttempts } {
 8034ffa:	68fb      	ldr	r3, [r7, #12]
 8034ffc:	4618      	mov	r0, r3
 8034ffe:	f7ff ffe1 	bl	8034fc4 <_ZN8BodyMsgs9Responces9KondoNACKC1Ev>
 8035002:	68fb      	ldr	r3, [r7, #12]
 8035004:	68ba      	ldr	r2, [r7, #8]
 8035006:	609a      	str	r2, [r3, #8]
 8035008:	68fb      	ldr	r3, [r7, #12]
 803500a:	687a      	ldr	r2, [r7, #4]
 803500c:	60da      	str	r2, [r3, #12]
 803500e:	68fb      	ldr	r3, [r7, #12]
 8035010:	683a      	ldr	r2, [r7, #0]
 8035012:	611a      	str	r2, [r3, #16]
		assert(uart);
 8035014:	68bb      	ldr	r3, [r7, #8]
 8035016:	2b00      	cmp	r3, #0
 8035018:	d105      	bne.n	8035026 <_ZN10BodyClientC1EP20__UART_HandleTypeDefjj+0x3a>
 803501a:	4b05      	ldr	r3, [pc, #20]	; (8035030 <_ZN10BodyClientC1EP20__UART_HandleTypeDefjj+0x44>)
 803501c:	4a05      	ldr	r2, [pc, #20]	; (8035034 <_ZN10BodyClientC1EP20__UART_HandleTypeDefjj+0x48>)
 803501e:	213c      	movs	r1, #60	; 0x3c
 8035020:	4805      	ldr	r0, [pc, #20]	; (8035038 <_ZN10BodyClientC1EP20__UART_HandleTypeDefjj+0x4c>)
 8035022:	f006 fdb7 	bl	803bb94 <__assert_func>
	}
 8035026:	68fb      	ldr	r3, [r7, #12]
 8035028:	4618      	mov	r0, r3
 803502a:	3710      	adds	r7, #16
 803502c:	46bd      	mov	sp, r7
 803502e:	bd80      	pop	{r7, pc}
 8035030:	0803ccc0 	.word	0x0803ccc0
 8035034:	0803ccc8 	.word	0x0803ccc8
 8035038:	0803cd04 	.word	0x0803cd04

0803503c <_ZN10BodyClient11SynchronizeEPKhhPhh>:

	Status Synchronize(const uint8_t *txBuf, uint8_t txSize, uint8_t *rxBuf,
 803503c:	b580      	push	{r7, lr}
 803503e:	b086      	sub	sp, #24
 8035040:	af00      	add	r7, sp, #0
 8035042:	60f8      	str	r0, [r7, #12]
 8035044:	60b9      	str	r1, [r7, #8]
 8035046:	603b      	str	r3, [r7, #0]
 8035048:	4613      	mov	r3, r2
 803504a:	71fb      	strb	r3, [r7, #7]
			uint8_t rxSize) {
		assert(txBuf && rxBuf);
 803504c:	68bb      	ldr	r3, [r7, #8]
 803504e:	2b00      	cmp	r3, #0
 8035050:	d002      	beq.n	8035058 <_ZN10BodyClient11SynchronizeEPKhhPhh+0x1c>
 8035052:	683b      	ldr	r3, [r7, #0]
 8035054:	2b00      	cmp	r3, #0
 8035056:	d105      	bne.n	8035064 <_ZN10BodyClient11SynchronizeEPKhhPhh+0x28>
 8035058:	4b18      	ldr	r3, [pc, #96]	; (80350bc <_ZN10BodyClient11SynchronizeEPKhhPhh+0x80>)
 803505a:	4a19      	ldr	r2, [pc, #100]	; (80350c0 <_ZN10BodyClient11SynchronizeEPKhhPhh+0x84>)
 803505c:	2141      	movs	r1, #65	; 0x41
 803505e:	4819      	ldr	r0, [pc, #100]	; (80350c4 <_ZN10BodyClient11SynchronizeEPKhhPhh+0x88>)
 8035060:	f006 fd98 	bl	803bb94 <__assert_func>
		TxBuf = txBuf;
 8035064:	68fb      	ldr	r3, [r7, #12]
 8035066:	68ba      	ldr	r2, [r7, #8]
 8035068:	615a      	str	r2, [r3, #20]
		TxSize = txSize;
 803506a:	68fb      	ldr	r3, [r7, #12]
 803506c:	79fa      	ldrb	r2, [r7, #7]
 803506e:	761a      	strb	r2, [r3, #24]
		RxBuf = rxBuf;
 8035070:	68fb      	ldr	r3, [r7, #12]
 8035072:	683a      	ldr	r2, [r7, #0]
 8035074:	61da      	str	r2, [r3, #28]
		RxSize = rxSize;
 8035076:	68fb      	ldr	r3, [r7, #12]
 8035078:	f897 2020 	ldrb.w	r2, [r7, #32]
 803507c:	f883 2020 	strb.w	r2, [r3, #32]

		Status status;

		for (size_t i = 0; i < NAttempts; ++i)
 8035080:	2300      	movs	r3, #0
 8035082:	613b      	str	r3, [r7, #16]
 8035084:	68fb      	ldr	r3, [r7, #12]
 8035086:	691b      	ldr	r3, [r3, #16]
 8035088:	693a      	ldr	r2, [r7, #16]
 803508a:	429a      	cmp	r2, r3
 803508c:	d210      	bcs.n	80350b0 <_ZN10BodyClient11SynchronizeEPKhhPhh+0x74>
			if ((status = TrySynchronize()) == Status::Success)
 803508e:	68f8      	ldr	r0, [r7, #12]
 8035090:	f7ff ff2c 	bl	8034eec <_ZN10BodyClient14TrySynchronizeEv>
 8035094:	6178      	str	r0, [r7, #20]
 8035096:	697b      	ldr	r3, [r7, #20]
 8035098:	2b00      	cmp	r3, #0
 803509a:	bf0c      	ite	eq
 803509c:	2301      	moveq	r3, #1
 803509e:	2300      	movne	r3, #0
 80350a0:	b2db      	uxtb	r3, r3
 80350a2:	2b00      	cmp	r3, #0
 80350a4:	d103      	bne.n	80350ae <_ZN10BodyClient11SynchronizeEPKhhPhh+0x72>
		for (size_t i = 0; i < NAttempts; ++i)
 80350a6:	693b      	ldr	r3, [r7, #16]
 80350a8:	3301      	adds	r3, #1
 80350aa:	613b      	str	r3, [r7, #16]
 80350ac:	e7ea      	b.n	8035084 <_ZN10BodyClient11SynchronizeEPKhhPhh+0x48>
				break;
 80350ae:	bf00      	nop

		return status;
 80350b0:	697b      	ldr	r3, [r7, #20]
	}
 80350b2:	4618      	mov	r0, r3
 80350b4:	3718      	adds	r7, #24
 80350b6:	46bd      	mov	sp, r7
 80350b8:	bd80      	pop	{r7, pc}
 80350ba:	bf00      	nop
 80350bc:	0803cd68 	.word	0x0803cd68
 80350c0:	0803cd78 	.word	0x0803cd78
 80350c4:	0803cd04 	.word	0x0803cd04

080350c8 <_ZN9IMUDevice8CallbackEv>:
	size_t CurrentSeq = 0;

	bool DoUpdate = false;

private:
	void Callback() {
 80350c8:	b480      	push	{r7}
 80350ca:	b083      	sub	sp, #12
 80350cc:	af00      	add	r7, sp, #0
 80350ce:	6078      	str	r0, [r7, #4]
		DoUpdate = true;
 80350d0:	687b      	ldr	r3, [r7, #4]
 80350d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80350d6:	2201      	movs	r2, #1
 80350d8:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}
 80350dc:	bf00      	nop
 80350de:	370c      	adds	r7, #12
 80350e0:	46bd      	mov	sp, r7
 80350e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80350e6:	4770      	bx	lr

080350e8 <_ZN9IMUDevice6UpdateEv>:

	void Update() {
 80350e8:	b580      	push	{r7, lr}
 80350ea:	b086      	sub	sp, #24
 80350ec:	af00      	add	r7, sp, #0
 80350ee:	6078      	str	r0, [r7, #4]
		if (!DoUpdate)
 80350f0:	687b      	ldr	r3, [r7, #4]
 80350f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80350f6:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80350fa:	f083 0301 	eor.w	r3, r3, #1
 80350fe:	b2db      	uxtb	r3, r3
 8035100:	2b00      	cmp	r3, #0
 8035102:	d13c      	bne.n	803517e <_ZN9IMUDevice6UpdateEv+0x96>
			return;

		uint8_t interruptStatus = 0;
 8035104:	2300      	movs	r3, #0
 8035106:	72fb      	strb	r3, [r7, #11]
		bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 8035108:	687b      	ldr	r3, [r7, #4]
 803510a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 803510e:	f107 030b 	add.w	r3, r7, #11
 8035112:	4611      	mov	r1, r2
 8035114:	4618      	mov	r0, r3
 8035116:	f7fb ff30 	bl	8030f7a <bhy2_get_interrupt_status>

		if (!interruptStatus)
 803511a:	7afb      	ldrb	r3, [r7, #11]
 803511c:	2b00      	cmp	r3, #0
 803511e:	d030      	beq.n	8035182 <_ZN9IMUDevice6UpdateEv+0x9a>
			return;

		int status;
		uint8_t *wbData = WorkBuffer.data();
 8035120:	687b      	ldr	r3, [r7, #4]
 8035122:	4618      	mov	r0, r3
 8035124:	f002 f8be 	bl	80372a4 <_ZNSt5arrayIhLj2048EE4dataEv>
 8035128:	6178      	str	r0, [r7, #20]
		size_t wbSize = WorkBuffer.size();
 803512a:	687b      	ldr	r3, [r7, #4]
 803512c:	4618      	mov	r0, r3
 803512e:	f002 f8c6 	bl	80372be <_ZNKSt5arrayIhLj2048EE4sizeEv>
 8035132:	6138      	str	r0, [r7, #16]

		status = bhy2_get_and_process_fifo(wbData, wbSize, &bhy2);
 8035134:	687b      	ldr	r3, [r7, #4]
 8035136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803513a:	461a      	mov	r2, r3
 803513c:	6939      	ldr	r1, [r7, #16]
 803513e:	6978      	ldr	r0, [r7, #20]
 8035140:	f7fb fceb 	bl	8030b1a <bhy2_get_and_process_fifo>
 8035144:	4603      	mov	r3, r0
 8035146:	60fb      	str	r3, [r7, #12]
		assert(status == BHY2_OK);
 8035148:	68fb      	ldr	r3, [r7, #12]
 803514a:	2b00      	cmp	r3, #0
 803514c:	d005      	beq.n	803515a <_ZN9IMUDevice6UpdateEv+0x72>
 803514e:	4b0f      	ldr	r3, [pc, #60]	; (803518c <_ZN9IMUDevice6UpdateEv+0xa4>)
 8035150:	4a0f      	ldr	r2, [pc, #60]	; (8035190 <_ZN9IMUDevice6UpdateEv+0xa8>)
 8035152:	2137      	movs	r1, #55	; 0x37
 8035154:	480f      	ldr	r0, [pc, #60]	; (8035194 <_ZN9IMUDevice6UpdateEv+0xac>)
 8035156:	f006 fd1d 	bl	803bb94 <__assert_func>

		CurrentSeq++;
 803515a:	687b      	ldr	r3, [r7, #4]
 803515c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8035160:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8035164:	3301      	adds	r3, #1
 8035166:	687a      	ldr	r2, [r7, #4]
 8035168:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 803516c:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
		DoUpdate = false;
 8035170:	687b      	ldr	r3, [r7, #4]
 8035172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8035176:	2200      	movs	r2, #0
 8035178:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 803517c:	e002      	b.n	8035184 <_ZN9IMUDevice6UpdateEv+0x9c>
			return;
 803517e:	bf00      	nop
 8035180:	e000      	b.n	8035184 <_ZN9IMUDevice6UpdateEv+0x9c>
			return;
 8035182:	bf00      	nop
	}
 8035184:	3718      	adds	r7, #24
 8035186:	46bd      	mov	sp, r7
 8035188:	bd80      	pop	{r7, pc}
 803518a:	bf00      	nop
 803518c:	0803cdd0 	.word	0x0803cdd0
 8035190:	0803cde4 	.word	0x0803cde4
 8035194:	0803ce00 	.word	0x0803ce00

08035198 <_ZN9IMUDevice10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

	static void ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
 8035198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 803519c:	b08e      	sub	sp, #56	; 0x38
 803519e:	af00      	add	r7, sp, #0
 80351a0:	60f8      	str	r0, [r7, #12]
 80351a2:	60b9      	str	r1, [r7, #8]
			void *cbRef) {
		Frame *frame = reinterpret_cast<Frame*>(cbRef);
 80351a4:	68bb      	ldr	r3, [r7, #8]
 80351a6:	637b      	str	r3, [r7, #52]	; 0x34
		bhy2_data_quaternion qtData;

		assert(frame);
 80351a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80351aa:	2b00      	cmp	r3, #0
 80351ac:	d105      	bne.n	80351ba <_ZN9IMUDevice10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 80351ae:	4b40      	ldr	r3, [pc, #256]	; (80352b0 <_ZN9IMUDevice10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 80351b0:	4a40      	ldr	r2, [pc, #256]	; (80352b4 <_ZN9IMUDevice10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 80351b2:	2142      	movs	r1, #66	; 0x42
 80351b4:	4840      	ldr	r0, [pc, #256]	; (80352b8 <_ZN9IMUDevice10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 80351b6:	f006 fced 	bl	803bb94 <__assert_func>
		auto &timestamp = frame->Timestamp;
 80351ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80351bc:	3308      	adds	r3, #8
 80351be:	633b      	str	r3, [r7, #48]	; 0x30
		auto &quaternion = frame->Orientation;
 80351c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80351c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (cbInfo->data_size != CallbackDataSize)
 80351c4:	68fb      	ldr	r3, [r7, #12]
 80351c6:	789b      	ldrb	r3, [r3, #2]
 80351c8:	2b0b      	cmp	r3, #11
 80351ca:	d167      	bne.n	803529c <_ZN9IMUDevice10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
			return;

		bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 80351cc:	68fb      	ldr	r3, [r7, #12]
 80351ce:	685b      	ldr	r3, [r3, #4]
 80351d0:	f107 0214 	add.w	r2, r7, #20
 80351d4:	4611      	mov	r1, r2
 80351d6:	4618      	mov	r0, r3
 80351d8:	f7fd f98b 	bl	80324f2 <bhy2_parse_quaternion>

		frame->SensorID = cbInfo->sensor_id;
 80351dc:	68fb      	ldr	r3, [r7, #12]
 80351de:	781a      	ldrb	r2, [r3, #0]
 80351e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80351e2:	741a      	strb	r2, [r3, #16]

		uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 80351e4:	68fb      	ldr	r3, [r7, #12]
 80351e6:	689b      	ldr	r3, [r3, #8]
 80351e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80351ec:	4602      	mov	r2, r0
 80351ee:	460b      	mov	r3, r1
 80351f0:	f04f 0a00 	mov.w	sl, #0
 80351f4:	f04f 0b00 	mov.w	fp, #0
 80351f8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80351fc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8035200:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8035204:	4652      	mov	r2, sl
 8035206:	465b      	mov	r3, fp
 8035208:	ebb2 0800 	subs.w	r8, r2, r0
 803520c:	eb63 0901 	sbc.w	r9, r3, r1
 8035210:	f04f 0200 	mov.w	r2, #0
 8035214:	f04f 0300 	mov.w	r3, #0
 8035218:	ea4f 1389 	mov.w	r3, r9, lsl #6
 803521c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8035220:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8035224:	ebb2 0408 	subs.w	r4, r2, r8
 8035228:	eb63 0509 	sbc.w	r5, r3, r9
 803522c:	f04f 0200 	mov.w	r2, #0
 8035230:	f04f 0300 	mov.w	r3, #0
 8035234:	00eb      	lsls	r3, r5, #3
 8035236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 803523a:	00e2      	lsls	r2, r4, #3
 803523c:	4614      	mov	r4, r2
 803523e:	461d      	mov	r5, r3
 8035240:	1823      	adds	r3, r4, r0
 8035242:	603b      	str	r3, [r7, #0]
 8035244:	eb45 0301 	adc.w	r3, r5, r1
 8035248:	607b      	str	r3, [r7, #4]
 803524a:	e9d7 3400 	ldrd	r3, r4, [r7]
 803524e:	e9c7 3408 	strd	r3, r4, [r7, #32]

		timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8035252:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8035256:	a314      	add	r3, pc, #80	; (adr r3, 80352a8 <_ZN9IMUDevice10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8035258:	e9d3 2300 	ldrd	r2, r3, [r3]
 803525c:	f7eb f898 	bl	8020390 <__aeabi_uldivmod>
 8035260:	4602      	mov	r2, r0
 8035262:	460b      	mov	r3, r1
 8035264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035266:	601a      	str	r2, [r3, #0]
		timestamp.TimeNS =
				(timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8035268:	6a3a      	ldr	r2, [r7, #32]
 803526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803526c:	681b      	ldr	r3, [r3, #0]
 803526e:	4913      	ldr	r1, [pc, #76]	; (80352bc <_ZN9IMUDevice10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8035270:	fb01 f303 	mul.w	r3, r1, r3
 8035274:	1ad2      	subs	r2, r2, r3
		timestamp.TimeNS =
 8035276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035278:	605a      	str	r2, [r3, #4]
		quaternion.X = qtData.x;
 803527a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 803527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035280:	801a      	strh	r2, [r3, #0]
		quaternion.Y = qtData.y;
 8035282:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8035286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035288:	805a      	strh	r2, [r3, #2]
		quaternion.Z = qtData.z;
 803528a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 803528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035290:	809a      	strh	r2, [r3, #4]
		quaternion.W = qtData.w;
 8035292:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8035296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035298:	80da      	strh	r2, [r3, #6]
 803529a:	e000      	b.n	803529e <_ZN9IMUDevice10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
			return;
 803529c:	bf00      	nop
		/*
		 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
		 / 3.141592653589793f; */
	}
 803529e:	3738      	adds	r7, #56	; 0x38
 80352a0:	46bd      	mov	sp, r7
 80352a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80352a6:	bf00      	nop
 80352a8:	3b9aca00 	.word	0x3b9aca00
 80352ac:	00000000 	.word	0x00000000
 80352b0:	0803ce60 	.word	0x0803ce60
 80352b4:	0803ce68 	.word	0x0803ce68
 80352b8:	0803ce00 	.word	0x0803ce00
 80352bc:	3b9aca00 	.word	0x3b9aca00

080352c0 <_ZN9IMUDevice12InitInternalEv>:

	int InitInternal() {
 80352c0:	b590      	push	{r4, r7, lr}
 80352c2:	b089      	sub	sp, #36	; 0x24
 80352c4:	af04      	add	r7, sp, #16
 80352c6:	6078      	str	r0, [r7, #4]
		uint8_t product_id = 0;
 80352c8:	2300      	movs	r3, #0
 80352ca:	73bb      	strb	r3, [r7, #14]
		uint16_t bhy2KernelVersion;

		uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO
 80352cc:	230c      	movs	r3, #12
 80352ce:	72fb      	strb	r3, [r7, #11]
				| BHY2_ICTL_DISABLE_DEBUG;

		uint8_t hif_ctrl = 0;
 80352d0:	2300      	movs	r3, #0
 80352d2:	73fb      	strb	r3, [r7, #15]
		uint8_t boot_status;
		uint8_t sensor_error;

		spi_init(Spi);
 80352d4:	687b      	ldr	r3, [r7, #4]
 80352d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80352da:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80352de:	4618      	mov	r0, r3
 80352e0:	f7fb faf0 	bl	80308c4 <_Z8spi_initP19__SPI_HandleTypeDef>

		if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80352e4:	687b      	ldr	r3, [r7, #4]
 80352e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80352ea:	9302      	str	r3, [sp, #8]
 80352ec:	2300      	movs	r3, #0
 80352ee:	9301      	str	r3, [sp, #4]
 80352f0:	2340      	movs	r3, #64	; 0x40
 80352f2:	9300      	str	r3, [sp, #0]
 80352f4:	4baa      	ldr	r3, [pc, #680]	; (80355a0 <_ZN9IMUDevice12InitInternalEv+0x2e0>)
 80352f6:	4aab      	ldr	r2, [pc, #684]	; (80355a4 <_ZN9IMUDevice12InitInternalEv+0x2e4>)
 80352f8:	49ab      	ldr	r1, [pc, #684]	; (80355a8 <_ZN9IMUDevice12InitInternalEv+0x2e8>)
 80352fa:	2001      	movs	r0, #1
 80352fc:	f7fb fe8b 	bl	8031016 <bhy2_init>
 8035300:	4603      	mov	r3, r0
 8035302:	2b00      	cmp	r3, #0
 8035304:	bf14      	ite	ne
 8035306:	2301      	movne	r3, #1
 8035308:	2300      	moveq	r3, #0
 803530a:	b2db      	uxtb	r3, r3
 803530c:	2b00      	cmp	r3, #0
 803530e:	d001      	beq.n	8035314 <_ZN9IMUDevice12InitInternalEv+0x54>
				bhy2_delay_us, 64, NULL, &bhy2))
			return 1;
 8035310:	2301      	movs	r3, #1
 8035312:	e140      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_soft_reset(&bhy2))
 8035314:	687b      	ldr	r3, [r7, #4]
 8035316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803531a:	4618      	mov	r0, r3
 803531c:	f7fb fe63 	bl	8030fe6 <bhy2_soft_reset>
 8035320:	4603      	mov	r3, r0
 8035322:	2b00      	cmp	r3, #0
 8035324:	bf14      	ite	ne
 8035326:	2301      	movne	r3, #1
 8035328:	2300      	moveq	r3, #0
 803532a:	b2db      	uxtb	r3, r3
 803532c:	2b00      	cmp	r3, #0
 803532e:	d001      	beq.n	8035334 <_ZN9IMUDevice12InitInternalEv+0x74>
			return 2;
 8035330:	2302      	movs	r3, #2
 8035332:	e130      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_get_product_id(&product_id, &bhy2))
 8035334:	687b      	ldr	r3, [r7, #4]
 8035336:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 803533a:	f107 030e 	add.w	r3, r7, #14
 803533e:	4611      	mov	r1, r2
 8035340:	4618      	mov	r0, r3
 8035342:	f7fb fd3c 	bl	8030dbe <bhy2_get_product_id>
 8035346:	4603      	mov	r3, r0
 8035348:	2b00      	cmp	r3, #0
 803534a:	bf14      	ite	ne
 803534c:	2301      	movne	r3, #1
 803534e:	2300      	moveq	r3, #0
 8035350:	b2db      	uxtb	r3, r3
 8035352:	2b00      	cmp	r3, #0
 8035354:	d001      	beq.n	803535a <_ZN9IMUDevice12InitInternalEv+0x9a>
			return 3;
 8035356:	2303      	movs	r3, #3
 8035358:	e11d      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (product_id != BHY2_PRODUCT_ID)
 803535a:	7bbb      	ldrb	r3, [r7, #14]
 803535c:	2b89      	cmp	r3, #137	; 0x89
 803535e:	d001      	beq.n	8035364 <_ZN9IMUDevice12InitInternalEv+0xa4>
			return 4;
 8035360:	2304      	movs	r3, #4
 8035362:	e118      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 8035364:	7afa      	ldrb	r2, [r7, #11]
 8035366:	687b      	ldr	r3, [r7, #4]
 8035368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803536c:	4619      	mov	r1, r3
 803536e:	4610      	mov	r0, r2
 8035370:	f7fb fdcc 	bl	8030f0c <bhy2_set_host_interrupt_ctrl>
 8035374:	4603      	mov	r3, r0
 8035376:	2b00      	cmp	r3, #0
 8035378:	bf14      	ite	ne
 803537a:	2301      	movne	r3, #1
 803537c:	2300      	moveq	r3, #0
 803537e:	b2db      	uxtb	r3, r3
 8035380:	2b00      	cmp	r3, #0
 8035382:	d001      	beq.n	8035388 <_ZN9IMUDevice12InitInternalEv+0xc8>
			return 5;
 8035384:	2305      	movs	r3, #5
 8035386:	e106      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 8035388:	687b      	ldr	r3, [r7, #4]
 803538a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 803538e:	f107 030b 	add.w	r3, r7, #11
 8035392:	4611      	mov	r1, r2
 8035394:	4618      	mov	r0, r3
 8035396:	f7fb fdd5 	bl	8030f44 <bhy2_get_host_interrupt_ctrl>
 803539a:	4603      	mov	r3, r0
 803539c:	2b00      	cmp	r3, #0
 803539e:	bf14      	ite	ne
 80353a0:	2301      	movne	r3, #1
 80353a2:	2300      	moveq	r3, #0
 80353a4:	b2db      	uxtb	r3, r3
 80353a6:	2b00      	cmp	r3, #0
 80353a8:	d001      	beq.n	80353ae <_ZN9IMUDevice12InitInternalEv+0xee>
			return 6;
 80353aa:	2306      	movs	r3, #6
 80353ac:	e0f3      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 80353ae:	687b      	ldr	r3, [r7, #4]
 80353b0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 80353b4:	7bfb      	ldrb	r3, [r7, #15]
 80353b6:	4611      	mov	r1, r2
 80353b8:	4618      	mov	r0, r3
 80353ba:	f7fb fdf8 	bl	8030fae <bhy2_set_host_intf_ctrl>
 80353be:	4603      	mov	r3, r0
 80353c0:	2b00      	cmp	r3, #0
 80353c2:	bf14      	ite	ne
 80353c4:	2301      	movne	r3, #1
 80353c6:	2300      	moveq	r3, #0
 80353c8:	b2db      	uxtb	r3, r3
 80353ca:	2b00      	cmp	r3, #0
 80353cc:	d001      	beq.n	80353d2 <_ZN9IMUDevice12InitInternalEv+0x112>
			return 7;
 80353ce:	2307      	movs	r3, #7
 80353d0:	e0e1      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_get_boot_status(&boot_status, &bhy2))
 80353d2:	687b      	ldr	r3, [r7, #4]
 80353d4:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 80353d8:	f107 030a 	add.w	r3, r7, #10
 80353dc:	4611      	mov	r1, r2
 80353de:	4618      	mov	r0, r3
 80353e0:	f7fb fd21 	bl	8030e26 <bhy2_get_boot_status>
 80353e4:	4603      	mov	r3, r0
 80353e6:	2b00      	cmp	r3, #0
 80353e8:	bf14      	ite	ne
 80353ea:	2301      	movne	r3, #1
 80353ec:	2300      	moveq	r3, #0
 80353ee:	b2db      	uxtb	r3, r3
 80353f0:	2b00      	cmp	r3, #0
 80353f2:	d001      	beq.n	80353f8 <_ZN9IMUDevice12InitInternalEv+0x138>
			return 8;
 80353f4:	2308      	movs	r3, #8
 80353f6:	e0ce      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80353f8:	7abb      	ldrb	r3, [r7, #10]
 80353fa:	f003 0310 	and.w	r3, r3, #16
 80353fe:	2b00      	cmp	r3, #0
 8035400:	d101      	bne.n	8035406 <_ZN9IMUDevice12InitInternalEv+0x146>
			return 9;
 8035402:	2309      	movs	r3, #9
 8035404:	e0c7      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 8035406:	687b      	ldr	r3, [r7, #4]
 8035408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803540c:	461a      	mov	r2, r3
 803540e:	4967      	ldr	r1, [pc, #412]	; (80355ac <_ZN9IMUDevice12InitInternalEv+0x2ec>)
 8035410:	4867      	ldr	r0, [pc, #412]	; (80355b0 <_ZN9IMUDevice12InitInternalEv+0x2f0>)
 8035412:	f7fb fd44 	bl	8030e9e <bhy2_upload_firmware_to_ram>
 8035416:	4603      	mov	r3, r0
 8035418:	2b00      	cmp	r3, #0
 803541a:	bf14      	ite	ne
 803541c:	2301      	movne	r3, #1
 803541e:	2300      	moveq	r3, #0
 8035420:	b2db      	uxtb	r3, r3
 8035422:	2b00      	cmp	r3, #0
 8035424:	d001      	beq.n	803542a <_ZN9IMUDevice12InitInternalEv+0x16a>
				sizeof(bhy2_firmware_image), &bhy2))
			return 9;
 8035426:	2309      	movs	r3, #9
 8035428:	e0b5      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_get_error_value(&sensor_error, &bhy2))
 803542a:	687b      	ldr	r3, [r7, #4]
 803542c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 8035430:	f107 0309 	add.w	r3, r7, #9
 8035434:	4611      	mov	r1, r2
 8035436:	4618      	mov	r0, r3
 8035438:	f7fb fed4 	bl	80311e4 <bhy2_get_error_value>
 803543c:	4603      	mov	r3, r0
 803543e:	2b00      	cmp	r3, #0
 8035440:	bf14      	ite	ne
 8035442:	2301      	movne	r3, #1
 8035444:	2300      	moveq	r3, #0
 8035446:	b2db      	uxtb	r3, r3
 8035448:	2b00      	cmp	r3, #0
 803544a:	d001      	beq.n	8035450 <_ZN9IMUDevice12InitInternalEv+0x190>
			return 10;
 803544c:	230a      	movs	r3, #10
 803544e:	e0a2      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (sensor_error)
 8035450:	7a7b      	ldrb	r3, [r7, #9]
 8035452:	2b00      	cmp	r3, #0
 8035454:	d001      	beq.n	803545a <_ZN9IMUDevice12InitInternalEv+0x19a>
			return 11;
 8035456:	230b      	movs	r3, #11
 8035458:	e09d      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_boot_from_ram(&bhy2))
 803545a:	687b      	ldr	r3, [r7, #4]
 803545c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8035460:	4618      	mov	r0, r3
 8035462:	f7fb fd3b 	bl	8030edc <bhy2_boot_from_ram>
 8035466:	4603      	mov	r3, r0
 8035468:	2b00      	cmp	r3, #0
 803546a:	bf14      	ite	ne
 803546c:	2301      	movne	r3, #1
 803546e:	2300      	moveq	r3, #0
 8035470:	b2db      	uxtb	r3, r3
 8035472:	2b00      	cmp	r3, #0
 8035474:	d001      	beq.n	803547a <_ZN9IMUDevice12InitInternalEv+0x1ba>
			return 12;
 8035476:	230c      	movs	r3, #12
 8035478:	e08d      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_get_error_value(&sensor_error, &bhy2))
 803547a:	687b      	ldr	r3, [r7, #4]
 803547c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 8035480:	f107 0309 	add.w	r3, r7, #9
 8035484:	4611      	mov	r1, r2
 8035486:	4618      	mov	r0, r3
 8035488:	f7fb feac 	bl	80311e4 <bhy2_get_error_value>
 803548c:	4603      	mov	r3, r0
 803548e:	2b00      	cmp	r3, #0
 8035490:	bf14      	ite	ne
 8035492:	2301      	movne	r3, #1
 8035494:	2300      	moveq	r3, #0
 8035496:	b2db      	uxtb	r3, r3
 8035498:	2b00      	cmp	r3, #0
 803549a:	d001      	beq.n	80354a0 <_ZN9IMUDevice12InitInternalEv+0x1e0>
			return 13;
 803549c:	230d      	movs	r3, #13
 803549e:	e07a      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (sensor_error)
 80354a0:	7a7b      	ldrb	r3, [r7, #9]
 80354a2:	2b00      	cmp	r3, #0
 80354a4:	d001      	beq.n	80354aa <_ZN9IMUDevice12InitInternalEv+0x1ea>
			return 14;
 80354a6:	230e      	movs	r3, #14
 80354a8:	e075      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 80354aa:	687b      	ldr	r3, [r7, #4]
 80354ac:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 80354b0:	f107 030c 	add.w	r3, r7, #12
 80354b4:	4611      	mov	r1, r2
 80354b6:	4618      	mov	r0, r3
 80354b8:	f7fb fc9b 	bl	8030df2 <bhy2_get_kernel_version>
 80354bc:	4603      	mov	r3, r0
 80354be:	2b00      	cmp	r3, #0
 80354c0:	bf14      	ite	ne
 80354c2:	2301      	movne	r3, #1
 80354c4:	2300      	moveq	r3, #0
 80354c6:	b2db      	uxtb	r3, r3
 80354c8:	2b00      	cmp	r3, #0
 80354ca:	d001      	beq.n	80354d0 <_ZN9IMUDevice12InitInternalEv+0x210>
			return 15;
 80354cc:	230f      	movs	r3, #15
 80354ce:	e062      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2KernelVersion == 0)
 80354d0:	89bb      	ldrh	r3, [r7, #12]
 80354d2:	2b00      	cmp	r3, #0
 80354d4:	d101      	bne.n	80354da <_ZN9IMUDevice12InitInternalEv+0x21a>
			return 16;
 80354d6:	2310      	movs	r3, #16
 80354d8:	e05d      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
				IMUDevice::ParseFrame, &CurrentFrame, &bhy2))
 80354da:	687b      	ldr	r3, [r7, #4]
 80354dc:	f241 1244 	movw	r2, #4420	; 0x1144
 80354e0:	441a      	add	r2, r3
		if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80354e2:	687b      	ldr	r3, [r7, #4]
 80354e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80354e8:	4932      	ldr	r1, [pc, #200]	; (80355b4 <_ZN9IMUDevice12InitInternalEv+0x2f4>)
 80354ea:	2025      	movs	r0, #37	; 0x25
 80354ec:	f7fb fdbd 	bl	803106a <bhy2_register_fifo_parse_callback>
 80354f0:	4603      	mov	r3, r0
 80354f2:	2b00      	cmp	r3, #0
 80354f4:	bf14      	ite	ne
 80354f6:	2301      	movne	r3, #1
 80354f8:	2300      	moveq	r3, #0
 80354fa:	b2db      	uxtb	r3, r3
 80354fc:	2b00      	cmp	r3, #0
 80354fe:	d001      	beq.n	8035504 <_ZN9IMUDevice12InitInternalEv+0x244>
			return 17;
 8035500:	2311      	movs	r3, #17
 8035502:	e048      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(),
 8035504:	687b      	ldr	r3, [r7, #4]
 8035506:	4618      	mov	r0, r3
 8035508:	f001 fecc 	bl	80372a4 <_ZNSt5arrayIhLj2048EE4dataEv>
 803550c:	4604      	mov	r4, r0
 803550e:	687b      	ldr	r3, [r7, #4]
 8035510:	4618      	mov	r0, r3
 8035512:	f001 fed4 	bl	80372be <_ZNKSt5arrayIhLj2048EE4sizeEv>
 8035516:	4601      	mov	r1, r0
 8035518:	687b      	ldr	r3, [r7, #4]
 803551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803551e:	461a      	mov	r2, r3
 8035520:	4620      	mov	r0, r4
 8035522:	f7fb fafa 	bl	8030b1a <bhy2_get_and_process_fifo>
 8035526:	4603      	mov	r3, r0
 8035528:	2b00      	cmp	r3, #0
 803552a:	bf14      	ite	ne
 803552c:	2301      	movne	r3, #1
 803552e:	2300      	moveq	r3, #0
 8035530:	b2db      	uxtb	r3, r3
 8035532:	2b00      	cmp	r3, #0
 8035534:	d001      	beq.n	803553a <_ZN9IMUDevice12InitInternalEv+0x27a>
				&bhy2))
			return 18;
 8035536:	2312      	movs	r3, #18
 8035538:	e02d      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_update_virtual_sensor_list(&bhy2))
 803553a:	687b      	ldr	r3, [r7, #4]
 803553c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8035540:	4618      	mov	r0, r3
 8035542:	f7fb fdc1 	bl	80310c8 <bhy2_update_virtual_sensor_list>
 8035546:	4603      	mov	r3, r0
 8035548:	2b00      	cmp	r3, #0
 803554a:	bf14      	ite	ne
 803554c:	2301      	movne	r3, #1
 803554e:	2300      	moveq	r3, #0
 8035550:	b2db      	uxtb	r3, r3
 8035552:	2b00      	cmp	r3, #0
 8035554:	d001      	beq.n	803555a <_ZN9IMUDevice12InitInternalEv+0x29a>
			return 16;
 8035556:	2310      	movs	r3, #16
 8035558:	e01d      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, SampleRate,
 803555a:	687b      	ldr	r3, [r7, #4]
 803555c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8035560:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 8035564:	687b      	ldr	r3, [r7, #4]
 8035566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803556a:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
 803556e:	687b      	ldr	r3, [r7, #4]
 8035570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8035574:	461a      	mov	r2, r3
 8035576:	eeb0 0a67 	vmov.f32	s0, s15
 803557a:	2025      	movs	r0, #37	; 0x25
 803557c:	f7fb fbfe 	bl	8030d7c <bhy2_set_virt_sensor_cfg>
 8035580:	4603      	mov	r3, r0
 8035582:	2b00      	cmp	r3, #0
 8035584:	bf14      	ite	ne
 8035586:	2301      	movne	r3, #1
 8035588:	2300      	moveq	r3, #0
 803558a:	b2db      	uxtb	r3, r3
 803558c:	2b00      	cmp	r3, #0
 803558e:	d001      	beq.n	8035594 <_ZN9IMUDevice12InitInternalEv+0x2d4>
				ReportLatency, &bhy2))
			return 17;
 8035590:	2311      	movs	r3, #17
 8035592:	e000      	b.n	8035596 <_ZN9IMUDevice12InitInternalEv+0x2d6>

		return 0;
 8035594:	2300      	movs	r3, #0
	}
 8035596:	4618      	mov	r0, r3
 8035598:	3714      	adds	r7, #20
 803559a:	46bd      	mov	sp, r7
 803559c:	bd90      	pop	{r4, r7, pc}
 803559e:	bf00      	nop
 80355a0:	08030a95 	.word	0x08030a95
 80355a4:	08030a11 	.word	0x08030a11
 80355a8:	08030995 	.word	0x08030995
 80355ac:	0001a66c 	.word	0x0001a66c
 80355b0:	0803e4e0 	.word	0x0803e4e0
 80355b4:	08035199 	.word	0x08035199

080355b8 <_ZN9IMUDeviceC1EP19__SPI_HandleTypeDeffm>:

public:
	IMUDevice(SPI_HandleTypeDef *spi, float sampleRate, uint32_t reportLatency) :
 80355b8:	b580      	push	{r7, lr}
 80355ba:	b084      	sub	sp, #16
 80355bc:	af00      	add	r7, sp, #0
 80355be:	60f8      	str	r0, [r7, #12]
 80355c0:	60b9      	str	r1, [r7, #8]
 80355c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80355c6:	603a      	str	r2, [r7, #0]
			Spi { spi }, SampleRate { sampleRate }, ReportLatency {
					reportLatency } {
 80355c8:	68fb      	ldr	r3, [r7, #12]
 80355ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80355ce:	461a      	mov	r2, r3
 80355d0:	68bb      	ldr	r3, [r7, #8]
 80355d2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80355d6:	68fb      	ldr	r3, [r7, #12]
 80355d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80355dc:	461a      	mov	r2, r3
 80355de:	687b      	ldr	r3, [r7, #4]
 80355e0:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 80355e4:	68fb      	ldr	r3, [r7, #12]
 80355e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80355ea:	461a      	mov	r2, r3
 80355ec:	683b      	ldr	r3, [r7, #0]
 80355ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80355f2:	68fb      	ldr	r3, [r7, #12]
 80355f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80355f8:	461a      	mov	r2, r3
 80355fa:	2300      	movs	r3, #0
 80355fc:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 8035600:	68fb      	ldr	r3, [r7, #12]
 8035602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8035606:	2200      	movs	r2, #0
 8035608:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		assert(spi);
 803560c:	68bb      	ldr	r3, [r7, #8]
 803560e:	2b00      	cmp	r3, #0
 8035610:	d105      	bne.n	803561e <_ZN9IMUDeviceC1EP19__SPI_HandleTypeDeffm+0x66>
 8035612:	4b05      	ldr	r3, [pc, #20]	; (8035628 <_ZN9IMUDeviceC1EP19__SPI_HandleTypeDeffm+0x70>)
 8035614:	4a05      	ldr	r2, [pc, #20]	; (803562c <_ZN9IMUDeviceC1EP19__SPI_HandleTypeDeffm+0x74>)
 8035616:	21b3      	movs	r1, #179	; 0xb3
 8035618:	4805      	ldr	r0, [pc, #20]	; (8035630 <_ZN9IMUDeviceC1EP19__SPI_HandleTypeDeffm+0x78>)
 803561a:	f006 fabb 	bl	803bb94 <__assert_func>
	}
 803561e:	68fb      	ldr	r3, [r7, #12]
 8035620:	4618      	mov	r0, r3
 8035622:	3710      	adds	r7, #16
 8035624:	46bd      	mov	sp, r7
 8035626:	bd80      	pop	{r7, pc}
 8035628:	0803ceb4 	.word	0x0803ceb4
 803562c:	0803ceb8 	.word	0x0803ceb8
 8035630:	0803ce00 	.word	0x0803ce00

08035634 <_ZN9IMUDevice4InitEv>:

	IMUDevice() = default;

	void Init() {
 8035634:	b580      	push	{r7, lr}
 8035636:	b082      	sub	sp, #8
 8035638:	af00      	add	r7, sp, #0
 803563a:	6078      	str	r0, [r7, #4]
		assert(InitInternal() == 0);
 803563c:	6878      	ldr	r0, [r7, #4]
 803563e:	f7ff fe3f 	bl	80352c0 <_ZN9IMUDevice12InitInternalEv>
 8035642:	4603      	mov	r3, r0
 8035644:	2b00      	cmp	r3, #0
 8035646:	d005      	beq.n	8035654 <_ZN9IMUDevice4InitEv+0x20>
 8035648:	4b04      	ldr	r3, [pc, #16]	; (803565c <_ZN9IMUDevice4InitEv+0x28>)
 803564a:	4a05      	ldr	r2, [pc, #20]	; (8035660 <_ZN9IMUDevice4InitEv+0x2c>)
 803564c:	21b9      	movs	r1, #185	; 0xb9
 803564e:	4805      	ldr	r0, [pc, #20]	; (8035664 <_ZN9IMUDevice4InitEv+0x30>)
 8035650:	f006 faa0 	bl	803bb94 <__assert_func>
	}
 8035654:	bf00      	nop
 8035656:	3708      	adds	r7, #8
 8035658:	46bd      	mov	sp, r7
 803565a:	bd80      	pop	{r7, pc}
 803565c:	0803cef4 	.word	0x0803cef4
 8035660:	0803cf08 	.word	0x0803cf08
 8035664:	0803ce00 	.word	0x0803ce00

08035668 <_ZN9IMUDevice10CheckTimerEv>:

	void CheckTimer() {
 8035668:	b580      	push	{r7, lr}
 803566a:	b082      	sub	sp, #8
 803566c:	af00      	add	r7, sp, #0
 803566e:	6078      	str	r0, [r7, #4]
		Update();
 8035670:	6878      	ldr	r0, [r7, #4]
 8035672:	f7ff fd39 	bl	80350e8 <_ZN9IMUDevice6UpdateEv>
	}
 8035676:	bf00      	nop
 8035678:	3708      	adds	r7, #8
 803567a:	46bd      	mov	sp, r7
 803567c:	bd80      	pop	{r7, pc}

0803567e <_ZNK9IMUDevice8GetFrameEv>:

	Frame GetFrame() const {
 803567e:	b4b0      	push	{r4, r5, r7}
 8035680:	b083      	sub	sp, #12
 8035682:	af00      	add	r7, sp, #0
 8035684:	6078      	str	r0, [r7, #4]
 8035686:	6039      	str	r1, [r7, #0]
		return CurrentFrame;
 8035688:	687a      	ldr	r2, [r7, #4]
 803568a:	683b      	ldr	r3, [r7, #0]
 803568c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8035690:	4615      	mov	r5, r2
 8035692:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8035696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8035698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 803569a:	6823      	ldr	r3, [r4, #0]
 803569c:	602b      	str	r3, [r5, #0]
	}
 803569e:	6878      	ldr	r0, [r7, #4]
 80356a0:	370c      	adds	r7, #12
 80356a2:	46bd      	mov	sp, r7
 80356a4:	bcb0      	pop	{r4, r5, r7}
 80356a6:	4770      	bx	lr

080356a8 <_ZNK9IMUDevice6GetSeqEv>:

	size_t GetSeq() const {
 80356a8:	b480      	push	{r7}
 80356aa:	b083      	sub	sp, #12
 80356ac:	af00      	add	r7, sp, #0
 80356ae:	6078      	str	r0, [r7, #4]
		return CurrentSeq;
 80356b0:	687b      	ldr	r3, [r7, #4]
 80356b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80356b6:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
	}
 80356ba:	4618      	mov	r0, r3
 80356bc:	370c      	adds	r7, #12
 80356be:	46bd      	mov	sp, r7
 80356c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80356c4:	4770      	bx	lr

080356c6 <_ZN9IMUDevice11TimCallbackEv>:

	void TimCallback() {
 80356c6:	b580      	push	{r7, lr}
 80356c8:	b082      	sub	sp, #8
 80356ca:	af00      	add	r7, sp, #0
 80356cc:	6078      	str	r0, [r7, #4]
		Callback();
 80356ce:	6878      	ldr	r0, [r7, #4]
 80356d0:	f7ff fcfa 	bl	80350c8 <_ZN9IMUDevice8CallbackEv>
	}
 80356d4:	bf00      	nop
 80356d6:	3708      	adds	r7, #8
 80356d8:	46bd      	mov	sp, r7
 80356da:	bd80      	pop	{r7, pc}

080356dc <_ZNK6HeadIO7Request5IsBadEv>:
		uint8_t ProcID;

		BufferType Data;
		uint8_t Size;

		bool IsBad() const {
 80356dc:	b480      	push	{r7}
 80356de:	b083      	sub	sp, #12
 80356e0:	af00      	add	r7, sp, #0
 80356e2:	6078      	str	r0, [r7, #4]
			return ProcID == NACKVal;
 80356e4:	687b      	ldr	r3, [r7, #4]
 80356e6:	781b      	ldrb	r3, [r3, #0]
 80356e8:	2bff      	cmp	r3, #255	; 0xff
 80356ea:	bf0c      	ite	eq
 80356ec:	2301      	moveq	r3, #1
 80356ee:	2300      	movne	r3, #0
 80356f0:	b2db      	uxtb	r3, r3
		}
 80356f2:	4618      	mov	r0, r3
 80356f4:	370c      	adds	r7, #12
 80356f6:	46bd      	mov	sp, r7
 80356f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80356fc:	4770      	bx	lr

080356fe <_ZN6HeadIO8Listener8Receive1Ev>:
		uint8_t CurrentValue;
		Request CurrentRequest;
		PackageState State;

	private:
		void Receive1() {
 80356fe:	b580      	push	{r7, lr}
 8035700:	b082      	sub	sp, #8
 8035702:	af00      	add	r7, sp, #0
 8035704:	6078      	str	r0, [r7, #4]
			HAL_UART_Receive_IT(Uart, &CurrentValue, 1);
 8035706:	687b      	ldr	r3, [r7, #4]
 8035708:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 803570c:	687b      	ldr	r3, [r7, #4]
 803570e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8035712:	2201      	movs	r2, #1
 8035714:	4619      	mov	r1, r3
 8035716:	f7f7 f81f 	bl	802c758 <HAL_UART_Receive_IT>
		}
 803571a:	bf00      	nop
 803571c:	3708      	adds	r7, #8
 803571e:	46bd      	mov	sp, r7
 8035720:	bd80      	pop	{r7, pc}

08035722 <_ZN6HeadIO8Listener11ReceiveDataEv>:

		void ReceiveData() {
 8035722:	b590      	push	{r4, r7, lr}
 8035724:	b083      	sub	sp, #12
 8035726:	af00      	add	r7, sp, #0
 8035728:	6078      	str	r0, [r7, #4]
			HAL_UART_Receive_IT(Uart, CurrentRequest.Data.data(),
 803572a:	687b      	ldr	r3, [r7, #4]
 803572c:	f8d3 4414 	ldr.w	r4, [r3, #1044]	; 0x414
 8035730:	687b      	ldr	r3, [r7, #4]
 8035732:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 8035736:	4618      	mov	r0, r3
 8035738:	f001 fdcd 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 803573c:	4601      	mov	r1, r0
					CurrentRequest.Size);
 803573e:	687b      	ldr	r3, [r7, #4]
 8035740:	f893 351a 	ldrb.w	r3, [r3, #1306]	; 0x51a
			HAL_UART_Receive_IT(Uart, CurrentRequest.Data.data(),
 8035744:	b29b      	uxth	r3, r3
 8035746:	461a      	mov	r2, r3
 8035748:	4620      	mov	r0, r4
 803574a:	f7f7 f805 	bl	802c758 <HAL_UART_Receive_IT>
		}
 803574e:	bf00      	nop
 8035750:	370c      	adds	r7, #12
 8035752:	46bd      	mov	sp, r7
 8035754:	bd90      	pop	{r4, r7, pc}

08035756 <_ZN6HeadIO8Listener5ResetEv>:

		void Reset() {
 8035756:	b580      	push	{r7, lr}
 8035758:	b082      	sub	sp, #8
 803575a:	af00      	add	r7, sp, #0
 803575c:	6078      	str	r0, [r7, #4]
			State = PS::SOM1;
 803575e:	687b      	ldr	r3, [r7, #4]
 8035760:	2200      	movs	r2, #0
 8035762:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
			Receive1();
 8035766:	6878      	ldr	r0, [r7, #4]
 8035768:	f7ff ffc9 	bl	80356fe <_ZN6HeadIO8Listener8Receive1Ev>
		}
 803576c:	bf00      	nop
 803576e:	3708      	adds	r7, #8
 8035770:	46bd      	mov	sp, r7
 8035772:	bd80      	pop	{r7, pc}

08035774 <_ZN6HeadIO8Listener4Get1Ev>:

		uint8_t Get1() {
 8035774:	b480      	push	{r7}
 8035776:	b083      	sub	sp, #12
 8035778:	af00      	add	r7, sp, #0
 803577a:	6078      	str	r0, [r7, #4]
			return CurrentValue;
 803577c:	687b      	ldr	r3, [r7, #4]
 803577e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
		}
 8035782:	4618      	mov	r0, r3
 8035784:	370c      	adds	r7, #12
 8035786:	46bd      	mov	sp, r7
 8035788:	f85d 7b04 	ldr.w	r7, [sp], #4
 803578c:	4770      	bx	lr

0803578e <_ZN6HeadIO8Listener16HandleBadRequestEv>:

		void HandleBadRequest() {
 803578e:	b580      	push	{r7, lr}
 8035790:	b0c4      	sub	sp, #272	; 0x110
 8035792:	af00      	add	r7, sp, #0
 8035794:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8035798:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 803579c:	6018      	str	r0, [r3, #0]
			Request badRequest;
			badRequest.ProcID = NACKVal;
 803579e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80357a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80357a6:	22ff      	movs	r2, #255	; 0xff
 80357a8:	701a      	strb	r2, [r3, #0]

			Requests.Push(badRequest);
 80357aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80357ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80357b2:	681b      	ldr	r3, [r3, #0]
 80357b4:	f107 020c 	add.w	r2, r7, #12
 80357b8:	4611      	mov	r1, r2
 80357ba:	4618      	mov	r0, r3
 80357bc:	f001 fd98 	bl	80372f0 <_ZN10FixedQueueIN6HeadIO7RequestELj4EE4PushERKS1_>
			Reset();
 80357c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80357c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80357c8:	6818      	ldr	r0, [r3, #0]
 80357ca:	f7ff ffc4 	bl	8035756 <_ZN6HeadIO8Listener5ResetEv>
		}
 80357ce:	bf00      	nop
 80357d0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80357d4:	46bd      	mov	sp, r7
 80357d6:	bd80      	pop	{r7, pc}

080357d8 <_ZN6HeadIO8Listener8CallbackEv>:

		void Callback() {
 80357d8:	b580      	push	{r7, lr}
 80357da:	b082      	sub	sp, #8
 80357dc:	af00      	add	r7, sp, #0
 80357de:	6078      	str	r0, [r7, #4]
			switch (State) {
 80357e0:	687b      	ldr	r3, [r7, #4]
 80357e2:	f8d3 351c 	ldr.w	r3, [r3, #1308]	; 0x51c
 80357e6:	2b05      	cmp	r3, #5
 80357e8:	f200 808e 	bhi.w	8035908 <_ZN6HeadIO8Listener8CallbackEv+0x130>
 80357ec:	a201      	add	r2, pc, #4	; (adr r2, 80357f4 <_ZN6HeadIO8Listener8CallbackEv+0x1c>)
 80357ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80357f2:	bf00      	nop
 80357f4:	0803580d 	.word	0x0803580d
 80357f8:	0803583b 	.word	0x0803583b
 80357fc:	08035869 	.word	0x08035869
 8035800:	08035889 	.word	0x08035889
 8035804:	080358c3 	.word	0x080358c3
 8035808:	080358d3 	.word	0x080358d3
			case PS::SOM1: {
				if (Get1() == SOM1Val) {
 803580c:	6878      	ldr	r0, [r7, #4]
 803580e:	f7ff ffb1 	bl	8035774 <_ZN6HeadIO8Listener4Get1Ev>
 8035812:	4603      	mov	r3, r0
 8035814:	2bff      	cmp	r3, #255	; 0xff
 8035816:	bf0c      	ite	eq
 8035818:	2301      	moveq	r3, #1
 803581a:	2300      	movne	r3, #0
 803581c:	b2db      	uxtb	r3, r3
 803581e:	2b00      	cmp	r3, #0
 8035820:	d007      	beq.n	8035832 <_ZN6HeadIO8Listener8CallbackEv+0x5a>
					State = PS::SOM2;
 8035822:	687b      	ldr	r3, [r7, #4]
 8035824:	2201      	movs	r2, #1
 8035826:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
					Receive1();
 803582a:	6878      	ldr	r0, [r7, #4]
 803582c:	f7ff ff67 	bl	80356fe <_ZN6HeadIO8Listener8Receive1Ev>
				} else
					HandleBadRequest();
				break;
 8035830:	e06e      	b.n	8035910 <_ZN6HeadIO8Listener8CallbackEv+0x138>
					HandleBadRequest();
 8035832:	6878      	ldr	r0, [r7, #4]
 8035834:	f7ff ffab 	bl	803578e <_ZN6HeadIO8Listener16HandleBadRequestEv>
				break;
 8035838:	e06a      	b.n	8035910 <_ZN6HeadIO8Listener8CallbackEv+0x138>
			}
			case PS::SOM2: {
				if (Get1() == SOM2Val) {
 803583a:	6878      	ldr	r0, [r7, #4]
 803583c:	f7ff ff9a 	bl	8035774 <_ZN6HeadIO8Listener4Get1Ev>
 8035840:	4603      	mov	r3, r0
 8035842:	2baa      	cmp	r3, #170	; 0xaa
 8035844:	bf0c      	ite	eq
 8035846:	2301      	moveq	r3, #1
 8035848:	2300      	movne	r3, #0
 803584a:	b2db      	uxtb	r3, r3
 803584c:	2b00      	cmp	r3, #0
 803584e:	d007      	beq.n	8035860 <_ZN6HeadIO8Listener8CallbackEv+0x88>
					State = PS::PROC_ID;
 8035850:	687b      	ldr	r3, [r7, #4]
 8035852:	2202      	movs	r2, #2
 8035854:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
					Receive1();
 8035858:	6878      	ldr	r0, [r7, #4]
 803585a:	f7ff ff50 	bl	80356fe <_ZN6HeadIO8Listener8Receive1Ev>
				} else
					HandleBadRequest();
				break;
 803585e:	e057      	b.n	8035910 <_ZN6HeadIO8Listener8CallbackEv+0x138>
					HandleBadRequest();
 8035860:	6878      	ldr	r0, [r7, #4]
 8035862:	f7ff ff94 	bl	803578e <_ZN6HeadIO8Listener16HandleBadRequestEv>
				break;
 8035866:	e053      	b.n	8035910 <_ZN6HeadIO8Listener8CallbackEv+0x138>
			}
			case PS::PROC_ID: {
				CurrentRequest.ProcID = Get1();
 8035868:	6878      	ldr	r0, [r7, #4]
 803586a:	f7ff ff83 	bl	8035774 <_ZN6HeadIO8Listener4Get1Ev>
 803586e:	4603      	mov	r3, r0
 8035870:	461a      	mov	r2, r3
 8035872:	687b      	ldr	r3, [r7, #4]
 8035874:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
				State = PS::SIZE;
 8035878:	687b      	ldr	r3, [r7, #4]
 803587a:	2203      	movs	r2, #3
 803587c:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
				Receive1();
 8035880:	6878      	ldr	r0, [r7, #4]
 8035882:	f7ff ff3c 	bl	80356fe <_ZN6HeadIO8Listener8Receive1Ev>
				break;
 8035886:	e043      	b.n	8035910 <_ZN6HeadIO8Listener8CallbackEv+0x138>
			}
			case PS::SIZE: {
				CurrentRequest.Size = Get1();
 8035888:	6878      	ldr	r0, [r7, #4]
 803588a:	f7ff ff73 	bl	8035774 <_ZN6HeadIO8Listener4Get1Ev>
 803588e:	4603      	mov	r3, r0
 8035890:	461a      	mov	r2, r3
 8035892:	687b      	ldr	r3, [r7, #4]
 8035894:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
				if (CurrentRequest.Size > 0) {
 8035898:	687b      	ldr	r3, [r7, #4]
 803589a:	f893 351a 	ldrb.w	r3, [r3, #1306]	; 0x51a
 803589e:	2b00      	cmp	r3, #0
 80358a0:	d007      	beq.n	80358b2 <_ZN6HeadIO8Listener8CallbackEv+0xda>
					State = PS::DATA;
 80358a2:	687b      	ldr	r3, [r7, #4]
 80358a4:	2204      	movs	r2, #4
 80358a6:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
					ReceiveData();
 80358aa:	6878      	ldr	r0, [r7, #4]
 80358ac:	f7ff ff39 	bl	8035722 <_ZN6HeadIO8Listener11ReceiveDataEv>
				} else {
					State = PS::SOM3;
					Receive1();
				}
				break;
 80358b0:	e02e      	b.n	8035910 <_ZN6HeadIO8Listener8CallbackEv+0x138>
					State = PS::SOM3;
 80358b2:	687b      	ldr	r3, [r7, #4]
 80358b4:	2205      	movs	r2, #5
 80358b6:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
					Receive1();
 80358ba:	6878      	ldr	r0, [r7, #4]
 80358bc:	f7ff ff1f 	bl	80356fe <_ZN6HeadIO8Listener8Receive1Ev>
				break;
 80358c0:	e026      	b.n	8035910 <_ZN6HeadIO8Listener8CallbackEv+0x138>
			}
			case PS::DATA: {
				State = PS::SOM3;
 80358c2:	687b      	ldr	r3, [r7, #4]
 80358c4:	2205      	movs	r2, #5
 80358c6:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
				Receive1();
 80358ca:	6878      	ldr	r0, [r7, #4]
 80358cc:	f7ff ff17 	bl	80356fe <_ZN6HeadIO8Listener8Receive1Ev>
				break;
 80358d0:	e01e      	b.n	8035910 <_ZN6HeadIO8Listener8CallbackEv+0x138>
			}
			case PS::SOM3: {
				if (Get1() == SOM3Val) {
 80358d2:	6878      	ldr	r0, [r7, #4]
 80358d4:	f7ff ff4e 	bl	8035774 <_ZN6HeadIO8Listener4Get1Ev>
 80358d8:	4603      	mov	r3, r0
 80358da:	2baf      	cmp	r3, #175	; 0xaf
 80358dc:	bf0c      	ite	eq
 80358de:	2301      	moveq	r3, #1
 80358e0:	2300      	movne	r3, #0
 80358e2:	b2db      	uxtb	r3, r3
 80358e4:	2b00      	cmp	r3, #0
 80358e6:	d00b      	beq.n	8035900 <_ZN6HeadIO8Listener8CallbackEv+0x128>
					Requests.Push(CurrentRequest);
 80358e8:	687a      	ldr	r2, [r7, #4]
 80358ea:	687b      	ldr	r3, [r7, #4]
 80358ec:	f203 4319 	addw	r3, r3, #1049	; 0x419
 80358f0:	4619      	mov	r1, r3
 80358f2:	4610      	mov	r0, r2
 80358f4:	f001 fcfc 	bl	80372f0 <_ZN10FixedQueueIN6HeadIO7RequestELj4EE4PushERKS1_>
					Reset();
 80358f8:	6878      	ldr	r0, [r7, #4]
 80358fa:	f7ff ff2c 	bl	8035756 <_ZN6HeadIO8Listener5ResetEv>
				} else
					HandleBadRequest();
				break;
 80358fe:	e007      	b.n	8035910 <_ZN6HeadIO8Listener8CallbackEv+0x138>
					HandleBadRequest();
 8035900:	6878      	ldr	r0, [r7, #4]
 8035902:	f7ff ff44 	bl	803578e <_ZN6HeadIO8Listener16HandleBadRequestEv>
				break;
 8035906:	e003      	b.n	8035910 <_ZN6HeadIO8Listener8CallbackEv+0x138>
			}
			default:
				HandleBadRequest();
 8035908:	6878      	ldr	r0, [r7, #4]
 803590a:	f7ff ff40 	bl	803578e <_ZN6HeadIO8Listener16HandleBadRequestEv>
			}
		}
 803590e:	bf00      	nop
 8035910:	bf00      	nop
 8035912:	3708      	adds	r7, #8
 8035914:	46bd      	mov	sp, r7
 8035916:	bd80      	pop	{r7, pc}

08035918 <_ZN10FixedQueueIN6HeadIO7RequestELj4EEC1Ev>:
#include <assert.h>
#include <array>
#include <cstdlib>

template<typename T, size_t Capacity>
class FixedQueue {
 8035918:	b480      	push	{r7}
 803591a:	b083      	sub	sp, #12
 803591c:	af00      	add	r7, sp, #0
 803591e:	6078      	str	r0, [r7, #4]
 8035920:	687b      	ldr	r3, [r7, #4]
 8035922:	2200      	movs	r2, #0
 8035924:	601a      	str	r2, [r3, #0]
 8035926:	687b      	ldr	r3, [r7, #4]
 8035928:	2200      	movs	r2, #0
 803592a:	605a      	str	r2, [r3, #4]
 803592c:	687b      	ldr	r3, [r7, #4]
 803592e:	2200      	movs	r2, #0
 8035930:	609a      	str	r2, [r3, #8]
 8035932:	687b      	ldr	r3, [r7, #4]
 8035934:	4618      	mov	r0, r3
 8035936:	370c      	adds	r7, #12
 8035938:	46bd      	mov	sp, r7
 803593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803593e:	4770      	bx	lr

08035940 <_ZN6HeadIO8ListenerC1EP20__UART_HandleTypeDef>:
	public:
		explicit Listener(UART_HandleTypeDef *uart) :
 8035940:	b580      	push	{r7, lr}
 8035942:	b082      	sub	sp, #8
 8035944:	af00      	add	r7, sp, #0
 8035946:	6078      	str	r0, [r7, #4]
 8035948:	6039      	str	r1, [r7, #0]
				Uart { uart } {
 803594a:	687b      	ldr	r3, [r7, #4]
 803594c:	4618      	mov	r0, r3
 803594e:	f7ff ffe3 	bl	8035918 <_ZN10FixedQueueIN6HeadIO7RequestELj4EEC1Ev>
 8035952:	687b      	ldr	r3, [r7, #4]
 8035954:	683a      	ldr	r2, [r7, #0]
 8035956:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
			assert(uart);
 803595a:	683b      	ldr	r3, [r7, #0]
 803595c:	2b00      	cmp	r3, #0
 803595e:	d105      	bne.n	803596c <_ZN6HeadIO8ListenerC1EP20__UART_HandleTypeDef+0x2c>
 8035960:	4b05      	ldr	r3, [pc, #20]	; (8035978 <_ZN6HeadIO8ListenerC1EP20__UART_HandleTypeDef+0x38>)
 8035962:	4a06      	ldr	r2, [pc, #24]	; (803597c <_ZN6HeadIO8ListenerC1EP20__UART_HandleTypeDef+0x3c>)
 8035964:	2184      	movs	r1, #132	; 0x84
 8035966:	4806      	ldr	r0, [pc, #24]	; (8035980 <_ZN6HeadIO8ListenerC1EP20__UART_HandleTypeDef+0x40>)
 8035968:	f006 f914 	bl	803bb94 <__assert_func>
		}
 803596c:	687b      	ldr	r3, [r7, #4]
 803596e:	4618      	mov	r0, r3
 8035970:	3708      	adds	r7, #8
 8035972:	46bd      	mov	sp, r7
 8035974:	bd80      	pop	{r7, pc}
 8035976:	bf00      	nop
 8035978:	0803ccc0 	.word	0x0803ccc0
 803597c:	0803cf20 	.word	0x0803cf20
 8035980:	0803cf50 	.word	0x0803cf50

08035984 <_ZN6HeadIO8Listener4InitEv>:

		void Init() {
 8035984:	b580      	push	{r7, lr}
 8035986:	b082      	sub	sp, #8
 8035988:	af00      	add	r7, sp, #0
 803598a:	6078      	str	r0, [r7, #4]
			Reset();
 803598c:	6878      	ldr	r0, [r7, #4]
 803598e:	f7ff fee2 	bl	8035756 <_ZN6HeadIO8Listener5ResetEv>
		}
 8035992:	bf00      	nop
 8035994:	3708      	adds	r7, #8
 8035996:	46bd      	mov	sp, r7
 8035998:	bd80      	pop	{r7, pc}

0803599a <_ZN6HeadIO8Listener10HasRequestEv>:

		bool HasRequest() {
 803599a:	b580      	push	{r7, lr}
 803599c:	b082      	sub	sp, #8
 803599e:	af00      	add	r7, sp, #0
 80359a0:	6078      	str	r0, [r7, #4]
			return !Requests.Empty();
 80359a2:	687b      	ldr	r3, [r7, #4]
 80359a4:	4618      	mov	r0, r3
 80359a6:	f001 fcdb 	bl	8037360 <_ZNK10FixedQueueIN6HeadIO7RequestELj4EE5EmptyEv>
 80359aa:	4603      	mov	r3, r0
 80359ac:	f083 0301 	eor.w	r3, r3, #1
 80359b0:	b2db      	uxtb	r3, r3
		}
 80359b2:	4618      	mov	r0, r3
 80359b4:	3708      	adds	r7, #8
 80359b6:	46bd      	mov	sp, r7
 80359b8:	bd80      	pop	{r7, pc}
	...

080359bc <_ZN6HeadIO8Listener10GetRequestEv>:

		Request GetRequest() {
 80359bc:	b580      	push	{r7, lr}
 80359be:	b082      	sub	sp, #8
 80359c0:	af00      	add	r7, sp, #0
 80359c2:	6078      	str	r0, [r7, #4]
 80359c4:	6039      	str	r1, [r7, #0]
			assert(HasRequest());
 80359c6:	6838      	ldr	r0, [r7, #0]
 80359c8:	f7ff ffe7 	bl	803599a <_ZN6HeadIO8Listener10HasRequestEv>
 80359cc:	4603      	mov	r3, r0
 80359ce:	2b00      	cmp	r3, #0
 80359d0:	d105      	bne.n	80359de <_ZN6HeadIO8Listener10GetRequestEv+0x22>
 80359d2:	4b0e      	ldr	r3, [pc, #56]	; (8035a0c <_ZN6HeadIO8Listener10GetRequestEv+0x50>)
 80359d4:	4a0e      	ldr	r2, [pc, #56]	; (8035a10 <_ZN6HeadIO8Listener10GetRequestEv+0x54>)
 80359d6:	2190      	movs	r1, #144	; 0x90
 80359d8:	480e      	ldr	r0, [pc, #56]	; (8035a14 <_ZN6HeadIO8Listener10GetRequestEv+0x58>)
 80359da:	f006 f8db 	bl	803bb94 <__assert_func>
			Request request = Requests.Front();
 80359de:	683b      	ldr	r3, [r7, #0]
 80359e0:	4618      	mov	r0, r3
 80359e2:	f001 fccf 	bl	8037384 <_ZNK10FixedQueueIN6HeadIO7RequestELj4EE5FrontEv>
 80359e6:	4602      	mov	r2, r0
 80359e8:	687b      	ldr	r3, [r7, #4]
 80359ea:	4618      	mov	r0, r3
 80359ec:	4611      	mov	r1, r2
 80359ee:	f44f 7381 	mov.w	r3, #258	; 0x102
 80359f2:	461a      	mov	r2, r3
 80359f4:	f006 f948 	bl	803bc88 <memcpy>
			Requests.Pop();
 80359f8:	683b      	ldr	r3, [r7, #0]
 80359fa:	4618      	mov	r0, r3
 80359fc:	f001 fce4 	bl	80373c8 <_ZN10FixedQueueIN6HeadIO7RequestELj4EE3PopEv>
			return request;
 8035a00:	bf00      	nop
		}
 8035a02:	6878      	ldr	r0, [r7, #4]
 8035a04:	3708      	adds	r7, #8
 8035a06:	46bd      	mov	sp, r7
 8035a08:	bd80      	pop	{r7, pc}
 8035a0a:	bf00      	nop
 8035a0c:	0803cfb0 	.word	0x0803cfb0
 8035a10:	0803cfc0 	.word	0x0803cfc0
 8035a14:	0803cf50 	.word	0x0803cf50

08035a18 <_ZN6HeadIO8Listener14RxCpltCallbackEv>:

		void RxCpltCallback() {
 8035a18:	b580      	push	{r7, lr}
 8035a1a:	b082      	sub	sp, #8
 8035a1c:	af00      	add	r7, sp, #0
 8035a1e:	6078      	str	r0, [r7, #4]
			Callback();
 8035a20:	6878      	ldr	r0, [r7, #4]
 8035a22:	f7ff fed9 	bl	80357d8 <_ZN6HeadIO8Listener8CallbackEv>
		}
 8035a26:	bf00      	nop
 8035a28:	3708      	adds	r7, #8
 8035a2a:	46bd      	mov	sp, r7
 8035a2c:	bd80      	pop	{r7, pc}
	...

08035a30 <_ZN6HeadIO6Sender4SendERKNS_8ResponceE>:
		UART_HandleTypeDef *Uart;
		BufferType Buffer;

		bool Ready = true;
	private:
		void Send(const Responce &responce) {
 8035a30:	b5b0      	push	{r4, r5, r7, lr}
 8035a32:	b084      	sub	sp, #16
 8035a34:	af00      	add	r7, sp, #0
 8035a36:	6078      	str	r0, [r7, #4]
 8035a38:	6039      	str	r1, [r7, #0]
			assert(Ready);
 8035a3a:	687b      	ldr	r3, [r7, #4]
 8035a3c:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 8035a40:	2b00      	cmp	r3, #0
 8035a42:	d105      	bne.n	8035a50 <_ZN6HeadIO6Sender4SendERKNS_8ResponceE+0x20>
 8035a44:	4b39      	ldr	r3, [pc, #228]	; (8035b2c <_ZN6HeadIO6Sender4SendERKNS_8ResponceE+0xfc>)
 8035a46:	4a3a      	ldr	r2, [pc, #232]	; (8035b30 <_ZN6HeadIO6Sender4SendERKNS_8ResponceE+0x100>)
 8035a48:	21a4      	movs	r1, #164	; 0xa4
 8035a4a:	483a      	ldr	r0, [pc, #232]	; (8035b34 <_ZN6HeadIO6Sender4SendERKNS_8ResponceE+0x104>)
 8035a4c:	f006 f8a2 	bl	803bb94 <__assert_func>
			Ready = false;
 8035a50:	687b      	ldr	r3, [r7, #4]
 8035a52:	2200      	movs	r2, #0
 8035a54:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518

			size_t bufSize = responce.Size + 5;
 8035a58:	683b      	ldr	r3, [r7, #0]
 8035a5a:	781b      	ldrb	r3, [r3, #0]
 8035a5c:	3305      	adds	r3, #5
 8035a5e:	60fb      	str	r3, [r7, #12]

			Buffer[0] = SOM1Val;
 8035a60:	687b      	ldr	r3, [r7, #4]
 8035a62:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8035a66:	2100      	movs	r1, #0
 8035a68:	4618      	mov	r0, r3
 8035a6a:	f001 fcd1 	bl	8037410 <_ZNSt5arrayIhLj256EEixEj>
 8035a6e:	4603      	mov	r3, r0
 8035a70:	22ff      	movs	r2, #255	; 0xff
 8035a72:	701a      	strb	r2, [r3, #0]
			Buffer[1] = SOM2Val;
 8035a74:	687b      	ldr	r3, [r7, #4]
 8035a76:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8035a7a:	2101      	movs	r1, #1
 8035a7c:	4618      	mov	r0, r3
 8035a7e:	f001 fcc7 	bl	8037410 <_ZNSt5arrayIhLj256EEixEj>
 8035a82:	4603      	mov	r3, r0
 8035a84:	22aa      	movs	r2, #170	; 0xaa
 8035a86:	701a      	strb	r2, [r3, #0]
			Buffer[2] = responce.Error;
 8035a88:	687b      	ldr	r3, [r7, #4]
 8035a8a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8035a8e:	2102      	movs	r1, #2
 8035a90:	4618      	mov	r0, r3
 8035a92:	f001 fcbd 	bl	8037410 <_ZNSt5arrayIhLj256EEixEj>
 8035a96:	4602      	mov	r2, r0
 8035a98:	683b      	ldr	r3, [r7, #0]
 8035a9a:	785b      	ldrb	r3, [r3, #1]
 8035a9c:	7013      	strb	r3, [r2, #0]
			Buffer[3] = responce.Size;
 8035a9e:	687b      	ldr	r3, [r7, #4]
 8035aa0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8035aa4:	2103      	movs	r1, #3
 8035aa6:	4618      	mov	r0, r3
 8035aa8:	f001 fcb2 	bl	8037410 <_ZNSt5arrayIhLj256EEixEj>
 8035aac:	4602      	mov	r2, r0
 8035aae:	683b      	ldr	r3, [r7, #0]
 8035ab0:	781b      	ldrb	r3, [r3, #0]
 8035ab2:	7013      	strb	r3, [r2, #0]

			memcpy(&Buffer[4], responce.Data.data(), responce.Size);
 8035ab4:	687b      	ldr	r3, [r7, #4]
 8035ab6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8035aba:	2104      	movs	r1, #4
 8035abc:	4618      	mov	r0, r3
 8035abe:	f001 fca7 	bl	8037410 <_ZNSt5arrayIhLj256EEixEj>
 8035ac2:	4604      	mov	r4, r0
 8035ac4:	683b      	ldr	r3, [r7, #0]
 8035ac6:	3302      	adds	r3, #2
 8035ac8:	4618      	mov	r0, r3
 8035aca:	f001 fcb0 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 8035ace:	4601      	mov	r1, r0
 8035ad0:	683b      	ldr	r3, [r7, #0]
 8035ad2:	781b      	ldrb	r3, [r3, #0]
 8035ad4:	461a      	mov	r2, r3
 8035ad6:	4620      	mov	r0, r4
 8035ad8:	f006 f8d6 	bl	803bc88 <memcpy>

			Buffer[bufSize - 1] = SOM3Val;
 8035adc:	687b      	ldr	r3, [r7, #4]
 8035ade:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8035ae2:	68fb      	ldr	r3, [r7, #12]
 8035ae4:	3b01      	subs	r3, #1
 8035ae6:	4619      	mov	r1, r3
 8035ae8:	4610      	mov	r0, r2
 8035aea:	f001 fc91 	bl	8037410 <_ZNSt5arrayIhLj256EEixEj>
 8035aee:	4603      	mov	r3, r0
 8035af0:	22af      	movs	r2, #175	; 0xaf
 8035af2:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit_IT(Uart, Buffer.data(), Buffer.size());
 8035af4:	687b      	ldr	r3, [r7, #4]
 8035af6:	f8d3 4414 	ldr.w	r4, [r3, #1044]	; 0x414
 8035afa:	687b      	ldr	r3, [r7, #4]
 8035afc:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8035b00:	4618      	mov	r0, r3
 8035b02:	f001 fbe8 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8035b06:	4605      	mov	r5, r0
 8035b08:	687b      	ldr	r3, [r7, #4]
 8035b0a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8035b0e:	4618      	mov	r0, r3
 8035b10:	f001 fc9a 	bl	8037448 <_ZNKSt5arrayIhLj256EE4sizeEv>
 8035b14:	4603      	mov	r3, r0
 8035b16:	b29b      	uxth	r3, r3
 8035b18:	461a      	mov	r2, r3
 8035b1a:	4629      	mov	r1, r5
 8035b1c:	4620      	mov	r0, r4
 8035b1e:	f7f6 fd73 	bl	802c608 <HAL_UART_Transmit_IT>
		}
 8035b22:	bf00      	nop
 8035b24:	3710      	adds	r7, #16
 8035b26:	46bd      	mov	sp, r7
 8035b28:	bdb0      	pop	{r4, r5, r7, pc}
 8035b2a:	bf00      	nop
 8035b2c:	0803cff0 	.word	0x0803cff0
 8035b30:	0803cff8 	.word	0x0803cff8
 8035b34:	0803cf50 	.word	0x0803cf50

08035b38 <_ZN6HeadIO6Sender8CallbackEv>:

		void Callback() {
 8035b38:	b480      	push	{r7}
 8035b3a:	b083      	sub	sp, #12
 8035b3c:	af00      	add	r7, sp, #0
 8035b3e:	6078      	str	r0, [r7, #4]
			Ready = true;
 8035b40:	687b      	ldr	r3, [r7, #4]
 8035b42:	2201      	movs	r2, #1
 8035b44:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
		}
 8035b48:	bf00      	nop
 8035b4a:	370c      	adds	r7, #12
 8035b4c:	46bd      	mov	sp, r7
 8035b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035b52:	4770      	bx	lr

08035b54 <_ZN10FixedQueueIN6HeadIO8ResponceELj4EEC1Ev>:
 8035b54:	b480      	push	{r7}
 8035b56:	b083      	sub	sp, #12
 8035b58:	af00      	add	r7, sp, #0
 8035b5a:	6078      	str	r0, [r7, #4]
 8035b5c:	687b      	ldr	r3, [r7, #4]
 8035b5e:	2200      	movs	r2, #0
 8035b60:	601a      	str	r2, [r3, #0]
 8035b62:	687b      	ldr	r3, [r7, #4]
 8035b64:	2200      	movs	r2, #0
 8035b66:	605a      	str	r2, [r3, #4]
 8035b68:	687b      	ldr	r3, [r7, #4]
 8035b6a:	2200      	movs	r2, #0
 8035b6c:	609a      	str	r2, [r3, #8]
 8035b6e:	687b      	ldr	r3, [r7, #4]
 8035b70:	4618      	mov	r0, r3
 8035b72:	370c      	adds	r7, #12
 8035b74:	46bd      	mov	sp, r7
 8035b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035b7a:	4770      	bx	lr

08035b7c <_ZN6HeadIO6SenderC1EP20__UART_HandleTypeDef>:

	public:
		explicit Sender(UART_HandleTypeDef *uart) :
 8035b7c:	b580      	push	{r7, lr}
 8035b7e:	b082      	sub	sp, #8
 8035b80:	af00      	add	r7, sp, #0
 8035b82:	6078      	str	r0, [r7, #4]
 8035b84:	6039      	str	r1, [r7, #0]
				Uart(uart) {
 8035b86:	687b      	ldr	r3, [r7, #4]
 8035b88:	4618      	mov	r0, r3
 8035b8a:	f7ff ffe3 	bl	8035b54 <_ZN10FixedQueueIN6HeadIO8ResponceELj4EEC1Ev>
 8035b8e:	687b      	ldr	r3, [r7, #4]
 8035b90:	683a      	ldr	r2, [r7, #0]
 8035b92:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8035b96:	687b      	ldr	r3, [r7, #4]
 8035b98:	2201      	movs	r2, #1
 8035b9a:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
			assert(uart);
 8035b9e:	683b      	ldr	r3, [r7, #0]
 8035ba0:	2b00      	cmp	r3, #0
 8035ba2:	d105      	bne.n	8035bb0 <_ZN6HeadIO6SenderC1EP20__UART_HandleTypeDef+0x34>
 8035ba4:	4b05      	ldr	r3, [pc, #20]	; (8035bbc <_ZN6HeadIO6SenderC1EP20__UART_HandleTypeDef+0x40>)
 8035ba6:	4a06      	ldr	r2, [pc, #24]	; (8035bc0 <_ZN6HeadIO6SenderC1EP20__UART_HandleTypeDef+0x44>)
 8035ba8:	21bc      	movs	r1, #188	; 0xbc
 8035baa:	4806      	ldr	r0, [pc, #24]	; (8035bc4 <_ZN6HeadIO6SenderC1EP20__UART_HandleTypeDef+0x48>)
 8035bac:	f005 fff2 	bl	803bb94 <__assert_func>
		}
 8035bb0:	687b      	ldr	r3, [r7, #4]
 8035bb2:	4618      	mov	r0, r3
 8035bb4:	3708      	adds	r7, #8
 8035bb6:	46bd      	mov	sp, r7
 8035bb8:	bd80      	pop	{r7, pc}
 8035bba:	bf00      	nop
 8035bbc:	0803ccc0 	.word	0x0803ccc0
 8035bc0:	0803d02c 	.word	0x0803d02c
 8035bc4:	0803cf50 	.word	0x0803cf50

08035bc8 <_ZN6HeadIO6Sender11AddResponceERKNS_8ResponceE>:

		void AddResponce(const Responce &responce) {
 8035bc8:	b580      	push	{r7, lr}
 8035bca:	b082      	sub	sp, #8
 8035bcc:	af00      	add	r7, sp, #0
 8035bce:	6078      	str	r0, [r7, #4]
 8035bd0:	6039      	str	r1, [r7, #0]
			Responces.Push(responce);
 8035bd2:	687b      	ldr	r3, [r7, #4]
 8035bd4:	6839      	ldr	r1, [r7, #0]
 8035bd6:	4618      	mov	r0, r3
 8035bd8:	f001 fc42 	bl	8037460 <_ZN10FixedQueueIN6HeadIO8ResponceELj4EE4PushERKS1_>
		}
 8035bdc:	bf00      	nop
 8035bde:	3708      	adds	r7, #8
 8035be0:	46bd      	mov	sp, r7
 8035be2:	bd80      	pop	{r7, pc}

08035be4 <_ZN6HeadIO6Sender10CheckTimerEv>:

		void CheckTimer() {
 8035be4:	b580      	push	{r7, lr}
 8035be6:	b082      	sub	sp, #8
 8035be8:	af00      	add	r7, sp, #0
 8035bea:	6078      	str	r0, [r7, #4]
			if (Responces.Empty())
 8035bec:	687b      	ldr	r3, [r7, #4]
 8035bee:	4618      	mov	r0, r3
 8035bf0:	f001 fc6e 	bl	80374d0 <_ZNK10FixedQueueIN6HeadIO8ResponceELj4EE5EmptyEv>
 8035bf4:	4603      	mov	r3, r0
 8035bf6:	2b00      	cmp	r3, #0
 8035bf8:	d115      	bne.n	8035c26 <_ZN6HeadIO6Sender10CheckTimerEv+0x42>
				return;
			if (!Ready)
 8035bfa:	687b      	ldr	r3, [r7, #4]
 8035bfc:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 8035c00:	f083 0301 	eor.w	r3, r3, #1
 8035c04:	b2db      	uxtb	r3, r3
 8035c06:	2b00      	cmp	r3, #0
 8035c08:	d10f      	bne.n	8035c2a <_ZN6HeadIO6Sender10CheckTimerEv+0x46>
				return;

			Send(Responces.Front());
 8035c0a:	687b      	ldr	r3, [r7, #4]
 8035c0c:	4618      	mov	r0, r3
 8035c0e:	f001 fc71 	bl	80374f4 <_ZNK10FixedQueueIN6HeadIO8ResponceELj4EE5FrontEv>
 8035c12:	4603      	mov	r3, r0
 8035c14:	4619      	mov	r1, r3
 8035c16:	6878      	ldr	r0, [r7, #4]
 8035c18:	f7ff ff0a 	bl	8035a30 <_ZN6HeadIO6Sender4SendERKNS_8ResponceE>
			Responces.Pop();
 8035c1c:	687b      	ldr	r3, [r7, #4]
 8035c1e:	4618      	mov	r0, r3
 8035c20:	f001 fc8a 	bl	8037538 <_ZN10FixedQueueIN6HeadIO8ResponceELj4EE3PopEv>
 8035c24:	e002      	b.n	8035c2c <_ZN6HeadIO6Sender10CheckTimerEv+0x48>
				return;
 8035c26:	bf00      	nop
 8035c28:	e000      	b.n	8035c2c <_ZN6HeadIO6Sender10CheckTimerEv+0x48>
				return;
 8035c2a:	bf00      	nop
		}
 8035c2c:	3708      	adds	r7, #8
 8035c2e:	46bd      	mov	sp, r7
 8035c30:	bd80      	pop	{r7, pc}

08035c32 <_ZN6HeadIO6Sender14TxCpltCallbackEv>:

		void TxCpltCallback() {
 8035c32:	b580      	push	{r7, lr}
 8035c34:	b082      	sub	sp, #8
 8035c36:	af00      	add	r7, sp, #0
 8035c38:	6078      	str	r0, [r7, #4]
			Callback();
 8035c3a:	6878      	ldr	r0, [r7, #4]
 8035c3c:	f7ff ff7c 	bl	8035b38 <_ZN6HeadIO6Sender8CallbackEv>
		}
 8035c40:	bf00      	nop
 8035c42:	3708      	adds	r7, #8
 8035c44:	46bd      	mov	sp, r7
 8035c46:	bd80      	pop	{r7, pc}

08035c48 <_ZN6HeadIOC1EP20__UART_HandleTypeDef>:
	};
public:
	Listener Input;
	Sender Output;

	explicit HeadIO(UART_HandleTypeDef *uart) :
 8035c48:	b580      	push	{r7, lr}
 8035c4a:	b082      	sub	sp, #8
 8035c4c:	af00      	add	r7, sp, #0
 8035c4e:	6078      	str	r0, [r7, #4]
 8035c50:	6039      	str	r1, [r7, #0]
			Input { uart }, Output { uart } {
 8035c52:	687b      	ldr	r3, [r7, #4]
 8035c54:	6839      	ldr	r1, [r7, #0]
 8035c56:	4618      	mov	r0, r3
 8035c58:	f7ff fe72 	bl	8035940 <_ZN6HeadIO8ListenerC1EP20__UART_HandleTypeDef>
 8035c5c:	687b      	ldr	r3, [r7, #4]
 8035c5e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8035c62:	6839      	ldr	r1, [r7, #0]
 8035c64:	4618      	mov	r0, r3
 8035c66:	f7ff ff89 	bl	8035b7c <_ZN6HeadIO6SenderC1EP20__UART_HandleTypeDef>
	}
 8035c6a:	687b      	ldr	r3, [r7, #4]
 8035c6c:	4618      	mov	r0, r3
 8035c6e:	3708      	adds	r7, #8
 8035c70:	46bd      	mov	sp, r7
 8035c72:	bd80      	pop	{r7, pc}

08035c74 <_ZN9BodyQueue8CallbackEv>:
	size_t Period;
	size_t Counter = 0;

	bool Ready = true;
private:
	void Callback() {
 8035c74:	b480      	push	{r7}
 8035c76:	b083      	sub	sp, #12
 8035c78:	af00      	add	r7, sp, #0
 8035c7a:	6078      	str	r0, [r7, #4]
		Counter = (Counter + 1) % Period;
 8035c7c:	687b      	ldr	r3, [r7, #4]
 8035c7e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8035c82:	f8d3 37f8 	ldr.w	r3, [r3, #2040]	; 0x7f8
 8035c86:	3301      	adds	r3, #1
 8035c88:	687a      	ldr	r2, [r7, #4]
 8035c8a:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8035c8e:	f8d2 27f4 	ldr.w	r2, [r2, #2036]	; 0x7f4
 8035c92:	fbb3 f1f2 	udiv	r1, r3, r2
 8035c96:	fb01 f202 	mul.w	r2, r1, r2
 8035c9a:	1a9b      	subs	r3, r3, r2
 8035c9c:	687a      	ldr	r2, [r7, #4]
 8035c9e:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8035ca2:	f8c2 37f8 	str.w	r3, [r2, #2040]	; 0x7f8
		if (Counter == 0)
 8035ca6:	687b      	ldr	r3, [r7, #4]
 8035ca8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8035cac:	f8d3 37f8 	ldr.w	r3, [r3, #2040]	; 0x7f8
 8035cb0:	2b00      	cmp	r3, #0
 8035cb2:	d105      	bne.n	8035cc0 <_ZN9BodyQueue8CallbackEv+0x4c>
			Ready = true;
 8035cb4:	687b      	ldr	r3, [r7, #4]
 8035cb6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8035cba:	2201      	movs	r2, #1
 8035cbc:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
	}
 8035cc0:	bf00      	nop
 8035cc2:	370c      	adds	r7, #12
 8035cc4:	46bd      	mov	sp, r7
 8035cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035cca:	4770      	bx	lr

08035ccc <_ZN10FixedQueueIN9BodyQueue7RequestELj500EEC1Ev>:
 8035ccc:	b480      	push	{r7}
 8035cce:	b083      	sub	sp, #12
 8035cd0:	af00      	add	r7, sp, #0
 8035cd2:	6078      	str	r0, [r7, #4]
 8035cd4:	687b      	ldr	r3, [r7, #4]
 8035cd6:	2200      	movs	r2, #0
 8035cd8:	601a      	str	r2, [r3, #0]
 8035cda:	687b      	ldr	r3, [r7, #4]
 8035cdc:	2200      	movs	r2, #0
 8035cde:	605a      	str	r2, [r3, #4]
 8035ce0:	687b      	ldr	r3, [r7, #4]
 8035ce2:	2200      	movs	r2, #0
 8035ce4:	609a      	str	r2, [r3, #8]
 8035ce6:	687b      	ldr	r3, [r7, #4]
 8035ce8:	4618      	mov	r0, r3
 8035cea:	370c      	adds	r7, #12
 8035cec:	46bd      	mov	sp, r7
 8035cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035cf2:	4770      	bx	lr

08035cf4 <_ZN9BodyQueueC1Ej>:

public:
	BodyQueue(size_t period) :
 8035cf4:	b580      	push	{r7, lr}
 8035cf6:	b082      	sub	sp, #8
 8035cf8:	af00      	add	r7, sp, #0
 8035cfa:	6078      	str	r0, [r7, #4]
 8035cfc:	6039      	str	r1, [r7, #0]
			Period { period } {
 8035cfe:	687b      	ldr	r3, [r7, #4]
 8035d00:	4618      	mov	r0, r3
 8035d02:	f7ff ffe3 	bl	8035ccc <_ZN10FixedQueueIN9BodyQueue7RequestELj500EEC1Ev>
 8035d06:	687b      	ldr	r3, [r7, #4]
 8035d08:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8035d0c:	461a      	mov	r2, r3
 8035d0e:	683b      	ldr	r3, [r7, #0]
 8035d10:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
 8035d14:	687b      	ldr	r3, [r7, #4]
 8035d16:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8035d1a:	461a      	mov	r2, r3
 8035d1c:	2300      	movs	r3, #0
 8035d1e:	f8c2 37f8 	str.w	r3, [r2, #2040]	; 0x7f8
 8035d22:	687b      	ldr	r3, [r7, #4]
 8035d24:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8035d28:	2201      	movs	r2, #1
 8035d2a:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
		assert(period > 0);
 8035d2e:	683b      	ldr	r3, [r7, #0]
 8035d30:	2b00      	cmp	r3, #0
 8035d32:	d105      	bne.n	8035d40 <_ZN9BodyQueueC1Ej+0x4c>
 8035d34:	4b05      	ldr	r3, [pc, #20]	; (8035d4c <_ZN9BodyQueueC1Ej+0x58>)
 8035d36:	4a06      	ldr	r2, [pc, #24]	; (8035d50 <_ZN9BodyQueueC1Ej+0x5c>)
 8035d38:	211f      	movs	r1, #31
 8035d3a:	4806      	ldr	r0, [pc, #24]	; (8035d54 <_ZN9BodyQueueC1Ej+0x60>)
 8035d3c:	f005 ff2a 	bl	803bb94 <__assert_func>
	}
 8035d40:	687b      	ldr	r3, [r7, #4]
 8035d42:	4618      	mov	r0, r3
 8035d44:	3708      	adds	r7, #8
 8035d46:	46bd      	mov	sp, r7
 8035d48:	bd80      	pop	{r7, pc}
 8035d4a:	bf00      	nop
 8035d4c:	0803d058 	.word	0x0803d058
 8035d50:	0803d064 	.word	0x0803d064
 8035d54:	0803d084 	.word	0x0803d084

08035d58 <_ZNK9BodyQueue7IsReadyEv>:

	bool IsReady() const {
 8035d58:	b580      	push	{r7, lr}
 8035d5a:	b082      	sub	sp, #8
 8035d5c:	af00      	add	r7, sp, #0
 8035d5e:	6078      	str	r0, [r7, #4]
		return !Requests.Empty() && Ready;
 8035d60:	687b      	ldr	r3, [r7, #4]
 8035d62:	4618      	mov	r0, r3
 8035d64:	f001 fc0c 	bl	8037580 <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE5EmptyEv>
 8035d68:	4603      	mov	r3, r0
 8035d6a:	f083 0301 	eor.w	r3, r3, #1
 8035d6e:	b2db      	uxtb	r3, r3
 8035d70:	2b00      	cmp	r3, #0
 8035d72:	d008      	beq.n	8035d86 <_ZNK9BodyQueue7IsReadyEv+0x2e>
 8035d74:	687b      	ldr	r3, [r7, #4]
 8035d76:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8035d7a:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 8035d7e:	2b00      	cmp	r3, #0
 8035d80:	d001      	beq.n	8035d86 <_ZNK9BodyQueue7IsReadyEv+0x2e>
 8035d82:	2301      	movs	r3, #1
 8035d84:	e000      	b.n	8035d88 <_ZNK9BodyQueue7IsReadyEv+0x30>
 8035d86:	2300      	movs	r3, #0
	}
 8035d88:	4618      	mov	r0, r3
 8035d8a:	3708      	adds	r7, #8
 8035d8c:	46bd      	mov	sp, r7
 8035d8e:	bd80      	pop	{r7, pc}

08035d90 <_ZN9BodyQueue10GetRequestEv>:

	Request GetRequest() {
 8035d90:	b580      	push	{r7, lr}
 8035d92:	b082      	sub	sp, #8
 8035d94:	af00      	add	r7, sp, #0
 8035d96:	6078      	str	r0, [r7, #4]
 8035d98:	6039      	str	r1, [r7, #0]
		assert(IsReady());
 8035d9a:	6838      	ldr	r0, [r7, #0]
 8035d9c:	f7ff ffdc 	bl	8035d58 <_ZNK9BodyQueue7IsReadyEv>
 8035da0:	4603      	mov	r3, r0
 8035da2:	2b00      	cmp	r3, #0
 8035da4:	d105      	bne.n	8035db2 <_ZN9BodyQueue10GetRequestEv+0x22>
 8035da6:	4b11      	ldr	r3, [pc, #68]	; (8035dec <_ZN9BodyQueue10GetRequestEv+0x5c>)
 8035da8:	4a11      	ldr	r2, [pc, #68]	; (8035df0 <_ZN9BodyQueue10GetRequestEv+0x60>)
 8035daa:	2127      	movs	r1, #39	; 0x27
 8035dac:	4811      	ldr	r0, [pc, #68]	; (8035df4 <_ZN9BodyQueue10GetRequestEv+0x64>)
 8035dae:	f005 fef1 	bl	803bb94 <__assert_func>
		Request request = Requests.Front();
 8035db2:	683b      	ldr	r3, [r7, #0]
 8035db4:	4618      	mov	r0, r3
 8035db6:	f001 fbf5 	bl	80375a4 <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE5FrontEv>
 8035dba:	4602      	mov	r2, r0
 8035dbc:	687b      	ldr	r3, [r7, #4]
 8035dbe:	4618      	mov	r0, r3
 8035dc0:	4611      	mov	r1, r2
 8035dc2:	f44f 7381 	mov.w	r3, #258	; 0x102
 8035dc6:	461a      	mov	r2, r3
 8035dc8:	f005 ff5e 	bl	803bc88 <memcpy>
		Requests.Pop();
 8035dcc:	683b      	ldr	r3, [r7, #0]
 8035dce:	4618      	mov	r0, r3
 8035dd0:	f001 fc0a 	bl	80375e8 <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE3PopEv>
		Ready = false;
 8035dd4:	683b      	ldr	r3, [r7, #0]
 8035dd6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8035dda:	2200      	movs	r2, #0
 8035ddc:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
		return request;
 8035de0:	bf00      	nop
	}
 8035de2:	6878      	ldr	r0, [r7, #4]
 8035de4:	3708      	adds	r7, #8
 8035de6:	46bd      	mov	sp, r7
 8035de8:	bd80      	pop	{r7, pc}
 8035dea:	bf00      	nop
 8035dec:	0803d0e4 	.word	0x0803d0e4
 8035df0:	0803d0f0 	.word	0x0803d0f0
 8035df4:	0803d084 	.word	0x0803d084

08035df8 <_ZNK9BodyQueue6IsFullEv>:

	bool IsFull() const {
 8035df8:	b580      	push	{r7, lr}
 8035dfa:	b082      	sub	sp, #8
 8035dfc:	af00      	add	r7, sp, #0
 8035dfe:	6078      	str	r0, [r7, #4]
		return Requests.Full();
 8035e00:	687b      	ldr	r3, [r7, #4]
 8035e02:	4618      	mov	r0, r3
 8035e04:	f001 fc1e 	bl	8037644 <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE4FullEv>
 8035e08:	4603      	mov	r3, r0
	}
 8035e0a:	4618      	mov	r0, r3
 8035e0c:	3708      	adds	r7, #8
 8035e0e:	46bd      	mov	sp, r7
 8035e10:	bd80      	pop	{r7, pc}
	...

08035e14 <_ZN9BodyQueue10AddRequestERKNS_7RequestE>:

	void AddRequest(const Request &request) {
 8035e14:	b580      	push	{r7, lr}
 8035e16:	b082      	sub	sp, #8
 8035e18:	af00      	add	r7, sp, #0
 8035e1a:	6078      	str	r0, [r7, #4]
 8035e1c:	6039      	str	r1, [r7, #0]
		assert(!Requests.Full());
 8035e1e:	687b      	ldr	r3, [r7, #4]
 8035e20:	4618      	mov	r0, r3
 8035e22:	f001 fc0f 	bl	8037644 <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE4FullEv>
 8035e26:	4603      	mov	r3, r0
 8035e28:	f083 0301 	eor.w	r3, r3, #1
 8035e2c:	b2db      	uxtb	r3, r3
 8035e2e:	2b00      	cmp	r3, #0
 8035e30:	d105      	bne.n	8035e3e <_ZN9BodyQueue10AddRequestERKNS_7RequestE+0x2a>
 8035e32:	4b07      	ldr	r3, [pc, #28]	; (8035e50 <_ZN9BodyQueue10AddRequestERKNS_7RequestE+0x3c>)
 8035e34:	4a07      	ldr	r2, [pc, #28]	; (8035e54 <_ZN9BodyQueue10AddRequestERKNS_7RequestE+0x40>)
 8035e36:	2133      	movs	r1, #51	; 0x33
 8035e38:	4807      	ldr	r0, [pc, #28]	; (8035e58 <_ZN9BodyQueue10AddRequestERKNS_7RequestE+0x44>)
 8035e3a:	f005 feab 	bl	803bb94 <__assert_func>
		Requests.Push(request);
 8035e3e:	687b      	ldr	r3, [r7, #4]
 8035e40:	6839      	ldr	r1, [r7, #0]
 8035e42:	4618      	mov	r0, r3
 8035e44:	f001 fc10 	bl	8037668 <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE4PushERKS1_>
	}
 8035e48:	bf00      	nop
 8035e4a:	3708      	adds	r7, #8
 8035e4c:	46bd      	mov	sp, r7
 8035e4e:	bd80      	pop	{r7, pc}
 8035e50:	0803d11c 	.word	0x0803d11c
 8035e54:	0803d130 	.word	0x0803d130
 8035e58:	0803d084 	.word	0x0803d084

08035e5c <_ZN9BodyQueue9SetPeriodEj>:

	void SetPeriod(size_t periodMs) {
 8035e5c:	b580      	push	{r7, lr}
 8035e5e:	b082      	sub	sp, #8
 8035e60:	af00      	add	r7, sp, #0
 8035e62:	6078      	str	r0, [r7, #4]
 8035e64:	6039      	str	r1, [r7, #0]
		assert(periodMs > 0);
 8035e66:	683b      	ldr	r3, [r7, #0]
 8035e68:	2b00      	cmp	r3, #0
 8035e6a:	d105      	bne.n	8035e78 <_ZN9BodyQueue9SetPeriodEj+0x1c>
 8035e6c:	4b08      	ldr	r3, [pc, #32]	; (8035e90 <_ZN9BodyQueue9SetPeriodEj+0x34>)
 8035e6e:	4a09      	ldr	r2, [pc, #36]	; (8035e94 <_ZN9BodyQueue9SetPeriodEj+0x38>)
 8035e70:	2138      	movs	r1, #56	; 0x38
 8035e72:	4809      	ldr	r0, [pc, #36]	; (8035e98 <_ZN9BodyQueue9SetPeriodEj+0x3c>)
 8035e74:	f005 fe8e 	bl	803bb94 <__assert_func>
		Period = periodMs;
 8035e78:	687b      	ldr	r3, [r7, #4]
 8035e7a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8035e7e:	461a      	mov	r2, r3
 8035e80:	683b      	ldr	r3, [r7, #0]
 8035e82:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
	}
 8035e86:	bf00      	nop
 8035e88:	3708      	adds	r7, #8
 8035e8a:	46bd      	mov	sp, r7
 8035e8c:	bd80      	pop	{r7, pc}
 8035e8e:	bf00      	nop
 8035e90:	0803d168 	.word	0x0803d168
 8035e94:	0803d178 	.word	0x0803d178
 8035e98:	0803d084 	.word	0x0803d084

08035e9c <_ZNK9BodyQueue7GetSizeEv>:

	size_t GetSize() const {
 8035e9c:	b580      	push	{r7, lr}
 8035e9e:	b082      	sub	sp, #8
 8035ea0:	af00      	add	r7, sp, #0
 8035ea2:	6078      	str	r0, [r7, #4]
		return Requests.GetSize();
 8035ea4:	687b      	ldr	r3, [r7, #4]
 8035ea6:	4618      	mov	r0, r3
 8035ea8:	f001 fc20 	bl	80376ec <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE7GetSizeEv>
 8035eac:	4603      	mov	r3, r0
	}
 8035eae:	4618      	mov	r0, r3
 8035eb0:	3708      	adds	r7, #8
 8035eb2:	46bd      	mov	sp, r7
 8035eb4:	bd80      	pop	{r7, pc}

08035eb6 <_ZNK9BodyQueue11GetCapacityEv>:

	size_t GetCapacity() const {
 8035eb6:	b480      	push	{r7}
 8035eb8:	b083      	sub	sp, #12
 8035eba:	af00      	add	r7, sp, #0
 8035ebc:	6078      	str	r0, [r7, #4]
		return BodyQueueMaxSize;
 8035ebe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	}
 8035ec2:	4618      	mov	r0, r3
 8035ec4:	370c      	adds	r7, #12
 8035ec6:	46bd      	mov	sp, r7
 8035ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035ecc:	4770      	bx	lr

08035ece <_ZN9BodyQueue11TimCallbackEv>:

	void TimCallback() {
 8035ece:	b580      	push	{r7, lr}
 8035ed0:	b082      	sub	sp, #8
 8035ed2:	af00      	add	r7, sp, #0
 8035ed4:	6078      	str	r0, [r7, #4]
		Callback();
 8035ed6:	6878      	ldr	r0, [r7, #4]
 8035ed8:	f7ff fecc 	bl	8035c74 <_ZN9BodyQueue8CallbackEv>
	}
 8035edc:	bf00      	nop
 8035ede:	3708      	adds	r7, #8
 8035ee0:	46bd      	mov	sp, r7
 8035ee2:	bd80      	pop	{r7, pc}

08035ee4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8035ee4:	b480      	push	{r7}
 8035ee6:	b083      	sub	sp, #12
 8035ee8:	af00      	add	r7, sp, #0
 8035eea:	6078      	str	r0, [r7, #4]
 8035eec:	6039      	str	r1, [r7, #0]
 8035eee:	683b      	ldr	r3, [r7, #0]
 8035ef0:	4618      	mov	r0, r3
 8035ef2:	370c      	adds	r7, #12
 8035ef4:	46bd      	mov	sp, r7
 8035ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035efa:	4770      	bx	lr

08035efc <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8035efc:	b480      	push	{r7}
 8035efe:	b083      	sub	sp, #12
 8035f00:	af00      	add	r7, sp, #0
 8035f02:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8035f04:	687b      	ldr	r3, [r7, #4]
 8035f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8035f0a:	d205      	bcs.n	8035f18 <_ZSt16__deque_buf_sizej+0x1c>
 8035f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8035f10:	687b      	ldr	r3, [r7, #4]
 8035f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8035f16:	e000      	b.n	8035f1a <_ZSt16__deque_buf_sizej+0x1e>
 8035f18:	2301      	movs	r3, #1
 8035f1a:	4618      	mov	r0, r3
 8035f1c:	370c      	adds	r7, #12
 8035f1e:	46bd      	mov	sp, r7
 8035f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035f24:	4770      	bx	lr

08035f26 <_ZN12StrobeFilter8CallbackEv>:
	size_t CurrentSeq = 0;

	const IMUDevice *IMU;

private:
	void Callback() {
 8035f26:	b580      	push	{r7, lr}
 8035f28:	b086      	sub	sp, #24
 8035f2a:	af00      	add	r7, sp, #0
 8035f2c:	6078      	str	r0, [r7, #4]
		uint32_t currentTime = HAL_GetTick();
 8035f2e:	f7ec f887 	bl	8022040 <HAL_GetTick>
 8035f32:	6178      	str	r0, [r7, #20]

		switch (State) {
 8035f34:	687b      	ldr	r3, [r7, #4]
 8035f36:	689b      	ldr	r3, [r3, #8]
 8035f38:	2b00      	cmp	r3, #0
 8035f3a:	d050      	beq.n	8035fde <_ZN12StrobeFilter8CallbackEv+0xb8>
 8035f3c:	2b01      	cmp	r3, #1
 8035f3e:	d156      	bne.n	8035fee <_ZN12StrobeFilter8CallbackEv+0xc8>
		case PulseState::Down: {
			State = PulseState::Up;
 8035f40:	687b      	ldr	r3, [r7, #4]
 8035f42:	2200      	movs	r2, #0
 8035f44:	609a      	str	r2, [r3, #8]

			uint32_t startTime = RiseTime;
 8035f46:	687b      	ldr	r3, [r7, #4]
 8035f48:	685b      	ldr	r3, [r3, #4]
 8035f4a:	613b      	str	r3, [r7, #16]
			RiseTime = currentTime;
 8035f4c:	687b      	ldr	r3, [r7, #4]
 8035f4e:	697a      	ldr	r2, [r7, #20]
 8035f50:	605a      	str	r2, [r3, #4]

			if (!FallTime || !RiseTime)
 8035f52:	687b      	ldr	r3, [r7, #4]
 8035f54:	681b      	ldr	r3, [r3, #0]
 8035f56:	2b00      	cmp	r3, #0
 8035f58:	d048      	beq.n	8035fec <_ZN12StrobeFilter8CallbackEv+0xc6>
 8035f5a:	687b      	ldr	r3, [r7, #4]
 8035f5c:	685b      	ldr	r3, [r3, #4]
 8035f5e:	2b00      	cmp	r3, #0
 8035f60:	d044      	beq.n	8035fec <_ZN12StrobeFilter8CallbackEv+0xc6>
				return;

			uint32_t duration = currentTime - startTime;
 8035f62:	697a      	ldr	r2, [r7, #20]
 8035f64:	693b      	ldr	r3, [r7, #16]
 8035f66:	1ad3      	subs	r3, r2, r3
 8035f68:	60fb      	str	r3, [r7, #12]

			StrobeDuration += duration;
 8035f6a:	687b      	ldr	r3, [r7, #4]
 8035f6c:	ed93 7a05 	vldr	s14, [r3, #20]
 8035f70:	68fb      	ldr	r3, [r7, #12]
 8035f72:	ee07 3a90 	vmov	s15, r3
 8035f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8035f7e:	687b      	ldr	r3, [r7, #4]
 8035f80:	edc3 7a05 	vstr	s15, [r3, #20]
			StrobeDuration /= 2;
 8035f84:	687b      	ldr	r3, [r7, #4]
 8035f86:	ed93 7a05 	vldr	s14, [r3, #20]
 8035f8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8035f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8035f92:	687b      	ldr	r3, [r7, #4]
 8035f94:	edc3 7a05 	vstr	s15, [r3, #20]

			if (std::abs(long(duration - TargetDuration))
 8035f98:	687b      	ldr	r3, [r7, #4]
 8035f9a:	691b      	ldr	r3, [r3, #16]
 8035f9c:	68fa      	ldr	r2, [r7, #12]
 8035f9e:	1ad3      	subs	r3, r2, r3
 8035fa0:	4618      	mov	r0, r3
 8035fa2:	f7fe ff95 	bl	8034ed0 <_ZSt3absl>
 8035fa6:	4602      	mov	r2, r0
					< long(DurationThreshold))
 8035fa8:	687b      	ldr	r3, [r7, #4]
 8035faa:	68db      	ldr	r3, [r3, #12]
 8035fac:	429a      	cmp	r2, r3
 8035fae:	bfb4      	ite	lt
 8035fb0:	2301      	movlt	r3, #1
 8035fb2:	2300      	movge	r3, #0
 8035fb4:	b2db      	uxtb	r3, r3
			if (std::abs(long(duration - TargetDuration))
 8035fb6:	2b00      	cmp	r3, #0
 8035fb8:	d008      	beq.n	8035fcc <_ZN12StrobeFilter8CallbackEv+0xa6>
				StrobeQueue.push(CurrentSeq);
 8035fba:	687b      	ldr	r3, [r7, #4]
 8035fbc:	f103 0218 	add.w	r2, r3, #24
 8035fc0:	687b      	ldr	r3, [r7, #4]
 8035fc2:	3340      	adds	r3, #64	; 0x40
 8035fc4:	4619      	mov	r1, r3
 8035fc6:	4610      	mov	r0, r2
 8035fc8:	f001 fb9c 	bl	8037704 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>

			CurrentSeq = IMU->GetSeq();
 8035fcc:	687b      	ldr	r3, [r7, #4]
 8035fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8035fd0:	4618      	mov	r0, r3
 8035fd2:	f7ff fb69 	bl	80356a8 <_ZNK9IMUDevice6GetSeqEv>
 8035fd6:	4602      	mov	r2, r0
 8035fd8:	687b      	ldr	r3, [r7, #4]
 8035fda:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8035fdc:	e007      	b.n	8035fee <_ZN12StrobeFilter8CallbackEv+0xc8>
		}
		case PulseState::Up:
			State = PulseState::Down;
 8035fde:	687b      	ldr	r3, [r7, #4]
 8035fe0:	2201      	movs	r2, #1
 8035fe2:	609a      	str	r2, [r3, #8]
			FallTime = currentTime;
 8035fe4:	687b      	ldr	r3, [r7, #4]
 8035fe6:	697a      	ldr	r2, [r7, #20]
 8035fe8:	601a      	str	r2, [r3, #0]
			break;
 8035fea:	e000      	b.n	8035fee <_ZN12StrobeFilter8CallbackEv+0xc8>
				return;
 8035fec:	bf00      	nop
		}
	}
 8035fee:	3718      	adds	r7, #24
 8035ff0:	46bd      	mov	sp, r7
 8035ff2:	bd80      	pop	{r7, pc}

08035ff4 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8035ff4:	b580      	push	{r7, lr}
 8035ff6:	b082      	sub	sp, #8
 8035ff8:	af00      	add	r7, sp, #0
 8035ffa:	6078      	str	r0, [r7, #4]
 8035ffc:	687b      	ldr	r3, [r7, #4]
 8035ffe:	4618      	mov	r0, r3
 8036000:	f001 fbaf 	bl	8037762 <_ZNSt5dequeIjSaIjEED1Ev>
 8036004:	687b      	ldr	r3, [r7, #4]
 8036006:	4618      	mov	r0, r3
 8036008:	3708      	adds	r7, #8
 803600a:	46bd      	mov	sp, r7
 803600c:	bd80      	pop	{r7, pc}
	...

08036010 <_ZN12StrobeFilterC1EhhPK9IMUDevice>:

public:
	StrobeFilter(uint8_t targetDuration, uint8_t durationThreshold,
 8036010:	b580      	push	{r7, lr}
 8036012:	b084      	sub	sp, #16
 8036014:	af00      	add	r7, sp, #0
 8036016:	60f8      	str	r0, [r7, #12]
 8036018:	607b      	str	r3, [r7, #4]
 803601a:	460b      	mov	r3, r1
 803601c:	72fb      	strb	r3, [r7, #11]
 803601e:	4613      	mov	r3, r2
 8036020:	72bb      	strb	r3, [r7, #10]
			const IMUDevice *imu) :
			IMU { imu } {
 8036022:	68fb      	ldr	r3, [r7, #12]
 8036024:	2200      	movs	r2, #0
 8036026:	601a      	str	r2, [r3, #0]
 8036028:	68fb      	ldr	r3, [r7, #12]
 803602a:	2200      	movs	r2, #0
 803602c:	605a      	str	r2, [r3, #4]
 803602e:	68fb      	ldr	r3, [r7, #12]
 8036030:	2201      	movs	r2, #1
 8036032:	609a      	str	r2, [r3, #8]
 8036034:	68fb      	ldr	r3, [r7, #12]
 8036036:	f04f 0200 	mov.w	r2, #0
 803603a:	615a      	str	r2, [r3, #20]
 803603c:	68fb      	ldr	r3, [r7, #12]
 803603e:	3318      	adds	r3, #24
 8036040:	4618      	mov	r0, r3
 8036042:	f001 fb7a 	bl	803773a <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 8036046:	68fb      	ldr	r3, [r7, #12]
 8036048:	2200      	movs	r2, #0
 803604a:	641a      	str	r2, [r3, #64]	; 0x40
 803604c:	68fb      	ldr	r3, [r7, #12]
 803604e:	687a      	ldr	r2, [r7, #4]
 8036050:	645a      	str	r2, [r3, #68]	; 0x44
		assert(imu);
 8036052:	687b      	ldr	r3, [r7, #4]
 8036054:	2b00      	cmp	r3, #0
 8036056:	d105      	bne.n	8036064 <_ZN12StrobeFilterC1EhhPK9IMUDevice+0x54>
 8036058:	4b08      	ldr	r3, [pc, #32]	; (803607c <_ZN12StrobeFilterC1EhhPK9IMUDevice+0x6c>)
 803605a:	4a09      	ldr	r2, [pc, #36]	; (8036080 <_ZN12StrobeFilterC1EhhPK9IMUDevice+0x70>)
 803605c:	2142      	movs	r1, #66	; 0x42
 803605e:	4809      	ldr	r0, [pc, #36]	; (8036084 <_ZN12StrobeFilterC1EhhPK9IMUDevice+0x74>)
 8036060:	f005 fd98 	bl	803bb94 <__assert_func>
		Configure(targetDuration, durationThreshold);
 8036064:	7aba      	ldrb	r2, [r7, #10]
 8036066:	7afb      	ldrb	r3, [r7, #11]
 8036068:	4619      	mov	r1, r3
 803606a:	68f8      	ldr	r0, [r7, #12]
 803606c:	f000 f80c 	bl	8036088 <_ZN12StrobeFilter9ConfigureEhh>
	}
 8036070:	68fb      	ldr	r3, [r7, #12]
 8036072:	4618      	mov	r0, r3
 8036074:	3710      	adds	r7, #16
 8036076:	46bd      	mov	sp, r7
 8036078:	bd80      	pop	{r7, pc}
 803607a:	bf00      	nop
 803607c:	0803d19c 	.word	0x0803d19c
 8036080:	0803d1a0 	.word	0x0803d1a0
 8036084:	0803d1e0 	.word	0x0803d1e0

08036088 <_ZN12StrobeFilter9ConfigureEhh>:

	void Configure(uint8_t targetDuration, uint8_t durationThreshold) {
 8036088:	b480      	push	{r7}
 803608a:	b083      	sub	sp, #12
 803608c:	af00      	add	r7, sp, #0
 803608e:	6078      	str	r0, [r7, #4]
 8036090:	460b      	mov	r3, r1
 8036092:	70fb      	strb	r3, [r7, #3]
 8036094:	4613      	mov	r3, r2
 8036096:	70bb      	strb	r3, [r7, #2]
		TargetDuration = targetDuration;
 8036098:	78fa      	ldrb	r2, [r7, #3]
 803609a:	687b      	ldr	r3, [r7, #4]
 803609c:	611a      	str	r2, [r3, #16]
		DurationThreshold = durationThreshold;
 803609e:	78ba      	ldrb	r2, [r7, #2]
 80360a0:	687b      	ldr	r3, [r7, #4]
 80360a2:	60da      	str	r2, [r3, #12]
	}
 80360a4:	bf00      	nop
 80360a6:	370c      	adds	r7, #12
 80360a8:	46bd      	mov	sp, r7
 80360aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80360ae:	4770      	bx	lr

080360b0 <_ZNK12StrobeFilter17GetStrobeDurationEv>:

	float GetStrobeDuration() const {
 80360b0:	b480      	push	{r7}
 80360b2:	b083      	sub	sp, #12
 80360b4:	af00      	add	r7, sp, #0
 80360b6:	6078      	str	r0, [r7, #4]
		return StrobeDuration;
 80360b8:	687b      	ldr	r3, [r7, #4]
 80360ba:	695b      	ldr	r3, [r3, #20]
 80360bc:	ee07 3a90 	vmov	s15, r3
	}
 80360c0:	eeb0 0a67 	vmov.f32	s0, s15
 80360c4:	370c      	adds	r7, #12
 80360c6:	46bd      	mov	sp, r7
 80360c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80360cc:	4770      	bx	lr

080360ce <_ZNK12StrobeFilter9HasStrobeEv>:

	bool HasStrobe() const {
 80360ce:	b580      	push	{r7, lr}
 80360d0:	b082      	sub	sp, #8
 80360d2:	af00      	add	r7, sp, #0
 80360d4:	6078      	str	r0, [r7, #4]
		return !StrobeQueue.empty();
 80360d6:	687b      	ldr	r3, [r7, #4]
 80360d8:	3318      	adds	r3, #24
 80360da:	4618      	mov	r0, r3
 80360dc:	f001 fb66 	bl	80377ac <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>
 80360e0:	4603      	mov	r3, r0
 80360e2:	f083 0301 	eor.w	r3, r3, #1
 80360e6:	b2db      	uxtb	r3, r3
	}
 80360e8:	4618      	mov	r0, r3
 80360ea:	3708      	adds	r7, #8
 80360ec:	46bd      	mov	sp, r7
 80360ee:	bd80      	pop	{r7, pc}

080360f0 <_ZN12StrobeFilter9GetStrobeEv>:

	size_t GetStrobe() {
 80360f0:	b580      	push	{r7, lr}
 80360f2:	b084      	sub	sp, #16
 80360f4:	af00      	add	r7, sp, #0
 80360f6:	6078      	str	r0, [r7, #4]
		assert(HasStrobe());
 80360f8:	6878      	ldr	r0, [r7, #4]
 80360fa:	f7ff ffe8 	bl	80360ce <_ZNK12StrobeFilter9HasStrobeEv>
 80360fe:	4603      	mov	r3, r0
 8036100:	2b00      	cmp	r3, #0
 8036102:	d105      	bne.n	8036110 <_ZN12StrobeFilter9GetStrobeEv+0x20>
 8036104:	4b0b      	ldr	r3, [pc, #44]	; (8036134 <_ZN12StrobeFilter9GetStrobeEv+0x44>)
 8036106:	4a0c      	ldr	r2, [pc, #48]	; (8036138 <_ZN12StrobeFilter9GetStrobeEv+0x48>)
 8036108:	2154      	movs	r1, #84	; 0x54
 803610a:	480c      	ldr	r0, [pc, #48]	; (803613c <_ZN12StrobeFilter9GetStrobeEv+0x4c>)
 803610c:	f005 fd42 	bl	803bb94 <__assert_func>
		size_t strobe = StrobeQueue.front();
 8036110:	687b      	ldr	r3, [r7, #4]
 8036112:	3318      	adds	r3, #24
 8036114:	4618      	mov	r0, r3
 8036116:	f001 fb56 	bl	80377c6 <_ZNSt5queueIjSt5dequeIjSaIjEEE5frontEv>
 803611a:	4603      	mov	r3, r0
 803611c:	681b      	ldr	r3, [r3, #0]
 803611e:	60fb      	str	r3, [r7, #12]
		StrobeQueue.pop();
 8036120:	687b      	ldr	r3, [r7, #4]
 8036122:	3318      	adds	r3, #24
 8036124:	4618      	mov	r0, r3
 8036126:	f001 fb5b 	bl	80377e0 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>
		return strobe;
 803612a:	68fb      	ldr	r3, [r7, #12]
	}
 803612c:	4618      	mov	r0, r3
 803612e:	3710      	adds	r7, #16
 8036130:	46bd      	mov	sp, r7
 8036132:	bd80      	pop	{r7, pc}
 8036134:	0803d244 	.word	0x0803d244
 8036138:	0803d250 	.word	0x0803d250
 803613c:	0803d1e0 	.word	0x0803d1e0

08036140 <_ZN12StrobeFilter12CompCallbackEv>:

	void CompCallback() {
 8036140:	b580      	push	{r7, lr}
 8036142:	b082      	sub	sp, #8
 8036144:	af00      	add	r7, sp, #0
 8036146:	6078      	str	r0, [r7, #4]
		Callback();
 8036148:	6878      	ldr	r0, [r7, #4]
 803614a:	f7ff feec 	bl	8035f26 <_ZN12StrobeFilter8CallbackEv>
	}
 803614e:	bf00      	nop
 8036150:	3708      	adds	r7, #8
 8036152:	46bd      	mov	sp, r7
 8036154:	bd80      	pop	{r7, pc}
	...

08036158 <_ZN14StrobeObserverC1EhPFvR18MotherboardContextE>:
	std::queue<size_t> Strobes;
	uint8_t Offset;

	const CallbackT Callback;
public:
	explicit StrobeObserver(uint8_t offset, CallbackT callback) :
 8036158:	b580      	push	{r7, lr}
 803615a:	b084      	sub	sp, #16
 803615c:	af00      	add	r7, sp, #0
 803615e:	60f8      	str	r0, [r7, #12]
 8036160:	460b      	mov	r3, r1
 8036162:	607a      	str	r2, [r7, #4]
 8036164:	72fb      	strb	r3, [r7, #11]
			Offset { offset }, Callback { callback } {
 8036166:	68fb      	ldr	r3, [r7, #12]
 8036168:	4618      	mov	r0, r3
 803616a:	f001 fae6 	bl	803773a <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 803616e:	68fb      	ldr	r3, [r7, #12]
 8036170:	7afa      	ldrb	r2, [r7, #11]
 8036172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8036176:	68fb      	ldr	r3, [r7, #12]
 8036178:	687a      	ldr	r2, [r7, #4]
 803617a:	62da      	str	r2, [r3, #44]	; 0x2c
		assert(callback);
 803617c:	687b      	ldr	r3, [r7, #4]
 803617e:	2b00      	cmp	r3, #0
 8036180:	d105      	bne.n	803618e <_ZN14StrobeObserverC1EhPFvR18MotherboardContextE+0x36>
 8036182:	4b05      	ldr	r3, [pc, #20]	; (8036198 <_ZN14StrobeObserverC1EhPFvR18MotherboardContextE+0x40>)
 8036184:	4a05      	ldr	r2, [pc, #20]	; (803619c <_ZN14StrobeObserverC1EhPFvR18MotherboardContextE+0x44>)
 8036186:	2114      	movs	r1, #20
 8036188:	4805      	ldr	r0, [pc, #20]	; (80361a0 <_ZN14StrobeObserverC1EhPFvR18MotherboardContextE+0x48>)
 803618a:	f005 fd03 	bl	803bb94 <__assert_func>
	}
 803618e:	68fb      	ldr	r3, [r7, #12]
 8036190:	4618      	mov	r0, r3
 8036192:	3710      	adds	r7, #16
 8036194:	46bd      	mov	sp, r7
 8036196:	bd80      	pop	{r7, pc}
 8036198:	0803d274 	.word	0x0803d274
 803619c:	0803d280 	.word	0x0803d280
 80361a0:	0803d2c4 	.word	0x0803d2c4

080361a4 <_ZN14StrobeObserver9SetOffsetEh>:

	void SetOffset(uint8_t offset) {
 80361a4:	b480      	push	{r7}
 80361a6:	b083      	sub	sp, #12
 80361a8:	af00      	add	r7, sp, #0
 80361aa:	6078      	str	r0, [r7, #4]
 80361ac:	460b      	mov	r3, r1
 80361ae:	70fb      	strb	r3, [r7, #3]
		Offset = offset;
 80361b0:	687b      	ldr	r3, [r7, #4]
 80361b2:	78fa      	ldrb	r2, [r7, #3]
 80361b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
 80361b8:	bf00      	nop
 80361ba:	370c      	adds	r7, #12
 80361bc:	46bd      	mov	sp, r7
 80361be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80361c2:	4770      	bx	lr

080361c4 <_ZN14StrobeObserver9AddStrobeEj>:

	void AddStrobe(size_t strobe) {
 80361c4:	b580      	push	{r7, lr}
 80361c6:	b084      	sub	sp, #16
 80361c8:	af00      	add	r7, sp, #0
 80361ca:	6078      	str	r0, [r7, #4]
 80361cc:	6039      	str	r1, [r7, #0]
		Strobes.push(strobe + Offset);
 80361ce:	687a      	ldr	r2, [r7, #4]
 80361d0:	687b      	ldr	r3, [r7, #4]
 80361d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80361d6:	4619      	mov	r1, r3
 80361d8:	683b      	ldr	r3, [r7, #0]
 80361da:	440b      	add	r3, r1
 80361dc:	60fb      	str	r3, [r7, #12]
 80361de:	f107 030c 	add.w	r3, r7, #12
 80361e2:	4619      	mov	r1, r3
 80361e4:	4610      	mov	r0, r2
 80361e6:	f001 fb07 	bl	80377f8 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushEOj>
	}
 80361ea:	bf00      	nop
 80361ec:	3710      	adds	r7, #16
 80361ee:	46bd      	mov	sp, r7
 80361f0:	bd80      	pop	{r7, pc}

080361f2 <_ZN14StrobeObserver10TryProcessER18MotherboardContextj>:

	void TryProcess(MotherboardContext &mbCtx, size_t currentSeq) {
 80361f2:	b580      	push	{r7, lr}
 80361f4:	b084      	sub	sp, #16
 80361f6:	af00      	add	r7, sp, #0
 80361f8:	60f8      	str	r0, [r7, #12]
 80361fa:	60b9      	str	r1, [r7, #8]
 80361fc:	607a      	str	r2, [r7, #4]
		if (Strobes.empty())
 80361fe:	68fb      	ldr	r3, [r7, #12]
 8036200:	4618      	mov	r0, r3
 8036202:	f001 fad3 	bl	80377ac <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>
 8036206:	4603      	mov	r3, r0
 8036208:	2b00      	cmp	r3, #0
 803620a:	d116      	bne.n	803623a <_ZN14StrobeObserver10TryProcessER18MotherboardContextj+0x48>
			return;
		if (currentSeq < Strobes.front())
 803620c:	68fb      	ldr	r3, [r7, #12]
 803620e:	4618      	mov	r0, r3
 8036210:	f001 fad9 	bl	80377c6 <_ZNSt5queueIjSt5dequeIjSaIjEEE5frontEv>
 8036214:	4603      	mov	r3, r0
 8036216:	681b      	ldr	r3, [r3, #0]
 8036218:	687a      	ldr	r2, [r7, #4]
 803621a:	429a      	cmp	r2, r3
 803621c:	bf34      	ite	cc
 803621e:	2301      	movcc	r3, #1
 8036220:	2300      	movcs	r3, #0
 8036222:	b2db      	uxtb	r3, r3
 8036224:	2b00      	cmp	r3, #0
 8036226:	d10a      	bne.n	803623e <_ZN14StrobeObserver10TryProcessER18MotherboardContextj+0x4c>
			return;

		Callback(mbCtx);
 8036228:	68fb      	ldr	r3, [r7, #12]
 803622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803622c:	68b8      	ldr	r0, [r7, #8]
 803622e:	4798      	blx	r3

		Strobes.pop();
 8036230:	68fb      	ldr	r3, [r7, #12]
 8036232:	4618      	mov	r0, r3
 8036234:	f001 fad4 	bl	80377e0 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>
 8036238:	e002      	b.n	8036240 <_ZN14StrobeObserver10TryProcessER18MotherboardContextj+0x4e>
			return;
 803623a:	bf00      	nop
 803623c:	e000      	b.n	8036240 <_ZN14StrobeObserver10TryProcessER18MotherboardContextj+0x4e>
			return;
 803623e:	bf00      	nop
	}
 8036240:	3710      	adds	r7, #16
 8036242:	46bd      	mov	sp, r7
 8036244:	bd80      	pop	{r7, pc}

08036246 <_ZN15StrobeObservers9SetOffsetEjh>:
	std::vector<StrobeObserver> Observers;

public:
	StrobeObservers() = default;

	void SetOffset(size_t i, uint8_t offset) {
 8036246:	b580      	push	{r7, lr}
 8036248:	b084      	sub	sp, #16
 803624a:	af00      	add	r7, sp, #0
 803624c:	60f8      	str	r0, [r7, #12]
 803624e:	60b9      	str	r1, [r7, #8]
 8036250:	4613      	mov	r3, r2
 8036252:	71fb      	strb	r3, [r7, #7]
		Observers.at(i).SetOffset(offset);
 8036254:	68fb      	ldr	r3, [r7, #12]
 8036256:	68b9      	ldr	r1, [r7, #8]
 8036258:	4618      	mov	r0, r3
 803625a:	f001 fadf 	bl	803781c <_ZNSt6vectorI14StrobeObserverSaIS0_EE2atEj>
 803625e:	4602      	mov	r2, r0
 8036260:	79fb      	ldrb	r3, [r7, #7]
 8036262:	4619      	mov	r1, r3
 8036264:	4610      	mov	r0, r2
 8036266:	f7ff ff9d 	bl	80361a4 <_ZN14StrobeObserver9SetOffsetEh>
	}
 803626a:	bf00      	nop
 803626c:	3710      	adds	r7, #16
 803626e:	46bd      	mov	sp, r7
 8036270:	bd80      	pop	{r7, pc}

08036272 <_ZN15StrobeObservers16RegisterObserverEhPFvR18MotherboardContextE>:

	void RegisterObserver(uint8_t offset, StrobeObserver::CallbackT callback) {
 8036272:	b580      	push	{r7, lr}
 8036274:	b084      	sub	sp, #16
 8036276:	af00      	add	r7, sp, #0
 8036278:	60f8      	str	r0, [r7, #12]
 803627a:	460b      	mov	r3, r1
 803627c:	607a      	str	r2, [r7, #4]
 803627e:	72fb      	strb	r3, [r7, #11]
		Observers.emplace_back(offset, callback);
 8036280:	68fb      	ldr	r3, [r7, #12]
 8036282:	1d3a      	adds	r2, r7, #4
 8036284:	f107 010b 	add.w	r1, r7, #11
 8036288:	4618      	mov	r0, r3
 803628a:	f001 fad9 	bl	8037840 <_ZNSt6vectorI14StrobeObserverSaIS0_EE12emplace_backIJRhRPFvR18MotherboardContextEEEEvDpOT_>
	}
 803628e:	bf00      	nop
 8036290:	3710      	adds	r7, #16
 8036292:	46bd      	mov	sp, r7
 8036294:	bd80      	pop	{r7, pc}

08036296 <_ZN15StrobeObservers9AddStrobeEj>:

	void AddStrobe(size_t strobe) {
 8036296:	b580      	push	{r7, lr}
 8036298:	b086      	sub	sp, #24
 803629a:	af00      	add	r7, sp, #0
 803629c:	6078      	str	r0, [r7, #4]
 803629e:	6039      	str	r1, [r7, #0]
		for (auto &observer : Observers)
 80362a0:	687b      	ldr	r3, [r7, #4]
 80362a2:	617b      	str	r3, [r7, #20]
 80362a4:	6978      	ldr	r0, [r7, #20]
 80362a6:	f001 fb03 	bl	80378b0 <_ZNSt6vectorI14StrobeObserverSaIS0_EE5beginEv>
 80362aa:	4603      	mov	r3, r0
 80362ac:	60fb      	str	r3, [r7, #12]
 80362ae:	6978      	ldr	r0, [r7, #20]
 80362b0:	f001 fb0e 	bl	80378d0 <_ZNSt6vectorI14StrobeObserverSaIS0_EE3endEv>
 80362b4:	4603      	mov	r3, r0
 80362b6:	60bb      	str	r3, [r7, #8]
 80362b8:	f107 0208 	add.w	r2, r7, #8
 80362bc:	f107 030c 	add.w	r3, r7, #12
 80362c0:	4611      	mov	r1, r2
 80362c2:	4618      	mov	r0, r3
 80362c4:	f001 fb15 	bl	80378f2 <_ZN9__gnu_cxxneIP14StrobeObserverSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80362c8:	4603      	mov	r3, r0
 80362ca:	2b00      	cmp	r3, #0
 80362cc:	d00f      	beq.n	80362ee <_ZN15StrobeObservers9AddStrobeEj+0x58>
 80362ce:	f107 030c 	add.w	r3, r7, #12
 80362d2:	4618      	mov	r0, r3
 80362d4:	f001 fb36 	bl	8037944 <_ZNK9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEEdeEv>
 80362d8:	6138      	str	r0, [r7, #16]
			observer.AddStrobe(strobe);
 80362da:	6839      	ldr	r1, [r7, #0]
 80362dc:	6938      	ldr	r0, [r7, #16]
 80362de:	f7ff ff71 	bl	80361c4 <_ZN14StrobeObserver9AddStrobeEj>
		for (auto &observer : Observers)
 80362e2:	f107 030c 	add.w	r3, r7, #12
 80362e6:	4618      	mov	r0, r3
 80362e8:	f001 fb1b 	bl	8037922 <_ZN9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEEppEv>
 80362ec:	e7e4      	b.n	80362b8 <_ZN15StrobeObservers9AddStrobeEj+0x22>
	}
 80362ee:	bf00      	nop
 80362f0:	3718      	adds	r7, #24
 80362f2:	46bd      	mov	sp, r7
 80362f4:	bd80      	pop	{r7, pc}

080362f6 <_ZN15StrobeObservers10TryProcessER18MotherboardContextj>:

	void TryProcess(MotherboardContext &mbCtx, size_t currentSeq) {
 80362f6:	b580      	push	{r7, lr}
 80362f8:	b088      	sub	sp, #32
 80362fa:	af00      	add	r7, sp, #0
 80362fc:	60f8      	str	r0, [r7, #12]
 80362fe:	60b9      	str	r1, [r7, #8]
 8036300:	607a      	str	r2, [r7, #4]
		for (auto &observer : Observers)
 8036302:	68fb      	ldr	r3, [r7, #12]
 8036304:	61fb      	str	r3, [r7, #28]
 8036306:	69f8      	ldr	r0, [r7, #28]
 8036308:	f001 fad2 	bl	80378b0 <_ZNSt6vectorI14StrobeObserverSaIS0_EE5beginEv>
 803630c:	4603      	mov	r3, r0
 803630e:	617b      	str	r3, [r7, #20]
 8036310:	69f8      	ldr	r0, [r7, #28]
 8036312:	f001 fadd 	bl	80378d0 <_ZNSt6vectorI14StrobeObserverSaIS0_EE3endEv>
 8036316:	4603      	mov	r3, r0
 8036318:	613b      	str	r3, [r7, #16]
 803631a:	f107 0210 	add.w	r2, r7, #16
 803631e:	f107 0314 	add.w	r3, r7, #20
 8036322:	4611      	mov	r1, r2
 8036324:	4618      	mov	r0, r3
 8036326:	f001 fae4 	bl	80378f2 <_ZN9__gnu_cxxneIP14StrobeObserverSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 803632a:	4603      	mov	r3, r0
 803632c:	2b00      	cmp	r3, #0
 803632e:	d010      	beq.n	8036352 <_ZN15StrobeObservers10TryProcessER18MotherboardContextj+0x5c>
 8036330:	f107 0314 	add.w	r3, r7, #20
 8036334:	4618      	mov	r0, r3
 8036336:	f001 fb05 	bl	8037944 <_ZNK9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEEdeEv>
 803633a:	61b8      	str	r0, [r7, #24]
			observer.TryProcess(mbCtx, currentSeq);
 803633c:	687a      	ldr	r2, [r7, #4]
 803633e:	68b9      	ldr	r1, [r7, #8]
 8036340:	69b8      	ldr	r0, [r7, #24]
 8036342:	f7ff ff56 	bl	80361f2 <_ZN14StrobeObserver10TryProcessER18MotherboardContextj>
		for (auto &observer : Observers)
 8036346:	f107 0314 	add.w	r3, r7, #20
 803634a:	4618      	mov	r0, r3
 803634c:	f001 fae9 	bl	8037922 <_ZN9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEEppEv>
 8036350:	e7e3      	b.n	803631a <_ZN15StrobeObservers10TryProcessER18MotherboardContextj+0x24>
	}
 8036352:	bf00      	nop
 8036354:	3720      	adds	r7, #32
 8036356:	46bd      	mov	sp, r7
 8036358:	bd80      	pop	{r7, pc}
	...

0803635c <_ZN11FrameQueues5ClearEv>:
	static constexpr size_t MaxSize = FrameQueueMaxSize;

	FrameQueue<BodyResponce, MaxSize> BodyPos;
	FrameQueue<IMUDevice::Frame, MaxSize> IMUFrames;

	void Clear() {
 803635c:	b580      	push	{r7, lr}
 803635e:	b082      	sub	sp, #8
 8036360:	af00      	add	r7, sp, #0
 8036362:	6078      	str	r0, [r7, #4]
		BodyPos.Clear();
 8036364:	687b      	ldr	r3, [r7, #4]
 8036366:	4618      	mov	r0, r3
 8036368:	f001 faf8 	bl	803795c <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EE5ClearEv>
		IMUFrames.Clear();
 803636c:	687a      	ldr	r2, [r7, #4]
 803636e:	4b04      	ldr	r3, [pc, #16]	; (8036380 <_ZN11FrameQueues5ClearEv+0x24>)
 8036370:	4413      	add	r3, r2
 8036372:	4618      	mov	r0, r3
 8036374:	f001 fb05 	bl	8037982 <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE5ClearEv>
	}
 8036378:	bf00      	nop
 803637a:	3708      	adds	r7, #8
 803637c:	46bd      	mov	sp, r7
 803637e:	bd80      	pop	{r7, pc}
 8036380:	00013570 	.word	0x00013570

08036384 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8036384:	b580      	push	{r7, lr}
 8036386:	b082      	sub	sp, #8
 8036388:	af00      	add	r7, sp, #0
 803638a:	6078      	str	r0, [r7, #4]
 803638c:	687b      	ldr	r3, [r7, #4]
 803638e:	4618      	mov	r0, r3
 8036390:	f001 fb0a 	bl	80379a8 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE12_Vector_implC1Ev>
 8036394:	687b      	ldr	r3, [r7, #4]
 8036396:	4618      	mov	r0, r3
 8036398:	3708      	adds	r7, #8
 803639a:	46bd      	mov	sp, r7
 803639c:	bd80      	pop	{r7, pc}

0803639e <_ZNSt6vectorI14StrobeObserverSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 803639e:	b580      	push	{r7, lr}
 80363a0:	b082      	sub	sp, #8
 80363a2:	af00      	add	r7, sp, #0
 80363a4:	6078      	str	r0, [r7, #4]
 80363a6:	687b      	ldr	r3, [r7, #4]
 80363a8:	4618      	mov	r0, r3
 80363aa:	f7ff ffeb 	bl	8036384 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EEC1Ev>
 80363ae:	687b      	ldr	r3, [r7, #4]
 80363b0:	4618      	mov	r0, r3
 80363b2:	3708      	adds	r7, #8
 80363b4:	46bd      	mov	sp, r7
 80363b6:	bd80      	pop	{r7, pc}

080363b8 <_ZN15StrobeObserversC1Ev>:
	StrobeObservers() = default;
 80363b8:	b580      	push	{r7, lr}
 80363ba:	b082      	sub	sp, #8
 80363bc:	af00      	add	r7, sp, #0
 80363be:	6078      	str	r0, [r7, #4]
 80363c0:	687b      	ldr	r3, [r7, #4]
 80363c2:	4618      	mov	r0, r3
 80363c4:	f7ff ffeb 	bl	803639e <_ZNSt6vectorI14StrobeObserverSaIS0_EEC1Ev>
 80363c8:	687b      	ldr	r3, [r7, #4]
 80363ca:	4618      	mov	r0, r3
 80363cc:	3708      	adds	r7, #8
 80363ce:	46bd      	mov	sp, r7
 80363d0:	bd80      	pop	{r7, pc}

080363d2 <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EEC1Ev>:
 80363d2:	b480      	push	{r7}
 80363d4:	b083      	sub	sp, #12
 80363d6:	af00      	add	r7, sp, #0
 80363d8:	6078      	str	r0, [r7, #4]
 80363da:	687b      	ldr	r3, [r7, #4]
 80363dc:	2200      	movs	r2, #0
 80363de:	601a      	str	r2, [r3, #0]
 80363e0:	687b      	ldr	r3, [r7, #4]
 80363e2:	2200      	movs	r2, #0
 80363e4:	605a      	str	r2, [r3, #4]
 80363e6:	687b      	ldr	r3, [r7, #4]
 80363e8:	2200      	movs	r2, #0
 80363ea:	609a      	str	r2, [r3, #8]
 80363ec:	687b      	ldr	r3, [r7, #4]
 80363ee:	4618      	mov	r0, r3
 80363f0:	370c      	adds	r7, #12
 80363f2:	46bd      	mov	sp, r7
 80363f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80363f8:	4770      	bx	lr

080363fa <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EEC1Ev>:
struct FrameQueue {
private:
	FixedQueue<T, Capacity> Queue;
	size_t FirstSeq = 0;
public:
	FrameQueue() = default;
 80363fa:	b580      	push	{r7, lr}
 80363fc:	b082      	sub	sp, #8
 80363fe:	af00      	add	r7, sp, #0
 8036400:	6078      	str	r0, [r7, #4]
 8036402:	687b      	ldr	r3, [r7, #4]
 8036404:	4618      	mov	r0, r3
 8036406:	f7ff ffe4 	bl	80363d2 <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EEC1Ev>
 803640a:	687b      	ldr	r3, [r7, #4]
 803640c:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8036410:	461a      	mov	r2, r3
 8036412:	2300      	movs	r3, #0
 8036414:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
 8036418:	687b      	ldr	r3, [r7, #4]
 803641a:	4618      	mov	r0, r3
 803641c:	3708      	adds	r7, #8
 803641e:	46bd      	mov	sp, r7
 8036420:	bd80      	pop	{r7, pc}

08036422 <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EEC1Ev>:
 8036422:	b480      	push	{r7}
 8036424:	b083      	sub	sp, #12
 8036426:	af00      	add	r7, sp, #0
 8036428:	6078      	str	r0, [r7, #4]
 803642a:	687b      	ldr	r3, [r7, #4]
 803642c:	2200      	movs	r2, #0
 803642e:	601a      	str	r2, [r3, #0]
 8036430:	687b      	ldr	r3, [r7, #4]
 8036432:	2200      	movs	r2, #0
 8036434:	605a      	str	r2, [r3, #4]
 8036436:	687b      	ldr	r3, [r7, #4]
 8036438:	2200      	movs	r2, #0
 803643a:	609a      	str	r2, [r3, #8]
 803643c:	687b      	ldr	r3, [r7, #4]
 803643e:	4618      	mov	r0, r3
 8036440:	370c      	adds	r7, #12
 8036442:	46bd      	mov	sp, r7
 8036444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036448:	4770      	bx	lr

0803644a <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EEC1Ev>:
 803644a:	b580      	push	{r7, lr}
 803644c:	b082      	sub	sp, #8
 803644e:	af00      	add	r7, sp, #0
 8036450:	6078      	str	r0, [r7, #4]
 8036452:	687b      	ldr	r3, [r7, #4]
 8036454:	4618      	mov	r0, r3
 8036456:	f7ff ffe4 	bl	8036422 <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EEC1Ev>
 803645a:	687b      	ldr	r3, [r7, #4]
 803645c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8036460:	461a      	mov	r2, r3
 8036462:	2300      	movs	r3, #0
 8036464:	f8c2 377c 	str.w	r3, [r2, #1916]	; 0x77c
 8036468:	687b      	ldr	r3, [r7, #4]
 803646a:	4618      	mov	r0, r3
 803646c:	3708      	adds	r7, #8
 803646e:	46bd      	mov	sp, r7
 8036470:	bd80      	pop	{r7, pc}
	...

08036474 <_ZN11FrameQueuesC1Ev>:
struct FrameQueues {
 8036474:	b580      	push	{r7, lr}
 8036476:	b082      	sub	sp, #8
 8036478:	af00      	add	r7, sp, #0
 803647a:	6078      	str	r0, [r7, #4]
 803647c:	687b      	ldr	r3, [r7, #4]
 803647e:	4618      	mov	r0, r3
 8036480:	f7ff ffbb 	bl	80363fa <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EEC1Ev>
 8036484:	687a      	ldr	r2, [r7, #4]
 8036486:	4b05      	ldr	r3, [pc, #20]	; (803649c <_ZN11FrameQueuesC1Ev+0x28>)
 8036488:	4413      	add	r3, r2
 803648a:	4618      	mov	r0, r3
 803648c:	f7ff ffdd 	bl	803644a <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EEC1Ev>
 8036490:	687b      	ldr	r3, [r7, #4]
 8036492:	4618      	mov	r0, r3
 8036494:	3708      	adds	r7, #8
 8036496:	46bd      	mov	sp, r7
 8036498:	bd80      	pop	{r7, pc}
 803649a:	bf00      	nop
 803649c:	00013570 	.word	0x00013570

080364a0 <_ZN18MotherboardContextC1E17MotherboardConfig>:
	IMUDevice IMU;
	StrobeFilter SFilter;
	StrobeObservers SObservers;
	FrameQueues FQueues;

	MotherboardContext(MotherboardConfig c) :
 80364a0:	b084      	sub	sp, #16
 80364a2:	b590      	push	{r4, r7, lr}
 80364a4:	b083      	sub	sp, #12
 80364a6:	af00      	add	r7, sp, #0
 80364a8:	6078      	str	r0, [r7, #4]
 80364aa:	f107 001c 	add.w	r0, r7, #28
 80364ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			Head { c.HeadIO.Uart }, Body { c.BodyClient.Uart,
					c.BodyClient.TimeoutMs, c.BodyClient.NAttempts }, BQueue {
					c.BodyQueue.Period }, IMU { c.IMUDevice.Spi,
					c.IMUDevice.SampleRate, c.IMUDevice.ReportLatency }, SFilter {
					c.StrobeFilter.TargetDuration,
					c.StrobeFilter.DurationThreshold, &IMU } {
 80364b2:	687b      	ldr	r3, [r7, #4]
 80364b4:	2200      	movs	r2, #0
 80364b6:	701a      	strb	r2, [r3, #0]
 80364b8:	687b      	ldr	r3, [r7, #4]
 80364ba:	2204      	movs	r2, #4
 80364bc:	705a      	strb	r2, [r3, #1]
 80364be:	687b      	ldr	r3, [r7, #4]
 80364c0:	3304      	adds	r3, #4
 80364c2:	69fa      	ldr	r2, [r7, #28]
 80364c4:	4611      	mov	r1, r2
 80364c6:	4618      	mov	r0, r3
 80364c8:	f7ff fbbe 	bl	8035c48 <_ZN6HeadIOC1EP20__UART_HandleTypeDef>
 80364cc:	687b      	ldr	r3, [r7, #4]
 80364ce:	f503 6024 	add.w	r0, r3, #2624	; 0xa40
 80364d2:	6a39      	ldr	r1, [r7, #32]
 80364d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80364d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80364d8:	f7fe fd88 	bl	8034fec <_ZN10BodyClientC1EP20__UART_HandleTypeDefjj>
 80364dc:	687b      	ldr	r3, [r7, #4]
 80364de:	f603 2364 	addw	r3, r3, #2660	; 0xa64
					c.BodyQueue.Period }, IMU { c.IMUDevice.Spi,
 80364e2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
					c.StrobeFilter.DurationThreshold, &IMU } {
 80364e6:	4611      	mov	r1, r2
 80364e8:	4618      	mov	r0, r3
 80364ea:	f7ff fc03 	bl	8035cf4 <_ZN9BodyQueueC1Ej>
 80364ee:	687a      	ldr	r2, [r7, #4]
 80364f0:	4b15      	ldr	r3, [pc, #84]	; (8036548 <_ZN18MotherboardContextC1E17MotherboardConfig+0xa8>)
 80364f2:	4413      	add	r3, r2
 80364f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80364f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80364fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80364fc:	eeb0 0a67 	vmov.f32	s0, s15
 8036500:	4618      	mov	r0, r3
 8036502:	f7ff f859 	bl	80355b8 <_ZN9IMUDeviceC1EP19__SPI_HandleTypeDeffm>
 8036506:	687b      	ldr	r3, [r7, #4]
 8036508:	4810      	ldr	r0, [pc, #64]	; (803654c <_ZN18MotherboardContextC1E17MotherboardConfig+0xac>)
 803650a:	4418      	add	r0, r3
 803650c:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8036510:	f897 403d 	ldrb.w	r4, [r7, #61]	; 0x3d
 8036514:	687a      	ldr	r2, [r7, #4]
 8036516:	4b0c      	ldr	r3, [pc, #48]	; (8036548 <_ZN18MotherboardContextC1E17MotherboardConfig+0xa8>)
 8036518:	4413      	add	r3, r2
 803651a:	4622      	mov	r2, r4
 803651c:	f7ff fd78 	bl	8036010 <_ZN12StrobeFilterC1EhhPK9IMUDevice>
 8036520:	687a      	ldr	r2, [r7, #4]
 8036522:	4b0b      	ldr	r3, [pc, #44]	; (8036550 <_ZN18MotherboardContextC1E17MotherboardConfig+0xb0>)
 8036524:	4413      	add	r3, r2
 8036526:	4618      	mov	r0, r3
 8036528:	f7ff ff46 	bl	80363b8 <_ZN15StrobeObserversC1Ev>
 803652c:	687a      	ldr	r2, [r7, #4]
 803652e:	4b09      	ldr	r3, [pc, #36]	; (8036554 <_ZN18MotherboardContextC1E17MotherboardConfig+0xb4>)
 8036530:	4413      	add	r3, r2
 8036532:	4618      	mov	r0, r3
 8036534:	f7ff ff9e 	bl	8036474 <_ZN11FrameQueuesC1Ev>
	}
 8036538:	687b      	ldr	r3, [r7, #4]
 803653a:	4618      	mov	r0, r3
 803653c:	370c      	adds	r7, #12
 803653e:	46bd      	mov	sp, r7
 8036540:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8036544:	b004      	add	sp, #16
 8036546:	4770      	bx	lr
 8036548:	00020268 	.word	0x00020268
 803654c:	000213c8 	.word	0x000213c8
 8036550:	00021410 	.word	0x00021410
 8036554:	0002141c 	.word	0x0002141c

08036558 <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE>:

private:
	BufferType Buffer;

private:
	Errors::Type ConvertBodyError(BodyClient::Status status) {
 8036558:	b580      	push	{r7, lr}
 803655a:	b082      	sub	sp, #8
 803655c:	af00      	add	r7, sp, #0
 803655e:	6078      	str	r0, [r7, #4]
 8036560:	6039      	str	r1, [r7, #0]
		using S = BodyClient::Status;

		switch (status) {
 8036562:	683b      	ldr	r3, [r7, #0]
 8036564:	2b04      	cmp	r3, #4
 8036566:	d817      	bhi.n	8036598 <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE+0x40>
 8036568:	a201      	add	r2, pc, #4	; (adr r2, 8036570 <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE+0x18>)
 803656a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803656e:	bf00      	nop
 8036570:	08036585 	.word	0x08036585
 8036574:	08036591 	.word	0x08036591
 8036578:	08036589 	.word	0x08036589
 803657c:	08036595 	.word	0x08036595
 8036580:	0803658d 	.word	0x0803658d
		case S::Success:
			return Errors::Success;
 8036584:	2300      	movs	r3, #0
 8036586:	e00d      	b.n	80365a4 <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE+0x4c>
		case S::ACKTimeout:
			return Errors::BodyTimeout;
 8036588:	2305      	movs	r3, #5
 803658a:	e00b      	b.n	80365a4 <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE+0x4c>
		case S::EOMTimeout:
			return Errors::BodyTimeout;
 803658c:	2305      	movs	r3, #5
 803658e:	e009      	b.n	80365a4 <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE+0x4c>
		case S::Nack:
			return Errors::BodyNACK;
 8036590:	2306      	movs	r3, #6
 8036592:	e007      	b.n	80365a4 <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE+0x4c>
		case S::Unknown:
			return Errors::BodyUnknownError;
 8036594:	2307      	movs	r3, #7
 8036596:	e005      	b.n	80365a4 <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE+0x4c>
		default:
			assert(0);
 8036598:	4b04      	ldr	r3, [pc, #16]	; (80365ac <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE+0x54>)
 803659a:	4a05      	ldr	r2, [pc, #20]	; (80365b0 <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE+0x58>)
 803659c:	2126      	movs	r1, #38	; 0x26
 803659e:	4805      	ldr	r0, [pc, #20]	; (80365b4 <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE+0x5c>)
 80365a0:	f005 faf8 	bl	803bb94 <__assert_func>
		}
	}
 80365a4:	4618      	mov	r0, r3
 80365a6:	3708      	adds	r7, #8
 80365a8:	46bd      	mov	sp, r7
 80365aa:	bd80      	pop	{r7, pc}
 80365ac:	0803d32c 	.word	0x0803d32c
 80365b0:	0803d330 	.word	0x0803d330
 80365b4:	0803d388 	.word	0x0803d388

080365b8 <_ZN14RequestHandler11CreateErrorEh>:

private:
	Responce CreateError(Errors::Type error) {
 80365b8:	b580      	push	{r7, lr}
 80365ba:	b084      	sub	sp, #16
 80365bc:	af00      	add	r7, sp, #0
 80365be:	60f8      	str	r0, [r7, #12]
 80365c0:	60b9      	str	r1, [r7, #8]
 80365c2:	4613      	mov	r3, r2
 80365c4:	71fb      	strb	r3, [r7, #7]
		Responce responce;
		responce.Error = Errors::Serialize(error);
 80365c6:	79fb      	ldrb	r3, [r7, #7]
 80365c8:	4618      	mov	r0, r3
 80365ca:	f005 f9f8 	bl	803b9be <_ZN4Roki9MbService10ErrorCodes9SerializeEh>
 80365ce:	4603      	mov	r3, r0
 80365d0:	461a      	mov	r2, r3
 80365d2:	68fb      	ldr	r3, [r7, #12]
 80365d4:	705a      	strb	r2, [r3, #1]
		responce.Size = 0;
 80365d6:	68fb      	ldr	r3, [r7, #12]
 80365d8:	2200      	movs	r2, #0
 80365da:	701a      	strb	r2, [r3, #0]
		return responce;
 80365dc:	bf00      	nop
	}
 80365de:	68f8      	ldr	r0, [r7, #12]
 80365e0:	3710      	adds	r7, #16
 80365e2:	46bd      	mov	sp, r7
 80365e4:	bd80      	pop	{r7, pc}
	...

080365e8 <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE>:
		rspMsg.Serialize(responce.Data.data());

		return responce;
	}
public:
	Responce Handle(MotherboardContext &ctx, const Request &request) {
 80365e8:	b580      	push	{r7, lr}
 80365ea:	b086      	sub	sp, #24
 80365ec:	af00      	add	r7, sp, #0
 80365ee:	60f8      	str	r0, [r7, #12]
 80365f0:	60b9      	str	r1, [r7, #8]
 80365f2:	607a      	str	r2, [r7, #4]
 80365f4:	603b      	str	r3, [r7, #0]
		if (request.IsBad())
 80365f6:	6838      	ldr	r0, [r7, #0]
 80365f8:	f7ff f870 	bl	80356dc <_ZNK6HeadIO7Request5IsBadEv>
 80365fc:	4603      	mov	r3, r0
 80365fe:	2b00      	cmp	r3, #0
 8036600:	d006      	beq.n	8036610 <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x28>
			return CreateError(Errors::NACK);
 8036602:	68fb      	ldr	r3, [r7, #12]
 8036604:	22ff      	movs	r2, #255	; 0xff
 8036606:	68b9      	ldr	r1, [r7, #8]
 8036608:	4618      	mov	r0, r3
 803660a:	f7ff ffd5 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 803660e:	e09c      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>

		auto procID = Service::ProcedureID::Deserialize(request.ProcID);
 8036610:	683b      	ldr	r3, [r7, #0]
 8036612:	781b      	ldrb	r3, [r3, #0]
 8036614:	4618      	mov	r0, r3
 8036616:	f005 f9c6 	bl	803b9a6 <_ZN4Roki9MbService11ProcedureID11DeserializeEh>
 803661a:	4603      	mov	r3, r0
 803661c:	75fb      	strb	r3, [r7, #23]

		switch (procID) {
 803661e:	7dfb      	ldrb	r3, [r7, #23]
 8036620:	2b0f      	cmp	r3, #15
 8036622:	f200 808c 	bhi.w	803673e <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x156>
 8036626:	a201      	add	r2, pc, #4	; (adr r2, 803662c <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x44>)
 8036628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803662c:	080366cf 	.word	0x080366cf
 8036630:	080366a5 	.word	0x080366a5
 8036634:	080366c1 	.word	0x080366c1
 8036638:	08036697 	.word	0x08036697
 803663c:	08036707 	.word	0x08036707
 8036640:	0803673f 	.word	0x0803673f
 8036644:	08036731 	.word	0x08036731
 8036648:	08036723 	.word	0x08036723
 803664c:	080366dd 	.word	0x080366dd
 8036650:	080366eb 	.word	0x080366eb
 8036654:	08036689 	.word	0x08036689
 8036658:	080366f9 	.word	0x080366f9
 803665c:	0803666d 	.word	0x0803666d
 8036660:	0803667b 	.word	0x0803667b
 8036664:	080366b3 	.word	0x080366b3
 8036668:	08036715 	.word	0x08036715
		case PID::BodySendForward:
			return GenericHandler<Proc::BodySendForward>(ctx, request);
 803666c:	68f8      	ldr	r0, [r7, #12]
 803666e:	683b      	ldr	r3, [r7, #0]
 8036670:	687a      	ldr	r2, [r7, #4]
 8036672:	68b9      	ldr	r1, [r7, #8]
 8036674:	f001 f9a8 	bl	80379c8 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures15BodySendForwardEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 8036678:	e067      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::BodySendQueue:
			return GenericHandler<Proc::BodySendQueue>(ctx, request);
 803667a:	68f8      	ldr	r0, [r7, #12]
 803667c:	683b      	ldr	r3, [r7, #0]
 803667e:	687a      	ldr	r2, [r7, #4]
 8036680:	68b9      	ldr	r1, [r7, #8]
 8036682:	f001 fa51 	bl	8037b28 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures13BodySendQueueEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 8036686:	e060      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::ConfigureStrobeFilter:
			return GenericHandler<Proc::ConfigureStrobeFilter>(ctx, request);
 8036688:	68f8      	ldr	r0, [r7, #12]
 803668a:	683b      	ldr	r3, [r7, #0]
 803668c:	687a      	ldr	r2, [r7, #4]
 803668e:	68b9      	ldr	r1, [r7, #8]
 8036690:	f001 fafa 	bl	8037c88 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures21ConfigureStrobeFilterEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 8036694:	e059      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::GetBodyContainerInfo:
			return GenericHandler<Proc::GetBodyContainerInfo>(ctx, request);
 8036696:	68f8      	ldr	r0, [r7, #12]
 8036698:	683b      	ldr	r3, [r7, #0]
 803669a:	687a      	ldr	r2, [r7, #4]
 803669c:	68b9      	ldr	r1, [r7, #8]
 803669e:	f001 fb9a 	bl	8037dd6 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures20GetBodyContainerInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 80366a2:	e052      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::GetBodyFrame:
			return GenericHandler<Proc::GetBodyFrame>(ctx, request);
 80366a4:	68f8      	ldr	r0, [r7, #12]
 80366a6:	683b      	ldr	r3, [r7, #0]
 80366a8:	687a      	ldr	r2, [r7, #4]
 80366aa:	68b9      	ldr	r1, [r7, #8]
 80366ac:	f001 fc37 	bl	8037f1e <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures12GetBodyFrameEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 80366b0:	e04b      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::GetBodyQueueInfo:
			return GenericHandler<Proc::GetBodyQueueInfo>(ctx, request);
 80366b2:	68f8      	ldr	r0, [r7, #12]
 80366b4:	683b      	ldr	r3, [r7, #0]
 80366b6:	687a      	ldr	r2, [r7, #4]
 80366b8:	68b9      	ldr	r1, [r7, #8]
 80366ba:	f001 fcd7 	bl	803806c <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures16GetBodyQueueInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 80366be:	e044      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::GetIMUContainerInfo:
			return GenericHandler<Proc::GetIMUContainerInfo>(ctx, request);
 80366c0:	68f8      	ldr	r0, [r7, #12]
 80366c2:	683b      	ldr	r3, [r7, #0]
 80366c4:	687a      	ldr	r2, [r7, #4]
 80366c6:	68b9      	ldr	r1, [r7, #8]
 80366c8:	f001 fd74 	bl	80381b4 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures19GetIMUContainerInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 80366cc:	e03d      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::GetIMUFrame:
			return GenericHandler<Proc::GetIMUFrame>(ctx, request);
 80366ce:	68f8      	ldr	r0, [r7, #12]
 80366d0:	683b      	ldr	r3, [r7, #0]
 80366d2:	687a      	ldr	r2, [r7, #4]
 80366d4:	68b9      	ldr	r1, [r7, #8]
 80366d6:	f001 fe11 	bl	80382fc <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures11GetIMUFrameEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 80366da:	e036      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::GetIMULatest:
			return GenericHandler<Proc::GetIMULatest>(ctx, request);
 80366dc:	68f8      	ldr	r0, [r7, #12]
 80366de:	683b      	ldr	r3, [r7, #0]
 80366e0:	687a      	ldr	r2, [r7, #4]
 80366e2:	68b9      	ldr	r1, [r7, #8]
 80366e4:	f001 feb1 	bl	803844a <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures12GetIMULatestEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 80366e8:	e02f      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::GetStrobeWidth:
			return GenericHandler<Proc::GetStrobeWidth>(ctx, request);
 80366ea:	68f8      	ldr	r0, [r7, #12]
 80366ec:	683b      	ldr	r3, [r7, #0]
 80366ee:	687a      	ldr	r2, [r7, #4]
 80366f0:	68b9      	ldr	r1, [r7, #8]
 80366f2:	f001 ff4e 	bl	8038592 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures14GetStrobeWidthEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 80366f6:	e028      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::GetVersion:
			return GenericHandler<Proc::GetVersion>(ctx, request);
 80366f8:	68f8      	ldr	r0, [r7, #12]
 80366fa:	683b      	ldr	r3, [r7, #0]
 80366fc:	687a      	ldr	r2, [r7, #4]
 80366fe:	68b9      	ldr	r1, [r7, #8]
 8036700:	f001 ffeb 	bl	80386da <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures10GetVersionEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 8036704:	e021      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::ResetStrobeContainers:
			return GenericHandler<Proc::ResetStrobeContainers>(ctx, request);
 8036706:	68f8      	ldr	r0, [r7, #12]
 8036708:	683b      	ldr	r3, [r7, #0]
 803670a:	687a      	ldr	r2, [r7, #4]
 803670c:	68b9      	ldr	r1, [r7, #8]
 803670e:	f002 f888 	bl	8038822 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures21ResetStrobeContainersEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 8036712:	e01a      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::SetBodyQueuePeriod:
			return GenericHandler<Proc::SetBodyQueuePeriod>(ctx, request);
 8036714:	68f8      	ldr	r0, [r7, #12]
 8036716:	683b      	ldr	r3, [r7, #0]
 8036718:	687a      	ldr	r2, [r7, #4]
 803671a:	68b9      	ldr	r1, [r7, #8]
 803671c:	f002 f925 	bl	803896a <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures18SetBodyQueuePeriodEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 8036720:	e013      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::SetBodyStrobeOffset:
			return GenericHandler<Proc::SetBodyStrobeOffset>(ctx, request);
 8036722:	68f8      	ldr	r0, [r7, #12]
 8036724:	683b      	ldr	r3, [r7, #0]
 8036726:	687a      	ldr	r2, [r7, #4]
 8036728:	68b9      	ldr	r1, [r7, #8]
 803672a:	f002 f9c5 	bl	8038ab8 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures19SetBodyStrobeOffsetEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 803672e:	e00c      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>
		case PID::SetIMUStrobeOffset:
			return GenericHandler<Proc::SetIMUStrobeOffset>(ctx, request);
 8036730:	68f8      	ldr	r0, [r7, #12]
 8036732:	683b      	ldr	r3, [r7, #0]
 8036734:	687a      	ldr	r2, [r7, #4]
 8036736:	68b9      	ldr	r1, [r7, #8]
 8036738:	f002 fa65 	bl	8038c06 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures18SetIMUStrobeOffsetEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>
 803673c:	e005      	b.n	803674a <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE+0x162>

		default:
			return CreateError(Errors::UnknownProcedure);
 803673e:	68fb      	ldr	r3, [r7, #12]
 8036740:	2202      	movs	r2, #2
 8036742:	68b9      	ldr	r1, [r7, #8]
 8036744:	4618      	mov	r0, r3
 8036746:	f7ff ff37 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
		}
	}
 803674a:	68f8      	ldr	r0, [r7, #12]
 803674c:	3718      	adds	r7, #24
 803674e:	46bd      	mov	sp, r7
 8036750:	bd80      	pop	{r7, pc}
 8036752:	bf00      	nop

08036754 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures11GetIMUFrameEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:
};

#define RPC(procName) typename RequestHandler::Proc::procName
#define HANDLER(procName) template<> RequestHandler::Errors::Type RequestHandler::Handler<RPC(procName)>(MotherboardContext& ctx, const RPC(procName)::RequestType& request, RPC(procName)::ResponceType& responce)

HANDLER(GetIMUFrame) {
 8036754:	b5b0      	push	{r4, r5, r7, lr}
 8036756:	b08c      	sub	sp, #48	; 0x30
 8036758:	af00      	add	r7, sp, #0
 803675a:	6278      	str	r0, [r7, #36]	; 0x24
 803675c:	6239      	str	r1, [r7, #32]
 803675e:	61fa      	str	r2, [r7, #28]
 8036760:	61bb      	str	r3, [r7, #24]
	auto &fQueue = ctx.FQueues.IMUFrames;
 8036762:	6a3a      	ldr	r2, [r7, #32]
 8036764:	4b13      	ldr	r3, [pc, #76]	; (80367b4 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures11GetIMUFrameEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x60>)
 8036766:	4413      	add	r3, r2
 8036768:	62fb      	str	r3, [r7, #44]	; 0x2c
	int16_t seq = request.Seq;
 803676a:	69fb      	ldr	r3, [r7, #28]
 803676c:	881b      	ldrh	r3, [r3, #0]
 803676e:	857b      	strh	r3, [r7, #42]	; 0x2a

	if (!fQueue.HasSeq(seq))
 8036770:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8036774:	4619      	mov	r1, r3
 8036776:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8036778:	f002 faec 	bl	8038d54 <_ZNK10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6HasSeqEj>
 803677c:	4603      	mov	r3, r0
 803677e:	f083 0301 	eor.w	r3, r3, #1
 8036782:	b2db      	uxtb	r3, r3
 8036784:	2b00      	cmp	r3, #0
 8036786:	d001      	beq.n	803678c <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures11GetIMUFrameEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x38>
		return Errors::FrameUnavailable;
 8036788:	2301      	movs	r3, #1
 803678a:	e00e      	b.n	80367aa <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures11GetIMUFrameEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x56>

	responce = fQueue.GetSeq(seq);
 803678c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8036790:	69bc      	ldr	r4, [r7, #24]
 8036792:	463b      	mov	r3, r7
 8036794:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036796:	4618      	mov	r0, r3
 8036798:	f002 fb14 	bl	8038dc4 <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6GetSeqEj>
 803679c:	4625      	mov	r5, r4
 803679e:	463c      	mov	r4, r7
 80367a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80367a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80367a4:	6823      	ldr	r3, [r4, #0]
 80367a6:	602b      	str	r3, [r5, #0]

	return Errors::Success;
 80367a8:	2300      	movs	r3, #0
}
 80367aa:	4618      	mov	r0, r3
 80367ac:	3730      	adds	r7, #48	; 0x30
 80367ae:	46bd      	mov	sp, r7
 80367b0:	bdb0      	pop	{r4, r5, r7, pc}
 80367b2:	bf00      	nop
 80367b4:	0003498c 	.word	0x0003498c

080367b8 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures12GetBodyFrameEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(GetBodyFrame) {
 80367b8:	b590      	push	{r4, r7, lr}
 80367ba:	b0c9      	sub	sp, #292	; 0x124
 80367bc:	af00      	add	r7, sp, #0
 80367be:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80367c2:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 80367c6:	6020      	str	r0, [r4, #0]
 80367c8:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80367cc:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 80367d0:	6001      	str	r1, [r0, #0]
 80367d2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80367d6:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80367da:	600a      	str	r2, [r1, #0]
 80367dc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80367e0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80367e4:	6013      	str	r3, [r2, #0]
	auto &fQueue = ctx.FQueues.BodyPos;
 80367e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80367ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80367ee:	681a      	ldr	r2, [r3, #0]
 80367f0:	4b3a      	ldr	r3, [pc, #232]	; (80368dc <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures12GetBodyFrameEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x124>)
 80367f2:	4413      	add	r3, r2
 80367f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	int16_t seq = request.Seq;
 80367f8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80367fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8036800:	681b      	ldr	r3, [r3, #0]
 8036802:	881b      	ldrh	r3, [r3, #0]
 8036804:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a

	if (!fQueue.HasSeq(seq))
 8036808:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	; 0x11a
 803680c:	4619      	mov	r1, r3
 803680e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8036812:	f002 fb07 	bl	8038e24 <_ZNK10FrameQueueIN11FrameQueues12BodyResponceELj300EE6HasSeqEj>
 8036816:	4603      	mov	r3, r0
 8036818:	f083 0301 	eor.w	r3, r3, #1
 803681c:	b2db      	uxtb	r3, r3
 803681e:	2b00      	cmp	r3, #0
 8036820:	d001      	beq.n	8036826 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures12GetBodyFrameEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x6e>
		return Errors::FrameUnavailable;
 8036822:	2301      	movs	r3, #1
 8036824:	e055      	b.n	80368d2 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures12GetBodyFrameEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x11a>

	auto resp = fQueue.GetSeq(seq);
 8036826:	f9b7 211a 	ldrsh.w	r2, [r7, #282]	; 0x11a
 803682a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803682e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8036832:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8036836:	4618      	mov	r0, r3
 8036838:	f002 fb2c 	bl	8038e94 <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EE6GetSeqEj>
	auto error = ConvertBodyError(resp.Status);
 803683c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8036840:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8036844:	681a      	ldr	r2, [r3, #0]
 8036846:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803684a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 803684e:	4611      	mov	r1, r2
 8036850:	6818      	ldr	r0, [r3, #0]
 8036852:	f7ff fe81 	bl	8036558 <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE>
 8036856:	4603      	mov	r3, r0
 8036858:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119

	if (error == Errors::Success) {
 803685c:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8036860:	2b00      	cmp	r3, #0
 8036862:	d134      	bne.n	80368ce <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures12GetBodyFrameEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x116>
		memcpy(Buffer.data(), resp.Data.data(), resp.Size);
 8036864:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8036868:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 803686c:	681b      	ldr	r3, [r3, #0]
 803686e:	4618      	mov	r0, r3
 8036870:	f000 fd31 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8036874:	4604      	mov	r4, r0
 8036876:	f107 0310 	add.w	r3, r7, #16
 803687a:	3304      	adds	r3, #4
 803687c:	4618      	mov	r0, r3
 803687e:	f000 fd2a 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8036882:	4601      	mov	r1, r0
 8036884:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8036888:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 803688c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8036890:	461a      	mov	r2, r3
 8036892:	4620      	mov	r0, r4
 8036894:	f005 f9f8 	bl	803bc88 <memcpy>
		responce.Data = Buffer.data();
 8036898:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803689c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80368a0:	681b      	ldr	r3, [r3, #0]
 80368a2:	4618      	mov	r0, r3
 80368a4:	f000 fd17 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 80368a8:	4602      	mov	r2, r0
 80368aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80368ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80368b2:	681b      	ldr	r3, [r3, #0]
 80368b4:	601a      	str	r2, [r3, #0]
		responce.ResponceSize = resp.Size;
 80368b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80368ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80368be:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80368c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80368c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80368ca:	681b      	ldr	r3, [r3, #0]
 80368cc:	711a      	strb	r2, [r3, #4]
	}

	return error;
 80368ce:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
}
 80368d2:	4618      	mov	r0, r3
 80368d4:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80368d8:	46bd      	mov	sp, r7
 80368da:	bd90      	pop	{r4, r7, pc}
 80368dc:	0002141c 	.word	0x0002141c

080368e0 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures19GetIMUContainerInfoEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(GetIMUContainerInfo) {
 80368e0:	b590      	push	{r4, r7, lr}
 80368e2:	b087      	sub	sp, #28
 80368e4:	af00      	add	r7, sp, #0
 80368e6:	6178      	str	r0, [r7, #20]
 80368e8:	6139      	str	r1, [r7, #16]
 80368ea:	60fa      	str	r2, [r7, #12]
 80368ec:	60bb      	str	r3, [r7, #8]
	responce = ctx.FQueues.IMUFrames.GetInfo();
 80368ee:	693a      	ldr	r2, [r7, #16]
 80368f0:	4b09      	ldr	r3, [pc, #36]	; (8036918 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures19GetIMUContainerInfoEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x38>)
 80368f2:	4413      	add	r3, r2
 80368f4:	68bc      	ldr	r4, [r7, #8]
 80368f6:	463a      	mov	r2, r7
 80368f8:	4619      	mov	r1, r3
 80368fa:	4610      	mov	r0, r2
 80368fc:	f002 fafc 	bl	8038ef8 <_ZNK10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE7GetInfoEv>
 8036900:	4622      	mov	r2, r4
 8036902:	463b      	mov	r3, r7
 8036904:	6819      	ldr	r1, [r3, #0]
 8036906:	6011      	str	r1, [r2, #0]
 8036908:	889b      	ldrh	r3, [r3, #4]
 803690a:	8093      	strh	r3, [r2, #4]
	return Errors::Success;
 803690c:	2300      	movs	r3, #0
}
 803690e:	4618      	mov	r0, r3
 8036910:	371c      	adds	r7, #28
 8036912:	46bd      	mov	sp, r7
 8036914:	bd90      	pop	{r4, r7, pc}
 8036916:	bf00      	nop
 8036918:	0003498c 	.word	0x0003498c

0803691c <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures20GetBodyContainerInfoEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(GetBodyContainerInfo) {
 803691c:	b590      	push	{r4, r7, lr}
 803691e:	b087      	sub	sp, #28
 8036920:	af00      	add	r7, sp, #0
 8036922:	6178      	str	r0, [r7, #20]
 8036924:	6139      	str	r1, [r7, #16]
 8036926:	60fa      	str	r2, [r7, #12]
 8036928:	60bb      	str	r3, [r7, #8]
	responce = ctx.FQueues.BodyPos.GetInfo();
 803692a:	693a      	ldr	r2, [r7, #16]
 803692c:	4b09      	ldr	r3, [pc, #36]	; (8036954 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures20GetBodyContainerInfoEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x38>)
 803692e:	4413      	add	r3, r2
 8036930:	68bc      	ldr	r4, [r7, #8]
 8036932:	463a      	mov	r2, r7
 8036934:	4619      	mov	r1, r3
 8036936:	4610      	mov	r0, r2
 8036938:	f002 fafb 	bl	8038f32 <_ZNK10FrameQueueIN11FrameQueues12BodyResponceELj300EE7GetInfoEv>
 803693c:	4622      	mov	r2, r4
 803693e:	463b      	mov	r3, r7
 8036940:	6819      	ldr	r1, [r3, #0]
 8036942:	6011      	str	r1, [r2, #0]
 8036944:	889b      	ldrh	r3, [r3, #4]
 8036946:	8093      	strh	r3, [r2, #4]
	return Errors::Success;
 8036948:	2300      	movs	r3, #0
}
 803694a:	4618      	mov	r0, r3
 803694c:	371c      	adds	r7, #28
 803694e:	46bd      	mov	sp, r7
 8036950:	bd90      	pop	{r4, r7, pc}
 8036952:	bf00      	nop
 8036954:	0002141c 	.word	0x0002141c

08036958 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures12GetIMULatestEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(GetIMULatest) {
 8036958:	b5b0      	push	{r4, r5, r7, lr}
 803695a:	b08a      	sub	sp, #40	; 0x28
 803695c:	af00      	add	r7, sp, #0
 803695e:	6278      	str	r0, [r7, #36]	; 0x24
 8036960:	6239      	str	r1, [r7, #32]
 8036962:	61fa      	str	r2, [r7, #28]
 8036964:	61bb      	str	r3, [r7, #24]
	responce = ctx.IMU.GetFrame();
 8036966:	6a3a      	ldr	r2, [r7, #32]
 8036968:	4b09      	ldr	r3, [pc, #36]	; (8036990 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures12GetIMULatestEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x38>)
 803696a:	4413      	add	r3, r2
 803696c:	69bc      	ldr	r4, [r7, #24]
 803696e:	463a      	mov	r2, r7
 8036970:	4619      	mov	r1, r3
 8036972:	4610      	mov	r0, r2
 8036974:	f7fe fe83 	bl	803567e <_ZNK9IMUDevice8GetFrameEv>
 8036978:	4625      	mov	r5, r4
 803697a:	463c      	mov	r4, r7
 803697c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 803697e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8036980:	6823      	ldr	r3, [r4, #0]
 8036982:	602b      	str	r3, [r5, #0]
	return Errors::Success;
 8036984:	2300      	movs	r3, #0
}
 8036986:	4618      	mov	r0, r3
 8036988:	3728      	adds	r7, #40	; 0x28
 803698a:	46bd      	mov	sp, r7
 803698c:	bdb0      	pop	{r4, r5, r7, pc}
 803698e:	bf00      	nop
 8036990:	00020268 	.word	0x00020268

08036994 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures21ResetStrobeContainersEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(ResetStrobeContainers) {
 8036994:	b580      	push	{r7, lr}
 8036996:	b084      	sub	sp, #16
 8036998:	af00      	add	r7, sp, #0
 803699a:	60f8      	str	r0, [r7, #12]
 803699c:	60b9      	str	r1, [r7, #8]
 803699e:	607a      	str	r2, [r7, #4]
 80369a0:	603b      	str	r3, [r7, #0]
	ctx.FQueues.Clear();
 80369a2:	68ba      	ldr	r2, [r7, #8]
 80369a4:	4b04      	ldr	r3, [pc, #16]	; (80369b8 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures21ResetStrobeContainersEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x24>)
 80369a6:	4413      	add	r3, r2
 80369a8:	4618      	mov	r0, r3
 80369aa:	f7ff fcd7 	bl	803635c <_ZN11FrameQueues5ClearEv>
	return Errors::Success;
 80369ae:	2300      	movs	r3, #0
}
 80369b0:	4618      	mov	r0, r3
 80369b2:	3710      	adds	r7, #16
 80369b4:	46bd      	mov	sp, r7
 80369b6:	bd80      	pop	{r7, pc}
 80369b8:	0002141c 	.word	0x0002141c

080369bc <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures18SetIMUStrobeOffsetEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(SetIMUStrobeOffset) {
 80369bc:	b580      	push	{r7, lr}
 80369be:	b084      	sub	sp, #16
 80369c0:	af00      	add	r7, sp, #0
 80369c2:	60f8      	str	r0, [r7, #12]
 80369c4:	60b9      	str	r1, [r7, #8]
 80369c6:	607a      	str	r2, [r7, #4]
 80369c8:	603b      	str	r3, [r7, #0]
	ctx.SObservers.SetOffset(0, request.Value);
 80369ca:	68ba      	ldr	r2, [r7, #8]
 80369cc:	4b06      	ldr	r3, [pc, #24]	; (80369e8 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures18SetIMUStrobeOffsetEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x2c>)
 80369ce:	4413      	add	r3, r2
 80369d0:	687a      	ldr	r2, [r7, #4]
 80369d2:	7812      	ldrb	r2, [r2, #0]
 80369d4:	2100      	movs	r1, #0
 80369d6:	4618      	mov	r0, r3
 80369d8:	f7ff fc35 	bl	8036246 <_ZN15StrobeObservers9SetOffsetEjh>
	return Errors::Success;
 80369dc:	2300      	movs	r3, #0
}
 80369de:	4618      	mov	r0, r3
 80369e0:	3710      	adds	r7, #16
 80369e2:	46bd      	mov	sp, r7
 80369e4:	bd80      	pop	{r7, pc}
 80369e6:	bf00      	nop
 80369e8:	00021410 	.word	0x00021410

080369ec <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures19SetBodyStrobeOffsetEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(SetBodyStrobeOffset) {
 80369ec:	b580      	push	{r7, lr}
 80369ee:	b084      	sub	sp, #16
 80369f0:	af00      	add	r7, sp, #0
 80369f2:	60f8      	str	r0, [r7, #12]
 80369f4:	60b9      	str	r1, [r7, #8]
 80369f6:	607a      	str	r2, [r7, #4]
 80369f8:	603b      	str	r3, [r7, #0]
	ctx.SObservers.SetOffset(1, request.Value);
 80369fa:	68ba      	ldr	r2, [r7, #8]
 80369fc:	4b06      	ldr	r3, [pc, #24]	; (8036a18 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures19SetBodyStrobeOffsetEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x2c>)
 80369fe:	4413      	add	r3, r2
 8036a00:	687a      	ldr	r2, [r7, #4]
 8036a02:	7812      	ldrb	r2, [r2, #0]
 8036a04:	2101      	movs	r1, #1
 8036a06:	4618      	mov	r0, r3
 8036a08:	f7ff fc1d 	bl	8036246 <_ZN15StrobeObservers9SetOffsetEjh>
	return Errors::Success;
 8036a0c:	2300      	movs	r3, #0
}
 8036a0e:	4618      	mov	r0, r3
 8036a10:	3710      	adds	r7, #16
 8036a12:	46bd      	mov	sp, r7
 8036a14:	bd80      	pop	{r7, pc}
 8036a16:	bf00      	nop
 8036a18:	00021410 	.word	0x00021410

08036a1c <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures14GetStrobeWidthEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(GetStrobeWidth) {
 8036a1c:	b580      	push	{r7, lr}
 8036a1e:	b086      	sub	sp, #24
 8036a20:	af00      	add	r7, sp, #0
 8036a22:	6178      	str	r0, [r7, #20]
 8036a24:	6139      	str	r1, [r7, #16]
 8036a26:	60fa      	str	r2, [r7, #12]
 8036a28:	60bb      	str	r3, [r7, #8]
	responce.Value = uint8_t(ctx.SFilter.GetStrobeDuration());
 8036a2a:	693a      	ldr	r2, [r7, #16]
 8036a2c:	4b09      	ldr	r3, [pc, #36]	; (8036a54 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures14GetStrobeWidthEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x38>)
 8036a2e:	4413      	add	r3, r2
 8036a30:	4618      	mov	r0, r3
 8036a32:	f7ff fb3d 	bl	80360b0 <_ZNK12StrobeFilter17GetStrobeDurationEv>
 8036a36:	eef0 7a40 	vmov.f32	s15, s0
 8036a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8036a3e:	edc7 7a01 	vstr	s15, [r7, #4]
 8036a42:	793b      	ldrb	r3, [r7, #4]
 8036a44:	b2da      	uxtb	r2, r3
 8036a46:	68bb      	ldr	r3, [r7, #8]
 8036a48:	701a      	strb	r2, [r3, #0]
	return Errors::Success;
 8036a4a:	2300      	movs	r3, #0
}
 8036a4c:	4618      	mov	r0, r3
 8036a4e:	3718      	adds	r7, #24
 8036a50:	46bd      	mov	sp, r7
 8036a52:	bd80      	pop	{r7, pc}
 8036a54:	000213c8 	.word	0x000213c8

08036a58 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures21ConfigureStrobeFilterEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(ConfigureStrobeFilter) {
 8036a58:	b580      	push	{r7, lr}
 8036a5a:	b084      	sub	sp, #16
 8036a5c:	af00      	add	r7, sp, #0
 8036a5e:	60f8      	str	r0, [r7, #12]
 8036a60:	60b9      	str	r1, [r7, #8]
 8036a62:	607a      	str	r2, [r7, #4]
 8036a64:	603b      	str	r3, [r7, #0]
	ctx.SFilter.Configure(request.TargetDuration, request.DurationThreshold);
 8036a66:	68ba      	ldr	r2, [r7, #8]
 8036a68:	4b06      	ldr	r3, [pc, #24]	; (8036a84 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures21ConfigureStrobeFilterEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x2c>)
 8036a6a:	4413      	add	r3, r2
 8036a6c:	687a      	ldr	r2, [r7, #4]
 8036a6e:	7811      	ldrb	r1, [r2, #0]
 8036a70:	687a      	ldr	r2, [r7, #4]
 8036a72:	7852      	ldrb	r2, [r2, #1]
 8036a74:	4618      	mov	r0, r3
 8036a76:	f7ff fb07 	bl	8036088 <_ZN12StrobeFilter9ConfigureEhh>
	return Errors::Success;
 8036a7a:	2300      	movs	r3, #0
}
 8036a7c:	4618      	mov	r0, r3
 8036a7e:	3710      	adds	r7, #16
 8036a80:	46bd      	mov	sp, r7
 8036a82:	bd80      	pop	{r7, pc}
 8036a84:	000213c8 	.word	0x000213c8

08036a88 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures10GetVersionEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(GetVersion) {
 8036a88:	b480      	push	{r7}
 8036a8a:	b085      	sub	sp, #20
 8036a8c:	af00      	add	r7, sp, #0
 8036a8e:	60f8      	str	r0, [r7, #12]
 8036a90:	60b9      	str	r1, [r7, #8]
 8036a92:	607a      	str	r2, [r7, #4]
 8036a94:	603b      	str	r3, [r7, #0]
	responce.Major = ctx.Version.Major;
 8036a96:	68bb      	ldr	r3, [r7, #8]
 8036a98:	781a      	ldrb	r2, [r3, #0]
 8036a9a:	683b      	ldr	r3, [r7, #0]
 8036a9c:	701a      	strb	r2, [r3, #0]
	responce.Minor = ctx.Version.Minor;
 8036a9e:	68bb      	ldr	r3, [r7, #8]
 8036aa0:	785a      	ldrb	r2, [r3, #1]
 8036aa2:	683b      	ldr	r3, [r7, #0]
 8036aa4:	705a      	strb	r2, [r3, #1]
	return Errors::Success;
 8036aa6:	2300      	movs	r3, #0
}
 8036aa8:	4618      	mov	r0, r3
 8036aaa:	3714      	adds	r7, #20
 8036aac:	46bd      	mov	sp, r7
 8036aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036ab2:	4770      	bx	lr

08036ab4 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures15BodySendForwardEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(BodySendForward) {
 8036ab4:	b580      	push	{r7, lr}
 8036ab6:	b08c      	sub	sp, #48	; 0x30
 8036ab8:	af02      	add	r7, sp, #8
 8036aba:	60f8      	str	r0, [r7, #12]
 8036abc:	60b9      	str	r1, [r7, #8]
 8036abe:	607a      	str	r2, [r7, #4]
 8036ac0:	603b      	str	r3, [r7, #0]
	auto txBuf = request.Data;
 8036ac2:	687b      	ldr	r3, [r7, #4]
 8036ac4:	681b      	ldr	r3, [r3, #0]
 8036ac6:	627b      	str	r3, [r7, #36]	; 0x24
	auto txSize = request.RequestSize;
 8036ac8:	687b      	ldr	r3, [r7, #4]
 8036aca:	791b      	ldrb	r3, [r3, #4]
 8036acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	auto rxBuf = Buffer.data();
 8036ad0:	68fb      	ldr	r3, [r7, #12]
 8036ad2:	4618      	mov	r0, r3
 8036ad4:	f000 fbff 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8036ad8:	61f8      	str	r0, [r7, #28]
	auto rxSize = request.ResponceSize;
 8036ada:	687b      	ldr	r3, [r7, #4]
 8036adc:	795b      	ldrb	r3, [r3, #5]
 8036ade:	76fb      	strb	r3, [r7, #27]

	auto status = ctx.Body.Synchronize(txBuf, txSize, rxBuf, rxSize);
 8036ae0:	68bb      	ldr	r3, [r7, #8]
 8036ae2:	f503 6024 	add.w	r0, r3, #2624	; 0xa40
 8036ae6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8036aea:	7efb      	ldrb	r3, [r7, #27]
 8036aec:	9300      	str	r3, [sp, #0]
 8036aee:	69fb      	ldr	r3, [r7, #28]
 8036af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8036af2:	f7fe faa3 	bl	803503c <_ZN10BodyClient11SynchronizeEPKhhPhh>
 8036af6:	6178      	str	r0, [r7, #20]
	auto error = ConvertBodyError(status);
 8036af8:	6979      	ldr	r1, [r7, #20]
 8036afa:	68f8      	ldr	r0, [r7, #12]
 8036afc:	f7ff fd2c 	bl	8036558 <_ZN14RequestHandler16ConvertBodyErrorEN10BodyClient6StatusE>
 8036b00:	4603      	mov	r3, r0
 8036b02:	74fb      	strb	r3, [r7, #19]

	if (error == Errors::Success) {
 8036b04:	7cfb      	ldrb	r3, [r7, #19]
 8036b06:	2b00      	cmp	r3, #0
 8036b08:	d10a      	bne.n	8036b20 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures15BodySendForwardEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x6c>
		responce.Data = Buffer.data();
 8036b0a:	68fb      	ldr	r3, [r7, #12]
 8036b0c:	4618      	mov	r0, r3
 8036b0e:	f000 fbe2 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8036b12:	4602      	mov	r2, r0
 8036b14:	683b      	ldr	r3, [r7, #0]
 8036b16:	601a      	str	r2, [r3, #0]
		responce.ResponceSize = request.ResponceSize;
 8036b18:	687b      	ldr	r3, [r7, #4]
 8036b1a:	795a      	ldrb	r2, [r3, #5]
 8036b1c:	683b      	ldr	r3, [r7, #0]
 8036b1e:	711a      	strb	r2, [r3, #4]
	}

	return error;
 8036b20:	7cfb      	ldrb	r3, [r7, #19]
}
 8036b22:	4618      	mov	r0, r3
 8036b24:	3728      	adds	r7, #40	; 0x28
 8036b26:	46bd      	mov	sp, r7
 8036b28:	bd80      	pop	{r7, pc}

08036b2a <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures13BodySendQueueEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(BodySendQueue) {
 8036b2a:	b590      	push	{r4, r7, lr}
 8036b2c:	b0c7      	sub	sp, #284	; 0x11c
 8036b2e:	af00      	add	r7, sp, #0
 8036b30:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8036b34:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8036b38:	6020      	str	r0, [r4, #0]
 8036b3a:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8036b3e:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8036b42:	6001      	str	r1, [r0, #0]
 8036b44:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8036b48:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8036b4c:	600a      	str	r2, [r1, #0]
 8036b4e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8036b52:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8036b56:	6013      	str	r3, [r2, #0]
	if (ctx.BQueue.IsFull())
 8036b58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036b5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8036b60:	681b      	ldr	r3, [r3, #0]
 8036b62:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8036b66:	4618      	mov	r0, r3
 8036b68:	f7ff f946 	bl	8035df8 <_ZNK9BodyQueue6IsFullEv>
 8036b6c:	4603      	mov	r3, r0
 8036b6e:	2b00      	cmp	r3, #0
 8036b70:	d001      	beq.n	8036b76 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures13BodySendQueueEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x4c>
		return Errors::BodyQueueFull;
 8036b72:	2309      	movs	r3, #9
 8036b74:	e039      	b.n	8036bea <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures13BodySendQueueEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0xc0>

	BodyQueue::Request newReq;

	memcpy(newReq.Data.data(), request.Data, request.RequestSize);
 8036b76:	f107 0314 	add.w	r3, r7, #20
 8036b7a:	4618      	mov	r0, r3
 8036b7c:	f000 fbab 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8036b80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036b84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8036b88:	681b      	ldr	r3, [r3, #0]
 8036b8a:	6819      	ldr	r1, [r3, #0]
 8036b8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036b90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8036b94:	681b      	ldr	r3, [r3, #0]
 8036b96:	791b      	ldrb	r3, [r3, #4]
 8036b98:	461a      	mov	r2, r3
 8036b9a:	f005 f875 	bl	803bc88 <memcpy>
	newReq.TxSize = request.RequestSize;
 8036b9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036ba2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8036ba6:	681b      	ldr	r3, [r3, #0]
 8036ba8:	791a      	ldrb	r2, [r3, #4]
 8036baa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8036bb2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	newReq.RxSize = request.ResponceSize;
 8036bb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036bba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8036bbe:	681b      	ldr	r3, [r3, #0]
 8036bc0:	795a      	ldrb	r2, [r3, #5]
 8036bc2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8036bca:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

	ctx.BQueue.AddRequest(newReq);
 8036bce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036bd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8036bd6:	681b      	ldr	r3, [r3, #0]
 8036bd8:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8036bdc:	f107 0214 	add.w	r2, r7, #20
 8036be0:	4611      	mov	r1, r2
 8036be2:	4618      	mov	r0, r3
 8036be4:	f7ff f916 	bl	8035e14 <_ZN9BodyQueue10AddRequestERKNS_7RequestE>

	return Errors::Success;
 8036be8:	2300      	movs	r3, #0
}
 8036bea:	4618      	mov	r0, r3
 8036bec:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8036bf0:	46bd      	mov	sp, r7
 8036bf2:	bd90      	pop	{r4, r7, pc}

08036bf4 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures16GetBodyQueueInfoEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(GetBodyQueueInfo) {
 8036bf4:	b580      	push	{r7, lr}
 8036bf6:	b084      	sub	sp, #16
 8036bf8:	af00      	add	r7, sp, #0
 8036bfa:	60f8      	str	r0, [r7, #12]
 8036bfc:	60b9      	str	r1, [r7, #8]
 8036bfe:	607a      	str	r2, [r7, #4]
 8036c00:	603b      	str	r3, [r7, #0]
	responce.Size = ctx.BQueue.GetSize();
 8036c02:	68bb      	ldr	r3, [r7, #8]
 8036c04:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8036c08:	4618      	mov	r0, r3
 8036c0a:	f7ff f947 	bl	8035e9c <_ZNK9BodyQueue7GetSizeEv>
 8036c0e:	4603      	mov	r3, r0
 8036c10:	b29a      	uxth	r2, r3
 8036c12:	683b      	ldr	r3, [r7, #0]
 8036c14:	801a      	strh	r2, [r3, #0]
	responce.Capacity= ctx.BQueue.GetCapacity(); // Placeholder
 8036c16:	68bb      	ldr	r3, [r7, #8]
 8036c18:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8036c1c:	4618      	mov	r0, r3
 8036c1e:	f7ff f94a 	bl	8035eb6 <_ZNK9BodyQueue11GetCapacityEv>
 8036c22:	4603      	mov	r3, r0
 8036c24:	b29a      	uxth	r2, r3
 8036c26:	683b      	ldr	r3, [r7, #0]
 8036c28:	805a      	strh	r2, [r3, #2]
	return Errors::Success;
 8036c2a:	2300      	movs	r3, #0
}
 8036c2c:	4618      	mov	r0, r3
 8036c2e:	3710      	adds	r7, #16
 8036c30:	46bd      	mov	sp, r7
 8036c32:	bd80      	pop	{r7, pc}

08036c34 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures18SetBodyQueuePeriodEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>:

HANDLER(SetBodyQueuePeriod) {
 8036c34:	b580      	push	{r7, lr}
 8036c36:	b084      	sub	sp, #16
 8036c38:	af00      	add	r7, sp, #0
 8036c3a:	60f8      	str	r0, [r7, #12]
 8036c3c:	60b9      	str	r1, [r7, #8]
 8036c3e:	607a      	str	r2, [r7, #4]
 8036c40:	603b      	str	r3, [r7, #0]
	if (request.Ms == 0)
 8036c42:	687b      	ldr	r3, [r7, #4]
 8036c44:	781b      	ldrb	r3, [r3, #0]
 8036c46:	2b00      	cmp	r3, #0
 8036c48:	d101      	bne.n	8036c4e <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures18SetBodyQueuePeriodEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x1a>
		return Errors::BadBodyQueuePeriod;
 8036c4a:	2308      	movs	r3, #8
 8036c4c:	e009      	b.n	8036c62 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures18SetBodyQueuePeriodEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE+0x2e>
	ctx.BQueue.SetPeriod(request.Ms);
 8036c4e:	68bb      	ldr	r3, [r7, #8]
 8036c50:	f603 2264 	addw	r2, r3, #2660	; 0xa64
 8036c54:	687b      	ldr	r3, [r7, #4]
 8036c56:	781b      	ldrb	r3, [r3, #0]
 8036c58:	4619      	mov	r1, r3
 8036c5a:	4610      	mov	r0, r2
 8036c5c:	f7ff f8fe 	bl	8035e5c <_ZN9BodyQueue9SetPeriodEj>
	return Errors::Success;
 8036c60:	2300      	movs	r3, #0
}
 8036c62:	4618      	mov	r0, r3
 8036c64:	3710      	adds	r7, #16
 8036c66:	46bd      	mov	sp, r7
 8036c68:	bd80      	pop	{r7, pc}
	...

08036c6c <_ZN11Motherboard18BodyStrobeCallbackER18MotherboardContext>:
	MotherboardContext Ctx;
	RequestHandler Handler;

	BufferType DummyBuf;
private:
	static void BodyStrobeCallback(MotherboardContext &ctx) {
 8036c6c:	b5b0      	push	{r4, r5, r7, lr}
 8036c6e:	b0d0      	sub	sp, #320	; 0x140
 8036c70:	af02      	add	r7, sp, #8
 8036c72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8036c76:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8036c7a:	6018      	str	r0, [r3, #0]
		struct FrameQueues::BodyResponce responce;
		auto request = BodyMsgs::Requests::GetAllPos { };
 8036c7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8036c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8036c84:	4a32      	ldr	r2, [pc, #200]	; (8036d50 <_ZN11Motherboard18BodyStrobeCallbackER18MotherboardContext+0xe4>)
 8036c86:	461c      	mov	r4, r3
 8036c88:	4615      	mov	r5, r2
 8036c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8036c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8036c8e:	682b      	ldr	r3, [r5, #0]
 8036c90:	6023      	str	r3, [r4, #0]

		auto &txData = request.Data;
 8036c92:	f107 0308 	add.w	r3, r7, #8
 8036c96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		auto &txSize = request.RequestSize;
 8036c9a:	f107 0308 	add.w	r3, r7, #8
 8036c9e:	330c      	adds	r3, #12
 8036ca0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		auto rxData = responce.Data.data();
 8036ca4:	f107 031c 	add.w	r3, r7, #28
 8036ca8:	3304      	adds	r3, #4
 8036caa:	4618      	mov	r0, r3
 8036cac:	f000 fb13 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8036cb0:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
		auto &rxSize = request.ResponceSize;
 8036cb4:	f107 0308 	add.w	r3, r7, #8
 8036cb8:	3310      	adds	r3, #16
 8036cba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		BodyClient::Status status;
		status = ctx.Body.Synchronize(txData, txSize, rxData, rxSize);
 8036cbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8036cc2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8036cc6:	681b      	ldr	r3, [r3, #0]
 8036cc8:	f503 6024 	add.w	r0, r3, #2624	; 0xa40
 8036ccc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8036cd0:	681b      	ldr	r3, [r3, #0]
 8036cd2:	b2da      	uxtb	r2, r3
 8036cd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8036cd8:	681b      	ldr	r3, [r3, #0]
 8036cda:	b2db      	uxtb	r3, r3
 8036cdc:	9300      	str	r3, [sp, #0]
 8036cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8036ce2:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8036ce6:	f7fe f9a9 	bl	803503c <_ZN10BodyClient11SynchronizeEPKhhPhh>
 8036cea:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

		responce.Status = status;
 8036cee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8036cf2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8036cf6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8036cfa:	601a      	str	r2, [r3, #0]
		if (status == BodyClient::Status::Success)
 8036cfc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8036d00:	2b00      	cmp	r3, #0
 8036d02:	d10c      	bne.n	8036d1e <_ZN11Motherboard18BodyStrobeCallbackER18MotherboardContext+0xb2>
			responce.Size = request.ResponceSize;
 8036d04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8036d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8036d0c:	691b      	ldr	r3, [r3, #16]
 8036d0e:	b2da      	uxtb	r2, r3
 8036d10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8036d14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8036d18:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8036d1c:	e006      	b.n	8036d2c <_ZN11Motherboard18BodyStrobeCallbackER18MotherboardContext+0xc0>
		else
			responce.Size = 0;
 8036d1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8036d22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8036d26:	2200      	movs	r2, #0
 8036d28:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

		ctx.FQueues.BodyPos.Add(responce);
 8036d2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8036d30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8036d34:	681a      	ldr	r2, [r3, #0]
 8036d36:	4b07      	ldr	r3, [pc, #28]	; (8036d54 <_ZN11Motherboard18BodyStrobeCallbackER18MotherboardContext+0xe8>)
 8036d38:	4413      	add	r3, r2
 8036d3a:	f107 021c 	add.w	r2, r7, #28
 8036d3e:	4611      	mov	r1, r2
 8036d40:	4618      	mov	r0, r3
 8036d42:	f002 f913 	bl	8038f6c <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EE3AddERKS1_>
	}
 8036d46:	bf00      	nop
 8036d48:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8036d4c:	46bd      	mov	sp, r7
 8036d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8036d50:	0803d3f0 	.word	0x0803d3f0
 8036d54:	0002141c 	.word	0x0002141c

08036d58 <_ZN11Motherboard17ImuStrobeCallbackER18MotherboardContext>:

	static void ImuStrobeCallback(MotherboardContext &ctx) {
 8036d58:	b590      	push	{r4, r7, lr}
 8036d5a:	b089      	sub	sp, #36	; 0x24
 8036d5c:	af00      	add	r7, sp, #0
 8036d5e:	6078      	str	r0, [r7, #4]
		ctx.FQueues.IMUFrames.Add(ctx.IMU.GetFrame());
 8036d60:	687b      	ldr	r3, [r7, #4]
 8036d62:	4c0a      	ldr	r4, [pc, #40]	; (8036d8c <_ZN11Motherboard17ImuStrobeCallbackER18MotherboardContext+0x34>)
 8036d64:	441c      	add	r4, r3
 8036d66:	687a      	ldr	r2, [r7, #4]
 8036d68:	4b09      	ldr	r3, [pc, #36]	; (8036d90 <_ZN11Motherboard17ImuStrobeCallbackER18MotherboardContext+0x38>)
 8036d6a:	4413      	add	r3, r2
 8036d6c:	f107 020c 	add.w	r2, r7, #12
 8036d70:	4619      	mov	r1, r3
 8036d72:	4610      	mov	r0, r2
 8036d74:	f7fe fc83 	bl	803567e <_ZNK9IMUDevice8GetFrameEv>
 8036d78:	f107 030c 	add.w	r3, r7, #12
 8036d7c:	4619      	mov	r1, r3
 8036d7e:	4620      	mov	r0, r4
 8036d80:	f002 f918 	bl	8038fb4 <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE3AddERKS2_>
	}
 8036d84:	bf00      	nop
 8036d86:	3724      	adds	r7, #36	; 0x24
 8036d88:	46bd      	mov	sp, r7
 8036d8a:	bd90      	pop	{r4, r7, pc}
 8036d8c:	0003498c 	.word	0x0003498c
 8036d90:	00020268 	.word	0x00020268

08036d94 <_ZN11Motherboard17RegisterObserversEv>:

	void RegisterObservers() {
 8036d94:	b580      	push	{r7, lr}
 8036d96:	b082      	sub	sp, #8
 8036d98:	af00      	add	r7, sp, #0
 8036d9a:	6078      	str	r0, [r7, #4]
		Ctx.SObservers.RegisterObserver(0, Motherboard::ImuStrobeCallback);
 8036d9c:	687a      	ldr	r2, [r7, #4]
 8036d9e:	4b09      	ldr	r3, [pc, #36]	; (8036dc4 <_ZN11Motherboard17RegisterObserversEv+0x30>)
 8036da0:	4413      	add	r3, r2
 8036da2:	4a09      	ldr	r2, [pc, #36]	; (8036dc8 <_ZN11Motherboard17RegisterObserversEv+0x34>)
 8036da4:	2100      	movs	r1, #0
 8036da6:	4618      	mov	r0, r3
 8036da8:	f7ff fa63 	bl	8036272 <_ZN15StrobeObservers16RegisterObserverEhPFvR18MotherboardContextE>
		Ctx.SObservers.RegisterObserver(0, Motherboard::BodyStrobeCallback);
 8036dac:	687a      	ldr	r2, [r7, #4]
 8036dae:	4b05      	ldr	r3, [pc, #20]	; (8036dc4 <_ZN11Motherboard17RegisterObserversEv+0x30>)
 8036db0:	4413      	add	r3, r2
 8036db2:	4a06      	ldr	r2, [pc, #24]	; (8036dcc <_ZN11Motherboard17RegisterObserversEv+0x38>)
 8036db4:	2100      	movs	r1, #0
 8036db6:	4618      	mov	r0, r3
 8036db8:	f7ff fa5b 	bl	8036272 <_ZN15StrobeObservers16RegisterObserverEhPFvR18MotherboardContextE>
	}
 8036dbc:	bf00      	nop
 8036dbe:	3708      	adds	r7, #8
 8036dc0:	46bd      	mov	sp, r7
 8036dc2:	bd80      	pop	{r7, pc}
 8036dc4:	00021410 	.word	0x00021410
 8036dc8:	08036d59 	.word	0x08036d59
 8036dcc:	08036c6d 	.word	0x08036c6d

08036dd0 <_ZN11Motherboard12UpdateTimersEv>:

	void UpdateTimers() {
 8036dd0:	b580      	push	{r7, lr}
 8036dd2:	b082      	sub	sp, #8
 8036dd4:	af00      	add	r7, sp, #0
 8036dd6:	6078      	str	r0, [r7, #4]
		Ctx.Head.Output.CheckTimer();
 8036dd8:	687b      	ldr	r3, [r7, #4]
 8036dda:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8036dde:	4618      	mov	r0, r3
 8036de0:	f7fe ff00 	bl	8035be4 <_ZN6HeadIO6Sender10CheckTimerEv>
		Ctx.IMU.CheckTimer();
 8036de4:	687a      	ldr	r2, [r7, #4]
 8036de6:	4b04      	ldr	r3, [pc, #16]	; (8036df8 <_ZN11Motherboard12UpdateTimersEv+0x28>)
 8036de8:	4413      	add	r3, r2
 8036dea:	4618      	mov	r0, r3
 8036dec:	f7fe fc3c 	bl	8035668 <_ZN9IMUDevice10CheckTimerEv>
	}
 8036df0:	bf00      	nop
 8036df2:	3708      	adds	r7, #8
 8036df4:	46bd      	mov	sp, r7
 8036df6:	bd80      	pop	{r7, pc}
 8036df8:	00020268 	.word	0x00020268

08036dfc <_ZN11Motherboard14HandleRequestsEv>:

	void HandleRequests() {
 8036dfc:	b580      	push	{r7, lr}
 8036dfe:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8036e02:	af00      	add	r7, sp, #0
 8036e04:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8036e08:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8036e0c:	6018      	str	r0, [r3, #0]
		if (!Ctx.Head.Input.HasRequest())
 8036e0e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8036e12:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8036e16:	681b      	ldr	r3, [r3, #0]
 8036e18:	3304      	adds	r3, #4
 8036e1a:	4618      	mov	r0, r3
 8036e1c:	f7fe fdbd 	bl	803599a <_ZN6HeadIO8Listener10HasRequestEv>
 8036e20:	4603      	mov	r3, r0
 8036e22:	f083 0301 	eor.w	r3, r3, #1
 8036e26:	b2db      	uxtb	r3, r3
 8036e28:	2b00      	cmp	r3, #0
 8036e2a:	d12f      	bne.n	8036e8c <_ZN11Motherboard14HandleRequestsEv+0x90>
			return;

		auto request = Ctx.Head.Input.GetRequest();
 8036e2c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8036e30:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8036e34:	681b      	ldr	r3, [r3, #0]
 8036e36:	1d1a      	adds	r2, r3, #4
 8036e38:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8036e3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8036e40:	4611      	mov	r1, r2
 8036e42:	4618      	mov	r0, r3
 8036e44:	f7fe fdba 	bl	80359bc <_ZN6HeadIO8Listener10GetRequestEv>
		auto responce = Handler.Handle(Ctx, request);
 8036e48:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8036e4c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8036e50:	681b      	ldr	r3, [r3, #0]
 8036e52:	4911      	ldr	r1, [pc, #68]	; (8036e98 <_ZN11Motherboard14HandleRequestsEv+0x9c>)
 8036e54:	4419      	add	r1, r3
 8036e56:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8036e5a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8036e5e:	681a      	ldr	r2, [r3, #0]
 8036e60:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8036e64:	f5a3 7002 	sub.w	r0, r3, #520	; 0x208
 8036e68:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8036e6c:	f7ff fbbc 	bl	80365e8 <_ZN14RequestHandler6HandleER18MotherboardContextRKN6HeadIO7RequestE>

		Ctx.Head.Output.AddResponce(responce);
 8036e70:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8036e74:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8036e78:	681b      	ldr	r3, [r3, #0]
 8036e7a:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8036e7e:	f107 0208 	add.w	r2, r7, #8
 8036e82:	4611      	mov	r1, r2
 8036e84:	4618      	mov	r0, r3
 8036e86:	f7fe fe9f 	bl	8035bc8 <_ZN6HeadIO6Sender11AddResponceERKNS_8ResponceE>
 8036e8a:	e000      	b.n	8036e8e <_ZN11Motherboard14HandleRequestsEv+0x92>
			return;
 8036e8c:	bf00      	nop
	}
 8036e8e:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8036e92:	46bd      	mov	sp, r7
 8036e94:	bd80      	pop	{r7, pc}
 8036e96:	bf00      	nop
 8036e98:	00036110 	.word	0x00036110

08036e9c <_ZN11Motherboard15UpdateBodyQueueEv>:

	void UpdateBodyQueue() {
 8036e9c:	b580      	push	{r7, lr}
 8036e9e:	b0c8      	sub	sp, #288	; 0x120
 8036ea0:	af02      	add	r7, sp, #8
 8036ea2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036ea6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8036eaa:	6018      	str	r0, [r3, #0]
		if (!Ctx.BQueue.IsReady())
 8036eac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036eb0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8036eb4:	681b      	ldr	r3, [r3, #0]
 8036eb6:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8036eba:	4618      	mov	r0, r3
 8036ebc:	f7fe ff4c 	bl	8035d58 <_ZNK9BodyQueue7IsReadyEv>
 8036ec0:	4603      	mov	r3, r0
 8036ec2:	f083 0301 	eor.w	r3, r3, #1
 8036ec6:	b2db      	uxtb	r3, r3
 8036ec8:	2b00      	cmp	r3, #0
 8036eca:	d144      	bne.n	8036f56 <_ZN11Motherboard15UpdateBodyQueueEv+0xba>
			return;
		auto request = Ctx.BQueue.GetRequest();
 8036ecc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036ed0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8036ed4:	681b      	ldr	r3, [r3, #0]
 8036ed6:	f603 2264 	addw	r2, r3, #2660	; 0xa64
 8036eda:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036ede:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8036ee2:	4611      	mov	r1, r2
 8036ee4:	4618      	mov	r0, r3
 8036ee6:	f7fe ff53 	bl	8035d90 <_ZN9BodyQueue10GetRequestEv>

		auto txBuf = request.Data.data();
 8036eea:	f107 0308 	add.w	r3, r7, #8
 8036eee:	4618      	mov	r0, r3
 8036ef0:	f000 f9f1 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8036ef4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		auto txSize = request.TxSize;
 8036ef8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036efc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8036f00:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8036f04:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		auto rxBuf = DummyBuf.data();
 8036f08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036f0c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8036f10:	681a      	ldr	r2, [r3, #0]
 8036f12:	4b13      	ldr	r3, [pc, #76]	; (8036f60 <_ZN11Motherboard15UpdateBodyQueueEv+0xc4>)
 8036f14:	4413      	add	r3, r2
 8036f16:	4618      	mov	r0, r3
 8036f18:	f000 f9dd 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8036f1c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		auto rxSize = request.RxSize;
 8036f20:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036f24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8036f28:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8036f2c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

		Ctx.Body.Synchronize(txBuf, txSize, rxBuf, rxSize);
 8036f30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8036f34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8036f38:	681b      	ldr	r3, [r3, #0]
 8036f3a:	f503 6024 	add.w	r0, r3, #2624	; 0xa40
 8036f3e:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8036f42:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8036f46:	9300      	str	r3, [sp, #0]
 8036f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8036f4c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8036f50:	f7fe f874 	bl	803503c <_ZN10BodyClient11SynchronizeEPKhhPhh>
 8036f54:	e000      	b.n	8036f58 <_ZN11Motherboard15UpdateBodyQueueEv+0xbc>
			return;
 8036f56:	bf00      	nop
	}
 8036f58:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8036f5c:	46bd      	mov	sp, r7
 8036f5e:	bd80      	pop	{r7, pc}
 8036f60:	00036210 	.word	0x00036210

08036f64 <_ZN11Motherboard13UpdateStrobesEv>:

	void UpdateStrobes() {
 8036f64:	b5b0      	push	{r4, r5, r7, lr}
 8036f66:	b082      	sub	sp, #8
 8036f68:	af00      	add	r7, sp, #0
 8036f6a:	6078      	str	r0, [r7, #4]
		if (Ctx.SFilter.HasStrobe())
 8036f6c:	687a      	ldr	r2, [r7, #4]
 8036f6e:	4b15      	ldr	r3, [pc, #84]	; (8036fc4 <_ZN11Motherboard13UpdateStrobesEv+0x60>)
 8036f70:	4413      	add	r3, r2
 8036f72:	4618      	mov	r0, r3
 8036f74:	f7ff f8ab 	bl	80360ce <_ZNK12StrobeFilter9HasStrobeEv>
 8036f78:	4603      	mov	r3, r0
 8036f7a:	2b00      	cmp	r3, #0
 8036f7c:	d00d      	beq.n	8036f9a <_ZN11Motherboard13UpdateStrobesEv+0x36>
			Ctx.SObservers.AddStrobe(Ctx.SFilter.GetStrobe());
 8036f7e:	687b      	ldr	r3, [r7, #4]
 8036f80:	4c11      	ldr	r4, [pc, #68]	; (8036fc8 <_ZN11Motherboard13UpdateStrobesEv+0x64>)
 8036f82:	441c      	add	r4, r3
 8036f84:	687a      	ldr	r2, [r7, #4]
 8036f86:	4b0f      	ldr	r3, [pc, #60]	; (8036fc4 <_ZN11Motherboard13UpdateStrobesEv+0x60>)
 8036f88:	4413      	add	r3, r2
 8036f8a:	4618      	mov	r0, r3
 8036f8c:	f7ff f8b0 	bl	80360f0 <_ZN12StrobeFilter9GetStrobeEv>
 8036f90:	4603      	mov	r3, r0
 8036f92:	4619      	mov	r1, r3
 8036f94:	4620      	mov	r0, r4
 8036f96:	f7ff f97e 	bl	8036296 <_ZN15StrobeObservers9AddStrobeEj>

		Ctx.SObservers.TryProcess(Ctx, Ctx.IMU.GetSeq());
 8036f9a:	687b      	ldr	r3, [r7, #4]
 8036f9c:	4c0a      	ldr	r4, [pc, #40]	; (8036fc8 <_ZN11Motherboard13UpdateStrobesEv+0x64>)
 8036f9e:	441c      	add	r4, r3
 8036fa0:	687d      	ldr	r5, [r7, #4]
 8036fa2:	687a      	ldr	r2, [r7, #4]
 8036fa4:	4b09      	ldr	r3, [pc, #36]	; (8036fcc <_ZN11Motherboard13UpdateStrobesEv+0x68>)
 8036fa6:	4413      	add	r3, r2
 8036fa8:	4618      	mov	r0, r3
 8036faa:	f7fe fb7d 	bl	80356a8 <_ZNK9IMUDevice6GetSeqEv>
 8036fae:	4603      	mov	r3, r0
 8036fb0:	461a      	mov	r2, r3
 8036fb2:	4629      	mov	r1, r5
 8036fb4:	4620      	mov	r0, r4
 8036fb6:	f7ff f99e 	bl	80362f6 <_ZN15StrobeObservers10TryProcessER18MotherboardContextj>
	}
 8036fba:	bf00      	nop
 8036fbc:	3708      	adds	r7, #8
 8036fbe:	46bd      	mov	sp, r7
 8036fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8036fc2:	bf00      	nop
 8036fc4:	000213c8 	.word	0x000213c8
 8036fc8:	00021410 	.word	0x00021410
 8036fcc:	00020268 	.word	0x00020268

08036fd0 <_ZN11Motherboard4InitEv>:
public:
	void Init() {
 8036fd0:	b580      	push	{r7, lr}
 8036fd2:	b082      	sub	sp, #8
 8036fd4:	af00      	add	r7, sp, #0
 8036fd6:	6078      	str	r0, [r7, #4]
		Ctx.Head.Input.Init();
 8036fd8:	687b      	ldr	r3, [r7, #4]
 8036fda:	3304      	adds	r3, #4
 8036fdc:	4618      	mov	r0, r3
 8036fde:	f7fe fcd1 	bl	8035984 <_ZN6HeadIO8Listener4InitEv>
		Ctx.IMU.Init();
 8036fe2:	687a      	ldr	r2, [r7, #4]
 8036fe4:	4b04      	ldr	r3, [pc, #16]	; (8036ff8 <_ZN11Motherboard4InitEv+0x28>)
 8036fe6:	4413      	add	r3, r2
 8036fe8:	4618      	mov	r0, r3
 8036fea:	f7fe fb23 	bl	8035634 <_ZN9IMUDevice4InitEv>
	}
 8036fee:	bf00      	nop
 8036ff0:	3708      	adds	r7, #8
 8036ff2:	46bd      	mov	sp, r7
 8036ff4:	bd80      	pop	{r7, pc}
 8036ff6:	bf00      	nop
 8036ff8:	00020268 	.word	0x00020268

08036ffc <_ZN11Motherboard3RunEv>:

	void Run() {
 8036ffc:	b580      	push	{r7, lr}
 8036ffe:	b082      	sub	sp, #8
 8037000:	af00      	add	r7, sp, #0
 8037002:	6078      	str	r0, [r7, #4]
		while (1) {
			UpdateTimers();
 8037004:	6878      	ldr	r0, [r7, #4]
 8037006:	f7ff fee3 	bl	8036dd0 <_ZN11Motherboard12UpdateTimersEv>
			HandleRequests();
 803700a:	6878      	ldr	r0, [r7, #4]
 803700c:	f7ff fef6 	bl	8036dfc <_ZN11Motherboard14HandleRequestsEv>
			UpdateBodyQueue();
 8037010:	6878      	ldr	r0, [r7, #4]
 8037012:	f7ff ff43 	bl	8036e9c <_ZN11Motherboard15UpdateBodyQueueEv>
			UpdateStrobes();
 8037016:	6878      	ldr	r0, [r7, #4]
 8037018:	f7ff ffa4 	bl	8036f64 <_ZN11Motherboard13UpdateStrobesEv>
			UpdateTimers();
 803701c:	e7f2      	b.n	8037004 <_ZN11Motherboard3RunEv+0x8>

0803701e <_ZN11MotherboardC1ERK17MotherboardConfig>:
		}
	}

	Motherboard(const MotherboardConfig &config) :
 803701e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8037020:	b08b      	sub	sp, #44	; 0x2c
 8037022:	af06      	add	r7, sp, #24
 8037024:	60f8      	str	r0, [r7, #12]
 8037026:	60b9      	str	r1, [r7, #8]
			Ctx { config } {
 8037028:	68fb      	ldr	r3, [r7, #12]
 803702a:	607b      	str	r3, [r7, #4]
 803702c:	68be      	ldr	r6, [r7, #8]
 803702e:	466d      	mov	r5, sp
 8037030:	f106 040c 	add.w	r4, r6, #12
 8037034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8037036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8037038:	e894 0003 	ldmia.w	r4, {r0, r1}
 803703c:	e885 0003 	stmia.w	r5, {r0, r1}
 8037040:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8037044:	6878      	ldr	r0, [r7, #4]
 8037046:	f7ff fa2b 	bl	80364a0 <_ZN18MotherboardContextC1E17MotherboardConfig>
		RegisterObservers();
 803704a:	68f8      	ldr	r0, [r7, #12]
 803704c:	f7ff fea2 	bl	8036d94 <_ZN11Motherboard17RegisterObserversEv>
	}
 8037050:	68fb      	ldr	r3, [r7, #12]
 8037052:	4618      	mov	r0, r3
 8037054:	3714      	adds	r7, #20
 8037056:	46bd      	mov	sp, r7
 8037058:	bdf0      	pop	{r4, r5, r6, r7, pc}

0803705a <_ZN11Motherboard14HeadRxCallbackEv>:

public: // Callbacks
	void HeadRxCallback() {
 803705a:	b580      	push	{r7, lr}
 803705c:	b082      	sub	sp, #8
 803705e:	af00      	add	r7, sp, #0
 8037060:	6078      	str	r0, [r7, #4]
		Ctx.Head.Input.RxCpltCallback();
 8037062:	687b      	ldr	r3, [r7, #4]
 8037064:	3304      	adds	r3, #4
 8037066:	4618      	mov	r0, r3
 8037068:	f7fe fcd6 	bl	8035a18 <_ZN6HeadIO8Listener14RxCpltCallbackEv>
	}
 803706c:	bf00      	nop
 803706e:	3708      	adds	r7, #8
 8037070:	46bd      	mov	sp, r7
 8037072:	bd80      	pop	{r7, pc}

08037074 <_ZN11Motherboard14HeadTxCallbackEv>:

	void HeadTxCallback() {
 8037074:	b580      	push	{r7, lr}
 8037076:	b082      	sub	sp, #8
 8037078:	af00      	add	r7, sp, #0
 803707a:	6078      	str	r0, [r7, #4]
		Ctx.Head.Output.TxCpltCallback();
 803707c:	687b      	ldr	r3, [r7, #4]
 803707e:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8037082:	4618      	mov	r0, r3
 8037084:	f7fe fdd5 	bl	8035c32 <_ZN6HeadIO6Sender14TxCpltCallbackEv>
	}
 8037088:	bf00      	nop
 803708a:	3708      	adds	r7, #8
 803708c:	46bd      	mov	sp, r7
 803708e:	bd80      	pop	{r7, pc}

08037090 <_ZN11Motherboard17BQueueTimCallbackEv>:

	void BQueueTimCallback() {
 8037090:	b580      	push	{r7, lr}
 8037092:	b082      	sub	sp, #8
 8037094:	af00      	add	r7, sp, #0
 8037096:	6078      	str	r0, [r7, #4]
		Ctx.BQueue.TimCallback();
 8037098:	687b      	ldr	r3, [r7, #4]
 803709a:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 803709e:	4618      	mov	r0, r3
 80370a0:	f7fe ff15 	bl	8035ece <_ZN9BodyQueue11TimCallbackEv>
	}
 80370a4:	bf00      	nop
 80370a6:	3708      	adds	r7, #8
 80370a8:	46bd      	mov	sp, r7
 80370aa:	bd80      	pop	{r7, pc}

080370ac <_ZN11Motherboard14IMUTimCallbackEv>:

	void IMUTimCallback() {
 80370ac:	b580      	push	{r7, lr}
 80370ae:	b082      	sub	sp, #8
 80370b0:	af00      	add	r7, sp, #0
 80370b2:	6078      	str	r0, [r7, #4]
		Ctx.IMU.TimCallback();
 80370b4:	687a      	ldr	r2, [r7, #4]
 80370b6:	4b04      	ldr	r3, [pc, #16]	; (80370c8 <_ZN11Motherboard14IMUTimCallbackEv+0x1c>)
 80370b8:	4413      	add	r3, r2
 80370ba:	4618      	mov	r0, r3
 80370bc:	f7fe fb03 	bl	80356c6 <_ZN9IMUDevice11TimCallbackEv>
	}
 80370c0:	bf00      	nop
 80370c2:	3708      	adds	r7, #8
 80370c4:	46bd      	mov	sp, r7
 80370c6:	bd80      	pop	{r7, pc}
 80370c8:	00020268 	.word	0x00020268

080370cc <_ZN11Motherboard14SFCompCallbackEv>:

	void SFCompCallback() {
 80370cc:	b580      	push	{r7, lr}
 80370ce:	b082      	sub	sp, #8
 80370d0:	af00      	add	r7, sp, #0
 80370d2:	6078      	str	r0, [r7, #4]
		Ctx.SFilter.CompCallback();
 80370d4:	687a      	ldr	r2, [r7, #4]
 80370d6:	4b04      	ldr	r3, [pc, #16]	; (80370e8 <_ZN11Motherboard14SFCompCallbackEv+0x1c>)
 80370d8:	4413      	add	r3, r2
 80370da:	4618      	mov	r0, r3
 80370dc:	f7ff f830 	bl	8036140 <_ZN12StrobeFilter12CompCallbackEv>
	}
 80370e0:	bf00      	nop
 80370e2:	3708      	adds	r7, #8
 80370e4:	46bd      	mov	sp, r7
 80370e6:	bd80      	pop	{r7, pc}
 80370e8:	000213c8 	.word	0x000213c8

080370ec <MotherboardInit>:
static Motherboard* MbPtr = reinterpret_cast<Motherboard*>(MbCell);
static bool MbInit = false;

extern "C" {

void MotherboardInit(MotherboardConfig config) {
 80370ec:	b084      	sub	sp, #16
 80370ee:	b580      	push	{r7, lr}
 80370f0:	af00      	add	r7, sp, #0
 80370f2:	f107 0c08 	add.w	ip, r7, #8
 80370f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	new (MbPtr) Motherboard {config};
 80370fa:	4b0d      	ldr	r3, [pc, #52]	; (8037130 <MotherboardInit+0x44>)
 80370fc:	681b      	ldr	r3, [r3, #0]
 80370fe:	4619      	mov	r1, r3
 8037100:	480c      	ldr	r0, [pc, #48]	; (8037134 <MotherboardInit+0x48>)
 8037102:	f7fe feef 	bl	8035ee4 <_ZnwjPv>
 8037106:	4603      	mov	r3, r0
 8037108:	f107 0108 	add.w	r1, r7, #8
 803710c:	4618      	mov	r0, r3
 803710e:	f7ff ff86 	bl	803701e <_ZN11MotherboardC1ERK17MotherboardConfig>
	MbPtr->Init();
 8037112:	4b07      	ldr	r3, [pc, #28]	; (8037130 <MotherboardInit+0x44>)
 8037114:	681b      	ldr	r3, [r3, #0]
 8037116:	4618      	mov	r0, r3
 8037118:	f7ff ff5a 	bl	8036fd0 <_ZN11Motherboard4InitEv>
	MbInit = true;
 803711c:	4b06      	ldr	r3, [pc, #24]	; (8037138 <MotherboardInit+0x4c>)
 803711e:	2201      	movs	r2, #1
 8037120:	701a      	strb	r2, [r3, #0]
}
 8037122:	bf00      	nop
 8037124:	46bd      	mov	sp, r7
 8037126:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803712a:	b004      	add	sp, #16
 803712c:	4770      	bx	lr
 803712e:	bf00      	nop
 8037130:	24000100 	.word	0x24000100
 8037134:	00036310 	.word	0x00036310
 8037138:	24038794 	.word	0x24038794

0803713c <MotherboardRun>:

void MotherboardRun() {
 803713c:	b580      	push	{r7, lr}
 803713e:	af00      	add	r7, sp, #0
	assert(MbInit);
 8037140:	4b08      	ldr	r3, [pc, #32]	; (8037164 <MotherboardRun+0x28>)
 8037142:	781b      	ldrb	r3, [r3, #0]
 8037144:	2b00      	cmp	r3, #0
 8037146:	d105      	bne.n	8037154 <MotherboardRun+0x18>
 8037148:	4b07      	ldr	r3, [pc, #28]	; (8037168 <MotherboardRun+0x2c>)
 803714a:	4a08      	ldr	r2, [pc, #32]	; (803716c <MotherboardRun+0x30>)
 803714c:	2111      	movs	r1, #17
 803714e:	4808      	ldr	r0, [pc, #32]	; (8037170 <MotherboardRun+0x34>)
 8037150:	f004 fd20 	bl	803bb94 <__assert_func>
	MbPtr->Run();
 8037154:	4b07      	ldr	r3, [pc, #28]	; (8037174 <MotherboardRun+0x38>)
 8037156:	681b      	ldr	r3, [r3, #0]
 8037158:	4618      	mov	r0, r3
 803715a:	f7ff ff4f 	bl	8036ffc <_ZN11Motherboard3RunEv>
}
 803715e:	bf00      	nop
 8037160:	bd80      	pop	{r7, pc}
 8037162:	bf00      	nop
 8037164:	24038794 	.word	0x24038794
 8037168:	0803d404 	.word	0x0803d404
 803716c:	0803d40c 	.word	0x0803d40c
 8037170:	0803d424 	.word	0x0803d424
 8037174:	24000100 	.word	0x24000100

08037178 <HeadRxCallback>:

void HeadRxCallback() {
 8037178:	b580      	push	{r7, lr}
 803717a:	af00      	add	r7, sp, #0
	assert(MbInit);
 803717c:	4b08      	ldr	r3, [pc, #32]	; (80371a0 <HeadRxCallback+0x28>)
 803717e:	781b      	ldrb	r3, [r3, #0]
 8037180:	2b00      	cmp	r3, #0
 8037182:	d105      	bne.n	8037190 <HeadRxCallback+0x18>
 8037184:	4b07      	ldr	r3, [pc, #28]	; (80371a4 <HeadRxCallback+0x2c>)
 8037186:	4a08      	ldr	r2, [pc, #32]	; (80371a8 <HeadRxCallback+0x30>)
 8037188:	2116      	movs	r1, #22
 803718a:	4808      	ldr	r0, [pc, #32]	; (80371ac <HeadRxCallback+0x34>)
 803718c:	f004 fd02 	bl	803bb94 <__assert_func>
	MbPtr->HeadRxCallback();
 8037190:	4b07      	ldr	r3, [pc, #28]	; (80371b0 <HeadRxCallback+0x38>)
 8037192:	681b      	ldr	r3, [r3, #0]
 8037194:	4618      	mov	r0, r3
 8037196:	f7ff ff60 	bl	803705a <_ZN11Motherboard14HeadRxCallbackEv>
}
 803719a:	bf00      	nop
 803719c:	bd80      	pop	{r7, pc}
 803719e:	bf00      	nop
 80371a0:	24038794 	.word	0x24038794
 80371a4:	0803d404 	.word	0x0803d404
 80371a8:	0803d450 	.word	0x0803d450
 80371ac:	0803d424 	.word	0x0803d424
 80371b0:	24000100 	.word	0x24000100

080371b4 <HeadTxCallback>:

void HeadTxCallback() {
 80371b4:	b580      	push	{r7, lr}
 80371b6:	af00      	add	r7, sp, #0
	assert(MbInit);
 80371b8:	4b08      	ldr	r3, [pc, #32]	; (80371dc <HeadTxCallback+0x28>)
 80371ba:	781b      	ldrb	r3, [r3, #0]
 80371bc:	2b00      	cmp	r3, #0
 80371be:	d105      	bne.n	80371cc <HeadTxCallback+0x18>
 80371c0:	4b07      	ldr	r3, [pc, #28]	; (80371e0 <HeadTxCallback+0x2c>)
 80371c2:	4a08      	ldr	r2, [pc, #32]	; (80371e4 <HeadTxCallback+0x30>)
 80371c4:	211b      	movs	r1, #27
 80371c6:	4808      	ldr	r0, [pc, #32]	; (80371e8 <HeadTxCallback+0x34>)
 80371c8:	f004 fce4 	bl	803bb94 <__assert_func>
	MbPtr->HeadTxCallback();
 80371cc:	4b07      	ldr	r3, [pc, #28]	; (80371ec <HeadTxCallback+0x38>)
 80371ce:	681b      	ldr	r3, [r3, #0]
 80371d0:	4618      	mov	r0, r3
 80371d2:	f7ff ff4f 	bl	8037074 <_ZN11Motherboard14HeadTxCallbackEv>
}
 80371d6:	bf00      	nop
 80371d8:	bd80      	pop	{r7, pc}
 80371da:	bf00      	nop
 80371dc:	24038794 	.word	0x24038794
 80371e0:	0803d404 	.word	0x0803d404
 80371e4:	0803d468 	.word	0x0803d468
 80371e8:	0803d424 	.word	0x0803d424
 80371ec:	24000100 	.word	0x24000100

080371f0 <BQueueTimCallback>:

void BQueueTimCallback() {
 80371f0:	b580      	push	{r7, lr}
 80371f2:	af00      	add	r7, sp, #0
	assert(MbInit);
 80371f4:	4b08      	ldr	r3, [pc, #32]	; (8037218 <BQueueTimCallback+0x28>)
 80371f6:	781b      	ldrb	r3, [r3, #0]
 80371f8:	2b00      	cmp	r3, #0
 80371fa:	d105      	bne.n	8037208 <BQueueTimCallback+0x18>
 80371fc:	4b07      	ldr	r3, [pc, #28]	; (803721c <BQueueTimCallback+0x2c>)
 80371fe:	4a08      	ldr	r2, [pc, #32]	; (8037220 <BQueueTimCallback+0x30>)
 8037200:	2120      	movs	r1, #32
 8037202:	4808      	ldr	r0, [pc, #32]	; (8037224 <BQueueTimCallback+0x34>)
 8037204:	f004 fcc6 	bl	803bb94 <__assert_func>
	MbPtr->BQueueTimCallback();
 8037208:	4b07      	ldr	r3, [pc, #28]	; (8037228 <BQueueTimCallback+0x38>)
 803720a:	681b      	ldr	r3, [r3, #0]
 803720c:	4618      	mov	r0, r3
 803720e:	f7ff ff3f 	bl	8037090 <_ZN11Motherboard17BQueueTimCallbackEv>
}
 8037212:	bf00      	nop
 8037214:	bd80      	pop	{r7, pc}
 8037216:	bf00      	nop
 8037218:	24038794 	.word	0x24038794
 803721c:	0803d404 	.word	0x0803d404
 8037220:	0803d480 	.word	0x0803d480
 8037224:	0803d424 	.word	0x0803d424
 8037228:	24000100 	.word	0x24000100

0803722c <IMUTimCallback>:

void IMUTimCallback() {
 803722c:	b580      	push	{r7, lr}
 803722e:	af00      	add	r7, sp, #0
	assert(MbInit);
 8037230:	4b08      	ldr	r3, [pc, #32]	; (8037254 <IMUTimCallback+0x28>)
 8037232:	781b      	ldrb	r3, [r3, #0]
 8037234:	2b00      	cmp	r3, #0
 8037236:	d105      	bne.n	8037244 <IMUTimCallback+0x18>
 8037238:	4b07      	ldr	r3, [pc, #28]	; (8037258 <IMUTimCallback+0x2c>)
 803723a:	4a08      	ldr	r2, [pc, #32]	; (803725c <IMUTimCallback+0x30>)
 803723c:	2125      	movs	r1, #37	; 0x25
 803723e:	4808      	ldr	r0, [pc, #32]	; (8037260 <IMUTimCallback+0x34>)
 8037240:	f004 fca8 	bl	803bb94 <__assert_func>
	MbPtr->IMUTimCallback();
 8037244:	4b07      	ldr	r3, [pc, #28]	; (8037264 <IMUTimCallback+0x38>)
 8037246:	681b      	ldr	r3, [r3, #0]
 8037248:	4618      	mov	r0, r3
 803724a:	f7ff ff2f 	bl	80370ac <_ZN11Motherboard14IMUTimCallbackEv>
}
 803724e:	bf00      	nop
 8037250:	bd80      	pop	{r7, pc}
 8037252:	bf00      	nop
 8037254:	24038794 	.word	0x24038794
 8037258:	0803d404 	.word	0x0803d404
 803725c:	0803d49c 	.word	0x0803d49c
 8037260:	0803d424 	.word	0x0803d424
 8037264:	24000100 	.word	0x24000100

08037268 <SFCompCallback>:

void SFCompCallback(){
 8037268:	b580      	push	{r7, lr}
 803726a:	af00      	add	r7, sp, #0
	assert(MbInit);
 803726c:	4b08      	ldr	r3, [pc, #32]	; (8037290 <SFCompCallback+0x28>)
 803726e:	781b      	ldrb	r3, [r3, #0]
 8037270:	2b00      	cmp	r3, #0
 8037272:	d105      	bne.n	8037280 <SFCompCallback+0x18>
 8037274:	4b07      	ldr	r3, [pc, #28]	; (8037294 <SFCompCallback+0x2c>)
 8037276:	4a08      	ldr	r2, [pc, #32]	; (8037298 <SFCompCallback+0x30>)
 8037278:	212a      	movs	r1, #42	; 0x2a
 803727a:	4808      	ldr	r0, [pc, #32]	; (803729c <SFCompCallback+0x34>)
 803727c:	f004 fc8a 	bl	803bb94 <__assert_func>
	MbPtr->SFCompCallback();
 8037280:	4b07      	ldr	r3, [pc, #28]	; (80372a0 <SFCompCallback+0x38>)
 8037282:	681b      	ldr	r3, [r3, #0]
 8037284:	4618      	mov	r0, r3
 8037286:	f7ff ff21 	bl	80370cc <_ZN11Motherboard14SFCompCallbackEv>
}
 803728a:	bf00      	nop
 803728c:	bd80      	pop	{r7, pc}
 803728e:	bf00      	nop
 8037290:	24038794 	.word	0x24038794
 8037294:	0803d404 	.word	0x0803d404
 8037298:	0803d4b4 	.word	0x0803d4b4
 803729c:	0803d424 	.word	0x0803d424
 80372a0:	24000100 	.word	0x24000100

080372a4 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 80372a4:	b580      	push	{r7, lr}
 80372a6:	b082      	sub	sp, #8
 80372a8:	af00      	add	r7, sp, #0
 80372aa:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80372ac:	687b      	ldr	r3, [r7, #4]
 80372ae:	4618      	mov	r0, r3
 80372b0:	f001 fea4 	bl	8038ffc <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 80372b4:	4603      	mov	r3, r0
 80372b6:	4618      	mov	r0, r3
 80372b8:	3708      	adds	r7, #8
 80372ba:	46bd      	mov	sp, r7
 80372bc:	bd80      	pop	{r7, pc}

080372be <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 80372be:	b480      	push	{r7}
 80372c0:	b083      	sub	sp, #12
 80372c2:	af00      	add	r7, sp, #0
 80372c4:	6078      	str	r0, [r7, #4]
 80372c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80372ca:	4618      	mov	r0, r3
 80372cc:	370c      	adds	r7, #12
 80372ce:	46bd      	mov	sp, r7
 80372d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80372d4:	4770      	bx	lr

080372d6 <_ZNSt5arrayIhLj256EE4dataEv>:
      data() noexcept
 80372d6:	b580      	push	{r7, lr}
 80372d8:	b082      	sub	sp, #8
 80372da:	af00      	add	r7, sp, #0
 80372dc:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80372de:	687b      	ldr	r3, [r7, #4]
 80372e0:	4618      	mov	r0, r3
 80372e2:	f001 fe96 	bl	8039012 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 80372e6:	4603      	mov	r3, r0
 80372e8:	4618      	mov	r0, r3
 80372ea:	3708      	adds	r7, #8
 80372ec:	46bd      	mov	sp, r7
 80372ee:	bd80      	pop	{r7, pc}

080372f0 <_ZN10FixedQueueIN6HeadIO7RequestELj4EE4PushERKS1_>:
	size_t Head = 0;
	size_t Tail = 0;

	std::array<T, Capacity> Buffer;
public:
	void Push(const T &rhs) {
 80372f0:	b580      	push	{r7, lr}
 80372f2:	b082      	sub	sp, #8
 80372f4:	af00      	add	r7, sp, #0
 80372f6:	6078      	str	r0, [r7, #4]
 80372f8:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 80372fa:	687b      	ldr	r3, [r7, #4]
 80372fc:	681b      	ldr	r3, [r3, #0]
 80372fe:	2b04      	cmp	r3, #4
 8037300:	d105      	bne.n	803730e <_ZN10FixedQueueIN6HeadIO7RequestELj4EE4PushERKS1_+0x1e>
 8037302:	4b14      	ldr	r3, [pc, #80]	; (8037354 <_ZN10FixedQueueIN6HeadIO7RequestELj4EE4PushERKS1_+0x64>)
 8037304:	4a14      	ldr	r2, [pc, #80]	; (8037358 <_ZN10FixedQueueIN6HeadIO7RequestELj4EE4PushERKS1_+0x68>)
 8037306:	2112      	movs	r1, #18
 8037308:	4814      	ldr	r0, [pc, #80]	; (803735c <_ZN10FixedQueueIN6HeadIO7RequestELj4EE4PushERKS1_+0x6c>)
 803730a:	f004 fc43 	bl	803bb94 <__assert_func>

		Buffer[Head] = rhs;
 803730e:	687b      	ldr	r3, [r7, #4]
 8037310:	f103 020c 	add.w	r2, r3, #12
 8037314:	687b      	ldr	r3, [r7, #4]
 8037316:	685b      	ldr	r3, [r3, #4]
 8037318:	4619      	mov	r1, r3
 803731a:	4610      	mov	r0, r2
 803731c:	f001 fe84 	bl	8039028 <_ZNSt5arrayIN6HeadIO7RequestELj4EEixEj>
 8037320:	4602      	mov	r2, r0
 8037322:	683b      	ldr	r3, [r7, #0]
 8037324:	4610      	mov	r0, r2
 8037326:	4619      	mov	r1, r3
 8037328:	f44f 7381 	mov.w	r3, #258	; 0x102
 803732c:	461a      	mov	r2, r3
 803732e:	f004 fcab 	bl	803bc88 <memcpy>
		Head = (Head + 1) % Capacity;
 8037332:	687b      	ldr	r3, [r7, #4]
 8037334:	685b      	ldr	r3, [r3, #4]
 8037336:	3301      	adds	r3, #1
 8037338:	f003 0203 	and.w	r2, r3, #3
 803733c:	687b      	ldr	r3, [r7, #4]
 803733e:	605a      	str	r2, [r3, #4]
		Size++;
 8037340:	687b      	ldr	r3, [r7, #4]
 8037342:	681b      	ldr	r3, [r3, #0]
 8037344:	1c5a      	adds	r2, r3, #1
 8037346:	687b      	ldr	r3, [r7, #4]
 8037348:	601a      	str	r2, [r3, #0]
	}
 803734a:	bf00      	nop
 803734c:	3708      	adds	r7, #8
 803734e:	46bd      	mov	sp, r7
 8037350:	bd80      	pop	{r7, pc}
 8037352:	bf00      	nop
 8037354:	0803d4cc 	.word	0x0803d4cc
 8037358:	0803d4e0 	.word	0x0803d4e0
 803735c:	0803d544 	.word	0x0803d544

08037360 <_ZNK10FixedQueueIN6HeadIO7RequestELj4EE5EmptyEv>:
	const T& Front() const {
		assert(Size);
		return Buffer[Tail];
	}

	bool Empty() const {
 8037360:	b480      	push	{r7}
 8037362:	b083      	sub	sp, #12
 8037364:	af00      	add	r7, sp, #0
 8037366:	6078      	str	r0, [r7, #4]
		return Size == 0;
 8037368:	687b      	ldr	r3, [r7, #4]
 803736a:	681b      	ldr	r3, [r3, #0]
 803736c:	2b00      	cmp	r3, #0
 803736e:	bf0c      	ite	eq
 8037370:	2301      	moveq	r3, #1
 8037372:	2300      	movne	r3, #0
 8037374:	b2db      	uxtb	r3, r3
	}
 8037376:	4618      	mov	r0, r3
 8037378:	370c      	adds	r7, #12
 803737a:	46bd      	mov	sp, r7
 803737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037380:	4770      	bx	lr
	...

08037384 <_ZNK10FixedQueueIN6HeadIO7RequestELj4EE5FrontEv>:
	const T& Front() const {
 8037384:	b580      	push	{r7, lr}
 8037386:	b082      	sub	sp, #8
 8037388:	af00      	add	r7, sp, #0
 803738a:	6078      	str	r0, [r7, #4]
		assert(Size);
 803738c:	687b      	ldr	r3, [r7, #4]
 803738e:	681b      	ldr	r3, [r3, #0]
 8037390:	2b00      	cmp	r3, #0
 8037392:	d105      	bne.n	80373a0 <_ZNK10FixedQueueIN6HeadIO7RequestELj4EE5FrontEv+0x1c>
 8037394:	4b09      	ldr	r3, [pc, #36]	; (80373bc <_ZNK10FixedQueueIN6HeadIO7RequestELj4EE5FrontEv+0x38>)
 8037396:	4a0a      	ldr	r2, [pc, #40]	; (80373c0 <_ZNK10FixedQueueIN6HeadIO7RequestELj4EE5FrontEv+0x3c>)
 8037398:	2127      	movs	r1, #39	; 0x27
 803739a:	480a      	ldr	r0, [pc, #40]	; (80373c4 <_ZNK10FixedQueueIN6HeadIO7RequestELj4EE5FrontEv+0x40>)
 803739c:	f004 fbfa 	bl	803bb94 <__assert_func>
		return Buffer[Tail];
 80373a0:	687b      	ldr	r3, [r7, #4]
 80373a2:	f103 020c 	add.w	r2, r3, #12
 80373a6:	687b      	ldr	r3, [r7, #4]
 80373a8:	689b      	ldr	r3, [r3, #8]
 80373aa:	4619      	mov	r1, r3
 80373ac:	4610      	mov	r0, r2
 80373ae:	f001 fe4a 	bl	8039046 <_ZNKSt5arrayIN6HeadIO7RequestELj4EEixEj>
 80373b2:	4603      	mov	r3, r0
	}
 80373b4:	4618      	mov	r0, r3
 80373b6:	3708      	adds	r7, #8
 80373b8:	46bd      	mov	sp, r7
 80373ba:	bd80      	pop	{r7, pc}
 80373bc:	0803d5a8 	.word	0x0803d5a8
 80373c0:	0803d5b0 	.word	0x0803d5b0
 80373c4:	0803d544 	.word	0x0803d544

080373c8 <_ZN10FixedQueueIN6HeadIO7RequestELj4EE3PopEv>:
	void Pop() {
 80373c8:	b580      	push	{r7, lr}
 80373ca:	b082      	sub	sp, #8
 80373cc:	af00      	add	r7, sp, #0
 80373ce:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 80373d0:	687b      	ldr	r3, [r7, #4]
 80373d2:	681b      	ldr	r3, [r3, #0]
 80373d4:	2b00      	cmp	r3, #0
 80373d6:	d105      	bne.n	80373e4 <_ZN10FixedQueueIN6HeadIO7RequestELj4EE3PopEv+0x1c>
 80373d8:	4b0a      	ldr	r3, [pc, #40]	; (8037404 <_ZN10FixedQueueIN6HeadIO7RequestELj4EE3PopEv+0x3c>)
 80373da:	4a0b      	ldr	r2, [pc, #44]	; (8037408 <_ZN10FixedQueueIN6HeadIO7RequestELj4EE3PopEv+0x40>)
 80373dc:	211a      	movs	r1, #26
 80373de:	480b      	ldr	r0, [pc, #44]	; (803740c <_ZN10FixedQueueIN6HeadIO7RequestELj4EE3PopEv+0x44>)
 80373e0:	f004 fbd8 	bl	803bb94 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 80373e4:	687b      	ldr	r3, [r7, #4]
 80373e6:	689b      	ldr	r3, [r3, #8]
 80373e8:	3301      	adds	r3, #1
 80373ea:	f003 0203 	and.w	r2, r3, #3
 80373ee:	687b      	ldr	r3, [r7, #4]
 80373f0:	609a      	str	r2, [r3, #8]
		Size--;
 80373f2:	687b      	ldr	r3, [r7, #4]
 80373f4:	681b      	ldr	r3, [r3, #0]
 80373f6:	1e5a      	subs	r2, r3, #1
 80373f8:	687b      	ldr	r3, [r7, #4]
 80373fa:	601a      	str	r2, [r3, #0]
	}
 80373fc:	bf00      	nop
 80373fe:	3708      	adds	r7, #8
 8037400:	46bd      	mov	sp, r7
 8037402:	bd80      	pop	{r7, pc}
 8037404:	0803d618 	.word	0x0803d618
 8037408:	0803d624 	.word	0x0803d624
 803740c:	0803d544 	.word	0x0803d544

08037410 <_ZNSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) noexcept
 8037410:	b580      	push	{r7, lr}
 8037412:	b082      	sub	sp, #8
 8037414:	af00      	add	r7, sp, #0
 8037416:	6078      	str	r0, [r7, #4]
 8037418:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 803741a:	687b      	ldr	r3, [r7, #4]
 803741c:	6839      	ldr	r1, [r7, #0]
 803741e:	4618      	mov	r0, r3
 8037420:	f001 fe20 	bl	8039064 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8037424:	4603      	mov	r3, r0
 8037426:	4618      	mov	r0, r3
 8037428:	3708      	adds	r7, #8
 803742a:	46bd      	mov	sp, r7
 803742c:	bd80      	pop	{r7, pc}

0803742e <_ZNKSt5arrayIhLj256EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 803742e:	b580      	push	{r7, lr}
 8037430:	b082      	sub	sp, #8
 8037432:	af00      	add	r7, sp, #0
 8037434:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8037436:	687b      	ldr	r3, [r7, #4]
 8037438:	4618      	mov	r0, r3
 803743a:	f001 fdea 	bl	8039012 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 803743e:	4603      	mov	r3, r0
 8037440:	4618      	mov	r0, r3
 8037442:	3708      	adds	r7, #8
 8037444:	46bd      	mov	sp, r7
 8037446:	bd80      	pop	{r7, pc}

08037448 <_ZNKSt5arrayIhLj256EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8037448:	b480      	push	{r7}
 803744a:	b083      	sub	sp, #12
 803744c:	af00      	add	r7, sp, #0
 803744e:	6078      	str	r0, [r7, #4]
 8037450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8037454:	4618      	mov	r0, r3
 8037456:	370c      	adds	r7, #12
 8037458:	46bd      	mov	sp, r7
 803745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803745e:	4770      	bx	lr

08037460 <_ZN10FixedQueueIN6HeadIO8ResponceELj4EE4PushERKS1_>:
	void Push(const T &rhs) {
 8037460:	b580      	push	{r7, lr}
 8037462:	b082      	sub	sp, #8
 8037464:	af00      	add	r7, sp, #0
 8037466:	6078      	str	r0, [r7, #4]
 8037468:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 803746a:	687b      	ldr	r3, [r7, #4]
 803746c:	681b      	ldr	r3, [r3, #0]
 803746e:	2b04      	cmp	r3, #4
 8037470:	d105      	bne.n	803747e <_ZN10FixedQueueIN6HeadIO8ResponceELj4EE4PushERKS1_+0x1e>
 8037472:	4b14      	ldr	r3, [pc, #80]	; (80374c4 <_ZN10FixedQueueIN6HeadIO8ResponceELj4EE4PushERKS1_+0x64>)
 8037474:	4a14      	ldr	r2, [pc, #80]	; (80374c8 <_ZN10FixedQueueIN6HeadIO8ResponceELj4EE4PushERKS1_+0x68>)
 8037476:	2112      	movs	r1, #18
 8037478:	4814      	ldr	r0, [pc, #80]	; (80374cc <_ZN10FixedQueueIN6HeadIO8ResponceELj4EE4PushERKS1_+0x6c>)
 803747a:	f004 fb8b 	bl	803bb94 <__assert_func>
		Buffer[Head] = rhs;
 803747e:	687b      	ldr	r3, [r7, #4]
 8037480:	f103 020c 	add.w	r2, r3, #12
 8037484:	687b      	ldr	r3, [r7, #4]
 8037486:	685b      	ldr	r3, [r3, #4]
 8037488:	4619      	mov	r1, r3
 803748a:	4610      	mov	r0, r2
 803748c:	f001 fdf8 	bl	8039080 <_ZNSt5arrayIN6HeadIO8ResponceELj4EEixEj>
 8037490:	4602      	mov	r2, r0
 8037492:	683b      	ldr	r3, [r7, #0]
 8037494:	4610      	mov	r0, r2
 8037496:	4619      	mov	r1, r3
 8037498:	f44f 7381 	mov.w	r3, #258	; 0x102
 803749c:	461a      	mov	r2, r3
 803749e:	f004 fbf3 	bl	803bc88 <memcpy>
		Head = (Head + 1) % Capacity;
 80374a2:	687b      	ldr	r3, [r7, #4]
 80374a4:	685b      	ldr	r3, [r3, #4]
 80374a6:	3301      	adds	r3, #1
 80374a8:	f003 0203 	and.w	r2, r3, #3
 80374ac:	687b      	ldr	r3, [r7, #4]
 80374ae:	605a      	str	r2, [r3, #4]
		Size++;
 80374b0:	687b      	ldr	r3, [r7, #4]
 80374b2:	681b      	ldr	r3, [r3, #0]
 80374b4:	1c5a      	adds	r2, r3, #1
 80374b6:	687b      	ldr	r3, [r7, #4]
 80374b8:	601a      	str	r2, [r3, #0]
	}
 80374ba:	bf00      	nop
 80374bc:	3708      	adds	r7, #8
 80374be:	46bd      	mov	sp, r7
 80374c0:	bd80      	pop	{r7, pc}
 80374c2:	bf00      	nop
 80374c4:	0803d4cc 	.word	0x0803d4cc
 80374c8:	0803d680 	.word	0x0803d680
 80374cc:	0803d544 	.word	0x0803d544

080374d0 <_ZNK10FixedQueueIN6HeadIO8ResponceELj4EE5EmptyEv>:
	bool Empty() const {
 80374d0:	b480      	push	{r7}
 80374d2:	b083      	sub	sp, #12
 80374d4:	af00      	add	r7, sp, #0
 80374d6:	6078      	str	r0, [r7, #4]
		return Size == 0;
 80374d8:	687b      	ldr	r3, [r7, #4]
 80374da:	681b      	ldr	r3, [r3, #0]
 80374dc:	2b00      	cmp	r3, #0
 80374de:	bf0c      	ite	eq
 80374e0:	2301      	moveq	r3, #1
 80374e2:	2300      	movne	r3, #0
 80374e4:	b2db      	uxtb	r3, r3
	}
 80374e6:	4618      	mov	r0, r3
 80374e8:	370c      	adds	r7, #12
 80374ea:	46bd      	mov	sp, r7
 80374ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80374f0:	4770      	bx	lr
	...

080374f4 <_ZNK10FixedQueueIN6HeadIO8ResponceELj4EE5FrontEv>:
	const T& Front() const {
 80374f4:	b580      	push	{r7, lr}
 80374f6:	b082      	sub	sp, #8
 80374f8:	af00      	add	r7, sp, #0
 80374fa:	6078      	str	r0, [r7, #4]
		assert(Size);
 80374fc:	687b      	ldr	r3, [r7, #4]
 80374fe:	681b      	ldr	r3, [r3, #0]
 8037500:	2b00      	cmp	r3, #0
 8037502:	d105      	bne.n	8037510 <_ZNK10FixedQueueIN6HeadIO8ResponceELj4EE5FrontEv+0x1c>
 8037504:	4b09      	ldr	r3, [pc, #36]	; (803752c <_ZNK10FixedQueueIN6HeadIO8ResponceELj4EE5FrontEv+0x38>)
 8037506:	4a0a      	ldr	r2, [pc, #40]	; (8037530 <_ZNK10FixedQueueIN6HeadIO8ResponceELj4EE5FrontEv+0x3c>)
 8037508:	2127      	movs	r1, #39	; 0x27
 803750a:	480a      	ldr	r0, [pc, #40]	; (8037534 <_ZNK10FixedQueueIN6HeadIO8ResponceELj4EE5FrontEv+0x40>)
 803750c:	f004 fb42 	bl	803bb94 <__assert_func>
		return Buffer[Tail];
 8037510:	687b      	ldr	r3, [r7, #4]
 8037512:	f103 020c 	add.w	r2, r3, #12
 8037516:	687b      	ldr	r3, [r7, #4]
 8037518:	689b      	ldr	r3, [r3, #8]
 803751a:	4619      	mov	r1, r3
 803751c:	4610      	mov	r0, r2
 803751e:	f001 fdbe 	bl	803909e <_ZNKSt5arrayIN6HeadIO8ResponceELj4EEixEj>
 8037522:	4603      	mov	r3, r0
	}
 8037524:	4618      	mov	r0, r3
 8037526:	3708      	adds	r7, #8
 8037528:	46bd      	mov	sp, r7
 803752a:	bd80      	pop	{r7, pc}
 803752c:	0803d5a8 	.word	0x0803d5a8
 8037530:	0803d6e4 	.word	0x0803d6e4
 8037534:	0803d544 	.word	0x0803d544

08037538 <_ZN10FixedQueueIN6HeadIO8ResponceELj4EE3PopEv>:
	void Pop() {
 8037538:	b580      	push	{r7, lr}
 803753a:	b082      	sub	sp, #8
 803753c:	af00      	add	r7, sp, #0
 803753e:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8037540:	687b      	ldr	r3, [r7, #4]
 8037542:	681b      	ldr	r3, [r3, #0]
 8037544:	2b00      	cmp	r3, #0
 8037546:	d105      	bne.n	8037554 <_ZN10FixedQueueIN6HeadIO8ResponceELj4EE3PopEv+0x1c>
 8037548:	4b0a      	ldr	r3, [pc, #40]	; (8037574 <_ZN10FixedQueueIN6HeadIO8ResponceELj4EE3PopEv+0x3c>)
 803754a:	4a0b      	ldr	r2, [pc, #44]	; (8037578 <_ZN10FixedQueueIN6HeadIO8ResponceELj4EE3PopEv+0x40>)
 803754c:	211a      	movs	r1, #26
 803754e:	480b      	ldr	r0, [pc, #44]	; (803757c <_ZN10FixedQueueIN6HeadIO8ResponceELj4EE3PopEv+0x44>)
 8037550:	f004 fb20 	bl	803bb94 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8037554:	687b      	ldr	r3, [r7, #4]
 8037556:	689b      	ldr	r3, [r3, #8]
 8037558:	3301      	adds	r3, #1
 803755a:	f003 0203 	and.w	r2, r3, #3
 803755e:	687b      	ldr	r3, [r7, #4]
 8037560:	609a      	str	r2, [r3, #8]
		Size--;
 8037562:	687b      	ldr	r3, [r7, #4]
 8037564:	681b      	ldr	r3, [r3, #0]
 8037566:	1e5a      	subs	r2, r3, #1
 8037568:	687b      	ldr	r3, [r7, #4]
 803756a:	601a      	str	r2, [r3, #0]
	}
 803756c:	bf00      	nop
 803756e:	3708      	adds	r7, #8
 8037570:	46bd      	mov	sp, r7
 8037572:	bd80      	pop	{r7, pc}
 8037574:	0803d618 	.word	0x0803d618
 8037578:	0803d74c 	.word	0x0803d74c
 803757c:	0803d544 	.word	0x0803d544

08037580 <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE5EmptyEv>:
	bool Empty() const {
 8037580:	b480      	push	{r7}
 8037582:	b083      	sub	sp, #12
 8037584:	af00      	add	r7, sp, #0
 8037586:	6078      	str	r0, [r7, #4]
		return Size == 0;
 8037588:	687b      	ldr	r3, [r7, #4]
 803758a:	681b      	ldr	r3, [r3, #0]
 803758c:	2b00      	cmp	r3, #0
 803758e:	bf0c      	ite	eq
 8037590:	2301      	moveq	r3, #1
 8037592:	2300      	movne	r3, #0
 8037594:	b2db      	uxtb	r3, r3
	}
 8037596:	4618      	mov	r0, r3
 8037598:	370c      	adds	r7, #12
 803759a:	46bd      	mov	sp, r7
 803759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80375a0:	4770      	bx	lr
	...

080375a4 <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE5FrontEv>:
	const T& Front() const {
 80375a4:	b580      	push	{r7, lr}
 80375a6:	b082      	sub	sp, #8
 80375a8:	af00      	add	r7, sp, #0
 80375aa:	6078      	str	r0, [r7, #4]
		assert(Size);
 80375ac:	687b      	ldr	r3, [r7, #4]
 80375ae:	681b      	ldr	r3, [r3, #0]
 80375b0:	2b00      	cmp	r3, #0
 80375b2:	d105      	bne.n	80375c0 <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE5FrontEv+0x1c>
 80375b4:	4b09      	ldr	r3, [pc, #36]	; (80375dc <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE5FrontEv+0x38>)
 80375b6:	4a0a      	ldr	r2, [pc, #40]	; (80375e0 <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE5FrontEv+0x3c>)
 80375b8:	2127      	movs	r1, #39	; 0x27
 80375ba:	480a      	ldr	r0, [pc, #40]	; (80375e4 <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE5FrontEv+0x40>)
 80375bc:	f004 faea 	bl	803bb94 <__assert_func>
		return Buffer[Tail];
 80375c0:	687b      	ldr	r3, [r7, #4]
 80375c2:	f103 020c 	add.w	r2, r3, #12
 80375c6:	687b      	ldr	r3, [r7, #4]
 80375c8:	689b      	ldr	r3, [r3, #8]
 80375ca:	4619      	mov	r1, r3
 80375cc:	4610      	mov	r0, r2
 80375ce:	f001 fd75 	bl	80390bc <_ZNKSt5arrayIN9BodyQueue7RequestELj500EEixEj>
 80375d2:	4603      	mov	r3, r0
	}
 80375d4:	4618      	mov	r0, r3
 80375d6:	3708      	adds	r7, #8
 80375d8:	46bd      	mov	sp, r7
 80375da:	bd80      	pop	{r7, pc}
 80375dc:	0803d5a8 	.word	0x0803d5a8
 80375e0:	0803d7a8 	.word	0x0803d7a8
 80375e4:	0803d544 	.word	0x0803d544

080375e8 <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE3PopEv>:
	void Pop() {
 80375e8:	b580      	push	{r7, lr}
 80375ea:	b082      	sub	sp, #8
 80375ec:	af00      	add	r7, sp, #0
 80375ee:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 80375f0:	687b      	ldr	r3, [r7, #4]
 80375f2:	681b      	ldr	r3, [r3, #0]
 80375f4:	2b00      	cmp	r3, #0
 80375f6:	d105      	bne.n	8037604 <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE3PopEv+0x1c>
 80375f8:	4b0e      	ldr	r3, [pc, #56]	; (8037634 <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE3PopEv+0x4c>)
 80375fa:	4a0f      	ldr	r2, [pc, #60]	; (8037638 <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE3PopEv+0x50>)
 80375fc:	211a      	movs	r1, #26
 80375fe:	480f      	ldr	r0, [pc, #60]	; (803763c <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE3PopEv+0x54>)
 8037600:	f004 fac8 	bl	803bb94 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8037604:	687b      	ldr	r3, [r7, #4]
 8037606:	689b      	ldr	r3, [r3, #8]
 8037608:	1c5a      	adds	r2, r3, #1
 803760a:	4b0d      	ldr	r3, [pc, #52]	; (8037640 <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE3PopEv+0x58>)
 803760c:	fba3 1302 	umull	r1, r3, r3, r2
 8037610:	095b      	lsrs	r3, r3, #5
 8037612:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8037616:	fb01 f303 	mul.w	r3, r1, r3
 803761a:	1ad3      	subs	r3, r2, r3
 803761c:	687a      	ldr	r2, [r7, #4]
 803761e:	6093      	str	r3, [r2, #8]
		Size--;
 8037620:	687b      	ldr	r3, [r7, #4]
 8037622:	681b      	ldr	r3, [r3, #0]
 8037624:	1e5a      	subs	r2, r3, #1
 8037626:	687b      	ldr	r3, [r7, #4]
 8037628:	601a      	str	r2, [r3, #0]
	}
 803762a:	bf00      	nop
 803762c:	3708      	adds	r7, #8
 803762e:	46bd      	mov	sp, r7
 8037630:	bd80      	pop	{r7, pc}
 8037632:	bf00      	nop
 8037634:	0803d618 	.word	0x0803d618
 8037638:	0803d814 	.word	0x0803d814
 803763c:	0803d544 	.word	0x0803d544
 8037640:	10624dd3 	.word	0x10624dd3

08037644 <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE4FullEv>:

	bool Full() const {
 8037644:	b480      	push	{r7}
 8037646:	b083      	sub	sp, #12
 8037648:	af00      	add	r7, sp, #0
 803764a:	6078      	str	r0, [r7, #4]
		return Size == Capacity;
 803764c:	687b      	ldr	r3, [r7, #4]
 803764e:	681b      	ldr	r3, [r3, #0]
 8037650:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8037654:	bf0c      	ite	eq
 8037656:	2301      	moveq	r3, #1
 8037658:	2300      	movne	r3, #0
 803765a:	b2db      	uxtb	r3, r3
	}
 803765c:	4618      	mov	r0, r3
 803765e:	370c      	adds	r7, #12
 8037660:	46bd      	mov	sp, r7
 8037662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037666:	4770      	bx	lr

08037668 <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE4PushERKS1_>:
	void Push(const T &rhs) {
 8037668:	b580      	push	{r7, lr}
 803766a:	b082      	sub	sp, #8
 803766c:	af00      	add	r7, sp, #0
 803766e:	6078      	str	r0, [r7, #4]
 8037670:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 8037672:	687b      	ldr	r3, [r7, #4]
 8037674:	681b      	ldr	r3, [r3, #0]
 8037676:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 803767a:	d105      	bne.n	8037688 <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE4PushERKS1_+0x20>
 803767c:	4b17      	ldr	r3, [pc, #92]	; (80376dc <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE4PushERKS1_+0x74>)
 803767e:	4a18      	ldr	r2, [pc, #96]	; (80376e0 <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE4PushERKS1_+0x78>)
 8037680:	2112      	movs	r1, #18
 8037682:	4818      	ldr	r0, [pc, #96]	; (80376e4 <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE4PushERKS1_+0x7c>)
 8037684:	f004 fa86 	bl	803bb94 <__assert_func>
		Buffer[Head] = rhs;
 8037688:	687b      	ldr	r3, [r7, #4]
 803768a:	f103 020c 	add.w	r2, r3, #12
 803768e:	687b      	ldr	r3, [r7, #4]
 8037690:	685b      	ldr	r3, [r3, #4]
 8037692:	4619      	mov	r1, r3
 8037694:	4610      	mov	r0, r2
 8037696:	f001 fd20 	bl	80390da <_ZNSt5arrayIN9BodyQueue7RequestELj500EEixEj>
 803769a:	4602      	mov	r2, r0
 803769c:	683b      	ldr	r3, [r7, #0]
 803769e:	4610      	mov	r0, r2
 80376a0:	4619      	mov	r1, r3
 80376a2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80376a6:	461a      	mov	r2, r3
 80376a8:	f004 faee 	bl	803bc88 <memcpy>
		Head = (Head + 1) % Capacity;
 80376ac:	687b      	ldr	r3, [r7, #4]
 80376ae:	685b      	ldr	r3, [r3, #4]
 80376b0:	1c5a      	adds	r2, r3, #1
 80376b2:	4b0d      	ldr	r3, [pc, #52]	; (80376e8 <_ZN10FixedQueueIN9BodyQueue7RequestELj500EE4PushERKS1_+0x80>)
 80376b4:	fba3 1302 	umull	r1, r3, r3, r2
 80376b8:	095b      	lsrs	r3, r3, #5
 80376ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80376be:	fb01 f303 	mul.w	r3, r1, r3
 80376c2:	1ad3      	subs	r3, r2, r3
 80376c4:	687a      	ldr	r2, [r7, #4]
 80376c6:	6053      	str	r3, [r2, #4]
		Size++;
 80376c8:	687b      	ldr	r3, [r7, #4]
 80376ca:	681b      	ldr	r3, [r3, #0]
 80376cc:	1c5a      	adds	r2, r3, #1
 80376ce:	687b      	ldr	r3, [r7, #4]
 80376d0:	601a      	str	r2, [r3, #0]
	}
 80376d2:	bf00      	nop
 80376d4:	3708      	adds	r7, #8
 80376d6:	46bd      	mov	sp, r7
 80376d8:	bd80      	pop	{r7, pc}
 80376da:	bf00      	nop
 80376dc:	0803d4cc 	.word	0x0803d4cc
 80376e0:	0803d874 	.word	0x0803d874
 80376e4:	0803d544 	.word	0x0803d544
 80376e8:	10624dd3 	.word	0x10624dd3

080376ec <_ZNK10FixedQueueIN9BodyQueue7RequestELj500EE7GetSizeEv>:

	size_t GetSize() const {
 80376ec:	b480      	push	{r7}
 80376ee:	b083      	sub	sp, #12
 80376f0:	af00      	add	r7, sp, #0
 80376f2:	6078      	str	r0, [r7, #4]
		return Size;
 80376f4:	687b      	ldr	r3, [r7, #4]
 80376f6:	681b      	ldr	r3, [r3, #0]
	}
 80376f8:	4618      	mov	r0, r3
 80376fa:	370c      	adds	r7, #12
 80376fc:	46bd      	mov	sp, r7
 80376fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037702:	4770      	bx	lr

08037704 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8037704:	b580      	push	{r7, lr}
 8037706:	b082      	sub	sp, #8
 8037708:	af00      	add	r7, sp, #0
 803770a:	6078      	str	r0, [r7, #4]
 803770c:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 803770e:	687b      	ldr	r3, [r7, #4]
 8037710:	6839      	ldr	r1, [r7, #0]
 8037712:	4618      	mov	r0, r3
 8037714:	f001 fcf0 	bl	80390f8 <_ZNSt5dequeIjSaIjEE9push_backERKj>
 8037718:	bf00      	nop
 803771a:	3708      	adds	r7, #8
 803771c:	46bd      	mov	sp, r7
 803771e:	bd80      	pop	{r7, pc}

08037720 <_ZNSt5dequeIjSaIjEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8037720:	b580      	push	{r7, lr}
 8037722:	b082      	sub	sp, #8
 8037724:	af00      	add	r7, sp, #0
 8037726:	6078      	str	r0, [r7, #4]
 8037728:	687b      	ldr	r3, [r7, #4]
 803772a:	4618      	mov	r0, r3
 803772c:	f001 fd11 	bl	8039152 <_ZNSt11_Deque_baseIjSaIjEEC1Ev>
 8037730:	687b      	ldr	r3, [r7, #4]
 8037732:	4618      	mov	r0, r3
 8037734:	3708      	adds	r7, #8
 8037736:	46bd      	mov	sp, r7
 8037738:	bd80      	pop	{r7, pc}

0803773a <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>:
	queue()
 803773a:	b580      	push	{r7, lr}
 803773c:	b082      	sub	sp, #8
 803773e:	af00      	add	r7, sp, #0
 8037740:	6078      	str	r0, [r7, #4]
	: c() { }
 8037742:	687b      	ldr	r3, [r7, #4]
 8037744:	4618      	mov	r0, r3
 8037746:	2328      	movs	r3, #40	; 0x28
 8037748:	461a      	mov	r2, r3
 803774a:	2100      	movs	r1, #0
 803774c:	f004 fac4 	bl	803bcd8 <memset>
 8037750:	687b      	ldr	r3, [r7, #4]
 8037752:	4618      	mov	r0, r3
 8037754:	f7ff ffe4 	bl	8037720 <_ZNSt5dequeIjSaIjEEC1Ev>
 8037758:	687b      	ldr	r3, [r7, #4]
 803775a:	4618      	mov	r0, r3
 803775c:	3708      	adds	r7, #8
 803775e:	46bd      	mov	sp, r7
 8037760:	bd80      	pop	{r7, pc}

08037762 <_ZNSt5dequeIjSaIjEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8037762:	b580      	push	{r7, lr}
 8037764:	b08a      	sub	sp, #40	; 0x28
 8037766:	af00      	add	r7, sp, #0
 8037768:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 803776a:	f107 0308 	add.w	r3, r7, #8
 803776e:	6879      	ldr	r1, [r7, #4]
 8037770:	4618      	mov	r0, r3
 8037772:	f001 fd21 	bl	80391b8 <_ZNSt5dequeIjSaIjEE5beginEv>
 8037776:	f107 0318 	add.w	r3, r7, #24
 803777a:	6879      	ldr	r1, [r7, #4]
 803777c:	4618      	mov	r0, r3
 803777e:	f001 fd2a 	bl	80391d6 <_ZNSt5dequeIjSaIjEE3endEv>
 8037782:	687b      	ldr	r3, [r7, #4]
 8037784:	4618      	mov	r0, r3
 8037786:	f001 fd35 	bl	80391f4 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 803778a:	4603      	mov	r3, r0
 803778c:	f107 0218 	add.w	r2, r7, #24
 8037790:	f107 0108 	add.w	r1, r7, #8
 8037794:	6878      	ldr	r0, [r7, #4]
 8037796:	f001 fd54 	bl	8039242 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
 803779a:	687b      	ldr	r3, [r7, #4]
 803779c:	4618      	mov	r0, r3
 803779e:	f001 fce9 	bl	8039174 <_ZNSt11_Deque_baseIjSaIjEED1Ev>
 80377a2:	687b      	ldr	r3, [r7, #4]
 80377a4:	4618      	mov	r0, r3
 80377a6:	3728      	adds	r7, #40	; 0x28
 80377a8:	46bd      	mov	sp, r7
 80377aa:	bd80      	pop	{r7, pc}

080377ac <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>:
      empty() const
 80377ac:	b580      	push	{r7, lr}
 80377ae:	b082      	sub	sp, #8
 80377b0:	af00      	add	r7, sp, #0
 80377b2:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80377b4:	687b      	ldr	r3, [r7, #4]
 80377b6:	4618      	mov	r0, r3
 80377b8:	f001 fd50 	bl	803925c <_ZNKSt5dequeIjSaIjEE5emptyEv>
 80377bc:	4603      	mov	r3, r0
 80377be:	4618      	mov	r0, r3
 80377c0:	3708      	adds	r7, #8
 80377c2:	46bd      	mov	sp, r7
 80377c4:	bd80      	pop	{r7, pc}

080377c6 <_ZNSt5queueIjSt5dequeIjSaIjEEE5frontEv>:
      front()
 80377c6:	b580      	push	{r7, lr}
 80377c8:	b082      	sub	sp, #8
 80377ca:	af00      	add	r7, sp, #0
 80377cc:	6078      	str	r0, [r7, #4]
	return c.front();
 80377ce:	687b      	ldr	r3, [r7, #4]
 80377d0:	4618      	mov	r0, r3
 80377d2:	f001 fd55 	bl	8039280 <_ZNSt5dequeIjSaIjEE5frontEv>
 80377d6:	4603      	mov	r3, r0
      }
 80377d8:	4618      	mov	r0, r3
 80377da:	3708      	adds	r7, #8
 80377dc:	46bd      	mov	sp, r7
 80377de:	bd80      	pop	{r7, pc}

080377e0 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80377e0:	b580      	push	{r7, lr}
 80377e2:	b082      	sub	sp, #8
 80377e4:	af00      	add	r7, sp, #0
 80377e6:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80377e8:	687b      	ldr	r3, [r7, #4]
 80377ea:	4618      	mov	r0, r3
 80377ec:	f001 fd5c 	bl	80392a8 <_ZNSt5dequeIjSaIjEE9pop_frontEv>
      }
 80377f0:	bf00      	nop
 80377f2:	3708      	adds	r7, #8
 80377f4:	46bd      	mov	sp, r7
 80377f6:	bd80      	pop	{r7, pc}

080377f8 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushEOj>:
      push(value_type&& __x)
 80377f8:	b590      	push	{r4, r7, lr}
 80377fa:	b083      	sub	sp, #12
 80377fc:	af00      	add	r7, sp, #0
 80377fe:	6078      	str	r0, [r7, #4]
 8037800:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8037802:	687c      	ldr	r4, [r7, #4]
 8037804:	6838      	ldr	r0, [r7, #0]
 8037806:	f001 fd72 	bl	80392ee <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>
 803780a:	4603      	mov	r3, r0
 803780c:	4619      	mov	r1, r3
 803780e:	4620      	mov	r0, r4
 8037810:	f001 fd78 	bl	8039304 <_ZNSt5dequeIjSaIjEE9push_backEOj>
 8037814:	bf00      	nop
 8037816:	370c      	adds	r7, #12
 8037818:	46bd      	mov	sp, r7
 803781a:	bd90      	pop	{r4, r7, pc}

0803781c <_ZNSt6vectorI14StrobeObserverSaIS0_EE2atEj>:
       *  This function provides for safer data access.  The parameter
       *  is first checked that it is in the range of the vector.  The
       *  function throws out_of_range if the check fails.
       */
      reference
      at(size_type __n)
 803781c:	b580      	push	{r7, lr}
 803781e:	b082      	sub	sp, #8
 8037820:	af00      	add	r7, sp, #0
 8037822:	6078      	str	r0, [r7, #4]
 8037824:	6039      	str	r1, [r7, #0]
      {
	_M_range_check(__n);
 8037826:	6839      	ldr	r1, [r7, #0]
 8037828:	6878      	ldr	r0, [r7, #4]
 803782a:	f001 fd7d 	bl	8039328 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE14_M_range_checkEj>
	return (*this)[__n];
 803782e:	6839      	ldr	r1, [r7, #0]
 8037830:	6878      	ldr	r0, [r7, #4]
 8037832:	f001 fd99 	bl	8039368 <_ZNSt6vectorI14StrobeObserverSaIS0_EEixEj>
 8037836:	4603      	mov	r3, r0
      }
 8037838:	4618      	mov	r0, r3
 803783a:	3708      	adds	r7, #8
 803783c:	46bd      	mov	sp, r7
 803783e:	bd80      	pop	{r7, pc}

08037840 <_ZNSt6vectorI14StrobeObserverSaIS0_EE12emplace_backIJRhRPFvR18MotherboardContextEEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8037840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8037842:	b085      	sub	sp, #20
 8037844:	af00      	add	r7, sp, #0
 8037846:	60f8      	str	r0, [r7, #12]
 8037848:	60b9      	str	r1, [r7, #8]
 803784a:	607a      	str	r2, [r7, #4]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 803784c:	68fb      	ldr	r3, [r7, #12]
 803784e:	685a      	ldr	r2, [r3, #4]
 8037850:	68fb      	ldr	r3, [r7, #12]
 8037852:	689b      	ldr	r3, [r3, #8]
 8037854:	429a      	cmp	r2, r3
 8037856:	d016      	beq.n	8037886 <_ZNSt6vectorI14StrobeObserverSaIS0_EE12emplace_backIJRhRPFvR18MotherboardContextEEEEvDpOT_+0x46>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8037858:	68fc      	ldr	r4, [r7, #12]
 803785a:	68fb      	ldr	r3, [r7, #12]
 803785c:	685d      	ldr	r5, [r3, #4]
 803785e:	68b8      	ldr	r0, [r7, #8]
 8037860:	f001 fd95 	bl	803938e <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8037864:	4606      	mov	r6, r0
 8037866:	6878      	ldr	r0, [r7, #4]
 8037868:	f001 fd9c 	bl	80393a4 <_ZSt7forwardIRPFvR18MotherboardContextEEOT_RNSt16remove_referenceIS5_E4typeE>
 803786c:	4603      	mov	r3, r0
 803786e:	4632      	mov	r2, r6
 8037870:	4629      	mov	r1, r5
 8037872:	4620      	mov	r0, r4
 8037874:	f001 fda1 	bl	80393ba <_ZNSt16allocator_traitsISaI14StrobeObserverEE9constructIS0_JRhRPFvR18MotherboardContextEEEEvRS1_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8037878:	68fb      	ldr	r3, [r7, #12]
 803787a:	685b      	ldr	r3, [r3, #4]
 803787c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8037880:	68fb      	ldr	r3, [r7, #12]
 8037882:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8037884:	e010      	b.n	80378a8 <_ZNSt6vectorI14StrobeObserverSaIS0_EE12emplace_backIJRhRPFvR18MotherboardContextEEEEvDpOT_+0x68>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8037886:	68f8      	ldr	r0, [r7, #12]
 8037888:	f000 f822 	bl	80378d0 <_ZNSt6vectorI14StrobeObserverSaIS0_EE3endEv>
 803788c:	4604      	mov	r4, r0
 803788e:	68b8      	ldr	r0, [r7, #8]
 8037890:	f001 fd7d 	bl	803938e <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8037894:	4605      	mov	r5, r0
 8037896:	6878      	ldr	r0, [r7, #4]
 8037898:	f001 fd84 	bl	80393a4 <_ZSt7forwardIRPFvR18MotherboardContextEEOT_RNSt16remove_referenceIS5_E4typeE>
 803789c:	4603      	mov	r3, r0
 803789e:	462a      	mov	r2, r5
 80378a0:	4621      	mov	r1, r4
 80378a2:	68f8      	ldr	r0, [r7, #12]
 80378a4:	f001 fdb8 	bl	8039418 <_ZNSt6vectorI14StrobeObserverSaIS0_EE17_M_realloc_insertIJRhRPFvR18MotherboardContextEEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80378a8:	bf00      	nop
 80378aa:	3714      	adds	r7, #20
 80378ac:	46bd      	mov	sp, r7
 80378ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080378b0 <_ZNSt6vectorI14StrobeObserverSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80378b0:	b580      	push	{r7, lr}
 80378b2:	b084      	sub	sp, #16
 80378b4:	af00      	add	r7, sp, #0
 80378b6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80378b8:	687a      	ldr	r2, [r7, #4]
 80378ba:	f107 030c 	add.w	r3, r7, #12
 80378be:	4611      	mov	r1, r2
 80378c0:	4618      	mov	r0, r3
 80378c2:	f001 fe77 	bl	80395b4 <_ZN9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80378c6:	68fb      	ldr	r3, [r7, #12]
 80378c8:	4618      	mov	r0, r3
 80378ca:	3710      	adds	r7, #16
 80378cc:	46bd      	mov	sp, r7
 80378ce:	bd80      	pop	{r7, pc}

080378d0 <_ZNSt6vectorI14StrobeObserverSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80378d0:	b580      	push	{r7, lr}
 80378d2:	b084      	sub	sp, #16
 80378d4:	af00      	add	r7, sp, #0
 80378d6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80378d8:	687b      	ldr	r3, [r7, #4]
 80378da:	1d1a      	adds	r2, r3, #4
 80378dc:	f107 030c 	add.w	r3, r7, #12
 80378e0:	4611      	mov	r1, r2
 80378e2:	4618      	mov	r0, r3
 80378e4:	f001 fe66 	bl	80395b4 <_ZN9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80378e8:	68fb      	ldr	r3, [r7, #12]
 80378ea:	4618      	mov	r0, r3
 80378ec:	3710      	adds	r7, #16
 80378ee:	46bd      	mov	sp, r7
 80378f0:	bd80      	pop	{r7, pc}

080378f2 <_ZN9__gnu_cxxneIP14StrobeObserverSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80378f2:	b590      	push	{r4, r7, lr}
 80378f4:	b083      	sub	sp, #12
 80378f6:	af00      	add	r7, sp, #0
 80378f8:	6078      	str	r0, [r7, #4]
 80378fa:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80378fc:	6878      	ldr	r0, [r7, #4]
 80378fe:	f001 fe69 	bl	80395d4 <_ZNK9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEE4baseEv>
 8037902:	4603      	mov	r3, r0
 8037904:	681c      	ldr	r4, [r3, #0]
 8037906:	6838      	ldr	r0, [r7, #0]
 8037908:	f001 fe64 	bl	80395d4 <_ZNK9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEE4baseEv>
 803790c:	4603      	mov	r3, r0
 803790e:	681b      	ldr	r3, [r3, #0]
 8037910:	429c      	cmp	r4, r3
 8037912:	bf14      	ite	ne
 8037914:	2301      	movne	r3, #1
 8037916:	2300      	moveq	r3, #0
 8037918:	b2db      	uxtb	r3, r3
 803791a:	4618      	mov	r0, r3
 803791c:	370c      	adds	r7, #12
 803791e:	46bd      	mov	sp, r7
 8037920:	bd90      	pop	{r4, r7, pc}

08037922 <_ZN9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8037922:	b480      	push	{r7}
 8037924:	b083      	sub	sp, #12
 8037926:	af00      	add	r7, sp, #0
 8037928:	6078      	str	r0, [r7, #4]
	++_M_current;
 803792a:	687b      	ldr	r3, [r7, #4]
 803792c:	681b      	ldr	r3, [r3, #0]
 803792e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8037932:	687b      	ldr	r3, [r7, #4]
 8037934:	601a      	str	r2, [r3, #0]
	return *this;
 8037936:	687b      	ldr	r3, [r7, #4]
      }
 8037938:	4618      	mov	r0, r3
 803793a:	370c      	adds	r7, #12
 803793c:	46bd      	mov	sp, r7
 803793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037942:	4770      	bx	lr

08037944 <_ZNK9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8037944:	b480      	push	{r7}
 8037946:	b083      	sub	sp, #12
 8037948:	af00      	add	r7, sp, #0
 803794a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 803794c:	687b      	ldr	r3, [r7, #4]
 803794e:	681b      	ldr	r3, [r3, #0]
 8037950:	4618      	mov	r0, r3
 8037952:	370c      	adds	r7, #12
 8037954:	46bd      	mov	sp, r7
 8037956:	f85d 7b04 	ldr.w	r7, [sp], #4
 803795a:	4770      	bx	lr

0803795c <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EE5ClearEv>:
		assert(HasSeq(seq));

		return Queue.Peek(seq - FirstSeq);
	}

	void Clear() {
 803795c:	b580      	push	{r7, lr}
 803795e:	b082      	sub	sp, #8
 8037960:	af00      	add	r7, sp, #0
 8037962:	6078      	str	r0, [r7, #4]
		FirstSeq = 0;
 8037964:	687b      	ldr	r3, [r7, #4]
 8037966:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 803796a:	461a      	mov	r2, r3
 803796c:	2300      	movs	r3, #0
 803796e:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
		Queue.Clear();
 8037972:	687b      	ldr	r3, [r7, #4]
 8037974:	4618      	mov	r0, r3
 8037976:	f001 fe39 	bl	80395ec <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE5ClearEv>
	}
 803797a:	bf00      	nop
 803797c:	3708      	adds	r7, #8
 803797e:	46bd      	mov	sp, r7
 8037980:	bd80      	pop	{r7, pc}

08037982 <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE5ClearEv>:
	void Clear() {
 8037982:	b580      	push	{r7, lr}
 8037984:	b082      	sub	sp, #8
 8037986:	af00      	add	r7, sp, #0
 8037988:	6078      	str	r0, [r7, #4]
		FirstSeq = 0;
 803798a:	687b      	ldr	r3, [r7, #4]
 803798c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8037990:	461a      	mov	r2, r3
 8037992:	2300      	movs	r3, #0
 8037994:	f8c2 377c 	str.w	r3, [r2, #1916]	; 0x77c
		Queue.Clear();
 8037998:	687b      	ldr	r3, [r7, #4]
 803799a:	4618      	mov	r0, r3
 803799c:	f001 fe40 	bl	8039620 <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE5ClearEv>
	}
 80379a0:	bf00      	nop
 80379a2:	3708      	adds	r7, #8
 80379a4:	46bd      	mov	sp, r7
 80379a6:	bd80      	pop	{r7, pc}

080379a8 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80379a8:	b580      	push	{r7, lr}
 80379aa:	b082      	sub	sp, #8
 80379ac:	af00      	add	r7, sp, #0
 80379ae:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80379b0:	6878      	ldr	r0, [r7, #4]
 80379b2:	f001 fe4e 	bl	8039652 <_ZNSaI14StrobeObserverEC1Ev>
 80379b6:	687b      	ldr	r3, [r7, #4]
 80379b8:	4618      	mov	r0, r3
 80379ba:	f001 fe56 	bl	803966a <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80379be:	687b      	ldr	r3, [r7, #4]
 80379c0:	4618      	mov	r0, r3
 80379c2:	3708      	adds	r7, #8
 80379c4:	46bd      	mov	sp, r7
 80379c6:	bd80      	pop	{r7, pc}

080379c8 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures15BodySendForwardEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 80379c8:	b590      	push	{r4, r7, lr}
 80379ca:	b0cd      	sub	sp, #308	; 0x134
 80379cc:	af00      	add	r7, sp, #0
 80379ce:	f507 7498 	add.w	r4, r7, #304	; 0x130
 80379d2:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80379d6:	6020      	str	r0, [r4, #0]
 80379d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80379dc:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 80379e0:	6001      	str	r1, [r0, #0]
 80379e2:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80379e6:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 80379ea:	600a      	str	r2, [r1, #0]
 80379ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80379f0:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 80379f4:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 80379f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80379fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80379fe:	681b      	ldr	r3, [r3, #0]
 8037a00:	3301      	adds	r3, #1
 8037a02:	4618      	mov	r0, r3
 8037a04:	f7ff fd13 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 8037a08:	4602      	mov	r2, r0
 8037a0a:	463b      	mov	r3, r7
 8037a0c:	4611      	mov	r1, r2
 8037a0e:	4618      	mov	r0, r3
 8037a10:	f003 ff62 	bl	803b8d8 <_ZN4Roki8Messages11BodyRequest11DeserializeEPKh>
 8037a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037a18:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8037a1c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8037a20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8037a24:	e883 0003 	stmia.w	r3, {r0, r1}
		if (reqMsg.GetPackedSize() != request.Size)
 8037a28:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8037a2c:	4618      	mov	r0, r3
 8037a2e:	f003 ff79 	bl	803b924 <_ZNK4Roki8Messages11BodyRequest13GetPackedSizeEv>
 8037a32:	4602      	mov	r2, r0
 8037a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037a38:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8037a3c:	681b      	ldr	r3, [r3, #0]
 8037a3e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8037a42:	429a      	cmp	r2, r3
 8037a44:	bf14      	ite	ne
 8037a46:	2301      	movne	r3, #1
 8037a48:	2300      	moveq	r3, #0
 8037a4a:	b2db      	uxtb	r3, r3
 8037a4c:	2b00      	cmp	r3, #0
 8037a4e:	d00d      	beq.n	8037a6c <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures15BodySendForwardEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xa4>
			return CreateError(Errors::BadRequest);
 8037a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037a54:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8037a58:	6818      	ldr	r0, [r3, #0]
 8037a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037a5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8037a62:	2203      	movs	r2, #3
 8037a64:	6819      	ldr	r1, [r3, #0]
 8037a66:	f7fe fda7 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8037a6a:	e054      	b.n	8037b16 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures15BodySendForwardEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x14e>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 8037a6c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8037a70:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8037a74:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8037a78:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8037a7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8037a80:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8037a84:	6809      	ldr	r1, [r1, #0]
 8037a86:	6800      	ldr	r0, [r0, #0]
 8037a88:	f7ff f814 	bl	8036ab4 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures15BodySendForwardEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 8037a8c:	4603      	mov	r3, r0
 8037a8e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (error != Errors::Success)
 8037a92:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8037a96:	2b00      	cmp	r3, #0
 8037a98:	d00e      	beq.n	8037ab8 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures15BodySendForwardEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xf0>
			return CreateError(error);
 8037a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037a9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8037aa2:	6818      	ldr	r0, [r3, #0]
 8037aa4:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8037aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037aac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8037ab0:	6819      	ldr	r1, [r3, #0]
 8037ab2:	f7fe fd81 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8037ab6:	e02e      	b.n	8037b16 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures15BodySendForwardEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x14e>
		responce.Error = Errors::Success;
 8037ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037abc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8037ac0:	2200      	movs	r2, #0
 8037ac2:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 8037ac4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8037ac8:	4618      	mov	r0, r3
 8037aca:	f003 ff5f 	bl	803b98c <_ZNK4Roki8Messages12BodyResponce13GetPackedSizeEv>
 8037ace:	4603      	mov	r3, r0
 8037ad0:	b2da      	uxtb	r2, r3
 8037ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037ad6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8037ada:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 8037adc:	f107 0318 	add.w	r3, r7, #24
 8037ae0:	3302      	adds	r3, #2
 8037ae2:	4618      	mov	r0, r3
 8037ae4:	f7ff fbf7 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8037ae8:	4602      	mov	r2, r0
 8037aea:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8037aee:	4611      	mov	r1, r2
 8037af0:	4618      	mov	r0, r3
 8037af2:	f003 ff25 	bl	803b940 <_ZNK4Roki8Messages12BodyResponce9SerializeEPh>
		return responce;
 8037af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037afa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8037afe:	681a      	ldr	r2, [r3, #0]
 8037b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037b04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8037b08:	4610      	mov	r0, r2
 8037b0a:	4619      	mov	r1, r3
 8037b0c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8037b10:	461a      	mov	r2, r3
 8037b12:	f004 f8b9 	bl	803bc88 <memcpy>
	}
 8037b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037b1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8037b1e:	6818      	ldr	r0, [r3, #0]
 8037b20:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8037b24:	46bd      	mov	sp, r7
 8037b26:	bd90      	pop	{r4, r7, pc}

08037b28 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures13BodySendQueueEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 8037b28:	b590      	push	{r4, r7, lr}
 8037b2a:	b0cd      	sub	sp, #308	; 0x134
 8037b2c:	af00      	add	r7, sp, #0
 8037b2e:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8037b32:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8037b36:	6020      	str	r0, [r4, #0]
 8037b38:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8037b3c:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8037b40:	6001      	str	r1, [r0, #0]
 8037b42:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8037b46:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8037b4a:	600a      	str	r2, [r1, #0]
 8037b4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8037b50:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8037b54:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 8037b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037b5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8037b5e:	681b      	ldr	r3, [r3, #0]
 8037b60:	3301      	adds	r3, #1
 8037b62:	4618      	mov	r0, r3
 8037b64:	f7ff fc63 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 8037b68:	4602      	mov	r2, r0
 8037b6a:	463b      	mov	r3, r7
 8037b6c:	4611      	mov	r1, r2
 8037b6e:	4618      	mov	r0, r3
 8037b70:	f003 feb2 	bl	803b8d8 <_ZN4Roki8Messages11BodyRequest11DeserializeEPKh>
 8037b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037b78:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8037b7c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8037b80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8037b84:	e883 0003 	stmia.w	r3, {r0, r1}
		if (reqMsg.GetPackedSize() != request.Size)
 8037b88:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8037b8c:	4618      	mov	r0, r3
 8037b8e:	f003 fec9 	bl	803b924 <_ZNK4Roki8Messages11BodyRequest13GetPackedSizeEv>
 8037b92:	4602      	mov	r2, r0
 8037b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037b98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8037b9c:	681b      	ldr	r3, [r3, #0]
 8037b9e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8037ba2:	429a      	cmp	r2, r3
 8037ba4:	bf14      	ite	ne
 8037ba6:	2301      	movne	r3, #1
 8037ba8:	2300      	moveq	r3, #0
 8037baa:	b2db      	uxtb	r3, r3
 8037bac:	2b00      	cmp	r3, #0
 8037bae:	d00d      	beq.n	8037bcc <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures13BodySendQueueEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xa4>
			return CreateError(Errors::BadRequest);
 8037bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037bb4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8037bb8:	6818      	ldr	r0, [r3, #0]
 8037bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037bbe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8037bc2:	2203      	movs	r2, #3
 8037bc4:	6819      	ldr	r1, [r3, #0]
 8037bc6:	f7fe fcf7 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8037bca:	e054      	b.n	8037c76 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures13BodySendQueueEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x14e>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 8037bcc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037bd0:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8037bd4:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8037bd8:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8037bdc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8037be0:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8037be4:	6809      	ldr	r1, [r1, #0]
 8037be6:	6800      	ldr	r0, [r0, #0]
 8037be8:	f7fe ff9f 	bl	8036b2a <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures13BodySendQueueEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 8037bec:	4603      	mov	r3, r0
 8037bee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (error != Errors::Success)
 8037bf2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8037bf6:	2b00      	cmp	r3, #0
 8037bf8:	d00e      	beq.n	8037c18 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures13BodySendQueueEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xf0>
			return CreateError(error);
 8037bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037bfe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8037c02:	6818      	ldr	r0, [r3, #0]
 8037c04:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8037c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037c0c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8037c10:	6819      	ldr	r1, [r3, #0]
 8037c12:	f7fe fcd1 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8037c16:	e02e      	b.n	8037c76 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures13BodySendQueueEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x14e>
		responce.Error = Errors::Success;
 8037c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037c1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8037c20:	2200      	movs	r2, #0
 8037c22:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 8037c24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037c28:	4618      	mov	r0, r3
 8037c2a:	f003 fccd 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 8037c2e:	4603      	mov	r3, r0
 8037c30:	b2da      	uxtb	r2, r3
 8037c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037c36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8037c3a:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 8037c3c:	f107 031c 	add.w	r3, r7, #28
 8037c40:	3302      	adds	r3, #2
 8037c42:	4618      	mov	r0, r3
 8037c44:	f7ff fb47 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8037c48:	4602      	mov	r2, r0
 8037c4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037c4e:	4611      	mov	r1, r2
 8037c50:	4618      	mov	r0, r3
 8037c52:	f003 fc89 	bl	803b568 <_ZNK4Roki8Messages5Empty9SerializeEPh>
		return responce;
 8037c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037c5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8037c5e:	681a      	ldr	r2, [r3, #0]
 8037c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037c64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8037c68:	4610      	mov	r0, r2
 8037c6a:	4619      	mov	r1, r3
 8037c6c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8037c70:	461a      	mov	r2, r3
 8037c72:	f004 f809 	bl	803bc88 <memcpy>
	}
 8037c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8037c7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8037c7e:	6818      	ldr	r0, [r3, #0]
 8037c80:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8037c84:	46bd      	mov	sp, r7
 8037c86:	bd90      	pop	{r4, r7, pc}

08037c88 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures21ConfigureStrobeFilterEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 8037c88:	b590      	push	{r4, r7, lr}
 8037c8a:	b0c9      	sub	sp, #292	; 0x124
 8037c8c:	af00      	add	r7, sp, #0
 8037c8e:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8037c92:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8037c96:	6020      	str	r0, [r4, #0]
 8037c98:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8037c9c:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8037ca0:	6001      	str	r1, [r0, #0]
 8037ca2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8037ca6:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8037caa:	600a      	str	r2, [r1, #0]
 8037cac:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8037cb0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8037cb4:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 8037cb6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037cba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8037cbe:	681b      	ldr	r3, [r3, #0]
 8037cc0:	3301      	adds	r3, #1
 8037cc2:	4618      	mov	r0, r3
 8037cc4:	f7ff fbb3 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 8037cc8:	4603      	mov	r3, r0
 8037cca:	4618      	mov	r0, r3
 8037ccc:	f003 fd48 	bl	803b760 <_ZN4Roki8Messages18StrobeFilterConfig11DeserializeEPKh>
 8037cd0:	4603      	mov	r3, r0
 8037cd2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
		if (reqMsg.GetPackedSize() != request.Size)
 8037cd6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8037cda:	4618      	mov	r0, r3
 8037cdc:	f003 fd68 	bl	803b7b0 <_ZNK4Roki8Messages18StrobeFilterConfig13GetPackedSizeEv>
 8037ce0:	4602      	mov	r2, r0
 8037ce2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037ce6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8037cea:	681b      	ldr	r3, [r3, #0]
 8037cec:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8037cf0:	429a      	cmp	r2, r3
 8037cf2:	bf14      	ite	ne
 8037cf4:	2301      	movne	r3, #1
 8037cf6:	2300      	moveq	r3, #0
 8037cf8:	b2db      	uxtb	r3, r3
 8037cfa:	2b00      	cmp	r3, #0
 8037cfc:	d00d      	beq.n	8037d1a <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures21ConfigureStrobeFilterEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x92>
			return CreateError(Errors::BadRequest);
 8037cfe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037d02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8037d06:	6818      	ldr	r0, [r3, #0]
 8037d08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037d0c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8037d10:	2203      	movs	r2, #3
 8037d12:	6819      	ldr	r1, [r3, #0]
 8037d14:	f7fe fc50 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8037d18:	e054      	b.n	8037dc4 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures21ConfigureStrobeFilterEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x13c>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 8037d1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8037d1e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8037d22:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8037d26:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8037d2a:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8037d2e:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8037d32:	6809      	ldr	r1, [r1, #0]
 8037d34:	6800      	ldr	r0, [r0, #0]
 8037d36:	f7fe fe8f 	bl	8036a58 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures21ConfigureStrobeFilterEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 8037d3a:	4603      	mov	r3, r0
 8037d3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		if (error != Errors::Success)
 8037d40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8037d44:	2b00      	cmp	r3, #0
 8037d46:	d00e      	beq.n	8037d66 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures21ConfigureStrobeFilterEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xde>
			return CreateError(error);
 8037d48:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037d4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8037d50:	6818      	ldr	r0, [r3, #0]
 8037d52:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8037d56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037d5a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8037d5e:	6819      	ldr	r1, [r3, #0]
 8037d60:	f7fe fc2a 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8037d64:	e02e      	b.n	8037dc4 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures21ConfigureStrobeFilterEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x13c>
		responce.Error = Errors::Success;
 8037d66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037d6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8037d6e:	2200      	movs	r2, #0
 8037d70:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 8037d72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8037d76:	4618      	mov	r0, r3
 8037d78:	f003 fc26 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 8037d7c:	4603      	mov	r3, r0
 8037d7e:	b2da      	uxtb	r2, r3
 8037d80:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037d84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8037d88:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 8037d8a:	f107 0314 	add.w	r3, r7, #20
 8037d8e:	3302      	adds	r3, #2
 8037d90:	4618      	mov	r0, r3
 8037d92:	f7ff faa0 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8037d96:	4602      	mov	r2, r0
 8037d98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8037d9c:	4611      	mov	r1, r2
 8037d9e:	4618      	mov	r0, r3
 8037da0:	f003 fbe2 	bl	803b568 <_ZNK4Roki8Messages5Empty9SerializeEPh>
		return responce;
 8037da4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037da8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8037dac:	681a      	ldr	r2, [r3, #0]
 8037dae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037db2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8037db6:	4610      	mov	r0, r2
 8037db8:	4619      	mov	r1, r3
 8037dba:	f44f 7381 	mov.w	r3, #258	; 0x102
 8037dbe:	461a      	mov	r2, r3
 8037dc0:	f003 ff62 	bl	803bc88 <memcpy>
	}
 8037dc4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037dc8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8037dcc:	6818      	ldr	r0, [r3, #0]
 8037dce:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8037dd2:	46bd      	mov	sp, r7
 8037dd4:	bd90      	pop	{r4, r7, pc}

08037dd6 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures20GetBodyContainerInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 8037dd6:	b590      	push	{r4, r7, lr}
 8037dd8:	b0cb      	sub	sp, #300	; 0x12c
 8037dda:	af00      	add	r7, sp, #0
 8037ddc:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8037de0:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8037de4:	6020      	str	r0, [r4, #0]
 8037de6:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8037dea:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8037dee:	6001      	str	r1, [r0, #0]
 8037df0:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8037df4:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8037df8:	600a      	str	r2, [r1, #0]
 8037dfa:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8037dfe:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8037e02:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 8037e04:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8037e08:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8037e0c:	681b      	ldr	r3, [r3, #0]
 8037e0e:	3301      	adds	r3, #1
 8037e10:	4618      	mov	r0, r3
 8037e12:	f7ff fb0c 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 8037e16:	4603      	mov	r3, r0
 8037e18:	4618      	mov	r0, r3
 8037e1a:	f003 fbbd 	bl	803b598 <_ZN4Roki8Messages5Empty11DeserializeEPKh>
		if (reqMsg.GetPackedSize() != request.Size)
 8037e1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037e22:	4618      	mov	r0, r3
 8037e24:	f003 fbd0 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 8037e28:	4602      	mov	r2, r0
 8037e2a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8037e2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8037e32:	681b      	ldr	r3, [r3, #0]
 8037e34:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8037e38:	429a      	cmp	r2, r3
 8037e3a:	bf14      	ite	ne
 8037e3c:	2301      	movne	r3, #1
 8037e3e:	2300      	moveq	r3, #0
 8037e40:	b2db      	uxtb	r3, r3
 8037e42:	2b00      	cmp	r3, #0
 8037e44:	d00d      	beq.n	8037e62 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures20GetBodyContainerInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x8c>
			return CreateError(Errors::BadRequest);
 8037e46:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8037e4a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8037e4e:	6818      	ldr	r0, [r3, #0]
 8037e50:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8037e54:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8037e58:	2203      	movs	r2, #3
 8037e5a:	6819      	ldr	r1, [r3, #0]
 8037e5c:	f7fe fbac 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8037e60:	e054      	b.n	8037f0c <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures20GetBodyContainerInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 8037e62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8037e66:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8037e6a:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8037e6e:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8037e72:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8037e76:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8037e7a:	6809      	ldr	r1, [r1, #0]
 8037e7c:	6800      	ldr	r0, [r0, #0]
 8037e7e:	f7fe fd4d 	bl	803691c <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures20GetBodyContainerInfoEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 8037e82:	4603      	mov	r3, r0
 8037e84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if (error != Errors::Success)
 8037e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8037e8c:	2b00      	cmp	r3, #0
 8037e8e:	d00e      	beq.n	8037eae <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures20GetBodyContainerInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xd8>
			return CreateError(error);
 8037e90:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8037e94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8037e98:	6818      	ldr	r0, [r3, #0]
 8037e9a:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8037e9e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8037ea2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8037ea6:	6819      	ldr	r1, [r3, #0]
 8037ea8:	f7fe fb86 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8037eac:	e02e      	b.n	8037f0c <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures20GetBodyContainerInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		responce.Error = Errors::Success;
 8037eae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8037eb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8037eb6:	2200      	movs	r2, #0
 8037eb8:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 8037eba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8037ebe:	4618      	mov	r0, r3
 8037ec0:	f003 fc1a 	bl	803b6f8 <_ZNK4Roki8Messages18FrameContainerInfo13GetPackedSizeEv>
 8037ec4:	4603      	mov	r3, r0
 8037ec6:	b2da      	uxtb	r2, r3
 8037ec8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8037ecc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8037ed0:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 8037ed2:	f107 0314 	add.w	r3, r7, #20
 8037ed6:	3302      	adds	r3, #2
 8037ed8:	4618      	mov	r0, r3
 8037eda:	f7ff f9fc 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8037ede:	4602      	mov	r2, r0
 8037ee0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8037ee4:	4611      	mov	r1, r2
 8037ee6:	4618      	mov	r0, r3
 8037ee8:	f003 fbd8 	bl	803b69c <_ZNK4Roki8Messages18FrameContainerInfo9SerializeEPh>
		return responce;
 8037eec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8037ef0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8037ef4:	681a      	ldr	r2, [r3, #0]
 8037ef6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8037efa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8037efe:	4610      	mov	r0, r2
 8037f00:	4619      	mov	r1, r3
 8037f02:	f44f 7381 	mov.w	r3, #258	; 0x102
 8037f06:	461a      	mov	r2, r3
 8037f08:	f003 febe 	bl	803bc88 <memcpy>
	}
 8037f0c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8037f10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8037f14:	6818      	ldr	r0, [r3, #0]
 8037f16:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8037f1a:	46bd      	mov	sp, r7
 8037f1c:	bd90      	pop	{r4, r7, pc}

08037f1e <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures12GetBodyFrameEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 8037f1e:	b590      	push	{r4, r7, lr}
 8037f20:	b0c9      	sub	sp, #292	; 0x124
 8037f22:	af00      	add	r7, sp, #0
 8037f24:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8037f28:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8037f2c:	6020      	str	r0, [r4, #0]
 8037f2e:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8037f32:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8037f36:	6001      	str	r1, [r0, #0]
 8037f38:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8037f3c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8037f40:	600a      	str	r2, [r1, #0]
 8037f42:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8037f46:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8037f4a:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 8037f4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037f50:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8037f54:	681b      	ldr	r3, [r3, #0]
 8037f56:	3301      	adds	r3, #1
 8037f58:	4618      	mov	r0, r3
 8037f5a:	f7ff fa68 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 8037f5e:	4603      	mov	r3, r0
 8037f60:	4618      	mov	r0, r3
 8037f62:	f003 fbd5 	bl	803b710 <_ZN4Roki8Messages11FrameNumber11DeserializeEPKh>
 8037f66:	4603      	mov	r3, r0
 8037f68:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
		if (reqMsg.GetPackedSize() != request.Size)
 8037f6c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8037f70:	4618      	mov	r0, r3
 8037f72:	f003 fbe9 	bl	803b748 <_ZNK4Roki8Messages11FrameNumber13GetPackedSizeEv>
 8037f76:	4602      	mov	r2, r0
 8037f78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037f7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8037f80:	681b      	ldr	r3, [r3, #0]
 8037f82:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8037f86:	429a      	cmp	r2, r3
 8037f88:	bf14      	ite	ne
 8037f8a:	2301      	movne	r3, #1
 8037f8c:	2300      	moveq	r3, #0
 8037f8e:	b2db      	uxtb	r3, r3
 8037f90:	2b00      	cmp	r3, #0
 8037f92:	d00d      	beq.n	8037fb0 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures12GetBodyFrameEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x92>
			return CreateError(Errors::BadRequest);
 8037f94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037f98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8037f9c:	6818      	ldr	r0, [r3, #0]
 8037f9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037fa2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8037fa6:	2203      	movs	r2, #3
 8037fa8:	6819      	ldr	r1, [r3, #0]
 8037faa:	f7fe fb05 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8037fae:	e054      	b.n	803805a <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures12GetBodyFrameEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x13c>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 8037fb0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8037fb4:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8037fb8:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8037fbc:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8037fc0:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8037fc4:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8037fc8:	6809      	ldr	r1, [r1, #0]
 8037fca:	6800      	ldr	r0, [r0, #0]
 8037fcc:	f7fe fbf4 	bl	80367b8 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures12GetBodyFrameEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 8037fd0:	4603      	mov	r3, r0
 8037fd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		if (error != Errors::Success)
 8037fd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8037fda:	2b00      	cmp	r3, #0
 8037fdc:	d00e      	beq.n	8037ffc <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures12GetBodyFrameEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xde>
			return CreateError(error);
 8037fde:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037fe2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8037fe6:	6818      	ldr	r0, [r3, #0]
 8037fe8:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8037fec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8037ff0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8037ff4:	6819      	ldr	r1, [r3, #0]
 8037ff6:	f7fe fadf 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8037ffa:	e02e      	b.n	803805a <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures12GetBodyFrameEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x13c>
		responce.Error = Errors::Success;
 8037ffc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038000:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8038004:	2200      	movs	r2, #0
 8038006:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 8038008:	f507 738a 	add.w	r3, r7, #276	; 0x114
 803800c:	4618      	mov	r0, r3
 803800e:	f003 fcbd 	bl	803b98c <_ZNK4Roki8Messages12BodyResponce13GetPackedSizeEv>
 8038012:	4603      	mov	r3, r0
 8038014:	b2da      	uxtb	r2, r3
 8038016:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803801a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 803801e:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 8038020:	f107 0310 	add.w	r3, r7, #16
 8038024:	3302      	adds	r3, #2
 8038026:	4618      	mov	r0, r3
 8038028:	f7ff f955 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 803802c:	4602      	mov	r2, r0
 803802e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8038032:	4611      	mov	r1, r2
 8038034:	4618      	mov	r0, r3
 8038036:	f003 fc83 	bl	803b940 <_ZNK4Roki8Messages12BodyResponce9SerializeEPh>
		return responce;
 803803a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803803e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038042:	681a      	ldr	r2, [r3, #0]
 8038044:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038048:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 803804c:	4610      	mov	r0, r2
 803804e:	4619      	mov	r1, r3
 8038050:	f44f 7381 	mov.w	r3, #258	; 0x102
 8038054:	461a      	mov	r2, r3
 8038056:	f003 fe17 	bl	803bc88 <memcpy>
	}
 803805a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803805e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038062:	6818      	ldr	r0, [r3, #0]
 8038064:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8038068:	46bd      	mov	sp, r7
 803806a:	bd90      	pop	{r4, r7, pc}

0803806c <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures16GetBodyQueueInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 803806c:	b590      	push	{r4, r7, lr}
 803806e:	b0c9      	sub	sp, #292	; 0x124
 8038070:	af00      	add	r7, sp, #0
 8038072:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8038076:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 803807a:	6020      	str	r0, [r4, #0]
 803807c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8038080:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8038084:	6001      	str	r1, [r0, #0]
 8038086:	f507 7190 	add.w	r1, r7, #288	; 0x120
 803808a:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 803808e:	600a      	str	r2, [r1, #0]
 8038090:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8038094:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8038098:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 803809a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803809e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80380a2:	681b      	ldr	r3, [r3, #0]
 80380a4:	3301      	adds	r3, #1
 80380a6:	4618      	mov	r0, r3
 80380a8:	f7ff f9c1 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 80380ac:	4603      	mov	r3, r0
 80380ae:	4618      	mov	r0, r3
 80380b0:	f003 fa72 	bl	803b598 <_ZN4Roki8Messages5Empty11DeserializeEPKh>
		if (reqMsg.GetPackedSize() != request.Size)
 80380b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80380b8:	4618      	mov	r0, r3
 80380ba:	f003 fa85 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 80380be:	4602      	mov	r2, r0
 80380c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80380c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80380c8:	681b      	ldr	r3, [r3, #0]
 80380ca:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80380ce:	429a      	cmp	r2, r3
 80380d0:	bf14      	ite	ne
 80380d2:	2301      	movne	r3, #1
 80380d4:	2300      	moveq	r3, #0
 80380d6:	b2db      	uxtb	r3, r3
 80380d8:	2b00      	cmp	r3, #0
 80380da:	d00d      	beq.n	80380f8 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures16GetBodyQueueInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x8c>
			return CreateError(Errors::BadRequest);
 80380dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80380e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80380e4:	6818      	ldr	r0, [r3, #0]
 80380e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80380ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80380ee:	2203      	movs	r2, #3
 80380f0:	6819      	ldr	r1, [r3, #0]
 80380f2:	f7fe fa61 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 80380f6:	e054      	b.n	80381a2 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures16GetBodyQueueInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 80380f8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80380fc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8038100:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8038104:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8038108:	f507 7090 	add.w	r0, r7, #288	; 0x120
 803810c:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8038110:	6809      	ldr	r1, [r1, #0]
 8038112:	6800      	ldr	r0, [r0, #0]
 8038114:	f7fe fd6e 	bl	8036bf4 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures16GetBodyQueueInfoEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 8038118:	4603      	mov	r3, r0
 803811a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		if (error != Errors::Success)
 803811e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8038122:	2b00      	cmp	r3, #0
 8038124:	d00e      	beq.n	8038144 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures16GetBodyQueueInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xd8>
			return CreateError(error);
 8038126:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803812a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 803812e:	6818      	ldr	r0, [r3, #0]
 8038130:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8038134:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038138:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 803813c:	6819      	ldr	r1, [r3, #0]
 803813e:	f7fe fa3b 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8038142:	e02e      	b.n	80381a2 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures16GetBodyQueueInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		responce.Error = Errors::Success;
 8038144:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038148:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 803814c:	2200      	movs	r2, #0
 803814e:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 8038150:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8038154:	4618      	mov	r0, r3
 8038156:	f003 fb8b 	bl	803b870 <_ZNK4Roki8Messages13BodyQueueInfo13GetPackedSizeEv>
 803815a:	4603      	mov	r3, r0
 803815c:	b2da      	uxtb	r2, r3
 803815e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038162:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8038166:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 8038168:	f107 0310 	add.w	r3, r7, #16
 803816c:	3302      	adds	r3, #2
 803816e:	4618      	mov	r0, r3
 8038170:	f7ff f8b1 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8038174:	4602      	mov	r2, r0
 8038176:	f507 738a 	add.w	r3, r7, #276	; 0x114
 803817a:	4611      	mov	r1, r2
 803817c:	4618      	mov	r0, r3
 803817e:	f003 fb51 	bl	803b824 <_ZNK4Roki8Messages13BodyQueueInfo9SerializeEPh>
		return responce;
 8038182:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038186:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 803818a:	681a      	ldr	r2, [r3, #0]
 803818c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038190:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8038194:	4610      	mov	r0, r2
 8038196:	4619      	mov	r1, r3
 8038198:	f44f 7381 	mov.w	r3, #258	; 0x102
 803819c:	461a      	mov	r2, r3
 803819e:	f003 fd73 	bl	803bc88 <memcpy>
	}
 80381a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80381a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80381aa:	6818      	ldr	r0, [r3, #0]
 80381ac:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80381b0:	46bd      	mov	sp, r7
 80381b2:	bd90      	pop	{r4, r7, pc}

080381b4 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures19GetIMUContainerInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 80381b4:	b590      	push	{r4, r7, lr}
 80381b6:	b0cb      	sub	sp, #300	; 0x12c
 80381b8:	af00      	add	r7, sp, #0
 80381ba:	f507 7494 	add.w	r4, r7, #296	; 0x128
 80381be:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80381c2:	6020      	str	r0, [r4, #0]
 80381c4:	f507 7094 	add.w	r0, r7, #296	; 0x128
 80381c8:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 80381cc:	6001      	str	r1, [r0, #0]
 80381ce:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80381d2:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 80381d6:	600a      	str	r2, [r1, #0]
 80381d8:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80381dc:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 80381e0:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 80381e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80381e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80381ea:	681b      	ldr	r3, [r3, #0]
 80381ec:	3301      	adds	r3, #1
 80381ee:	4618      	mov	r0, r3
 80381f0:	f7ff f91d 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 80381f4:	4603      	mov	r3, r0
 80381f6:	4618      	mov	r0, r3
 80381f8:	f003 f9ce 	bl	803b598 <_ZN4Roki8Messages5Empty11DeserializeEPKh>
		if (reqMsg.GetPackedSize() != request.Size)
 80381fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038200:	4618      	mov	r0, r3
 8038202:	f003 f9e1 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 8038206:	4602      	mov	r2, r0
 8038208:	f507 7394 	add.w	r3, r7, #296	; 0x128
 803820c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8038210:	681b      	ldr	r3, [r3, #0]
 8038212:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8038216:	429a      	cmp	r2, r3
 8038218:	bf14      	ite	ne
 803821a:	2301      	movne	r3, #1
 803821c:	2300      	moveq	r3, #0
 803821e:	b2db      	uxtb	r3, r3
 8038220:	2b00      	cmp	r3, #0
 8038222:	d00d      	beq.n	8038240 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures19GetIMUContainerInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x8c>
			return CreateError(Errors::BadRequest);
 8038224:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8038228:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 803822c:	6818      	ldr	r0, [r3, #0]
 803822e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8038232:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8038236:	2203      	movs	r2, #3
 8038238:	6819      	ldr	r1, [r3, #0]
 803823a:	f7fe f9bd 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 803823e:	e054      	b.n	80382ea <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures19GetIMUContainerInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 8038240:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038244:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8038248:	f507 7194 	add.w	r1, r7, #296	; 0x128
 803824c:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8038250:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8038254:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8038258:	6809      	ldr	r1, [r1, #0]
 803825a:	6800      	ldr	r0, [r0, #0]
 803825c:	f7fe fb40 	bl	80368e0 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures19GetIMUContainerInfoEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 8038260:	4603      	mov	r3, r0
 8038262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if (error != Errors::Success)
 8038266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 803826a:	2b00      	cmp	r3, #0
 803826c:	d00e      	beq.n	803828c <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures19GetIMUContainerInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xd8>
			return CreateError(error);
 803826e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8038272:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8038276:	6818      	ldr	r0, [r3, #0]
 8038278:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 803827c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8038280:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8038284:	6819      	ldr	r1, [r3, #0]
 8038286:	f7fe f997 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 803828a:	e02e      	b.n	80382ea <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures19GetIMUContainerInfoEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		responce.Error = Errors::Success;
 803828c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8038290:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038294:	2200      	movs	r2, #0
 8038296:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 8038298:	f507 738c 	add.w	r3, r7, #280	; 0x118
 803829c:	4618      	mov	r0, r3
 803829e:	f003 fa2b 	bl	803b6f8 <_ZNK4Roki8Messages18FrameContainerInfo13GetPackedSizeEv>
 80382a2:	4603      	mov	r3, r0
 80382a4:	b2da      	uxtb	r2, r3
 80382a6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80382aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80382ae:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 80382b0:	f107 0314 	add.w	r3, r7, #20
 80382b4:	3302      	adds	r3, #2
 80382b6:	4618      	mov	r0, r3
 80382b8:	f7ff f80d 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 80382bc:	4602      	mov	r2, r0
 80382be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80382c2:	4611      	mov	r1, r2
 80382c4:	4618      	mov	r0, r3
 80382c6:	f003 f9e9 	bl	803b69c <_ZNK4Roki8Messages18FrameContainerInfo9SerializeEPh>
		return responce;
 80382ca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80382ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80382d2:	681a      	ldr	r2, [r3, #0]
 80382d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80382d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80382dc:	4610      	mov	r0, r2
 80382de:	4619      	mov	r1, r3
 80382e0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80382e4:	461a      	mov	r2, r3
 80382e6:	f003 fccf 	bl	803bc88 <memcpy>
	}
 80382ea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80382ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80382f2:	6818      	ldr	r0, [r3, #0]
 80382f4:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 80382f8:	46bd      	mov	sp, r7
 80382fa:	bd90      	pop	{r4, r7, pc}

080382fc <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures11GetIMUFrameEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 80382fc:	b590      	push	{r4, r7, lr}
 80382fe:	b0cd      	sub	sp, #308	; 0x134
 8038300:	af00      	add	r7, sp, #0
 8038302:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8038306:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 803830a:	6020      	str	r0, [r4, #0]
 803830c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8038310:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 8038314:	6001      	str	r1, [r0, #0]
 8038316:	f507 7198 	add.w	r1, r7, #304	; 0x130
 803831a:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 803831e:	600a      	str	r2, [r1, #0]
 8038320:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8038324:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8038328:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 803832a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 803832e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8038332:	681b      	ldr	r3, [r3, #0]
 8038334:	3301      	adds	r3, #1
 8038336:	4618      	mov	r0, r3
 8038338:	f7ff f879 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 803833c:	4603      	mov	r3, r0
 803833e:	4618      	mov	r0, r3
 8038340:	f003 f9e6 	bl	803b710 <_ZN4Roki8Messages11FrameNumber11DeserializeEPKh>
 8038344:	4603      	mov	r3, r0
 8038346:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
		if (reqMsg.GetPackedSize() != request.Size)
 803834a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 803834e:	4618      	mov	r0, r3
 8038350:	f003 f9fa 	bl	803b748 <_ZNK4Roki8Messages11FrameNumber13GetPackedSizeEv>
 8038354:	4602      	mov	r2, r0
 8038356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 803835a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 803835e:	681b      	ldr	r3, [r3, #0]
 8038360:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8038364:	429a      	cmp	r2, r3
 8038366:	bf14      	ite	ne
 8038368:	2301      	movne	r3, #1
 803836a:	2300      	moveq	r3, #0
 803836c:	b2db      	uxtb	r3, r3
 803836e:	2b00      	cmp	r3, #0
 8038370:	d00d      	beq.n	803838e <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures11GetIMUFrameEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x92>
			return CreateError(Errors::BadRequest);
 8038372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8038376:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 803837a:	6818      	ldr	r0, [r3, #0]
 803837c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8038380:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8038384:	2203      	movs	r2, #3
 8038386:	6819      	ldr	r1, [r3, #0]
 8038388:	f7fe f916 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 803838c:	e054      	b.n	8038438 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures11GetIMUFrameEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x13c>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 803838e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038392:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8038396:	f507 7198 	add.w	r1, r7, #304	; 0x130
 803839a:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 803839e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80383a2:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 80383a6:	6809      	ldr	r1, [r1, #0]
 80383a8:	6800      	ldr	r0, [r0, #0]
 80383aa:	f7fe f9d3 	bl	8036754 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures11GetIMUFrameEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 80383ae:	4603      	mov	r3, r0
 80383b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (error != Errors::Success)
 80383b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80383b8:	2b00      	cmp	r3, #0
 80383ba:	d00e      	beq.n	80383da <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures11GetIMUFrameEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xde>
			return CreateError(error);
 80383bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80383c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80383c4:	6818      	ldr	r0, [r3, #0]
 80383c6:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80383ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80383ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80383d2:	6819      	ldr	r1, [r3, #0]
 80383d4:	f7fe f8f0 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 80383d8:	e02e      	b.n	8038438 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures11GetIMUFrameEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x13c>
		responce.Error = Errors::Success;
 80383da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80383de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80383e2:	2200      	movs	r2, #0
 80383e4:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 80383e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80383ea:	4618      	mov	r0, r3
 80383ec:	f003 f94a 	bl	803b684 <_ZNK4Roki8Messages11IMUFrameMsg13GetPackedSizeEv>
 80383f0:	4603      	mov	r3, r0
 80383f2:	b2da      	uxtb	r2, r3
 80383f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80383f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80383fc:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 80383fe:	f107 0314 	add.w	r3, r7, #20
 8038402:	3302      	adds	r3, #2
 8038404:	4618      	mov	r0, r3
 8038406:	f7fe ff66 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 803840a:	4602      	mov	r2, r0
 803840c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038410:	4611      	mov	r1, r2
 8038412:	4618      	mov	r0, r3
 8038414:	f003 f8e4 	bl	803b5e0 <_ZNK4Roki8Messages11IMUFrameMsg9SerializeEPh>
		return responce;
 8038418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 803841c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8038420:	681a      	ldr	r2, [r3, #0]
 8038422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8038426:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 803842a:	4610      	mov	r0, r2
 803842c:	4619      	mov	r1, r3
 803842e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8038432:	461a      	mov	r2, r3
 8038434:	f003 fc28 	bl	803bc88 <memcpy>
	}
 8038438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 803843c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8038440:	6818      	ldr	r0, [r3, #0]
 8038442:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8038446:	46bd      	mov	sp, r7
 8038448:	bd90      	pop	{r4, r7, pc}

0803844a <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures12GetIMULatestEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 803844a:	b590      	push	{r4, r7, lr}
 803844c:	b0cd      	sub	sp, #308	; 0x134
 803844e:	af00      	add	r7, sp, #0
 8038450:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8038454:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 8038458:	6020      	str	r0, [r4, #0]
 803845a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 803845e:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 8038462:	6001      	str	r1, [r0, #0]
 8038464:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8038468:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 803846c:	600a      	str	r2, [r1, #0]
 803846e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8038472:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8038476:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 8038478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 803847c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8038480:	681b      	ldr	r3, [r3, #0]
 8038482:	3301      	adds	r3, #1
 8038484:	4618      	mov	r0, r3
 8038486:	f7fe ffd2 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 803848a:	4603      	mov	r3, r0
 803848c:	4618      	mov	r0, r3
 803848e:	f003 f883 	bl	803b598 <_ZN4Roki8Messages5Empty11DeserializeEPKh>
		if (reqMsg.GetPackedSize() != request.Size)
 8038492:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8038496:	4618      	mov	r0, r3
 8038498:	f003 f896 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 803849c:	4602      	mov	r2, r0
 803849e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80384a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80384a6:	681b      	ldr	r3, [r3, #0]
 80384a8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80384ac:	429a      	cmp	r2, r3
 80384ae:	bf14      	ite	ne
 80384b0:	2301      	movne	r3, #1
 80384b2:	2300      	moveq	r3, #0
 80384b4:	b2db      	uxtb	r3, r3
 80384b6:	2b00      	cmp	r3, #0
 80384b8:	d00d      	beq.n	80384d6 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures12GetIMULatestEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x8c>
			return CreateError(Errors::BadRequest);
 80384ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80384be:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80384c2:	6818      	ldr	r0, [r3, #0]
 80384c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80384c8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80384cc:	2203      	movs	r2, #3
 80384ce:	6819      	ldr	r1, [r3, #0]
 80384d0:	f7fe f872 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 80384d4:	e054      	b.n	8038580 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures12GetIMULatestEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 80384d6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80384da:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80384de:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80384e2:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 80384e6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80384ea:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 80384ee:	6809      	ldr	r1, [r1, #0]
 80384f0:	6800      	ldr	r0, [r0, #0]
 80384f2:	f7fe fa31 	bl	8036958 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures12GetIMULatestEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 80384f6:	4603      	mov	r3, r0
 80384f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (error != Errors::Success)
 80384fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8038500:	2b00      	cmp	r3, #0
 8038502:	d00e      	beq.n	8038522 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures12GetIMULatestEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xd8>
			return CreateError(error);
 8038504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8038508:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 803850c:	6818      	ldr	r0, [r3, #0]
 803850e:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8038512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8038516:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 803851a:	6819      	ldr	r1, [r3, #0]
 803851c:	f7fe f84c 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8038520:	e02e      	b.n	8038580 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures12GetIMULatestEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		responce.Error = Errors::Success;
 8038522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8038526:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 803852a:	2200      	movs	r2, #0
 803852c:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 803852e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8038532:	4618      	mov	r0, r3
 8038534:	f003 f8a6 	bl	803b684 <_ZNK4Roki8Messages11IMUFrameMsg13GetPackedSizeEv>
 8038538:	4603      	mov	r3, r0
 803853a:	b2da      	uxtb	r2, r3
 803853c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8038540:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8038544:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 8038546:	f107 0310 	add.w	r3, r7, #16
 803854a:	3302      	adds	r3, #2
 803854c:	4618      	mov	r0, r3
 803854e:	f7fe fec2 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8038552:	4602      	mov	r2, r0
 8038554:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8038558:	4611      	mov	r1, r2
 803855a:	4618      	mov	r0, r3
 803855c:	f003 f840 	bl	803b5e0 <_ZNK4Roki8Messages11IMUFrameMsg9SerializeEPh>
		return responce;
 8038560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8038564:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8038568:	681a      	ldr	r2, [r3, #0]
 803856a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 803856e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8038572:	4610      	mov	r0, r2
 8038574:	4619      	mov	r1, r3
 8038576:	f44f 7381 	mov.w	r3, #258	; 0x102
 803857a:	461a      	mov	r2, r3
 803857c:	f003 fb84 	bl	803bc88 <memcpy>
	}
 8038580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8038584:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8038588:	6818      	ldr	r0, [r3, #0]
 803858a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 803858e:	46bd      	mov	sp, r7
 8038590:	bd90      	pop	{r4, r7, pc}

08038592 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures14GetStrobeWidthEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 8038592:	b590      	push	{r4, r7, lr}
 8038594:	b0c9      	sub	sp, #292	; 0x124
 8038596:	af00      	add	r7, sp, #0
 8038598:	f507 7490 	add.w	r4, r7, #288	; 0x120
 803859c:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 80385a0:	6020      	str	r0, [r4, #0]
 80385a2:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80385a6:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 80385aa:	6001      	str	r1, [r0, #0]
 80385ac:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80385b0:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80385b4:	600a      	str	r2, [r1, #0]
 80385b6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80385ba:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80385be:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 80385c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80385c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80385c8:	681b      	ldr	r3, [r3, #0]
 80385ca:	3301      	adds	r3, #1
 80385cc:	4618      	mov	r0, r3
 80385ce:	f7fe ff2e 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 80385d2:	4603      	mov	r3, r0
 80385d4:	4618      	mov	r0, r3
 80385d6:	f002 ffdf 	bl	803b598 <_ZN4Roki8Messages5Empty11DeserializeEPKh>
		if (reqMsg.GetPackedSize() != request.Size)
 80385da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80385de:	4618      	mov	r0, r3
 80385e0:	f002 fff2 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 80385e4:	4602      	mov	r2, r0
 80385e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80385ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80385ee:	681b      	ldr	r3, [r3, #0]
 80385f0:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80385f4:	429a      	cmp	r2, r3
 80385f6:	bf14      	ite	ne
 80385f8:	2301      	movne	r3, #1
 80385fa:	2300      	moveq	r3, #0
 80385fc:	b2db      	uxtb	r3, r3
 80385fe:	2b00      	cmp	r3, #0
 8038600:	d00d      	beq.n	803861e <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures14GetStrobeWidthEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x8c>
			return CreateError(Errors::BadRequest);
 8038602:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038606:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 803860a:	6818      	ldr	r0, [r3, #0]
 803860c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038610:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8038614:	2203      	movs	r2, #3
 8038616:	6819      	ldr	r1, [r3, #0]
 8038618:	f7fd ffce 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 803861c:	e054      	b.n	80386c8 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures14GetStrobeWidthEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 803861e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8038622:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8038626:	f507 7190 	add.w	r1, r7, #288	; 0x120
 803862a:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 803862e:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8038632:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8038636:	6809      	ldr	r1, [r1, #0]
 8038638:	6800      	ldr	r0, [r0, #0]
 803863a:	f7fe f9ef 	bl	8036a1c <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures14GetStrobeWidthEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 803863e:	4603      	mov	r3, r0
 8038640:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		if (error != Errors::Success)
 8038644:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8038648:	2b00      	cmp	r3, #0
 803864a:	d00e      	beq.n	803866a <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures14GetStrobeWidthEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xd8>
			return CreateError(error);
 803864c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038650:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038654:	6818      	ldr	r0, [r3, #0]
 8038656:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 803865a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803865e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8038662:	6819      	ldr	r1, [r3, #0]
 8038664:	f7fd ffa8 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8038668:	e02e      	b.n	80386c8 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures14GetStrobeWidthEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		responce.Error = Errors::Success;
 803866a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803866e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8038672:	2200      	movs	r2, #0
 8038674:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 8038676:	f507 738a 	add.w	r3, r7, #276	; 0x114
 803867a:	4618      	mov	r0, r3
 803867c:	f002 ff68 	bl	803b550 <_ZNK4Roki8Messages4Byte13GetPackedSizeEv>
 8038680:	4603      	mov	r3, r0
 8038682:	b2da      	uxtb	r2, r3
 8038684:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038688:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 803868c:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 803868e:	f107 0310 	add.w	r3, r7, #16
 8038692:	3302      	adds	r3, #2
 8038694:	4618      	mov	r0, r3
 8038696:	f7fe fe1e 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 803869a:	4602      	mov	r2, r0
 803869c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80386a0:	4611      	mov	r1, r2
 80386a2:	4618      	mov	r0, r3
 80386a4:	f002 ff1c 	bl	803b4e0 <_ZNK4Roki8Messages4Byte9SerializeEPh>
		return responce;
 80386a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80386ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80386b0:	681a      	ldr	r2, [r3, #0]
 80386b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80386b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80386ba:	4610      	mov	r0, r2
 80386bc:	4619      	mov	r1, r3
 80386be:	f44f 7381 	mov.w	r3, #258	; 0x102
 80386c2:	461a      	mov	r2, r3
 80386c4:	f003 fae0 	bl	803bc88 <memcpy>
	}
 80386c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80386cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80386d0:	6818      	ldr	r0, [r3, #0]
 80386d2:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80386d6:	46bd      	mov	sp, r7
 80386d8:	bd90      	pop	{r4, r7, pc}

080386da <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures10GetVersionEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 80386da:	b590      	push	{r4, r7, lr}
 80386dc:	b0c9      	sub	sp, #292	; 0x124
 80386de:	af00      	add	r7, sp, #0
 80386e0:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80386e4:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 80386e8:	6020      	str	r0, [r4, #0]
 80386ea:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80386ee:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 80386f2:	6001      	str	r1, [r0, #0]
 80386f4:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80386f8:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80386fc:	600a      	str	r2, [r1, #0]
 80386fe:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8038702:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8038706:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 8038708:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803870c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8038710:	681b      	ldr	r3, [r3, #0]
 8038712:	3301      	adds	r3, #1
 8038714:	4618      	mov	r0, r3
 8038716:	f7fe fe8a 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 803871a:	4603      	mov	r3, r0
 803871c:	4618      	mov	r0, r3
 803871e:	f002 ff3b 	bl	803b598 <_ZN4Roki8Messages5Empty11DeserializeEPKh>
		if (reqMsg.GetPackedSize() != request.Size)
 8038722:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038726:	4618      	mov	r0, r3
 8038728:	f002 ff4e 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 803872c:	4602      	mov	r2, r0
 803872e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038732:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8038736:	681b      	ldr	r3, [r3, #0]
 8038738:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 803873c:	429a      	cmp	r2, r3
 803873e:	bf14      	ite	ne
 8038740:	2301      	movne	r3, #1
 8038742:	2300      	moveq	r3, #0
 8038744:	b2db      	uxtb	r3, r3
 8038746:	2b00      	cmp	r3, #0
 8038748:	d00d      	beq.n	8038766 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures10GetVersionEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x8c>
			return CreateError(Errors::BadRequest);
 803874a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803874e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038752:	6818      	ldr	r0, [r3, #0]
 8038754:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038758:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 803875c:	2203      	movs	r2, #3
 803875e:	6819      	ldr	r1, [r3, #0]
 8038760:	f7fd ff2a 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8038764:	e054      	b.n	8038810 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures10GetVersionEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 8038766:	f507 738a 	add.w	r3, r7, #276	; 0x114
 803876a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 803876e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8038772:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8038776:	f507 7090 	add.w	r0, r7, #288	; 0x120
 803877a:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 803877e:	6809      	ldr	r1, [r1, #0]
 8038780:	6800      	ldr	r0, [r0, #0]
 8038782:	f7fe f981 	bl	8036a88 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures10GetVersionEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 8038786:	4603      	mov	r3, r0
 8038788:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		if (error != Errors::Success)
 803878c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8038790:	2b00      	cmp	r3, #0
 8038792:	d00e      	beq.n	80387b2 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures10GetVersionEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xd8>
			return CreateError(error);
 8038794:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038798:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 803879c:	6818      	ldr	r0, [r3, #0]
 803879e:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80387a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80387a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80387aa:	6819      	ldr	r1, [r3, #0]
 80387ac:	f7fd ff04 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 80387b0:	e02e      	b.n	8038810 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures10GetVersionEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		responce.Error = Errors::Success;
 80387b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80387b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80387ba:	2200      	movs	r2, #0
 80387bc:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 80387be:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80387c2:	4618      	mov	r0, r3
 80387c4:	f003 f822 	bl	803b80c <_ZNK4Roki8Messages7Version13GetPackedSizeEv>
 80387c8:	4603      	mov	r3, r0
 80387ca:	b2da      	uxtb	r2, r3
 80387cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80387d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80387d4:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 80387d6:	f107 0310 	add.w	r3, r7, #16
 80387da:	3302      	adds	r3, #2
 80387dc:	4618      	mov	r0, r3
 80387de:	f7fe fd7a 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 80387e2:	4602      	mov	r2, r0
 80387e4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80387e8:	4611      	mov	r1, r2
 80387ea:	4618      	mov	r0, r3
 80387ec:	f002 ffec 	bl	803b7c8 <_ZNK4Roki8Messages7Version9SerializeEPh>
		return responce;
 80387f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80387f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80387f8:	681a      	ldr	r2, [r3, #0]
 80387fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80387fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8038802:	4610      	mov	r0, r2
 8038804:	4619      	mov	r1, r3
 8038806:	f44f 7381 	mov.w	r3, #258	; 0x102
 803880a:	461a      	mov	r2, r3
 803880c:	f003 fa3c 	bl	803bc88 <memcpy>
	}
 8038810:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038814:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038818:	6818      	ldr	r0, [r3, #0]
 803881a:	f507 7792 	add.w	r7, r7, #292	; 0x124
 803881e:	46bd      	mov	sp, r7
 8038820:	bd90      	pop	{r4, r7, pc}

08038822 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures21ResetStrobeContainersEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 8038822:	b590      	push	{r4, r7, lr}
 8038824:	b0c9      	sub	sp, #292	; 0x124
 8038826:	af00      	add	r7, sp, #0
 8038828:	f507 7490 	add.w	r4, r7, #288	; 0x120
 803882c:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8038830:	6020      	str	r0, [r4, #0]
 8038832:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8038836:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 803883a:	6001      	str	r1, [r0, #0]
 803883c:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8038840:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8038844:	600a      	str	r2, [r1, #0]
 8038846:	f507 7290 	add.w	r2, r7, #288	; 0x120
 803884a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 803884e:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 8038850:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038854:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8038858:	681b      	ldr	r3, [r3, #0]
 803885a:	3301      	adds	r3, #1
 803885c:	4618      	mov	r0, r3
 803885e:	f7fe fde6 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 8038862:	4603      	mov	r3, r0
 8038864:	4618      	mov	r0, r3
 8038866:	f002 fe97 	bl	803b598 <_ZN4Roki8Messages5Empty11DeserializeEPKh>
		if (reqMsg.GetPackedSize() != request.Size)
 803886a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 803886e:	4618      	mov	r0, r3
 8038870:	f002 feaa 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 8038874:	4602      	mov	r2, r0
 8038876:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803887a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 803887e:	681b      	ldr	r3, [r3, #0]
 8038880:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8038884:	429a      	cmp	r2, r3
 8038886:	bf14      	ite	ne
 8038888:	2301      	movne	r3, #1
 803888a:	2300      	moveq	r3, #0
 803888c:	b2db      	uxtb	r3, r3
 803888e:	2b00      	cmp	r3, #0
 8038890:	d00d      	beq.n	80388ae <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures21ResetStrobeContainersEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x8c>
			return CreateError(Errors::BadRequest);
 8038892:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038896:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 803889a:	6818      	ldr	r0, [r3, #0]
 803889c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80388a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80388a4:	2203      	movs	r2, #3
 80388a6:	6819      	ldr	r1, [r3, #0]
 80388a8:	f7fd fe86 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 80388ac:	e054      	b.n	8038958 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures21ResetStrobeContainersEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 80388ae:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80388b2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80388b6:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80388ba:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80388be:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80388c2:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 80388c6:	6809      	ldr	r1, [r1, #0]
 80388c8:	6800      	ldr	r0, [r0, #0]
 80388ca:	f7fe f863 	bl	8036994 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures21ResetStrobeContainersEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 80388ce:	4603      	mov	r3, r0
 80388d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		if (error != Errors::Success)
 80388d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80388d8:	2b00      	cmp	r3, #0
 80388da:	d00e      	beq.n	80388fa <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures21ResetStrobeContainersEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xd8>
			return CreateError(error);
 80388dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80388e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80388e4:	6818      	ldr	r0, [r3, #0]
 80388e6:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80388ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80388ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80388f2:	6819      	ldr	r1, [r3, #0]
 80388f4:	f7fd fe60 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 80388f8:	e02e      	b.n	8038958 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures21ResetStrobeContainersEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x136>
		responce.Error = Errors::Success;
 80388fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80388fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8038902:	2200      	movs	r2, #0
 8038904:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 8038906:	f507 738a 	add.w	r3, r7, #276	; 0x114
 803890a:	4618      	mov	r0, r3
 803890c:	f002 fe5c 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 8038910:	4603      	mov	r3, r0
 8038912:	b2da      	uxtb	r2, r3
 8038914:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038918:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 803891c:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 803891e:	f107 0310 	add.w	r3, r7, #16
 8038922:	3302      	adds	r3, #2
 8038924:	4618      	mov	r0, r3
 8038926:	f7fe fcd6 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 803892a:	4602      	mov	r2, r0
 803892c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8038930:	4611      	mov	r1, r2
 8038932:	4618      	mov	r0, r3
 8038934:	f002 fe18 	bl	803b568 <_ZNK4Roki8Messages5Empty9SerializeEPh>
		return responce;
 8038938:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803893c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038940:	681a      	ldr	r2, [r3, #0]
 8038942:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038946:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 803894a:	4610      	mov	r0, r2
 803894c:	4619      	mov	r1, r3
 803894e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8038952:	461a      	mov	r2, r3
 8038954:	f003 f998 	bl	803bc88 <memcpy>
	}
 8038958:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803895c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038960:	6818      	ldr	r0, [r3, #0]
 8038962:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8038966:	46bd      	mov	sp, r7
 8038968:	bd90      	pop	{r4, r7, pc}

0803896a <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures18SetBodyQueuePeriodEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 803896a:	b590      	push	{r4, r7, lr}
 803896c:	b0c9      	sub	sp, #292	; 0x124
 803896e:	af00      	add	r7, sp, #0
 8038970:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8038974:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8038978:	6020      	str	r0, [r4, #0]
 803897a:	f507 7090 	add.w	r0, r7, #288	; 0x120
 803897e:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8038982:	6001      	str	r1, [r0, #0]
 8038984:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8038988:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 803898c:	600a      	str	r2, [r1, #0]
 803898e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8038992:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8038996:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 8038998:	f507 7390 	add.w	r3, r7, #288	; 0x120
 803899c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80389a0:	681b      	ldr	r3, [r3, #0]
 80389a2:	3301      	adds	r3, #1
 80389a4:	4618      	mov	r0, r3
 80389a6:	f7fe fd42 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 80389aa:	4603      	mov	r3, r0
 80389ac:	4618      	mov	r0, r3
 80389ae:	f002 ff6b 	bl	803b888 <_ZN4Roki8Messages8PeriodMs11DeserializeEPKh>
 80389b2:	4603      	mov	r3, r0
 80389b4:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
		if (reqMsg.GetPackedSize() != request.Size)
 80389b8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80389bc:	4618      	mov	r0, r3
 80389be:	f002 ff7f 	bl	803b8c0 <_ZNK4Roki8Messages8PeriodMs13GetPackedSizeEv>
 80389c2:	4602      	mov	r2, r0
 80389c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80389c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80389cc:	681b      	ldr	r3, [r3, #0]
 80389ce:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80389d2:	429a      	cmp	r2, r3
 80389d4:	bf14      	ite	ne
 80389d6:	2301      	movne	r3, #1
 80389d8:	2300      	moveq	r3, #0
 80389da:	b2db      	uxtb	r3, r3
 80389dc:	2b00      	cmp	r3, #0
 80389de:	d00d      	beq.n	80389fc <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures18SetBodyQueuePeriodEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x92>
			return CreateError(Errors::BadRequest);
 80389e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80389e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80389e8:	6818      	ldr	r0, [r3, #0]
 80389ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80389ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80389f2:	2203      	movs	r2, #3
 80389f4:	6819      	ldr	r1, [r3, #0]
 80389f6:	f7fd fddf 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 80389fa:	e054      	b.n	8038aa6 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures18SetBodyQueuePeriodEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x13c>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 80389fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038a00:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8038a04:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8038a08:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8038a0c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8038a10:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8038a14:	6809      	ldr	r1, [r1, #0]
 8038a16:	6800      	ldr	r0, [r0, #0]
 8038a18:	f7fe f90c 	bl	8036c34 <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures18SetBodyQueuePeriodEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 8038a1c:	4603      	mov	r3, r0
 8038a1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		if (error != Errors::Success)
 8038a22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8038a26:	2b00      	cmp	r3, #0
 8038a28:	d00e      	beq.n	8038a48 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures18SetBodyQueuePeriodEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xde>
			return CreateError(error);
 8038a2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038a2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038a32:	6818      	ldr	r0, [r3, #0]
 8038a34:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8038a38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038a3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8038a40:	6819      	ldr	r1, [r3, #0]
 8038a42:	f7fd fdb9 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8038a46:	e02e      	b.n	8038aa6 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures18SetBodyQueuePeriodEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x13c>
		responce.Error = Errors::Success;
 8038a48:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038a4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8038a50:	2200      	movs	r2, #0
 8038a52:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 8038a54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038a58:	4618      	mov	r0, r3
 8038a5a:	f002 fdb5 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 8038a5e:	4603      	mov	r3, r0
 8038a60:	b2da      	uxtb	r2, r3
 8038a62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038a66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8038a6a:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 8038a6c:	f107 0314 	add.w	r3, r7, #20
 8038a70:	3302      	adds	r3, #2
 8038a72:	4618      	mov	r0, r3
 8038a74:	f7fe fc2f 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8038a78:	4602      	mov	r2, r0
 8038a7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038a7e:	4611      	mov	r1, r2
 8038a80:	4618      	mov	r0, r3
 8038a82:	f002 fd71 	bl	803b568 <_ZNK4Roki8Messages5Empty9SerializeEPh>
		return responce;
 8038a86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038a8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038a8e:	681a      	ldr	r2, [r3, #0]
 8038a90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038a94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8038a98:	4610      	mov	r0, r2
 8038a9a:	4619      	mov	r1, r3
 8038a9c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8038aa0:	461a      	mov	r2, r3
 8038aa2:	f003 f8f1 	bl	803bc88 <memcpy>
	}
 8038aa6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038aaa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038aae:	6818      	ldr	r0, [r3, #0]
 8038ab0:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8038ab4:	46bd      	mov	sp, r7
 8038ab6:	bd90      	pop	{r4, r7, pc}

08038ab8 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures19SetBodyStrobeOffsetEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 8038ab8:	b590      	push	{r4, r7, lr}
 8038aba:	b0c9      	sub	sp, #292	; 0x124
 8038abc:	af00      	add	r7, sp, #0
 8038abe:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8038ac2:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8038ac6:	6020      	str	r0, [r4, #0]
 8038ac8:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8038acc:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8038ad0:	6001      	str	r1, [r0, #0]
 8038ad2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8038ad6:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8038ada:	600a      	str	r2, [r1, #0]
 8038adc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8038ae0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8038ae4:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 8038ae6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038aea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8038aee:	681b      	ldr	r3, [r3, #0]
 8038af0:	3301      	adds	r3, #1
 8038af2:	4618      	mov	r0, r3
 8038af4:	f7fe fc9b 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 8038af8:	4603      	mov	r3, r0
 8038afa:	4618      	mov	r0, r3
 8038afc:	f002 fd0c 	bl	803b518 <_ZN4Roki8Messages4Byte11DeserializeEPKh>
 8038b00:	4603      	mov	r3, r0
 8038b02:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
		if (reqMsg.GetPackedSize() != request.Size)
 8038b06:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8038b0a:	4618      	mov	r0, r3
 8038b0c:	f002 fd20 	bl	803b550 <_ZNK4Roki8Messages4Byte13GetPackedSizeEv>
 8038b10:	4602      	mov	r2, r0
 8038b12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038b16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8038b1a:	681b      	ldr	r3, [r3, #0]
 8038b1c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8038b20:	429a      	cmp	r2, r3
 8038b22:	bf14      	ite	ne
 8038b24:	2301      	movne	r3, #1
 8038b26:	2300      	moveq	r3, #0
 8038b28:	b2db      	uxtb	r3, r3
 8038b2a:	2b00      	cmp	r3, #0
 8038b2c:	d00d      	beq.n	8038b4a <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures19SetBodyStrobeOffsetEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x92>
			return CreateError(Errors::BadRequest);
 8038b2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038b32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038b36:	6818      	ldr	r0, [r3, #0]
 8038b38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038b3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8038b40:	2203      	movs	r2, #3
 8038b42:	6819      	ldr	r1, [r3, #0]
 8038b44:	f7fd fd38 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8038b48:	e054      	b.n	8038bf4 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures19SetBodyStrobeOffsetEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x13c>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 8038b4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038b4e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8038b52:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8038b56:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8038b5a:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8038b5e:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8038b62:	6809      	ldr	r1, [r1, #0]
 8038b64:	6800      	ldr	r0, [r0, #0]
 8038b66:	f7fd ff41 	bl	80369ec <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures19SetBodyStrobeOffsetEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 8038b6a:	4603      	mov	r3, r0
 8038b6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		if (error != Errors::Success)
 8038b70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8038b74:	2b00      	cmp	r3, #0
 8038b76:	d00e      	beq.n	8038b96 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures19SetBodyStrobeOffsetEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xde>
			return CreateError(error);
 8038b78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038b7c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038b80:	6818      	ldr	r0, [r3, #0]
 8038b82:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8038b86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038b8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8038b8e:	6819      	ldr	r1, [r3, #0]
 8038b90:	f7fd fd12 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8038b94:	e02e      	b.n	8038bf4 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures19SetBodyStrobeOffsetEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x13c>
		responce.Error = Errors::Success;
 8038b96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038b9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8038b9e:	2200      	movs	r2, #0
 8038ba0:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 8038ba2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038ba6:	4618      	mov	r0, r3
 8038ba8:	f002 fd0e 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 8038bac:	4603      	mov	r3, r0
 8038bae:	b2da      	uxtb	r2, r3
 8038bb0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038bb4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8038bb8:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 8038bba:	f107 0314 	add.w	r3, r7, #20
 8038bbe:	3302      	adds	r3, #2
 8038bc0:	4618      	mov	r0, r3
 8038bc2:	f7fe fb88 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8038bc6:	4602      	mov	r2, r0
 8038bc8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038bcc:	4611      	mov	r1, r2
 8038bce:	4618      	mov	r0, r3
 8038bd0:	f002 fcca 	bl	803b568 <_ZNK4Roki8Messages5Empty9SerializeEPh>
		return responce;
 8038bd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038bd8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038bdc:	681a      	ldr	r2, [r3, #0]
 8038bde:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038be2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8038be6:	4610      	mov	r0, r2
 8038be8:	4619      	mov	r1, r3
 8038bea:	f44f 7381 	mov.w	r3, #258	; 0x102
 8038bee:	461a      	mov	r2, r3
 8038bf0:	f003 f84a 	bl	803bc88 <memcpy>
	}
 8038bf4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038bf8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038bfc:	6818      	ldr	r0, [r3, #0]
 8038bfe:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8038c02:	46bd      	mov	sp, r7
 8038c04:	bd90      	pop	{r4, r7, pc}

08038c06 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures18SetIMUStrobeOffsetEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE>:
	Responce GenericHandler(MotherboardContext &ctx, const Request &request) {
 8038c06:	b590      	push	{r4, r7, lr}
 8038c08:	b0c9      	sub	sp, #292	; 0x124
 8038c0a:	af00      	add	r7, sp, #0
 8038c0c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8038c10:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8038c14:	6020      	str	r0, [r4, #0]
 8038c16:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8038c1a:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8038c1e:	6001      	str	r1, [r0, #0]
 8038c20:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8038c24:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8038c28:	600a      	str	r2, [r1, #0]
 8038c2a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8038c2e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8038c32:	6013      	str	r3, [r2, #0]
		reqMsg = Procedure::RequestType::Deserialize(request.Data.data());
 8038c34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038c38:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8038c3c:	681b      	ldr	r3, [r3, #0]
 8038c3e:	3301      	adds	r3, #1
 8038c40:	4618      	mov	r0, r3
 8038c42:	f7fe fbf4 	bl	803742e <_ZNKSt5arrayIhLj256EE4dataEv>
 8038c46:	4603      	mov	r3, r0
 8038c48:	4618      	mov	r0, r3
 8038c4a:	f002 fc65 	bl	803b518 <_ZN4Roki8Messages4Byte11DeserializeEPKh>
 8038c4e:	4603      	mov	r3, r0
 8038c50:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
		if (reqMsg.GetPackedSize() != request.Size)
 8038c54:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8038c58:	4618      	mov	r0, r3
 8038c5a:	f002 fc79 	bl	803b550 <_ZNK4Roki8Messages4Byte13GetPackedSizeEv>
 8038c5e:	4602      	mov	r2, r0
 8038c60:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038c64:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8038c68:	681b      	ldr	r3, [r3, #0]
 8038c6a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8038c6e:	429a      	cmp	r2, r3
 8038c70:	bf14      	ite	ne
 8038c72:	2301      	movne	r3, #1
 8038c74:	2300      	moveq	r3, #0
 8038c76:	b2db      	uxtb	r3, r3
 8038c78:	2b00      	cmp	r3, #0
 8038c7a:	d00d      	beq.n	8038c98 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures18SetIMUStrobeOffsetEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x92>
			return CreateError(Errors::BadRequest);
 8038c7c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038c80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038c84:	6818      	ldr	r0, [r3, #0]
 8038c86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038c8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8038c8e:	2203      	movs	r2, #3
 8038c90:	6819      	ldr	r1, [r3, #0]
 8038c92:	f7fd fc91 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8038c96:	e054      	b.n	8038d42 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures18SetIMUStrobeOffsetEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x13c>
		Errors::Type error = Handler<Procedure>(ctx, reqMsg, rspMsg);
 8038c98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038c9c:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8038ca0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8038ca4:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8038ca8:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8038cac:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8038cb0:	6809      	ldr	r1, [r1, #0]
 8038cb2:	6800      	ldr	r0, [r0, #0]
 8038cb4:	f7fd fe82 	bl	80369bc <_ZN14RequestHandler7HandlerIN4Roki9MbService10Procedures18SetIMUStrobeOffsetEEEhR18MotherboardContextRKNT_11RequestTypeERNS7_12ResponceTypeE>
 8038cb8:	4603      	mov	r3, r0
 8038cba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		if (error != Errors::Success)
 8038cbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8038cc2:	2b00      	cmp	r3, #0
 8038cc4:	d00e      	beq.n	8038ce4 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures18SetIMUStrobeOffsetEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0xde>
			return CreateError(error);
 8038cc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038cca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038cce:	6818      	ldr	r0, [r3, #0]
 8038cd0:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8038cd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038cd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8038cdc:	6819      	ldr	r1, [r3, #0]
 8038cde:	f7fd fc6b 	bl	80365b8 <_ZN14RequestHandler11CreateErrorEh>
 8038ce2:	e02e      	b.n	8038d42 <_ZN14RequestHandler14GenericHandlerIN4Roki9MbService10Procedures18SetIMUStrobeOffsetEEEN6HeadIO8ResponceER18MotherboardContextRKNS5_7RequestE+0x13c>
		responce.Error = Errors::Success;
 8038ce4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038ce8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8038cec:	2200      	movs	r2, #0
 8038cee:	705a      	strb	r2, [r3, #1]
		responce.Size = rspMsg.GetPackedSize();
 8038cf0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038cf4:	4618      	mov	r0, r3
 8038cf6:	f002 fc67 	bl	803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>
 8038cfa:	4603      	mov	r3, r0
 8038cfc:	b2da      	uxtb	r2, r3
 8038cfe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038d02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8038d06:	701a      	strb	r2, [r3, #0]
		rspMsg.Serialize(responce.Data.data());
 8038d08:	f107 0314 	add.w	r3, r7, #20
 8038d0c:	3302      	adds	r3, #2
 8038d0e:	4618      	mov	r0, r3
 8038d10:	f7fe fae1 	bl	80372d6 <_ZNSt5arrayIhLj256EE4dataEv>
 8038d14:	4602      	mov	r2, r0
 8038d16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8038d1a:	4611      	mov	r1, r2
 8038d1c:	4618      	mov	r0, r3
 8038d1e:	f002 fc23 	bl	803b568 <_ZNK4Roki8Messages5Empty9SerializeEPh>
		return responce;
 8038d22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038d26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038d2a:	681a      	ldr	r2, [r3, #0]
 8038d2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038d30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8038d34:	4610      	mov	r0, r2
 8038d36:	4619      	mov	r1, r3
 8038d38:	f44f 7381 	mov.w	r3, #258	; 0x102
 8038d3c:	461a      	mov	r2, r3
 8038d3e:	f002 ffa3 	bl	803bc88 <memcpy>
	}
 8038d42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8038d46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8038d4a:	6818      	ldr	r0, [r3, #0]
 8038d4c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8038d50:	46bd      	mov	sp, r7
 8038d52:	bd90      	pop	{r4, r7, pc}

08038d54 <_ZNK10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6HasSeqEj>:
	bool HasSeq(size_t seq) const {
 8038d54:	b590      	push	{r4, r7, lr}
 8038d56:	b085      	sub	sp, #20
 8038d58:	af00      	add	r7, sp, #0
 8038d5a:	6078      	str	r0, [r7, #4]
 8038d5c:	6039      	str	r1, [r7, #0]
		if (Queue.Empty())
 8038d5e:	687b      	ldr	r3, [r7, #4]
 8038d60:	4618      	mov	r0, r3
 8038d62:	f000 fcc2 	bl	80396ea <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE5EmptyEv>
 8038d66:	4603      	mov	r3, r0
 8038d68:	2b00      	cmp	r3, #0
 8038d6a:	d001      	beq.n	8038d70 <_ZNK10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6HasSeqEj+0x1c>
			return false;
 8038d6c:	2300      	movs	r3, #0
 8038d6e:	e025      	b.n	8038dbc <_ZNK10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6HasSeqEj+0x68>
		bool c1 = seq >= FirstSeq;
 8038d70:	687b      	ldr	r3, [r7, #4]
 8038d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038d76:	f8d3 377c 	ldr.w	r3, [r3, #1916]	; 0x77c
 8038d7a:	683a      	ldr	r2, [r7, #0]
 8038d7c:	429a      	cmp	r2, r3
 8038d7e:	bf2c      	ite	cs
 8038d80:	2301      	movcs	r3, #1
 8038d82:	2300      	movcc	r3, #0
 8038d84:	73fb      	strb	r3, [r7, #15]
		bool c2 = seq < FirstSeq + Queue.GetSize();
 8038d86:	687b      	ldr	r3, [r7, #4]
 8038d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038d8c:	f8d3 477c 	ldr.w	r4, [r3, #1916]	; 0x77c
 8038d90:	687b      	ldr	r3, [r7, #4]
 8038d92:	4618      	mov	r0, r3
 8038d94:	f000 fcba 	bl	803970c <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE7GetSizeEv>
 8038d98:	4603      	mov	r3, r0
 8038d9a:	4423      	add	r3, r4
 8038d9c:	683a      	ldr	r2, [r7, #0]
 8038d9e:	429a      	cmp	r2, r3
 8038da0:	bf34      	ite	cc
 8038da2:	2301      	movcc	r3, #1
 8038da4:	2300      	movcs	r3, #0
 8038da6:	73bb      	strb	r3, [r7, #14]
		return c1 && c2;
 8038da8:	7bfb      	ldrb	r3, [r7, #15]
 8038daa:	2b00      	cmp	r3, #0
 8038dac:	d004      	beq.n	8038db8 <_ZNK10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6HasSeqEj+0x64>
 8038dae:	7bbb      	ldrb	r3, [r7, #14]
 8038db0:	2b00      	cmp	r3, #0
 8038db2:	d001      	beq.n	8038db8 <_ZNK10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6HasSeqEj+0x64>
 8038db4:	2301      	movs	r3, #1
 8038db6:	e000      	b.n	8038dba <_ZNK10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6HasSeqEj+0x66>
 8038db8:	2300      	movs	r3, #0
 8038dba:	bf00      	nop
	}
 8038dbc:	4618      	mov	r0, r3
 8038dbe:	3714      	adds	r7, #20
 8038dc0:	46bd      	mov	sp, r7
 8038dc2:	bd90      	pop	{r4, r7, pc}

08038dc4 <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6GetSeqEj>:
	T GetSeq(size_t seq) {
 8038dc4:	b5b0      	push	{r4, r5, r7, lr}
 8038dc6:	b084      	sub	sp, #16
 8038dc8:	af00      	add	r7, sp, #0
 8038dca:	60f8      	str	r0, [r7, #12]
 8038dcc:	60b9      	str	r1, [r7, #8]
 8038dce:	607a      	str	r2, [r7, #4]
		assert(HasSeq(seq));
 8038dd0:	6879      	ldr	r1, [r7, #4]
 8038dd2:	68b8      	ldr	r0, [r7, #8]
 8038dd4:	f7ff ffbe 	bl	8038d54 <_ZNK10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6HasSeqEj>
 8038dd8:	4603      	mov	r3, r0
 8038dda:	2b00      	cmp	r3, #0
 8038ddc:	d105      	bne.n	8038dea <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6GetSeqEj+0x26>
 8038dde:	4b0e      	ldr	r3, [pc, #56]	; (8038e18 <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6GetSeqEj+0x54>)
 8038de0:	4a0e      	ldr	r2, [pc, #56]	; (8038e1c <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6GetSeqEj+0x58>)
 8038de2:	2122      	movs	r1, #34	; 0x22
 8038de4:	480e      	ldr	r0, [pc, #56]	; (8038e20 <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE6GetSeqEj+0x5c>)
 8038de6:	f002 fed5 	bl	803bb94 <__assert_func>
		return Queue.Peek(seq - FirstSeq);
 8038dea:	68b8      	ldr	r0, [r7, #8]
 8038dec:	68bb      	ldr	r3, [r7, #8]
 8038dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038df2:	f8d3 377c 	ldr.w	r3, [r3, #1916]	; 0x77c
 8038df6:	687a      	ldr	r2, [r7, #4]
 8038df8:	1ad3      	subs	r3, r2, r3
 8038dfa:	4619      	mov	r1, r3
 8038dfc:	f000 fc92 	bl	8039724 <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PeekEj>
 8038e00:	4602      	mov	r2, r0
 8038e02:	68fb      	ldr	r3, [r7, #12]
 8038e04:	461c      	mov	r4, r3
 8038e06:	4615      	mov	r5, r2
 8038e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8038e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8038e0c:	682b      	ldr	r3, [r5, #0]
 8038e0e:	6023      	str	r3, [r4, #0]
	}
 8038e10:	68f8      	ldr	r0, [r7, #12]
 8038e12:	3710      	adds	r7, #16
 8038e14:	46bd      	mov	sp, r7
 8038e16:	bdb0      	pop	{r4, r5, r7, pc}
 8038e18:	0803d8dc 	.word	0x0803d8dc
 8038e1c:	0803d8e8 	.word	0x0803d8e8
 8038e20:	0803d970 	.word	0x0803d970

08038e24 <_ZNK10FrameQueueIN11FrameQueues12BodyResponceELj300EE6HasSeqEj>:
	bool HasSeq(size_t seq) const {
 8038e24:	b590      	push	{r4, r7, lr}
 8038e26:	b085      	sub	sp, #20
 8038e28:	af00      	add	r7, sp, #0
 8038e2a:	6078      	str	r0, [r7, #4]
 8038e2c:	6039      	str	r1, [r7, #0]
		if (Queue.Empty())
 8038e2e:	687b      	ldr	r3, [r7, #4]
 8038e30:	4618      	mov	r0, r3
 8038e32:	f000 fca9 	bl	8039788 <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE5EmptyEv>
 8038e36:	4603      	mov	r3, r0
 8038e38:	2b00      	cmp	r3, #0
 8038e3a:	d001      	beq.n	8038e40 <_ZNK10FrameQueueIN11FrameQueues12BodyResponceELj300EE6HasSeqEj+0x1c>
			return false;
 8038e3c:	2300      	movs	r3, #0
 8038e3e:	e025      	b.n	8038e8c <_ZNK10FrameQueueIN11FrameQueues12BodyResponceELj300EE6HasSeqEj+0x68>
		bool c1 = seq >= FirstSeq;
 8038e40:	687b      	ldr	r3, [r7, #4]
 8038e42:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8038e46:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 8038e4a:	683a      	ldr	r2, [r7, #0]
 8038e4c:	429a      	cmp	r2, r3
 8038e4e:	bf2c      	ite	cs
 8038e50:	2301      	movcs	r3, #1
 8038e52:	2300      	movcc	r3, #0
 8038e54:	73fb      	strb	r3, [r7, #15]
		bool c2 = seq < FirstSeq + Queue.GetSize();
 8038e56:	687b      	ldr	r3, [r7, #4]
 8038e58:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8038e5c:	f8d3 456c 	ldr.w	r4, [r3, #1388]	; 0x56c
 8038e60:	687b      	ldr	r3, [r7, #4]
 8038e62:	4618      	mov	r0, r3
 8038e64:	f000 fca1 	bl	80397aa <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE7GetSizeEv>
 8038e68:	4603      	mov	r3, r0
 8038e6a:	4423      	add	r3, r4
 8038e6c:	683a      	ldr	r2, [r7, #0]
 8038e6e:	429a      	cmp	r2, r3
 8038e70:	bf34      	ite	cc
 8038e72:	2301      	movcc	r3, #1
 8038e74:	2300      	movcs	r3, #0
 8038e76:	73bb      	strb	r3, [r7, #14]
		return c1 && c2;
 8038e78:	7bfb      	ldrb	r3, [r7, #15]
 8038e7a:	2b00      	cmp	r3, #0
 8038e7c:	d004      	beq.n	8038e88 <_ZNK10FrameQueueIN11FrameQueues12BodyResponceELj300EE6HasSeqEj+0x64>
 8038e7e:	7bbb      	ldrb	r3, [r7, #14]
 8038e80:	2b00      	cmp	r3, #0
 8038e82:	d001      	beq.n	8038e88 <_ZNK10FrameQueueIN11FrameQueues12BodyResponceELj300EE6HasSeqEj+0x64>
 8038e84:	2301      	movs	r3, #1
 8038e86:	e000      	b.n	8038e8a <_ZNK10FrameQueueIN11FrameQueues12BodyResponceELj300EE6HasSeqEj+0x66>
 8038e88:	2300      	movs	r3, #0
 8038e8a:	bf00      	nop
	}
 8038e8c:	4618      	mov	r0, r3
 8038e8e:	3714      	adds	r7, #20
 8038e90:	46bd      	mov	sp, r7
 8038e92:	bd90      	pop	{r4, r7, pc}

08038e94 <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EE6GetSeqEj>:
	T GetSeq(size_t seq) {
 8038e94:	b580      	push	{r7, lr}
 8038e96:	b084      	sub	sp, #16
 8038e98:	af00      	add	r7, sp, #0
 8038e9a:	60f8      	str	r0, [r7, #12]
 8038e9c:	60b9      	str	r1, [r7, #8]
 8038e9e:	607a      	str	r2, [r7, #4]
		assert(HasSeq(seq));
 8038ea0:	6879      	ldr	r1, [r7, #4]
 8038ea2:	68b8      	ldr	r0, [r7, #8]
 8038ea4:	f7ff ffbe 	bl	8038e24 <_ZNK10FrameQueueIN11FrameQueues12BodyResponceELj300EE6HasSeqEj>
 8038ea8:	4603      	mov	r3, r0
 8038eaa:	2b00      	cmp	r3, #0
 8038eac:	d105      	bne.n	8038eba <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EE6GetSeqEj+0x26>
 8038eae:	4b0f      	ldr	r3, [pc, #60]	; (8038eec <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EE6GetSeqEj+0x58>)
 8038eb0:	4a0f      	ldr	r2, [pc, #60]	; (8038ef0 <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EE6GetSeqEj+0x5c>)
 8038eb2:	2122      	movs	r1, #34	; 0x22
 8038eb4:	480f      	ldr	r0, [pc, #60]	; (8038ef4 <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EE6GetSeqEj+0x60>)
 8038eb6:	f002 fe6d 	bl	803bb94 <__assert_func>
		return Queue.Peek(seq - FirstSeq);
 8038eba:	68b8      	ldr	r0, [r7, #8]
 8038ebc:	68bb      	ldr	r3, [r7, #8]
 8038ebe:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8038ec2:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 8038ec6:	687a      	ldr	r2, [r7, #4]
 8038ec8:	1ad3      	subs	r3, r2, r3
 8038eca:	4619      	mov	r1, r3
 8038ecc:	f000 fc7a 	bl	80397c4 <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PeekEj>
 8038ed0:	4602      	mov	r2, r0
 8038ed2:	68fb      	ldr	r3, [r7, #12]
 8038ed4:	4618      	mov	r0, r3
 8038ed6:	4611      	mov	r1, r2
 8038ed8:	f44f 7384 	mov.w	r3, #264	; 0x108
 8038edc:	461a      	mov	r2, r3
 8038ede:	f002 fed3 	bl	803bc88 <memcpy>
	}
 8038ee2:	68f8      	ldr	r0, [r7, #12]
 8038ee4:	3710      	adds	r7, #16
 8038ee6:	46bd      	mov	sp, r7
 8038ee8:	bd80      	pop	{r7, pc}
 8038eea:	bf00      	nop
 8038eec:	0803d8dc 	.word	0x0803d8dc
 8038ef0:	0803d9d4 	.word	0x0803d9d4
 8038ef4:	0803d970 	.word	0x0803d970

08038ef8 <_ZNK10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE7GetInfoEv>:

public:
	Roki::Messages::FrameContainerInfo GetInfo() const {
 8038ef8:	b580      	push	{r7, lr}
 8038efa:	b082      	sub	sp, #8
 8038efc:	af00      	add	r7, sp, #0
 8038efe:	6078      	str	r0, [r7, #4]
 8038f00:	6039      	str	r1, [r7, #0]
		return {FirstSeq, Queue.GetSize(), Capacity};
 8038f02:	683b      	ldr	r3, [r7, #0]
 8038f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038f08:	f8d3 377c 	ldr.w	r3, [r3, #1916]	; 0x77c
 8038f0c:	b29a      	uxth	r2, r3
 8038f0e:	687b      	ldr	r3, [r7, #4]
 8038f10:	801a      	strh	r2, [r3, #0]
 8038f12:	683b      	ldr	r3, [r7, #0]
 8038f14:	4618      	mov	r0, r3
 8038f16:	f000 fbf9 	bl	803970c <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE7GetSizeEv>
 8038f1a:	4603      	mov	r3, r0
 8038f1c:	b29a      	uxth	r2, r3
 8038f1e:	687b      	ldr	r3, [r7, #4]
 8038f20:	805a      	strh	r2, [r3, #2]
 8038f22:	687b      	ldr	r3, [r7, #4]
 8038f24:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8038f28:	809a      	strh	r2, [r3, #4]
	}
 8038f2a:	6878      	ldr	r0, [r7, #4]
 8038f2c:	3708      	adds	r7, #8
 8038f2e:	46bd      	mov	sp, r7
 8038f30:	bd80      	pop	{r7, pc}

08038f32 <_ZNK10FrameQueueIN11FrameQueues12BodyResponceELj300EE7GetInfoEv>:
	Roki::Messages::FrameContainerInfo GetInfo() const {
 8038f32:	b580      	push	{r7, lr}
 8038f34:	b082      	sub	sp, #8
 8038f36:	af00      	add	r7, sp, #0
 8038f38:	6078      	str	r0, [r7, #4]
 8038f3a:	6039      	str	r1, [r7, #0]
		return {FirstSeq, Queue.GetSize(), Capacity};
 8038f3c:	683b      	ldr	r3, [r7, #0]
 8038f3e:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8038f42:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 8038f46:	b29a      	uxth	r2, r3
 8038f48:	687b      	ldr	r3, [r7, #4]
 8038f4a:	801a      	strh	r2, [r3, #0]
 8038f4c:	683b      	ldr	r3, [r7, #0]
 8038f4e:	4618      	mov	r0, r3
 8038f50:	f000 fc2b 	bl	80397aa <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE7GetSizeEv>
 8038f54:	4603      	mov	r3, r0
 8038f56:	b29a      	uxth	r2, r3
 8038f58:	687b      	ldr	r3, [r7, #4]
 8038f5a:	805a      	strh	r2, [r3, #2]
 8038f5c:	687b      	ldr	r3, [r7, #4]
 8038f5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8038f62:	809a      	strh	r2, [r3, #4]
	}
 8038f64:	6878      	ldr	r0, [r7, #4]
 8038f66:	3708      	adds	r7, #8
 8038f68:	46bd      	mov	sp, r7
 8038f6a:	bd80      	pop	{r7, pc}

08038f6c <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EE3AddERKS1_>:
	void Add(const T &rhs) {
 8038f6c:	b580      	push	{r7, lr}
 8038f6e:	b082      	sub	sp, #8
 8038f70:	af00      	add	r7, sp, #0
 8038f72:	6078      	str	r0, [r7, #4]
 8038f74:	6039      	str	r1, [r7, #0]
		if (Queue.Full()) {
 8038f76:	687b      	ldr	r3, [r7, #4]
 8038f78:	4618      	mov	r0, r3
 8038f7a:	f000 fc55 	bl	8039828 <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE4FullEv>
 8038f7e:	4603      	mov	r3, r0
 8038f80:	2b00      	cmp	r3, #0
 8038f82:	d00e      	beq.n	8038fa2 <_ZN10FrameQueueIN11FrameQueues12BodyResponceELj300EE3AddERKS1_+0x36>
			FirstSeq++;
 8038f84:	687b      	ldr	r3, [r7, #4]
 8038f86:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8038f8a:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 8038f8e:	3301      	adds	r3, #1
 8038f90:	687a      	ldr	r2, [r7, #4]
 8038f92:	f502 3298 	add.w	r2, r2, #77824	; 0x13000
 8038f96:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
			Queue.Pop();
 8038f9a:	687b      	ldr	r3, [r7, #4]
 8038f9c:	4618      	mov	r0, r3
 8038f9e:	f000 fc55 	bl	803984c <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE3PopEv>
		Queue.Push(rhs);
 8038fa2:	687b      	ldr	r3, [r7, #4]
 8038fa4:	6839      	ldr	r1, [r7, #0]
 8038fa6:	4618      	mov	r0, r3
 8038fa8:	f000 fc7e 	bl	80398a8 <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PushERKS1_>
	}
 8038fac:	bf00      	nop
 8038fae:	3708      	adds	r7, #8
 8038fb0:	46bd      	mov	sp, r7
 8038fb2:	bd80      	pop	{r7, pc}

08038fb4 <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE3AddERKS2_>:
	void Add(const T &rhs) {
 8038fb4:	b580      	push	{r7, lr}
 8038fb6:	b082      	sub	sp, #8
 8038fb8:	af00      	add	r7, sp, #0
 8038fba:	6078      	str	r0, [r7, #4]
 8038fbc:	6039      	str	r1, [r7, #0]
		if (Queue.Full()) {
 8038fbe:	687b      	ldr	r3, [r7, #4]
 8038fc0:	4618      	mov	r0, r3
 8038fc2:	f000 fcb3 	bl	803992c <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4FullEv>
 8038fc6:	4603      	mov	r3, r0
 8038fc8:	2b00      	cmp	r3, #0
 8038fca:	d00e      	beq.n	8038fea <_ZN10FrameQueueIN4Roki8Messages11IMUFrameMsgELj300EE3AddERKS2_+0x36>
			FirstSeq++;
 8038fcc:	687b      	ldr	r3, [r7, #4]
 8038fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038fd2:	f8d3 377c 	ldr.w	r3, [r3, #1916]	; 0x77c
 8038fd6:	3301      	adds	r3, #1
 8038fd8:	687a      	ldr	r2, [r7, #4]
 8038fda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8038fde:	f8c2 377c 	str.w	r3, [r2, #1916]	; 0x77c
			Queue.Pop();
 8038fe2:	687b      	ldr	r3, [r7, #4]
 8038fe4:	4618      	mov	r0, r3
 8038fe6:	f000 fcb3 	bl	8039950 <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE3PopEv>
		Queue.Push(rhs);
 8038fea:	687b      	ldr	r3, [r7, #4]
 8038fec:	6839      	ldr	r1, [r7, #0]
 8038fee:	4618      	mov	r0, r3
 8038ff0:	f000 fcdc 	bl	80399ac <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PushERKS2_>
	}
 8038ff4:	bf00      	nop
 8038ff6:	3708      	adds	r7, #8
 8038ff8:	46bd      	mov	sp, r7
 8038ffa:	bd80      	pop	{r7, pc}

08038ffc <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8038ffc:	b480      	push	{r7}
 8038ffe:	b083      	sub	sp, #12
 8039000:	af00      	add	r7, sp, #0
 8039002:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8039004:	687b      	ldr	r3, [r7, #4]
 8039006:	4618      	mov	r0, r3
 8039008:	370c      	adds	r7, #12
 803900a:	46bd      	mov	sp, r7
 803900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039010:	4770      	bx	lr

08039012 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8039012:	b480      	push	{r7}
 8039014:	b083      	sub	sp, #12
 8039016:	af00      	add	r7, sp, #0
 8039018:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 803901a:	687b      	ldr	r3, [r7, #4]
 803901c:	4618      	mov	r0, r3
 803901e:	370c      	adds	r7, #12
 8039020:	46bd      	mov	sp, r7
 8039022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039026:	4770      	bx	lr

08039028 <_ZNSt5arrayIN6HeadIO7RequestELj4EEixEj>:
      operator[](size_type __n) noexcept
 8039028:	b580      	push	{r7, lr}
 803902a:	b082      	sub	sp, #8
 803902c:	af00      	add	r7, sp, #0
 803902e:	6078      	str	r0, [r7, #4]
 8039030:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8039032:	687b      	ldr	r3, [r7, #4]
 8039034:	6839      	ldr	r1, [r7, #0]
 8039036:	4618      	mov	r0, r3
 8039038:	f000 fcf8 	bl	8039a2c <_ZNSt14__array_traitsIN6HeadIO7RequestELj4EE6_S_refERA4_KS1_j>
 803903c:	4603      	mov	r3, r0
 803903e:	4618      	mov	r0, r3
 8039040:	3708      	adds	r7, #8
 8039042:	46bd      	mov	sp, r7
 8039044:	bd80      	pop	{r7, pc}

08039046 <_ZNKSt5arrayIN6HeadIO7RequestELj4EEixEj>:
      operator[](size_type __n) const noexcept
 8039046:	b580      	push	{r7, lr}
 8039048:	b082      	sub	sp, #8
 803904a:	af00      	add	r7, sp, #0
 803904c:	6078      	str	r0, [r7, #4]
 803904e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8039050:	687b      	ldr	r3, [r7, #4]
 8039052:	6839      	ldr	r1, [r7, #0]
 8039054:	4618      	mov	r0, r3
 8039056:	f000 fce9 	bl	8039a2c <_ZNSt14__array_traitsIN6HeadIO7RequestELj4EE6_S_refERA4_KS1_j>
 803905a:	4603      	mov	r3, r0
 803905c:	4618      	mov	r0, r3
 803905e:	3708      	adds	r7, #8
 8039060:	46bd      	mov	sp, r7
 8039062:	bd80      	pop	{r7, pc}

08039064 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8039064:	b480      	push	{r7}
 8039066:	b083      	sub	sp, #12
 8039068:	af00      	add	r7, sp, #0
 803906a:	6078      	str	r0, [r7, #4]
 803906c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 803906e:	687a      	ldr	r2, [r7, #4]
 8039070:	683b      	ldr	r3, [r7, #0]
 8039072:	4413      	add	r3, r2
 8039074:	4618      	mov	r0, r3
 8039076:	370c      	adds	r7, #12
 8039078:	46bd      	mov	sp, r7
 803907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803907e:	4770      	bx	lr

08039080 <_ZNSt5arrayIN6HeadIO8ResponceELj4EEixEj>:
      operator[](size_type __n) noexcept
 8039080:	b580      	push	{r7, lr}
 8039082:	b082      	sub	sp, #8
 8039084:	af00      	add	r7, sp, #0
 8039086:	6078      	str	r0, [r7, #4]
 8039088:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 803908a:	687b      	ldr	r3, [r7, #4]
 803908c:	6839      	ldr	r1, [r7, #0]
 803908e:	4618      	mov	r0, r3
 8039090:	f000 fcde 	bl	8039a50 <_ZNSt14__array_traitsIN6HeadIO8ResponceELj4EE6_S_refERA4_KS1_j>
 8039094:	4603      	mov	r3, r0
 8039096:	4618      	mov	r0, r3
 8039098:	3708      	adds	r7, #8
 803909a:	46bd      	mov	sp, r7
 803909c:	bd80      	pop	{r7, pc}

0803909e <_ZNKSt5arrayIN6HeadIO8ResponceELj4EEixEj>:
      operator[](size_type __n) const noexcept
 803909e:	b580      	push	{r7, lr}
 80390a0:	b082      	sub	sp, #8
 80390a2:	af00      	add	r7, sp, #0
 80390a4:	6078      	str	r0, [r7, #4]
 80390a6:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80390a8:	687b      	ldr	r3, [r7, #4]
 80390aa:	6839      	ldr	r1, [r7, #0]
 80390ac:	4618      	mov	r0, r3
 80390ae:	f000 fccf 	bl	8039a50 <_ZNSt14__array_traitsIN6HeadIO8ResponceELj4EE6_S_refERA4_KS1_j>
 80390b2:	4603      	mov	r3, r0
 80390b4:	4618      	mov	r0, r3
 80390b6:	3708      	adds	r7, #8
 80390b8:	46bd      	mov	sp, r7
 80390ba:	bd80      	pop	{r7, pc}

080390bc <_ZNKSt5arrayIN9BodyQueue7RequestELj500EEixEj>:
      operator[](size_type __n) const noexcept
 80390bc:	b580      	push	{r7, lr}
 80390be:	b082      	sub	sp, #8
 80390c0:	af00      	add	r7, sp, #0
 80390c2:	6078      	str	r0, [r7, #4]
 80390c4:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80390c6:	687b      	ldr	r3, [r7, #4]
 80390c8:	6839      	ldr	r1, [r7, #0]
 80390ca:	4618      	mov	r0, r3
 80390cc:	f000 fcd2 	bl	8039a74 <_ZNSt14__array_traitsIN9BodyQueue7RequestELj500EE6_S_refERA500_KS1_j>
 80390d0:	4603      	mov	r3, r0
 80390d2:	4618      	mov	r0, r3
 80390d4:	3708      	adds	r7, #8
 80390d6:	46bd      	mov	sp, r7
 80390d8:	bd80      	pop	{r7, pc}

080390da <_ZNSt5arrayIN9BodyQueue7RequestELj500EEixEj>:
      operator[](size_type __n) noexcept
 80390da:	b580      	push	{r7, lr}
 80390dc:	b082      	sub	sp, #8
 80390de:	af00      	add	r7, sp, #0
 80390e0:	6078      	str	r0, [r7, #4]
 80390e2:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80390e4:	687b      	ldr	r3, [r7, #4]
 80390e6:	6839      	ldr	r1, [r7, #0]
 80390e8:	4618      	mov	r0, r3
 80390ea:	f000 fcc3 	bl	8039a74 <_ZNSt14__array_traitsIN9BodyQueue7RequestELj500EE6_S_refERA500_KS1_j>
 80390ee:	4603      	mov	r3, r0
 80390f0:	4618      	mov	r0, r3
 80390f2:	3708      	adds	r7, #8
 80390f4:	46bd      	mov	sp, r7
 80390f6:	bd80      	pop	{r7, pc}

080390f8 <_ZNSt5dequeIjSaIjEE9push_backERKj>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 80390f8:	b580      	push	{r7, lr}
 80390fa:	b082      	sub	sp, #8
 80390fc:	af00      	add	r7, sp, #0
 80390fe:	6078      	str	r0, [r7, #4]
 8039100:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 8039102:	687b      	ldr	r3, [r7, #4]
 8039104:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8039106:	687b      	ldr	r3, [r7, #4]
 8039108:	6a1b      	ldr	r3, [r3, #32]
 803910a:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 803910c:	429a      	cmp	r2, r3
 803910e:	d00c      	beq.n	803912a <_ZNSt5dequeIjSaIjEE9push_backERKj+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8039110:	6878      	ldr	r0, [r7, #4]
 8039112:	687b      	ldr	r3, [r7, #4]
 8039114:	699b      	ldr	r3, [r3, #24]
 8039116:	683a      	ldr	r2, [r7, #0]
 8039118:	4619      	mov	r1, r3
 803911a:	f000 fcbd 	bl	8039a98 <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 803911e:	687b      	ldr	r3, [r7, #4]
 8039120:	699b      	ldr	r3, [r3, #24]
 8039122:	1d1a      	adds	r2, r3, #4
 8039124:	687b      	ldr	r3, [r7, #4]
 8039126:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 8039128:	e003      	b.n	8039132 <_ZNSt5dequeIjSaIjEE9push_backERKj+0x3a>
	  _M_push_back_aux(__x);
 803912a:	6839      	ldr	r1, [r7, #0]
 803912c:	6878      	ldr	r0, [r7, #4]
 803912e:	f000 fcc7 	bl	8039ac0 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>
      }
 8039132:	bf00      	nop
 8039134:	3708      	adds	r7, #8
 8039136:	46bd      	mov	sp, r7
 8039138:	bd80      	pop	{r7, pc}

0803913a <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>:
      struct _Deque_impl
 803913a:	b580      	push	{r7, lr}
 803913c:	b082      	sub	sp, #8
 803913e:	af00      	add	r7, sp, #0
 8039140:	6078      	str	r0, [r7, #4]
 8039142:	6878      	ldr	r0, [r7, #4]
 8039144:	f000 fd10 	bl	8039b68 <_ZNSaIjED1Ev>
 8039148:	687b      	ldr	r3, [r7, #4]
 803914a:	4618      	mov	r0, r3
 803914c:	3708      	adds	r7, #8
 803914e:	46bd      	mov	sp, r7
 8039150:	bd80      	pop	{r7, pc}

08039152 <_ZNSt11_Deque_baseIjSaIjEEC1Ev>:
      _Deque_base()
 8039152:	b580      	push	{r7, lr}
 8039154:	b082      	sub	sp, #8
 8039156:	af00      	add	r7, sp, #0
 8039158:	6078      	str	r0, [r7, #4]
      : _M_impl()
 803915a:	687b      	ldr	r3, [r7, #4]
 803915c:	4618      	mov	r0, r3
 803915e:	f000 fcf3 	bl	8039b48 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8039162:	2100      	movs	r1, #0
 8039164:	6878      	ldr	r0, [r7, #4]
 8039166:	f000 fd0b 	bl	8039b80 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>
 803916a:	687b      	ldr	r3, [r7, #4]
 803916c:	4618      	mov	r0, r3
 803916e:	3708      	adds	r7, #8
 8039170:	46bd      	mov	sp, r7
 8039172:	bd80      	pop	{r7, pc}

08039174 <_ZNSt11_Deque_baseIjSaIjEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8039174:	b580      	push	{r7, lr}
 8039176:	b082      	sub	sp, #8
 8039178:	af00      	add	r7, sp, #0
 803917a:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 803917c:	687b      	ldr	r3, [r7, #4]
 803917e:	681b      	ldr	r3, [r3, #0]
 8039180:	2b00      	cmp	r3, #0
 8039182:	d010      	beq.n	80391a6 <_ZNSt11_Deque_baseIjSaIjEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8039184:	687b      	ldr	r3, [r7, #4]
 8039186:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8039188:	687b      	ldr	r3, [r7, #4]
 803918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 803918c:	3304      	adds	r3, #4
 803918e:	461a      	mov	r2, r3
 8039190:	6878      	ldr	r0, [r7, #4]
 8039192:	f000 fd58 	bl	8039c46 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8039196:	687b      	ldr	r3, [r7, #4]
 8039198:	6819      	ldr	r1, [r3, #0]
 803919a:	687b      	ldr	r3, [r7, #4]
 803919c:	685b      	ldr	r3, [r3, #4]
 803919e:	461a      	mov	r2, r3
 80391a0:	6878      	ldr	r0, [r7, #4]
 80391a2:	f000 fd6a 	bl	8039c7a <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
    }
 80391a6:	687b      	ldr	r3, [r7, #4]
 80391a8:	4618      	mov	r0, r3
 80391aa:	f7ff ffc6 	bl	803913a <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>
 80391ae:	687b      	ldr	r3, [r7, #4]
 80391b0:	4618      	mov	r0, r3
 80391b2:	3708      	adds	r7, #8
 80391b4:	46bd      	mov	sp, r7
 80391b6:	bd80      	pop	{r7, pc}

080391b8 <_ZNSt5dequeIjSaIjEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80391b8:	b580      	push	{r7, lr}
 80391ba:	b082      	sub	sp, #8
 80391bc:	af00      	add	r7, sp, #0
 80391be:	6078      	str	r0, [r7, #4]
 80391c0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80391c2:	683b      	ldr	r3, [r7, #0]
 80391c4:	3308      	adds	r3, #8
 80391c6:	4619      	mov	r1, r3
 80391c8:	6878      	ldr	r0, [r7, #4]
 80391ca:	f000 f81e 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80391ce:	6878      	ldr	r0, [r7, #4]
 80391d0:	3708      	adds	r7, #8
 80391d2:	46bd      	mov	sp, r7
 80391d4:	bd80      	pop	{r7, pc}

080391d6 <_ZNSt5dequeIjSaIjEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80391d6:	b580      	push	{r7, lr}
 80391d8:	b082      	sub	sp, #8
 80391da:	af00      	add	r7, sp, #0
 80391dc:	6078      	str	r0, [r7, #4]
 80391de:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80391e0:	683b      	ldr	r3, [r7, #0]
 80391e2:	3318      	adds	r3, #24
 80391e4:	4619      	mov	r1, r3
 80391e6:	6878      	ldr	r0, [r7, #4]
 80391e8:	f000 f80f 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80391ec:	6878      	ldr	r0, [r7, #4]
 80391ee:	3708      	adds	r7, #8
 80391f0:	46bd      	mov	sp, r7
 80391f2:	bd80      	pop	{r7, pc}

080391f4 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80391f4:	b480      	push	{r7}
 80391f6:	b083      	sub	sp, #12
 80391f8:	af00      	add	r7, sp, #0
 80391fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80391fc:	687b      	ldr	r3, [r7, #4]
 80391fe:	4618      	mov	r0, r3
 8039200:	370c      	adds	r7, #12
 8039202:	46bd      	mov	sp, r7
 8039204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039208:	4770      	bx	lr

0803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 803920a:	b480      	push	{r7}
 803920c:	b083      	sub	sp, #12
 803920e:	af00      	add	r7, sp, #0
 8039210:	6078      	str	r0, [r7, #4]
 8039212:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8039214:	683b      	ldr	r3, [r7, #0]
 8039216:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8039218:	687b      	ldr	r3, [r7, #4]
 803921a:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 803921c:	683b      	ldr	r3, [r7, #0]
 803921e:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8039220:	687b      	ldr	r3, [r7, #4]
 8039222:	605a      	str	r2, [r3, #4]
 8039224:	683b      	ldr	r3, [r7, #0]
 8039226:	689a      	ldr	r2, [r3, #8]
 8039228:	687b      	ldr	r3, [r7, #4]
 803922a:	609a      	str	r2, [r3, #8]
 803922c:	683b      	ldr	r3, [r7, #0]
 803922e:	68da      	ldr	r2, [r3, #12]
 8039230:	687b      	ldr	r3, [r7, #4]
 8039232:	60da      	str	r2, [r3, #12]
 8039234:	687b      	ldr	r3, [r7, #4]
 8039236:	4618      	mov	r0, r3
 8039238:	370c      	adds	r7, #12
 803923a:	46bd      	mov	sp, r7
 803923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039240:	4770      	bx	lr

08039242 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8039242:	b480      	push	{r7}
 8039244:	b08d      	sub	sp, #52	; 0x34
 8039246:	af00      	add	r7, sp, #0
 8039248:	60f8      	str	r0, [r7, #12]
 803924a:	60b9      	str	r1, [r7, #8]
 803924c:	607a      	str	r2, [r7, #4]
 803924e:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8039250:	bf00      	nop
 8039252:	3734      	adds	r7, #52	; 0x34
 8039254:	46bd      	mov	sp, r7
 8039256:	f85d 7b04 	ldr.w	r7, [sp], #4
 803925a:	4770      	bx	lr

0803925c <_ZNKSt5dequeIjSaIjEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 803925c:	b580      	push	{r7, lr}
 803925e:	b082      	sub	sp, #8
 8039260:	af00      	add	r7, sp, #0
 8039262:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8039264:	687b      	ldr	r3, [r7, #4]
 8039266:	f103 0218 	add.w	r2, r3, #24
 803926a:	687b      	ldr	r3, [r7, #4]
 803926c:	3308      	adds	r3, #8
 803926e:	4619      	mov	r1, r3
 8039270:	4610      	mov	r0, r2
 8039272:	f000 fd1e 	bl	8039cb2 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>
 8039276:	4603      	mov	r3, r0
 8039278:	4618      	mov	r0, r3
 803927a:	3708      	adds	r7, #8
 803927c:	46bd      	mov	sp, r7
 803927e:	bd80      	pop	{r7, pc}

08039280 <_ZNSt5dequeIjSaIjEE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8039280:	b580      	push	{r7, lr}
 8039282:	b086      	sub	sp, #24
 8039284:	af00      	add	r7, sp, #0
 8039286:	6078      	str	r0, [r7, #4]
	return *begin();
 8039288:	f107 0308 	add.w	r3, r7, #8
 803928c:	6879      	ldr	r1, [r7, #4]
 803928e:	4618      	mov	r0, r3
 8039290:	f7ff ff92 	bl	80391b8 <_ZNSt5dequeIjSaIjEE5beginEv>
 8039294:	f107 0308 	add.w	r3, r7, #8
 8039298:	4618      	mov	r0, r3
 803929a:	f000 fd1e 	bl	8039cda <_ZNKSt15_Deque_iteratorIjRjPjEdeEv>
 803929e:	4603      	mov	r3, r0
      }
 80392a0:	4618      	mov	r0, r3
 80392a2:	3718      	adds	r7, #24
 80392a4:	46bd      	mov	sp, r7
 80392a6:	bd80      	pop	{r7, pc}

080392a8 <_ZNSt5dequeIjSaIjEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 80392a8:	b580      	push	{r7, lr}
 80392aa:	b082      	sub	sp, #8
 80392ac:	af00      	add	r7, sp, #0
 80392ae:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80392b0:	687b      	ldr	r3, [r7, #4]
 80392b2:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80392b4:	687b      	ldr	r3, [r7, #4]
 80392b6:	691b      	ldr	r3, [r3, #16]
 80392b8:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 80392ba:	429a      	cmp	r2, r3
 80392bc:	d010      	beq.n	80392e0 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80392be:	687b      	ldr	r3, [r7, #4]
 80392c0:	4618      	mov	r0, r3
 80392c2:	f7ff ff97 	bl	80391f4 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80392c6:	4602      	mov	r2, r0
 80392c8:	687b      	ldr	r3, [r7, #4]
 80392ca:	689b      	ldr	r3, [r3, #8]
 80392cc:	4619      	mov	r1, r3
 80392ce:	4610      	mov	r0, r2
 80392d0:	f000 fd0f 	bl	8039cf2 <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80392d4:	687b      	ldr	r3, [r7, #4]
 80392d6:	689b      	ldr	r3, [r3, #8]
 80392d8:	1d1a      	adds	r2, r3, #4
 80392da:	687b      	ldr	r3, [r7, #4]
 80392dc:	609a      	str	r2, [r3, #8]
      }
 80392de:	e002      	b.n	80392e6 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 80392e0:	6878      	ldr	r0, [r7, #4]
 80392e2:	f000 fd13 	bl	8039d0c <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>
      }
 80392e6:	bf00      	nop
 80392e8:	3708      	adds	r7, #8
 80392ea:	46bd      	mov	sp, r7
 80392ec:	bd80      	pop	{r7, pc}

080392ee <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80392ee:	b480      	push	{r7}
 80392f0:	b083      	sub	sp, #12
 80392f2:	af00      	add	r7, sp, #0
 80392f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80392f6:	687b      	ldr	r3, [r7, #4]
 80392f8:	4618      	mov	r0, r3
 80392fa:	370c      	adds	r7, #12
 80392fc:	46bd      	mov	sp, r7
 80392fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039302:	4770      	bx	lr

08039304 <_ZNSt5dequeIjSaIjEE9push_backEOj>:
      push_back(value_type&& __x)
 8039304:	b580      	push	{r7, lr}
 8039306:	b082      	sub	sp, #8
 8039308:	af00      	add	r7, sp, #0
 803930a:	6078      	str	r0, [r7, #4]
 803930c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 803930e:	6838      	ldr	r0, [r7, #0]
 8039310:	f7ff ffed 	bl	80392ee <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>
 8039314:	4603      	mov	r3, r0
 8039316:	4619      	mov	r1, r3
 8039318:	6878      	ldr	r0, [r7, #4]
 803931a:	f000 fd1f 	bl	8039d5c <_ZNSt5dequeIjSaIjEE12emplace_backIJjEEEvDpOT_>
 803931e:	bf00      	nop
 8039320:	3708      	adds	r7, #8
 8039322:	46bd      	mov	sp, r7
 8039324:	bd80      	pop	{r7, pc}
	...

08039328 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 8039328:	b580      	push	{r7, lr}
 803932a:	b082      	sub	sp, #8
 803932c:	af00      	add	r7, sp, #0
 803932e:	6078      	str	r0, [r7, #4]
 8039330:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8039332:	6878      	ldr	r0, [r7, #4]
 8039334:	f000 fd3c 	bl	8039db0 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE4sizeEv>
 8039338:	4602      	mov	r2, r0
 803933a:	683b      	ldr	r3, [r7, #0]
 803933c:	4293      	cmp	r3, r2
 803933e:	bf2c      	ite	cs
 8039340:	2301      	movcs	r3, #1
 8039342:	2300      	movcc	r3, #0
 8039344:	b2db      	uxtb	r3, r3
 8039346:	2b00      	cmp	r3, #0
 8039348:	d008      	beq.n	803935c <_ZNKSt6vectorI14StrobeObserverSaIS0_EE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 803934a:	6878      	ldr	r0, [r7, #4]
 803934c:	f000 fd30 	bl	8039db0 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE4sizeEv>
 8039350:	4603      	mov	r3, r0
 8039352:	461a      	mov	r2, r3
 8039354:	6839      	ldr	r1, [r7, #0]
 8039356:	4803      	ldr	r0, [pc, #12]	; (8039364 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE14_M_range_checkEj+0x3c>)
 8039358:	f002 fb59 	bl	803ba0e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 803935c:	bf00      	nop
 803935e:	3708      	adds	r7, #8
 8039360:	46bd      	mov	sp, r7
 8039362:	bd80      	pop	{r7, pc}
 8039364:	0803da58 	.word	0x0803da58

08039368 <_ZNSt6vectorI14StrobeObserverSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8039368:	b480      	push	{r7}
 803936a:	b083      	sub	sp, #12
 803936c:	af00      	add	r7, sp, #0
 803936e:	6078      	str	r0, [r7, #4]
 8039370:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8039372:	687b      	ldr	r3, [r7, #4]
 8039374:	6819      	ldr	r1, [r3, #0]
 8039376:	683a      	ldr	r2, [r7, #0]
 8039378:	4613      	mov	r3, r2
 803937a:	005b      	lsls	r3, r3, #1
 803937c:	4413      	add	r3, r2
 803937e:	011b      	lsls	r3, r3, #4
 8039380:	440b      	add	r3, r1
      }
 8039382:	4618      	mov	r0, r3
 8039384:	370c      	adds	r7, #12
 8039386:	46bd      	mov	sp, r7
 8039388:	f85d 7b04 	ldr.w	r7, [sp], #4
 803938c:	4770      	bx	lr

0803938e <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 803938e:	b480      	push	{r7}
 8039390:	b083      	sub	sp, #12
 8039392:	af00      	add	r7, sp, #0
 8039394:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8039396:	687b      	ldr	r3, [r7, #4]
 8039398:	4618      	mov	r0, r3
 803939a:	370c      	adds	r7, #12
 803939c:	46bd      	mov	sp, r7
 803939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80393a2:	4770      	bx	lr

080393a4 <_ZSt7forwardIRPFvR18MotherboardContextEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80393a4:	b480      	push	{r7}
 80393a6:	b083      	sub	sp, #12
 80393a8:	af00      	add	r7, sp, #0
 80393aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80393ac:	687b      	ldr	r3, [r7, #4]
 80393ae:	4618      	mov	r0, r3
 80393b0:	370c      	adds	r7, #12
 80393b2:	46bd      	mov	sp, r7
 80393b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80393b8:	4770      	bx	lr

080393ba <_ZNSt16allocator_traitsISaI14StrobeObserverEE9constructIS0_JRhRPFvR18MotherboardContextEEEEvRS1_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80393ba:	b590      	push	{r4, r7, lr}
 80393bc:	b085      	sub	sp, #20
 80393be:	af00      	add	r7, sp, #0
 80393c0:	60f8      	str	r0, [r7, #12]
 80393c2:	60b9      	str	r1, [r7, #8]
 80393c4:	607a      	str	r2, [r7, #4]
 80393c6:	603b      	str	r3, [r7, #0]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80393c8:	6878      	ldr	r0, [r7, #4]
 80393ca:	f7ff ffe0 	bl	803938e <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80393ce:	4604      	mov	r4, r0
 80393d0:	6838      	ldr	r0, [r7, #0]
 80393d2:	f7ff ffe7 	bl	80393a4 <_ZSt7forwardIRPFvR18MotherboardContextEEOT_RNSt16remove_referenceIS5_E4typeE>
 80393d6:	4603      	mov	r3, r0
 80393d8:	4622      	mov	r2, r4
 80393da:	68b9      	ldr	r1, [r7, #8]
 80393dc:	68f8      	ldr	r0, [r7, #12]
 80393de:	f000 fcfd 	bl	8039ddc <_ZN9__gnu_cxx13new_allocatorI14StrobeObserverE9constructIS1_JRhRPFvR18MotherboardContextEEEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 80393e2:	bf00      	nop
 80393e4:	3714      	adds	r7, #20
 80393e6:	46bd      	mov	sp, r7
 80393e8:	bd90      	pop	{r4, r7, pc}

080393ea <_ZNSt6vectorI14StrobeObserverSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80393ea:	b580      	push	{r7, lr}
 80393ec:	b082      	sub	sp, #8
 80393ee:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80393f0:	4618      	mov	r0, r3
 80393f2:	f000 f805 	bl	8039400 <_ZNSt6vectorI14StrobeObserverSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80393f6:	4603      	mov	r3, r0
      }
 80393f8:	4618      	mov	r0, r3
 80393fa:	3708      	adds	r7, #8
 80393fc:	46bd      	mov	sp, r7
 80393fe:	bd80      	pop	{r7, pc}

08039400 <_ZNSt6vectorI14StrobeObserverSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8039400:	b480      	push	{r7}
 8039402:	b083      	sub	sp, #12
 8039404:	af00      	add	r7, sp, #0
 8039406:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8039408:	2300      	movs	r3, #0
      }
 803940a:	4618      	mov	r0, r3
 803940c:	370c      	adds	r7, #12
 803940e:	46bd      	mov	sp, r7
 8039410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039414:	4770      	bx	lr
	...

08039418 <_ZNSt6vectorI14StrobeObserverSaIS0_EE17_M_realloc_insertIJRhRPFvR18MotherboardContextEEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8039418:	b5f0      	push	{r4, r5, r6, r7, lr}
 803941a:	b08d      	sub	sp, #52	; 0x34
 803941c:	af00      	add	r7, sp, #0
 803941e:	60f8      	str	r0, [r7, #12]
 8039420:	60b9      	str	r1, [r7, #8]
 8039422:	607a      	str	r2, [r7, #4]
 8039424:	603b      	str	r3, [r7, #0]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8039426:	4a61      	ldr	r2, [pc, #388]	; (80395ac <_ZNSt6vectorI14StrobeObserverSaIS0_EE17_M_realloc_insertIJRhRPFvR18MotherboardContextEEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x194>)
 8039428:	2101      	movs	r1, #1
 803942a:	68f8      	ldr	r0, [r7, #12]
 803942c:	f000 fcf6 	bl	8039e1c <_ZNKSt6vectorI14StrobeObserverSaIS0_EE12_M_check_lenEjPKc>
 8039430:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8039432:	68fb      	ldr	r3, [r7, #12]
 8039434:	681b      	ldr	r3, [r3, #0]
 8039436:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8039438:	68fb      	ldr	r3, [r7, #12]
 803943a:	685b      	ldr	r3, [r3, #4]
 803943c:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 803943e:	68f8      	ldr	r0, [r7, #12]
 8039440:	f7fe fa36 	bl	80378b0 <_ZNSt6vectorI14StrobeObserverSaIS0_EE5beginEv>
 8039444:	4603      	mov	r3, r0
 8039446:	617b      	str	r3, [r7, #20]
 8039448:	f107 0214 	add.w	r2, r7, #20
 803944c:	f107 0308 	add.w	r3, r7, #8
 8039450:	4611      	mov	r1, r2
 8039452:	4618      	mov	r0, r3
 8039454:	f000 fd2a 	bl	8039eac <_ZN9__gnu_cxxmiIP14StrobeObserverSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8039458:	4603      	mov	r3, r0
 803945a:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 803945c:	68fb      	ldr	r3, [r7, #12]
 803945e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8039460:	4618      	mov	r0, r3
 8039462:	f000 fd3d 	bl	8039ee0 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE11_M_allocateEj>
 8039466:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8039468:	69bb      	ldr	r3, [r7, #24]
 803946a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 803946c:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 803946e:	69fa      	ldr	r2, [r7, #28]
 8039470:	4613      	mov	r3, r2
 8039472:	005b      	lsls	r3, r3, #1
 8039474:	4413      	add	r3, r2
 8039476:	011b      	lsls	r3, r3, #4
 8039478:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 803947a:	69bb      	ldr	r3, [r7, #24]
 803947c:	189d      	adds	r5, r3, r2
 803947e:	6878      	ldr	r0, [r7, #4]
 8039480:	f7ff ff85 	bl	803938e <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8039484:	4606      	mov	r6, r0
 8039486:	6838      	ldr	r0, [r7, #0]
 8039488:	f7ff ff8c 	bl	80393a4 <_ZSt7forwardIRPFvR18MotherboardContextEEOT_RNSt16remove_referenceIS5_E4typeE>
 803948c:	4603      	mov	r3, r0
 803948e:	4632      	mov	r2, r6
 8039490:	4629      	mov	r1, r5
 8039492:	4620      	mov	r0, r4
 8039494:	f7ff ff91 	bl	80393ba <_ZNSt16allocator_traitsISaI14StrobeObserverEE9constructIS0_JRhRPFvR18MotherboardContextEEEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8039498:	2300      	movs	r3, #0
 803949a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 803949c:	f7ff ffa5 	bl	80393ea <_ZNSt6vectorI14StrobeObserverSaIS0_EE15_S_use_relocateEv>
 80394a0:	4603      	mov	r3, r0
 80394a2:	2b00      	cmp	r3, #0
 80394a4:	d027      	beq.n	80394f6 <_ZNSt6vectorI14StrobeObserverSaIS0_EE17_M_realloc_insertIJRhRPFvR18MotherboardContextEEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xde>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80394a6:	f107 0308 	add.w	r3, r7, #8
 80394aa:	4618      	mov	r0, r3
 80394ac:	f000 f892 	bl	80395d4 <_ZNK9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEE4baseEv>
 80394b0:	4603      	mov	r3, r0
 80394b2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80394b4:	68fb      	ldr	r3, [r7, #12]
 80394b6:	4618      	mov	r0, r3
 80394b8:	f000 f8fe 	bl	80396b8 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE19_M_get_Tp_allocatorEv>
 80394bc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80394be:	69ba      	ldr	r2, [r7, #24]
 80394c0:	4621      	mov	r1, r4
 80394c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80394c4:	f000 fd20 	bl	8039f08 <_ZNSt6vectorI14StrobeObserverSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80394c8:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80394ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80394cc:	3330      	adds	r3, #48	; 0x30
 80394ce:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80394d0:	f107 0308 	add.w	r3, r7, #8
 80394d4:	4618      	mov	r0, r3
 80394d6:	f000 f87d 	bl	80395d4 <_ZNK9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEE4baseEv>
 80394da:	4603      	mov	r3, r0
 80394dc:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80394de:	68fb      	ldr	r3, [r7, #12]
 80394e0:	4618      	mov	r0, r3
 80394e2:	f000 f8e9 	bl	80396b8 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE19_M_get_Tp_allocatorEv>
 80394e6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80394e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80394ea:	6a39      	ldr	r1, [r7, #32]
 80394ec:	4620      	mov	r0, r4
 80394ee:	f000 fd0b 	bl	8039f08 <_ZNSt6vectorI14StrobeObserverSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80394f2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80394f4:	e026      	b.n	8039544 <_ZNSt6vectorI14StrobeObserverSaIS0_EE17_M_realloc_insertIJRhRPFvR18MotherboardContextEEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x12c>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80394f6:	f107 0308 	add.w	r3, r7, #8
 80394fa:	4618      	mov	r0, r3
 80394fc:	f000 f86a 	bl	80395d4 <_ZNK9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEE4baseEv>
 8039500:	4603      	mov	r3, r0
 8039502:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8039504:	68fb      	ldr	r3, [r7, #12]
 8039506:	4618      	mov	r0, r3
 8039508:	f000 f8d6 	bl	80396b8 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE19_M_get_Tp_allocatorEv>
 803950c:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 803950e:	69ba      	ldr	r2, [r7, #24]
 8039510:	4621      	mov	r1, r4
 8039512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8039514:	f000 fd0c 	bl	8039f30 <_ZSt34__uninitialized_move_if_noexcept_aIP14StrobeObserverS1_SaIS0_EET0_T_S4_S3_RT1_>
 8039518:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 803951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803951c:	3330      	adds	r3, #48	; 0x30
 803951e:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8039520:	f107 0308 	add.w	r3, r7, #8
 8039524:	4618      	mov	r0, r3
 8039526:	f000 f855 	bl	80395d4 <_ZNK9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEE4baseEv>
 803952a:	4603      	mov	r3, r0
 803952c:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 803952e:	68fb      	ldr	r3, [r7, #12]
 8039530:	4618      	mov	r0, r3
 8039532:	f000 f8c1 	bl	80396b8 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE19_M_get_Tp_allocatorEv>
 8039536:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8039538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803953a:	6a39      	ldr	r1, [r7, #32]
 803953c:	4620      	mov	r0, r4
 803953e:	f000 fcf7 	bl	8039f30 <_ZSt34__uninitialized_move_if_noexcept_aIP14StrobeObserverS1_SaIS0_EET0_T_S4_S3_RT1_>
 8039542:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8039544:	f7ff ff51 	bl	80393ea <_ZNSt6vectorI14StrobeObserverSaIS0_EE15_S_use_relocateEv>
 8039548:	4603      	mov	r3, r0
 803954a:	f083 0301 	eor.w	r3, r3, #1
 803954e:	b2db      	uxtb	r3, r3
 8039550:	2b00      	cmp	r3, #0
 8039552:	d009      	beq.n	8039568 <_ZNSt6vectorI14StrobeObserverSaIS0_EE17_M_realloc_insertIJRhRPFvR18MotherboardContextEEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x150>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8039554:	68fb      	ldr	r3, [r7, #12]
 8039556:	4618      	mov	r0, r3
 8039558:	f000 f8ae 	bl	80396b8 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE19_M_get_Tp_allocatorEv>
 803955c:	4603      	mov	r3, r0
 803955e:	461a      	mov	r2, r3
 8039560:	6a39      	ldr	r1, [r7, #32]
 8039562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8039564:	f000 f8b3 	bl	80396ce <_ZSt8_DestroyIP14StrobeObserverS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8039568:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 803956a:	68fb      	ldr	r3, [r7, #12]
 803956c:	689a      	ldr	r2, [r3, #8]
 803956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039570:	1ad3      	subs	r3, r2, r3
 8039572:	111b      	asrs	r3, r3, #4
 8039574:	4a0e      	ldr	r2, [pc, #56]	; (80395b0 <_ZNSt6vectorI14StrobeObserverSaIS0_EE17_M_realloc_insertIJRhRPFvR18MotherboardContextEEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x198>)
 8039576:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 803957a:	461a      	mov	r2, r3
 803957c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803957e:	f000 f888 	bl	8039692 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8039582:	68fb      	ldr	r3, [r7, #12]
 8039584:	69ba      	ldr	r2, [r7, #24]
 8039586:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8039588:	68fb      	ldr	r3, [r7, #12]
 803958a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803958c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 803958e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8039590:	4613      	mov	r3, r2
 8039592:	005b      	lsls	r3, r3, #1
 8039594:	4413      	add	r3, r2
 8039596:	011b      	lsls	r3, r3, #4
 8039598:	461a      	mov	r2, r3
 803959a:	69bb      	ldr	r3, [r7, #24]
 803959c:	441a      	add	r2, r3
 803959e:	68fb      	ldr	r3, [r7, #12]
 80395a0:	609a      	str	r2, [r3, #8]
    }
 80395a2:	bf00      	nop
 80395a4:	3734      	adds	r7, #52	; 0x34
 80395a6:	46bd      	mov	sp, r7
 80395a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80395aa:	bf00      	nop
 80395ac:	0803daa4 	.word	0x0803daa4
 80395b0:	aaaaaaab 	.word	0xaaaaaaab

080395b4 <_ZN9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80395b4:	b480      	push	{r7}
 80395b6:	b083      	sub	sp, #12
 80395b8:	af00      	add	r7, sp, #0
 80395ba:	6078      	str	r0, [r7, #4]
 80395bc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80395be:	683b      	ldr	r3, [r7, #0]
 80395c0:	681a      	ldr	r2, [r3, #0]
 80395c2:	687b      	ldr	r3, [r7, #4]
 80395c4:	601a      	str	r2, [r3, #0]
 80395c6:	687b      	ldr	r3, [r7, #4]
 80395c8:	4618      	mov	r0, r3
 80395ca:	370c      	adds	r7, #12
 80395cc:	46bd      	mov	sp, r7
 80395ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80395d2:	4770      	bx	lr

080395d4 <_ZNK9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80395d4:	b480      	push	{r7}
 80395d6:	b083      	sub	sp, #12
 80395d8:	af00      	add	r7, sp, #0
 80395da:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80395dc:	687b      	ldr	r3, [r7, #4]
 80395de:	4618      	mov	r0, r3
 80395e0:	370c      	adds	r7, #12
 80395e2:	46bd      	mov	sp, r7
 80395e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80395e8:	4770      	bx	lr
	...

080395ec <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE5ClearEv>:
	void Clear() {
 80395ec:	b580      	push	{r7, lr}
 80395ee:	b082      	sub	sp, #8
 80395f0:	af00      	add	r7, sp, #0
 80395f2:	6078      	str	r0, [r7, #4]
		Size = 0;
 80395f4:	687b      	ldr	r3, [r7, #4]
 80395f6:	2200      	movs	r2, #0
 80395f8:	601a      	str	r2, [r3, #0]
		Head = 0;
 80395fa:	687b      	ldr	r3, [r7, #4]
 80395fc:	2200      	movs	r2, #0
 80395fe:	605a      	str	r2, [r3, #4]
		Tail = 0;
 8039600:	687b      	ldr	r3, [r7, #4]
 8039602:	2200      	movs	r2, #0
 8039604:	609a      	str	r2, [r3, #8]
		Buffer = { };
 8039606:	687b      	ldr	r3, [r7, #4]
 8039608:	330c      	adds	r3, #12
 803960a:	4a04      	ldr	r2, [pc, #16]	; (803961c <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE5ClearEv+0x30>)
 803960c:	2100      	movs	r1, #0
 803960e:	4618      	mov	r0, r3
 8039610:	f002 fb62 	bl	803bcd8 <memset>
	}
 8039614:	bf00      	nop
 8039616:	3708      	adds	r7, #8
 8039618:	46bd      	mov	sp, r7
 803961a:	bd80      	pop	{r7, pc}
 803961c:	00013560 	.word	0x00013560

08039620 <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE5ClearEv>:
	void Clear() {
 8039620:	b580      	push	{r7, lr}
 8039622:	b082      	sub	sp, #8
 8039624:	af00      	add	r7, sp, #0
 8039626:	6078      	str	r0, [r7, #4]
		Size = 0;
 8039628:	687b      	ldr	r3, [r7, #4]
 803962a:	2200      	movs	r2, #0
 803962c:	601a      	str	r2, [r3, #0]
		Head = 0;
 803962e:	687b      	ldr	r3, [r7, #4]
 8039630:	2200      	movs	r2, #0
 8039632:	605a      	str	r2, [r3, #4]
		Tail = 0;
 8039634:	687b      	ldr	r3, [r7, #4]
 8039636:	2200      	movs	r2, #0
 8039638:	609a      	str	r2, [r3, #8]
		Buffer = { };
 803963a:	687b      	ldr	r3, [r7, #4]
 803963c:	330c      	adds	r3, #12
 803963e:	f241 7270 	movw	r2, #6000	; 0x1770
 8039642:	2100      	movs	r1, #0
 8039644:	4618      	mov	r0, r3
 8039646:	f002 fb47 	bl	803bcd8 <memset>
	}
 803964a:	bf00      	nop
 803964c:	3708      	adds	r7, #8
 803964e:	46bd      	mov	sp, r7
 8039650:	bd80      	pop	{r7, pc}

08039652 <_ZNSaI14StrobeObserverEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8039652:	b580      	push	{r7, lr}
 8039654:	b082      	sub	sp, #8
 8039656:	af00      	add	r7, sp, #0
 8039658:	6078      	str	r0, [r7, #4]
 803965a:	6878      	ldr	r0, [r7, #4]
 803965c:	f000 fc81 	bl	8039f62 <_ZN9__gnu_cxx13new_allocatorI14StrobeObserverEC1Ev>
 8039660:	687b      	ldr	r3, [r7, #4]
 8039662:	4618      	mov	r0, r3
 8039664:	3708      	adds	r7, #8
 8039666:	46bd      	mov	sp, r7
 8039668:	bd80      	pop	{r7, pc}

0803966a <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 803966a:	b480      	push	{r7}
 803966c:	b083      	sub	sp, #12
 803966e:	af00      	add	r7, sp, #0
 8039670:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8039672:	687b      	ldr	r3, [r7, #4]
 8039674:	2200      	movs	r2, #0
 8039676:	601a      	str	r2, [r3, #0]
 8039678:	687b      	ldr	r3, [r7, #4]
 803967a:	2200      	movs	r2, #0
 803967c:	605a      	str	r2, [r3, #4]
 803967e:	687b      	ldr	r3, [r7, #4]
 8039680:	2200      	movs	r2, #0
 8039682:	609a      	str	r2, [r3, #8]
	{ }
 8039684:	687b      	ldr	r3, [r7, #4]
 8039686:	4618      	mov	r0, r3
 8039688:	370c      	adds	r7, #12
 803968a:	46bd      	mov	sp, r7
 803968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039690:	4770      	bx	lr

08039692 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8039692:	b580      	push	{r7, lr}
 8039694:	b084      	sub	sp, #16
 8039696:	af00      	add	r7, sp, #0
 8039698:	60f8      	str	r0, [r7, #12]
 803969a:	60b9      	str	r1, [r7, #8]
 803969c:	607a      	str	r2, [r7, #4]
	if (__p)
 803969e:	68bb      	ldr	r3, [r7, #8]
 80396a0:	2b00      	cmp	r3, #0
 80396a2:	d005      	beq.n	80396b0 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80396a4:	68fb      	ldr	r3, [r7, #12]
 80396a6:	687a      	ldr	r2, [r7, #4]
 80396a8:	68b9      	ldr	r1, [r7, #8]
 80396aa:	4618      	mov	r0, r3
 80396ac:	f000 fc64 	bl	8039f78 <_ZNSt16allocator_traitsISaI14StrobeObserverEE10deallocateERS1_PS0_j>
      }
 80396b0:	bf00      	nop
 80396b2:	3710      	adds	r7, #16
 80396b4:	46bd      	mov	sp, r7
 80396b6:	bd80      	pop	{r7, pc}

080396b8 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80396b8:	b480      	push	{r7}
 80396ba:	b083      	sub	sp, #12
 80396bc:	af00      	add	r7, sp, #0
 80396be:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80396c0:	687b      	ldr	r3, [r7, #4]
 80396c2:	4618      	mov	r0, r3
 80396c4:	370c      	adds	r7, #12
 80396c6:	46bd      	mov	sp, r7
 80396c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80396cc:	4770      	bx	lr

080396ce <_ZSt8_DestroyIP14StrobeObserverS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80396ce:	b580      	push	{r7, lr}
 80396d0:	b084      	sub	sp, #16
 80396d2:	af00      	add	r7, sp, #0
 80396d4:	60f8      	str	r0, [r7, #12]
 80396d6:	60b9      	str	r1, [r7, #8]
 80396d8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80396da:	68b9      	ldr	r1, [r7, #8]
 80396dc:	68f8      	ldr	r0, [r7, #12]
 80396de:	f000 fc5a 	bl	8039f96 <_ZSt8_DestroyIP14StrobeObserverEvT_S2_>
    }
 80396e2:	bf00      	nop
 80396e4:	3710      	adds	r7, #16
 80396e6:	46bd      	mov	sp, r7
 80396e8:	bd80      	pop	{r7, pc}

080396ea <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE5EmptyEv>:
	bool Empty() const {
 80396ea:	b480      	push	{r7}
 80396ec:	b083      	sub	sp, #12
 80396ee:	af00      	add	r7, sp, #0
 80396f0:	6078      	str	r0, [r7, #4]
		return Size == 0;
 80396f2:	687b      	ldr	r3, [r7, #4]
 80396f4:	681b      	ldr	r3, [r3, #0]
 80396f6:	2b00      	cmp	r3, #0
 80396f8:	bf0c      	ite	eq
 80396fa:	2301      	moveq	r3, #1
 80396fc:	2300      	movne	r3, #0
 80396fe:	b2db      	uxtb	r3, r3
	}
 8039700:	4618      	mov	r0, r3
 8039702:	370c      	adds	r7, #12
 8039704:	46bd      	mov	sp, r7
 8039706:	f85d 7b04 	ldr.w	r7, [sp], #4
 803970a:	4770      	bx	lr

0803970c <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE7GetSizeEv>:
	size_t GetSize() const {
 803970c:	b480      	push	{r7}
 803970e:	b083      	sub	sp, #12
 8039710:	af00      	add	r7, sp, #0
 8039712:	6078      	str	r0, [r7, #4]
		return Size;
 8039714:	687b      	ldr	r3, [r7, #4]
 8039716:	681b      	ldr	r3, [r3, #0]
	}
 8039718:	4618      	mov	r0, r3
 803971a:	370c      	adds	r7, #12
 803971c:	46bd      	mov	sp, r7
 803971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039722:	4770      	bx	lr

08039724 <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PeekEj>:

	bool HasElt(size_t i) const {
		return i < GetSize();
	}

	const T& Peek(size_t i) const {
 8039724:	b580      	push	{r7, lr}
 8039726:	b082      	sub	sp, #8
 8039728:	af00      	add	r7, sp, #0
 803972a:	6078      	str	r0, [r7, #4]
 803972c:	6039      	str	r1, [r7, #0]
		assert(HasElt(i));
 803972e:	6839      	ldr	r1, [r7, #0]
 8039730:	6878      	ldr	r0, [r7, #4]
 8039732:	f000 fc3d 	bl	8039fb0 <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE6HasEltEj>
 8039736:	4603      	mov	r3, r0
 8039738:	2b00      	cmp	r3, #0
 803973a:	d105      	bne.n	8039748 <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PeekEj+0x24>
 803973c:	4b0e      	ldr	r3, [pc, #56]	; (8039778 <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PeekEj+0x54>)
 803973e:	4a0f      	ldr	r2, [pc, #60]	; (803977c <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PeekEj+0x58>)
 8039740:	213c      	movs	r1, #60	; 0x3c
 8039742:	480f      	ldr	r0, [pc, #60]	; (8039780 <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PeekEj+0x5c>)
 8039744:	f002 fa26 	bl	803bb94 <__assert_func>

		return Buffer[(Tail + i) % Capacity];
 8039748:	687b      	ldr	r3, [r7, #4]
 803974a:	f103 000c 	add.w	r0, r3, #12
 803974e:	687b      	ldr	r3, [r7, #4]
 8039750:	689a      	ldr	r2, [r3, #8]
 8039752:	683b      	ldr	r3, [r7, #0]
 8039754:	441a      	add	r2, r3
 8039756:	4b0b      	ldr	r3, [pc, #44]	; (8039784 <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PeekEj+0x60>)
 8039758:	fba3 1302 	umull	r1, r3, r3, r2
 803975c:	095b      	lsrs	r3, r3, #5
 803975e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8039762:	fb01 f303 	mul.w	r3, r1, r3
 8039766:	1ad3      	subs	r3, r2, r3
 8039768:	4619      	mov	r1, r3
 803976a:	f000 fc34 	bl	8039fd6 <_ZNKSt5arrayIN4Roki8Messages11IMUFrameMsgELj300EEixEj>
 803976e:	4603      	mov	r3, r0
	}
 8039770:	4618      	mov	r0, r3
 8039772:	3708      	adds	r7, #8
 8039774:	46bd      	mov	sp, r7
 8039776:	bd80      	pop	{r7, pc}
 8039778:	0803dac0 	.word	0x0803dac0
 803977c:	0803dacc 	.word	0x0803dacc
 8039780:	0803d544 	.word	0x0803d544
 8039784:	1b4e81b5 	.word	0x1b4e81b5

08039788 <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE5EmptyEv>:
	bool Empty() const {
 8039788:	b480      	push	{r7}
 803978a:	b083      	sub	sp, #12
 803978c:	af00      	add	r7, sp, #0
 803978e:	6078      	str	r0, [r7, #4]
		return Size == 0;
 8039790:	687b      	ldr	r3, [r7, #4]
 8039792:	681b      	ldr	r3, [r3, #0]
 8039794:	2b00      	cmp	r3, #0
 8039796:	bf0c      	ite	eq
 8039798:	2301      	moveq	r3, #1
 803979a:	2300      	movne	r3, #0
 803979c:	b2db      	uxtb	r3, r3
	}
 803979e:	4618      	mov	r0, r3
 80397a0:	370c      	adds	r7, #12
 80397a2:	46bd      	mov	sp, r7
 80397a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80397a8:	4770      	bx	lr

080397aa <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE7GetSizeEv>:
	size_t GetSize() const {
 80397aa:	b480      	push	{r7}
 80397ac:	b083      	sub	sp, #12
 80397ae:	af00      	add	r7, sp, #0
 80397b0:	6078      	str	r0, [r7, #4]
		return Size;
 80397b2:	687b      	ldr	r3, [r7, #4]
 80397b4:	681b      	ldr	r3, [r3, #0]
	}
 80397b6:	4618      	mov	r0, r3
 80397b8:	370c      	adds	r7, #12
 80397ba:	46bd      	mov	sp, r7
 80397bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80397c0:	4770      	bx	lr
	...

080397c4 <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PeekEj>:
	const T& Peek(size_t i) const {
 80397c4:	b580      	push	{r7, lr}
 80397c6:	b082      	sub	sp, #8
 80397c8:	af00      	add	r7, sp, #0
 80397ca:	6078      	str	r0, [r7, #4]
 80397cc:	6039      	str	r1, [r7, #0]
		assert(HasElt(i));
 80397ce:	6839      	ldr	r1, [r7, #0]
 80397d0:	6878      	ldr	r0, [r7, #4]
 80397d2:	f000 fc0f 	bl	8039ff4 <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE6HasEltEj>
 80397d6:	4603      	mov	r3, r0
 80397d8:	2b00      	cmp	r3, #0
 80397da:	d105      	bne.n	80397e8 <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PeekEj+0x24>
 80397dc:	4b0e      	ldr	r3, [pc, #56]	; (8039818 <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PeekEj+0x54>)
 80397de:	4a0f      	ldr	r2, [pc, #60]	; (803981c <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PeekEj+0x58>)
 80397e0:	213c      	movs	r1, #60	; 0x3c
 80397e2:	480f      	ldr	r0, [pc, #60]	; (8039820 <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PeekEj+0x5c>)
 80397e4:	f002 f9d6 	bl	803bb94 <__assert_func>
		return Buffer[(Tail + i) % Capacity];
 80397e8:	687b      	ldr	r3, [r7, #4]
 80397ea:	f103 000c 	add.w	r0, r3, #12
 80397ee:	687b      	ldr	r3, [r7, #4]
 80397f0:	689a      	ldr	r2, [r3, #8]
 80397f2:	683b      	ldr	r3, [r7, #0]
 80397f4:	441a      	add	r2, r3
 80397f6:	4b0b      	ldr	r3, [pc, #44]	; (8039824 <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PeekEj+0x60>)
 80397f8:	fba3 1302 	umull	r1, r3, r3, r2
 80397fc:	095b      	lsrs	r3, r3, #5
 80397fe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8039802:	fb01 f303 	mul.w	r3, r1, r3
 8039806:	1ad3      	subs	r3, r2, r3
 8039808:	4619      	mov	r1, r3
 803980a:	f000 fc06 	bl	803a01a <_ZNKSt5arrayIN11FrameQueues12BodyResponceELj300EEixEj>
 803980e:	4603      	mov	r3, r0
	}
 8039810:	4618      	mov	r0, r3
 8039812:	3708      	adds	r7, #8
 8039814:	46bd      	mov	sp, r7
 8039816:	bd80      	pop	{r7, pc}
 8039818:	0803dac0 	.word	0x0803dac0
 803981c:	0803db5c 	.word	0x0803db5c
 8039820:	0803d544 	.word	0x0803d544
 8039824:	1b4e81b5 	.word	0x1b4e81b5

08039828 <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE4FullEv>:
	bool Full() const {
 8039828:	b480      	push	{r7}
 803982a:	b083      	sub	sp, #12
 803982c:	af00      	add	r7, sp, #0
 803982e:	6078      	str	r0, [r7, #4]
		return Size == Capacity;
 8039830:	687b      	ldr	r3, [r7, #4]
 8039832:	681b      	ldr	r3, [r3, #0]
 8039834:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8039838:	bf0c      	ite	eq
 803983a:	2301      	moveq	r3, #1
 803983c:	2300      	movne	r3, #0
 803983e:	b2db      	uxtb	r3, r3
	}
 8039840:	4618      	mov	r0, r3
 8039842:	370c      	adds	r7, #12
 8039844:	46bd      	mov	sp, r7
 8039846:	f85d 7b04 	ldr.w	r7, [sp], #4
 803984a:	4770      	bx	lr

0803984c <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE3PopEv>:
	void Pop() {
 803984c:	b580      	push	{r7, lr}
 803984e:	b082      	sub	sp, #8
 8039850:	af00      	add	r7, sp, #0
 8039852:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8039854:	687b      	ldr	r3, [r7, #4]
 8039856:	681b      	ldr	r3, [r3, #0]
 8039858:	2b00      	cmp	r3, #0
 803985a:	d105      	bne.n	8039868 <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE3PopEv+0x1c>
 803985c:	4b0e      	ldr	r3, [pc, #56]	; (8039898 <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE3PopEv+0x4c>)
 803985e:	4a0f      	ldr	r2, [pc, #60]	; (803989c <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE3PopEv+0x50>)
 8039860:	211a      	movs	r1, #26
 8039862:	480f      	ldr	r0, [pc, #60]	; (80398a0 <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE3PopEv+0x54>)
 8039864:	f002 f996 	bl	803bb94 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8039868:	687b      	ldr	r3, [r7, #4]
 803986a:	689b      	ldr	r3, [r3, #8]
 803986c:	1c5a      	adds	r2, r3, #1
 803986e:	4b0d      	ldr	r3, [pc, #52]	; (80398a4 <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE3PopEv+0x58>)
 8039870:	fba3 1302 	umull	r1, r3, r3, r2
 8039874:	095b      	lsrs	r3, r3, #5
 8039876:	f44f 7196 	mov.w	r1, #300	; 0x12c
 803987a:	fb01 f303 	mul.w	r3, r1, r3
 803987e:	1ad3      	subs	r3, r2, r3
 8039880:	687a      	ldr	r2, [r7, #4]
 8039882:	6093      	str	r3, [r2, #8]
		Size--;
 8039884:	687b      	ldr	r3, [r7, #4]
 8039886:	681b      	ldr	r3, [r3, #0]
 8039888:	1e5a      	subs	r2, r3, #1
 803988a:	687b      	ldr	r3, [r7, #4]
 803988c:	601a      	str	r2, [r3, #0]
	}
 803988e:	bf00      	nop
 8039890:	3708      	adds	r7, #8
 8039892:	46bd      	mov	sp, r7
 8039894:	bd80      	pop	{r7, pc}
 8039896:	bf00      	nop
 8039898:	0803d618 	.word	0x0803d618
 803989c:	0803dbec 	.word	0x0803dbec
 80398a0:	0803d544 	.word	0x0803d544
 80398a4:	1b4e81b5 	.word	0x1b4e81b5

080398a8 <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PushERKS1_>:
	void Push(const T &rhs) {
 80398a8:	b580      	push	{r7, lr}
 80398aa:	b082      	sub	sp, #8
 80398ac:	af00      	add	r7, sp, #0
 80398ae:	6078      	str	r0, [r7, #4]
 80398b0:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 80398b2:	687b      	ldr	r3, [r7, #4]
 80398b4:	681b      	ldr	r3, [r3, #0]
 80398b6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80398ba:	d105      	bne.n	80398c8 <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PushERKS1_+0x20>
 80398bc:	4b17      	ldr	r3, [pc, #92]	; (803991c <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PushERKS1_+0x74>)
 80398be:	4a18      	ldr	r2, [pc, #96]	; (8039920 <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PushERKS1_+0x78>)
 80398c0:	2112      	movs	r1, #18
 80398c2:	4818      	ldr	r0, [pc, #96]	; (8039924 <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PushERKS1_+0x7c>)
 80398c4:	f002 f966 	bl	803bb94 <__assert_func>
		Buffer[Head] = rhs;
 80398c8:	687b      	ldr	r3, [r7, #4]
 80398ca:	f103 020c 	add.w	r2, r3, #12
 80398ce:	687b      	ldr	r3, [r7, #4]
 80398d0:	685b      	ldr	r3, [r3, #4]
 80398d2:	4619      	mov	r1, r3
 80398d4:	4610      	mov	r0, r2
 80398d6:	f000 fbaf 	bl	803a038 <_ZNSt5arrayIN11FrameQueues12BodyResponceELj300EEixEj>
 80398da:	4602      	mov	r2, r0
 80398dc:	683b      	ldr	r3, [r7, #0]
 80398de:	4610      	mov	r0, r2
 80398e0:	4619      	mov	r1, r3
 80398e2:	f44f 7384 	mov.w	r3, #264	; 0x108
 80398e6:	461a      	mov	r2, r3
 80398e8:	f002 f9ce 	bl	803bc88 <memcpy>
		Head = (Head + 1) % Capacity;
 80398ec:	687b      	ldr	r3, [r7, #4]
 80398ee:	685b      	ldr	r3, [r3, #4]
 80398f0:	1c5a      	adds	r2, r3, #1
 80398f2:	4b0d      	ldr	r3, [pc, #52]	; (8039928 <_ZN10FixedQueueIN11FrameQueues12BodyResponceELj300EE4PushERKS1_+0x80>)
 80398f4:	fba3 1302 	umull	r1, r3, r3, r2
 80398f8:	095b      	lsrs	r3, r3, #5
 80398fa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80398fe:	fb01 f303 	mul.w	r3, r1, r3
 8039902:	1ad3      	subs	r3, r2, r3
 8039904:	687a      	ldr	r2, [r7, #4]
 8039906:	6053      	str	r3, [r2, #4]
		Size++;
 8039908:	687b      	ldr	r3, [r7, #4]
 803990a:	681b      	ldr	r3, [r3, #0]
 803990c:	1c5a      	adds	r2, r3, #1
 803990e:	687b      	ldr	r3, [r7, #4]
 8039910:	601a      	str	r2, [r3, #0]
	}
 8039912:	bf00      	nop
 8039914:	3708      	adds	r7, #8
 8039916:	46bd      	mov	sp, r7
 8039918:	bd80      	pop	{r7, pc}
 803991a:	bf00      	nop
 803991c:	0803d4cc 	.word	0x0803d4cc
 8039920:	0803dc54 	.word	0x0803dc54
 8039924:	0803d544 	.word	0x0803d544
 8039928:	1b4e81b5 	.word	0x1b4e81b5

0803992c <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4FullEv>:
	bool Full() const {
 803992c:	b480      	push	{r7}
 803992e:	b083      	sub	sp, #12
 8039930:	af00      	add	r7, sp, #0
 8039932:	6078      	str	r0, [r7, #4]
		return Size == Capacity;
 8039934:	687b      	ldr	r3, [r7, #4]
 8039936:	681b      	ldr	r3, [r3, #0]
 8039938:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 803993c:	bf0c      	ite	eq
 803993e:	2301      	moveq	r3, #1
 8039940:	2300      	movne	r3, #0
 8039942:	b2db      	uxtb	r3, r3
	}
 8039944:	4618      	mov	r0, r3
 8039946:	370c      	adds	r7, #12
 8039948:	46bd      	mov	sp, r7
 803994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803994e:	4770      	bx	lr

08039950 <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE3PopEv>:
	void Pop() {
 8039950:	b580      	push	{r7, lr}
 8039952:	b082      	sub	sp, #8
 8039954:	af00      	add	r7, sp, #0
 8039956:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8039958:	687b      	ldr	r3, [r7, #4]
 803995a:	681b      	ldr	r3, [r3, #0]
 803995c:	2b00      	cmp	r3, #0
 803995e:	d105      	bne.n	803996c <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE3PopEv+0x1c>
 8039960:	4b0e      	ldr	r3, [pc, #56]	; (803999c <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE3PopEv+0x4c>)
 8039962:	4a0f      	ldr	r2, [pc, #60]	; (80399a0 <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE3PopEv+0x50>)
 8039964:	211a      	movs	r1, #26
 8039966:	480f      	ldr	r0, [pc, #60]	; (80399a4 <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE3PopEv+0x54>)
 8039968:	f002 f914 	bl	803bb94 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 803996c:	687b      	ldr	r3, [r7, #4]
 803996e:	689b      	ldr	r3, [r3, #8]
 8039970:	1c5a      	adds	r2, r3, #1
 8039972:	4b0d      	ldr	r3, [pc, #52]	; (80399a8 <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE3PopEv+0x58>)
 8039974:	fba3 1302 	umull	r1, r3, r3, r2
 8039978:	095b      	lsrs	r3, r3, #5
 803997a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 803997e:	fb01 f303 	mul.w	r3, r1, r3
 8039982:	1ad3      	subs	r3, r2, r3
 8039984:	687a      	ldr	r2, [r7, #4]
 8039986:	6093      	str	r3, [r2, #8]
		Size--;
 8039988:	687b      	ldr	r3, [r7, #4]
 803998a:	681b      	ldr	r3, [r3, #0]
 803998c:	1e5a      	subs	r2, r3, #1
 803998e:	687b      	ldr	r3, [r7, #4]
 8039990:	601a      	str	r2, [r3, #0]
	}
 8039992:	bf00      	nop
 8039994:	3708      	adds	r7, #8
 8039996:	46bd      	mov	sp, r7
 8039998:	bd80      	pop	{r7, pc}
 803999a:	bf00      	nop
 803999c:	0803d618 	.word	0x0803d618
 80399a0:	0803dcc4 	.word	0x0803dcc4
 80399a4:	0803d544 	.word	0x0803d544
 80399a8:	1b4e81b5 	.word	0x1b4e81b5

080399ac <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PushERKS2_>:
	void Push(const T &rhs) {
 80399ac:	b5b0      	push	{r4, r5, r7, lr}
 80399ae:	b082      	sub	sp, #8
 80399b0:	af00      	add	r7, sp, #0
 80399b2:	6078      	str	r0, [r7, #4]
 80399b4:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 80399b6:	687b      	ldr	r3, [r7, #4]
 80399b8:	681b      	ldr	r3, [r3, #0]
 80399ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80399be:	d105      	bne.n	80399cc <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PushERKS2_+0x20>
 80399c0:	4b16      	ldr	r3, [pc, #88]	; (8039a1c <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PushERKS2_+0x70>)
 80399c2:	4a17      	ldr	r2, [pc, #92]	; (8039a20 <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PushERKS2_+0x74>)
 80399c4:	2112      	movs	r1, #18
 80399c6:	4817      	ldr	r0, [pc, #92]	; (8039a24 <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PushERKS2_+0x78>)
 80399c8:	f002 f8e4 	bl	803bb94 <__assert_func>
		Buffer[Head] = rhs;
 80399cc:	687b      	ldr	r3, [r7, #4]
 80399ce:	f103 020c 	add.w	r2, r3, #12
 80399d2:	687b      	ldr	r3, [r7, #4]
 80399d4:	685b      	ldr	r3, [r3, #4]
 80399d6:	4619      	mov	r1, r3
 80399d8:	4610      	mov	r0, r2
 80399da:	f000 fb3c 	bl	803a056 <_ZNSt5arrayIN4Roki8Messages11IMUFrameMsgELj300EEixEj>
 80399de:	4602      	mov	r2, r0
 80399e0:	683b      	ldr	r3, [r7, #0]
 80399e2:	4614      	mov	r4, r2
 80399e4:	461d      	mov	r5, r3
 80399e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80399e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80399ea:	682b      	ldr	r3, [r5, #0]
 80399ec:	6023      	str	r3, [r4, #0]
		Head = (Head + 1) % Capacity;
 80399ee:	687b      	ldr	r3, [r7, #4]
 80399f0:	685b      	ldr	r3, [r3, #4]
 80399f2:	1c5a      	adds	r2, r3, #1
 80399f4:	4b0c      	ldr	r3, [pc, #48]	; (8039a28 <_ZN10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE4PushERKS2_+0x7c>)
 80399f6:	fba3 1302 	umull	r1, r3, r3, r2
 80399fa:	095b      	lsrs	r3, r3, #5
 80399fc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8039a00:	fb01 f303 	mul.w	r3, r1, r3
 8039a04:	1ad3      	subs	r3, r2, r3
 8039a06:	687a      	ldr	r2, [r7, #4]
 8039a08:	6053      	str	r3, [r2, #4]
		Size++;
 8039a0a:	687b      	ldr	r3, [r7, #4]
 8039a0c:	681b      	ldr	r3, [r3, #0]
 8039a0e:	1c5a      	adds	r2, r3, #1
 8039a10:	687b      	ldr	r3, [r7, #4]
 8039a12:	601a      	str	r2, [r3, #0]
	}
 8039a14:	bf00      	nop
 8039a16:	3708      	adds	r7, #8
 8039a18:	46bd      	mov	sp, r7
 8039a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8039a1c:	0803d4cc 	.word	0x0803d4cc
 8039a20:	0803dd2c 	.word	0x0803dd2c
 8039a24:	0803d544 	.word	0x0803d544
 8039a28:	1b4e81b5 	.word	0x1b4e81b5

08039a2c <_ZNSt14__array_traitsIN6HeadIO7RequestELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8039a2c:	b480      	push	{r7}
 8039a2e:	b083      	sub	sp, #12
 8039a30:	af00      	add	r7, sp, #0
 8039a32:	6078      	str	r0, [r7, #4]
 8039a34:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8039a36:	683a      	ldr	r2, [r7, #0]
 8039a38:	4613      	mov	r3, r2
 8039a3a:	01db      	lsls	r3, r3, #7
 8039a3c:	4413      	add	r3, r2
 8039a3e:	005b      	lsls	r3, r3, #1
 8039a40:	687a      	ldr	r2, [r7, #4]
 8039a42:	4413      	add	r3, r2
 8039a44:	4618      	mov	r0, r3
 8039a46:	370c      	adds	r7, #12
 8039a48:	46bd      	mov	sp, r7
 8039a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039a4e:	4770      	bx	lr

08039a50 <_ZNSt14__array_traitsIN6HeadIO8ResponceELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8039a50:	b480      	push	{r7}
 8039a52:	b083      	sub	sp, #12
 8039a54:	af00      	add	r7, sp, #0
 8039a56:	6078      	str	r0, [r7, #4]
 8039a58:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8039a5a:	683a      	ldr	r2, [r7, #0]
 8039a5c:	4613      	mov	r3, r2
 8039a5e:	01db      	lsls	r3, r3, #7
 8039a60:	4413      	add	r3, r2
 8039a62:	005b      	lsls	r3, r3, #1
 8039a64:	687a      	ldr	r2, [r7, #4]
 8039a66:	4413      	add	r3, r2
 8039a68:	4618      	mov	r0, r3
 8039a6a:	370c      	adds	r7, #12
 8039a6c:	46bd      	mov	sp, r7
 8039a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039a72:	4770      	bx	lr

08039a74 <_ZNSt14__array_traitsIN9BodyQueue7RequestELj500EE6_S_refERA500_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8039a74:	b480      	push	{r7}
 8039a76:	b083      	sub	sp, #12
 8039a78:	af00      	add	r7, sp, #0
 8039a7a:	6078      	str	r0, [r7, #4]
 8039a7c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8039a7e:	683a      	ldr	r2, [r7, #0]
 8039a80:	4613      	mov	r3, r2
 8039a82:	01db      	lsls	r3, r3, #7
 8039a84:	4413      	add	r3, r2
 8039a86:	005b      	lsls	r3, r3, #1
 8039a88:	687a      	ldr	r2, [r7, #4]
 8039a8a:	4413      	add	r3, r2
 8039a8c:	4618      	mov	r0, r3
 8039a8e:	370c      	adds	r7, #12
 8039a90:	46bd      	mov	sp, r7
 8039a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039a96:	4770      	bx	lr

08039a98 <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8039a98:	b580      	push	{r7, lr}
 8039a9a:	b084      	sub	sp, #16
 8039a9c:	af00      	add	r7, sp, #0
 8039a9e:	60f8      	str	r0, [r7, #12]
 8039aa0:	60b9      	str	r1, [r7, #8]
 8039aa2:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8039aa4:	6878      	ldr	r0, [r7, #4]
 8039aa6:	f000 fae5 	bl	803a074 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8039aaa:	4603      	mov	r3, r0
 8039aac:	461a      	mov	r2, r3
 8039aae:	68b9      	ldr	r1, [r7, #8]
 8039ab0:	68f8      	ldr	r0, [r7, #12]
 8039ab2:	f000 faea 	bl	803a08a <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>
	}
 8039ab6:	bf00      	nop
 8039ab8:	3710      	adds	r7, #16
 8039aba:	46bd      	mov	sp, r7
 8039abc:	bd80      	pop	{r7, pc}
	...

08039ac0 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8039ac0:	b5b0      	push	{r4, r5, r7, lr}
 8039ac2:	b082      	sub	sp, #8
 8039ac4:	af00      	add	r7, sp, #0
 8039ac6:	6078      	str	r0, [r7, #4]
 8039ac8:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8039aca:	6878      	ldr	r0, [r7, #4]
 8039acc:	f000 faf3 	bl	803a0b6 <_ZNKSt5dequeIjSaIjEE4sizeEv>
 8039ad0:	4604      	mov	r4, r0
 8039ad2:	6878      	ldr	r0, [r7, #4]
 8039ad4:	f000 fb01 	bl	803a0da <_ZNKSt5dequeIjSaIjEE8max_sizeEv>
 8039ad8:	4603      	mov	r3, r0
 8039ada:	429c      	cmp	r4, r3
 8039adc:	bf0c      	ite	eq
 8039ade:	2301      	moveq	r3, #1
 8039ae0:	2300      	movne	r3, #0
 8039ae2:	b2db      	uxtb	r3, r3
 8039ae4:	2b00      	cmp	r3, #0
 8039ae6:	d002      	beq.n	8039aee <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x2e>
	  __throw_length_error(
 8039ae8:	4816      	ldr	r0, [pc, #88]	; (8039b44 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x84>)
 8039aea:	f001 ff8d 	bl	803ba08 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8039aee:	2101      	movs	r1, #1
 8039af0:	6878      	ldr	r0, [r7, #4]
 8039af2:	f000 fb03 	bl	803a0fc <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8039af6:	687a      	ldr	r2, [r7, #4]
 8039af8:	687b      	ldr	r3, [r7, #4]
 8039afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8039afc:	1d1c      	adds	r4, r3, #4
 8039afe:	4610      	mov	r0, r2
 8039b00:	f000 fb17 	bl	803a132 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8039b04:	4603      	mov	r3, r0
 8039b06:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8039b08:	687c      	ldr	r4, [r7, #4]
 8039b0a:	687b      	ldr	r3, [r7, #4]
 8039b0c:	699d      	ldr	r5, [r3, #24]
 8039b0e:	6838      	ldr	r0, [r7, #0]
 8039b10:	f000 fab0 	bl	803a074 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8039b14:	4603      	mov	r3, r0
 8039b16:	461a      	mov	r2, r3
 8039b18:	4629      	mov	r1, r5
 8039b1a:	4620      	mov	r0, r4
 8039b1c:	f7ff ffbc 	bl	8039a98 <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8039b20:	687b      	ldr	r3, [r7, #4]
 8039b22:	f103 0218 	add.w	r2, r3, #24
 8039b26:	687b      	ldr	r3, [r7, #4]
 8039b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8039b2a:	3304      	adds	r3, #4
 8039b2c:	4619      	mov	r1, r3
 8039b2e:	4610      	mov	r0, r2
 8039b30:	f000 fb11 	bl	803a156 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8039b34:	687b      	ldr	r3, [r7, #4]
 8039b36:	69da      	ldr	r2, [r3, #28]
 8039b38:	687b      	ldr	r3, [r7, #4]
 8039b3a:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8039b3c:	bf00      	nop
 8039b3e:	3708      	adds	r7, #8
 8039b40:	46bd      	mov	sp, r7
 8039b42:	bdb0      	pop	{r4, r5, r7, pc}
 8039b44:	0803dda0 	.word	0x0803dda0

08039b48 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8039b48:	b580      	push	{r7, lr}
 8039b4a:	b082      	sub	sp, #8
 8039b4c:	af00      	add	r7, sp, #0
 8039b4e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8039b50:	6878      	ldr	r0, [r7, #4]
 8039b52:	f000 fb2c 	bl	803a1ae <_ZNSaIjEC1Ev>
 8039b56:	687b      	ldr	r3, [r7, #4]
 8039b58:	4618      	mov	r0, r3
 8039b5a:	f000 fb34 	bl	803a1c6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
	{ }
 8039b5e:	687b      	ldr	r3, [r7, #4]
 8039b60:	4618      	mov	r0, r3
 8039b62:	3708      	adds	r7, #8
 8039b64:	46bd      	mov	sp, r7
 8039b66:	bd80      	pop	{r7, pc}

08039b68 <_ZNSaIjED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8039b68:	b580      	push	{r7, lr}
 8039b6a:	b082      	sub	sp, #8
 8039b6c:	af00      	add	r7, sp, #0
 8039b6e:	6078      	str	r0, [r7, #4]
 8039b70:	6878      	ldr	r0, [r7, #4]
 8039b72:	f000 fb41 	bl	803a1f8 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>
 8039b76:	687b      	ldr	r3, [r7, #4]
 8039b78:	4618      	mov	r0, r3
 8039b7a:	3708      	adds	r7, #8
 8039b7c:	46bd      	mov	sp, r7
 8039b7e:	bd80      	pop	{r7, pc}

08039b80 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8039b80:	b590      	push	{r4, r7, lr}
 8039b82:	b089      	sub	sp, #36	; 0x24
 8039b84:	af00      	add	r7, sp, #0
 8039b86:	6078      	str	r0, [r7, #4]
 8039b88:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8039b8a:	2004      	movs	r0, #4
 8039b8c:	f7fc f9b6 	bl	8035efc <_ZSt16__deque_buf_sizej>
 8039b90:	4602      	mov	r2, r0
 8039b92:	683b      	ldr	r3, [r7, #0]
 8039b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8039b98:	3301      	adds	r3, #1
 8039b9a:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8039b9c:	2308      	movs	r3, #8
 8039b9e:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8039ba0:	69fb      	ldr	r3, [r7, #28]
 8039ba2:	3302      	adds	r3, #2
 8039ba4:	613b      	str	r3, [r7, #16]
 8039ba6:	f107 0210 	add.w	r2, r7, #16
 8039baa:	f107 030c 	add.w	r3, r7, #12
 8039bae:	4611      	mov	r1, r2
 8039bb0:	4618      	mov	r0, r3
 8039bb2:	f000 fb2c 	bl	803a20e <_ZSt3maxIjERKT_S2_S2_>
 8039bb6:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8039bb8:	681a      	ldr	r2, [r3, #0]
 8039bba:	687b      	ldr	r3, [r7, #4]
 8039bbc:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8039bbe:	687b      	ldr	r3, [r7, #4]
 8039bc0:	685b      	ldr	r3, [r3, #4]
 8039bc2:	4619      	mov	r1, r3
 8039bc4:	6878      	ldr	r0, [r7, #4]
 8039bc6:	f000 fb36 	bl	803a236 <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8039bca:	4602      	mov	r2, r0
 8039bcc:	687b      	ldr	r3, [r7, #4]
 8039bce:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8039bd0:	687b      	ldr	r3, [r7, #4]
 8039bd2:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8039bd4:	687b      	ldr	r3, [r7, #4]
 8039bd6:	6859      	ldr	r1, [r3, #4]
 8039bd8:	69fb      	ldr	r3, [r7, #28]
 8039bda:	1acb      	subs	r3, r1, r3
 8039bdc:	085b      	lsrs	r3, r3, #1
 8039bde:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8039be0:	4413      	add	r3, r2
 8039be2:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8039be4:	69fb      	ldr	r3, [r7, #28]
 8039be6:	009b      	lsls	r3, r3, #2
 8039be8:	69ba      	ldr	r2, [r7, #24]
 8039bea:	4413      	add	r3, r2
 8039bec:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8039bee:	697a      	ldr	r2, [r7, #20]
 8039bf0:	69b9      	ldr	r1, [r7, #24]
 8039bf2:	6878      	ldr	r0, [r7, #4]
 8039bf4:	f000 fb3c 	bl	803a270 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8039bf8:	687b      	ldr	r3, [r7, #4]
 8039bfa:	3308      	adds	r3, #8
 8039bfc:	69b9      	ldr	r1, [r7, #24]
 8039bfe:	4618      	mov	r0, r3
 8039c00:	f000 faa9 	bl	803a156 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8039c04:	687b      	ldr	r3, [r7, #4]
 8039c06:	f103 0218 	add.w	r2, r3, #24
 8039c0a:	697b      	ldr	r3, [r7, #20]
 8039c0c:	3b04      	subs	r3, #4
 8039c0e:	4619      	mov	r1, r3
 8039c10:	4610      	mov	r0, r2
 8039c12:	f000 faa0 	bl	803a156 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8039c16:	687b      	ldr	r3, [r7, #4]
 8039c18:	68da      	ldr	r2, [r3, #12]
 8039c1a:	687b      	ldr	r3, [r7, #4]
 8039c1c:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8039c1e:	687b      	ldr	r3, [r7, #4]
 8039c20:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8039c22:	2004      	movs	r0, #4
 8039c24:	f7fc f96a 	bl	8035efc <_ZSt16__deque_buf_sizej>
 8039c28:	4602      	mov	r2, r0
 8039c2a:	683b      	ldr	r3, [r7, #0]
 8039c2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8039c30:	fb01 f202 	mul.w	r2, r1, r2
 8039c34:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8039c36:	009b      	lsls	r3, r3, #2
 8039c38:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8039c3a:	687b      	ldr	r3, [r7, #4]
 8039c3c:	619a      	str	r2, [r3, #24]
    }
 8039c3e:	bf00      	nop
 8039c40:	3724      	adds	r7, #36	; 0x24
 8039c42:	46bd      	mov	sp, r7
 8039c44:	bd90      	pop	{r4, r7, pc}

08039c46 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8039c46:	b580      	push	{r7, lr}
 8039c48:	b086      	sub	sp, #24
 8039c4a:	af00      	add	r7, sp, #0
 8039c4c:	60f8      	str	r0, [r7, #12]
 8039c4e:	60b9      	str	r1, [r7, #8]
 8039c50:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8039c52:	68bb      	ldr	r3, [r7, #8]
 8039c54:	617b      	str	r3, [r7, #20]
 8039c56:	697a      	ldr	r2, [r7, #20]
 8039c58:	687b      	ldr	r3, [r7, #4]
 8039c5a:	429a      	cmp	r2, r3
 8039c5c:	d209      	bcs.n	8039c72 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x2c>
	_M_deallocate_node(*__n);
 8039c5e:	697b      	ldr	r3, [r7, #20]
 8039c60:	681b      	ldr	r3, [r3, #0]
 8039c62:	4619      	mov	r1, r3
 8039c64:	68f8      	ldr	r0, [r7, #12]
 8039c66:	f000 fa8f 	bl	803a188 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8039c6a:	697b      	ldr	r3, [r7, #20]
 8039c6c:	3304      	adds	r3, #4
 8039c6e:	617b      	str	r3, [r7, #20]
 8039c70:	e7f1      	b.n	8039c56 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x10>
    }
 8039c72:	bf00      	nop
 8039c74:	3718      	adds	r7, #24
 8039c76:	46bd      	mov	sp, r7
 8039c78:	bd80      	pop	{r7, pc}

08039c7a <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8039c7a:	b580      	push	{r7, lr}
 8039c7c:	b086      	sub	sp, #24
 8039c7e:	af00      	add	r7, sp, #0
 8039c80:	60f8      	str	r0, [r7, #12]
 8039c82:	60b9      	str	r1, [r7, #8]
 8039c84:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8039c86:	f107 0314 	add.w	r3, r7, #20
 8039c8a:	68f9      	ldr	r1, [r7, #12]
 8039c8c:	4618      	mov	r0, r3
 8039c8e:	f000 fb09 	bl	803a2a4 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8039c92:	f107 0314 	add.w	r3, r7, #20
 8039c96:	687a      	ldr	r2, [r7, #4]
 8039c98:	68b9      	ldr	r1, [r7, #8]
 8039c9a:	4618      	mov	r0, r3
 8039c9c:	f000 fb1f 	bl	803a2de <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8039ca0:	f107 0314 	add.w	r3, r7, #20
 8039ca4:	4618      	mov	r0, r3
 8039ca6:	f000 fb0e 	bl	803a2c6 <_ZNSaIPjED1Ev>
      }
 8039caa:	bf00      	nop
 8039cac:	3718      	adds	r7, #24
 8039cae:	46bd      	mov	sp, r7
 8039cb0:	bd80      	pop	{r7, pc}

08039cb2 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8039cb2:	b480      	push	{r7}
 8039cb4:	b083      	sub	sp, #12
 8039cb6:	af00      	add	r7, sp, #0
 8039cb8:	6078      	str	r0, [r7, #4]
 8039cba:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8039cbc:	687b      	ldr	r3, [r7, #4]
 8039cbe:	681a      	ldr	r2, [r3, #0]
 8039cc0:	683b      	ldr	r3, [r7, #0]
 8039cc2:	681b      	ldr	r3, [r3, #0]
 8039cc4:	429a      	cmp	r2, r3
 8039cc6:	bf0c      	ite	eq
 8039cc8:	2301      	moveq	r3, #1
 8039cca:	2300      	movne	r3, #0
 8039ccc:	b2db      	uxtb	r3, r3
 8039cce:	4618      	mov	r0, r3
 8039cd0:	370c      	adds	r7, #12
 8039cd2:	46bd      	mov	sp, r7
 8039cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039cd8:	4770      	bx	lr

08039cda <_ZNKSt15_Deque_iteratorIjRjPjEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8039cda:	b480      	push	{r7}
 8039cdc:	b083      	sub	sp, #12
 8039cde:	af00      	add	r7, sp, #0
 8039ce0:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8039ce2:	687b      	ldr	r3, [r7, #4]
 8039ce4:	681b      	ldr	r3, [r3, #0]
 8039ce6:	4618      	mov	r0, r3
 8039ce8:	370c      	adds	r7, #12
 8039cea:	46bd      	mov	sp, r7
 8039cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039cf0:	4770      	bx	lr

08039cf2 <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8039cf2:	b580      	push	{r7, lr}
 8039cf4:	b082      	sub	sp, #8
 8039cf6:	af00      	add	r7, sp, #0
 8039cf8:	6078      	str	r0, [r7, #4]
 8039cfa:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8039cfc:	6839      	ldr	r1, [r7, #0]
 8039cfe:	6878      	ldr	r0, [r7, #4]
 8039d00:	f000 fafc 	bl	803a2fc <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>
	}
 8039d04:	bf00      	nop
 8039d06:	3708      	adds	r7, #8
 8039d08:	46bd      	mov	sp, r7
 8039d0a:	bd80      	pop	{r7, pc}

08039d0c <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8039d0c:	b580      	push	{r7, lr}
 8039d0e:	b082      	sub	sp, #8
 8039d10:	af00      	add	r7, sp, #0
 8039d12:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8039d14:	687b      	ldr	r3, [r7, #4]
 8039d16:	4618      	mov	r0, r3
 8039d18:	f7ff fa6c 	bl	80391f4 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8039d1c:	4602      	mov	r2, r0
 8039d1e:	687b      	ldr	r3, [r7, #4]
 8039d20:	689b      	ldr	r3, [r3, #8]
 8039d22:	4619      	mov	r1, r3
 8039d24:	4610      	mov	r0, r2
 8039d26:	f7ff ffe4 	bl	8039cf2 <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8039d2a:	687a      	ldr	r2, [r7, #4]
 8039d2c:	687b      	ldr	r3, [r7, #4]
 8039d2e:	68db      	ldr	r3, [r3, #12]
 8039d30:	4619      	mov	r1, r3
 8039d32:	4610      	mov	r0, r2
 8039d34:	f000 fa28 	bl	803a188 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8039d38:	687b      	ldr	r3, [r7, #4]
 8039d3a:	f103 0208 	add.w	r2, r3, #8
 8039d3e:	687b      	ldr	r3, [r7, #4]
 8039d40:	695b      	ldr	r3, [r3, #20]
 8039d42:	3304      	adds	r3, #4
 8039d44:	4619      	mov	r1, r3
 8039d46:	4610      	mov	r0, r2
 8039d48:	f000 fa05 	bl	803a156 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8039d4c:	687b      	ldr	r3, [r7, #4]
 8039d4e:	68da      	ldr	r2, [r3, #12]
 8039d50:	687b      	ldr	r3, [r7, #4]
 8039d52:	609a      	str	r2, [r3, #8]
    }
 8039d54:	bf00      	nop
 8039d56:	3708      	adds	r7, #8
 8039d58:	46bd      	mov	sp, r7
 8039d5a:	bd80      	pop	{r7, pc}

08039d5c <_ZNSt5dequeIjSaIjEE12emplace_backIJjEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8039d5c:	b5b0      	push	{r4, r5, r7, lr}
 8039d5e:	b082      	sub	sp, #8
 8039d60:	af00      	add	r7, sp, #0
 8039d62:	6078      	str	r0, [r7, #4]
 8039d64:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8039d66:	687b      	ldr	r3, [r7, #4]
 8039d68:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8039d6a:	687b      	ldr	r3, [r7, #4]
 8039d6c:	6a1b      	ldr	r3, [r3, #32]
 8039d6e:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8039d70:	429a      	cmp	r2, r3
 8039d72:	d011      	beq.n	8039d98 <_ZNSt5dequeIjSaIjEE12emplace_backIJjEEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl,
 8039d74:	687c      	ldr	r4, [r7, #4]
 8039d76:	687b      	ldr	r3, [r7, #4]
 8039d78:	699d      	ldr	r5, [r3, #24]
 8039d7a:	6838      	ldr	r0, [r7, #0]
 8039d7c:	f000 fac9 	bl	803a312 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8039d80:	4603      	mov	r3, r0
 8039d82:	461a      	mov	r2, r3
 8039d84:	4629      	mov	r1, r5
 8039d86:	4620      	mov	r0, r4
 8039d88:	f000 face 	bl	803a328 <_ZNSt16allocator_traitsISaIjEE9constructIjJjEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8039d8c:	687b      	ldr	r3, [r7, #4]
 8039d8e:	699b      	ldr	r3, [r3, #24]
 8039d90:	1d1a      	adds	r2, r3, #4
 8039d92:	687b      	ldr	r3, [r7, #4]
 8039d94:	619a      	str	r2, [r3, #24]
      }
 8039d96:	e007      	b.n	8039da8 <_ZNSt5dequeIjSaIjEE12emplace_backIJjEEEvDpOT_+0x4c>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8039d98:	6838      	ldr	r0, [r7, #0]
 8039d9a:	f000 faba 	bl	803a312 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8039d9e:	4603      	mov	r3, r0
 8039da0:	4619      	mov	r1, r3
 8039da2:	6878      	ldr	r0, [r7, #4]
 8039da4:	f000 fad4 	bl	803a350 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJjEEEvDpOT_>
      }
 8039da8:	bf00      	nop
 8039daa:	3708      	adds	r7, #8
 8039dac:	46bd      	mov	sp, r7
 8039dae:	bdb0      	pop	{r4, r5, r7, pc}

08039db0 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8039db0:	b480      	push	{r7}
 8039db2:	b083      	sub	sp, #12
 8039db4:	af00      	add	r7, sp, #0
 8039db6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8039db8:	687b      	ldr	r3, [r7, #4]
 8039dba:	685a      	ldr	r2, [r3, #4]
 8039dbc:	687b      	ldr	r3, [r7, #4]
 8039dbe:	681b      	ldr	r3, [r3, #0]
 8039dc0:	1ad3      	subs	r3, r2, r3
 8039dc2:	111b      	asrs	r3, r3, #4
 8039dc4:	4a04      	ldr	r2, [pc, #16]	; (8039dd8 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE4sizeEv+0x28>)
 8039dc6:	fb02 f303 	mul.w	r3, r2, r3
 8039dca:	4618      	mov	r0, r3
 8039dcc:	370c      	adds	r7, #12
 8039dce:	46bd      	mov	sp, r7
 8039dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039dd4:	4770      	bx	lr
 8039dd6:	bf00      	nop
 8039dd8:	aaaaaaab 	.word	0xaaaaaaab

08039ddc <_ZN9__gnu_cxx13new_allocatorI14StrobeObserverE9constructIS1_JRhRPFvR18MotherboardContextEEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8039ddc:	b5b0      	push	{r4, r5, r7, lr}
 8039dde:	b084      	sub	sp, #16
 8039de0:	af00      	add	r7, sp, #0
 8039de2:	60f8      	str	r0, [r7, #12]
 8039de4:	60b9      	str	r1, [r7, #8]
 8039de6:	607a      	str	r2, [r7, #4]
 8039de8:	603b      	str	r3, [r7, #0]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8039dea:	6878      	ldr	r0, [r7, #4]
 8039dec:	f7ff facf 	bl	803938e <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8039df0:	4603      	mov	r3, r0
 8039df2:	781c      	ldrb	r4, [r3, #0]
 8039df4:	6838      	ldr	r0, [r7, #0]
 8039df6:	f7ff fad5 	bl	80393a4 <_ZSt7forwardIRPFvR18MotherboardContextEEOT_RNSt16remove_referenceIS5_E4typeE>
 8039dfa:	4603      	mov	r3, r0
 8039dfc:	681d      	ldr	r5, [r3, #0]
 8039dfe:	68bb      	ldr	r3, [r7, #8]
 8039e00:	4619      	mov	r1, r3
 8039e02:	2030      	movs	r0, #48	; 0x30
 8039e04:	f7fc f86e 	bl	8035ee4 <_ZnwjPv>
 8039e08:	4603      	mov	r3, r0
 8039e0a:	462a      	mov	r2, r5
 8039e0c:	4621      	mov	r1, r4
 8039e0e:	4618      	mov	r0, r3
 8039e10:	f7fc f9a2 	bl	8036158 <_ZN14StrobeObserverC1EhPFvR18MotherboardContextE>
 8039e14:	bf00      	nop
 8039e16:	3710      	adds	r7, #16
 8039e18:	46bd      	mov	sp, r7
 8039e1a:	bdb0      	pop	{r4, r5, r7, pc}

08039e1c <_ZNKSt6vectorI14StrobeObserverSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8039e1c:	b590      	push	{r4, r7, lr}
 8039e1e:	b087      	sub	sp, #28
 8039e20:	af00      	add	r7, sp, #0
 8039e22:	60f8      	str	r0, [r7, #12]
 8039e24:	60b9      	str	r1, [r7, #8]
 8039e26:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8039e28:	68f8      	ldr	r0, [r7, #12]
 8039e2a:	f000 fad5 	bl	803a3d8 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE8max_sizeEv>
 8039e2e:	4604      	mov	r4, r0
 8039e30:	68f8      	ldr	r0, [r7, #12]
 8039e32:	f7ff ffbd 	bl	8039db0 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE4sizeEv>
 8039e36:	4603      	mov	r3, r0
 8039e38:	1ae2      	subs	r2, r4, r3
 8039e3a:	68bb      	ldr	r3, [r7, #8]
 8039e3c:	429a      	cmp	r2, r3
 8039e3e:	bf34      	ite	cc
 8039e40:	2301      	movcc	r3, #1
 8039e42:	2300      	movcs	r3, #0
 8039e44:	b2db      	uxtb	r3, r3
 8039e46:	2b00      	cmp	r3, #0
 8039e48:	d002      	beq.n	8039e50 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8039e4a:	6878      	ldr	r0, [r7, #4]
 8039e4c:	f001 fddc 	bl	803ba08 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8039e50:	68f8      	ldr	r0, [r7, #12]
 8039e52:	f7ff ffad 	bl	8039db0 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE4sizeEv>
 8039e56:	4604      	mov	r4, r0
 8039e58:	68f8      	ldr	r0, [r7, #12]
 8039e5a:	f7ff ffa9 	bl	8039db0 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE4sizeEv>
 8039e5e:	4603      	mov	r3, r0
 8039e60:	613b      	str	r3, [r7, #16]
 8039e62:	f107 0208 	add.w	r2, r7, #8
 8039e66:	f107 0310 	add.w	r3, r7, #16
 8039e6a:	4611      	mov	r1, r2
 8039e6c:	4618      	mov	r0, r3
 8039e6e:	f000 f9ce 	bl	803a20e <_ZSt3maxIjERKT_S2_S2_>
 8039e72:	4603      	mov	r3, r0
 8039e74:	681b      	ldr	r3, [r3, #0]
 8039e76:	4423      	add	r3, r4
 8039e78:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8039e7a:	68f8      	ldr	r0, [r7, #12]
 8039e7c:	f7ff ff98 	bl	8039db0 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE4sizeEv>
 8039e80:	4602      	mov	r2, r0
 8039e82:	697b      	ldr	r3, [r7, #20]
 8039e84:	4293      	cmp	r3, r2
 8039e86:	d306      	bcc.n	8039e96 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8039e88:	68f8      	ldr	r0, [r7, #12]
 8039e8a:	f000 faa5 	bl	803a3d8 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE8max_sizeEv>
 8039e8e:	4602      	mov	r2, r0
 8039e90:	697b      	ldr	r3, [r7, #20]
 8039e92:	4293      	cmp	r3, r2
 8039e94:	d904      	bls.n	8039ea0 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE12_M_check_lenEjPKc+0x84>
 8039e96:	68f8      	ldr	r0, [r7, #12]
 8039e98:	f000 fa9e 	bl	803a3d8 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE8max_sizeEv>
 8039e9c:	4603      	mov	r3, r0
 8039e9e:	e000      	b.n	8039ea2 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE12_M_check_lenEjPKc+0x86>
 8039ea0:	697b      	ldr	r3, [r7, #20]
      }
 8039ea2:	4618      	mov	r0, r3
 8039ea4:	371c      	adds	r7, #28
 8039ea6:	46bd      	mov	sp, r7
 8039ea8:	bd90      	pop	{r4, r7, pc}
	...

08039eac <_ZN9__gnu_cxxmiIP14StrobeObserverSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8039eac:	b590      	push	{r4, r7, lr}
 8039eae:	b083      	sub	sp, #12
 8039eb0:	af00      	add	r7, sp, #0
 8039eb2:	6078      	str	r0, [r7, #4]
 8039eb4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8039eb6:	6878      	ldr	r0, [r7, #4]
 8039eb8:	f7ff fb8c 	bl	80395d4 <_ZNK9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEE4baseEv>
 8039ebc:	4603      	mov	r3, r0
 8039ebe:	681c      	ldr	r4, [r3, #0]
 8039ec0:	6838      	ldr	r0, [r7, #0]
 8039ec2:	f7ff fb87 	bl	80395d4 <_ZNK9__gnu_cxx17__normal_iteratorIP14StrobeObserverSt6vectorIS1_SaIS1_EEE4baseEv>
 8039ec6:	4603      	mov	r3, r0
 8039ec8:	681b      	ldr	r3, [r3, #0]
 8039eca:	1ae3      	subs	r3, r4, r3
 8039ecc:	111b      	asrs	r3, r3, #4
 8039ece:	4a03      	ldr	r2, [pc, #12]	; (8039edc <_ZN9__gnu_cxxmiIP14StrobeObserverSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8039ed0:	fb02 f303 	mul.w	r3, r2, r3
 8039ed4:	4618      	mov	r0, r3
 8039ed6:	370c      	adds	r7, #12
 8039ed8:	46bd      	mov	sp, r7
 8039eda:	bd90      	pop	{r4, r7, pc}
 8039edc:	aaaaaaab 	.word	0xaaaaaaab

08039ee0 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8039ee0:	b580      	push	{r7, lr}
 8039ee2:	b082      	sub	sp, #8
 8039ee4:	af00      	add	r7, sp, #0
 8039ee6:	6078      	str	r0, [r7, #4]
 8039ee8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8039eea:	683b      	ldr	r3, [r7, #0]
 8039eec:	2b00      	cmp	r3, #0
 8039eee:	d006      	beq.n	8039efe <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE11_M_allocateEj+0x1e>
 8039ef0:	687b      	ldr	r3, [r7, #4]
 8039ef2:	6839      	ldr	r1, [r7, #0]
 8039ef4:	4618      	mov	r0, r3
 8039ef6:	f000 fa80 	bl	803a3fa <_ZNSt16allocator_traitsISaI14StrobeObserverEE8allocateERS1_j>
 8039efa:	4603      	mov	r3, r0
 8039efc:	e000      	b.n	8039f00 <_ZNSt12_Vector_baseI14StrobeObserverSaIS0_EE11_M_allocateEj+0x20>
 8039efe:	2300      	movs	r3, #0
      }
 8039f00:	4618      	mov	r0, r3
 8039f02:	3708      	adds	r7, #8
 8039f04:	46bd      	mov	sp, r7
 8039f06:	bd80      	pop	{r7, pc}

08039f08 <_ZNSt6vectorI14StrobeObserverSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8039f08:	b590      	push	{r4, r7, lr}
 8039f0a:	b087      	sub	sp, #28
 8039f0c:	af02      	add	r7, sp, #8
 8039f0e:	60f8      	str	r0, [r7, #12]
 8039f10:	60b9      	str	r1, [r7, #8]
 8039f12:	607a      	str	r2, [r7, #4]
 8039f14:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8039f16:	f88d 4000 	strb.w	r4, [sp]
 8039f1a:	683b      	ldr	r3, [r7, #0]
 8039f1c:	687a      	ldr	r2, [r7, #4]
 8039f1e:	68b9      	ldr	r1, [r7, #8]
 8039f20:	68f8      	ldr	r0, [r7, #12]
 8039f22:	f000 fa79 	bl	803a418 <_ZNSt6vectorI14StrobeObserverSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb0EE>
 8039f26:	4603      	mov	r3, r0
      }
 8039f28:	4618      	mov	r0, r3
 8039f2a:	3714      	adds	r7, #20
 8039f2c:	46bd      	mov	sp, r7
 8039f2e:	bd90      	pop	{r4, r7, pc}

08039f30 <_ZSt34__uninitialized_move_if_noexcept_aIP14StrobeObserverS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8039f30:	b590      	push	{r4, r7, lr}
 8039f32:	b085      	sub	sp, #20
 8039f34:	af00      	add	r7, sp, #0
 8039f36:	60f8      	str	r0, [r7, #12]
 8039f38:	60b9      	str	r1, [r7, #8]
 8039f3a:	607a      	str	r2, [r7, #4]
 8039f3c:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8039f3e:	68f8      	ldr	r0, [r7, #12]
 8039f40:	f000 fa78 	bl	803a434 <_ZSt32__make_move_if_noexcept_iteratorI14StrobeObserverPKS0_ET0_PT_>
 8039f44:	4604      	mov	r4, r0
 8039f46:	68b8      	ldr	r0, [r7, #8]
 8039f48:	f000 fa74 	bl	803a434 <_ZSt32__make_move_if_noexcept_iteratorI14StrobeObserverPKS0_ET0_PT_>
 8039f4c:	4601      	mov	r1, r0
 8039f4e:	683b      	ldr	r3, [r7, #0]
 8039f50:	687a      	ldr	r2, [r7, #4]
 8039f52:	4620      	mov	r0, r4
 8039f54:	f000 fa79 	bl	803a44a <_ZSt22__uninitialized_copy_aIPK14StrobeObserverPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8039f58:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8039f5a:	4618      	mov	r0, r3
 8039f5c:	3714      	adds	r7, #20
 8039f5e:	46bd      	mov	sp, r7
 8039f60:	bd90      	pop	{r4, r7, pc}

08039f62 <_ZN9__gnu_cxx13new_allocatorI14StrobeObserverEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8039f62:	b480      	push	{r7}
 8039f64:	b083      	sub	sp, #12
 8039f66:	af00      	add	r7, sp, #0
 8039f68:	6078      	str	r0, [r7, #4]
 8039f6a:	687b      	ldr	r3, [r7, #4]
 8039f6c:	4618      	mov	r0, r3
 8039f6e:	370c      	adds	r7, #12
 8039f70:	46bd      	mov	sp, r7
 8039f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039f76:	4770      	bx	lr

08039f78 <_ZNSt16allocator_traitsISaI14StrobeObserverEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8039f78:	b580      	push	{r7, lr}
 8039f7a:	b084      	sub	sp, #16
 8039f7c:	af00      	add	r7, sp, #0
 8039f7e:	60f8      	str	r0, [r7, #12]
 8039f80:	60b9      	str	r1, [r7, #8]
 8039f82:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8039f84:	687a      	ldr	r2, [r7, #4]
 8039f86:	68b9      	ldr	r1, [r7, #8]
 8039f88:	68f8      	ldr	r0, [r7, #12]
 8039f8a:	f000 fa7c 	bl	803a486 <_ZN9__gnu_cxx13new_allocatorI14StrobeObserverE10deallocateEPS1_j>
 8039f8e:	bf00      	nop
 8039f90:	3710      	adds	r7, #16
 8039f92:	46bd      	mov	sp, r7
 8039f94:	bd80      	pop	{r7, pc}

08039f96 <_ZSt8_DestroyIP14StrobeObserverEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8039f96:	b580      	push	{r7, lr}
 8039f98:	b082      	sub	sp, #8
 8039f9a:	af00      	add	r7, sp, #0
 8039f9c:	6078      	str	r0, [r7, #4]
 8039f9e:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8039fa0:	6839      	ldr	r1, [r7, #0]
 8039fa2:	6878      	ldr	r0, [r7, #4]
 8039fa4:	f000 fa82 	bl	803a4ac <_ZNSt12_Destroy_auxILb0EE9__destroyIP14StrobeObserverEEvT_S4_>
    }
 8039fa8:	bf00      	nop
 8039faa:	3708      	adds	r7, #8
 8039fac:	46bd      	mov	sp, r7
 8039fae:	bd80      	pop	{r7, pc}

08039fb0 <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE6HasEltEj>:
	bool HasElt(size_t i) const {
 8039fb0:	b580      	push	{r7, lr}
 8039fb2:	b082      	sub	sp, #8
 8039fb4:	af00      	add	r7, sp, #0
 8039fb6:	6078      	str	r0, [r7, #4]
 8039fb8:	6039      	str	r1, [r7, #0]
		return i < GetSize();
 8039fba:	6878      	ldr	r0, [r7, #4]
 8039fbc:	f7ff fba6 	bl	803970c <_ZNK10FixedQueueIN4Roki8Messages11IMUFrameMsgELj300EE7GetSizeEv>
 8039fc0:	4602      	mov	r2, r0
 8039fc2:	683b      	ldr	r3, [r7, #0]
 8039fc4:	4293      	cmp	r3, r2
 8039fc6:	bf34      	ite	cc
 8039fc8:	2301      	movcc	r3, #1
 8039fca:	2300      	movcs	r3, #0
 8039fcc:	b2db      	uxtb	r3, r3
	}
 8039fce:	4618      	mov	r0, r3
 8039fd0:	3708      	adds	r7, #8
 8039fd2:	46bd      	mov	sp, r7
 8039fd4:	bd80      	pop	{r7, pc}

08039fd6 <_ZNKSt5arrayIN4Roki8Messages11IMUFrameMsgELj300EEixEj>:
      operator[](size_type __n) const noexcept
 8039fd6:	b580      	push	{r7, lr}
 8039fd8:	b082      	sub	sp, #8
 8039fda:	af00      	add	r7, sp, #0
 8039fdc:	6078      	str	r0, [r7, #4]
 8039fde:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8039fe0:	687b      	ldr	r3, [r7, #4]
 8039fe2:	6839      	ldr	r1, [r7, #0]
 8039fe4:	4618      	mov	r0, r3
 8039fe6:	f000 fa79 	bl	803a4dc <_ZNSt14__array_traitsIN4Roki8Messages11IMUFrameMsgELj300EE6_S_refERA300_KS2_j>
 8039fea:	4603      	mov	r3, r0
 8039fec:	4618      	mov	r0, r3
 8039fee:	3708      	adds	r7, #8
 8039ff0:	46bd      	mov	sp, r7
 8039ff2:	bd80      	pop	{r7, pc}

08039ff4 <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE6HasEltEj>:
	bool HasElt(size_t i) const {
 8039ff4:	b580      	push	{r7, lr}
 8039ff6:	b082      	sub	sp, #8
 8039ff8:	af00      	add	r7, sp, #0
 8039ffa:	6078      	str	r0, [r7, #4]
 8039ffc:	6039      	str	r1, [r7, #0]
		return i < GetSize();
 8039ffe:	6878      	ldr	r0, [r7, #4]
 803a000:	f7ff fbd3 	bl	80397aa <_ZNK10FixedQueueIN11FrameQueues12BodyResponceELj300EE7GetSizeEv>
 803a004:	4602      	mov	r2, r0
 803a006:	683b      	ldr	r3, [r7, #0]
 803a008:	4293      	cmp	r3, r2
 803a00a:	bf34      	ite	cc
 803a00c:	2301      	movcc	r3, #1
 803a00e:	2300      	movcs	r3, #0
 803a010:	b2db      	uxtb	r3, r3
	}
 803a012:	4618      	mov	r0, r3
 803a014:	3708      	adds	r7, #8
 803a016:	46bd      	mov	sp, r7
 803a018:	bd80      	pop	{r7, pc}

0803a01a <_ZNKSt5arrayIN11FrameQueues12BodyResponceELj300EEixEj>:
      operator[](size_type __n) const noexcept
 803a01a:	b580      	push	{r7, lr}
 803a01c:	b082      	sub	sp, #8
 803a01e:	af00      	add	r7, sp, #0
 803a020:	6078      	str	r0, [r7, #4]
 803a022:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 803a024:	687b      	ldr	r3, [r7, #4]
 803a026:	6839      	ldr	r1, [r7, #0]
 803a028:	4618      	mov	r0, r3
 803a02a:	f000 fa69 	bl	803a500 <_ZNSt14__array_traitsIN11FrameQueues12BodyResponceELj300EE6_S_refERA300_KS1_j>
 803a02e:	4603      	mov	r3, r0
 803a030:	4618      	mov	r0, r3
 803a032:	3708      	adds	r7, #8
 803a034:	46bd      	mov	sp, r7
 803a036:	bd80      	pop	{r7, pc}

0803a038 <_ZNSt5arrayIN11FrameQueues12BodyResponceELj300EEixEj>:
      operator[](size_type __n) noexcept
 803a038:	b580      	push	{r7, lr}
 803a03a:	b082      	sub	sp, #8
 803a03c:	af00      	add	r7, sp, #0
 803a03e:	6078      	str	r0, [r7, #4]
 803a040:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 803a042:	687b      	ldr	r3, [r7, #4]
 803a044:	6839      	ldr	r1, [r7, #0]
 803a046:	4618      	mov	r0, r3
 803a048:	f000 fa5a 	bl	803a500 <_ZNSt14__array_traitsIN11FrameQueues12BodyResponceELj300EE6_S_refERA300_KS1_j>
 803a04c:	4603      	mov	r3, r0
 803a04e:	4618      	mov	r0, r3
 803a050:	3708      	adds	r7, #8
 803a052:	46bd      	mov	sp, r7
 803a054:	bd80      	pop	{r7, pc}

0803a056 <_ZNSt5arrayIN4Roki8Messages11IMUFrameMsgELj300EEixEj>:
      operator[](size_type __n) noexcept
 803a056:	b580      	push	{r7, lr}
 803a058:	b082      	sub	sp, #8
 803a05a:	af00      	add	r7, sp, #0
 803a05c:	6078      	str	r0, [r7, #4]
 803a05e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 803a060:	687b      	ldr	r3, [r7, #4]
 803a062:	6839      	ldr	r1, [r7, #0]
 803a064:	4618      	mov	r0, r3
 803a066:	f000 fa39 	bl	803a4dc <_ZNSt14__array_traitsIN4Roki8Messages11IMUFrameMsgELj300EE6_S_refERA300_KS2_j>
 803a06a:	4603      	mov	r3, r0
 803a06c:	4618      	mov	r0, r3
 803a06e:	3708      	adds	r7, #8
 803a070:	46bd      	mov	sp, r7
 803a072:	bd80      	pop	{r7, pc}

0803a074 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 803a074:	b480      	push	{r7}
 803a076:	b083      	sub	sp, #12
 803a078:	af00      	add	r7, sp, #0
 803a07a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 803a07c:	687b      	ldr	r3, [r7, #4]
 803a07e:	4618      	mov	r0, r3
 803a080:	370c      	adds	r7, #12
 803a082:	46bd      	mov	sp, r7
 803a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a088:	4770      	bx	lr

0803a08a <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 803a08a:	b590      	push	{r4, r7, lr}
 803a08c:	b085      	sub	sp, #20
 803a08e:	af00      	add	r7, sp, #0
 803a090:	60f8      	str	r0, [r7, #12]
 803a092:	60b9      	str	r1, [r7, #8]
 803a094:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 803a096:	6878      	ldr	r0, [r7, #4]
 803a098:	f7ff ffec 	bl	803a074 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 803a09c:	4603      	mov	r3, r0
 803a09e:	681c      	ldr	r4, [r3, #0]
 803a0a0:	68bb      	ldr	r3, [r7, #8]
 803a0a2:	4619      	mov	r1, r3
 803a0a4:	2004      	movs	r0, #4
 803a0a6:	f7fb ff1d 	bl	8035ee4 <_ZnwjPv>
 803a0aa:	4603      	mov	r3, r0
 803a0ac:	601c      	str	r4, [r3, #0]
 803a0ae:	bf00      	nop
 803a0b0:	3714      	adds	r7, #20
 803a0b2:	46bd      	mov	sp, r7
 803a0b4:	bd90      	pop	{r4, r7, pc}

0803a0b6 <_ZNKSt5dequeIjSaIjEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 803a0b6:	b580      	push	{r7, lr}
 803a0b8:	b082      	sub	sp, #8
 803a0ba:	af00      	add	r7, sp, #0
 803a0bc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 803a0be:	687b      	ldr	r3, [r7, #4]
 803a0c0:	f103 0218 	add.w	r2, r3, #24
 803a0c4:	687b      	ldr	r3, [r7, #4]
 803a0c6:	3308      	adds	r3, #8
 803a0c8:	4619      	mov	r1, r3
 803a0ca:	4610      	mov	r0, r2
 803a0cc:	f000 fa2a 	bl	803a524 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>
 803a0d0:	4603      	mov	r3, r0
 803a0d2:	4618      	mov	r0, r3
 803a0d4:	3708      	adds	r7, #8
 803a0d6:	46bd      	mov	sp, r7
 803a0d8:	bd80      	pop	{r7, pc}

0803a0da <_ZNKSt5dequeIjSaIjEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 803a0da:	b580      	push	{r7, lr}
 803a0dc:	b082      	sub	sp, #8
 803a0de:	af00      	add	r7, sp, #0
 803a0e0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 803a0e2:	687b      	ldr	r3, [r7, #4]
 803a0e4:	4618      	mov	r0, r3
 803a0e6:	f000 fa5b 	bl	803a5a0 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 803a0ea:	4603      	mov	r3, r0
 803a0ec:	4618      	mov	r0, r3
 803a0ee:	f000 fa3d 	bl	803a56c <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>
 803a0f2:	4603      	mov	r3, r0
 803a0f4:	4618      	mov	r0, r3
 803a0f6:	3708      	adds	r7, #8
 803a0f8:	46bd      	mov	sp, r7
 803a0fa:	bd80      	pop	{r7, pc}

0803a0fc <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 803a0fc:	b580      	push	{r7, lr}
 803a0fe:	b082      	sub	sp, #8
 803a100:	af00      	add	r7, sp, #0
 803a102:	6078      	str	r0, [r7, #4]
 803a104:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 803a106:	683b      	ldr	r3, [r7, #0]
 803a108:	1c5a      	adds	r2, r3, #1
 803a10a:	687b      	ldr	r3, [r7, #4]
 803a10c:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 803a10e:	6879      	ldr	r1, [r7, #4]
 803a110:	6a48      	ldr	r0, [r1, #36]	; 0x24
 803a112:	6879      	ldr	r1, [r7, #4]
 803a114:	6809      	ldr	r1, [r1, #0]
 803a116:	1a41      	subs	r1, r0, r1
 803a118:	1089      	asrs	r1, r1, #2
 803a11a:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 803a11c:	429a      	cmp	r2, r3
 803a11e:	d904      	bls.n	803a12a <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 803a120:	2200      	movs	r2, #0
 803a122:	6839      	ldr	r1, [r7, #0]
 803a124:	6878      	ldr	r0, [r7, #4]
 803a126:	f000 fa46 	bl	803a5b6 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>
      }
 803a12a:	bf00      	nop
 803a12c:	3708      	adds	r7, #8
 803a12e:	46bd      	mov	sp, r7
 803a130:	bd80      	pop	{r7, pc}

0803a132 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 803a132:	b590      	push	{r4, r7, lr}
 803a134:	b083      	sub	sp, #12
 803a136:	af00      	add	r7, sp, #0
 803a138:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 803a13a:	687c      	ldr	r4, [r7, #4]
 803a13c:	2004      	movs	r0, #4
 803a13e:	f7fb fedd 	bl	8035efc <_ZSt16__deque_buf_sizej>
 803a142:	4603      	mov	r3, r0
 803a144:	4619      	mov	r1, r3
 803a146:	4620      	mov	r0, r4
 803a148:	f000 facf 	bl	803a6ea <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>
 803a14c:	4603      	mov	r3, r0
      }
 803a14e:	4618      	mov	r0, r3
 803a150:	370c      	adds	r7, #12
 803a152:	46bd      	mov	sp, r7
 803a154:	bd90      	pop	{r4, r7, pc}

0803a156 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 803a156:	b590      	push	{r4, r7, lr}
 803a158:	b083      	sub	sp, #12
 803a15a:	af00      	add	r7, sp, #0
 803a15c:	6078      	str	r0, [r7, #4]
 803a15e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 803a160:	687b      	ldr	r3, [r7, #4]
 803a162:	683a      	ldr	r2, [r7, #0]
 803a164:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 803a166:	683b      	ldr	r3, [r7, #0]
 803a168:	681a      	ldr	r2, [r3, #0]
 803a16a:	687b      	ldr	r3, [r7, #4]
 803a16c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 803a16e:	687b      	ldr	r3, [r7, #4]
 803a170:	685c      	ldr	r4, [r3, #4]
 803a172:	f000 fac9 	bl	803a708 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 803a176:	4603      	mov	r3, r0
 803a178:	009b      	lsls	r3, r3, #2
 803a17a:	18e2      	adds	r2, r4, r3
 803a17c:	687b      	ldr	r3, [r7, #4]
 803a17e:	609a      	str	r2, [r3, #8]
      }
 803a180:	bf00      	nop
 803a182:	370c      	adds	r7, #12
 803a184:	46bd      	mov	sp, r7
 803a186:	bd90      	pop	{r4, r7, pc}

0803a188 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 803a188:	b590      	push	{r4, r7, lr}
 803a18a:	b083      	sub	sp, #12
 803a18c:	af00      	add	r7, sp, #0
 803a18e:	6078      	str	r0, [r7, #4]
 803a190:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 803a192:	687c      	ldr	r4, [r7, #4]
 803a194:	2004      	movs	r0, #4
 803a196:	f7fb feb1 	bl	8035efc <_ZSt16__deque_buf_sizej>
 803a19a:	4603      	mov	r3, r0
 803a19c:	461a      	mov	r2, r3
 803a19e:	6839      	ldr	r1, [r7, #0]
 803a1a0:	4620      	mov	r0, r4
 803a1a2:	f000 fab9 	bl	803a718 <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>
      }
 803a1a6:	bf00      	nop
 803a1a8:	370c      	adds	r7, #12
 803a1aa:	46bd      	mov	sp, r7
 803a1ac:	bd90      	pop	{r4, r7, pc}

0803a1ae <_ZNSaIjEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 803a1ae:	b580      	push	{r7, lr}
 803a1b0:	b082      	sub	sp, #8
 803a1b2:	af00      	add	r7, sp, #0
 803a1b4:	6078      	str	r0, [r7, #4]
 803a1b6:	6878      	ldr	r0, [r7, #4]
 803a1b8:	f000 fabd 	bl	803a736 <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>
 803a1bc:	687b      	ldr	r3, [r7, #4]
 803a1be:	4618      	mov	r0, r3
 803a1c0:	3708      	adds	r7, #8
 803a1c2:	46bd      	mov	sp, r7
 803a1c4:	bd80      	pop	{r7, pc}

0803a1c6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 803a1c6:	b580      	push	{r7, lr}
 803a1c8:	b082      	sub	sp, #8
 803a1ca:	af00      	add	r7, sp, #0
 803a1cc:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 803a1ce:	687b      	ldr	r3, [r7, #4]
 803a1d0:	2200      	movs	r2, #0
 803a1d2:	601a      	str	r2, [r3, #0]
 803a1d4:	687b      	ldr	r3, [r7, #4]
 803a1d6:	2200      	movs	r2, #0
 803a1d8:	605a      	str	r2, [r3, #4]
 803a1da:	687b      	ldr	r3, [r7, #4]
 803a1dc:	3308      	adds	r3, #8
 803a1de:	4618      	mov	r0, r3
 803a1e0:	f000 fab4 	bl	803a74c <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
 803a1e4:	687b      	ldr	r3, [r7, #4]
 803a1e6:	3318      	adds	r3, #24
 803a1e8:	4618      	mov	r0, r3
 803a1ea:	f000 faaf 	bl	803a74c <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
	{ }
 803a1ee:	687b      	ldr	r3, [r7, #4]
 803a1f0:	4618      	mov	r0, r3
 803a1f2:	3708      	adds	r7, #8
 803a1f4:	46bd      	mov	sp, r7
 803a1f6:	bd80      	pop	{r7, pc}

0803a1f8 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 803a1f8:	b480      	push	{r7}
 803a1fa:	b083      	sub	sp, #12
 803a1fc:	af00      	add	r7, sp, #0
 803a1fe:	6078      	str	r0, [r7, #4]
 803a200:	687b      	ldr	r3, [r7, #4]
 803a202:	4618      	mov	r0, r3
 803a204:	370c      	adds	r7, #12
 803a206:	46bd      	mov	sp, r7
 803a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a20c:	4770      	bx	lr

0803a20e <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 803a20e:	b480      	push	{r7}
 803a210:	b083      	sub	sp, #12
 803a212:	af00      	add	r7, sp, #0
 803a214:	6078      	str	r0, [r7, #4]
 803a216:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 803a218:	687b      	ldr	r3, [r7, #4]
 803a21a:	681a      	ldr	r2, [r3, #0]
 803a21c:	683b      	ldr	r3, [r7, #0]
 803a21e:	681b      	ldr	r3, [r3, #0]
 803a220:	429a      	cmp	r2, r3
 803a222:	d201      	bcs.n	803a228 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 803a224:	683b      	ldr	r3, [r7, #0]
 803a226:	e000      	b.n	803a22a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 803a228:	687b      	ldr	r3, [r7, #4]
    }
 803a22a:	4618      	mov	r0, r3
 803a22c:	370c      	adds	r7, #12
 803a22e:	46bd      	mov	sp, r7
 803a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a234:	4770      	bx	lr

0803a236 <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 803a236:	b590      	push	{r4, r7, lr}
 803a238:	b085      	sub	sp, #20
 803a23a:	af00      	add	r7, sp, #0
 803a23c:	6078      	str	r0, [r7, #4]
 803a23e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 803a240:	f107 030c 	add.w	r3, r7, #12
 803a244:	6879      	ldr	r1, [r7, #4]
 803a246:	4618      	mov	r0, r3
 803a248:	f000 f82c 	bl	803a2a4 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 803a24c:	f107 030c 	add.w	r3, r7, #12
 803a250:	6839      	ldr	r1, [r7, #0]
 803a252:	4618      	mov	r0, r3
 803a254:	f000 fa91 	bl	803a77a <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>
 803a258:	4604      	mov	r4, r0
 803a25a:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 803a25c:	f107 030c 	add.w	r3, r7, #12
 803a260:	4618      	mov	r0, r3
 803a262:	f000 f830 	bl	803a2c6 <_ZNSaIPjED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 803a266:	4623      	mov	r3, r4
      }
 803a268:	4618      	mov	r0, r3
 803a26a:	3714      	adds	r7, #20
 803a26c:	46bd      	mov	sp, r7
 803a26e:	bd90      	pop	{r4, r7, pc}

0803a270 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 803a270:	b580      	push	{r7, lr}
 803a272:	b086      	sub	sp, #24
 803a274:	af00      	add	r7, sp, #0
 803a276:	60f8      	str	r0, [r7, #12]
 803a278:	60b9      	str	r1, [r7, #8]
 803a27a:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 803a27c:	68bb      	ldr	r3, [r7, #8]
 803a27e:	617b      	str	r3, [r7, #20]
 803a280:	697a      	ldr	r2, [r7, #20]
 803a282:	687b      	ldr	r3, [r7, #4]
 803a284:	429a      	cmp	r2, r3
 803a286:	d209      	bcs.n	803a29c <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 803a288:	68f8      	ldr	r0, [r7, #12]
 803a28a:	f7ff ff52 	bl	803a132 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 803a28e:	4602      	mov	r2, r0
 803a290:	697b      	ldr	r3, [r7, #20]
 803a292:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 803a294:	697b      	ldr	r3, [r7, #20]
 803a296:	3304      	adds	r3, #4
 803a298:	617b      	str	r3, [r7, #20]
 803a29a:	e7f1      	b.n	803a280 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x10>
    }
 803a29c:	bf00      	nop
 803a29e:	3718      	adds	r7, #24
 803a2a0:	46bd      	mov	sp, r7
 803a2a2:	bd80      	pop	{r7, pc}

0803a2a4 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 803a2a4:	b580      	push	{r7, lr}
 803a2a6:	b082      	sub	sp, #8
 803a2a8:	af00      	add	r7, sp, #0
 803a2aa:	6078      	str	r0, [r7, #4]
 803a2ac:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 803a2ae:	6838      	ldr	r0, [r7, #0]
 803a2b0:	f000 f976 	bl	803a5a0 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 803a2b4:	4603      	mov	r3, r0
 803a2b6:	4619      	mov	r1, r3
 803a2b8:	6878      	ldr	r0, [r7, #4]
 803a2ba:	f000 fa6d 	bl	803a798 <_ZNSaIPjEC1IjEERKSaIT_E>
 803a2be:	6878      	ldr	r0, [r7, #4]
 803a2c0:	3708      	adds	r7, #8
 803a2c2:	46bd      	mov	sp, r7
 803a2c4:	bd80      	pop	{r7, pc}

0803a2c6 <_ZNSaIPjED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 803a2c6:	b580      	push	{r7, lr}
 803a2c8:	b082      	sub	sp, #8
 803a2ca:	af00      	add	r7, sp, #0
 803a2cc:	6078      	str	r0, [r7, #4]
 803a2ce:	6878      	ldr	r0, [r7, #4]
 803a2d0:	f000 fa6f 	bl	803a7b2 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>
 803a2d4:	687b      	ldr	r3, [r7, #4]
 803a2d6:	4618      	mov	r0, r3
 803a2d8:	3708      	adds	r7, #8
 803a2da:	46bd      	mov	sp, r7
 803a2dc:	bd80      	pop	{r7, pc}

0803a2de <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 803a2de:	b580      	push	{r7, lr}
 803a2e0:	b084      	sub	sp, #16
 803a2e2:	af00      	add	r7, sp, #0
 803a2e4:	60f8      	str	r0, [r7, #12]
 803a2e6:	60b9      	str	r1, [r7, #8]
 803a2e8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 803a2ea:	687a      	ldr	r2, [r7, #4]
 803a2ec:	68b9      	ldr	r1, [r7, #8]
 803a2ee:	68f8      	ldr	r0, [r7, #12]
 803a2f0:	f000 fa6a 	bl	803a7c8 <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>
 803a2f4:	bf00      	nop
 803a2f6:	3710      	adds	r7, #16
 803a2f8:	46bd      	mov	sp, r7
 803a2fa:	bd80      	pop	{r7, pc}

0803a2fc <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 803a2fc:	b480      	push	{r7}
 803a2fe:	b083      	sub	sp, #12
 803a300:	af00      	add	r7, sp, #0
 803a302:	6078      	str	r0, [r7, #4]
 803a304:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 803a306:	bf00      	nop
 803a308:	370c      	adds	r7, #12
 803a30a:	46bd      	mov	sp, r7
 803a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a310:	4770      	bx	lr

0803a312 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 803a312:	b480      	push	{r7}
 803a314:	b083      	sub	sp, #12
 803a316:	af00      	add	r7, sp, #0
 803a318:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 803a31a:	687b      	ldr	r3, [r7, #4]
 803a31c:	4618      	mov	r0, r3
 803a31e:	370c      	adds	r7, #12
 803a320:	46bd      	mov	sp, r7
 803a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a326:	4770      	bx	lr

0803a328 <_ZNSt16allocator_traitsISaIjEE9constructIjJjEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 803a328:	b580      	push	{r7, lr}
 803a32a:	b084      	sub	sp, #16
 803a32c:	af00      	add	r7, sp, #0
 803a32e:	60f8      	str	r0, [r7, #12]
 803a330:	60b9      	str	r1, [r7, #8]
 803a332:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 803a334:	6878      	ldr	r0, [r7, #4]
 803a336:	f7ff ffec 	bl	803a312 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 803a33a:	4603      	mov	r3, r0
 803a33c:	461a      	mov	r2, r3
 803a33e:	68b9      	ldr	r1, [r7, #8]
 803a340:	68f8      	ldr	r0, [r7, #12]
 803a342:	f000 fa51 	bl	803a7e8 <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJjEEEvPT_DpOT0_>
	}
 803a346:	bf00      	nop
 803a348:	3710      	adds	r7, #16
 803a34a:	46bd      	mov	sp, r7
 803a34c:	bd80      	pop	{r7, pc}
	...

0803a350 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJjEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 803a350:	b5b0      	push	{r4, r5, r7, lr}
 803a352:	b082      	sub	sp, #8
 803a354:	af00      	add	r7, sp, #0
 803a356:	6078      	str	r0, [r7, #4]
 803a358:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 803a35a:	6878      	ldr	r0, [r7, #4]
 803a35c:	f7ff feab 	bl	803a0b6 <_ZNKSt5dequeIjSaIjEE4sizeEv>
 803a360:	4604      	mov	r4, r0
 803a362:	6878      	ldr	r0, [r7, #4]
 803a364:	f7ff feb9 	bl	803a0da <_ZNKSt5dequeIjSaIjEE8max_sizeEv>
 803a368:	4603      	mov	r3, r0
 803a36a:	429c      	cmp	r4, r3
 803a36c:	bf0c      	ite	eq
 803a36e:	2301      	moveq	r3, #1
 803a370:	2300      	movne	r3, #0
 803a372:	b2db      	uxtb	r3, r3
 803a374:	2b00      	cmp	r3, #0
 803a376:	d002      	beq.n	803a37e <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJjEEEvDpOT_+0x2e>
	  __throw_length_error(
 803a378:	4816      	ldr	r0, [pc, #88]	; (803a3d4 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJjEEEvDpOT_+0x84>)
 803a37a:	f001 fb45 	bl	803ba08 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 803a37e:	2101      	movs	r1, #1
 803a380:	6878      	ldr	r0, [r7, #4]
 803a382:	f7ff febb 	bl	803a0fc <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 803a386:	687a      	ldr	r2, [r7, #4]
 803a388:	687b      	ldr	r3, [r7, #4]
 803a38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a38c:	1d1c      	adds	r4, r3, #4
 803a38e:	4610      	mov	r0, r2
 803a390:	f7ff fecf 	bl	803a132 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 803a394:	4603      	mov	r3, r0
 803a396:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 803a398:	687c      	ldr	r4, [r7, #4]
 803a39a:	687b      	ldr	r3, [r7, #4]
 803a39c:	699d      	ldr	r5, [r3, #24]
 803a39e:	6838      	ldr	r0, [r7, #0]
 803a3a0:	f7ff ffb7 	bl	803a312 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 803a3a4:	4603      	mov	r3, r0
 803a3a6:	461a      	mov	r2, r3
 803a3a8:	4629      	mov	r1, r5
 803a3aa:	4620      	mov	r0, r4
 803a3ac:	f7ff ffbc 	bl	803a328 <_ZNSt16allocator_traitsISaIjEE9constructIjJjEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 803a3b0:	687b      	ldr	r3, [r7, #4]
 803a3b2:	f103 0218 	add.w	r2, r3, #24
 803a3b6:	687b      	ldr	r3, [r7, #4]
 803a3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a3ba:	3304      	adds	r3, #4
 803a3bc:	4619      	mov	r1, r3
 803a3be:	4610      	mov	r0, r2
 803a3c0:	f7ff fec9 	bl	803a156 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 803a3c4:	687b      	ldr	r3, [r7, #4]
 803a3c6:	69da      	ldr	r2, [r3, #28]
 803a3c8:	687b      	ldr	r3, [r7, #4]
 803a3ca:	619a      	str	r2, [r3, #24]
      }
 803a3cc:	bf00      	nop
 803a3ce:	3708      	adds	r7, #8
 803a3d0:	46bd      	mov	sp, r7
 803a3d2:	bdb0      	pop	{r4, r5, r7, pc}
 803a3d4:	0803dda0 	.word	0x0803dda0

0803a3d8 <_ZNKSt6vectorI14StrobeObserverSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 803a3d8:	b580      	push	{r7, lr}
 803a3da:	b082      	sub	sp, #8
 803a3dc:	af00      	add	r7, sp, #0
 803a3de:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 803a3e0:	687b      	ldr	r3, [r7, #4]
 803a3e2:	4618      	mov	r0, r3
 803a3e4:	f000 fa32 	bl	803a84c <_ZNKSt12_Vector_baseI14StrobeObserverSaIS0_EE19_M_get_Tp_allocatorEv>
 803a3e8:	4603      	mov	r3, r0
 803a3ea:	4618      	mov	r0, r3
 803a3ec:	f000 fa12 	bl	803a814 <_ZNSt6vectorI14StrobeObserverSaIS0_EE11_S_max_sizeERKS1_>
 803a3f0:	4603      	mov	r3, r0
 803a3f2:	4618      	mov	r0, r3
 803a3f4:	3708      	adds	r7, #8
 803a3f6:	46bd      	mov	sp, r7
 803a3f8:	bd80      	pop	{r7, pc}

0803a3fa <_ZNSt16allocator_traitsISaI14StrobeObserverEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 803a3fa:	b580      	push	{r7, lr}
 803a3fc:	b082      	sub	sp, #8
 803a3fe:	af00      	add	r7, sp, #0
 803a400:	6078      	str	r0, [r7, #4]
 803a402:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 803a404:	2200      	movs	r2, #0
 803a406:	6839      	ldr	r1, [r7, #0]
 803a408:	6878      	ldr	r0, [r7, #4]
 803a40a:	f000 fa2a 	bl	803a862 <_ZN9__gnu_cxx13new_allocatorI14StrobeObserverE8allocateEjPKv>
 803a40e:	4603      	mov	r3, r0
 803a410:	4618      	mov	r0, r3
 803a412:	3708      	adds	r7, #8
 803a414:	46bd      	mov	sp, r7
 803a416:	bd80      	pop	{r7, pc}

0803a418 <_ZNSt6vectorI14StrobeObserverSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb0EE>:
      _S_do_relocate(pointer, pointer, pointer __result,
 803a418:	b480      	push	{r7}
 803a41a:	b085      	sub	sp, #20
 803a41c:	af00      	add	r7, sp, #0
 803a41e:	60f8      	str	r0, [r7, #12]
 803a420:	60b9      	str	r1, [r7, #8]
 803a422:	607a      	str	r2, [r7, #4]
 803a424:	603b      	str	r3, [r7, #0]
      { return __result; }
 803a426:	687b      	ldr	r3, [r7, #4]
 803a428:	4618      	mov	r0, r3
 803a42a:	3714      	adds	r7, #20
 803a42c:	46bd      	mov	sp, r7
 803a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a432:	4770      	bx	lr

0803a434 <_ZSt32__make_move_if_noexcept_iteratorI14StrobeObserverPKS0_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 803a434:	b480      	push	{r7}
 803a436:	b083      	sub	sp, #12
 803a438:	af00      	add	r7, sp, #0
 803a43a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 803a43c:	687b      	ldr	r3, [r7, #4]
 803a43e:	4618      	mov	r0, r3
 803a440:	370c      	adds	r7, #12
 803a442:	46bd      	mov	sp, r7
 803a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a448:	4770      	bx	lr

0803a44a <_ZSt22__uninitialized_copy_aIPK14StrobeObserverPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 803a44a:	b580      	push	{r7, lr}
 803a44c:	b084      	sub	sp, #16
 803a44e:	af00      	add	r7, sp, #0
 803a450:	60f8      	str	r0, [r7, #12]
 803a452:	60b9      	str	r1, [r7, #8]
 803a454:	607a      	str	r2, [r7, #4]
 803a456:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 803a458:	687a      	ldr	r2, [r7, #4]
 803a45a:	68b9      	ldr	r1, [r7, #8]
 803a45c:	68f8      	ldr	r0, [r7, #12]
 803a45e:	f000 fa21 	bl	803a8a4 <_ZSt18uninitialized_copyIPK14StrobeObserverPS0_ET0_T_S5_S4_>
 803a462:	4603      	mov	r3, r0
 803a464:	4618      	mov	r0, r3
 803a466:	3710      	adds	r7, #16
 803a468:	46bd      	mov	sp, r7
 803a46a:	bd80      	pop	{r7, pc}

0803a46c <_ZN14StrobeObserverD1Ev>:
struct StrobeObserver {
 803a46c:	b580      	push	{r7, lr}
 803a46e:	b082      	sub	sp, #8
 803a470:	af00      	add	r7, sp, #0
 803a472:	6078      	str	r0, [r7, #4]
 803a474:	687b      	ldr	r3, [r7, #4]
 803a476:	4618      	mov	r0, r3
 803a478:	f7fb fdbc 	bl	8035ff4 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>
 803a47c:	687b      	ldr	r3, [r7, #4]
 803a47e:	4618      	mov	r0, r3
 803a480:	3708      	adds	r7, #8
 803a482:	46bd      	mov	sp, r7
 803a484:	bd80      	pop	{r7, pc}

0803a486 <_ZN9__gnu_cxx13new_allocatorI14StrobeObserverE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 803a486:	b580      	push	{r7, lr}
 803a488:	b084      	sub	sp, #16
 803a48a:	af00      	add	r7, sp, #0
 803a48c:	60f8      	str	r0, [r7, #12]
 803a48e:	60b9      	str	r1, [r7, #8]
 803a490:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 803a492:	687a      	ldr	r2, [r7, #4]
 803a494:	4613      	mov	r3, r2
 803a496:	005b      	lsls	r3, r3, #1
 803a498:	4413      	add	r3, r2
 803a49a:	011b      	lsls	r3, r3, #4
 803a49c:	4619      	mov	r1, r3
 803a49e:	68b8      	ldr	r0, [r7, #8]
 803a4a0:	f001 fa99 	bl	803b9d6 <_ZdlPvj>
      }
 803a4a4:	bf00      	nop
 803a4a6:	3710      	adds	r7, #16
 803a4a8:	46bd      	mov	sp, r7
 803a4aa:	bd80      	pop	{r7, pc}

0803a4ac <_ZNSt12_Destroy_auxILb0EE9__destroyIP14StrobeObserverEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 803a4ac:	b580      	push	{r7, lr}
 803a4ae:	b082      	sub	sp, #8
 803a4b0:	af00      	add	r7, sp, #0
 803a4b2:	6078      	str	r0, [r7, #4]
 803a4b4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 803a4b6:	687a      	ldr	r2, [r7, #4]
 803a4b8:	683b      	ldr	r3, [r7, #0]
 803a4ba:	429a      	cmp	r2, r3
 803a4bc:	d00a      	beq.n	803a4d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIP14StrobeObserverEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 803a4be:	6878      	ldr	r0, [r7, #4]
 803a4c0:	f000 fa02 	bl	803a8c8 <_ZSt11__addressofI14StrobeObserverEPT_RS1_>
 803a4c4:	4603      	mov	r3, r0
 803a4c6:	4618      	mov	r0, r3
 803a4c8:	f000 fa09 	bl	803a8de <_ZSt8_DestroyI14StrobeObserverEvPT_>
	  for (; __first != __last; ++__first)
 803a4cc:	687b      	ldr	r3, [r7, #4]
 803a4ce:	3330      	adds	r3, #48	; 0x30
 803a4d0:	607b      	str	r3, [r7, #4]
 803a4d2:	e7f0      	b.n	803a4b6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP14StrobeObserverEEvT_S4_+0xa>
	}
 803a4d4:	bf00      	nop
 803a4d6:	3708      	adds	r7, #8
 803a4d8:	46bd      	mov	sp, r7
 803a4da:	bd80      	pop	{r7, pc}

0803a4dc <_ZNSt14__array_traitsIN4Roki8Messages11IMUFrameMsgELj300EE6_S_refERA300_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 803a4dc:	b480      	push	{r7}
 803a4de:	b083      	sub	sp, #12
 803a4e0:	af00      	add	r7, sp, #0
 803a4e2:	6078      	str	r0, [r7, #4]
 803a4e4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 803a4e6:	683a      	ldr	r2, [r7, #0]
 803a4e8:	4613      	mov	r3, r2
 803a4ea:	009b      	lsls	r3, r3, #2
 803a4ec:	4413      	add	r3, r2
 803a4ee:	009b      	lsls	r3, r3, #2
 803a4f0:	687a      	ldr	r2, [r7, #4]
 803a4f2:	4413      	add	r3, r2
 803a4f4:	4618      	mov	r0, r3
 803a4f6:	370c      	adds	r7, #12
 803a4f8:	46bd      	mov	sp, r7
 803a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a4fe:	4770      	bx	lr

0803a500 <_ZNSt14__array_traitsIN11FrameQueues12BodyResponceELj300EE6_S_refERA300_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 803a500:	b480      	push	{r7}
 803a502:	b083      	sub	sp, #12
 803a504:	af00      	add	r7, sp, #0
 803a506:	6078      	str	r0, [r7, #4]
 803a508:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 803a50a:	683a      	ldr	r2, [r7, #0]
 803a50c:	4613      	mov	r3, r2
 803a50e:	015b      	lsls	r3, r3, #5
 803a510:	4413      	add	r3, r2
 803a512:	00db      	lsls	r3, r3, #3
 803a514:	687a      	ldr	r2, [r7, #4]
 803a516:	4413      	add	r3, r2
 803a518:	4618      	mov	r0, r3
 803a51a:	370c      	adds	r7, #12
 803a51c:	46bd      	mov	sp, r7
 803a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a522:	4770      	bx	lr

0803a524 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 803a524:	b580      	push	{r7, lr}
 803a526:	b082      	sub	sp, #8
 803a528:	af00      	add	r7, sp, #0
 803a52a:	6078      	str	r0, [r7, #4]
 803a52c:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 803a52e:	f000 f8eb 	bl	803a708 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 803a532:	4603      	mov	r3, r0
 803a534:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 803a536:	687b      	ldr	r3, [r7, #4]
 803a538:	68da      	ldr	r2, [r3, #12]
 803a53a:	683b      	ldr	r3, [r7, #0]
 803a53c:	68db      	ldr	r3, [r3, #12]
 803a53e:	1ad3      	subs	r3, r2, r3
 803a540:	109b      	asrs	r3, r3, #2
 803a542:	3b01      	subs	r3, #1
 803a544:	fb01 f303 	mul.w	r3, r1, r3
 803a548:	687a      	ldr	r2, [r7, #4]
 803a54a:	6811      	ldr	r1, [r2, #0]
 803a54c:	687a      	ldr	r2, [r7, #4]
 803a54e:	6852      	ldr	r2, [r2, #4]
 803a550:	1a8a      	subs	r2, r1, r2
 803a552:	1092      	asrs	r2, r2, #2
 803a554:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 803a556:	683a      	ldr	r2, [r7, #0]
 803a558:	6891      	ldr	r1, [r2, #8]
 803a55a:	683a      	ldr	r2, [r7, #0]
 803a55c:	6812      	ldr	r2, [r2, #0]
 803a55e:	1a8a      	subs	r2, r1, r2
 803a560:	1092      	asrs	r2, r2, #2
 803a562:	4413      	add	r3, r2
      }
 803a564:	4618      	mov	r0, r3
 803a566:	3708      	adds	r7, #8
 803a568:	46bd      	mov	sp, r7
 803a56a:	bd80      	pop	{r7, pc}

0803a56c <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 803a56c:	b580      	push	{r7, lr}
 803a56e:	b084      	sub	sp, #16
 803a570:	af00      	add	r7, sp, #0
 803a572:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 803a574:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 803a578:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 803a57a:	6878      	ldr	r0, [r7, #4]
 803a57c:	f000 f9ba 	bl	803a8f4 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>
 803a580:	4603      	mov	r3, r0
 803a582:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 803a584:	f107 0208 	add.w	r2, r7, #8
 803a588:	f107 030c 	add.w	r3, r7, #12
 803a58c:	4611      	mov	r1, r2
 803a58e:	4618      	mov	r0, r3
 803a590:	f000 f9bc 	bl	803a90c <_ZSt3minIjERKT_S2_S2_>
 803a594:	4603      	mov	r3, r0
 803a596:	681b      	ldr	r3, [r3, #0]
      }
 803a598:	4618      	mov	r0, r3
 803a59a:	3710      	adds	r7, #16
 803a59c:	46bd      	mov	sp, r7
 803a59e:	bd80      	pop	{r7, pc}

0803a5a0 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 803a5a0:	b480      	push	{r7}
 803a5a2:	b083      	sub	sp, #12
 803a5a4:	af00      	add	r7, sp, #0
 803a5a6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 803a5a8:	687b      	ldr	r3, [r7, #4]
 803a5aa:	4618      	mov	r0, r3
 803a5ac:	370c      	adds	r7, #12
 803a5ae:	46bd      	mov	sp, r7
 803a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a5b4:	4770      	bx	lr

0803a5b6 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 803a5b6:	b590      	push	{r4, r7, lr}
 803a5b8:	b08b      	sub	sp, #44	; 0x2c
 803a5ba:	af00      	add	r7, sp, #0
 803a5bc:	60f8      	str	r0, [r7, #12]
 803a5be:	60b9      	str	r1, [r7, #8]
 803a5c0:	4613      	mov	r3, r2
 803a5c2:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 803a5c4:	68fb      	ldr	r3, [r7, #12]
 803a5c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 803a5c8:	68fb      	ldr	r3, [r7, #12]
 803a5ca:	695b      	ldr	r3, [r3, #20]
 803a5cc:	1ad3      	subs	r3, r2, r3
 803a5ce:	109b      	asrs	r3, r3, #2
 803a5d0:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 803a5d2:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 803a5d4:	68bb      	ldr	r3, [r7, #8]
 803a5d6:	6a3a      	ldr	r2, [r7, #32]
 803a5d8:	4413      	add	r3, r2
 803a5da:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 803a5dc:	68fb      	ldr	r3, [r7, #12]
 803a5de:	685a      	ldr	r2, [r3, #4]
 803a5e0:	69fb      	ldr	r3, [r7, #28]
 803a5e2:	005b      	lsls	r3, r3, #1
 803a5e4:	429a      	cmp	r2, r3
 803a5e6:	d92d      	bls.n	803a644 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 803a5e8:	68fb      	ldr	r3, [r7, #12]
 803a5ea:	681a      	ldr	r2, [r3, #0]
 803a5ec:	68fb      	ldr	r3, [r7, #12]
 803a5ee:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 803a5f0:	69fb      	ldr	r3, [r7, #28]
 803a5f2:	1acb      	subs	r3, r1, r3
 803a5f4:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 803a5f6:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 803a5f8:	79fb      	ldrb	r3, [r7, #7]
 803a5fa:	2b00      	cmp	r3, #0
 803a5fc:	d002      	beq.n	803a604 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x4e>
 803a5fe:	68bb      	ldr	r3, [r7, #8]
 803a600:	009b      	lsls	r3, r3, #2
 803a602:	e000      	b.n	803a606 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x50>
 803a604:	2300      	movs	r3, #0
 803a606:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 803a608:	4413      	add	r3, r2
 803a60a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 803a60c:	68fb      	ldr	r3, [r7, #12]
 803a60e:	695b      	ldr	r3, [r3, #20]
 803a610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803a612:	429a      	cmp	r2, r3
 803a614:	d209      	bcs.n	803a62a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 803a616:	68fb      	ldr	r3, [r7, #12]
 803a618:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 803a61a:	68fb      	ldr	r3, [r7, #12]
 803a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 803a61e:	3304      	adds	r3, #4
 803a620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803a622:	4619      	mov	r1, r3
 803a624:	f000 f986 	bl	803a934 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
 803a628:	e048      	b.n	803a6bc <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 803a62a:	68fb      	ldr	r3, [r7, #12]
 803a62c:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 803a62e:	68fb      	ldr	r3, [r7, #12]
 803a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 803a632:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 803a634:	6a3b      	ldr	r3, [r7, #32]
 803a636:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 803a638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803a63a:	4413      	add	r3, r2
 803a63c:	461a      	mov	r2, r3
 803a63e:	f000 f991 	bl	803a964 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>
 803a642:	e03b      	b.n	803a6bc <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 803a644:	68fb      	ldr	r3, [r7, #12]
 803a646:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 803a648:	68fb      	ldr	r3, [r7, #12]
 803a64a:	3304      	adds	r3, #4
 803a64c:	f107 0208 	add.w	r2, r7, #8
 803a650:	4611      	mov	r1, r2
 803a652:	4618      	mov	r0, r3
 803a654:	f7ff fddb 	bl	803a20e <_ZSt3maxIjERKT_S2_S2_>
 803a658:	4603      	mov	r3, r0
 803a65a:	681b      	ldr	r3, [r3, #0]
 803a65c:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 803a65e:	3302      	adds	r3, #2
 803a660:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 803a662:	68fb      	ldr	r3, [r7, #12]
 803a664:	69b9      	ldr	r1, [r7, #24]
 803a666:	4618      	mov	r0, r3
 803a668:	f7ff fde5 	bl	803a236 <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 803a66c:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 803a66e:	69ba      	ldr	r2, [r7, #24]
 803a670:	69fb      	ldr	r3, [r7, #28]
 803a672:	1ad3      	subs	r3, r2, r3
 803a674:	085b      	lsrs	r3, r3, #1
 803a676:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 803a678:	79fb      	ldrb	r3, [r7, #7]
 803a67a:	2b00      	cmp	r3, #0
 803a67c:	d002      	beq.n	803a684 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xce>
 803a67e:	68bb      	ldr	r3, [r7, #8]
 803a680:	009b      	lsls	r3, r3, #2
 803a682:	e000      	b.n	803a686 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xd0>
 803a684:	2300      	movs	r3, #0
 803a686:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 803a688:	697a      	ldr	r2, [r7, #20]
 803a68a:	4413      	add	r3, r2
 803a68c:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 803a68e:	68fb      	ldr	r3, [r7, #12]
 803a690:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 803a692:	68fb      	ldr	r3, [r7, #12]
 803a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 803a696:	3304      	adds	r3, #4
 803a698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803a69a:	4619      	mov	r1, r3
 803a69c:	f000 f94a 	bl	803a934 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 803a6a0:	68f8      	ldr	r0, [r7, #12]
 803a6a2:	68fb      	ldr	r3, [r7, #12]
 803a6a4:	6819      	ldr	r1, [r3, #0]
 803a6a6:	68fb      	ldr	r3, [r7, #12]
 803a6a8:	685b      	ldr	r3, [r3, #4]
 803a6aa:	461a      	mov	r2, r3
 803a6ac:	f7ff fae5 	bl	8039c7a <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>

	  this->_M_impl._M_map = __new_map;
 803a6b0:	68fb      	ldr	r3, [r7, #12]
 803a6b2:	697a      	ldr	r2, [r7, #20]
 803a6b4:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 803a6b6:	68fb      	ldr	r3, [r7, #12]
 803a6b8:	69ba      	ldr	r2, [r7, #24]
 803a6ba:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 803a6bc:	68fb      	ldr	r3, [r7, #12]
 803a6be:	3308      	adds	r3, #8
 803a6c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803a6c2:	4618      	mov	r0, r3
 803a6c4:	f7ff fd47 	bl	803a156 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 803a6c8:	68fb      	ldr	r3, [r7, #12]
 803a6ca:	f103 0018 	add.w	r0, r3, #24
 803a6ce:	6a3a      	ldr	r2, [r7, #32]
 803a6d0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 803a6d4:	4413      	add	r3, r2
 803a6d6:	009b      	lsls	r3, r3, #2
 803a6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803a6da:	4413      	add	r3, r2
 803a6dc:	4619      	mov	r1, r3
 803a6de:	f7ff fd3a 	bl	803a156 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
    }
 803a6e2:	bf00      	nop
 803a6e4:	372c      	adds	r7, #44	; 0x2c
 803a6e6:	46bd      	mov	sp, r7
 803a6e8:	bd90      	pop	{r4, r7, pc}

0803a6ea <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 803a6ea:	b580      	push	{r7, lr}
 803a6ec:	b082      	sub	sp, #8
 803a6ee:	af00      	add	r7, sp, #0
 803a6f0:	6078      	str	r0, [r7, #4]
 803a6f2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 803a6f4:	2200      	movs	r2, #0
 803a6f6:	6839      	ldr	r1, [r7, #0]
 803a6f8:	6878      	ldr	r0, [r7, #4]
 803a6fa:	f000 f94b 	bl	803a994 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>
 803a6fe:	4603      	mov	r3, r0
 803a700:	4618      	mov	r0, r3
 803a702:	3708      	adds	r7, #8
 803a704:	46bd      	mov	sp, r7
 803a706:	bd80      	pop	{r7, pc}

0803a708 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 803a708:	b580      	push	{r7, lr}
 803a70a:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 803a70c:	2004      	movs	r0, #4
 803a70e:	f7fb fbf5 	bl	8035efc <_ZSt16__deque_buf_sizej>
 803a712:	4603      	mov	r3, r0
 803a714:	4618      	mov	r0, r3
 803a716:	bd80      	pop	{r7, pc}

0803a718 <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 803a718:	b580      	push	{r7, lr}
 803a71a:	b084      	sub	sp, #16
 803a71c:	af00      	add	r7, sp, #0
 803a71e:	60f8      	str	r0, [r7, #12]
 803a720:	60b9      	str	r1, [r7, #8]
 803a722:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 803a724:	687a      	ldr	r2, [r7, #4]
 803a726:	68b9      	ldr	r1, [r7, #8]
 803a728:	68f8      	ldr	r0, [r7, #12]
 803a72a:	f000 f951 	bl	803a9d0 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>
 803a72e:	bf00      	nop
 803a730:	3710      	adds	r7, #16
 803a732:	46bd      	mov	sp, r7
 803a734:	bd80      	pop	{r7, pc}

0803a736 <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 803a736:	b480      	push	{r7}
 803a738:	b083      	sub	sp, #12
 803a73a:	af00      	add	r7, sp, #0
 803a73c:	6078      	str	r0, [r7, #4]
 803a73e:	687b      	ldr	r3, [r7, #4]
 803a740:	4618      	mov	r0, r3
 803a742:	370c      	adds	r7, #12
 803a744:	46bd      	mov	sp, r7
 803a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a74a:	4770      	bx	lr

0803a74c <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 803a74c:	b480      	push	{r7}
 803a74e:	b083      	sub	sp, #12
 803a750:	af00      	add	r7, sp, #0
 803a752:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 803a754:	687b      	ldr	r3, [r7, #4]
 803a756:	2200      	movs	r2, #0
 803a758:	601a      	str	r2, [r3, #0]
 803a75a:	687b      	ldr	r3, [r7, #4]
 803a75c:	2200      	movs	r2, #0
 803a75e:	605a      	str	r2, [r3, #4]
 803a760:	687b      	ldr	r3, [r7, #4]
 803a762:	2200      	movs	r2, #0
 803a764:	609a      	str	r2, [r3, #8]
 803a766:	687b      	ldr	r3, [r7, #4]
 803a768:	2200      	movs	r2, #0
 803a76a:	60da      	str	r2, [r3, #12]
 803a76c:	687b      	ldr	r3, [r7, #4]
 803a76e:	4618      	mov	r0, r3
 803a770:	370c      	adds	r7, #12
 803a772:	46bd      	mov	sp, r7
 803a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a778:	4770      	bx	lr

0803a77a <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 803a77a:	b580      	push	{r7, lr}
 803a77c:	b082      	sub	sp, #8
 803a77e:	af00      	add	r7, sp, #0
 803a780:	6078      	str	r0, [r7, #4]
 803a782:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 803a784:	2200      	movs	r2, #0
 803a786:	6839      	ldr	r1, [r7, #0]
 803a788:	6878      	ldr	r0, [r7, #4]
 803a78a:	f000 f931 	bl	803a9f0 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>
 803a78e:	4603      	mov	r3, r0
 803a790:	4618      	mov	r0, r3
 803a792:	3708      	adds	r7, #8
 803a794:	46bd      	mov	sp, r7
 803a796:	bd80      	pop	{r7, pc}

0803a798 <_ZNSaIPjEC1IjEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 803a798:	b580      	push	{r7, lr}
 803a79a:	b082      	sub	sp, #8
 803a79c:	af00      	add	r7, sp, #0
 803a79e:	6078      	str	r0, [r7, #4]
 803a7a0:	6039      	str	r1, [r7, #0]
 803a7a2:	6878      	ldr	r0, [r7, #4]
 803a7a4:	f000 f942 	bl	803aa2c <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>
 803a7a8:	687b      	ldr	r3, [r7, #4]
 803a7aa:	4618      	mov	r0, r3
 803a7ac:	3708      	adds	r7, #8
 803a7ae:	46bd      	mov	sp, r7
 803a7b0:	bd80      	pop	{r7, pc}

0803a7b2 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 803a7b2:	b480      	push	{r7}
 803a7b4:	b083      	sub	sp, #12
 803a7b6:	af00      	add	r7, sp, #0
 803a7b8:	6078      	str	r0, [r7, #4]
 803a7ba:	687b      	ldr	r3, [r7, #4]
 803a7bc:	4618      	mov	r0, r3
 803a7be:	370c      	adds	r7, #12
 803a7c0:	46bd      	mov	sp, r7
 803a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a7c6:	4770      	bx	lr

0803a7c8 <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 803a7c8:	b580      	push	{r7, lr}
 803a7ca:	b084      	sub	sp, #16
 803a7cc:	af00      	add	r7, sp, #0
 803a7ce:	60f8      	str	r0, [r7, #12]
 803a7d0:	60b9      	str	r1, [r7, #8]
 803a7d2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 803a7d4:	687b      	ldr	r3, [r7, #4]
 803a7d6:	009b      	lsls	r3, r3, #2
 803a7d8:	4619      	mov	r1, r3
 803a7da:	68b8      	ldr	r0, [r7, #8]
 803a7dc:	f001 f8fb 	bl	803b9d6 <_ZdlPvj>
      }
 803a7e0:	bf00      	nop
 803a7e2:	3710      	adds	r7, #16
 803a7e4:	46bd      	mov	sp, r7
 803a7e6:	bd80      	pop	{r7, pc}

0803a7e8 <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 803a7e8:	b590      	push	{r4, r7, lr}
 803a7ea:	b085      	sub	sp, #20
 803a7ec:	af00      	add	r7, sp, #0
 803a7ee:	60f8      	str	r0, [r7, #12]
 803a7f0:	60b9      	str	r1, [r7, #8]
 803a7f2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 803a7f4:	6878      	ldr	r0, [r7, #4]
 803a7f6:	f7ff fd8c 	bl	803a312 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 803a7fa:	4603      	mov	r3, r0
 803a7fc:	681c      	ldr	r4, [r3, #0]
 803a7fe:	68bb      	ldr	r3, [r7, #8]
 803a800:	4619      	mov	r1, r3
 803a802:	2004      	movs	r0, #4
 803a804:	f7fb fb6e 	bl	8035ee4 <_ZnwjPv>
 803a808:	4603      	mov	r3, r0
 803a80a:	601c      	str	r4, [r3, #0]
 803a80c:	bf00      	nop
 803a80e:	3714      	adds	r7, #20
 803a810:	46bd      	mov	sp, r7
 803a812:	bd90      	pop	{r4, r7, pc}

0803a814 <_ZNSt6vectorI14StrobeObserverSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 803a814:	b580      	push	{r7, lr}
 803a816:	b084      	sub	sp, #16
 803a818:	af00      	add	r7, sp, #0
 803a81a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 803a81c:	4b0a      	ldr	r3, [pc, #40]	; (803a848 <_ZNSt6vectorI14StrobeObserverSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 803a81e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 803a820:	6878      	ldr	r0, [r7, #4]
 803a822:	f000 f90e 	bl	803aa42 <_ZNSt16allocator_traitsISaI14StrobeObserverEE8max_sizeERKS1_>
 803a826:	4603      	mov	r3, r0
 803a828:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 803a82a:	f107 0208 	add.w	r2, r7, #8
 803a82e:	f107 030c 	add.w	r3, r7, #12
 803a832:	4611      	mov	r1, r2
 803a834:	4618      	mov	r0, r3
 803a836:	f000 f869 	bl	803a90c <_ZSt3minIjERKT_S2_S2_>
 803a83a:	4603      	mov	r3, r0
 803a83c:	681b      	ldr	r3, [r3, #0]
      }
 803a83e:	4618      	mov	r0, r3
 803a840:	3710      	adds	r7, #16
 803a842:	46bd      	mov	sp, r7
 803a844:	bd80      	pop	{r7, pc}
 803a846:	bf00      	nop
 803a848:	02aaaaaa 	.word	0x02aaaaaa

0803a84c <_ZNKSt12_Vector_baseI14StrobeObserverSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 803a84c:	b480      	push	{r7}
 803a84e:	b083      	sub	sp, #12
 803a850:	af00      	add	r7, sp, #0
 803a852:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 803a854:	687b      	ldr	r3, [r7, #4]
 803a856:	4618      	mov	r0, r3
 803a858:	370c      	adds	r7, #12
 803a85a:	46bd      	mov	sp, r7
 803a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a860:	4770      	bx	lr

0803a862 <_ZN9__gnu_cxx13new_allocatorI14StrobeObserverE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 803a862:	b580      	push	{r7, lr}
 803a864:	b084      	sub	sp, #16
 803a866:	af00      	add	r7, sp, #0
 803a868:	60f8      	str	r0, [r7, #12]
 803a86a:	60b9      	str	r1, [r7, #8]
 803a86c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 803a86e:	68f8      	ldr	r0, [r7, #12]
 803a870:	f000 f8f4 	bl	803aa5c <_ZNK9__gnu_cxx13new_allocatorI14StrobeObserverE11_M_max_sizeEv>
 803a874:	4602      	mov	r2, r0
 803a876:	68bb      	ldr	r3, [r7, #8]
 803a878:	4293      	cmp	r3, r2
 803a87a:	bf8c      	ite	hi
 803a87c:	2301      	movhi	r3, #1
 803a87e:	2300      	movls	r3, #0
 803a880:	b2db      	uxtb	r3, r3
 803a882:	2b00      	cmp	r3, #0
 803a884:	d001      	beq.n	803a88a <_ZN9__gnu_cxx13new_allocatorI14StrobeObserverE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 803a886:	f001 f8b9 	bl	803b9fc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 803a88a:	68ba      	ldr	r2, [r7, #8]
 803a88c:	4613      	mov	r3, r2
 803a88e:	005b      	lsls	r3, r3, #1
 803a890:	4413      	add	r3, r2
 803a892:	011b      	lsls	r3, r3, #4
 803a894:	4618      	mov	r0, r3
 803a896:	f001 f8a0 	bl	803b9da <_Znwj>
 803a89a:	4603      	mov	r3, r0
      }
 803a89c:	4618      	mov	r0, r3
 803a89e:	3710      	adds	r7, #16
 803a8a0:	46bd      	mov	sp, r7
 803a8a2:	bd80      	pop	{r7, pc}

0803a8a4 <_ZSt18uninitialized_copyIPK14StrobeObserverPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 803a8a4:	b580      	push	{r7, lr}
 803a8a6:	b086      	sub	sp, #24
 803a8a8:	af00      	add	r7, sp, #0
 803a8aa:	60f8      	str	r0, [r7, #12]
 803a8ac:	60b9      	str	r1, [r7, #8]
 803a8ae:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 803a8b0:	2300      	movs	r3, #0
 803a8b2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 803a8b4:	687a      	ldr	r2, [r7, #4]
 803a8b6:	68b9      	ldr	r1, [r7, #8]
 803a8b8:	68f8      	ldr	r0, [r7, #12]
 803a8ba:	f000 f8dd 	bl	803aa78 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK14StrobeObserverPS2_EET0_T_S7_S6_>
 803a8be:	4603      	mov	r3, r0
    }
 803a8c0:	4618      	mov	r0, r3
 803a8c2:	3718      	adds	r7, #24
 803a8c4:	46bd      	mov	sp, r7
 803a8c6:	bd80      	pop	{r7, pc}

0803a8c8 <_ZSt11__addressofI14StrobeObserverEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 803a8c8:	b480      	push	{r7}
 803a8ca:	b083      	sub	sp, #12
 803a8cc:	af00      	add	r7, sp, #0
 803a8ce:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 803a8d0:	687b      	ldr	r3, [r7, #4]
 803a8d2:	4618      	mov	r0, r3
 803a8d4:	370c      	adds	r7, #12
 803a8d6:	46bd      	mov	sp, r7
 803a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a8dc:	4770      	bx	lr

0803a8de <_ZSt8_DestroyI14StrobeObserverEvPT_>:
    _Destroy(_Tp* __pointer)
 803a8de:	b580      	push	{r7, lr}
 803a8e0:	b082      	sub	sp, #8
 803a8e2:	af00      	add	r7, sp, #0
 803a8e4:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 803a8e6:	6878      	ldr	r0, [r7, #4]
 803a8e8:	f7ff fdc0 	bl	803a46c <_ZN14StrobeObserverD1Ev>
    }
 803a8ec:	bf00      	nop
 803a8ee:	3708      	adds	r7, #8
 803a8f0:	46bd      	mov	sp, r7
 803a8f2:	bd80      	pop	{r7, pc}

0803a8f4 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 803a8f4:	b580      	push	{r7, lr}
 803a8f6:	b082      	sub	sp, #8
 803a8f8:	af00      	add	r7, sp, #0
 803a8fa:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 803a8fc:	6878      	ldr	r0, [r7, #4]
 803a8fe:	f000 f8db 	bl	803aab8 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>
 803a902:	4603      	mov	r3, r0
      }
 803a904:	4618      	mov	r0, r3
 803a906:	3708      	adds	r7, #8
 803a908:	46bd      	mov	sp, r7
 803a90a:	bd80      	pop	{r7, pc}

0803a90c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 803a90c:	b480      	push	{r7}
 803a90e:	b083      	sub	sp, #12
 803a910:	af00      	add	r7, sp, #0
 803a912:	6078      	str	r0, [r7, #4]
 803a914:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 803a916:	683b      	ldr	r3, [r7, #0]
 803a918:	681a      	ldr	r2, [r3, #0]
 803a91a:	687b      	ldr	r3, [r7, #4]
 803a91c:	681b      	ldr	r3, [r3, #0]
 803a91e:	429a      	cmp	r2, r3
 803a920:	d201      	bcs.n	803a926 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 803a922:	683b      	ldr	r3, [r7, #0]
 803a924:	e000      	b.n	803a928 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 803a926:	687b      	ldr	r3, [r7, #4]
    }
 803a928:	4618      	mov	r0, r3
 803a92a:	370c      	adds	r7, #12
 803a92c:	46bd      	mov	sp, r7
 803a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a932:	4770      	bx	lr

0803a934 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 803a934:	b590      	push	{r4, r7, lr}
 803a936:	b085      	sub	sp, #20
 803a938:	af00      	add	r7, sp, #0
 803a93a:	60f8      	str	r0, [r7, #12]
 803a93c:	60b9      	str	r1, [r7, #8]
 803a93e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 803a940:	68f8      	ldr	r0, [r7, #12]
 803a942:	f000 f8c5 	bl	803aad0 <_ZSt12__miter_baseIPPjET_S2_>
 803a946:	4604      	mov	r4, r0
 803a948:	68b8      	ldr	r0, [r7, #8]
 803a94a:	f000 f8c1 	bl	803aad0 <_ZSt12__miter_baseIPPjET_S2_>
 803a94e:	4603      	mov	r3, r0
 803a950:	687a      	ldr	r2, [r7, #4]
 803a952:	4619      	mov	r1, r3
 803a954:	4620      	mov	r0, r4
 803a956:	f000 f8c6 	bl	803aae6 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>
 803a95a:	4603      	mov	r3, r0
    }
 803a95c:	4618      	mov	r0, r3
 803a95e:	3714      	adds	r7, #20
 803a960:	46bd      	mov	sp, r7
 803a962:	bd90      	pop	{r4, r7, pc}

0803a964 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 803a964:	b590      	push	{r4, r7, lr}
 803a966:	b085      	sub	sp, #20
 803a968:	af00      	add	r7, sp, #0
 803a96a:	60f8      	str	r0, [r7, #12]
 803a96c:	60b9      	str	r1, [r7, #8]
 803a96e:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 803a970:	68f8      	ldr	r0, [r7, #12]
 803a972:	f000 f8ad 	bl	803aad0 <_ZSt12__miter_baseIPPjET_S2_>
 803a976:	4604      	mov	r4, r0
 803a978:	68b8      	ldr	r0, [r7, #8]
 803a97a:	f000 f8a9 	bl	803aad0 <_ZSt12__miter_baseIPPjET_S2_>
 803a97e:	4603      	mov	r3, r0
 803a980:	687a      	ldr	r2, [r7, #4]
 803a982:	4619      	mov	r1, r3
 803a984:	4620      	mov	r0, r4
 803a986:	f000 f8d1 	bl	803ab2c <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>
 803a98a:	4603      	mov	r3, r0
    }
 803a98c:	4618      	mov	r0, r3
 803a98e:	3714      	adds	r7, #20
 803a990:	46bd      	mov	sp, r7
 803a992:	bd90      	pop	{r4, r7, pc}

0803a994 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 803a994:	b580      	push	{r7, lr}
 803a996:	b084      	sub	sp, #16
 803a998:	af00      	add	r7, sp, #0
 803a99a:	60f8      	str	r0, [r7, #12]
 803a99c:	60b9      	str	r1, [r7, #8]
 803a99e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 803a9a0:	68f8      	ldr	r0, [r7, #12]
 803a9a2:	f000 f8e6 	bl	803ab72 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 803a9a6:	4602      	mov	r2, r0
 803a9a8:	68bb      	ldr	r3, [r7, #8]
 803a9aa:	4293      	cmp	r3, r2
 803a9ac:	bf8c      	ite	hi
 803a9ae:	2301      	movhi	r3, #1
 803a9b0:	2300      	movls	r3, #0
 803a9b2:	b2db      	uxtb	r3, r3
 803a9b4:	2b00      	cmp	r3, #0
 803a9b6:	d001      	beq.n	803a9bc <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 803a9b8:	f001 f820 	bl	803b9fc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 803a9bc:	68bb      	ldr	r3, [r7, #8]
 803a9be:	009b      	lsls	r3, r3, #2
 803a9c0:	4618      	mov	r0, r3
 803a9c2:	f001 f80a 	bl	803b9da <_Znwj>
 803a9c6:	4603      	mov	r3, r0
      }
 803a9c8:	4618      	mov	r0, r3
 803a9ca:	3710      	adds	r7, #16
 803a9cc:	46bd      	mov	sp, r7
 803a9ce:	bd80      	pop	{r7, pc}

0803a9d0 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>:
      deallocate(_Tp* __p, size_type __t)
 803a9d0:	b580      	push	{r7, lr}
 803a9d2:	b084      	sub	sp, #16
 803a9d4:	af00      	add	r7, sp, #0
 803a9d6:	60f8      	str	r0, [r7, #12]
 803a9d8:	60b9      	str	r1, [r7, #8]
 803a9da:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 803a9dc:	687b      	ldr	r3, [r7, #4]
 803a9de:	009b      	lsls	r3, r3, #2
 803a9e0:	4619      	mov	r1, r3
 803a9e2:	68b8      	ldr	r0, [r7, #8]
 803a9e4:	f000 fff7 	bl	803b9d6 <_ZdlPvj>
      }
 803a9e8:	bf00      	nop
 803a9ea:	3710      	adds	r7, #16
 803a9ec:	46bd      	mov	sp, r7
 803a9ee:	bd80      	pop	{r7, pc}

0803a9f0 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 803a9f0:	b580      	push	{r7, lr}
 803a9f2:	b084      	sub	sp, #16
 803a9f4:	af00      	add	r7, sp, #0
 803a9f6:	60f8      	str	r0, [r7, #12]
 803a9f8:	60b9      	str	r1, [r7, #8]
 803a9fa:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 803a9fc:	68f8      	ldr	r0, [r7, #12]
 803a9fe:	f000 f8c4 	bl	803ab8a <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>
 803aa02:	4602      	mov	r2, r0
 803aa04:	68bb      	ldr	r3, [r7, #8]
 803aa06:	4293      	cmp	r3, r2
 803aa08:	bf8c      	ite	hi
 803aa0a:	2301      	movhi	r3, #1
 803aa0c:	2300      	movls	r3, #0
 803aa0e:	b2db      	uxtb	r3, r3
 803aa10:	2b00      	cmp	r3, #0
 803aa12:	d001      	beq.n	803aa18 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 803aa14:	f000 fff2 	bl	803b9fc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 803aa18:	68bb      	ldr	r3, [r7, #8]
 803aa1a:	009b      	lsls	r3, r3, #2
 803aa1c:	4618      	mov	r0, r3
 803aa1e:	f000 ffdc 	bl	803b9da <_Znwj>
 803aa22:	4603      	mov	r3, r0
      }
 803aa24:	4618      	mov	r0, r3
 803aa26:	3710      	adds	r7, #16
 803aa28:	46bd      	mov	sp, r7
 803aa2a:	bd80      	pop	{r7, pc}

0803aa2c <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 803aa2c:	b480      	push	{r7}
 803aa2e:	b083      	sub	sp, #12
 803aa30:	af00      	add	r7, sp, #0
 803aa32:	6078      	str	r0, [r7, #4]
 803aa34:	687b      	ldr	r3, [r7, #4]
 803aa36:	4618      	mov	r0, r3
 803aa38:	370c      	adds	r7, #12
 803aa3a:	46bd      	mov	sp, r7
 803aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aa40:	4770      	bx	lr

0803aa42 <_ZNSt16allocator_traitsISaI14StrobeObserverEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 803aa42:	b580      	push	{r7, lr}
 803aa44:	b082      	sub	sp, #8
 803aa46:	af00      	add	r7, sp, #0
 803aa48:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 803aa4a:	6878      	ldr	r0, [r7, #4]
 803aa4c:	f000 f8a9 	bl	803aba2 <_ZNK9__gnu_cxx13new_allocatorI14StrobeObserverE8max_sizeEv>
 803aa50:	4603      	mov	r3, r0
      }
 803aa52:	4618      	mov	r0, r3
 803aa54:	3708      	adds	r7, #8
 803aa56:	46bd      	mov	sp, r7
 803aa58:	bd80      	pop	{r7, pc}
	...

0803aa5c <_ZNK9__gnu_cxx13new_allocatorI14StrobeObserverE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 803aa5c:	b480      	push	{r7}
 803aa5e:	b083      	sub	sp, #12
 803aa60:	af00      	add	r7, sp, #0
 803aa62:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 803aa64:	4b03      	ldr	r3, [pc, #12]	; (803aa74 <_ZNK9__gnu_cxx13new_allocatorI14StrobeObserverE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 803aa66:	4618      	mov	r0, r3
 803aa68:	370c      	adds	r7, #12
 803aa6a:	46bd      	mov	sp, r7
 803aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aa70:	4770      	bx	lr
 803aa72:	bf00      	nop
 803aa74:	02aaaaaa 	.word	0x02aaaaaa

0803aa78 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK14StrobeObserverPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 803aa78:	b580      	push	{r7, lr}
 803aa7a:	b086      	sub	sp, #24
 803aa7c:	af00      	add	r7, sp, #0
 803aa7e:	60f8      	str	r0, [r7, #12]
 803aa80:	60b9      	str	r1, [r7, #8]
 803aa82:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 803aa84:	687b      	ldr	r3, [r7, #4]
 803aa86:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 803aa88:	68fa      	ldr	r2, [r7, #12]
 803aa8a:	68bb      	ldr	r3, [r7, #8]
 803aa8c:	429a      	cmp	r2, r3
 803aa8e:	d00e      	beq.n	803aaae <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK14StrobeObserverPS2_EET0_T_S7_S6_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 803aa90:	6978      	ldr	r0, [r7, #20]
 803aa92:	f7ff ff19 	bl	803a8c8 <_ZSt11__addressofI14StrobeObserverEPT_RS1_>
 803aa96:	4603      	mov	r3, r0
 803aa98:	68f9      	ldr	r1, [r7, #12]
 803aa9a:	4618      	mov	r0, r3
 803aa9c:	f000 f8b7 	bl	803ac0e <_ZSt10_ConstructI14StrobeObserverJRKS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 803aaa0:	68fb      	ldr	r3, [r7, #12]
 803aaa2:	3330      	adds	r3, #48	; 0x30
 803aaa4:	60fb      	str	r3, [r7, #12]
 803aaa6:	697b      	ldr	r3, [r7, #20]
 803aaa8:	3330      	adds	r3, #48	; 0x30
 803aaaa:	617b      	str	r3, [r7, #20]
 803aaac:	e7ec      	b.n	803aa88 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK14StrobeObserverPS2_EET0_T_S7_S6_+0x10>
	      return __cur;
 803aaae:	697b      	ldr	r3, [r7, #20]
	}
 803aab0:	4618      	mov	r0, r3
 803aab2:	3718      	adds	r7, #24
 803aab4:	46bd      	mov	sp, r7
 803aab6:	bd80      	pop	{r7, pc}

0803aab8 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 803aab8:	b580      	push	{r7, lr}
 803aaba:	b082      	sub	sp, #8
 803aabc:	af00      	add	r7, sp, #0
 803aabe:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 803aac0:	6878      	ldr	r0, [r7, #4]
 803aac2:	f000 f856 	bl	803ab72 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 803aac6:	4603      	mov	r3, r0
 803aac8:	4618      	mov	r0, r3
 803aaca:	3708      	adds	r7, #8
 803aacc:	46bd      	mov	sp, r7
 803aace:	bd80      	pop	{r7, pc}

0803aad0 <_ZSt12__miter_baseIPPjET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 803aad0:	b480      	push	{r7}
 803aad2:	b083      	sub	sp, #12
 803aad4:	af00      	add	r7, sp, #0
 803aad6:	6078      	str	r0, [r7, #4]
    { return __it; }
 803aad8:	687b      	ldr	r3, [r7, #4]
 803aada:	4618      	mov	r0, r3
 803aadc:	370c      	adds	r7, #12
 803aade:	46bd      	mov	sp, r7
 803aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aae4:	4770      	bx	lr

0803aae6 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 803aae6:	b5b0      	push	{r4, r5, r7, lr}
 803aae8:	b084      	sub	sp, #16
 803aaea:	af00      	add	r7, sp, #0
 803aaec:	60f8      	str	r0, [r7, #12]
 803aaee:	60b9      	str	r1, [r7, #8]
 803aaf0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 803aaf2:	68f8      	ldr	r0, [r7, #12]
 803aaf4:	f000 f8a2 	bl	803ac3c <_ZSt12__niter_baseIPPjET_S2_>
 803aaf8:	4604      	mov	r4, r0
 803aafa:	68b8      	ldr	r0, [r7, #8]
 803aafc:	f000 f89e 	bl	803ac3c <_ZSt12__niter_baseIPPjET_S2_>
 803ab00:	4605      	mov	r5, r0
 803ab02:	687b      	ldr	r3, [r7, #4]
 803ab04:	4618      	mov	r0, r3
 803ab06:	f000 f899 	bl	803ac3c <_ZSt12__niter_baseIPPjET_S2_>
 803ab0a:	4603      	mov	r3, r0
 803ab0c:	461a      	mov	r2, r3
 803ab0e:	4629      	mov	r1, r5
 803ab10:	4620      	mov	r0, r4
 803ab12:	f000 f89e 	bl	803ac52 <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 803ab16:	4602      	mov	r2, r0
 803ab18:	1d3b      	adds	r3, r7, #4
 803ab1a:	4611      	mov	r1, r2
 803ab1c:	4618      	mov	r0, r3
 803ab1e:	f000 f8a8 	bl	803ac72 <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 803ab22:	4603      	mov	r3, r0
    }
 803ab24:	4618      	mov	r0, r3
 803ab26:	3710      	adds	r7, #16
 803ab28:	46bd      	mov	sp, r7
 803ab2a:	bdb0      	pop	{r4, r5, r7, pc}

0803ab2c <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 803ab2c:	b5b0      	push	{r4, r5, r7, lr}
 803ab2e:	b084      	sub	sp, #16
 803ab30:	af00      	add	r7, sp, #0
 803ab32:	60f8      	str	r0, [r7, #12]
 803ab34:	60b9      	str	r1, [r7, #8]
 803ab36:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 803ab38:	68f8      	ldr	r0, [r7, #12]
 803ab3a:	f000 f87f 	bl	803ac3c <_ZSt12__niter_baseIPPjET_S2_>
 803ab3e:	4604      	mov	r4, r0
 803ab40:	68b8      	ldr	r0, [r7, #8]
 803ab42:	f000 f87b 	bl	803ac3c <_ZSt12__niter_baseIPPjET_S2_>
 803ab46:	4605      	mov	r5, r0
 803ab48:	687b      	ldr	r3, [r7, #4]
 803ab4a:	4618      	mov	r0, r3
 803ab4c:	f000 f876 	bl	803ac3c <_ZSt12__niter_baseIPPjET_S2_>
 803ab50:	4603      	mov	r3, r0
 803ab52:	461a      	mov	r2, r3
 803ab54:	4629      	mov	r1, r5
 803ab56:	4620      	mov	r0, r4
 803ab58:	f000 f897 	bl	803ac8a <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 803ab5c:	4602      	mov	r2, r0
 803ab5e:	1d3b      	adds	r3, r7, #4
 803ab60:	4611      	mov	r1, r2
 803ab62:	4618      	mov	r0, r3
 803ab64:	f000 f885 	bl	803ac72 <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 803ab68:	4603      	mov	r3, r0
    }
 803ab6a:	4618      	mov	r0, r3
 803ab6c:	3710      	adds	r7, #16
 803ab6e:	46bd      	mov	sp, r7
 803ab70:	bdb0      	pop	{r4, r5, r7, pc}

0803ab72 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 803ab72:	b480      	push	{r7}
 803ab74:	b083      	sub	sp, #12
 803ab76:	af00      	add	r7, sp, #0
 803ab78:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 803ab7a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 803ab7e:	4618      	mov	r0, r3
 803ab80:	370c      	adds	r7, #12
 803ab82:	46bd      	mov	sp, r7
 803ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ab88:	4770      	bx	lr

0803ab8a <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 803ab8a:	b480      	push	{r7}
 803ab8c:	b083      	sub	sp, #12
 803ab8e:	af00      	add	r7, sp, #0
 803ab90:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 803ab92:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 803ab96:	4618      	mov	r0, r3
 803ab98:	370c      	adds	r7, #12
 803ab9a:	46bd      	mov	sp, r7
 803ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aba0:	4770      	bx	lr

0803aba2 <_ZNK9__gnu_cxx13new_allocatorI14StrobeObserverE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 803aba2:	b580      	push	{r7, lr}
 803aba4:	b082      	sub	sp, #8
 803aba6:	af00      	add	r7, sp, #0
 803aba8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 803abaa:	6878      	ldr	r0, [r7, #4]
 803abac:	f7ff ff56 	bl	803aa5c <_ZNK9__gnu_cxx13new_allocatorI14StrobeObserverE11_M_max_sizeEv>
 803abb0:	4603      	mov	r3, r0
 803abb2:	4618      	mov	r0, r3
 803abb4:	3708      	adds	r7, #8
 803abb6:	46bd      	mov	sp, r7
 803abb8:	bd80      	pop	{r7, pc}

0803abba <_ZNSt5queueIjSt5dequeIjSaIjEEEC1ERKS3_>:
    class queue
 803abba:	b580      	push	{r7, lr}
 803abbc:	b082      	sub	sp, #8
 803abbe:	af00      	add	r7, sp, #0
 803abc0:	6078      	str	r0, [r7, #4]
 803abc2:	6039      	str	r1, [r7, #0]
 803abc4:	687b      	ldr	r3, [r7, #4]
 803abc6:	683a      	ldr	r2, [r7, #0]
 803abc8:	4611      	mov	r1, r2
 803abca:	4618      	mov	r0, r3
 803abcc:	f000 f878 	bl	803acc0 <_ZNSt5dequeIjSaIjEEC1ERKS1_>
 803abd0:	687b      	ldr	r3, [r7, #4]
 803abd2:	4618      	mov	r0, r3
 803abd4:	3708      	adds	r7, #8
 803abd6:	46bd      	mov	sp, r7
 803abd8:	bd80      	pop	{r7, pc}

0803abda <_ZN14StrobeObserverC1ERKS_>:
 803abda:	b580      	push	{r7, lr}
 803abdc:	b082      	sub	sp, #8
 803abde:	af00      	add	r7, sp, #0
 803abe0:	6078      	str	r0, [r7, #4]
 803abe2:	6039      	str	r1, [r7, #0]
 803abe4:	687b      	ldr	r3, [r7, #4]
 803abe6:	683a      	ldr	r2, [r7, #0]
 803abe8:	4611      	mov	r1, r2
 803abea:	4618      	mov	r0, r3
 803abec:	f7ff ffe5 	bl	803abba <_ZNSt5queueIjSt5dequeIjSaIjEEEC1ERKS3_>
 803abf0:	683b      	ldr	r3, [r7, #0]
 803abf2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 803abf6:	687b      	ldr	r3, [r7, #4]
 803abf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 803abfc:	683b      	ldr	r3, [r7, #0]
 803abfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803ac00:	687b      	ldr	r3, [r7, #4]
 803ac02:	62da      	str	r2, [r3, #44]	; 0x2c
 803ac04:	687b      	ldr	r3, [r7, #4]
 803ac06:	4618      	mov	r0, r3
 803ac08:	3708      	adds	r7, #8
 803ac0a:	46bd      	mov	sp, r7
 803ac0c:	bd80      	pop	{r7, pc}

0803ac0e <_ZSt10_ConstructI14StrobeObserverJRKS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 803ac0e:	b590      	push	{r4, r7, lr}
 803ac10:	b083      	sub	sp, #12
 803ac12:	af00      	add	r7, sp, #0
 803ac14:	6078      	str	r0, [r7, #4]
 803ac16:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 803ac18:	6838      	ldr	r0, [r7, #0]
 803ac1a:	f000 f846 	bl	803acaa <_ZSt7forwardIRK14StrobeObserverEOT_RNSt16remove_referenceIS3_E4typeE>
 803ac1e:	4604      	mov	r4, r0
 803ac20:	687b      	ldr	r3, [r7, #4]
 803ac22:	4619      	mov	r1, r3
 803ac24:	2030      	movs	r0, #48	; 0x30
 803ac26:	f7fb f95d 	bl	8035ee4 <_ZnwjPv>
 803ac2a:	4603      	mov	r3, r0
 803ac2c:	4621      	mov	r1, r4
 803ac2e:	4618      	mov	r0, r3
 803ac30:	f7ff ffd3 	bl	803abda <_ZN14StrobeObserverC1ERKS_>
 803ac34:	bf00      	nop
 803ac36:	370c      	adds	r7, #12
 803ac38:	46bd      	mov	sp, r7
 803ac3a:	bd90      	pop	{r4, r7, pc}

0803ac3c <_ZSt12__niter_baseIPPjET_S2_>:
    __niter_base(_Iterator __it)
 803ac3c:	b480      	push	{r7}
 803ac3e:	b083      	sub	sp, #12
 803ac40:	af00      	add	r7, sp, #0
 803ac42:	6078      	str	r0, [r7, #4]
    { return __it; }
 803ac44:	687b      	ldr	r3, [r7, #4]
 803ac46:	4618      	mov	r0, r3
 803ac48:	370c      	adds	r7, #12
 803ac4a:	46bd      	mov	sp, r7
 803ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ac50:	4770      	bx	lr

0803ac52 <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 803ac52:	b580      	push	{r7, lr}
 803ac54:	b084      	sub	sp, #16
 803ac56:	af00      	add	r7, sp, #0
 803ac58:	60f8      	str	r0, [r7, #12]
 803ac5a:	60b9      	str	r1, [r7, #8]
 803ac5c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 803ac5e:	687a      	ldr	r2, [r7, #4]
 803ac60:	68b9      	ldr	r1, [r7, #8]
 803ac62:	68f8      	ldr	r0, [r7, #12]
 803ac64:	f000 f876 	bl	803ad54 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 803ac68:	4603      	mov	r3, r0
 803ac6a:	4618      	mov	r0, r3
 803ac6c:	3710      	adds	r7, #16
 803ac6e:	46bd      	mov	sp, r7
 803ac70:	bd80      	pop	{r7, pc}

0803ac72 <_ZSt12__niter_wrapIPPjET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 803ac72:	b480      	push	{r7}
 803ac74:	b083      	sub	sp, #12
 803ac76:	af00      	add	r7, sp, #0
 803ac78:	6078      	str	r0, [r7, #4]
 803ac7a:	6039      	str	r1, [r7, #0]
    { return __res; }
 803ac7c:	683b      	ldr	r3, [r7, #0]
 803ac7e:	4618      	mov	r0, r3
 803ac80:	370c      	adds	r7, #12
 803ac82:	46bd      	mov	sp, r7
 803ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ac88:	4770      	bx	lr

0803ac8a <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 803ac8a:	b580      	push	{r7, lr}
 803ac8c:	b084      	sub	sp, #16
 803ac8e:	af00      	add	r7, sp, #0
 803ac90:	60f8      	str	r0, [r7, #12]
 803ac92:	60b9      	str	r1, [r7, #8]
 803ac94:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 803ac96:	687a      	ldr	r2, [r7, #4]
 803ac98:	68b9      	ldr	r1, [r7, #8]
 803ac9a:	68f8      	ldr	r0, [r7, #12]
 803ac9c:	f000 f86a 	bl	803ad74 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 803aca0:	4603      	mov	r3, r0
 803aca2:	4618      	mov	r0, r3
 803aca4:	3710      	adds	r7, #16
 803aca6:	46bd      	mov	sp, r7
 803aca8:	bd80      	pop	{r7, pc}

0803acaa <_ZSt7forwardIRK14StrobeObserverEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 803acaa:	b480      	push	{r7}
 803acac:	b083      	sub	sp, #12
 803acae:	af00      	add	r7, sp, #0
 803acb0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 803acb2:	687b      	ldr	r3, [r7, #4]
 803acb4:	4618      	mov	r0, r3
 803acb6:	370c      	adds	r7, #12
 803acb8:	46bd      	mov	sp, r7
 803acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 803acbe:	4770      	bx	lr

0803acc0 <_ZNSt5dequeIjSaIjEEC1ERKS1_>:
      deque(const deque& __x)
 803acc0:	b590      	push	{r4, r7, lr}
 803acc2:	b097      	sub	sp, #92	; 0x5c
 803acc4:	af02      	add	r7, sp, #8
 803acc6:	6078      	str	r0, [r7, #4]
 803acc8:	6039      	str	r1, [r7, #0]
	      __x.size())
 803acca:	687c      	ldr	r4, [r7, #4]
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
 803accc:	683b      	ldr	r3, [r7, #0]
 803acce:	4618      	mov	r0, r3
 803acd0:	f7ff fc66 	bl	803a5a0 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 803acd4:	4602      	mov	r2, r0
	      __x.size())
 803acd6:	f107 030c 	add.w	r3, r7, #12
 803acda:	4611      	mov	r1, r2
 803acdc:	4618      	mov	r0, r3
 803acde:	f000 f859 	bl	803ad94 <_ZN9__gnu_cxx14__alloc_traitsISaIjEjE17_S_select_on_copyERKS1_>
 803ace2:	6838      	ldr	r0, [r7, #0]
 803ace4:	f7ff f9e7 	bl	803a0b6 <_ZNKSt5dequeIjSaIjEE4sizeEv>
 803ace8:	4602      	mov	r2, r0
 803acea:	f107 030c 	add.w	r3, r7, #12
 803acee:	4619      	mov	r1, r3
 803acf0:	4620      	mov	r0, r4
 803acf2:	f000 f85d 	bl	803adb0 <_ZNSt11_Deque_baseIjSaIjEEC1ERKS0_j>
 803acf6:	f107 030c 	add.w	r3, r7, #12
 803acfa:	4618      	mov	r0, r3
 803acfc:	f7fe ff34 	bl	8039b68 <_ZNSaIjED1Ev>
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 803ad00:	f107 0320 	add.w	r3, r7, #32
 803ad04:	6839      	ldr	r1, [r7, #0]
 803ad06:	4618      	mov	r0, r3
 803ad08:	f000 f866 	bl	803add8 <_ZNKSt5dequeIjSaIjEE5beginEv>
 803ad0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 803ad10:	6839      	ldr	r1, [r7, #0]
 803ad12:	4618      	mov	r0, r3
 803ad14:	f000 f86f 	bl	803adf6 <_ZNKSt5dequeIjSaIjEE3endEv>
				    this->_M_impl._M_start,
 803ad18:	687b      	ldr	r3, [r7, #4]
 803ad1a:	f103 0208 	add.w	r2, r3, #8
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 803ad1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 803ad22:	4611      	mov	r1, r2
 803ad24:	4618      	mov	r0, r3
 803ad26:	f7fe fa70 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
				    _M_get_Tp_allocator()); }
 803ad2a:	687b      	ldr	r3, [r7, #4]
 803ad2c:	4618      	mov	r0, r3
 803ad2e:	f7fe fa61 	bl	80391f4 <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 803ad32:	4604      	mov	r4, r0
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 803ad34:	f107 0010 	add.w	r0, r7, #16
 803ad38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 803ad3c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 803ad40:	f107 0120 	add.w	r1, r7, #32
 803ad44:	9400      	str	r4, [sp, #0]
 803ad46:	f000 f881 	bl	803ae4c <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIjRKjPS1_ES0_IjRjPjEjET0_T_S9_S8_RSaIT1_E>
				    _M_get_Tp_allocator()); }
 803ad4a:	687b      	ldr	r3, [r7, #4]
 803ad4c:	4618      	mov	r0, r3
 803ad4e:	3754      	adds	r7, #84	; 0x54
 803ad50:	46bd      	mov	sp, r7
 803ad52:	bd90      	pop	{r4, r7, pc}

0803ad54 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 803ad54:	b580      	push	{r7, lr}
 803ad56:	b084      	sub	sp, #16
 803ad58:	af00      	add	r7, sp, #0
 803ad5a:	60f8      	str	r0, [r7, #12]
 803ad5c:	60b9      	str	r1, [r7, #8]
 803ad5e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 803ad60:	687a      	ldr	r2, [r7, #4]
 803ad62:	68b9      	ldr	r1, [r7, #8]
 803ad64:	68f8      	ldr	r0, [r7, #12]
 803ad66:	f000 f897 	bl	803ae98 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>
 803ad6a:	4603      	mov	r3, r0
    }
 803ad6c:	4618      	mov	r0, r3
 803ad6e:	3710      	adds	r7, #16
 803ad70:	46bd      	mov	sp, r7
 803ad72:	bd80      	pop	{r7, pc}

0803ad74 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 803ad74:	b580      	push	{r7, lr}
 803ad76:	b084      	sub	sp, #16
 803ad78:	af00      	add	r7, sp, #0
 803ad7a:	60f8      	str	r0, [r7, #12]
 803ad7c:	60b9      	str	r1, [r7, #8]
 803ad7e:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 803ad80:	687a      	ldr	r2, [r7, #4]
 803ad82:	68b9      	ldr	r1, [r7, #8]
 803ad84:	68f8      	ldr	r0, [r7, #12]
 803ad86:	f000 f8a4 	bl	803aed2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>
 803ad8a:	4603      	mov	r3, r0
    }
 803ad8c:	4618      	mov	r0, r3
 803ad8e:	3710      	adds	r7, #16
 803ad90:	46bd      	mov	sp, r7
 803ad92:	bd80      	pop	{r7, pc}

0803ad94 <_ZN9__gnu_cxx14__alloc_traitsISaIjEjE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 803ad94:	b580      	push	{r7, lr}
 803ad96:	b082      	sub	sp, #8
 803ad98:	af00      	add	r7, sp, #0
 803ad9a:	6078      	str	r0, [r7, #4]
 803ad9c:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 803ad9e:	687b      	ldr	r3, [r7, #4]
 803ada0:	6839      	ldr	r1, [r7, #0]
 803ada2:	4618      	mov	r0, r3
 803ada4:	f000 f8b7 	bl	803af16 <_ZNSt16allocator_traitsISaIjEE37select_on_container_copy_constructionERKS0_>
 803ada8:	6878      	ldr	r0, [r7, #4]
 803adaa:	3708      	adds	r7, #8
 803adac:	46bd      	mov	sp, r7
 803adae:	bd80      	pop	{r7, pc}

0803adb0 <_ZNSt11_Deque_baseIjSaIjEEC1ERKS0_j>:
      _Deque_base(const allocator_type& __a, size_t __num_elements)
 803adb0:	b580      	push	{r7, lr}
 803adb2:	b084      	sub	sp, #16
 803adb4:	af00      	add	r7, sp, #0
 803adb6:	60f8      	str	r0, [r7, #12]
 803adb8:	60b9      	str	r1, [r7, #8]
 803adba:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 803adbc:	68fb      	ldr	r3, [r7, #12]
 803adbe:	68b9      	ldr	r1, [r7, #8]
 803adc0:	4618      	mov	r0, r3
 803adc2:	f000 f8c3 	bl	803af4c <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1ERKS0_>
      { _M_initialize_map(__num_elements); }
 803adc6:	6879      	ldr	r1, [r7, #4]
 803adc8:	68f8      	ldr	r0, [r7, #12]
 803adca:	f7fe fed9 	bl	8039b80 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>
 803adce:	68fb      	ldr	r3, [r7, #12]
 803add0:	4618      	mov	r0, r3
 803add2:	3710      	adds	r7, #16
 803add4:	46bd      	mov	sp, r7
 803add6:	bd80      	pop	{r7, pc}

0803add8 <_ZNKSt5dequeIjSaIjEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 803add8:	b580      	push	{r7, lr}
 803adda:	b082      	sub	sp, #8
 803addc:	af00      	add	r7, sp, #0
 803adde:	6078      	str	r0, [r7, #4]
 803ade0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 803ade2:	683b      	ldr	r3, [r7, #0]
 803ade4:	3308      	adds	r3, #8
 803ade6:	4619      	mov	r1, r3
 803ade8:	6878      	ldr	r0, [r7, #4]
 803adea:	f000 f8c1 	bl	803af70 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>
 803adee:	6878      	ldr	r0, [r7, #4]
 803adf0:	3708      	adds	r7, #8
 803adf2:	46bd      	mov	sp, r7
 803adf4:	bd80      	pop	{r7, pc}

0803adf6 <_ZNKSt5dequeIjSaIjEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 803adf6:	b580      	push	{r7, lr}
 803adf8:	b082      	sub	sp, #8
 803adfa:	af00      	add	r7, sp, #0
 803adfc:	6078      	str	r0, [r7, #4]
 803adfe:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 803ae00:	683b      	ldr	r3, [r7, #0]
 803ae02:	3318      	adds	r3, #24
 803ae04:	4619      	mov	r1, r3
 803ae06:	6878      	ldr	r0, [r7, #4]
 803ae08:	f000 f8b2 	bl	803af70 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>
 803ae0c:	6878      	ldr	r0, [r7, #4]
 803ae0e:	3708      	adds	r7, #8
 803ae10:	46bd      	mov	sp, r7
 803ae12:	bd80      	pop	{r7, pc}

0803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 803ae14:	b480      	push	{r7}
 803ae16:	b083      	sub	sp, #12
 803ae18:	af00      	add	r7, sp, #0
 803ae1a:	6078      	str	r0, [r7, #4]
 803ae1c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 803ae1e:	683b      	ldr	r3, [r7, #0]
 803ae20:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 803ae22:	687b      	ldr	r3, [r7, #4]
 803ae24:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 803ae26:	683b      	ldr	r3, [r7, #0]
 803ae28:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 803ae2a:	687b      	ldr	r3, [r7, #4]
 803ae2c:	605a      	str	r2, [r3, #4]
 803ae2e:	683b      	ldr	r3, [r7, #0]
 803ae30:	689a      	ldr	r2, [r3, #8]
 803ae32:	687b      	ldr	r3, [r7, #4]
 803ae34:	609a      	str	r2, [r3, #8]
 803ae36:	683b      	ldr	r3, [r7, #0]
 803ae38:	68da      	ldr	r2, [r3, #12]
 803ae3a:	687b      	ldr	r3, [r7, #4]
 803ae3c:	60da      	str	r2, [r3, #12]
 803ae3e:	687b      	ldr	r3, [r7, #4]
 803ae40:	4618      	mov	r0, r3
 803ae42:	370c      	adds	r7, #12
 803ae44:	46bd      	mov	sp, r7
 803ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ae4a:	4770      	bx	lr

0803ae4c <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIjRKjPS1_ES0_IjRjPjEjET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 803ae4c:	b580      	push	{r7, lr}
 803ae4e:	b090      	sub	sp, #64	; 0x40
 803ae50:	af00      	add	r7, sp, #0
 803ae52:	60f8      	str	r0, [r7, #12]
 803ae54:	60b9      	str	r1, [r7, #8]
 803ae56:	607a      	str	r2, [r7, #4]
 803ae58:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 803ae5a:	f107 0310 	add.w	r3, r7, #16
 803ae5e:	68b9      	ldr	r1, [r7, #8]
 803ae60:	4618      	mov	r0, r3
 803ae62:	f7ff ffd7 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803ae66:	f107 0320 	add.w	r3, r7, #32
 803ae6a:	6879      	ldr	r1, [r7, #4]
 803ae6c:	4618      	mov	r0, r3
 803ae6e:	f7ff ffd1 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803ae72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 803ae76:	6839      	ldr	r1, [r7, #0]
 803ae78:	4618      	mov	r0, r3
 803ae7a:	f7fe f9c6 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 803ae7e:	68f8      	ldr	r0, [r7, #12]
 803ae80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 803ae84:	f107 0220 	add.w	r2, r7, #32
 803ae88:	f107 0110 	add.w	r1, r7, #16
 803ae8c:	f000 f88c 	bl	803afa8 <_ZSt18uninitialized_copyISt15_Deque_iteratorIjRKjPS1_ES0_IjRjPjEET0_T_S9_S8_>
 803ae90:	68f8      	ldr	r0, [r7, #12]
 803ae92:	3740      	adds	r7, #64	; 0x40
 803ae94:	46bd      	mov	sp, r7
 803ae96:	bd80      	pop	{r7, pc}

0803ae98 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 803ae98:	b580      	push	{r7, lr}
 803ae9a:	b086      	sub	sp, #24
 803ae9c:	af00      	add	r7, sp, #0
 803ae9e:	60f8      	str	r0, [r7, #12]
 803aea0:	60b9      	str	r1, [r7, #8]
 803aea2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 803aea4:	68ba      	ldr	r2, [r7, #8]
 803aea6:	68fb      	ldr	r3, [r7, #12]
 803aea8:	1ad3      	subs	r3, r2, r3
 803aeaa:	109b      	asrs	r3, r3, #2
 803aeac:	617b      	str	r3, [r7, #20]
	  if (_Num)
 803aeae:	697b      	ldr	r3, [r7, #20]
 803aeb0:	2b00      	cmp	r3, #0
 803aeb2:	d006      	beq.n	803aec2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 803aeb4:	697b      	ldr	r3, [r7, #20]
 803aeb6:	009b      	lsls	r3, r3, #2
 803aeb8:	461a      	mov	r2, r3
 803aeba:	68f9      	ldr	r1, [r7, #12]
 803aebc:	6878      	ldr	r0, [r7, #4]
 803aebe:	f000 fef1 	bl	803bca4 <memmove>
	  return __result + _Num;
 803aec2:	697b      	ldr	r3, [r7, #20]
 803aec4:	009b      	lsls	r3, r3, #2
 803aec6:	687a      	ldr	r2, [r7, #4]
 803aec8:	4413      	add	r3, r2
	}
 803aeca:	4618      	mov	r0, r3
 803aecc:	3718      	adds	r7, #24
 803aece:	46bd      	mov	sp, r7
 803aed0:	bd80      	pop	{r7, pc}

0803aed2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 803aed2:	b580      	push	{r7, lr}
 803aed4:	b086      	sub	sp, #24
 803aed6:	af00      	add	r7, sp, #0
 803aed8:	60f8      	str	r0, [r7, #12]
 803aeda:	60b9      	str	r1, [r7, #8]
 803aedc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 803aede:	68ba      	ldr	r2, [r7, #8]
 803aee0:	68fb      	ldr	r3, [r7, #12]
 803aee2:	1ad3      	subs	r3, r2, r3
 803aee4:	109b      	asrs	r3, r3, #2
 803aee6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 803aee8:	697b      	ldr	r3, [r7, #20]
 803aeea:	2b00      	cmp	r3, #0
 803aeec:	d00a      	beq.n	803af04 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 803aeee:	697b      	ldr	r3, [r7, #20]
 803aef0:	009b      	lsls	r3, r3, #2
 803aef2:	425b      	negs	r3, r3
 803aef4:	687a      	ldr	r2, [r7, #4]
 803aef6:	18d0      	adds	r0, r2, r3
 803aef8:	697b      	ldr	r3, [r7, #20]
 803aefa:	009b      	lsls	r3, r3, #2
 803aefc:	461a      	mov	r2, r3
 803aefe:	68f9      	ldr	r1, [r7, #12]
 803af00:	f000 fed0 	bl	803bca4 <memmove>
	  return __result - _Num;
 803af04:	697b      	ldr	r3, [r7, #20]
 803af06:	009b      	lsls	r3, r3, #2
 803af08:	425b      	negs	r3, r3
 803af0a:	687a      	ldr	r2, [r7, #4]
 803af0c:	4413      	add	r3, r2
	}
 803af0e:	4618      	mov	r0, r3
 803af10:	3718      	adds	r7, #24
 803af12:	46bd      	mov	sp, r7
 803af14:	bd80      	pop	{r7, pc}

0803af16 <_ZNSt16allocator_traitsISaIjEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 803af16:	b580      	push	{r7, lr}
 803af18:	b082      	sub	sp, #8
 803af1a:	af00      	add	r7, sp, #0
 803af1c:	6078      	str	r0, [r7, #4]
 803af1e:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 803af20:	6839      	ldr	r1, [r7, #0]
 803af22:	6878      	ldr	r0, [r7, #4]
 803af24:	f000 f804 	bl	803af30 <_ZNSaIjEC1ERKS_>
 803af28:	6878      	ldr	r0, [r7, #4]
 803af2a:	3708      	adds	r7, #8
 803af2c:	46bd      	mov	sp, r7
 803af2e:	bd80      	pop	{r7, pc}

0803af30 <_ZNSaIjEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 803af30:	b580      	push	{r7, lr}
 803af32:	b082      	sub	sp, #8
 803af34:	af00      	add	r7, sp, #0
 803af36:	6078      	str	r0, [r7, #4]
 803af38:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 803af3a:	6839      	ldr	r1, [r7, #0]
 803af3c:	6878      	ldr	r0, [r7, #4]
 803af3e:	f000 f85c 	bl	803affa <_ZN9__gnu_cxx13new_allocatorIjEC1ERKS1_>
 803af42:	687b      	ldr	r3, [r7, #4]
 803af44:	4618      	mov	r0, r3
 803af46:	3708      	adds	r7, #8
 803af48:	46bd      	mov	sp, r7
 803af4a:	bd80      	pop	{r7, pc}

0803af4c <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1ERKS0_>:
	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 803af4c:	b580      	push	{r7, lr}
 803af4e:	b082      	sub	sp, #8
 803af50:	af00      	add	r7, sp, #0
 803af52:	6078      	str	r0, [r7, #4]
 803af54:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 803af56:	6839      	ldr	r1, [r7, #0]
 803af58:	6878      	ldr	r0, [r7, #4]
 803af5a:	f7ff ffe9 	bl	803af30 <_ZNSaIjEC1ERKS_>
 803af5e:	687b      	ldr	r3, [r7, #4]
 803af60:	4618      	mov	r0, r3
 803af62:	f7ff f930 	bl	803a1c6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
	{ }
 803af66:	687b      	ldr	r3, [r7, #4]
 803af68:	4618      	mov	r0, r3
 803af6a:	3708      	adds	r7, #8
 803af6c:	46bd      	mov	sp, r7
 803af6e:	bd80      	pop	{r7, pc}

0803af70 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 803af70:	b480      	push	{r7}
 803af72:	b083      	sub	sp, #12
 803af74:	af00      	add	r7, sp, #0
 803af76:	6078      	str	r0, [r7, #4]
 803af78:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 803af7a:	683b      	ldr	r3, [r7, #0]
 803af7c:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 803af7e:	687b      	ldr	r3, [r7, #4]
 803af80:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 803af82:	683b      	ldr	r3, [r7, #0]
 803af84:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 803af86:	687b      	ldr	r3, [r7, #4]
 803af88:	605a      	str	r2, [r3, #4]
 803af8a:	683b      	ldr	r3, [r7, #0]
 803af8c:	689a      	ldr	r2, [r3, #8]
 803af8e:	687b      	ldr	r3, [r7, #4]
 803af90:	609a      	str	r2, [r3, #8]
 803af92:	683b      	ldr	r3, [r7, #0]
 803af94:	68da      	ldr	r2, [r3, #12]
 803af96:	687b      	ldr	r3, [r7, #4]
 803af98:	60da      	str	r2, [r3, #12]
 803af9a:	687b      	ldr	r3, [r7, #4]
 803af9c:	4618      	mov	r0, r3
 803af9e:	370c      	adds	r7, #12
 803afa0:	46bd      	mov	sp, r7
 803afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803afa6:	4770      	bx	lr

0803afa8 <_ZSt18uninitialized_copyISt15_Deque_iteratorIjRKjPS1_ES0_IjRjPjEET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 803afa8:	b580      	push	{r7, lr}
 803afaa:	b092      	sub	sp, #72	; 0x48
 803afac:	af00      	add	r7, sp, #0
 803afae:	60f8      	str	r0, [r7, #12]
 803afb0:	60b9      	str	r1, [r7, #8]
 803afb2:	607a      	str	r2, [r7, #4]
 803afb4:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 803afb6:	2301      	movs	r3, #1
 803afb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 803afbc:	f107 0314 	add.w	r3, r7, #20
 803afc0:	68b9      	ldr	r1, [r7, #8]
 803afc2:	4618      	mov	r0, r3
 803afc4:	f7ff ff26 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803afc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803afcc:	6879      	ldr	r1, [r7, #4]
 803afce:	4618      	mov	r0, r3
 803afd0:	f7ff ff20 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803afd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 803afd8:	6839      	ldr	r1, [r7, #0]
 803afda:	4618      	mov	r0, r3
 803afdc:	f7fe f915 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 803afe0:	68f8      	ldr	r0, [r7, #12]
 803afe2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 803afe6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 803afea:	f107 0114 	add.w	r1, r7, #20
 803afee:	f000 f810 	bl	803b012 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIjRKjPS3_ES2_IjRjPjEEET0_T_SB_SA_>
    }
 803aff2:	68f8      	ldr	r0, [r7, #12]
 803aff4:	3748      	adds	r7, #72	; 0x48
 803aff6:	46bd      	mov	sp, r7
 803aff8:	bd80      	pop	{r7, pc}

0803affa <_ZN9__gnu_cxx13new_allocatorIjEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 803affa:	b480      	push	{r7}
 803affc:	b083      	sub	sp, #12
 803affe:	af00      	add	r7, sp, #0
 803b000:	6078      	str	r0, [r7, #4]
 803b002:	6039      	str	r1, [r7, #0]
 803b004:	687b      	ldr	r3, [r7, #4]
 803b006:	4618      	mov	r0, r3
 803b008:	370c      	adds	r7, #12
 803b00a:	46bd      	mov	sp, r7
 803b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b010:	4770      	bx	lr

0803b012 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIjRKjPS3_ES2_IjRjPjEEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 803b012:	b580      	push	{r7, lr}
 803b014:	b090      	sub	sp, #64	; 0x40
 803b016:	af00      	add	r7, sp, #0
 803b018:	60f8      	str	r0, [r7, #12]
 803b01a:	60b9      	str	r1, [r7, #8]
 803b01c:	607a      	str	r2, [r7, #4]
 803b01e:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 803b020:	f107 0310 	add.w	r3, r7, #16
 803b024:	68b9      	ldr	r1, [r7, #8]
 803b026:	4618      	mov	r0, r3
 803b028:	f7ff fef4 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803b02c:	f107 0320 	add.w	r3, r7, #32
 803b030:	6879      	ldr	r1, [r7, #4]
 803b032:	4618      	mov	r0, r3
 803b034:	f7ff feee 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803b038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 803b03c:	6839      	ldr	r1, [r7, #0]
 803b03e:	4618      	mov	r0, r3
 803b040:	f7fe f8e3 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 803b044:	68f8      	ldr	r0, [r7, #12]
 803b046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 803b04a:	f107 0220 	add.w	r2, r7, #32
 803b04e:	f107 0110 	add.w	r1, r7, #16
 803b052:	f000 f804 	bl	803b05e <_ZSt4copyISt15_Deque_iteratorIjRKjPS1_ES0_IjRjPjEET0_T_S9_S8_>
 803b056:	68f8      	ldr	r0, [r7, #12]
 803b058:	3740      	adds	r7, #64	; 0x40
 803b05a:	46bd      	mov	sp, r7
 803b05c:	bd80      	pop	{r7, pc}

0803b05e <_ZSt4copyISt15_Deque_iteratorIjRKjPS1_ES0_IjRjPjEET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 803b05e:	b580      	push	{r7, lr}
 803b060:	b098      	sub	sp, #96	; 0x60
 803b062:	af00      	add	r7, sp, #0
 803b064:	60f8      	str	r0, [r7, #12]
 803b066:	60b9      	str	r1, [r7, #8]
 803b068:	607a      	str	r2, [r7, #4]
 803b06a:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 803b06c:	f107 0320 	add.w	r3, r7, #32
 803b070:	68b9      	ldr	r1, [r7, #8]
 803b072:	4618      	mov	r0, r3
 803b074:	f7ff fece 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803b078:	f107 0310 	add.w	r3, r7, #16
 803b07c:	f107 0220 	add.w	r2, r7, #32
 803b080:	4611      	mov	r1, r2
 803b082:	4618      	mov	r0, r3
 803b084:	f000 f821 	bl	803b0ca <_ZSt12__miter_baseISt15_Deque_iteratorIjRKjPS1_EET_S5_>
 803b088:	f107 0340 	add.w	r3, r7, #64	; 0x40
 803b08c:	6879      	ldr	r1, [r7, #4]
 803b08e:	4618      	mov	r0, r3
 803b090:	f7ff fec0 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803b094:	f107 0330 	add.w	r3, r7, #48	; 0x30
 803b098:	f107 0240 	add.w	r2, r7, #64	; 0x40
 803b09c:	4611      	mov	r1, r2
 803b09e:	4618      	mov	r0, r3
 803b0a0:	f000 f813 	bl	803b0ca <_ZSt12__miter_baseISt15_Deque_iteratorIjRKjPS1_EET_S5_>
 803b0a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 803b0a8:	6839      	ldr	r1, [r7, #0]
 803b0aa:	4618      	mov	r0, r3
 803b0ac:	f7fe f8ad 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 803b0b0:	68f8      	ldr	r0, [r7, #12]
 803b0b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 803b0b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 803b0ba:	f107 0110 	add.w	r1, r7, #16
 803b0be:	f000 f811 	bl	803b0e4 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIjRKjPS1_ES0_IjRjPjEET1_T0_S9_S8_>
    }
 803b0c2:	68f8      	ldr	r0, [r7, #12]
 803b0c4:	3760      	adds	r7, #96	; 0x60
 803b0c6:	46bd      	mov	sp, r7
 803b0c8:	bd80      	pop	{r7, pc}

0803b0ca <_ZSt12__miter_baseISt15_Deque_iteratorIjRKjPS1_EET_S5_>:
    __miter_base(_Iterator __it)
 803b0ca:	b580      	push	{r7, lr}
 803b0cc:	b082      	sub	sp, #8
 803b0ce:	af00      	add	r7, sp, #0
 803b0d0:	6078      	str	r0, [r7, #4]
 803b0d2:	6039      	str	r1, [r7, #0]
    { return __it; }
 803b0d4:	6839      	ldr	r1, [r7, #0]
 803b0d6:	6878      	ldr	r0, [r7, #4]
 803b0d8:	f7ff fe9c 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803b0dc:	6878      	ldr	r0, [r7, #4]
 803b0de:	3708      	adds	r7, #8
 803b0e0:	46bd      	mov	sp, r7
 803b0e2:	bd80      	pop	{r7, pc}

0803b0e4 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIjRKjPS1_ES0_IjRjPjEET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 803b0e4:	b580      	push	{r7, lr}
 803b0e6:	b0a0      	sub	sp, #128	; 0x80
 803b0e8:	af00      	add	r7, sp, #0
 803b0ea:	60f8      	str	r0, [r7, #12]
 803b0ec:	60b9      	str	r1, [r7, #8]
 803b0ee:	607a      	str	r2, [r7, #4]
 803b0f0:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 803b0f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 803b0f6:	68b9      	ldr	r1, [r7, #8]
 803b0f8:	4618      	mov	r0, r3
 803b0fa:	f7ff fe8b 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803b0fe:	f107 0320 	add.w	r3, r7, #32
 803b102:	f107 0230 	add.w	r2, r7, #48	; 0x30
 803b106:	4611      	mov	r1, r2
 803b108:	4618      	mov	r0, r3
 803b10a:	f000 f831 	bl	803b170 <_ZSt12__niter_baseISt15_Deque_iteratorIjRKjPS1_EET_S5_>
 803b10e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 803b112:	6879      	ldr	r1, [r7, #4]
 803b114:	4618      	mov	r0, r3
 803b116:	f7ff fe7d 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803b11a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 803b11e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 803b122:	4611      	mov	r1, r2
 803b124:	4618      	mov	r0, r3
 803b126:	f000 f823 	bl	803b170 <_ZSt12__niter_baseISt15_Deque_iteratorIjRKjPS1_EET_S5_>
 803b12a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 803b12e:	6839      	ldr	r1, [r7, #0]
 803b130:	4618      	mov	r0, r3
 803b132:	f7fe f86a 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 803b136:	f107 0360 	add.w	r3, r7, #96	; 0x60
 803b13a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 803b13e:	4611      	mov	r1, r2
 803b140:	4618      	mov	r0, r3
 803b142:	f000 f822 	bl	803b18a <_ZSt12__niter_baseISt15_Deque_iteratorIjRjPjEET_S4_>
 803b146:	f107 0010 	add.w	r0, r7, #16
 803b14a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 803b14e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 803b152:	f107 0120 	add.w	r1, r7, #32
 803b156:	f000 f825 	bl	803b1a4 <_ZSt14__copy_move_a1ILb0EjRKjPS0_jESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 803b15a:	68fb      	ldr	r3, [r7, #12]
 803b15c:	f107 0210 	add.w	r2, r7, #16
 803b160:	6839      	ldr	r1, [r7, #0]
 803b162:	4618      	mov	r0, r3
 803b164:	f000 f844 	bl	803b1f0 <_ZSt12__niter_wrapISt15_Deque_iteratorIjRjPjEET_RKS4_S4_>
    }
 803b168:	68f8      	ldr	r0, [r7, #12]
 803b16a:	3780      	adds	r7, #128	; 0x80
 803b16c:	46bd      	mov	sp, r7
 803b16e:	bd80      	pop	{r7, pc}

0803b170 <_ZSt12__niter_baseISt15_Deque_iteratorIjRKjPS1_EET_S5_>:
    __niter_base(_Iterator __it)
 803b170:	b580      	push	{r7, lr}
 803b172:	b082      	sub	sp, #8
 803b174:	af00      	add	r7, sp, #0
 803b176:	6078      	str	r0, [r7, #4]
 803b178:	6039      	str	r1, [r7, #0]
    { return __it; }
 803b17a:	6839      	ldr	r1, [r7, #0]
 803b17c:	6878      	ldr	r0, [r7, #4]
 803b17e:	f7ff fe49 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803b182:	6878      	ldr	r0, [r7, #4]
 803b184:	3708      	adds	r7, #8
 803b186:	46bd      	mov	sp, r7
 803b188:	bd80      	pop	{r7, pc}

0803b18a <_ZSt12__niter_baseISt15_Deque_iteratorIjRjPjEET_S4_>:
    __niter_base(_Iterator __it)
 803b18a:	b580      	push	{r7, lr}
 803b18c:	b082      	sub	sp, #8
 803b18e:	af00      	add	r7, sp, #0
 803b190:	6078      	str	r0, [r7, #4]
 803b192:	6039      	str	r1, [r7, #0]
    { return __it; }
 803b194:	6839      	ldr	r1, [r7, #0]
 803b196:	6878      	ldr	r0, [r7, #4]
 803b198:	f7fe f837 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 803b19c:	6878      	ldr	r0, [r7, #4]
 803b19e:	3708      	adds	r7, #8
 803b1a0:	46bd      	mov	sp, r7
 803b1a2:	bd80      	pop	{r7, pc}

0803b1a4 <_ZSt14__copy_move_a1ILb0EjRKjPS0_jESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 803b1a4:	b580      	push	{r7, lr}
 803b1a6:	b090      	sub	sp, #64	; 0x40
 803b1a8:	af00      	add	r7, sp, #0
 803b1aa:	60f8      	str	r0, [r7, #12]
 803b1ac:	60b9      	str	r1, [r7, #8]
 803b1ae:	607a      	str	r2, [r7, #4]
 803b1b0:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 803b1b2:	f107 0310 	add.w	r3, r7, #16
 803b1b6:	68b9      	ldr	r1, [r7, #8]
 803b1b8:	4618      	mov	r0, r3
 803b1ba:	f7ff fe2b 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803b1be:	f107 0320 	add.w	r3, r7, #32
 803b1c2:	6879      	ldr	r1, [r7, #4]
 803b1c4:	4618      	mov	r0, r3
 803b1c6:	f7ff fe25 	bl	803ae14 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1ERKS3_>
 803b1ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 803b1ce:	6839      	ldr	r1, [r7, #0]
 803b1d0:	4618      	mov	r0, r3
 803b1d2:	f7fe f81a 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 803b1d6:	68f8      	ldr	r0, [r7, #12]
 803b1d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 803b1dc:	f107 0220 	add.w	r2, r7, #32
 803b1e0:	f107 0110 	add.w	r1, r7, #16
 803b1e4:	f000 f812 	bl	803b20c <_ZSt15__copy_move_ditILb0EjRKjPS0_St15_Deque_iteratorIjRjPjEET3_S3_IT0_T1_T2_ESB_S7_>
 803b1e8:	68f8      	ldr	r0, [r7, #12]
 803b1ea:	3740      	adds	r7, #64	; 0x40
 803b1ec:	46bd      	mov	sp, r7
 803b1ee:	bd80      	pop	{r7, pc}

0803b1f0 <_ZSt12__niter_wrapISt15_Deque_iteratorIjRjPjEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 803b1f0:	b580      	push	{r7, lr}
 803b1f2:	b084      	sub	sp, #16
 803b1f4:	af00      	add	r7, sp, #0
 803b1f6:	60f8      	str	r0, [r7, #12]
 803b1f8:	60b9      	str	r1, [r7, #8]
 803b1fa:	607a      	str	r2, [r7, #4]
    { return __res; }
 803b1fc:	6879      	ldr	r1, [r7, #4]
 803b1fe:	68f8      	ldr	r0, [r7, #12]
 803b200:	f7fe f803 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 803b204:	68f8      	ldr	r0, [r7, #12]
 803b206:	3710      	adds	r7, #16
 803b208:	46bd      	mov	sp, r7
 803b20a:	bd80      	pop	{r7, pc}

0803b20c <_ZSt15__copy_move_ditILb0EjRKjPS0_St15_Deque_iteratorIjRjPjEET3_S3_IT0_T1_T2_ESB_S7_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 803b20c:	b5b0      	push	{r4, r5, r7, lr}
 803b20e:	b09e      	sub	sp, #120	; 0x78
 803b210:	af00      	add	r7, sp, #0
 803b212:	60f8      	str	r0, [r7, #12]
 803b214:	60b9      	str	r1, [r7, #8]
 803b216:	607a      	str	r2, [r7, #4]
 803b218:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 803b21a:	68bb      	ldr	r3, [r7, #8]
 803b21c:	68da      	ldr	r2, [r3, #12]
 803b21e:	687b      	ldr	r3, [r7, #4]
 803b220:	68db      	ldr	r3, [r3, #12]
 803b222:	429a      	cmp	r2, r3
 803b224:	d055      	beq.n	803b2d2 <_ZSt15__copy_move_ditILb0EjRKjPS0_St15_Deque_iteratorIjRjPjEET3_S3_IT0_T1_T2_ESB_S7_+0xc6>
	  __result
 803b226:	68bb      	ldr	r3, [r7, #8]
 803b228:	681c      	ldr	r4, [r3, #0]
 803b22a:	68bb      	ldr	r3, [r7, #8]
 803b22c:	689d      	ldr	r5, [r3, #8]
 803b22e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803b232:	6839      	ldr	r1, [r7, #0]
 803b234:	4618      	mov	r0, r3
 803b236:	f7fd ffe8 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 803b23a:	f107 0014 	add.w	r0, r7, #20
 803b23e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803b242:	462a      	mov	r2, r5
 803b244:	4621      	mov	r1, r4
 803b246:	f000 f86d 	bl	803b324 <_ZSt14__copy_move_a1ILb0EPjjEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
 803b24a:	683b      	ldr	r3, [r7, #0]
 803b24c:	461c      	mov	r4, r3
 803b24e:	f107 0314 	add.w	r3, r7, #20
 803b252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 803b254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 803b258:	68bb      	ldr	r3, [r7, #8]
 803b25a:	68db      	ldr	r3, [r3, #12]
 803b25c:	3304      	adds	r3, #4
 803b25e:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 803b260:	687b      	ldr	r3, [r7, #4]
 803b262:	68db      	ldr	r3, [r3, #12]
 803b264:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 803b266:	429a      	cmp	r2, r3
 803b268:	d021      	beq.n	803b2ae <_ZSt15__copy_move_ditILb0EjRKjPS0_St15_Deque_iteratorIjRjPjEET3_S3_IT0_T1_T2_ESB_S7_+0xa2>
	    __result
 803b26a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803b26c:	681d      	ldr	r5, [r3, #0]
 803b26e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803b270:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 803b272:	f000 f898 	bl	803b3a6 <_ZNSt15_Deque_iteratorIjRKjPS0_E14_S_buffer_sizeEv>
 803b276:	4603      	mov	r3, r0
 803b278:	009b      	lsls	r3, r3, #2
	    __result
 803b27a:	441c      	add	r4, r3
 803b27c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 803b280:	6839      	ldr	r1, [r7, #0]
 803b282:	4618      	mov	r0, r3
 803b284:	f7fd ffc1 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 803b288:	f107 0034 	add.w	r0, r7, #52	; 0x34
 803b28c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 803b290:	4622      	mov	r2, r4
 803b292:	4629      	mov	r1, r5
 803b294:	f000 f846 	bl	803b324 <_ZSt14__copy_move_a1ILb0EPjjEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
 803b298:	683b      	ldr	r3, [r7, #0]
 803b29a:	461c      	mov	r4, r3
 803b29c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 803b2a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 803b2a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 803b2a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803b2a8:	3304      	adds	r3, #4
 803b2aa:	677b      	str	r3, [r7, #116]	; 0x74
 803b2ac:	e7d8      	b.n	803b260 <_ZSt15__copy_move_ditILb0EjRKjPS0_St15_Deque_iteratorIjRjPjEET3_S3_IT0_T1_T2_ESB_S7_+0x54>
					      __result);
 803b2ae:	687b      	ldr	r3, [r7, #4]
 803b2b0:	685c      	ldr	r4, [r3, #4]
 803b2b2:	687b      	ldr	r3, [r7, #4]
 803b2b4:	681d      	ldr	r5, [r3, #0]
 803b2b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 803b2ba:	6839      	ldr	r1, [r7, #0]
 803b2bc:	4618      	mov	r0, r3
 803b2be:	f7fd ffa4 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 803b2c2:	68f8      	ldr	r0, [r7, #12]
 803b2c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 803b2c8:	462a      	mov	r2, r5
 803b2ca:	4621      	mov	r1, r4
 803b2cc:	f000 f82a 	bl	803b324 <_ZSt14__copy_move_a1ILb0EPjjEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
    }
 803b2d0:	e010      	b.n	803b2f4 <_ZSt15__copy_move_ditILb0EjRKjPS0_St15_Deque_iteratorIjRjPjEET3_S3_IT0_T1_T2_ESB_S7_+0xe8>
					  __result);
 803b2d2:	68bb      	ldr	r3, [r7, #8]
 803b2d4:	681c      	ldr	r4, [r3, #0]
 803b2d6:	687b      	ldr	r3, [r7, #4]
 803b2d8:	681d      	ldr	r5, [r3, #0]
 803b2da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 803b2de:	6839      	ldr	r1, [r7, #0]
 803b2e0:	4618      	mov	r0, r3
 803b2e2:	f7fd ff92 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 803b2e6:	68f8      	ldr	r0, [r7, #12]
 803b2e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 803b2ec:	462a      	mov	r2, r5
 803b2ee:	4621      	mov	r1, r4
 803b2f0:	f000 f818 	bl	803b324 <_ZSt14__copy_move_a1ILb0EPjjEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>
    }
 803b2f4:	68f8      	ldr	r0, [r7, #12]
 803b2f6:	3778      	adds	r7, #120	; 0x78
 803b2f8:	46bd      	mov	sp, r7
 803b2fa:	bdb0      	pop	{r4, r5, r7, pc}

0803b2fc <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 803b2fc:	b480      	push	{r7}
 803b2fe:	b083      	sub	sp, #12
 803b300:	af00      	add	r7, sp, #0
 803b302:	6078      	str	r0, [r7, #4]
 803b304:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 803b306:	683b      	ldr	r3, [r7, #0]
 803b308:	681a      	ldr	r2, [r3, #0]
 803b30a:	687b      	ldr	r3, [r7, #4]
 803b30c:	681b      	ldr	r3, [r3, #0]
 803b30e:	429a      	cmp	r2, r3
 803b310:	da01      	bge.n	803b316 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 803b312:	683b      	ldr	r3, [r7, #0]
 803b314:	e000      	b.n	803b318 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 803b316:	687b      	ldr	r3, [r7, #4]
    }
 803b318:	4618      	mov	r0, r3
 803b31a:	370c      	adds	r7, #12
 803b31c:	46bd      	mov	sp, r7
 803b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b322:	4770      	bx	lr

0803b324 <_ZSt14__copy_move_a1ILb0EPjjEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 803b324:	b580      	push	{r7, lr}
 803b326:	b088      	sub	sp, #32
 803b328:	af00      	add	r7, sp, #0
 803b32a:	60f8      	str	r0, [r7, #12]
 803b32c:	60b9      	str	r1, [r7, #8]
 803b32e:	607a      	str	r2, [r7, #4]
 803b330:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 803b332:	687a      	ldr	r2, [r7, #4]
 803b334:	68bb      	ldr	r3, [r7, #8]
 803b336:	1ad3      	subs	r3, r2, r3
 803b338:	109b      	asrs	r3, r3, #2
 803b33a:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 803b33c:	697b      	ldr	r3, [r7, #20]
 803b33e:	2b00      	cmp	r3, #0
 803b340:	dd29      	ble.n	803b396 <_ZSt14__copy_move_a1ILb0EPjjEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_+0x72>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 803b342:	683b      	ldr	r3, [r7, #0]
 803b344:	689a      	ldr	r2, [r3, #8]
 803b346:	683b      	ldr	r3, [r7, #0]
 803b348:	681b      	ldr	r3, [r3, #0]
 803b34a:	1ad3      	subs	r3, r2, r3
 803b34c:	109b      	asrs	r3, r3, #2
 803b34e:	61bb      	str	r3, [r7, #24]
 803b350:	f107 0218 	add.w	r2, r7, #24
 803b354:	f107 0314 	add.w	r3, r7, #20
 803b358:	4611      	mov	r1, r2
 803b35a:	4618      	mov	r0, r3
 803b35c:	f7ff ffce 	bl	803b2fc <_ZSt3minIiERKT_S2_S2_>
 803b360:	4603      	mov	r3, r0
	  const difference_type __clen
 803b362:	681b      	ldr	r3, [r3, #0]
 803b364:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 803b366:	69fb      	ldr	r3, [r7, #28]
 803b368:	009b      	lsls	r3, r3, #2
 803b36a:	68ba      	ldr	r2, [r7, #8]
 803b36c:	18d1      	adds	r1, r2, r3
 803b36e:	683b      	ldr	r3, [r7, #0]
 803b370:	681b      	ldr	r3, [r3, #0]
 803b372:	461a      	mov	r2, r3
 803b374:	68b8      	ldr	r0, [r7, #8]
 803b376:	f000 f81e 	bl	803b3b6 <_ZSt14__copy_move_a1ILb0EPjS0_ET1_T0_S2_S1_>
				       __result._M_cur);

	  __first += __clen;
 803b37a:	69fb      	ldr	r3, [r7, #28]
 803b37c:	009b      	lsls	r3, r3, #2
 803b37e:	68ba      	ldr	r2, [r7, #8]
 803b380:	4413      	add	r3, r2
 803b382:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 803b384:	69f9      	ldr	r1, [r7, #28]
 803b386:	6838      	ldr	r0, [r7, #0]
 803b388:	f000 f825 	bl	803b3d6 <_ZNSt15_Deque_iteratorIjRjPjEpLEi>
	  __len -= __clen;
 803b38c:	697a      	ldr	r2, [r7, #20]
 803b38e:	69fb      	ldr	r3, [r7, #28]
 803b390:	1ad3      	subs	r3, r2, r3
 803b392:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 803b394:	e7d2      	b.n	803b33c <_ZSt14__copy_move_a1ILb0EPjjEN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS4_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSA_PSA_EE6__typeES4_S4_SD_+0x18>
	}

      return __result;
 803b396:	6839      	ldr	r1, [r7, #0]
 803b398:	68f8      	ldr	r0, [r7, #12]
 803b39a:	f7fd ff36 	bl	803920a <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
    }
 803b39e:	68f8      	ldr	r0, [r7, #12]
 803b3a0:	3720      	adds	r7, #32
 803b3a2:	46bd      	mov	sp, r7
 803b3a4:	bd80      	pop	{r7, pc}

0803b3a6 <_ZNSt15_Deque_iteratorIjRKjPS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 803b3a6:	b580      	push	{r7, lr}
 803b3a8:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 803b3aa:	2004      	movs	r0, #4
 803b3ac:	f7fa fda6 	bl	8035efc <_ZSt16__deque_buf_sizej>
 803b3b0:	4603      	mov	r3, r0
 803b3b2:	4618      	mov	r0, r3
 803b3b4:	bd80      	pop	{r7, pc}

0803b3b6 <_ZSt14__copy_move_a1ILb0EPjS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 803b3b6:	b580      	push	{r7, lr}
 803b3b8:	b084      	sub	sp, #16
 803b3ba:	af00      	add	r7, sp, #0
 803b3bc:	60f8      	str	r0, [r7, #12]
 803b3be:	60b9      	str	r1, [r7, #8]
 803b3c0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 803b3c2:	687a      	ldr	r2, [r7, #4]
 803b3c4:	68b9      	ldr	r1, [r7, #8]
 803b3c6:	68f8      	ldr	r0, [r7, #12]
 803b3c8:	f000 f85c 	bl	803b484 <_ZSt14__copy_move_a2ILb0EPjS0_ET1_T0_S2_S1_>
 803b3cc:	4603      	mov	r3, r0
 803b3ce:	4618      	mov	r0, r3
 803b3d0:	3710      	adds	r7, #16
 803b3d2:	46bd      	mov	sp, r7
 803b3d4:	bd80      	pop	{r7, pc}

0803b3d6 <_ZNSt15_Deque_iteratorIjRjPjEpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 803b3d6:	b590      	push	{r4, r7, lr}
 803b3d8:	b085      	sub	sp, #20
 803b3da:	af00      	add	r7, sp, #0
 803b3dc:	6078      	str	r0, [r7, #4]
 803b3de:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 803b3e0:	687b      	ldr	r3, [r7, #4]
 803b3e2:	681a      	ldr	r2, [r3, #0]
 803b3e4:	687b      	ldr	r3, [r7, #4]
 803b3e6:	685b      	ldr	r3, [r3, #4]
 803b3e8:	1ad3      	subs	r3, r2, r3
 803b3ea:	109b      	asrs	r3, r3, #2
 803b3ec:	461a      	mov	r2, r3
 803b3ee:	683b      	ldr	r3, [r7, #0]
 803b3f0:	4413      	add	r3, r2
 803b3f2:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 803b3f4:	68fb      	ldr	r3, [r7, #12]
 803b3f6:	2b00      	cmp	r3, #0
 803b3f8:	db08      	blt.n	803b40c <_ZNSt15_Deque_iteratorIjRjPjEpLEi+0x36>
 803b3fa:	f7ff f985 	bl	803a708 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 803b3fe:	4603      	mov	r3, r0
 803b400:	461a      	mov	r2, r3
 803b402:	68fb      	ldr	r3, [r7, #12]
 803b404:	4293      	cmp	r3, r2
 803b406:	da01      	bge.n	803b40c <_ZNSt15_Deque_iteratorIjRjPjEpLEi+0x36>
 803b408:	2301      	movs	r3, #1
 803b40a:	e000      	b.n	803b40e <_ZNSt15_Deque_iteratorIjRjPjEpLEi+0x38>
 803b40c:	2300      	movs	r3, #0
 803b40e:	2b00      	cmp	r3, #0
 803b410:	d007      	beq.n	803b422 <_ZNSt15_Deque_iteratorIjRjPjEpLEi+0x4c>
	  _M_cur += __n;
 803b412:	687b      	ldr	r3, [r7, #4]
 803b414:	681a      	ldr	r2, [r3, #0]
 803b416:	683b      	ldr	r3, [r7, #0]
 803b418:	009b      	lsls	r3, r3, #2
 803b41a:	441a      	add	r2, r3
 803b41c:	687b      	ldr	r3, [r7, #4]
 803b41e:	601a      	str	r2, [r3, #0]
 803b420:	e02b      	b.n	803b47a <_ZNSt15_Deque_iteratorIjRjPjEpLEi+0xa4>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 803b422:	68fb      	ldr	r3, [r7, #12]
 803b424:	2b00      	cmp	r3, #0
 803b426:	dd07      	ble.n	803b438 <_ZNSt15_Deque_iteratorIjRjPjEpLEi+0x62>
 803b428:	f7ff f96e 	bl	803a708 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 803b42c:	4603      	mov	r3, r0
 803b42e:	461a      	mov	r2, r3
 803b430:	68fb      	ldr	r3, [r7, #12]
 803b432:	fb93 f3f2 	sdiv	r3, r3, r2
 803b436:	e007      	b.n	803b448 <_ZNSt15_Deque_iteratorIjRjPjEpLEi+0x72>
			   : -difference_type((-__offset - 1)
 803b438:	68fb      	ldr	r3, [r7, #12]
 803b43a:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 803b43c:	f7ff f964 	bl	803a708 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 803b440:	4603      	mov	r3, r0
 803b442:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 803b446:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 803b448:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 803b44a:	687b      	ldr	r3, [r7, #4]
 803b44c:	68da      	ldr	r2, [r3, #12]
 803b44e:	68bb      	ldr	r3, [r7, #8]
 803b450:	009b      	lsls	r3, r3, #2
 803b452:	4413      	add	r3, r2
 803b454:	4619      	mov	r1, r3
 803b456:	6878      	ldr	r0, [r7, #4]
 803b458:	f7fe fe7d 	bl	803a156 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
	    _M_cur = _M_first + (__offset - __node_offset
 803b45c:	687b      	ldr	r3, [r7, #4]
 803b45e:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 803b460:	f7ff f952 	bl	803a708 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 803b464:	4603      	mov	r3, r0
 803b466:	461a      	mov	r2, r3
 803b468:	68bb      	ldr	r3, [r7, #8]
 803b46a:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 803b46e:	68fa      	ldr	r2, [r7, #12]
 803b470:	1ad3      	subs	r3, r2, r3
 803b472:	009b      	lsls	r3, r3, #2
 803b474:	18e2      	adds	r2, r4, r3
 803b476:	687b      	ldr	r3, [r7, #4]
 803b478:	601a      	str	r2, [r3, #0]
	return *this;
 803b47a:	687b      	ldr	r3, [r7, #4]
      }
 803b47c:	4618      	mov	r0, r3
 803b47e:	3714      	adds	r7, #20
 803b480:	46bd      	mov	sp, r7
 803b482:	bd90      	pop	{r4, r7, pc}

0803b484 <_ZSt14__copy_move_a2ILb0EPjS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 803b484:	b580      	push	{r7, lr}
 803b486:	b084      	sub	sp, #16
 803b488:	af00      	add	r7, sp, #0
 803b48a:	60f8      	str	r0, [r7, #12]
 803b48c:	60b9      	str	r1, [r7, #8]
 803b48e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 803b490:	687a      	ldr	r2, [r7, #4]
 803b492:	68b9      	ldr	r1, [r7, #8]
 803b494:	68f8      	ldr	r0, [r7, #12]
 803b496:	f000 f805 	bl	803b4a4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIjEEPT_PKS3_S6_S4_>
 803b49a:	4603      	mov	r3, r0
    }
 803b49c:	4618      	mov	r0, r3
 803b49e:	3710      	adds	r7, #16
 803b4a0:	46bd      	mov	sp, r7
 803b4a2:	bd80      	pop	{r7, pc}

0803b4a4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIjEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 803b4a4:	b580      	push	{r7, lr}
 803b4a6:	b086      	sub	sp, #24
 803b4a8:	af00      	add	r7, sp, #0
 803b4aa:	60f8      	str	r0, [r7, #12]
 803b4ac:	60b9      	str	r1, [r7, #8]
 803b4ae:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 803b4b0:	68ba      	ldr	r2, [r7, #8]
 803b4b2:	68fb      	ldr	r3, [r7, #12]
 803b4b4:	1ad3      	subs	r3, r2, r3
 803b4b6:	109b      	asrs	r3, r3, #2
 803b4b8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 803b4ba:	697b      	ldr	r3, [r7, #20]
 803b4bc:	2b00      	cmp	r3, #0
 803b4be:	d006      	beq.n	803b4ce <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIjEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 803b4c0:	697b      	ldr	r3, [r7, #20]
 803b4c2:	009b      	lsls	r3, r3, #2
 803b4c4:	461a      	mov	r2, r3
 803b4c6:	68f9      	ldr	r1, [r7, #12]
 803b4c8:	6878      	ldr	r0, [r7, #4]
 803b4ca:	f000 fbeb 	bl	803bca4 <memmove>
	  return __result + _Num;
 803b4ce:	697b      	ldr	r3, [r7, #20]
 803b4d0:	009b      	lsls	r3, r3, #2
 803b4d2:	687a      	ldr	r2, [r7, #4]
 803b4d4:	4413      	add	r3, r2
	}
 803b4d6:	4618      	mov	r0, r3
 803b4d8:	3718      	adds	r7, #24
 803b4da:	46bd      	mov	sp, r7
 803b4dc:	bd80      	pop	{r7, pc}
	...

0803b4e0 <_ZNK4Roki8Messages4Byte9SerializeEPh>:
#include "MbMessages.hpp"

namespace Roki {
namespace Messages {

void Byte::Serialize(uint8_t *ptr) const {
 803b4e0:	b580      	push	{r7, lr}
 803b4e2:	b082      	sub	sp, #8
 803b4e4:	af00      	add	r7, sp, #0
 803b4e6:	6078      	str	r0, [r7, #4]
 803b4e8:	6039      	str	r1, [r7, #0]
  assert(ptr);
 803b4ea:	683b      	ldr	r3, [r7, #0]
 803b4ec:	2b00      	cmp	r3, #0
 803b4ee:	d105      	bne.n	803b4fc <_ZNK4Roki8Messages4Byte9SerializeEPh+0x1c>
 803b4f0:	4b06      	ldr	r3, [pc, #24]	; (803b50c <_ZNK4Roki8Messages4Byte9SerializeEPh+0x2c>)
 803b4f2:	4a07      	ldr	r2, [pc, #28]	; (803b510 <_ZNK4Roki8Messages4Byte9SerializeEPh+0x30>)
 803b4f4:	2107      	movs	r1, #7
 803b4f6:	4807      	ldr	r0, [pc, #28]	; (803b514 <_ZNK4Roki8Messages4Byte9SerializeEPh+0x34>)
 803b4f8:	f000 fb4c 	bl	803bb94 <__assert_func>

  *ptr = Value;
 803b4fc:	687b      	ldr	r3, [r7, #4]
 803b4fe:	781a      	ldrb	r2, [r3, #0]
 803b500:	683b      	ldr	r3, [r7, #0]
 803b502:	701a      	strb	r2, [r3, #0]
}
 803b504:	bf00      	nop
 803b506:	3708      	adds	r7, #8
 803b508:	46bd      	mov	sp, r7
 803b50a:	bd80      	pop	{r7, pc}
 803b50c:	0803ddd0 	.word	0x0803ddd0
 803b510:	0803ddd4 	.word	0x0803ddd4
 803b514:	0803de0c 	.word	0x0803de0c

0803b518 <_ZN4Roki8Messages4Byte11DeserializeEPKh>:

Byte Byte::Deserialize(const uint8_t *ptr) {
 803b518:	b580      	push	{r7, lr}
 803b51a:	b084      	sub	sp, #16
 803b51c:	af00      	add	r7, sp, #0
 803b51e:	6078      	str	r0, [r7, #4]
  assert(ptr);
 803b520:	687b      	ldr	r3, [r7, #4]
 803b522:	2b00      	cmp	r3, #0
 803b524:	d105      	bne.n	803b532 <_ZN4Roki8Messages4Byte11DeserializeEPKh+0x1a>
 803b526:	4b07      	ldr	r3, [pc, #28]	; (803b544 <_ZN4Roki8Messages4Byte11DeserializeEPKh+0x2c>)
 803b528:	4a07      	ldr	r2, [pc, #28]	; (803b548 <_ZN4Roki8Messages4Byte11DeserializeEPKh+0x30>)
 803b52a:	210d      	movs	r1, #13
 803b52c:	4807      	ldr	r0, [pc, #28]	; (803b54c <_ZN4Roki8Messages4Byte11DeserializeEPKh+0x34>)
 803b52e:	f000 fb31 	bl	803bb94 <__assert_func>

  Byte byte;
  byte.Value = *ptr;
 803b532:	687b      	ldr	r3, [r7, #4]
 803b534:	781b      	ldrb	r3, [r3, #0]
 803b536:	733b      	strb	r3, [r7, #12]

  return byte;
 803b538:	7b3b      	ldrb	r3, [r7, #12]
}
 803b53a:	4618      	mov	r0, r3
 803b53c:	3710      	adds	r7, #16
 803b53e:	46bd      	mov	sp, r7
 803b540:	bd80      	pop	{r7, pc}
 803b542:	bf00      	nop
 803b544:	0803ddd0 	.word	0x0803ddd0
 803b548:	0803de34 	.word	0x0803de34
 803b54c:	0803de0c 	.word	0x0803de0c

0803b550 <_ZNK4Roki8Messages4Byte13GetPackedSizeEv>:

size_t Byte::GetPackedSize() const { return 1; }
 803b550:	b480      	push	{r7}
 803b552:	b083      	sub	sp, #12
 803b554:	af00      	add	r7, sp, #0
 803b556:	6078      	str	r0, [r7, #4]
 803b558:	2301      	movs	r3, #1
 803b55a:	4618      	mov	r0, r3
 803b55c:	370c      	adds	r7, #12
 803b55e:	46bd      	mov	sp, r7
 803b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b564:	4770      	bx	lr
	...

0803b568 <_ZNK4Roki8Messages5Empty9SerializeEPh>:

void Empty::Serialize(uint8_t *ptr) const { assert(ptr); }
 803b568:	b580      	push	{r7, lr}
 803b56a:	b082      	sub	sp, #8
 803b56c:	af00      	add	r7, sp, #0
 803b56e:	6078      	str	r0, [r7, #4]
 803b570:	6039      	str	r1, [r7, #0]
 803b572:	683b      	ldr	r3, [r7, #0]
 803b574:	2b00      	cmp	r3, #0
 803b576:	d105      	bne.n	803b584 <_ZNK4Roki8Messages5Empty9SerializeEPh+0x1c>
 803b578:	4b04      	ldr	r3, [pc, #16]	; (803b58c <_ZNK4Roki8Messages5Empty9SerializeEPh+0x24>)
 803b57a:	4a05      	ldr	r2, [pc, #20]	; (803b590 <_ZNK4Roki8Messages5Empty9SerializeEPh+0x28>)
 803b57c:	2117      	movs	r1, #23
 803b57e:	4805      	ldr	r0, [pc, #20]	; (803b594 <_ZNK4Roki8Messages5Empty9SerializeEPh+0x2c>)
 803b580:	f000 fb08 	bl	803bb94 <__assert_func>
 803b584:	bf00      	nop
 803b586:	3708      	adds	r7, #8
 803b588:	46bd      	mov	sp, r7
 803b58a:	bd80      	pop	{r7, pc}
 803b58c:	0803ddd0 	.word	0x0803ddd0
 803b590:	0803de84 	.word	0x0803de84
 803b594:	0803de0c 	.word	0x0803de0c

0803b598 <_ZN4Roki8Messages5Empty11DeserializeEPKh>:

Empty Empty::Deserialize(const uint8_t *ptr) {
 803b598:	b580      	push	{r7, lr}
 803b59a:	b082      	sub	sp, #8
 803b59c:	af00      	add	r7, sp, #0
 803b59e:	6078      	str	r0, [r7, #4]
  assert(ptr);
 803b5a0:	687b      	ldr	r3, [r7, #4]
 803b5a2:	2b00      	cmp	r3, #0
 803b5a4:	d105      	bne.n	803b5b2 <_ZN4Roki8Messages5Empty11DeserializeEPKh+0x1a>
 803b5a6:	4b05      	ldr	r3, [pc, #20]	; (803b5bc <_ZN4Roki8Messages5Empty11DeserializeEPKh+0x24>)
 803b5a8:	4a05      	ldr	r2, [pc, #20]	; (803b5c0 <_ZN4Roki8Messages5Empty11DeserializeEPKh+0x28>)
 803b5aa:	211a      	movs	r1, #26
 803b5ac:	4805      	ldr	r0, [pc, #20]	; (803b5c4 <_ZN4Roki8Messages5Empty11DeserializeEPKh+0x2c>)
 803b5ae:	f000 faf1 	bl	803bb94 <__assert_func>
  return {};
 803b5b2:	bf00      	nop
}
 803b5b4:	4610      	mov	r0, r2
 803b5b6:	3708      	adds	r7, #8
 803b5b8:	46bd      	mov	sp, r7
 803b5ba:	bd80      	pop	{r7, pc}
 803b5bc:	0803ddd0 	.word	0x0803ddd0
 803b5c0:	0803debc 	.word	0x0803debc
 803b5c4:	0803de0c 	.word	0x0803de0c

0803b5c8 <_ZNK4Roki8Messages5Empty13GetPackedSizeEv>:

size_t Empty::GetPackedSize() const { return 0; }
 803b5c8:	b480      	push	{r7}
 803b5ca:	b083      	sub	sp, #12
 803b5cc:	af00      	add	r7, sp, #0
 803b5ce:	6078      	str	r0, [r7, #4]
 803b5d0:	2300      	movs	r3, #0
 803b5d2:	4618      	mov	r0, r3
 803b5d4:	370c      	adds	r7, #12
 803b5d6:	46bd      	mov	sp, r7
 803b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b5dc:	4770      	bx	lr
	...

0803b5e0 <_ZNK4Roki8Messages11IMUFrameMsg9SerializeEPh>:

void IMUFrameMsg::Serialize(uint8_t *ptr) const {
 803b5e0:	b580      	push	{r7, lr}
 803b5e2:	b084      	sub	sp, #16
 803b5e4:	af00      	add	r7, sp, #0
 803b5e6:	6078      	str	r0, [r7, #4]
 803b5e8:	6039      	str	r1, [r7, #0]
  assert(ptr);
 803b5ea:	683b      	ldr	r3, [r7, #0]
 803b5ec:	2b00      	cmp	r3, #0
 803b5ee:	d105      	bne.n	803b5fc <_ZNK4Roki8Messages11IMUFrameMsg9SerializeEPh+0x1c>
 803b5f0:	4b21      	ldr	r3, [pc, #132]	; (803b678 <_ZNK4Roki8Messages11IMUFrameMsg9SerializeEPh+0x98>)
 803b5f2:	4a22      	ldr	r2, [pc, #136]	; (803b67c <_ZNK4Roki8Messages11IMUFrameMsg9SerializeEPh+0x9c>)
 803b5f4:	2121      	movs	r1, #33	; 0x21
 803b5f6:	4822      	ldr	r0, [pc, #136]	; (803b680 <_ZNK4Roki8Messages11IMUFrameMsg9SerializeEPh+0xa0>)
 803b5f8:	f000 facc 	bl	803bb94 <__assert_func>
  auto &qt = Orientation;
 803b5fc:	687b      	ldr	r3, [r7, #4]
 803b5fe:	60fb      	str	r3, [r7, #12]
  auto &ts = Timestamp;
 803b600:	687b      	ldr	r3, [r7, #4]
 803b602:	3308      	adds	r3, #8
 803b604:	60bb      	str	r3, [r7, #8]

  *reinterpret_cast<int16_t *>(ptr) = qt.X;
 803b606:	68fb      	ldr	r3, [r7, #12]
 803b608:	f9b3 2000 	ldrsh.w	r2, [r3]
 803b60c:	683b      	ldr	r3, [r7, #0]
 803b60e:	801a      	strh	r2, [r3, #0]
  ptr += sizeof(int16_t);
 803b610:	683b      	ldr	r3, [r7, #0]
 803b612:	3302      	adds	r3, #2
 803b614:	603b      	str	r3, [r7, #0]

  *reinterpret_cast<int16_t *>(ptr) = qt.Y;
 803b616:	68fb      	ldr	r3, [r7, #12]
 803b618:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 803b61c:	683b      	ldr	r3, [r7, #0]
 803b61e:	801a      	strh	r2, [r3, #0]
  ptr += sizeof(int16_t);
 803b620:	683b      	ldr	r3, [r7, #0]
 803b622:	3302      	adds	r3, #2
 803b624:	603b      	str	r3, [r7, #0]

  *reinterpret_cast<int16_t *>(ptr) = qt.Z;
 803b626:	68fb      	ldr	r3, [r7, #12]
 803b628:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 803b62c:	683b      	ldr	r3, [r7, #0]
 803b62e:	801a      	strh	r2, [r3, #0]
  ptr += sizeof(int16_t);
 803b630:	683b      	ldr	r3, [r7, #0]
 803b632:	3302      	adds	r3, #2
 803b634:	603b      	str	r3, [r7, #0]

  *reinterpret_cast<int16_t *>(ptr) = qt.W;
 803b636:	68fb      	ldr	r3, [r7, #12]
 803b638:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 803b63c:	683b      	ldr	r3, [r7, #0]
 803b63e:	801a      	strh	r2, [r3, #0]
  ptr += sizeof(int16_t);
 803b640:	683b      	ldr	r3, [r7, #0]
 803b642:	3302      	adds	r3, #2
 803b644:	603b      	str	r3, [r7, #0]

  *reinterpret_cast<uint32_t *>(ptr) = ts.TimeS;
 803b646:	68bb      	ldr	r3, [r7, #8]
 803b648:	681a      	ldr	r2, [r3, #0]
 803b64a:	683b      	ldr	r3, [r7, #0]
 803b64c:	601a      	str	r2, [r3, #0]
  ptr += sizeof(uint32_t);
 803b64e:	683b      	ldr	r3, [r7, #0]
 803b650:	3304      	adds	r3, #4
 803b652:	603b      	str	r3, [r7, #0]

  *reinterpret_cast<uint32_t *>(ptr) = ts.TimeNS;
 803b654:	68bb      	ldr	r3, [r7, #8]
 803b656:	685a      	ldr	r2, [r3, #4]
 803b658:	683b      	ldr	r3, [r7, #0]
 803b65a:	601a      	str	r2, [r3, #0]
  ptr += sizeof(uint32_t);
 803b65c:	683b      	ldr	r3, [r7, #0]
 803b65e:	3304      	adds	r3, #4
 803b660:	603b      	str	r3, [r7, #0]

  *reinterpret_cast<uint8_t *>(ptr) = SensorID;
 803b662:	687b      	ldr	r3, [r7, #4]
 803b664:	7c1a      	ldrb	r2, [r3, #16]
 803b666:	683b      	ldr	r3, [r7, #0]
 803b668:	701a      	strb	r2, [r3, #0]
  ptr += sizeof(uint8_t);
 803b66a:	683b      	ldr	r3, [r7, #0]
 803b66c:	3301      	adds	r3, #1
 803b66e:	603b      	str	r3, [r7, #0]
}
 803b670:	bf00      	nop
 803b672:	3710      	adds	r7, #16
 803b674:	46bd      	mov	sp, r7
 803b676:	bd80      	pop	{r7, pc}
 803b678:	0803ddd0 	.word	0x0803ddd0
 803b67c:	0803df0c 	.word	0x0803df0c
 803b680:	0803de0c 	.word	0x0803de0c

0803b684 <_ZNK4Roki8Messages11IMUFrameMsg13GetPackedSizeEv>:
  ptr += sizeof(uint8_t);

  return fr;
}

size_t IMUFrameMsg::GetPackedSize() const {
 803b684:	b480      	push	{r7}
 803b686:	b083      	sub	sp, #12
 803b688:	af00      	add	r7, sp, #0
 803b68a:	6078      	str	r0, [r7, #4]
  return 4 * sizeof(int16_t) + 2 * sizeof(uint32_t) + sizeof(uint8_t);
 803b68c:	2311      	movs	r3, #17
}
 803b68e:	4618      	mov	r0, r3
 803b690:	370c      	adds	r7, #12
 803b692:	46bd      	mov	sp, r7
 803b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b698:	4770      	bx	lr
	...

0803b69c <_ZNK4Roki8Messages18FrameContainerInfo9SerializeEPh>:

void FrameContainerInfo::Serialize(uint8_t *ptr) const {
 803b69c:	b580      	push	{r7, lr}
 803b69e:	b082      	sub	sp, #8
 803b6a0:	af00      	add	r7, sp, #0
 803b6a2:	6078      	str	r0, [r7, #4]
 803b6a4:	6039      	str	r1, [r7, #0]
  assert(ptr);
 803b6a6:	683b      	ldr	r3, [r7, #0]
 803b6a8:	2b00      	cmp	r3, #0
 803b6aa:	d105      	bne.n	803b6b8 <_ZNK4Roki8Messages18FrameContainerInfo9SerializeEPh+0x1c>
 803b6ac:	4b0f      	ldr	r3, [pc, #60]	; (803b6ec <_ZNK4Roki8Messages18FrameContainerInfo9SerializeEPh+0x50>)
 803b6ae:	4a10      	ldr	r2, [pc, #64]	; (803b6f0 <_ZNK4Roki8Messages18FrameContainerInfo9SerializeEPh+0x54>)
 803b6b0:	2162      	movs	r1, #98	; 0x62
 803b6b2:	4810      	ldr	r0, [pc, #64]	; (803b6f4 <_ZNK4Roki8Messages18FrameContainerInfo9SerializeEPh+0x58>)
 803b6b4:	f000 fa6e 	bl	803bb94 <__assert_func>

  *reinterpret_cast<uint16_t *>(ptr) = First;
 803b6b8:	687b      	ldr	r3, [r7, #4]
 803b6ba:	881a      	ldrh	r2, [r3, #0]
 803b6bc:	683b      	ldr	r3, [r7, #0]
 803b6be:	801a      	strh	r2, [r3, #0]
  ptr += sizeof(uint16_t);
 803b6c0:	683b      	ldr	r3, [r7, #0]
 803b6c2:	3302      	adds	r3, #2
 803b6c4:	603b      	str	r3, [r7, #0]

  *reinterpret_cast<uint16_t *>(ptr) = NumAv;
 803b6c6:	687b      	ldr	r3, [r7, #4]
 803b6c8:	885a      	ldrh	r2, [r3, #2]
 803b6ca:	683b      	ldr	r3, [r7, #0]
 803b6cc:	801a      	strh	r2, [r3, #0]
  ptr += sizeof(uint16_t);
 803b6ce:	683b      	ldr	r3, [r7, #0]
 803b6d0:	3302      	adds	r3, #2
 803b6d2:	603b      	str	r3, [r7, #0]

  *reinterpret_cast<uint16_t *>(ptr) = MaxFrames;
 803b6d4:	687b      	ldr	r3, [r7, #4]
 803b6d6:	889a      	ldrh	r2, [r3, #4]
 803b6d8:	683b      	ldr	r3, [r7, #0]
 803b6da:	801a      	strh	r2, [r3, #0]
  ptr += sizeof(uint16_t);
 803b6dc:	683b      	ldr	r3, [r7, #0]
 803b6de:	3302      	adds	r3, #2
 803b6e0:	603b      	str	r3, [r7, #0]
}
 803b6e2:	bf00      	nop
 803b6e4:	3708      	adds	r7, #8
 803b6e6:	46bd      	mov	sp, r7
 803b6e8:	bd80      	pop	{r7, pc}
 803b6ea:	bf00      	nop
 803b6ec:	0803ddd0 	.word	0x0803ddd0
 803b6f0:	0803dfa4 	.word	0x0803dfa4
 803b6f4:	0803de0c 	.word	0x0803de0c

0803b6f8 <_ZNK4Roki8Messages18FrameContainerInfo13GetPackedSizeEv>:
  ptr += sizeof(uint16_t);

  return info;
}

size_t FrameContainerInfo::GetPackedSize() const {
 803b6f8:	b480      	push	{r7}
 803b6fa:	b083      	sub	sp, #12
 803b6fc:	af00      	add	r7, sp, #0
 803b6fe:	6078      	str	r0, [r7, #4]
  return 3 * sizeof(uint16_t);
 803b700:	2306      	movs	r3, #6
}
 803b702:	4618      	mov	r0, r3
 803b704:	370c      	adds	r7, #12
 803b706:	46bd      	mov	sp, r7
 803b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b70c:	4770      	bx	lr
	...

0803b710 <_ZN4Roki8Messages11FrameNumber11DeserializeEPKh>:
void FrameNumber::Serialize(uint8_t *ptr) const {
  assert(ptr);
  *reinterpret_cast<uint16_t *>(ptr) = Seq;
}

FrameNumber FrameNumber::Deserialize(const uint8_t *ptr) {
 803b710:	b580      	push	{r7, lr}
 803b712:	b084      	sub	sp, #16
 803b714:	af00      	add	r7, sp, #0
 803b716:	6078      	str	r0, [r7, #4]
  assert(ptr);
 803b718:	687b      	ldr	r3, [r7, #4]
 803b71a:	2b00      	cmp	r3, #0
 803b71c:	d105      	bne.n	803b72a <_ZN4Roki8Messages11FrameNumber11DeserializeEPKh+0x1a>
 803b71e:	4b07      	ldr	r3, [pc, #28]	; (803b73c <_ZN4Roki8Messages11FrameNumber11DeserializeEPKh+0x2c>)
 803b720:	4a07      	ldr	r2, [pc, #28]	; (803b740 <_ZN4Roki8Messages11FrameNumber11DeserializeEPKh+0x30>)
 803b722:	2189      	movs	r1, #137	; 0x89
 803b724:	4807      	ldr	r0, [pc, #28]	; (803b744 <_ZN4Roki8Messages11FrameNumber11DeserializeEPKh+0x34>)
 803b726:	f000 fa35 	bl	803bb94 <__assert_func>
  FrameNumber seq;
  seq.Seq = *reinterpret_cast<const uint16_t *>(ptr);
 803b72a:	687b      	ldr	r3, [r7, #4]
 803b72c:	881b      	ldrh	r3, [r3, #0]
 803b72e:	81bb      	strh	r3, [r7, #12]

  return seq;
 803b730:	89bb      	ldrh	r3, [r7, #12]
}
 803b732:	4618      	mov	r0, r3
 803b734:	3710      	adds	r7, #16
 803b736:	46bd      	mov	sp, r7
 803b738:	bd80      	pop	{r7, pc}
 803b73a:	bf00      	nop
 803b73c:	0803ddd0 	.word	0x0803ddd0
 803b740:	0803e090 	.word	0x0803e090
 803b744:	0803de0c 	.word	0x0803de0c

0803b748 <_ZNK4Roki8Messages11FrameNumber13GetPackedSizeEv>:

size_t FrameNumber::GetPackedSize() const { return sizeof(uint16_t); }
 803b748:	b480      	push	{r7}
 803b74a:	b083      	sub	sp, #12
 803b74c:	af00      	add	r7, sp, #0
 803b74e:	6078      	str	r0, [r7, #4]
 803b750:	2302      	movs	r3, #2
 803b752:	4618      	mov	r0, r3
 803b754:	370c      	adds	r7, #12
 803b756:	46bd      	mov	sp, r7
 803b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b75c:	4770      	bx	lr
	...

0803b760 <_ZN4Roki8Messages18StrobeFilterConfig11DeserializeEPKh>:
  assert(ptr);
  ptr[0] = TargetDuration;
  ptr[1] = DurationThreshold;
}

StrobeFilterConfig StrobeFilterConfig::Deserialize(const uint8_t *ptr) {
 803b760:	b580      	push	{r7, lr}
 803b762:	b084      	sub	sp, #16
 803b764:	af00      	add	r7, sp, #0
 803b766:	6078      	str	r0, [r7, #4]
  assert(ptr);
 803b768:	687b      	ldr	r3, [r7, #4]
 803b76a:	2b00      	cmp	r3, #0
 803b76c:	d105      	bne.n	803b77a <_ZN4Roki8Messages18StrobeFilterConfig11DeserializeEPKh+0x1a>
 803b76e:	4b0d      	ldr	r3, [pc, #52]	; (803b7a4 <_ZN4Roki8Messages18StrobeFilterConfig11DeserializeEPKh+0x44>)
 803b770:	4a0d      	ldr	r2, [pc, #52]	; (803b7a8 <_ZN4Roki8Messages18StrobeFilterConfig11DeserializeEPKh+0x48>)
 803b772:	2199      	movs	r1, #153	; 0x99
 803b774:	480d      	ldr	r0, [pc, #52]	; (803b7ac <_ZN4Roki8Messages18StrobeFilterConfig11DeserializeEPKh+0x4c>)
 803b776:	f000 fa0d 	bl	803bb94 <__assert_func>

  StrobeFilterConfig conf;
  conf.TargetDuration = ptr[0];
 803b77a:	687b      	ldr	r3, [r7, #4]
 803b77c:	781b      	ldrb	r3, [r3, #0]
 803b77e:	723b      	strb	r3, [r7, #8]
  conf.DurationThreshold = ptr[1];
 803b780:	687b      	ldr	r3, [r7, #4]
 803b782:	3301      	adds	r3, #1
 803b784:	781b      	ldrb	r3, [r3, #0]
 803b786:	727b      	strb	r3, [r7, #9]

  return conf;
 803b788:	893b      	ldrh	r3, [r7, #8]
 803b78a:	81bb      	strh	r3, [r7, #12]
 803b78c:	2300      	movs	r3, #0
 803b78e:	7b3a      	ldrb	r2, [r7, #12]
 803b790:	f362 0307 	bfi	r3, r2, #0, #8
 803b794:	7b7a      	ldrb	r2, [r7, #13]
 803b796:	f362 230f 	bfi	r3, r2, #8, #8
}
 803b79a:	4618      	mov	r0, r3
 803b79c:	3710      	adds	r7, #16
 803b79e:	46bd      	mov	sp, r7
 803b7a0:	bd80      	pop	{r7, pc}
 803b7a2:	bf00      	nop
 803b7a4:	0803ddd0 	.word	0x0803ddd0
 803b7a8:	0803e130 	.word	0x0803e130
 803b7ac:	0803de0c 	.word	0x0803de0c

0803b7b0 <_ZNK4Roki8Messages18StrobeFilterConfig13GetPackedSizeEv>:

size_t StrobeFilterConfig::GetPackedSize() const { return 2 * sizeof(uint8_t); }
 803b7b0:	b480      	push	{r7}
 803b7b2:	b083      	sub	sp, #12
 803b7b4:	af00      	add	r7, sp, #0
 803b7b6:	6078      	str	r0, [r7, #4]
 803b7b8:	2302      	movs	r3, #2
 803b7ba:	4618      	mov	r0, r3
 803b7bc:	370c      	adds	r7, #12
 803b7be:	46bd      	mov	sp, r7
 803b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b7c4:	4770      	bx	lr
	...

0803b7c8 <_ZNK4Roki8Messages7Version9SerializeEPh>:

void Version::Serialize(uint8_t *ptr) const {
 803b7c8:	b580      	push	{r7, lr}
 803b7ca:	b082      	sub	sp, #8
 803b7cc:	af00      	add	r7, sp, #0
 803b7ce:	6078      	str	r0, [r7, #4]
 803b7d0:	6039      	str	r1, [r7, #0]
  assert(ptr);
 803b7d2:	683b      	ldr	r3, [r7, #0]
 803b7d4:	2b00      	cmp	r3, #0
 803b7d6:	d105      	bne.n	803b7e4 <_ZNK4Roki8Messages7Version9SerializeEPh+0x1c>
 803b7d8:	4b09      	ldr	r3, [pc, #36]	; (803b800 <_ZNK4Roki8Messages7Version9SerializeEPh+0x38>)
 803b7da:	4a0a      	ldr	r2, [pc, #40]	; (803b804 <_ZNK4Roki8Messages7Version9SerializeEPh+0x3c>)
 803b7dc:	21a5      	movs	r1, #165	; 0xa5
 803b7de:	480a      	ldr	r0, [pc, #40]	; (803b808 <_ZNK4Roki8Messages7Version9SerializeEPh+0x40>)
 803b7e0:	f000 f9d8 	bl	803bb94 <__assert_func>

  ptr[0] = Major;
 803b7e4:	687b      	ldr	r3, [r7, #4]
 803b7e6:	781a      	ldrb	r2, [r3, #0]
 803b7e8:	683b      	ldr	r3, [r7, #0]
 803b7ea:	701a      	strb	r2, [r3, #0]
  ptr[1] = Minor;
 803b7ec:	683b      	ldr	r3, [r7, #0]
 803b7ee:	3301      	adds	r3, #1
 803b7f0:	687a      	ldr	r2, [r7, #4]
 803b7f2:	7852      	ldrb	r2, [r2, #1]
 803b7f4:	701a      	strb	r2, [r3, #0]
}
 803b7f6:	bf00      	nop
 803b7f8:	3708      	adds	r7, #8
 803b7fa:	46bd      	mov	sp, r7
 803b7fc:	bd80      	pop	{r7, pc}
 803b7fe:	bf00      	nop
 803b800:	0803ddd0 	.word	0x0803ddd0
 803b804:	0803e19c 	.word	0x0803e19c
 803b808:	0803de0c 	.word	0x0803de0c

0803b80c <_ZNK4Roki8Messages7Version13GetPackedSizeEv>:
  version.Minor = ptr[1];

  return version;
}

size_t Version::GetPackedSize() const { return 2 * sizeof(uint8_t); }
 803b80c:	b480      	push	{r7}
 803b80e:	b083      	sub	sp, #12
 803b810:	af00      	add	r7, sp, #0
 803b812:	6078      	str	r0, [r7, #4]
 803b814:	2302      	movs	r3, #2
 803b816:	4618      	mov	r0, r3
 803b818:	370c      	adds	r7, #12
 803b81a:	46bd      	mov	sp, r7
 803b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b820:	4770      	bx	lr
	...

0803b824 <_ZNK4Roki8Messages13BodyQueueInfo9SerializeEPh>:

void BodyQueueInfo::Serialize(uint8_t *ptr) const {
 803b824:	b580      	push	{r7, lr}
 803b826:	b082      	sub	sp, #8
 803b828:	af00      	add	r7, sp, #0
 803b82a:	6078      	str	r0, [r7, #4]
 803b82c:	6039      	str	r1, [r7, #0]
  assert(ptr);
 803b82e:	683b      	ldr	r3, [r7, #0]
 803b830:	2b00      	cmp	r3, #0
 803b832:	d105      	bne.n	803b840 <_ZNK4Roki8Messages13BodyQueueInfo9SerializeEPh+0x1c>
 803b834:	4b0b      	ldr	r3, [pc, #44]	; (803b864 <_ZNK4Roki8Messages13BodyQueueInfo9SerializeEPh+0x40>)
 803b836:	4a0c      	ldr	r2, [pc, #48]	; (803b868 <_ZNK4Roki8Messages13BodyQueueInfo9SerializeEPh+0x44>)
 803b838:	21b7      	movs	r1, #183	; 0xb7
 803b83a:	480c      	ldr	r0, [pc, #48]	; (803b86c <_ZNK4Roki8Messages13BodyQueueInfo9SerializeEPh+0x48>)
 803b83c:	f000 f9aa 	bl	803bb94 <__assert_func>

  *reinterpret_cast<uint16_t *>(ptr) = Size;
 803b840:	687b      	ldr	r3, [r7, #4]
 803b842:	881a      	ldrh	r2, [r3, #0]
 803b844:	683b      	ldr	r3, [r7, #0]
 803b846:	801a      	strh	r2, [r3, #0]
  ptr += sizeof(uint16_t);
 803b848:	683b      	ldr	r3, [r7, #0]
 803b84a:	3302      	adds	r3, #2
 803b84c:	603b      	str	r3, [r7, #0]

  *reinterpret_cast<uint16_t *>(ptr) = Capacity;
 803b84e:	687b      	ldr	r3, [r7, #4]
 803b850:	885a      	ldrh	r2, [r3, #2]
 803b852:	683b      	ldr	r3, [r7, #0]
 803b854:	801a      	strh	r2, [r3, #0]
  ptr += sizeof(uint16_t);
 803b856:	683b      	ldr	r3, [r7, #0]
 803b858:	3302      	adds	r3, #2
 803b85a:	603b      	str	r3, [r7, #0]
}
 803b85c:	bf00      	nop
 803b85e:	3708      	adds	r7, #8
 803b860:	46bd      	mov	sp, r7
 803b862:	bd80      	pop	{r7, pc}
 803b864:	0803ddd0 	.word	0x0803ddd0
 803b868:	0803e228 	.word	0x0803e228
 803b86c:	0803de0c 	.word	0x0803de0c

0803b870 <_ZNK4Roki8Messages13BodyQueueInfo13GetPackedSizeEv>:
  ptr += sizeof(uint16_t);

  return info;
}

size_t BodyQueueInfo::GetPackedSize() const { return 2 * sizeof(uint16_t); }
 803b870:	b480      	push	{r7}
 803b872:	b083      	sub	sp, #12
 803b874:	af00      	add	r7, sp, #0
 803b876:	6078      	str	r0, [r7, #4]
 803b878:	2304      	movs	r3, #4
 803b87a:	4618      	mov	r0, r3
 803b87c:	370c      	adds	r7, #12
 803b87e:	46bd      	mov	sp, r7
 803b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b884:	4770      	bx	lr
	...

0803b888 <_ZN4Roki8Messages8PeriodMs11DeserializeEPKh>:
void PeriodMs::Serialize(uint8_t *ptr) const {
  assert(ptr);
  *ptr = Ms;
}

PeriodMs PeriodMs::Deserialize(const uint8_t *ptr) {
 803b888:	b580      	push	{r7, lr}
 803b88a:	b084      	sub	sp, #16
 803b88c:	af00      	add	r7, sp, #0
 803b88e:	6078      	str	r0, [r7, #4]
  assert(ptr);
 803b890:	687b      	ldr	r3, [r7, #4]
 803b892:	2b00      	cmp	r3, #0
 803b894:	d105      	bne.n	803b8a2 <_ZN4Roki8Messages8PeriodMs11DeserializeEPKh+0x1a>
 803b896:	4b07      	ldr	r3, [pc, #28]	; (803b8b4 <_ZN4Roki8Messages8PeriodMs11DeserializeEPKh+0x2c>)
 803b898:	4a07      	ldr	r2, [pc, #28]	; (803b8b8 <_ZN4Roki8Messages8PeriodMs11DeserializeEPKh+0x30>)
 803b89a:	21d6      	movs	r1, #214	; 0xd6
 803b89c:	4807      	ldr	r0, [pc, #28]	; (803b8bc <_ZN4Roki8Messages8PeriodMs11DeserializeEPKh+0x34>)
 803b89e:	f000 f979 	bl	803bb94 <__assert_func>
  PeriodMs period;

  period.Ms = *ptr;
 803b8a2:	687b      	ldr	r3, [r7, #4]
 803b8a4:	781b      	ldrb	r3, [r3, #0]
 803b8a6:	733b      	strb	r3, [r7, #12]

  return period;
 803b8a8:	7b3b      	ldrb	r3, [r7, #12]
}
 803b8aa:	4618      	mov	r0, r3
 803b8ac:	3710      	adds	r7, #16
 803b8ae:	46bd      	mov	sp, r7
 803b8b0:	bd80      	pop	{r7, pc}
 803b8b2:	bf00      	nop
 803b8b4:	0803ddd0 	.word	0x0803ddd0
 803b8b8:	0803e304 	.word	0x0803e304
 803b8bc:	0803de0c 	.word	0x0803de0c

0803b8c0 <_ZNK4Roki8Messages8PeriodMs13GetPackedSizeEv>:

size_t PeriodMs::GetPackedSize() const { return sizeof(uint8_t); }
 803b8c0:	b480      	push	{r7}
 803b8c2:	b083      	sub	sp, #12
 803b8c4:	af00      	add	r7, sp, #0
 803b8c6:	6078      	str	r0, [r7, #4]
 803b8c8:	2301      	movs	r3, #1
 803b8ca:	4618      	mov	r0, r3
 803b8cc:	370c      	adds	r7, #12
 803b8ce:	46bd      	mov	sp, r7
 803b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b8d4:	4770      	bx	lr
	...

0803b8d8 <_ZN4Roki8Messages11BodyRequest11DeserializeEPKh>:
  ptr[1] = ResponceSize;

  memcpy(ptr + 2, Data, RequestSize);
}

BodyRequest BodyRequest::Deserialize(const uint8_t *ptr) {
 803b8d8:	b580      	push	{r7, lr}
 803b8da:	b082      	sub	sp, #8
 803b8dc:	af00      	add	r7, sp, #0
 803b8de:	6078      	str	r0, [r7, #4]
 803b8e0:	6039      	str	r1, [r7, #0]
  assert(ptr);
 803b8e2:	683b      	ldr	r3, [r7, #0]
 803b8e4:	2b00      	cmp	r3, #0
 803b8e6:	d105      	bne.n	803b8f4 <_ZN4Roki8Messages11BodyRequest11DeserializeEPKh+0x1c>
 803b8e8:	4b0b      	ldr	r3, [pc, #44]	; (803b918 <_ZN4Roki8Messages11BodyRequest11DeserializeEPKh+0x40>)
 803b8ea:	4a0c      	ldr	r2, [pc, #48]	; (803b91c <_ZN4Roki8Messages11BodyRequest11DeserializeEPKh+0x44>)
 803b8ec:	21e9      	movs	r1, #233	; 0xe9
 803b8ee:	480c      	ldr	r0, [pc, #48]	; (803b920 <_ZN4Roki8Messages11BodyRequest11DeserializeEPKh+0x48>)
 803b8f0:	f000 f950 	bl	803bb94 <__assert_func>
  BodyRequest request;

  request.RequestSize = ptr[0];
 803b8f4:	683b      	ldr	r3, [r7, #0]
 803b8f6:	781a      	ldrb	r2, [r3, #0]
 803b8f8:	687b      	ldr	r3, [r7, #4]
 803b8fa:	711a      	strb	r2, [r3, #4]
  request.ResponceSize = ptr[1];
 803b8fc:	683b      	ldr	r3, [r7, #0]
 803b8fe:	3301      	adds	r3, #1
 803b900:	781a      	ldrb	r2, [r3, #0]
 803b902:	687b      	ldr	r3, [r7, #4]
 803b904:	715a      	strb	r2, [r3, #5]

  request.Data = ptr + 2;
 803b906:	683b      	ldr	r3, [r7, #0]
 803b908:	1c9a      	adds	r2, r3, #2
 803b90a:	687b      	ldr	r3, [r7, #4]
 803b90c:	601a      	str	r2, [r3, #0]

  return request;
 803b90e:	bf00      	nop
}
 803b910:	6878      	ldr	r0, [r7, #4]
 803b912:	3708      	adds	r7, #8
 803b914:	46bd      	mov	sp, r7
 803b916:	bd80      	pop	{r7, pc}
 803b918:	0803ddd0 	.word	0x0803ddd0
 803b91c:	0803e398 	.word	0x0803e398
 803b920:	0803de0c 	.word	0x0803de0c

0803b924 <_ZNK4Roki8Messages11BodyRequest13GetPackedSizeEv>:

size_t BodyRequest::GetPackedSize() const {
 803b924:	b480      	push	{r7}
 803b926:	b083      	sub	sp, #12
 803b928:	af00      	add	r7, sp, #0
 803b92a:	6078      	str	r0, [r7, #4]
  return (2 + RequestSize) * sizeof(uint8_t);
 803b92c:	687b      	ldr	r3, [r7, #4]
 803b92e:	791b      	ldrb	r3, [r3, #4]
 803b930:	3302      	adds	r3, #2
}
 803b932:	4618      	mov	r0, r3
 803b934:	370c      	adds	r7, #12
 803b936:	46bd      	mov	sp, r7
 803b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b93c:	4770      	bx	lr
	...

0803b940 <_ZNK4Roki8Messages12BodyResponce9SerializeEPh>:

void BodyResponce::Serialize(uint8_t *ptr) const {
 803b940:	b580      	push	{r7, lr}
 803b942:	b082      	sub	sp, #8
 803b944:	af00      	add	r7, sp, #0
 803b946:	6078      	str	r0, [r7, #4]
 803b948:	6039      	str	r1, [r7, #0]
  assert(ptr);
 803b94a:	683b      	ldr	r3, [r7, #0]
 803b94c:	2b00      	cmp	r3, #0
 803b94e:	d105      	bne.n	803b95c <_ZNK4Roki8Messages12BodyResponce9SerializeEPh+0x1c>
 803b950:	4b0b      	ldr	r3, [pc, #44]	; (803b980 <_ZNK4Roki8Messages12BodyResponce9SerializeEPh+0x40>)
 803b952:	4a0c      	ldr	r2, [pc, #48]	; (803b984 <_ZNK4Roki8Messages12BodyResponce9SerializeEPh+0x44>)
 803b954:	21f9      	movs	r1, #249	; 0xf9
 803b956:	480c      	ldr	r0, [pc, #48]	; (803b988 <_ZNK4Roki8Messages12BodyResponce9SerializeEPh+0x48>)
 803b958:	f000 f91c 	bl	803bb94 <__assert_func>
  ptr[0] = ResponceSize;
 803b95c:	687b      	ldr	r3, [r7, #4]
 803b95e:	791a      	ldrb	r2, [r3, #4]
 803b960:	683b      	ldr	r3, [r7, #0]
 803b962:	701a      	strb	r2, [r3, #0]
  memcpy(ptr + 1, Data, ResponceSize);
 803b964:	683b      	ldr	r3, [r7, #0]
 803b966:	1c58      	adds	r0, r3, #1
 803b968:	687b      	ldr	r3, [r7, #4]
 803b96a:	6819      	ldr	r1, [r3, #0]
 803b96c:	687b      	ldr	r3, [r7, #4]
 803b96e:	791b      	ldrb	r3, [r3, #4]
 803b970:	461a      	mov	r2, r3
 803b972:	f000 f989 	bl	803bc88 <memcpy>
}
 803b976:	bf00      	nop
 803b978:	3708      	adds	r7, #8
 803b97a:	46bd      	mov	sp, r7
 803b97c:	bd80      	pop	{r7, pc}
 803b97e:	bf00      	nop
 803b980:	0803ddd0 	.word	0x0803ddd0
 803b984:	0803e3f4 	.word	0x0803e3f4
 803b988:	0803de0c 	.word	0x0803de0c

0803b98c <_ZNK4Roki8Messages12BodyResponce13GetPackedSizeEv>:
  responce.Data = ptr + 1;

  return responce;
}

size_t BodyResponce::GetPackedSize() const {
 803b98c:	b480      	push	{r7}
 803b98e:	b083      	sub	sp, #12
 803b990:	af00      	add	r7, sp, #0
 803b992:	6078      	str	r0, [r7, #4]
  return (1 + ResponceSize) * sizeof(uint8_t);
 803b994:	687b      	ldr	r3, [r7, #4]
 803b996:	791b      	ldrb	r3, [r3, #4]
 803b998:	3301      	adds	r3, #1
}
 803b99a:	4618      	mov	r0, r3
 803b99c:	370c      	adds	r7, #12
 803b99e:	46bd      	mov	sp, r7
 803b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b9a4:	4770      	bx	lr

0803b9a6 <_ZN4Roki9MbService11ProcedureID11DeserializeEh>:
#include "MbService.hpp"

namespace Roki {

uint8_t MbService::ProcedureID::Serialize(Type id) { return id; }
auto MbService::ProcedureID::Deserialize(uint8_t val) -> Type { return val; }
 803b9a6:	b480      	push	{r7}
 803b9a8:	b083      	sub	sp, #12
 803b9aa:	af00      	add	r7, sp, #0
 803b9ac:	4603      	mov	r3, r0
 803b9ae:	71fb      	strb	r3, [r7, #7]
 803b9b0:	79fb      	ldrb	r3, [r7, #7]
 803b9b2:	4618      	mov	r0, r3
 803b9b4:	370c      	adds	r7, #12
 803b9b6:	46bd      	mov	sp, r7
 803b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b9bc:	4770      	bx	lr

0803b9be <_ZN4Roki9MbService10ErrorCodes9SerializeEh>:

uint8_t MbService::ErrorCodes::Serialize(Type err) { return err; }
 803b9be:	b480      	push	{r7}
 803b9c0:	b083      	sub	sp, #12
 803b9c2:	af00      	add	r7, sp, #0
 803b9c4:	4603      	mov	r3, r0
 803b9c6:	71fb      	strb	r3, [r7, #7]
 803b9c8:	79fb      	ldrb	r3, [r7, #7]
 803b9ca:	4618      	mov	r0, r3
 803b9cc:	370c      	adds	r7, #12
 803b9ce:	46bd      	mov	sp, r7
 803b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b9d4:	4770      	bx	lr

0803b9d6 <_ZdlPvj>:
 803b9d6:	f000 b8ca 	b.w	803bb6e <_ZdlPv>

0803b9da <_Znwj>:
 803b9da:	2801      	cmp	r0, #1
 803b9dc:	bf38      	it	cc
 803b9de:	2001      	movcc	r0, #1
 803b9e0:	b510      	push	{r4, lr}
 803b9e2:	4604      	mov	r4, r0
 803b9e4:	4620      	mov	r0, r4
 803b9e6:	f000 f92f 	bl	803bc48 <malloc>
 803b9ea:	b930      	cbnz	r0, 803b9fa <_Znwj+0x20>
 803b9ec:	f000 f8c2 	bl	803bb74 <_ZSt15get_new_handlerv>
 803b9f0:	b908      	cbnz	r0, 803b9f6 <_Znwj+0x1c>
 803b9f2:	f000 f8c7 	bl	803bb84 <abort>
 803b9f6:	4780      	blx	r0
 803b9f8:	e7f4      	b.n	803b9e4 <_Znwj+0xa>
 803b9fa:	bd10      	pop	{r4, pc}

0803b9fc <_ZSt17__throw_bad_allocv>:
 803b9fc:	b508      	push	{r3, lr}
 803b9fe:	f000 f8c1 	bl	803bb84 <abort>

0803ba02 <_ZSt19__throw_logic_errorPKc>:
 803ba02:	b508      	push	{r3, lr}
 803ba04:	f000 f8be 	bl	803bb84 <abort>

0803ba08 <_ZSt20__throw_length_errorPKc>:
 803ba08:	b508      	push	{r3, lr}
 803ba0a:	f000 f8bb 	bl	803bb84 <abort>

0803ba0e <_ZSt24__throw_out_of_range_fmtPKcz>:
 803ba0e:	b40f      	push	{r0, r1, r2, r3}
 803ba10:	b580      	push	{r7, lr}
 803ba12:	b084      	sub	sp, #16
 803ba14:	af00      	add	r7, sp, #0
 803ba16:	f107 0418 	add.w	r4, r7, #24
 803ba1a:	f854 2b04 	ldr.w	r2, [r4], #4
 803ba1e:	607a      	str	r2, [r7, #4]
 803ba20:	4610      	mov	r0, r2
 803ba22:	f7e4 fc5d 	bl	80202e0 <strlen>
 803ba26:	f200 2307 	addw	r3, r0, #519	; 0x207
 803ba2a:	f023 0307 	bic.w	r3, r3, #7
 803ba2e:	ebad 0d03 	sub.w	sp, sp, r3
 803ba32:	f500 7100 	add.w	r1, r0, #512	; 0x200
 803ba36:	687a      	ldr	r2, [r7, #4]
 803ba38:	60fc      	str	r4, [r7, #12]
 803ba3a:	4623      	mov	r3, r4
 803ba3c:	4668      	mov	r0, sp
 803ba3e:	f000 f855 	bl	803baec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 803ba42:	f000 f89f 	bl	803bb84 <abort>
	...

0803ba48 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 803ba48:	b580      	push	{r7, lr}
 803ba4a:	b09c      	sub	sp, #112	; 0x70
 803ba4c:	4606      	mov	r6, r0
 803ba4e:	af00      	add	r7, sp, #0
 803ba50:	460c      	mov	r4, r1
 803ba52:	1ba4      	subs	r4, r4, r6
 803ba54:	490e      	ldr	r1, [pc, #56]	; (803ba90 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 803ba56:	2269      	movs	r2, #105	; 0x69
 803ba58:	1d38      	adds	r0, r7, #4
 803ba5a:	f000 f915 	bl	803bc88 <memcpy>
 803ba5e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 803ba62:	f023 0307 	bic.w	r3, r3, #7
 803ba66:	ebad 0d03 	sub.w	sp, sp, r3
 803ba6a:	466d      	mov	r5, sp
 803ba6c:	2268      	movs	r2, #104	; 0x68
 803ba6e:	1d39      	adds	r1, r7, #4
 803ba70:	4628      	mov	r0, r5
 803ba72:	f000 f909 	bl	803bc88 <memcpy>
 803ba76:	4622      	mov	r2, r4
 803ba78:	4631      	mov	r1, r6
 803ba7a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 803ba7e:	442c      	add	r4, r5
 803ba80:	f000 f902 	bl	803bc88 <memcpy>
 803ba84:	2300      	movs	r3, #0
 803ba86:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 803ba8a:	4628      	mov	r0, r5
 803ba8c:	f7ff ffb9 	bl	803ba02 <_ZSt19__throw_logic_errorPKc>
 803ba90:	08058b4c 	.word	0x08058b4c

0803ba94 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 803ba94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803ba98:	af00      	add	r7, sp, #0
 803ba9a:	b084      	sub	sp, #16
 803ba9c:	466d      	mov	r5, sp
 803ba9e:	f105 040c 	add.w	r4, r5, #12
 803baa2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 803bae8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 803baa6:	4623      	mov	r3, r4
 803baa8:	f04f 0c0a 	mov.w	ip, #10
 803baac:	fbb2 f6fc 	udiv	r6, r2, ip
 803bab0:	fb0c 2e16 	mls	lr, ip, r6, r2
 803bab4:	f818 e00e 	ldrb.w	lr, [r8, lr]
 803bab8:	f803 ed01 	strb.w	lr, [r3, #-1]!
 803babc:	4696      	mov	lr, r2
 803babe:	f1be 0f09 	cmp.w	lr, #9
 803bac2:	4632      	mov	r2, r6
 803bac4:	d8f2      	bhi.n	803baac <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 803bac6:	1ae4      	subs	r4, r4, r3
 803bac8:	428c      	cmp	r4, r1
 803baca:	d809      	bhi.n	803bae0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 803bacc:	f1c4 030c 	rsb	r3, r4, #12
 803bad0:	4622      	mov	r2, r4
 803bad2:	18e9      	adds	r1, r5, r3
 803bad4:	f000 f8d8 	bl	803bc88 <memcpy>
 803bad8:	4620      	mov	r0, r4
 803bada:	46bd      	mov	sp, r7
 803badc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803bae0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803bae4:	e7f8      	b.n	803bad8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 803bae6:	bf00      	nop
 803bae8:	08058bb5 	.word	0x08058bb5

0803baec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 803baec:	3901      	subs	r1, #1
 803baee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803baf2:	4607      	mov	r7, r0
 803baf4:	4615      	mov	r5, r2
 803baf6:	eb00 0801 	add.w	r8, r0, r1
 803bafa:	4604      	mov	r4, r0
 803bafc:	782a      	ldrb	r2, [r5, #0]
 803bafe:	b392      	cbz	r2, 803bb66 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 803bb00:	4544      	cmp	r4, r8
 803bb02:	d22a      	bcs.n	803bb5a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 803bb04:	2a25      	cmp	r2, #37	; 0x25
 803bb06:	d107      	bne.n	803bb18 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 803bb08:	786a      	ldrb	r2, [r5, #1]
 803bb0a:	2a73      	cmp	r2, #115	; 0x73
 803bb0c:	d009      	beq.n	803bb22 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 803bb0e:	2a7a      	cmp	r2, #122	; 0x7a
 803bb10:	d012      	beq.n	803bb38 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 803bb12:	2a25      	cmp	r2, #37	; 0x25
 803bb14:	d100      	bne.n	803bb18 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 803bb16:	3501      	adds	r5, #1
 803bb18:	f815 2b01 	ldrb.w	r2, [r5], #1
 803bb1c:	f804 2b01 	strb.w	r2, [r4], #1
 803bb20:	e7ec      	b.n	803bafc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 803bb22:	f853 2b04 	ldr.w	r2, [r3], #4
 803bb26:	3a01      	subs	r2, #1
 803bb28:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 803bb2c:	b1c9      	cbz	r1, 803bb62 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 803bb2e:	4544      	cmp	r4, r8
 803bb30:	d013      	beq.n	803bb5a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 803bb32:	f804 1b01 	strb.w	r1, [r4], #1
 803bb36:	e7f7      	b.n	803bb28 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 803bb38:	78aa      	ldrb	r2, [r5, #2]
 803bb3a:	2a75      	cmp	r2, #117	; 0x75
 803bb3c:	d1ec      	bne.n	803bb18 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 803bb3e:	461e      	mov	r6, r3
 803bb40:	eba8 0104 	sub.w	r1, r8, r4
 803bb44:	f856 2b04 	ldr.w	r2, [r6], #4
 803bb48:	4620      	mov	r0, r4
 803bb4a:	f7ff ffa3 	bl	803ba94 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 803bb4e:	2800      	cmp	r0, #0
 803bb50:	dd03      	ble.n	803bb5a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 803bb52:	4404      	add	r4, r0
 803bb54:	3503      	adds	r5, #3
 803bb56:	4633      	mov	r3, r6
 803bb58:	e7d0      	b.n	803bafc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 803bb5a:	4621      	mov	r1, r4
 803bb5c:	4638      	mov	r0, r7
 803bb5e:	f7ff ff73 	bl	803ba48 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 803bb62:	3502      	adds	r5, #2
 803bb64:	e7ca      	b.n	803bafc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 803bb66:	7022      	strb	r2, [r4, #0]
 803bb68:	1be0      	subs	r0, r4, r7
 803bb6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0803bb6e <_ZdlPv>:
 803bb6e:	f000 b873 	b.w	803bc58 <free>
	...

0803bb74 <_ZSt15get_new_handlerv>:
 803bb74:	4b02      	ldr	r3, [pc, #8]	; (803bb80 <_ZSt15get_new_handlerv+0xc>)
 803bb76:	6818      	ldr	r0, [r3, #0]
 803bb78:	f3bf 8f5b 	dmb	ish
 803bb7c:	4770      	bx	lr
 803bb7e:	bf00      	nop
 803bb80:	24038798 	.word	0x24038798

0803bb84 <abort>:
 803bb84:	b508      	push	{r3, lr}
 803bb86:	2006      	movs	r0, #6
 803bb88:	f000 fcb4 	bl	803c4f4 <raise>
 803bb8c:	2001      	movs	r0, #1
 803bb8e:	f7e5 fbdf 	bl	8021350 <_exit>
	...

0803bb94 <__assert_func>:
 803bb94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803bb96:	4614      	mov	r4, r2
 803bb98:	461a      	mov	r2, r3
 803bb9a:	4b09      	ldr	r3, [pc, #36]	; (803bbc0 <__assert_func+0x2c>)
 803bb9c:	681b      	ldr	r3, [r3, #0]
 803bb9e:	4605      	mov	r5, r0
 803bba0:	68d8      	ldr	r0, [r3, #12]
 803bba2:	b14c      	cbz	r4, 803bbb8 <__assert_func+0x24>
 803bba4:	4b07      	ldr	r3, [pc, #28]	; (803bbc4 <__assert_func+0x30>)
 803bba6:	9100      	str	r1, [sp, #0]
 803bba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803bbac:	4906      	ldr	r1, [pc, #24]	; (803bbc8 <__assert_func+0x34>)
 803bbae:	462b      	mov	r3, r5
 803bbb0:	f000 f814 	bl	803bbdc <fiprintf>
 803bbb4:	f7ff ffe6 	bl	803bb84 <abort>
 803bbb8:	4b04      	ldr	r3, [pc, #16]	; (803bbcc <__assert_func+0x38>)
 803bbba:	461c      	mov	r4, r3
 803bbbc:	e7f3      	b.n	803bba6 <__assert_func+0x12>
 803bbbe:	bf00      	nop
 803bbc0:	24000104 	.word	0x24000104
 803bbc4:	08058bc0 	.word	0x08058bc0
 803bbc8:	08058bcd 	.word	0x08058bcd
 803bbcc:	08058bfb 	.word	0x08058bfb

0803bbd0 <__errno>:
 803bbd0:	4b01      	ldr	r3, [pc, #4]	; (803bbd8 <__errno+0x8>)
 803bbd2:	6818      	ldr	r0, [r3, #0]
 803bbd4:	4770      	bx	lr
 803bbd6:	bf00      	nop
 803bbd8:	24000104 	.word	0x24000104

0803bbdc <fiprintf>:
 803bbdc:	b40e      	push	{r1, r2, r3}
 803bbde:	b503      	push	{r0, r1, lr}
 803bbe0:	4601      	mov	r1, r0
 803bbe2:	ab03      	add	r3, sp, #12
 803bbe4:	4805      	ldr	r0, [pc, #20]	; (803bbfc <fiprintf+0x20>)
 803bbe6:	f853 2b04 	ldr.w	r2, [r3], #4
 803bbea:	6800      	ldr	r0, [r0, #0]
 803bbec:	9301      	str	r3, [sp, #4]
 803bbee:	f000 f985 	bl	803befc <_vfiprintf_r>
 803bbf2:	b002      	add	sp, #8
 803bbf4:	f85d eb04 	ldr.w	lr, [sp], #4
 803bbf8:	b003      	add	sp, #12
 803bbfa:	4770      	bx	lr
 803bbfc:	24000104 	.word	0x24000104

0803bc00 <__libc_init_array>:
 803bc00:	b570      	push	{r4, r5, r6, lr}
 803bc02:	4d0d      	ldr	r5, [pc, #52]	; (803bc38 <__libc_init_array+0x38>)
 803bc04:	4c0d      	ldr	r4, [pc, #52]	; (803bc3c <__libc_init_array+0x3c>)
 803bc06:	1b64      	subs	r4, r4, r5
 803bc08:	10a4      	asrs	r4, r4, #2
 803bc0a:	2600      	movs	r6, #0
 803bc0c:	42a6      	cmp	r6, r4
 803bc0e:	d109      	bne.n	803bc24 <__libc_init_array+0x24>
 803bc10:	4d0b      	ldr	r5, [pc, #44]	; (803bc40 <__libc_init_array+0x40>)
 803bc12:	4c0c      	ldr	r4, [pc, #48]	; (803bc44 <__libc_init_array+0x44>)
 803bc14:	f001 f822 	bl	803cc5c <_init>
 803bc18:	1b64      	subs	r4, r4, r5
 803bc1a:	10a4      	asrs	r4, r4, #2
 803bc1c:	2600      	movs	r6, #0
 803bc1e:	42a6      	cmp	r6, r4
 803bc20:	d105      	bne.n	803bc2e <__libc_init_array+0x2e>
 803bc22:	bd70      	pop	{r4, r5, r6, pc}
 803bc24:	f855 3b04 	ldr.w	r3, [r5], #4
 803bc28:	4798      	blx	r3
 803bc2a:	3601      	adds	r6, #1
 803bc2c:	e7ee      	b.n	803bc0c <__libc_init_array+0xc>
 803bc2e:	f855 3b04 	ldr.w	r3, [r5], #4
 803bc32:	4798      	blx	r3
 803bc34:	3601      	adds	r6, #1
 803bc36:	e7f2      	b.n	803bc1e <__libc_init_array+0x1e>
 803bc38:	08058c9c 	.word	0x08058c9c
 803bc3c:	08058c9c 	.word	0x08058c9c
 803bc40:	08058c9c 	.word	0x08058c9c
 803bc44:	08058ca0 	.word	0x08058ca0

0803bc48 <malloc>:
 803bc48:	4b02      	ldr	r3, [pc, #8]	; (803bc54 <malloc+0xc>)
 803bc4a:	4601      	mov	r1, r0
 803bc4c:	6818      	ldr	r0, [r3, #0]
 803bc4e:	f000 b8b7 	b.w	803bdc0 <_malloc_r>
 803bc52:	bf00      	nop
 803bc54:	24000104 	.word	0x24000104

0803bc58 <free>:
 803bc58:	4b02      	ldr	r3, [pc, #8]	; (803bc64 <free+0xc>)
 803bc5a:	4601      	mov	r1, r0
 803bc5c:	6818      	ldr	r0, [r3, #0]
 803bc5e:	f000 b843 	b.w	803bce8 <_free_r>
 803bc62:	bf00      	nop
 803bc64:	24000104 	.word	0x24000104

0803bc68 <memcmp>:
 803bc68:	b510      	push	{r4, lr}
 803bc6a:	3901      	subs	r1, #1
 803bc6c:	4402      	add	r2, r0
 803bc6e:	4290      	cmp	r0, r2
 803bc70:	d101      	bne.n	803bc76 <memcmp+0xe>
 803bc72:	2000      	movs	r0, #0
 803bc74:	e005      	b.n	803bc82 <memcmp+0x1a>
 803bc76:	7803      	ldrb	r3, [r0, #0]
 803bc78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 803bc7c:	42a3      	cmp	r3, r4
 803bc7e:	d001      	beq.n	803bc84 <memcmp+0x1c>
 803bc80:	1b18      	subs	r0, r3, r4
 803bc82:	bd10      	pop	{r4, pc}
 803bc84:	3001      	adds	r0, #1
 803bc86:	e7f2      	b.n	803bc6e <memcmp+0x6>

0803bc88 <memcpy>:
 803bc88:	440a      	add	r2, r1
 803bc8a:	4291      	cmp	r1, r2
 803bc8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 803bc90:	d100      	bne.n	803bc94 <memcpy+0xc>
 803bc92:	4770      	bx	lr
 803bc94:	b510      	push	{r4, lr}
 803bc96:	f811 4b01 	ldrb.w	r4, [r1], #1
 803bc9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 803bc9e:	4291      	cmp	r1, r2
 803bca0:	d1f9      	bne.n	803bc96 <memcpy+0xe>
 803bca2:	bd10      	pop	{r4, pc}

0803bca4 <memmove>:
 803bca4:	4288      	cmp	r0, r1
 803bca6:	b510      	push	{r4, lr}
 803bca8:	eb01 0402 	add.w	r4, r1, r2
 803bcac:	d902      	bls.n	803bcb4 <memmove+0x10>
 803bcae:	4284      	cmp	r4, r0
 803bcb0:	4623      	mov	r3, r4
 803bcb2:	d807      	bhi.n	803bcc4 <memmove+0x20>
 803bcb4:	1e43      	subs	r3, r0, #1
 803bcb6:	42a1      	cmp	r1, r4
 803bcb8:	d008      	beq.n	803bccc <memmove+0x28>
 803bcba:	f811 2b01 	ldrb.w	r2, [r1], #1
 803bcbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 803bcc2:	e7f8      	b.n	803bcb6 <memmove+0x12>
 803bcc4:	4402      	add	r2, r0
 803bcc6:	4601      	mov	r1, r0
 803bcc8:	428a      	cmp	r2, r1
 803bcca:	d100      	bne.n	803bcce <memmove+0x2a>
 803bccc:	bd10      	pop	{r4, pc}
 803bcce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803bcd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803bcd6:	e7f7      	b.n	803bcc8 <memmove+0x24>

0803bcd8 <memset>:
 803bcd8:	4402      	add	r2, r0
 803bcda:	4603      	mov	r3, r0
 803bcdc:	4293      	cmp	r3, r2
 803bcde:	d100      	bne.n	803bce2 <memset+0xa>
 803bce0:	4770      	bx	lr
 803bce2:	f803 1b01 	strb.w	r1, [r3], #1
 803bce6:	e7f9      	b.n	803bcdc <memset+0x4>

0803bce8 <_free_r>:
 803bce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803bcea:	2900      	cmp	r1, #0
 803bcec:	d044      	beq.n	803bd78 <_free_r+0x90>
 803bcee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803bcf2:	9001      	str	r0, [sp, #4]
 803bcf4:	2b00      	cmp	r3, #0
 803bcf6:	f1a1 0404 	sub.w	r4, r1, #4
 803bcfa:	bfb8      	it	lt
 803bcfc:	18e4      	addlt	r4, r4, r3
 803bcfe:	f000 fef5 	bl	803caec <__malloc_lock>
 803bd02:	4a1e      	ldr	r2, [pc, #120]	; (803bd7c <_free_r+0x94>)
 803bd04:	9801      	ldr	r0, [sp, #4]
 803bd06:	6813      	ldr	r3, [r2, #0]
 803bd08:	b933      	cbnz	r3, 803bd18 <_free_r+0x30>
 803bd0a:	6063      	str	r3, [r4, #4]
 803bd0c:	6014      	str	r4, [r2, #0]
 803bd0e:	b003      	add	sp, #12
 803bd10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803bd14:	f000 bef0 	b.w	803caf8 <__malloc_unlock>
 803bd18:	42a3      	cmp	r3, r4
 803bd1a:	d908      	bls.n	803bd2e <_free_r+0x46>
 803bd1c:	6825      	ldr	r5, [r4, #0]
 803bd1e:	1961      	adds	r1, r4, r5
 803bd20:	428b      	cmp	r3, r1
 803bd22:	bf01      	itttt	eq
 803bd24:	6819      	ldreq	r1, [r3, #0]
 803bd26:	685b      	ldreq	r3, [r3, #4]
 803bd28:	1949      	addeq	r1, r1, r5
 803bd2a:	6021      	streq	r1, [r4, #0]
 803bd2c:	e7ed      	b.n	803bd0a <_free_r+0x22>
 803bd2e:	461a      	mov	r2, r3
 803bd30:	685b      	ldr	r3, [r3, #4]
 803bd32:	b10b      	cbz	r3, 803bd38 <_free_r+0x50>
 803bd34:	42a3      	cmp	r3, r4
 803bd36:	d9fa      	bls.n	803bd2e <_free_r+0x46>
 803bd38:	6811      	ldr	r1, [r2, #0]
 803bd3a:	1855      	adds	r5, r2, r1
 803bd3c:	42a5      	cmp	r5, r4
 803bd3e:	d10b      	bne.n	803bd58 <_free_r+0x70>
 803bd40:	6824      	ldr	r4, [r4, #0]
 803bd42:	4421      	add	r1, r4
 803bd44:	1854      	adds	r4, r2, r1
 803bd46:	42a3      	cmp	r3, r4
 803bd48:	6011      	str	r1, [r2, #0]
 803bd4a:	d1e0      	bne.n	803bd0e <_free_r+0x26>
 803bd4c:	681c      	ldr	r4, [r3, #0]
 803bd4e:	685b      	ldr	r3, [r3, #4]
 803bd50:	6053      	str	r3, [r2, #4]
 803bd52:	4421      	add	r1, r4
 803bd54:	6011      	str	r1, [r2, #0]
 803bd56:	e7da      	b.n	803bd0e <_free_r+0x26>
 803bd58:	d902      	bls.n	803bd60 <_free_r+0x78>
 803bd5a:	230c      	movs	r3, #12
 803bd5c:	6003      	str	r3, [r0, #0]
 803bd5e:	e7d6      	b.n	803bd0e <_free_r+0x26>
 803bd60:	6825      	ldr	r5, [r4, #0]
 803bd62:	1961      	adds	r1, r4, r5
 803bd64:	428b      	cmp	r3, r1
 803bd66:	bf04      	itt	eq
 803bd68:	6819      	ldreq	r1, [r3, #0]
 803bd6a:	685b      	ldreq	r3, [r3, #4]
 803bd6c:	6063      	str	r3, [r4, #4]
 803bd6e:	bf04      	itt	eq
 803bd70:	1949      	addeq	r1, r1, r5
 803bd72:	6021      	streq	r1, [r4, #0]
 803bd74:	6054      	str	r4, [r2, #4]
 803bd76:	e7ca      	b.n	803bd0e <_free_r+0x26>
 803bd78:	b003      	add	sp, #12
 803bd7a:	bd30      	pop	{r4, r5, pc}
 803bd7c:	2403879c 	.word	0x2403879c

0803bd80 <sbrk_aligned>:
 803bd80:	b570      	push	{r4, r5, r6, lr}
 803bd82:	4e0e      	ldr	r6, [pc, #56]	; (803bdbc <sbrk_aligned+0x3c>)
 803bd84:	460c      	mov	r4, r1
 803bd86:	6831      	ldr	r1, [r6, #0]
 803bd88:	4605      	mov	r5, r0
 803bd8a:	b911      	cbnz	r1, 803bd92 <sbrk_aligned+0x12>
 803bd8c:	f000 fb7a 	bl	803c484 <_sbrk_r>
 803bd90:	6030      	str	r0, [r6, #0]
 803bd92:	4621      	mov	r1, r4
 803bd94:	4628      	mov	r0, r5
 803bd96:	f000 fb75 	bl	803c484 <_sbrk_r>
 803bd9a:	1c43      	adds	r3, r0, #1
 803bd9c:	d00a      	beq.n	803bdb4 <sbrk_aligned+0x34>
 803bd9e:	1cc4      	adds	r4, r0, #3
 803bda0:	f024 0403 	bic.w	r4, r4, #3
 803bda4:	42a0      	cmp	r0, r4
 803bda6:	d007      	beq.n	803bdb8 <sbrk_aligned+0x38>
 803bda8:	1a21      	subs	r1, r4, r0
 803bdaa:	4628      	mov	r0, r5
 803bdac:	f000 fb6a 	bl	803c484 <_sbrk_r>
 803bdb0:	3001      	adds	r0, #1
 803bdb2:	d101      	bne.n	803bdb8 <sbrk_aligned+0x38>
 803bdb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803bdb8:	4620      	mov	r0, r4
 803bdba:	bd70      	pop	{r4, r5, r6, pc}
 803bdbc:	240387a0 	.word	0x240387a0

0803bdc0 <_malloc_r>:
 803bdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803bdc4:	1ccd      	adds	r5, r1, #3
 803bdc6:	f025 0503 	bic.w	r5, r5, #3
 803bdca:	3508      	adds	r5, #8
 803bdcc:	2d0c      	cmp	r5, #12
 803bdce:	bf38      	it	cc
 803bdd0:	250c      	movcc	r5, #12
 803bdd2:	2d00      	cmp	r5, #0
 803bdd4:	4607      	mov	r7, r0
 803bdd6:	db01      	blt.n	803bddc <_malloc_r+0x1c>
 803bdd8:	42a9      	cmp	r1, r5
 803bdda:	d905      	bls.n	803bde8 <_malloc_r+0x28>
 803bddc:	230c      	movs	r3, #12
 803bdde:	603b      	str	r3, [r7, #0]
 803bde0:	2600      	movs	r6, #0
 803bde2:	4630      	mov	r0, r6
 803bde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803bde8:	4e2e      	ldr	r6, [pc, #184]	; (803bea4 <_malloc_r+0xe4>)
 803bdea:	f000 fe7f 	bl	803caec <__malloc_lock>
 803bdee:	6833      	ldr	r3, [r6, #0]
 803bdf0:	461c      	mov	r4, r3
 803bdf2:	bb34      	cbnz	r4, 803be42 <_malloc_r+0x82>
 803bdf4:	4629      	mov	r1, r5
 803bdf6:	4638      	mov	r0, r7
 803bdf8:	f7ff ffc2 	bl	803bd80 <sbrk_aligned>
 803bdfc:	1c43      	adds	r3, r0, #1
 803bdfe:	4604      	mov	r4, r0
 803be00:	d14d      	bne.n	803be9e <_malloc_r+0xde>
 803be02:	6834      	ldr	r4, [r6, #0]
 803be04:	4626      	mov	r6, r4
 803be06:	2e00      	cmp	r6, #0
 803be08:	d140      	bne.n	803be8c <_malloc_r+0xcc>
 803be0a:	6823      	ldr	r3, [r4, #0]
 803be0c:	4631      	mov	r1, r6
 803be0e:	4638      	mov	r0, r7
 803be10:	eb04 0803 	add.w	r8, r4, r3
 803be14:	f000 fb36 	bl	803c484 <_sbrk_r>
 803be18:	4580      	cmp	r8, r0
 803be1a:	d13a      	bne.n	803be92 <_malloc_r+0xd2>
 803be1c:	6821      	ldr	r1, [r4, #0]
 803be1e:	3503      	adds	r5, #3
 803be20:	1a6d      	subs	r5, r5, r1
 803be22:	f025 0503 	bic.w	r5, r5, #3
 803be26:	3508      	adds	r5, #8
 803be28:	2d0c      	cmp	r5, #12
 803be2a:	bf38      	it	cc
 803be2c:	250c      	movcc	r5, #12
 803be2e:	4629      	mov	r1, r5
 803be30:	4638      	mov	r0, r7
 803be32:	f7ff ffa5 	bl	803bd80 <sbrk_aligned>
 803be36:	3001      	adds	r0, #1
 803be38:	d02b      	beq.n	803be92 <_malloc_r+0xd2>
 803be3a:	6823      	ldr	r3, [r4, #0]
 803be3c:	442b      	add	r3, r5
 803be3e:	6023      	str	r3, [r4, #0]
 803be40:	e00e      	b.n	803be60 <_malloc_r+0xa0>
 803be42:	6822      	ldr	r2, [r4, #0]
 803be44:	1b52      	subs	r2, r2, r5
 803be46:	d41e      	bmi.n	803be86 <_malloc_r+0xc6>
 803be48:	2a0b      	cmp	r2, #11
 803be4a:	d916      	bls.n	803be7a <_malloc_r+0xba>
 803be4c:	1961      	adds	r1, r4, r5
 803be4e:	42a3      	cmp	r3, r4
 803be50:	6025      	str	r5, [r4, #0]
 803be52:	bf18      	it	ne
 803be54:	6059      	strne	r1, [r3, #4]
 803be56:	6863      	ldr	r3, [r4, #4]
 803be58:	bf08      	it	eq
 803be5a:	6031      	streq	r1, [r6, #0]
 803be5c:	5162      	str	r2, [r4, r5]
 803be5e:	604b      	str	r3, [r1, #4]
 803be60:	4638      	mov	r0, r7
 803be62:	f104 060b 	add.w	r6, r4, #11
 803be66:	f000 fe47 	bl	803caf8 <__malloc_unlock>
 803be6a:	f026 0607 	bic.w	r6, r6, #7
 803be6e:	1d23      	adds	r3, r4, #4
 803be70:	1af2      	subs	r2, r6, r3
 803be72:	d0b6      	beq.n	803bde2 <_malloc_r+0x22>
 803be74:	1b9b      	subs	r3, r3, r6
 803be76:	50a3      	str	r3, [r4, r2]
 803be78:	e7b3      	b.n	803bde2 <_malloc_r+0x22>
 803be7a:	6862      	ldr	r2, [r4, #4]
 803be7c:	42a3      	cmp	r3, r4
 803be7e:	bf0c      	ite	eq
 803be80:	6032      	streq	r2, [r6, #0]
 803be82:	605a      	strne	r2, [r3, #4]
 803be84:	e7ec      	b.n	803be60 <_malloc_r+0xa0>
 803be86:	4623      	mov	r3, r4
 803be88:	6864      	ldr	r4, [r4, #4]
 803be8a:	e7b2      	b.n	803bdf2 <_malloc_r+0x32>
 803be8c:	4634      	mov	r4, r6
 803be8e:	6876      	ldr	r6, [r6, #4]
 803be90:	e7b9      	b.n	803be06 <_malloc_r+0x46>
 803be92:	230c      	movs	r3, #12
 803be94:	603b      	str	r3, [r7, #0]
 803be96:	4638      	mov	r0, r7
 803be98:	f000 fe2e 	bl	803caf8 <__malloc_unlock>
 803be9c:	e7a1      	b.n	803bde2 <_malloc_r+0x22>
 803be9e:	6025      	str	r5, [r4, #0]
 803bea0:	e7de      	b.n	803be60 <_malloc_r+0xa0>
 803bea2:	bf00      	nop
 803bea4:	2403879c 	.word	0x2403879c

0803bea8 <__sfputc_r>:
 803bea8:	6893      	ldr	r3, [r2, #8]
 803beaa:	3b01      	subs	r3, #1
 803beac:	2b00      	cmp	r3, #0
 803beae:	b410      	push	{r4}
 803beb0:	6093      	str	r3, [r2, #8]
 803beb2:	da08      	bge.n	803bec6 <__sfputc_r+0x1e>
 803beb4:	6994      	ldr	r4, [r2, #24]
 803beb6:	42a3      	cmp	r3, r4
 803beb8:	db01      	blt.n	803bebe <__sfputc_r+0x16>
 803beba:	290a      	cmp	r1, #10
 803bebc:	d103      	bne.n	803bec6 <__sfputc_r+0x1e>
 803bebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 803bec2:	f000 bb33 	b.w	803c52c <__swbuf_r>
 803bec6:	6813      	ldr	r3, [r2, #0]
 803bec8:	1c58      	adds	r0, r3, #1
 803beca:	6010      	str	r0, [r2, #0]
 803becc:	7019      	strb	r1, [r3, #0]
 803bece:	4608      	mov	r0, r1
 803bed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 803bed4:	4770      	bx	lr

0803bed6 <__sfputs_r>:
 803bed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803bed8:	4606      	mov	r6, r0
 803beda:	460f      	mov	r7, r1
 803bedc:	4614      	mov	r4, r2
 803bede:	18d5      	adds	r5, r2, r3
 803bee0:	42ac      	cmp	r4, r5
 803bee2:	d101      	bne.n	803bee8 <__sfputs_r+0x12>
 803bee4:	2000      	movs	r0, #0
 803bee6:	e007      	b.n	803bef8 <__sfputs_r+0x22>
 803bee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 803beec:	463a      	mov	r2, r7
 803beee:	4630      	mov	r0, r6
 803bef0:	f7ff ffda 	bl	803bea8 <__sfputc_r>
 803bef4:	1c43      	adds	r3, r0, #1
 803bef6:	d1f3      	bne.n	803bee0 <__sfputs_r+0xa>
 803bef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803befc <_vfiprintf_r>:
 803befc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803bf00:	460d      	mov	r5, r1
 803bf02:	b09d      	sub	sp, #116	; 0x74
 803bf04:	4614      	mov	r4, r2
 803bf06:	4698      	mov	r8, r3
 803bf08:	4606      	mov	r6, r0
 803bf0a:	b118      	cbz	r0, 803bf14 <_vfiprintf_r+0x18>
 803bf0c:	6983      	ldr	r3, [r0, #24]
 803bf0e:	b90b      	cbnz	r3, 803bf14 <_vfiprintf_r+0x18>
 803bf10:	f000 fce6 	bl	803c8e0 <__sinit>
 803bf14:	4b89      	ldr	r3, [pc, #548]	; (803c13c <_vfiprintf_r+0x240>)
 803bf16:	429d      	cmp	r5, r3
 803bf18:	d11b      	bne.n	803bf52 <_vfiprintf_r+0x56>
 803bf1a:	6875      	ldr	r5, [r6, #4]
 803bf1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803bf1e:	07d9      	lsls	r1, r3, #31
 803bf20:	d405      	bmi.n	803bf2e <_vfiprintf_r+0x32>
 803bf22:	89ab      	ldrh	r3, [r5, #12]
 803bf24:	059a      	lsls	r2, r3, #22
 803bf26:	d402      	bmi.n	803bf2e <_vfiprintf_r+0x32>
 803bf28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803bf2a:	f000 fd77 	bl	803ca1c <__retarget_lock_acquire_recursive>
 803bf2e:	89ab      	ldrh	r3, [r5, #12]
 803bf30:	071b      	lsls	r3, r3, #28
 803bf32:	d501      	bpl.n	803bf38 <_vfiprintf_r+0x3c>
 803bf34:	692b      	ldr	r3, [r5, #16]
 803bf36:	b9eb      	cbnz	r3, 803bf74 <_vfiprintf_r+0x78>
 803bf38:	4629      	mov	r1, r5
 803bf3a:	4630      	mov	r0, r6
 803bf3c:	f000 fb48 	bl	803c5d0 <__swsetup_r>
 803bf40:	b1c0      	cbz	r0, 803bf74 <_vfiprintf_r+0x78>
 803bf42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803bf44:	07dc      	lsls	r4, r3, #31
 803bf46:	d50e      	bpl.n	803bf66 <_vfiprintf_r+0x6a>
 803bf48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803bf4c:	b01d      	add	sp, #116	; 0x74
 803bf4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803bf52:	4b7b      	ldr	r3, [pc, #492]	; (803c140 <_vfiprintf_r+0x244>)
 803bf54:	429d      	cmp	r5, r3
 803bf56:	d101      	bne.n	803bf5c <_vfiprintf_r+0x60>
 803bf58:	68b5      	ldr	r5, [r6, #8]
 803bf5a:	e7df      	b.n	803bf1c <_vfiprintf_r+0x20>
 803bf5c:	4b79      	ldr	r3, [pc, #484]	; (803c144 <_vfiprintf_r+0x248>)
 803bf5e:	429d      	cmp	r5, r3
 803bf60:	bf08      	it	eq
 803bf62:	68f5      	ldreq	r5, [r6, #12]
 803bf64:	e7da      	b.n	803bf1c <_vfiprintf_r+0x20>
 803bf66:	89ab      	ldrh	r3, [r5, #12]
 803bf68:	0598      	lsls	r0, r3, #22
 803bf6a:	d4ed      	bmi.n	803bf48 <_vfiprintf_r+0x4c>
 803bf6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803bf6e:	f000 fd56 	bl	803ca1e <__retarget_lock_release_recursive>
 803bf72:	e7e9      	b.n	803bf48 <_vfiprintf_r+0x4c>
 803bf74:	2300      	movs	r3, #0
 803bf76:	9309      	str	r3, [sp, #36]	; 0x24
 803bf78:	2320      	movs	r3, #32
 803bf7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803bf7e:	f8cd 800c 	str.w	r8, [sp, #12]
 803bf82:	2330      	movs	r3, #48	; 0x30
 803bf84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803c148 <_vfiprintf_r+0x24c>
 803bf88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803bf8c:	f04f 0901 	mov.w	r9, #1
 803bf90:	4623      	mov	r3, r4
 803bf92:	469a      	mov	sl, r3
 803bf94:	f813 2b01 	ldrb.w	r2, [r3], #1
 803bf98:	b10a      	cbz	r2, 803bf9e <_vfiprintf_r+0xa2>
 803bf9a:	2a25      	cmp	r2, #37	; 0x25
 803bf9c:	d1f9      	bne.n	803bf92 <_vfiprintf_r+0x96>
 803bf9e:	ebba 0b04 	subs.w	fp, sl, r4
 803bfa2:	d00b      	beq.n	803bfbc <_vfiprintf_r+0xc0>
 803bfa4:	465b      	mov	r3, fp
 803bfa6:	4622      	mov	r2, r4
 803bfa8:	4629      	mov	r1, r5
 803bfaa:	4630      	mov	r0, r6
 803bfac:	f7ff ff93 	bl	803bed6 <__sfputs_r>
 803bfb0:	3001      	adds	r0, #1
 803bfb2:	f000 80aa 	beq.w	803c10a <_vfiprintf_r+0x20e>
 803bfb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803bfb8:	445a      	add	r2, fp
 803bfba:	9209      	str	r2, [sp, #36]	; 0x24
 803bfbc:	f89a 3000 	ldrb.w	r3, [sl]
 803bfc0:	2b00      	cmp	r3, #0
 803bfc2:	f000 80a2 	beq.w	803c10a <_vfiprintf_r+0x20e>
 803bfc6:	2300      	movs	r3, #0
 803bfc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803bfcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803bfd0:	f10a 0a01 	add.w	sl, sl, #1
 803bfd4:	9304      	str	r3, [sp, #16]
 803bfd6:	9307      	str	r3, [sp, #28]
 803bfd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803bfdc:	931a      	str	r3, [sp, #104]	; 0x68
 803bfde:	4654      	mov	r4, sl
 803bfe0:	2205      	movs	r2, #5
 803bfe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 803bfe6:	4858      	ldr	r0, [pc, #352]	; (803c148 <_vfiprintf_r+0x24c>)
 803bfe8:	f7e4 f982 	bl	80202f0 <memchr>
 803bfec:	9a04      	ldr	r2, [sp, #16]
 803bfee:	b9d8      	cbnz	r0, 803c028 <_vfiprintf_r+0x12c>
 803bff0:	06d1      	lsls	r1, r2, #27
 803bff2:	bf44      	itt	mi
 803bff4:	2320      	movmi	r3, #32
 803bff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803bffa:	0713      	lsls	r3, r2, #28
 803bffc:	bf44      	itt	mi
 803bffe:	232b      	movmi	r3, #43	; 0x2b
 803c000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803c004:	f89a 3000 	ldrb.w	r3, [sl]
 803c008:	2b2a      	cmp	r3, #42	; 0x2a
 803c00a:	d015      	beq.n	803c038 <_vfiprintf_r+0x13c>
 803c00c:	9a07      	ldr	r2, [sp, #28]
 803c00e:	4654      	mov	r4, sl
 803c010:	2000      	movs	r0, #0
 803c012:	f04f 0c0a 	mov.w	ip, #10
 803c016:	4621      	mov	r1, r4
 803c018:	f811 3b01 	ldrb.w	r3, [r1], #1
 803c01c:	3b30      	subs	r3, #48	; 0x30
 803c01e:	2b09      	cmp	r3, #9
 803c020:	d94e      	bls.n	803c0c0 <_vfiprintf_r+0x1c4>
 803c022:	b1b0      	cbz	r0, 803c052 <_vfiprintf_r+0x156>
 803c024:	9207      	str	r2, [sp, #28]
 803c026:	e014      	b.n	803c052 <_vfiprintf_r+0x156>
 803c028:	eba0 0308 	sub.w	r3, r0, r8
 803c02c:	fa09 f303 	lsl.w	r3, r9, r3
 803c030:	4313      	orrs	r3, r2
 803c032:	9304      	str	r3, [sp, #16]
 803c034:	46a2      	mov	sl, r4
 803c036:	e7d2      	b.n	803bfde <_vfiprintf_r+0xe2>
 803c038:	9b03      	ldr	r3, [sp, #12]
 803c03a:	1d19      	adds	r1, r3, #4
 803c03c:	681b      	ldr	r3, [r3, #0]
 803c03e:	9103      	str	r1, [sp, #12]
 803c040:	2b00      	cmp	r3, #0
 803c042:	bfbb      	ittet	lt
 803c044:	425b      	neglt	r3, r3
 803c046:	f042 0202 	orrlt.w	r2, r2, #2
 803c04a:	9307      	strge	r3, [sp, #28]
 803c04c:	9307      	strlt	r3, [sp, #28]
 803c04e:	bfb8      	it	lt
 803c050:	9204      	strlt	r2, [sp, #16]
 803c052:	7823      	ldrb	r3, [r4, #0]
 803c054:	2b2e      	cmp	r3, #46	; 0x2e
 803c056:	d10c      	bne.n	803c072 <_vfiprintf_r+0x176>
 803c058:	7863      	ldrb	r3, [r4, #1]
 803c05a:	2b2a      	cmp	r3, #42	; 0x2a
 803c05c:	d135      	bne.n	803c0ca <_vfiprintf_r+0x1ce>
 803c05e:	9b03      	ldr	r3, [sp, #12]
 803c060:	1d1a      	adds	r2, r3, #4
 803c062:	681b      	ldr	r3, [r3, #0]
 803c064:	9203      	str	r2, [sp, #12]
 803c066:	2b00      	cmp	r3, #0
 803c068:	bfb8      	it	lt
 803c06a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803c06e:	3402      	adds	r4, #2
 803c070:	9305      	str	r3, [sp, #20]
 803c072:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803c158 <_vfiprintf_r+0x25c>
 803c076:	7821      	ldrb	r1, [r4, #0]
 803c078:	2203      	movs	r2, #3
 803c07a:	4650      	mov	r0, sl
 803c07c:	f7e4 f938 	bl	80202f0 <memchr>
 803c080:	b140      	cbz	r0, 803c094 <_vfiprintf_r+0x198>
 803c082:	2340      	movs	r3, #64	; 0x40
 803c084:	eba0 000a 	sub.w	r0, r0, sl
 803c088:	fa03 f000 	lsl.w	r0, r3, r0
 803c08c:	9b04      	ldr	r3, [sp, #16]
 803c08e:	4303      	orrs	r3, r0
 803c090:	3401      	adds	r4, #1
 803c092:	9304      	str	r3, [sp, #16]
 803c094:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c098:	482c      	ldr	r0, [pc, #176]	; (803c14c <_vfiprintf_r+0x250>)
 803c09a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803c09e:	2206      	movs	r2, #6
 803c0a0:	f7e4 f926 	bl	80202f0 <memchr>
 803c0a4:	2800      	cmp	r0, #0
 803c0a6:	d03f      	beq.n	803c128 <_vfiprintf_r+0x22c>
 803c0a8:	4b29      	ldr	r3, [pc, #164]	; (803c150 <_vfiprintf_r+0x254>)
 803c0aa:	bb1b      	cbnz	r3, 803c0f4 <_vfiprintf_r+0x1f8>
 803c0ac:	9b03      	ldr	r3, [sp, #12]
 803c0ae:	3307      	adds	r3, #7
 803c0b0:	f023 0307 	bic.w	r3, r3, #7
 803c0b4:	3308      	adds	r3, #8
 803c0b6:	9303      	str	r3, [sp, #12]
 803c0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803c0ba:	443b      	add	r3, r7
 803c0bc:	9309      	str	r3, [sp, #36]	; 0x24
 803c0be:	e767      	b.n	803bf90 <_vfiprintf_r+0x94>
 803c0c0:	fb0c 3202 	mla	r2, ip, r2, r3
 803c0c4:	460c      	mov	r4, r1
 803c0c6:	2001      	movs	r0, #1
 803c0c8:	e7a5      	b.n	803c016 <_vfiprintf_r+0x11a>
 803c0ca:	2300      	movs	r3, #0
 803c0cc:	3401      	adds	r4, #1
 803c0ce:	9305      	str	r3, [sp, #20]
 803c0d0:	4619      	mov	r1, r3
 803c0d2:	f04f 0c0a 	mov.w	ip, #10
 803c0d6:	4620      	mov	r0, r4
 803c0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 803c0dc:	3a30      	subs	r2, #48	; 0x30
 803c0de:	2a09      	cmp	r2, #9
 803c0e0:	d903      	bls.n	803c0ea <_vfiprintf_r+0x1ee>
 803c0e2:	2b00      	cmp	r3, #0
 803c0e4:	d0c5      	beq.n	803c072 <_vfiprintf_r+0x176>
 803c0e6:	9105      	str	r1, [sp, #20]
 803c0e8:	e7c3      	b.n	803c072 <_vfiprintf_r+0x176>
 803c0ea:	fb0c 2101 	mla	r1, ip, r1, r2
 803c0ee:	4604      	mov	r4, r0
 803c0f0:	2301      	movs	r3, #1
 803c0f2:	e7f0      	b.n	803c0d6 <_vfiprintf_r+0x1da>
 803c0f4:	ab03      	add	r3, sp, #12
 803c0f6:	9300      	str	r3, [sp, #0]
 803c0f8:	462a      	mov	r2, r5
 803c0fa:	4b16      	ldr	r3, [pc, #88]	; (803c154 <_vfiprintf_r+0x258>)
 803c0fc:	a904      	add	r1, sp, #16
 803c0fe:	4630      	mov	r0, r6
 803c100:	f3af 8000 	nop.w
 803c104:	4607      	mov	r7, r0
 803c106:	1c78      	adds	r0, r7, #1
 803c108:	d1d6      	bne.n	803c0b8 <_vfiprintf_r+0x1bc>
 803c10a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c10c:	07d9      	lsls	r1, r3, #31
 803c10e:	d405      	bmi.n	803c11c <_vfiprintf_r+0x220>
 803c110:	89ab      	ldrh	r3, [r5, #12]
 803c112:	059a      	lsls	r2, r3, #22
 803c114:	d402      	bmi.n	803c11c <_vfiprintf_r+0x220>
 803c116:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c118:	f000 fc81 	bl	803ca1e <__retarget_lock_release_recursive>
 803c11c:	89ab      	ldrh	r3, [r5, #12]
 803c11e:	065b      	lsls	r3, r3, #25
 803c120:	f53f af12 	bmi.w	803bf48 <_vfiprintf_r+0x4c>
 803c124:	9809      	ldr	r0, [sp, #36]	; 0x24
 803c126:	e711      	b.n	803bf4c <_vfiprintf_r+0x50>
 803c128:	ab03      	add	r3, sp, #12
 803c12a:	9300      	str	r3, [sp, #0]
 803c12c:	462a      	mov	r2, r5
 803c12e:	4b09      	ldr	r3, [pc, #36]	; (803c154 <_vfiprintf_r+0x258>)
 803c130:	a904      	add	r1, sp, #16
 803c132:	4630      	mov	r0, r6
 803c134:	f000 f880 	bl	803c238 <_printf_i>
 803c138:	e7e4      	b.n	803c104 <_vfiprintf_r+0x208>
 803c13a:	bf00      	nop
 803c13c:	08058c54 	.word	0x08058c54
 803c140:	08058c74 	.word	0x08058c74
 803c144:	08058c34 	.word	0x08058c34
 803c148:	08058c00 	.word	0x08058c00
 803c14c:	08058c0a 	.word	0x08058c0a
 803c150:	00000000 	.word	0x00000000
 803c154:	0803bed7 	.word	0x0803bed7
 803c158:	08058c06 	.word	0x08058c06

0803c15c <_printf_common>:
 803c15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803c160:	4616      	mov	r6, r2
 803c162:	4699      	mov	r9, r3
 803c164:	688a      	ldr	r2, [r1, #8]
 803c166:	690b      	ldr	r3, [r1, #16]
 803c168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803c16c:	4293      	cmp	r3, r2
 803c16e:	bfb8      	it	lt
 803c170:	4613      	movlt	r3, r2
 803c172:	6033      	str	r3, [r6, #0]
 803c174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803c178:	4607      	mov	r7, r0
 803c17a:	460c      	mov	r4, r1
 803c17c:	b10a      	cbz	r2, 803c182 <_printf_common+0x26>
 803c17e:	3301      	adds	r3, #1
 803c180:	6033      	str	r3, [r6, #0]
 803c182:	6823      	ldr	r3, [r4, #0]
 803c184:	0699      	lsls	r1, r3, #26
 803c186:	bf42      	ittt	mi
 803c188:	6833      	ldrmi	r3, [r6, #0]
 803c18a:	3302      	addmi	r3, #2
 803c18c:	6033      	strmi	r3, [r6, #0]
 803c18e:	6825      	ldr	r5, [r4, #0]
 803c190:	f015 0506 	ands.w	r5, r5, #6
 803c194:	d106      	bne.n	803c1a4 <_printf_common+0x48>
 803c196:	f104 0a19 	add.w	sl, r4, #25
 803c19a:	68e3      	ldr	r3, [r4, #12]
 803c19c:	6832      	ldr	r2, [r6, #0]
 803c19e:	1a9b      	subs	r3, r3, r2
 803c1a0:	42ab      	cmp	r3, r5
 803c1a2:	dc26      	bgt.n	803c1f2 <_printf_common+0x96>
 803c1a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803c1a8:	1e13      	subs	r3, r2, #0
 803c1aa:	6822      	ldr	r2, [r4, #0]
 803c1ac:	bf18      	it	ne
 803c1ae:	2301      	movne	r3, #1
 803c1b0:	0692      	lsls	r2, r2, #26
 803c1b2:	d42b      	bmi.n	803c20c <_printf_common+0xb0>
 803c1b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803c1b8:	4649      	mov	r1, r9
 803c1ba:	4638      	mov	r0, r7
 803c1bc:	47c0      	blx	r8
 803c1be:	3001      	adds	r0, #1
 803c1c0:	d01e      	beq.n	803c200 <_printf_common+0xa4>
 803c1c2:	6823      	ldr	r3, [r4, #0]
 803c1c4:	68e5      	ldr	r5, [r4, #12]
 803c1c6:	6832      	ldr	r2, [r6, #0]
 803c1c8:	f003 0306 	and.w	r3, r3, #6
 803c1cc:	2b04      	cmp	r3, #4
 803c1ce:	bf08      	it	eq
 803c1d0:	1aad      	subeq	r5, r5, r2
 803c1d2:	68a3      	ldr	r3, [r4, #8]
 803c1d4:	6922      	ldr	r2, [r4, #16]
 803c1d6:	bf0c      	ite	eq
 803c1d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803c1dc:	2500      	movne	r5, #0
 803c1de:	4293      	cmp	r3, r2
 803c1e0:	bfc4      	itt	gt
 803c1e2:	1a9b      	subgt	r3, r3, r2
 803c1e4:	18ed      	addgt	r5, r5, r3
 803c1e6:	2600      	movs	r6, #0
 803c1e8:	341a      	adds	r4, #26
 803c1ea:	42b5      	cmp	r5, r6
 803c1ec:	d11a      	bne.n	803c224 <_printf_common+0xc8>
 803c1ee:	2000      	movs	r0, #0
 803c1f0:	e008      	b.n	803c204 <_printf_common+0xa8>
 803c1f2:	2301      	movs	r3, #1
 803c1f4:	4652      	mov	r2, sl
 803c1f6:	4649      	mov	r1, r9
 803c1f8:	4638      	mov	r0, r7
 803c1fa:	47c0      	blx	r8
 803c1fc:	3001      	adds	r0, #1
 803c1fe:	d103      	bne.n	803c208 <_printf_common+0xac>
 803c200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c208:	3501      	adds	r5, #1
 803c20a:	e7c6      	b.n	803c19a <_printf_common+0x3e>
 803c20c:	18e1      	adds	r1, r4, r3
 803c20e:	1c5a      	adds	r2, r3, #1
 803c210:	2030      	movs	r0, #48	; 0x30
 803c212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803c216:	4422      	add	r2, r4
 803c218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803c21c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803c220:	3302      	adds	r3, #2
 803c222:	e7c7      	b.n	803c1b4 <_printf_common+0x58>
 803c224:	2301      	movs	r3, #1
 803c226:	4622      	mov	r2, r4
 803c228:	4649      	mov	r1, r9
 803c22a:	4638      	mov	r0, r7
 803c22c:	47c0      	blx	r8
 803c22e:	3001      	adds	r0, #1
 803c230:	d0e6      	beq.n	803c200 <_printf_common+0xa4>
 803c232:	3601      	adds	r6, #1
 803c234:	e7d9      	b.n	803c1ea <_printf_common+0x8e>
	...

0803c238 <_printf_i>:
 803c238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803c23c:	7e0f      	ldrb	r7, [r1, #24]
 803c23e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803c240:	2f78      	cmp	r7, #120	; 0x78
 803c242:	4691      	mov	r9, r2
 803c244:	4680      	mov	r8, r0
 803c246:	460c      	mov	r4, r1
 803c248:	469a      	mov	sl, r3
 803c24a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803c24e:	d807      	bhi.n	803c260 <_printf_i+0x28>
 803c250:	2f62      	cmp	r7, #98	; 0x62
 803c252:	d80a      	bhi.n	803c26a <_printf_i+0x32>
 803c254:	2f00      	cmp	r7, #0
 803c256:	f000 80d8 	beq.w	803c40a <_printf_i+0x1d2>
 803c25a:	2f58      	cmp	r7, #88	; 0x58
 803c25c:	f000 80a3 	beq.w	803c3a6 <_printf_i+0x16e>
 803c260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803c264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803c268:	e03a      	b.n	803c2e0 <_printf_i+0xa8>
 803c26a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803c26e:	2b15      	cmp	r3, #21
 803c270:	d8f6      	bhi.n	803c260 <_printf_i+0x28>
 803c272:	a101      	add	r1, pc, #4	; (adr r1, 803c278 <_printf_i+0x40>)
 803c274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803c278:	0803c2d1 	.word	0x0803c2d1
 803c27c:	0803c2e5 	.word	0x0803c2e5
 803c280:	0803c261 	.word	0x0803c261
 803c284:	0803c261 	.word	0x0803c261
 803c288:	0803c261 	.word	0x0803c261
 803c28c:	0803c261 	.word	0x0803c261
 803c290:	0803c2e5 	.word	0x0803c2e5
 803c294:	0803c261 	.word	0x0803c261
 803c298:	0803c261 	.word	0x0803c261
 803c29c:	0803c261 	.word	0x0803c261
 803c2a0:	0803c261 	.word	0x0803c261
 803c2a4:	0803c3f1 	.word	0x0803c3f1
 803c2a8:	0803c315 	.word	0x0803c315
 803c2ac:	0803c3d3 	.word	0x0803c3d3
 803c2b0:	0803c261 	.word	0x0803c261
 803c2b4:	0803c261 	.word	0x0803c261
 803c2b8:	0803c413 	.word	0x0803c413
 803c2bc:	0803c261 	.word	0x0803c261
 803c2c0:	0803c315 	.word	0x0803c315
 803c2c4:	0803c261 	.word	0x0803c261
 803c2c8:	0803c261 	.word	0x0803c261
 803c2cc:	0803c3db 	.word	0x0803c3db
 803c2d0:	682b      	ldr	r3, [r5, #0]
 803c2d2:	1d1a      	adds	r2, r3, #4
 803c2d4:	681b      	ldr	r3, [r3, #0]
 803c2d6:	602a      	str	r2, [r5, #0]
 803c2d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803c2dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803c2e0:	2301      	movs	r3, #1
 803c2e2:	e0a3      	b.n	803c42c <_printf_i+0x1f4>
 803c2e4:	6820      	ldr	r0, [r4, #0]
 803c2e6:	6829      	ldr	r1, [r5, #0]
 803c2e8:	0606      	lsls	r6, r0, #24
 803c2ea:	f101 0304 	add.w	r3, r1, #4
 803c2ee:	d50a      	bpl.n	803c306 <_printf_i+0xce>
 803c2f0:	680e      	ldr	r6, [r1, #0]
 803c2f2:	602b      	str	r3, [r5, #0]
 803c2f4:	2e00      	cmp	r6, #0
 803c2f6:	da03      	bge.n	803c300 <_printf_i+0xc8>
 803c2f8:	232d      	movs	r3, #45	; 0x2d
 803c2fa:	4276      	negs	r6, r6
 803c2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803c300:	485e      	ldr	r0, [pc, #376]	; (803c47c <_printf_i+0x244>)
 803c302:	230a      	movs	r3, #10
 803c304:	e019      	b.n	803c33a <_printf_i+0x102>
 803c306:	680e      	ldr	r6, [r1, #0]
 803c308:	602b      	str	r3, [r5, #0]
 803c30a:	f010 0f40 	tst.w	r0, #64	; 0x40
 803c30e:	bf18      	it	ne
 803c310:	b236      	sxthne	r6, r6
 803c312:	e7ef      	b.n	803c2f4 <_printf_i+0xbc>
 803c314:	682b      	ldr	r3, [r5, #0]
 803c316:	6820      	ldr	r0, [r4, #0]
 803c318:	1d19      	adds	r1, r3, #4
 803c31a:	6029      	str	r1, [r5, #0]
 803c31c:	0601      	lsls	r1, r0, #24
 803c31e:	d501      	bpl.n	803c324 <_printf_i+0xec>
 803c320:	681e      	ldr	r6, [r3, #0]
 803c322:	e002      	b.n	803c32a <_printf_i+0xf2>
 803c324:	0646      	lsls	r6, r0, #25
 803c326:	d5fb      	bpl.n	803c320 <_printf_i+0xe8>
 803c328:	881e      	ldrh	r6, [r3, #0]
 803c32a:	4854      	ldr	r0, [pc, #336]	; (803c47c <_printf_i+0x244>)
 803c32c:	2f6f      	cmp	r7, #111	; 0x6f
 803c32e:	bf0c      	ite	eq
 803c330:	2308      	moveq	r3, #8
 803c332:	230a      	movne	r3, #10
 803c334:	2100      	movs	r1, #0
 803c336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803c33a:	6865      	ldr	r5, [r4, #4]
 803c33c:	60a5      	str	r5, [r4, #8]
 803c33e:	2d00      	cmp	r5, #0
 803c340:	bfa2      	ittt	ge
 803c342:	6821      	ldrge	r1, [r4, #0]
 803c344:	f021 0104 	bicge.w	r1, r1, #4
 803c348:	6021      	strge	r1, [r4, #0]
 803c34a:	b90e      	cbnz	r6, 803c350 <_printf_i+0x118>
 803c34c:	2d00      	cmp	r5, #0
 803c34e:	d04d      	beq.n	803c3ec <_printf_i+0x1b4>
 803c350:	4615      	mov	r5, r2
 803c352:	fbb6 f1f3 	udiv	r1, r6, r3
 803c356:	fb03 6711 	mls	r7, r3, r1, r6
 803c35a:	5dc7      	ldrb	r7, [r0, r7]
 803c35c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803c360:	4637      	mov	r7, r6
 803c362:	42bb      	cmp	r3, r7
 803c364:	460e      	mov	r6, r1
 803c366:	d9f4      	bls.n	803c352 <_printf_i+0x11a>
 803c368:	2b08      	cmp	r3, #8
 803c36a:	d10b      	bne.n	803c384 <_printf_i+0x14c>
 803c36c:	6823      	ldr	r3, [r4, #0]
 803c36e:	07de      	lsls	r6, r3, #31
 803c370:	d508      	bpl.n	803c384 <_printf_i+0x14c>
 803c372:	6923      	ldr	r3, [r4, #16]
 803c374:	6861      	ldr	r1, [r4, #4]
 803c376:	4299      	cmp	r1, r3
 803c378:	bfde      	ittt	le
 803c37a:	2330      	movle	r3, #48	; 0x30
 803c37c:	f805 3c01 	strble.w	r3, [r5, #-1]
 803c380:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 803c384:	1b52      	subs	r2, r2, r5
 803c386:	6122      	str	r2, [r4, #16]
 803c388:	f8cd a000 	str.w	sl, [sp]
 803c38c:	464b      	mov	r3, r9
 803c38e:	aa03      	add	r2, sp, #12
 803c390:	4621      	mov	r1, r4
 803c392:	4640      	mov	r0, r8
 803c394:	f7ff fee2 	bl	803c15c <_printf_common>
 803c398:	3001      	adds	r0, #1
 803c39a:	d14c      	bne.n	803c436 <_printf_i+0x1fe>
 803c39c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c3a0:	b004      	add	sp, #16
 803c3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c3a6:	4835      	ldr	r0, [pc, #212]	; (803c47c <_printf_i+0x244>)
 803c3a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 803c3ac:	6829      	ldr	r1, [r5, #0]
 803c3ae:	6823      	ldr	r3, [r4, #0]
 803c3b0:	f851 6b04 	ldr.w	r6, [r1], #4
 803c3b4:	6029      	str	r1, [r5, #0]
 803c3b6:	061d      	lsls	r5, r3, #24
 803c3b8:	d514      	bpl.n	803c3e4 <_printf_i+0x1ac>
 803c3ba:	07df      	lsls	r7, r3, #31
 803c3bc:	bf44      	itt	mi
 803c3be:	f043 0320 	orrmi.w	r3, r3, #32
 803c3c2:	6023      	strmi	r3, [r4, #0]
 803c3c4:	b91e      	cbnz	r6, 803c3ce <_printf_i+0x196>
 803c3c6:	6823      	ldr	r3, [r4, #0]
 803c3c8:	f023 0320 	bic.w	r3, r3, #32
 803c3cc:	6023      	str	r3, [r4, #0]
 803c3ce:	2310      	movs	r3, #16
 803c3d0:	e7b0      	b.n	803c334 <_printf_i+0xfc>
 803c3d2:	6823      	ldr	r3, [r4, #0]
 803c3d4:	f043 0320 	orr.w	r3, r3, #32
 803c3d8:	6023      	str	r3, [r4, #0]
 803c3da:	2378      	movs	r3, #120	; 0x78
 803c3dc:	4828      	ldr	r0, [pc, #160]	; (803c480 <_printf_i+0x248>)
 803c3de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803c3e2:	e7e3      	b.n	803c3ac <_printf_i+0x174>
 803c3e4:	0659      	lsls	r1, r3, #25
 803c3e6:	bf48      	it	mi
 803c3e8:	b2b6      	uxthmi	r6, r6
 803c3ea:	e7e6      	b.n	803c3ba <_printf_i+0x182>
 803c3ec:	4615      	mov	r5, r2
 803c3ee:	e7bb      	b.n	803c368 <_printf_i+0x130>
 803c3f0:	682b      	ldr	r3, [r5, #0]
 803c3f2:	6826      	ldr	r6, [r4, #0]
 803c3f4:	6961      	ldr	r1, [r4, #20]
 803c3f6:	1d18      	adds	r0, r3, #4
 803c3f8:	6028      	str	r0, [r5, #0]
 803c3fa:	0635      	lsls	r5, r6, #24
 803c3fc:	681b      	ldr	r3, [r3, #0]
 803c3fe:	d501      	bpl.n	803c404 <_printf_i+0x1cc>
 803c400:	6019      	str	r1, [r3, #0]
 803c402:	e002      	b.n	803c40a <_printf_i+0x1d2>
 803c404:	0670      	lsls	r0, r6, #25
 803c406:	d5fb      	bpl.n	803c400 <_printf_i+0x1c8>
 803c408:	8019      	strh	r1, [r3, #0]
 803c40a:	2300      	movs	r3, #0
 803c40c:	6123      	str	r3, [r4, #16]
 803c40e:	4615      	mov	r5, r2
 803c410:	e7ba      	b.n	803c388 <_printf_i+0x150>
 803c412:	682b      	ldr	r3, [r5, #0]
 803c414:	1d1a      	adds	r2, r3, #4
 803c416:	602a      	str	r2, [r5, #0]
 803c418:	681d      	ldr	r5, [r3, #0]
 803c41a:	6862      	ldr	r2, [r4, #4]
 803c41c:	2100      	movs	r1, #0
 803c41e:	4628      	mov	r0, r5
 803c420:	f7e3 ff66 	bl	80202f0 <memchr>
 803c424:	b108      	cbz	r0, 803c42a <_printf_i+0x1f2>
 803c426:	1b40      	subs	r0, r0, r5
 803c428:	6060      	str	r0, [r4, #4]
 803c42a:	6863      	ldr	r3, [r4, #4]
 803c42c:	6123      	str	r3, [r4, #16]
 803c42e:	2300      	movs	r3, #0
 803c430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803c434:	e7a8      	b.n	803c388 <_printf_i+0x150>
 803c436:	6923      	ldr	r3, [r4, #16]
 803c438:	462a      	mov	r2, r5
 803c43a:	4649      	mov	r1, r9
 803c43c:	4640      	mov	r0, r8
 803c43e:	47d0      	blx	sl
 803c440:	3001      	adds	r0, #1
 803c442:	d0ab      	beq.n	803c39c <_printf_i+0x164>
 803c444:	6823      	ldr	r3, [r4, #0]
 803c446:	079b      	lsls	r3, r3, #30
 803c448:	d413      	bmi.n	803c472 <_printf_i+0x23a>
 803c44a:	68e0      	ldr	r0, [r4, #12]
 803c44c:	9b03      	ldr	r3, [sp, #12]
 803c44e:	4298      	cmp	r0, r3
 803c450:	bfb8      	it	lt
 803c452:	4618      	movlt	r0, r3
 803c454:	e7a4      	b.n	803c3a0 <_printf_i+0x168>
 803c456:	2301      	movs	r3, #1
 803c458:	4632      	mov	r2, r6
 803c45a:	4649      	mov	r1, r9
 803c45c:	4640      	mov	r0, r8
 803c45e:	47d0      	blx	sl
 803c460:	3001      	adds	r0, #1
 803c462:	d09b      	beq.n	803c39c <_printf_i+0x164>
 803c464:	3501      	adds	r5, #1
 803c466:	68e3      	ldr	r3, [r4, #12]
 803c468:	9903      	ldr	r1, [sp, #12]
 803c46a:	1a5b      	subs	r3, r3, r1
 803c46c:	42ab      	cmp	r3, r5
 803c46e:	dcf2      	bgt.n	803c456 <_printf_i+0x21e>
 803c470:	e7eb      	b.n	803c44a <_printf_i+0x212>
 803c472:	2500      	movs	r5, #0
 803c474:	f104 0619 	add.w	r6, r4, #25
 803c478:	e7f5      	b.n	803c466 <_printf_i+0x22e>
 803c47a:	bf00      	nop
 803c47c:	08058c11 	.word	0x08058c11
 803c480:	08058c22 	.word	0x08058c22

0803c484 <_sbrk_r>:
 803c484:	b538      	push	{r3, r4, r5, lr}
 803c486:	4d06      	ldr	r5, [pc, #24]	; (803c4a0 <_sbrk_r+0x1c>)
 803c488:	2300      	movs	r3, #0
 803c48a:	4604      	mov	r4, r0
 803c48c:	4608      	mov	r0, r1
 803c48e:	602b      	str	r3, [r5, #0]
 803c490:	f7e4 ffd6 	bl	8021440 <_sbrk>
 803c494:	1c43      	adds	r3, r0, #1
 803c496:	d102      	bne.n	803c49e <_sbrk_r+0x1a>
 803c498:	682b      	ldr	r3, [r5, #0]
 803c49a:	b103      	cbz	r3, 803c49e <_sbrk_r+0x1a>
 803c49c:	6023      	str	r3, [r4, #0]
 803c49e:	bd38      	pop	{r3, r4, r5, pc}
 803c4a0:	240387a8 	.word	0x240387a8

0803c4a4 <_raise_r>:
 803c4a4:	291f      	cmp	r1, #31
 803c4a6:	b538      	push	{r3, r4, r5, lr}
 803c4a8:	4604      	mov	r4, r0
 803c4aa:	460d      	mov	r5, r1
 803c4ac:	d904      	bls.n	803c4b8 <_raise_r+0x14>
 803c4ae:	2316      	movs	r3, #22
 803c4b0:	6003      	str	r3, [r0, #0]
 803c4b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c4b6:	bd38      	pop	{r3, r4, r5, pc}
 803c4b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803c4ba:	b112      	cbz	r2, 803c4c2 <_raise_r+0x1e>
 803c4bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803c4c0:	b94b      	cbnz	r3, 803c4d6 <_raise_r+0x32>
 803c4c2:	4620      	mov	r0, r4
 803c4c4:	f000 f830 	bl	803c528 <_getpid_r>
 803c4c8:	462a      	mov	r2, r5
 803c4ca:	4601      	mov	r1, r0
 803c4cc:	4620      	mov	r0, r4
 803c4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803c4d2:	f000 b817 	b.w	803c504 <_kill_r>
 803c4d6:	2b01      	cmp	r3, #1
 803c4d8:	d00a      	beq.n	803c4f0 <_raise_r+0x4c>
 803c4da:	1c59      	adds	r1, r3, #1
 803c4dc:	d103      	bne.n	803c4e6 <_raise_r+0x42>
 803c4de:	2316      	movs	r3, #22
 803c4e0:	6003      	str	r3, [r0, #0]
 803c4e2:	2001      	movs	r0, #1
 803c4e4:	e7e7      	b.n	803c4b6 <_raise_r+0x12>
 803c4e6:	2400      	movs	r4, #0
 803c4e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803c4ec:	4628      	mov	r0, r5
 803c4ee:	4798      	blx	r3
 803c4f0:	2000      	movs	r0, #0
 803c4f2:	e7e0      	b.n	803c4b6 <_raise_r+0x12>

0803c4f4 <raise>:
 803c4f4:	4b02      	ldr	r3, [pc, #8]	; (803c500 <raise+0xc>)
 803c4f6:	4601      	mov	r1, r0
 803c4f8:	6818      	ldr	r0, [r3, #0]
 803c4fa:	f7ff bfd3 	b.w	803c4a4 <_raise_r>
 803c4fe:	bf00      	nop
 803c500:	24000104 	.word	0x24000104

0803c504 <_kill_r>:
 803c504:	b538      	push	{r3, r4, r5, lr}
 803c506:	4d07      	ldr	r5, [pc, #28]	; (803c524 <_kill_r+0x20>)
 803c508:	2300      	movs	r3, #0
 803c50a:	4604      	mov	r4, r0
 803c50c:	4608      	mov	r0, r1
 803c50e:	4611      	mov	r1, r2
 803c510:	602b      	str	r3, [r5, #0]
 803c512:	f7e4 ff0d 	bl	8021330 <_kill>
 803c516:	1c43      	adds	r3, r0, #1
 803c518:	d102      	bne.n	803c520 <_kill_r+0x1c>
 803c51a:	682b      	ldr	r3, [r5, #0]
 803c51c:	b103      	cbz	r3, 803c520 <_kill_r+0x1c>
 803c51e:	6023      	str	r3, [r4, #0]
 803c520:	bd38      	pop	{r3, r4, r5, pc}
 803c522:	bf00      	nop
 803c524:	240387a8 	.word	0x240387a8

0803c528 <_getpid_r>:
 803c528:	f7e4 befa 	b.w	8021320 <_getpid>

0803c52c <__swbuf_r>:
 803c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803c52e:	460e      	mov	r6, r1
 803c530:	4614      	mov	r4, r2
 803c532:	4605      	mov	r5, r0
 803c534:	b118      	cbz	r0, 803c53e <__swbuf_r+0x12>
 803c536:	6983      	ldr	r3, [r0, #24]
 803c538:	b90b      	cbnz	r3, 803c53e <__swbuf_r+0x12>
 803c53a:	f000 f9d1 	bl	803c8e0 <__sinit>
 803c53e:	4b21      	ldr	r3, [pc, #132]	; (803c5c4 <__swbuf_r+0x98>)
 803c540:	429c      	cmp	r4, r3
 803c542:	d12b      	bne.n	803c59c <__swbuf_r+0x70>
 803c544:	686c      	ldr	r4, [r5, #4]
 803c546:	69a3      	ldr	r3, [r4, #24]
 803c548:	60a3      	str	r3, [r4, #8]
 803c54a:	89a3      	ldrh	r3, [r4, #12]
 803c54c:	071a      	lsls	r2, r3, #28
 803c54e:	d52f      	bpl.n	803c5b0 <__swbuf_r+0x84>
 803c550:	6923      	ldr	r3, [r4, #16]
 803c552:	b36b      	cbz	r3, 803c5b0 <__swbuf_r+0x84>
 803c554:	6923      	ldr	r3, [r4, #16]
 803c556:	6820      	ldr	r0, [r4, #0]
 803c558:	1ac0      	subs	r0, r0, r3
 803c55a:	6963      	ldr	r3, [r4, #20]
 803c55c:	b2f6      	uxtb	r6, r6
 803c55e:	4283      	cmp	r3, r0
 803c560:	4637      	mov	r7, r6
 803c562:	dc04      	bgt.n	803c56e <__swbuf_r+0x42>
 803c564:	4621      	mov	r1, r4
 803c566:	4628      	mov	r0, r5
 803c568:	f000 f926 	bl	803c7b8 <_fflush_r>
 803c56c:	bb30      	cbnz	r0, 803c5bc <__swbuf_r+0x90>
 803c56e:	68a3      	ldr	r3, [r4, #8]
 803c570:	3b01      	subs	r3, #1
 803c572:	60a3      	str	r3, [r4, #8]
 803c574:	6823      	ldr	r3, [r4, #0]
 803c576:	1c5a      	adds	r2, r3, #1
 803c578:	6022      	str	r2, [r4, #0]
 803c57a:	701e      	strb	r6, [r3, #0]
 803c57c:	6963      	ldr	r3, [r4, #20]
 803c57e:	3001      	adds	r0, #1
 803c580:	4283      	cmp	r3, r0
 803c582:	d004      	beq.n	803c58e <__swbuf_r+0x62>
 803c584:	89a3      	ldrh	r3, [r4, #12]
 803c586:	07db      	lsls	r3, r3, #31
 803c588:	d506      	bpl.n	803c598 <__swbuf_r+0x6c>
 803c58a:	2e0a      	cmp	r6, #10
 803c58c:	d104      	bne.n	803c598 <__swbuf_r+0x6c>
 803c58e:	4621      	mov	r1, r4
 803c590:	4628      	mov	r0, r5
 803c592:	f000 f911 	bl	803c7b8 <_fflush_r>
 803c596:	b988      	cbnz	r0, 803c5bc <__swbuf_r+0x90>
 803c598:	4638      	mov	r0, r7
 803c59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803c59c:	4b0a      	ldr	r3, [pc, #40]	; (803c5c8 <__swbuf_r+0x9c>)
 803c59e:	429c      	cmp	r4, r3
 803c5a0:	d101      	bne.n	803c5a6 <__swbuf_r+0x7a>
 803c5a2:	68ac      	ldr	r4, [r5, #8]
 803c5a4:	e7cf      	b.n	803c546 <__swbuf_r+0x1a>
 803c5a6:	4b09      	ldr	r3, [pc, #36]	; (803c5cc <__swbuf_r+0xa0>)
 803c5a8:	429c      	cmp	r4, r3
 803c5aa:	bf08      	it	eq
 803c5ac:	68ec      	ldreq	r4, [r5, #12]
 803c5ae:	e7ca      	b.n	803c546 <__swbuf_r+0x1a>
 803c5b0:	4621      	mov	r1, r4
 803c5b2:	4628      	mov	r0, r5
 803c5b4:	f000 f80c 	bl	803c5d0 <__swsetup_r>
 803c5b8:	2800      	cmp	r0, #0
 803c5ba:	d0cb      	beq.n	803c554 <__swbuf_r+0x28>
 803c5bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 803c5c0:	e7ea      	b.n	803c598 <__swbuf_r+0x6c>
 803c5c2:	bf00      	nop
 803c5c4:	08058c54 	.word	0x08058c54
 803c5c8:	08058c74 	.word	0x08058c74
 803c5cc:	08058c34 	.word	0x08058c34

0803c5d0 <__swsetup_r>:
 803c5d0:	4b32      	ldr	r3, [pc, #200]	; (803c69c <__swsetup_r+0xcc>)
 803c5d2:	b570      	push	{r4, r5, r6, lr}
 803c5d4:	681d      	ldr	r5, [r3, #0]
 803c5d6:	4606      	mov	r6, r0
 803c5d8:	460c      	mov	r4, r1
 803c5da:	b125      	cbz	r5, 803c5e6 <__swsetup_r+0x16>
 803c5dc:	69ab      	ldr	r3, [r5, #24]
 803c5de:	b913      	cbnz	r3, 803c5e6 <__swsetup_r+0x16>
 803c5e0:	4628      	mov	r0, r5
 803c5e2:	f000 f97d 	bl	803c8e0 <__sinit>
 803c5e6:	4b2e      	ldr	r3, [pc, #184]	; (803c6a0 <__swsetup_r+0xd0>)
 803c5e8:	429c      	cmp	r4, r3
 803c5ea:	d10f      	bne.n	803c60c <__swsetup_r+0x3c>
 803c5ec:	686c      	ldr	r4, [r5, #4]
 803c5ee:	89a3      	ldrh	r3, [r4, #12]
 803c5f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c5f4:	0719      	lsls	r1, r3, #28
 803c5f6:	d42c      	bmi.n	803c652 <__swsetup_r+0x82>
 803c5f8:	06dd      	lsls	r5, r3, #27
 803c5fa:	d411      	bmi.n	803c620 <__swsetup_r+0x50>
 803c5fc:	2309      	movs	r3, #9
 803c5fe:	6033      	str	r3, [r6, #0]
 803c600:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803c604:	81a3      	strh	r3, [r4, #12]
 803c606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c60a:	e03e      	b.n	803c68a <__swsetup_r+0xba>
 803c60c:	4b25      	ldr	r3, [pc, #148]	; (803c6a4 <__swsetup_r+0xd4>)
 803c60e:	429c      	cmp	r4, r3
 803c610:	d101      	bne.n	803c616 <__swsetup_r+0x46>
 803c612:	68ac      	ldr	r4, [r5, #8]
 803c614:	e7eb      	b.n	803c5ee <__swsetup_r+0x1e>
 803c616:	4b24      	ldr	r3, [pc, #144]	; (803c6a8 <__swsetup_r+0xd8>)
 803c618:	429c      	cmp	r4, r3
 803c61a:	bf08      	it	eq
 803c61c:	68ec      	ldreq	r4, [r5, #12]
 803c61e:	e7e6      	b.n	803c5ee <__swsetup_r+0x1e>
 803c620:	0758      	lsls	r0, r3, #29
 803c622:	d512      	bpl.n	803c64a <__swsetup_r+0x7a>
 803c624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803c626:	b141      	cbz	r1, 803c63a <__swsetup_r+0x6a>
 803c628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803c62c:	4299      	cmp	r1, r3
 803c62e:	d002      	beq.n	803c636 <__swsetup_r+0x66>
 803c630:	4630      	mov	r0, r6
 803c632:	f7ff fb59 	bl	803bce8 <_free_r>
 803c636:	2300      	movs	r3, #0
 803c638:	6363      	str	r3, [r4, #52]	; 0x34
 803c63a:	89a3      	ldrh	r3, [r4, #12]
 803c63c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803c640:	81a3      	strh	r3, [r4, #12]
 803c642:	2300      	movs	r3, #0
 803c644:	6063      	str	r3, [r4, #4]
 803c646:	6923      	ldr	r3, [r4, #16]
 803c648:	6023      	str	r3, [r4, #0]
 803c64a:	89a3      	ldrh	r3, [r4, #12]
 803c64c:	f043 0308 	orr.w	r3, r3, #8
 803c650:	81a3      	strh	r3, [r4, #12]
 803c652:	6923      	ldr	r3, [r4, #16]
 803c654:	b94b      	cbnz	r3, 803c66a <__swsetup_r+0x9a>
 803c656:	89a3      	ldrh	r3, [r4, #12]
 803c658:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803c65c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803c660:	d003      	beq.n	803c66a <__swsetup_r+0x9a>
 803c662:	4621      	mov	r1, r4
 803c664:	4630      	mov	r0, r6
 803c666:	f000 fa01 	bl	803ca6c <__smakebuf_r>
 803c66a:	89a0      	ldrh	r0, [r4, #12]
 803c66c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c670:	f010 0301 	ands.w	r3, r0, #1
 803c674:	d00a      	beq.n	803c68c <__swsetup_r+0xbc>
 803c676:	2300      	movs	r3, #0
 803c678:	60a3      	str	r3, [r4, #8]
 803c67a:	6963      	ldr	r3, [r4, #20]
 803c67c:	425b      	negs	r3, r3
 803c67e:	61a3      	str	r3, [r4, #24]
 803c680:	6923      	ldr	r3, [r4, #16]
 803c682:	b943      	cbnz	r3, 803c696 <__swsetup_r+0xc6>
 803c684:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803c688:	d1ba      	bne.n	803c600 <__swsetup_r+0x30>
 803c68a:	bd70      	pop	{r4, r5, r6, pc}
 803c68c:	0781      	lsls	r1, r0, #30
 803c68e:	bf58      	it	pl
 803c690:	6963      	ldrpl	r3, [r4, #20]
 803c692:	60a3      	str	r3, [r4, #8]
 803c694:	e7f4      	b.n	803c680 <__swsetup_r+0xb0>
 803c696:	2000      	movs	r0, #0
 803c698:	e7f7      	b.n	803c68a <__swsetup_r+0xba>
 803c69a:	bf00      	nop
 803c69c:	24000104 	.word	0x24000104
 803c6a0:	08058c54 	.word	0x08058c54
 803c6a4:	08058c74 	.word	0x08058c74
 803c6a8:	08058c34 	.word	0x08058c34

0803c6ac <__sflush_r>:
 803c6ac:	898a      	ldrh	r2, [r1, #12]
 803c6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803c6b2:	4605      	mov	r5, r0
 803c6b4:	0710      	lsls	r0, r2, #28
 803c6b6:	460c      	mov	r4, r1
 803c6b8:	d458      	bmi.n	803c76c <__sflush_r+0xc0>
 803c6ba:	684b      	ldr	r3, [r1, #4]
 803c6bc:	2b00      	cmp	r3, #0
 803c6be:	dc05      	bgt.n	803c6cc <__sflush_r+0x20>
 803c6c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803c6c2:	2b00      	cmp	r3, #0
 803c6c4:	dc02      	bgt.n	803c6cc <__sflush_r+0x20>
 803c6c6:	2000      	movs	r0, #0
 803c6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803c6cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803c6ce:	2e00      	cmp	r6, #0
 803c6d0:	d0f9      	beq.n	803c6c6 <__sflush_r+0x1a>
 803c6d2:	2300      	movs	r3, #0
 803c6d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803c6d8:	682f      	ldr	r7, [r5, #0]
 803c6da:	602b      	str	r3, [r5, #0]
 803c6dc:	d032      	beq.n	803c744 <__sflush_r+0x98>
 803c6de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803c6e0:	89a3      	ldrh	r3, [r4, #12]
 803c6e2:	075a      	lsls	r2, r3, #29
 803c6e4:	d505      	bpl.n	803c6f2 <__sflush_r+0x46>
 803c6e6:	6863      	ldr	r3, [r4, #4]
 803c6e8:	1ac0      	subs	r0, r0, r3
 803c6ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803c6ec:	b10b      	cbz	r3, 803c6f2 <__sflush_r+0x46>
 803c6ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803c6f0:	1ac0      	subs	r0, r0, r3
 803c6f2:	2300      	movs	r3, #0
 803c6f4:	4602      	mov	r2, r0
 803c6f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803c6f8:	6a21      	ldr	r1, [r4, #32]
 803c6fa:	4628      	mov	r0, r5
 803c6fc:	47b0      	blx	r6
 803c6fe:	1c43      	adds	r3, r0, #1
 803c700:	89a3      	ldrh	r3, [r4, #12]
 803c702:	d106      	bne.n	803c712 <__sflush_r+0x66>
 803c704:	6829      	ldr	r1, [r5, #0]
 803c706:	291d      	cmp	r1, #29
 803c708:	d82c      	bhi.n	803c764 <__sflush_r+0xb8>
 803c70a:	4a2a      	ldr	r2, [pc, #168]	; (803c7b4 <__sflush_r+0x108>)
 803c70c:	40ca      	lsrs	r2, r1
 803c70e:	07d6      	lsls	r6, r2, #31
 803c710:	d528      	bpl.n	803c764 <__sflush_r+0xb8>
 803c712:	2200      	movs	r2, #0
 803c714:	6062      	str	r2, [r4, #4]
 803c716:	04d9      	lsls	r1, r3, #19
 803c718:	6922      	ldr	r2, [r4, #16]
 803c71a:	6022      	str	r2, [r4, #0]
 803c71c:	d504      	bpl.n	803c728 <__sflush_r+0x7c>
 803c71e:	1c42      	adds	r2, r0, #1
 803c720:	d101      	bne.n	803c726 <__sflush_r+0x7a>
 803c722:	682b      	ldr	r3, [r5, #0]
 803c724:	b903      	cbnz	r3, 803c728 <__sflush_r+0x7c>
 803c726:	6560      	str	r0, [r4, #84]	; 0x54
 803c728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803c72a:	602f      	str	r7, [r5, #0]
 803c72c:	2900      	cmp	r1, #0
 803c72e:	d0ca      	beq.n	803c6c6 <__sflush_r+0x1a>
 803c730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803c734:	4299      	cmp	r1, r3
 803c736:	d002      	beq.n	803c73e <__sflush_r+0x92>
 803c738:	4628      	mov	r0, r5
 803c73a:	f7ff fad5 	bl	803bce8 <_free_r>
 803c73e:	2000      	movs	r0, #0
 803c740:	6360      	str	r0, [r4, #52]	; 0x34
 803c742:	e7c1      	b.n	803c6c8 <__sflush_r+0x1c>
 803c744:	6a21      	ldr	r1, [r4, #32]
 803c746:	2301      	movs	r3, #1
 803c748:	4628      	mov	r0, r5
 803c74a:	47b0      	blx	r6
 803c74c:	1c41      	adds	r1, r0, #1
 803c74e:	d1c7      	bne.n	803c6e0 <__sflush_r+0x34>
 803c750:	682b      	ldr	r3, [r5, #0]
 803c752:	2b00      	cmp	r3, #0
 803c754:	d0c4      	beq.n	803c6e0 <__sflush_r+0x34>
 803c756:	2b1d      	cmp	r3, #29
 803c758:	d001      	beq.n	803c75e <__sflush_r+0xb2>
 803c75a:	2b16      	cmp	r3, #22
 803c75c:	d101      	bne.n	803c762 <__sflush_r+0xb6>
 803c75e:	602f      	str	r7, [r5, #0]
 803c760:	e7b1      	b.n	803c6c6 <__sflush_r+0x1a>
 803c762:	89a3      	ldrh	r3, [r4, #12]
 803c764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803c768:	81a3      	strh	r3, [r4, #12]
 803c76a:	e7ad      	b.n	803c6c8 <__sflush_r+0x1c>
 803c76c:	690f      	ldr	r7, [r1, #16]
 803c76e:	2f00      	cmp	r7, #0
 803c770:	d0a9      	beq.n	803c6c6 <__sflush_r+0x1a>
 803c772:	0793      	lsls	r3, r2, #30
 803c774:	680e      	ldr	r6, [r1, #0]
 803c776:	bf08      	it	eq
 803c778:	694b      	ldreq	r3, [r1, #20]
 803c77a:	600f      	str	r7, [r1, #0]
 803c77c:	bf18      	it	ne
 803c77e:	2300      	movne	r3, #0
 803c780:	eba6 0807 	sub.w	r8, r6, r7
 803c784:	608b      	str	r3, [r1, #8]
 803c786:	f1b8 0f00 	cmp.w	r8, #0
 803c78a:	dd9c      	ble.n	803c6c6 <__sflush_r+0x1a>
 803c78c:	6a21      	ldr	r1, [r4, #32]
 803c78e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803c790:	4643      	mov	r3, r8
 803c792:	463a      	mov	r2, r7
 803c794:	4628      	mov	r0, r5
 803c796:	47b0      	blx	r6
 803c798:	2800      	cmp	r0, #0
 803c79a:	dc06      	bgt.n	803c7aa <__sflush_r+0xfe>
 803c79c:	89a3      	ldrh	r3, [r4, #12]
 803c79e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803c7a2:	81a3      	strh	r3, [r4, #12]
 803c7a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c7a8:	e78e      	b.n	803c6c8 <__sflush_r+0x1c>
 803c7aa:	4407      	add	r7, r0
 803c7ac:	eba8 0800 	sub.w	r8, r8, r0
 803c7b0:	e7e9      	b.n	803c786 <__sflush_r+0xda>
 803c7b2:	bf00      	nop
 803c7b4:	20400001 	.word	0x20400001

0803c7b8 <_fflush_r>:
 803c7b8:	b538      	push	{r3, r4, r5, lr}
 803c7ba:	690b      	ldr	r3, [r1, #16]
 803c7bc:	4605      	mov	r5, r0
 803c7be:	460c      	mov	r4, r1
 803c7c0:	b913      	cbnz	r3, 803c7c8 <_fflush_r+0x10>
 803c7c2:	2500      	movs	r5, #0
 803c7c4:	4628      	mov	r0, r5
 803c7c6:	bd38      	pop	{r3, r4, r5, pc}
 803c7c8:	b118      	cbz	r0, 803c7d2 <_fflush_r+0x1a>
 803c7ca:	6983      	ldr	r3, [r0, #24]
 803c7cc:	b90b      	cbnz	r3, 803c7d2 <_fflush_r+0x1a>
 803c7ce:	f000 f887 	bl	803c8e0 <__sinit>
 803c7d2:	4b14      	ldr	r3, [pc, #80]	; (803c824 <_fflush_r+0x6c>)
 803c7d4:	429c      	cmp	r4, r3
 803c7d6:	d11b      	bne.n	803c810 <_fflush_r+0x58>
 803c7d8:	686c      	ldr	r4, [r5, #4]
 803c7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803c7de:	2b00      	cmp	r3, #0
 803c7e0:	d0ef      	beq.n	803c7c2 <_fflush_r+0xa>
 803c7e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803c7e4:	07d0      	lsls	r0, r2, #31
 803c7e6:	d404      	bmi.n	803c7f2 <_fflush_r+0x3a>
 803c7e8:	0599      	lsls	r1, r3, #22
 803c7ea:	d402      	bmi.n	803c7f2 <_fflush_r+0x3a>
 803c7ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803c7ee:	f000 f915 	bl	803ca1c <__retarget_lock_acquire_recursive>
 803c7f2:	4628      	mov	r0, r5
 803c7f4:	4621      	mov	r1, r4
 803c7f6:	f7ff ff59 	bl	803c6ac <__sflush_r>
 803c7fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803c7fc:	07da      	lsls	r2, r3, #31
 803c7fe:	4605      	mov	r5, r0
 803c800:	d4e0      	bmi.n	803c7c4 <_fflush_r+0xc>
 803c802:	89a3      	ldrh	r3, [r4, #12]
 803c804:	059b      	lsls	r3, r3, #22
 803c806:	d4dd      	bmi.n	803c7c4 <_fflush_r+0xc>
 803c808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803c80a:	f000 f908 	bl	803ca1e <__retarget_lock_release_recursive>
 803c80e:	e7d9      	b.n	803c7c4 <_fflush_r+0xc>
 803c810:	4b05      	ldr	r3, [pc, #20]	; (803c828 <_fflush_r+0x70>)
 803c812:	429c      	cmp	r4, r3
 803c814:	d101      	bne.n	803c81a <_fflush_r+0x62>
 803c816:	68ac      	ldr	r4, [r5, #8]
 803c818:	e7df      	b.n	803c7da <_fflush_r+0x22>
 803c81a:	4b04      	ldr	r3, [pc, #16]	; (803c82c <_fflush_r+0x74>)
 803c81c:	429c      	cmp	r4, r3
 803c81e:	bf08      	it	eq
 803c820:	68ec      	ldreq	r4, [r5, #12]
 803c822:	e7da      	b.n	803c7da <_fflush_r+0x22>
 803c824:	08058c54 	.word	0x08058c54
 803c828:	08058c74 	.word	0x08058c74
 803c82c:	08058c34 	.word	0x08058c34

0803c830 <std>:
 803c830:	2300      	movs	r3, #0
 803c832:	b510      	push	{r4, lr}
 803c834:	4604      	mov	r4, r0
 803c836:	e9c0 3300 	strd	r3, r3, [r0]
 803c83a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803c83e:	6083      	str	r3, [r0, #8]
 803c840:	8181      	strh	r1, [r0, #12]
 803c842:	6643      	str	r3, [r0, #100]	; 0x64
 803c844:	81c2      	strh	r2, [r0, #14]
 803c846:	6183      	str	r3, [r0, #24]
 803c848:	4619      	mov	r1, r3
 803c84a:	2208      	movs	r2, #8
 803c84c:	305c      	adds	r0, #92	; 0x5c
 803c84e:	f7ff fa43 	bl	803bcd8 <memset>
 803c852:	4b05      	ldr	r3, [pc, #20]	; (803c868 <std+0x38>)
 803c854:	6263      	str	r3, [r4, #36]	; 0x24
 803c856:	4b05      	ldr	r3, [pc, #20]	; (803c86c <std+0x3c>)
 803c858:	62a3      	str	r3, [r4, #40]	; 0x28
 803c85a:	4b05      	ldr	r3, [pc, #20]	; (803c870 <std+0x40>)
 803c85c:	62e3      	str	r3, [r4, #44]	; 0x2c
 803c85e:	4b05      	ldr	r3, [pc, #20]	; (803c874 <std+0x44>)
 803c860:	6224      	str	r4, [r4, #32]
 803c862:	6323      	str	r3, [r4, #48]	; 0x30
 803c864:	bd10      	pop	{r4, pc}
 803c866:	bf00      	nop
 803c868:	0803cb05 	.word	0x0803cb05
 803c86c:	0803cb27 	.word	0x0803cb27
 803c870:	0803cb5f 	.word	0x0803cb5f
 803c874:	0803cb83 	.word	0x0803cb83

0803c878 <_cleanup_r>:
 803c878:	4901      	ldr	r1, [pc, #4]	; (803c880 <_cleanup_r+0x8>)
 803c87a:	f000 b8af 	b.w	803c9dc <_fwalk_reent>
 803c87e:	bf00      	nop
 803c880:	0803c7b9 	.word	0x0803c7b9

0803c884 <__sfmoreglue>:
 803c884:	b570      	push	{r4, r5, r6, lr}
 803c886:	2268      	movs	r2, #104	; 0x68
 803c888:	1e4d      	subs	r5, r1, #1
 803c88a:	4355      	muls	r5, r2
 803c88c:	460e      	mov	r6, r1
 803c88e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803c892:	f7ff fa95 	bl	803bdc0 <_malloc_r>
 803c896:	4604      	mov	r4, r0
 803c898:	b140      	cbz	r0, 803c8ac <__sfmoreglue+0x28>
 803c89a:	2100      	movs	r1, #0
 803c89c:	e9c0 1600 	strd	r1, r6, [r0]
 803c8a0:	300c      	adds	r0, #12
 803c8a2:	60a0      	str	r0, [r4, #8]
 803c8a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803c8a8:	f7ff fa16 	bl	803bcd8 <memset>
 803c8ac:	4620      	mov	r0, r4
 803c8ae:	bd70      	pop	{r4, r5, r6, pc}

0803c8b0 <__sfp_lock_acquire>:
 803c8b0:	4801      	ldr	r0, [pc, #4]	; (803c8b8 <__sfp_lock_acquire+0x8>)
 803c8b2:	f000 b8b3 	b.w	803ca1c <__retarget_lock_acquire_recursive>
 803c8b6:	bf00      	nop
 803c8b8:	240387a5 	.word	0x240387a5

0803c8bc <__sfp_lock_release>:
 803c8bc:	4801      	ldr	r0, [pc, #4]	; (803c8c4 <__sfp_lock_release+0x8>)
 803c8be:	f000 b8ae 	b.w	803ca1e <__retarget_lock_release_recursive>
 803c8c2:	bf00      	nop
 803c8c4:	240387a5 	.word	0x240387a5

0803c8c8 <__sinit_lock_acquire>:
 803c8c8:	4801      	ldr	r0, [pc, #4]	; (803c8d0 <__sinit_lock_acquire+0x8>)
 803c8ca:	f000 b8a7 	b.w	803ca1c <__retarget_lock_acquire_recursive>
 803c8ce:	bf00      	nop
 803c8d0:	240387a6 	.word	0x240387a6

0803c8d4 <__sinit_lock_release>:
 803c8d4:	4801      	ldr	r0, [pc, #4]	; (803c8dc <__sinit_lock_release+0x8>)
 803c8d6:	f000 b8a2 	b.w	803ca1e <__retarget_lock_release_recursive>
 803c8da:	bf00      	nop
 803c8dc:	240387a6 	.word	0x240387a6

0803c8e0 <__sinit>:
 803c8e0:	b510      	push	{r4, lr}
 803c8e2:	4604      	mov	r4, r0
 803c8e4:	f7ff fff0 	bl	803c8c8 <__sinit_lock_acquire>
 803c8e8:	69a3      	ldr	r3, [r4, #24]
 803c8ea:	b11b      	cbz	r3, 803c8f4 <__sinit+0x14>
 803c8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803c8f0:	f7ff bff0 	b.w	803c8d4 <__sinit_lock_release>
 803c8f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803c8f8:	6523      	str	r3, [r4, #80]	; 0x50
 803c8fa:	4b13      	ldr	r3, [pc, #76]	; (803c948 <__sinit+0x68>)
 803c8fc:	4a13      	ldr	r2, [pc, #76]	; (803c94c <__sinit+0x6c>)
 803c8fe:	681b      	ldr	r3, [r3, #0]
 803c900:	62a2      	str	r2, [r4, #40]	; 0x28
 803c902:	42a3      	cmp	r3, r4
 803c904:	bf04      	itt	eq
 803c906:	2301      	moveq	r3, #1
 803c908:	61a3      	streq	r3, [r4, #24]
 803c90a:	4620      	mov	r0, r4
 803c90c:	f000 f820 	bl	803c950 <__sfp>
 803c910:	6060      	str	r0, [r4, #4]
 803c912:	4620      	mov	r0, r4
 803c914:	f000 f81c 	bl	803c950 <__sfp>
 803c918:	60a0      	str	r0, [r4, #8]
 803c91a:	4620      	mov	r0, r4
 803c91c:	f000 f818 	bl	803c950 <__sfp>
 803c920:	2200      	movs	r2, #0
 803c922:	60e0      	str	r0, [r4, #12]
 803c924:	2104      	movs	r1, #4
 803c926:	6860      	ldr	r0, [r4, #4]
 803c928:	f7ff ff82 	bl	803c830 <std>
 803c92c:	68a0      	ldr	r0, [r4, #8]
 803c92e:	2201      	movs	r2, #1
 803c930:	2109      	movs	r1, #9
 803c932:	f7ff ff7d 	bl	803c830 <std>
 803c936:	68e0      	ldr	r0, [r4, #12]
 803c938:	2202      	movs	r2, #2
 803c93a:	2112      	movs	r1, #18
 803c93c:	f7ff ff78 	bl	803c830 <std>
 803c940:	2301      	movs	r3, #1
 803c942:	61a3      	str	r3, [r4, #24]
 803c944:	e7d2      	b.n	803c8ec <__sinit+0xc>
 803c946:	bf00      	nop
 803c948:	08058bfc 	.word	0x08058bfc
 803c94c:	0803c879 	.word	0x0803c879

0803c950 <__sfp>:
 803c950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803c952:	4607      	mov	r7, r0
 803c954:	f7ff ffac 	bl	803c8b0 <__sfp_lock_acquire>
 803c958:	4b1e      	ldr	r3, [pc, #120]	; (803c9d4 <__sfp+0x84>)
 803c95a:	681e      	ldr	r6, [r3, #0]
 803c95c:	69b3      	ldr	r3, [r6, #24]
 803c95e:	b913      	cbnz	r3, 803c966 <__sfp+0x16>
 803c960:	4630      	mov	r0, r6
 803c962:	f7ff ffbd 	bl	803c8e0 <__sinit>
 803c966:	3648      	adds	r6, #72	; 0x48
 803c968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803c96c:	3b01      	subs	r3, #1
 803c96e:	d503      	bpl.n	803c978 <__sfp+0x28>
 803c970:	6833      	ldr	r3, [r6, #0]
 803c972:	b30b      	cbz	r3, 803c9b8 <__sfp+0x68>
 803c974:	6836      	ldr	r6, [r6, #0]
 803c976:	e7f7      	b.n	803c968 <__sfp+0x18>
 803c978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803c97c:	b9d5      	cbnz	r5, 803c9b4 <__sfp+0x64>
 803c97e:	4b16      	ldr	r3, [pc, #88]	; (803c9d8 <__sfp+0x88>)
 803c980:	60e3      	str	r3, [r4, #12]
 803c982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803c986:	6665      	str	r5, [r4, #100]	; 0x64
 803c988:	f000 f847 	bl	803ca1a <__retarget_lock_init_recursive>
 803c98c:	f7ff ff96 	bl	803c8bc <__sfp_lock_release>
 803c990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 803c994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803c998:	6025      	str	r5, [r4, #0]
 803c99a:	61a5      	str	r5, [r4, #24]
 803c99c:	2208      	movs	r2, #8
 803c99e:	4629      	mov	r1, r5
 803c9a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 803c9a4:	f7ff f998 	bl	803bcd8 <memset>
 803c9a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803c9ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 803c9b0:	4620      	mov	r0, r4
 803c9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803c9b4:	3468      	adds	r4, #104	; 0x68
 803c9b6:	e7d9      	b.n	803c96c <__sfp+0x1c>
 803c9b8:	2104      	movs	r1, #4
 803c9ba:	4638      	mov	r0, r7
 803c9bc:	f7ff ff62 	bl	803c884 <__sfmoreglue>
 803c9c0:	4604      	mov	r4, r0
 803c9c2:	6030      	str	r0, [r6, #0]
 803c9c4:	2800      	cmp	r0, #0
 803c9c6:	d1d5      	bne.n	803c974 <__sfp+0x24>
 803c9c8:	f7ff ff78 	bl	803c8bc <__sfp_lock_release>
 803c9cc:	230c      	movs	r3, #12
 803c9ce:	603b      	str	r3, [r7, #0]
 803c9d0:	e7ee      	b.n	803c9b0 <__sfp+0x60>
 803c9d2:	bf00      	nop
 803c9d4:	08058bfc 	.word	0x08058bfc
 803c9d8:	ffff0001 	.word	0xffff0001

0803c9dc <_fwalk_reent>:
 803c9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803c9e0:	4606      	mov	r6, r0
 803c9e2:	4688      	mov	r8, r1
 803c9e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803c9e8:	2700      	movs	r7, #0
 803c9ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803c9ee:	f1b9 0901 	subs.w	r9, r9, #1
 803c9f2:	d505      	bpl.n	803ca00 <_fwalk_reent+0x24>
 803c9f4:	6824      	ldr	r4, [r4, #0]
 803c9f6:	2c00      	cmp	r4, #0
 803c9f8:	d1f7      	bne.n	803c9ea <_fwalk_reent+0xe>
 803c9fa:	4638      	mov	r0, r7
 803c9fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803ca00:	89ab      	ldrh	r3, [r5, #12]
 803ca02:	2b01      	cmp	r3, #1
 803ca04:	d907      	bls.n	803ca16 <_fwalk_reent+0x3a>
 803ca06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803ca0a:	3301      	adds	r3, #1
 803ca0c:	d003      	beq.n	803ca16 <_fwalk_reent+0x3a>
 803ca0e:	4629      	mov	r1, r5
 803ca10:	4630      	mov	r0, r6
 803ca12:	47c0      	blx	r8
 803ca14:	4307      	orrs	r7, r0
 803ca16:	3568      	adds	r5, #104	; 0x68
 803ca18:	e7e9      	b.n	803c9ee <_fwalk_reent+0x12>

0803ca1a <__retarget_lock_init_recursive>:
 803ca1a:	4770      	bx	lr

0803ca1c <__retarget_lock_acquire_recursive>:
 803ca1c:	4770      	bx	lr

0803ca1e <__retarget_lock_release_recursive>:
 803ca1e:	4770      	bx	lr

0803ca20 <__swhatbuf_r>:
 803ca20:	b570      	push	{r4, r5, r6, lr}
 803ca22:	460e      	mov	r6, r1
 803ca24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803ca28:	2900      	cmp	r1, #0
 803ca2a:	b096      	sub	sp, #88	; 0x58
 803ca2c:	4614      	mov	r4, r2
 803ca2e:	461d      	mov	r5, r3
 803ca30:	da08      	bge.n	803ca44 <__swhatbuf_r+0x24>
 803ca32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803ca36:	2200      	movs	r2, #0
 803ca38:	602a      	str	r2, [r5, #0]
 803ca3a:	061a      	lsls	r2, r3, #24
 803ca3c:	d410      	bmi.n	803ca60 <__swhatbuf_r+0x40>
 803ca3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803ca42:	e00e      	b.n	803ca62 <__swhatbuf_r+0x42>
 803ca44:	466a      	mov	r2, sp
 803ca46:	f000 f8c3 	bl	803cbd0 <_fstat_r>
 803ca4a:	2800      	cmp	r0, #0
 803ca4c:	dbf1      	blt.n	803ca32 <__swhatbuf_r+0x12>
 803ca4e:	9a01      	ldr	r2, [sp, #4]
 803ca50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803ca54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803ca58:	425a      	negs	r2, r3
 803ca5a:	415a      	adcs	r2, r3
 803ca5c:	602a      	str	r2, [r5, #0]
 803ca5e:	e7ee      	b.n	803ca3e <__swhatbuf_r+0x1e>
 803ca60:	2340      	movs	r3, #64	; 0x40
 803ca62:	2000      	movs	r0, #0
 803ca64:	6023      	str	r3, [r4, #0]
 803ca66:	b016      	add	sp, #88	; 0x58
 803ca68:	bd70      	pop	{r4, r5, r6, pc}
	...

0803ca6c <__smakebuf_r>:
 803ca6c:	898b      	ldrh	r3, [r1, #12]
 803ca6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803ca70:	079d      	lsls	r5, r3, #30
 803ca72:	4606      	mov	r6, r0
 803ca74:	460c      	mov	r4, r1
 803ca76:	d507      	bpl.n	803ca88 <__smakebuf_r+0x1c>
 803ca78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803ca7c:	6023      	str	r3, [r4, #0]
 803ca7e:	6123      	str	r3, [r4, #16]
 803ca80:	2301      	movs	r3, #1
 803ca82:	6163      	str	r3, [r4, #20]
 803ca84:	b002      	add	sp, #8
 803ca86:	bd70      	pop	{r4, r5, r6, pc}
 803ca88:	ab01      	add	r3, sp, #4
 803ca8a:	466a      	mov	r2, sp
 803ca8c:	f7ff ffc8 	bl	803ca20 <__swhatbuf_r>
 803ca90:	9900      	ldr	r1, [sp, #0]
 803ca92:	4605      	mov	r5, r0
 803ca94:	4630      	mov	r0, r6
 803ca96:	f7ff f993 	bl	803bdc0 <_malloc_r>
 803ca9a:	b948      	cbnz	r0, 803cab0 <__smakebuf_r+0x44>
 803ca9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803caa0:	059a      	lsls	r2, r3, #22
 803caa2:	d4ef      	bmi.n	803ca84 <__smakebuf_r+0x18>
 803caa4:	f023 0303 	bic.w	r3, r3, #3
 803caa8:	f043 0302 	orr.w	r3, r3, #2
 803caac:	81a3      	strh	r3, [r4, #12]
 803caae:	e7e3      	b.n	803ca78 <__smakebuf_r+0xc>
 803cab0:	4b0d      	ldr	r3, [pc, #52]	; (803cae8 <__smakebuf_r+0x7c>)
 803cab2:	62b3      	str	r3, [r6, #40]	; 0x28
 803cab4:	89a3      	ldrh	r3, [r4, #12]
 803cab6:	6020      	str	r0, [r4, #0]
 803cab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803cabc:	81a3      	strh	r3, [r4, #12]
 803cabe:	9b00      	ldr	r3, [sp, #0]
 803cac0:	6163      	str	r3, [r4, #20]
 803cac2:	9b01      	ldr	r3, [sp, #4]
 803cac4:	6120      	str	r0, [r4, #16]
 803cac6:	b15b      	cbz	r3, 803cae0 <__smakebuf_r+0x74>
 803cac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803cacc:	4630      	mov	r0, r6
 803cace:	f000 f891 	bl	803cbf4 <_isatty_r>
 803cad2:	b128      	cbz	r0, 803cae0 <__smakebuf_r+0x74>
 803cad4:	89a3      	ldrh	r3, [r4, #12]
 803cad6:	f023 0303 	bic.w	r3, r3, #3
 803cada:	f043 0301 	orr.w	r3, r3, #1
 803cade:	81a3      	strh	r3, [r4, #12]
 803cae0:	89a0      	ldrh	r0, [r4, #12]
 803cae2:	4305      	orrs	r5, r0
 803cae4:	81a5      	strh	r5, [r4, #12]
 803cae6:	e7cd      	b.n	803ca84 <__smakebuf_r+0x18>
 803cae8:	0803c879 	.word	0x0803c879

0803caec <__malloc_lock>:
 803caec:	4801      	ldr	r0, [pc, #4]	; (803caf4 <__malloc_lock+0x8>)
 803caee:	f7ff bf95 	b.w	803ca1c <__retarget_lock_acquire_recursive>
 803caf2:	bf00      	nop
 803caf4:	240387a4 	.word	0x240387a4

0803caf8 <__malloc_unlock>:
 803caf8:	4801      	ldr	r0, [pc, #4]	; (803cb00 <__malloc_unlock+0x8>)
 803cafa:	f7ff bf90 	b.w	803ca1e <__retarget_lock_release_recursive>
 803cafe:	bf00      	nop
 803cb00:	240387a4 	.word	0x240387a4

0803cb04 <__sread>:
 803cb04:	b510      	push	{r4, lr}
 803cb06:	460c      	mov	r4, r1
 803cb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cb0c:	f000 f894 	bl	803cc38 <_read_r>
 803cb10:	2800      	cmp	r0, #0
 803cb12:	bfab      	itete	ge
 803cb14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803cb16:	89a3      	ldrhlt	r3, [r4, #12]
 803cb18:	181b      	addge	r3, r3, r0
 803cb1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803cb1e:	bfac      	ite	ge
 803cb20:	6563      	strge	r3, [r4, #84]	; 0x54
 803cb22:	81a3      	strhlt	r3, [r4, #12]
 803cb24:	bd10      	pop	{r4, pc}

0803cb26 <__swrite>:
 803cb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803cb2a:	461f      	mov	r7, r3
 803cb2c:	898b      	ldrh	r3, [r1, #12]
 803cb2e:	05db      	lsls	r3, r3, #23
 803cb30:	4605      	mov	r5, r0
 803cb32:	460c      	mov	r4, r1
 803cb34:	4616      	mov	r6, r2
 803cb36:	d505      	bpl.n	803cb44 <__swrite+0x1e>
 803cb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cb3c:	2302      	movs	r3, #2
 803cb3e:	2200      	movs	r2, #0
 803cb40:	f000 f868 	bl	803cc14 <_lseek_r>
 803cb44:	89a3      	ldrh	r3, [r4, #12]
 803cb46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803cb4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803cb4e:	81a3      	strh	r3, [r4, #12]
 803cb50:	4632      	mov	r2, r6
 803cb52:	463b      	mov	r3, r7
 803cb54:	4628      	mov	r0, r5
 803cb56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803cb5a:	f000 b817 	b.w	803cb8c <_write_r>

0803cb5e <__sseek>:
 803cb5e:	b510      	push	{r4, lr}
 803cb60:	460c      	mov	r4, r1
 803cb62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cb66:	f000 f855 	bl	803cc14 <_lseek_r>
 803cb6a:	1c43      	adds	r3, r0, #1
 803cb6c:	89a3      	ldrh	r3, [r4, #12]
 803cb6e:	bf15      	itete	ne
 803cb70:	6560      	strne	r0, [r4, #84]	; 0x54
 803cb72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803cb76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803cb7a:	81a3      	strheq	r3, [r4, #12]
 803cb7c:	bf18      	it	ne
 803cb7e:	81a3      	strhne	r3, [r4, #12]
 803cb80:	bd10      	pop	{r4, pc}

0803cb82 <__sclose>:
 803cb82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cb86:	f000 b813 	b.w	803cbb0 <_close_r>
	...

0803cb8c <_write_r>:
 803cb8c:	b538      	push	{r3, r4, r5, lr}
 803cb8e:	4d07      	ldr	r5, [pc, #28]	; (803cbac <_write_r+0x20>)
 803cb90:	4604      	mov	r4, r0
 803cb92:	4608      	mov	r0, r1
 803cb94:	4611      	mov	r1, r2
 803cb96:	2200      	movs	r2, #0
 803cb98:	602a      	str	r2, [r5, #0]
 803cb9a:	461a      	mov	r2, r3
 803cb9c:	f7e4 fbff 	bl	802139e <_write>
 803cba0:	1c43      	adds	r3, r0, #1
 803cba2:	d102      	bne.n	803cbaa <_write_r+0x1e>
 803cba4:	682b      	ldr	r3, [r5, #0]
 803cba6:	b103      	cbz	r3, 803cbaa <_write_r+0x1e>
 803cba8:	6023      	str	r3, [r4, #0]
 803cbaa:	bd38      	pop	{r3, r4, r5, pc}
 803cbac:	240387a8 	.word	0x240387a8

0803cbb0 <_close_r>:
 803cbb0:	b538      	push	{r3, r4, r5, lr}
 803cbb2:	4d06      	ldr	r5, [pc, #24]	; (803cbcc <_close_r+0x1c>)
 803cbb4:	2300      	movs	r3, #0
 803cbb6:	4604      	mov	r4, r0
 803cbb8:	4608      	mov	r0, r1
 803cbba:	602b      	str	r3, [r5, #0]
 803cbbc:	f7e4 fc0b 	bl	80213d6 <_close>
 803cbc0:	1c43      	adds	r3, r0, #1
 803cbc2:	d102      	bne.n	803cbca <_close_r+0x1a>
 803cbc4:	682b      	ldr	r3, [r5, #0]
 803cbc6:	b103      	cbz	r3, 803cbca <_close_r+0x1a>
 803cbc8:	6023      	str	r3, [r4, #0]
 803cbca:	bd38      	pop	{r3, r4, r5, pc}
 803cbcc:	240387a8 	.word	0x240387a8

0803cbd0 <_fstat_r>:
 803cbd0:	b538      	push	{r3, r4, r5, lr}
 803cbd2:	4d07      	ldr	r5, [pc, #28]	; (803cbf0 <_fstat_r+0x20>)
 803cbd4:	2300      	movs	r3, #0
 803cbd6:	4604      	mov	r4, r0
 803cbd8:	4608      	mov	r0, r1
 803cbda:	4611      	mov	r1, r2
 803cbdc:	602b      	str	r3, [r5, #0]
 803cbde:	f7e4 fc06 	bl	80213ee <_fstat>
 803cbe2:	1c43      	adds	r3, r0, #1
 803cbe4:	d102      	bne.n	803cbec <_fstat_r+0x1c>
 803cbe6:	682b      	ldr	r3, [r5, #0]
 803cbe8:	b103      	cbz	r3, 803cbec <_fstat_r+0x1c>
 803cbea:	6023      	str	r3, [r4, #0]
 803cbec:	bd38      	pop	{r3, r4, r5, pc}
 803cbee:	bf00      	nop
 803cbf0:	240387a8 	.word	0x240387a8

0803cbf4 <_isatty_r>:
 803cbf4:	b538      	push	{r3, r4, r5, lr}
 803cbf6:	4d06      	ldr	r5, [pc, #24]	; (803cc10 <_isatty_r+0x1c>)
 803cbf8:	2300      	movs	r3, #0
 803cbfa:	4604      	mov	r4, r0
 803cbfc:	4608      	mov	r0, r1
 803cbfe:	602b      	str	r3, [r5, #0]
 803cc00:	f7e4 fc05 	bl	802140e <_isatty>
 803cc04:	1c43      	adds	r3, r0, #1
 803cc06:	d102      	bne.n	803cc0e <_isatty_r+0x1a>
 803cc08:	682b      	ldr	r3, [r5, #0]
 803cc0a:	b103      	cbz	r3, 803cc0e <_isatty_r+0x1a>
 803cc0c:	6023      	str	r3, [r4, #0]
 803cc0e:	bd38      	pop	{r3, r4, r5, pc}
 803cc10:	240387a8 	.word	0x240387a8

0803cc14 <_lseek_r>:
 803cc14:	b538      	push	{r3, r4, r5, lr}
 803cc16:	4d07      	ldr	r5, [pc, #28]	; (803cc34 <_lseek_r+0x20>)
 803cc18:	4604      	mov	r4, r0
 803cc1a:	4608      	mov	r0, r1
 803cc1c:	4611      	mov	r1, r2
 803cc1e:	2200      	movs	r2, #0
 803cc20:	602a      	str	r2, [r5, #0]
 803cc22:	461a      	mov	r2, r3
 803cc24:	f7e4 fbfe 	bl	8021424 <_lseek>
 803cc28:	1c43      	adds	r3, r0, #1
 803cc2a:	d102      	bne.n	803cc32 <_lseek_r+0x1e>
 803cc2c:	682b      	ldr	r3, [r5, #0]
 803cc2e:	b103      	cbz	r3, 803cc32 <_lseek_r+0x1e>
 803cc30:	6023      	str	r3, [r4, #0]
 803cc32:	bd38      	pop	{r3, r4, r5, pc}
 803cc34:	240387a8 	.word	0x240387a8

0803cc38 <_read_r>:
 803cc38:	b538      	push	{r3, r4, r5, lr}
 803cc3a:	4d07      	ldr	r5, [pc, #28]	; (803cc58 <_read_r+0x20>)
 803cc3c:	4604      	mov	r4, r0
 803cc3e:	4608      	mov	r0, r1
 803cc40:	4611      	mov	r1, r2
 803cc42:	2200      	movs	r2, #0
 803cc44:	602a      	str	r2, [r5, #0]
 803cc46:	461a      	mov	r2, r3
 803cc48:	f7e4 fb8c 	bl	8021364 <_read>
 803cc4c:	1c43      	adds	r3, r0, #1
 803cc4e:	d102      	bne.n	803cc56 <_read_r+0x1e>
 803cc50:	682b      	ldr	r3, [r5, #0]
 803cc52:	b103      	cbz	r3, 803cc56 <_read_r+0x1e>
 803cc54:	6023      	str	r3, [r4, #0]
 803cc56:	bd38      	pop	{r3, r4, r5, pc}
 803cc58:	240387a8 	.word	0x240387a8

0803cc5c <_init>:
 803cc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803cc5e:	bf00      	nop
 803cc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803cc62:	bc08      	pop	{r3}
 803cc64:	469e      	mov	lr, r3
 803cc66:	4770      	bx	lr

0803cc68 <_fini>:
 803cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803cc6a:	bf00      	nop
 803cc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803cc6e:	bc08      	pop	{r3}
 803cc70:	469e      	mov	lr, r3
 803cc72:	4770      	bx	lr
